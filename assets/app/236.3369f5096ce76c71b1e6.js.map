{"version":3,"file":"236.3369f5096ce76c71b1e6.js","mappings":"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sCACA,SACA,UACA,YACA,oBACA,oBACA,qBACA,kBACA,aACA,aACA,cACA,WACA,QACA,UACA,aACA,oBACA,oBACA,sBACA,sBACA,uBACA,oBACA,qBACA,kBACA,aACA,aACA,cACA,WACA,SACA,aACA,WACA,WACA,mBACA,8BACA,WACA,KACA,oBACA,aACA,WACA,gBACA,MACA,WACA,OACA,YACA,cACA,UACA,OACA,OACA,UACA,UACA,YACA,YACA,YACA,YACA,YACA,gBACA,eACA,eACA,kBACA,yBACA,MACA,OACA,UACA,iBACA,OACA,SACA,aACA,eACA,UACA,aACA,gBACA,YACA,mBACA,UACA,YACA,QACA,YACA,cACA,OACA,OACA,OACA,OACA,WACA,aACA,UACA,YACA,MACA,MACA,WACA,aACA,WACA,WACA,MACA,aACA,MACA,aACA,WACA,mBACA,mBACA,aACA,kBACA,mBACA,SACA,eACA,MACA,aACA,aACA,cACA,sBACA,sBACA,uBACA,oBACA,WACA,kBACA,YACA,KACA,UACA,iBACA,cACA,SACA,gBACA,YACA,YACA,UACA,cACA,QACA,eACA,QACA,eACA,iBACA,eACA,iBACA,sBACA,sBACA,uBACA,oBACA,eACA,eACA,gBACA,aACA,QACA,SACA,SACA,WACA,iBACA,cACA,YACA,UACA,QACA,QACA,QACA,iBACA,eACA,MACA,OACA,YACA,UACA,WACA,SACA,MACA,OACA,UACA,UACA,YACA,aACA,eACA,WACA,aACA,UACA,WACA,iBACA,SACA,OACA,YACA,mBACA,cACA,kBACA,OACA,aACA,OACA,OACA,QACA,MACA,UACA,YACA,WACA,WACA,OACA,WACA,SACA,YACA,UACA,aACA,UACA,OACA,SACA,eACA,WACA,WACA,kBACA,oBACA,UACA,SACA,OACA,OACA,UACA,QACA,aACA,aACA,SACA,WACA,aACA,gBACA,kBACA,kBACA,SACA,SACA,OACA,MACA,OACA,WACA,cACA,qBACA,uBACA,SACA,eACA,gBACA,uBACA,MACA,YACA,aACA,KACA,WACA,aACA,oBACA,kBACA,gBACA,eACA,MACA,OACA,SACA,cACA,OACA,iBACA,eACA,cACA,eACA,eACA,eACA,SACA,aACA,eACA,iBACA,oBACA,eACA,YACA,cACA,eACA,cACA,aACA,UACA,OACA,SACA,OACA,oBACA,UACA,cACA,OACA,iBACA,SACA,QACA,QACA,SACA,WACA,SACA,WACA,cACA,gBACA,OACA,eACA,YACA,eACA,WACA,UACA,aACA,iBACA,UACA,WACA,UACA,QACA,MACA,KACA,OACA,QACA,aACA,aACA,KACA,YACA,OACA,MACA,aACA,SACA,aACA,gBACA,SACA,SACA,QACA,QACA,UACA,QACA,SACA,cACA,qBACA,uBACA,qBACA,gBACA,iBACA,WACA,OACA,QACA,WACA,cACA,cACA,gBACA,cACA,cACA,eACA,YACA,eACA,eACA,iBACA,cACA,kBACA,eACA,cACA,cACA,kBACA,UACA,QACA,SACA,aACA,QACA,UACA,YACA,UACA,OACA,aACA,QACA,YACA,cACA,cACA,cACA,gBACA,iBACA,cACA,kBACA,QACA,QACA,WACA,WACA,UACA,YACA,MACA,QACA,OACA,QACA,SACA,WACA,OACA,cACA,MACA,YACA,cACA,oBACA,WACA,UACA,SACA,SACA,MACA,WACA,MACA,aACA,MACA,WACA,SACA,SACA,gBACA,OACA,UACA,QACA,UACA,aACA,WACA,YACA,YACA,YACA,aACA,cACA,aACA,OACA,WACA,kBACA,SACA,QACA,OACA,WACA,UACA,UACA,iBACA,OACA,kBACA,kBACA,mBACA,gBACA,aACA,QACA,SACA,eACA,aACA,iBACA,OACA,MACA,aACA,QACA,UACA,YACA,OACA,cACA,cACA,gBACA,gBACA,SACA,WACA,SACA,SACA,SACA,QACA,UACA,YACA,aACA,mBACA,QACA,eACA,eACA,iBACA,WACA,SACA,eACA,OACA,QACA,SACA,eACA,aACA,gBACA,QACA,UACA,SACA,cACA,eACA,iBACA,gBACA,uBACA,WACA,SACA,QACA,gBACA,UACA,YACA,cACA,cACA,gBACA,YACA,YACA,QACA,QACA,eACA,iBACA,MACA,SACA,SACA,gBACA,kBACA,UACA,QACA,eACA,QACA,YACA,YACA,aACA,iBACA,gBACA,YACA,cACA,mBACA,QACA,OACA,cACA,gBACA,OACA,OACA,cACA,cACA,gBACA,UACA,YACA,QACA,eACA,eACA,KACA,SACA,WACA,kBACA,oBACA,QACA,aACA,cACA,KACA,SACA,UACA,QACA,UACA,SACA,eACA,gBACA,UACA,aACA,SACA,SACA,UACA,SACA,QACA,YACA,aACA,UACA,MACA,OACA,SACA,cACA,eACA,SACA,MACA,aACA,MACA,QACA,QACA,MACA,SACA,OACA,WACA,SACA,SACA,eACA,cACA,SACA,OACA,SACA,SACA,QACA,YACA,mBACA,eACA,iBACA,SACA,SACA,SACA,OACA,eACA,eACA,kBACA,gBACA,SACA,UACA,gBACA,WACA,SACA,UACA,cACA,UACA,WACA,QACA,QACA,UACA,aACA,UACA,WACA,iBACA,kBACA,cACA,gBACA,OACA,iBACA,kBACA,kBACA,mBACA,WACA,YACA,YACA,mBACA,oBACA,UACA,aACA,gBACA,UACA,QACA,UACA,SACA,WACA,iBACA,iBACA,OACA,YACA,kBACA,iBACA,cACA,SACA,QACA,eACA,gBACA,eACA,cACA,cACA,gBACA,OACA,cACA,gBACA,cACA,gBACA,cACA,qBACA,YACA,SACA,WACA,QACA,cACA,cACA,UACA,QACA,SACA,aACA,MACA,OACA,QACA,OACA,WACA,aACA,gBACA,WACA,cACA,aACA,KACA,WACA,UACA,YACA,cACA,gBACA,gBACA,gBACA,gBACA,gBACA,oBACA,mBACA,mBACA,sBACA,6BACA,aACA,cACA,gBACA,cACA,YACA,SACA,QACA,eACA,iBACA,kBACA,oBACA,OACA,cACA,cACA,aACA,YACA,eACA,YACA,YACA,QACA,cACA,kBACA,QACA,UACA,OACA,SACA,cACA,SACA,QACA,MACA,MACA,SACA,gBACA,eACA,KACA,SACA,UACA,iBACA,WACA,YACA,OACA,mBACA,aACA,SACA,SACA,aACA,WACA,SACA,MACA,MACA,OACA,cACA,gBACA,UACA,SACA,YACA,cACA,aACA,QACA,QACA,UACA,QACA,eACA,aACA,UACA,SACA,gBACA,eACA,QACA,eACA,OACA,KACA,uBACA,cACA,aACA,YACA,UACA,SACA,QACA,SACA,WACA,aACA,iBACA,OACA,cACA,eACA,iBACA,kBACA,kBACA,iBACA,UACA,MACA,YACA,aACA,aACA,UACA,SACA,OACA,cACA,eACA,sBACA,QACA,KACA,YACA,OACA,MACA,QACA,UACA,eACA,0CCtuBN,MAAMC,EACHvd,YAAYoC,GACT/B,KAAK+B,GAAKA,EACV/B,KAAKmd,OAAS,EACjB,CAEAC,SAASjW,EAAMgK,GACZnR,KAAKmd,OAAO7Y,KAAK,CAAE6C,KAAMA,EAAMgK,QAASA,GAC3C,CAEAkM,OACG,OAA6B,GAAtBrd,KAAKmd,OAAOhX,MACtB,CAEAqB,OACG,OAAOxH,KAAKmd,OAAOhX,OAAS,CAC/B,CAEAmX,qBACG,IAAI5F,EAAM,CACPnI,MAAO,eACPgO,kBAAmB,CAAC,GAGnBC,EAAO9F,EAAI6F,kBAOf,OALAvd,KAAKmd,OAAOlZ,SAASoG,IAClBmT,EAAKnT,EAAElD,MAAQqW,EAAKnT,EAAElD,OAAS,GAC/BqW,EAAKnT,EAAElD,MAAM7C,KAAK+F,EAAE,IAGhBqN,CACV,CAEAjQ,WAAWyC,GACR,IAAIuT,EAAOzd,KAAKsd,qBAChBtd,KAAK+B,GAAG2b,WAAWC,sBAAsBF,EAAMvT,EAClD,CAEA0T,WAAWC,EAAOC,GACf,IAAIL,EAAOzd,KAAKsd,qBAChBtd,KAAK+B,GAAG2b,WAAWK,sBAAsBN,EAAMI,EAAOC,EACzD,EAOH,MAAME,UAAkB,KACrBre,YAAYse,GACTne,MAAMme,GAGNje,KAAK8O,OAASA,EAAA,EAEd9O,KAAKke,MAAMC,cAAgB,IAK3Bne,KAAKyS,QAAU,EACfzS,KAAKoe,OAASA,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K,UACF97B,EAASnL,EAAQinC,EACjB,MACH,IAAK,gBACF97B,EAASnL,GAASinC,EAClB,MACH,IAAK,mBACF97B,EAASnL,GAASinC,EAClB,MACH,QACG97B,EAAS9N,KAAK8pC,gBAAgBnnC,EAAOksB,EAAM+a,GAIjD,OAAO97B,CACV,CAEAw7B,YAAY3mC,EAAOksB,EAAM+a,GACtB,IAAI97B,GAAS,EAKb,OAHAnL,EAAQonC,OAAOpnC,GACfinC,EAAeG,OAAOH,GAEd/a,GACL,IAAK,SACF/gB,EAASnL,GAASinC,EAClB,MACH,IAAK,YACF97B,EAASnL,GAASinC,EAClB,MACH,IAAK,OACF97B,EAASnL,EAAQinC,EACjB,MACH,IAAK,UACF97B,EAASnL,EAAQinC,EACjB,MACH,IAAK,gBACF97B,EAASnL,GAASinC,EAClB,MACH,IAAK,mBACF97B,EAASnL,GAASinC,EAClB,MACH,QACG97B,EAAS9N,KAAK8pC,gBAAgBnnC,EAAOksB,EAAM+a,GAIjD,OAAO97B,CACV,CAEAy7B,UAAU5mC,EAAOksB,EAAM+a,GACpB,IAAI97B,GAAS,EAMb,OAFKX,MAAMC,QAAQw8B,KAAeA,EAAe,CAACA,IAE1C/a,GACL,IAAK,SACElsB,IAAOmL,EAAS87B,EAAav8B,QAAQ1K,IAAU,GACnD,MACH,IAAK,YACSmL,GAAPnL,GAAgBinC,EAAav8B,QAAQ1K,GAAS,EAElD,MACH,QACGmL,EAAS9N,KAAK8pC,gBAAgBnnC,EAAOksB,EAAM+a,GAIjD,OAAO97B,CACV,CAEA07B,aAAa7mC,EAAOksB,EAAM+a,GAYvB,MARQ,WADA/a,EAEOlsB,GAASinC,EAGT5pC,KAAK8pC,gBAAgBnnC,EAAOksB,EAAM+a,EAKpD,CAEAH,UAAU9mC,EAAOksB,EAAM+a,GACpB,IAAKjnC,EAAO,OAAO,EACnB,IAAImL,GAAS,EAIb,OAAQ+gB,GACL,IAAK,kBACF/gB,EAASnL,GAAS3C,KAAKyS,QAAQhC,SAC/B,MACH,IAAK,sBACF3C,EAASnL,GAAS3C,KAAKyS,QAAQhC,SAC/B,MACH,IAAK,uBAC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SACF/gB,EAASnL,GAASinC,EAClB,MACH,IAAK,YACF97B,EAASnL,GAASinC,EAClB,MACH,IAAK,OACF97B,EAASnL,EAAQinC,EACjB,MACH,IAAK,UACF97B,EAASnL,EAAQinC,EACjB,MACH,IAAK,gBACF97B,EAASnL,GAASinC,EAClB,MACH,IAAK,mBACF97B,EAASnL,GAASinC,EAClB,MACH,QACG97B,EAAStM,EAAO0wC,WAAW/kB,EAAS0B,EAAM+a,GAIhD,OAAO97B,CACV,EAEAw7B,YAAa,SAAUnc,EAASvnB,EAAOipB,EAAM+a,GAC1C,IAAI97B,GAAS,EAETnL,EAAQwlC,EAAYhb,EAASvnB,GAIjC,OAHAjD,EAAQonC,OAAOpnC,GACfinC,EAAeG,OAAOH,GAEd/a,GACL,IAAK,SACF/gB,EAASnL,GAASinC,EAClB,MACH,IAAK,YACF97B,EAASnL,GAASinC,EAClB,MACH,IAAK,OACF97B,EAASnL,EAAQinC,EACjB,MACH,IAAK,UACF97B,EAASnL,EAAQinC,EACjB,MACH,IAAK,gBACF97B,EAASnL,GAASinC,EAClB,MACH,IAAK,mBACF97B,EAASnL,GAASinC,EAClB,MACH,QACG97B,EAAStM,EAAO0wC,WAAW/kB,EAAS0B,EAAM+a,GAIhD,OAAO97B,CACV,EAEAy7B,UAAW,SAAUpc,EAASvnB,EAAOipB,EAAM+a,GACxC,IAAI97B,GAAS,EAETnL,EAAQwlC,EAAYhb,EAASvnB,GAOjC,OANIjD,GAASA,EAAMoV,cAAapV,EAAQA,EAAMoV,eAE9C6xB,EAAeA,EAAa7xB,cAEvB5K,MAAMC,QAAQw8B,KAAeA,EAAe,CAACA,IAE1C/a,GACL,IAAK,SACElsB,IAAOmL,EAAS87B,EAAav8B,QAAQ1K,IAAU,GACnD,MACH,IAAK,YACSmL,GAAPnL,GAAgBinC,EAAav8B,QAAQ1K,GAAS,EAElD,MACH,QACGmL,EAAStM,EAAO0wC,WAAW/kB,EAAS0B,EAAM+a,GAIhD,OAAO97B,CACV,EAEA07B,aAAc,SAAUrc,EAASvnB,EAAOipB,EAAM+a,GAC3C,IAAI97B,G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","sources":["webpack://ab_platform_web/./ABDesigner/ab_work_object_workspace_popupNewDataField.js","webpack://ab_platform_web/./ABDesigner/ab_work_object_workspace_popupSortFields.js","webpack://ab_platform_web/./resources/Account.js","webpack://ab_platform_web/./AppBuilder/_factory_utils/Dialog.js","webpack://ab_platform_web/./resources/Multilingual.js","webpack://ab_platform_web/./resources/NetworkRest.js","webpack://ab_platform_web/./resources/NetworkRestSocket.js","webpack://ab_platform_web/./resources/Network.js","webpack://ab_platform_web/./resources/StorageLocal.js","webpack://ab_platform_web/./resources/Storage.js","webpack://ab_platform_web/./resources/Tenant.js","webpack://ab_platform_web/./AppBuilder/uiSettings/configDesktop.js","webpack://ab_platform_web/./AppBuilder/uiSettings/configMobile.js","webpack://ab_platform_web/./AppBuilder/uiSettings/config.js","webpack://ab_platform_web/./AppBuilder/uiSettings/icons.js","webpack://ab_platform_web/./AppBuilder/ABFactory.js","webpack://ab_platform_web/./AppBuilder/core/ABApplicationCore.js","webpack://ab_platform_web/./AppBuilder/core/ABDataCollectionCore.js","webpack://ab_platform_web/./AppBuilder/core/ABDefinitionCore.js","webpack://ab_platform_web/./AppBuilder/core/ABFactoryCore.js","webpack://ab_platform_web/./AppBuilder/core/ABFieldManager.js","webpack://ab_platform_web/./AppBuilder/core/ABIndexCore.js","webpack://ab_platform_web/./AppBuilder/core/ABMLClassCore.js","webpack://ab_platform_web/./AppBuilder/core/ABModelCore.js","webpack://ab_platform_web/./AppBuilder/core/ABObjectCore.js","webpack://ab_platform_web/./AppBuilder/core/ABObjectQueryCore.js","webpack://ab_platform_web/./AppBuilder/core/ABProcessCore.js","webpack://ab_platform_web/./AppBuilder/core/ABViewManagerCore.js","webpack://ab_platform_web/./AppBuilder/core/FilterComplexCore.js","webpack://ab_platform_web/./AppBuilder/core/RowFilterCore.js","webpack://ab_platform_web/./AppBuilder/core/dataFields/ABFieldAutoIndexCore.js","webpack://ab_platform_web/./AppBuilder/core/dataFields/ABFieldBooleanCore.js","webpack://ab_platform_web/./AppBuilder/core/dataFields/ABFieldCalculateCore.js","webpack://ab_platform_web/./AppBuilder/core/dataFields/ABFieldCombineCore.js","webpack://ab_platform_web/./AppBuilder/core/dataFields/ABFieldConnectCore.js","webpack://ab_platform_web/./AppBuilder/core/dataFields/ABFieldCore.js","webpack://ab_platform_web/./AppBuilder/core/dataFields/ABFieldDateCore.js","webpack://ab_platform_web/./AppBuilder/core/dataFields/ABFieldDateTimeCore.js","webpack://ab_platform_web/./AppBuilder/core/dataFields/ABFieldEmailCore.js","webpack://ab_platform_web/./AppBuilder/core/dataFields/ABFieldFileCore.js","webpack://ab_platform_web/./AppBuilder/core/dataFields/ABFieldFormulaCore.js","webpack://ab_platform_web/./AppBuilder/core/dataFields/ABFieldImageCore.js","webpack://ab_platform_web/./AppBuilder/core/dataFields/ABFieldJsonCore.js","webpack://ab_platform_web/./AppBuilder/core/dataFields/ABFieldListCore.js","webpack://ab_platform_web/./AppBuilder/core/dataFields/ABFieldLongTextCore.js","webpack://ab_platform_web/./AppBuilder/core/dataFields/ABFieldNumberCore.js","webpack://ab_platform_web/./AppBuilder/core/dataFields/ABFieldStringCore.js","webpack://ab_platform_web/./AppBuilder/core/dataFields/ABFieldTextFormulaCore.js","webpack://ab_platform_web/./AppBuilder/core/dataFields/ABFieldTreeCore.js","webpack://ab_platform_web/./AppBuilder/core/dataFields/ABFieldUserCore.js","webpack://ab_platform_web/./AppBuilder/core/process/ABProcessLaneCore.js","webpack://ab_platform_web/./AppBuilder/core/process/ABProcessParticipantCore.js","webpack://ab_platform_web/./AppBuilder/core/process/ABProcessTaskManager.js","webpack://ab_platform_web/./AppBuilder/core/process/tasks/ABProcessElementCore.js","webpack://ab_platform_web/./AppBuilder/core/process/tasks/ABProcessEndCore.js","webpack://ab_platform_web/./AppBuilder/core/process/tasks/ABProcessGatewayExclusiveCore.js","webpack://ab_platform_web/./AppBuilder/core/process/tasks/ABProcessTaskEmailCore.js","webpack://ab_platform_web/./AppBuilder/core/process/tasks/ABProcessTaskServiceAccountingBatchProcessingCore.js","webpack://ab_platform_web/./AppBuilder/core/process/tasks/ABProcessTaskServiceAccountingFPCloseCore.js","webpack://ab_platform_web/./AppBuilder/core/process/tasks/ABProcessTaskServiceAccountingFPYearCloseCore.js","webpack://ab_platform_web/./AppBuilder/core/process/tasks/ABProcessTaskServiceAccountingJEArchiveCore.js","webpack://ab_platform_web/./AppBuilder/core/process/tasks/ABProcessTaskServiceCalculateCore.js","webpack://ab_platform_web/./AppBuilder/core/process/tasks/ABProcessTaskServiceCore.js","webpack://ab_platform_web/./AppBuilder/core/process/tasks/ABProcessTaskServiceGetResetPasswordUrlCore.js","webpack://ab_platform_web/./AppBuilder/core/process/tasks/ABProcessTaskServiceInsertRecordCore.js","webpack://ab_platform_web/./AppBuilder/core/process/tasks/ABProcessTaskServiceQueryCore.js","webpack://ab_platform_web/./AppBuilder/core/process/tasks/ABProcessTaskSubProcessCore.js","webpack://ab_platform_web/./AppBuilder/core/process/tasks/ABProcessTaskUserApprovalCore.js","webpack://ab_platform_web/./AppBuilder/core/process/tasks/ABProcessTaskUserCore.js","webpack://ab_platform_web/./AppBuilder/core/process/tasks/ABProcessTaskUserExternalCore.js","webpack://ab_platform_web/./AppBuilder/core/process/tasks/ABProcessTriggerCore.js","webpack://ab_platform_web/./AppBuilder/core/process/tasks/ABProcessTriggerLifecycleCore.js","webpack://ab_platform_web/./AppBuilder/core/process/tasks/ABProcessTriggerTimerCore.js","webpack://ab_platform_web/./AppBuilder/core/ql/ABQLCore.js","webpack://ab_platform_web/./AppBuilder/core/ql/ABQLFindCore.js","webpack://ab_platform_web/./AppBuilder/core/ql/ABQLManagerCore.js","webpack://ab_platform_web/./AppBuilder/core/ql/ABQLRootObjectCore.js","webpack://ab_platform_web/./AppBuilder/core/ql/ABQLRow.js","webpack://ab_platform_web/./AppBuilder/core/ql/ABQLRowPluckCore.js","webpack://ab_platform_web/./AppBuilder/core/ql/ABQLRowUpdateCore.js","webpack://ab_platform_web/./AppBuilder/core/ql/ABQLSet.js","webpack://ab_platform_web/./AppBuilder/core/ql/ABQLSetFirstCore.js","webpack://ab_platform_web/./AppBuilder/core/ql/ABQLSetPluckCore.js","webpack://ab_platform_web/./AppBuilder/core/ql/ABQLSetSaveCore.js","webpack://ab_platform_web/./AppBuilder/core/ql/ABQLValue.js","webpack://ab_platform_web/./AppBuilder/core/ql/ABQLValueSaveCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewCSVExporterCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewCSVImporterCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewCarouselCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewChartAreaCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewChartBarCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewChartCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewChartLineCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewChartPieCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewCommentCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewConditionalContainerCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewConnectDataFilterCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewContainerCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewDataviewCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewDetailCheckboxCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewDetailComponentCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewDetailConnectCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewDetailCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewDetailCustomCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewDetailImageCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewDetailTextCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewDetailTreeCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewDocxBuilderCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewFormButtonCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewFormCheckboxCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewFormComponentCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewFormConnectCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewFormCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewFormCustomCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewFormDatepickerCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewFormNumberCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewFormReadonlyCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewFormSelectMultipleCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewFormSelectSingleCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewFormTextboxCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewFormTreeCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewGanttCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewGridCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewImageCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewKanbanCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewLabelCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewLayoutCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewListCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewMenuCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewPageCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewPivotCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewReportsManagerCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewTabCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewTextCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewWidgetCore.js","webpack://ab_platform_web/./AppBuilder/platform/ABApplication.js","webpack://ab_platform_web/./AppBuilder/platform/ABComponent.js","webpack://ab_platform_web/./AppBuilder/platform/ABDataCollection.js","webpack://ab_platform_web/./AppBuilder/platform/ABDefinition.js","webpack://ab_platform_web/./AppBuilder/platform/ABEmitter.js","webpack://ab_platform_web/./AppBuilder/platform/ABIndex.js","webpack://ab_platform_web/./AppBuilder/platform/ABMLClass.js","webpack://ab_platform_web/./AppBuilder/platform/ABModel.js","webpack://ab_platform_web/./AppBuilder/platform/ABModelQuery.js","webpack://ab_platform_web/./AppBuilder/platform/ABObject.js","webpack://ab_platform_web/./AppBuilder/platform/ABObjectExternal.js","webpack://ab_platform_web/./AppBuilder/platform/ABObjectImport.js","webpack://ab_platform_web/./AppBuilder/platform/ABObjectQuery.js","webpack://ab_platform_web/./AppBuilder/platform/ABProcess.js","webpack://ab_platform_web/./AppBuilder/platform/ABViewManager.js","webpack://ab_platform_web/./AppBuilder/platform/CSVImporter.js","webpack://ab_platform_web/./AppBuilder/platform/FilterComplex.js","webpack://ab_platform_web/./AppBuilder/platform/RowFilter.js","webpack://ab_platform_web/./AppBuilder/platform/RowUpdater.js","webpack://ab_platform_web/./AppBuilder/platform/dataFields/ABField.js","webpack://ab_platform_web/./AppBuilder/platform/dataFields/ABFieldAutoIndex.js","webpack://ab_platform_web/./AppBuilder/platform/dataFields/ABFieldBoolean.js","webpack://ab_platform_web/./AppBuilder/platform/dataFields/ABFieldCalculate.js","webpack://ab_platform_web/./AppBuilder/platform/dataFields/ABFieldCombine.js","webpack://ab_platform_web/./AppBuilder/platform/dataFields/ABFieldConnect.js","webpack://ab_platform_web/./AppBuilder/platform/dataFields/ABFieldDate.js","webpack://ab_platform_web/./AppBuilder/platform/dataFields/ABFieldDateTime.js","webpack://ab_platform_web/./AppBuilder/platform/dataFields/ABFieldEmail.js","webpack://ab_platform_web/./AppBuilder/platform/dataFields/ABFieldFile.js","webpack://ab_platform_web/./AppBuilder/platform/dataFields/ABFieldFormula.js","webpack://ab_platform_web/./AppBuilder/platform/dataFields/ABFieldImage.js","webpack://ab_platform_web/./AppBuilder/platform/dataFields/ABFieldJson.js","webpack://ab_platform_web/./AppBuilder/platform/dataFields/ABFieldList.js","webpack://ab_platform_web/./AppBuilder/platform/dataFields/ABFieldLongText.js","webpack://ab_platform_web/./AppBuilder/platform/dataFields/ABFieldNumber.js","webpack://ab_platform_web/./AppBuilder/platform/dataFields/ABFieldSelectivity.js","webpack://ab_platform_web/./AppBuilder/platform/dataFields/ABFieldString.js","webpack://ab_platform_web/./AppBuilder/platform/dataFields/ABFieldTextFormula.js","webpack://ab_platform_web/./AppBuilder/platform/dataFields/ABFieldTree.js","webpack://ab_platform_web/./AppBuilder/platform/dataFields/ABFieldUser.js","webpack://ab_platform_web/./AppBuilder/platform/process/ABProcessLane.js","webpack://ab_platform_web/./AppBuilder/platform/process/ABProcessParticipant.js","webpack://ab_platform_web/./AppBuilder/platform/process/tasks/ABProcessElement.js","webpack://ab_platform_web/./AppBuilder/platform/process/tasks/ABProcessEnd.js","webpack://ab_platform_web/./AppBuilder/platform/process/tasks/ABProcessGatewayExclusive.js","webpack://ab_platform_web/./AppBuilder/platform/process/tasks/ABProcessTaskEmail.js","webpack://ab_platform_web/./AppBuilder/platform/process/tasks/ABProcessTaskService.js","webpack://ab_platform_web/./AppBuilder/platform/process/tasks/ABProcessTaskServiceAccountingBatchProcessing.js","webpack://ab_platform_web/./AppBuilder/platform/process/tasks/ABProcessTaskServiceAccountingFPClose.js","webpack://ab_platform_web/./AppBuilder/platform/process/tasks/ABProcessTaskServiceAccountingFPYearClose.js","webpack://ab_platform_web/./AppBuilder/platform/process/tasks/ABProcessTaskServiceAccountingJEArchive.js","webpack://ab_platform_web/./AppBuilder/platform/process/tasks/ABProcessTaskServiceCalculate.js","webpack://ab_platform_web/./AppBuilder/platform/process/tasks/ABProcessTaskServiceGetResetPasswordUrl.js","webpack://ab_platform_web/./AppBuilder/platform/process/tasks/ABProcessTaskServiceInsertRecord.js","webpack://ab_platform_web/./AppBuilder/platform/process/tasks/ABProcessTaskServiceQuery.js","webpack://ab_platform_web/./AppBuilder/platform/process/tasks/ABProcessTaskSubProcess.js","webpack://ab_platform_web/./AppBuilder/platform/process/tasks/ABProcessTaskUser.js","webpack://ab_platform_web/./AppBuilder/platform/process/tasks/ABProcessTaskUserApproval.js","webpack://ab_platform_web/./AppBuilder/platform/process/tasks/ABProcessTaskUserExternal.js","webpack://ab_platform_web/./AppBuilder/platform/process/tasks/ABProcessTrigger.js","webpack://ab_platform_web/./AppBuilder/platform/process/tasks/ABProcessTriggerLifecycle.js","webpack://ab_platform_web/./AppBuilder/platform/process/tasks/ABProcessTriggerTimer.js","webpack://ab_platform_web/./AppBuilder/platform/ql/ABQL.js","webpack://ab_platform_web/./AppBuilder/platform/ql/ABQLFind.js","webpack://ab_platform_web/./AppBuilder/platform/ql/ABQLManager.js","webpack://ab_platform_web/./AppBuilder/platform/ql/ABQLRootObject.js","webpack://ab_platform_web/./AppBuilder/platform/ql/ABQLRowPluck.js","webpack://ab_platform_web/./AppBuilder/platform/ql/ABQLRowSave.js","webpack://ab_platform_web/./AppBuilder/platform/ql/ABQLRowUpdate.js","webpack://ab_platform_web/./AppBuilder/platform/ql/ABQLSetFirst.js","webpack://ab_platform_web/./AppBuilder/platform/ql/ABQLSetPluck.js","webpack://ab_platform_web/./AppBuilder/platform/ql/ABQLSetSave.js","webpack://ab_platform_web/./AppBuilder/platform/ql/ABQLValueSave.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABView.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewCSVExporter.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewCSVImporter.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewCarousel.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewChart.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewChartArea.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewChartBar.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewChartComponent.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewChartLine.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewChartPie.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewComment.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewComponent.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewConditionalContainer.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewConnectDataFilter.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewContainer.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewDataview.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewDetail.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewDetailCheckbox.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewDetailComponent.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewDetailConnect.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewDetailCustom.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewDetailImage.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewDetailText.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewDetailTree.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewDocxBuilder.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewForm.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewFormButton.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewFormCheckbox.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewFormComponent.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewFormConnect.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewFormCustom.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewFormDatepicker.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewFormNumber.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewFormReadonly.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewFormSelectMultiple.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewFormSelectSingle.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewFormTextbox.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewFormTree.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewGantt.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewGridPopupExport.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewGridPopupMassUpdate.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewGridPopupSortFields.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewGrid.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewImage.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewKanban.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewKanbanFormSidePanel.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewLabel.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewLayout.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewList.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewMenu.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewPage.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewPivot.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewReportsManager.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewTab.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewText.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewWidget.js","webpack://ab_platform_web/./AppBuilder/platform/views/viewProperties/ABViewProperty.js","webpack://ab_platform_web/./AppBuilder/platform/views/viewProperties/ABViewPropertyAddPage.js","webpack://ab_platform_web/./AppBuilder/platform/views/viewProperties/ABViewPropertyEditPage.js","webpack://ab_platform_web/./AppBuilder/platform/views/viewProperties/ABViewPropertyFilterData.js","webpack://ab_platform_web/./AppBuilder/platform/views/viewProperties/ABViewPropertyLinkPage.js","webpack://ab_platform_web/./AppBuilder/platform/workspaceViews/ABObjectWorkspaceView.js","webpack://ab_platform_web/./AppBuilder/platform/workspaceViews/ABObjectWorkspaceViewCollection.js","webpack://ab_platform_web/./AppBuilder/platform/workspaceViews/ABObjectWorkspaceViewComponent.js","webpack://ab_platform_web/./AppBuilder/platform/workspaceViews/ABObjectWorkspaceViewGantt.js","webpack://ab_platform_web/./AppBuilder/platform/workspaceViews/ABObjectWorkspaceViewGrid.js","webpack://ab_platform_web/./AppBuilder/platform/workspaceViews/ABObjectWorkspaceViewKanban.js","webpack://ab_platform_web/./AppBuilder/rules/ABViewQueryBuilderObjectFieldConditions.js","webpack://ab_platform_web/./AppBuilder/rules/ABViewRule.js","webpack://ab_platform_web/./AppBuilder/rules/ABViewRuleAction.js","webpack://ab_platform_web/./AppBuilder/rules/ABViewRuleList.js","webpack://ab_platform_web/./AppBuilder/rules/ABViewRuleListFormRecordRules.js","webpack://ab_platform_web/./AppBuilder/rules/ABViewRuleListFormSubmitRules.js","webpack://ab_platform_web/./AppBuilder/rules/ruleActions/ABViewRuleActionFormRecordRuleInsertConnected.js","webpack://ab_platform_web/./AppBuilder/rules/ruleActions/ABViewRuleActionFormRecordRuleRemoveConnected.js","webpack://ab_platform_web/./AppBuilder/rules/ruleActions/ABViewRuleActionFormRecordRuleUpdate.js","webpack://ab_platform_web/./AppBuilder/rules/ruleActions/ABViewRuleActionFormRecordRuleUpdateConnected.js","webpack://ab_platform_web/./AppBuilder/rules/ruleActions/ABViewRuleActionFormSubmitRuleClosePopup.js","webpack://ab_platform_web/./AppBuilder/rules/ruleActions/ABViewRuleActionFormSubmitRuleConfirmMessage.js","webpack://ab_platform_web/./AppBuilder/rules/ruleActions/ABViewRuleActionFormSubmitRuleEmail.js","webpack://ab_platform_web/./AppBuilder/rules/ruleActions/ABViewRuleActionFormSubmitRuleExistPage.js","webpack://ab_platform_web/./AppBuilder/rules/ruleActions/ABViewRuleActionFormSubmitRuleParentPage.js","webpack://ab_platform_web/./AppBuilder/rules/ruleActions/ABViewRuleActionFormSubmitRuleWebsite.js","webpack://ab_platform_web/./AppBuilder/rules/ruleActions/ABViewRuleActionObjectUpdater.js","webpack://ab_platform_web/./js/docxtemplater-image-module.v3.0.2.min.js","webpack://ab_platform_web/./js/docxtemplater.v3.0.12.min.js","webpack://ab_platform_web/./js/jszip.min.js","webpack://ab_platform_web/./node_modules/moment/locale/ sync ^\\.\\/.*$","webpack://ab_platform_web/./webix_custom_components/activelist.js","webpack://ab_platform_web/./webix_custom_components/countfooter.js","webpack://ab_platform_web/./webix_custom_components/customComponentManager.js","webpack://ab_platform_web/./webix_custom_components/datetimepicker.js","webpack://ab_platform_web/./webix_custom_components/editlist.js","webpack://ab_platform_web/./webix_custom_components/edittree.js","webpack://ab_platform_web/./webix_custom_components/editunitlist.js","webpack://ab_platform_web/./webix_custom_components/focusableTemplate.js","webpack://ab_platform_web/./webix_custom_components/formioBuilder.js","webpack://ab_platform_web/./webix_custom_components/formioPreview.js","webpack://ab_platform_web/./webix_custom_components/numbertext.js","webpack://ab_platform_web/./webix_custom_components/timepicker.js","webpack://ab_platform_web/./webix_custom_components/totalfooter.js","webpack://ab_platform_web/./webix_custom_components/treesuggest.js"],"sourcesContent":["/*\n * ab_work_object_workspace_popupNewDataField\n *\n * Manage the Add New Data Field popup.\n *\n */\n\nconst ABComponent = require(\"../AppBuilder/platform/ABComponent\");\nconst ABFieldManager = require(\"../AppBuilder/core/ABFieldManager\");\n\nmodule.exports = class AB_Work_Object_Workspace_PopupNewDataField extends (\n   ABComponent\n) {\n   //.extend(idBase, function(App) {\n\n   constructor(App, idBase) {\n      idBase = idBase || \"ab_work_object_workspace_popupNewDataField\";\n\n      super(App, idBase);\n      var L = this.Label();\n\n      // internal list of Webix IDs to reference our UI components.\n      var ids = {\n         component: this.unique(`${idBase}_popNewField`),\n         types: this.unique(`${idBase}_popNewField_types`),\n         editDefinitions: this.unique(`${idBase}_popNewField_editDefinitions`),\n\n         buttonSave: this.unique(`${idBase}_popNewField_buttonSave`),\n         buttonCancel: this.unique(`${idBase}_popNewField_buttonCancel`),\n      };\n\n      // Our webix UI definition:\n      this.ui = {\n         view: \"window\",\n         position: \"center\",\n         id: ids.component,\n         resize: true,\n         modal: true,\n         height: 500,\n         width: 700,\n         head: {\n            view: \"toolbar\",\n            css: \"webix_dark\",\n            cols: [\n               {\n                  view: \"label\",\n                  label: L(\"Add new field\"),\n                  css: \"modal_title\",\n                  align: \"center\",\n               },\n               {\n                  view: \"button\",\n                  label: L(\"Close\"),\n                  autowidth: true,\n                  align: \"center\",\n                  click: function () {\n                     _logic.buttonCancel();\n                  },\n               },\n            ],\n         },\n         // ready: function () {\n         //  console.error('ready() called!!!')\n         //  _logic.resetState();\n         // },\n\n         body: {\n            view: \"scrollview\",\n            scroll: \"y\",\n            css: \"ab-add-fields-popup\",\n            borderless: true,\n            body: {\n               type: \"form\",\n               rows: [\n                  {\n                     view: \"richselect\",\n                     id: ids.types,\n                     label: L(\"Field type\"),\n                     labelWidth: this.AB.UISettings.config().labelWidthLarge,\n                     options: [\n                        //We will add these later\n                        { id: \"temporary\", view: \"temporary\" },\n                     ],\n                     on: {\n                        onChange: function (id, ev, node) {\n                           _logic.onChange(id);\n                        },\n                     },\n                  },\n                  {\n                     height: 10,\n                     type: \"line\",\n                  },\n                  {\n                     view: \"multiview\",\n                     id: ids.editDefinitions,\n                     padding: 0,\n                     // NOTE: can't leave this an empty []. We redefine this value later.\n                     cells: [\n                        {\n                           id: \"del_me\",\n                           view: \"label\",\n                           label: L(\"edit definition here\"),\n                        },\n                     ],\n                  },\n                  { height: 10 },\n                  {\n                     cols: [\n                        { fillspace: true },\n                        {\n                           view: \"button\",\n                           value: L(\"Cancel\"),\n                           css: \"ab-cancel-button\",\n                           autowidth: true,\n                           click: function () {\n                              _logic.buttonCancel();\n                           },\n                        },\n                        {\n                           view: \"button\",\n                           css: \"webix_primary\",\n                           id: ids.buttonSave,\n                           label: L(\"Add Column\"),\n                           autowidth: true,\n                           type: \"form\",\n                           click: function () {\n                              _logic.buttonSave();\n                           },\n                        },\n                     ],\n                  },\n               ],\n            },\n         },\n         on: {\n            //onBeforeShow: function () {\n            //  _logic.resetState();\n            //},\n            onHide: function () {\n               _logic.resetState();\n            },\n         },\n      };\n\n      var _objectHash = {}; // 'name' => ABFieldXXX object\n      var _componentHash = {}; // 'name' => ABFieldXXX ui component\n      var _componentsByType = {}; // 'type' => ABFieldXXX ui component\n      var _currentEditor = null;\n      var _currentApplication = null;\n      var _currentObject = null;\n\n      var defaultEditorComponent = null; // the default editor.\n      var defaultEditorID = null; // the default editor id.\n      var submenus = []; // Create the submenus for our Data Fields:\n\n      var _editField = null; // field instance being edited\n\n      // Our init() function for setting up our UI\n      this.init = (options) => {\n         // register our callbacks:\n         for (let c in _logic.callbacks) {\n            _logic.callbacks[c] = options[c] || _logic.callbacks[c];\n         }\n\n         // initialize our components\n         webix.ui(this.ui);\n         webix.extend($$(ids.component), webix.ProgressBar);\n\n         var Fields = ABFieldManager.allFields();\n\n         //// we need to load a submenu entry and an editor definition for each\n         //// of our Fields\n\n         var newEditorList = {\n            view: \"multiview\",\n            id: ids.editDefinitions,\n            animate: false,\n            rows: [],\n         };\n\n         Fields.forEach(function (F) {\n            var menuName = F.defaults().menuName;\n            var key = F.defaults().key;\n\n            // add a submenu for the fields multilingual key\n            submenus.push({ id: menuName, value: menuName });\n\n            // Add the Field's definition editor here:\n            var editorComponent = F.propertiesComponent(App, idBase);\n            if (!defaultEditorComponent) {\n               defaultEditorComponent = editorComponent;\n               defaultEditorID = menuName;\n            }\n            newEditorList.rows.push(editorComponent.ui);\n\n            _objectHash[menuName] = F;\n            _componentHash[menuName] = editorComponent;\n            _componentsByType[key] = editorComponent;\n         });\n\n         // the submenu button has a placeholder we need to remove and update\n         // with one that has all our submenus in it.\n         // var firstID = $$(ids.types).getFirstId();\n         // $$(ids.types).updateItem(firstID, {\n         //  value: labels.component.chooseType,\n         //  submenu: submenus\n         // })\n         $$(ids.types).define(\"options\", submenus);\n         $$(ids.types).refresh();\n\n         // now remove the 'del_me' definition editor placeholder.\n         webix.ui(newEditorList, $$(ids.editDefinitions));\n\n         // init & hide all the unused editors:\n         for (let c in _componentHash) {\n            _componentHash[c].init();\n\n            _componentHash[c].hide();\n         }\n\n         defaultEditorComponent.show(); // show the default editor\n         _currentEditor = defaultEditorComponent;\n\n         // set the richselect to the first option by default.\n         $$(ids.types).setValue(submenus[0].id);\n\n         // $$(ids.editDefinitions).show();\n\n         // $$(ids.editDefinitions).cells() // define the edit Definitions here.\n      };\n\n      // our internal business logic\n      var _logic = (this._logic = {\n         applicationLoad: (application) => {\n            _currentApplication = application;\n\n            // TODO : should load ABApplication to data field popup here ?\n            for (var menuName in _componentHash) {\n               if (\n                  _componentHash[menuName] &&\n                  _componentHash[menuName]._logic.applicationLoad\n               ) {\n                  _componentHash[menuName]._logic.applicationLoad(application);\n               }\n            }\n         },\n\n         objectLoad: (object) => {\n            _currentObject = object;\n\n            // TODO : should load current object to data field popup here ?\n            for (var menuName in _componentHash) {\n               if (\n                  _componentHash[menuName] &&\n                  _componentHash[menuName]._logic.objectLoad\n               ) {\n                  _componentHash[menuName]._logic.objectLoad(_currentObject);\n               }\n            }\n         },\n\n         buttonCancel: function () {\n            _logic.resetState();\n\n            // clear all editors:\n            for (var c in _componentHash) {\n               _componentHash[c].clear();\n            }\n\n            // hide this popup.\n            $$(ids.component).hide();\n         },\n\n         buttonSave: async function () {\n            $$(ids.buttonSave).disable();\n            // show progress\n            $$(ids.component).showProgress();\n\n            var editor = _currentEditor;\n            if (editor) {\n               // the editor can define some basic form validations.\n               if (editor.isValid()) {\n                  var vals = this.AB.cloneDeep(editor.values());\n\n                  var field = null;\n                  var oldData = null;\n\n                  var linkCol;\n\n                  // if this is an ADD operation, (_editField will be undefined)\n                  if (!_editField) {\n                     // get a new instance of a field:\n                     field = _currentObject.fieldNew(vals);\n\n                     // Provide a default width based on the column label\n                     var width = 20 + field.label.length * 10;\n                     if (field.settings.showIcon) {\n                        width = width + 20;\n                     }\n                     if (width < 100) {\n                        width = 100;\n                     }\n\n                     field.settings.width = width;\n\n                     // TODO workaround : where should I add a new link field to link object\n                     if (field.key == \"connectObject\") {\n                        let rand = Math.floor(Math.random() * 1000);\n                        field.settings.isSource = 1;\n\n                        var linkObject = field.datasourceLink;\n\n                        // 1:1, 1:M, M:1 should have same column name\n                        let linkColumnName = field.columnName;\n\n                        // check duplicate column\n                        if (\n                           linkObject.fields(\n                              (f) => f.columnName == linkColumnName\n                           ).length\n                        ) {\n                           linkColumnName = `${linkColumnName}${rand}`;\n                        }\n\n                        // M:N should have different column name into the join table\n                        if (\n                           field.settings.linkType == \"many\" &&\n                           field.settings.linkViaType == \"many\"\n                        ) {\n                           // NOTE : include random number to prevent duplicate column names\n                           linkColumnName = `${_currentObject.name}${rand}`;\n                        }\n\n                        linkCol = linkObject.fieldNew({\n                           // id: OP.Util.uuid(),\n\n                           key: field.key,\n\n                           columnName: linkColumnName,\n                           label: _currentObject.label,\n\n                           settings: {\n                              showIcon: field.settings.showIcon,\n\n                              linkObject: field.object.id,\n                              linkType: field.settings.linkViaType,\n                              linkViaType: field.settings.linkType,\n                              isCustomFK: field.settings.isCustomFK,\n                              indexField: field.settings.indexField,\n                              indexField2: field.settings.indexField2,\n                              isSource: 0,\n                              width: width,\n                           },\n                        });\n\n                        // Update link column id to source column\n                        // field.settings.linkColumn = linkCol.id;\n                     }\n                  } else {\n                     // NOTE: update label before .toObj for .unTranslate to .translations\n                     if (vals.label) _editField.label = vals.label;\n\n                     // use our _editField, backup our oldData\n                     oldData = _editField.toObj();\n\n                     // update changed values to old data\n                     var updateValues = this.AB.cloneDeep(oldData);\n                     for (let key in vals) {\n                        // update each values of .settings\n                        if (\n                           key == \"settings\" &&\n                           vals[\"settings\"] &&\n                           typeof vals[\"settings\"] == \"object\"\n                        ) {\n                           updateValues[\"settings\"] =\n                              updateValues[\"settings\"] || {};\n\n                           for (let keySetting in vals[\"settings\"]) {\n                              updateValues[\"settings\"][keySetting] =\n                                 vals[\"settings\"][keySetting];\n                           }\n                        } else {\n                           updateValues[key] = vals[key];\n                        }\n                     }\n\n                     _editField.fromValues(updateValues);\n\n                     field = _editField;\n                  }\n\n                  var validator = field.isValid();\n                  if (validator.fail()) {\n                     validator.updateForm($$(editor.ui.id));\n                     // OP.Form.isValidationError(errors, $$(editor.ui.id));\n\n                     // keep our old data\n                     if (oldData) {\n                        field.fromValues(oldData);\n                     }\n\n                     $$(ids.buttonSave).enable();\n                     $$(ids.component).hideProgress();\n                  } else {\n                     try {\n                        await field.save();\n\n                        let finishUpdateField = () => {\n                           $$(ids.buttonSave).enable();\n                           $$(ids.component).hideProgress();\n                           _currentEditor.clear();\n                           _logic.hide();\n                           _logic.callbacks.onSave(field);\n                        };\n\n                        let refreshModels = () => {\n                           // refresh linked object model\n                           linkCol.object.model().refresh();\n\n                           // refresh source object model\n                           // NOTE: M:1 relation has to refresh model after linked object's refreshed\n                           field.object.model().refresh();\n                        };\n\n                        // TODO workaround : update link column id\n                        if (linkCol != null) {\n                           linkCol.settings.linkColumn = field.id;\n                           await linkCol.save();\n\n                           // now linkCol has an .id, so update our field:\n                           field.settings.linkColumn = linkCol.id;\n                           await field.save();\n\n                           // when add new link fields, then run create migrate fields here\n                           if (!_editField) {\n                              await field.migrateCreate();\n                              await linkCol.migrateCreate();\n                           }\n\n                           refreshModels();\n                           finishUpdateField();\n                        } else {\n                           finishUpdateField();\n                        }\n                     } catch (err) {\n                        // if (\n                        //    OP.Validation.isFormValidationError(\n                        //       err,\n                        //       $$(editor.ui.id)\n                        //    )\n                        // ) {\n                        //    // for validation errors, keep things in place\n                        //    // and let the user fix the data:\n                        //    $$(ids.buttonSave).enable();\n                        //    $$(ids.component).hideProgress();\n                        // } else {\n                        //    var errMsg = err.toString();\n                        //    if (err.message) {\n                        //       errMsg = err.message;\n                        //    }\n                        //    webix.alert({\n                        //       title: \"Error saving fields.\",\n                        //       ok: \"tell appdev\",\n                        //       text: errMsg,\n                        //       type: \"alert-error\",\n                        //    });\n                        //    // Q: if not validation error, do we\n                        //    // then field.destroy() ? and let them try again?\n                        //    // $$(ids.buttonSave).enable();\n                        //    // $$(ids.component).hideProgress();\n                        // }\n                     }\n                  }\n               } else {\n                  $$(ids.buttonSave).enable();\n                  $$(ids.component).hideProgress();\n               }\n            } else {\n               this.AB.notify.developer(\n                  new Error(\"Could not find the current editor.\"),\n                  {}\n               );\n\n               $$(ids.buttonSave).enable();\n               $$(ids.component).hideProgress();\n            }\n\n            // if (!inputValidator.validateFormat(fieldInfo.name)) {\n            //  self.enable();\n            //  return;\n            // }\n\n            // // Validate duplicate field name\n            // var existsColumn = $.grep(dataTable.config.columns, function (c) { return c.id == fieldInfo.name.replace(/ /g, '_'); });\n            // if (existsColumn && existsColumn.length > 0 && !data.editFieldId) {\n            //  webix.alert({\n            //      title: labels.add_fields.duplicateFieldTitle,\n            //      text: labels.add_fields.duplicateFieldDescription,\n            //      ok: labels.common.ok\n            //  });\n            //  this.enable();\n            //  return;\n            // }\n\n            // if (fieldInfo.weight == null)\n            //  fieldInfo.weight = dataTable.config.columns.length;\n\n            // // Call callback function\n            // if (base.saveFieldCallback && base.fieldName) {\n            //  base.saveFieldCallback(base.fieldName, fieldInfo)\n            //      .then(function () {\n            //          self.enable();\n            //          base.resetState();\n            //          base.hide();\n            //      });\n            // }\n         },\n\n         callbacks: {\n            onCancel: function () {\n               console.warn(\"NO onCancel()!\");\n            },\n            onSave: function (field) {\n               console.warn(\"NO onSave()!\");\n            },\n         },\n\n         hide: function () {\n            $$(ids.component).hide();\n         },\n\n         modeAdd: function (allowFieldKey) {\n            // show default editor:\n            defaultEditorComponent.show(false, false);\n            _currentEditor = defaultEditorComponent;\n\n            // allow add the connect field only to import object\n            if (_currentObject.isImported) allowFieldKey = \"connectObject\";\n\n            if (allowFieldKey) {\n               var connectField = ABFieldManager.allFields().filter(\n                  (f) => f.defaults().key == allowFieldKey\n               )[0];\n               if (!connectField) return;\n               var connectMenuName = connectField.defaults().menuName;\n               $$(ids.types).setValue(connectMenuName);\n               $$(ids.types).disable();\n            }\n            // show the ability to switch data types\n            else {\n               $$(ids.types).enable();\n            }\n\n            $$(ids.types).show();\n\n            // change button text to 'add'\n            $$(ids.buttonSave).define(\"label\", L(\"Add Column\"));\n            $$(ids.buttonSave).refresh();\n         },\n\n         modeEdit: function (field) {\n            if (_currentEditor) _currentEditor.hide();\n\n            // switch to this field's editor:\n            // hide the rest\n            for (var c in _componentsByType) {\n               if (c == field.key) {\n                  _componentsByType[c].show(false, false);\n                  _componentsByType[c].populate(field);\n                  _currentEditor = _componentsByType[c];\n               } else {\n                  _componentsByType[c].hide();\n               }\n            }\n\n            // disable elements that disallow to edit\n            if (\n               _currentEditor &&\n               _currentEditor.ui &&\n               _currentEditor.ui.elements\n            ) {\n               var disableElem = (elem) => {\n                  if (elem.disallowEdit && $$(elem.id) && $$(elem.id).disable) {\n                     $$(elem.id).disable();\n                  }\n               };\n\n               _currentEditor.ui.elements.forEach((elem) => {\n                  disableElem(elem);\n\n                  // disable elements are in rows/cols\n                  var childElems = elem.cols || elem.rows;\n                  if (childElems && childElems.forEach) {\n                     childElems.forEach((childElem) => {\n                        disableElem(childElem);\n                     });\n                  }\n               });\n            }\n\n            // hide the ability to switch data types\n            $$(ids.types).hide();\n\n            // change button text to 'save'\n            $$(ids.buttonSave).define(\"label\", L(\"Save\"));\n            $$(ids.buttonSave).refresh();\n         },\n\n         /**\n          * @function onChange\n          * swap the editor view to match the data field selected in the menu.\n          *\n          * @param {string} name  the menuName() of the submenu that was selected.\n          */\n         onChange: function (name) {\n            // note, the submenu returns the Field.menuName() values.\n            // we use that to lookup the Field here:\n            var editor = _componentHash[name];\n            if (editor) {\n               editor.show();\n               _currentEditor = editor;\n               $$(ids.types).blur();\n            } else {\n               // most likely they clicked on the menu button itself.\n               // do nothing.\n               // OP.Error.log(\"App Builder:Workspace:Object:NewDataField: could not find editor for submenu item:\"+name, { name:name });\n            }\n         },\n\n         resetState: function () {\n            // enable elements that disallow to edit\n            if (\n               _currentEditor &&\n               _currentEditor.ui &&\n               _currentEditor.ui.elements\n            ) {\n               var enableElem = (elem) => {\n                  if (elem.disallowEdit && $$(elem.id) && $$(elem.id).enable) {\n                     $$(elem.id).enable();\n                  }\n               };\n\n               _currentEditor.ui.elements.forEach((elem) => {\n                  enableElem(elem);\n\n                  // enable elements are in rows/cols\n                  var childElems = elem.cols || elem.rows;\n                  if (childElems && childElems.forEach) {\n                     childElems.forEach((childElem) => {\n                        enableElem(childElem);\n                     });\n                  }\n               });\n            }\n\n            defaultEditorComponent.show(); // show the default editor\n            _currentEditor = defaultEditorComponent;\n\n            // set the richselect to the first option by default.\n            $$(ids.types).setValue(submenus[0].id);\n         },\n\n         /**\n          * @function show()\n          *\n          * Show this component.\n          * @param {ABField} field    the ABField to edit.  If not provided, then\n          *                           this is an ADD operation.\n          * @param {string} fieldKey  allow only this field type\n          */\n         show: function (field, fieldKey) {\n            _editField = field;\n\n            if (_editField) {\n               _logic.modeEdit(field);\n            } else {\n               _logic.modeAdd(fieldKey);\n            }\n\n            $$(ids.component).show();\n         },\n\n         typeClick: function () {\n            // NOTE: for functional testing we need a way to display the submenu\n            // (functional tests don't do .hover very well)\n            // so this routine is to enable .click() to show the submenu.\n\n            var subMenuId = $$(ids.types).config.data[0].submenu;\n\n            // #HACK Sub-menu popup does not render on initial\n            // Force it to render popup by use .getSubMenu()\n            if (typeof subMenuId != \"string\") {\n               $$(ids.types).getSubMenu($$(ids.types).config.data[0].id);\n               subMenuId = $$(ids.types).config.data[0].submenu;\n            }\n\n            if ($$(subMenuId)) $$(subMenuId).show();\n         },\n      });\n\n      // Expose any globally accessible Actions:\n      this.actions({});\n\n      //\n      // Define our external interface methods:\n      //\n      this.applicationLoad = _logic.applicationLoad; // {fn}     fn(ABApplication)\n      this.objectLoad = _logic.objectLoad; // {fn}     fn(ABObject)\n      this.show = _logic.show; // {fn}     fn(node, ABField)\n   }\n};\n","/*\n * ab_work_object_workspace_popupSortFields\n *\n * Manage the Sort Fields popup.\n *\n */\n\nconst ABComponent = require(\"../AppBuilder/platform/ABComponent\");\n\nmodule.exports = class AB_Work_Object_Workspace_PopupSortFields extends ABComponent {\n   //.extend(idBase, function(App) {\n\n   constructor(App, idBase) {\n      idBase = idBase || \"ab_work_object_workspace_popupSortFields\";\n\n      super(App, idBase);\n      var L = this.Label();\n\n      // internal list of Webix IDs to reference our UI components\n      var ids = {\n         component: this.unique(`${idBase}_popupSort`),\n         list: this.unique(`${idBase}_popupSort_list`),\n         form: this.unique(`${idBase}_popupSort_form`),\n      };\n\n      // Our webix UI definition:\n      var formUI = {\n         view: \"form\",\n         id: ids.form,\n         // autoheight: true,\n         borderless: true,\n         elements: [\n            {\n               view: \"button\",\n               type: \"form\",\n               css: \"webix_primary\",\n               value: L(\"Add new sort\"),\n               on: {\n                  onItemClick: function (id, e, node) {\n                     _logic.clickAddNewSort();\n                     _logic.triggerOnChange();\n                  },\n               },\n            },\n         ],\n      };\n\n      this.ui = {\n         view: \"popup\",\n         id: ids.component,\n         // autoheight:true,\n         width: 600,\n         body: formUI,\n         on: {\n            onShow: function () {\n               _logic.onShow();\n            },\n         },\n      };\n\n      // Our init() function for setting up our UI\n      this.init = (options) => {\n         // register our callbacks:\n         for (var c in _logic.callbacks) {\n            _logic.callbacks[c] = options[c] || _logic.callbacks[c];\n         }\n\n         webix.ui(this.ui);\n      };\n\n      let CurrentObject = null;\n\n      // our internal business logic\n      var _logic = (this._logic = {\n         callbacks: {\n            /**\n             * @function onChange\n             * called when we have made changes to the hidden field settings\n             * of our Current Object.\n             *\n             * this is meant to alert our parent component to respond to the\n             * change.\n             */\n            onChange: function () {},\n         },\n\n         /**\n          * @function clickAddNewSort\n          * the user clicked the add new sort buttton. I don't know what it does...will update later\n          */\n         // clickAddNewSort: function(by, dir, isMulti, id) {\n         clickAddNewSort: function (fieldId, dir) {\n            var sort_form = $$(ids.form);\n\n            var viewIndex = sort_form.getChildViews().length - 1;\n            var listFields = _logic.getFieldList(true);\n            sort_form.addView(\n               {\n                  id: \"sort\" + webix.uid(),\n                  cols: [\n                     {\n                        view: \"combo\",\n                        width: 220,\n                        options: listFields,\n                        on: {\n                           onChange: function (columnId) {\n                              var el = this;\n                              _logic.onChangeCombo(columnId, el);\n                           },\n                        },\n                     },\n                     {\n                        view: \"segmented\",\n                        width: 200,\n                        options: [\n                           {\n                              id: \"\",\n                              value: L(\"Please select field\"),\n                           },\n                        ],\n                        on: {\n                           onChange: function (newv, oldv) {\n                              // 'asc' or 'desc' values\n                              _logic.triggerOnChange();\n                           },\n                        },\n                     },\n                     {\n                        view: \"button\",\n                        css: \"webix_danger\",\n                        icon: \"fa fa-trash\",\n                        type: \"icon\",\n                        width: 30,\n                        on: {\n                           onItemClick: function () {\n                              sort_form.removeView(this.getParentView());\n                              _logic.refreshFieldList(true);\n                              _logic.triggerOnChange();\n                           },\n                        },\n                     },\n                  ],\n               },\n               viewIndex\n            );\n\n            // Select field\n            if (fieldId) {\n               var fieldsCombo = sort_form\n                  .getChildViews()\n                  [viewIndex].getChildViews()[0];\n               fieldsCombo.setValue(fieldId);\n            }\n            if (dir) {\n               var segmentButton = sort_form\n                  .getChildViews()\n                  [viewIndex].getChildViews()[1];\n               segmentButton.setValue(dir);\n            }\n            // if (isMulti) {\n            // \tvar isMultilingualField = sort_form.getChildViews()[viewIndex].getChildViews()[2];\n            // \tisMultilingualField.setValue(isMulti);\n            // }\n         },\n\n         /**\n          * @function getFieldList\n          * return field list so we can present a custom UI for view\n          */\n         getFieldList: function (excludeSelected) {\n            var sort_popup = $$(ids.component),\n               sort_form = $$(ids.form),\n               listFields = [];\n\n            if (!CurrentObject.fields()) return listFields;\n\n            // Get all fields include hidden fields\n            var allFields = CurrentObject.fields();\n            allFields.forEach((f) => {\n               if (f.fieldIsSortable()) {\n                  listFields.push({\n                     id: f.id,\n                     value: f.label,\n                  });\n               }\n            });\n\n            // Remove selected field\n            if (excludeSelected) {\n               var childViews = sort_form.getChildViews();\n               if (childViews.length > 1) {\n                  // Ignore 'Add new sort' button\n                  childViews.forEach(function (cView, index) {\n                     if (childViews.length - 1 <= index) return false;\n\n                     var selectedValue = cView.getChildViews()[0].getValue();\n                     if (selectedValue) {\n                        var removeIndex = null;\n                        var removeItem = listFields.filter(function (f, index) {\n                           if (f.id == selectedValue) {\n                              removeIndex = index;\n                              return true;\n                           } else {\n                              return false;\n                           }\n                        });\n                        // var removeItem = $.grep(listFields, function (f, index) {\n                        // \tif (f.id == selectedValue) {\n                        // \t\tremoveIndex = index;\n                        // \t\treturn true;\n                        // \t}\n                        // \telse {\n                        // \t\treturn false;\n                        // \t}\n                        // });\n                        listFields.splice(removeIndex, 1);\n                     }\n                  });\n               }\n            }\n            return listFields;\n         },\n\n         /**\n          * @function objectLoad\n          * Ready the Popup according to the current object\n          * @param {ABObject} object  the currently selected object.\n          */\n         objectLoad: function (object) {\n            CurrentObject = object;\n         },\n\n         /**\n          * @method setSettings\n          *\n          * @param {Array} settings - [\n          * \t\t\t\t\t\t\t\t{\n          * \t\t\t\t\t\t\t\t\tkey: uuid,\t\t// id of ABField\n          *\t \t\t\t\t\t\t\t\tdir: string,\t// 'asc' or 'desc'\n          * \t\t\t\t\t\t\t\t}\n          * \t\t\t\t\t\t\t]\n          */\n         setSettings: (settings) => {\n            this._settings = this.AB.cloneDeep(settings);\n         },\n\n         /**\n          * @function getSettings\n          *\n          * @return {Array} - [\n          * \t\t\t\t\t\t{\n          * \t\t\t\t\t\t\tkey: uuid,\t\t// id of ABField\n          * \t\t\t\t\t\t\tdir: string,\t// 'asc' or 'desc'\n          * \t\t\t\t\t\t}\n          * \t\t\t\t\t]\n          */\n         getSettings: function () {\n            var sort_form = $$(ids.form),\n               sortFields = [];\n\n            var childViews = sort_form.getChildViews();\n            if (childViews.length > 1) {\n               // Ignore 'Add new sort' button\n               childViews.forEach(function (cView, index) {\n                  if (childViews.length - 1 <= index) return false;\n\n                  var fieldId = cView.getChildViews()[0].getValue();\n                  var dir = cView.getChildViews()[1].getValue();\n                  sortFields.push({\n                     // \"by\":by,\n                     key: fieldId,\n                     dir: dir,\n                     // \"isMulti\":isMultiLingual\n                  });\n               });\n            }\n\n            return sortFields;\n         },\n\n         onChangeCombo: function (columnId, el) {\n            var allFields = CurrentObject.fields();\n            var columnConfig = \"\",\n               sortDir = el.getParentView().getChildViews()[1],\n               // isMultiLingual = el.getParentView().getChildViews()[2],\n               // isMulti = 0,\n               options = null;\n\n            allFields.forEach((f) => {\n               if (f.id == columnId) {\n                  columnConfig = f;\n               }\n            });\n\n            if (!columnConfig) return;\n\n            switch (columnConfig.key) {\n               case \"string\":\n                  options = [\n                     { id: \"asc\", value: L(\"A -> Z\") },\n                     { id: \"desc\", value: L(\"Z -> A\") },\n                  ];\n                  break;\n               case \"date\":\n                  options = [\n                     { id: \"asc\", value: L(\"Before -> After\") },\n                     { id: \"desc\", value: L(\"After -> Before\") },\n                  ];\n                  break;\n               case \"number\":\n                  options = [\n                     { id: \"asc\", value: L(\"1 -> 9\") },\n                     { id: \"desc\", value: L(\"9 -> 1\") },\n                  ];\n                  break;\n               default:\n                  options = [\n                     { id: \"asc\", value: L(\"A -> Z\") },\n                     { id: \"desc\", value: L(\"Z -> A\") },\n                  ];\n                  break;\n            }\n\n            sortDir.define(\"options\", options);\n            sortDir.refresh();\n\n            // if (columnConfig.settings.supportMultilingual)\n            // \tisMulti = columnConfig.settings.supportMultilingual;\n\n            // isMultiLingual.setValue(isMulti);\n\n            _logic.refreshFieldList();\n\n            _logic.triggerOnChange();\n         },\n\n         /**\n          * @function objectLoad\n          * Ready the Popup according to the current object\n          * @param {ABObject} object  the currently selected object.\n          */\n         onShow: () => {\n            var sort_form = $$(ids.form);\n\n            // clear field options in the form\n            webix.ui(formUI, sort_form);\n            // var childViews = sort_form.getChildViews();\n            // childViews.forEach(function(i, idx, array){\n            // \tif (idx !== array.length - 1){\n            // \t\tsort_form.removeView(i);\n            // \t}\n            // });\n\n            var sorts = this._settings;\n            if (sorts && sorts.forEach) {\n               sorts.forEach((s) => {\n                  _logic.clickAddNewSort(s.key, s.dir);\n               });\n            }\n\n            if (sorts == null || sorts.length == 0) {\n               _logic.clickAddNewSort();\n            }\n         },\n\n         /**\n          * @function refreshFieldList\n          * return an updated field list so you cannot duplicate a sort\n          */\n         refreshFieldList: function (ignoreRemoveViews) {\n            var sort_form = $$(ids.form),\n               listFields = _logic.getFieldList(false),\n               selectedFields = [],\n               removeChildViews = [];\n\n            var childViews = sort_form.getChildViews();\n            if (childViews.length > 1) {\n               // Ignore 'Add new sort' button\n               childViews.forEach(function (cView, index) {\n                  if (childViews.length - 1 <= index) return false;\n\n                  var fieldId = cView.getChildViews()[0].getValue(),\n                     // fieldObj = $.grep(listFields, function (f) { return f.id == fieldId });\n                     fieldObj = listFields.filter(function (f) {\n                        return f.id == fieldId;\n                     });\n\n                  if (fieldObj.length > 0) {\n                     // Add selected field to list\n                     selectedFields.push(fieldObj[0]);\n                  } else {\n                     // Add condition to remove\n                     removeChildViews.push(cView);\n                  }\n               });\n            }\n\n            // Remove filter conditions when column is deleted\n            if (!ignoreRemoveViews) {\n               removeChildViews.forEach(function (cView, index) {\n                  sort_form.removeView(cView);\n               });\n            }\n\n            // Field list should not duplicate field items\n            childViews = sort_form.getChildViews();\n            if (childViews.length > 1) {\n               // Ignore 'Add new sort' button\n               childViews.forEach(function (cView, index) {\n                  if (childViews.length - 1 <= index) return false;\n\n                  var fieldId = cView.getChildViews()[0].getValue(),\n                     // fieldObj = $.grep(listFields, function (f) { return f.id == fieldId }),\n                     fieldObj = listFields.filter(function (f) {\n                        return f.id == fieldId;\n                     });\n\n                  // var selectedFieldsExcludeCurField = $(selectedFields).not(fieldObj);\n                  var selectedFieldsExcludeCurField = selectedFields.filter(\n                     function (x) {\n                        if (\n                           Array.isArray(fieldObj) &&\n                           fieldObj.indexOf(x) !== -1\n                        ) {\n                           return false;\n                        }\n                        return true;\n                     }\n                  );\n\n                  // var enableFields = $(listFields).not(selectedFieldsExcludeCurField).get();\n                  var enableFields = listFields.filter(function (x) {\n                     if (\n                        Array.isArray(selectedFieldsExcludeCurField) &&\n                        selectedFieldsExcludeCurField.indexOf(x) !== -1\n                     ) {\n                        return false;\n                     }\n                     return true;\n                  });\n\n                  // Update field list\n                  cView.getChildViews()[0].define(\"options\", enableFields);\n                  cView.getChildViews()[0].refresh();\n               });\n            }\n         },\n\n         /**\n          * @function triggerOnChange\n          * This parses the sort form to build in order the sorts then saves to the application object workspace\n          */\n         triggerOnChange: () => {\n            // block .onChange callback\n            if (this._blockOnChange) return;\n\n            this._settings = _logic.getSettings();\n\n            _logic.callbacks.onChange(this._settings);\n\n            // if (CurrentView != null) {\n            // \tCurrentView.settings = CurrentView.settings || {};\n            // \tCurrentView.settings.objectWorkspace = CurrentView.settings.objectWorkspace || {};\n            // \tCurrentView.settings.objectWorkspace.sortFields = sortFields;\n            // \t_logic.callbacks.onChange(CurrentView.settings.objectWorkspace);\n            // } else {\n            // \tCurrentObject.workspaceSortFields = sortFields;\n            // \tCurrentObject.save()\n            // \t.then(function(){\n            // \t\t_logic.callbacks.onChange();\n            // \t})\n            // \t.catch(function(err){\n            // \t\tOP.Error.log('Error trying to save workspaceSortFields', {error:err, fields:sortFields });\n            // \t});\n            // }\n         },\n\n         blockOnChange: () => {\n            this._blockOnChange = true;\n         },\n\n         unblockOnChange: () => {\n            this._blockOnChange = false;\n         },\n\n         /**\n          * @function show()\n          *\n          * Show this component.\n          * @param {obj} $view  the webix.$view to hover the popup around.\n          * @param {uuid} fieldId the fieldId we want to prefill the sort with\n          */\n         show: ($view, fieldId, options) => {\n            _logic.blockOnChange();\n\n            $$(ids.component).show($view, options || null);\n\n            if (fieldId) {\n               _logic.clickAddNewSort(fieldId);\n            }\n\n            _logic.unblockOnChange();\n         },\n\n         /**\n          * @function sort()\n          * client sort data in list\n          *\n          * @param {Object} a\n          * @param {Object} b\n          */\n         sort: function (a, b) {\n            var result = 0;\n\n            var childViews = $$(ids.form).getChildViews();\n            if (childViews.length > 1) {\n               // Ignore 'Add new sort' button\n               childViews.forEach(function (cView, index) {\n                  if (childViews.length - 1 <= index || result != 0) return;\n\n                  var fieldId = cView.getChildViews()[0].getValue();\n                  var dir = cView.getChildViews()[1].getValue();\n\n                  var field = CurrentObject.fieldByID(fieldId);\n                  if (!field) return;\n\n                  var by = field.columnName; // column name\n\n                  var aValue = a[by],\n                     bValue = b[by];\n\n                  if (Array.isArray(aValue)) {\n                     aValue = (aValue || [])\n                        .map(function (item) {\n                           return item.text || item;\n                        })\n                        .join(\" \");\n                  }\n\n                  if (Array.isArray(bValue)) {\n                     bValue = (bValue || [])\n                        .map(function (item) {\n                           return item.text || item;\n                        })\n                        .join(\" \");\n                  }\n\n                  if (aValue != bValue) {\n                     if (dir == \"asc\") {\n                        result = aValue > bValue ? 1 : -1;\n                     } else {\n                        result = aValue < bValue ? 1 : -1;\n                     }\n                  }\n               });\n            }\n\n            return result;\n         },\n      });\n\n      // Expose any globally accessible Actions:\n      this.actions({});\n\n      //\n      // Define our external interface methods:\n      //\n      this.objectLoad = _logic.objectLoad;\n      this.show = _logic.show;\n      this.sort = _logic.sort;\n\n      this.setValue = _logic.setSettings;\n      this.getValue = _logic.getSettings;\n   }\n};\n","var EventEmitter = require(\"events\").EventEmitter;\n\nclass Account extends EventEmitter {\n   constructor() {\n      super();\n\n      this.isAuthenticated = false;\n      this._config = null;\n\n      this._listRoles = null;\n      // {array}\n      // a list of all the Defined Roles in the Tenant's system.\n\n      this._listScopes = null;\n      // {array | null}\n      // a list of all the Defined Scopes in the Tenant's sytem.\n\n      this._listUsers = null;\n      // {array | null}\n      // a list of all the Defined Users in the Tenant's system.\n   }\n\n   init(AB) {\n      // {ABFactory} AB\n\n      this.AB = AB;\n      var UserConfig = this.AB.Config.userConfig();\n      if (UserConfig) {\n         this.isAuthenticated = true;\n         this._config = UserConfig;\n      }\n\n      var MetaConfig = this.AB.Config.metaConfig();\n      if (MetaConfig) {\n         this._listRoles = MetaConfig.roles || [];\n         this._listScopes = MetaConfig.scopes || [];\n         this._listUsers = MetaConfig.users || [];\n      }\n\n      this.AB.Network.on(\"account.logout\", (context, err, data) => {\n         if (err) {\n            console.error(err);\n            return;\n         }\n         this.emit(\"logout\", data);\n      });\n\n      return Promise.resolve();\n   }\n\n   isSystemDesigner() {\n      return (\n         this.roles((r) => r.uuid === \"6cc04894-a61b-4fb5-b3e5-b8c3f78bd331\")\n            .length > 0\n      );\n   }\n\n   email() {\n      return this._config?.email ?? \"\";\n   }\n\n   language() {\n      return this._config?.languageCode ?? \"en\";\n   }\n\n   logout() {\n      return this.AB.Network.post(\n         {\n            url: \"/auth/logout\",\n            data: { tenantUrl: this.AB.Tenant.setting(\"url\") },\n         },\n         {\n            key: \"account.logout\",\n            context: {},\n         }\n      );\n   }\n\n   roles(fn = () => true) {\n      return (this._config?.roles || []).filter(fn);\n   }\n   rolesAll() {\n      return this._listRoles;\n   }\n\n   scopes() {\n      return this._listScopes;\n   }\n\n   username() {\n      return this._config?.username;\n   }\n\n   userList() {\n      return this._listUsers;\n   }\n\n   uuid() {\n      return this._config?.uuid;\n   }\n\n   imageID() {\n      return this._config?.image_id;\n   }\n\n   sendEmailNotifications() {\n      return this._config?.sendEmailNotifications;\n   }\n}\n\nexport default new Account();\n","//\n// Dialog\n// A common set of UI dialogs to show the User.\n//\n// NOTE: IN TRANSITION: this is our previous method of handling\n// dialogs.  In future, refactor to use webix directly in code.\n//\n\nexport default {\n   // Instance properties\n\n   // Alert\n   // A dialogue that popup with a message, and requires an [ok] button press\n   Alert: function (opts) {\n      webix.alert({\n         title:\n            opts.title ||\n            AB.Multilingual.label(\"opp.dialog.alert.title\", \"*Alert\"),\n         text:\n            opts.text ||\n            opts.message ||\n            AB.Multilingual.label(\n               \"opp.dialog.alert.text\",\n               \"*Something is wrong.\"\n            ),\n         ok: opts.ok || AB.Multilingual.label(\"opp.dialog.alert.ok\", \"*OK\"),\n      });\n   },\n\n   // Confirm\n   // A [Yes] [No] dialogue that pops up with a message\n   Confirm: function (opts) {\n      var title =\n         opts.title ||\n         AB.Multilingual.label(\"opp.dialog.confirm.confirmTitle\", \"* Confirm\");\n      var message =\n         opts.text ||\n         opts.message ||\n         AB.Multilingual.label(\n            \"opp.dialog.confirm.confirmMsg\",\n            \"* Are you sure you want to do this?\"\n         );\n\n      var labelYes =\n         opts.labelYes ||\n         opts.ok ||\n         AB.Multilingual.label(\"opp.common.yes\", \"* yes\");\n      var labelNo =\n         opts.labelNo ||\n         opts.cancel ||\n         AB.Multilingual.label(\"opp.common.no\", \"* no\");\n\n      // var fnYes = opts.fnYes || function () { };\n      // var fnNo = opts.fnNo || function () { };\n\n      webix.confirm({\n         title: title,\n         text: message,\n\n         ok: labelYes,\n         cancel: labelNo,\n\n         callback: function (result) {\n            if (result) {\n               if (opts.fnYes) opts.fnYes();\n            } else {\n               if (opts.fnNo) opts.fnNo();\n            }\n\n            if (opts.callback) opts.callback(result);\n         },\n      });\n\n      // bootbox.dialog({\n      //     title: title,\n      //     message: message,\n      //     buttons: {\n      //         yes: {\n      //             label: labelYes,\n      //             className: 'btn-primary',\n      //             callback: fnYes\n      //         },\n      //         no: {\n      //             label: labelNo,\n      //             className: 'btn-default',\n      //             callback: fnNo\n      //         }\n      //     }\n      // });\n   },\n\n   // ConfirmDelete\n   // A Confirm dialogue geared towards deleting items.\n   // [delete] [cancel]\n   ConfirmDelete: function (opts) {\n      this.Confirm({\n         title:\n            opts.title ||\n            AB.Multilingual.label(\n               \"opp.dialog.confirm.deleteTitle\",\n               \"* Confirm Delete\"\n            ),\n         ok: opts.ok || AB.Multilingual.label(\"opp.common.delete\", \"* Delete\"),\n         cancel:\n            opts.cancel ||\n            AB.Multilingual.label(\"opp.common.cancel\", \"* Cancel\"),\n         text:\n            opts.text ||\n            opts.message ||\n            AB.Multilingual.label(\n               \"opp.dialog.confirm.deleteMsg\",\n               \"* Are you sure you want to delete this?\",\n               [\"this\"]\n            ),\n         callback: function (result) {\n            if (result) {\n               if (opts.fnYes) opts.fnYes();\n            } else {\n               if (opts.fnNo) opts.fnNo();\n            }\n\n            if (opts.callback) opts.callback(result);\n         },\n      });\n   },\n\n   // Message\n   // A simple message displayed to the user.  Can time out\n   Message: function (opts) {\n      var message = opts.text || opts.message;\n      var timeout = opts.timeout || 2000;\n\n      webix.message({\n         text: message,\n         expire: timeout,\n      });\n   },\n};\n","/*\n * Multilingual\n * manage our multilingual Translations/Labels/etc.\n */\n\nvar MLClass = require(\"../AppBuilder/platform/ABMLClass\");\n\nclass Multilingual extends MLClass {\n   constructor() {\n      super([], {});\n      // super()\n      //    [] = no labels\n      //    {} = placeholder ABFactory entry until .init() is called.\n\n      this.isAuthenticated = false;\n      this._config = null;\n\n      this._missingLabelID = false;\n      this._missingLabels = {};\n      this._pluginLabelsMissing = {};\n   }\n\n   init(AB) {\n      // {ABFactory} AB\n\n      this.AB = AB;\n\n      this.labels = this.AB.Config.labelConfig();\n\n      this.pluginLabels = {};\n\n      // this isn't actually an Async operation, so just resolve()\n      return Promise.resolve();\n   }\n\n   currentLanguage() {\n      return this.AB.Account.language();\n   }\n\n   label(key, altText, values = [], postMissing = true) {\n      // part of our transition: L(\"single string\") should start to work:\n      if (typeof altText == \"undefined\" && key) {\n         altText = key;\n      }\n\n      // other case: L(\"single string {0}\", [])\n      if (arguments.length == 2 && Array.isArray(altText)) {\n         values = altText;\n         altText = key;\n      }\n\n      // We need to escape \" characters or else they will get added to the the lang.js\n      // then we get errors next time we try to parse it as JSON (see appbuilder.label-missing)\n      altText = altText.replace(/\"/g, '\\\\\"');\n      key = key.replace(/\"/g, '\\\\\"');\n\n      // NOTE: transition to new Labels\n      // currently our code still uses the L(key, altText, values) format, but\n      // the labels we get back are in L(altText, values) format.\n      //\n      // we are going to keep this like this until we have a well functioning\n      // UI display of our Apps, which should flesh out most of the missing\n      // labels to our files.\n      //\n      // After that, convert our L(k, t, v) to L(t, v)\n\n      var newKey = altText;\n      if (newKey[0] == \"*\") {\n         newKey = newKey.slice(1);\n      }\n      var label = this.labels[newKey];\n      if (!label) {\n         if (postMissing) {\n            this.postMissingLabel(key, altText);\n         }\n         label = altText;\n      }\n\n      values.forEach((v, i) => {\n         var sub = `{${i}}`;\n         label = label.replaceAll(sub, v);\n      });\n      label = label.replace(/\\\\\"/g, '\"'); // unescape \" in the label\n      return label;\n   }\n\n   labelPlugin(plugin, altText, values = []) {\n      // 1st check to see if it is a common label from platform:\n      var label = this.label(altText, altText, values, false);\n      if (!label) {\n         // ok, so check to see if it is a Plugin Label:\n         label = this.pluginLabels[plugin][altText];\n      }\n      if (!label) {\n         // !! record it missing.\n         this._pluginLabelsMissing[plugin] =\n            this._pluginLabelsMissing[plugin] || {};\n         this._pluginLabelsMissing[plugin][altText] = altText;\n         label = altText;\n      }\n      values.forEach((v, i) => {\n         var sub = `{${i}}`;\n         label = label.replaceAll(sub, v);\n      });\n      return label;\n   }\n\n   languages() {\n      console.error(\n         \"Multilingual:languages(): Implement Language Storage/Retrieval.\"\n      );\n      return [];\n   }\n\n   pluginLoadLabels(key, labels) {\n      this.pluginLabels[key] = labels;\n   }\n   pluginLabelReport(key) {\n      console.warn(\"missing labels for plugin: \", key);\n      console.warn(\"current language:\", this.currentLanguage());\n      var labels = JSON.stringify(this._pluginLabelsMissing[key], null, 3);\n      console.warn(labels);\n   }\n\n   postMissingLabel(key, altText) {\n      if (this._missingLabelID) {\n         clearTimeout(this._missingLabelID);\n      }\n      var batchLength = 50;\n      var sendBatch = () => {\n         var batchLabels = [];\n         let missingLabels = Object.keys(this._missingLabels).map(\n            (k) => this._missingLabels[k]\n         );\n         if (missingLabels.length <= batchLength) {\n            batchLabels = missingLabels;\n            this._missingLabels = {};\n         } else {\n            for (var i = 0; i <= batchLength; i++) {\n               var l = missingLabels.shift();\n               batchLabels.push(l);\n               delete this._missingLabels[l.key];\n            }\n         }\n         this.AB.Network.post({\n            url: \"/multilingual/label-missing\",\n            data: { labels: JSON.stringify(batchLabels) },\n         }).then(() => {\n            if (Object.keys(this._missingLabels).length > 0) {\n               sendBatch();\n            }\n         });\n      };\n      this._missingLabelID = setTimeout(() => {\n         sendBatch();\n      }, 1000);\n\n      this._missingLabels[key] = { key, altText };\n   }\n   ///\n   /// Disable un-needed ABMLClass functionality\n   ///\n   /// NOTE: we are mainly Piggybacking on ABMLClass for it's\n   /// .translate() and .unTranslate() capabilities. So disable these\n   /// for good measure.\n   destroy() {\n      console.error(\"Multilingual:destroy(): Should not be called.\");\n      return Promise.resolve();\n   }\n   save() {\n      console.error(\"Multilingual:save(): Should not be called.\");\n      return Promise.resolve();\n   }\n   toObj() {\n      console.error(\"Multilingual:toObj(): Should not be called.\");\n      return {};\n   }\n   toDefinition() {\n      console.error(\"Multilingual:toDefinition(): Should not be called.\");\n      return {};\n   }\n}\n\nexport default new Multilingual();\n","/*\n * NetworkRest.js\n * The base Networking class.  This class is responsible for job submissions\n * and outlines the basic Network interface.\n */\n\n/* global navigator Connection */\n// import Account from \"./Account\";\n// import analytics from \"./Analytics\";\n// import EventEmitter from \"eventemitter2\";\nvar EventEmitter = require(\"events\").EventEmitter;\n// import Lock from \"./Lock\";\n\n// import { storage } from \"./Storage\";\n// import Tenant from \"./Tenant\";\n// import { v4 as uuidv4 } from \"uuid\";\n\n// Temp placeholders until Resources are implemented:\n\n// End Temp\n\nconst Atomic = require(\"atomicjs/dist/atomic.min.js\");\n// Atomic : a small $.ajax() replacement\n\nvar Config = null;\n// {} Config\n// the site specific configuration information\n\nclass NetworkRest extends EventEmitter {\n   constructor(parent) {\n      // {Network} parent\n\n      super({\n         wildcard: true,\n         newListener: false,\n         maxListeners: 0,\n      });\n\n      this.baseURL = null;\n      // {string} .baseURL\n      // the url of our site.\n\n      this.numRetries = 3;\n      // {int} .numRetries\n      // the number or times we should attempt to issue a network request.\n\n      this._network = parent;\n      // {Network} ._network\n      // the Parent Network Resource that the rest of the Platform actually\n      // works with.\n\n      this.isRealTime = false;\n      // {bool}\n      // does this Network type support RealTime updates. (socket = true);\n   }\n\n   /**\n    * @method init\n    * @param {ABFactory} AB\n    * @param {object} options\n    * @param {string} options.baseURL\n    * @return {Promise}\n    */\n   init(AB, options) {\n      this.AB = AB;\n\n      Config = this.AB.Config.siteConfig();\n      options = options || {};\n      if (options) {\n         this.baseURL = options.baseURL || Config.appbuilder.urlCoreServer;\n         this.numRetries =\n            options.networkNumRetries || Config.appbuilder.networkNumRetries;\n      }\n      return Promise.resolve();\n   }\n\n   //\n   // Interface API\n   //\n   /**\n    * Network.get(options, jobResponse)\n    * perform a GET request back to the AppBuilder server.\n    * @param {obj} params the request parameters that need to be executed on\n    *              the AppBuilder Server\n    * @param {obj} jobResponse the callback info for handling the response.\n    *              {\n    *                  key:'unique.key',\n    *                  context:{ obj data }\n    *              }\n    * @return {Promise}\n    */\n   get(params, jobResponse) {\n      params.type = params.type || \"GET\";\n\n      // data sent to params on a \"GET\" request need to be converted to\n      // uri querystring values:\n      var data = params.data || params.params;\n      if (data) {\n         var useThese = [\"string\", \"number\", \"boolean\"];\n         var search = Object.keys(data)\n            .map(function (key) {\n               var val = data[key];\n               if (useThese.indexOf(typeof val) == -1) {\n                  val = JSON.stringify(val);\n               }\n               return key + \"=\" + encodeURIComponent(val);\n            })\n            .join(\"&\");\n\n         var join = \"?\";\n         if (params.url.indexOf(\"?\") > -1) {\n            join = \"&\";\n         }\n         params.url = [params.url, search].join(join);\n      }\n\n      return this._request(params, jobResponse);\n   }\n\n   /**\n    * Network.post()\n    * perform an AJAX POST request to the AppBuilder server.\n    * @param {obj} params the request parameters that need to be executed on\n    *              the AppBuilder Server\n    * @param {obj} jobResponse the callback info for handling the response.\n    *              {\n    *                  key:'unique.key',\n    *                  context:{ obj data }\n    *              }\n    * @return {Promise}\n    */\n   post(params, jobResponse) {\n      params.type = params.type || \"POST\";\n      return this._request(params, jobResponse);\n   }\n\n   /**\n    * Network.put()\n    * perform a PUT request to the AppBuilder server.\n    * @param {obj} params the request parameters that need to be executed on\n    *              the AppBuilder Server\n    * @param {obj} jobResponse the callback info for handling the response.\n    *              {\n    *                  key:'unique.key',\n    *                  context:{ obj data }\n    *              }\n    * @return {Promise}\n    */\n   put(params, jobResponse) {\n      params.type = params.type || \"PUT\";\n      return this._request(params, jobResponse);\n   }\n\n   /**\n    * Network.delete()\n    * perform an AJAX DELETE request to the AppBuilder server.\n    * @param {obj} params the request parameters that need to be executed on\n    *              the AppBuilder Server\n    * @param {obj} jobResponse the callback info for handling the response.\n    *              {\n    *                  key:'unique.key',\n    *                  context:{ obj data }\n    *              }\n    * @return {Promise}\n    */\n   delete(params, jobResponse) {\n      params.type = params.type || \"DELETE\";\n      return this._request(params, jobResponse);\n   }\n\n   ////\n   //// Network Utilities\n   ////\n\n   isNetworkConnected() {\n      return this._network.isNetworkConnected();\n   }\n\n   salSend(params) {\n      return Atomic(params.url, params).then((packet) => {\n         // {json} packet\n         // the response from Atomic is in format:\n         // {data: {…}, xhr: XMLHttpRequest}\n         // we just want to send back our { status:\"\", data:xxx } packet.\n         return packet.data;\n      });\n   }\n\n   /**\n    * _request()\n    * perform the actual AJAX request for this operation.\n    * @param {obj} params  the jQuery.ajax() formatted params\n    * @param {obj} jobRequest  the information about the request's response.\n    * @return {Promise}\n    */\n   _request(params, jobResponse) {\n      // make sure we don't process too many retries:\n      params._retry = params._retry || 0;\n      if (params._retry >= this.numRetries) {\n         var err = new Error(\n            `Too many retries (${this.numRetries}) for ${params.url}`\n         );\n         err.code = \"E_TOMANYRETRIES\";\n         this.AB.notify.developer(err, {\n            context: \"NetworkRest:_request: Too Many Retries\",\n         });\n         // this.AB.Analytics.logError(err);\n         if (jobResponse) {\n            this._network.publishResponse(jobResponse, err);\n         }\n\n         return Promise.reject(err);\n      }\n\n      return new Promise((resolve, reject) => {\n         params.url = params.url || \"/\";\n         if (params.url[0] == \"/\") {\n            params.url = this.baseURL + params.url;\n         }\n\n         params.headers = params.headers || {};\n         if (this.AB.Account.authToken) {\n            params.headers.Authorization = this.AB.Account.authToken;\n         }\n         params.headers[\"Content-type\"] = \"application/json\";\n\n         var tenantID = this.AB.Tenant.id();\n         if (tenantID) {\n            params.headers[\"tenant-token\"] = tenantID;\n         }\n\n         // params.timeout = params.timeout || 6000;\n\n         if (this.isNetworkConnected()) {\n            params.method = params.method || params.type;\n            params.timeout = 6000; // ??\n            params.data = params.data || params.params;\n            delete params.params;\n\n            this.salSend(params)\n               .then((packet) => {\n                  // TODO: check if packet.status == \"error\"\n                  // and then .publishResponse() as an error\n\n                  //\n                  var data = packet;\n                  if (jobResponse) {\n                     this._network.publishResponse(jobResponse, null, data);\n                  }\n                  resolve(data);\n               })\n               .catch((err) => {\n                  // err.status\n                  // err.statusText\n                  // err.responseText\n                  // err.message  {socket}\n                  // err.stack    {socket}\n\n                  // if this is a network connection error, send the attempt again:\n                  if (\n                     err.statusText == \"Request timeout\" ||\n                     (err.message && err.message.indexOf(\"disconnected\") > -1)\n                  ) {\n                     //// Network Error: conneciton refused, access denied, etc...\n                     this.AB.Analytics.log(\n                        \"NetworkRest._request():network connection error detected. Trying again\"\n                     );\n\n                     params._retry++;\n\n                     // retry the attempt:\n                     this._request(params)\n                        .then((data) => {\n                           // console.log('--- timeout.then():',data);\n                           this.AB.warn(\n                              \"*** NetworkRest._request().then(): attempt resolved.\"\n                           );\n                           resolve(data);\n                        })\n                        .catch((_err) => {\n                           this.AB.notify.developer(_err, {\n                              message: \"*** NetworkRest._request().catch(): retry failed:\",\n                           });\n                           reject(_err);\n                        });\n\n                     return;\n                  } else {\n                     // Else attempt to emit() some common Error types for\n                     // additional Platform Handling.\n                     if (err.status == 403) {\n                        this.emit(\"error.badAuth\", err);\n                     } else if (err.status >= 400 && err.status < 500) {\n                        this.emit(\"error.badRequest\", err);\n                     } else if (err.status >= 500) {\n                        this.emit(\"error.badServer\", err);\n                     }\n                  }\n\n                  var packet = null;\n                  if (err.responseText) {\n                     try {\n                        packet = JSON.parse(err.responseText);\n                     } catch (e) {}\n                  }\n                  // if this is an req.ab.error() response:\n                  if (packet && packet.status == \"error\") {\n                     // check if REAUTH Error:\n                     if (packet.id == 5 || packet.code == \"E_REAUTH\") {\n                        this._network.emit(\"reauth\");\n                        return;\n                     }\n\n                     this.AB.notify.developer(packet, {\n                        context:\n                           \"NetworkRest:_request:Error returned from Server (req.ab.error())\",\n                        data: packet.data,\n                     });\n                     // this.AB.Analytics.logError(packet.data);\n                     // this.AB.error(packet.data);\n                     if (jobResponse) {\n                        this._network.publishResponse(\n                           jobResponse,\n                           packet,\n                           null\n                        );\n                     }\n                     return reject(packet.data);\n                  } else {\n                     // unknown/unexpected error:\n                     var error = new Error(\n                        `${err.status} ${err.statusText || err.message}: ${\n                           params.method\n                        } ${params.url}`\n                     );\n                     error.response = err.responseText;\n                     error.text = err.statusText;\n                     error.err = err;\n                     error.url = `${params.method} ${params.url}`;\n                     this.AB.notify.developer(error, {\n                        context:\n                           \"NetworkRest:_request:Unknown Error returned from server\",\n                     });\n                     // this.AB.Analytics.logError(error);\n                     // this.AB.error(error);\n                     if (jobResponse) {\n                        this._network.publishResponse(jobResponse, error);\n                     }\n                     return reject(error);\n                  }\n               });\n         } else {\n            // now Queue this request params.\n            this.AB.Analytics.log(\n               \"NetworkRest:_request(): Network is offline. Queuing request.\"\n            );\n            this._network\n               .queue(params, jobResponse)\n               .then(() => {\n                  resolve({ status: \"queued\" });\n               })\n               .catch(reject);\n         }\n      });\n   }\n\n   /**\n    * resend()\n    * processes messages that were queued due to network connectivity\n    * issues.\n    * @param {obj} params  the jQuery.ajax() formatted params\n    * @param {obj} jobRequest  the information about the request's response.\n    * @return {Promise}\n    */\n   resend(params, jobResponse) {\n      // var op = params.type.toLowerCase();\n      return this._request(params, jobResponse);\n   }\n}\n\nexport default NetworkRest;\n","/*\n * NetworkRest.js\n * The base Networking class.  This class is responsible for job submissions\n * and outlines the basic Network interface.\n */\n\nimport NetworkRest from \"./NetworkRest\";\n\nconst listSocketEvents = [\n   // NOTE: ABFactory.definitionXXX() will manage emitting these\n   // events internally:\n   // \"ab.abdefinition.create\",\n   // \"ab.abdefinition.update\",\n   // \"ab.abdefinition.delete\",\n   \"ab.datacollection.create\",\n   \"ab.datacollection.update\",\n   \"ab.datacollection.stale\",\n   \"ab.datacollection.delete\",\n   \"ab.inbox.create\",\n   // \"ab.object.update\",\n];\n// {array}\n// The io.socket.* events we are listening for that relate to our datacollection\n// maintainence.\n\nclass NetworkRestSocket extends NetworkRest {\n   constructor(parent) {\n      // {Network} parent\n\n      super(parent);\n\n      this.isRealTime = true;\n      // {bool}\n      // does this Network type support RealTime updates. (socket = true);\n\n      // Pass the io.socket.on(*) events to our AB factory.\n      listSocketEvents.forEach((ev) => {\n         io.socket.on(ev, (data) => {\n            // check if the ev contains 'datacollection'\n            // and do a single normalizeData() on the incoming data here\n            // before sending it off to be processed.\n            if (ev.indexOf(\"ab.datacollection\") > -1) {\n               let values = data.data;\n               if (values) {\n                  let obj = this.AB.objectByID(data.objectId);\n                  if (obj) {\n                     let model = obj.model();\n                     if (ev != \"ab.datacollection.delete\")\n                        model.normalizeData(data.data);\n                  }\n               }\n            }\n            this.AB.emit(ev, data);\n         });\n      });\n   }\n\n   //\n   // Interface API\n   //\n\n   ////\n   //// Network Utilities\n   ////\n\n   isNetworkConnected() {\n      return io.socket.isConnected();\n   }\n\n   salSend(params) {\n      return new Promise((resolve, reject) => {\n         params.method = params.method.toLowerCase();\n\n         io.socket.request(params, (data, jwres) => {\n            // {json} data\n            // the data response from the request\n            // {json} jwres\n            // A JSON WebSocket Response object.\n            //    {json} jwres.headers :  header values\n            //    {int}  jwres.statusCode : http response code\n            //    {json} jwres.body === resData\n\n            // if this is an  error\n            if (jwres.statusCode >= 400) {\n               // Our NetworkRest.error( err ) should be in this format:\n               // err.status\n               // err.statusText\n               // err.responseText\n\n               var errStr = jwres.error ? jwres.error.toString() : jwres.body;\n\n               var err = new Error(`Socket Error: ${errStr}`);\n               err.status = jwres.statusCode;\n               err.statusText = errStr;\n               err.responseText = jwres.body;\n\n               // on RequestTimeout:\n               // err.statusText == \"Request timeout\"\n\n               reject(err);\n            } else {\n               // some errors like socket disconnected return an Error for data\n               if (data instanceof Error) {\n                  reject(data);\n                  return;\n               }\n\n               if (typeof data == \"string\") {\n                  data = JSON.parse(data);\n               }\n\n               // Got a JSON response but was the service response an error?\n               // this would be a strange case where the .statusCode < 400\n               if (data.status && data.status == \"error\") {\n                  // make sure to reject an err.responseText = data\n                  reject({\n                     status: jwres.statusCode,\n                     responseText: JSON.Stringify(data),\n                  });\n               }\n               // Success!\n               else {\n                  resolve(data);\n               }\n            }\n         });\n      });\n   }\n}\n\nexport default NetworkRestSocket;\n","/*\n * Network.js\n * A network manager for interfacing with our AppBuilder server.\n */\nvar EventEmitter = require(\"events\").EventEmitter;\nimport NetworkRest from \"./NetworkRest\";\nimport NetworkRestSocket from \"./NetworkRestSocket\";\n// import NetworkRelay from \"./NetworkRelay\";\n\nclass Network extends EventEmitter {\n   constructor() {\n      super();\n\n      this.setMaxListeners(0);\n      // we'll have > 10 for sure!\n\n      this.queueLock = null;\n      // {Lock} .queueLock\n      // our semaphore for coordinating our access to our local storage.\n\n      this._config = null;\n      this._network = null;\n      // {NetworkRelay | NetworkRest | NetworkSocket}\n      // the underlying Network connection object actually performing the\n      // communications with the Server.\n      // Which one is specified in the config.appbuilder.networkType setting\n\n      this._queueCount = 0;\n      // {int} _queueCount\n      // the # of network operations currently queued, pending Network\n      // reconnect.\n   }\n\n   init(AB) {\n      // {ABFactory} AB\n\n      this.AB = AB;\n\n      this.queueLock = new this.AB.Lock();\n\n      this._config = this.AB.Config.siteConfig();\n      if (this._config) {\n         switch (this._config.appbuilder.networkType) {\n            case \"relay\":\n               // this._network = new NetworkRelay();\n               break;\n\n            case \"socket\":\n               this._network = new NetworkRestSocket(this);\n               break;\n\n            case \"rest\":\n            default:\n               this._network = new NetworkRest(this);\n               break;\n         }\n\n         return this._network.init(AB);\n      } else {\n         console.error(\"??? Why No site config ???\");\n      }\n\n      //\n      // Handle reconnections and flushing the Queue:\n      //\n      if (io && io.socket) {\n         // When our Socket reconnects, be sure to flush any pending transactions.\n         io.socket.on(\"connected\", () => {\n            this.queueFlush();\n            if (this.idConnectionCheck) {\n               clearTimeout(this.idConnectionCheck);\n               this.idConnectionCheck = null;\n            }\n         });\n      } else {\n         console.error(\"!!! Network.init() : Did not find io.socket\");\n         window.addEventListener(\"online\", () => this.queueFlush());\n      }\n\n      return Promise.resolve();\n   }\n\n   //\n   // Interface API\n   //\n   /**\n    * Network.isRealTime\n    * indicates wether or not the current network connection supports\n    * RealTime updates.\n    * @return {bool}\n    */\n   get isRealTime() {\n      return this._network.isRealTime;\n   }\n\n   /**\n    * Network.get(options, jobResponse)\n    * perform a GET request back to the AppBuilder server.\n    * @param {obj} params the request parameters that need to be executed on\n    *              the AppBuilder Server\n    * @param {obj} jobResponse the callback info for handling the response.\n    *              {\n    *                  key:'unique.key',\n    *                  context:{ obj data }\n    *              }\n    * @return {Promise}\n    */\n   get(...params) {\n      return this._network.get(...params).then((data) => {\n         return this.normalizeData(data);\n      });\n   }\n\n   /**\n    * Network.post()\n    * perform an AJAX POST request to the AppBuilder server.\n    * this is a CREATE operation.\n    * @param {obj} params the request parameters that need to be executed on\n    *              the AppBuilder Server\n    * @param {obj} jobResponse the callback info for handling the response.\n    *              {\n    *                  key:'unique.key',\n    *                  context:{ obj data }\n    *              }\n    * @return {Promise}\n    */\n   post(...params) {\n      return this._network.post(...params).then((data) => {\n         return this.normalizeData(data);\n      });\n   }\n\n   /**\n    * Network.put()\n    * perform a PUT request to the AppBuilder server.\n    * This is for UPDATE/REPLACE operations to data on the server.\n    * @param {obj} params the request parameters that need to be executed on\n    *              the AppBuilder Server\n    * @param {obj} jobResponse the callback info for handling the response.\n    *              {\n    *                  key:'unique.key',\n    *                  context:{ obj data }\n    *              }\n    * @return {Promise}\n    */\n   put(...params) {\n      return this._network.put(...params).then((data) => {\n         return this.normalizeData(data);\n      });\n   }\n\n   /**\n    * Network.delete()\n    * perform an AJAX DELETE request to the AppBuilder server.\n    * @param {obj} params the request parameters that need to be executed on\n    *              the AppBuilder Server\n    * @param {obj} jobResponse the callback info for handling the response.\n    *              {\n    *                  key:'unique.key',\n    *                  context:{ obj data }\n    *              }\n    * @return {Promise}\n    */\n   delete(...params) {\n      return this._network.delete(...params).then((data) => {\n         return this.normalizeData(data);\n      });\n   }\n\n   ////\n   //// Network Utilities\n   ////\n\n   _connectionCheck() {\n      // if (!this.idConnectionCheck) {\n      if (this.isNetworkConnected()) {\n         this.queueFlush().catch(() => {\n            // on an error, we are still having connection issues\n            this.idConnectionCheck = setTimeout(() => {\n               this._connectionCheck();\n            }, 250);\n         });\n         this.idConnectionCheck = null;\n      } else {\n         this.idConnectionCheck = setTimeout(() => {\n            this._connectionCheck();\n         }, 250);\n      }\n      // }\n   }\n\n   /**\n    * @method networkStatus\n    * return the connection type currently registered with the network\n    * plugin.\n    * @return {string}\n    */\n   networkStatus() {\n      return navigator.connection.type;\n   }\n\n   /**\n    * @method isNetworkConnected\n    * return true/false if the device is currently connected to the\n    * internet.\n    * @return {bool}\n    */\n   isNetworkConnected() {\n      // if this is a Web Client and using sails.socket.io\n      if (io && io.socket && io.socket.isConnected) {\n         return io.socket.isConnected();\n      }\n\n      // if this isn't a Cordova Plugin, then return navigator data:\n      if (typeof Connection == \"undefined\") {\n         // NOTE: this technically only detects if we are connected to a\n         // network.  It doesn't guarantee we can communicate across the 'net\n         return navigator.onLine;\n      }\n\n      // Cordova Plugin:\n      return this.networkStatus() != Connection.NONE;\n   }\n\n   /**\n    * publishResponse()\n    * emit the requested response for this network operation.\n    * @param {obj} jobResponse\n    * @param {obj} error\n    * @param {obj} data\n    */\n   publishResponse(jobResponse, error, data) {\n      if (data) {\n         data = this.normalizeData(data);\n      }\n      this.emit(jobResponse.key, jobResponse.context, error, data);\n   }\n\n   normalizeData(data) {\n      // Data returning from our server is wrapped in an outer layer of\n      // information that is for our Networking API.\n      // the outer wrapper should be:\n      // on success :\n      // {\n      //   status: \"success\",\n      //   data:{Data For App}\n      // }\n      // on Error:\n      // {\n      //   status: \"error\",\n      //   id: {int} error code\n      //   ... other data here\n      // }\n\n      // we have physically received a data packet from the server,\n      // but we are informed that our transaction was problematic\n      // (400 level USER problem?)\n      if (data.status === \"error\") {\n         // TODO: review Error procedure here\n         return data;\n      }\n\n      // on success\n      // make sure we return the Application Level Data packet:\n      return data.data || data;\n   }\n\n   ////\n   //// Queued Requests\n   ////\n\n   /**\n    * refQueue()\n    * sub classes can override this for their own separate Queue Data\n    * @return {string}\n    */\n   refQueue() {\n      return \"networkQueue\";\n   }\n\n   /**\n    * queueCount()\n    * return the # of messages in the queue.\n    * @return {int}\n    */\n   queueCount() {\n      return this._queueCount;\n   }\n\n   /**\n    * Adds a request to the outgoing queue.\n    *\n    * @param {object} data\n    * @param {object} jobResponse\n    * @return {Promise}\n    */\n   queue(data, jobResponse) {\n      var refQueue = this.refQueue();\n\n      return new Promise((resolve, reject) => {\n         this.queueLock\n            .acquire()\n            .then(() => {\n               return this.AB.Storage.get(refQueue);\n            })\n            .then((queue) => {\n               queue = queue || [];\n               queue.push({ data, jobResponse });\n               this.AB.log(\n                  `:::: ${queue.length} request${\n                     queue.length > 1 ? \"s\" : \"\"\n                  } queued`\n               );\n               this._queueCount = queue.length;\n               return this.AB.Storage.set(refQueue, queue);\n            })\n            .then(() => {\n               this.emit(\"queued\");\n               // if we are not already polling the network, start\n               if (!this.idConnectionCheck) {\n                  this._connectionCheck();\n               }\n               this.queueLock.release();\n               resolve();\n            })\n            .catch((err) => {\n               this.AB.notify.developer(err, {\n                  message: \"Error while queueing data\",\n               });\n               this.AB.Analytics.logError(err);\n               reject(err);\n\n               this.queueLock.release();\n            });\n      });\n   }\n\n   /**\n    * queueFlush()\n    * Flush the queue and send the contents to the relay server.\n    */\n   queueFlush() {\n      var refQueue = this.refQueue();\n\n      // if we are not connected, then stop\n      if (!this.isNetworkConnected()) {\n         var error = new Error(\"Not connected to the internet.\");\n         error.code = \"E_NOTCONNECTED\";\n         return Promise.reject(error);\n      }\n\n      // otherwise, attempt to flush the queue:\n      return new Promise((resolve, reject) => {\n         this.queueLock\n            .acquire()\n\n            //\n            // Get queue contents\n            //\n            .then(() => {\n               return this.AB.Storage.get(refQueue);\n            })\n\n            //\n            // Send off each queued request\n            //\n            .then((queue) => {\n               // default to [] if not found\n               queue = queue || [];\n\n               // recursively process each pending queue request\n               var processRequest = (cb) => {\n                  if (queue.length == 0) {\n                     cb();\n                  } else {\n                     var entry = queue.shift();\n                     var params = entry.data;\n                     var job = entry.jobResponse;\n                     this._network\n                        .resend(params, job)\n                        .then(() => {\n                           processRequest(cb);\n                        })\n                        .catch((err) => {\n                           // if the err was due to a network connection error\n                           if (err && err.code == \"E_TOMANYRETRIES\") {\n                              cb(err);\n                              return;\n                           }\n                           // otherwise, try the next\n                           processRequest(cb);\n                        });\n                  }\n               };\n\n               return new Promise((res, rej) => {\n                  processRequest((err) => {\n                     if (err) {\n                        rej(err);\n                     } else {\n                        res();\n                     }\n                  });\n               });\n            })\n\n            //\n            // Clear queue contents\n            //\n            .then(() => {\n               this._queueCount = 0;\n               return this.AB.Storage.set(refQueue, []);\n            })\n\n            // release the Lock\n            .then(() => {\n               this.emit(\"queue.synced\");\n               return this.queueLock.release();\n            })\n\n            // all done.\n            .then(() => {\n               resolve();\n            })\n\n            // respond to errors:\n            .catch((err) => {\n               this.AB.notify.developer(err, {\n                  message: \"commAPI queueFlush error\",\n               });\n               this.AB.Analytics.logError(err);\n\n               this.queueLock.release().then(() => {\n                  reject(err);\n               });\n            });\n      });\n   }\n\n   /**\n    * Reset credentials to a blank state.\n    * @return {Promise}\n    */\n   reset() {\n      return Promise.resolve();\n   }\n\n   /**\n    * type()\n    * return the type of network connection we are using.\n    * [\"rest\", \"socket\", \"relay\"]\n    * @return {string}\n    */\n   type() {\n      return this._config.appbuilder.networkType;\n   }\n\n   // uuid() {\n   //    return this.AB.uuid();\n   // }\n\n   getTokens() {\n      // called in appPage.js : openRelayLoader()\n      return {};\n   }\n}\n\nexport default new Network();\n","/*\n * StorageLocal\n *\n * An interface for storing and retrieving Client Side data.  Data stored\n * in StorageLoacal is NOT encrypted.\n *\n * This implementation is based upon the webix.storage.local library.\n * See: https://docs.webix.com/api__refs__storage.local.html\n *\n */\n\nvar EventEmitter = require(\"events\").EventEmitter;\n\nclass StorageLocal extends EventEmitter {\n   constructor() {\n      super();\n\n      this.tenantStorage = null;\n      // {Webix.storage} object.\n      // We divide the storage data according to the tenant we are working\n      // with.  This way Users who can move between different Tenants can\n      // keep their local data separated.\n   }\n\n   init(AB) {\n      // {ABFactory} AB\n\n      this.AB = AB;\n      var tenantID = this.AB.Tenant.id();\n      if (!tenantID) {\n         tenantID = \"noAuth\";\n         // \"noAuth\" is considered the tenant on our Login sequence\n         // which should have a minimum of data stored (language maybe?)\n      }\n\n      this.tenantStorage = this.AB.Webix.storage.prefix(\n         tenantID,\n         this.AB.Webix.storage.local\n      );\n\n      // this isn't actually an Async operation, so just resolve()\n      return Promise.resolve();\n   }\n\n   set(key, value /* , options = {} */) {\n      return Promise.resolve().then(() => {\n         return this.tenantStorage.put(key, value);\n      });\n   }\n\n   get(key /*, options = {} */) {\n      return Promise.resolve().then(() => {\n         return this.tenantStorage.get(key);\n      });\n   }\n\n   clear(key) {\n      return Promise.resolve().then(() => {\n         return this.tenantStorage.remove(key);\n      });\n   }\n\n   clearAll() {\n      return Promise.resolve().then(() => {\n         return this.tenantStorage.clear();\n      });\n   }\n}\n\nexport default new StorageLocal();\n","var EventEmitter = require(\"events\").EventEmitter;\n\nimport StorageLocal from \"./StorageLocal.js\";\n\nclass Storage extends EventEmitter {\n   constructor() {\n      super();\n\n      this.tenantStorage = null;\n      this._config = null;\n      this._storage = null;\n   }\n\n   init(AB) {\n      // {ABFactory} AB\n\n      this.AB = AB;\n      var config = this.AB.Config.siteConfig();\n      if (config) {\n         if (config.storage && config.storage.encrypted) {\n            console.error(\"TODO: Implement Encrypted Storage\");\n            // this._storage = StorageEncrypted;\n            this._storage = StorageLocal;\n         } else {\n            this._storage = StorageLocal;\n         }\n\n         return this._storage.init(AB);\n      } else {\n         console.error(\"??? Why No site config ???\");\n      }\n\n      return Promise.resolve();\n   }\n\n   set(...params) {\n      return this._storage.set(...params);\n   }\n\n   get(...params) {\n      return this._storage.get(...params);\n   }\n\n   clear(...params) {\n      return this._storage.clear(...params);\n   }\n\n   clearAll(...params) {\n      return this._storage.clearAll(...params);\n   }\n}\n\nexport default new Storage();\n","var EventEmitter = require(\"events\").EventEmitter;\n\nimport Config from \"../config/Config.js\";\n\nclass Tenant extends EventEmitter {\n   constructor() {\n      super();\n\n      this.text = false;\n      this._config = null;\n      this.textClickToEnter = null;\n   }\n\n   init() {\n      var config = Config.tenantConfig();\n      if (config) {\n         // check if we have options that are stored as a string\n         if (\n            typeof config.options === \"string\" ||\n            config.options instanceof String\n         ) {\n            // if we do try to parse them into a JSON object\n            try {\n               config.options = JSON.parse(config.options);\n            } catch (error) {\n               console.error(error);\n            }\n         }\n         this._config = config;\n         this.textClickToEnter = config.options.textClickToEnter;\n      }\n\n      // this isn't actually an Async operation, so just resolve()\n      return Promise.resolve();\n   }\n\n   id() {\n      if (this._config.id == \"??\") {\n         return null;\n      }\n      return this._config.id;\n   }\n\n   setting(key, value) {\n      if (value) {\n         this._config.options[key] = value;\n         return;\n      }\n      return this._config.options[key];\n   }\n}\n\nexport default new Tenant();\n","/**\n * @class configDesktop\n *\n * Manage our configuration settings for Desktop styles.\n\n */\n\nexport default {\n   // Application List\n   appListRowHeight: 67,\n\n   // button types\n   buttonWidthLarge: 200,\n   buttonWidthMedium: 150,\n   buttonWidthSmall: 100,\n   buttonWidthExtraSmall: 50,\n\n   // tab types\n   tabWidthLarge: 200,\n   tabWidthMedium: 120,\n   tabWidthSmall: 100,\n   tabWidthExtraSmall: 50,\n\n   // column types\n   columnWidthXLarge: 350,\n   columnWidthLarge: 250,\n   columnWidthMedium: 200,\n   columnWidthSmall: 150,\n   columnWidthExtraSmall: 100,\n\n   // spacers\n   xSmallSpacer: 5,\n   smallSpacer: 10,\n   mediumSpacer: 25,\n   largeSpacer: 50,\n   xLargeSpacer: 100,\n   xxLargeSpacer: 200,\n   xxxLargeSpacer: 400,\n   appListSpacerRowHeight: 100,\n   appListSpacerColMinWidth: 100,\n   appListSpacerColMaxWidth: 200,\n   objectWorkspaceColWidth: 20,\n\n   // labels\n   labelWidthSmall: 50,\n   labelWidthMedium: 80,\n   labelWidthLarge: 120,\n   labelWidthXLarge: 150,\n   labelWidthXXLarge: 200,\n   labelWidthXXXLarge: 280,\n   labelWidthCheckbox: 0,\n\n   // show elements on desktop\n   hideMobile: false,\n};\n","/**\n * @class configMobile\n *\n * Manage our configuration settings for mobile styles.\n\n */\n\nexport default {\n   // Application List\n   appListRowHeight: 67,\n\n   // button types\n   buttonWidthLarge: 200,\n   buttonWidthMedium: 150,\n   buttonWidthSmall: 100,\n   buttonWidthExtraSmall: 50,\n\n   // tab types\n   tabWidthLarge: 200,\n   tabWidthMedium: 120,\n   tabWidthSmall: 100,\n   tabWidthExtraSmall: 50,\n\n   // column types\n   columnWidthLarge: 250,\n   columnWidthMedium: 200,\n   columnWidthSmall: 150,\n   columnWidthExtraSmall: 100,\n\n   // spacers\n   xSmallSpacer: 1,\n   smallSpacer: 1,\n   mediumSpacer: 10,\n   largeSpacer: 20,\n   xLargeSpacer: 50,\n   xxLargeSpacer: 100,\n   xxxLargeSpacer: 120,\n   appListSpacerRowHeight: 10,\n   appListSpacerColMinWidth: 1,\n   appListSpacerColMaxWidth: 1,\n   objectWorkspaceColWidth: 1,\n\n   // labels\n   labelWidthSmall: 50,\n   labelWidthMedium: 80,\n   labelWidthLarge: 120,\n   labelWidthXLarge: 120,\n   labelWidthXXLarge: 120,\n   labelWidthCheckbox: 0,\n\n   // hide elements for mobile\n   hideMobile: true,\n};\n","/**\n * @class config\n *\n * Manage our configuration settings.\n */\n\nimport ConfigDesktop from \"./configDesktop\";\nimport ConfigMobile from \"./configMobile\";\nimport Icons from \"./icons\";\n\nexport default {\n   config: function () {\n      // TODO: decide which config file to return here:\n      if (window.innerWidth < 768) {\n         return ConfigMobile;\n      }\n      return ConfigDesktop;\n   },\n   icons: Icons.icons,\n};\n","export default {\n   icons: [\n      \"500px\",\n      \"address-book\",\n      \"address-book-o\",\n      \"address-card\",\n      \"address-card-o\",\n      \"adjust\",\n      \"adn\",\n      \"align-center\",\n      \"align-justify\",\n      \"align-left\",\n      \"align-right\",\n      \"amazon\",\n      \"ambulance\",\n      \"american-sign-language-interpreting\",\n      \"anchor\",\n      \"android\",\n      \"angellist\",\n      \"angle-double-down\",\n      \"angle-double-left\",\n      \"angle-double-right\",\n      \"angle-double-up\",\n      \"angle-down\",\n      \"angle-left\",\n      \"angle-right\",\n      \"angle-up\",\n      \"apple\",\n      \"archive\",\n      \"area-chart\",\n      \"arrow-circle-down\",\n      \"arrow-circle-left\",\n      \"arrow-circle-o-down\",\n      \"arrow-circle-o-left\",\n      \"arrow-circle-o-right\",\n      \"arrow-circle-o-up\",\n      \"arrow-circle-right\",\n      \"arrow-circle-up\",\n      \"arrow-down\",\n      \"arrow-left\",\n      \"arrow-right\",\n      \"arrow-up\",\n      \"arrows\",\n      \"arrows-alt\",\n      \"arrows-h\",\n      \"arrows-v\",\n      \"asl-interpreting\",\n      \"assistive-listening-systems\",\n      \"asterisk\",\n      \"at\",\n      \"audio-description\",\n      \"automobile\",\n      \"backward\",\n      \"balance-scale\",\n      \"ban\",\n      \"bandcamp\",\n      \"bank\",\n      \"bar-chart\",\n      \"bar-chart-o\",\n      \"barcode\",\n      \"bars\",\n      \"bath\",\n      \"bathtub\",\n      \"battery\",\n      \"battery-0\",\n      \"battery-1\",\n      \"battery-2\",\n      \"battery-3\",\n      \"battery-4\",\n      \"battery-empty\",\n      \"battery-full\",\n      \"battery-half\",\n      \"battery-quarter\",\n      \"battery-three-quarters\",\n      \"bed\",\n      \"beer\",\n      \"behance\",\n      \"behance-square\",\n      \"bell\",\n      \"bell-o\",\n      \"bell-slash\",\n      \"bell-slash-o\",\n      \"bicycle\",\n      \"binoculars\",\n      \"birthday-cake\",\n      \"bitbucket\",\n      \"bitbucket-square\",\n      \"bitcoin\",\n      \"black-tie\",\n      \"blind\",\n      \"bluetooth\",\n      \"bluetooth-b\",\n      \"bold\",\n      \"bolt\",\n      \"bomb\",\n      \"book\",\n      \"bookmark\",\n      \"bookmark-o\",\n      \"braille\",\n      \"briefcase\",\n      \"btc\",\n      \"bug\",\n      \"building\",\n      \"building-o\",\n      \"bullhorn\",\n      \"bullseye\",\n      \"bus\",\n      \"buysellads\",\n      \"cab\",\n      \"calculator\",\n      \"calendar\",\n      \"calendar-check-o\",\n      \"calendar-minus-o\",\n      \"calendar-o\",\n      \"calendar-plus-o\",\n      \"calendar-times-o\",\n      \"camera\",\n      \"camera-retro\",\n      \"car\",\n      \"caret-down\",\n      \"caret-left\",\n      \"caret-right\",\n      \"caret-square-o-down\",\n      \"caret-square-o-left\",\n      \"caret-square-o-right\",\n      \"caret-square-o-up\",\n      \"caret-up\",\n      \"cart-arrow-down\",\n      \"cart-plus\",\n      \"cc\",\n      \"cc-amex\",\n      \"cc-diners-club\",\n      \"cc-discover\",\n      \"cc-jcb\",\n      \"cc-mastercard\",\n      \"cc-paypal\",\n      \"cc-stripe\",\n      \"cc-visa\",\n      \"certificate\",\n      \"chain\",\n      \"chain-broken\",\n      \"check\",\n      \"check-circle\",\n      \"check-circle-o\",\n      \"check-square\",\n      \"check-square-o\",\n      \"chevron-circle-down\",\n      \"chevron-circle-left\",\n      \"chevron-circle-right\",\n      \"chevron-circle-up\",\n      \"chevron-down\",\n      \"chevron-left\",\n      \"chevron-right\",\n      \"chevron-up\",\n      \"child\",\n      \"chrome\",\n      \"circle\",\n      \"circle-o\",\n      \"circle-o-notch\",\n      \"circle-thin\",\n      \"clipboard\",\n      \"clock-o\",\n      \"clone\",\n      \"close\",\n      \"cloud\",\n      \"cloud-download\",\n      \"cloud-upload\",\n      \"cny\",\n      \"code\",\n      \"code-fork\",\n      \"codepen\",\n      \"codiepie\",\n      \"coffee\",\n      \"cog\",\n      \"cogs\",\n      \"columns\",\n      \"comment\",\n      \"comment-o\",\n      \"commenting\",\n      \"commenting-o\",\n      \"comments\",\n      \"comments-o\",\n      \"compass\",\n      \"compress\",\n      \"connectdevelop\",\n      \"contao\",\n      \"copy\",\n      \"copyright\",\n      \"creative-commons\",\n      \"credit-card\",\n      \"credit-card-alt\",\n      \"crop\",\n      \"crosshairs\",\n      \"css3\",\n      \"cube\",\n      \"cubes\",\n      \"cut\",\n      \"cutlery\",\n      \"dashboard\",\n      \"dashcube\",\n      \"database\",\n      \"deaf\",\n      \"deafness\",\n      \"dedent\",\n      \"delicious\",\n      \"desktop\",\n      \"deviantart\",\n      \"diamond\",\n      \"digg\",\n      \"dollar\",\n      \"dot-circle-o\",\n      \"download\",\n      \"dribbble\",\n      \"drivers-license\",\n      \"drivers-license-o\",\n      \"dropbox\",\n      \"drupal\",\n      \"edge\",\n      \"edit\",\n      \"eercast\",\n      \"eject\",\n      \"ellipsis-h\",\n      \"ellipsis-v\",\n      \"empire\",\n      \"envelope\",\n      \"envelope-o\",\n      \"envelope-open\",\n      \"envelope-open-o\",\n      \"envelope-square\",\n      \"envira\",\n      \"eraser\",\n      \"etsy\",\n      \"eur\",\n      \"euro\",\n      \"exchange\",\n      \"exclamation\",\n      \"exclamation-circle\",\n      \"exclamation-triangle\",\n      \"expand\",\n      \"expeditedssl\",\n      \"external-link\",\n      \"external-link-square\",\n      \"eye\",\n      \"eye-slash\",\n      \"eyedropper\",\n      \"fa\",\n      \"facebook\",\n      \"facebook-f\",\n      \"facebook-official\",\n      \"facebook-square\",\n      \"fast-backward\",\n      \"fast-forward\",\n      \"fax\",\n      \"feed\",\n      \"female\",\n      \"fighter-jet\",\n      \"file\",\n      \"file-archive-o\",\n      \"file-audio-o\",\n      \"file-code-o\",\n      \"file-excel-o\",\n      \"file-image-o\",\n      \"file-movie-o\",\n      \"file-o\",\n      \"file-pdf-o\",\n      \"file-photo-o\",\n      \"file-picture-o\",\n      \"file-powerpoint-o\",\n      \"file-sound-o\",\n      \"file-text\",\n      \"file-text-o\",\n      \"file-video-o\",\n      \"file-word-o\",\n      \"file-zip-o\",\n      \"files-o\",\n      \"film\",\n      \"filter\",\n      \"fire\",\n      \"fire-extinguisher\",\n      \"firefox\",\n      \"first-order\",\n      \"flag\",\n      \"flag-checkered\",\n      \"flag-o\",\n      \"flash\",\n      \"flask\",\n      \"flickr\",\n      \"floppy-o\",\n      \"folder\",\n      \"folder-o\",\n      \"folder-open\",\n      \"folder-open-o\",\n      \"font\",\n      \"font-awesome\",\n      \"fonticons\",\n      \"fort-awesome\",\n      \"forumbee\",\n      \"forward\",\n      \"foursquare\",\n      \"free-code-camp\",\n      \"frown-o\",\n      \"futbol-o\",\n      \"gamepad\",\n      \"gavel\",\n      \"gbp\",\n      \"ge\",\n      \"gear\",\n      \"gears\",\n      \"genderless\",\n      \"get-pocket\",\n      \"gg\",\n      \"gg-circle\",\n      \"gift\",\n      \"git\",\n      \"git-square\",\n      \"github\",\n      \"github-alt\",\n      \"github-square\",\n      \"gitlab\",\n      \"gittip\",\n      \"glass\",\n      \"glide\",\n      \"glide-g\",\n      \"globe\",\n      \"google\",\n      \"google-plus\",\n      \"google-plus-circle\",\n      \"google-plus-official\",\n      \"google-plus-square\",\n      \"google-wallet\",\n      \"graduation-cap\",\n      \"gratipay\",\n      \"grav\",\n      \"group\",\n      \"h-square\",\n      \"hacker-news\",\n      \"hand-grab-o\",\n      \"hand-lizard-o\",\n      \"hand-o-down\",\n      \"hand-o-left\",\n      \"hand-o-right\",\n      \"hand-o-up\",\n      \"hand-paper-o\",\n      \"hand-peace-o\",\n      \"hand-pointer-o\",\n      \"hand-rock-o\",\n      \"hand-scissors-o\",\n      \"hand-spock-o\",\n      \"hand-stop-o\",\n      \"handshake-o\",\n      \"hard-of-hearing\",\n      \"hashtag\",\n      \"hdd-o\",\n      \"header\",\n      \"headphones\",\n      \"heart\",\n      \"heart-o\",\n      \"heartbeat\",\n      \"history\",\n      \"home\",\n      \"hospital-o\",\n      \"hotel\",\n      \"hourglass\",\n      \"hourglass-1\",\n      \"hourglass-2\",\n      \"hourglass-3\",\n      \"hourglass-end\",\n      \"hourglass-half\",\n      \"hourglass-o\",\n      \"hourglass-start\",\n      \"houzz\",\n      \"html5\",\n      \"i-cursor\",\n      \"id-badge\",\n      \"id-card\",\n      \"id-card-o\",\n      \"ils\",\n      \"image\",\n      \"imdb\",\n      \"inbox\",\n      \"indent\",\n      \"industry\",\n      \"info\",\n      \"info-circle\",\n      \"inr\",\n      \"instagram\",\n      \"institution\",\n      \"internet-explorer\",\n      \"intersex\",\n      \"ioxhost\",\n      \"italic\",\n      \"joomla\",\n      \"jpy\",\n      \"jsfiddle\",\n      \"key\",\n      \"keyboard-o\",\n      \"krw\",\n      \"language\",\n      \"laptop\",\n      \"lastfm\",\n      \"lastfm-square\",\n      \"leaf\",\n      \"leanpub\",\n      \"legal\",\n      \"lemon-o\",\n      \"level-down\",\n      \"level-up\",\n      \"life-bouy\",\n      \"life-buoy\",\n      \"life-ring\",\n      \"life-saver\",\n      \"lightbulb-o\",\n      \"line-chart\",\n      \"link\",\n      \"linkedin\",\n      \"linkedin-square\",\n      \"linode\",\n      \"linux\",\n      \"list\",\n      \"list-alt\",\n      \"list-ol\",\n      \"list-ul\",\n      \"location-arrow\",\n      \"lock\",\n      \"long-arrow-down\",\n      \"long-arrow-left\",\n      \"long-arrow-right\",\n      \"long-arrow-up\",\n      \"low-vision\",\n      \"magic\",\n      \"magnet\",\n      \"mail-forward\",\n      \"mail-reply\",\n      \"mail-reply-all\",\n      \"male\",\n      \"map\",\n      \"map-marker\",\n      \"map-o\",\n      \"map-pin\",\n      \"map-signs\",\n      \"mars\",\n      \"mars-double\",\n      \"mars-stroke\",\n      \"mars-stroke-h\",\n      \"mars-stroke-v\",\n      \"maxcdn\",\n      \"meanpath\",\n      \"medium\",\n      \"medkit\",\n      \"meetup\",\n      \"meh-o\",\n      \"mercury\",\n      \"microchip\",\n      \"microphone\",\n      \"microphone-slash\",\n      \"minus\",\n      \"minus-circle\",\n      \"minus-square\",\n      \"minus-square-o\",\n      \"mixcloud\",\n      \"mobile\",\n      \"mobile-phone\",\n      \"modx\",\n      \"money\",\n      \"moon-o\",\n      \"mortar-board\",\n      \"motorcycle\",\n      \"mouse-pointer\",\n      \"music\",\n      \"navicon\",\n      \"neuter\",\n      \"newspaper-o\",\n      \"object-group\",\n      \"object-ungroup\",\n      \"odnoklassniki\",\n      \"odnoklassniki-square\",\n      \"opencart\",\n      \"openid\",\n      \"opera\",\n      \"optin-monster\",\n      \"outdent\",\n      \"pagelines\",\n      \"paint-brush\",\n      \"paper-plane\",\n      \"paper-plane-o\",\n      \"paperclip\",\n      \"paragraph\",\n      \"paste\",\n      \"pause\",\n      \"pause-circle\",\n      \"pause-circle-o\",\n      \"paw\",\n      \"paypal\",\n      \"pencil\",\n      \"pencil-square\",\n      \"pencil-square-o\",\n      \"percent\",\n      \"phone\",\n      \"phone-square\",\n      \"photo\",\n      \"picture-o\",\n      \"pie-chart\",\n      \"pied-piper\",\n      \"pied-piper-alt\",\n      \"pied-piper-pp\",\n      \"pinterest\",\n      \"pinterest-p\",\n      \"pinterest-square\",\n      \"plane\",\n      \"play\",\n      \"play-circle\",\n      \"play-circle-o\",\n      \"plug\",\n      \"plus\",\n      \"plus-circle\",\n      \"plus-square\",\n      \"plus-square-o\",\n      \"podcast\",\n      \"power-off\",\n      \"print\",\n      \"product-hunt\",\n      \"puzzle-piece\",\n      \"qq\",\n      \"qrcode\",\n      \"question\",\n      \"question-circle\",\n      \"question-circle-o\",\n      \"quora\",\n      \"quote-left\",\n      \"quote-right\",\n      \"ra\",\n      \"random\",\n      \"ravelry\",\n      \"rebel\",\n      \"recycle\",\n      \"reddit\",\n      \"reddit-alien\",\n      \"reddit-square\",\n      \"refresh\",\n      \"registered\",\n      \"remove\",\n      \"renren\",\n      \"reorder\",\n      \"repeat\",\n      \"reply\",\n      \"reply-all\",\n      \"resistance\",\n      \"retweet\",\n      \"rmb\",\n      \"road\",\n      \"rocket\",\n      \"rotate-left\",\n      \"rotate-right\",\n      \"rouble\",\n      \"rss\",\n      \"rss-square\",\n      \"rub\",\n      \"ruble\",\n      \"rupee\",\n      \"s15\",\n      \"safari\",\n      \"save\",\n      \"scissors\",\n      \"scribd\",\n      \"search\",\n      \"search-minus\",\n      \"search-plus\",\n      \"sellsy\",\n      \"send\",\n      \"send-o\",\n      \"server\",\n      \"share\",\n      \"share-alt\",\n      \"share-alt-square\",\n      \"share-square\",\n      \"share-square-o\",\n      \"shekel\",\n      \"sheqel\",\n      \"shield\",\n      \"ship\",\n      \"shirtsinbulk\",\n      \"shopping-bag\",\n      \"shopping-basket\",\n      \"shopping-cart\",\n      \"shower\",\n      \"sign-in\",\n      \"sign-language\",\n      \"sign-out\",\n      \"signal\",\n      \"signing\",\n      \"simplybuilt\",\n      \"sitemap\",\n      \"skyatlas\",\n      \"skype\",\n      \"slack\",\n      \"sliders\",\n      \"slideshare\",\n      \"smile-o\",\n      \"snapchat\",\n      \"snapchat-ghost\",\n      \"snapchat-square\",\n      \"snowflake-o\",\n      \"soccer-ball-o\",\n      \"sort\",\n      \"sort-alpha-asc\",\n      \"sort-alpha-desc\",\n      \"sort-amount-asc\",\n      \"sort-amount-desc\",\n      \"sort-asc\",\n      \"sort-desc\",\n      \"sort-down\",\n      \"sort-numeric-asc\",\n      \"sort-numeric-desc\",\n      \"sort-up\",\n      \"soundcloud\",\n      \"space-shuttle\",\n      \"spinner\",\n      \"spoon\",\n      \"spotify\",\n      \"square\",\n      \"square-o\",\n      \"stack-exchange\",\n      \"stack-overflow\",\n      \"star\",\n      \"star-half\",\n      \"star-half-empty\",\n      \"star-half-full\",\n      \"star-half-o\",\n      \"star-o\",\n      \"steam\",\n      \"steam-square\",\n      \"step-backward\",\n      \"step-forward\",\n      \"stethoscope\",\n      \"sticky-note\",\n      \"sticky-note-o\",\n      \"stop\",\n      \"stop-circle\",\n      \"stop-circle-o\",\n      \"street-view\",\n      \"strikethrough\",\n      \"stumbleupon\",\n      \"stumbleupon-circle\",\n      \"subscript\",\n      \"subway\",\n      \"suitcase\",\n      \"sun-o\",\n      \"superpowers\",\n      \"superscript\",\n      \"support\",\n      \"table\",\n      \"tablet\",\n      \"tachometer\",\n      \"tag\",\n      \"tags\",\n      \"tasks\",\n      \"taxi\",\n      \"telegram\",\n      \"television\",\n      \"tencent-weibo\",\n      \"terminal\",\n      \"text-height\",\n      \"text-width\",\n      \"th\",\n      \"th-large\",\n      \"th-list\",\n      \"themeisle\",\n      \"thermometer\",\n      \"thermometer-0\",\n      \"thermometer-1\",\n      \"thermometer-2\",\n      \"thermometer-3\",\n      \"thermometer-4\",\n      \"thermometer-empty\",\n      \"thermometer-full\",\n      \"thermometer-half\",\n      \"thermometer-quarter\",\n      \"thermometer-three-quarters\",\n      \"thumb-tack\",\n      \"thumbs-down\",\n      \"thumbs-o-down\",\n      \"thumbs-o-up\",\n      \"thumbs-up\",\n      \"ticket\",\n      \"times\",\n      \"times-circle\",\n      \"times-circle-o\",\n      \"times-rectangle\",\n      \"times-rectangle-o\",\n      \"tint\",\n      \"toggle-down\",\n      \"toggle-left\",\n      \"toggle-off\",\n      \"toggle-on\",\n      \"toggle-right\",\n      \"toggle-up\",\n      \"trademark\",\n      \"train\",\n      \"transgender\",\n      \"transgender-alt\",\n      \"trash\",\n      \"trash-o\",\n      \"tree\",\n      \"trello\",\n      \"tripadvisor\",\n      \"trophy\",\n      \"truck\",\n      \"try\",\n      \"tty\",\n      \"tumblr\",\n      \"tumblr-square\",\n      \"turkish-lira\",\n      \"tv\",\n      \"twitch\",\n      \"twitter\",\n      \"twitter-square\",\n      \"umbrella\",\n      \"underline\",\n      \"undo\",\n      \"universal-access\",\n      \"university\",\n      \"unlink\",\n      \"unlock\",\n      \"unlock-alt\",\n      \"unsorted\",\n      \"upload\",\n      \"usb\",\n      \"usd\",\n      \"user\",\n      \"user-circle\",\n      \"user-circle-o\",\n      \"user-md\",\n      \"user-o\",\n      \"user-plus\",\n      \"user-secret\",\n      \"user-times\",\n      \"users\",\n      \"vcard\",\n      \"vcard-o\",\n      \"venus\",\n      \"venus-double\",\n      \"venus-mars\",\n      \"viacoin\",\n      \"viadeo\",\n      \"viadeo-square\",\n      \"video-camera\",\n      \"vimeo\",\n      \"vimeo-square\",\n      \"vine\",\n      \"vk\",\n      \"volume-control-phone\",\n      \"volume-down\",\n      \"volume-off\",\n      \"volume-up\",\n      \"warning\",\n      \"wechat\",\n      \"weibo\",\n      \"weixin\",\n      \"whatsapp\",\n      \"wheelchair\",\n      \"wheelchair-alt\",\n      \"wifi\",\n      \"wikipedia-w\",\n      \"window-close\",\n      \"window-close-o\",\n      \"window-maximize\",\n      \"window-minimize\",\n      \"window-restore\",\n      \"windows\",\n      \"won\",\n      \"wordpress\",\n      \"wpbeginner\",\n      \"wpexplorer\",\n      \"wpforms\",\n      \"wrench\",\n      \"xing\",\n      \"xing-square\",\n      \"y-combinator\",\n      \"y-combinator-square\",\n      \"yahoo\",\n      \"yc\",\n      \"yc-square\",\n      \"yelp\",\n      \"yen\",\n      \"yoast\",\n      \"youtube\",\n      \"youtube-play\",\n      \"youtube-square\",\n   ],\n};\n","import ABFactoryCore from \"./core/ABFactoryCore\";\n\nimport _ from \"lodash\";\nimport moment from \"moment\";\nimport { nanoid } from \"nanoid\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport FilterComplex from \"./platform/FilterComplex\";\n\n//\n// Our Common Resources\n//\nimport Config from \"../config/Config.js\";\n// Config : responsible for all the configuration/settings of our instance.\n\nimport Account from \"../resources/Account.js\";\n// Account : manages the current Logged in User and Account information.\n\nimport ClassUI from \"../ui/ClassUI.js\";\n\nimport Dialog from \"./_factory_utils/Dialog.js\";\n// Dialog : common UI dialogs.\n\nimport Multilingual from \"../resources/Multilingual.js\";\n// Multilingual: our interface Labels and language options\n\nimport Network from \"../resources/Network.js\";\n// Network: our interface for communicating to our server\n\nimport Storage from \"../resources/Storage.js\";\n// Storage: manages our interface for local storage\n\nimport ABViewManager from \"./core/ABViewManagerCore\";\n\nimport Tenant from \"../resources/Tenant.js\";\n// Tenant: manages the Tenant information of the current instance\n\nimport UISettings from \"./uiSettings/config.js\";\n// UISettings: detailed settings for our common UI elements\n\nimport Webix from \"../js/webix/webix.js\";\n// NOTE: moved to require() because using import with webix_debug.js\n// really messed things up!\n// var Webix = require(\"../js/webix/webix-debug.js\");\n\nclass ABValidator {\n   constructor(AB) {\n      this.AB = AB;\n      this.errors = [];\n   }\n\n   addError(name, message) {\n      this.errors.push({ name: name, message: message });\n   }\n\n   pass() {\n      return this.errors.length == 0;\n   }\n\n   fail() {\n      return this.errors.length > 0;\n   }\n\n   toValidationObject() {\n      var obj = {\n         error: \"E_VALIDATION\",\n         invalidAttributes: {},\n      };\n\n      var attr = obj.invalidAttributes;\n\n      this.errors.forEach((e) => {\n         attr[e.name] = attr[e.name] || [];\n         attr[e.name].push(e);\n      });\n\n      return obj;\n   }\n\n   updateForm(form) {\n      var vObj = this.toValidationObject();\n      this.AB.Validation.isFormValidationError(vObj, form);\n   }\n\n   updateGrid(rowID, grid) {\n      var vObj = this.toValidationObject();\n      this.AB.Validation.isGridValidationError(vObj, rowID, grid);\n   }\n}\n\n//\n// AppBuilder Objects\n//\n\nclass ABFactory extends ABFactoryCore {\n   constructor(definitions) {\n      super(definitions);\n\n      // Common Reference to Configuration Values\n      this.Config = Config;\n\n      this.Class.FilterComplex = FilterComplex;\n\n      //\n      // Resources\n      //\n      this.Account = Account;\n      this.Dialog = Dialog;\n      this.Multilingual = Multilingual;\n      this.Network = Network;\n      this.Storage = Storage;\n      this.Tenant = Tenant;\n      this.Webix = Webix;\n\n      // Plugin Classes\n      this.ClassUI = ClassUI;\n\n      // additional Class definitions\n      this.Class.ABViewManager = ABViewManager;\n\n      // Temp placeholders until Resources are implemented:\n      this.Analytics = {\n         log: () => {},\n         logError: () => {},\n      };\n      this.Lock = class Lock {\n         constructor() {}\n\n         acquire() {\n            return Promise.resolve();\n         }\n         release() {\n            return Promise.resolve();\n         }\n      };\n\n      this.UISettings = UISettings;\n\n      this.Validation = {\n         validator: () => {\n            return new ABValidator(this);\n         },\n\n         errorSailsCleanup: function (error) {\n            if (error) {\n               //// if the error obj is provided by Sails response,\n               //// do some clean up on the error object:\n\n               // dig down to sails provided error object:\n               if (\n                  error.error &&\n                  error.error == \"E_UNKNOWN\" &&\n                  error.raw &&\n                  error.raw.length > 0\n               ) {\n                  error = error.raw[0];\n               }\n\n               // drill down to the embedded .err object if it exists\n               if (error.err) {\n                  error = error.err;\n               }\n\n               // if this is from our server response:\n               if (\n                  error.data &&\n                  error.data.error &&\n                  error.data.error == \"E_VALIDATION\"\n               ) {\n                  error = error.data;\n               }\n            }\n\n            return error;\n         },\n\n         /**\n          * @function AB.Validation.isFormValidationError\n          *\n          * scans the given error to see if it is a sails' response about an invalid\n          * value from one of the form elements.\n          *\n          * @codestart\n          * var form = $$('formID');\n          * var values = form.getValues();\n          * model.attr(values);\n          * model.save()\n          * .fail(function(err){\n          *     if (!OP.Form.isFormValidationError(err, form)) {\n          *         OP.error.log('Error saving current model ()', {error:err, values:values});\n          *     }\n          * })\n          * .then(function(newData){\n          *\n          * });\n          * @codeend\n          *\n          * @param {obj} error\n          *        the error response object\n          * @param {obj} form\n          *        the webix form instance (or reference)\n          * @return {bool}\n          *         true if error was about a form element.\n          *         false otherwise.\n          */\n         isFormValidationError: function (error, form) {\n            var hasFocused = false;\n            // {bool} have we set focus to form component?\n\n            // if we have an error object:\n            if (error) {\n               //// if the error obj is provided by Sails response,\n               //// do some clean up on the error object:\n\n               error = this.errorSailsCleanup(error);\n\n               //// Now process the error object\n               ////\n               if (\n                  (error.error && error.error == \"E_VALIDATION\") ||\n                  (error.code && error.code == \"E_VALIDATION\")\n               ) {\n                  var attrs = error.invalidAttributes;\n                  if (attrs) {\n                     var wasForm = false;\n                     for (var attr in attrs) {\n                        // if this is a field in the form:\n                        if (form.elements[attr]) {\n                           var errors = attrs[attr];\n                           var msg = [];\n                           errors.forEach(function (err) {\n                              msg.push(err.message);\n                           });\n\n                           // set the invalid error message\n                           form.markInvalid(attr, msg.join(\", \"));\n\n                           // set focus to the 1st form element we mark:\n                           if (!hasFocused) {\n                              form.elements[attr].focus();\n                              hasFocused = true;\n                           }\n\n                           wasForm = true;\n                        }\n                     }\n\n                     if (wasForm) {\n                        return true;\n                     }\n                  }\n               }\n            }\n\n            // if we missed updating our form with an error\n            // this was not a validation error so return false\n            return false;\n         },\n\n         /**\n          * @method AB.Validation.isGridValidationError\n          *\n          * scans the given error to see if it is a sails' response about an invalid\n          * value from one of our grid columns.\n          *\n          * @codestart\n          * var grid = $$('myGrid');\n          * model.attr(values);\n          * model.save()\n          * .fail(function(err){\n          *     if (!OP.Validation.isGridValidationError(err, editor, grid)) {\n          *         OP.error.log('Error saving current model ()', {error:err, values:values});\n          *     }\n          * })\n          * .then(function(newData){\n          *\n          * });\n          * @codeend\n          *\n          * @param {Error} error\n          *        the error response object\n          * @param {integer} row\n          *        the row id of the Grid to update.\n          * @param {webix.datatable} Grid\n          *        the webix grid instance (or reference)\n          * @return {bool}\n          *         true if error was about a grid column.\n          *         false otherwise.\n          */\n         isGridValidationError: function (error, row, Grid) {\n            // if we have an error object:\n            if (error) {\n               //// if the error obj is provided by Sails response,\n               //// do some clean up on the error object:\n\n               error = this.errorSailsCleanup(error);\n\n               //// Now process the error object\n               ////\n               if (\n                  (error.error && error.error == \"E_VALIDATION\") ||\n                  (error.code && error.code == \"E_VALIDATION\")\n               ) {\n                  var attrs = error.invalidAttributes;\n                  if (attrs) {\n                     var wasGrid = false;\n                     for (var attr in attrs) {\n                        Grid.addCellCss(row, attr, \"webix_invalid\");\n                        Grid.addCellCss(row, attr, \"webix_invalid_cell\");\n\n                        var msg = [];\n                        attrs[attr].forEach((e) => {\n                           msg.push(e.message);\n                        });\n\n                        webix.alert({\n                           text: attr + \": \" + msg.join(\", \"),\n                        });\n\n                        wasGrid = true;\n                     }\n\n                     Grid.refresh(row);\n                     Grid.clearSelection();\n\n                     if (wasGrid) {\n                        return true;\n                     }\n                  }\n               }\n            }\n\n            // if we missed updating our Grid with an error\n            // this was not a validation error so return false\n            return false;\n         },\n      };\n\n      // TODO: make sure \"error\" s are handled and sent to logs\n      // this.on(\"error\", ()=>{ Analytics.error })\n\n      this.Definitions = {};\n      // {obj} the provided interface for working with the ABDefinition table.\n      // NOTE: on the web client, we simply perform web API calls to perform\n      // the actions.  These are defined below.\n\n      this.on(\"error\", (err) => {\n         // this simply prevents thrown errors if there are no listeners.\n         console.error(err);\n      });\n\n      this._plugins = [];\n      // {array} of loaded Plugin.applications.\n\n      this._pendingNetworkRequests = {};\n      // {hash}   uuid : {Promise}\n      // convert our definitionsXXXX() operations to be Relay/offline compatible.\n      // if a queued operation is sent after a web browser refresh, then\n      // we will NOT have a pending promise to .resolve()/.reject()\n\n      this.Network.on(\"definition.create\", (context, err, fullDef) => {\n         var pending = this._pendingNetworkRequests[context.uuid];\n         if (err) {\n            // this.error(err);\n            pending?.reject(err);\n            return;\n         }\n\n         // for immediate feedback to our UI:\n         // simulate the RT update from our sockets:\n         var pkt = {\n            id: fullDef.id,\n            data: fullDef,\n         };\n         this.emit(\"ab.abdefinition.create\", pkt);\n\n         let newDef = this.definitionNew(fullDef);\n         pending?.resolve(newDef);\n      });\n\n      this.Network.on(\"definition.update\", (context, err, serverDef) => {\n         var pending = this._pendingNetworkRequests[context.uuid];\n         if (err) {\n            if (err.toString().indexOf(\"Not Found\") > -1) {\n               return this.definitionCreate(context.values)\n                  .then(pending?.resolve)\n                  .catch(pending?.reject);\n            }\n            // log the error\n            // this.error(err);\n            pending?.reject(err);\n            return;\n         }\n\n         this._definitions[context.id] = serverDef;\n\n         // for immediate feedback to our UI:\n         // simulate the RT update from our sockets:\n         var pkt = {\n            id: serverDef.id,\n            data: serverDef,\n         };\n         this.emit(\"ab.abdefinition.update\", pkt);\n\n         pending?.resolve(serverDef);\n      });\n\n      this.Network.on(\"definition.delete\", (context, err, serverDef) => {\n         var pending = this._pendingNetworkRequests[context.uuid];\n         if (err) {\n            // log the error\n            // this.error(err);\n            pending?.reject(err);\n            return;\n         }\n\n         delete this._definitions[context.id];\n\n         // for immediate feedback to our UI:\n         // simulate the RT update from our sockets:\n         var pkt = {\n            id: context.id,\n            data: serverDef,\n         };\n         this.emit(\"ab.abdefinition.delete\", pkt);\n\n         pending?.resolve();\n      });\n   }\n\n   /**\n    * init()\n    * prepare the ABFactory for operation. This includes parsing the\n    * definitions into useable objects, preparing the System Resources, etc.\n    * @return {Promise}\n    */\n   async init() {\n      //\n      // Prepare our Resources First\n      //\n      var allInits = [];\n\n      allInits.push(this.Account.init(this));\n      allInits.push(this.Multilingual.init(this));\n      allInits.push(this.Network.init(this));\n      allInits.push(this.Tenant.init(this));\n\n      await Promise.all(allInits);\n      await this.Storage.init(this);\n      var data = await this.Storage.get(\"local_settings\");\n      this._localSettings = data || {};\n\n      //\n      // Real Time Update Handlers\n      //\n\n      // new ABDefinition created:\n      this.on(\"ab.abdefinition.create\", (pkt) => {\n         // pkt.id : definition.id\n         // pkt.data : definition\n\n         if (typeof pkt.data.json == \"string\") {\n            try {\n               pkt.data.json = JSON.parse(pkt.data.json);\n            } catch (e) {\n               console.log(e);\n            }\n         }\n         this._definitions[pkt.id] = pkt.data;\n         this.definitionSync(\"created\", pkt.id, pkt.data);\n      });\n\n      // ABDefinition updated:\n      this.on(\"ab.abdefinition.update\", (pkt) => {\n         // pkt.id : definition.id\n         // pkt.data : definition\n         if (typeof pkt.data.json == \"string\") {\n            try {\n               pkt.data.json = JSON.parse(pkt.data.json);\n            } catch (e) {\n               console.log(e);\n            }\n         }\n         this._definitions[pkt.id] = pkt.data;\n         this.definitionSync(\"updated\", pkt.id, pkt.data);\n      });\n\n      // ABDefinition delete:\n      this.on(\"ab.abdefinition.delete\", (pkt) => {\n         // pkt.id : definition.id\n         // pkt.data : definition\n         if (typeof pkt.data.json == \"string\") {\n            try {\n               pkt.data.json = JSON.parse(pkt.data.json);\n            } catch (e) {\n               console.log(e);\n            }\n         }\n         delete this._definitions[pkt.id];\n         this.definitionSync(\"destroyed\", pkt.id, pkt.data);\n      });\n\n      return super.init();\n\n      // return Promise.all(allInits)\n      //    .then(() => {\n      //       // some Resources depend on the above to be .init() before they can\n      //       // .init() themselves.\n      //       return this.Storage.init(this).then(() => {\n      //          return this.Storage.get(\"local_settings\").then((data) => {\n      //             this._localSettings = data || {};\n      //          });\n      //       });\n      //    })\n      //    .then(() => {\n      //       //\n      //       // RealTime Updates of our ABDefinitions\n      //       //\n\n      //       // new ABDefinition created:\n      //       this.on(\"ab.abdefinition.create\", (pkt) => {\n      //          // pkt.id : definition.id\n      //          // pkt.data : definition\n\n      //          if (typeof pkt.data.json == \"string\") {\n      //             try {\n      //                pkt.data.json = JSON.parse(pkt.data.json);\n      //             } catch (e) {\n      //                console.log(e);\n      //             }\n      //          }\n      //          this._definitions[pkt.id] = pkt.data;\n      //          this.definitionSync(\"created\", pkt.id, pkt.data);\n      //       });\n\n      //       // ABDefinition updated:\n      //       this.on(\"ab.abdefinition.update\", (pkt) => {\n      //          // pkt.id : definition.id\n      //          // pkt.data : definition\n      //          if (typeof pkt.data.json == \"string\") {\n      //             try {\n      //                pkt.data.json = JSON.parse(pkt.data.json);\n      //             } catch (e) {\n      //                console.log(e);\n      //             }\n      //          }\n      //          this._definitions[pkt.id] = pkt.data;\n      //          this.definitionSync(\"updated\", pkt.id, pkt.data);\n      //       });\n\n      //       // ABDefinition delete:\n      //       this.on(\"ab.abdefinition.delete\", (pkt) => {\n      //          // pkt.id : definition.id\n      //          // pkt.data : definition\n      //          if (typeof pkt.data.json == \"string\") {\n      //             try {\n      //                pkt.data.json = JSON.parse(pkt.data.json);\n      //             } catch (e) {\n      //                console.log(e);\n      //             }\n      //          }\n      //          delete this._definitions[pkt.id];\n      //          this.definitionSync(\"destroyed\", pkt.id, pkt.data);\n      //       });\n\n      //       return super.init();\n      //    });\n   }\n\n   /**\n    * definiitonCreate(def)\n    * create a new ABDefinition\n    * @param {obj} def\n    *        the value hash of the new definition entry\n    * @return {Promise}\n    *        resolved with a new {ABDefinition} for the entry.\n    */\n   async definitionCreate(def) {\n      // we will set our uuid\n      if (typeof def.id == \"undefined\") {\n         def.id = this.uuid();\n         def.json.id = def.id;\n      }\n\n      return new Promise((resolve, reject) => {\n         var uuid = this.uuid();\n         this._pendingNetworkRequests[uuid] = { resolve, reject };\n         var jobResponse = {\n            key: \"definition.create\",\n            context: {\n               uuid,\n            },\n         };\n         this.Network.post(\n            {\n               url: `/definition/create`,\n               data: def,\n            },\n            jobResponse\n         ).catch((err) => {\n            var message = \"Error attempting to CREATE definitions\";\n            if (err.code == \"E_NOPERM\") {\n               message = \"User Doesn't have permission to CREATE definitions\";\n            }\n            this.notify.developer(err, {\n               context: \"ABFactory.definitionCreate()\",\n               message,\n               def,\n            });\n\n            // NOTE: when using jobResponse type calls, expect that\n            // handler to be handling the errors.\n            // don't keep propagating them here.\n         });\n      });\n   }\n\n   /**\n    * definitionDestroy(id)\n    * delete an ABDefinition\n    * @param {string} id\n    *        the uuid of the ABDefinition to delete\n    * @return {Promise}\n    */\n   async definitionDestroy(id) {\n      return new Promise((resolve, reject) => {\n         var uuid = this.uuid();\n         this._pendingNetworkRequests[uuid] = { resolve, reject };\n         var jobResponse = {\n            key: \"definition.delete\",\n            context: {\n               id,\n               uuid,\n            },\n         };\n         this.Network.delete(\n            {\n               url: `/definition/${id}`,\n            },\n            jobResponse\n         ).catch((err) => {\n            var message = \"Error attempting to DESTROY definitions\";\n            if (err.code == \"E_NOPERM\") {\n               message = \"User Doesn't have permission to DELETE definitions\";\n            }\n            this.notify.developer(err, {\n               context: \"ABFactory.definitionDestroy()\",\n               message,\n               id,\n            });\n\n            // NOTE: when using jobResponse type calls, expect that\n            // handler to be handling the errors.\n            // don't keep propagating them here.\n         });\n      });\n   }\n\n   /**\n    * definitionUpdate(id, def)\n    * update an existing ABDefinition\n    * @param {string} id\n    *        the uuid of the ABDefinition to update.\n    * @param {obj} values\n    *        the value hash of the new definition values\n    * @return {Promise}\n    *        resolved with a new {ABDefinition} for the entry.\n    */\n   async definitionUpdate(id, values) {\n      return new Promise((resolve, reject) => {\n         var uuid = this.uuid();\n         this._pendingNetworkRequests[uuid] = { resolve, reject };\n         var jobResponse = {\n            key: \"definition.update\",\n            context: {\n               id,\n               uuid,\n               values,\n            },\n         };\n         this.Network.put(\n            {\n               url: `/definition/${id}`,\n               data: values,\n            },\n            jobResponse\n         ).catch((err) => {\n            var message = \"Error attempting to UPDATE definitions\";\n            if (err.code == \"E_NOPERM\") {\n               message = \"User Doesn't have permission to UPDATE definitions\";\n            }\n            this.notify.developer(err, {\n               context: \"ABFactory.definitionUpdate()\",\n               message,\n            });\n\n            // NOTE: when using jobResponse type calls, expect that\n            // handler to be handling the errors.\n            // don't keep propagating them here.\n         });\n      });\n   }\n\n   /**\n    * definitionsParse()\n    * include the incoming definitions into our ABFactory. These new\n    * definitions will replace any existing ones with the same .id.\n    * @param {array[ABDefinitioin]} defs\n    *     the incoming array of ABDefinitions to parse.\n    * @return {Promise}\n    */\n   // definitionsParse(defs = []) {\n   //    if (!Array.isArray(defs)) {\n   //       defs = [defs];\n   //    }\n\n   //    // store/replace the incoming definitions\n   //    // 1st: insert ALL our definitions internally\n   //    defs.forEach((d) => {\n   //       this._definitions[d.id] = d;\n   //    });\n   //    // 2nd: Now we can then go through and signal the \"updates\"\n   //    // and the related objects can find their dependent definitions.\n   //    defs.forEach((d) => {\n   //       this.definitionSync(\"updated\", d.id, d);\n   //    });\n\n   //    return Promise.resolve();\n   // }\n\n   /**\n    * notify()\n    * will send alerts to a group of people. These alerts are usually about\n    * configuration errors, or software problems.\n    * @param {string} domain\n    *     which group of people we are sending a notification to.\n    * @param {Error} error\n    *     An error object generated at the point of issue.\n    * @param {json} info\n    *     Additional related information concerning the issue.\n    */\n   notify(domain, error, info) {\n      console.error(\"TODO: ABFactory.notify(): pass error off to analytics\");\n      console.error(error);\n      console.error(info);\n   }\n\n   plugins() {\n      return this._plugins;\n   }\n   pluginLoad(p) {\n      this._plugins.push(p);\n   }\n\n   //\n   // Utilities\n   //\n   alert(options) {\n      Webix.alert(options);\n   }\n\n   cloneDeep(value) {\n      return _.cloneDeep(value);\n   }\n\n   error(message, ...rest) {\n      var emitData = {\n         message: `ABFactory[${this.Tenant.id()}]:${message.toString()}`,\n      };\n\n      console.error(emitData.message);\n      if (message instanceof Error) {\n         emitData.error = message;\n         // this dumps the error.stack\n         console.error(message);\n      }\n\n      if (rest && rest.length > 0) {\n         rest.forEach((r) => {\n            if (r instanceof Error) {\n               emitData.error = r;\n               // this dumps the error.stack\n               console.error(r);\n            }\n\n            if (typeof r == \"object\") {\n               for (var k in r) {\n                  emitData[k] = r[k];\n                  console.error(k, r[k]);\n               }\n            }\n         });\n      }\n      this.emit(\"error\", emitData);\n   }\n\n   jobID() {\n      return nanoid();\n   }\n\n   Label() {\n      return (...params) => {\n         return this.Multilingual.label(...params);\n      };\n   }\n\n   localSettings(key, value) {\n      if (typeof value == \"undefined\") {\n         // this is a getter:\n         return this._localSettings[key];\n      } else {\n         // setting a value:\n         this._localSettings[key] = value;\n         return this.Storage.set(`local_settings`, this._localSettings);\n      }\n   }\n\n   log(message, ...rest) {\n      console.log(message);\n      rest.forEach((r) => {\n         console.log(r);\n      });\n   }\n\n   /**\n    * @method rules.isUUID\n    * evaluate a given value to see if it matches the format of a uuid\n    * @param {string} key\n    * @return {boolean}\n    */\n   isUUID(key) {\n      var checker = RegExp(\n         \"^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\",\n         \"i\"\n      );\n      return checker.test(key);\n   }\n\n   merge(...params) {\n      return _.merge(...params);\n   }\n\n   orderBy(...params) {\n      return _.orderBy(...params);\n   }\n\n   uniq(...params) {\n      return _.uniq(...params);\n   }\n\n   kebabCase(...params) {\n      return _.kebabCase(...params);\n   }\n\n   sumBy(...params) {\n      return _.sumBy(...params);\n   }\n\n   meanBy(...params) {\n      return _.meanBy(...params);\n   }\n\n   maxBy(...params) {\n      return _.maxBy(...params);\n   }\n\n   minBy(...params) {\n      return _.minBy(...params);\n   }\n\n   uuid() {\n      return uuidv4();\n   }\n\n   warn(message, ...rest) {\n      console.warn(message);\n      rest.forEach((r) => {\n         console.warn(r);\n      });\n   }\n\n   /**\n    * @method toDate\n    *\n    * @param {string} dateText\n    * @param {Object} options - {\n    *                               format: \"string\",\n    *                               ignoreTime: boolean\n    *                            }\n    * @return {Date}\n    */\n   toDate(dateText = \"\", options = {}) {\n      if (!dateText) return;\n\n      if (options.ignoreTime) dateText = dateText.replace(/T.*/, \"\");\n\n      let result = options.format\n         ? moment(dateText, options.format)\n         : moment(dateText);\n\n      let supportFormats = [\n         \"YYYY-MM-DD\",\n         \"YYYY/MM/DD\",\n         \"DD/MM/YYYY\",\n         \"MM/DD/YYYY\",\n         \"DD-MM-YYYY\",\n         \"MM-DD-YYYY\",\n      ];\n\n      supportFormats.forEach((format) => {\n         if (!result || !result.isValid()) result = moment(dateText, format);\n      });\n\n      return new Date(result);\n   }\n\n   /**\n    * @method toDateFormat\n    *\n    * @param {Date} date\n    * @param {Object} options - {\n    *           format: \"string\",\n    *           localeCode: \"string\"\n    *         }\n    *\n    * @return {string}\n    */\n   toDateFormat(date, options) {\n      if (!date) return \"\";\n\n      let momentObj = moment(date);\n\n      if (options.localeCode) momentObj.locale(options.localeCode);\n\n      return momentObj.format(options.format);\n   }\n\n   /**\n    * @method subtractDate\n    *\n    * @param {Date} date\n    * @param {number} number\n    * @param {string} unit\n    *\n    * @return {Date}\n    */\n   subtractDate(date, number, unit) {\n      return moment(date).subtract(number, unit).toDate();\n   }\n\n   /**\n    * @method addDate\n    *\n    * @param {Date} date\n    * @param {number} number\n    * @param {string} unit\n    *\n    * @return {Date}\n    */\n   addDate(date, number, unit) {\n      return moment(date).add(number, unit).toDate();\n   }\n\n   isString(...params) {\n      return _.isString(params);\n   }\n}\n\nexport default ABFactory;\n","/**\n * ABApplicationCore\n *\n * This is the core ABApplication class that manages the common operations\n * of an ABApplication across platforms.\n *\n * It's primary responsibility is to decode a given set of attributes into\n * a working instance of an ABApplication that can return instances of\n * it's defined sub objects.\n *\n * Platform Specific versions of those objects should be defined in a peer\n * directory named platform. These versions of the objects should override\n * these Core objects with platform specific methods of operation (like\n * .save()).\n *\n * Initially your target application should load your platform/ABApplication.js\n * file, which will include this file and sub class it.\n *\n * However, this file will include the remaining files from your platform/*\n * versions.\n */\n\n// webpack can handle 'require()' statements, but node can't handle import\n// so let's use require():\nconst ABViewManager = require(\"../platform/ABViewManager\");\nvar ABMLClass = require(\"../platform/ABMLClass\");\n\nfunction toBool(val) {\n   if (typeof val == \"undefined\") {\n      return false;\n   }\n\n   if (val === \"\" || val === \"false\" || val === \"0\") {\n      return false;\n   }\n\n   if (val === \"true\" || val === \"1\") {\n      return true;\n   }\n\n   return val;\n}\n\nmodule.exports = class ABApplicationCore extends ABMLClass {\n   constructor(attributes, AB) {\n      super([\"label\", \"description\"], AB);\n\n      // attributes should be in format:\n      // {\n      //    id:##,\n      //    json:{},\n      //    name:\"XYZ\"\n      // }\n      attributes.json = attributes.json || {};\n\n      // ABApplication Attributes\n      this.id = attributes.id;\n      // {string} uuid\n\n      this.type = attributes.type || \"application\";\n      // {string} .type\n      // the ABDefinition.type of this object.\n\n      this.json = attributes.json;\n      if (typeof this.json == \"string\") this.json = JSON.parse(this.json);\n      // {obj} .json\n      // the full settings of this ABApplication\n\n      this.name = attributes.name || this.json.name || \"\";\n      // {string} .name\n      // the hard coded name of this ABDefinition Object, not to be confused\n      // with the .label.  The .name is created at design time and is a text\n      // reference for this object.\n\n      this.icon = attributes.icon || \"fa-rocket\";\n      // {string} .icon\n      // this is a reference to a font awesome icon including the `fa-`\n      // example `fa-child` should be stored for the `child` icon to be used\n      // if user wants to get creative they can add more to this field following\n      // these examples https://fontawesome.com/v4/examples/\n\n      this.isSystemObject = toBool(attributes.isSystemObject);\n      // {bool} .isSystemObject\n      // is this one of the integrated System Objects used by our framework?\n      // Some ABApplications and ABObjects are central to the running of the\n      // AppBuilder site.  They are marked with .isSystemObject = true;  It\n      // requires the role \"System Designer\" in order to edit/modify them.\n\n      this.roleAccess = attributes.roleAccess || [];\n      if (!Array.isArray(this.roleAccess)) {\n         this.roleAccess = [this.roleAccess];\n      }\n      this.roleAccess = this.roleAccess.filter((r) => r);\n      // {array}\n      // the {ABSiteRole.id}s of the roles allowed to work with this\n      // ABApplication. (see .isAccessManaged for more info)\n\n      this.isAccessManaged = JSON.parse(attributes.isAccessManaged || false);\n      // {bool} .isAccessManaged\n      // does this Application imploy the more sophisticated  Access\n      // permissions, or the simpler Role access permissions.\n      // {true} : allows an administrator to set which role can View|Edit|Delete\n      //          elements of an application.\n      // {false}: indicates users having one of the .roleAccess values can have\n      //          full access to this application\n\n      this.accessManagers = attributes.accessManagers;\n      if (typeof this.accessManagers == \"string\")\n         this.accessManagers = JSON.parse(this.accessManagers);\n      // {??} .accessManagers\n      // if .isAccessManaged == true, then .accessManagers contain the definitions\n      // of the detailed access permissions.\n\n      this.isTranslationManaged = JSON.parse(\n         attributes.isTranslationManaged || false\n      );\n      this.translationManagers = attributes.translationManagers;\n      if (typeof this.translationManagers == \"string\")\n         this.translationManagers = JSON.parse(this.translationManagers);\n\n      this.objectIDs = attributes.json.objectIDs || [];\n      // {array} .objectIDs\n      // All the {ABObject.id} values that have been pulled into this\n      // ABApplication for use in it's design environment.  This is how we\n      // determine which {ABObject}s are included or excluded from this app.\n\n      this.queryIDs = attributes.json.queryIDs || [];\n      // {array} .queryIDs\n      // All the {ABObjectQuery.id} values that have been pulled into this\n      // ABApplication for use in it's design environment.  This is how we\n      // determine which {ABObjectQueries}s are included or excluded from\n      // this app.\n\n      this.datacollectionIDs = attributes.json.datacollectionIDs || [];\n      // {array} .datacollectionIDs\n      // All the {ABDataCollection.id} values that have been pulled into this\n      // ABApplication for use in it's design environment.  This is how we\n      // determine which {ABDataCollection}s are included or excluded from\n      // this app.\n\n      // import all our {ABViewPage}s\n      let newPages = [];\n      (attributes.json.pageIDs || []).forEach((id) => {\n         var def = this.AB.definitionByID(id);\n         if (def) {\n            newPages.push(this.pageNew(def));\n         } else {\n            this.emit(\n               \"warning\",\n               `App[${this.id}] is referenceing an unknown Page[${id}]`,\n               {\n                  appID: this.id,\n                  pageID: id,\n               }\n            );\n            // console.error(\n            //    `App[${this.id}] is referenceing an unknown Page[${id}]`\n            // );\n         }\n      });\n      this._pages = newPages;\n      // {array} ._pages\n      // an array of all the {ABViewPages} this ABApplication offers as\n      // interfaces for working with our Data.\n      // ABViewPages operate within the confines of an ABApplication so\n      // they are created/stored/accessed from within an ABApplication\n\n      var newProcesses = [];\n      var removePIDs = [];\n      (attributes.json.processIDs || []).forEach((pID) => {\n         var p = this.AB.processByID(pID);\n         if (p) {\n            newProcesses.push(p);\n         } else {\n            this.emit(\n               \"warning\",\n               `Application is referencing an unknown process.`,\n               { appID: this.id, processID: pID }\n            );\n            //    removePIDs.push(pID);\n         }\n      });\n      if (attributes.json.processIDs) {\n         // remove those missing pIDs.\n         attributes.json.processIDs = attributes.json.processIDs.filter(\n            (pr) => {\n               return removePIDs.indexOf(pr) == -1;\n            }\n         );\n      }\n\n      this._processes = newProcesses;\n      // {array} ._processes\n      // the ABProcess instances created by this ABApplication.\n\n      this.processIDs = attributes.json.processIDs || [];\n      // {array} .processIDs\n      // an array of all the {ABProcess.id}s referenced by this Application.\n\n      // Object List Settings\n      attributes.json.objectListSettings =\n         attributes.json.objectListSettings || {};\n      this.objectListSettings = this.objectListSettings || {};\n      this.objectListSettings.isOpen = JSON.parse(\n         attributes.json.objectListSettings.isOpen || false\n      );\n      this.objectListSettings.searchText =\n         attributes.json.objectListSettings.searchText || \"\";\n      this.objectListSettings.sortDirection =\n         attributes.json.objectListSettings.sortDirection || \"asc\";\n      this.objectListSettings.isGroup = JSON.parse(\n         attributes.json.objectListSettings.isGroup || false\n      );\n\n      // let the MLClass now process the translations:\n      // transition issues:\n      attributes.translations =\n         attributes.translations || attributes.json.translations;\n\n      super.fromValues(attributes);\n   }\n\n   ///\n   /// Static Methods\n   ///\n   /// Available to the Class level object.  These methods are not dependent\n   /// on the instance values of the Application.\n   ///\n\n   ///\n   /// Instance Methods\n   ///\n\n   /// ABApplication data methods\n   /**\n    * @method isAccessibleForRoles()\n    * return true/false if this ABApplication is accessible for one of the\n    * passed in ABRoles.\n    * @param {array[ABRole]} roles\n    *        an array of {ABRole} instances.\n    * @return {bool}\n    */\n   isAccessibleForRoles(roles) {\n      var foundRole = false;\n\n      // if we are on the basic Role assignments:\n      if (!this.isAccessManaged) {\n         (roles || []).forEach((r) => {\n            if (this.roleAccess.indexOf(r.uuid || r) > -1) {\n               foundRole = true;\n            }\n         });\n         return foundRole;\n      }\n\n      // isAccessManaged has been set, so 2 kinds of ppl can\n      // see this App\n      // 1) an AccessManager\n      if (parseInt(this.accessManagers.useRole)) {\n         (roles || []).forEach((r) => {\n            if (this.accessManagers.role.indexOf(r.uuid || r) > -1) {\n               foundRole = true;\n            }\n         });\n      }\n\n      // stop here if found.\n      if (foundRole) return foundRole;\n\n      // 2) someone who has a role that can see one of it's pages.\n      // scan each Page of this Application\n      (this.pages() || []).forEach((p) => {\n         // check to see if that page.isAccessibleForRoles()\n         if (p.isAccessibleForRoles(roles)) {\n            foundRole = true;\n         }\n      });\n      return foundRole;\n   }\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABApplication instance\n    * into the values needed for saving to the DB.\n    *\n    * Most of the instance data is stored in .json field, so be sure to\n    * update that from all the current values of our child fields.\n    *\n    * @return {json}\n    */\n   toObj() {\n      // MLClass translation\n      this.json = super.toObj();\n\n      this.json.name = this.name;\n\n      this.json.objectIDs = this.objectIDs;\n\n      this.json.objectListSettings = this.objectListSettings;\n\n      this.json.queryIDs = this.queryIDs;\n\n      this.json.datacollectionIDs = this.datacollectionIDs;\n\n      this.json.pageIDs = (this._pages || []).map((p) => p.id);\n\n      this.json.processIDs = (this._processes || []).map((p) => {\n         return p.id;\n      });\n\n      // // for each MobileApp: compile to json\n      // var currApps = [];\n      // this._mobileApps.forEach((app) => {\n      //    currApps.push(app.toObj())\n      // })\n      // this.json.mobileApps = currApps;\n\n      return {\n         id: this.id,\n         type: this.type || \"application\",\n         name: this.name,\n         icon: this.icon,\n         isSystemObject: this.isSystemObject,\n         json: this.json,\n         roleAccess: this.roleAccess,\n         translations: this.json.translations,\n         isAccessManaged: this.isAccessManaged,\n         isTranslationManaged: this.isTranslationManaged,\n         accessManagers: this.accessManagers,\n         translationManagers: this.translationManagers,\n      };\n   }\n\n   ///\n   /// Mobile Apps\n   ///\n\n   /**\n    * @method mobileApps()\n    *\n    * return an array of all the ABObjectQueries for this ABApplication.\n    *\n    * @param {fn} filter   a filter fn to return a set of ABObjectQueries that\n    *                this fn returns true for.\n    * @return {array}   array of ABObjectQueries\n    */\n   mobileApps(filter = () => true) {\n      return (this._mobileApps || []).filter(filter);\n   }\n\n   ///\n   /// Datacollections\n   ///\n\n   ///\n   /// Data collections\n   ///\n\n   // datacollectionNew(values) {\n   //    return new ABDataCollectionCore(values, this);\n   // }\n\n   datacollectionsExcluded(filter = () => true) {\n      return this.AB.datacollections((o) => {\n         return this.datacollectionIDs.indexOf(o.id) == -1;\n      }).filter(filter);\n   }\n\n   datacollectionsIncluded(filter = () => true) {\n      return this.AB.datacollections((o) => {\n         return this.datacollectionIDs.indexOf(o.id) > -1;\n      }).filter(filter);\n   }\n\n   ///\n   /// Objects\n   ///\n\n   objectsExcluded(filter = () => true) {\n      return this.AB.objects((o) => {\n         return this.objectIDs.indexOf(o.id) == -1;\n      }).filter(filter);\n   }\n\n   objectsIncluded(filter = () => true) {\n      return this.AB.objects((o) => {\n         return this.objectIDs.indexOf(o.id) > -1;\n      }).filter(filter);\n   }\n\n   /**\n    * @method connectedObjects()\n    *\n    * return an array of all the connected ABObjects for a given ABObject.\n    *\n    * @param {string} id\n    *        an ID of an ABObject\n    * @return {array}   array of options for webix select\n    *         [ {id, value}, ... ]\n    */\n   connectedObjects(id) {\n      console.error(\n         \"ABApplicationCore.connectedObjects(): who is calling this?\"\n      );\n\n      if (id == \"\") return [];\n\n      // Determine the object from the ID\n      var myObj = this.AB.objectByID(id);\n\n      // Get all the connected Fields for that object\n      var connectedFields = myObj.connectFields();\n      // Store the related fields associatively inside their related Objects ID\n      var connectedObj = {};\n      connectedFields.forEach((f) => {\n         connectedObj[f.settings.linkObject] = this.AB.objectByID(\n            f.settings.linkObject\n         );\n      });\n      // Look up the objects by their ID and push them in an options array\n      var linkedObjects = [];\n      Object.keys(connectedObj).forEach(function (key /*, index */) {\n         linkedObjects.push({\n            id: this[key].id,\n            value: this[key].label,\n         });\n      }, connectedObj /* = this. inside fn */);\n\n      return linkedObjects;\n   }\n\n   /**\n    * @method connectedFields()\n    * return an array of all the connected ABFields for a given ABObject\n    * @param {string} currObjID\n    *        an ID of the current ABObject\n    * @param {string} linkedObjectID\n    *        an ID of the linked ABObject\n    * @return {array}\n    *        array of options for webix select\n    */\n   connectedFields(currObjID, linkedObjectID) {\n      console.error(\"!!! Who is calling this?\");\n\n      // Determine the object from the currObjID\n      var myObj = this.AB.objectByID(currObjID);\n\n      // Get all the connected Fields for our object that match the linkedObjectID\n      var connectedFields = myObj.connectFields(\n         (f) => f.settings.linkObject == linkedObjectID\n      );\n      // Build an arry of options for the webix select\n      var linkedFields = [];\n      connectedFields.forEach((f) => {\n         linkedFields.push({ id: f.columnName, value: f.label });\n      });\n\n      return linkedFields;\n   }\n\n   ///\n   /// Pages\n   ///\n\n   /**\n    * @method pages()\n    * return an array of all the ABViewPages for this ABApplication.\n    * @param {fn} filter\n    *        a filter fn to return a set of ABViewPages that this fn\n    *        returns true for.\n    * @param {boolean} deep\n    *        flag to search in sub pages\n    * @return {array}\n    *        array of ABViewPages\n    */\n   pages(filter = () => true, deep = false) {\n      var result = [];\n\n      if (!this._pages || this._pages.length < 1) return result;\n\n      // find into sub-pages recursively\n      if (filter && deep) {\n         result = this._pages.filter(filter);\n\n         if (result.length < 1) {\n            this._pages.forEach((p) => {\n               var subPages = p.pages(filter, deep);\n               if (subPages && subPages.length > 0) {\n                  result = subPages;\n               }\n            });\n         }\n      }\n      // find root pages\n      else {\n         result = (this._pages || []).filter(filter);\n      }\n\n      return result;\n   }\n\n   ///\n   /// Processes\n   ///\n\n   /**\n    * @method processes()\n    * return an array of all the ABProcesses for this ABApplication.\n    * @param {fn} filter\n    *        a filter fn to return a set of ABProcesses that\n    *        this fn returns true for.\n    * @return {array}\n    *        array of ABProcesses\n    */\n   processes(filter = () => true) {\n      return this._processes.filter(filter);\n   }\n\n   hasProcess(process) {\n      if (process && process.id) {\n         return this.processIDs.indexOf(process.id) > -1;\n      } else {\n         return false;\n      }\n   }\n\n   ///\n   /// Views\n   ///\n\n   /**\n    * @method views()\n    * return an array of all the Views for this ABApplication.\n    * @param {fn} filter\n    *        a filter fn to return a set of Views that this fn\n    *        returns true for.\n    * @return {array}\n    *        array of Views\n    */\n   views(filter) {\n      var result = [];\n      var views = [];\n      var pages = [];\n\n      if (\n         (!this._pages || this._pages.length < 1) &&\n         (!this._views || this._views.length < 1)\n      )\n         return result;\n\n      function lookDeep(view) {\n         if (view._pages && view._pages.length) {\n            view._pages.forEach((p) => {\n               // check the page views recusively\n               var pageViews = p.views(filter, true);\n               // if there was a match store it\n               if (pageViews && pageViews.length > 0) {\n                  result = pageViews;\n               }\n               // if no match move on to the subpages\n               if (result.length < 1) {\n                  // loop through each subpage recursively\n                  var subPages = p.pages(filter, true);\n                  // if there was a match store it\n                  if (subPages && subPages.length > 0) {\n                     result = subPages;\n                  }\n                  if (result.length < 1) {\n                     lookDeep(p);\n                  }\n               }\n            });\n         }\n      }\n\n      // look at views recursively\n      if (filter) {\n         // look at views recursively (views can have subviews and so on)\n         if (this._views) {\n            views = this._views.filter(filter);\n\n            if (views.length < 1) {\n               this._views.forEach((v) => {\n                  var subViews = v.views(filter, true);\n                  if (subViews && subViews.length > 0) {\n                     views = subViews;\n                  }\n               });\n            }\n         }\n\n         // if no views of the root page match now look at the sub pages and their views\n         if (views.length) {\n            result = views;\n         } else {\n            // check the first level subpages\n            result = this._pages.filter(filter);\n\n            // if no match check each pages views and subpages\n            if (result.length < 1) {\n               // looping through pages\n               lookDeep(this);\n            }\n         }\n      }\n      // find all views\n      else {\n         // recusively gather all views on this view\n         if (this._views) {\n            views = this._views;\n            if (views.length) {\n               views.forEach((v) => {\n                  var subViews = v.views(() => true, true);\n                  if (subViews && subViews.length) {\n                     views = views.concat(subViews);\n                  }\n               });\n            }\n         }\n\n         // recursively gather all pages and their views\n         if (this._pages) {\n            pages = this._pages;\n            if (pages.length) {\n               pages.forEach((p) => {\n                  // grab all views on this page\n                  var pageViews = p.views(() => true, true);\n                  if (pageViews && pageViews.length) {\n                     views = views.concat(pageViews);\n                  }\n                  // grab all subpages on this page\n                  var subPages = p.pages(() => true, true);\n                  if (subPages && subPages.length) {\n                     pages = pages.concat(subPages);\n                     subPages.forEach((sub) => {\n                        var subViews = sub.views(() => true, true);\n                        if (subViews && subViews.length) {\n                           views = views.concat(subViews);\n                        }\n                     });\n                  }\n               });\n            }\n         }\n\n         result = result.concat(pages, views);\n      }\n\n      return result;\n   }\n\n   /**\n    * @method viewAll()\n    * return a list of all the {ABViewxxx} classes available.\n    * @return {array} of ABView objects\n    */\n   viewAll(fn = () => true) {\n      return ABViewManager.allViews(fn);\n   }\n\n   ///\n   /// Queries\n   ///\n\n   /**\n    * queriesExcluded()\n    * return a list of ABObjectQuery(s) that are not included in this\n    * ABApplication.\n    * @param {fn} filter\n    *        a filter fn to further reduce which queries to return.\n    * @return {array}\n    */\n   queriesExcluded(filter = () => true) {\n      return this.AB.queries((q) => {\n         return this.queryIDs.indexOf(q.id) == -1;\n      }).filter(filter);\n   }\n\n   /**\n    * queriesIncluded()\n    * return a list of ABObjectQuery(s) that are included in this\n    * ABApplication.\n    * @param {fn} filter\n    *        a filter fn to further reduce which queries to return.\n    * @return {array}\n    */\n   queriesIncluded(filter = () => true) {\n      return this.AB.queries((q) => {\n         return this.queryIDs.indexOf(q.id) > -1;\n      }).filter(filter);\n   }\n\n   ///\n   /// Roles\n   ///\n\n   /**\n    * @method roles()\n    * return an array of all the ABRole for this ABApplication.\n    * @param {fn} filter\n    *        a filter fn to further reduce which roles to return.\n    * @return {array}   array of ABRole\n    */\n   // roles(filter = () => true) {\n   //    return (this.role || []).filter(filter);\n   // }\n\n   /**\n    * @method urlResolve()\n    * given an object pointer, return the specific object referenced.\n    * pointer must start with a '#', use '/' as delimiters, and either\n    * reference an object's .id, or an object's .property.\n    * for example:\n    * #/_objects   : resolves to the array of ._objects pointed to by this\n    *               application.\n    * #/_objects/[object.id] : reolved to a specific object\n    * #/_objects/[object.id]/_fields/[field.id] : resolves to a specific data field\n    *               refereced by object.id.\n    *\n    * @param {string} pointer : the string url referencing the object you want\n    *                       to retrieve.\n    * @return {obj}\n    */\n   urlResolve(pointer) {\n      var parts = pointer.split(\"/\");\n\n      var parseStep = (obj, steps) => {\n         // we're done.  obj is what we are looking for:\n         if (steps.length == 0) {\n            return obj;\n         }\n\n         // pull the next step key:\n         var key = steps.shift();\n\n         // special case, \"#\" makes sure we are talking about the\n         // Application object\n         if (key == \"#\") {\n            return parseStep(this, steps);\n         }\n\n         // if obj is an [], then key should be an .id reference to\n         // lookup:\n         if (Array.isArray(obj)) {\n            obj = obj.filter(function (o) {\n               return o.id == key;\n            })[0];\n            return parseStep(obj, steps);\n         }\n\n         // otherwise obj should be an {} and key a property:\n         if (obj && obj[key]) {\n            return parseStep(obj[key], steps);\n         }\n\n         if (key == \"_objects\") {\n            console.error(new Error(\"REFACTOR: old objectBy url reference:\"));\n\n            // This can be gotten from our AB\n            var id = steps.shift();\n            return parseStep(this.AB.objectByID(id), steps);\n         }\n\n         // if we got here, there is an error!\n         // console.error('!!! failed to lookup url:'+pointer);\n         console.error(\"!!! failed to lookup url:\" + pointer);\n         return null;\n      };\n\n      return parseStep(this, parts);\n   }\n\n   /**\n    * @method urlPointer()\n    * return the url pointer for this application.\n    *\n    * @param {boolean} acrossApp - flag to include application id to url\n    *\n    * @return {string}\n    */\n   urlPointer(acrossApp) {\n      // NOTE: if we need to expand this to search across\n      // applications, then add in this application.id here:\n      if (acrossApp) return \"#/\" + this.id + \"/\";\n      else return \"#/\";\n   }\n\n   /**\n    * @method urlObject()\n    * return the url pointer for objects in this application.\n    *\n    * @param {boolean} acrossApp - flag to include application id to url\n    *\n    * @return {string}\n    */\n   urlObject(acrossApp) {\n      return this.urlPointer(acrossApp) + \"_objects/\";\n   }\n\n   /**\n    * @method urlView()\n    * return the url pointer for pages in this application.\n    *\n    * @param {boolean} acrossApp - flag to include application id to url\n    *\n    * @return {string}\n    */\n   urlPage(acrossApp) {\n      return this.urlPointer(acrossApp) + \"_pages/\";\n   }\n\n   /**\n    * @method urlQuery()\n    * return the url pointer for queries in this application.\n    *\n    * @param {boolean} acrossApp - flag to include application id to url\n    *\n    * @return {string}\n    */\n   urlQuery(acrossApp) {\n      return this.urlPointer(acrossApp) + \"_queries/\";\n   }\n\n   ///\n   ///   Object List Settings\n   ///\n   get objectlistIsOpen() {\n      return this.objectListSettings.isOpen;\n   }\n\n   set objectlistIsOpen(isOpen) {\n      this.objectListSettings.isOpen = isOpen;\n   }\n\n   get objectlistSearchText() {\n      return this.objectListSettings.searchText;\n   }\n\n   set objectlistSearchText(searchText) {\n      this.objectListSettings.searchText = searchText;\n   }\n\n   get objectlistSortDirection() {\n      return this.objectListSettings.sortDirection;\n   }\n\n   set objectlistSortDirection(sortDirection) {\n      this.objectListSettings.sortDirection = sortDirection;\n   }\n\n   get objectlistIsGroup() {\n      return this.objectListSettings.isGroup;\n   }\n\n   set objectlistIsGroup(isGroup) {\n      this.objectListSettings.isGroup = isGroup;\n   }\n\n   ///\n   /// Instance generators\n   ///\n\n   /**\n    * @method pageNew()\n    *\n    * return an instance of a new (unsaved) ABViewPage that is tied to this\n    * ABApplication.\n    *\n    * NOTE: this new page is not included in our this.pages until a .save()\n    * is performed on the page.\n    *\n    * @return {ABViewPage}\n    */\n   pageNew(values) {\n      // make sure this is an ABViewPage description\n      // values.key = ABViewPageCore.common().key;\n      values.key = \"page\";\n\n      return ABViewManager.newView(values, this, null);\n   }\n\n   /**\n    * @method pageByID()\n    * return pages from the given {id}\n    * @param {string} id\n    *        the uuid of the page to return.\n    * @return {ABViewPage}\n    */\n   pageByID(id) {\n      return this.pages((f) => f.id == id)[0];\n   }\n\n   /**\n    * @method viewNew()\n    *\n    * return an instance of a new (unsaved) ABView.\n    *\n    * @return {ABView}\n    */\n   viewNew(values, application, parent) {\n      return ABViewManager.newView(values, application, parent);\n   }\n\n   ///\n   /// Utilities\n   ///\n\n   cloneDeep(/* object */) {\n      var errorDepreciated = new Error(\n         \"ABApplicationCore.cloneDeep(): Depreciated!  Use AB.cloneDeep() instead.\"\n      );\n      throw errorDepreciated;\n\n      // return JSON.parse(JSON.stringify(object));\n   }\n};\n","/*\n * ABDataCollection\n * Defines a set of data that other parts of the Application can work with.\n * it can point to either an ABObject, or ABObjectQuery, and can have an\n * filter, and sorts defined.\n *\n *\n *\n */\n// const ABEmitter = require(\"../platform/ABEmitter\");\nconst ABMLClass = require(\"../platform/ABMLClass\");\n\n// const ABObject = require(\"../platform/ABObject\");\n// const ABObjectQuery = require(\"../platform/ABObjectQuery\");\n// const RowFilter = require(\"../platform/RowFilter\");\n\nvar DefaultValues = {\n   id: \"uuid\",\n   label: \"\", // label\n   object: {}, // json of ABObject\n   query: {}, // json of ABObjectQuery\n   settings: {\n      datasourceID: \"\", // id of ABObject or ABObjectQuery\n      linkDatacollectionID: \"\", // id of ABDatacollection\n      linkFieldID: \"\", // id of ABField\n      objectWorkspace: {\n         filterConditions: {\n            // array of filters to apply to the data table\n            glue: \"and\",\n            rules: [],\n         },\n         sortFields: [], // array of columns with their sort configurations\n      },\n      loadAll: false,\n      preventPopulate: false,\n      isQuery: false, // if true it is a query, otherwise it is a object.\n\n      fixSelect: \"\", // _CurrentUser, _FirstRecord, _FirstRecordDefault or row id\n\n      syncType: 1, // 1 (Server), 2 (Client)\n   },\n};\n\nconst QueuedOperations = [];\n// {array} of operations that we want to perform but allow some space\n// between operations.\nvar _queueTimer = null;\n\nfunction runQueue() {\n   // if (!_queueTimer) {\n   //    _queueTimer = setInterval(() => {\n   //       runQueue();\n   //    }, 20);\n   // }\n   if (QueuedOperations.length == 0) {\n      // stop\n      // clearInterval(_queueTimer);\n      _queueTimer = null;\n      return;\n   }\n   var op = QueuedOperations.shift();\n   op.fn();\n   _queueTimer = setTimeout(runQueue, op.timeout);\n}\nfunction queueOperation(fn, timeout = 20) {\n   QueuedOperations.push({ fn, timeout });\n   if (!_queueTimer) {\n      runQueue();\n   }\n}\n\nmodule.exports = class ABDataCollectionCore extends ABMLClass {\n   constructor(attributes, AB) {\n      super([\"label\"], AB);\n\n      attributes = attributes || {};\n\n      // this.application = application;\n\n      this.fromValues(attributes);\n\n      this.__dataCollection = this._dataCollectionNew([]);\n      // {DataCollection}\n      // This is a working instance of a DataCollection, not an {ABDatacCollection}\n      // On web/mobile this is a webix component.  So keep the creation as part of\n      // the platform/ABDataCollection implementation.\n\n      // Set filter value\n      this.refreshFilterConditions();\n\n      this.__bindComponentIds = [];\n      this.__flexComponentIds = [];\n\n      // refresh a data collection\n      // this.init();\n\n      // mark data status does not be initialized\n      this._dataStatus = this.dataStatusFlag.notInitial;\n\n      this.__filterCond = null;\n      // {QueryCondition}\n      // A passed in Query Condition for filtering our DataCollection.\n      // This value is ANDed with our normal filter conditions.\n   }\n\n   /**\n    * contextKey()\n    *\n    * return a unique key that represents data from/for this type of object.\n    *\n    * used when creating Network jobs and needing to be notified when a job\n    * is complete.  We send a contextKey() to the Network job and then listen\n    * for it to know when it is complete.\n    * @return {string}\n    */\n   static contextKey() {\n      return \"datacollection\";\n   }\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      this.id = values.id;\n      // {string} .id\n      // the uuid of this ABDataCollection Definition.\n\n      this.name = values.name || null;\n      // {string} .name\n      // the unchanging name of this ABDataCollection\n\n      this.type = values.type || \"datacollection\";\n      // {string} .type\n      // the type of ABDefinition this is.\n\n      values.settings = values.settings || {};\n      this.settings = this.settings || {};\n      // {obj} .settings\n      // the specific operation values for this ABDataCollection\n\n      this.settings.linkDatacollectionID =\n         values.settings.linkDatacollectionID ||\n         DefaultValues.settings.linkDatacollectionID;\n      // {string} .settings.linkDaacollectionID\n      // the uuid of another ABDataCollection that provides the link/trigger\n      // for filtering the values of this ABDataCollection.\n\n      this.settings.linkFieldID =\n         values.settings.linkFieldID || DefaultValues.settings.linkFieldID;\n      // {string} .settings.linkFieldID\n      // the uuid of the ABDataField of the .linkDatacollection ABObject\n      // whose value is the trigger value for this ABDataCollection\n\n      this.settings.objectWorkspace = values.settings.objectWorkspace || {\n         filterConditions:\n            DefaultValues.settings.objectWorkspace.filterConditions,\n         sortFields: DefaultValues.settings.objectWorkspace.sortFields,\n      };\n      // {obj} .settings.objectWorkspace\n      // the default settings for what is shown in the AppBuilder's\n      // DataCollection workspace\n\n      this.settings.fixSelect = values.settings.fixSelect;\n\n      // Convert to boolean\n      this.settings.loadAll = JSON.parse(\n         values.settings.loadAll || DefaultValues.settings.loadAll\n      );\n      // {bool} .settings.loadAll\n      // do we load all the data at one time? false == load by pages.\n\n      this.settings.isQuery = JSON.parse(\n         values.settings.isQuery || DefaultValues.settings.isQuery\n      );\n      // {bool} .settings.isQuery\n      // is the data source for this ABDataCollection based upon an\n      // ABObjectQuery?\n\n      this.settings.preventPopulate = JSON.parse(\n         values.settings.preventPopulate ||\n            DefaultValues.settings.preventPopulate\n      );\n      // {bool} preventPopulate\n      // option to not populate the data this Datacollection requests from the\n      // server.  Usually to speed up the process.\n\n      // Convert to number\n      this.settings.syncType = parseInt(\n         values.settings.syncType || DefaultValues.settings.syncType\n      );\n      // {int} .settings.syncType\n      // how is the data between this ABDataCollection and it's\n      // .datasource synced?\n\n      this.__datasource = null;\n      // {obj} .__datasource\n      // the reference to the ABObject/ABObjectQuery that this ABDataCollection\n      // is based off of.\n\n      this.settings.datasourceID =\n         values.settings.datasourceID || DefaultValues.settings.datasourceID;\n      // {string} .settings.datasourceID\n      // the uuid of the .__datasource object to use\n\n      // now lookup and reference the proper datasource\n      if (this.settings.datasourceID) {\n         // check for an ABObject\n         var obj = this.AB.objectByID(this.settings.datasourceID);\n         if (!obj) {\n            // this must be an ABObjectQuery then ...\n            obj = this.AB.queryByID(this.settings.datasourceID);\n         }\n\n         if (obj) {\n            this.__datasource = obj;\n            this.settings.isQuery = obj.type === \"query\";\n            if (this.settings.isQuery) {\n               if (this.__datasource.isGroup) {\n                  if (!this.__treeCollection)\n                     this.__treeCollection = this._treeCollectionNew();\n                  // {TreeCollection}\n                  // This is a webix TreeCollection (or similar)\n                  // keep it's implementation as part of the platform\n\n                  this.__isGroup = true;\n               }\n            }\n         } else {\n            console.error(\n               `ABDataCollection[${this.name}][${this.id}] unable to find datasource [${this.settings.datasourceID}]`\n            );\n         }\n      }\n\n      // // Populate data source: ABObject or ABObjectQuery\n      // if (values.query && values.query[0]) {\n      //    this.__datasource = new ABObjectQuery(\n      //       values.query[0],\n      //       this.application\n      //    );\n      //    this.settings.isQuery = true;\n\n      //    if (this.__datasource.isGroup) {\n      //       if (!this.__treeCollection)\n      //          this.__treeCollection = this._treeCollectionNew();\n\n      //       this.__isGroup = true;\n      //    }\n      // } else if (values.object && values.object[0]) {\n      //    this.__datasource = new ABObject(values.object[0], this.application);\n      //    this.settings.isQuery = false;\n      // }\n\n      // let the MLClass now process the translations:\n      super.fromValues(values);\n   }\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABApplication instance\n    * into the values needed for saving to the DB.\n    *\n    * Most of the instance data is stored in .json field, so be sure to\n    * update that from all the current values of our child fields.\n    *\n    * @return {json}\n    */\n   toObj() {\n      var obj = super.toObj(); // untranslate the object\n\n      return {\n         id: this.id,\n         name: this.name || this.label,\n         type: this.type || \"datacollection\",\n         settings: this.AB.cloneDeep(this.settings || {}),\n         translations: obj.translations,\n      };\n   }\n\n   /**\n    * @method save()\n    *\n    * persist this instance of ABDatacollection with it's parent\n    *\n    *\n    * @return {Promise}\n    *      .resolve( {this} )\n    */\n   async save() {\n      if (!this.id) {\n         this.label = this.label || this.name;\n      }\n      await super.save();\n      return this;\n   }\n\n   /**\n    * @method destroy()\n    *\n    * destroy the current instance of ABDatacollection\n    *\n    * also remove it from our parent application\n    *\n    * @return {Promise}\n    */\n   destroy() {\n      var removeFromApplications = () => {\n         return new Promise((next, err) => {\n            this.AB.applications().then((apps) => {\n               // NOTE: apps is a webix datacollection\n\n               var allRemoves = [];\n\n               var appsWithObject = apps.filter((a) => {\n                  return a.datacollectionsIncluded((o) => o.id == this.id);\n               });\n               appsWithObject.forEach((app) => {\n                  allRemoves.push(app.datacollectionRemove(this));\n               });\n\n               return Promise.all(allRemoves).then(next).catch(err);\n            });\n         });\n      };\n\n      return Promise.resolve()\n         .then(() => {\n            return removeFromApplications();\n         })\n         .then(() => {\n            return super.destroy();\n         })\n         .then(() => {\n            this.emit(\"destroyed\");\n         });\n   }\n\n   /**\n    * @property $dc\n    * return the underlying webix datacollection\n    * @return {webix.datacollection}\n    */\n   get $dc() {\n      return this.__dataCollection;\n   }\n\n   /**\n    * @property datasource\n    * return a object of this component.\n    *\n    * @return {ABObject|ABObjectQuery}\n    */\n   get datasource() {\n      if (!this.__datasource) {\n         if (this.id && this.name) {\n            // occassionally we have blank DCs (without .id or .name)\n            // and I don't want to see errors for those\n            var err = new Error(\n               `DataCollection[${this.name}][${this.id}] missing reference datasource`\n            );\n            this.AB.notify(\"builder\", err, { datacollection: this.toObj() });\n         }\n         return null;\n      }\n      var obj = this.AB.objectByID(this.__datasource.id);\n      if (!obj) {\n         obj = this.AB.queryByID(this.__datasource.id);\n      }\n      return obj;\n   }\n\n   /**\n    * @property datasource\n    * set a object to data collection\n    *\n    * @param {ABObject|ABObjectQuery} object\n    */\n   set datasource(object) {\n      this.__datasource = object;\n\n      this.refreshFilterConditions();\n   }\n\n   /**\n    * @property sourceType\n    * return type of source.\n    *\n    * @return {string} - 'object' or 'query'\n    */\n   get sourceType() {\n      return this.settings.isQuery ? \"query\" : \"object\";\n   }\n\n   /**\n    * @method datacollectionLink\n    * return a ABDatacollection that link of this.\n    *\n    * @return {ABDatacollection}\n    */\n   get datacollectionLink() {\n      if (!this.AB) return null;\n\n      return this.AB.datacollectionByID(this.settings.linkDatacollectionID);\n   }\n\n   /**\n    * @property fieldLink\n    * return a ABFieldConnect field that link of this.\n    *\n    * @return {ABFieldConnect}\n    */\n   get fieldLink() {\n      let object = this.datasource;\n      if (!object) return null;\n\n      return object.fieldByID(this.settings.linkFieldID);\n   }\n\n   /**\n    * @property model\n    * return a source model\n    *\n    * @return ABModel\n    */\n   get model() {\n      let object = this.datasource; // already notified\n\n      return object ? object.model() : null;\n   }\n\n   get dataStatusFlag() {\n      return {\n         notInitial: 0,\n         initializing: 1,\n         initialized: 2,\n      };\n   }\n\n   get dataStatus() {\n      return this._dataStatus;\n   }\n\n   ///\n   /// Cursor\n   ///\n\n   setCursor(itemId) {\n      // If the static cursor is set, then this DC could not set cursor to other rows\n      if (\n         this.settings.fixSelect &&\n         (this.settings.fixSelect != \"_FirstRecordDefault\" ||\n            this.settings.fixSelect == itemId)\n      )\n         return;\n\n      if (this.__treeCollection) {\n         // set cursor of tree collection\n         this.setCursorTree(itemId);\n\n         // pull current row id\n         let currTreeId = this.__treeCollection.getCursor();\n         if (currTreeId) {\n            let currTreeItem = this.__treeCollection.getItem(currTreeId);\n            if (currTreeItem) itemId = currTreeItem._itemId;\n         }\n      }\n\n      let dc = this.__dataCollection;\n      if (dc) {\n         // clear cursor\n         if (itemId == null) {\n            dc.setCursor(null);\n         }\n         // If set rowId equal current cursor, it will not trigger .onAfterCursorChange event\n         else if (dc.getCursor() == itemId) {\n            this.emit(\"changeCursor\", this.getCursor());\n         }\n         // set new cursor\n         else if (dc.exists(itemId)) {\n            dc.setCursor(itemId);\n         }\n      }\n   }\n\n   /**\n    *\n    * @param {string|number} itemId - Id of item or Id of row data\n    */\n   setCursorTree(itemId) {\n      let tc = this.__treeCollection;\n      if (tc && tc.getCursor() != itemId) {\n         // If it is id of tree collection, then find row id of data\n         let treeCursor = tc.find({ id: itemId }, true);\n         if (treeCursor) {\n            tc.setCursor(itemId);\n         }\n         // If it is not id of tree collection, then find/set root of data\n         else {\n            let treeItem = tc.find({ _itemId: itemId, $parent: 0 }, true);\n            if (treeItem) tc.setCursor(treeItem.id);\n            else tc.setCursor(null);\n         }\n      }\n   }\n\n   getCursor(treeCursor = false) {\n      // Cursor of tree collection\n      if (treeCursor && this.__treeCollection) {\n         let currId = this.__treeCollection.getCursor();\n         if (currId) {\n            let currItem = this.__treeCollection.getItem(currId);\n\n            // filter current id for serialize\n            this.__treeCollection.filter(\n               (item) => item._itemId == currItem._itemId\n            );\n\n            // pull item with child items\n            let currItemAndChilds =\n               this.__treeCollection.serialize()[0] || null;\n\n            // refresh filter\n            this.refreshLinkCursor();\n\n            return currItemAndChilds;\n         }\n      }\n\n      let dc = this.__dataCollection;\n      if (dc == null) return null;\n\n      let currId = dc.getCursor();\n      let currItem = dc.getItem(currId);\n\n      return currItem;\n   }\n\n   getFirstRecord() {\n      var dc = this.__dataCollection;\n      if (dc == null) return null;\n\n      var currId = dc.getFirstId();\n      var currItem = dc.getItem(currId);\n\n      return currItem;\n   }\n\n   getNextRecord(record) {\n      var dc = this.__dataCollection;\n      if (dc == null) return null;\n\n      var currId = dc.getNextId(record.id);\n      var currItem = dc.getItem(currId);\n\n      return currItem;\n   }\n\n   /**\n    * @method refreshLinkCursor\n    *    If the data collection is bound to another and it is the child connection\n    *    it finds it's parents current set cursor and then filters its data\n    *    based off of the cursor.\n    */\n   refreshLinkCursor() {\n      // do not set the filter unless this dc is initialized \"dataStatusFlag==2\"\n      // if (this.dataStatus != this.dataStatusFlag.initialized) return;\n\n      // filter the data in the data collection\n      // using its parents current cursor because all the data in this child\n      // data collection has been loaded and the frontend can decide what is\n      // seen or not seen\n      let linkCursor;\n      let dvLink = this.datacollectionLink;\n      if (dvLink) {\n         linkCursor = dvLink.getCursor();\n      }\n\n      let filterData = (rowData) => {\n         // if link dc cursor is null, then show all data\n         if (linkCursor == null) return true;\n         else return this.isParentFilterValid(rowData);\n      };\n\n      if (this.__dataCollection) this.__dataCollection.filter(filterData);\n      if (this.__treeCollection) this.__treeCollection.filter(filterData);\n   }\n\n   setStaticCursor() {\n      if (this.settings.fixSelect) {\n         // set cursor to the current user\n         if (this.settings.fixSelect == \"_CurrentUser\") {\n            var username = this.currentUserUsername();\n            var userFields = this.datasource.fields((f) => f.key == \"user\");\n\n            // find a row that contains the current user\n            var row = this.__dataCollection.find((r) => {\n               var found = false;\n\n               userFields.forEach((f) => {\n                  if (found || r[f.columnName] == null) return;\n\n                  if (r[f.columnName].filter) {\n                     // Array - isMultiple\n                     found =\n                        r[f.columnName].filter((data) => data.id == username)\n                           .length > 0;\n                  } else if (r[f.columnName] == username) {\n                     found = true;\n                  }\n               });\n\n               return found;\n            }, true);\n\n            // set a first row of current user to cursor\n            if (row) {\n               this.__dataCollection.setCursor(row.id);\n\n               this.setCursorTree(row.id);\n            }\n         } else if (\n            this.settings.fixSelect == \"_FirstRecord\" ||\n            this.settings.fixSelect == \"_FirstRecordDefault\"\n         ) {\n            // // find a row that contains the current user\n            // var row = this.__dataCollection.find((r) => {\n\n            //  var found = false;\n            //  if (!found) {\n            //    found = true;\n            //    return true; // just give us the first record\n            //  }\n\n            // }, true);\n\n            // // set a first row of current user to cursor\n            // if (row)\n            //  this.__dataCollection.setCursor(row.id);\n\n            let currRowId = this.__dataCollection.getCursor();\n            if (\n               !currRowId ||\n               (currRowId && !this.__dataCollection.exists(currRowId))\n            ) {\n               // If current cursor is filtered by parent DC, then select new cursor\n\n               // set a first row to cursor\n               let rowId = this.__dataCollection.getFirstId();\n               // if (rowId) {\n               this.__dataCollection.setCursor(rowId || null);\n\n               this.setCursorTree(rowId);\n               // }\n            }\n         } else {\n            this.__dataCollection.setCursor(this.settings.fixSelect);\n\n            this.setCursorTree(this.settings.fixSelect);\n         }\n      }\n   }\n\n   ///\n   /// Data\n   ///\n\n   /**\n    * @method filterCondition()\n    * Provide a temporary filter condition to modify the data we are returning.\n    * Used by User search criterias.\n    * @param {json} cond\n    *        A valid QueryCondition to filter the response.\n    */\n   filterCondition(cond = null) {\n      this.__filterCond = cond;\n   }\n\n   init() {\n      // prevent initialize many times\n      if (this.initialized) return;\n      this.initialized = true;\n\n      if (!this.__dataCollection.___AD.onAfterCursorChange) {\n         this.__dataCollection.___AD.onAfterCursorChange = this.__dataCollection.attachEvent(\n            \"onAfterCursorChange\",\n            () => {\n               // debugger;\n               var currData = this.getCursor();\n\n               this.emit(\"changeCursor\", currData);\n            }\n         );\n      }\n\n      // relate data functions\n      let isRelated = (relateData, rowId, PK = \"id\") => {\n         if (Array.isArray(relateData)) {\n            return relateData.filter((v) => (v[PK] || v) == rowId).length > 0;\n         } else {\n            return relateData && (relateData[PK] || relateData) == rowId;\n         }\n      };\n\n      // events\n      this.on(\"ab.datacollection.create\", (data) => {\n         // debugger;\n         let obj = this.datasource;\n         if (!obj) return;\n\n         if (!data || !data.data) return;\n\n         let needAdd = false;\n         let updatedVals = [];\n\n         Promise.resolve()\n            .then(() => {\n               return new Promise((next, bad) => {\n                  // Query\n                  if (obj instanceof this.AB.Class.ABObjectQuery) {\n                     let objList =\n                        obj.objects((o) => o.id == data.objectId) || [];\n\n                     needAdd = objList.length > 0;\n\n                     if (!needAdd) return next();\n\n                     let where = {\n                        glue: \"or\",\n                        rules: [],\n                     };\n\n                     objList.forEach((o) => {\n                        let newDataId = data.data[`${o.PK()}`];\n                        if (!newDataId) return;\n\n                        where.rules.push({\n                           key: `${o.alias || obj.objectAlias(o.id)}.${o.PK()}`,\n                           rule: \"equals\",\n                           value: newDataId,\n                        });\n                     });\n\n                     obj.model()\n                        .findAll({\n                           where: where,\n                        })\n                        .then((newQueryData) => {\n                           updatedVals = newQueryData.data || [];\n                           updatedVals.forEach((v) => {\n                              delete v.id;\n                           });\n\n                           next();\n                        })\n                        .catch(bad);\n                  }\n                  // Object\n                  else {\n                     needAdd = obj.id == data.objectId;\n                     updatedVals = [data.data];\n                     next();\n                  }\n               });\n            })\n            .then(() => {\n               if (needAdd) {\n                  // normalize data before add to data collection\n                  var model = obj.model();\n                  model.normalizeData(updatedVals);\n\n                  (updatedVals || []).forEach((updatedV) => {\n                     // filter condition before add\n                     if (!this.isValidData(updatedV)) return;\n\n                     // check to see if item already exisits in data collection\n                     // and check to see that we are not loading the data serverside from cursor\n                     if (\n                        !this.__dataCollection.exists(\n                           updatedV[`${obj.PK()}`]\n                        ) &&\n                        !this.__reloadWheres\n                     ) {\n                        this.__dataCollection.add(updatedV, 0);\n                        this.emit(\"create\", updatedV);\n                        // this.__dataCollection.setCursor(rowData.id);\n                     } else if (\n                        !this.__dataCollection.exists(\n                           updatedV[`${obj.PK()}`]\n                        ) &&\n                        this.__reloadWheres\n                     ) {\n                        // debugger;\n                        if (this.isParentFilterValid(updatedV)) {\n                           // we track bound components and flexlayout components\n                           var attachedComponents = this.__bindComponentIds.concat(\n                              this.__flexComponentIds\n                           );\n                           attachedComponents.forEach((bcids) => {\n                              // if the reload button already exisits move on\n                              if ($$(bcids + \"_reloadView\")) {\n                                 return false;\n                              }\n\n                              // find the position of the data view\n                              var pos = 0;\n                              var parent = $$(bcids).getParentView();\n                              if ($$(bcids).getParentView().index) {\n                                 pos = $$(bcids)\n                                    .getParentView()\n                                    .index($$(bcids));\n                              } else if (\n                                 $$(bcids).getParentView().getParentView().index\n                              ) {\n                                 // this is a data view and it is inside a\n                                 // scroll view that is inside an accodion\n                                 // so we need to go deeper to add the button\n                                 parent = $$(bcids)\n                                    .getParentView()\n                                    .getParentView();\n                                 pos = $$(bcids)\n                                    .getParentView()\n                                    .getParentView()\n                                    .index($$(bcids).getParentView());\n                              }\n\n                              // store the datacollection so we can pass it to the button later\n                              var DC = this;\n                              // add a button that reloads the view when clicked\n                              if (parent.addView) {\n                                 var L = this.AB.Label();\n                                 parent.addView(\n                                    {\n                                       id: bcids + \"_reloadView\",\n                                       view: \"button\",\n                                       value: L(\n                                          \"New data available. Click to reload.\"\n                                       ),\n                                       css: \"webix_primary webix_warn\",\n                                       click: function (id, event) {\n                                          DC.reloadData();\n                                          $$(id).getParentView().removeView(id);\n                                       },\n                                    },\n                                    pos\n                                 );\n                              }\n                           });\n                           // this.emit(\"create\", updatedV);\n                        }\n                     }\n                  });\n\n                  if (\n                     this.__treeCollection // && this.__treeCollection.exists(updatedVals.id)\n                  ) {\n                     this.parseTreeCollection({\n                        data: updatedVals,\n                     });\n                  }\n               }\n\n               // ABObject only\n               if (!(obj instanceof this.AB.Class.ABObjectQuery)) {\n                  // if it is a linked object\n                  let connectedFields = this.datasource.connectFields(\n                     (f) =>\n                        f.datasourceLink && f.datasourceLink.id == data.objectId\n                  );\n\n                  // It should always be only one item for ABObject\n                  updatedVals = updatedVals[0];\n\n                  // update relation data\n                  if (\n                     updatedVals &&\n                     connectedFields &&\n                     connectedFields.length > 0\n                  ) {\n                     // various PK name\n                     let PK = connectedFields[0].object.PK();\n                     if (!updatedVals.id && PK != \"id\")\n                        updatedVals.id = updatedVals[PK];\n\n                     this.__dataCollection.find({}).forEach((d) => {\n                        let updateItemData = {};\n\n                        connectedFields.forEach((f) => {\n                           var updateRelateVal = {};\n                           if (f && f.fieldLink) {\n                              updateRelateVal =\n                                 updatedVals[f.fieldLink.relationName()] || {};\n                           }\n\n                           let rowRelateVal = d[f.relationName()] || {};\n\n                           let valIsRelated = isRelated(\n                              updateRelateVal,\n                              d.id,\n                              PK\n                           );\n\n                           // Relate data\n                           if (\n                              Array.isArray(rowRelateVal) &&\n                              rowRelateVal.filter(\n                                 (v) =>\n                                    v == updatedVals.id ||\n                                    v.id == updatedVals.id ||\n                                    v[PK] == updatedVals.id\n                              ).length < 1 &&\n                              valIsRelated\n                           ) {\n                              rowRelateVal.push(updatedVals);\n\n                              updateItemData[f.relationName()] = rowRelateVal;\n                              updateItemData[f.columnName] = updateItemData[\n                                 f.relationName()\n                              ].map((v) => v.id || v[PK] || v);\n                           } else if (\n                              !Array.isArray(rowRelateVal) &&\n                              (rowRelateVal != updatedVals.id ||\n                                 rowRelateVal.id != updatedVals.id ||\n                                 rowRelateVal[PK] != updatedVals.id) &&\n                              valIsRelated\n                           ) {\n                              updateItemData[f.relationName()] = updatedVals;\n                              updateItemData[f.columnName] =\n                                 updatedVals.id || updatedVals;\n                           }\n                        });\n\n                        // If this item needs to update\n                        if (Object.keys(updateItemData).length > 0) {\n                           // normalize data before add to data collection\n                           var model = obj.model();\n                           model.normalizeData(updateItemData);\n\n                           this.__dataCollection.updateItem(\n                              d.id,\n                              updateItemData\n                           );\n\n                           if (this.__treeCollection)\n                              this.__treeCollection.updateItem(\n                                 d.id,\n                                 updateItemData\n                              );\n\n                           this.emit(\n                              \"update\",\n                              this.__dataCollection.getItem(d.id)\n                           );\n                        }\n                     });\n                  }\n               }\n\n               // filter link data collection's cursor\n               this.refreshLinkCursor();\n               this.setStaticCursor();\n            });\n      });\n\n      this.on(\"ab.datacollection.update\", (data) => {\n         // {json} data\n         // incoming socket payload:\n         // data.objectId {string} uuid of the ABObject's row that was updated\n         // data.data {json} the new updated value of that row entry.\n\n         // debugger;\n         let obj = this.datasource;\n         if (!obj) return;\n\n         // updated values\n         let values = data.data;\n         if (!values) return;\n\n         let needUpdate = false;\n         let isExists = false;\n         let updatedIds = [];\n         // {array}\n         // an array of the row indexs in our DataCollection that have values\n         // that need to be updated.\n\n         let updatedTreeIds = [];\n         let updatedVals = {};\n\n         // Query\n         if (obj instanceof this.AB.Class.ABObjectQuery) {\n            let objList = obj.objects((o) => o.id == data.objectId) || [];\n            needUpdate = objList.length > 0;\n            if (needUpdate) {\n               (objList || []).forEach((o) => {\n                  updatedIds = updatedIds.concat(\n                     this.__dataCollection\n                        .find((item) => {\n                           return (\n                              item[\n                                 `${this.datasource.objectAlias(\n                                    o.id\n                                 )}.${o.PK()}`\n                              ] == (values[o.PK()] || values.id)\n                           );\n                        })\n                        .map((o) => o.id) || []\n                  );\n\n                  // grouped queries\n                  if (this.__treeCollection) {\n                     updatedTreeIds = updatedTreeIds.concat(\n                        this.__treeCollection\n                           .find((item) => {\n                              return (\n                                 item[\n                                    `${this.datasource.objectAlias(\n                                       o.id\n                                    )}.${o.PK()}`\n                                 ] == (values[o.PK()] || values.id)\n                              );\n                           })\n                           .map((o) => o.id) || []\n                     );\n                  }\n               });\n\n               isExists = updatedIds.length > 0;\n\n               updatedVals = this._queryUpdateData(objList, values);\n            }\n         }\n         // Object\n         else {\n            needUpdate = obj.id == data.objectId;\n            if (needUpdate) {\n               // various PK name\n               if (!values.id && obj.PK() != \"id\") values.id = values[obj.PK()];\n\n               updatedIds.push(values.id);\n\n               isExists = this.__dataCollection.exists(values.id);\n               updatedVals = values;\n            }\n         }\n\n         // if it is the source object\n         if (needUpdate) {\n            if (isExists) {\n               if (this.isValidData(updatedVals)) {\n                  // NOTE: this is now done in NetworkRestSocket before\n                  // we start the update events.\n                  // normalize data before update data collection\n                  // var model = obj.model();\n                  // model.normalizeData(updatedVals);\n\n                  if (this.__dataCollection) {\n                     updatedIds = this.AB.uniq(updatedIds);\n                     updatedIds.forEach((itemId) => {\n                        this.__dataCollection.updateItem(itemId, updatedVals);\n                     });\n                  }\n\n                  if (this.__treeCollection) {\n                     // update data in tree\n                     updatedTreeIds = this.AB.uniq(updatedTreeIds);\n                     updatedTreeIds.forEach((itemId) => {\n                        this.__treeCollection.updateItem(itemId, updatedVals);\n                     });\n                  }\n\n                  this.emit(\"update\", updatedVals);\n\n                  // If the update item is current cursor, then should tell components to update.\n                  let currData = this.getCursor();\n                  if (currData && currData.id == updatedVals.id) {\n                     this.emit(\"changeCursor\", currData);\n                  }\n               } else {\n                  // Johnny: Here we are simply removing the DataCollection Entries that are\n                  // no longer valid.\n                  // Just cycle through the collected updatedIds and remove them.\n                  updatedIds.forEach((id) => {\n                     // If the item is current cursor, then the current cursor should be cleared.\n                     let currData = this.getCursor();\n                     if (currData && currData.id == id)\n                        this.emit(\"changeCursor\", null);\n\n                     this.__dataCollection.remove(id);\n\n                     // TODO: update tree list\n                     // if (this.__treeCollection) {\n                     //  this.__treeCollection.remove(id);\n                     // }\n\n                     this.emit(\"delete\", id);\n                  });\n               }\n            }\n            // filter before add new record\n            else if (this.isValidData(updatedVals)) {\n               // this means the updated record was not loaded yet so we are adding it to the top of the grid\n               // the placement will probably change on the next load of the data\n               this.__dataCollection.add(updatedVals, 0);\n\n               if (this.__treeCollection)\n                  this.parseTreeCollection({\n                     data: [updatedVals],\n                  });\n\n               this.emit(\"create\", updatedVals);\n            }\n         }\n\n         // if it is a linked object\n         let connectedFields = obj.connectFields(\n            (f) => f.datasourceLink && f.datasourceLink.id == data.objectId\n         );\n\n         // update relation data\n         if (\n            obj instanceof this.AB.Class.ABObject &&\n            connectedFields &&\n            connectedFields.length > 0\n         ) {\n            // various PK name\n            let PK = connectedFields[0].object.PK();\n            if (!values.id && PK != \"id\") values.id = values[PK];\n\n            if (this.__dataCollection.count() > 0) {\n               this.__dataCollection.find({}).forEach((d) => {\n                  let updateItemData = {};\n\n                  connectedFields.forEach((f) => {\n                     if (!f) return;\n\n                     let updateRelateVal = {};\n                     let rowRelateVal = d[f.relationName()] || {};\n\n                     if (f.fieldLink)\n                        updateRelateVal =\n                           values[f.fieldLink.relationName()] || {};\n\n                     let valIsRelated = isRelated(updateRelateVal, d.id, PK);\n\n                     // Unrelate data\n                     if (\n                        Array.isArray(rowRelateVal) &&\n                        rowRelateVal.filter(\n                           (v) =>\n                              v == values.id ||\n                              v.id == values.id ||\n                              v[PK] == values.id\n                        ).length > 0 &&\n                        !valIsRelated\n                     ) {\n                        updateItemData[f.relationName()] = rowRelateVal.filter(\n                           (v) => (v.id || v[PK] || v) != values.id\n                        );\n                        updateItemData[f.columnName] = updateItemData[\n                           f.relationName()\n                        ].map((v) => v.id || v[PK] || v);\n                     } else if (\n                        !Array.isArray(rowRelateVal) &&\n                        (rowRelateVal == values.id ||\n                           rowRelateVal.id == values.id ||\n                           rowRelateVal[PK] == values.id) &&\n                        !valIsRelated\n                     ) {\n                        updateItemData[f.relationName()] = null;\n                        updateItemData[f.columnName] = null;\n                     }\n\n                     // Relate data or Update\n                     if (Array.isArray(rowRelateVal) && valIsRelated) {\n                        // update relate data\n                        if (\n                           rowRelateVal.filter(\n                              (v) =>\n                                 v == values.id ||\n                                 v.id == values.id ||\n                                 v[PK] == values.id\n                           ).length > 0\n                        ) {\n                           rowRelateVal.forEach((v, index) => {\n                              if (\n                                 v == values.id ||\n                                 v.id == values.id ||\n                                 v[PK] == values.id\n                              )\n                                 rowRelateVal[index] = values;\n                           });\n                        }\n                        // add new relate\n                        else {\n                           rowRelateVal.push(values);\n                        }\n\n                        updateItemData[f.relationName()] = rowRelateVal;\n                        updateItemData[f.columnName] = updateItemData[\n                           f.relationName()\n                        ].map((v) => v.id || v[PK] || v);\n                     } else if (\n                        !Array.isArray(rowRelateVal) &&\n                        (rowRelateVal != values.id ||\n                           rowRelateVal.id != values.id ||\n                           rowRelateVal[PK] != values.id) &&\n                        valIsRelated\n                     ) {\n                        updateItemData[f.relationName()] = values;\n                        updateItemData[f.columnName] = values.id || values;\n                     }\n                  });\n\n                  // If this item needs to update\n                  if (Object.keys(updateItemData).length > 0) {\n                     // normalize data before add to data collection\n                     var model = obj.model();\n                     model.normalizeData(updateItemData);\n                     if (\n                        this.__treeCollection &&\n                        this.__treeCollection.exists(d.id)\n                     )\n                        this.__treeCollection.updateItem(d.id, updateItemData);\n\n                     if (\n                        this.__dataCollection &&\n                        this.__dataCollection.exists(d.id)\n                     ) {\n                        this.__dataCollection.updateItem(d.id, updateItemData);\n                        this.emit(\n                           \"update\",\n                           this.__dataCollection.getItem(d.id)\n                        );\n                     }\n                  }\n               });\n            }\n         }\n\n         this.refreshLinkCursor();\n         this.setStaticCursor();\n      });\n\n      // We are subscribing to notifications from the server that an item may be stale and needs updating\n      // We will improve this later and verify that it needs updating before attempting the update on the client side\n      this.on(\"ab.datacollection.stale\", (data) => {\n         // debugger;\n         // if we don't have a datasource or model, there is nothing we can do here:\n         // Verify the datasource has the object we are listening for if not just stop here\n         if (\n            !this.datasource ||\n            !this.model ||\n            this.datasource.id != data.objectId\n         ) {\n            return;\n         }\n\n         // updated values\n         var values = data.data;\n\n         if (!values) return;\n\n         // use the Object's defined Primary Key:\n         var PK = this.model.object.PK();\n         if (!values[PK]) {\n            PK = \"id\";\n         }\n\n         if (values) {\n            if (this.__dataCollection.exists(values[PK])) {\n               var cond = { where: {} };\n               cond.where[PK] = values[PK];\n               // this data collection has the record so we need to query the server to find out what it's latest data is so we can update all instances\n               this.model.staleRefresh(cond).then((res) => {\n                  // check to make sure there is data to work with\n                  if (Array.isArray(res.data) && res.data.length) {\n                     // debugger;\n                     let obj = this.datasource;\n                     if (!obj) return;\n                     // normalize data before add to data collection\n                     var model = obj.model();\n                     model.normalizeData(res.data[0]);\n                     // tell the webix data collection to update using their API with the row id (values.id) and content (res.data[0])\n                     if (this.__dataCollection.exists(values[PK])) {\n                        this.__dataCollection.updateItem(\n                           values[PK],\n                           res.data[0]\n                        );\n                     }\n\n                     // If the update item is current cursor, then should tell components to update.\n                     var currData = this.getCursor();\n                     if (currData && currData[PK] == values[PK]) {\n                        this.emit(\"changeCursor\", currData);\n                     }\n                  } else {\n                     // If there is no data in the object then it was deleted...lets clean things up\n                     // If the deleted item is current cursor, then the current cursor should be cleared.\n                     var currId = this.getCursor();\n                     if (currId == values[PK]) this.emit(\"changeCursor\", null);\n\n                     this.__dataCollection.remove(values[PK]);\n                     this.emit(\"delete\", values[PK]);\n                  }\n               });\n            }\n         }\n\n         // filter link data collection's cursor\n         this.refreshLinkCursor();\n         this.setStaticCursor();\n      });\n\n      this.on(\"ab.datacollection.delete\", (data) => {\n         // debugger;\n         let obj = this.datasource;\n         if (!obj) return;\n\n         let deleteId = data.data;\n         let needDelete = false;\n         let deletedIds = [];\n         let deletedTreeIds = [];\n\n         // Query\n         if (obj instanceof this.AB.Class.ABObjectQuery) {\n            let objList = obj.objects((o) => o.id == data.objectId) || [];\n            needDelete = objList.length > 0;\n            if (needDelete) {\n               (objList || []).forEach((o) => {\n                  deletedIds =\n                     this.__dataCollection\n                        .find((item) => {\n                           return item[`${o.alias}.${o.PK()}`] == deleteId;\n                        })\n                        .map((o) => o.id) || [];\n\n                  // grouped queries\n                  if (this.__treeCollection) {\n                     deletedTreeIds =\n                        this.__treeCollection\n                           .find((item) => {\n                              return item[`${o.alias}.${o.PK()}`] == deleteId;\n                           })\n                           .map((o) => o.id) || [];\n                  }\n               });\n            }\n         }\n         // Object\n         else {\n            needDelete = obj.id == data.objectId;\n            if (needDelete) {\n               deletedIds.push(deleteId);\n            }\n         }\n\n         // if it is the source object\n         if (needDelete) {\n            // If the deleted item is current cursor, then the current cursor should be cleared.\n            var currData = this.getCursor();\n\n            deletedIds.forEach((delId) => {\n               if (currData && currData[obj.PK()] == delId)\n                  this.emit(\"changeCursor\", null);\n\n               if (this.__dataCollection.exists(delId))\n                  this.__dataCollection.remove(delId);\n            });\n\n            if (this.__treeCollection) {\n               deletedTreeIds.forEach((delId) => {\n                  if (this.__treeCollection.exists(delId))\n                     this.__treeCollection.remove(delId);\n               });\n            }\n\n            if (deletedIds[0]) this.emit(\"delete\", deletedIds[0]);\n         }\n\n         // if it is a linked object\n         let connectedFields = obj.connectFields(\n            (f) => f.datasourceLink && f.datasourceLink.id == data.objectId\n         );\n\n         // update relation data\n         if (\n            obj instanceof this.AB.Class.ABObject &&\n            connectedFields &&\n            connectedFields.length > 0\n         ) {\n            // various PK name\n            let PK = connectedFields[0].object.PK();\n\n            this.__dataCollection.find({}).forEach((d) => {\n               let updateRelateVals = {};\n\n               connectedFields.forEach((f) => {\n                  let relateVal = d[f.relationName()];\n                  if (relateVal == null) return;\n\n                  if (\n                     Array.isArray(relateVal) &&\n                     relateVal.filter(\n                        (v) =>\n                           v == deleteId ||\n                           v.id == deleteId ||\n                           v[PK] == deleteId\n                     ).length > 0\n                  ) {\n                     updateRelateVals[f.relationName()] = relateVal.filter(\n                        (v) => (v.id || v[PK] || v) != deleteId\n                     );\n                     updateRelateVals[f.columnName] = updateRelateVals[\n                        f.relationName()\n                     ].map((v) => v.id || v[PK] || v);\n                  } else if (\n                     relateVal == deleteId ||\n                     relateVal.id == deleteId ||\n                     relateVal[PK] == deleteId\n                  ) {\n                     updateRelateVals[f.relationName()] = null;\n                     updateRelateVals[f.columnName] = null;\n                  }\n               });\n\n               // If this item needs to update\n               if (Object.keys(updateRelateVals).length > 0) {\n                  // normalize data before add to data collection\n                  var model = obj.model();\n                  model.normalizeData(updateRelateVals);\n\n                  this.__dataCollection.updateItem(d.id, updateRelateVals);\n\n                  if (this.__treeCollection)\n                     this.__treeCollection.updateItem(d.id, updateRelateVals);\n\n                  this.emit(\"update\", this.__dataCollection.getItem(d.id));\n               }\n            });\n         }\n      });\n\n      // add listeners when cursor of link data collection is changed\n      let linkDv = this.datacollectionLink;\n      if (linkDv && this.settings.loadAll) {\n         this.eventAdd({\n            emitter: linkDv,\n            eventName: \"changeCursor\",\n            listener: () => {\n               this.refreshLinkCursor();\n               this.setStaticCursor();\n            },\n         });\n      }\n   }\n\n   /*\n    * waitForDataCollectionToInitialize()\n    * there are certain situations where this datacollection shouldn't\n    * load until another one has loaded.  In those cases, the fn()\n    * will wait for the required datacollection to emit \"initializedData\"\n    * before continuing on.\n    * @param {ABViewDataCollection} DC\n    *      the DC this datacollection depends on.\n    * @returns {Promise}\n    */\n   waitForDataCollectionToInitialize(DC, msg) {\n      return new Promise((resolve, reject) => {\n         switch (DC.dataStatus) {\n            // if that DC hasn't started initializing yet, start it!\n            case DC.dataStatusFlag.notInitial:\n               DC.loadData().catch(reject);\n            // no break;\n\n            // once in the process of initializing\n            /* eslint-disable no-fallthrough*/\n            case DC.dataStatusFlag.initializing:\n               /* eslint-enable no-fallthrough*/\n               // listen for \"initializedData\" event from the DC\n               // then we can continue.\n               this.eventAdd({\n                  emitter: DC,\n                  eventName: \"initializedData\",\n                  listener: () => {\n                     // go next\n                     resolve();\n                  },\n               });\n               break;\n\n            // if it is already initialized, we can continue:\n            case DC.dataStatusFlag.initialized:\n               resolve();\n               break;\n\n            // just in case, if the status is not known, just continue\n            default:\n               resolve();\n               break;\n         }\n      });\n   }\n\n   loadData(start, limit) {\n      // mark data status is initializing\n      if (this._dataStatus == this.dataStatusFlag.notInitial) {\n         this._dataStatus = this.dataStatusFlag.initializing;\n         this.emit(\"initializingData\", {});\n      }\n\n      var obj = this.datasource;\n      if (obj == null) {\n         this._dataStatus = this.dataStatusFlag.initialized;\n         return Promise.resolve([]);\n      }\n\n      var model = obj.model();\n      if (model == null) {\n         this._dataStatus = this.dataStatusFlag.initialized;\n         return Promise.resolve([]);\n      }\n\n      // pull the defined sort values\n      var sorts = this.settings.objectWorkspace.sortFields || [];\n\n      // pull filter conditions\n      var wheres = this.settings.objectWorkspace.filterConditions || null;\n      // if we pass new wheres with a reload use them instead\n      if (this.__reloadWheres) {\n         wheres = this.__reloadWheres;\n      }\n\n      if (this.__filterCond) {\n         if (wheres.rules.length) {\n            // combine them together:\n            wheres = {\n               glue: \"and\",\n               rules: [wheres, this.__filterCond],\n            };\n         } else {\n            // simplify to just use filterCond\n            wheres = this.__filterCond;\n         }\n      }\n\n      // set query condition\n      var cond = {\n         where: wheres || {},\n         // limit: limit || 20,\n         skip: start || 0,\n         sort: sorts,\n         populate: this.settings.preventPopulate ? false : true,\n      };\n\n      //// NOTE: we no longer set a default limit on loadData() but\n      //// require the platform.loadData() to pass in a default limit.\n      if (limit) {\n         cond.limit = limit;\n      }\n\n      // if settings specify loadAll, then remove the limit\n      if (this.settings.loadAll) {\n         delete cond.limit;\n      }\n\n      return (\n         Promise.resolve()\n            //\n            // Step 1: make sure any DataCollections we are linked to are\n            // initialized first.  Then proceed with our initialization.\n            //\n            .then(() => {\n               // If we are linked to another datacollection then wait for it\n               let linkDc = this.datacollectionLink;\n               if (!linkDc) return Promise.resolve(); // TODO: refactor in v2\n\n               return this.waitForDataCollectionToInitialize(linkDc);\n            })\n            //\n            // Step 2: if we have any filter rules that depend on other DataCollections,\n            // then wait for them to be initialized first.\n            // eg: \"(not_)in_data_collection\" rule filters\n            .then(() => {\n               return new Promise((resolve, reject) => {\n                  if (\n                     wheres == null ||\n                     wheres.rules == null ||\n                     !wheres.rules.length\n                  )\n                     return resolve();\n\n                  var dcFilters = [];\n\n                  wheres.rules.forEach((rule) => {\n                     // if this collection is filtered by data collections we need to load them in case we need to validate from them later\n                     if (\n                        rule.rule == \"in_data_collection\" ||\n                        rule.rule == \"not_in_data_collection\"\n                     ) {\n                        var dv = this.AB.datacollectionByID(rule.value);\n                        if (dv) {\n                           dcFilters.push(\n                              this.waitForDataCollectionToInitialize(dv)\n                           );\n                        }\n                     }\n                  });\n\n                  Promise.all(dcFilters)\n                     .then(() => {\n                        resolve();\n                     })\n                     .catch(reject);\n               });\n            })\n\n            // pull data to data collection\n            .then(() => {\n               return new Promise((resolve, reject) => {\n                  // we will keep track of the resolve, reject for this\n                  // operation.\n                  // the actual resolve() should happen in the\n                  // .processIncomingData() after the  data is processed.\n                  this._pendingLoadDataResolve = {\n                     resolve: resolve,\n                     reject: reject,\n                  };\n\n                  this.platformFind(model, cond).catch((err) => {\n                     reject(err);\n                  });\n               });\n            })\n      );\n   }\n\n   platformFind(model, cond) {\n      //// Core Migration Note:\n      //// the ABViewDataCollectionCore now manages data in a different way:\n      //// local data  vs  Remote Data\n      //// this will need to be updated to reflect that management:\n      //// (and also explains why we refactored things into .processIncomingData())\n      return model.findAll(cond).then((data) => {\n         return this.processIncomingData(data);\n      });\n   }\n\n   /**\n    * processIncomingData()\n    * is called from loadData() once the data is returned.  This method\n    * allows the platform to make adjustments to the data based upon any\n    * platform defined criteria.\n    * @param {obj} data  the data as it was returned from the Server\n    *        which should be in following format:\n    *        {\n    *          status: \"success\", // or \"error\"\n    *          data:[ {ABObjectData}, {ABObjectData}, ...]\n    *        }\n    */\n   processIncomingData(data) {\n      return Promise.resolve().then(() => {\n         // store total count\n         this.__totalCount = data.total_count;\n         // In order to get the total_count updated I had to use .load()\n         queueOperation(() => {\n            this.__dataCollection.load(() => {\n               // If this dc loads all, then it has to filter data by the parent dc\n               if (this.settings.loadAll) {\n                  setTimeout(() => {\n                     this.refreshLinkCursor();\n                  }, 250);\n               }\n\n               return data;\n            });\n         }, 5);\n\n         // In order to keep detail and graphs loading properly I had to keep .parse()\n         queueOperation(() => {\n            this.__dataCollection.parse(data);\n         }, 50);\n\n         // this does nothing???\n         this.parseTreeCollection(data);\n\n         queueOperation(() => {\n            // if we are linked, then refresh our cursor\n            var linkDv = this.datacollectionLink;\n            if (linkDv) {\n               // filter data by match link data collection\n               this.refreshLinkCursor();\n               this.setStaticCursor();\n            } else {\n               // set static cursor\n               this.setStaticCursor();\n            }\n         }, 5);\n         queueOperation(() => {\n            // mark initialized data\n            if (this._dataStatus != this.dataStatusFlag.initialized) {\n               this._dataStatus = this.dataStatusFlag.initialized;\n               this.emit(\"initializedData\", {});\n            }\n         }, 20);\n         queueOperation(() => {\n            // If dc set load all, then it will not trigger .loadData in dc at\n            // .onAfterLoad event\n            if (this.settings.loadAll) {\n               this.emit(\"loadData\", {});\n            }\n         }, 10);\n         queueOperation(() => {\n            // now we close out our .loadData() promise.resolve() :\n            if (this._pendingLoadDataResolve) {\n               this._pendingLoadDataResolve.resolve();\n\n               // after we call .resolve() stop tracking this:\n               this._pendingLoadDataResolve = null;\n            }\n         }, 5);\n      });\n   }\n\n   /**\n    * @method reloadData()\n    * Trigger the DataCollection to reload its data from the server.\n    * @param {int} start\n    *        Start position of where we want the data to load.\n    * @param {int} limit\n    *        How many entries to load at a time.\n    * @return {Promise}\n    */\n   reloadData(start, limit) {\n      // var waitForDataCollectionToInitialize = (DC) => {\n      //    return new Promise((resolve, reject) => {\n      //       switch (DC.dataStatus) {\n      //          // if that DC hasn't started initializing yet, start it!\n      //          case DC.dataStatusFlag.notInitial:\n      //             DC.loadData().catch(reject);\n      //          // no break;\n\n      //          // once in the process of initializing\n      //          /* eslint-disable no-fallthrough*/\n      //          case DC.dataStatusFlag.initializing:\n      //             /* eslint-enable no-fallthrough*/\n      //             // listen for \"initializedData\" event from the DC\n      //             // then we can continue.\n      //             this.eventAdd({\n      //                emitter: DC,\n      //                eventName: \"initializedData\",\n      //                listener: () => {\n      //                   // go next\n      //                   resolve();\n      //                },\n      //             });\n      //             break;\n\n      //          // if it is already initialized, we can continue:\n      //          case DC.dataStatusFlag.initialized:\n      //             resolve();\n      //             break;\n\n      //          // just in case, if the status is not known, just continue\n      //          default:\n      //             resolve();\n      //             break;\n      //       }\n      //    });\n      // };\n\n      return Promise.resolve().then(() => {\n         // check if we are currently waiting for more data requests on this datacollection before continuing\n         if (this.reloadTimer) {\n            // if we are already waiting delete the current timer\n            clearTimeout(this.reloadTimer);\n            delete this.reloadTimer;\n         }\n\n         // return a promise\n         if (!this.reloadPromise) {\n            this.reloadPromise = new Promise((resolve, reject) => {\n               this.reloadPromise__resolve = resolve;\n               this.reloadPromise__reject = reject;\n            });\n         }\n\n         // then create a new timeout to delete current timeout, clear data\n         // and load new\n         this.reloadTimer = setTimeout(() => {\n            // clear the data from the dataCollection,\n            this.clearAll();\n            // then loads new data from the server\n            return this.loadData(start, limit)\n               .then(() => {\n                  if (this.reloadPromise) {\n                     this.reloadPromise__resolve();\n                     delete this.reloadPromise;\n                     delete this.reloadPromise__resolve;\n                     delete this.reloadPromise__reject;\n                  }\n\n                  // delete the current setTimeout\n                  clearTimeout(this.reloadTimer);\n                  delete this.reloadTimer;\n               })\n               .catch((err) => {\n                  if (this.reloadPromise) {\n                     this.reloadPromise__reject(err);\n                     delete this.reloadPromise;\n                     delete this.reloadPromise__resolve;\n                     delete this.reloadPromise__reject;\n                  }\n                  // delete the current setTimeout\n                  clearTimeout(this.reloadTimer);\n                  delete this.reloadTimer;\n               });\n         }, 50);\n         // setting to 50ms because right now we do not see many\n         // concurrent calls,  we need to increase this if we begin to\n\n         return this.reloadPromise;\n      });\n   }\n\n   /**\n    * reloadWheres()\n    * stores the child data collections filters for subsequent loads.\n    * It is called from bindParentDc() when child data collections that are not\n    * marked to load all data are initializing. To do this we use webix\n    * server side binding by setting the param of \"dataFeed\".\n    * @param {obj} wheres  the new filters for the data collection\n    *        This is a combination of any exisiting filters the data collection\n    *        alreay had as well as the filter for the current cursor set by the\n    *        master data collection. We store this in __reloadWheres for when\n    *        the data needs to be updated.\n    *        The format of the wheres is our Query Builder Format\n    *        ex: {\n    *              \"glue\": \"and\",\n    *              \"rules\": [{\n    *                \"key\": \"33ba8957-6b9c-4ddb-9533-c46b13878ae1\",\n    *                \"rule\": \"contains\",\n    *                \"value\": \"1594176994894\"\n    *              }]\n    *            }\n    */\n   reloadWheres(wheres) {\n      this.__reloadWheres = wheres;\n   }\n\n   getData(filter) {\n      var dc = this.__dataCollection;\n      if (dc) {\n         return dc.find((row) => {\n            let isValid = true;\n\n            // data collection filter\n            // isValid = this.isValidData(row);\n\n            // NOTE: data are filtered from the server side (webix.dataFeed)\n            // parent dc filter\n            let linkDv = this.datacollectionLink;\n            if (linkDv && this.settings.loadAll && isValid) {\n               isValid = this.isParentFilterValid(row);\n            }\n\n            // addition filter\n            if (isValid && filter) {\n               isValid = filter(row);\n            }\n\n            return isValid;\n         });\n      } else {\n         return [];\n      }\n   }\n\n   isParentFilterValid(rowData) {\n      // data is empty\n      if (rowData == null) return null;\n\n      var linkDv = this.datacollectionLink;\n      if (linkDv == null) return true;\n\n      var fieldLink = this.fieldLink;\n      if (fieldLink == null) return true;\n\n      // if the parent's cursor is not set we have not filted this collection\n      // yet so the data that comes back should be valid\n      var linkCursor = linkDv.getCursor();\n      if (linkCursor == null) {\n         return true;\n      }\n\n      var linkVal = rowData[fieldLink.relationName()];\n      if (linkVal == null) {\n         // try to get relation value(id) again\n         if (rowData[fieldLink.columnName]) {\n            linkVal = rowData[fieldLink.columnName];\n         } else {\n            return false;\n         }\n      }\n\n      let PK = fieldLink.object.PK();\n\n      // array - 1:M , M:N\n      if (linkVal.filter) {\n         return (\n            linkVal.filter((val) => (val.id || val[PK] || val) == linkCursor.id)\n               .length > 0\n         );\n      } else {\n         return (linkVal.id || linkVal[PK] || linkVal) == linkCursor.id;\n      }\n   }\n\n   clearAll() {\n      if (this.__dataCollection) this.__dataCollection.clearAll();\n\n      if (this.__treeCollection) this.__treeCollection.clearAll();\n\n      this._dataStatus = this.dataStatusFlag.notInitial;\n   }\n\n   get totalCount() {\n      return this.__totalCount || 0;\n   }\n\n   ///\n   /// Components\n   ///\n\n   /**\n    * @method bind\n    * @param {Object} component - a webix element instance\n    */\n   bind(/* component */) {\n      console.error(\"Platform.ABDataCollection.bind() Not implemented\");\n   }\n\n   unbind(/* component */) {\n      console.error(\"Platform.ABDataCollection.unbind() Not implemented\");\n   }\n\n   removeComponent(comId) {\n      // get index\n      let index = this.__bindComponentIds.indexOf(comId);\n\n      // delete\n      this.__bindComponentIds.splice(index, 1);\n   }\n\n   /**\n    * @method refreshFilterConditions()\n    * This is called in two primary cases:\n    *    - on initialization of a DC to setup our filters.\n    *    - in the operation of the ABDesigner when using a DC to display data\n    *      in the Work_object_grid and the datacollection_work(?)\n    * In the case of the ABDesigner, new temporary where conditions are provided\n    * from the possible filters we can set, and those need to effect the data\n    * we display.\n    * @param {ABRowFilter.where} wheres\n    *        The filter condition from the ABRowFilter values we are storing.\n    */\n   refreshFilterConditions(wheres = null) {\n      // There are 3 Filters that help us know if our data is Valid:\n      // 1) A filter for any ABObjectQuery we are managing.\n      // 2) A filter for our own filter condition\n      // 3) A filter that represents what our scopes allows\n\n      // Set filter of ABObject\n      if (this.__filterDatasource == null)\n         this.__filterDatasource = this.AB.filterComplexNew(\n            `${this.id}_filterDatasource`\n         );\n\n      if (this.datasource) {\n         // this.__filterDatasource.applicationLoad(this.datasource.application);\n         this.__filterDatasource.fieldsLoad(this.datasource.fields());\n\n         let filterConditions;\n\n         // Query\n         if (this.datasource instanceof this.AB.Class.ABObjectQuery) {\n            filterConditions = this.datasource.where;\n         }\n         // Apr 29, 2021 Removed this because we do not want Object filters to\n         // effect validation of DataCollections\n         // Object\n\n         // else if (this.datasource instanceof ABObject) {\n         //    let currentView = this.datasource.currentView();\n         //    if (currentView && currentView.filterConditions)\n         //       filterConditions = currentView.filterConditions;\n         // }\n\n         if (filterConditions)\n            this.__filterDatasource.setValue(filterConditions);\n         else this.__filterDatasource.setValue({});\n      } else {\n         this.__filterDatasource.fieldsLoad([]);\n         this.__filterDatasource.setValue(\n            DefaultValues.settings.objectWorkspace.filterConditions\n         );\n      }\n\n      // Set filter of data view\n      // Apr 29, 2021 Added this code back to validate with DataCollection Filters\n      if (this.__filterDatacollection == null)\n         this.__filterDatacollection = this.AB.filterComplexNew(\n            `${this.id}_filterDatacollection`\n         );\n\n      // this.__filterDatacollection.applicationLoad(\n      //    this.datasource ? this.datasource.application : null\n      // );\n      this.__filterDatacollection.fieldsLoad(\n         this.datasource ? this.datasource.fields() : []\n      );\n\n      if (wheres) this.settings.objectWorkspace.filterConditions = wheres;\n\n      if (\n         this.settings &&\n         this.settings.objectWorkspace &&\n         this.settings.objectWorkspace.filterConditions\n      ) {\n         this.__filterDatacollection.setValue(\n            this.settings.objectWorkspace.filterConditions\n         );\n      } else {\n         this.__filterDatacollection.setValue(\n            DefaultValues.settings.objectWorkspace.filterConditions\n         );\n      }\n\n      // Set filter of user's scope\n      if (this.__filterScope == null)\n         this.__filterScope = this.AB.filterComplexNew(\n            `${this.id}_filterScope`\n         );\n\n      if (this.datasource) {\n         let scopeList = (this.userScopes || []).filter(\n            (s) =>\n               !s.allowAll &&\n               (s.objectIds || []).indexOf(this.datasource.id) > -1\n         );\n         if (scopeList && scopeList.length > 0) {\n            // this.__filterScope.applicationLoad(this.datasource.application);\n            this.__filterScope.fieldsLoad(this.datasource.fields() || []);\n\n            // concat all rules of scopes\n            let scopeRules = [];\n            scopeList\n               .filter(\n                  (s) => s.filter && s.filter.rules && s.filter.rules.length\n               )\n               .forEach((s) => {\n                  let sRules = (s.filter.rules || []).filter(\n                     (r) =>\n                        this.datasource.fields((f) => f.id == r.key).length > 0\n                  );\n\n                  scopeRules = scopeRules.concat(sRules);\n               });\n\n            let scopeWhere = {\n               glue: \"or\",\n               rules: scopeRules,\n            };\n            this.__filterScope.setValue(scopeWhere);\n         }\n      }\n   }\n\n   get isGroup() {\n      return this.__isGroup || false;\n   }\n\n   ///\n   /// Sync type\n   ///\n\n   get syncTypeFlag() {\n      return {\n         server: 1,\n         client: 2,\n      };\n   }\n\n   get syncType() {\n      return this.settings.syncType || DefaultValues.syncType;\n   }\n\n   /** Private methods */\n\n   /**\n    * @method _dataCollectionNew\n    * Get webix.DataCollection\n    *\n    * @return {webix.DataCollection}\n    *\n    * @param {Array} data - initial data\n    */\n   _dataCollectionNew(/*data*/) {\n      var error = new Error(\n         \"the platform.ABDataCollection._dataCollectionNew() is expected to return a proper DataCollection!\"\n      );\n      console.error(error);\n      return null;\n   }\n\n   /**\n    * @method _treeCollectionNew\n    * Get webix.TreeCollection\n    *\n    * @return {webix.TreeCollection}\n    *\n    */\n   _treeCollectionNew() {\n      console.error(\n         \"the platform.ABDataCollection._treeCollectionNew() is expected to return a proper TreeCollection!\"\n      );\n      return null;\n   }\n\n   parseTreeCollection(data = {}) {\n      // TODO all this does is log \"is missing?\"\n      if (data === {}) {\n         console.log(\n            \"Platform.ABDataCollection.parseTreeCollection() missing!\"\n         );\n      }\n   }\n   // parseTreeCollection(data = {}) {\n\n   //  if (!(this.__datasource instanceof ABObjectQuery) ||\n   //    !this.__datasource.isGroup ||\n   //    !this.__treeCollection)\n   //    return;\n\n   //  let addRowToTree = (join = {}, parentAlias = null) => {\n\n   //    let alias = join.alias;\n\n   //    (data.data || []).forEach(row => {\n\n   //      let dataId = row[`${alias}.uuid`] || row[`${alias}.id`];\n   //      if (!dataId) return;\n\n   //      // find parent nodes\n   //      let parentItemIds = [];\n   //      let parentId = row[`${parentAlias}.uuid`] || row[`${parentAlias}.id`];\n   //      if (parentId) {\n   //        parentItemIds = this.__treeCollection\n   //          .find(item => item._alias == parentAlias && item._dataId == parentId)\n   //          .map(item => item.id);\n   //      }\n\n   //      // check exists\n   //      let exists = this.__treeCollection.find(item => {\n   //        return item._alias == alias &&\n   //          item._dataId == dataId &&\n   //          (parentItemIds.length == 0 || parentItemIds.indexOf(item.$parent) > -1);\n   //      }, true);\n   //      if (exists) return;\n\n   //      let treeNode = {};\n   //      treeNode._alias = alias;\n   //      treeNode._dataId = dataId;\n   //      treeNode._itemId = row.id; // Keep row id for set cursor to data collection\n\n   //      Object.keys(row).forEach(propName => {\n\n   //        // Pull value from alias\n   //        if (propName.indexOf(`${alias}.`) == 0) {\n   //          treeNode[propName] = row[propName];\n   //        }\n\n   //      });\n\n   //      if (row.translations)\n   //        treeNode.translations = row.translations;\n\n   //      // child nodes\n   //      if (parentItemIds.length > 0)\n   //        parentItemIds.forEach(parentItemId => {\n   //          this.__treeCollection.add(treeNode, null, parentItemId);\n   //        });\n   //      // root node\n   //      else\n   //        this.__treeCollection.add(treeNode, null);\n\n   //    });\n\n   //    // Sub-joins\n   //    (join.links || []).forEach(link => {\n   //      addRowToTree(link, alias);\n   //    });\n\n   //  };\n\n   //  // Show loading cursor\n   //  (this.__bindComponentIds || []).forEach(comId => {\n\n   //    let boundComp = $$(comId);\n   //    if (boundComp &&\n   //      boundComp.showProgress)\n   //      boundComp.showProgress({ type: \"icon\" });\n\n   //  });\n\n   //  addRowToTree(this.__datasource.joins());\n\n   //  // Hide loading cursor\n   //  (this.__bindComponentIds || []).forEach(comId => {\n\n   //    let boundComp = $$(comId);\n   //    if (boundComp &&\n   //      boundComp.hideProgress)\n   //      boundComp.hideProgress();\n\n   //  })\n   // }\n\n   /**\n    * @method _queryUpdateData\n    *\n    * @param {Array} objList - List of ABObject\n    * @param {Object} values\n    */\n   _queryUpdateData(objList, values) {\n      let updatedVals = {};\n\n      // Add alias to properties of update data\n      Object.keys(values).forEach((key) => {\n         objList.forEach((oItem) => {\n            let alias = this.datasource.objectAlias(oItem.id);\n\n            updatedVals[`${alias}.${key}`] = values[key];\n\n            // Add alias to properties of .translations\n            if (\n               key == \"translations\" &&\n               values[\"translations\"] &&\n               values[\"translations\"].length\n            ) {\n               updatedVals.translations = [];\n\n               values[\"translations\"].forEach((tran) => {\n                  let updatedTran = {};\n\n                  Object.keys(tran).forEach((tranKey) => {\n                     if (tranKey == \"language_code\")\n                        updatedTran[\"language_code\"] = tran[\"language_code\"];\n                     else updatedTran[`${alias}.${tranKey}`] = tran[tranKey];\n                  });\n\n                  updatedVals.translations.push(updatedTran);\n               });\n            }\n         });\n      });\n\n      return updatedVals;\n   }\n\n   isValidData(rowData) {\n      let result = true;\n\n      // NOTE: should we use filter of the current view of object to filter\n      //        if yes, update .wheres condition in .loadData too\n      if (this.__filterDatasource)\n         result = result && this.__filterDatasource.isValid(rowData);\n\n      if (this.__filterDatacollection)\n         result = result && this.__filterDatacollection.isValid(rowData);\n\n      if (result && this.__filterScope)\n         result = result && this.__filterScope.isValid(rowData);\n\n      return result;\n   }\n\n   // Clone\n\n   clone(settings) {\n      settings = settings || this.toObj();\n      var clonedDatacollection = new this.constructor(settings, this.AB);\n      clonedDatacollection.__datasource = this.__datasource;\n      clonedDatacollection._dataStatus = this._dataStatus;\n\n      // clonedDatacollection.__dataCollection = this.__dataCollection.copy();\n      clonedDatacollection.__filterDatacollection.setValue(\n         settings.settings.objectWorkspace.filterConditions\n      );\n\n      var parseMe = () => {\n         if (clonedDatacollection.__dataCollection) {\n            clonedDatacollection.__dataCollection.parse(\n               this.__dataCollection\n                  .find({})\n                  .filter((row) =>\n                     clonedDatacollection.__filterDatacollection.isValid(row)\n                  )\n            );\n         }\n         if (clonedDatacollection.__treeCollection) {\n            clonedDatacollection.__treeCollection.parse(\n               this.__treeCollection\n                  .find({})\n                  .filter((row) =>\n                     clonedDatacollection.__filterDatacollection.isValid(row)\n                  )\n            );\n         }\n      };\n\n      parseMe();\n\n      // return new Promise((resolve, reject) => {\n      //    // load the data\n      //    clonedDatacollection\n      //       .loadData()\n      //       .then(() => {\n\n      // set the cursor\n      clonedDatacollection.setStaticCursor();\n\n      var cursorID = this.getCursor();\n      if (cursorID) {\n         // NOTE: webix documentation issue: .getCursor() is supposed to return\n         // the .id of the item.  However it seems to be returning the {obj}\n         if (cursorID.id) cursorID = cursorID.id;\n\n         clonedDatacollection.setCursor(cursorID);\n      }\n\n      return clonedDatacollection;\n\n      // resolve(clonedDatacollection);\n      //       })\n      //       .catch(reject);\n      // });\n   }\n\n   filteredClone(filters) {\n      var obj = this.toObj();\n\n      // check to see that filters are set (this is sometimes helpful to select the first record without doing so at the data collection level)\n      if (filters?.rules?.length) {\n         if (obj.settings.objectWorkspace.filterConditions?.rules?.length) {\n            obj.settings.objectWorkspace.filterConditions.rules = obj.settings.objectWorkspace.filterConditions.rules.concat(\n               filters.rules\n            );\n         } else {\n            obj.settings.objectWorkspace.filterConditions = filters;\n         }\n      }\n      let clonedDC = this.clone(obj);\n      return clonedDC; // new ABViewDataCollection(settings, this.application, this.parent);\n   }\n\n   //\n   // Event handles\n   //\n\n   /**\n    * @method eventAdd()\n    *\n    *\n    *\n    * @param {object} evt - {\n    *              emitter: object,\n    *              eventName: string,\n    *              listener: function\n    *            }\n    */\n   eventAdd(evt) {\n      if (!evt || !evt.emitter || !evt.listener) return;\n\n      this.__events = this.__events || [];\n\n      let exists = this.__events.find((e) => {\n         return e.emitter == evt.emitter && e.eventName == evt.eventName;\n         // && e.listener == evt.listener;\n      });\n\n      if (!exists || exists.length < 1) {\n         // add to array\n         this.__events.push({\n            emitter: evt.emitter,\n            eventName: evt.eventName,\n            listener: evt.listener,\n         });\n\n         // listening this event\n         evt.emitter.on(evt.eventName, evt.listener);\n      }\n   }\n\n   /**\n    * @method eventClear()\n    * unsubscribe all events.\n    * should do it before destroy a component\n    *\n    */\n   eventClear() {\n      if (this.__events && this.__events.length > 0) {\n         this.__events.forEach((e) => {\n            e.emitter.removeListener(e.eventName, e.listener);\n         });\n      }\n   }\n\n   get userScopes() {\n      return [];\n   }\n};\n","// import ABApplication from \"./ABApplication\"\n\nmodule.exports = class ABDefinitionCore {\n   constructor(attributes, AB) {\n      this.AB = AB;\n      this.fromValues(attributes);\n   }\n\n   ///\n   /// Static Methods\n   ///\n   /// Available to the Class level object.  These methods are not dependent\n   /// on the instance values of the Application.\n   ///\n\n   fromValues(attributes) {\n      /*\n\t\t{\n\t\t\tid: uuid(),\n\t\t\tname: 'name',\n\t\t\ttype: 'xxxxx',\n\t\t\tjson: \"{json}\"\n\t\t}\n\t\t*/\n      if (attributes.id) {\n         this.id = attributes.id;\n      }\n      this.name =\n         attributes?.name ||\n         attributes?.json?.name ||\n         attributes?.json?.label ||\n         attributes?.json?.translations?.[0]?.label ||\n         \"\";\n      if (!this.name) {\n         this.AB.notify.builder(\n            new Error(\"Attributes for definition had no 'name'\"),\n            {\n               context: \"ABDefinitionCore.fromValues()\",\n               attributes,\n            }\n         );\n      }\n      this.type = attributes.type || attributes?.json?.type || \"\";\n      this.json = attributes.json || null;\n   }\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABApplication instance\n    * into the values needed for saving to the DB.\n    *\n    * Most of the instance data is stored in .json field, so be sure to\n    * update that from all the current values of our child fields.\n    *\n    * @return {json}\n    */\n   toObj() {\n      return {\n         id: this.id,\n         name: this.name,\n         type: this.type,\n         json: this.json,\n      };\n   }\n\n   /**\n    * @method destroy()\n    * destroy the current instance of ABDefinition\n    * Also remove it from our parent application\n    * @return {Promise}\n    */\n   destroy() {\n      return this.AB.definitionDestroy(this.id);\n   }\n\n   /**\n    * @method save()\n    * persist this instance of ABObject with it's parent ABApplication\n    * @return {Promise}\n    *         .resolve( {this} )\n    */\n   async save() {\n      if (this.id) {\n         return this.AB.definitionUpdate(this.id, this.toObj());\n      } else {\n         return this.AB.definitionCreate(this.toObj());\n      }\n   }\n};\n","/*\n * ABFactoryCore\n * an object that contains the definitions and references for a single tenant.\n * It is expected that an instance of this should be returned from an\n * ABBootstrap.init(req).then((AB)=>{}) call.\n */\n\n// const _ = require(\"lodash\");\n// const uuidv4 = require(\"uuid\");\n\nconst ABApplication = require(\"../platform/ABApplication\");\nconst ABDefinition = require(\"../platform/ABDefinition\");\n\nconst ABComponent = require(\"../platform/ABComponent\");\n\nconst ABFieldManager = require(\"./ABFieldManager\");\n\nconst ABIndex = require(\"../platform/ABIndex\");\nconst ABObject = require(\"../platform/ABObject\");\nconst ABObjectExternal = require(\"../platform/ABObjectExternal\");\nconst ABObjectImport = require(\"../platform/ABObjectImport\");\nconst ABDataCollection = require(\"../platform/ABDataCollection\");\nconst ABObjectQuery = require(\"../platform/ABObjectQuery\");\n\nconst ABProcess = require(\"../platform/ABProcess\");\n\nconst ABProcessParticipant = require(\"../platform/process/ABProcessParticipant\");\nconst ABProcessLane = require(\"../platform/process/ABProcessLane\");\nconst ABProcessTaskManager = require(\"./process/ABProcessTaskManager\");\n\nconst ABViewFormComponent = require(\"../platform/views/ABViewFormComponent\");\n\n// const ABObjectWorkspaceViewGrid = require(\"../platform/workspaceViews/ABObjectWorkspaceViewGrid\");\n// const ABObjectWorkspaceViewKanban = require(\"../platform/workspaceViews/ABObjectWorkspaceViewKanban\");\n// const ABObjectWorkspaceViewGantt = require(\"../platform/workspaceViews/ABObjectWorkspaceViewGantt\");\n\nconst RowFilter = require(\"../platform/RowFilter\");\nconst FilterComplex = require(\"../platform/FilterComplex\");\n\nconst ABMLClass = require(\"../platform/ABMLClass\");\n\nconst EventEmitter = require(\"../platform/ABEmitter\");\n\nclass ABFactory extends EventEmitter {\n   constructor(definitions) {\n      /**\n       * @param {hash} definitions\n       *        { ABDefinition.id : {ABDefinition} }\n       *        of all the definitions defined for the current Tenant\n       */\n\n      super();\n      this.setMaxListeners(0);\n\n      this._definitions = definitions || {};\n      // {hash}  { ABDefinition.id : {ABDefinition} }\n      // ensure ._definitions is a HASH{ ID : {ABDefinition}}\n      if (Array.isArray(definitions)) {\n         var hash = {};\n         definitions.forEach((d) => {\n            hash[d.id] = d;\n         });\n         this._definitions = hash;\n      }\n\n      //\n      //\n      // Manage our working objects\n      //\n\n      this._allApplications = [];\n      // {array} of all the ABApplication(s) in our site.\n\n      this._allObjects = [];\n      // {array} of all the ABObject(s) in our site.\n\n      this._allProcesses = [];\n      // {array} of all the ABProcess(s) in our site.\n\n      this._allQueries = [];\n      // {array} of all the ABObjectQuery(s) in our site.\n\n      this._allDatacollections = [];\n      // {array} of all the ABDataCollection(s) in our site.\n\n      //\n      // Class References\n      //\n      this.Class = {\n         ABApplication,\n         ABComponent,\n         ABDefinition,\n         ABFieldManager,\n         ABIndex,\n         ABMLClass,\n         ABObject,\n         ABObjectExternal,\n         ABObjectImport,\n         ABObjectQuery,\n         ABProcessParticipant,\n         // ABRole      // Do we need this anymore?\n\n         // ABObjectWorkspaceViewGrid,\n         // ABObjectWorkspaceViewKanban,\n         // ABObjectWorkspaceViewGantt,\n\n         ABProcessTaskManager,\n\n         ABViewFormComponent,\n      };\n\n      //\n      // Rules\n      // These are a common set of \"rules\" for all platforms.\n      //\n      this.rules = {\n         /**\n          * @method AB.rules.isUUID\n          * evaluate a given value to see if it matches the format of a uuid\n          * @param {string} key\n          * @return {boolean}\n          */\n         isUUID: function (key) {\n            var checker = RegExp(\n               \"^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\",\n               \"i\"\n            );\n            return checker.test(key);\n         },\n\n         /**\n          * @method AB.rules.nameFilter()\n          * return a properly formatted name for an AppBuilder object.\n          * @param {string} name\n          *        The name of the object we are conditioning.\n          * @return {string}\n          */\n         nameFilter: function (name) {\n            return String(name).replace(/[^a-z0-9_.]/gi, \"\");\n         },\n\n         /**\n          * @method AB.rules.toApplicationNameFormat()\n          * return a properly formatted Application Name\n          * @param {string} name\n          *        The name of the Application we are conditioning.\n          * @return {string}\n          */\n         toApplicationNameFormat: function (name) {\n            return \"AB_\" + this.nameFilter(name);\n         },\n\n         /**\n          * @method AB.rules.toFieldRelationFormat()\n          * This function uses for define relation name of Knex Objection\n          * return a relation name of column\n          * @param {string} colName\n          *        The name of the Column\n          * @return {string}\n          */\n         toFieldRelationFormat: function (colName) {\n            return this.nameFilter(colName) + \"__relation\";\n         },\n\n         /**\n          * @method AB.rules.toJunctionTableFK()\n          * return foriegnkey (FK) column name for a junction table name\n          * @param {string} objectName\n          *        The name of the Object with a connection\n          * @param {string} columnName\n          *        The name of the connection columnName.\n          * @return {string}\n          */\n         toJunctionTableFK: function (objectName, columnName) {\n            var fkName = objectName + \"_\" + columnName;\n\n            if (fkName.length > 64) fkName = fkName.substring(0, 64);\n\n            return fkName;\n         },\n\n         /**\n          * @method AB.rules.toJunctionTableNameFormat()\n          * return many-to-many junction table name\n          * @param {string} appName\n          *        The name of the Application for this object\n          * @param {string} sourceTableName\n          *        The name of the source object we are conditioning.\n          * @param {string} targetTableName\n          *        The name of the target object we are conditioning.\n          * @param {string} colName\n          * @return {string}\n          */\n         toJunctionTableNameFormat: function (\n            appName,\n            sourceTableName,\n            targetTableName,\n            colName\n         ) {\n            // The maximum length of a table name in MySql is 64 characters\n            appName = this.toApplicationNameFormat(appName);\n            if (appName.length > 17) appName = appName.substring(0, 17);\n\n            if (sourceTableName.length > 15)\n               sourceTableName = sourceTableName.substring(0, 15);\n\n            if (targetTableName.length > 15)\n               targetTableName = targetTableName.substring(0, 15);\n\n            colName = this.nameFilter(colName);\n            if (colName.length > 14) colName = colName.substring(0, 14);\n\n            return \"{appName}_{sourceName}_{targetName}_{colName}\"\n               .replace(\"{appName}\", appName)\n               .replace(\"{sourceName}\", sourceTableName)\n               .replace(\"{targetName}\", targetTableName)\n               .replace(\"{colName}\", colName);\n         },\n\n         /**\n          * @method AB.rules.toObjectNameFormat\n          * return a properly formatted Object/Table Name\n          * @param {string} objectName\n          *        The {ABObject}.name of the Object we are conditioning.\n          * @return {string}\n          */\n         toObjectNameFormat: function (objectName) {\n            return `AB_${this.nameFilter(objectName)}`;\n         },\n      };\n\n      // Notify Helpers\n      this.notify.builder = (...params) => {\n         this.notify(\"builder\", ...params);\n      };\n\n      this.notify.developer = (...params) => {\n         this.notify(\"developer\", ...params);\n      };\n   }\n\n   /**\n    * @method definitionClean()\n    * make sure the provided ABDefinition values are properly formatted\n    * @param {ABDefinition} d\n    *        The json settings of an ABDefinition object.\n    */\n   definitionClean(d) {\n      if (typeof d.json == \"string\") {\n         try {\n            d.json = JSON.parse(d.json);\n         } catch (e) {\n            console.log(e);\n            console.error(` Error on definition id[${d.id}]`);\n         }\n      }\n   }\n\n   init() {\n      let allDefinitions = Object.keys(this._definitions).map(\n         (k) => this._definitions[k]\n      );\n      // {array} all our definitions in an Array format.\n\n      // make sure our definitions.json field is an {} and not string\n      allDefinitions.forEach((d) => {\n         this.definitionClean(d);\n      });\n\n      // perform these in order:\n      [\"object\", \"query\", \"datacollection\", \"process\", \"application\"].forEach(\n         (type) => {\n            var objTypes = allDefinitions.filter((d) => d.type == type);\n            objTypes.forEach((def) => {\n               let { keyList, keyFn } = this.objectKeysByDef(def);\n               if (keyList) {\n                  this[keyList].push(this[keyFn](def.json));\n               }\n            });\n         }\n      );\n\n      this.emit(\"init.objects_ready\");\n      return Promise.resolve();\n   }\n\n   /**\n    * @method objectKeysByDef()\n    * Analyze the provided ABDefinition json and return which set of list and\n    * functions are used to create a new instance of this definition.\n    * @param {json} def\n    *        the ABDefinition json of the definition we are evaluating\n    * @return { keyList, keyFn }\n    *        keyList: {string}  which of our internal lists to store this new\n    *                 object.\n    *        keyFn: {string} which of our methods to call with the def.json\n    *               as the param that will create the new object.\n    *\n    *        ex:  this[keyList].push( this[keyFn](def.json));\n    *\n    *        if this def is not one of the types we track,\n    *        keyList = keyFn = null;\n    */\n   objectKeysByDef(def) {\n      switch (def.type) {\n         case \"application\":\n            return { keyList: \"_allApplications\", keyFn: \"applicationNew\" };\n\n         case \"datacollection\":\n            return {\n               keyList: \"_allDatacollections\",\n               keyFn: \"datacollectionNew\",\n            };\n\n         case \"object\":\n            return { keyList: \"_allObjects\", keyFn: \"objectNew\" };\n\n         case \"process\":\n            return { keyList: \"_allProcesses\", keyFn: \"processNew\" };\n\n         case \"query\":\n            return { keyList: \"_allQueries\", keyFn: \"queryNew\" };\n\n         default:\n            // we don't manage any other\n            return { keyList: null, keyFn: null };\n      }\n   }\n\n   //\n   // Definitions\n   //\n\n   /**\n    * definitionByID(id)\n    * return an ABDefinition.json value ready for our objects to use.\n    * @param {string} id\n    *        the uuid of the ABDefinition to delete\n    * @param {bool} isRaw\n    *        indicates if we want the full ABDefinition, or the .json param\n    *        true : returns full ABDefinition value.\n    *        false: returns the .json parameter used by most ABObjects.\n    * @return {Promise}\n    */\n   definitionByID(id, isRaw = false) {\n      if (this._definitions[id]) {\n         if (isRaw) {\n            return this._definitions[id];\n         } else {\n            return this._definitions[id].json;\n         }\n      }\n      return null;\n   }\n\n   /**\n    * definitionNew(values)\n    * return an ABDefinition object tied to this Tenant.\n    * @param {obj} values\n    *        The value hash of the ABDefinition object to create.\n    * @return {ABDefinition}\n    */\n   definitionNew(values) {\n      return new ABDefinition(values, this);\n   }\n\n   /**\n    * definitionsParse()\n    * include the incoming definitions into our ABFactory. These new\n    * definitions will replace any existing ones with the same .id.\n    * @param {array[ABDefinitioin]} defs\n    *     the incoming array of ABDefinitions to parse.\n    * @return {Promise}\n    */\n   definitionsParse(defs = []) {\n      if (!Array.isArray(defs)) {\n         defs = [defs];\n      }\n\n      // store/replace the incoming definitions\n      // 1st: insert ALL our definitions internally\n      defs.forEach((d) => {\n         this.definitionClean(d);\n         this._definitions[d.id] = d;\n      });\n      // 2nd: Now we can then go through and signal the \"updates\"\n      // and the related objects can find their dependent definitions.\n      defs.forEach((d) => {\n         this.definitionSync(\"updated\", d.id, d);\n      });\n\n      return Promise.resolve();\n   }\n\n   /**\n    * definitionSync()\n    * Synchronize an individual definition into our repository of definitions.\n    * @param {string} op\n    *        the type of synchronization this is\n    *        [ \"created\", \"updated\", \"destroyed\"]\n    * @param {uuid} id\n    *        the definition.id of the definition we are synchronizing\n    * @param {json} def\n    *        the ABDefinition attributes we are storing.\n    */\n   definitionSync(op, id, def) {\n      var { keyList, keyFn } = this.objectKeysByDef(def);\n      if (keyList) {\n         var curr;\n         switch (op) {\n            case \"created\":\n               this[keyList].push(this[keyFn](def.json));\n               this.emit(\"definition.created\", def.json);\n               break;\n\n            case \"updated\":\n               // get the current object\n               curr = this[keyList].find((d) => d.id == id);\n\n               // remove from list\n               this[keyList] = this[keyList].filter((d) => d.id != id);\n               // add new one:\n               this[keyList].push(this[keyFn](def.json));\n\n               // signal this object needs to be updated:\n               // NOTE: if this is one of the objects we are tracking,\n               // we don't need to this.emit() the message.\n               if (curr) {\n                  curr.emit(\"definition.updated\", def.json);\n               } else {\n                  this.emit(\"definition.updated\", def.json);\n               }\n               break;\n\n            case \"destroyed\":\n               // get the current object\n               curr = this[keyList].find((d) => d.id == id);\n               if (curr) {\n                  // remove from list\n                  this[keyList] = this[keyList].filter((d) => d.id != id);\n\n                  // signal this object needs to be updated:\n                  curr.emit(\"definition.deleted\", def.json);\n\n                  this.emit(\"definition.deleted\", def.json);\n               }\n               break;\n         }\n      }\n   }\n\n   //\n   // ABObjects\n   //\n   /**\n    * @method applications()\n    * return all the ABApplications that match the provided filter.\n    * @param {fn} fn\n    *        A filter function to select specific ABApplications.\n    *        Must return true to include the entry.\n    * @return {array}\n    */\n   applications(fn = () => true) {\n      return (this._allApplications || []).filter(fn);\n   }\n\n   /**\n    * @method applicationByID()\n    * returns a single ABApplication that matches the given ID.\n    * @param {string} ID\n    *        the .id/.name/.label of the ABApplication we are searching\n    *        for.\n    * @return {ABApplication}\n    *        the matching ABApplication object if found\n    *        {null} if not found.\n    */\n   applicationByID(ID) {\n      return this.applications((a) => a.id == ID)[0];\n   }\n\n   /**\n    * @method applicationNew()\n    * Return a new instance of an ABApplication object.\n    * @param {json} values\n    *        the ABDefinition.json of the ABApplication object we are\n    *        creating.\n    * @return {ABApplication}\n    */\n   applicationNew(values) {\n      return new ABApplication(values, this);\n   }\n\n   /**\n    * @method datacollections()\n    * return an array of all the ABDataCollection for this ABApplication.\n    * @param {fn} filter\n    *        a filter fn to return a set of ABDataCollection that\n    *        this fn returns true for.\n    * @return {array}\n    *        array of ABDataCollection\n    */\n   datacollections(filter = () => true) {\n      return (this._allDatacollections || []).filter(filter);\n   }\n\n   /**\n    * @method datacollectionByID()\n    * returns a single ABDatacollection that matches the given ID.\n    * @param {string} ID\n    *        the .id/.name/.label of the ABDatacollection we are searching\n    *        for.\n    * @return {ABDatacollection}\n    *        the matching ABDatacollection object if found\n    *        {null} if not found.\n    */\n   datacollectionByID(ID) {\n      // an undefined or null ID should not match any DC.\n      if (!ID) return null;\n\n      return this.datacollections((dc) => {\n         return dc.id == ID || dc.name == ID || dc.label == ID;\n      })[0];\n   }\n\n   /**\n    * @method datacollectionNew()\n    * create a new instance of ABDataCollection\n    * @param {obj} values\n    *        the initial values for the DC\n    * @return {ABDatacollection}\n    */\n   datacollectionNew(values) {\n      var dc = new ABDataCollection(values, this);\n      dc.on(\"destroyed\", () => {\n         // make sure it is no longer in our internal list\n         this._allDatacollections = this._allDatacollections.filter(\n            (d) => d.id != dc.id\n         );\n      });\n      return dc;\n   }\n\n   /**\n    * @method fieldNew()\n    * return an instance of a new (unsaved) ABField that is tied to a given\n    * ABObject.\n    * NOTE: this new field is not included in our this.fields until a .save()\n    * is performed on the field.\n    * @param {obj} values  the initial values for this field.\n    *                - { key:'{string}'} is required\n    * @param {ABObject} object  the parent object this field belongs to.\n    * @return {ABField}\n    */\n   fieldNew(values, object) {\n      // NOTE: ABFieldManager returns the proper ABFieldXXXX instance.\n      return ABFieldManager.newField(values, object);\n   }\n\n   /**\n    * @method indexNew()\n    * return an instance of a new (unsaved) ABIndex.\n    * @return {ABIndex}\n    */\n   indexNew(values, object) {\n      return new ABIndex(values, object);\n   }\n\n   /**\n    * @method Label()\n    * a simple label factory.\n    * It is expected to be called like this:\n    * @codestart\n    *    var L = AB.Label();\n    *    var outputText = L(\"Hello World\");\n    *    var o2 = L(\"I'm {0} years old\", [5]);\n    * @codeend\n    * @return {fn}\n    */\n   Label() {\n      return (key, altText, values = []) => {\n         var label = key;\n         if (altText) {\n            if (Array.isArray(altText)) {\n               values = altText;\n            } else {\n               label = altText;\n            }\n         }\n\n         values.forEach((v, i) => {\n            var sub = `{${i}}`;\n            label = label.replaceAll(sub, v);\n         });\n\n         return label;\n      };\n   }\n\n   /**\n    * @method objects()\n    * return an array of all the ABObjects for this ABApplication.\n    * @param {fn} filter\n    *        a filter fn to return a set of ABObjects that this fn\n    *        returns true for.\n    * @return {array}\n    *        array of ABObject\n    */\n   objects(filter = () => true) {\n      return (this._allObjects || []).filter(filter);\n   }\n\n   /**\n    * @method objectByID()\n    * return the specific object requested by the provided id.\n    * @param {string} ID\n    * @return {obj}\n    */\n   objectByID(ID) {\n      return this.objects((o) => {\n         return o.id == ID || o.name == ID || o.label == ID;\n      })[0];\n   }\n\n   /**\n    * @method objectNew()\n    * return an instance of a new (unsaved) ABObject that is tied to this\n    * ABApplication.\n    * NOTE: this new object is not included in our this.objects until a .save()\n    * is performed on the object.\n    * @return {ABObject}\n    */\n   objectNew(values) {\n      var newObj = null;\n\n      if (values.isExternal == true)\n         newObj = new ABObjectExternal(values, this);\n      else if (values.isImported == true)\n         newObj = new ABObjectImport(values, this);\n      else newObj = new ABObject(values, this);\n\n      /*\n      // IS THIS CORRECT?\n      newObj.on(\"destroyed\", () => {\n         // make sure it is no longer in our internal list\n         this._allObjects = this._allObjects.filter((o) => o.id != newObj.id);\n      });\n      */\n\n      return newObj;\n   }\n\n   objectFile() {\n      return this.objectByID(\"4a9d89c9-f4eb-41af-91e4-909eff389f3e\");\n   }\n\n   objectLanguage() {\n      return this.objectByID(\"d84cd351-d96c-490f-9afb-2a0b880ca0ec\");\n   }\n\n   objectProcessForm() {\n      return this.objectByID(\"d36ae4c8-edef-48d8-bd9c-79a0edcaa067\");\n   }\n\n   objectProcessInstance() {\n      return this.objectByID(\"2ba85be0-78db-4eda-ba43-c2c4e3831849\");\n   }\n\n   objectRole() {\n      return this.objectByID(\"c33692f3-26b7-4af3-a02e-139fb519296d\");\n   }\n\n   objectScope() {\n      return this.objectByID(\"af10e37c-9b3a-4dc6-a52a-85d52320b659\");\n   }\n\n   objectToken() {\n      return this.objectByID(\"08826ac7-4b33-4745-a3d7-f7831ca4ff59\");\n   }\n\n   objectUser() {\n      return this.objectByID(\"228e3d91-5e42-49ec-b37c-59323ae433a1\");\n   }\n\n   //\n   // Processes\n   //\n   /**\n    * @method processes()\n    * return all the ABProcess that match the provided filter.\n    * @param {fn} fn\n    *        A filter function to select specific ABProcess.\n    *        Must return true to include the entry.\n    * @return {array}\n    */\n   processes(filter = () => true) {\n      return (this._allProcesses || []).filter(filter);\n   }\n\n   /**\n    * @method processByID()\n    * return the specific process requested by the provided id.\n    * @param {string} ID\n    * @return {obj}\n    */\n   processByID(ID) {\n      return this.processes((p) => {\n         return p.id == ID || p.name == ID || p.label == ID;\n      })[0];\n   }\n\n   /**\n    * @method processNew()\n    * Return a new instance of an ABProcess object.\n    * @param {json} values\n    *        the ABDefinition.json of the ABProcess object we are\n    *        creating.\n    * @return {ABProcess}\n    */\n   processNew(values) {\n      return new ABProcess(values, this);\n   }\n\n   /**\n    * @method processElementNew(id)\n    * return an instance of a new ABProcessOBJ that is tied to a given\n    * ABProcess.\n    * @param {string} id\n    *        the ABDefinition.id of the element we are creating\n    * @param {ABProcess} process\n    *        the process this task is a part of.\n    * @return {ABProcessTask}\n    */\n   processElementNew(id, process) {\n      var taskDef = this.definitionByID(id);\n      if (taskDef) {\n         switch (taskDef.type) {\n            case ABProcessParticipant.defaults().type:\n               return new ABProcessParticipant(taskDef, process, this);\n            // break;\n\n            case ABProcessLane.defaults().type:\n               return new ABProcessLane(taskDef, process, this);\n            // break;\n\n            default:\n               // default to a Task\n               return ABProcessTaskManager.newTask(taskDef, process, this);\n            // break;\n         }\n      }\n      return null;\n   }\n\n   /**\n    * @method processElementNewForModelDefinition(def)\n    *\n    * return an instance of a new ABProcess[OBJ] that is tied to the given\n    * BPMI:Element definition.\n    *\n    * @param {BPMI:Element} element the element definition from our BPMI\n    *              modler.\n    * @return {ABProcess[OBJ]}\n    */\n   processElementNewForModelDefinition(element, process) {\n      var newElement = null;\n\n      switch (element.type) {\n         case \"bpmn:Participant\":\n            newElement = new ABProcessParticipant({}, process, this);\n            break;\n\n         case \"bpmn:Lane\":\n            newElement = new ABProcessLane({}, process, this);\n            break;\n\n         default:\n            var defaultDef = ABProcessTaskManager.definitionForElement(element);\n            if (defaultDef) {\n               newElement = ABProcessTaskManager.newTask(\n                  defaultDef,\n                  process,\n                  this\n               );\n            }\n            break;\n      }\n\n      // now make sure this new Obj pulls any relevant info from the\n      // diagram element\n      if (newElement) {\n         newElement.fromElement(element);\n      }\n      return newElement;\n   }\n\n   /**\n    * @method queries()\n    * return an array of all the ABObjectQuery(s).\n    * @param {fn} filter\n    *        a filter fn to return a set of ABObjectQuery(s) that this fn\n    *        returns true for.\n    * @return {array}\n    *        array of ABObjectQuery\n    */\n   queries(filter = () => true) {\n      return (this._allQueries || []).filter(filter);\n   }\n   // queriesAll() {\n   //    console.error(\n   //       \"ABFactory.queriesAll() Depreciated! Use .queries() instead. \"\n   //    );\n   //    return this.queries();\n   // }\n\n   /**\n    * @method queryByID()\n    * return the specific query requested by the provided id.\n    * NOTE: this method has been extended to allow .name and .label\n    * as possible lookup values.\n    * @param {string} ID\n    * @return {ABObjectQuery}\n    */\n   queryByID(ID) {\n      return this.queries((q) => {\n         return q.id == ID || q.name == ID || q.label == ID;\n      })[0];\n   }\n\n   /**\n    * @method queryNew()\n    * return an instance of a new (unsaved) ABObjectQuery that is tied to this\n    * ABFactory.\n    * @return {ABObjectQuery}\n    */\n   queryNew(values) {\n      return new ABObjectQuery(values, this);\n   }\n\n   /**\n    * @method rowfilterNew()\n    * return an instance of a new RowFilter that is tied to this\n    * ABFactory.\n    * @return {RowFilter}\n    */\n   rowfilterNew(App, idBase) {\n      if (App) {\n         console.error(\"!! Who is calling this with an App?\");\n      }\n      return new RowFilter(App || this._App, idBase, this);\n   }\n\n   /**\n    * @method filterComplexNew()\n    * return an instance of a new FilterComplex that is tied to this\n    * ABFactory.\n    * @return {FilterComplex}\n    */\n   filterComplexNew(idBase, options = {}) {\n      return new FilterComplex(idBase, this, options);\n   }\n\n   /**\n    * @method viewNewDetatched()\n    * Return an instance of a View that is NOT attached to an ABApplication.\n    * @return {ABViewXXX}\n    */\n   viewNewDetatched(values) {\n      if (!this._mockApp) {\n         this._mockApp = this.applicationNew({});\n      }\n      return this._mockApp.viewNew(values, this._mockApp);\n   }\n\n   //\n   // Utilities\n   //\n\n   /**\n    * notify()\n    * will send alerts to a group of people. These alerts are usually about\n    * configuration errors, or software problems.\n    * @param {string} domain\n    *     which group of people we are sending a notification to.\n    * @param {Error} error\n    *     An error object generated at the point of issue.\n    * @param {json} info\n    *     Additional related information concerning the issue.\n    */\n   notify(/* ...params */) {\n      console.error(\n         \"ABFactory.notify() is expected to be overwritten by the platform!\"\n      );\n   }\n\n   /**\n    * notifyInfo()\n    * a common routine to parse the info parameter provided to .notify() into\n    * a more detailed set of data.\n    * @param {json} info\n    * @return {json}\n    */\n   _notifyInfo(info) {\n      var moreInfo = {};\n\n      if (info) {\n         Object.keys(info).forEach((k) => {\n            switch (k) {\n               case \"field\":\n                  moreInfo.objectID = info[k].object.id;\n                  moreInfo.objectName = info[k].object.name;\n                  moreInfo.fieldID = info[k].id;\n                  moreInfo.fieldName = info[k].label || info[k].name;\n                  break;\n\n               case \"object\":\n                  moreInfo.objectID = info[k].id;\n                  moreInfo.objectName = info[k].name;\n                  break;\n\n               case \"datacollection\":\n                  moreInfo.datacollectionID = info[k].id;\n                  moreInfo.datacollectionName = info[k].label || info[k].name;\n                  var ds = info[k].datasource;\n                  if (ds) {\n                     moreInfo.datacollectionDSID = ds.id;\n                     moreInfo.datacollectionDSName = ds.name;\n                  }\n                  break;\n\n               case \"process\":\n                  moreInfo.processID = info[k].id;\n                  moreInfo.processName = info[k].label || info[k].name;\n                  break;\n\n               case \"req\":\n                  moreInfo.req = {\n                     jobID: info[k].jobID,\n                     tenantID: info[k]._tenantID,\n                     user: info[k]._user,\n                  };\n                  break;\n\n               case \"task\":\n                  if (info[k].process) {\n                     moreInfo.processID = info[k].process.id;\n                     moreInfo.processName =\n                        info[k].process.label || info[k].process.name;\n                  }\n                  moreInfo.taskID = info[k].id;\n                  moreInfo.taskName = info[k].label || info[k].name;\n                  break;\n\n               case \"view\":\n                  if (info[k].application) {\n                     moreInfo.applicationID = info[k].application.id;\n                     moreInfo.applicationName =\n                        info[k].application.label || info[k].application.name;\n                  }\n                  moreInfo.viewID = info[k].id;\n                  moreInfo.viewName = info[k].label || info[k].name;\n                  moreInfo.viewKey = info[k].key;\n                  break;\n               default:\n                  moreInfo[k] = info[k];\n                  break;\n            }\n         });\n      }\n\n      return moreInfo;\n   }\n}\n\nmodule.exports = ABFactory;\n","/*\n * ABFieldManager\n *\n * An interface for managing the different ABFields available in our AppBuilder.\n *\n */\n\n/*\n * Fields\n * A name => ABField  hash of the different ABFields available.\n */\nvar Fields = {};\n\nvar AllFieldClasses = [\n   require(\"../platform/dataFields/ABFieldString\"),\n   require(\"../platform/dataFields/ABFieldLongText\"),\n   require(\"../platform/dataFields/ABFieldNumber\"),\n   require(\"../platform/dataFields/ABFieldDate\"),\n   require(\"../platform/dataFields/ABFieldDateTime\"),\n   require(\"../platform/dataFields/ABFieldBoolean\"),\n   require(\"../platform/dataFields/ABFieldList\"),\n   require(\"../platform/dataFields/ABFieldTree\"),\n   require(\"../platform/dataFields/ABFieldEmail\"),\n   require(\"../platform/dataFields/ABFieldFile\"),\n   require(\"../platform/dataFields/ABFieldImage\"),\n   require(\"../platform/dataFields/ABFieldUser\"),\n   require(\"../platform/dataFields/ABFieldConnect\"),\n   require(\"../platform/dataFields/ABFieldCalculate\"),\n   require(\"../platform/dataFields/ABFieldTextFormula\"),\n   require(\"../platform/dataFields/ABFieldFormula\"),\n   require(\"../platform/dataFields/ABFieldAutoIndex\"),\n   require(\"../platform/dataFields/ABFieldJson\"),\n   require(\"../platform/dataFields/ABFieldCombine\"),\n   require(\"../platform/dataFields/ABFieldSelectivity\"),\n];\n\nAllFieldClasses.forEach((FIELD) => {\n   Fields[FIELD.defaults().key] = FIELD;\n});\n\nmodule.exports = class ABFieldManager {\n   /*\n    * @function allFields\n    * return all the currently defined ABFields in an array.\n    * @return [{ABField},...]\n    */\n   static allFields() {\n      var fields = [];\n      for (var f in Fields) {\n         fields.push(Fields[f]);\n      }\n      return fields;\n   }\n\n   /**\n    * @function fieldByKey()\n    * Return a specific ABField that matches the given key\n    * @param {string} key\n    *        The ABField.key value we are looking for.\n    * @return {ABFieldXXX || undefined}\n    */\n   static fieldByKey(key) {\n      return Fields[key];\n   }\n\n   /*\n    * @function newField\n    * return an instance of an ABField based upon the values.key value.\n    * @return {ABField}\n    */\n   static newField(values, object) {\n      if (values.key) {\n         try {\n            return new Fields[values.key](values, object);\n         } catch (err) {\n            console.log(\"Error\", err);\n            console.log(\"Available fields\", Fields);\n            console.log(\"Requested field\", values.key);\n         }\n      } else {\n         console.log(\"-------\");\n         console.log(\"values:\");\n         console.error(values);\n         console.log();\n         console.error(\"object:\");\n         console.error(object);\n         console.log(\"-------\");\n         throw new Error(\n            `ABFieldManager.newField(): Unknown Field Key [${values.name}][${values.key}] for object[${object.name}]`\n         );\n         //// TODO: what to do here?\n      }\n   }\n};\n","const ABMLClass = require(\"../platform/ABMLClass\");\n\nmodule.exports = class ABIndexCore extends ABMLClass {\n   constructor(attributes, object) {\n      super([\"label\"], object.AB);\n      this.object = object;\n\n      this.fromValues(attributes);\n   }\n\n   fromValues(attributes) {\n      /*\n      {\n        id: uuid(),\n        name: 'name',\n        fields:[\n            {ABDataField.id}\n        ],\n        unique: {boolean}\n      }\n      */\n      this.id = attributes.id;\n      this.type = \"index\";\n      this.name = attributes.name;\n      this.unique = JSON.parse(attributes.unique || false);\n\n      // Convert to an array\n      if (attributes.fieldIDs && !Array.isArray(attributes.fieldIDs)) {\n         attributes.fieldIDs = [attributes.fieldIDs];\n      }\n\n      this.fields = (attributes.fieldIDs || [])\n         .map((f) => {\n            let field = this.object.fieldByID(f);\n            if (!field) {\n               this.emit(\n                  \"warning\",\n                  `Index[${this.name}][${this.id}] is referencing an unknown field[${f}]`,\n                  {\n                     index: this.id,\n                     field: f,\n                  }\n               );\n            }\n            return field;\n         })\n         .filter((fId) => fId);\n\n      if (this.fields.length == 0) {\n         this.emit(\n            \"warning\",\n            `Index[${this.name}][${this.id}] is not referencing any fields`,\n            {\n               index: this.id,\n               attributeFieldIDs: attributes.fieldIDs || [],\n            }\n         );\n      }\n\n      // let the MLClass process the Translations\n      super.fromValues(attributes);\n   }\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABApplication instance\n    * into the values needed for saving to the DB.\n    *\n    * Most of the instance data is stored in .json field, so be sure to\n    * update that from all the current values of our child fields.\n    *\n    * @return {json}\n    */\n   toObj() {\n      let result = super.toObj();\n\n      result.id = this.id;\n      result.type = \"index\";\n      result.name = this.name;\n      result.unique = this.unique;\n\n      // Convert to an array\n      if (this.fields && !Array.isArray(this.fields)) {\n         this.fields = [this.fields];\n      }\n\n      result.fieldIDs = (this.fields || [])\n         .map((f) => {\n            // Convert to the id of field\n            return f.id || f;\n         })\n         .filter((fId) => fId);\n\n      return result;\n   }\n\n   get indexName() {\n      let tableName = this.object.dbTableName();\n\n      // Maximum 64 characters long\n      return `${tableName}_${this.name}`.replace(/ /g, \"\").substring(0, 64);\n   }\n\n   get uniqueName() {\n      let indexName = this.indexName.substring(0, 57);\n\n      return `${indexName}_unique`;\n   }\n};\n","/**\n * ABMLClassCore\n * manage the multilingual information of an instance of a AB Defined Class.\n *\n * these classes have certain fields (\"label\", \"description\"), that can be\n * represented in different language options as defined by our platform.\n *\n * This core ABMLClass will internally track the multilingual fields\n * (this.mlFields) and auto\n */\nvar ABEmitter = require(\"../platform/ABEmitter\");\nmodule.exports = class ABMLClassCore extends ABEmitter {\n   constructor(fieldList, AB) {\n      super();\n      this.mlFields = fieldList || [\"label\"];\n      // {array}\n      // field names of values that are multilingual\n\n      this.AB = AB;\n      // {ABFactory}\n      // our common source of references for other AB objects\n   }\n\n   ///\n   /// Static Methods\n   ///\n   /// Available to the Class level object.  These methods are not dependent\n   /// on the instance values of the Application.\n   ///\n\n   /**\n    * @method fromValues\n    * called during the .fromValues() work chain.  Should be called\n    * AFTER all the current data is already populated.\n    */\n   fromValues(attributes) {\n      this.translations = attributes.translations;\n\n      // if translations were provided\n      if (this.translations) {\n         // multilingual fields: label, description\n         this.translate();\n      } else {\n         // maybe this came from a form that has ML values in the attributes, but\n         // no .translations[] yet:\n         // check for mlFields in attributes and record them here:\n         (this.mlFields || []).forEach((field) => {\n            if (attributes[field]) {\n               this[field] = attributes[field];\n            }\n         });\n      }\n   }\n\n   /**\n    * @function defaultTranslations()\n    * return an initial .translations entry to initialize the\n    * translations values of a given translateable object.\n    * @param {array} fields  the multilingual fields this obj manages.\n    * @param {json}  values  a default set of values for this object.\n    * @return {array}  of translation entries.\n    */\n   defaultTranslations(fields, values) {\n      values = values || {};\n\n      var entry = {\n         // Question: should this be this.AB.Multilingual.currentLanguage() || \"en\"\n         // currently since the defaults are sent in programattically, we are\n         // expecting the labels to be in \"en\"\n         language_code: \"en\",\n      };\n\n      fields.forEach((f) => {\n         entry[f] = values[f] || f;\n      });\n\n      return [entry];\n   }\n\n   /**\n    * @method languageDefault\n    * return a default language code.\n    * @return {string}\n    */\n   languageDefault() {\n      return \"en\";\n   }\n\n   /**\n    * @method toObj()\n    * called during the .toObj() work chain.  Should be called\n    * BEFORE the current data is populated.\n    */\n   toObj() {\n      this.unTranslate();\n\n      return {\n         translations: this.translations,\n      };\n   }\n\n   /**\n    * @method toDefinition()\n    * convert this instance into an ABDefinition object.\n    * @return {ABDefinition}\n    */\n   toDefinition() {\n      return this.AB.definitionNew({\n         id: this.id,\n         name: this.name,\n         type: this.type,\n         json: this.toObj(),\n      });\n   }\n\n   /**\n    * @method translate\n    * Given a set of json data, pull out any multilingual translations\n    * and flatten those values to the base object.\n    * @param {obj} obj  The instance of the object being translated\n    * @param {json} json The json data being used for translation.\n    *                      There should be json.translations = [ {transEntry}, ...]\n    *                      where transEntry = {\n    *                          language_code:'en',\n    *                          field1:'value',\n    *                          ...\n    *                      }\n    * @param {array} fields an Array of multilingual fields to pull to\n    *                       the obj[field] value.\n    */\n   translate(obj, json, fields, languageCode = null) {\n      if (!obj) obj = this;\n      if (!json) json = this;\n      if (!fields) fields = this.mlFields || [];\n\n      if (!json.translations) {\n         json.translations = [];\n      }\n\n      if (typeof json.translations == \"string\") {\n         json.translations = JSON.parse(json.translations);\n      }\n\n      var currLanguage = languageCode || this.languageDefault();\n\n      if (fields && fields.length > 0) {\n         // [fix] if no matching translation is in our json.translations\n         //       object, then just use the 1st one.\n         var first = null; // the first translation entry encountered\n         var found = false; // did we find a matching translation?\n\n         json.translations.forEach(function (t) {\n            if (!first) first = t;\n\n            // find the translation for the current language code\n            if (t.language_code == currLanguage) {\n               found = true;\n\n               // copy each field to the root object\n               fields.forEach(function (f) {\n                  if (t[f] != null) obj[f] = t[f];\n\n                  obj[f] = t[f] || \"\"; // default to '' if not found.\n               });\n            }\n         });\n\n         // if !found, then use the 1st entry we did find.  prepend desired\n         // [language_code] to each of the fields.\n         if (!found && first) {\n            // copy each field to the root object\n            fields.forEach(function (f) {\n               if (first[f] != null && first[f] != \"\")\n                  obj[f] = `[${currLanguage}]${first[f]}`;\n               else obj[f] = \"\"; // default to '' if not found.\n            });\n         }\n      }\n   }\n\n   /**\n    * @method unTranslate\n    * Take the multilingual information in the base obj, and push that\n    * down into the json.translations data.\n    * @param {obj} obj  The instance of the object with the translation\n    * @param {json} json The json data being used for translation.\n    *                      There should be json.translations = [ {transEntry}, ...]\n    *                      where transEntry = {\n    *                          language_code:'en',\n    *                          field1:'value',\n    *                          ...\n    *                      }\n    * @param {array} fields an Array of multilingual fields to pull from\n    *                       the obj[field] value.\n    */\n   unTranslate(obj, json, fields) {\n      if (!obj) obj = this;\n      if (!json) json = this;\n      if (!fields) fields = this.mlFields || [];\n\n      if (!json.translations) {\n         json.translations = [];\n      }\n\n      var currLanguage = this.languageDefault();\n\n      if (fields && fields.length > 0) {\n         var foundOne = false;\n\n         json.translations.forEach(function (t) {\n            // find the translation for the current language code\n            if (t.language_code == currLanguage) {\n               // copy each field to the root object\n               fields.forEach(function (f) {\n                  // verify obj[f] is defined\n                  // --> DONT erase the existing translation\n                  if (obj[f] != null) {\n                     t[f] = obj[f];\n                  }\n               });\n\n               foundOne = true;\n            }\n         });\n\n         // if we didn't update an existing translation\n         if (!foundOne) {\n            // create a translation entry:\n            var trans = {};\n\n            // assume current languageCode:\n            trans.language_code = currLanguage;\n\n            fields.forEach(function (field) {\n               if (obj[field] != null) {\n                  trans[field] = obj[field];\n               }\n            });\n\n            json.translations.push(trans);\n         }\n      }\n   }\n};\n","//\n// ABModelCore\n//\n// Represents the Data interface for an ABObject data.\n//\n// to use an ABModel to load a DataTable:\n// Method 1:\n//  gather all the data externally and send to the DataTable\n//    Model.findAll()\n//    .then((data)=>{\n//      DataTable.parse(data);\n//    })\n//\n\nmodule.exports = class ABModelCore {\n   constructor(object) {\n      // link me to my ABObject\n      this.object = object;\n      this.AB = object.AB;\n\n      this._where = null;\n      this._sort = null;\n      this._skip = null;\n      this._limit = null;\n\n      this.staleRefreshInProcess = false;\n      this.staleRefreshMap = {\n         /* id : Promise */\n      };\n      this.staleRefreshPending = [];\n      this.staleRefreshTimerID = null;\n\n      // include this\n      this.responseContext = { key: \"--\", context: {} };\n   }\n\n   ///\n   /// Static Methods\n   ///\n   /// Available to the Class level object.  These methods are not dependent\n   /// on the instance values of the Application.\n   ///\n\n   ///\n   /// Instance Methods\n   ///\n\n   contextKey(key) {\n      this.responseContext.key = key || \"--\";\n   }\n\n   contextValues(values) {\n      this.responseContext.context = values || {};\n   }\n\n   // Prepare multilingual fields to be untranslated\n   // Before untranslating we need to ensure that values.translations is set.\n   prepareMultilingualData(values) {\n      // if this object has some multilingual fields, translate the data:\n      var mlFields = this.object.multilingualFields();\n      // if mlFields are inside of the values saved we want to translate otherwise do not because it will reset the translation field and you may loose unchanged translations\n      var shouldTranslate = false;\n      if (mlFields.length) {\n         mlFields.forEach(function (field) {\n            if (values[field] != null) {\n               shouldTranslate = true;\n            }\n         });\n      }\n      if (shouldTranslate) {\n         if (\n            values.translations == null ||\n            typeof values.translations == \"undefined\" ||\n            values.translations == \"\"\n         ) {\n            values.translations = [];\n         }\n         this.object.unTranslate(values, values, mlFields);\n      }\n   }\n\n   request(method, params) {\n      console.error(\n         \"!!! ABModelCore.request() should be overridden by platform.\"\n      );\n      return Promise.resolve();\n   }\n\n   // /**\n   //  * @method create\n   //  * update model values on the server.\n   //  */\n   // create(values) {\n\n   //   this.prepareMultilingualData(values);\n\n   //   var params = {\n   //     url: this.object.urlRest(),\n   //     params: values\n   //   }\n   //   return this.request('post', params)\n   //     .then((data) => {\n\n   //       this.normalizeData(data);\n\n   //       return data;\n\n   //       // FIX: now with sockets, the triggers are fired from socket updates.\n   //       // trigger a create event\n   //       // triggerEvent('create', this.object, data);\n\n   //     })\n   //     .catch(reject);\n\n   // }\n\n   /**\n    * @method delete\n    * remove this model instance from the server\n    * @param {integer} id  the .id of the instance to remove.\n    * @return {Promise}\n    */\n   // delete(id) {\n\n   //   var params = {\n   //     url: this.object.urlRestItem(id)\n   //   }\n   //   return this.request('delete', params)\n   //     .then((data) => {\n\n   //       return data;\n\n   //       // FIX: now with sockets, the triggers are fired from socket updates.\n   //       // trigger a delete event\n   //       // triggerEvent('delete', this.object, id);\n\n   //     })\n   // }\n\n   /**\n    * @method findAll\n    * performs a data find with the provided condition.\n    */\n   //   findAll(cond) {\n\n   //     cond = cond || {};\n\n   //     var params = {\n   //       url: this.object.urlRest(),\n   //       params: cond\n   //     }\n   //     return this.request('get', params)\n   //       .then((data) => {\n\n   //         this.normalizeData(data.data);\n\n   //         resolve(data);\n   //       })\n   //       .catch((err) => {\n   // /// TODO: this should be done in platform/ABModel:\n   //         // if (err && err.code) {\n   //         //  switch(err.code) {\n   //         //    case \"ER_PARSE_ERROR\":\n   //         //      OP.Error.log('AppBuilder:ABModel:findAll(): Parse Error with provided condition', { error: err, condition:cond })\n   //         //      break;\n\n   //         //    default:\n   //         //      OP.Error.log('AppBuilder:ABModel:findAll(): Unknown Error with provided condition', { error: err, condition:cond })\n   //         //      break;\n   //         //  }\n\n   //         // }\n   // console.error(err);\n   //       })\n\n   //   }\n\n   urlParamsCreate(values) {\n      return {\n         url: this.object.urlRest(),\n         params: values,\n      };\n   }\n\n   urlParamsDelete(id) {\n      return {\n         url: this.object.urlRestItem(id),\n      };\n   }\n\n   urlParamsFind(cond) {\n      return {\n         url: this.object.urlRest(),\n         params: cond || {},\n      };\n   }\n\n   urlParamsUpdate(id, values) {\n      return {\n         url: this.object.urlRestItem(id),\n         params: values,\n      };\n   }\n\n   /**\n    * @method count\n    * count a data find with the provided condition.\n    */\n   count(cond) {\n      cond = cond || {};\n\n      var params = {\n         url: this.object.urlRestCount(),\n         params: cond,\n      };\n      return this.request(\"get\", params)\n         .then((numberOfRows) => {\n            resolve(numberOfRows);\n         })\n         .catch((err) => {\n            // TODO: this should be done in platform/ABModel\n\n            // OP.Error.log('AppBuilder:ABModel:count(): Parse Error with provided condition', { error: err, condition:cond })\n\n            // reject(err);\n            console.error(err);\n         });\n   }\n\n   /**\n    * @method staleRefresh\n    * Process a request to refresh the data for a given entry.\n    * This method is called from a ABDataview when it receives\n    * a 'ab.datacollection.stale' message.\n    * This method will try to queue similar reqeusts and then issue 1 large\n    * request, rather than numerous individual ones.\n    * @param {obj} cond  the condition of the entry we are requesting.\n    * @return {Promise}\n    */\n   staleRefresh(cond) {\n      // cond should be { where:{ id: X } } format.\n      var PK = this.object.PK();\n\n      var currID = cond[PK]; // just in case we get a { id: X }\n      if (cond.where) {\n         currID = cond.where[PK];\n      }\n\n      return new Promise((resolve, reject) => {\n         if (!currID) {\n            var Err = new Error(\n               \"Model.staleRefresh(): could not resolve .\" + PK\n            );\n            Err.cond = cond;\n            reject(Err);\n            return;\n         }\n\n         // convert to PK : Promise object:\n         var entry = {\n            resolve: resolve,\n            reject: reject,\n         };\n         entry[PK] = currID;\n\n         // queue up refresh condition\n         this.staleRefreshPending.push(entry);\n\n         // if ! staleRefreshInProcess\n         if (!this.staleRefreshInProcess) {\n            // set timeout to another 200ms wait after LAST staleRefresh()\n            if (this.staleRefreshTimerID) {\n               clearTimeout(this.staleRefreshTimerID);\n            }\n            this.staleRefreshTimerID = setTimeout(() => {\n               this.staleRefreshProcess();\n            }, 200);\n         }\n      });\n   }\n\n   /**\n    * @method staleRefreshProcess\n    * Actually process the current pending requests.\n    */\n   staleRefreshProcess() {\n      this.staleRefreshInProcess = true;\n      var currentEntries = this.staleRefreshPending;\n      this.staleRefreshPending = [];\n      var PK = this.object.PK();\n\n      var responseHash = {\n         /* id : [{entry}] */\n      };\n      var cond = { where: {} };\n      cond.where[PK] = [];\n\n      console.log(\n         \"Model.staleRefreshProcess(): buffered \" +\n            currentEntries.length +\n            \" requests\"\n      );\n      currentEntries.forEach((e) => {\n         responseHash[e[PK]] = responseHash[e[PK]] || [];\n         responseHash[e[PK]].push(e);\n      });\n\n      cond.where[PK] = Object.keys(responseHash);\n\n      this.findAll(cond).then((res) => {\n         // for each entry we got back\n         if (Array.isArray(res.data) && res.data.length) {\n            res.data.forEach((data) => {\n               // find it's matching request:\n               if (responseHash[data[PK]]) {\n                  // respond to the pending promise\n                  // and remove these entries from responseHash\n                  var entries = responseHash[data[PK]];\n                  entries.forEach((entry) => {\n                     var resolve = entry.resolve;\n                     resolve({ data: [data] });\n                  });\n\n                  delete responseHash[data[PK]];\n               } else {\n                  console.error(\n                     \"Model.staleRefreshProcess(): returned entry was not in our responseHash:\",\n                     data,\n                     responseHash\n                  );\n               }\n            });\n         }\n\n         // now if there are any entries left in responseHash,\n         // respond with an empty entry:\n         var allKeys = Object.keys(responseHash);\n         if (allKeys.length > 0) {\n            console.warn(\n               \"Model.staleRefreshProcess(): \" +\n                  allKeys.length +\n                  \" entries with no responses. \"\n            );\n         }\n         allKeys.forEach((key) => {\n            var resolve = responseHash[key].resolve;\n            resolve({ data: [] });\n            delete responseHash[key];\n         });\n\n         // now check to see if there are any more pending requests:\n         if (this.staleRefreshPending.length > 0) {\n            // process them:\n            this.staleRefreshProcess();\n         } else {\n            // mark we are no longer processing stale requests.\n            this.staleRefreshInProcess = false;\n         }\n      });\n   }\n\n   /**\n     * @method findConnected\n     * return the connected data associated with an instance of this model.\n     *\n     * to limit the result to only a single connected column:\n     *    model.findConnected( 'col1', {data})\n     *    then ((data) => {\n     *      // data = [{obj1}, {obj2}, ... {objN}]\n     *    })\n     *\n     * To find >1 connected field data:\n     *    model.findConnected( ['col1', 'col2'], {data} )\n     *    .then((data) =>{\n     *    \n     *      // data = {\n     *      //     col1 : [{obj1}, {obj2}, ... {objN}],\n     *      //     col2 : [{obj1}, {obj2}, ... {objN}]\n     *      // }\n     *    })\n     *\n     * To find all connected field data:\n     *    model.findConnected( {data} )\n     *    .then((data) =>{\n     *    \n     *      // data = {\n     *      //     connectedColName1 : [{obj1}, {obj2}, ... {objN}],\n     *      //     connectedColName2 : [{obj1}, {obj2}, ... {objN}],\n     *      //    ...\n     *      //     connectedColNameN : [{obj1}, {obj2}, ... {objN}]\n     *      // }\n     *    })\n\n     * @param {string/array} fields  [optional] an array of connected fields you want to return.\n     * @param {obj} data  the current object instance (data) to lookup\n     * @return {Promise}\n     */\n   findConnected(fields, data) {\n      if (typeof data == \"undefined\") {\n         if (!Array.isArray(fields) && typeof fields == \"object\") {\n            data = fields;\n            fields = []; // return all fields\n         }\n      }\n\n      if (typeof fields == \"string\") {\n         fields = [fields]; // convert to an array of values\n      }\n\n      return new Promise((resolve, reject) => {\n         // sanity checking:\n         if (!data.id) {\n            // I can't find any connected items, if I can't find this one:\n            resolve(null);\n            return;\n         }\n\n         let cond = {};\n         cond[this.object.PK()] = data.id;\n         this.findAll({ where: cond, includeRelativeData: true })\n            .then((results) => {\n               if (\n                  !results.data ||\n                  !Array.isArray(results.data) ||\n                  results.data.length == 0\n               ) {\n                  resolve([]); // no data to return.\n                  return;\n               }\n\n               // work with the first object.\n               var myObj = results.data[0];\n\n               // if only 1 field requested, then return that\n               if (fields.length == 1) {\n                  let data =\n                     myObj[\n                        fields[0].replace(/[^a-z0-9\\.]/gi, \"\") + \"__relation\"\n                     ];\n                  if (!data) return resolve([]);\n\n                  if (!Array.isArray(data)) data = [data];\n\n                  resolve(data);\n                  return;\n               }\n\n               // if no fields requested, return them all:\n               if (fields.length == 0) {\n                  var allFields = this.object.fields((f) => {\n                     return f.settings.linkType;\n                  });\n                  allFields.forEach((f) => {\n                     fields.push(f.columnName);\n                  });\n               }\n\n               var returnData = {};\n               fields.forEach((colName) => {\n                  returnData[colName] =\n                     myObj[colName.replace(/[^a-z0-9\\.]/gi, \"\") + \"__relation\"];\n               });\n\n               resolve(returnData);\n            })\n            .catch((err) => {\n               console.error(\"!!! error with findConnected() attempt:\", err);\n               reject(err);\n            });\n      });\n   }\n\n   // /**\n   //  * @method loadInto\n   //  * loads the current values into the provided Webix DataTable\n   //  * @param {DataTable} DT  A Webix component that can dynamically load data.\n   //  */\n   // loadInto(DT) {\n\n   //   // if a limit was applied, then this component should be loading dynamically\n   //   if (this._limit) {\n\n   //     DT.define('datafetch', this._limit);\n   //     DT.define('datathrottle', 250);  // 250ms???\n\n   //     // catch the event where data is requested:\n   //     // here we will do our own findAll() so we can persist\n   //     // the provided .where condition.\n\n   //     // oh yeah, and make sure to remove any existing event handler when we\n   //     // perform a new .loadInto()\n   //     DT.___AD = DT.___AD || {};\n   //     if (DT.___AD.onDataRequestEvent) {\n   //       DT.detachEvent(DT.___AD.onDataRequestEvent);\n   //     }\n   //     DT.___AD.onDataRequestEvent = DT.attachEvent(\"onDataRequest\", (start, count) => {\n\n   //       var cond = {\n   //         where: this._where,\n   //         sort: this._sort,\n   //         limit: count,\n   //         skip: start\n   //       }\n\n   //       if (DT.showProgress)\n   //         DT.showProgress({ type: \"icon\" });\n\n   //       this.findAll(cond)\n   //         .then((data) => {\n   //           data.data.forEach((item) => {\n   //             if (item.properties != null && item.properties.height != \"undefined\" && parseInt(item.properties.height) > 0) {\n   //               item.$height = parseInt(item.properties.height);\n   //             } else if (parseInt(this._where.height) > 0) {\n   //               item.$height = parseInt(this._where.height)\n   //             }\n   //           });\n   //           DT.parse(data);\n\n   //           if (DT.hideProgress)\n   //             DT.hideProgress();\n\n   //         })\n\n   //       return false; // <-- prevent the default \"onDataRequest\"\n   //     });\n\n   //     DT.refresh();\n   //   }\n\n   //   // else just load it all at once:\n   //   var cond = {};\n   //   if (this._where) cond.where = this._where;\n   //   if (this._sort) cond.sort = this._sort;\n   //   if (this._limit != null) cond.limit = this._limit;\n   //   if (this._skip != null) cond.skip = this._skip;\n\n   //   if (DT.showProgress)\n   //     DT.showProgress({ type: \"icon\" });\n\n   //   this.findAll(cond)\n   //     .then((data) => {\n   //       data.data.forEach((item) => {\n   //         if (item.properties != null && item.properties.height != \"undefined\" && parseInt(item.properties.height) > 0) {\n   //           item.$height = parseInt(item.properties.height);\n   //         } else if (parseInt(this._where.height) > 0) {\n   //           item.$height = parseInt(this._where.height)\n   //         }\n   //       });\n   //       DT.parse(data);\n\n   //       if (DT.hideProgress)\n   //         DT.hideProgress();\n\n   //     })\n   //     .catch((err) => {\n   //       console.error('!!!!!', err);\n   //     })\n\n   // }\n\n   // /**\n   //  * @method limit\n   //  * set the limit value for this set of data\n   //  * @param {integer} limit  the number or elements to return in this call\n   //  * @return {ABModel} this object that is chainable.\n   //  */\n   // limit(limit) {\n   //   this._limit = limit;\n   //   return this;\n   // }\n\n   // /**\n   //  * @method skip\n   //  * set the skip value for this set of data\n   //  * @param {integer} skip  the number or elements to skip\n   //  * @return {ABModel} this object that is chainable.\n   //  */\n   // skip(skip) {\n   //   this._skip = skip;\n   //   return this;\n   // }\n\n   //   /**\n   //    * @method update\n   //    * update model values on the server.\n   //    */\n   //   update(id, values) {\n\n   //     this.prepareMultilingualData(values);\n\n   //     // remove empty properties\n   //     for (var key in values) {\n   //       if (values[key] == null)\n   //         delete values[key];\n   //     }\n\n   //     var params = {\n   //       url: this.object.urlRestItem(id),\n   //       params: values\n   //     }\n   //     return this.request('put', params)\n   //       .then((data) => {\n\n   //         // .data is an empty object ??\n\n   //         this.normalizeData(data);\n\n   //         return data;\n\n   //         // FIX: now with sockets, the triggers are fired from socket updates.\n   //         // trigger a update event\n   //         // triggerEvent('update', this.object, data);\n\n   //       })\n   //       .catch((err)=>{\n   // console.error(err);\n   //       });\n\n   //   }\n\n   /**\n    * @method upsert\n    * upsert model values on the server.\n    */\n   upsert(values) {\n      this.prepareMultilingualData(values);\n\n      // remove empty properties\n      for (var key in values) {\n         if (values[key] == null) delete values[key];\n      }\n\n      var params = {\n         url: this.object.urlRest(),\n         params: values,\n      };\n      return this.request(\"put\", params)\n         .then((data) => {\n            // .data is an empty object ??\n\n            this.normalizeData(data);\n\n            return data;\n\n            // FIX: now with sockets, the triggers are fired from socket updates.\n            // trigger a update event\n            // triggerEvent('update', this.object, data);\n         })\n         .catch((err) => {\n            console.error(err);\n         });\n   }\n\n   /**\n    * @method where\n    * set the where condition for the data being loaded.\n    * @param {json} cond  the json condition statement.\n    * @return {ABModel} this object that is chainable.\n    */\n   where(cond) {\n      this._where = cond;\n      return this;\n   }\n\n   /**\n    * @method where\n    * set the sort condition for the data being loaded.\n    * @param {json} cond  the json condition statement.\n    * @return {ABModel} this object that is chainable.\n    */\n   sort(cond) {\n      this._sort = cond;\n      return this;\n   }\n\n   /**\n    * @method refresh\n    * refresh model definition on the server.\n    */\n   refresh() {\n      console.error(\"!!! Depreciated: where is this being called from?\");\n      return Promise.resolve();\n\n      // var params = {\n      //    url: this.object.urlRestRefresh(),\n      // };\n      // return this.request(\"put\", params);\n   }\n\n   normalizeData(data) {\n      // convert to array\n      if (!(data instanceof Array)) data = [data];\n\n      // find all connected fields\n      var connectedFields = this.object.connectFields();\n\n      // if this object has some multilingual fields, translate the data:\n      var mlFields = this.object.multilingualFields();\n\n      // if this object has some date fields, convert the data to date object:\n      var dateFields =\n         this.object.fields(function (f) {\n            return f.key == \"date\" || f.key == \"datetime\";\n         }) || [];\n\n      // calculate fields\n      var calculatedFields = this.object.fields((f) => f.key == \"calculate\");\n\n      data.forEach((d) => {\n         if (d == null) return;\n\n         // various PK name\n         if (!d.id && this.object.PK() != \"id\") d.id = d[this.object.PK()];\n\n         // loop through data's connected fields\n         connectedFields.forEach((c) => {\n            // get the relation name so we can change the original object\n            var relationName = c.relationName();\n\n            // if (d[c.columnName] == null)\n            //  d[c.columnName] = '';\n\n            // if there is no data we can exit now\n            if (d[relationName] == null) return;\n\n            // if relation data is still a string and isn't empty\n            if (\n               typeof d[relationName] == \"string\" &&\n               d[relationName].length > 0\n            ) {\n               // parse the string into an object\n               d[relationName] = JSON.parse(d[relationName]);\n            }\n\n            // if the data is an array we need to loop through it\n            if (Array.isArray(d[relationName])) {\n               d[relationName].forEach((r) => {\n                  // if translations are present and they are still a string\n                  if (r.translations && typeof r.translations == \"string\") {\n                     // parse the string into an object\n                     r.translations = JSON.parse(r.translations);\n                  }\n               });\n               // if the data is not an array it is a single item...check that has translations and it is a string\n            } else if (\n               d[relationName].translations &&\n               typeof d[relationName].translations == \"string\"\n            ) {\n               // if so parse the string into an object\n               d[relationName].translations = JSON.parse(\n                  d[relationName].translations\n               );\n            }\n\n            // set .id to relation columns\n            let objectLink = c.datasourceLink;\n            if (\n               objectLink &&\n               objectLink.PK() != \"id\" &&\n               d[relationName] &&\n               !d[relationName].id\n            ) {\n               // is array\n               if (d[relationName].forEach) {\n                  d[relationName].forEach((subData) => {\n                     if (subData[objectLink.PK()])\n                        subData.id = subData[objectLink.PK()];\n                  });\n               } else if (d[relationName][objectLink.PK()]) {\n                  d[relationName].id = d[relationName][objectLink.PK()];\n               }\n            }\n\n            var relatedMlFields = objectLink.multilingualFields();\n            if (relatedMlFields.length) {\n               objectLink.translate(\n                  d[relationName],\n                  d[relationName],\n                  relatedMlFields\n               );\n            }\n\n            // Change property name of connected field\n            if (!d[c.columnName]) d[c.columnName] = d[relationName];\n         });\n\n         if (mlFields.length) {\n            this.object.translate(d, d, mlFields);\n         }\n\n         // convert the data to date object\n         dateFields.forEach((date) => {\n            if (d && d[date.columnName] != null) {\n               // check to see if data has already been converted to a date object\n               if (typeof d[date.columnName] == \"string\") {\n                  if (date.key == \"date\") {\n                     // if we are ignoring the time it means we ignore timezone as well\n                     // so lets trim that off when creating the date so it can be a simple date\n                     d[date.columnName] = this.AB.toDate(d[date.columnName], {\n                        format: \"MM/DD/YYYY\",\n                        ignoreTime: true,\n                     });\n                  } else {\n                     // Convert UTC to Date\n                     d[date.columnName] = this.AB.toDate(d[date.columnName]);\n                     // d[date.columnName] = new Date(moment(d[date.columnName]));\n                  }\n               }\n            }\n         });\n\n         calculatedFields.forEach((calField) => {\n            d[calField.columnName] = calField.format(d);\n         });\n      });\n   }\n};\n","/**\n * ABObjectCore\n *\n * Manage the loading of specific ABObject data into useable objects\n * that can instantiate themselves and provide field and model resources.\n */\n\nvar ABModel = require(\"../platform/ABModel\");\nvar ABMLClass = require(\"../platform/ABMLClass\");\n\nconst L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABObjectCore extends ABMLClass {\n   constructor(attributes, AB) {\n      super([\"label\"], AB);\n\n      /*\n{\n\tid: uuid(),\n\tconnName: 'string', // Sails DB connection name: 'appdev_default', 'legacy_hris', etc. Default is 'appBuilder'.\n\tname: 'name',\n\tlabelFormat: 'xxxxx',\n\tlabelSettings: Object,\n\tisImported: 1/0,\n\tisExternal: 1/0,\n\ttableName:'string',  // NOTE: store table name of import object to ignore async\n\tprimaryColumnName: 'string', // NOTE: store column name of PK\n\ttransColumnName: 'string', // NOTE: store column name of translations table\n\turlPath:'string',\n\timportFromObject: 'string', // JSON Schema style reference:  '#[ABApplication.id]/objects/[ABObject.id]'\n\t\t\t\t\t\t\t\t// to get other object:\t ABApplication.objectFromRef(obj.importFromObject);\n\ttranslations:[\n\t\t{}\n\t],\n\tfields:[\n\t\t{ABDataField}\n   ],\n   indexes: [\n      {ABIndex}\n   ]\n}\n*/\n\n      this.fromValues(attributes);\n   }\n\n   ///\n   /// Static Methods\n   ///\n   /// Available to the Class level object. These methods are not dependent\n   /// on the instance values of the Application.\n   ///\n\n   static contextKey() {\n      return \"object\";\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   fromValues(attributes) {\n      /*\n        {\n            id: uuid(),\n            connName: 'string', // Sails DB connection name: 'appdev_default', 'legacy_hris', etc. Default is 'appBuilder'.\n            name: 'name',\n            labelFormat: 'xxxxx',\n            labelSettings: Object,\n            isImported: 1/0,\n            isExternal: 1/0,\n            tableName:'string',  // NOTE: store table name of import object to ignore async\n            primaryColumnName: 'string', // NOTE: store column name of PK\n            transColumnName: 'string', // NOTE: store column name of translations table\n            urlPath:'string',\n            importFromObject: 'string', // JSON Schema style reference:  '#[ABApplication.id]/objects/[ABObject.id]'\n                                        // to get other object:  ABApplication.objectFromRef(obj.importFromObject);\n            translations:[\n                {}\n            ],\n            fields:[\n                {ABDataField}\n            ],\n            indexes: [\n               {ABIndex}\n            ]\n        }\n        */\n\n      this.id = attributes.id;\n      // {string} .id\n      // the uuid of this ABObject Definition.\n\n      this.type = attributes.type || \"object\";\n      // {string} .type\n      // the type of ABDefinition this is.\n\n      this.connName = attributes.connName || undefined; // undefined == 'appBuilder'\n      // {string} .connName\n      // the sails.config.connections[connName] configuration reference.\n      // if not set ({undefined}), then our default \"appBuilder\" config is used\n\n      this.name = attributes.name || \"\";\n      // {string} .name\n      // A name reference for this ABObject. This is a reference that isn't\n      // translateable and will be used for lookups across languages.\n\n      this.labelFormat = attributes.labelFormat || \"\";\n      // {string} .labelFormat\n      // A string template for how to display an entry for this ABObject in\n      // common UI elements like grids, lists, etc...\n\n      this.labelSettings = attributes.labelSettings || {};\n      // {Object} .labelSettings\n\n      this.labelSettings.isNoLabelDisplay = parseInt(\n         this.labelSettings.isNoLabelDisplay || 0\n      );\n      // {bool} .isNoLabelDisplay\n\n      this.isImported = parseInt(attributes.isImported || 0);\n      // {depreciated}\n      // {bool} .isImported\n      // previously used to mark ABObjects that were created in other\n      // ABApplicaitons.  No longer relevant with Global ABObjects\n\n      this.isExternal = parseInt(attributes.isExternal || 0);\n      // {bool} .isExternal\n      // Marks this ABObject as referencing a pre-existing table in the DB that\n      // we are treating as an ABObject.\n      // These objects are not allowed to create/update/destroy the db table\n      // nor can we add/remove fields.\n      // However we are able to customize the Field definitions to change the\n      // column names, hidden attributes, Object label, etc...\n      // We can update our Defintion attributes, but not any actual DB changes.\n\n      this.tableName = attributes.tableName || \"\"; // NOTE: store table name of import object to ignore async\n      // {string} .tableName\n      // the `{database}.{tableName}` of the db table that this ABObject's data\n      // is stored in.\n      // knex does not like .(dot) in table and column names\n      // https://github.com/knex/knex/issues/2762\n      this.tableName = this.tableName.replace(/[^a-zA-Z0-9_ ]/gi, \"\");\n\n      this.primaryColumnName = attributes.primaryColumnName || \"\"; // NOTE: store column name of PK\n      // {string} .primaryColumnName\n      // is the col_name of which key is the primary key.  By default it is\n      // \"uuid\", but in some external objects this might be something else\n      // (\"id\", \"ren_id\", etc...).\n\n      this.transColumnName = attributes.transColumnName || \"\"; // NOTE: store column name of translations table\n      // {string} .transColumnName\n      // this is a workaround to include hris_ren_data and hris_ren_trans data\n\n      this.urlPath = attributes.urlPath || \"\";\n\n      // this.importFromObject = attributes.importFromObject || \"\";\n\n      this.isSystemObject = attributes.isSystemObject;\n      // {bool} .isSystemObject\n      // We are now storing some of our System Required Data as ABObjects as well.\n      // These Objects should not be allowed to be modified by typical AppBuilder\n      // designer.  However we can enable a mode for AB Designer to then expand these\n      // ABObjects, and eventually we can use the AppBuilder to Create the AppBuilder.\n      if (\n         typeof this.isSystemObject == \"undefined\" ||\n         this.isSystemObject == \"false\"\n      ) {\n         this.isSystemObject = false;\n      }\n\n      this.createdInAppID = attributes.createdInAppID;\n      // {string} .createdInAppID\n      // the .id of the ABApplication that originally created this ABObject.\n\n      // if attributes.objectWorkspace DOES exist, make sure it is fully\n      // populated.\n      if (typeof attributes.objectWorkspace != \"undefined\") {\n         if (typeof attributes.objectWorkspace.sortFields == \"undefined\")\n            attributes.objectWorkspace.sortFields = [];\n         if (typeof attributes.objectWorkspace.filterConditions == \"undefined\")\n            attributes.objectWorkspace.filterConditions = [];\n         if (typeof attributes.objectWorkspace.frozenColumnID == \"undefined\")\n            attributes.objectWorkspace.frozenColumnID = \"\";\n         if (typeof attributes.objectWorkspace.hiddenFields == \"undefined\")\n            attributes.objectWorkspace.hiddenFields = [];\n      }\n      this.objectWorkspace = attributes.objectWorkspace || {\n         sortFields: [], // array of columns with their sort configurations\n         filterConditions: [], // array of filters to apply to the data table\n         frozenColumnID: \"\", // id of column you want to stop freezing\n         hiddenFields: [], // array of [ids] to add hidden:true to\n      };\n      // {obj} .objectWorkspace\n      // When in the ABObject editor in the AppBuilder Designer, different\n      // views of the information can be created.  These views are stored here\n      // and are avaiable to other users in the Designer.\n\n      // pull in field definitions:\n      var fields = [];\n      this.fieldIDs = attributes.fieldIDs || [];\n      // {array}  [ ABField.id, ... ]\n      // this is a collection of ALL the ABFields this object references.\n      // This will include ABFields that were directly created for this object\n      // and will include ABFields that were imported.\n\n      this.importedFieldIDs = attributes.importedFieldIDs || [];\n      // {array} [ ABField.id, ... ]\n      // this is a collection of the ABFields in our .fieldIDs that were\n      // IMPORTED.\n\n      this.fieldIDs.forEach((id) => {\n         if (!id) return;\n\n         var def = this.AB.definitionByID(id);\n         if (def) {\n            fields.push(this.AB.fieldNew(def, this));\n         } else {\n            this.emit(\n               \"warning\",\n               `O[${this.name}] is referenceing an unknown field id[${id}]`,\n               {\n                  obj: this.id,\n                  field: id,\n               }\n            );\n         }\n      });\n      this._fields = fields;\n\n      // pull in index definitions:\n      this.importIndexes(attributes.indexIDs);\n\n      // let the MLClass now process the translations:\n      super.fromValues(attributes);\n   }\n\n   /**\n    * @method importIndexes\n    * instantiate a set of indexes from the given ids.\n    * @param {array} indexIDs The different ABDefinition IDs for each index\n    *        [ \"uuid11\", \"uuid2\", ... \"uuidN\" ]\n    */\n   importIndexes(indexIDs) {\n      var indexes = [];\n      (indexIDs || []).forEach((id) => {\n         var def = this.AB.definitionByID(id);\n         if (def) {\n            indexes.push(this.AB.indexNew(def, this));\n         } else {\n            this.emit(\n               \"warning\",\n               `O[${this.name}] is referenceing an unknown index id[${id}]`,\n               {\n                  obj: this.id,\n                  index: id,\n               }\n            );\n         }\n      });\n      this._indexes = indexes;\n   }\n\n   /**\n    * @method exportFields\n    * convert our array of fields into a settings object for saving to disk.\n    * @return {array}\n    */\n   // exportFields() {\n   //     var currFields = [];\n   //     this._fields.forEach((obj) => {\n   //         currFields.push(obj.toObj());\n   //     });\n   //     return currFields;\n   // }\n\n   // /**\n   //  * @method exportFields\n   //  * convert our array of fields into a settings object for saving to disk.\n   //  * @return {array}\n   //  */\n   // exportIndexes() {\n   //    var currIndexes = [];\n   //    this._indexes.forEach((idx) => {\n   //       currIndexes.push(idx.toObj());\n   //    });\n   //    return currIndexes;\n   // }\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABApplication instance\n    * into the values needed for saving to the DB.\n    *\n    * Most of the instance data is stored in .json field, so be sure to\n    * update that from all the current values of our child fields.\n    *\n    * @return {json}\n    */\n   toObj() {\n      // MLClass translation\n      var obj = super.toObj();\n\n      // track the field .ids of our fields\n      var fieldIDs = this.fields().map((f) => f.id);\n\n      // track the index .ids of our indexes\n      var indexIDs = this.indexes().map((f) => f.id);\n\n      return {\n         id: this.id,\n         type: this.type || \"object\",\n         connName: this.connName,\n         name: this.name,\n         labelFormat: this.labelFormat,\n         labelSettings: this.labelSettings || {},\n         isImported: this.isImported,\n         isExternal: this.isExternal,\n         tableName: this.tableName,\n         // NOTE: store table name of import object to ignore async\n         primaryColumnName: this.primaryColumnName,\n         // NOTE: store column name of PK\n         transColumnName: this.transColumnName,\n         // NOTE: store column name of translations table\n         urlPath: this.urlPath,\n         // importFromObject: this.importFromObject,\n         objectWorkspace: this.objectWorkspace,\n         isSystemObject: this.isSystemObject,\n\n         translations: obj.translations,\n         fieldIDs: fieldIDs,\n         importedFieldIDs: this.importedFieldIDs,\n         indexIDs: indexIDs,\n         createdInAppID: this.createdInAppID,\n      };\n   }\n\n   ///\n   /// Objects\n   ///\n\n   /**\n    * @method objectLinks()\n    *\n    *  return an array of ABObject that's connected.\n    *\n    * @param {object} filter\n    * @return {array} - An array of ABObject\n    */\n   objectLinks(/* filter */) {\n      var connectFields = this.connectFields();\n\n      return connectFields.map((f) => f.datasourceLink);\n   }\n\n   ///\n   /// Fields\n   ///\n\n   /**\n    * @method fields()\n    * return an array of all the ABFields for this ABObject.\n    * @param {fn} fn\n    *        a filter function that returns {true} if a value should\n    *        be included, or {false} otherwise.\n    * @return {array[ABFieldxxx]}\n    */\n   fields(fn = () => true) {\n      return this._fields.filter(fn);\n   }\n\n   /**\n    * @method fieldByID()\n    * return the object's field from the given {ABField.id}\n    * @param {string} id\n    *        the uuid of the field to return.\n    * @return {ABFieldxxx}\n    */\n   fieldByID(id) {\n      return this.fields((f) => f?.id == id)[0];\n   }\n\n   /**\n    * @method connectFields()\n    *\n    * return an array of the ABFieldConnect that is connect object fields.\n    * @param {fn} fn\n    *        a filter function that returns {true} if a value should\n    *        be included, or {false} otherwise.\n    * @return {array}\n    */\n   connectFields(fn = () => true) {\n      return this.fields((f) => f && f.isConnection).filter(fn);\n   }\n\n   /**\n    * @method fieldImport\n    * register the given ABField.id as an imported field for this ABObject.\n    * The ABField definition should be available before making this call.\n    * After this call, the ABField is included in the ABObject, but the ABObject\n    * has NOT been saved.\n    * @param {ABField} fieldID The ABDefinition.id for a field that is imported\n    *        into this object.\n    */\n   fieldImport(id) {\n      if (!id) return;\n\n      if (this.importedFieldIDs.indexOf(id) == -1) {\n         this.importedFieldIDs.push(id);\n      }\n\n      // just to be safe:\n      var isThere = this._fields.find((f) => f.id == id);\n      if (!isThere) {\n         var def = this.AB.definitionByID(id);\n         if (def) {\n            this._fields.push(this.AB.fieldNew(def, this));\n         } else {\n            this.emit(\n               \"warning\",\n               `O[${this.name}] is importing an unknown field id[${id}]`,\n               {\n                  obj: this.id,\n                  field: id,\n               }\n            );\n         }\n      }\n   }\n\n   /**\n    * @method fieldNew()\n    *\n    * return an instance of a new (unsaved) ABField that is tied to this\n    * ABObject.\n    *\n    * NOTE: this new field is not included in our this.fields until a .save()\n    * is performed on the field.\n    *\n    * @return {ABField}\n    */\n   fieldNew(values) {\n      return this.AB.fieldNew(values, this);\n   }\n\n   /**\n    * @method fieldRemove()\n    *\n    * remove the given ABField from our ._fields array and persist the current\n    * values.\n    *\n    * @param {ABField} field The instance of the field to remove.\n    * @return {Promise}\n    */\n   fieldRemove(field) {\n      var origLen = this._fields.length;\n      this._fields = this.fields(function (o) {\n         return o.id != field.id;\n      });\n\n      // be sure to remove this from our imported ids if it was\n      // listed there.\n      this.importedFieldIDs = this.importedFieldIDs.filter(\n         (fid) => fid != field.id\n      );\n\n      if (this._fields.length < origLen) {\n         return this.save();\n      }\n\n      // if we get here, then nothing changed so nothing to do.\n      return Promise.resolve();\n   }\n\n   /**\n    * @method fieldReorder()\n    *\n    * reorder the fields in our object\n    *\n    * @param {ABField} field The instance of the field to remove.\n    * @return {Promise}\n    */\n   fieldReorder(sourceId, targetId) {\n      // We know what was moved and what item it has replaced/pushed forward\n      // so first we want to splice the item moved out of the array of fields\n      // and store it so we can put it somewhere else\n      let itemMoved = null;\n      let oPos = 0; // original position\n      for (var i = 0; i < this._fields.length; i++) {\n         if (this._fields[i].columnName == sourceId) {\n            itemMoved = this._fields[i];\n            this._fields.splice(i, 1);\n            oPos = i;\n            break;\n         }\n      }\n      // once we have removed/stored it we can find where its new position\n      // will be by looping back through the array and finding the item it\n      // is going to push forward\n      for (var j = 0; j < this._fields.length; j++) {\n         if (this._fields[j].columnName == targetId) {\n            // if the original position was before the new position we will\n            // follow webix's logic that the drop should go after the item\n            // it was placed on\n            if (oPos <= j) {\n               j++;\n            }\n            this._fields.splice(j, 0, itemMoved);\n            break;\n         }\n      }\n\n      return this.save();\n   }\n\n   /**\n    * @method fieldSave()\n    *\n    * save the given ABField in our ._fields array and persist the current\n    * values.\n    *\n    * @param {ABField} field The instance of the field to save.\n    * @return {Promise}\n    */\n   fieldSave(field) {\n      var isIncluded = this.fieldByID(field.id);\n      if (!isIncluded) {\n         this._fields.push(field);\n         return this.save();\n      }\n\n      return Promise.resolve();\n   }\n\n   /**\n    * @method fieldAdd()\n    *\n    * save the given ABField in our ._fields array and persist the current\n    * values if they changed.\n    *\n    * @param {ABField} field The instance of the field to save.\n    * @return {Promise}\n    */\n   fieldAdd(field) {\n      var isIncluded = this.fieldByID(field.id);\n      if (!isIncluded) {\n         // if not already included, then add and save the Obj definition:\n         this._fields.push(field);\n         return this.save();\n      }\n\n      // Nothing was required so return\n      return Promise.resolve();\n   }\n\n   /**\n    * @method imageFields()\n    *\n    * return an array of the ABFieldImage fields this object has.\n    * @param {fn} fn\n    *        a filter function that returns {true} if a value should\n    *        be included, or {false} otherwise.\n    * @return {array}\n    */\n   imageFields(fn = () => true) {\n      return this.fields((f) => f && f.key == \"image\").filter(fn);\n   }\n\n   /**\n    * @method multilingualFields()\n    *\n    * return an array of columnnames that are multilingual.\n    *\n    * @return {array}\n    */\n   multilingualFields() {\n      return this.fields((f) => f && f.isMultilingual).map((f) => f.columnName);\n   }\n\n   /**\n    * @method indexes()\n    *\n    * return an array of all the ABIndex for this ABObject.\n    *\n    * @param filter {Object}\n    *\n    * @return {array}\n    */\n   indexes(filter = () => true) {\n      return this._indexes.filter(filter);\n   }\n\n   /**\n    * @method indexByID()\n    * return the object's index from the given {ABIndex.id}\n    * @param {string} id\n    *        the id of the ABIndex to return.\n    * @return {ABIndex}\n    */\n   indexByID(id) {\n      return this.indexes((f) => f.id == id)[0];\n   }\n\n   /**\n    * @method indexRemove()\n    * remove the given ABIndex from our ._indexes array and persist the current\n    * values.\n    * @param {ABIndex} index\n    * @return {Promise}\n    */\n   indexRemove(index) {\n      var origLen = this._indexes.length;\n      this._indexes = this.indexes(function (idx) {\n         return idx.id != index.id;\n      });\n\n      // persist our changes if something changed.\n      if (origLen != this._indexes.length) {\n         return this.save();\n      }\n\n      // nothing was removed, so continue on.\n      return Promise.resolve();\n   }\n\n   /**\n    * @method indexSave()\n    * save the given ABIndex in our ._indexes array and persist the current\n    * values.\n    * @param {ABIndex} index\n    * @return {Promise}\n    */\n   indexSave(index) {\n      var isIncluded = this.indexByID(index.id);\n      if (!isIncluded) {\n         this._indexes.push(index);\n         return this.save();\n      }\n\n      return Promise.resolve();\n   }\n\n   ///\n   /// Working with data from server\n   ///\n\n   /**\n    * @method model\n    * return a Model object that will allow you to interact with the data for\n    * this ABObject.\n    */\n   model() {\n      var model = new ABModel(this);\n\n      // default the context of this model's operations to this object\n      model.contextKey(ABObjectCore.contextKey());\n      model.contextValues({ id: this.id });\n\n      return model;\n   }\n\n   ///\n   /// URL\n   ///\n\n   /**\n    * @method urlRest\n    * return the url to access the data for this object.\n    * @return {string}\n    */\n   urlRest() {\n      return `/app_builder/model/${this.id}`;\n   }\n\n   /**\n    * @method urlRestBatch\n    * return the url to use for batch creates for this object\n    * @return {string}\n    */\n   urlRestBatch() {\n      return `/app_builder/batch/model/${this.id}`;\n   }\n\n   /**\n    * @method urlRestItem\n    * return the url to access the data for an instance of this object.\n    * @return {string}\n    */\n   urlRestItem(id) {\n      return `/app_builder/model/${this.id}/${id}`;\n   }\n\n   /**\n    * @method urlRestLog\n    * return the url to access the logs for this ABObject.\n    * @return {string}\n    */\n   urlRestLog() {\n      return `/app_builder/object/${this.id}/track`;\n   }\n\n   /**\n    * @method urlRestRefresh\n    * return the url to signal a refresh for this object.\n    * @return {string}\n    */\n   urlRestRefresh() {\n      return `/app_builder/model/refreshobject/${this.id}`;\n   }\n\n   /**\n    * @method urlCount\n    * return the url to count of data for this object.\n    * @return {string}\n    */\n   urlRestCount() {\n      return `/app_builder/model/count/${this.id}`;\n   }\n\n   ///\n   ///\tObject Workspace Settings\n   ///\n   get workspaceSortFields() {\n      // new version\n      if (this.workspaceViews) {\n         let currView = this.workspaceViews.getCurrentView();\n         if (currView) return currView.sortFields;\n         else return null;\n      }\n      // old version\n      else {\n         return this.objectWorkspace.sortFields;\n      }\n   }\n\n   set workspaceSortFields(fields) {\n      // new version\n      if (this.workspaceViews) {\n         let currView = this.workspaceViews.getCurrentView();\n         if (currView) currView.sortFields = fields;\n      }\n      // old version\n      else {\n         this.objectWorkspace.sortFields = fields;\n      }\n   }\n\n   get workspaceFilterConditions() {\n      // new version\n      if (this.workspaceViews) {\n         let currView = this.workspaceViews.getCurrentView();\n         if (currView) return currView.filterConditions;\n         else return null;\n      }\n      // old version\n      else {\n         return this.objectWorkspace.filterConditions;\n      }\n   }\n\n   set workspaceFilterConditions(filterConditions) {\n      // new version\n      if (this.workspaceViews) {\n         let currView = this.workspaceViews.getCurrentView();\n         if (currView) currView.filterConditions = filterConditions;\n      }\n      // old version\n      else {\n         this.objectWorkspace.filterConditions = filterConditions;\n      }\n   }\n\n   get workspaceFrozenColumnID() {\n      return this.objectWorkspace.frozenColumnID;\n   }\n\n   set workspaceFrozenColumnID(id) {\n      this.objectWorkspace.frozenColumnID = id;\n   }\n\n   get workspaceHiddenFields() {\n      return this.objectWorkspace.hiddenFields || [];\n   }\n\n   set workspaceHiddenFields(fields) {\n      this.objectWorkspace.hiddenFields = fields;\n   }\n\n   /**\n    * @method isReadOnly\n    *\n    * @return {boolean}\n    */\n   get isReadOnly() {\n      return this.isImported || this.isExternal;\n   }\n\n   /**\n    * @method defaultValues\n    * Collect a hash of key=>value pairs that represent the default values\n    * from each of our fields.\n    * @param {obj} data a key=>value hash of the inputs to parse.\n    * @return {array}\n    */\n   defaultValues() {\n      var values = {};\n      this.fields().forEach((f) => {\n         f.defaultValue(values);\n      });\n\n      return values;\n   }\n\n   /**\n    * @method isValidData\n    * Parse through the given data and return an array of any invalid\n    * value errors.\n    * @param {obj} data a key=>value hash of the inputs to parse.\n    * @return {array}\n    */\n   isValidData(/* data */) {\n      // NOTE: the platform needs to define a way to verify the data\n      console.warn(\"Platform.ABObject.isValidData() missing\");\n      return true;\n   }\n\n   /**\n    * @method urlPointer()\n    * return the url pointer that references this object. This url pointer\n    * should be able to be used by this.application.urlResolve() to return\n    * this object.\n    *\n    * @param {boolean} acrossApp - flag to include application id to url\n    *\n    * @return {string}\n    */\n   urlPointer(acrossApp) {\n      console.error(\"Who is calling this?\");\n\n      if (this.application == null) return null;\n\n      return this.application.urlObject(acrossApp) + this.id;\n   }\n\n   /**\n    * @method urlField\n    * return a string pointer to this object's fields\n    *\n    * @param {boolean} acrossApp - flag to include application id to url\n    *\n    * @return {string}\n    */\n   urlField(acrossApp) {\n      console.error(\"Who is calling this?\");\n\n      return this.urlPointer(acrossApp) + \"/_fields/\";\n   }\n\n   /**\n    * @method PK\n    * return a string of the primary column name\n    *\n    * @return {string}\n    */\n   PK() {\n      return this.primaryColumnName || \"uuid\";\n   }\n\n   remoteCreate(data) {\n      console.log(\n         \"object[\" + this.name + \"] received a remoteCreate() with data:\",\n         data\n      );\n   }\n\n   /**\n    * @method clone\n    * return a clone of ABObject\n    *\n    * @return {ABObjectBase}\n    */\n   clone() {\n      // ignore properties who're spend much performance\n      // NOTE: do not clone them. Just copy reference\n      let ignoreProps = [\"application\", \"_fields\"];\n\n      let cloneOne = JSON.parse(JSON.stringify(this));\n\n      ignoreProps.forEach((prop) => {\n         cloneOne[prop] = this[prop];\n      });\n\n      return cloneOne;\n   }\n\n   // Display data with label format of object\n   displayData(rowData) {\n      if (rowData == null) return \"\";\n\n      // translate multilingual\n      //// TODO: isn't this a MLObject??  use this.translate()\n      var mlFields = this.multilingualFields();\n      this.translate(rowData, rowData, mlFields);\n\n      var labelData = this.labelFormat || \"\";\n\n      // default label\n      if (!labelData && this.fields().length > 0) {\n         var defaultField = this.fields((f) => f.fieldUseAsLabel())[0];\n         if (defaultField) labelData = \"{\" + defaultField.id + \"}\";\n         else {\n            // if label is empty, then show .id\n            if (!labelData.trim()) {\n               let labelSettings = this.labelSettings || {};\n               if (labelSettings && labelSettings.isNoLabelDisplay) {\n                  labelData = L(labelSettings.noLabelText || \"[No Label]\");\n               } else {\n                  // show id of row\n                  labelData = `${\n                     this.AB.rules.isUUID(rowData.id) ? \"ID: \" : \"\"\n                  }${rowData.id}`;\n               }\n            }\n         }\n      }\n\n      // get column ids in {colId} template\n      // ['{colId1}', ..., '{colIdN}']\n      var colIds = labelData.match(/\\{[^}]+\\}/g);\n\n      if (colIds && colIds.forEach) {\n         colIds.forEach((colId) => {\n            var colIdNoBracket = colId.replace(\"{\", \"\").replace(\"}\", \"\");\n\n            var field = this.fieldByID(colIdNoBracket);\n            if (field == null) return;\n\n            labelData = labelData.replace(colId, field.format(rowData) || \"\");\n         });\n      }\n\n      // if label is empty, then show .id\n      if (!labelData.trim()) {\n         let labelSettings = this.labelSettings || {};\n         if (labelSettings && labelSettings.isNoLabelDisplay) {\n            labelData = L(labelSettings.noLabelText || \"[No Label]\");\n         } else {\n            // show id of row\n            labelData = `${this.AB.rules.isUUID(rowData.id) ? \"ID: \" : \"\"}${\n               rowData.id\n            }`;\n         }\n      }\n\n      return labelData;\n   }\n};\n","//\n// ABObjectQuery\n//\n// A type of Object in our system that is based upon a complex relationship of multiple\n// existing Objects.\n//\n// In the QueryBuilder section of App Builder, a new Query Object can be created.\n// An initial Object can be chosen from our current list of Objects. After that, additional Objects\n// and a specified join type can be specified.\n//\n// A list of fields from each specified Object can also be included as the data to be returned.\n//\n// A where statement is also part of the definition.\n//\n\nvar ABObject = require(\"../platform/ABObject\");\nvar ABModelQuery = require(\"../platform/ABModelQuery\");\n\nmodule.exports = class ABObjectQueryCore extends ABObject {\n   constructor(attributes, AB) {\n      super(attributes, AB);\n      /*\n{\n\tid: uuid(),\n\tname: 'name',\n\tlabelFormat: 'xxxxx',\n\tisImported: 1/0,\n\turlPath:'string',\n\timportFromObject: 'string', // JSON Schema style reference:  '#[ABApplication.id]/objects/[ABObject.id]'\n\t\t\t\t\t\t\t\t// to get other object:  ABApplication.objectFromRef(obj.importFromObject);\n\ttranslations:[\n\t\t{}\n\t],\n\n\n\n\t// ABOBjectQuery Specific Changes\n\t// we store a list of fields by their urls:\n\tfields:[\n\t\t{\n\t\t\talias: \"\",\n\t\t\tfieldURL:'#/url/to/field',\n\t\t}\n\t],\n\n\n\t// we store a list of joins:\n\tjoins:{\n\t\talias: \"\",\t\t\t\t\t\t\t// the alias name of table - use in SQL command\n\t\tobjectURL:\"#/...\",\t\t\t\t\t// the base object of the join\n\t\tlinks: [\n\t\t\t{\n\t\t\t\talias: \"\",\t\t\t\t\t\t\t// the alias name of table - use in SQL command\n\t\t\t\tfieldID: \"uuid\",\t\t\t\t\t// the connection field of the object we are joining with.\n\t\t\t\ttype:[left, right, inner, outer]\t// join type: these should match the names of the knex methods\n\t\t\t\t\t\t=> innerJoin, leftJoin, leftOuterJoin, rightJoin, rightOuterJoin, fullOuterJoin\n\t\t\t\tlinks: [\n\t\t\t\t\t...\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\n\t},\n\n\n\twhere: { QBWhere }\n}\n*/\n      this.isQuery = true;\n      // {bool}\n      // a property to mark the difference between an ABObject and ABObjectQuery.\n\n      // this.fromValues(attributes);\n   }\n\n   ///\n   /// Static Methods\n   ///\n   /// Available to the Class level object.  These methods are not dependent\n   /// on the instance values of the Application.\n   ///\n\n   /**\n    * contextKey()\n    * returns a unique key that represents a query in\n    * our networking job resolutions.\n    * @return {string}\n    */\n   static contextKey() {\n      return \"query\";\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   /// ABApplication data methods\n\n   fromValues(attributes) {\n      super.fromValues(attributes);\n\n      this.type = \"query\";\n\n      // populate connection objects\n      // this._objects = {};\n      // this.obj2Alias = attributes.obj2Alias || {};\n\n      this.alias2Obj = {}; // this gets built in the .importJoins()\n      // { \"alias\" : object.id }\n      // this is a lookup hash of a referenced alias to the Object it\n      // references.\n\n      this.objectIDs = [];\n      // {array}  of ABObject.id s that are referenced by this query.\n      // this is how we limit our searches on objects.\n      // this gets built in the .importJoins();\n\n      this.viewName = attributes.viewName || \"\";\n      // {string}\n      // this is the SQL tablename of where our Query will store it's\n      // view data.\n\n      // import all our ABObjects\n      this.importJoins(attributes.joins || {});\n\n      // import fields after joins are imported\n      this._fields = null;\n      this.importFields(attributes.fields || []);\n      // {array} [ { alias, field}, {},... ]\n      // an array of field definition structures that mark what fields this\n      // query is interested in pulling data from.\n      //    .alias : {string} matches the alias of the ABObject that the field\n      //             is from\n      //    .field : {ABFieldXXX} the link to the actual ABField instance\n\n      // Import our Where condition\n      this.where = attributes.where || {}; // .workspaceFilterConditions\n      // Fix default where.glue value\n      if (\n         this.where &&\n         !this.where.glue &&\n         this.where.rules &&\n         this.where.rules.length > 0\n      )\n         this.where.glue = \"and\";\n\n      this._objectWorkspaceViews = attributes.objectWorkspaceViews || {};\n\n      this.settings = this.settings || {};\n\n      if (attributes && attributes.settings) {\n         // convert from \"0\" => true/false\n         this.settings.grouping = JSON.parse(\n            attributes.settings.grouping || false\n         );\n         this.settings.hidePrefix = JSON.parse(\n            attributes.settings.hidePrefix || false\n         );\n      }\n   }\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABObjectQuery instance\n    * into the values needed for saving to the DB.\n    *\n    * @return {json}\n    */\n   toObj() {\n      var result = super.toObj();\n\n      result.viewName = this.viewName;\n\n      result.joins = this.exportJoins();\n      result.fields = this.exportFields();\n      result.where = this.where; // .workspaceFilterConditions\n\n      result.settings = this.settings;\n\n      return result;\n   }\n\n   ///\n   /// Fields\n   ///\n\n   /**\n    * @method importFields\n    * instantiate a set of fields from the given attributes.\n    * Our attributes are a set of field URLs That should already be created in their respective\n    * ABObjects.\n    * @param {array} fieldSettings The different field urls for each field\n    *\t\t\t\t\t{ }\n    */\n   importFields(fieldSettings) {\n      var newFields = [];\n      (fieldSettings || []).forEach((fieldInfo) => {\n         if (fieldInfo == null) return;\n\n         // pull object by alias name\n         let object = this.objectByAlias(fieldInfo.alias);\n\n         // Pull object from .AB\n         if (!object && this.AB) {\n            object = this.AB.objectByID(fieldInfo.objectID);\n\n            // keep\n            if (object) {\n               this._objects = this._objects || {};\n               this._objects[fieldInfo.alias] = object;\n            }\n         }\n\n         if (!object) {\n            this.emit(\n               \"warning\",\n               `IMPORT FIELDS: could not resolve object[${\n                  fieldInfo.objectID\n               }] for fieldSetting ${JSON.stringify(fieldInfo)}`,\n               {\n                  fieldInfo,\n               }\n            );\n            return;\n         }\n\n         let field = object.fieldByID(fieldInfo.fieldID);\n         if (!field) {\n            this.emit(\n               \"warning\",\n               `IMPORT FIELDS: Object[${object.id}] could not find field[${\n                  fieldInfo.fieldID\n               }] for fieldSetting ${JSON.stringify(fieldInfo)}`,\n               {\n                  object: object.toObj(),\n                  fieldInfo,\n               }\n            );\n            return;\n         }\n\n         if (!this.canFilterField(field)) {\n            this.emit(\n               \"warning\",\n               `Field[${field.id}] referenced in fieldSetting[${JSON.stringify(\n                  fieldInfo\n               )}] did not pass .canFilterField`,\n               {\n                  field: field.toObj(),\n                  fieldInfo,\n               }\n            );\n         }\n\n         // check duplicate\n         let isNew =\n            newFields.filter(\n               (f) =>\n                  f.alias == fieldInfo.alias && f.field.id == fieldInfo.fieldID\n            ).length < 1;\n\n         if (!isNew) {\n            this.emit(\n               \"warning\",\n               `Field[${\n                  fieldInfo.fieldID\n               }] referenced in fieldSetting[${JSON.stringify(\n                  fieldInfo\n               )}] is a duplicate`,\n               {\n                  field: field.toObj(),\n                  fieldInfo,\n               }\n            );\n         }\n\n         // should be a field of base/join objects\n         if (field && this.canFilterField(field) && isNew) {\n            // add alias to field\n            // create new instance of this field:\n            var def = field.toObj();\n            let clonedField = new field.constructor(def, field.object);\n\n            clonedField.alias = fieldInfo.alias;\n\n            let alias = fieldInfo.alias;\n            if (Array.isArray(this.joins())) {\n               // NOTE: query v1\n               alias = field.object.name;\n            }\n\n            newFields.push({\n               alias: alias,\n               field: clonedField,\n            });\n         }\n      });\n      this._fields = newFields;\n   }\n\n   /**\n    * @method exportFields\n    * convert our array of fields into a settings object for saving to disk.\n    * @return {array}\n    */\n   exportFields() {\n      var currFields = [];\n      this._fields.forEach((fieldInfo) => {\n         currFields.push({\n            alias: fieldInfo.alias,\n            objectID: fieldInfo.field.object.id,\n            fieldID: fieldInfo.field.id,\n         });\n      });\n      return currFields;\n   }\n\n   /**\n    * @method fields()\n    *\n    * Support the ABObject api by returning a list of fields relevant\n    * to this ABObjectQuery.\n    *\n    * @return {array}\n    */\n   fields(fn = () => true) {\n      if (!fn) fn = () => true;\n      return this._fields.map((f) => f.field).filter(fn);\n   }\n\n   ///\n   /// Joins & Objects\n   ///\n\n   /**\n    * @method joins()\n    *\n    * return an object of joins for this Query.\n    *\n    * @return {Object}\n    */\n   joins() {\n      return this._joins || {};\n   }\n\n   /**\n    * @method objects()\n    *\n    * return an array of all the relevant ABObjects for this Query.\n    *\n    * @return {array}\n    */\n   objects(fn = () => true) {\n      // FOR proper expected operation, this fn must only return object\n      // matches for which this ABQuery is managing objects:\n\n      return this.AB.objects((o) => this.objectIDs.indexOf(o.id) > -1).filter(\n         fn\n      );\n   }\n\n   /**\n    * @method objectAlias()\n    *\n    * return alias of of ABObjects.\n    *\n    * @return {string}\n    */\n   objectAlias(objectId) {\n      let result = null;\n\n      Object.keys(this.alias2Obj || {}).forEach((alias) => {\n         if (!result && this.alias2Obj[alias] == objectId) {\n            result = alias;\n         }\n      });\n\n      return result;\n   }\n\n   /**\n    * @method objectBase\n    * return the origin object\n    *\n    * @return {ABObject}\n    */\n   objectBase() {\n      if (!this._joins.objectID) return null;\n\n      return this.AB.objectByID(this._joins.objectID) || null;\n   }\n\n   /**\n    * @method objectByAlias()\n    * return ABObject search by alias name\n    *\n    * @param {string} - alias name\n    * @return {ABClassObject}\n    */\n   objectByAlias(alias) {\n      var objID = this.alias2Obj[alias];\n      if (objID) {\n         return this.objects((o) => o.id == objID)[0];\n      }\n      return null;\n   }\n\n   /**\n    * @method objectByID()\n    * return ABObject search by ID\n    * @param {string} objID\n    *        The requested {ABObject}.id of the object to return.\n    * @return {ABObject} | null\n    */\n   objectByID(objID) {\n      if (objID) {\n         return this.objects((o) => o.id == objID)[0];\n      }\n      return null;\n   }\n\n   /**\n    * @method links()\n    *\n    * return an array of links for this Query.\n    *\n    * @return {array}\n    */\n   links(filter = () => true) {\n      return (this._links || []).filter(filter);\n   }\n\n   /**\n    * @method importJoins\n    * instantiate a set of joins from the given attributes.\n    * Our joins contain a set of ABObject URLs that should already be created in our Application.\n    * @param {Object} settings The different field urls for each field\n    *\t\t\t\t\t{ }\n    */\n   importJoins(settings) {\n      // copy join settings\n      this._joins = this.AB.cloneDeep(settings);\n\n      var uniqueObjectIDs = {};\n      // { obj.id : obj.id }\n      // a hash of object.ids for all the relevant ABObjects necessary for this\n      // ABObjectQuery\n\n      var newLinks = [];\n      // {array} of link definitions\n      // build the operating values for this._links\n\n      let storeObject = (object, alias) => {\n         if (!object) return;\n\n         // var inThere = newObjects.filter(obj => obj.id == object.id && obj.alias == alias ).length > 0;\n         // if (!inThere) {\n         // newObjects[alias] = object;\n         // this.obj2Alias[object.id] = alias;\n         this.alias2Obj[alias] = object.id;\n         uniqueObjectIDs[object.id] = object.id;\n         // newObjects.push({\n         // \talias: alias,\n         // \tobject: object\n         // });\n         // }\n      };\n\n      let storeLinks = (links) => {\n         (links || []).forEach((link) => {\n            // var inThere = newLinks.filter(l => l.fieldID == link.fieldID).length > 0;\n            // if (!inThere) {\n            newLinks.push(link);\n            // }\n         });\n      };\n\n      let processJoin = (baseObject, joins) => {\n         if (!baseObject) return;\n\n         (joins || []).forEach((link) => {\n            // Convert our saved settings:\n            //\t{\n            //\t\talias: \"\",\t\t\t\t\t\t\t// the alias name of table - use in SQL command\n            //\t\tobjectID: \"uuid\",\t\t\t\t\t// id of the connection object\n            //\t\tlinks: [\n            //\t\t\t{\n            //\t\t\t\talias: \"\",\t\t\t\t\t\t\t// the alias name of table - use in SQL command\n            //\t\t\t\tfieldID: \"uuid\",\t\t\t\t\t// uhe connection field of the object we are joining with.\n            //\t\t\t\ttype:[left, right, inner, outer]\t// join type: these should match the names of the knex methods\n            //\t\t\t\t\t\t=> innerJoin, leftJoin, leftOuterJoin, rightJoin, rightOuterJoin, fullOuterJoin\n            //\t\t\t\tlinks: [\n            //\t\t\t\t\t...\n            //\t\t\t\t]\n            //\t\t\t}\n            //\t\t]\n            //\t},\n\n            var linkField = baseObject.fieldByID(link.fieldID);\n            if (!linkField) {\n               this.emit(\"warning\", \"could not resolve our linkField\", {\n                  link,\n               });\n               return;\n            }\n\n            // track our linked object\n            var linkObject = this.AB.objectByID(linkField.settings.linkObject);\n            if (!linkObject) {\n               this.emit(\n                  \"warning\",\n                  \"could not resolve our linked field -> linkObject\",\n                  {\n                     link,\n                  }\n               );\n               return;\n            }\n\n            storeObject(linkObject, link.alias);\n\n            storeLinks(link.links);\n\n            processJoin(linkObject, link.links);\n         });\n      };\n\n      // if (!this._joins.objectURL)\n      // \t// TODO: this is old query version\n      // \treturn;\n\n      // store the root object\n      var rootObject = this.objectBase();\n      if (!rootObject) {\n         // this._objects = newObjects;\n         this.emit(\"warning\", \"could not resolve our base object\", {\n            objectID: this._joins?.objectID,\n         });\n         return;\n      }\n\n      storeObject(rootObject, \"BASE_OBJECT\");\n\n      storeLinks(settings.links);\n\n      processJoin(rootObject, settings.links);\n\n      // this._objects = newObjects;\n      this._links = newLinks;\n      this.objectIDs = Object.keys(uniqueObjectIDs);\n   }\n\n   /**\n    * @method exportJoins\n    * save our list of objects into our format for persisting on the server\n    * @param {array} settings\n    */\n   exportJoins() {\n      return this.AB.cloneDeep(this._joins || {});\n   }\n\n   ///\n   /// Working with Client Components:\n   ///\n\n   /**\n    * @method model\n    * return a Model object that will allow you to interact with the data for\n    * this ABObjectQuery.\n    */\n   model() {\n      var model = new ABModelQuery(this);\n\n      // default the context of this model's operations to this object\n      model.contextKey(this.constructor.contextKey());\n      model.contextValues({ id: this.id }); // the datacollection.id\n\n      return model;\n   }\n\n   /**\n    * @method canFilterObject\n    * evaluate the provided object to see if it can directly be filtered by this\n    * query.\n    * @param {ABObject} object\n    * @return {bool}\n    */\n   canFilterObject(object) {\n      if (!object) return false;\n\n      // I can filter this object if it is one of the objects in my joins\n      return (\n         this.objects((obj) => {\n            return obj.id == object.id;\n         }).length > 0\n      );\n   }\n\n   /**\n    * @method canFilterField\n    * evaluate the provided field to see if it can be filtered by this\n    * query.\n    * @param {ABObject} object\n    * @return {bool}\n    */\n   canFilterField(field) {\n      if (!field) return false;\n\n      // I can filter a field if it's object OR the object it links to can be filtered:\n      let object = field.object;\n      // Transition:\n      // let linkedObject = this.objects(\n      //    (obj) => obj.id == field.settings.linkObject\n      // )[0];\n      var linkedObject = field.datasourceLink;\n\n      return this.canFilterObject(object) || this.canFilterObject(linkedObject);\n   }\n\n   /**\n    * @method urlPointer()\n    * return the url pointer that references this object. This url pointer\n    * should be able to be used by this.AB.urlResolve() to return\n    * this object.\n    *\n    * @param {boolean} acrossApp - flag to include application id to url\n    *\n    * @return {string}\n    */\n   urlPointer(acrossApp) {\n      console.error(\n         \"ABQueryCore.urlPointer(): Depreciated: Where is this being called?\"\n      );\n      return this.application.urlQuery(acrossApp) + this.id;\n   }\n\n   /**\n    * @method isGroup\n    *\n    * @return {boolean}\n    */\n   get isGroup() {\n      return this.settings.grouping || false;\n   }\n\n   /**\n    * @method isReadOnly\n    *\n    * @return {boolean}\n    */\n   get isReadOnly() {\n      return true;\n   }\n\n   /**\n    * @method isDisabled()\n    * check this contains removed objects or fields\n    *\n    * @return {boolean}\n    */\n   isDisabled() {\n      return this.disabled || false;\n   }\n\n   get workspaceFilterConditions() {\n      let filterConditions = super.workspaceFilterConditions;\n      if (\n         filterConditions == null ||\n         filterConditions.rules == null ||\n         !filterConditions.rules.length\n      ) {\n         filterConditions = this.where;\n      }\n\n      return filterConditions;\n   }\n};\n","// import ABApplication from \"./ABApplication\"\n\nvar ABMLClass = require(\"../platform/ABMLClass\");\nconst _concat = require(\"lodash/concat\");\n\nmodule.exports = class ABProcessCore extends ABMLClass {\n   constructor(attributes, AB) {\n      super([\"label\"], AB);\n\n      this.fromValues(attributes);\n   }\n\n   ///\n   /// Static Methods\n   ///\n   /// Available to the Class level object.  These methods are not dependent\n   /// on the instance values of the Application.\n   ///\n\n   fromValues(attributes) {\n      /*\n    {\n      id: uuid(),\n      name: 'name',\n      type: 'xxxxx',\n      json: \"{json}\"\n    }\n    */\n      this.id = attributes.id;\n      this.name = attributes.name || \"\";\n      this.type = attributes.type || \"process\";\n      this.xmlDefinition = attributes.xmlDefinition || null;\n\n      // this.json = attributes.json || null;\n      this._elements = {};\n      (attributes.elementIDs || []).forEach((eID) => {\n         var ele = this.AB.processElementNew(eID, this);\n         if (ele) {\n            this._elements[eID] = ele;\n         }\n      });\n\n      this._connections = attributes.connections || {};\n\n      super.fromValues(attributes); // perform translation on this object.\n      // NOTE: keep this at the end of .fromValues();\n\n      if (!this.label) {\n         this.label = this.name;\n      }\n   }\n\n   /**\n    * @method toObj()\n    * properly compile the current state of this ABProcess instance\n    * into the values needed for saving to the DB.\n    * @return {json}\n    */\n   toObj() {\n      // default label value\n      if (!this.label) {\n         this.label = this.name;\n      }\n\n      // OP.Multilingual.unTranslate(this, this, [\"label\"]);\n      var data = super.toObj();\n\n      var fieldsToSave = [\"id\", \"name\", \"xmlDefinition\"];\n      fieldsToSave.forEach((f) => {\n         data[f] = this[f];\n      });\n\n      data.elementIDs = [];\n      for (var e in this._elements) {\n         data.elementIDs.push(this._elements[e].id);\n      }\n\n      data.connections = this._connections;\n\n      // data.participantIDs = [];\n      // for (var p in this._participants) {\n      //     data.participantIDs.push(this._participants[p].id);\n      // }\n\n      return data;\n   }\n\n   //\n   // XML Model\n   //\n\n   /**\n    * modelDefinition()\n    * return the current xml definition for this process\n    * @return {string}\n    */\n   modelDefinition() {\n      return this.xmlDefinition;\n   }\n\n   /**\n    * modelNew()\n    * initialze our xml definition to a new state.\n    * @return {string}\n    */\n   modelNew() {\n      this.xmlDefinition = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<bpmn2:definitions xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:bpmn2=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\" xsi:schemaLocation=\"http://www.omg.org/spec/BPMN/20100524/MODEL BPMN20.xsd\" id=\"process-def-${this.id}\" targetNamespace=\"http://bpmn.io/schema/bpmn\">\n  <bpmn2:process id=\"Process_1\" isExecutable=\"true\">\n    <bpmn2:startEvent id=\"StartEvent_1\"/>\n  </bpmn2:process>\n  <bpmndi:BPMNDiagram id=\"BPMNDiagram_1\">\n    <bpmndi:BPMNPlane id=\"BPMNPlane_1\" bpmnElement=\"Process_1\">\n      <bpmndi:BPMNShape id=\"_BPMNShape_StartEvent_2\" bpmnElement=\"StartEvent_1\">\n        <dc:Bounds height=\"36.0\" width=\"36.0\" x=\"412.0\" y=\"240.0\"/>\n      </bpmndi:BPMNShape>\n    </bpmndi:BPMNPlane>\n  </bpmndi:BPMNDiagram>\n</bpmn2:definitions>`;\n\n      //// TODO: create a default Start Task here??\n   }\n\n   /**\n    * modelUpdate()\n    * update our xml definition from the provided description.\n    * @param {string} xml  bpmn2 xml definition from our modeler.\n    * @return {string}\n    */\n   modelUpdate(xml) {\n      this.xmlDefinition = xml;\n   }\n\n   //\n   // Diagram Elements\n   //\n\n   /**\n    * connections()\n    * return an array of connections that describe the relationships between\n    * our process elements.\n    * @param {fn} fn an iterator that returns true if the provided element\n    *                should be returned.\n    * @return [{SimpleConnectionObj}]\n    */\n   connections(fn) {\n      if (!fn)\n         fn = () => {\n            return true;\n         };\n      var allConnections = Object.keys(this._connections).map((e) => {\n         return this._connections[e];\n      });\n      return allConnections.filter(fn);\n   }\n\n   /**\n    * connectionForDiagramID()\n    * return the connection for the given diagram id\n    * @param {string} dID\n    *        the bpmn:Element diagram id\n    */\n   connectionForDiagramID(dID) {\n      return this.connections((t) => {\n         return t.id == dID;\n      })[0];\n   }\n\n   /**\n    * connectionsIncoming()\n    * return the connections that are entering this Element\n    * @param {string} dID\n    *        the bpmn:Element diagram id\n    */\n   connectionsIncoming(dID) {\n      return this.connections((c) => {\n         return c.to == dID;\n      });\n   }\n\n   /**\n    * connectionsOutgoing()\n    * return the connections that are leaving this Element\n    * @param {string} dID\n    *        the bpmn:Element diagram id\n    */\n   connectionsOutgoing(dID) {\n      return this.connections((c) => {\n         return c.from == dID;\n      });\n   }\n\n   /**\n    * connectionRemove()\n    * remove the connection info for the given bpmn:element\n    * @param {BMPNDiagramOBJ} element\n    *        the {element} returned from the BPMN.io modeling library event.\n    */\n   connectionRemove(element) {\n      delete this._connections[element.id];\n   }\n\n   /**\n    * connectionSimplyElement()\n    * given a BPMN diagram element, return a simplified object that describes\n    * the connection between two elements.\n    * @param {BMPNDiagramOBJ} element\n    *        the {element} returned from the BPMN.io modeling library event.\n    * @return {SimpleConnectionObj}\n    *        .id : {string} diagram id of the connection element\n    *        .type : {string} the type of connection\n    *        .from : {string} the diagram id of the source element\n    *        .to : {string} the diagram id of the dest element\n    */\n   connectionSimplyElement(element) {\n      var bo = element.businessObject;\n      var from = null;\n      if (bo.sourceRef) {\n         from = bo.sourceRef.id;\n      }\n\n      var to = null;\n      if (bo.targetRef) {\n         to = bo.targetRef.id;\n      }\n\n      var connection = {\n         id: element.id,\n         type: element.type,\n         from: from,\n         to: to,\n      };\n      return connection;\n   }\n\n   /**\n    * connectionUpsert()\n    * add or update the connection information for the given bpmn:element\n    * @param {BMPNDiagramOBJ} element\n    *        the {element} returned from the BPMN.io modeling library event.\n    */\n   connectionUpsert(element) {\n      var simpleConn = this.connectionSimplyElement(element);\n      if (simpleConn.from && simpleConn.to) {\n         this._connections[simpleConn.id] = simpleConn;\n      } else {\n         // this connection is no longer connecting anything thing.\n         // it is being removed.\n         this.connectionRemove(element);\n      }\n   }\n\n   /**\n    * elements()\n    * return an array of elements that match the given filter (or all elements\n    * if no filter is provided).\n    * @param {fn} fn an iterator that returns true if the provided element\n    *                should be returned.\n    * @return {[ABProcessTask, ABProcessParticipant, etc...]}\n    */\n   elements(fn = () => true) {\n      var allElements = Object.keys(this._elements).map((e) => {\n         return this._elements[e];\n      });\n      return allElements.filter(fn);\n   }\n\n   /**\n    * elementAdd()\n    * insert an element to be tracked by this process.\n    * @param {ABProcessElement} element\n    *        the full instance of an ABProcessElement to track.\n    */\n   elementAdd(element) {\n      this._elements[element.id || element.diagramID] = element;\n   }\n\n   /**\n    * elementForDiagramID()\n    * return the object that is tied to the given xml diagram ID.\n    * @param {string} dID the diagram ID\n    * @return {ABProcess[OBJ]}\n    */\n   elementForDiagramID(dID) {\n      return this.elements((t) => {\n         return t.diagramID == dID;\n      })[0];\n   }\n\n   /**\n    * elementRemove()\n    * remove an element from being tracked by this process.\n    * @param {obj|ABProcessElement} def\n    *        a definition of, or full Object instance of the ABProcessElement\n    *        to remove.\n    */\n   elementRemove(def) {\n      delete this._elements[def.id || def.diagramID];\n   }\n\n   /**\n    * isTriggeredBy()\n    * scan our tasks and see if we have a \"trigger\" task that responds to\n    * the provided key.\n    * @param {string} key the trigger key\n    * @return {bool}\n    */\n   isTriggeredBy(key) {\n      return this.taskForTriggerKey(key) != null;\n   }\n\n   /**\n    * connectionPreviousTask()\n    * return the ABProcessElement(s) that was a previous Element\n    * (eg connects to) this element.\n    * @param {ABProcessElement} currElement\n    * @return {array}\n    */\n   connectionPreviousTask(currElement) {\n      var elements = [];\n      var prevConnections = this.connections((c) => {\n         return c.to == currElement.diagramID;\n      });\n      prevConnections.forEach((c) => {\n         var element = this.elements((e) => {\n            return e.diagramID == c.from;\n         })[0];\n         if (element) {\n            elements.push(element);\n         }\n      });\n      return elements;\n   }\n\n   /**\n    * processData()\n    * return an array of avaiable ABObjects that are represented\n    * by the data previous ProcessElements are working with.\n    * @param {ABProcessElement} currElement\n    *        the ABProcessElement that is requesting the data.\n    * @return {array} | null\n    */\n   processData(currElement, params) {\n      var tasksToAsk = this.connectionPreviousTask(currElement);\n      var values = queryPreviousTasks(tasksToAsk, \"processData\", params, this);\n      return values.length > 0\n         ? values.length > 1\n            ? values\n            : values[0]\n         : null;\n   }\n\n   /**\n    * processDataFields()\n    * return an array of avaiable data fields that this element\n    * can request from other ProcessElements.\n    * Different Process Elements can make data available to other\n    * process Elements.\n    * @param {ABProcessElement} currElement\n    *        the ABProcessElement that is requesting the data.\n    * @return {array} | null\n    */\n   processDataFields(currElement) {\n      var tasksToAsk = this.connectionPreviousTask(currElement);\n      var fields = queryPreviousTasks(\n         tasksToAsk,\n         \"processDataFields\",\n         null,\n         this\n      );\n      return fields.length > 0 ? fields : null;\n   }\n\n   /**\n    * processDataObjects()\n    * return an array of avaiable ABObjects that are represented\n    * by the data previous ProcessElements are working with.\n    * @param {ABProcessElement} currElement\n    *        the ABProcessElement that is requesting the data.\n    * @return {array} | null\n    */\n   processDataObjects(currElement) {\n      var tasksToAsk = this.connectionPreviousTask(currElement);\n      var fields = queryPreviousTasks(\n         tasksToAsk,\n         \"processDataObjects\",\n         null,\n         this\n      );\n      return fields.length > 0 ? fields : null;\n   }\n\n   /**\n    * taskForTriggerKey()\n    * return one or more tasks that respond to the given trigger key\n    * @param {string} key a trigger key\n    * @return {[ABProcessTask,...]}\n    */\n   taskForTriggerKey(key) {\n      var trigger = this.elements((t) => {\n         return t.triggerKey == key;\n      })[0];\n      if (trigger) {\n         return trigger;\n      } else {\n         return null;\n      }\n   }\n\n   //\n   // Participants\n   //\n\n   // /**\n   //  * participants()\n   //  * return an array of participants that match the given filter (or all tasks\n   //  * if no filter is provided).\n   //  * @param {fn} fn an iterator that returns true if the provided participants\n   //  *                should be returned.\n   //  * @return {[ABProcessParticipant,...]}\n   //  */\n   // participants(fn) {\n   //     if (!fn)\n   //         fn = () => {\n   //             return true;\n   //         };\n   //     var all = Object.keys(this._participants).map((p) => {\n   //         return this._participants[p];\n   //     });\n   //     return all.filter(fn);\n   // }\n\n   // /**\n   //  * participantsForDiagramID()\n   //  * return the participant(s) that are tied to the given xml diagram ID.\n   //  * @param {string} dID the diagram ID\n   //  * @return {[ABProcessParticipant,...]}\n   //  */\n   // participantsForDiagramID(dID) {\n   //     return this.participants((p) => {\n   //         return p.diagramID == dID;\n   //     });\n   // }\n};\n\nvar queryPreviousTasks = (\n   list,\n   method,\n   param,\n   process,\n   responses,\n   processedIDs\n) => {\n   // recursive fn() to step through our graph and compile\n   // results.\n   if (typeof responses == \"undefined\") {\n      responses = [];\n   }\n   if (typeof processedIDs == \"undefined\") {\n      processedIDs = [];\n   }\n   if (list.length == 0) {\n      return responses;\n   } else {\n      // get next task\n      var task = list.shift();\n\n      // if we haven't already done task:\n      if (processedIDs.indexOf(task.diagramID) == -1) {\n         // mark this task as having been processed\n         processedIDs.push(task.diagramID);\n\n         // get any field's it provides\n         var value = task[method].apply(task, param);\n         if (value === null) value = [];\n         responses = _concat(responses, value);\n\n         // add any previous tasks to our list\n         list = _concat(list, process.connectionPreviousTask(task));\n      }\n\n      // process next Task\n      return queryPreviousTasks(\n         list,\n         method,\n         param,\n         process,\n         responses,\n         processedIDs\n      );\n   }\n};\n","/*\n * ABViewManager\n *\n * An interface for managing the different ABViews available in our AppBuilder.\n *\n */\n\nvar AllViews = [\n   require(\"../platform/views/ABView\"),\n   require(\"../platform/views/ABViewCarousel\"),\n   require(\"../platform/views/ABViewChart\"),\n   require(\"../platform/views/ABViewChartArea\"),\n   require(\"../platform/views/ABViewChartBar\"),\n   require(\"../platform/views/ABViewChartLine\"),\n   require(\"../platform/views/ABViewChartPie\"),\n   require(\"../platform/views/ABViewComment\"),\n   require(\"../platform/views/ABViewConditionalContainer\"),\n   require(\"../platform/views/ABViewConnectDataFilter\"),\n   require(\"../platform/views/ABViewContainer\"),\n   require(\"../platform/views/ABViewCSVExporter\"),\n   require(\"../platform/views/ABViewCSVImporter\"),\n   require(\"../platform/views/ABViewDataview\"),\n   require(\"../platform/views/ABViewDocxBuilder\"),\n   require(\"../platform/views/ABViewGrid\"),\n   require(\"../platform/views/ABViewImage\"),\n   require(\"../platform/views/ABViewLabel\"),\n   require(\"../platform/views/ABViewLayout\"),\n   require(\"../platform/views/ABViewList\"),\n   require(\"../platform/views/ABViewMenu\"),\n   require(\"../platform/views/ABViewPage\"),\n   require(\"../platform/views/ABViewPivot\"),\n   require(\"../platform/views/ABViewTab\"),\n   require(\"../platform/views/ABViewText\"),\n\n   //\n   // Special Editors\n   //\n   require(\"../platform/views/ABViewGantt\"),\n   require(\"../platform/views/ABViewKanban\"),\n   require(\"../platform/views/ABViewReportsManager\"),\n\n   //\n   // Detail Components\n   //\n   require(\"../platform/views/ABViewDetail\"),\n   require(\"../platform/views/ABViewDetailCheckbox\"),\n   require(\"../platform/views/ABViewDetailConnect\"),\n   require(\"../platform/views/ABViewDetailCustom\"),\n   require(\"../platform/views/ABViewDetailImage\"),\n   // require(\"../platform/views/ABViewDetailSelectivity\"),\n   require(\"../platform/views/ABViewDetailText\"),\n   require(\"../platform/views/ABViewDetailTree\"),\n\n   //\n   // Form Components\n   //\n   require(\"../platform/views/ABViewForm\"),\n   require(\"../platform/views/ABViewFormButton\"),\n   require(\"../platform/views/ABViewFormCheckbox\"),\n   require(\"../platform/views/ABViewFormConnect\"),\n   require(\"../platform/views/ABViewFormCustom\"),\n   require(\"../platform/views/ABViewFormDatepicker\"),\n   require(\"../platform/views/ABViewFormNumber\"),\n   require(\"../platform/views/ABViewFormReadonly\"),\n   require(\"../platform/views/ABViewFormSelectMultiple\"),\n   require(\"../platform/views/ABViewFormSelectSingle\"),\n   require(\"../platform/views/ABViewFormTextbox\"),\n   require(\"../platform/views/ABViewFormTree\"),\n];\n\n/*\n * Views\n * A name => ABView  hash of the different ABViews available.\n */\nvar Views = {};\nAllViews.forEach((v) => {\n   if (v.default?.common) {\n      v = v.default;\n   }\n   Views[v.common().key] = v;\n});\n\nmodule.exports = class ABViewManagerCore {\n   /**\n    * @function allViews\n    * return all the currently defined ABViews in an array.\n    * @return [{ABView},...]\n    */\n   static allViews(fn = () => true) {\n      var views = [];\n      for (var v in Views) {\n         var V = Views[v];\n         if (fn(V)) {\n            views.push(V);\n         }\n      }\n      return views;\n   }\n\n   /**\n    * @function newView\n    * return an instance of an ABView based upon the values.key value.\n    * @return {ABView}\n    */\n   static newView(values, application, parent) {\n      parent = parent || null;\n\n      if (values.key == \"detailselectivity\") {\n         values.key = \"detailconnect\";\n      }\n\n      //\t\tif ((values.key) && (Views[values.key])) {\n      if (values.key) {\n         if (!Views[values.key]) {\n            console.error(\n               \"!! View[\" +\n                  values.key +\n                  \"] not yet defined.  Have an ABView instead:\"\n            );\n            return new Views[\"view\"](values, application, parent);\n         }\n\n         return new Views[values.key](values, application, parent);\n      } else {\n         var err = new Error(`Unknown view key [${values.key}]`);\n         console.error(err); // show the stack.\n         console.error({\n            error: err,\n            values: values,\n            application: application,\n         });\n         return null;\n      }\n   }\n\n   static viewClass(key) {\n      if (Views[key]) {\n         return Views[key];\n      }\n      console.error(`Unknown View Key[${key}]`);\n      return;\n   }\n};\n","const ABComponent = require(\"../platform/ABComponent\");\n// const ABObjectQuery = require(\"../platform/ABObjectQuery\");\n\n/**\n *  support get data from objects and queries\n */\nfunction getFieldVal(rowData, field) {\n   if (!field) return null;\n   if (!field.columnName) return null;\n   var columnName = field.columnName;\n\n   var value = null;\n   if (columnName.indexOf(\".\") > -1) {\n      let colName = columnName.split(\".\")[1];\n      value = rowData[columnName] || rowData[colName];\n   } else {\n      value = rowData[columnName];\n   }\n\n   if (typeof value != \"undefined\") {\n      return value;\n   }\n\n   // otherwise, this might be a process check where the rowData keys have\n   // '[diagramID].[field.id]'\n   for (var k in rowData) {\n      var key = k.split(\".\")[1];\n      if (key && key == field.id) {\n         value = rowData[k];\n      }\n   }\n   return value;\n}\n\nfunction getConnectFieldValue(rowData, field) {\n   let connectedVal = \"\";\n\n   if (rowData) {\n      let relationName = field.relationName();\n      if (rowData[relationName]) {\n         connectedVal =\n            (field.indexField\n               ? rowData[relationName][field.indexField.columnName]\n               : null) ?? // custom index\n            (field.indexField2\n               ? rowData[relationName][field.indexField2.columnName]\n               : null) ?? // custom index 2\n            rowData[relationName].id ??\n            rowData[relationName];\n      } else {\n         let fieldVal = getFieldVal(rowData, field);\n         if (fieldVal != null) {\n            connectedVal = fieldVal;\n         }\n      }\n   }\n   return connectedVal;\n}\n\nmodule.exports = class FilterComplexCore extends ABComponent {\n   constructor(idBase, AB) {\n      idBase = idBase || \"ab_filter_complex\";\n\n      if (typeof AB === \"undefined\") {\n         console.error(\"FilterComplexCore(): being called without an AB!\");\n      }\n\n      super(null, idBase, AB);\n\n      this.Account = { username: \"??\" };\n      this._settings = {};\n      this.condition = {};\n      // var batchName; // we need to revert to this default when switching away from a in/by query field\n\n      this._QueryFields = [];\n      this._Fields;\n\n      // internal business logic\n      var _logic = (this._logic = {\n         callbacks: {\n            onChange: () => {},\n         },\n\n         removeHtmlTags: function (text) {\n            var div = document.createElement(\"div\");\n            div.innerHTML = text;\n\n            return div.textContent || div.innerText || \"\";\n         },\n      });\n\n      // Interface methods for parent component:\n      // this.objectLoad = _logic.objectLoad;\n      // this.viewLoad = _logic.viewLoad;\n      // this.setValue = _logic.setValue;\n      // this.isValid = _logic.isValid;\n   }\n\n   init(options) {\n      if (options?.showObjectName) {\n         this._settings.showObjectName = options.showObjectName;\n      }\n   }\n\n   /**\n    * @method isValid\n    * validate the row data is valid filter condition\n    *\n    * @param rowData {Object} - data row\n    */\n   isValid(rowData) {\n      var condition = this.condition;\n      var _logic = this._logic;\n\n      // If no conditions, then return true\n      if (\n         condition == null ||\n         condition.rules == null ||\n         condition.rules.length == 0\n      )\n         return true;\n\n      if (rowData == null) return false;\n\n      var result = condition.glue === \"and\" ? true : false;\n\n      condition.rules.forEach((filter) => {\n         if (!filter.key || !filter.rule) return;\n\n         var fieldInfo = (this._Fields || []).filter(\n            (f) => f.id == filter.key\n         )[0];\n         if (!fieldInfo) return;\n\n         var condResult;\n\n         // Filters that have \"this_object\" don't have a fieldInfo.key, so in that case,\n         // define a special .key == \"this_object\"\n         var ruleFieldType = fieldInfo.key;\n         if (typeof fieldInfo.key == \"undefined\") {\n            if (fieldInfo.id != \"this_object\") {\n               fieldInfo.key = \"connectField\"; // if you are looking at the parent object it won't have a key to analyze\n               ruleFieldType = fieldInfo.key;\n            } else ruleFieldType = \"this_object\";\n         }\n         let value;\n\n         if (fieldInfo.relationName) {\n            value = getConnectFieldValue(rowData, fieldInfo);\n         } else {\n            value = getFieldVal(rowData, fieldInfo);\n         }\n\n         switch (ruleFieldType) {\n            case \"string\":\n            case \"LongText\":\n            case \"email\":\n               if (value == null) value = \"\";\n\n               condResult = this.textValid(value, filter.rule, filter.value);\n               break;\n            case \"date\":\n            case \"datetime\":\n               condResult = this.dateValid(value, filter.rule, filter.value);\n               break;\n            case \"number\":\n               condResult = this.numberValid(value, filter.rule, filter.value);\n               break;\n            case \"list\":\n               condResult = this.listValid(value, filter.rule, filter.value);\n               break;\n            case \"boolean\":\n               condResult = this.booleanValid(value, filter.rule, filter.value);\n               break;\n            case \"user\":\n               condResult = this.userValid(value, filter.rule, filter.value);\n               break;\n            case \"connectField\":\n            case \"connectObject\":\n               condResult = this.connectFieldValid(\n                  rowData,\n                  fieldInfo,\n                  filter.rule,\n                  filter.value\n               );\n               break;\n            case \"this_object\":\n               condResult = _logic.thisObjectValid(\n                  rowData,\n                  filter.rule,\n                  filter.value\n               );\n               break;\n         }\n\n         if (condition.glue === \"and\") {\n            result = result && condResult;\n         } else {\n            result = result || condResult;\n         }\n      });\n\n      return result;\n   }\n\n   textValid(value, rule, compareValue) {\n      var result = false;\n\n      value = value.trim().toLowerCase();\n      value = this._logic.removeHtmlTags(value); // remove html tags - rich text editor\n\n      compareValue = compareValue.trim().toLowerCase().replace(/  +/g, \" \");\n\n      // support \"john smith\" => \"john\" OR/AND \"smith\"\n      var compareArray = compareValue.split(\" \");\n\n      switch (rule) {\n         case \"contains\":\n            compareArray.forEach((val) => {\n               if (result == false)\n                  // OR\n                  result = value.indexOf(val) > -1;\n            });\n            break;\n         case \"not_contains\":\n            result = true;\n            compareArray.forEach((val) => {\n               if (result == true)\n                  // AND\n                  result = value.indexOf(val) < 0;\n            });\n            break;\n         case \"equals\":\n            compareArray.forEach((val) => {\n               if (result == false)\n                  // OR\n                  result = value == val;\n            });\n            break;\n         case \"not_equal\":\n            result = true;\n            compareArray.forEach((val) => {\n               if (result == true)\n                  // AND\n                  result = value != val;\n            });\n            break;\n         case \"is_empty\":\n            result = value == \"\" || value == null;\n            break;\n         case \"is_not_empty\":\n            result = value != \"\" && value != null;\n            break;\n         default:\n            result = this.queryFieldValid(value, rule, compareValue);\n            break;\n      }\n\n      return result;\n   }\n\n   dateValid(value, rule, compareValue) {\n      var result = false;\n\n      if (!(value instanceof Date)) value = new Date(value);\n\n      if (!(compareValue instanceof Date))\n         compareValue = new Date(compareValue);\n\n      switch (rule) {\n         case \"less\":\n            result = value < compareValue;\n            break;\n         case \"greater\":\n            result = value > compareValue;\n            break;\n         case \"less_or_equal\":\n            result = value <= compareValue;\n            break;\n         case \"greater_or_equal\":\n            result = value >= compareValue;\n            break;\n         default:\n            result = this.queryFieldValid(value, rule, compareValue);\n            break;\n      }\n\n      return result;\n   }\n\n   numberValid(value, rule, compareValue) {\n      var result = false;\n\n      value = Number(value);\n      compareValue = Number(compareValue);\n\n      switch (rule) {\n         case \"equals\":\n            result = value == compareValue;\n            break;\n         case \"not_equal\":\n            result = value != compareValue;\n            break;\n         case \"less\":\n            result = value < compareValue;\n            break;\n         case \"greater\":\n            result = value > compareValue;\n            break;\n         case \"less_or_equal\":\n            result = value <= compareValue;\n            break;\n         case \"greater_or_equal\":\n            result = value >= compareValue;\n            break;\n         default:\n            result = this.queryFieldValid(value, rule, compareValue);\n            break;\n      }\n\n      return result;\n   }\n\n   listValid(value, rule, compareValue) {\n      var result = false;\n\n      // compareValue = compareValue.toLowerCase();\n\n      if (!Array.isArray(compareValue)) compareValue = [compareValue];\n\n      switch (rule) {\n         case \"equals\":\n            if (value) result = compareValue.indexOf(value) > -1;\n            break;\n         case \"not_equal\":\n            if (value) result = compareValue.indexOf(value) < 0;\n            else result = true;\n            break;\n         default:\n            result = this.queryFieldValid(value, rule, compareValue);\n            break;\n      }\n\n      return result;\n   }\n\n   booleanValid(value, rule, compareValue) {\n      var result = false;\n\n      switch (rule) {\n         case \"equals\":\n            result = value == compareValue;\n            break;\n         default:\n            result = this.queryFieldValid(value, rule, compareValue);\n            break;\n      }\n\n      return result;\n   }\n\n   userValid(value, rule, compareValue) {\n      if (!value) return false;\n      var result = false;\n\n      // if (Array.isArray(value)) value = [value];\n\n      switch (rule) {\n         case \"is_current_user\":\n            result = value == this.Account.username;\n            break;\n         case \"is_not_current_user\":\n            result = value != this.Account.username;\n            break;\n         case \"contain_current_user\":\n            if (!Array.isArray(value)) value = [value];\n\n            result =\n               value.filter((v) => (v.username || v) == this.Account.username)\n                  .length > 0;\n            break;\n         case \"not_contain_current_user\":\n            if (!Array.isArray(value)) value = [value];\n\n            result =\n               value.filter((v) => (v.username || v) == this.Account.username)\n                  .length < 1;\n            break;\n         case \"equals\":\n            result = value.indexOf(compareValue) > -1;\n            break;\n         case \"not_equal\":\n            result = value.indexOf(compareValue) < 0;\n            break;\n         default:\n            result = this.queryFieldValid(value, rule, compareValue);\n            break;\n      }\n\n      return result;\n   }\n\n   queryFieldValid(rowData, rule, compareValue) {\n      var result = false;\n\n      if (!compareValue) return result;\n\n      // queryId:fieldId\n      var queryId = compareValue.split(\":\")[0],\n         fieldId = compareValue.split(\":\")[1];\n\n      // if no query\n      var query = this.AB.queries((q) => q.id == queryId)[0];\n      if (!query) return result;\n\n      // if no field\n      var field = query.fields((f) => f.id == fieldId)[0];\n      if (!field) return result;\n\n      let qIdBase = \"{idBase}-query-field-{id}\"\n            .replace(\"{idBase}\", this.idBase)\n            .replace(\"{id}\", query.id),\n         inQueryFieldFilter = new this.constructor(qIdBase, this.AB);\n      inQueryFieldFilter.Account = this.Account;\n      inQueryFieldFilter.fieldsLoad(query.fields());\n      inQueryFieldFilter.setValue(query.workspaceFilterConditions);\n\n      switch (rule) {\n         case \"in_query_field\":\n            result = inQueryFieldFilter.isValid(rowData);\n            break;\n         case \"not_in_query_field\":\n            result = !inQueryFieldFilter.isValid(rowData);\n            break;\n      }\n\n      return result;\n   }\n\n   inQueryValid(rowData, rule, compareValue) {\n      let result = false;\n\n      if (!compareValue || !this.AB) return result;\n\n      // if no query\n      let query = this.AB.queries((q) => q.id == compareValue)[0];\n      if (!query) return result;\n\n      let qIdBase = \"{idBase}-query-{id}\"\n            .replace(\"{idBase}\", this.idBase)\n            .replace(\"{id}\", query.id),\n         inQueryFilter = new this.constructor(qIdBase, this.AB);\n      inQueryFilter.Account = this.Account;\n      inQueryFilter.fieldsLoad(query.fields());\n      inQueryFilter.setValue(query.workspaceFilterConditions);\n\n      switch (rule) {\n         case \"in_query\":\n            result = inQueryFilter.isValid(rowData);\n            break;\n         case \"not_in_query\":\n            result = !inQueryFilter.isValid(rowData);\n            break;\n      }\n\n      return result;\n   }\n\n   dataCollectionValid(value, rule, compareValue) {\n      var result = false;\n\n      if (!compareValue) return result;\n\n      let dc = this.AB.datacollections((d) => d.id == compareValue)[0];\n\n      switch (rule) {\n         case \"in_data_collection\":\n            if (!dc) return false;\n\n            result = dc.getData((d) => d.id == value.id).length > 0;\n            break;\n         case \"not_in_data_collection\":\n            if (!dc) return true;\n\n            result = dc.getData((d) => d.id == value.id).length < 1;\n            break;\n      }\n\n      return result;\n   }\n\n   connectFieldValid(rowData, field, rule, compareValue) {\n      let relationName = field.relationName();\n\n      let connectedVal = \"\";\n\n      if (rowData) {\n         if (rowData[relationName]) {\n            connectedVal = (\n               (field.indexField\n                  ? rowData[relationName][field.indexField.columnName]\n                  : null) ?? // custom index\n               (field.indexField2\n                  ? rowData[relationName][field.indexField2.columnName]\n                  : null) ?? // custom index 2\n               rowData[relationName].id ??\n               rowData[relationName]\n            )\n               .toString()\n               .toLowerCase();\n         } else {\n            let fieldVal = getFieldVal(rowData, field);\n            if (fieldVal != null) {\n               connectedVal = fieldVal;\n            }\n         }\n      }\n\n      let compareValueLowercase = (compareValue || \"\").toLowerCase();\n\n      switch (rule) {\n         case \"contains\":\n            return connectedVal.toString().indexOf(compareValueLowercase) > -1;\n         case \"not_contains\":\n            return connectedVal.toString().indexOf(compareValueLowercase) == -1;\n         case \"equals\":\n            return connectedVal == compareValueLowercase;\n         case \"not_equal\":\n            return connectedVal != compareValueLowercase;\n         case \"in_query\":\n         case \"not_in_query\":\n            return this.inQueryValid(rowData[relationName], rule, compareValue);\n         case \"is_current_user\":\n         case \"is_not_current_user\":\n         case \"contain_current_user\":\n         case \"not_contain_current_user\":\n            return this.userValid(connectedVal, rule, compareValue);\n         case \"is_empty\":\n            return (\n               rowData[relationName] == null ||\n               rowData[relationName].length < 1 ||\n               rowData[relationName] == \"\"\n            );\n         case \"is_not_empty\":\n            return (\n               rowData[relationName] != null &&\n               ((Array.isArray(rowData[relationName]) &&\n                  rowData[relationName].length > 0) ||\n                  rowData[relationName] != \"\")\n            );\n         case \"in_data_collection\":\n         case \"not_in_data_collection\":\n            return this.dataCollectionValid(connectedVal, rule, compareValue);\n      }\n   }\n\n   thisObjectValid(rowData, rule, compareValue) {\n      let result = false;\n\n      switch (rule) {\n         // if in_query condition\n         case \"in_query\":\n         case \"not_in_query\":\n            if (!this._Object) return result;\n\n            // if > 1 copy of this object in query ==> Error!\n            let query = this.AB.queries((q) => q.id == compareValue)[0];\n            if (!query) return result;\n\n            var listThisObjects = query.objects((o) => {\n               return o.id == this._Object.id;\n            });\n            if (listThisObjects.length > 1) {\n               // Alternative: choose the 1st instance of this object in the query, and make the compare on that.\n               // Be sure to warn the developer of the limitiations of an \"this_object\" \"in_query\"  when query has > 1 copy of\n               // this object as part of the query.\n\n               console.error(\n                  \"HEY!  Can't compare this_object to a query that has > 1 copy of that object!\"\n               );\n               return true;\n            }\n\n            // get this object's alias from the query\n            var alias = query.objectAlias(this._Object.id);\n\n            // make sure all my columns in rowData are prefixed by \"alias\".columnName\n            var newRowData = {};\n            Object.keys(rowData).forEach((key) => {\n               newRowData[`${alias}.${key}`] = rowData[key];\n            });\n\n            // then pass this on to the _logic.queryValid();\n            return this.inQueryValid(newRowData, rule, compareValue);\n\n         // if in_datacollection condition\n         case \"in_data_collection\":\n         case \"not_in_data_collection\":\n            // send rowData, null to datacollectionValid()\n            return this.dataCollectionValid(rowData, rule, compareValue);\n      }\n   }\n\n   processFieldsLoad(processFields = []) {\n      if (processFields && !Array.isArray(processFields)) {\n         processFields = [processFields];\n      }\n      this._ProcessFields = processFields;\n\n      this.uiInit();\n   }\n\n   /**\n    * @method fieldsLoad\n    * set fields\n    *\n    * @param array {ABField}\n    * @param object {ABObject} [optional]\n    */\n   fieldsLoad(fields = [], object = null) {\n      this._Fields = fields.filter(\n         (f) => f && f.fieldIsFilterable && f.fieldIsFilterable()\n      );\n      this._QueryFields = this._Fields\n         ? this._Fields.filter((f) => f && f.isConnection && f.key != \"user\")\n         : [];\n\n      // insert our 'this object' entry if an Object was given.\n      if (object) {\n         this._Object = object;\n\n         // insert our uuid in addition to the rest of our fields\n         let thisObjOption = {\n            id: \"this_object\",\n            label: object.label,\n            key: \"uuid\",\n         };\n\n         // If object is query ,then should define default alias: \"BASE_OBJECT\"\n         // NOTE: Could not reference ABObjectQuery because recursive looping reference\n         // if (object instanceof ABObjectQuery) {\n         if (object.viewName) {\n            thisObjOption.alias = \"BASE_OBJECT\";\n         }\n\n         this._Fields.unshift(thisObjOption);\n      } else {\n         delete this._Object;\n      }\n   }\n\n   fieldsToQB() {\n      /*\n      let mapTypes = {\n         LongText: \"string\",\n         email: \"string\",\n         datetime: \"date\",\n         connectField: \"connectObject\"\n      };\n\n      var fields = this._Fields.map((f) => {\n         // Label\n         let label = f.label;\n         if (this._settings.showObjectName && f.object && f.object.label)\n            label = `${f.object.label}.${f.label}`;\n\n         // Type\n         let type = f.key || f.type;\n         if (mapTypes[type]) type = mapTypes[type];\n\n         // the format for webix querybuilder:\n         // { id  value:\"label\" type }\n         //      type: {string} the type of value it is.\n         //            since we want to tailor value selectors per field,\n         //            we will make a unique type for each field. and then\n         //            add value selectors for that specific .type\n         return { id: f.columnName, value: label, type: type };\n      });\n      return fields;\n      */\n\n      let fields = (this._Fields || []).map((f) => {\n         let label = f.label;\n         if (this._settings.showObjectName && f.object && f.object.label)\n            label = `${f.object.label}.${f.label}`;\n\n         let type = \"text\"; // \"text\", \"number\", \"date\"\n         let conditions = [];\n         switch (f.key) {\n            case \"boolean\":\n               conditions = conditions\n                  .concat(this.fieldsAddFiltersBoolean(f))\n                  .concat(this.fieldsAddFiltersQueryField(f));\n               break;\n            case \"connectObject\":\n               conditions = this.fieldsAddFiltersQuery(f);\n               break;\n            case \"date\":\n            case \"datetime\":\n               type = \"date\";\n               conditions = conditions\n                  .concat(this.fieldsAddFiltersDate(f))\n                  .concat(this.fieldsAddFiltersQueryField(f));\n               break;\n            case \"calculate\":\n            case \"formula\":\n            case \"number\":\n               type = \"number\";\n               conditions = conditions\n                  .concat(this.fieldsAddFiltersNumber(f))\n                  .concat(this.fieldsAddFiltersQueryField(f));\n               break;\n            case \"string\":\n            case \"LongText\":\n            case \"email\":\n            case \"AutoIndex\":\n               conditions = conditions\n                  .concat(this.fieldsAddFiltersString(f))\n                  .concat(this.fieldsAddFiltersQueryField(f));\n               break;\n            case \"list\":\n               conditions = conditions\n                  .concat(this.fieldsAddFiltersList(f))\n                  .concat(this.fieldsAddFiltersQueryField(f));\n               break;\n            case \"user\":\n               conditions = conditions\n                  .concat(this.fieldsAddFiltersUser(f))\n                  .concat(this.fieldsAddFiltersQueryField(f));\n               break;\n            case \"uuid\":\n               conditions = conditions.concat(\n                  this.fieldsAddFiltersThisObject(f)\n               );\n               break;\n            default:\n               type = \"text\";\n               break;\n         }\n\n         if (this._isRecordRule) {\n            conditions = conditions.concat(this.fieldsAddFiltersRecordRule(f));\n         }\n\n         let isProcessField =\n            (this._ProcessFields || []).filter((processField) => {\n               if (!processField) return false;\n\n               if (processField.field) {\n                  return processField.field.id == f.id;\n               } else if (processField.key) {\n                  // uuid\n                  let processFieldId = processField.key.split(\".\").pop();\n                  return processFieldId == f.id || processFieldId == f.key;\n               }\n            }).length > 0;\n\n         if (isProcessField) {\n            conditions = conditions.concat(this.fieldsAddFiltersContext(f));\n         }\n\n         // let type = f.id; // the default unique identifier for our filter types\n         // if (f.id == \"this_object\") {\n         //    // if this happens to be our special \"this_object\" field, then our\n         //    // type needs to be the \"uuid\" type in the definition:\n         //    type = f.type;\n         // }\n\n         // the format for webix querybuilder:\n         // { id  value:\"label\" type }\n         //      type: {string} the type of value it is.\n         //            since we want to tailor value selectors per field,\n         //            we will make a unique type for each field. and then\n         //            add value selectors for that specific .type\n         return {\n            id: f.columnName || f.id,\n            value: label,\n            type: type,\n            conditions: conditions,\n            // format: () => {},\n         };\n      });\n\n      // !!! Process Fields of ABProcess\n      // https://github.com/digi-serve/appbuilder_class_core/blob/master/FilterComplexCore.js#L636\n      // https://github.com/digi-serve/appbuilder_class_core/blob/master/FilterComplexCore.js#L564\n      // (this._ProcessFields || [])\n      //    // if there is no .field, it is probably an embedded special field\n      //    .filter((pField) => pField.field == null)\n      //    .forEach((pField) => {\n      //       // like: .uuid\n      //       let key = pField.key.split(\".\").pop();\n      //       if (key == \"uuid\" && this._Object) {\n      //          fields.unshift({\n      //             id: pField.key,\n      //             value: this._Object.label,\n      //             type: \"text\",\n      //             conditions: this.fieldsAddFiltersContext(),\n      //          });\n      //       }\n      //    });\n\n      return fields;\n   }\n\n   fieldsAddFiltersDate(field) {\n      let dateConditions = {\n         less: this.labels.component.beforeCondition,\n         greater: this.labels.component.afterCondition,\n         less_or_equal: this.labels.component.onOrBeforeCondition,\n         greater_or_equal: this.labels.component.onOrAfterCondition,\n         less_current: this.labels.component.beforeCurrentCondition,\n         greater_current: this.labels.component.afterCurrentCondition,\n         less_or_equal_current:\n            this.labels.component.onOrBeforeCurrentCondition,\n         greater_or_equal_current:\n            this.labels.component.onOrAfterCurrentCondition,\n         last_days: this.labels.component.onLastDaysCondition,\n         next_days: this.labels.component.onNextDaysCondition,\n      };\n\n      let result = [];\n\n      for (let condKey in dateConditions) {\n         result.push({\n            id: condKey,\n            value: dateConditions[condKey],\n            batch: \"datepicker\",\n            handler: (a, b) => this.dateValid(a, condKey, b),\n         });\n      }\n\n      return result;\n   }\n\n   fieldsAddFiltersString(field) {\n      let stringConditions = {\n         contains: {\n            batch: \"text\",\n            label: this.labels.component.containsCondition,\n         },\n         not_contains: {\n            batch: \"text\",\n            label: this.labels.component.notContainsCondition,\n         },\n         equals: {\n            batch: \"text\",\n            label: this.labels.component.isCondition,\n         },\n         not_equal: {\n            batch: \"text\",\n            label: this.labels.component.isNotCondition,\n         },\n         is_empty: {\n            batch: \"none\",\n            label: this.labels.component.isEmpty,\n         },\n         is_not_empty: {\n            batch: \"none\",\n            label: this.labels.component.isNotEmpty,\n         },\n      };\n\n      let result = [];\n\n      for (let condKey in stringConditions) {\n         result.push({\n            id: condKey,\n            value: stringConditions[condKey].label,\n            batch: stringConditions[condKey].batch,\n            handler: (a, b) => this.textValid(a, condKey, b),\n         });\n      }\n\n      return result;\n   }\n\n   fieldsAddFiltersNumber(field) {\n      let numberConditions = {\n         equals: this.labels.component.equalCondition,\n         not_equal: this.labels.component.notEqualCondition,\n         less: this.labels.component.lessThanCondition,\n         greater: this.labels.component.moreThanCondition,\n         less_or_equal: this.labels.component.lessThanOrEqualCondition,\n         greater_or_equal: this.labels.component.moreThanOrEqualCondition,\n      };\n\n      let result = [];\n\n      for (let condKey in numberConditions) {\n         result.push({\n            id: condKey,\n            value: numberConditions[condKey],\n            batch: \"text\",\n            handler: (a, b) => this.numberValid(a, condKey, b),\n         });\n      }\n\n      return result;\n   }\n\n   fieldsAddFiltersList(field) {\n      let listConditions = {\n         equals: this.labels.component.equalListCondition,\n         not_equal: this.labels.component.notEqualListCondition,\n      };\n\n      let result = [];\n\n      for (let condKey in listConditions) {\n         result.push({\n            id: condKey,\n            value: listConditions[condKey],\n            batch: \"list\",\n            handler: (a, b) => this.listValid(a, condKey, b),\n         });\n      }\n\n      return result;\n   }\n\n   fieldsAddFiltersBoolean(field) {\n      let booleanConditions = {\n         equals: this.labels.component.equalListCondition,\n      };\n\n      let result = [];\n\n      for (let condKey in booleanConditions) {\n         result.push({\n            id: condKey,\n            value: booleanConditions[condKey],\n            batch: \"boolean\",\n            handler: (a, b) => this.booleanValid(a, condKey, b),\n         });\n      }\n\n      return result;\n   }\n\n   fieldsAddFiltersUser(field) {\n      let userConditions = {\n         is_current_user: {\n            batch: \"none\",\n            label: this.labels.component.isCurrentUserCondition,\n         },\n         is_not_current_user: {\n            batch: \"none\",\n            label: this.labels.component.isNotCurrentUserCondition,\n         },\n         contain_current_user: {\n            batch: \"none\",\n            label: this.labels.component.containsCurrentUserCondition,\n         },\n         not_contain_current_user: {\n            batch: \"none\",\n            label: this.labels.component.notContainsCurrentUserCondition,\n         },\n         equals: {\n            batch: \"user\",\n            label: this.labels.component.equalListCondition,\n         },\n         not_equal: {\n            batch: \"user\",\n            label: this.labels.component.notEqualListCondition,\n         },\n      };\n\n      let result = [];\n\n      for (let condKey in userConditions) {\n         result.push({\n            id: condKey,\n            value: userConditions[condKey].label,\n            batch: userConditions[condKey].batch,\n            handler: (a, b) => this.userValid(a, condKey, b),\n         });\n      }\n\n      return result;\n   }\n\n   fieldsAddFiltersQuery(field) {\n      let connectConditions = {\n         in_query: {\n            batch: \"query\",\n            label: this.labels.component.inQuery,\n            handler: (a, b) => this.inQueryValid(a, \"in_query\", b),\n         },\n         not_in_query: {\n            batch: \"query\",\n            label: this.labels.component.notInQuery,\n            handler: (a, b) => this.inQueryValid(a, \"not_in_query\", b),\n         },\n         same_as_user: {\n            batch: \"user\",\n            label: this.labels.component.sameAsUser,\n            handler: (a, b) => this.userValid(a, \"same_as_user\", b),\n         },\n         not_same_as_user: {\n            batch: \"user\",\n            label: this.labels.component.notSameAsUser,\n            handler: (a, b) => this.userValid(a, \"not_same_as_user\", b),\n         },\n         in_data_collection: {\n            batch: \"datacollection\",\n            label: this.labels.component.inDataCollection,\n            handler: (a, b) =>\n               this.dataCollectionValid(a, \"in_data_collection\", b),\n         },\n         not_in_data_collection: {\n            batch: \"datacollection\",\n            label: this.labels.component.notInDataCollection,\n            handler: (a, b) =>\n               this.dataCollectionValid(a, \"not_in_data_collection\", b),\n         },\n         // TODO\n         // contains: this.labels.component.containsCondition,\n         // not_contains: this.labels.component.notContainCondition,\n         // equals: this.labels.component.isCondition,\n         // not_equal: this.labels.component.isNotCondition\n      };\n\n      let result = [];\n\n      for (let condKey in connectConditions) {\n         result.push({\n            id: condKey,\n            value: connectConditions[condKey].label,\n            batch: connectConditions[condKey].batch,\n            handler: connectConditions[condKey].handler,\n         });\n      }\n\n      // Add filter options to Custom index\n      if (\n         field.settings.isCustomFK &&\n         // 1:M\n         ((field.settings.linkType == \"one\" &&\n            field.settings.linkViaType == \"many\") ||\n            // 1:1 isSource = true\n            (field.settings.linkType == \"one\" &&\n               field.settings.linkViaType == \"one\" &&\n               field.settings.isSource))\n      ) {\n         const stringResults = this.fieldsAddFiltersString(field);\n         result = stringResults.concat(result);\n      }\n\n      return result;\n   }\n\n   fieldsAddFiltersQueryField(field) {\n      let queryFieldConditions = {\n         in_query_field: this.labels.component.inQueryField,\n         not_in_query_field: this.labels.component.notInQueryField,\n      };\n\n      let result = [];\n\n      for (let condKey in queryFieldConditions) {\n         result.push({\n            id: condKey,\n            value: queryFieldConditions[condKey],\n            batch: \"queryField\",\n            handler: (a, b) => this.queryFieldValid(a, condKey, b),\n         });\n      }\n\n      return result;\n   }\n\n   fieldsAddFiltersThisObject(field) {\n      let thisObjectConditions = {\n         in_query: {\n            batch: \"query\",\n            label: this.labels.component.inQuery,\n         },\n         not_in_query: {\n            batch: \"query\",\n            label: this.labels.component.notInQuery,\n         },\n         in_data_collection: {\n            batch: \"datacollection\",\n            label: this.labels.component.inDataCollection,\n         },\n         not_in_data_collection: {\n            batch: \"datacollection\",\n            label: this.labels.component.notInDataCollection,\n         },\n      };\n\n      let result = [];\n\n      for (let condKey in thisObjectConditions) {\n         result.push({\n            id: condKey,\n            value: thisObjectConditions[condKey].label,\n            batch: thisObjectConditions[condKey].batch,\n            handler: (a, b) => this.thisObjectValid(a, condKey, b),\n         });\n      }\n\n      return result;\n   }\n\n   fieldsAddFiltersRecordRule(field) {\n      let recordRuleConditions = {\n         same_as_field: this.labels.component.sameAsField,\n         not_same_as_field: this.labels.component.notSameAsField,\n      };\n\n      let result = [];\n\n      for (let condKey in recordRuleConditions) {\n         result.push({\n            id: condKey,\n            value: recordRuleConditions[condKey],\n            batch: \"recordRule\",\n            handler: (a, b) => true, // TODO: record rule validation\n         });\n      }\n\n      return result;\n   }\n\n   fieldsAddFiltersContext(field) {\n      let contextConditions = {\n         context_equals: {\n            batch: \"context\",\n            label: this.labels.component.equalsProcessValue,\n            handler: (a, b) => a == b,\n         },\n         context_not_equal: {\n            batch: \"context\",\n            label: this.labels.component.notEqualsProcessValueCondition,\n            handler: (a, b) => a != b,\n         },\n         context_in: {\n            batch: \"context\",\n            label: this.labels.component.inProcessValueCondition,\n            handler: (a, b) => a.indexOf(b) > -1,\n         },\n         context_not_in: {\n            batch: \"context\",\n            label: this.labels.component.notInProcessValueCondition,\n            handler: (a, b) => a.indexOf(b) == -1,\n         },\n      };\n\n      let result = [];\n\n      for (let condKey in contextConditions) {\n         result.push({\n            id: condKey,\n            value: contextConditions[condKey].label,\n            batch: contextConditions[condKey].batch,\n            handler: contextConditions[condKey].handler,\n         });\n      }\n\n      return result;\n   }\n\n   queriesLoad(queries = []) {\n      this._Queries = queries;\n   }\n\n   /**\n    * @method queries()\n    *\n    * return an array of all the ABObjectQuery.\n    *\n    * @param filter {Object}\n    *\n    * @return {array}\n    */\n   queries(filter = () => true) {\n      const queryList = this._Queries ?? this.AB?.queries?.() ?? [];\n\n      return queryList.filter((q) => filter(q));\n   }\n\n   setValue(settings) {\n      this.condition = settings || {};\n\n      this.condition.rules = this.condition.rules || [];\n   }\n\n   /**\n    * @method getValue\n    * return the current condition of the filter.\n    * @return {JSON} -\n    * {\n    * \tglue: '', // 'and', 'or'\n    *\t\trules: [\n    *\t\t\t{\n    *\t\t\t\tkey:\t'uuid',\n    *\t\t\t\trule:\t'rule',\n    *\t\t\t\tvalue:\t'value'\n    *\t\t\t}\n    *\t\t]\n    * }\n    */\n   getValue() {\n      // When asked for a value before a condition is set, default the\n      // unset glue to \"and\";\n      if (typeof this.condition.glue == \"undefined\") {\n         this.condition.glue = \"and\";\n      }\n      return this.condition;\n   }\n\n   isComplete() {\n      let result = true;\n\n      const noValueRules = [\n         \"is_current_user\",\n         \"is_not_current_user\",\n         \"contain_current_user\",\n         \"not_contain_current_user\",\n         \"same_as_user\",\n         \"not_same_as_user\",\n      ];\n\n      const isCompleteRules = (rules = []) => {\n         if (result == false) return;\n\n         rules.forEach((r) => {\n            if (r?.rules && Array.isArray(r?.rules)) {\n               isCompleteRules(r?.rules);\n            } else {\n               result =\n                  result &&\n                  r?.key != null &&\n                  r?.key != \"\" &&\n                  r?.rule != null &&\n                  r?.rule != \"\" &&\n                  ((r?.value != null && r?.value != \"\") ||\n                     noValueRules.indexOf(r?.rule) > -1);\n            }\n         });\n      };\n\n      isCompleteRules(this.condition?.rules);\n\n      return result;\n   }\n};\n","const ABComponent = require(\"../platform/ABComponent\");\n\n/**\n *  support get data from objects and queries\n */\nfunction getFieldVal(rowData, field, returnSingular = true) {\n   if (!field) return null;\n   if (!field.columnName) return null;\n   // if rowData is an array, then pull the first element to get value\n   if (rowData && rowData[0]) rowData = rowData[0];\n\n   let columnId = field.id;\n   let columnName = field.columnName;\n\n   let value = null;\n   if (columnName.indexOf(\".\") > -1) {\n      let colName = columnName.split(\".\")[1];\n      value = rowData[columnName] || rowData[colName] || rowData[columnId];\n   } else {\n      value = rowData[columnName] || rowData[columnId];\n   }\n\n   if (value) {\n      return value;\n   }\n\n   // otherwise, this might be a process check where the rowData keys have\n   // '[diagramID].[field.id]'\n   for (var k in rowData) {\n      var key = k.split(\".\")[1];\n      if (key && (key == columnId || key == columnName)) {\n         value = rowData[k];\n      }\n   }\n\n   // if value is an array, filter empty item\n   if (value && Array.isArray(value)) {\n      value = value.filter((v) => v != null);\n      if (returnSingular) value = value[0];\n   }\n\n   return value;\n}\n\nmodule.exports = class RowFilterCore extends ABComponent {\n   constructor(App, idBase, AB) {\n      idBase = idBase || \"ab_row_filter\";\n\n      super(App, idBase, AB);\n\n      this.Account = { username: \"??\" };\n      this._settings = {};\n      this.config_settings = {};\n      // var batchName; // we need to revert to this default when switching away from a in/by query field\n\n      this._QueryFields = [];\n      this._Fields;\n\n      // internal business logic\n      var _logic = (this._logic = {\n         callbacks: {\n            onChange: () => {},\n         },\n\n         /**\n          * @method getValue\n          *\n          * @return {JSON} -\n          * {\n          * \t\tglue: '', // 'and', 'or'\n          *\t\trules: [\n          *\t\t\t{\n          *\t\t\t\tkey:\t'column name',\n          *\t\t\t\trule:\t'rule',\n          *\t\t\t\tvalue:\t'value'\n          *\t\t\t}\n          *\t\t]\n          * }\n          */\n         getValue: () => {\n            return this.config_settings;\n         },\n\n         removeHtmlTags: function (text) {\n            let result = \"\";\n            try {\n               let div = document.createElement(\"div\");\n               div.innerHTML = text;\n\n               result = div.textContent || div.innerText || \"\";\n            } catch (err) {\n               result = (text || \"\").replace(/(<([^>]+)>)/gi, \"\");\n            }\n\n            return result;\n         },\n\n         textValid: function (rowData, field, rule, compareValue) {\n            var result = false;\n\n            var value = getFieldVal(rowData, field);\n            if (value == null) value = \"\";\n\n            value = value.toString().trim().toLowerCase();\n            value = _logic.removeHtmlTags(value); // remove html tags - rich text editor\n\n            compareValue = compareValue\n               .toString()\n               .trim()\n               .toLowerCase()\n               .replace(/  +/g, \" \");\n\n            // support \"john smith\" => \"john\" OR/AND \"smith\"\n            var compareArray = compareValue.split(\" \");\n\n            switch (rule) {\n               case \"contains\":\n                  compareArray.forEach((val) => {\n                     if (result == false)\n                        // OR\n                        result = value.indexOf(val) > -1;\n                  });\n                  break;\n               case \"not_contains\":\n                  result = true;\n                  compareArray.forEach((val) => {\n                     if (result == true)\n                        // AND\n                        result = value.indexOf(val) < 0;\n                  });\n                  break;\n               case \"equals\":\n                  compareArray.forEach((val) => {\n                     if (result == false)\n                        // OR\n                        result = value == val;\n                  });\n                  break;\n               case \"not_equal\":\n                  result = true;\n                  compareArray.forEach((val) => {\n                     if (result == true)\n                        // AND\n                        result = value != val;\n                  });\n                  break;\n               case \"is_empty\":\n                  result = value == null || value == \"\";\n                  break;\n               case \"is_not_empty\":\n                  result = value != null && value != \"\";\n                  break;\n               default:\n                  result = _logic.queryValid(rowData, rule, compareValue);\n                  break;\n            }\n\n            return result;\n         },\n\n         dateValid: function (rowData, field, rule, compareValue) {\n            var result = false;\n\n            var value = getFieldVal(rowData, field);\n            if (!(value instanceof Date)) value = new Date(value);\n\n            if (!(compareValue instanceof Date))\n               compareValue = new Date(compareValue);\n\n            switch (rule) {\n               case \"equals\":\n                  result = value == compareValue;\n                  break;\n               case \"not_equal\":\n                  result = value != compareValue;\n                  break;\n               case \"less\":\n                  result = value < compareValue;\n                  break;\n               case \"greater\":\n                  result = value > compareValue;\n                  break;\n               case \"less_or_equal\":\n                  result = value <= compareValue;\n                  break;\n               case \"greater_or_equal\":\n                  result = value >= compareValue;\n                  break;\n               default:\n                  result = _logic.queryValid(rowData, rule, compareValue);\n                  break;\n            }\n\n            return result;\n         },\n\n         numberValid: function (rowData, field, rule, compareValue) {\n            var result = false;\n\n            var value = getFieldVal(rowData, field);\n            value = Number(value);\n            compareValue = Number(compareValue);\n\n            switch (rule) {\n               case \"equals\":\n                  result = value == compareValue;\n                  break;\n               case \"not_equal\":\n                  result = value != compareValue;\n                  break;\n               case \"less\":\n                  result = value < compareValue;\n                  break;\n               case \"greater\":\n                  result = value > compareValue;\n                  break;\n               case \"less_or_equal\":\n                  result = value <= compareValue;\n                  break;\n               case \"greater_or_equal\":\n                  result = value >= compareValue;\n                  break;\n               default:\n                  result = _logic.queryValid(rowData, rule, compareValue);\n                  break;\n            }\n\n            return result;\n         },\n\n         listValid: function (rowData, field, rule, compareValue) {\n            var result = false;\n\n            var value = getFieldVal(rowData, field);\n            if (value && value.toLowerCase) value = value.toLowerCase();\n\n            compareValue = compareValue.toLowerCase();\n\n            if (!Array.isArray(compareValue)) compareValue = [compareValue];\n\n            switch (rule) {\n               case \"equals\":\n                  if (value) result = compareValue.indexOf(value) > -1;\n                  break;\n               case \"not_equal\":\n                  if (value) result = compareValue.indexOf(value) < 0;\n                  else result = true;\n                  break;\n               default:\n                  result = _logic.queryValid(rowData, rule, compareValue);\n                  break;\n            }\n\n            return result;\n         },\n\n         booleanValid: function (rowData, field, rule, compareValue) {\n            var result = false;\n\n            var value = getFieldVal(rowData, field);\n\n            // default value should be false\n            if (value == null) value = false;\n\n            switch (rule) {\n               case \"equals\":\n                  result = value == compareValue;\n                  break;\n               case \"not_equal\":\n                  result = value != compareValue;\n                  break;\n               default:\n                  result = _logic.queryValid(rowData, rule, compareValue);\n                  break;\n            }\n\n            return result;\n         },\n\n         userValid: (rowData, field, rule, compareValue) => {\n            var result = false;\n\n            var value = getFieldVal(rowData, field);\n\n            // if (Array.isArray(value)) value = [value];\n\n            switch (rule) {\n               case \"is_current_user\":\n                  result = value == this.Account.username;\n                  break;\n               case \"is_not_current_user\":\n                  result = value != this.Account.username;\n                  break;\n               case \"contain_current_user\":\n                  if (!value) {\n                     result = false;\n                     break;\n                  }\n                  if (!Array.isArray(value)) value = [value];\n\n                  result =\n                     (value || []).filter((v) => {\n                        if (v) {\n                           return (\n                              (v.username || v.id || v.text || v) ==\n                              this.Account.username\n                           );\n                        } else {\n                           return false;\n                        }\n                     }).length > 0;\n                  break;\n               case \"not_contain_current_user\":\n                  if (!value) {\n                     result = false;\n                     break;\n                  }\n                  if (!Array.isArray(value)) value = [value];\n\n                  result =\n                     (value || []).filter((v) => {\n                        if (v) {\n                           return (\n                              (v.username || v.id || v.text || v) ==\n                              this.Account.username\n                           );\n                        } else {\n                           return false;\n                        }\n                     }).length == 0;\n                  break;\n               case \"equals\":\n                  result = value.indexOf(compareValue) > -1;\n                  break;\n               case \"not_equal\":\n                  result = value.indexOf(compareValue) < 0;\n                  break;\n               default:\n                  result = _logic.queryValid(rowData, rule, compareValue);\n                  break;\n            }\n\n            return result;\n         },\n\n         queryValid: (rowData, rule, compareValue) => {\n            var result = false;\n\n            if (!this.AB || !compareValue) return result;\n\n            // queryId:fieldId\n            var queryId = compareValue.split(\":\")[0],\n               fieldId = compareValue.split(\":\")[1];\n\n            // if no query\n            var query = this.queries((q) => q.id == queryId)[0];\n            if (!query) return result;\n\n            // if no field\n            var field = query.fields((f) => f.id == fieldId)[0];\n            if (!field) return result;\n\n            let qIdBase = \"{idBase}-query-field-{id}\"\n                  .replace(\"{idBase}\", idBase)\n                  .replace(\"{id}\", query.id),\n               inQueryFieldFilter = new this.constructor(this.App, qIdBase);\n            inQueryFieldFilter.Account = this.Account;\n            // inQueryFieldFilter.applicationLoad(this._Application);\n            inQueryFieldFilter.fieldsLoad(query.fields());\n            inQueryFieldFilter.setValue(query.workspaceFilterConditions);\n\n            switch (rule) {\n               case \"in_query_field\":\n                  result = inQueryFieldFilter.isValid(rowData);\n                  break;\n               case \"not_in_query_field\":\n                  result = !inQueryFieldFilter.isValid(rowData);\n                  break;\n            }\n\n            return result;\n         },\n\n         inQueryValid: (rowData, columnName, rule, compareValue) => {\n            let result = false;\n\n            if (columnName) {\n               rowData = rowData[columnName] || {};\n            }\n\n            if (!compareValue || !this.AB) return result;\n\n            // if no query\n            let query = this.queries((q) => q.id == compareValue)[0];\n            if (!query) return result;\n\n            let qIdBase = \"{idBase}-query-{id}\"\n                  .replace(\"{idBase}\", idBase)\n                  .replace(\"{id}\", query.id),\n               inQueryFilter = new this.constructor(this.App, qIdBase);\n            inQueryFilter.Account = this.Account;\n            // inQueryFilter.applicationLoad(this._Application);\n            inQueryFilter.fieldsLoad(query.fields());\n            inQueryFilter.setValue(query.workspaceFilterConditions);\n\n            switch (rule) {\n               case \"in_query\":\n                  result = inQueryFilter.isValid(rowData);\n                  break;\n               case \"not_in_query\":\n                  result = !inQueryFilter.isValid(rowData);\n                  break;\n            }\n\n            return result;\n         },\n\n         dataCollectionValid: (rowData, columnName, rule, compareValue) => {\n            var result = false;\n\n            if (!compareValue || !this.AB) return result;\n\n            if (columnName) {\n               rowData = rowData[columnName] || {};\n            }\n\n            let dc = this.AB.datacollectionByID(compareValue);\n\n            switch (rule) {\n               case \"in_data_collection\":\n                  if (!dc) return false;\n\n                  result =\n                     dc.getData(\n                        (d) => (d.id || d.uuid) == (rowData.id || rowData.uuid)\n                     ).length > 0;\n                  break;\n               case \"not_in_data_collection\":\n                  if (!dc) return true;\n\n                  result =\n                     dc.getData(\n                        (d) => (d.id || d.uuid) == (rowData.id || rowData.uuid)\n                     ).length < 1;\n                  break;\n            }\n\n            return result;\n         },\n\n         connectFieldValid: function (rowData, field, rule, compareValue) {\n            let relationName = field.relationName();\n            let columnName = field.columnName;\n\n            let connectedVal = \"\";\n\n            if (rowData) {\n               if (rowData[relationName]) {\n                  connectedVal = (\n                     (field.indexField\n                        ? rowData[relationName][field.indexField.columnName]\n                        : false) || // custom index\n                     (field.indexField2\n                        ? rowData[relationName][field.indexField2.columnName]\n                        : false) || // custom index 2\n                     rowData[relationName].id ||\n                     rowData[relationName]\n                  )\n                     .toString()\n                     .toLowerCase();\n               } else {\n                  let fieldVal = getFieldVal(rowData, field);\n                  if (fieldVal != null) {\n                     connectedVal = fieldVal;\n                  }\n               }\n            }\n\n            let compareValueLowercase = (compareValue || \"\").toLowerCase();\n\n            switch (rule) {\n               case \"contains\":\n                  return (\n                     connectedVal.toString().indexOf(compareValueLowercase) > -1\n                  );\n               case \"not_contains\":\n                  return (\n                     connectedVal.toString().indexOf(compareValueLowercase) ==\n                     -1\n                  );\n               case \"equals\":\n                  return connectedVal == compareValueLowercase;\n               case \"not_equal\":\n                  return connectedVal != compareValueLowercase;\n               case \"in_query\":\n               case \"not_in_query\":\n                  return _logic.inQueryValid(\n                     rowData,\n                     relationName,\n                     rule,\n                     compareValue\n                  );\n               case \"is_current_user\":\n               case \"is_not_current_user\":\n               case \"contain_current_user\":\n               case \"not_contain_current_user\":\n                  return _logic.userValid(rowData, field, rule, compareValue);\n               case \"is_empty\":\n                  return (\n                     rowData[relationName] == null ||\n                     rowData[relationName].length < 1 ||\n                     rowData[relationName] == \"\"\n                  );\n               case \"is_not_empty\":\n                  return (\n                     rowData[relationName] != null &&\n                     ((Array.isArray(rowData[relationName]) &&\n                        rowData[relationName].length > 0) ||\n                        rowData[relationName] != \"\")\n                  );\n               case \"in_data_collection\":\n               case \"not_in_data_collection\":\n                  return _logic.dataCollectionValid(\n                     rowData,\n                     relationName,\n                     rule,\n                     compareValue\n                  );\n            }\n         },\n\n         thisObjectValid: (rowData, rule, compareValue) => {\n            let result = false;\n\n            switch (rule) {\n               // if in_query condition\n               case \"in_query\":\n               case \"not_in_query\":\n                  if (!this.AB || !this._Object) return result;\n\n                  // if > 1 copy of this object in query ==> Error!\n                  var query = this.queries((q) => q.id == compareValue)[0];\n                  if (!query) return result;\n\n                  var listThisObjects = query.objects((o) => {\n                     return o.id == this._Object.id;\n                  });\n                  if (listThisObjects.length > 1) {\n                     // Alternative: choose the 1st instance of this object in the query, and make the compare on that.\n                     // Be sure to warn the developer of the limitiations of an \"this_object\" \"in_query\"  when query has > 1 copy of\n                     // this object as part of the query.\n\n                     console.error(\n                        \"HEY!  Can't compare this_object to a query that has > 1 copy of that object!\"\n                     );\n                     return true;\n                  }\n\n                  // get this object's alias from the query\n                  var alias = query.objectAlias(this._Object.id);\n\n                  // make sure all my columns in rowData are prefixed by \"alias\".columnName\n                  var newRowData = {};\n                  Object.keys(rowData).forEach((key) => {\n                     newRowData[`${alias}.${key}`] = rowData[key];\n                  });\n\n                  // then pass this on to the _logic.queryValid();\n                  return _logic.inQueryValid(\n                     newRowData,\n                     null,\n                     rule,\n                     compareValue\n                  );\n               // break; /* eslint no-unreachable */\n\n               // if in_datacollection condition\n               case \"in_data_collection\":\n               case \"not_in_data_collection\":\n                  // send rowData, null to datacollectionValid()\n                  return _logic.dataCollectionValid(\n                     rowData,\n                     null,\n                     rule,\n                     compareValue\n                  );\n               // break; /* eslint no-unreachable */\n            }\n         },\n      });\n\n      // Interface methods for parent component:\n      // this.objectLoad = _logic.objectLoad;\n      // this.viewLoad = _logic.viewLoad;\n      this.getValue = _logic.getValue;\n      // this.setValue = _logic.setValue;\n      // this.isValid = _logic.isValid;\n   }\n\n   init(options) {\n      if (options.showObjectName) {\n         this._settings.showObjectName = options.showObjectName;\n      }\n   }\n\n   /**\n    * @method isValid\n    * validate the row data is valid filter condition\n    *\n    * @param rowData {Object} - data row\n    */\n   isValid(rowData) {\n      var config_settings = this.config_settings;\n      var _logic = this._logic;\n\n      // If no conditions, then return true\n      if (\n         config_settings == null ||\n         config_settings.rules == null ||\n         config_settings.rules.length == 0\n      )\n         return true;\n\n      if (rowData == null) return false;\n\n      var result = config_settings.glue === \"and\" ? true : false;\n\n      config_settings.rules.forEach((filter) => {\n         if (!filter.key || !filter.rule) return;\n\n         var fieldInfo = this._Fields.filter((f) => f.id == filter.key)[0];\n         if (!fieldInfo) return;\n\n         var condResult;\n\n         // Filters that have \"this_object\" don't have a fieldInfo.key, so in that case,\n         // define a special .key == \"this_object\"\n         var ruleFieldType = fieldInfo.key;\n         if (typeof fieldInfo.key == \"undefined\") {\n            if (fieldInfo.id != \"this_object\") {\n               fieldInfo.key = \"connectField\"; // if you are looking at the parent object it won't have a key to analyze\n               ruleFieldType = fieldInfo.key;\n            } else ruleFieldType = \"this_object\";\n         }\n\n         switch (ruleFieldType) {\n            case \"string\":\n            case \"LongText\":\n            case \"email\":\n               condResult = _logic.textValid(\n                  rowData,\n                  fieldInfo,\n                  filter.rule,\n                  filter.value\n               );\n               break;\n            case \"date\":\n            case \"datetime\":\n               condResult = _logic.dateValid(\n                  rowData,\n                  fieldInfo,\n                  filter.rule,\n                  filter.value\n               );\n               break;\n            case \"number\":\n               condResult = _logic.numberValid(\n                  rowData,\n                  fieldInfo,\n                  filter.rule,\n                  filter.value\n               );\n               break;\n            case \"list\":\n               condResult = _logic.listValid(\n                  rowData,\n                  fieldInfo,\n                  filter.rule,\n                  filter.value\n               );\n               break;\n            case \"boolean\":\n               condResult = _logic.booleanValid(\n                  rowData,\n                  fieldInfo,\n                  filter.rule,\n                  filter.value\n               );\n               break;\n            case \"user\":\n               condResult = _logic.userValid(\n                  rowData,\n                  fieldInfo,\n                  filter.rule,\n                  filter.value\n               );\n               break;\n            case \"connectField\":\n            case \"connectObject\":\n               condResult = _logic.connectFieldValid(\n                  rowData,\n                  fieldInfo,\n                  filter.rule,\n                  filter.value\n               );\n               break;\n            case \"this_object\":\n               condResult = _logic.thisObjectValid(\n                  rowData,\n                  filter.rule,\n                  filter.value\n               );\n               break;\n         }\n\n         if (config_settings.glue === \"and\") {\n            result = result && condResult;\n         } else {\n            result = result || condResult;\n         }\n      });\n\n      return result;\n   }\n\n   /**\n    * @method applicationLoad\n    * set application\n    *\n    * @param application {ABApplication}\n    */\n   // applicationLoad(application) {\n   //    this._Application = application;\n   // }\n\n   /**\n    * @method fieldsLoad\n    * set fields\n    *\n    * @param {array} fields\n    *        an array of fields used in this Query\n    * @param {ABObject} object [optional]\n    *        (optional) ABObject reference if this Filter should support\n    *        the \"this object\" conditions.\n    */\n   fieldsLoad(fields = [], object = null) {\n      this._Fields = fields.filter((f) => f && f.fieldIsFilterable());\n      // NOTE: User fields are now Connections, but we want to treat them\n      // differently.\n      this._QueryFields = this._Fields\n         ? this._Fields.filter((f) => f && f.isConnection && f.key != \"user\")\n         : [];\n\n      // insert our 'this object' entry if an Object was given.\n      if (object) {\n         this._Object = object;\n\n         let thisObjOption = {\n            id: \"this_object\",\n            label: object.label,\n         };\n\n         // If object is query ,then should define default alias: \"BASE_OBJECT\"\n         if (object.viewName) {\n            thisObjOption.alias = \"BASE_OBJECT\";\n         }\n\n         this._Fields.unshift(thisObjOption);\n      } else {\n         delete this._Object;\n      }\n   }\n\n   queriesLoad(queries = []) {\n      this._Queries = queries;\n   }\n\n   /**\n    * @method queries()\n    * return an array of all the ABObjectQuery.\n    * @param {fn} filter\n    * @return {array}\n    */\n   queries(filter = () => true) {\n      let result = [];\n\n      if (this.AB) {\n         result = result.concat(this.AB.queries(filter));\n      }\n\n      if (this._Queries) {\n         result = result.concat(\n            (this._Queries || []).filter(\n               (q) => filter(q) && result.filter((r) => r.id == q.id).length < 1\n            )\n         );\n      }\n\n      return result;\n   }\n\n   setValue(settings) {\n      this.config_settings = settings || {};\n      this.config_settings.rules = this.config_settings.rules || [];\n   }\n};\n","/*\n * ABFieldAutoIndex\n *\n * An ABFieldAutoIndex defines a AutoIndex field type.\n *\n */\n\nconst ABField = require(\"../../platform/dataFields/ABField\");\n\nfunction L(key, altText) {\n   // TODO:\n   return altText; // AD.lang.label.getLabel(key) || altText;\n}\n\nconst ABFieldAutoIndexDefaults = {\n   key: \"AutoIndex\",\n   // unique key to reference this specific DataField\n\n   description: \"Auto Increment Value\",\n   // description: what gets displayed in the Editor description.\n   // NOTE: this will be displayed using a Label: L(description)\n\n   icon: \"key\",\n   // font-awesome icon reference.  (without the 'fa-').  so 'key'  to\n   // reference 'fa-key'\n\n   isFilterable: true,\n   // {bool} / {fn}\n   // determines if the current ABField can be used to filter (FilterComplex\n   // or Query) data.\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\n   //  (field) => field.setting.something == true\n\n   isSortable: true,\n   // {bool} / {fn}\n   // determines if the current ABField can be used to Sort data.\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\n   //  (field) => true/false\n\n   menuName: \"Auto Index\",\n   // menuName: what gets displayed in the Editor drop list\n   // NOTE: this will be displayed using a Label: L(menuName)\n\n   supportRequire: false,\n   // {bool}\n   // does this ABField support the Required setting?\n\n   supportUnique: false,\n   // {bool}\n   // does this ABField support the Unique setting?\n\n   useAsLabel: true,\n   // {bool} / {fn}\n   // determines if this ABField can be used in the display of an ABObject's\n   // label.\n\n   compatibleOrmTypes: [\"number\"],\n   // {array}\n   // what types of Sails ORM attributes can be imported into this data type?\n   // http://sailsjs.org/documentation/concepts/models-and-orm/attributes#?attribute-options\n\n   compatibleMysqlTypes: [\"tinyint\", \"smallint\", \"mediumint\", \"int\", \"integer\"],\n   // {array}\n   // what types of MySql column types can be imported into this data type?\n   // https://www.techonthenet.com/mysql/datatypes.php\n};\n\n// defaultValues: the keys must match a .name of your elements to set it's default value.\nconst defaultValues = {\n   prefix: \"\",\n   delimiter: \"none\",\n   displayLength: 4,\n   previewText: \"0000\",\n};\n\nmodule.exports = class ABFieldAutoIndexCore extends ABField {\n   constructor(values, object) {\n      super(values, object, ABFieldAutoIndexDefaults);\n   }\n\n   // return the default values for this DataField\n   static defaults() {\n      return ABFieldAutoIndexDefaults;\n   }\n\n   static defaultValues() {\n      return defaultValues;\n   }\n\n   static getDelimiterSign(text) {\n      const delimiterItem = this.delimiterList().filter((item) => {\n         return item.id == text;\n      })[0];\n\n      return delimiterItem ? delimiterItem.sign : \"\";\n   }\n\n   static delimiterList() {\n      return [\n         { id: \"none\", value: L(\"None\"), sign: \"\" },\n         { id: \"comma\", value: L(\"Comma\"), sign: \", \" },\n         { id: \"slash\", value: L(\"Slash\"), sign: \"/\" },\n         { id: \"space\", value: L(\"Space\"), sign: \" \" },\n         { id: \"dash\", value: L(\"Dash\"), sign: \"-\" },\n         { id: \"colon\", value: L(\"Colon\"), sign: \":\" },\n      ];\n   }\n\n   static setValueToIndex(prefix, delimiter, displayLength, displayNumber) {\n      const resultIndex =\n         prefix +\n         this.getDelimiterSign(delimiter) +\n         (\"0000000000\" + displayNumber).slice(-parseInt(displayLength));\n\n      return resultIndex;\n   }\n\n   fromValues(values) {\n      super.fromValues(values);\n\n      // text to Int:\n      this.settings.displayLength = parseInt(this.settings.displayLength);\n   }\n\n   /**\n    * @method defaultValue\n    * insert a key=>value pair that represent the default value\n    * for this field.\n    * @param {obj} values a key=>value hash of the current values.\n    */\n   defaultValue(values) {\n      // Remove every values, then we will use AUTO_INCREMENT of MySQL\n      delete values[this.columnName];\n   }\n\n   format(rowData) {\n      if (!rowData[this.columnName]) return \"\";\n\n      try {\n         const resultAutoIndex = this.constructor.setValueToIndex(\n            this.settings.prefix,\n            this.settings.delimiter,\n            this.settings.displayLength,\n            rowData[this.columnName]\n         );\n\n         return resultAutoIndex;\n      } catch (err) {\n         return \"\";\n      }\n   }\n};\n\n","/*\n * ABFieldBoolean\n *\n * An ABFieldBoolean defines a boolean field type.\n *\n */\n\nconst ABField = require(\"../../platform/dataFields/ABField\");\n\nfunction L(key, altText) {\n   // TODO:\n   return altText; // AD.lang.label.getLabel(key) || altText;\n}\n\nconst ABFieldBooleanDefaults = {\n   key: \"boolean\",\n   // unique key to reference this specific DataField\n\n   description: \"A single checkbox that can be checked or unchecked.\",\n   // description: what gets displayed in the Editor description.\n   // NOTE: this will be displayed using a Label: L(description)\n\n   icon: \"check-square-o\",\n   // font-awesome icon reference.  (without the 'fa-').  so 'check-square-o'  to\n   // reference 'fa-check-square-o'\n\n   isFilterable: true,\n   // {bool} / {fn}\n   // determines if the current ABField can be used to filter (FilterComplex\n   // or Query) data.\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\n   //  (field) => field.setting.something == true\n\n   isSortable: false,\n   // {bool} / {fn}\n   // determines if the current ABField can be used to Sort data.\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\n   //  (field) => true/false\n\n   menuName: \"Checkbox\",\n   // menuName: what gets displayed in the Editor drop list\n   // NOTE: this will be displayed using a Label: L(menuName)\n\n   supportRequire: true,\n   // {bool}\n   // does this ABField support the Required setting?\n\n   supportUnique: false,\n   // {bool}\n   // does this ABField support the Unique setting?\n\n   useAsLabel: true,\n   // {bool} / {fn}\n   // determines if this ABField can be used in the display of an ABObject's\n   // label.\n\n   compatibleOrmTypes: [\"boolean\"],\n   // {array}\n   // what types of Sails ORM attributes can be imported into this data type?\n   // http://sailsjs.org/documentation/concepts/models-and-orm/attributes#?attribute-options\n\n   compatibleMysqlTypes: [\"bool\", \"boolean\"],\n   // {array}\n   // what types of MySql column types can be imported into this data type?\n   // https://www.techonthenet.com/mysql/datatypes.php\n};\n\nconst defaultValues = {\n   default: 0,\n};\n\nmodule.exports = class ABFieldBooleanCore extends ABField {\n   constructor(values, object) {\n      super(values, object, ABFieldBooleanDefaults);\n   }\n\n   // return the default values for this DataField\n   static defaults() {\n      return ABFieldBooleanDefaults;\n   }\n\n   static defaultValues() {\n      return defaultValues;\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      super.fromValues(values);\n\n      if (this.settings.default != null)\n         this.settings.default = parseInt(this.settings.default);\n   }\n\n   /**\n    * @method defaultValue\n    * insert a key=>value pair that represent the default value\n    * for this field.\n    * @param {obj} values a key=>value hash of the current values.\n    */\n   defaultValue(values) {\n      if (values[this.columnName] == null && this.settings.default != null) {\n         values[this.columnName] = this.settings.default;\n      }\n   }\n};\n","/*\n * ABFieldCalculate\n *\n * An ABFieldCalculate defines a calculate field type.\n *\n */\n\nconst ABField = require(\"../../platform/dataFields/ABField\");\n\nfunction L(key, altText) {\n   // TODO:\n   return altText; // AD.lang.label.getLabel(key) || altText;\n}\n\n/** Private methods */\nfunction AGE(dateString) {\n   // validate\n   if (!dateString) return 0;\n   const dataDate = new Date(dateString);\n   if (!dataDate) return 0;\n\n   const today = new Date();\n   const oneYear = 31536000000; // (24 * 60 * 60 * 1000) * 365;\n   const diffYears = (today - dataDate) / oneYear;\n\n   if (diffYears < 1) return Math.round(diffYears * 10) / 10;\n   // float 2 digits\n   else return Math.floor(diffYears); // no float digit\n\n   // const today = new Date();\n   // const age = today.getFullYear() - dataDate.getFullYear();\n   // if (age < 1) {\n   // \tconst m = today.getMonth() - dataDate.getMonth();\n\n   // \tage = parseFloat(\"0.\" + m);\n\n   // \t// if (m < 0 || (m === 0 && today.getDate() < dataDate.getDate())) {\n   // \t// \tage--;\n   // \t// }\n   // }\n   // return age;\n}\n\nfunction YEAR(dateString) {\n   // validate\n   if (!dateString) return 0;\n   const dataDate = new Date(dateString);\n   if (!dataDate) return 0;\n\n   return dataDate.getFullYear();\n}\n\nfunction MONTH(dateString) {\n   // validate\n   if (!dateString) return 0;\n   const dataDate = new Date(dateString);\n   if (!dataDate) return 0;\n\n   // Start at 0\n   return dataDate.getMonth();\n}\n\nfunction DAY(dateString) {\n   // validate\n   if (!dateString) return 0;\n   const dataDate = new Date(dateString);\n   if (!dataDate) return 0;\n\n   return dataDate.getDate();\n}\n\nfunction DATE(dateString) {\n   // validate\n   if (!dateString) return 0;\n   const dataDate = new Date(dateString);\n   if (!dataDate) return 0;\n\n   // number of miliseconds in one day\n   const oneDay = 86400000; // 1000 * 60 * 60 * 24\n\n   // Convert back to days and return\n   return Math.round(dataDate.getTime() / oneDay);\n}\n\nfunction HOUR(dateString) {\n   // validate\n   if (!dateString) return 0;\n   const dataDate = new Date(dateString);\n   if (!dataDate) return 0;\n\n   // number of miliseconds in one hour\n   const oneHour = 3600000; // 1000 * 60 * 60\n\n   // Convert back to days and return\n   return Math.round(dataDate.getTime() / oneHour);\n}\n\nfunction MINUTE(dateString) {\n   // validate\n   if (!dateString) return 0;\n   const dataDate = new Date(dateString);\n   if (!dataDate) return 0;\n\n   // number of miliseconds in one hour\n   const oneMinute = 60000; // 1000 * 60\n\n   // Convert back to days and return\n   return Math.round(dataDate.getTime() / oneMinute);\n}\n\nfunction MINUTE_TO_HOUR(mins) {\n   const hours = mins / 60;\n   const rhours = Math.floor(hours);\n   const minutes = (hours - rhours) * 60;\n   const rminutes = Math.round(minutes);\n\n   return parseFloat(`${rhours}.${rminutes}`);\n}\n\nconst ABFieldCalculateDefaults = {\n   key: \"calculate\",\n   // unique key to reference this specific DataField\n\n   description: \"Perform a calculation based upon existing values\",\n   // description: what gets displayed in the Editor description.\n   // NOTE: this will be displayed using a Label: L(description)\n\n   icon: \"calculator\",\n   // font-awesome icon reference.  (without the 'fa-').  so 'calculator'  to\n   // reference 'fa-calculator'\n\n   isFilterable: (field) => {\n      const unsupportedInFilter = [\"MINUTE_TO_HOUR\", \"DATE\", \"HOUR\", \"MINUTE\"];\n      const unsupported = unsupportedInFilter.filter((item) =>\n         field.settings.formula.includes(item)\n      );\n      return unsupported.length == 0;\n   },\n   // {bool} / {fn}\n   // determines if the current ABField can be used to filter (FilterComplex\n   // or Query) data.\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\n   //  (field) => field.setting.something == true\n\n   isSortable: false,\n   // {bool} / {fn}\n   // determines if the current ABField can be used to Sort data.\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\n   //  (field) => true/false\n\n   menuName: \"Calculate\",\n   // menuName: what gets displayed in the Editor drop list\n   // NOTE: this will be displayed using a Label: L(menuName)\n\n   supportRequire: false,\n   // {bool}\n   // does this ABField support the Required setting?\n\n   supportUnique: false,\n   // {bool}\n   // does this ABField support the Unique setting?\n\n   useAsLabel: true,\n   // {bool} / {fn}\n   // determines if this ABField can be used in the display of an ABObject's\n   // label.\n\n   compatibleOrmTypes: [\"number\"],\n   // {array}\n   // what types of Sails ORM attributes can be imported into this data type?\n   // http://sailsjs.org/documentation/concepts/models-and-orm/attributes#?attribute-options\n\n   compatibleMysqlTypes: [\n      \"tinyint\",\n      \"smallint\",\n      \"mediumint\",\n      \"int\",\n      \"integer\",\n      \"bigint\",\n      \"decimal\",\n      \"dec\",\n      \"numeric\",\n      \"fixed\",\n      \"float\",\n      \"real\",\n   ],\n   // {array}\n   // what types of MySql column types can be imported into this data type?\n   // https://www.techonthenet.com/mysql/datatypes.php\n};\n\nconst defaultValues = {\n   formula: \"\",\n   decimalSign: \"none\", // \"none\", \"comma\", \"period\", \"space\"\n   decimalPlaces: 0, // 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n};\n\nmodule.exports = class ABFieldCalculateCore extends ABField {\n   constructor(values, object) {\n      super(values, object, ABFieldCalculateDefaults);\n   }\n\n   // return the default values for this DataField\n   static defaults() {\n      return ABFieldCalculateDefaults;\n   }\n\n   static defaultValues() {\n      return defaultValues;\n   }\n\n   /**\n    * @method convertToJs\n    *\n    * @param {ABOBject} object\n    * @param {string} formula\n    * @param {object} rowData\n    * @param {integer} place\n    * @param {string} alias [Optional]\n    */\n   static convertToJs(object, formula, rowData, place, alias = null) {\n      if (!formula) return \"\";\n\n      // replace with current date\n      formula = formula.replace(/\\(CURRENT\\)/g, \"(new Date())\");\n\n      object.fields().forEach((f) => {\n         let colName = f.columnName;\n         if (colName.indexOf(\".\") > -1)\n            // QUERY: get only column name\n            colName = colName.split(\".\")[1];\n\n         // if template does not contain, then should skip\n         if (formula.indexOf(\"{\" + colName + \"}\") < 0) return;\n\n         const data =\n            rowData[`${object.alias ?? alias}.${f.columnName}`] ??\n            rowData[f.columnName];\n\n         // number fields\n         if (f.key == \"number\") {\n            const numberVal = `(${data || 0})`; // (number) - NOTE : (-5) to support negative number\n            formula = formula.replace(\n               new RegExp(\"{\" + colName + \"}\", \"g\"),\n               numberVal\n            );\n         }\n         // calculate and formula fields\n         else if (f.key == \"calculate\" || f.key == \"formula\") {\n            let calVal = f.format(rowData) || 0;\n\n            // pull number only\n            if (typeof calVal == \"string\")\n               calVal = calVal.replace(/[^-0-9.]/g, \"\");\n\n            calVal = `(${calVal})`;\n\n            formula = formula.replace(\n               new RegExp(\"{\" + colName + \"}\", \"g\"),\n               calVal\n            );\n         }\n         // date fields\n         else if (f.key == \"date\") {\n            const dateVal = `\"${data || \"\"}\"`; // \"date\"\n            formula = formula.replace(\n               new RegExp(\"{\" + colName + \"}\", \"g\"),\n               dateVal\n            );\n         }\n         // boolean fields\n         else if (f.key == \"boolean\") {\n            const booleanVal = `(${data || 0})`; // show 1 or 0 for boolean\n            formula = formula.replace(\n               new RegExp(\"{\" + colName + \"}\", \"g\"),\n               booleanVal\n            );\n         }\n      });\n\n      // decimal places - toFixed()\n      // FIX: floating number calculation\n      // https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/\n      return eval(formula).toFixed(place || 0);\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   /**\n    * @method defaultValue\n    * insert a key=>value pair that represent the default value\n    * for this field.\n    * @param {obj} values a key=>value hash of the current values.\n    */\n   defaultValue(values) {\n      // this field is read only\n      delete values[this.columnName];\n   }\n\n   format(rowData) {\n      let place = 0;\n      if (this.settings.decimalSign != \"none\") {\n         place = this.settings.decimalPlaces;\n      }\n\n      try {\n         let result = this.constructor.convertToJs(\n            this.object,\n            this.settings.formula,\n            rowData,\n            place,\n            this.alias\n         );\n\n         switch (this.settings.decimalSign) {\n            case \"comma\":\n               result = result.replace(\".\", \",\");\n               break;\n            case \"space\":\n               result = result.replace(\".\", \" \");\n               break;\n         }\n\n         return result;\n      } catch (err) {\n         return \"\";\n      }\n   }\n};\n\n","/*\n * ABFieldCombine\n *\n * An ABFieldCombine defines a combined field type.\n *\n */\n\nconst ABField = require(\"../../platform/dataFields/ABField\");\n\nfunction L(key, altText) {\n   // TODO:\n   return altText; // AD.lang.label.getLabel(key) || altText;\n}\n\nconst ABFieldCombinedDefaults = {\n   key: \"combined\",\n   // unique key to reference this specific DataField\n\n   description: \"Combined Value\",\n   // description: what gets displayed in the Editor description.\n   // NOTE: this will be displayed using a Label: L(description)\n\n   icon: \"key\",\n   // font-awesome icon reference.  (without the 'fa-').  so 'key'  to\n   // reference 'fa-key'\n\n   isFilterable: true,\n   // {bool} / {fn}\n   // determines if the current ABField can be used to filter (FilterComplex\n   // or Query) data.\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\n   //  (field) => field.setting.something == true\n\n   isSortable: false,\n   // {bool} / {fn}\n   // determines if the current ABField can be used to Sort data.\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\n   //  (field) => true/false\n\n   menuName: \"Combined Field\",\n   // menuName: what gets displayed in the Editor drop list\n   // NOTE: this will be displayed using a Label: L(menuName)\n\n   supportRequire: false,\n   // {bool}\n   // does this ABField support the Required setting?\n\n   supportUnique: false,\n   // {bool}\n   // does this ABField support the Unique setting?\n\n   useAsLabel: true,\n   // {bool} / {fn}\n   // determines if this ABField can be used in the display of an ABObject's\n   // label.\n\n   compatibleOrmTypes: [\"string\"],\n   // {array}\n   // what types of Sails ORM attributes can be imported into this data type?\n   // http://sailsjs.org/documentation/concepts/models-and-orm/attributes#?attribute-options\n\n   compatibleMysqlTypes: [\"text\", \"mediumtext\", \"longtext\"],\n   // {array}\n   // what types of MySql column types can be imported into this data type?\n   // https://www.techonthenet.com/mysql/datatypes.php\n};\n\n// defaultValues: the keys must match a .name of your elements to set it's default value.\nconst defaultValues = {\n   combinedFields: \"\",\n   // {string} \"field's uuid1, field's uuid2, field's uuid3, ...\"\n   // This tells us what fields will be combined.\n   // if we don't have this, the old value which we filled out won't be cleared when we do \"Add field\" this type again.\n\n   delimiter: \"plus\", // plus, space, dash, period\n};\n\nmodule.exports = class ABFieldCombineCore extends ABField {\n   constructor(values, object) {\n      super(values, object, ABFieldCombinedDefaults);\n   }\n\n   // return the default values for this DataField\n   static defaults() {\n      return ABFieldCombinedDefaults;\n   }\n\n   static defaultValues() {\n      return defaultValues;\n   }\n\n   fromValues(values) {\n      super.fromValues(values);\n\n      this.settings.delimiter =\n         values.settings.delimiter || defaultValues.delimiter;\n   }\n\n   /**\n    * @method defaultValue\n    * insert a key=>value pair that represent the default value\n    * for this field.\n    * @param {obj} values a key=>value hash of the current values.\n    */\n   defaultValue(values) {\n      // Remove every values, then we will use AUTO_INCREMENT of MySQL\n      delete values[this.columnName];\n   }\n\n   warnings() {\n      this._warnings = [];\n\n      (this.settings.combinedFields.split(\",\") || []).forEach((id) => {\n         var field = this.object.fieldByID(id);\n         if (!field) {\n            this.emit(\"warning\", \"dependent field not found\", {\n               fieldID: id,\n               combinedFields: this.settings.combinedFields,\n            });\n         }\n      });\n      // console.error(\"combinedFields:\", this.settings.combinedFields);\n\n      return this._warnings;\n   }\n};\n","/*\n * ABFieldConnect\n *\n * An ABFieldConnect defines a connect to other object field type.\n *\n */\n\nvar ABField = require(\"../../platform/dataFields/ABField\");\n\n// function L(key, altText) {\n//    // TODO:\n//    return altText; // AD.lang.label.getLabel(key) || altText;\n// }\n\nconst ABFieldConnectDefaults = {\n   key: \"connectObject\",\n   // unique key to reference this specific DataField\n\n   description: \"Connect two data objects together\",\n   // description: what gets displayed in the Editor description.\n   // NOTE: this will be displayed using a Label: L(description)\n\n   icon: \"external-link\",\n   // font-awesome icon reference.  (without the 'fa-').  so 'external-link'  to\n   // reference 'fa-external-link'\n\n   isFilterable: true,\n   // {bool} / {fn}\n   // determines if the current ABField can be used to filter (FilterComplex\n   // or Query) data.\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\n   //  (field) => field.setting.something == true\n\n   isSortable: (field) => {\n      const linkType = `${field?.settings?.linkType}:${field?.settings?.linkViaType}`;\n      return [\"one:many\", \"one:one\"].indexOf(linkType) > -1;\n   },\n   // {bool} / {fn}\n   // determines if the current ABField can be used to Sort data.\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\n   //  (field) => true/false\n\n   menuName: \"Connect to another record\",\n   // menuName: what gets displayed in the Editor drop list\n   // NOTE: this will be displayed using a Label: L(menuName)\n\n   supportRequire: false,\n   // {bool}\n   // does this ABField support the Required setting?\n\n   supportUnique: false,\n   // {bool}\n   // does this ABField support the Unique setting?\n\n   useAsLabel: false,\n   // {bool} / {fn}\n   // determines if this ABField can be used in the display of an ABObject's\n   // label.\n\n   compatibleOrmTypes: [\"string\"],\n   // {array}\n   // what types of Sails ORM attributes can be imported into this data type?\n   // http://sailsjs.org/documentation/concepts/models-and-orm/attributes#?attribute-options\n\n   compatibleMysqlTypes: [\"char\", \"varchar\", \"tinytext\"],\n   // {array}\n   // what types of MySql column types can be imported into this data type?\n   // https://www.techonthenet.com/mysql/datatypes.php\n};\n\nconst defaultValues = {\n   linkObject: \"\", // ABObject.id\n   // the .id of the ABObject we are connected to\n\n   linkType: \"one\", // [one, many]\n   // 'one' : this object can have only 1 of our linkObject\n   // 'many': this object can have MANY of our linkObject\n\n   linkViaType: \"many\", // [one, many]\n   // 'one' : the linkedObject can only have 1 of me\n   // 'many' : the linkedObject can have many of me\n\n   linkColumn: \"\", // ABField.id\n   // the .id of the field in the linkedObject that is our\n   // connected field.\n\n   isSource: null, // bit : 1,0\n   // isSource indicates that this object is the source of the connection:\n   // if linkType==one, and isSource=1, then the value in this object's field\n   // \t\tis the connected object's id\n   // if linkType == one, and isSource = 0, then the linkObject has this obj.id\n   //  \tin it's connected field (linkColumn)\n\n   // the next 3 Fields are concerning how we connect to other ABObjects when\n   // we are NOT using the .uuid as the connecting Value. Instead, there is an\n   // ABIndex setting we are connecting with.\n   isCustomFK: 0,\n   // {bool} truthy [0,1, etc...]\n   // indicates that this connection is using 1 or more custom foreign keys\n   // for the data it is storing in it's relationship.\n\n   indexField: \"\", // ABField.id\n   // {string} {ABField.id}\n   // In a Connection defined between A --> B, this field represents the ABField\n   // that is used for the data being stored.\n   // In 1:1,  1:M  or M:1  relationships, .indexField always refers to the\n   //       field we are pulling the Data FROM.\n   // In M:N relationships:  this will refer to the A.Field.id that is a custom\n   //       key (if any).\n\n   indexField2: \"\", // ABField.id\n   // {string}  {ABField.id}\n   // In the M:N relationship: this field refers to the B.Field.id that is a\n   //       custom Key for the data we are storing.\n};\n\nmodule.exports = class ABFieldConnectCore extends ABField {\n   constructor(values, object, fieldDefaults = ABFieldConnectDefaults) {\n      super(values, object, fieldDefaults);\n\n      this.isConnection = true;\n      // {bool}\n      // is this an ABFieldConnect type of field.\n      // this is a simplified helper to identify if an ABField is a type\n      // of connect field.  Since this is the only place it is defined,\n      // all other field types will be falsy\n\n      // // text to Int:\n      // this.settings.isSource = parseInt(this.settings.isSource || 0);\n      // this.settings.isCustomFK = parseInt(this.settings.isCustomFK || 0);\n   }\n\n   // return the default values for this DataField\n   static defaults() {\n      return ABFieldConnectDefaults;\n   }\n\n   static defaultValues() {\n      return defaultValues;\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   fromValues(values) {\n      super.fromValues(values);\n\n      // text to Int:\n      this.settings.isSource = parseInt(this.settings.isSource || 0);\n      this.settings.isCustomFK = parseInt(this.settings.isCustomFK || 0);\n   }\n\n   warnings() {\n      this._warnings = [];\n\n      var linkField = this.fieldLink;\n      if (!linkField) {\n         this.emit(\n            \"warning\",\n            `ConnectField[${this.label}][${this.id}] is unable to find linked field[${this.settings.linkColumn}]`,\n            {\n               linkColumn: this.settings.linkColumn,\n            }\n         );\n      }\n\n      let linkObj = this.datasourceLink;\n      if (!linkObj) {\n         this.emit(\n            \"warning\",\n            `ConnectField[${this.label}][${this.id}] is unable to find linked object[${this.settings.linkObject}]`,\n            {\n               linkObject: this.settings.linkObject,\n            }\n         );\n      }\n\n      return this._warnings;\n   }\n\n   ///\n   /// Working with Actual Object Values:\n   ///\n\n   /**\n    * @method defaultValue\n    * insert a key=>value pair that represent the default value\n    * for this field.\n    * @param {obj} values a key=>value hash of the current values.\n    */\n   defaultValue(/* values */) {}\n\n   /**\n    * @method isValidData\n    * Parse through the given data and return an error if this field's\n    * data seems invalid.\n    * @param {obj} data  a key=>value hash of the inputs to parse.\n    * @param {OPValidator} validator  provided Validator fn\n    * @return {array}\n    */\n   isValidData(data, validator) {\n      super.isValidData(data, validator);\n   }\n\n   relationName() {\n      // there is object name - {objectName}.{columnName}\n      if (this.columnName.indexOf(\".\") > -1) {\n         const names = this.columnName.split(\".\");\n         return `${names[0]}.${this.AB.rules.toFieldRelationFormat(names[1])}`;\n      } else {\n         return this.AB.rules.toFieldRelationFormat(this.columnName);\n      }\n   }\n\n   /**\n    * @method datasourceLink\n    * return the ABObject that this field connection links to\n    * @return {ABObject}\n    */\n   get datasourceLink() {\n      const linkObj = this.AB.objectByID(this.settings.linkObject);\n      if (!linkObj) {\n         const configError = new Error(\n            `ConnectField[${this.label}][${this.id}] unable to find linkObject[${this.settings.linkObject}]`\n         );\n         this.AB.notify.builder(configError, {\n            field: this,\n            linkObject: this.settings.linkObject,\n         });\n      }\n      return linkObj;\n   }\n\n   /**\n    * @method fieldLink\n    * return the ABField that we are linked to.\n    * @return {ABDataField}  or undefined if not found.\n    */\n   get fieldLink() {\n      const objectLink = this.datasourceLink;\n      if (!objectLink) return null; // note: already Notified\n\n      const linkColumn = objectLink.fieldByID(this.settings.linkColumn);\n      if (!linkColumn) {\n         const configError = new Error(\n            `ConnectField[${this.label}][${this.id}] unable to find linkColumn[${this.settings.linkColumn}]`\n         );\n         this.AB.notify.builder(configError, {\n            field: this,\n            linkColumn: this.settings.linkColumn,\n         });\n      }\n      return linkColumn;\n   }\n\n   /**\n    * @method pullRelationValues\n    * Return the data values for this field entry in the provided data row.\n    * @param {*} row\n    * @return {array}\n    */\n   pullRelationValues(row) {\n      let selectedData;\n\n      // Get linked object\n      const linkedObject = this.datasourceLink;\n\n      let data = this.dataValue(row);\n      if (data && linkedObject) {\n         // convert to JSON\n         if (typeof data == \"string\") {\n            try {\n               data = JSON.parse(data);\n            } catch (e) {\n               // must be a UUID\n               // so just set that to selectedData:\n               selectedData = data;\n            }\n         }\n\n         selectedData = data;\n      }\n\n      return selectedData;\n   }\n\n   dataValue(rowData) {\n      if (rowData == null) return \"\";\n\n      const propName = `${this.object.name}.${this.relationName()}`;\n\n      return (\n         rowData[this.relationName()] ||\n         rowData[propName] ||\n         rowData[this.columnName] ||\n         \"\"\n      );\n   }\n\n   format(rowData) {\n      const val = this.pullRelationValues(rowData);\n      const linkedObject = this.datasourceLink;\n\n      // array\n      if (Array.isArray(val))\n         return val\n            .map((v) => {\n               if (v.text == null) return linkedObject.displayData(v) || \"\";\n               else return v.text || \"\";\n            })\n            .join(\", \");\n      // string\n      else if (val) {\n         if (val.text == null) return linkedObject.displayData(rowData) || \"\";\n         else if (val.text) return val.text || \"\";\n      }\n      // empty string\n      else return \"\";\n   }\n\n   /**\n    * @method linkType\n    * return the type of connection we have to our connected object\n    * @return {string}\n    */\n   linkType() {\n      return this.settings.linkType;\n   }\n\n   /**\n    * @method linkType\n    * return the type of connection we have to our connected object\n    * @return {string}\n    */\n   linkViaType() {\n      return this.settings.linkViaType;\n   }\n\n   /**\n    * @method isSource\n    * does this object contain the .id of the remote object (in case of linkType : one )\n    * @return {bool}\n    */\n   isSource() {\n      return this.settings.isSource;\n   }\n\n   /**\n    * @property indexField\n    * @return {ABField}\n    */\n   get indexField() {\n      if (!this.settings.isCustomFK || !this.settings.indexField) {\n         return null;\n      }\n\n      // 1:M\n      if (\n         this.settings.linkType == \"one\" &&\n         this.settings.linkViaType == \"many\"\n      ) {\n         return this.datasourceLink.fields(\n            (f) => f.id == this.settings.indexField\n         )[0];\n      }\n      // 1:1\n      else if (\n         this.settings.linkType == \"one\" &&\n         this.settings.linkViaType == \"one\"\n      ) {\n         if (this.settings.isSource) {\n            return this.datasourceLink.fields(\n               (f) => f.id == this.settings.indexField\n            )[0];\n         } else {\n            return this.object.fields(\n               (f) => f.id == this.settings.indexField\n            )[0];\n         }\n      }\n      // M:1\n      else if (\n         this.settings.linkType == \"many\" &&\n         this.settings.linkViaType == \"one\"\n      ) {\n         return this.object.fields((f) => f.id == this.settings.indexField)[0];\n      }\n      // M:N\n      else if (\n         this.settings.linkType == \"many\" &&\n         this.settings.linkViaType == \"many\"\n      ) {\n         let indexField = this.object.fields(\n            (f) => f.id == this.settings.indexField\n         )[0];\n\n         if (indexField == null)\n            indexField = this.datasourceLink.fields(\n               (f) => f.id == this.settings.indexField\n            )[0];\n\n         return indexField;\n      }\n\n      return null;\n   }\n\n   /**\n    * @property indexField2\n    * @return {ABField}\n    */\n   get indexField2() {\n      if (!this.settings.isCustomFK || !this.settings.indexField2) {\n         return null;\n      }\n\n      let indexField;\n\n      // M:N only\n      if (\n         this.settings.linkType == \"many\" &&\n         this.settings.linkViaType == \"many\"\n      ) {\n         indexField = this.object.fields(\n            (f) => f.id == this.settings.indexField2\n         )[0];\n\n         if (indexField == null)\n            indexField = this.datasourceLink.fields(\n               (f) => f.id == this.settings.indexField2\n            )[0];\n      }\n\n      return indexField;\n   }\n\n   /**\n    * @method getRelationValue\n    * pull values for update connect data\n    * @param {Object} rowData\n    * @param {Object} options - {\n    *                               forUpdate: boolean\n    *                           }\n    * @return {Object}\n    */\n   getRelationValue(rowData, options = {}) {\n      if (rowData == null) return;\n      let colName;\n      const indexField = this.indexField;\n      const datasourceLink = this.datasourceLink;\n\n      // custom index\n      // M:N\n      if (\n         this.settings.linkType == \"many\" &&\n         this.settings.linkViaType == \"many\"\n      ) {\n         const indexField2 = this.indexField2;\n\n         if (indexField && indexField.object.id == datasourceLink.id) {\n            colName = indexField.columnName;\n         } else if (indexField2 && indexField2.object.id == datasourceLink.id) {\n            colName = indexField2.columnName;\n         }\n      }\n      // 1:M, 1:1 isSource = true\n      else if (\n         indexField &&\n         ((this.settings.linkType == \"one\" &&\n            this.settings.linkViaType == \"many\") ||\n            (this.settings.linkType == \"one\" &&\n               this.settings.linkViaType == \"one\" &&\n               this.settings.isSource))\n      ) {\n         colName = indexField.columnName;\n      }\n      // M:1\n      else if (\n         this.settings.linkType == \"many\" &&\n         this.settings.linkViaType == \"one\"\n      ) {\n         // NOTE: M:1 has special case\n         // it uses different value for search and update.\n         // UPDATE uses row id\n         // SEARCH uses custom index value\n         if (options.forUpdate) {\n            colName = datasourceLink.PK();\n         } else {\n            colName = indexField\n               ? indexField.columnName\n               : this.fieldLink.columnName;\n         }\n      }\n      // NO CUSTOM INDEX\n      else if (datasourceLink) {\n         colName = datasourceLink.PK();\n      }\n\n      let result = rowData[colName] || rowData.id || rowData;\n\n      if (colName == \"id\") {\n         result = parseInt(result);\n      }\n\n      return result;\n   }\n};\n","/*\n * ABFieldCore\n *\n * ABFieldBase defines the common ABField structure that is shared between\n * the client and the server.  Mostly how it manages it's internal data, and\n * how it is related to the ABObject classes.\n *\n */\n// const ABEmitter = require(\"../../platform/ABEmitter\");\nconst ABMLClass = require(\"../../platform/ABMLClass\");\n\nmodule.exports = class ABFieldCore extends ABMLClass {\n   constructor(values, object, fieldDefaults) {\n      super([\"label\"], object.AB);\n\n      // NOTE: setup this first so later we can use .fieldType(), .fieldIcon()\n      this.defaults = fieldDefaults || {};\n\n      /*\n  \t\t{\n  \t\t\tid:'uuid',\t\t\t\t\t// uuid value for this obj\n  \t\t\tkey:'fieldKey',\t\t\t\t// unique key for this Field\n  \t\t\ticon:'font',\t\t\t\t// fa-[icon] reference for an icon for this Field Type\n  \t\t\tlabel:'',\t\t\t\t\t// pulled from translation\n\t\t\tcolumnName:'column_name',\t// a valid mysql table.column name\n\t\t\tisImported: 1/0,\t\t\t// flag to mark is import from other object\n\t\t\tsettings: {\t\t\t\t\t// unique settings for the type of field\n\t\t\t\tshowIcon:true/false,\t// only useful in Object Workspace DataTable\n\t\t\t\tisImported: 1/0,\t\t// flag to mark is import from other object\n\t\t\t\trequired: 1/0,\t\t\t// field allows does not allow NULL or it does allow NULL\n\t\t\t\twidth: {int}\t\t\t// width of display column\n\n\t\t\t\t// specific for dataField\n\t\t\t},\n\t\t\ttranslations:[]\n  \t\t}\n  \t\t*/\n\n      this.object = object;\n\n      this.fromValues(values);\n   }\n\n   ///\n   /// Static Methods\n   ///\n   /// Available to the Class level object.  These methods are not dependent\n   /// on the instance values of the Application.\n   ///\n   static get reservedNames() {\n      return [\n         \"id\",\n         \"created_at\",\n         \"updated_at\",\n         \"properties\",\n         \"createdAt\",\n         \"updatedAt\",\n      ];\n   }\n\n   static defaultValues() {\n      return {};\n   }\n\n   // unique key to reference this specific DataField\n   fieldKey() {\n      return this.defaults.key;\n   }\n\n   /**\n    * Sails ORM data types that can be imported to this DataField\n    * @return {Array}\n    */\n   fieldOrmTypes() {\n      if (this.defaults.compatibleOrmTypes) {\n         if (Array.isArray(this.defaults.compatibleOrmTypes)) {\n            return this.defaults.compatibleOrmTypes;\n         } else {\n            return [this.defaults.compatibleOrmTypes];\n         }\n      } else {\n         return [];\n      }\n   }\n\n   /**\n    * Mysql data types that can be imported to this DataField\n    * @return {Array}\n    */\n   fieldMysqlTypes() {\n      if (this.defaults.compatibleMysqlTypes) {\n         if (Array.isArray(this.defaults.compatibleMysqlTypes)) {\n            return this.defaults.compatibleMysqlTypes;\n         } else {\n            return [this.defaults.compatibleMysqlTypes];\n         }\n      } else {\n         return [];\n      }\n   }\n\n   // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\n   fieldIcon() {\n      return this.defaults.icon;\n   }\n\n   // the multilingual text for the name of this data field.\n   fieldMenuName() {\n      return this.defaults.menuName;\n   }\n\n   // the multilingual text for the name of this data field.\n   fieldDescription() {\n      return this.defaults.description;\n   }\n\n   // the flag to set when checking if field should be filterable\n   fieldIsFilterable() {\n      if (this.defaults.isFilterable != null) {\n         if (typeof this.defaults.isFilterable === \"function\") {\n            return this.defaults.isFilterable(this);\n         } else {\n            return this.defaults.isFilterable;\n         }\n      }\n\n      return 1;\n   }\n\n   // the flag to set when checking if field should be sortable\n   fieldIsSortable() {\n      if (this.defaults.isSortable != null) {\n         if (typeof this.defaults.isSortable === \"function\") {\n            return this.defaults.isSortable(this);\n         } else {\n            return this.defaults.isSortable;\n         }\n      }\n\n      return 1;\n   }\n\n   // the flag to set when checking if the field should be used as a label\n   fieldUseAsLabel() {\n      if (this.defaults.useAsLabel != null) {\n         if (typeof this.defaults.useAsLabel === \"function\") {\n            return this.defaults.useAsLabel(this);\n         } else {\n            return this.defaults.useAsLabel;\n         }\n      }\n\n      return 1;\n   }\n\n   fieldSupportRequire() {\n      if (this.defaults.supportRequire) return this.defaults.supportRequire;\n      // default\n      else return true;\n   }\n\n   fieldSupportQuery() {\n      if (this.defaults.supportQuery != null) {\n         if (typeof this.defaults.supportQuery === \"function\") {\n            return this.defaults.supportQuery(this);\n         } else {\n            return this.defaults.supportQuery;\n         }\n      }\n\n      return true;\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   /// ABApplication data methods\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABField instance\n    * into the values needed for saving to the DB.\n    *\n    * @return {json}\n    */\n   toObj() {\n      const obj = super.toObj();\n\n      return {\n         id: this.id,\n         type: this.type || \"field\",\n         key: this.key,\n         icon: this.icon,\n         isImported: this.isImported,\n         columnName: this.columnName,\n         settings: this.settings,\n         translations: obj.translations,\n      };\n   }\n\n   defaultCheck(val, defaultVal) {\n      let returnVal = defaultVal;\n      if (typeof val != \"undefined\") {\n         returnVal = val;\n      }\n      return returnVal;\n   }\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      if (!this.id) this.id = values.id; // NOTE: only exists after .save()\n      this.type == values.type || \"field\";\n      this.key = values.key || this.fieldKey();\n      this.icon = values.icon || this.fieldIcon();\n\n      // if this is being instantiated on a read from the Property UI,\n      // .label is coming in under .settings.label\n      this.label = values.label || values.settings.label || \"?label?\";\n\n      this.columnName = values.columnName || \"\";\n\n      this.isImported = values.isImported || 0;\n\n      values.settings = values.settings || {};\n      this.settings = values.settings;\n      this.settings.showIcon = this.defaultCheck(values.settings.showIcon, \"1\");\n      this.settings.required = this.defaultCheck(values.settings.required, \"0\");\n      this.settings.width = this.defaultCheck(values.settings.width, \"0\");\n\n      // convert from \"0\" => 0\n      this.isImported = parseInt(this.isImported);\n      this.settings.showIcon = parseInt(this.settings.showIcon);\n      this.settings.required = parseInt(this.settings.required);\n      this.settings.unique = parseInt(this.settings.unique || 0);\n      this.settings.width = parseInt(this.settings.width);\n\n      // we're responsible for setting up our specific settings:\n      const defaultValues = this.constructor.defaultValues() || {};\n      for (const dv in defaultValues) {\n         this.settings[dv] = this.defaultCheck(\n            values.settings[dv],\n            defaultValues[dv]\n         );\n      }\n\n      // const the MLClass now process the Translations\n      super.fromValues(values);\n\n      // final validity check: columnName really should have a value:\n      this.columnName = this.columnName || this.label;\n\n      // knex does not like .(dot) in table and column names\n      // https://github.com/knex/knex/issues/2762\n      this.columnName = this.columnName.replace(/[^a-zA-Z0-9_ ]/gi, \"\");\n   }\n\n   /**\n    * @method urlPointer()\n    * return a string pointer to decode this object from the root application\n    * object.\n    * @return {string} pointer reference\n    */\n   urlPointer() {\n      return this.object.urlField() + this.id;\n   }\n\n   /**\n    * @method defaultValue\n    * insert a key=>value pair that represent the default value\n    * for this field.\n    * @param {obj} values a key=>value hash of the current values.\n    */\n   defaultValue(values) {\n      values[this.columnName] = \"\";\n   }\n\n   /**\n    * @method isValidData\n    * Parse through the given data and return an error if this field's\n    * data seems invalid.\n    * @param {obj} data  a key=>value hash of the inputs to parse.\n    */\n   isValidData(data, validator) {\n      // console.error('!!! Field ['+this.fieldKey()+'] has not implemented .isValidData()!!!');\n      if (\n         this.settings.required &&\n         (data[this.columnName] == null || data[this.columnName] == \"\") &&\n         data[this.columnName] != 0\n      ) {\n         validator.addError(this.columnName, \"This is a required field.\");\n      }\n   }\n\n   /*\n    * @property isMultilingual\n    * does this field represent multilingual data?\n    * @return {bool}\n    */\n   get isMultilingual() {\n      return false;\n   }\n\n   dataValue(rowData) {\n      const propName = `${this.alias || this.object.name}.${this.columnName}`;\n\n      let result = \"\";\n      if (rowData[this.columnName] != null) {\n         result = rowData[this.columnName];\n      } else if (rowData[propName] != null) {\n         result = rowData[propName];\n      }\n\n      return result;\n   }\n\n   /**\n    * @method format\n    * return display text to detail comonent and define label of object\n    *\n    * @param {Object} rowData - data\n    */\n   format(rowData) {\n      if (rowData) {\n         return this.dataValue(rowData);\n      } else return \"\";\n   }\n\n   /**\n    * @method toDefinition()\n    *\n    * convert this instance into an ABDefinition object.\n    *\n    * @return {ABDefinition}\n    */\n   toDefinition() {\n      const myDef = super.toDefinition();\n\n      // attempt to provide a more descriptive name:\n      // [obj]->[fieldName]\n      if (myDef.name == \"\") {\n         myDef.name =\n            myDef.json.name || myDef.json.label || myDef.json.columnName;\n      }\n      if (this.object && this.object.name) {\n         myDef.name = `${this.object.name}->${myDef.name}`;\n      }\n      return myDef;\n   }\n};\n","/*\n * ABFieldDate\n *\n * An ABFieldDate defines a date field type.\n *\n */\n\nconst ABField = require(\"../../platform/dataFields/ABField\");\n\nfunction L(key, altText) {\n   // TODO:\n   return altText; // AD.lang.label.getLabel(key) || altText;\n}\n\nconst ABFieldDateDefaults = {\n   key: \"date\",\n   // unique key to reference this specific DataField\n\n   description: \"Pick one from a calendar.\",\n   // description: what gets displayed in the Editor description.\n   // NOTE: this will be displayed using a Label: L(description)\n\n   icon: \"calendar\",\n   // font-awesome icon reference.  (without the 'fa-').  so 'calendar'  to\n   // reference 'fa-calendar'\n\n   isFilterable: true,\n   // {bool} / {fn}\n   // determines if the current ABField can be used to filter (FilterComplex\n   // or Query) data.\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\n   //  (field) => field.setting.something == true\n\n   isSortable: true,\n   // {bool} / {fn}\n   // determines if the current ABField can be used to Sort data.\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\n   //  (field) => true/false\n\n   menuName: \"Date\",\n   // menuName: what gets displayed in the Editor drop list\n   // NOTE: this will be displayed using a Label: L(menuName)\n\n   supportRequire: true,\n   // {bool}\n   // does this ABField support the Required setting?\n\n   supportUnique: false,\n   // {bool}\n   // does this ABField support the Unique setting?\n\n   useAsLabel: true,\n   // {bool} / {fn}\n   // determines if this ABField can be used in the display of an ABObject's\n   // label.\n\n   compatibleOrmTypes: [\"date\"],\n   // {array}\n   // what types of Sails ORM attributes can be imported into this data type?\n   // http://sailsjs.org/documentation/concepts/models-and-orm/attributes#?attribute-options\n\n   compatibleMysqlTypes: [\"date\"],\n   // {array}\n   // what types of MySql column types can be imported into this data type?\n   // https://www.techonthenet.com/mysql/datatypes.php\n};\n\nconst defaultValues = {\n   dateFormat: 2, // 1 (Ignore date), 2, 3, 4, 5\n   defaultDate: 1, // 1 (None), 2 (Current Date), 3 (Specific Date)\n   defaultDateValue: null, // {Date}\n   validateCondition: \"none\",\n   validateRangeUnit: \"days\",\n   validateRangeBefore: 0,\n   validateRangeAfter: 0,\n   validateStartDate: null,\n   validateEndDate: null,\n};\n\nmodule.exports = class ABFieldDateCore extends ABField {\n   constructor(values, object, defaultValues = ABFieldDateDefaults) {\n      super(values, object, defaultValues);\n   }\n\n   // return the default values for this DataField\n   static defaults() {\n      return ABFieldDateDefaults;\n   }\n\n   static defaultValues() {\n      return defaultValues;\n   }\n\n   // TODO: current webpack install fails here without babel-loader,\n   // so swtich this to old JS method of Static Values (see bottom)\n   // static RegEx = \"^[0-9]{4}-[0-9]{2}-[0-9]{2}$\";\n\n   ///\n   /// Instance Methods\n   ///\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      super.fromValues(values);\n\n      // text to Int:\n      this.settings.dateFormat = parseInt(this.settings.dateFormat);\n      this.settings.defaultDate = parseInt(this.settings.defaultDate);\n   }\n\n   ///\n   /// Working with Actual Object Values:\n   ///\n\n   /**\n    * @method defaultValue\n    * insert a key=>value pair that represent the default value\n    * for this field.\n    * @param {obj} values a key=>value hash of the current values.\n    */\n   defaultValue(values) {\n      if (values[this.columnName] != null) return;\n\n      let dateResult;\n\n      // Set current date as default\n      if (this.settings.defaultDate == 2) {\n         dateResult = new Date();\n      }\n      // Set specific date as default\n      else if (\n         this.settings.defaultDate == 3 &&\n         this.settings.defaultDateValue\n      ) {\n         dateResult = new Date(this.settings.defaultDateValue);\n      }\n\n      // if no default value is set, then don't insert a value.\n      if (dateResult != null) {\n         values[this.columnName] = this.AB.toDateFormat(dateResult, {\n            format: \"YYYY-MM-DD\",\n         });\n         // values[this.columnName] = moment(dateResult).format(\"YYYY-MM-DD\");\n      }\n   }\n\n   /**\n    * @method isValidData\n    * Parse through the given data and return an error if this field's\n    * data seems invalid.\n    * @param {obj} data  a key=>value hash of the inputs to parse.\n    * @param {OPValidator} validator  provided Validator fn\n    */\n   isValidData(data, validator) {\n      super.isValidData(data, validator);\n\n      if (data[this.columnName]) {\n         let value = data[this.columnName];\n\n         if (!(value instanceof Date)) {\n            value = this.AB.toDate(value);\n            // value = new Date(this.convertToMoment(value));\n         }\n\n         // verify we didn't end up with an InValid Date result.\n         if (\n            Object.prototype.toString.call(value) === \"[object Date]\" &&\n            isFinite(value)\n         ) {\n            let isValid = true;\n\n            // Custom vaildate is here\n            if (this.settings && this.settings.validateCondition) {\n               const startDate = this.settings.validateStartDate\n                     ? new Date(this.settings.validateStartDate)\n                     : null,\n                  endDate = this.settings.validateEndDate\n                     ? new Date(this.settings.validateEndDate)\n                     : null,\n                  startDateDisplay = this.getDateDisplay(startDate),\n                  endDateDisplay = this.getDateDisplay(endDate);\n               const minDate = this.AB.subtractDate(\n                  new Date(),\n                  this.settings.validateRangeBefore,\n                  this.settings.validateRangeUnit\n               );\n               const maxDate = this.AB.addDate(\n                  new Date(),\n                  this.settings.validateRangeAfter,\n                  this.settings.validateRangeUnit\n               );\n               switch (this.settings.validateCondition) {\n                  case \"dateRange\":\n                     if (minDate < value && value < maxDate) isValid = true;\n                     else {\n                        isValid = false;\n                        validator.addError(\n                           this.columnName,\n                           L(\"Should be in between {0} and {1}\", [\n                              this.getDateDisplay(minDate),\n                              this.getDateDisplay(maxDate),\n                           ])\n                        );\n                     }\n\n                     break;\n                  case \"between\":\n                     if (startDate < value && value < endDate) isValid = true;\n                     else {\n                        isValid = false;\n                        validator.addError(\n                           this.columnName,\n                           L(\"Should be in between {0} and {1}\", [\n                              startDateDisplay,\n                              endDateDisplay,\n                           ])\n                        );\n                     }\n                     break;\n                  case \"notBetween\":\n                     if (value < startDate && endDate < value) isValid = true;\n                     else {\n                        isValid = false;\n                        validator.addError(\n                           this.columnName,\n                           L(\"Should not be in between {0} and {1}\", [\n                              startDateDisplay,\n                              endDateDisplay,\n                           ])\n                        );\n                     }\n                     break;\n                  case \"=\":\n                     isValid =\n                        value.getTime &&\n                        startDate.getTime &&\n                        value.getTime() == startDate.getTime();\n                     if (!isValid)\n                        validator.addError(\n                           this.columnName,\n                           L(\"Should equal {0}\", [startDateDisplay])\n                        );\n                     break;\n                  case \"<>\":\n                     isValid =\n                        value.getTime &&\n                        startDate.getTime &&\n                        value.getTime() != startDate.getTime();\n                     if (!isValid)\n                        validator.addError(\n                           this.columnName,\n                           L(\"Should not equal {0}\", [startDateDisplay])\n                        );\n                     break;\n                  case \">\":\n                     isValid =\n                        value.getTime &&\n                        startDate.getTime &&\n                        value.getTime() > startDate.getTime();\n                     if (!isValid)\n                        validator.addError(\n                           this.columnName,\n                           L(\"Should after {0}\", [startDateDisplay])\n                        );\n                     break;\n                  case \"<\":\n                     isValid =\n                        value.getTime &&\n                        startDate.getTime &&\n                        value.getTime() < startDate.getTime();\n                     if (!isValid)\n                        validator.addError(\n                           this.columnName,\n                           L(\"Should before {0}\", [startDateDisplay])\n                        );\n                     break;\n                  case \">=\":\n                     isValid =\n                        value.getTime &&\n                        startDate.getTime &&\n                        value.getTime() >= startDate.getTime();\n                     if (!isValid)\n                        validator.addError(\n                           this.columnName,\n                           L(\"Should after or equal {0}\", [startDateDisplay])\n                        );\n                     break;\n                  case \"<=\":\n                     isValid =\n                        value.getTime &&\n                        startDate.getTime &&\n                        value.getTime() <= startDate.getTime();\n                     if (!isValid)\n                        validator.addError(\n                           this.columnName,\n                           L(\"Should before or equal {0}\", [startDateDisplay])\n                        );\n                     break;\n               }\n            }\n\n            if (isValid) {\n               // Reformat value to DB\n               // NOTE: should we update here?\n               data[this.columnName] = this.exportValue(value);\n            }\n         } else {\n            // return a validation error\n            validator.addError(this.columnName, \"Should be a Date!\");\n         }\n      }\n   }\n\n   format(rowData) {\n      const d = this.dataValue(rowData);\n\n      if (d == \"\" || d == null) {\n         return \"\";\n      }\n\n      // pull format from settings.\n      const dateObj = this.AB.toDate(d);\n      return this.getDateDisplay(dateObj);\n\n      // const momentObj = this.convertToMoment(d);\n      // return this.getDateDisplay(new Date(momentObj));\n   }\n\n   getFormat() {\n      let dateFormatString = \"\";\n\n      const dateFormat =\n         this.settings && this.settings.dateFormat\n            ? this.settings.dateFormat\n            : \"\";\n\n      switch (dateFormat) {\n         //Ignore Date\n         case (1, 2):\n            {\n               dateFormatString = \"%d/%m/%Y\";\n            }\n            break;\n         //mm/dd/yyyy\n         case 3:\n            {\n               dateFormatString = \"%m/%d/%Y\";\n            }\n            break;\n         //M D, yyyy\n         case 4:\n            {\n               dateFormatString = \"%M %d, %Y\";\n            }\n            break;\n         //D M, yyyy\n         case 5:\n            {\n               dateFormatString = \"%d %M, %Y\";\n            }\n            break;\n         default:\n            {\n               dateFormatString = \"%d/%m/%Y\";\n            }\n            break;\n      }\n\n      return dateFormatString;\n   }\n\n   getDateDisplay(dateData) {\n      const dateFormat = this.getFormat();\n\n      return this.dateToString(dateFormat, dateData);\n   }\n\n   // convertToMoment(string) {\n   //    const result = moment(string);\n\n   //    const supportFormats = [\n   //       \"DD/MM/YYYY\",\n   //       \"MM/DD/YYYY\",\n   //       \"DD-MM-YYYY\",\n   //       \"MM-DD-YYYY\"\n   //    ];\n\n   //    supportFormats.forEach((format) => {\n   //       if (!result || !result.isValid()) result = moment(string, format);\n   //    });\n\n   //    return result;\n   // }\n\n   exportValue(value) {\n      return value ? this.AB.toDateFormat(value, {\n         format: \"YYYY-MM-DD\",\n      }) : \"\";\n      // return this.convertToMoment(value).format(\"YYYY-MM-DD\");\n   }\n\n   dateToString(dateFormat, dateData) {\n      if (dateData && dateData.toString) return dateData.toString();\n      else return \"\";\n   }\n};\n\n// Transition Code:\n// revert to static RegEx once babel-loader is working locally.\nmodule.exports.RegEx = \"^[0-9]{4}-[0-9]{2}-[0-9]{2}$\";\n","/*\n * ABFieldDateTime\n *\n * An ABFieldDateTime defines a datetime field type.\n *\n */\n\nconst ABFieldDateCore = require(\"./ABFieldDateCore\");\n\nfunction L(key, altText) {\n   // TODO:\n   return altText; // AD.lang.label.getLabel(key) || altText;\n}\n\nconst ABFieldDateDefaults = {\n   key: \"datetime\",\n   // unique key to reference this specific DataField\n\n   description: \"Pick one from date & time.\",\n   // description: what gets displayed in the Editor description.\n   // NOTE: this will be displayed using a Label: L(description)\n\n   icon: \"clock-o\",\n   // font-awesome icon reference.  (without the 'fa-').  so 'clock-o'  to\n   // reference 'clock-o'\n\n   isFilterable: true,\n   // {bool} / {fn}\n   // determines if the current ABField can be used to filter (FilterComplex\n   // or Query) data.\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\n   //  (field) => field.setting.something == true\n\n   isSortable: false,\n   // {bool} / {fn}\n   // determines if the current ABField can be used to Sort data.\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\n   //  (field) => true/false\n\n   menuName: \"Date & Time\",\n   // menuName: what gets displayed in the Editor drop list\n   // NOTE: this will be displayed using a Label: L(menuName)\n\n   supportRequire: true,\n   // {bool}\n   // does this ABField support the Required setting?\n\n   supportUnique: false,\n   // {bool}\n   // does this ABField support the Unique setting?\n\n   useAsLabel: true,\n   // {bool} / {fn}\n   // determines if this ABField can be used in the display of an ABObject's\n   // label.\n\n   compatibleOrmTypes: [\"datetime\"],\n   // {array}\n   // what types of Sails ORM attributes can be imported into this data type?\n   // http://sailsjs.org/documentation/concepts/models-and-orm/attributes#?attribute-options\n\n   compatibleMysqlTypes: [\"datetime\"],\n   // {array}\n   // what types of MySql column types can be imported into this data type?\n   // https://www.techonthenet.com/mysql/datatypes.php\n};\n\nconst defaultValues = {\n   timeFormat: 2, // 1 (Ignore time), 2, 3\n   defaultTime: 1, // 1 (None), 2 (Current Time), 3 (Specific Time)\n   defaultTimeValue: null, // {Date}\n};\n\nmodule.exports = class ABFieldDateTimeCore extends ABFieldDateCore {\n   constructor(values, object) {\n      super(values, object, ABFieldDateDefaults);\n   }\n\n   // return the default values for this DataField\n   static defaults() {\n      return ABFieldDateDefaults;\n   }\n\n   static defaultValues() {\n      const baseDefault = super.defaultValues();\n      return Object.assign(baseDefault, defaultValues);\n   }\n\n   // TODO: current webpack install fails here without babel-loader,\n   // so swtich this to old JS method of Static Values (see bottom)\n   // static RegEx = \"^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}$\";\n\n   ///\n   /// Instance Methods\n   ///\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      super.fromValues(values);\n\n      // text to Int:\n      this.settings.timeFormat = parseInt(this.settings.timeFormat);\n      this.settings.defaultTime = parseInt(this.settings.defaultTime);\n   }\n\n   ///\n   /// Working with Actual Object Values:\n   ///\n\n   /**\n    * @method defaultValue\n    * insert a key=>value pair that represent the default value\n    * for this field.\n    * @param {obj} values a key=>value hash of the current values.\n    */\n   defaultValue(values) {\n      if (values[this.columnName] != null) return;\n\n      super.defaultValue(values);\n\n      let dateResult;\n\n      // From default value of ABFieldDateCore\n      if (values[this.columnName]) {\n         dateResult = this.AB.toDate(values[this.columnName]);\n         // const momentVal = this.convertToMoment(values[this.columnName]);\n         // if (momentVal.isValid()) {\n         //    dateResult = new Date(momentVal);\n         // }\n      }\n\n      // Set current time as default\n      if (this.settings.defaultTime == 2) {\n         const currDate = new Date();\n\n         if (dateResult == null) dateResult = new Date();\n\n         dateResult.setHours(currDate.getHours());\n         dateResult.setMinutes(currDate.getMinutes());\n         dateResult.setSeconds(currDate.getSeconds());\n         dateResult.setMilliseconds(currDate.getMilliseconds());\n      }\n      // Set specific time as default\n      else if (\n         this.settings.defaultTime == 3 &&\n         this.settings.defaultTimeValue\n      ) {\n         const defaultTime = new Date(this.settings.defaultTimeValue);\n\n         if (dateResult == null) dateResult = new Date();\n\n         dateResult.setHours(defaultTime.getHours());\n         dateResult.setMinutes(defaultTime.getMinutes());\n         dateResult.setSeconds(defaultTime.getSeconds());\n         dateResult.setMilliseconds(defaultTime.getMilliseconds());\n      }\n\n      // if no default value is set, then don't insert a value.\n      if (dateResult != null)\n         values[this.columnName] = dateResult.toISOString();\n   }\n\n   getFormat() {\n      const timeFormat = this.getTimeFormat();\n\n      this.settings = this.settings || {};\n\n      if (this.settings.dateFormat == 1) {\n         return timeFormat;\n      }\n\n      const dateFormat = super.getFormat();\n\n      return `${dateFormat} ${timeFormat}`;\n   }\n\n   format(rowData) {\n      const datetimeFormat = this.getFormat();\n      const d = this.dataValue(rowData);\n      const dateObj = this.AB.toDate(d);\n\n      if (d == \"\" || d == null) {\n         return \"\";\n      }\n\n      return webix.Date.dateToStr(datetimeFormat)(dateObj);\n   }\n\n   getTimeFormat() {\n      this.settings = this.settings || {};\n      switch (this.settings.timeFormat) {\n         case 2:\n            return \" %h:%i %A\";\n         case 3:\n            return \" %H:%i\";\n         default:\n            return \"\";\n      }\n   }\n\n   /**\n    * @method exportValue\n    * @param {Date} date\n    * @return {string}\n    */\n   exportValue(date) {\n      return date?.toISOString?.() ?? \"\";\n   }\n};\n\n// Transition Code:\n// revert to static RegEx once babel-loader is working locally.\nmodule.exports.RegEx =\n   \"^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}$\";\n","/*\n * ABFieldEmail\n *\n * An ABFieldEmail defines a boolean field type.\n *\n */\n\nconst ABField = require(\"../../platform/dataFields/ABField\");\n\nfunction L(key, altText) {\n   // TODO:\n   return altText; // AD.lang.label.getLabel(key) || altText;\n}\n\nconst ABFieldEmailDefaults = {\n   key: \"email\",\n   // unique key to reference this specific DataField\n\n   description: \"Email fields are used to store email addresses.\",\n   // description: what gets displayed in the Editor description.\n   // NOTE: this will be displayed using a Label: L(description)\n\n   icon: \"envelope\",\n   // font-awesome icon reference.  (without the 'fa-').  so 'envelope'  to\n   // reference 'fa-envelope'\n\n   isFilterable: true,\n   // {bool} / {fn}\n   // determines if the current ABField can be used to filter (FilterComplex\n   // or Query) data.\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\n   //  (field) => field.setting.something == true\n\n   isSortable: false,\n   // {bool} / {fn}\n   // determines if the current ABField can be used to Sort data.\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\n   //  (field) => true/false\n\n   menuName: \"Email\",\n   // menuName: what gets displayed in the Editor drop list\n   // NOTE: this will be displayed using a Label: L(menuName)\n\n   supportRequire: true,\n   // {bool}\n   // does this ABField support the Required setting?\n\n   supportUnique: true,\n   // {bool}\n   // does this ABField support the Unique setting?\n\n   useAsLabel: true,\n   // {bool} / {fn}\n   // determines if this ABField can be used in the display of an ABObject's\n   // label.\n\n   compatibleOrmTypes: [\"string\"],\n   // {array}\n   // what types of Sails ORM attributes can be imported into this data type?\n   // http://sailsjs.org/documentation/concepts/models-and-orm/attributes#?attribute-options\n\n   compatibleMysqlTypes: [\"char\", \"varchar\", \"tinytext\"],\n   // {array}\n   // what types of MySql column types can be imported into this data type?\n   // https://www.techonthenet.com/mysql/datatypes.php\n};\n\nconst defaultValues = {\n   default: \"\",\n   defaultCheckbox: 0,\n};\n\nmodule.exports = class ABFieldEmailCore extends ABField {\n   constructor(values, object) {\n      super(values, object, ABFieldEmailDefaults);\n   }\n\n   // return the default values for this DataField\n   static defaults() {\n      return ABFieldEmailDefaults;\n   }\n\n   static defaultValues() {\n      return defaultValues;\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   fromValues(values) {\n      super.fromValues(values);\n\n      this.settings.default = values.settings.default || \"\";\n   }\n\n   ///\n   /// Working with Actual Object Values:\n   ///\n\n   /**\n    * @method defaultValue\n    * insert a key=>value pair that represent the default value\n    * for this field.\n    * @param {obj} values a key=>value hash of the current values.\n    */\n   defaultValue(values) {\n      // if no default value is set, then don't insert a value.\n      if (!values[this.columnName]) {\n         // Set default string\n         if (this.settings.default) {\n            values[this.columnName] = this.settings.default;\n         }\n      }\n   }\n\n   /**\n    * @method isValidData\n    * Parse through the given data and return an error if this field's\n    * data seems invalid.\n    * @param {obj} data  a key=>value hash of the inputs to parse.\n    * @param {OPValidator} validator  provided Validator fn\n    * @return {array}\n    */\n   isValidData(data, validator) {\n      if (data[this.columnName]) {\n         const Reg = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n         let value = data[this.columnName];\n         value = String(value).toLowerCase();\n         if (!Reg.test(value)) {\n            validator.addError(this.columnName, \"Invalid email\");\n         }\n      }\n   }\n};\n","/*\n * ABFieldFile\n *\n * An ABFieldFile defines a File field type.\n *\n */\n\nconst ABField = require(\"../../platform/dataFields/ABField\");\n\nfunction L(key, altText) {\n   // TODO:\n   return altText; // AD.lang.label.getLabel(key) || altText;\n}\n\nconst ABFieldFileDefaults = {\n   key: \"file\",\n   // unique key to reference this specific DataField\n\n   description: \"Attach a File to this object.\",\n   // description: what gets displayed in the Editor description.\n   // NOTE: this will be displayed using a Label: L(description)\n\n   icon: \"file\",\n   // font-awesome icon reference.  (without the 'fa-').  so 'file'  to\n   // reference 'fa-file'\n\n   isFilterable: false,\n   // {bool} / {fn}\n   // determines if the current ABField can be used to filter (FilterComplex\n   // or Query) data.\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\n   //  (field) => field.setting.something == true\n\n   isSortable: false,\n   // {bool} / {fn}\n   // determines if the current ABField can be used to Sort data.\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\n   //  (field) => true/false\n\n   menuName: \"File Attachment\",\n   // menuName: what gets displayed in the Editor drop list\n   // NOTE: this will be displayed using a Label: L(menuName)\n\n   supportRequire: false,\n   // {bool}\n   // does this ABField support the Required setting?\n\n   supportUnique: false,\n   // {bool}\n   // does this ABField support the Unique setting?\n\n   useAsLabel: false,\n   // {bool} / {fn}\n   // determines if this ABField can be used in the display of an ABObject's\n   // label.\n\n   compatibleOrmTypes: [\"string\"],\n   // {array}\n   // what types of Sails ORM attributes can be imported into this data type?\n   // http://sailsjs.org/documentation/concepts/models-and-orm/attributes#?attribute-options\n\n   compatibleMysqlTypes: [\"char\", \"varchar\", \"tinytext\"],\n   // {array}\n   // what types of MySql column types can be imported into this data type?\n   // https://www.techonthenet.com/mysql/datatypes.php\n};\n\nconst defaultValues = {\n   removeExistingData: 0,\n   fileSize: 0,\n   fileType: \"\",\n};\n\nmodule.exports = class ABFieldFileCore extends ABField {\n   constructor(values, object) {\n      super(values, object, ABFieldFileDefaults);\n   }\n\n   // return the default values for this DataField\n   static defaults() {\n      return ABFieldFileDefaults;\n   }\n\n   static defaultValues() {\n      return defaultValues;\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   fromValues(values) {\n      super.fromValues(values);\n\n      // text to Int:\n      this.settings.fileSize = parseInt(this.settings.fileSize);\n      this.settings.limitFileSize = parseInt(this.settings.limitFileSize);\n      this.settings.limitFileType = parseInt(this.settings.limitFileType);\n      this.settings.removeExistingData = parseInt(\n         this.settings.removeExistingData\n      );\n   }\n\n   /**\n    * @method dataValue\n    * return the file data stored as part of this field.\n    *\n    * An ABFieldFile column contains a json structure that contains\n    *  .uuid : {string} a file uuid reference\n    *  .filename : {string} the name of the file that was uploaded.\n    *\n    * This will return the json object.\n    * @param {obj} values a key=>value hash of the current values.\n    * @return {obj} { uuid, filename }, or {} if empty.\n    */\n   dataValue(rowData) {\n      const propName = `${this.alias || this.object.name}.${this.columnName}`;\n\n      let result = rowData[this.columnName] || rowData[propName] || {};\n      if (typeof result == \"string\") {\n         try {\n            result = JSON.parse(result);\n         } catch (err) {\n            // ignore error\n         }\n      }\n\n      return result;\n   }\n\n   /**\n    * @method defaultValue\n    * insert a key=>value pair that represent the default value\n    * for this field.\n    *\n    * An ABFieldFile expects a json structure that contains\n    *  .uuid : {string} a file uuid reference\n    *  .filename : {string} the name of the file that was uploaded.\n    *\n    * For a default value, we return an empty json object: \"{}\"\n    * @param {obj} values a key=>value hash of the current values.\n    */\n   defaultValue(values) {\n      values[this.columnName] = \"{}\";\n   }\n\n   format(rowData) {\n      let result = this.dataValue(rowData);\n      if (result) {\n         if (typeof result == \"string\") {\n            try {\n               result = JSON.parse(result);\n            } catch (err) {\n               // ignore error.\n            }\n         }\n\n         // return file name\n         return result ? result.filename || \"\" : \"\";\n      } else {\n         return \"\";\n      }\n   }\n\n   /**\n    * @method requestParam\n    * return the entry in the given input that relates to this field.\n    * @param {obj} allParameters  a key=>value hash of the inputs to parse.\n    * @return {obj} or undefined\n    */\n   requestParam(allParameters) {\n      const myParameter = super.requestParam(allParameters);\n\n      // if we have our default empty object, then remove the entry\n      // and let the DB insert a null value.\n      if (myParameter?.[this.columnName] == \"{}\") {\n         delete myParameter[this.columnName];\n      }\n\n      return myParameter;\n   }\n};\n","/*\n * ABFieldFormula\n *\n * An ABFieldFormula are used to run calculations on connected (child) records\n * and store the total of that calculation in the parent.\n *\n */\n\nconst ABField = require(\"../../platform/dataFields/ABField\");\n\nfunction L(key, altText) {\n   return altText; // AD.lang.label.getLabel(key) || altText;\n}\n\nconst ABFieldFormulaDefaults = {\n   key: \"formula\",\n   // unique key to reference this specific DataField\n\n   description:\n      \"Perform a calculation by a formula type based upon existing values\",\n   // description: what gets displayed in the Editor description.\n   // NOTE: this will be displayed using a Label: L(description)\n\n   icon: \"circle-o-notch\",\n   // font-awesome icon reference.  (without the 'fa-').  so 'circle-o-notch'  to\n   // reference 'fa-circle-o-notch'\n\n   isFilterable: true,\n   // {bool} / {fn}\n   // determines if the current ABField can be used to filter (FilterComplex\n   // or Query) data.\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\n   //  (field) => field.setting.something == true\n\n   isSortable: false,\n   // {bool} / {fn}\n   // determines if the current ABField can be used to Sort data.\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\n   //  (field) => true/false\n\n   menuName: \"Formula\",\n   // menuName: what gets displayed in the Editor drop list\n   // NOTE: this will be displayed using a Label: L(menuName)\n\n   supportQuery: (field) => {\n      const fieldLink = field.fieldLink;\n      if (fieldLink == null) return false;\n\n      // Not support calculate field in query\n      return fieldLink.key !== \"calculate\";\n   },\n\n   supportRequire: false,\n   // {bool}\n   // does this ABField support the Required setting?\n\n   supportUnique: false,\n   // {bool}\n   // does this ABField support the Unique setting?\n\n   useAsLabel: false,\n   // {bool} / {fn}\n   // determines if this ABField can be used in the display of an ABObject's\n   // label.\n\n   compatibleOrmTypes: [\"number\"],\n   // {array}\n   // what types of Sails ORM attributes can be imported into this data type?\n   // http://sailsjs.org/documentation/concepts/models-and-orm/attributes#?attribute-options\n\n   compatibleMysqlTypes: [\n      \"tinyint\",\n      \"smallint\",\n      \"mediumint\",\n      \"int\",\n      \"integer\",\n      \"bigint\",\n      \"decimal\",\n      \"dec\",\n      \"numeric\",\n      \"fixed\",\n      \"float\",\n      \"real\",\n   ],\n   // {array}\n   // what types of MySql column types can be imported into this data type?\n   // https://www.techonthenet.com/mysql/datatypes.php\n};\n\nconst defaultValues = {\n   field: \"\", // id of ABField : NOTE - store our connect field to support when there are multi - linked columns\n   objectLink: \"\", // id of ABObject\n   fieldLink: \"\", // id of ABField\n   type: \"sum\", // \"sum\", \"average\", \"max\", \"min\", \"count\"\n   where: \"\",\n};\n\nmodule.exports = class ABFieldFormulaCore extends ABField {\n   constructor(values, object) {\n      super(values, object, ABFieldFormulaDefaults);\n   }\n\n   // return the default values for this DataField\n   static defaults() {\n      return ABFieldFormulaDefaults;\n   }\n\n   static defaultValues() {\n      return defaultValues;\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   /**\n    * @method defaultValue\n    * insert a key=>value pair that represent the default value\n    * for this field.\n    * @param {obj} values a key=>value hash of the current values.\n    */\n   defaultValue(values) {\n      // this field is read only\n      delete values[this.columnName];\n   }\n\n   /**\n    * @method format\n    * both calculate and format the data input based of user settings\n    * for this field.\n    * @param {obj} rowData\n    *        a key=>value hash of the current values.\n    * @param {boolean} reCalculate\n    *        a boolean that signals if we should force recalculation of values\n    */\n   format(rowData, reCalculate = false) {\n      const fieldLink = this.fieldLink;\n\n      const reformat = (numData) => {\n         // ABFieldCalculate does not need to .format again\n         if (!fieldLink || fieldLink.key == \"calculate\") {\n            return numData;\n         } else {\n            const rowDataFormat = {};\n            rowDataFormat[fieldLink.columnName] = numData;\n            return fieldLink.format(rowDataFormat);\n         }\n      };\n\n      // if data exists, then will not calculate on client side\n      // unless we pass reCalculate=true to force the recalculation\n      if (rowData[this.columnName] != null && !reCalculate) {\n         // reformat data\n         return reformat(rowData[this.columnName]);\n      }\n\n      if (!fieldLink) return 0;\n\n      const fieldBase = this.fieldBase();\n      if (!fieldBase) return 0;\n\n      let data =\n         rowData[fieldBase.relationName()] ||\n         rowData[fieldBase.columnName] ||\n         [];\n      if (!Array.isArray(data)) data = [data];\n\n      // Filter\n      if (\n         data &&\n         data.length &&\n         this.settings &&\n         this.settings.where &&\n         this.settings.where.rules &&\n         this.settings.where.rules.length\n      ) {\n         this.filterHelper.setValue(this.settings.where);\n         data = data.filter((item) => this.filterHelper.isValid(item));\n      }\n\n      let numberList = [];\n\n      // pull number from data\n      switch (fieldLink.key) {\n         case \"calculate\":\n            data.forEach((d) => {\n               numberList.push(parseFloat(fieldLink.format(d) || 0));\n            });\n            break;\n         case \"number\":\n            numberList = data.map((d) => d[fieldLink.columnName] || 0);\n            break;\n      }\n\n      let result = 0;\n\n      // get the decimal size of the numbers being calculated\n      const decimalSize = fieldLink.getDecimalSize();\n\n      // calculate\n      switch (this.settings.type) {\n         case \"sum\":\n            if (numberList.length > 0) {\n               // get power of 10 to the number of decimal places this number\n               // is formated to require\n               const multiplier = Math.pow(10, decimalSize);\n               // multiply values by muliplyier and add them to pervious value\n               // because in javascript adding number with decimals can cause issues\n               // ex: 9.11 + 222.11 = 231.22000000000003\n               let sum = 0;\n               numberList.forEach((val) => {\n                  sum += val * multiplier || 0;\n               });\n               // divide result by multiplier to get actual value\n               result = sum / multiplier;\n            }\n            break;\n\n         case \"average\":\n            if (numberList.length > 0) {\n               // get power of 10 to the number of decimal places this number\n               // is formated to require\n               const multiplier = Math.pow(10, decimalSize);\n               // multiply values by muliplyier and add them to pervious value\n               // because in javascript adding number with decimals can cause issues\n               // ex: 9.11 + 222.11 = 231.22000000000003\n               let sum = 0;\n               numberList.forEach((val) => {\n                  sum += val * multiplier || 0;\n               });\n               // divide result by multiplier to get actual value\n               // and divide by length to get the average\n               result = sum / multiplier / numberList.length;\n            }\n            break;\n\n         case \"max\":\n            result = Math.max(...numberList) || 0;\n            break;\n         case \"min\":\n            result = Math.min(...numberList) || 0;\n            break;\n         case \"count\":\n            result = numberList.length;\n            break;\n      }\n\n      rowData[this.columnName] = result;\n\n      // ABFieldCalculate does not need to .format again\n      if (fieldLink.key == \"calculate\") {\n         return result;\n      } else {\n         return reformat(result);\n      }\n   }\n\n   fieldBase() {\n      return this.object.fields((f) => f.id == this.settings.field)[0];\n   }\n\n   get fieldLink() {\n      const obj = this.object.AB.objects(\n         (obj) => obj.id == this.settings.object\n      )[0];\n      if (!obj) return null;\n\n      const field = obj.fields((f) => f.id == this.settings.fieldLink)[0];\n      if (!field) return null;\n\n      return field;\n   }\n\n   get filterHelper() {\n      if (this._rowFilter == null) {\n         this._rowFilter = this.AB.filterComplexNew(`${this.id}_filterComplex`);\n\n         if (this.fieldLink && this.fieldLink.object) {\n            this._rowFilter.fieldsLoad(this.fieldLink.object.fields());\n            this._rowFilter.setValue(this.settings.where);\n         }\n      }\n\n      return this._rowFilter;\n   }\n};\n","/*\n * ABFieldImageCore\n *\n * An ABFieldImage defines a Image field type.\n *\n */\n\nconst ABField = require(\"../../platform/dataFields/ABField\");\n\nconst ABFieldImageDefaults = {\n   key: \"image\",\n   // unique key to reference this specific DataField\n\n   description: \"Attach an image to this object.\",\n   // description: what gets displayed in the Editor description.\n   // NOTE: this will be displayed using a Label: L(description)\n\n   icon: \"file-image-o\",\n   // font-awesome icon reference.  (without the 'fa-').  so 'file-image-o'  to\n   // reference 'fa-file-image-o'\n\n   isFilterable: false,\n   // {bool} / {fn}\n   // determines if the current ABField can be used to filter (FilterComplex\n   // or Query) data.\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\n   //  (field) => field.setting.something == true\n\n   isSortable: false,\n   // {bool} / {fn}\n   // determines if the current ABField can be used to Sort data.\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\n   //  (field) => true/false\n\n   menuName: \"Image Attachment\",\n   // menuName: what gets displayed in the Editor drop list\n   // NOTE: this will be displayed using a Label: L(menuName)\n\n   supportRequire: false,\n   // {bool}\n   // does this ABField support the Required setting?\n\n   supportUnique: false,\n   // {bool}\n   // does this ABField support the Unique setting?\n\n   useAsLabel: false,\n   // {bool} / {fn}\n   // determines if this ABField can be used in the display of an ABObject's\n   // label.\n\n   compatibleOrmTypes: [\"string\"],\n   // {array}\n   // what types of Sails ORM attributes can be imported into this data type?\n   // http://sailsjs.org/documentation/concepts/models-and-orm/attributes#?attribute-options\n\n   compatibleMysqlTypes: [\"char\", \"varchar\", \"tinytext\"],\n   // {array}\n   // what types of MySql column types can be imported into this data type?\n   // https://www.techonthenet.com/mysql/datatypes.php\n};\n\nconst defaultValues = {\n   useWidth: 0,\n   imageWidth: \"\",\n   useHeight: 0,\n   imageHeight: \"\",\n   removeExistingData: 0,\n   useDefaultImage: false,\n   defaultImageUrl: \"\",\n};\n\nmodule.exports = class ABFieldImageCore extends ABField {\n   constructor(values, object) {\n      super(values, object, ABFieldImageDefaults);\n\n      // NOTE: our Labels are ready here:\n      if (\n         ABFieldImageDefaults.menuName == \"*Image Attachment\" &&\n         this.AB.Label\n      ) {\n         const L = this.AB.Label();\n         ABFieldImageDefaults.menuName = L(\n            \"ab.dataField.image.menuName\",\n            \"*Image Attachment\"\n         );\n         ABFieldImageDefaults.description = L(\n            \"ab.dataField.image.description\",\n            \"*Attach an image to this object.\"\n         );\n      }\n\n      /*\n    \t{\n\t\t\tsettings: {\n\t\t\t\t'useWidth':0,\n\t\t\t\t'imageWidth':'',\n\t\t\t\t'useHeight': 0,\n\t\t\t\t'imageHeight': '',\n\t\t\t\t'removeExistingData': 0\n\t\t\t}\n    \t}\n    \t*/\n   }\n\n   // return the default values for this DataField\n   static defaults() {\n      return ABFieldImageDefaults;\n   }\n\n   static defaultValues() {\n      return defaultValues;\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   fromValues(values) {\n      super.fromValues(values);\n\n      // text to Int:\n      this.settings.useWidth = parseInt(this.settings.useWidth);\n      this.settings.useHeight = parseInt(this.settings.useHeight);\n      this.settings.imageWidth = parseInt(this.settings.imageWidth);\n      this.settings.imageHeight = parseInt(this.settings.imageHeight);\n      this.settings.useDefaultImage = parseInt(this.settings.useDefaultImage);\n      this.settings.removeExistingData = parseInt(\n         this.settings.removeExistingData\n      );\n   }\n\n   /**\n    * @method isValidData\n    * Parse through the given data and return an error if this field's\n    * data seems invalid.\n    * @param {obj} data  a key=>value hash of the inputs to parse.\n    * @param {OPValidator} validator  provided Validator fn\n    * @return {array}\n    */\n   isValidData(data, validator) {\n      super.isValidData(data, validator);\n   }\n};\n","/*\n * ABFieldJson\n *\n * An ABFieldJson defines a JSON field type.\n *\n */\n\nconst ABField = require(\"../../platform/dataFields/ABField\");\n\nconst ABFieldJsonDefaults = {\n   key: \"json\",\n   // unique key to reference this specific DataField\n\n   description: \"JSON value\",\n   // description: what gets displayed in the Editor description.\n   // NOTE: this will be displayed using a Label: L(description)\n\n   icon: \"font\",\n   // font-awesome icon reference.  (without the 'fa-').  so 'font'  to\n   // reference 'fa-font'\n\n   isFilterable: false,\n   // {bool} / {fn}\n   // determines if the current ABField can be used to filter (FilterComplex\n   // or Query) data.\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\n   //  (field) => field.setting.something == true\n\n   isSortable: false,\n   // {bool} / {fn}\n   // determines if the current ABField can be used to Sort data.\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\n   //  (field) => true/false\n\n   menuName: \"JSON\",\n   // menuName: what gets displayed in the Editor drop list\n   // NOTE: this will be displayed using a Label: L(menuName)\n\n   supportRequire: false,\n   // {bool}\n   // does this ABField support the Required setting?\n\n   supportUnique: false,\n   // {bool}\n   // does this ABField support the Unique setting?\n\n   useAsLabel: true,\n   // {bool} / {fn}\n   // determines if this ABField can be used in the display of an ABObject's\n   // label.\n\n   compatibleOrmTypes: [\"json\"],\n   // {array}\n   // what types of Sails ORM attributes can be imported into this data type?\n   // http://sailsjs.org/documentation/concepts/models-and-orm/attributes#?attribute-options\n\n   compatibleMysqlTypes: [\"json\"],\n   // {array}\n   // what types of MySql column types can be imported into this data type?\n   // https://www.techonthenet.com/mysql/datatypes.php\n};\n\nconst defaultValues = {};\n\nmodule.exports = class ABFieldJsonCore extends ABField {\n   constructor(values, object) {\n      super(values, object, ABFieldJsonDefaults);\n   }\n\n   // return the default values for this DataField\n   static defaults() {\n      return ABFieldJsonDefaults;\n   }\n\n   static defaultValues() {\n      return defaultValues;\n   }\n\n   /**\n    * @method defaultValue\n    * insert a key=>value pair that represent the default value\n    * for this field.\n    * @param {obj} values a key=>value hash of the current values.\n    */\n   defaultValue(values) {\n      // in the case of a JSON data type, we should NOT insert a \"\"\n      //\n      // values[this.columnName] = \"\";\n   }\n};\n","/*\n * ABFieldListCore\n *\n * An ABFieldList defines a select list field type.\n *\n */\n\n// const ABFieldSelectivity = require(\"../../platform/dataFields/ABFieldSelectivity\");\nconst ABField = require(\"../../platform/dataFields/ABField\");\n\nfunction L(key, altText) {\n   // TODO:\n   return altText; // AD.lang.label.getLabel(key) || altText;\n}\n\nconst ABFieldListDefaults = {\n   key: \"list\",\n   // unique key to reference this specific DataField\n\n   description:\n      \"Select list allows you to select predefined options below from a dropdown.\",\n   // description: what gets displayed in the Editor description.\n   // NOTE: this will be displayed using a Label: L(description)\n\n   icon: \"th-list\",\n   // font-awesome icon reference.  (without the 'fa-').  so 'th-list'  to\n   // reference 'fa-th-list'\n\n   isFilterable: (field) => {\n      if (field.settings.isMultiple) {\n         return false;\n      } else {\n         return true;\n      }\n   },\n   // {bool} / {fn}\n   // determines if the current ABField can be used to filter (FilterComplex\n   // or Query) data.\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\n   //  (field) => field.setting.something == true\n\n   isSortable: (field) => {\n      if (field.settings.isMultiple) {\n         return false;\n      } else {\n         return true;\n      }\n   },\n   // {bool} / {fn}\n   // determines if the current ABField can be used to Sort data.\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\n   //  (field) => true/false\n\n   menuName: \"Select list\",\n   // menuName: what gets displayed in the Editor drop list\n   // NOTE: this will be displayed using a Label: L(menuName)\n\n   supportRequire: true,\n   // {bool}\n   // does this ABField support the Required setting?\n\n   supportUnique: false,\n   // {bool}\n   // does this ABField support the Unique setting?\n\n   useAsLabel: true,\n   // {bool} / {fn}\n   // determines if this ABField can be used in the display of an ABObject's\n   // label.\n\n   compatibleOrmTypes: [\"string\"],\n   // {array}\n   // what types of Sails ORM attributes can be imported into this data type?\n   // http://sailsjs.org/documentation/concepts/models-and-orm/attributes#?attribute-options\n\n   compatibleMysqlTypes: [\n      \"char\",\n      \"varchar\",\n      \"tinytext\" /* \"text\", \"mediumtext\" */,\n   ],\n   // {array}\n   // what types of MySql column types can be imported into this data type?\n   // https://www.techonthenet.com/mysql/datatypes.php\n\n   hasColors: (field) => {\n      if (field.settings.hasColors) {\n         return true;\n      } else {\n         return false;\n      }\n   },\n};\n\nconst defaultValues = {\n   isMultiple: 0,\n   // {bool}\n   // can multiple values be selected?\n\n   hasColors: 0,\n   // {bool}\n   // are we to display our values in colors?\n\n   options: [],\n   // {array}\n   // The options defined for this list:\n   // [ { id, text, hex, translations },...]\n   //    .id {string} a unique id for this value\n   //    .text {string} the displayed text of this value\n   //    .hex {string} a color hex definition for this value\n   //    .translations {obj} the multilingual definitions for this value.\n\n   default: \"none\",\n   multipleDefault: [],\n};\n\nmodule.exports = class ABFieldListCore extends ABField {\n   constructor(values, object) {\n      super(values, object, ABFieldListDefaults);\n\n      this.pendingDeletions = [];\n      // {array}\n      // a list of pending option deletions that need to be processed\n      // when this is saved.\n   }\n\n   // return the default values for this DataField\n   static defaults() {\n      return ABFieldListDefaults;\n   }\n\n   static defaultValues() {\n      return defaultValues;\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      super.fromValues(values);\n\n      // translate options list\n      if (this.settings.options && this.settings.options.length > 0) {\n         this.settings.options.forEach((opt) => {\n            this.translate(opt, opt, [\"text\"]);\n         });\n      }\n\n      this.settings.isMultiple = parseInt(this.settings.isMultiple);\n      this.settings.hasColors = parseInt(this.settings.hasColors);\n   }\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABApplication instance\n    * into the values needed for saving to the DB.\n    *\n    * Most of the instance data is stored in .json field, so be sure to\n    * update that from all the current values of our child fields.\n    *\n    * @return {json}\n    */\n   toObj() {\n      const obj = super.toObj();\n\n      // Un-translate options list\n      obj.settings.options.forEach((opt) => {\n         this.unTranslate(opt, opt, [\"text\"]);\n      });\n\n      return obj;\n   }\n\n   ///\n   /// Working with Actual Object Values:\n   ///\n\n   /**\n    * @method defaultValue\n    * insert a key=>value pair that represent the default value\n    * for this field.\n    * @param {obj} values a key=>value hash of the current values.\n    */\n   defaultValue(values) {\n      // Multiple select list\n      if (this.settings.isMultiple == true) {\n         let defaultVals = [];\n         this.settings.multipleDefault.forEach((def) => {\n            this.settings.options.forEach((opt) => {\n               if (opt.id == def.text) {\n                  defaultVals.push(opt);\n               }\n            });\n         });\n         values[this.columnName] = defaultVals || [];\n      }\n      // Single select list\n      else if (this.settings.default && this.settings.default != \"\") {\n         values[this.columnName] = this.settings.default;\n      }\n   }\n\n   /**\n    * @method isValidData\n    * Parse through the given data and return an error if this field's\n    * data seems invalid.\n    * @param {obj} data  a key=>value hash of the inputs to parse.\n    * @param {OPValidator} validator  provided Validator fn\n    * @return {array}\n    */\n   isValidData(data, validator) {\n      super.isValidData(data, validator);\n   }\n\n   /**\n    * @method options\n    * Return an array of [{ id, text }] options defined by this field.\n    * @return {array}\n    */\n   options() {\n      return this.settings.options.map((opt) => {\n         return {\n            id: opt.id,\n            text: opt.text,\n            hex: opt.hex ? opt.hex : \"\",\n            translations: opt.translations ? opt.translations : \"\",\n         };\n      });\n   }\n\n   format(rowData, options = {}) {\n      let val = this.dataValue(rowData) || [];\n\n      if (typeof val == \"string\") {\n         try {\n            val = JSON.parse(val);\n         } catch (e) {\n            // continue regardless of error\n         }\n      }\n\n      // Convert to array\n      if (!Array.isArray(val)) val = [val];\n\n      const displayOpts = this.settings.options\n         .filter((opt) => val.filter((v) => (v.id || v) == opt.id).length > 0)\n         .map((opt) => {\n            let text = opt.text;\n            const languageCode = options.languageCode || \"en\";\n\n            // Pull text of option with specify language code\n            const optTran = (opt.translations || []).filter(\n               (o) => o.language_code == languageCode\n            )[0];\n            if (optTran) text = optTran.text;\n\n            return text;\n         });\n\n      return displayOpts.join(\", \");\n   }\n};\n","/*\n * ABFieldLongText\n *\n * An ABFieldLongText defines a LongText field type.\n *\n */\n\nconst ABField = require(\"../../platform/dataFields/ABField\");\n\nconst MAX_CHAR_LENGTH = 5000;\n\nfunction L(key, altText) {\n   // TODO:\n   return altText; // AD.lang.label.getLabel(key) || altText;\n}\n\nconst ABFieldLongTextDefaults = {\n   key: \"LongText\", // unique key to reference this specific DataField\n\n   description: \"Multiple lines of text\",\n   // description: what gets displayed in the Editor description.\n   // NOTE: this will be displayed using a Label: L(description)\n\n   icon: \"align-right\",\n   // font-awesome icon reference.  (without the 'fa-').  so 'align-right'  to\n   // reference 'fa-align-right'\n\n   isFilterable: true,\n   // {bool} / {fn}\n   // determines if the current ABField can be used to filter (FilterComplex\n   // or Query) data.\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\n   //  (field) => field.setting.something == true\n\n   isSortable: false,\n   // {bool} / {fn}\n   // determines if the current ABField can be used to Sort data.\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\n   //  (field) => true/false\n\n   menuName: \"Long text\",\n   // menuName: what gets displayed in the Editor drop list\n   // NOTE: this will be displayed using a Label: L(menuName)\n\n   supportRequire: true,\n   // {bool}\n   // does this ABField support the Required setting?\n\n   supportUnique: false,\n   // {bool}\n   // does this ABField support the Unique setting?\n\n   useAsLabel: true,\n   // {bool} / {fn}\n   // determines if this ABField can be used in the display of an ABObject's\n   // label.\n\n   compatibleOrmTypes: [\"longtext\", \"mediumtext\", \"text\"],\n   // {array}\n   // what types of Sails ORM attributes can be imported into this data type?\n   // http://sailsjs.org/documentation/concepts/models-and-orm/attributes#?attribute-options\n\n   compatibleMysqlTypes: [\"text\", \"mediumtext\", \"longtext\"],\n   // {array}\n   // what types of MySql column types can be imported into this data type?\n   // https://www.techonthenet.com/mysql/datatypes.php\n\n   MAX_CHAR_LENGTH,\n   // {integer}\n   // The maximum length our ABFieldLongText can be.\n};\n\n// defaultValues: the keys must match a .name of your elements to set it's default value.\nconst defaultValues = {\n   default: \"\",\n   supportMultilingual: 0,\n};\n\nmodule.exports = class ABFieldLongText extends ABField {\n   constructor(values, object) {\n      super(values, object, ABFieldLongTextDefaults);\n\n      /*\n    \t{\n\t\t\tsettings: {\n\t\t\t\tdefault: 'string',\n\t\t\t\tsupportMultilingual: 1/0\n\t\t\t}\n    \t}\n    \t*/\n   }\n\n   // return the default values for this DataField\n   static defaults() {\n      return ABFieldLongTextDefaults;\n   }\n\n   static defaultValues() {\n      return defaultValues;\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      super.fromValues(values);\n\n      this.settings.default = values.settings.default || \"\";\n\n      // we're responsible for setting up our specific settings:\n      this.settings.supportMultilingual =\n         values.settings.supportMultilingual + \"\" ||\n         defaultValues.supportMultilingual;\n\n      // text to Int:\n      this.settings.supportMultilingual = parseInt(\n         this.settings.supportMultilingual\n      );\n\n      if (this.settings.supportMultilingual) {\n         if (this.object)\n            this.object.translate(this.settings, this.settings, [\"default\"]);\n      } else this.settings.default = values.settings.default || \"\";\n   }\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABApplication instance\n    * into the values needed for saving to the DB.\n    *\n    * Most of the instance data is stored in .json field, so be sure to\n    * update that from all the current values of our child fields.\n    *\n    * @return {json}\n    */\n   toObj() {\n      const obj = super.toObj();\n\n      if (this.settings.supportMultilingual)\n         if (this.object)\n            this.object.unTranslate(obj.settings, obj.settings, [\"default\"]);\n         else obj.settings.default = this.settings.default;\n\n      return obj;\n   }\n\n   /*\n    * @property isMultilingual\n    * does this field represent multilingual data?\n    * @return {bool}\n    */\n   get isMultilingual() {\n      return this.settings.supportMultilingual == 1;\n   }\n\n   /**\n    * @method defaultValue\n    * insert a key=>value pair that represent the default value\n    * for this field.\n    * @param {obj} values a key=>value hash of the current values.\n    */\n   defaultValue(values) {\n      if (values[this.columnName] == null) {\n         if (typeof this.settings.default == \"string\") {\n            values[this.columnName] = this.settings.default;\n         } else {\n            values[this.columnName] = \"\";\n         }\n      }\n   }\n\n   /**\n    * @method isValidData\n    * Parse through the given data and return an error if this field's\n    * data seems invalid.\n    * @param {obj} data  a key=>value hash of the inputs to parse.\n    * @param {OPValidator} validator  provided Validator fn\n    * @return {array}\n    */\n   isValidData(data, validator) {\n      super.isValidData(data, validator);\n\n      if (\n         data &&\n         data[this.columnName] &&\n         data[this.columnName].length > MAX_CHAR_LENGTH\n      ) {\n         validator.addError(\n            this.columnName,\n            `should NOT be longer than ${MAX_CHAR_LENGTH} characters`\n         );\n      }\n   }\n};\n","/*\n * ABFieldNumber\n *\n * An ABFieldNumber defines a Number field type.\n *\n */\n\nconst ABField = require(\"../../platform/dataFields/ABField\");\n\nconst ABFieldNumberDefaults = {\n   key: \"number\",\n   // unique key to reference this specific DataField\n\n   description: \"A Float or Integer Value\",\n   // description: what gets displayed in the Editor description.\n   // NOTE: this will be displayed using a Label: L(description)\n\n   icon: \"hashtag\",\n   // font-awesome icon reference.  (without the 'fa-').  so 'hashtag'  to\n   // reference 'fa-hashtag'\n\n   isFilterable: true,\n   // {bool} / {fn}\n   // determines if the current ABField can be used to filter (FilterComplex\n   // or Query) data.\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\n   //  (field) => field.setting.something == true\n\n   isSortable: true,\n   // {bool} / {fn}\n   // determines if the current ABField can be used to Sort data.\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\n   //  (field) => true/false\n\n   menuName: \"Number\",\n   // menuName: what gets displayed in the Editor drop list\n   // NOTE: this will be displayed using a Label: L(menuName)\n\n   supportRequire: true,\n   // {bool}\n   // does this ABField support the Required setting?\n\n   supportUnique: true,\n   // {bool}\n   // does this ABField support the Unique setting?\n\n   useAsLabel: true,\n   // {bool} / {fn}\n   // determines if this ABField can be used in the display of an ABObject's\n   // label.\n\n   compatibleOrmTypes: [\"number\"],\n   // {array}\n   // what types of Sails ORM attributes can be imported into this data type?\n   // http://sailsjs.org/documentation/concepts/models-and-orm/attributes#?attribute-options\n\n   compatibleMysqlTypes: [\n      \"tinyint\",\n      \"smallint\",\n      \"mediumint\",\n      \"int\",\n      \"integer\",\n      \"bigint\",\n      \"decimal\",\n      \"dec\",\n      \"numeric\",\n      \"fixed\",\n      \"float\",\n      \"real\",\n   ],\n   // {array}\n   // what types of MySql column types can be imported into this data type?\n   // https://www.techonthenet.com/mysql/datatypes.php\n};\n\nconst defaultValues = {\n   // 'allowRequired': 0,\n   default: \"\",\n   typeFormat: \"none\",\n   typeDecimals: \"none\",\n   typeDecimalPlaces: 0,\n   typeRounding: \"none\",\n   typeThousands: \"none\",\n   validation: 0,\n   validateMinimum: \"\",\n   validateMaximum: \"\",\n};\n\nlet L = null; //AB.Label();\n\nmodule.exports = class ABFieldNumberCore extends ABField {\n   constructor(values, object) {\n      super(values, object, ABFieldNumberDefaults);\n\n      /*\n    \t{\n\t\t\tsettings: {\n\t\t\t\t'allowRequired':0,\n\t\t\t\t'default':null,\n\t\t\t\t'typeFormat': 'none',\n\t\t\t\t'typeDecimals': 'none',\n\t\t\t\t'typeDecimalPlaces': 'none',\n\t\t\t\t'typeRounding' : 'none',\n\t\t\t\t'typeThousands': 'none',\n\t\t\t\t'validation':0,\n\t\t\t\t'validateMinimum':null,\n\t\t\t\t'validateMaximum':null\n\t\t\t}\n    \t}\n    \t*/\n      if (!L) {\n         L = this.AB.Label();\n      }\n   }\n\n   // return the default values for this DataField\n   static defaults() {\n      return ABFieldNumberDefaults;\n   }\n\n   static defaultValues() {\n      return defaultValues;\n   }\n\n   static formatList(iL) {\n      if (iL && !L) L = iL;\n      return [\n         { id: \"none\", value: L(\"None\") },\n         {\n            id: \"dollar\",\n            value: L(\"$\"),\n            sign: \"$\",\n            position: \"prefix\",\n         },\n         {\n            id: \"yen\",\n            value: L(\"¥\"),\n            sign: \"¥\",\n            position: \"prefix\",\n         },\n         {\n            id: \"pound\",\n            value: L(\"£\"),\n            sign: \"£\",\n            position: \"prefix\",\n         },\n         {\n            id: \"euroBefore\",\n            value: L(\"€ (before)\"),\n            sign: \"€\",\n            position: \"prefix\",\n         },\n         {\n            id: \"euroAfter\",\n            value: L(\"€ (after)\"),\n            sign: \"€\",\n            position: \"postfix\",\n         },\n         {\n            id: \"percent\",\n            value: L(\"%\"),\n            sign: \"%\",\n            position: \"postfix\",\n         },\n      ];\n   }\n\n   static delimiterList() {\n      return [\n         { id: \"none\", value: L(\"None\") },\n         {\n            id: \"comma\",\n            value: L(\"Comma\"),\n            sign: \",\",\n         },\n         {\n            id: \"period\",\n            value: L(\"Period\"),\n            sign: \".\",\n         },\n         {\n            id: \"space\",\n            value: L(\"Space\"),\n            sign: \" \",\n         },\n      ];\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   fromValues(values) {\n      super.fromValues(values);\n\n      // text to Int:\n      // this.settings.allowRequired = parseInt(this.settings.allowRequired);\n      this.settings.validation = parseInt(this.settings.validation);\n   }\n\n   ///\n   /// Working with Actual Object Values:\n   ///\n\n   /**\n    * @method defaultValue\n    * insert a key=>value pair that represent the default value\n    * for this field.\n    * @param {obj} values a key=>value hash of the current values.\n    */\n   defaultValue(values) {\n      // if no default value is set, then don't insert a value.\n      if (this.settings.default != \"\") {\n         values[this.columnName] = this.settings.default;\n      }\n   }\n\n   /**\n    * @method isValidData\n    * Parse through the given data and return an error if this field's\n    * data seems invalid.\n    * @param {obj} data  a key=>value hash of the inputs to parse.\n    * @param {OPValidator} validator  provided Validator fn\n    * @return {array}\n    */\n   isValidData(data, validator) {\n      super.isValidData(data, validator);\n\n      // const L = this.AB.Label();\n\n      if (data[this.columnName] != null && data[this.columnName] != \"\") {\n         let value = data[this.columnName];\n\n         // if this is an integer:\n         if (this.settings.typeDecimals == \"none\") {\n            value = parseInt(value);\n         } else {\n            const places = parseInt(this.settings.typeDecimalPlaces) || 2;\n            value = parseFloat(parseFloat(value).toFixed(places));\n         }\n\n         const isNumeric = (n) => {\n            return !Number.isNaN(parseFloat(n)) && Number.isFinite(n);\n         };\n         if (!isNumeric(value)) {\n            validator.addError(this.columnName, L(\"invalid number\"));\n         }\n\n         // validate Minimum\n         if (\n            this.settings.validation == true &&\n            this.settings.validateMinimum != null &&\n            this.settings.validateMinimum > value\n         ) {\n            const errMessage = L(\"should be greater than {0}\", [\n               this.settings.validateMinimum,\n            ]);\n\n            validator.addError(this.columnName, errMessage);\n         }\n\n         // validate Maximum\n         if (\n            this.settings.validation == true &&\n            this.settings.validateMaximum != null &&\n            this.settings.validateMaximum < value\n         ) {\n            const errMessage = L(\"should be less than {0}\", [\n               this.settings.validateMaximum,\n            ]);\n\n            validator.addError(this.columnName, errMessage);\n         }\n      }\n   }\n\n   format(rowData) {\n      if (\n         rowData[this.columnName] == null ||\n         (rowData[this.columnName] != 0 && rowData[this.columnName] == \"\")\n      )\n         return \"\";\n\n      let data = rowData[this.columnName] || 0;\n\n      if (typeof data == \"string\") {\n         data = data.replace(/,/g, \"\");\n      }\n\n      // Validate number\n      if (isNaN(parseFloat(data))) data = 0;\n\n      const formatSign = this.constructor\n         .formatList()\n         .filter((item) => item.id == this.settings.typeFormat)[0];\n      const decimalPlaces =\n         this.settings.typeDecimalPlaces != \"none\"\n            ? parseInt(this.settings.typeDecimalPlaces)\n            : 0;\n\n      let thousandsSign = this.constructor\n         .delimiterList()\n         .filter((item) => item.id == this.settings.typeThousands)[0];\n      let decimalSign = this.constructor\n         .delimiterList()\n         .filter((item) => item.id == this.settings.typeDecimals)[0];\n      let prefix = \"\";\n      let postfix = \"\";\n\n      if (formatSign && formatSign.sign) {\n         switch (formatSign.position) {\n            case \"prefix\":\n               prefix = formatSign.sign;\n               break;\n            case \"postfix\":\n               postfix = formatSign.sign;\n               break;\n         }\n      }\n\n      decimalSign = decimalSign.sign || \"\";\n      thousandsSign = thousandsSign.sign || \"\";\n\n      // round number\n      if (this.settings.typeRounding == \"roundDown\") {\n         const digit = Math.pow(10, decimalPlaces);\n         data = Math.floor(data * digit) / digit;\n      }\n\n      const number = this.formatNumber(data, {\n         groupDelimiter: thousandsSign,\n         groupSize: 3,\n         decimalDelimiter: decimalSign,\n         decimalSize: decimalPlaces,\n      });\n\n      return `${prefix} ${number} ${postfix}`;\n   }\n\n   formatNumber(data, options = {}) {\n      if (data === \"\" || data == null) return data;\n\n      data = parseFloat(data);\n      const negativeSign = data < 0 ? \"-\" : \"\";\n      data = Math.abs(data);\n\n      const dataStr = data.toString();\n      const integerStr = dataStr.split(\".\")[0];\n      const decimalStr = dataStr.split(\".\")[1];\n\n      let integerValue = \"\";\n\n      // Thousands digit sign\n      if (options.groupDelimiter) {\n         const step = 3;\n         let i = integerStr.length;\n\n         do {\n            i -= step;\n            const chunk =\n               i > 0\n                  ? integerStr.substr(i, step)\n                  : integerStr.substr(0, step + i);\n            integerValue = `${chunk}${\n               integerValue ? options.groupDelimiter + integerValue : \"\"\n            }`;\n         } while (i > 0);\n      } else {\n         integerValue = integerStr;\n      }\n\n      let result = \"\";\n\n      // Decimal\n      if (options.decimalDelimiter && options.decimalSize) {\n         result = `${negativeSign}${integerValue}${\n            decimalStr\n               ? options.decimalDelimiter +\n                 decimalStr.toString().substr(0, options.decimalSize)\n               : \"\"\n         }`;\n      }\n      // Integer\n      else {\n         result = `${negativeSign}${integerValue}`;\n      }\n\n      return result;\n   }\n\n   getDecimalSize() {\n      if (this.settings.typeDecimalPlaces != \"none\") {\n         return parseInt(this.settings.typeDecimalPlaces);\n      } else {\n         return 0;\n      }\n   }\n};\n","/*\n * ABFieldString\n *\n * An ABFieldString defines a string field type.\n *\n */\n\nconst ABField = require(\"../../platform/dataFields/ABField\");\n\nconst MAX_CHAR_LENGTH = 255;\n\nconst ABFieldStringDefaults = {\n   key: \"string\",\n   // unique key to reference this specific DataField\n\n   description: \"short string value\",\n   // description: what gets displayed in the Editor description.\n   // NOTE: this will be displayed using a Label: L(description)\n\n   icon: \"font\",\n   // font-awesome icon reference.  (without the 'fa-').  so 'font'  to\n   // reference 'fa-font'\n\n   isFilterable: true,\n   // {bool} / {fn}\n   // determines if the current ABField can be used to filter (FilterComplex\n   // or Query) data.\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\n   //  (field) => field.setting.something == true\n\n   isSortable: true,\n   // {bool} / {fn}\n   // determines if the current ABField can be used to Sort data.\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\n   //  (field) => true/false\n\n   menuName: \"Single line text\",\n   // menuName: what gets displayed in the Editor drop list\n   // NOTE: this will be displayed using a Label: L(menuName)\n\n   supportRequire: true,\n   // {bool}\n   // does this ABField support the Required setting?\n\n   supportUnique: false,\n   // {bool}\n   // does this ABField support the Unique setting?\n\n   useAsLabel: true,\n   // {bool} / {fn}\n   // determines if this ABField can be used in the display of an ABObject's\n   // label.\n\n   compatibleOrmTypes: [\"string\"],\n   // {array}\n   // what types of Sails ORM attributes can be imported into this data type?\n   // http://sailsjs.org/documentation/concepts/models-and-orm/attributes#?attribute-options\n\n   compatibleMysqlTypes: [\"char\", \"varchar\", \"tinytext\"],\n   // {array}\n   // what types of MySql column types can be imported into this data type?\n   // https://www.techonthenet.com/mysql/datatypes.php\n\n   MAX_CHAR_LENGTH,\n   // {integer}\n   // The maximum length our ABFieldString can be.\n};\n\nconst defaultValues = {\n   default: \"\",\n   supportMultilingual: 0,\n};\n\nmodule.exports = class ABFieldStringCore extends ABField {\n   constructor(values, object) {\n      super(values, object, ABFieldStringDefaults);\n\n      /*\n    \t{\n\t\t\tsettings: {\n\t\t\t\tdefault: 'string',\n\t\t\t\tsupportMultilingual: 1/0\n\t\t\t}\n    \t}\n        */\n   }\n\n   // return the default values for this DataField\n   static defaults() {\n      return ABFieldStringDefaults;\n   }\n\n   static defaultValues() {\n      return defaultValues;\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      super.fromValues(values);\n\n      // we're responsible for setting up our specific settings:\n      this.settings.default = values.settings.default || defaultValues.default;\n      this.settings.supportMultilingual =\n         values.settings.supportMultilingual + \"\" ||\n         defaultValues.supportMultilingual;\n\n      // text to Int:\n      this.settings.supportMultilingual = parseInt(\n         this.settings.supportMultilingual\n      );\n\n      if (this.settings.supportMultilingual) {\n         this.translate(this.settings, this.settings, [\"default\"]);\n      } else this.settings.default = values.settings.default || \"\";\n   }\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABApplication instance\n    * into the values needed for saving to the DB.\n    *\n    * Most of the instance data is stored in .json field, so be sure to\n    * update that from all the current values of our child fields.\n    *\n    * @return {json}\n    */\n   toObj() {\n      const obj = super.toObj();\n\n      if (this.settings.supportMultilingual) {\n         this.unTranslate(obj.settings, obj.settings, [\"default\"]);\n      } else obj.settings.default = this.settings.default;\n\n      return obj;\n   }\n\n   ///\n   /// Working with Actual Object Values:\n   ///\n\n   /**\n    * @method defaultValue\n    * insert a key=>value pair that represent the default value\n    * for this field.\n    * @param {obj} values a key=>value hash of the current values.\n    */\n   defaultValue(values) {\n      // if no default value is set, then don't insert a value.\n      if (!values[this.columnName]) {\n         // Set default string\n         if (this.settings.default) {\n            if (this.settings.default.indexOf(\"{uuid}\") >= 0) {\n               values[this.columnName] = this.AB.uuid();\n            } else {\n               values[this.columnName] = this.settings.default;\n            }\n         }\n      }\n   }\n\n   /**\n    * @method isValidData\n    * Parse through the given data and return an error if this field's\n    * data seems invalid.\n    * @param {obj} data  a key=>value hash of the inputs to parse.\n    * @param {OPValidator} validator  provided Validator fn\n    * @return {array}\n    */\n   isValidData(data, validator) {\n      super.isValidData(data, validator);\n\n      const L = this.AB.Label();\n\n      if (\n         data &&\n         data[this.columnName] &&\n         data[this.columnName].length > MAX_CHAR_LENGTH\n      ) {\n         validator.addError(\n            this.columnName,\n            L(\"should NOT be longer than {0} characters\", [MAX_CHAR_LENGTH])\n         );\n      }\n   }\n\n   /*\n    * @property isMultilingual\n    * does this field represent multilingual data?\n    * @return {bool}\n    */\n   get isMultilingual() {\n      return this.settings.supportMultilingual == 1;\n   }\n};\n","/*\n * ABFieldTextFormula\n *\n * An ABFieldTextFormula defines a TextFormula field type.\n *\n */\n\nconst ABField = require(\"../../platform/dataFields/ABField\");\n\nfunction L(key, altText) {\n   // TODO:\n   return altText; // AD.lang.label.getLabel(key) || altText;\n}\n\nconst ABFieldTextFormulaDefaults = {\n   key: \"TextFormula\",\n   // unique key to reference this specific DataField\n\n   description: \"Text Formula\",\n   // description: what gets displayed in the Editor description.\n   // NOTE: this will be displayed using a Label: L(description)\n\n   icon: \"question\",\n   // font-awesome icon reference.  (without the 'fa-').  so 'question'  to\n   // reference 'fa-question'\n\n   isFilterable: false,\n   // {bool} / {fn}\n   // determines if the current ABField can be used to filter (FilterComplex\n   // or Query) data.\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\n   //  (field) => field.setting.something == true\n\n   isSortable: false,\n   // {bool} / {fn}\n   // determines if the current ABField can be used to Sort data.\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\n   //  (field) => true/false\n\n   menuName: \"Text Formula\",\n   // menuName: what gets displayed in the Editor drop list\n   // NOTE: this will be displayed using a Label: L(menuName)\n\n   supportRequire: false,\n   // {bool}\n   // does this ABField support the Required setting?\n\n   supportUnique: false,\n   // {bool}\n   // does this ABField support the Unique setting?\n\n   useAsLabel: true,\n   // {bool} / {fn}\n   // determines if this ABField can be used in the display of an ABObject's\n   // label.\n\n   compatibleOrmTypes: [\"string\"],\n   // {array}\n   // what types of Sails ORM attributes can be imported into this data type?\n   // http://sailsjs.org/documentation/concepts/models-and-orm/attributes#?attribute-options\n\n   compatibleMysqlTypes: [\"text\", \"mediumtext\", \"longtext\"],\n   // {array}\n   // what types of MySql column types can be imported into this data type?\n   // https://www.techonthenet.com/mysql/datatypes.php\n};\n\n// defaultValues: the keys must match a .name of your elements to set it's default value.\nconst defaultValues = {\n   textFormula: \"\",\n   // {string} \"some text or text with formula ...\"\n   // This tells us what the formula we need to do with text included text string.\n   // if we don't have this, the old value which we filled out won't be cleared when we do \"Add field\" this type again.\n\n   // 'imageWidth':'',\n   // 'useHeight': 0,\n   // 'imageHeight': ''\n};\n\n/** Private methods */\n\n/**\n * @method setValueToFormula\n *\n * @param {ABOBject} object\n * @param {string} formulaString\n * @param {object} rowData\n */\n\nfunction setValueToFormula(object, formulaString, rowData) {\n   if (!formulaString) return;\n\n   const fieldRegExp = /{[^{}]+}/gm;\n   const matches_field_array = formulaString.match(fieldRegExp);\n   matches_field_array.forEach((element) => {\n      const columnName = element.replace(/{|}|\"/g, \"\");\n      object.fields().forEach((field) => {\n         if (field.columnName == columnName) {\n            if (field.key == \"AutoIndex\") {\n               //Check AutoIndex Field\n               const autoIndexVal = field.format(rowData) || 0;\n               formulaString = formulaString.replace(element, autoIndexVal);\n            } else if (field.key == \"calculate\") {\n               //Calculate Field\n               const calVal = `(${field.format(rowData) || 0})`;\n               formulaString = formulaString.replace(element, eval(calVal));\n            } else if (field.key == \"date\") {\n               formulaString = formulaString.replace(\n                  element,\n                  rowData[columnName]\n                     ? field.exportValue(rowData[columnName])\n                     : \"\"\n               );\n            } else {\n               formulaString = formulaString.replace(\n                  element,\n                  rowData[columnName] ? field.format(rowData) : \"\"\n               );\n            }\n         }\n      });\n   });\n\n   return formulaString;\n}\n\n/**\n * @method setBuildinValueToFormula\n *\n * @param {ABFactory} AB\n * @param {string} formulaString\n */\n\nfunction setBuildinValueToFormula(AB, formulaString) {\n   const buildInRegExp = /\\w+\\(.*?\\)/gm;\n   const matches_buildin_array = formulaString.match(buildInRegExp);\n   if (matches_buildin_array) {\n      const buildinList = getBuildInFunction();\n      matches_buildin_array.forEach((element) => {\n         const formula_array = element.split(/\\(|\\)/);\n         const isBracketInBracket =\n            formula_array.length > 2 && formula_array[2] != \"\";\n         const functionName = formula_array[0];\n         const parameters_array = formula_array[1].split(\",\");\n         let isMatch = false;\n         for (let i = 0; i < buildinList.length; i++) {\n            let resultParameters = element;\n            if (functionName == buildinList[i].id) {\n               if (parameters_array.length == buildinList[i].parameter_size) {\n                  switch (functionName) {\n                     case \"left\":\n                        resultParameters = getLeft(\n                           parameters_array[0],\n                           parameters_array[1]\n                        );\n                        break;\n                     case \"right\":\n                        resultParameters = getRight(\n                           parameters_array[0],\n                           parameters_array[1]\n                        );\n                        break;\n                     case \"mid\":\n                        resultParameters = getMid(\n                           parameters_array[0],\n                           parameters_array[1],\n                           parameters_array[2]\n                        );\n                        break;\n                     case \"trim\":\n                        resultParameters = getTrim(parameters_array[0]);\n                        break;\n                     case \"trimLeft\":\n                        resultParameters = getTrimLeft(parameters_array[0]);\n                        break;\n                     case \"trimRight\":\n                        resultParameters = getTrimRight(parameters_array[0]);\n                        break;\n                     case \"length\":\n                        resultParameters = getLength(parameters_array[0]);\n                        break;\n                     case \"regexReplace\":\n                        resultParameters = getRegExpReplace(\n                           parameters_array[0],\n                           parameters_array[1].trimLeft(),\n                           parameters_array[2].trimLeft()\n                        );\n                        break;\n                     case \"extractRegex\":\n                        resultParameters = getExtractRegex(\n                           parameters_array[0],\n                           parameters_array[1].trimLeft()\n                        );\n                        break;\n                     case \"replace\":\n                        resultParameters = getReplace(\n                           parameters_array[0],\n                           parameters_array[1].trimLeft(),\n                           parameters_array[2].trimLeft()\n                        );\n                        break;\n                     case \"lower\":\n                        resultParameters = getLower(parameters_array[0]);\n                        break;\n                     case \"upper\":\n                        resultParameters = getUpper(parameters_array[0]);\n                        break;\n                     case \"capitalize\":\n                        resultParameters = getCapitalize(parameters_array[0]);\n                        break;\n                     case \"random\":\n                        resultParameters = getRandom(parameters_array[0]);\n                        break;\n                     case \"numberToWords\":\n                        resultParameters = getNumberToWords(\n                           parameters_array[0]\n                        );\n                        break;\n                     case \"getDateDayOfWeekName\":\n                        if (isBracketInBracket) {\n                           element = element + \")\";\n                        }\n                        resultParameters = getDateDayOfWeekName(\n                           AB,\n                           parameters_array[0]\n                        );\n                        break;\n                     case \"getDateMonthOfYearName\":\n                        if (isBracketInBracket) {\n                           element = element + \")\";\n                        }\n                        resultParameters = getDateMonthOfYearName(\n                           AB,\n                           parameters_array[0]\n                        );\n                        break;\n                     case \"formatDate\":\n                        resultParameters = getFormatDate(\n                           parameters_array[0],\n                           parameters_array[1].trimLeft()\n                        );\n                        break;\n                     default:\n                        break;\n                  }\n                  isMatch = true;\n                  formulaString = formulaString.replace(\n                     element,\n                     resultParameters\n                  );\n                  return;\n               } else {\n                  resultParameters = functionName + \"(Bad Parameter)\";\n                  formulaString = formulaString.replace(\n                     element,\n                     resultParameters\n                  );\n               }\n            }\n         }\n      });\n   }\n   return formulaString;\n}\n\nfunction getBuildInFunction() {\n   const functionList = [\n      {\n         id: \"left\",\n         value: \"left({COLUMN_NAME}, 1)\",\n         type: \"build-in\",\n         parameter_size: 2,\n      },\n      {\n         id: \"right\",\n         value: \"right({COLUMN_NAME}, 1)\",\n         type: \"build-in\",\n         parameter_size: 2,\n      },\n      {\n         id: \"mid\",\n         value: \"mid({COLUMN_NAME}, 1, 1)\",\n         type: \"build-in\",\n         parameter_size: 3,\n      },\n      {\n         id: \"trim\",\n         value: \"trim({COLUMN_NAME})\",\n         type: \"build-in\",\n         parameter_size: 1,\n      },\n      {\n         id: \"trimLeft\",\n         value: \"trimLeft({COLUMN_NAME})\",\n         type: \"build-in\",\n         parameter_size: 1,\n      },\n      {\n         id: \"trimRight\",\n         value: \"trimRight({COLUMN_NAME})\",\n         type: \"build-in\",\n         parameter_size: 1,\n      },\n      {\n         id: \"length\",\n         value: \"length({COLUMN_NAME})\",\n         type: \"build-in\",\n         parameter_size: 1,\n      },\n      {\n         id: \"regexReplace\",\n         value: \"regexReplace({COLUMN_NAME}, [*], REPLACE_VALUE)\",\n         type: \"build-in\",\n         parameter_size: 3,\n      },\n      {\n         id: \"extractRegex\",\n         value: \"extractRegex({COLUMN_NAME}, [*])\",\n         type: \"build-in\",\n         parameter_size: 2,\n      },\n      {\n         id: \"replace\",\n         value: \"replace({COLUMN_NAME}, SEARCH_VALUE, REPLACE_VALUE)\",\n         type: \"build-in\",\n         parameter_size: 3,\n      },\n      {\n         id: \"lower\",\n         value: \"lower({COLUMN_NAME})\",\n         type: \"build-in\",\n         parameter_size: 1,\n      },\n      {\n         id: \"upper\",\n         value: \"upper({COLUMN_NAME})\",\n         type: \"build-in\",\n         parameter_size: 1,\n      },\n      {\n         id: \"capitalize\",\n         value: \"capitalize({COLUMN_NAME})\",\n         type: \"build-in\",\n         parameter_size: 1,\n      },\n      { id: \"random\", value: \"random(1)\", type: \"build-in\", parameter_size: 1 },\n      {\n         id: \"numberToWords\",\n         value: \"numberToWords({NUMBER_COLUMN} or 012...)\",\n         type: \"build-in\",\n         parameter_size: 1,\n      },\n      {\n         id: \"getDateDayOfWeekName\",\n         value: \"getDateDayOfWeekName({DATE_COLUMN})\",\n         type: \"build-in\",\n         parameter_size: 1,\n      },\n      {\n         id: \"getDateMonthOfYearName\",\n         value: \"getDateMonthOfYearName({DATE_COLUMN})\",\n         type: \"build-in\",\n         parameter_size: 1,\n      },\n      {\n         id: \"formatDate\",\n         value: \"formatDate({DATE_COLUMN}, OUTPUT_FORMAT)\",\n         type: \"build-in\",\n         parameter_size: 2,\n      },\n   ];\n   return functionList;\n}\n\nfunction getLeft(string, endPosition) {\n   return string.substring(0, parseInt(endPosition));\n}\n\nfunction getRight(string, endposition) {\n   const reverseStr = reverseString(string).substring(0, parseInt(endposition));\n   return reverseString(reverseStr);\n}\n\nfunction reverseString(string) {\n   return string.split(\" \").reverse().join(\" \");\n}\n\nfunction getMid(string, startPosition, length) {\n   if (string.length < startPosition) return \"mid(Bad Parameter)\";\n   return string.substring(\n      parseInt(startPosition),\n      parseInt(startPosition) + parseInt(length)\n   );\n}\n\nfunction getTrim(string) {\n   return string.trim();\n}\n\nfunction getTrimLeft(string) {\n   return string.trimLeft();\n}\n\nfunction getTrimRight(string) {\n   return string.trimRight();\n}\n\nfunction getLength(string) {\n   return string.length;\n}\n\nfunction getRegExpReplace(string, regexp, replaceString) {\n   return string.replace(regexp, replaceString);\n}\n\nfunction getExtractRegex(string, regexp) {\n   const extractResult = string.match(regexp);\n   if (Array.isArray(extractResult)) {\n      return extractResult[0];\n   }\n   return extractResult;\n}\n\nfunction getReplace(string, searchValue, replaceValue) {\n   return string.replace(searchValue, replaceValue);\n}\n\nfunction getLower(string) {\n   return string.toLowerCase();\n}\n\nfunction getUpper(string) {\n   return string.toUpperCase();\n}\n\nfunction getCapitalize(string) {\n   return string\n      .toLowerCase()\n      .split(\" \")\n      .map((s) => s.charAt(0).toUpperCase() + s.substring(1))\n      .join(\" \");\n}\n\nfunction getRandom(max) {\n   return Math.floor(Math.random() * (max + 1));\n}\n\nfunction getNumberToWords(number) {\n   const string = number.trim(\",\").toString();\n\n   let units,\n      tens,\n      scales,\n      start,\n      end,\n      chunks,\n      chunksLen,\n      chunk,\n      ints,\n      i,\n      word,\n      words;\n\n   const and = \"\";\n\n   /* Is number zero? */\n   if (parseInt(string) === 0) {\n      return \"zero\";\n   }\n\n   /* Array of units as words */\n   units = [\n      \"\",\n      \"one\",\n      \"two\",\n      \"three\",\n      \"four\",\n      \"five\",\n      \"six\",\n      \"seven\",\n      \"eight\",\n      \"nine\",\n      \"ten\",\n      \"eleven\",\n      \"twelve\",\n      \"thirteen\",\n      \"fourteen\",\n      \"fifteen\",\n      \"sixteen\",\n      \"seventeen\",\n      \"eighteen\",\n      \"nineteen\",\n   ];\n\n   /* Array of tens as words */\n   tens = [\n      \"\",\n      \"\",\n      \"twenty\",\n      \"thirty\",\n      \"forty\",\n      \"fifty\",\n      \"sixty\",\n      \"seventy\",\n      \"eighty\",\n      \"ninety\",\n   ];\n\n   /* Array of scales as words */\n   scales = [\n      \"\",\n      \"thousand\",\n      \"million\",\n      \"billion\",\n      \"trillion\",\n      \"quadrillion\",\n      \"quintillion\",\n      \"sextillion\",\n      \"septillion\",\n      \"octillion\",\n      \"nonillion\",\n      \"decillion\",\n      \"undecillion\",\n      \"duodecillion\",\n      \"tredecillion\",\n      \"quatttuor-decillion\",\n      \"quindecillion\",\n      \"sexdecillion\",\n      \"septen-decillion\",\n      \"octodecillion\",\n      \"novemdecillion\",\n      \"vigintillion\",\n      \"centillion\",\n   ];\n\n   /* Split user arguemnt into 3 digit chunks from right to left */\n   start = string.length;\n   chunks = [];\n   while (start > 0) {\n      end = start;\n      chunks.push(string.slice((start = Math.max(0, start - 3)), end));\n   }\n\n   /* Check if function has enough scale words to be able to stringify the user argument */\n   chunksLen = chunks.length;\n   if (chunksLen > scales.length) {\n      return \"\";\n   }\n\n   /* Stringify each integer in each chunk */\n   words = [];\n   for (i = 0; i < chunksLen; i++) {\n      chunk = parseInt(chunks[i]);\n\n      if (chunk) {\n         /* Split chunk into array of individual integers */\n         ints = chunks[i].split(\"\").reverse().map(parseFloat);\n\n         /* If tens integer is 1, i.e. 10, then add 10 to units integer */\n         if (ints[1] === 1) {\n            ints[0] += 10;\n         }\n\n         /* Add scale word if chunk is not zero and array item exists */\n         if ((word = scales[i])) {\n            words.push(word);\n         }\n\n         /* Add unit word if array item exists */\n         if ((word = units[ints[0]])) {\n            words.push(word);\n         }\n\n         /* Add tens word if array item exists */\n         if ((word = tens[ints[1]])) {\n            words.push(word);\n         }\n\n         /* Add 'and' string after units or tens integer if: */\n         if (ints[0] || ints[1]) {\n            /* Chunk has a hundreds integer or chunk is the first of multiple chunks */\n            if (ints[2] || (!i && chunksLen)) {\n               words.push(and);\n            }\n         }\n\n         /* Add hundreds word if array item exists */\n         if ((word = units[ints[2]])) {\n            words.push(word + \" hundred\");\n         }\n      }\n   }\n\n   return words.reverse().join(\" \");\n}\n\nfunction getDateDayOfWeekName(AB, date) {\n   // const localizeDT = moment(date);\n   // localizeDT.locale(AD.lang.currentLanguage);\n   // return localizeDT.format(\"dddd\");\n\n   return AB.toDateFormat(date, {\n      format: \"dddd\",\n      localeCode: AB.Account.language(),\n   });\n}\n\nfunction getDateMonthOfYearName(AB, date) {\n   // const localizeDT = moment(date);\n   // localizeDT.locale(AD.lang.currentLanguage);\n   // return localizeDT.format(\"MMMM\");\n\n   return AB.toDateFormat(date, {\n      format: \"MMMM\",\n      localeCode: AB.Account.language(),\n   });\n}\n\nfunction getFormatDate(date, format) {\n   const dt = new Date(date);\n   return dt.toString(format);\n}\n\nmodule.exports = class ABFieldTextFormulaCore extends ABField {\n   constructor(values, object) {\n      super(values, object, ABFieldTextFormulaDefaults);\n\n      /*\n    \t{\n\t\t\tsettings: {\n\t\t\t\ttextDefault: 'string',\n\t\t\t\tsupportMultilingual: true/false\n\t\t\t}\n    \t}\n    \t*/\n\n      // // text to Int:\n      // this.settings.supportMultilingual = parseInt(this.settings.supportMultilingual);\n   }\n\n   // return the default values for this DataField\n   static defaults() {\n      return ABFieldTextFormulaDefaults;\n   }\n\n   static defaultValues() {\n      return defaultValues;\n   }\n\n   static getBuildInFunction() {\n      return getBuildInFunction();\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   /**\n    * @method defaultValue\n    * insert a key=>value pair that represent the default value\n    * for this field.\n    * @param {obj} values a key=>value hash of the current values.\n    */\n   defaultValue(values) {\n      // if no default value is set, then don't insert a value.\n      if (!values[this.columnName]) {\n         // Set default value\n         // values[this.columnName] = this.settings.DEFAULT_VALUE;\n      }\n   }\n\n   /**\n    * @method isValidData\n    * Parse through the given data and return an error if this field's\n    * data seems invalid.\n    * @param {obj} data  a key=>value hash of the inputs to parse.\n    * @param {OPValidator} validator  provided Validator fn\n    * @return {array}\n    */\n   isValidData(data, validator) {\n      validator = super.isValid();\n\n      // validator.addError(this.columnName, L('ab.validation.object.name.unique', 'Field columnName must be unique (#name# already used in this Application)').replace('#name#', this.name) );\n\n      return validator;\n   }\n\n   /*\n    * @property isMultilingual\n    * does this field represent multilingual data?\n    * @return {bool}\n    */\n   get isMultilingual() {\n      // return this.settings.supportMultilingual == 1;\n      return false;\n   }\n\n   format(rowData) {\n      try {\n         if (!this.settings.textFormula) return \"\";\n\n         let resultFormula = this.settings.textFormula;\n\n         //Set Field value first\n         resultFormula = setValueToFormula(this.object, resultFormula, rowData);\n\n         //then Check Build-in Function\n         resultFormula = setBuildinValueToFormula(this.AB, resultFormula);\n\n         return resultFormula;\n      } catch (err) {\n         return \"\";\n      }\n   }\n};\n\n//// NOTE: if you need a unique [edit_type] by your returned config.editor above:\n// webix.editors = {\n//   \"[edit_type]\": {\n//     focus: function () {...}\n//     getValue: function () {...},\n//     setValue: function (value) {...},\n//     render: function () {...}\n//   }\n// };\n\n//// NOTE: if you need a unique [sort_type] by your returned config.sort above:\n// webix.DataStore.prototype.sorting.as.[sort_type] = function(a,b){\n//     return a > b ? 1 : -1;\n// }\n","/*\n * ABFieldTreeCore\n *\n * An ABFieldTree defines a select list field type.\n *\n */\n\nconst ABFieldSelectivity = require(\"../../platform/dataFields/ABFieldSelectivity\");\n\nfunction L(key, altText) {\n   // TODO:\n   return altText; // AD.lang.label.getLabel(key) || altText;\n}\n\nconst ABFieldTreeDefaults = {\n   key: \"tree\",\n   // unique key to reference this specific DataField\n\n   description:\n      \"Data tree allows you to build a hierarchical set of selectable data. (ex: Categories and sub-categories)\",\n   // description: what gets displayed in the Editor description.\n   // NOTE: this will be displayed using a Label: L(description)\n\n   icon: \"sitemap\",\n   // font-awesome icon reference.  (without the 'fa-').  so 'sitemap'  to\n   // reference 'fa-sitemap'\n\n   isFilterable: false,\n   // {bool} / {fn}\n   // determines if the current ABField can be used to filter (FilterComplex\n   // or Query) data.\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\n   //  (field) => field.setting.something == true\n\n   isSortable: false,\n   // {bool} / {fn}\n   // determines if the current ABField can be used to Sort data.\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\n   //  (field) => true/false\n\n   menuName: \"Data Tree\",\n   // menuName: what gets displayed in the Editor drop list\n   // NOTE: this will be displayed using a Label: L(menuName)\n\n   supportRequire: false,\n   // {bool}\n   // does this ABField support the Required setting?\n\n   supportUnique: false,\n   // {bool}\n   // does this ABField support the Unique setting?\n\n   useAsLabel: false,\n   // {bool} / {fn}\n   // determines if this ABField can be used in the display of an ABObject's\n   // label.\n\n   compatibleOrmTypes: [\"string\"],\n   // {array}\n   // what types of Sails ORM attributes can be imported into this data type?\n   // http://sailsjs.org/documentation/concepts/models-and-orm/attributes#?attribute-options\n\n   compatibleMysqlTypes: [\"text\", \"mediumtext\", \"longtext\"],\n   // {array}\n   // what types of MySql column types can be imported into this data type?\n   // https://www.techonthenet.com/mysql/datatypes.php\n};\n\nconst defaultValues = {\n   options: [],\n};\n\nmodule.exports = class ABFieldTreeCore extends ABFieldSelectivity {\n   constructor(values, object) {\n      super(values, object, ABFieldTreeDefaults);\n   }\n\n   // return the default values for this DataField\n   static defaults() {\n      return ABFieldTreeDefaults;\n   }\n\n   static defaultValues() {\n      return defaultValues;\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      super.fromValues(values);\n\n      // translate options list\n      if (this.settings.options && this.settings.options.length > 0) {\n         this.settings.options.forEach((opt) => {\n            this.translate(opt, opt, [\"text\"]);\n         });\n      }\n   }\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABApplication instance\n    * into the values needed for saving to the DB.\n    *\n    * Most of the instance data is stored in .json field, so be sure to\n    * update that from all the current values of our child fields.\n    *\n    * @return {json}\n    */\n   toObj() {\n      const obj = super.toObj();\n\n      // Un-translate options list\n      if (obj.settings.options && obj.settings.options.length > 0) {\n         obj.settings.options.forEach((opt) => {\n            this.unTranslate(opt, opt, [\"text\"]);\n         });\n      }\n\n      return obj;\n   }\n\n   ///\n   /// Working with Actual Object Values:\n   ///\n\n   /**\n    * @method defaultValue\n    * insert a key=>value pair that represent the default value\n    * for this field.\n    * @param {obj} values a key=>value hash of the current values.\n    */\n   defaultValue(values) {}\n\n   /**\n    * @method isValidData\n    * Parse through the given data and return an error if this field's\n    * data seems invalid.\n    * @param {obj} data  a key=>value hash of the inputs to parse.\n    * @param {OPValidator} validator  provided Validator fn\n    * @return {array}\n    */\n   isValidData(data, validator) {\n      super.isValidData(data, validator);\n   }\n};\n","/*\n * ABFieldUser\n *\n * An ABFieldUser defines a user field type.\n *\n */\n\nconst ABFieldConnect = require(\"../../platform/dataFields/ABFieldConnect\");\n\nfunction L(key, altText) {\n   // TODO:\n   return altText; // AD.lang.label.getLabel(key) || altText;\n}\n\nconst ABFieldUserDefaults = {\n   key: \"user\",\n   // unique key to reference this specific DataField\n\n   description: \"Add users to a record.\",\n   // description: what gets displayed in the Editor description.\n   // NOTE: this will be displayed using a Label: L(description)\n\n   icon: \"user-o\",\n   // font-awesome icon reference.  (without the 'fa-').  so 'user-o'  to\n   // reference 'fa-user-o'\n\n   isFilterable: true,\n   // {bool} / {fn}\n   // determines if the current ABField can be used to filter (FilterComplex\n   // or Query) data.\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\n   //  (field) => field.setting.something == true\n\n   isSortable: (field) => {\n      if (field.settings.isMultiple) {\n         return false;\n      } else {\n         return true;\n      }\n   },\n   // {bool} / {fn}\n   // determines if the current ABField can be used to Sort data.\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\n   //  (field) => true/false\n\n   menuName: \"User\",\n   // menuName: what gets displayed in the Editor drop list\n   // NOTE: this will be displayed using a Label: L(menuName)\n\n   supportRequire: false,\n   // {bool}\n   // does this ABField support the Required setting?\n\n   supportUnique: false,\n   // {bool}\n   // does this ABField support the Unique setting?\n\n   useAsLabel: true,\n   // {bool} / {fn}\n   // determines if this ABField can be used in the display of an ABObject's\n   // label.\n\n   compatibleOrmTypes: [\"string\"],\n   // {array}\n   // what types of Sails ORM attributes can be imported into this data type?\n   // http://sailsjs.org/documentation/concepts/models-and-orm/attributes#?attribute-options\n\n   compatibleMysqlTypes: [\"char\", \"varchar\", \"tinytext\"],\n   // {array}\n   // what types of MySql column types can be imported into this data type?\n   // https://www.techonthenet.com/mysql/datatypes.php\n\n   USERNAME_FIELD_ID: \"5760560b-c078-47ca-98bf-e18ac492a561\",\n   // {string} .uuid\n   // the ABField.id of the SiteUser.username field.  This is what other\n   // objects will link to in their ABFieldUser connections.\n};\n\nconst defaultValues = {\n   editable: 1,\n   isMultiple: 0,\n   isCurrentUser: 0,\n   isShowProfileImage: 0,\n   isShowUsername: 1,\n};\n\nmodule.exports = class ABFieldUserCore extends ABFieldConnect {\n   constructor(values, object) {\n      super(values, object, ABFieldUserDefaults);\n   }\n\n   // return the default values for this DataField\n   static defaults() {\n      return ABFieldUserDefaults;\n   }\n\n   static defaultValues() {\n      return defaultValues;\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   fromValues(values) {\n      super.fromValues(values);\n\n      this.settings.editable = parseInt(this.settings.editable);\n      this.settings.isMultiple = parseInt(this.settings.isMultiple);\n      this.settings.isCurrentUser = parseInt(this.settings.isCurrentUser);\n      this.settings.isShowProfileImage = parseInt(\n         this.settings.isShowProfileImage\n      );\n      this.settings.isShowUsername = parseInt(this.settings.isShowUsername);\n   }\n\n   ///\n   /// Working with Actual Object Values:\n   ///\n\n   format(rowData) {\n      let val = this.dataValue(rowData) || [];\n\n      if (val && !Array.isArray(val)) val = [val];\n      if (!val) val = [];\n\n      return val.map((v) => v.username || v).join(\", \");\n   }\n};\n","/**\n * ABProcessLane\n * manages the lanes in a Process Diagram.\n *\n * Lanes manage users in the system, and provide a way to lookup a SiteUser.\n */\nconst ABProcessParticipant = require(\"../../platform/process/ABProcessParticipant\");\n\nconst ABProcessLaneDefaults = {\n   type: \"process.lane\",\n   // {string} .type\n   // unique key to reference this specific object\n\n   // icon: \"key\"\n   // {string} .icon\n   // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\n};\n\nmodule.exports = class ABProcessLaneCore extends ABProcessParticipant {\n   constructor(attributes, process, AB) {\n      super(attributes, process, AB);\n\n      //// Runtime Values\n      //// these are not stored in the Definition, but rather\n      //// loaded and used from a running process instance.\n   }\n\n   static defaults() {\n      return ABProcessLaneDefaults;\n   }\n\n   fromValues(attributes) {\n      /*\n        {\n            id: uuid(),\n            name: 'name',\n            type: 'xxxxx',\n            json: \"{json}\"\n        }\n        */\n      super.fromValues(attributes);\n\n      this.type = attributes.type || ABProcessLaneDefaults.type;\n   }\n\n   /**\n    * @method toObj()\n    * properly compile the current state of this object instance\n    * into the values needed for saving to the DB.\n    * @return {json}\n    */\n   // toObj() {\n   //     // default label value\n   //     if (!this.label && this.name && this.name != \"\") {\n   //         this.label = this.name;\n   //     }\n\n   //     // untranslate this object:\n   //     var data = super.toObj();\n\n   //     var fieldsToSave = [\n   //         \"id\",\n   //         \"name\",\n   //         \"type\",\n   //         \"processID\",\n   //         \"diagramID\",\n   //         \"where\"\n   //     ];\n   //     fieldsToSave.forEach((f) => {\n   //         data[f] = this[f];\n   //     });\n\n   //     return data;\n   // }\n};\n","/**\n * ABProcessParticipant\n * manages the participant lanes in a Process Diagram.\n *\n * Participants manage users in the system, and provide a way to lookup a SiteUser.\n */\nconst ABMLClass = require(\"../../platform/ABMLClass\");\n\nconst ABProcessParticipantDefaults = {\n   type: \"process.participant\",\n   // {string} .type\n   // unique key to reference this specific object\n\n   // icon: \"key\" // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\n};\n\nmodule.exports = class ABProcessParticipantCore extends ABMLClass {\n   constructor(attributes, process, AB) {\n      super([\"label\"], AB);\n\n      this.process = process;\n      if (!this.processID) {\n         this.processID = process.id;\n      }\n\n      this.fromValues(attributes);\n\n      //// Runtime Values\n      //// these are not stored in the Definition, but rather\n      //// loaded and used from a running process instance.\n   }\n\n   static defaults() {\n      return ABProcessParticipantDefaults;\n   }\n\n   fromValues(attributes) {\n      /*\n        {\n            id: uuid(),\n            name: 'name',\n            type: 'xxxxx',\n            json: \"{json}\"\n        }\n        */\n      // These Values are needed By ABDefinition:\n      this.id = attributes.id;\n      this.name = attributes.name || \"\";\n      this.type = attributes.type || ABProcessParticipantDefaults.type;\n      this.key = attributes.key || ABProcessParticipantDefaults.type;\n\n      // Process Values:\n      this.processID = attributes.processID || null;\n      this.diagramID = attributes.diagramID || \"?diagramID?\";\n      this.laneIDs = attributes.laneIDs || [];\n      this.stashed = false;\n      if (attributes.stashed && attributes.stashed != \"\") {\n         this.stashed = attributes.stashed;\n      }\n\n      this.useRole = 0;\n      if (typeof attributes.useRole != \"undefined\") {\n         this.useRole = parseInt(attributes.useRole);\n      }\n\n      this.role = 0;\n      if (typeof attributes.role != \"undefined\") {\n         this.role = attributes.role;\n      }\n\n      this.useAccount = 0;\n      if (typeof attributes.useAccount != \"undefined\") {\n         this.useAccount = parseInt(attributes.useAccount);\n      }\n\n      this.account = 0;\n      if (typeof attributes.account != \"undefined\") {\n         this.account = attributes.account;\n      }\n\n      this.useField = 0;\n      if (typeof attributes.useField != \"undefined\") {\n         this.useField = parseInt(attributes.useField);\n      }\n\n      this.fields = [];\n      if (typeof attributes.fields != \"undefined\") {\n         this.fields = attributes.fields;\n      }\n\n      super.fromValues(attributes); // perform translation on this object.\n      // NOTE: keep this at the end of .fromValues();\n\n      if (!this.label) {\n         this.label = this.name;\n      }\n   }\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABApplication instance\n    * into the values needed for saving to the DB.\n    *\n    * Most of the instance data is stored in .json field, so be sure to\n    * update that from all the current values of our child fields.\n    *\n    * @return {json}\n    */\n   toObj() {\n      // default label value\n      if (!this.label && this.name && this.name != \"\") {\n         this.label = this.name;\n      }\n\n      // untranslate this object:\n      var data = super.toObj();\n\n      var fieldsToSave = [\n         \"id\",\n         \"name\",\n         \"type\",\n         \"processID\",\n         \"diagramID\",\n         \"laneIDs\",\n         \"where\",\n         \"useRole\",\n         \"role\",\n         \"useAccount\",\n         \"account\",\n         \"useField\",\n         \"fields\",\n         \"stashed\",\n      ];\n      fieldsToSave.forEach((f) => {\n         data[f] = this[f];\n      });\n\n      return data;\n   }\n};\n","/*\n * ABProcessTaskManager\n *\n * An interface for managing the different ABProcessTasks in AppBuilder.\n *\n */\n\n/*\n * Tasks\n * A name => ABProcessElement hash of the different ABProcessElements available.\n */\nvar Tasks = {};\n\n/*\n * DEFINITIONTYPES\n * a hash of BPMN:Element.type to Default values\n * for each of our Process Objects.\n *\n * NOTE: For Tasks, the key should be target.type,\n * for Triggers or End elements, the key should be\n * the target.eventDefinitionType\n */\nvar DEFINITIONTYPES = {};\n\nvar AllProcessElements = [\n   require(\"../../platform/process/tasks/ABProcessEnd\"),\n   require(\"../../platform/process/tasks/ABProcessGatewayExclusive\"),\n   require(\"../../platform/process/tasks/ABProcessTaskEmail\"),\n   require(\"../../platform/process/tasks/ABProcessTaskService\"),\n   require(\"../../platform/process/tasks/ABProcessTaskServiceAccountingBatchProcessing\"),\n   require(\"../../platform/process/tasks/ABProcessTaskServiceAccountingFPClose\"),\n   require(\"../../platform/process/tasks/ABProcessTaskServiceAccountingFPYearClose\"),\n   require(\"../../platform/process/tasks/ABProcessTaskServiceAccountingJEArchive\"),\n   require(\"../../platform/process/tasks/ABProcessTaskServiceCalculate\"),\n   require(\"../../platform/process/tasks/ABProcessTaskServiceInsertRecord\"),\n   require(\"../../platform/process/tasks/ABProcessTaskServiceQuery\"),\n   require(\"../../platform/process/tasks/ABProcessTaskServiceGetResetPasswordUrl\"),\n   require(\"../../platform/process/tasks/ABProcessTaskSubProcess\"),\n   require(\"../../platform/process/tasks/ABProcessTaskUser\"),\n   require(\"../../platform/process/tasks/ABProcessTaskUserApproval\"),\n   require(\"../../platform/process/tasks/ABProcessTaskUserExternal\"),\n   require(\"../../platform/process/tasks/ABProcessTrigger\"),\n   require(\"../../platform/process/tasks/ABProcessTriggerLifecycle\"),\n   require(\"../../platform/process/tasks/ABProcessTriggerTimer\"),\n];\n\nAllProcessElements.forEach((ELEMENT) => {\n   Tasks[ELEMENT.defaults().key] = ELEMENT;\n\n   switch (ELEMENT.defaults().category) {\n      case \"start\":\n      case \"end\":\n         DEFINITIONTYPES[ELEMENT.DiagramReplace().target.eventDefinitionType] =\n            ELEMENT.defaults();\n         break;\n\n      case \"gateway\":\n      case \"task\":\n         DEFINITIONTYPES[ELEMENT.DiagramReplace().target.type] =\n            ELEMENT.defaults();\n         break;\n   }\n});\n\nmodule.exports = {\n   /*\n    * @function allTasks\n    * return all the currently defined ABProcessTasks in an array.\n    * @return [{ABProcessTask},...]\n    */\n   allTasks: function () {\n      var tasks = [];\n      for (var t in Tasks) {\n         tasks.push(Tasks[t]);\n      }\n      return tasks;\n   },\n\n   /*\n    * @function newTask\n    * return an instance of an ABProcessTask based upon the values.type value.\n    * @return {ABProcessTask}\n    */\n   newTask: function (values, process, AB) {\n      if (values.key) {\n         return new Tasks[values.key](values, process, AB);\n      } else {\n         //// TODO: what to do here?\n      }\n   },\n\n   DiagramReplaceDefinitionsForType: function (type) {\n      var definitions = AllProcessElements.filter((e) => {\n         return e.defaults().category == type;\n      }).map((e) => {\n         return e.DiagramReplace();\n      });\n      return definitions;\n   },\n\n   StartEvents: function () {\n      return this.DiagramReplaceDefinitionsForType(\"start\");\n   },\n\n   Gateways: function () {\n      return this.DiagramReplaceDefinitionsForType(\"gateway\");\n   },\n\n   Tasks: function () {\n      return this.DiagramReplaceDefinitionsForType(\"task\");\n   },\n\n   EndEvents: function () {\n      return this.DiagramReplaceDefinitionsForType(\"end\");\n   },\n\n   definitionForElement: function (element) {\n      // pull the key from the embedded .eventDefinition\n      // if there is one\n      var key = null;\n      if (element.businessObject.eventDefinitions) {\n         var def = element.businessObject.eventDefinitions[0];\n         if (def) {\n            key = def.$type;\n         }\n      }\n\n      // if not, then just use the base .type\n      if (!key) {\n         key = element.type;\n      }\n\n      return DEFINITIONTYPES[key];\n   },\n};\n","var ABMLClass = require(\"../../../platform/ABMLClass\");\n\nmodule.exports = class ABProcessTaskCore extends ABMLClass {\n   constructor(attributes, process, AB, defaultValues) {\n      super([\"label\"], AB);\n\n      this.defaults = defaultValues || { key: \"core\", icon: \"core\" };\n      // {obj} .defaults\n      // a value hash of default values for an ABProcessTask\n      // NOTE: needs to be set before .fromValues()\n\n      this.fromValues(attributes);\n\n      this.process = process;\n      if (!this.processID) {\n         this.processID = process.id;\n      }\n      // {ABProcess} .process\n      // The parent ABProcess this process element is a part of.\n\n      //// Runtime Values\n      //// these are not stored in the Definition, but rather\n      //// loaded and used from a running process instance.\n      this.state = null;\n   }\n\n   ///\n   /// Static Methods\n   ///\n\n   fromValues(attributes) {\n      /*\n        {\n            id: uuid(),\n            name: 'name',\n            type: 'xxxxx',\n            json: \"{json}\"\n        }\n        */\n      // ABDefinition Related fields:\n      this.id = attributes.id;\n      this.name = attributes.name || \"\";\n      this.type = attributes.type || \"process.task.unknown\";\n\n      // ABProcess related fields:\n      this.key = attributes.key || this.defaults.key || \"?key?\";\n      this.processID = attributes.processID || null;\n      this.diagramID = attributes.diagramID || \"?diagramID?\";\n      this.laneDiagramID = attributes.laneDiagramID || \"?laneID?\";\n      // laneDiagramID : connects to the parent object that defines any\n      //      default User information for the Task.  In our case, it\n      //      might be a {ABProcessParticipant} object, or a {ABProcessLane}\n      //      object.  by default, a diagram's Participant obj doesn't define\n      //      any lanes, and therefore can provide that info.  Once a lane\n      //      is added, however, an object is assigned to it, and the\n      //      Lane will provide that info.\n\n      // initialize any defined settings\n      if (this.defaults && this.defaults.settings) {\n         this.defaults.settings.forEach((s) => {\n            if (typeof attributes[s] == \"undefined\") this[s] = null;\n            else this[s] = attributes[s];\n         });\n      }\n\n      super.fromValues(attributes); // perform translation on this object.\n      // NOTE: keep this at the end of .fromValues();\n\n      if (!this.label) {\n         this.label = this.name;\n      }\n   }\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABApplication instance\n    * into the values needed for saving to the DB.\n    *\n    * Most of the instance data is stored in .json field, so be sure to\n    * update that from all the current values of our child fields.\n    *\n    * @return {json}\n    */\n   toObj() {\n      // default label value\n      if (!this.label && this.name && this.name != \"\") {\n         this.label = this.name;\n      }\n\n      // untranslate this object:\n      var data = super.toObj();\n\n      var fieldsToSave = [\n         \"id\",\n         \"name\",\n         \"type\",\n         \"processID\",\n         \"diagramID\",\n         \"laneDiagramID\",\n         \"key\",\n      ];\n      fieldsToSave.forEach((f) => {\n         data[f] = this[f];\n      });\n\n      // save any defined settings\n      if (this.defaults && this.defaults.settings) {\n         this.defaults.settings.forEach((s) => {\n            data[s] = this[s];\n         });\n      }\n\n      return data;\n   }\n\n   ////\n   //// Process Instance Methods\n   ////\n\n   /**\n    * errorConfig()\n    * Respond with an error when expected configuration parameters do not\n    * pull data.\n    * @param {obj} instance\n    *        the instance data of this task\n    * @param {string} msg\n    *        the display message for this error.\n    * @param {array[string]} fields\n    *        an array of parameter keys that should be included in the error\n    *        for additional information.\n    * @return {Promise.reject(error)}\n    */\n   errorConfig(instance, msg, fields = []) {\n      this.log(instance, msg);\n      var error = new Error(`${this.type}: ${msg}`);\n      var info = { task: this };\n      if (!Array.isArray(fields)) fields = [fields];\n      fields.forEach((field) => {\n         info[field] = this[field];\n      });\n      this.AB.notify.builder(error, info);\n      return Promise.reject(error);\n   }\n\n   /**\n    * initState()\n    * setup this task's initial state variables\n    * @param {obj} context\n    *        the context data of the process instance\n    * @param {obj} defaults\n    *        any values to include from our child classes\n    * @param {obj} val\n    *        any values to override the default state\n    */\n   initState(context, defaults, val) {\n      defaults = defaults || {};\n      if (!val) {\n         val = defaults;\n         defaults = {};\n\n         // in this case, then auto initi blank instanceValues:\n         if (this.defaults && this.defaults.instanceValues) {\n            this.defaults.instanceValues.forEach((v) => {\n               defaults[v] = null;\n            });\n         }\n      }\n\n      context.taskState = context.taskState || {};\n\n      // don't overwrite your settings if they already exist:\n      if (!context.taskState[this.diagramID]) {\n         context.taskState[this.diagramID] = {\n            initialized: true,\n            status: \"initialized\",\n         };\n         for (var d in defaults) {\n            context.taskState[this.diagramID][d] = defaults[d];\n         }\n         for (var v in val) {\n            context.taskState[this.diagramID][v] = val[v];\n         }\n      }\n   }\n\n   /**\n    * log()\n    * enter a log in the current process instance\n    * @param {obj} instance  the current ABProcessInstance\n    * @param {...} ...allArgs the remaining parameters sent to the log\n    */\n   log(instance, ...allArgs) {\n      var text = `${this.diagramID} : ${\n         this.name ? this.name : this.key\n      } : ${allArgs.join(\" \")}`;\n      instance.log.push(text);\n   }\n\n   /**\n    * myLane()\n    * return the ABProcessParticipant | ABProcessLane element we are\n    * in.\n    * @return {ABProcessParticipant|ABProcessLane}\n    */\n   myLane() {\n      return this.process.elementForDiagramID(this.laneDiagramID);\n   }\n\n   /**\n    * myState()\n    * return the current state values for this ABProcessTask\n    * @param {obj} instance  the current ABProcessInstance\n    * @return {obj}\n    */\n   myState(instance) {\n      return instance.context.taskState[this.diagramID];\n   }\n\n   /**\n    * nextTasks()\n    * follow the current instance diagram and return the next task(s)\n    * after this task.\n    * @param {obj} instance  the current ABProcessInstance\n    * @return {array}  [ABProcessTask, ...] or {null} if an error\n    */\n   nextTasks(instance) {\n      var nextTasks = [];\n\n      var myDiagramObj = instance.hashDiagramObjects[this.diagramID];\n      if (!myDiagramObj) {\n         var error = new Error(\n            `Configuration Error: Did not find my definition for dID[${this.diagramID}]`\n         );\n         this.onError(instance, error);\n         return null;\n      }\n\n      // myDiagramObj :\n      // {\n      //     \"bpmn2:outgoing\": [{\"_text\": \"SequenceFlow_00fbxm3\"} ...],\n      //     \"_attributes\": {id: \"StartEvent_1\"},\n      //     \"_type\": \"start\"\n      // }\n\n      // find my possible exits:\n      var exitFlows = myDiagramObj[\"bpmn2:outgoing\"];\n      if (!exitFlows) {\n         var error = new Error(\n            `Configuration Error: Did not find any outgoing flows for dID[${this.diagramID}]`\n         );\n         this.AB.notify.builder(error, { task: this });\n         this.onError(instance, error);\n         return null;\n      }\n\n      if (!Array.isArray(exitFlows)) {\n         exitFlows = [exitFlows];\n      }\n\n      var tasksFromFlow = (flow) => {\n         // follow a flow and grab each of it's exit tasks\n         // place them into nextTasks[];\n\n         var flowObj = instance.hashDiagramObjects[flow[\"_text\"]];\n         if (!flowObj) return;\n\n         var targetIDs = flowObj[\"_attributes\"][\"targetRef\"];\n         if (!targetIDs) return;\n\n         if (!Array.isArray(targetIDs)) {\n            targetIDs = [targetIDs];\n         }\n\n         targetIDs.forEach((tid) => {\n            var targetTask = this.process.elementForDiagramID(tid);\n            if (targetTask) {\n               if (nextTasks) {\n                  nextTasks.push(targetTask);\n               }\n            } else {\n               var error = new Error(\n                  `Configuration Error: No ProcessTask instance for diagramID[${tid}]`\n               );\n               this.AB.notify.builder(error, { task: this });\n               this.onError(instance, error);\n               nextTasks = null;\n            }\n         });\n      };\n\n      exitFlows.forEach((f) => {\n         tasksFromFlow(f);\n      });\n\n      return nextTasks;\n   }\n\n   /**\n    * onError()\n    * perform the following actions (log it) on an error.\n    * @param {obj} instance  the current ABProcessInstance\n    * @param {Error} error\n    */\n   onError(instance, error) {\n      if (error) {\n         var text = `${error.toString()}`;\n         this.log(instance, text);\n      }\n      var myState = this.myState(instance);\n      myState.status = \"error\";\n   }\n\n   /**\n    * processDataFields()\n    * return an array of avaiable data fields that this element\n    * can request from other ProcessElements.\n    * Different Process Elements can make data available to other\n    * process Elements.\n    * @return {array} | null\n    */\n   processDataFields() {\n      return null;\n   }\n\n   /**\n    * processData()\n    * return the current value requested for the given data key.\n    * @param {obj} instance\n    * @return {mixed} | null\n    */\n   processData(instance, key) {\n      return null;\n   }\n\n   /**\n    * processDataObjects()\n    * return an array of avaiable ABObjects that this element\n    * can provide to other ProcessElements.\n    * @return {array} | null\n    */\n   processDataObjects() {\n      return null;\n   }\n\n   /**\n    * hashProcessDataValues()\n    * return a hash of live Process Data Values\n    * @param {obj} instance\n    * @return {array} | null\n    */\n   hashProcessDataValues(instance) {\n      var listDataFields = this.process.processDataFields(this);\n      var currentProcessValues = {};\n      listDataFields.forEach((f) => {\n         currentProcessValues[f.key] = this.process.processData(this, [\n            instance,\n            f.key,\n         ]);\n      });\n      return currentProcessValues;\n   }\n\n   /**\n    * reset()\n    * prepare this task to run again if it was already completed.\n    *\n    * This might happen in a process where a loop is formed and tasks\n    * are repeated until a certain outcome.\n    *\n    * @param {obj} instance  the current ABProcessInstance\n    */\n   reset(instance) {\n      // a task wants to run me.  Possibly again.\n      var myState = this.myState(instance);\n\n      // if I haven't setup my state (why?) then just\n      // do that again:\n      if (!myState) {\n         this.initState(instance.context);\n      } else {\n         // if I have already \"completed\" and we are being\n         // asked to run again (it's possible)\n         if (myState.status == \"completed\" || myState.status == \"error\") {\n            // remove my current state\n            delete instance.context.taskState[this.diagramID];\n\n            // store a new state in the context\n            this.initState(instance.context);\n\n            // remember our previous state\n            var newState = this.myState(instance);\n            newState._prevState = myState;\n            this.log(instance, \" Reset() called. Running again. \");\n         }\n      }\n   }\n\n   /**\n    * stateCompleted()\n    * mark this task has having completed.\n    * @param {obj} instance  the current ABProcessInstance\n    */\n   stateCompleted(instance) {\n      var myState = this.myState(instance);\n      myState.status = \"completed\";\n   }\n\n   /**\n    * stateUpdate()\n    * update my state values with the given values data\n    * @param {obj} instance  the current ABProcessInstance\n    * @param {obj} values    the new state values\n    */\n   stateUpdate(instance, values) {\n      values = values || {};\n      var myState = this.myState(instance);\n      for (var v in values) {\n         myState[v] = values[v];\n      }\n   }\n\n   /**\n    * wantToDoSomething()\n    * determine if this task still has something to do.\n    * @param {obj} instance  the instance data of the process we are working on\n    * @return {bool} true if there is still pending actions\n    */\n   wantToDoSomething(instance) {\n      var state = this.myState(instance);\n      if (state) {\n         return state.status != \"completed\" && state.status != \"error\";\n      } else {\n         // my state wasn't defined?\n         console.warn(\n            \"ABProcessTaskCore:wantToDoSomething(): called without having initialized our state first.\",\n            instance\n         );\n         // initialize our state and try again\n         this.initState(instance.context);\n         return this.wantToDoSomething(instance);\n      }\n   }\n\n   get startElements() {\n      let startElems =\n         this.process.elements(\n            (elem) => elem && elem.defaults && elem.defaults.category == \"start\"\n         ) || [];\n      return startElems;\n   }\n\n   get previousElements() {\n      return this.process.connectionPreviousTask(this);\n   }\n\n   get objectOfStartElement() {\n      const startElem = this.startElements[0];\n      if (!startElem) return null;\n\n      return this.AB.objectByID(startElem.objectID);\n   }\n\n   get objectOfPrevElement() {\n      let prevElem = this.previousElements[0];\n      if (!prevElem) return null;\n\n      let objectID;\n      switch (prevElem.type) {\n         case \"process.task.service.query\":\n            objectID = prevElem.qlObj ? prevElem.qlObj.objectID : null;\n            break;\n         case \"process.task.service.insertRecord\":\n         default:\n            objectID = prevElem.objectID;\n            break;\n      }\n\n      return this.AB.objectByID(objectID);\n   }\n};\n","const ABProcessElement = require(\"../../../platform/process/tasks/ABProcessElement.js\");\n\nvar ABProcessTaskEndDefaults = {\n   category: \"end\",\n   // category: {string} | null\n   // if this Element should show up on one of the popup replace menus, then\n   // specify one of the categories of elements it should be an option for.\n   // Available choices: [ \"start\", \"gateway\", \"task\", \"end\" ].\n   //\n   // if it shouldn't show up under the popup menu, then leave this null\n\n   fields: [],\n   // fields: {array}\n   // a list of internal setting values this Element tracks\n\n   icon: \"stop\", // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\n   // icon: {string}\n   // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\n\n   key: \"End\",\n   // key: {string}\n   // unique key to reference this specific Task\n};\n\nmodule.exports = class ABProcessTaskEndCore extends ABProcessElement {\n   constructor(attributes, process, AB) {\n      attributes.type = attributes.type || \"process.task.end\";\n      super(attributes, process, AB, ABProcessTaskEndDefaults);\n\n      // listen\n   }\n\n   // return the default values for this DataField\n   static defaults() {\n      return ABProcessTaskEndDefaults;\n   }\n\n   static DiagramReplace() {\n      return {\n         label: \"Terminate End Event\",\n         actionName: \"replace-with-terminate-end\",\n         className: \"bpmn-icon-end-event-terminate\",\n         target: {\n            type: \"bpmn:EndEvent\",\n            eventDefinitionType: \"bpmn:TerminateEventDefinition\",\n         },\n      };\n   }\n\n   /**\n    * do()\n    * this method actually performs the action for this task.\n    * @param {obj} instance  the instance data of the running process\n    * @return {Promise}\n    *      resolve(true/false) : true if the task is completed.\n    *                            false if task is still waiting\n    */\n   // do(instance) {\n   //     return new Promise((resolve, reject) => {\n   //         // An End Event doesn't perform any other actions\n   //         // than to signal it has successfully completed.\n   //         // But it provides no Additional Tasks to work on.\n   //         // for testing:\n   //         this.stateCompleted(instance);\n   //         this.log(instance, \"End Event Reached\");\n   //         resolve(true);\n   //     });\n   // }\n\n   /**\n    * initState()\n    * setup this task's initial state variables\n    * @param {obj} context  the context data of the process instance\n    * @param {obj} val  any values to override the default state\n    */\n   initState(context, val) {\n      var myDefaults = {\n         triggered: false,\n      };\n\n      super.initState(context, myDefaults, val);\n   }\n\n   /**\n    * nextTasks()\n    * return the next tasks to be run after this task is complete.\n    * @param {obj} instance  the instance data of the running process\n    * @return {Promise}\n    *      resolve([])\n    */\n   nextTasks(instance) {\n      // I'm an End Event.  There are no nextTasks()\n      return [];\n   }\n};\n","const ABProcessElement = require(\"../../../platform/process/tasks/ABProcessElement.js\");\n\nvar ABProcessGatewayExclusiveDefaults = {\n   category: \"gateway\",\n   // category: {string} | null\n   // if this Element should show up on one of the popup replace menus, then\n   // specify one of the categories of elements it should be an option for.\n   // Available choices: [ \"start\", \"gateway\", \"task\", \"end\" ].\n   //\n   // if it shouldn't show up under the popup menu, then leave this null\n\n   icon: \"check-circle\", // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\n   // icon: {string}\n   // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\n\n   instanceValues: [],\n   // instanceValues: {array}\n   // a list of values this element tracks as it is operating in a process.\n\n   key: \"GatewayExclusive\",\n   // key: {string}\n   // unique key to reference this specific Task\n\n   settings: [\"conditions\"],\n   // settings: {array}\n   // a list of internal setting values this Element tracks. These are the\n   // values set by the platform .propertiesStash()\n};\n\nmodule.exports = class ABProcessGatewayExclusiveCore extends ABProcessElement {\n   constructor(attributes, process, AB) {\n      attributes.type = attributes.type || \"process.gateway.exclusive\";\n      super(attributes, process, AB, ABProcessGatewayExclusiveDefaults);\n\n      // listen\n   }\n\n   // return the default values for this DataField\n   static defaults() {\n      return ABProcessGatewayExclusiveDefaults;\n   }\n\n   static DiagramReplace() {\n      return {\n         label: \"Exclusive Gateway\",\n         actionName: \"replace-with-exclusive-gateway\",\n         className: \"bpmn-icon-gateway-xor\",\n         target: {\n            type: \"bpmn:ExclusiveGateway\",\n         },\n      };\n   }\n\n   /*\n    fromValues(attributes) {\n        /*\n        {\n            id: uuid(),\n            name: 'name',\n            type: 'xxxxx',\n            json: \"{json}\"\n        }\n        * /\n        super.fromValues(attributes);\n\n        ABProcessGatewayExclusiveDefaults.fields.forEach((f) => {\n            this[f] = attributes[f];\n        });\n    }\n    */\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABApplication instance\n    * into the values needed for saving to the DB.\n    *\n    * Most of the instance data is stored in .json field, so be sure to\n    * update that from all the current values of our child fields.\n    *\n    * @return {json}\n    */\n   /*\n    toObj() {\n        var data = super.toObj();\n\n        ABProcessGatewayExclusiveDefaults.fields.forEach((f) => {\n            data[f] = this[f];\n        });\n\n        return data;\n    }\n    */\n\n   ////\n   //// Process Instance Methods\n   ////\n\n   /**\n    * initState()\n    * setup this task's initial state variables\n    * @param {obj} context  the context data of the process instance\n    * @param {obj} val  any values to override the default state\n    */\n   /*\n    initState(context, val) {\n        var myDefaults = {\n            userFormID: null,\n            userFormResponse: null\n        };\n\n        super.initState(context, myDefaults, val);\n    }\n    */\n\n   /**\n    * processDataFields()\n    * return an array of avaiable data fields that this element\n    * can provide to other ProcessElements.\n    * Different Process Elements can make data available to other\n    * process Elements.\n    * @return {array} | null\n    */\n   /*\n    processDataFields() {\n        // in this Task, we can return the Response to the UserForm\n        return [\n            {\n                key: `${this.id}.userFormResponse`,\n                label: `${this.label}->Response`\n            }\n        ];\n    }\n    */\n\n   /**\n    * processData()\n    * return the current value requested for the given data key.\n    * @param {obj} instance\n    * @return {mixed} | null\n    */\n   /*\n    processData(instance, key) {\n        var parts = key.split(\".\");\n        if (parts[0] == this.id) {\n            var myState = this.myState(instance);\n            return myState[parts[1]];\n        }\n        return null;\n    }\n    */\n};\n","// import ABApplication from \"./ABApplication\"\n// const ABApplication = require(\"./ABApplication\"); // NOTE: change to require()\nconst ABProcessElement = require(\"../../../platform/process/tasks/ABProcessElement.js\");\n\nvar ABProcessTaskEmailDefaults = {\n   category: \"task\",\n   // category: {string} | null\n   // if this Element should show up on one of the popup replace menus, then\n   // specify one of the categories of elements it should be an option for.\n   // Available choices: [ \"start\", \"gateway\", \"task\", \"end\" ].\n   //\n   // if it shouldn't show up under the popup menu, then leave this null\n\n   fields: [\n      \"to\",\n      \"from\",\n      \"subject\",\n      \"message\",\n      \"toCustom\",\n      \"fromCustom\",\n      \"toUsers\",\n      \"fromUsers\",\n   ],\n   // fields: {array}\n   // a list of internal setting values this Element tracks\n\n   icon: \"email\", // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\n   // icon: {string}\n   // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\n\n   key: \"Email\",\n   // key: {string}\n   // unique key to reference this specific Task\n};\n\nmodule.exports = class ABProcessTaskEmailCore extends ABProcessElement {\n   constructor(attributes, process, AB) {\n      attributes.type = attributes.type || \"process.task.email\";\n      super(attributes, process, AB, ABProcessTaskEmailDefaults);\n\n      // listen\n   }\n\n   // return the default values for this DataField\n   static defaults() {\n      return ABProcessTaskEmailDefaults;\n   }\n\n   static DiagramReplace() {\n      return {\n         label: \"Send Task\",\n         actionName: \"replace-with-send-task\",\n         className: \"bpmn-icon-send\",\n         target: {\n            type: \"bpmn:SendTask\",\n         },\n      };\n   }\n\n   fromValues(attributes) {\n      /*\n        {\n            id: uuid(),\n            name: 'name',\n            type: 'xxxxx',\n            json: \"{json}\"\n        }\n        */\n      super.fromValues(attributes);\n\n      ABProcessTaskEmailDefaults.fields.forEach((f) => {\n         this[f] = attributes[f];\n      });\n   }\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABApplication instance\n    * into the values needed for saving to the DB.\n    *\n    * Most of the instance data is stored in .json field, so be sure to\n    * update that from all the current values of our child fields.\n    *\n    * @return {json}\n    */\n   toObj() {\n      var data = super.toObj();\n\n      ABProcessTaskEmailDefaults.fields.forEach((f) => {\n         data[f] = this[f];\n      });\n\n      return data;\n   }\n\n   ////\n   //// Process Instance Methods\n   ////\n\n   /**\n    * do()\n    * this method actually performs the action for this task.\n    * @param {obj} instance  the instance data of the running process\n    * @return {Promise}\n    *      resolve(true/false) : true if the task is completed.\n    *                            false if task is still waiting\n    */\n   // do(instance) {\n   //     return new Promise((resolve, reject) => {\n   //         // for testing:\n   //         var myState = this.myState(instance);\n   //         myState.status = \"completed\";\n   //         this.log(instance, \"Email Sent successfully\");\n   //         resolve(true);\n   //     });\n   // }\n\n   /**\n    * initState()\n    * setup this task's initial state variables\n    * @param {obj} context  the context data of the process instance\n    * @param {obj} val  any values to override the default state\n    */\n   initState(context, val) {\n      var myDefaults = {\n         to: [],\n         from: [],\n         subject: this.subject,\n         message: this.message,\n      };\n\n      super.initState(context, myDefaults, val);\n   }\n};\n","const ABProcessElement = require(\"../../../platform/process/tasks/ABProcessElement.js\");\n\nvar AccountingBatchProcessingDefaults = {\n   category: null,\n   // category: {string} | null\n   // if this Element should show up on one of the popup replace menus, then\n   // specify one of the categories of elements it should be an option for.\n   // Available choices: [ \"start\", \"gateway\", \"task\", \"end\" ].\n   //\n   // if it shouldn't show up under the popup menu, then leave this null\n\n   icon: \"check-circle\", // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\n   // icon: {string}\n   // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\n\n   instanceValues: [],\n   // instanceValues: {array}\n   // a list of values this element tracks as it is operating in a process.\n\n   key: \"AccountingBatchProcessing\",\n   // key: {string}\n   // unique key to reference this specific Task\n\n   settings: [\n      \"objectBatch\",\n      \"processBatchValue\",\n      \"fieldBatchEntries\",\n      \"fieldBatchFinancialPeriod\",\n      \"objectJE\",\n      \"fieldJEAccount\",\n      \"fieldJERC\",\n      \"fieldJEStatus\",\n      \"fieldJEStatusComplete\",\n      \"objectBR\",\n      \"fieldBRFinancialPeriod\",\n      \"fieldBRAccount\",\n      \"fieldBRRC\",\n      \"fieldBREntries\",\n   ],\n   // settings: {array}\n   // a list of internal setting values this Element tracks. These are the\n   // values set by the platform .propertiesStash()\n};\n\nmodule.exports = class AccountingBatchProcessingCore extends ABProcessElement {\n   constructor(attributes, process, AB) {\n      attributes.type =\n         attributes.type || \"process.task.service.accounting.batchProcessing\";\n      super(attributes, process, AB, AccountingBatchProcessingDefaults);\n\n      // listen\n   }\n\n   // return the default values for this DataField\n   static defaults() {\n      return AccountingBatchProcessingDefaults;\n   }\n\n   static DiagramReplace() {\n      return null;\n   }\n\n   /*\n    fromValues(attributes) {\n        /*\n        {\n            id: uuid(),\n            name: 'name',\n            type: 'xxxxx',\n            json: \"{json}\"\n        }\n        * /\n        super.fromValues(attributes);\n\n        AccountingBatchProcessingDefaults.settings.forEach((f) => {\n            this[f] = attributes[f];\n        });\n    }\n    */\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABApplication instance\n    * into the values needed for saving to the DB.\n    *\n    * Most of the instance data is stored in .json field, so be sure to\n    * update that from all the current values of our child fields.\n    *\n    * @return {json}\n    */\n   /*\n    toObj() {\n        var data = super.toObj();\n\n        AccountingBatchProcessingDefaults.settings.forEach((f) => {\n            data[f] = this[f];\n        });\n\n        return data;\n    }\n    */\n\n   ////\n   //// Process Instance Methods\n   ////\n\n   /**\n    * initState()\n    * setup this task's initial state variables\n    * @param {obj} context  the context data of the process instance\n    * @param {obj} val  any values to override the default state\n    */\n   /*\n    initState(context, val) {\n        var myDefaults = {\n            instanceVariable1: null,\n            instanceVariable2: null\n        };\n\n        super.initState(context, myDefaults, val);\n    }\n    */\n\n   /**\n    * processDataFields()\n    * return an array of avaiable data fields that this element\n    * can provide to other ProcessElements.\n    * Different Process Elements can make data available to other\n    * process Elements.\n    * @return {array} | null\n    */\n   /*\n    processDataFields() {\n        // in this Task, we can return the Response to the UserForm\n        return [\n            {\n                key: `${this.id}.[someInstanceVariableHere]`,\n                label: `${this.label}->Response`\n            }\n        ];\n    }\n    */\n\n   /**\n    * processData()\n    * return the current value requested for the given data key.\n    * @param {obj} instance\n    * @return {mixed} | null\n    */\n   /*\n    processData(instance, key) {\n        var parts = key.split(\".\");\n        if (parts[0] == this.id) {\n            var myState = this.myState(instance);\n            return myState[parts[1]];\n        }\n        return null;\n    }\n    */\n};\n","const ABProcessElement = require(\"../../../platform/process/tasks/ABProcessElement.js\");\n\nvar AccountingFPCloseDefaults = {\n   category: null,\n   // category: {string} | null\n   // if this Element should show up on one of the popup replace menus, then\n   // specify one of the categories of elements it should be an option for.\n   // Available choices: [ \"start\", \"gateway\", \"task\", \"end\" ].\n   //\n   // if it shouldn't show up under the popup menu, then leave this null\n\n   icon: \"check-circle\", // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\n   // icon: {string}\n   // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\n\n   instanceValues: [],\n   // instanceValues: {array}\n   // a list of values this element tracks as it is operating in a process.\n\n   key: \"AccountingFPClose\",\n   // key: {string}\n   // unique key to reference this specific Task\n\n   settings: [\n      \"processFPValue\",\n      \"objectFP\",\n      \"objectGL\",\n      \"objectAcc\",\n      \"fieldFPStart\",\n      \"fieldFPOpen\",\n      \"fieldFPStatus\",\n      \"fieldFPActive\",\n      \"fieldGLStarting\",\n      \"fieldGLRunning\",\n      \"fieldGLAccount\",\n      \"fieldGLRc\",\n      \"fieldGLDebit\",\n      \"fieldGLCredit\",\n      \"fieldAccType\",\n      \"fieldAccAsset\",\n      \"fieldAccExpense\",\n      \"fieldAccLiabilities\",\n      \"fieldAccEquity\",\n      \"fieldAccIncome\",\n   ],\n   // settings: {array}\n   // a list of internal setting values this Element tracks. These are the\n   // values set by the platform .propertiesStash()\n};\n\nmodule.exports = class AccountingFPCloseCore extends ABProcessElement {\n   constructor(attributes, process, AB) {\n      attributes.type =\n         attributes.type || \"process.task.service.accounting.fpClose\";\n      super(attributes, process, AB, AccountingFPCloseDefaults);\n\n      // listen\n   }\n\n   // return the default values for this DataField\n   static defaults() {\n      return AccountingFPCloseDefaults;\n   }\n\n   static DiagramReplace() {\n      return null;\n   }\n\n   /*\n    fromValues(attributes) {\n        /*\n        {\n            id: uuid(),\n            name: 'name',\n            type: 'xxxxx',\n            json: \"{json}\"\n        }\n        * /\n        super.fromValues(attributes);\n\n        AccountingFPCloseDefaults.settings.forEach((f) => {\n            this[f] = attributes[f];\n        });\n    }\n    */\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABApplication instance\n    * into the values needed for saving to the DB.\n    *\n    * Most of the instance data is stored in .json field, so be sure to\n    * update that from all the current values of our child fields.\n    *\n    * @return {json}\n    */\n   /*\n    toObj() {\n        var data = super.toObj();\n\n        AccountingFPCloseDefaults.settings.forEach((f) => {\n            data[f] = this[f];\n        });\n\n        return data;\n    }\n    */\n\n   ////\n   //// Process Instance Methods\n   ////\n\n   /**\n    * initState()\n    * setup this task's initial state variables\n    * @param {obj} context  the context data of the process instance\n    * @param {obj} val  any values to override the default state\n    */\n   /*\n    initState(context, val) {\n        var myDefaults = {\n            instanceVariable1: null,\n            instanceVariable2: null\n        };\n\n        super.initState(context, myDefaults, val);\n    }\n    */\n\n   /**\n    * processDataFields()\n    * return an array of avaiable data fields that this element\n    * can provide to other ProcessElements.\n    * Different Process Elements can make data available to other\n    * process Elements.\n    * @return {array} | null\n    */\n   /*\n    processDataFields() {\n        // in this Task, we can return the Response to the UserForm\n        return [\n            {\n                key: `${this.id}.[someInstanceVariableHere]`,\n                label: `${this.label}->Response`\n            }\n        ];\n    }\n    */\n\n   /**\n    * processData()\n    * return the current value requested for the given data key.\n    * @param {obj} instance\n    * @return {mixed} | null\n    */\n   /*\n    processData(instance, key) {\n        var parts = key.split(\".\");\n        if (parts[0] == this.id) {\n            var myState = this.myState(instance);\n            return myState[parts[1]];\n        }\n        return null;\n    }\n    */\n};\n","const ABProcessElement = require(\"../../../platform/process/tasks/ABProcessElement.js\");\n\nvar AccountingFPYearCloseDefaults = {\n   category: null,\n   // category: {string} | null\n   // if this Element should show up on one of the popup replace menus, then\n   // specify one of the categories of elements it should be an option for.\n   // Available choices: [ \"start\", \"gateway\", \"task\", \"end\" ].\n   //\n   // if it shouldn't show up under the popup menu, then leave this null\n\n   icon: \"check-circle\", // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\n   // icon: {string}\n   // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\n\n   instanceValues: [],\n   // instanceValues: {array}\n   // a list of values this element tracks as it is operating in a process.\n\n   key: \"AccountingFPYearClose\",\n   // key: {string}\n   // unique key to reference this specific Task\n\n   settings: [\n      \"processFPYearValue\",\n      \"objectFPYear\",\n      \"objectFPMonth\",\n      \"objectGL\",\n      \"objectAccount\",\n      \"valueFundBalances\",\n      \"valueNetIncome\",\n      \"fieldFPYearStart\",\n      \"fieldFPYearEnd\",\n      \"fieldFPYearStatus\",\n      \"fieldFPYearActive\",\n      \"fieldFPMonthStart\",\n      \"fieldFPMonthEnd\",\n      \"fieldGLStartBalance\",\n      \"fieldGLRunningBalance\",\n      \"fieldGLrc\",\n      \"fieldAccNumber\",\n      \"fieldAccType\",\n      \"fieldAccTypeIncome\",\n      \"fieldAccTypeExpense\",\n      \"fieldAccTypeEquity\",\n   ],\n   // settings: {array}\n   // a list of internal setting values this Element tracks. These are the\n   // values set by the platform .propertiesStash()\n};\n\nmodule.exports = class AccountingFPYearCloseCore extends ABProcessElement {\n   constructor(attributes, process, AB) {\n      attributes.type =\n         attributes.type || \"process.task.service.accounting.fpYearClose\";\n      super(attributes, process, AB, AccountingFPYearCloseDefaults);\n\n      // listen\n   }\n\n   // return the default values for this DataField\n   static defaults() {\n      return AccountingFPYearCloseDefaults;\n   }\n\n   static DiagramReplace() {\n      return null;\n   }\n\n   /*\n    fromValues(attributes) {\n        /*\n        {\n            id: uuid(),\n            name: 'name',\n            type: 'xxxxx',\n            json: \"{json}\"\n        }\n        * /\n        super.fromValues(attributes);\n\n        AccountingFPCloseDefaults.settings.forEach((f) => {\n            this[f] = attributes[f];\n        });\n    }\n    */\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABApplication instance\n    * into the values needed for saving to the DB.\n    *\n    * Most of the instance data is stored in .json field, so be sure to\n    * update that from all the current values of our child fields.\n    *\n    * @return {json}\n    */\n   /*\n    toObj() {\n        var data = super.toObj();\n\n        AccountingFPCloseDefaults.settings.forEach((f) => {\n            data[f] = this[f];\n        });\n\n        return data;\n    }\n    */\n\n   ////\n   //// Process Instance Methods\n   ////\n\n   /**\n    * initState()\n    * setup this task's initial state variables\n    * @param {obj} context  the context data of the process instance\n    * @param {obj} val  any values to override the default state\n    */\n   /*\n    initState(context, val) {\n        var myDefaults = {\n            instanceVariable1: null,\n            instanceVariable2: null\n        };\n\n        super.initState(context, myDefaults, val);\n    }\n    */\n\n   /**\n    * processDataFields()\n    * return an array of avaiable data fields that this element\n    * can provide to other ProcessElements.\n    * Different Process Elements can make data available to other\n    * process Elements.\n    * @return {array} | null\n    */\n   /*\n    processDataFields() {\n        // in this Task, we can return the Response to the UserForm\n        return [\n            {\n                key: `${this.id}.[someInstanceVariableHere]`,\n                label: `${this.label}->Response`\n            }\n        ];\n    }\n    */\n\n   /**\n    * processData()\n    * return the current value requested for the given data key.\n    * @param {obj} instance\n    * @return {mixed} | null\n    */\n   /*\n    processData(instance, key) {\n        var parts = key.split(\".\");\n        if (parts[0] == this.id) {\n            var myState = this.myState(instance);\n            return myState[parts[1]];\n        }\n        return null;\n    }\n    */\n};\n","const ABProcessElement = require(\"../../../platform/process/tasks/ABProcessElement.js\");\n\nlet AccountingJEArchiveDefaults = {\n   category: null,\n   // category: {string} | null\n   // if this Element should show up on one of the popup replace menus, then\n   // specify one of the categories of elements it should be an option for.\n   // Available choices: [ \"start\", \"gateway\", \"task\", \"end\" ].\n   //\n   // if it shouldn't show up under the popup menu, then leave this null\n\n   icon: \"archive\", // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\n   // icon: {string}\n   // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\n\n   instanceValues: [],\n   // instanceValues: {array}\n   // a list of values this element tracks as it is operating in a process.\n\n   key: \"AccountingJEArchive\",\n   // key: {string}\n   // unique key to reference this specific Task\n\n   settings: [\n      \"processBatchValue\",\n      \"objectBatch\",\n      \"objectBalance\",\n      \"objectJE\",\n      \"objectJEArchive\",\n\n      \"fieldBatchFiscalMonth\",\n      \"fieldJeAccount\",\n      \"fieldJeRC\",\n      \"fieldJeArchiveBalance\",\n      \"fieldBrFiscalMonth\",\n      \"fieldBrAccount\",\n      \"fieldBrRC\",\n      \"fieldsMatch\",\n   ],\n   // settings: {array}\n   // a list of internal setting values this Element tracks. These are the\n   // values set by the platform .propertiesStash()\n};\n\nmodule.exports = class AccountingJEArchiveCore extends ABProcessElement {\n   constructor(attributes, process, AB) {\n      attributes.type =\n         attributes.type || \"process.task.service.accounting.jeArchive\";\n      super(attributes, process, AB, AccountingJEArchiveDefaults);\n\n      // listen\n   }\n\n   // return the default values for this DataField\n   static defaults() {\n      return AccountingJEArchiveDefaults;\n   }\n\n   static DiagramReplace() {\n      return null;\n   }\n\n   /*\n    fromValues(attributes) {\n        /*\n        {\n            id: uuid(),\n            name: 'name',\n            type: 'xxxxx',\n            json: \"{json}\"\n        }\n        * /\n        super.fromValues(attributes);\n\n        AccountingBatchProcessingDefaults.settings.forEach((f) => {\n            this[f] = attributes[f];\n        });\n    }\n    */\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABApplication instance\n    * into the values needed for saving to the DB.\n    *\n    * Most of the instance data is stored in .json field, so be sure to\n    * update that from all the current values of our child fields.\n    *\n    * @return {json}\n    */\n   /*\n    toObj() {\n        var data = super.toObj();\n\n        AccountingBatchProcessingDefaults.settings.forEach((f) => {\n            data[f] = this[f];\n        });\n\n        return data;\n    }\n    */\n\n   ////\n   //// Process Instance Methods\n   ////\n\n   /**\n    * initState()\n    * setup this task's initial state variables\n    * @param {obj} context  the context data of the process instance\n    * @param {obj} val  any values to override the default state\n    */\n   /*\n    initState(context, val) {\n        var myDefaults = {\n            instanceVariable1: null,\n            instanceVariable2: null\n        };\n\n        super.initState(context, myDefaults, val);\n    }\n    */\n\n   /**\n    * processDataFields()\n    * return an array of avaiable data fields that this element\n    * can provide to other ProcessElements.\n    * Different Process Elements can make data available to other\n    * process Elements.\n    * @return {array} | null\n    */\n   /*\n    processDataFields() {\n        // in this Task, we can return the Response to the UserForm\n        return [\n            {\n                key: `${this.id}.[someInstanceVariableHere]`,\n                label: `${this.label}->Response`\n            }\n        ];\n    }\n    */\n\n   /**\n    * processData()\n    * return the current value requested for the given data key.\n    * @param {obj} instance\n    * @return {mixed} | null\n    */\n   /*\n    processData(instance, key) {\n        var parts = key.split(\".\");\n        if (parts[0] == this.id) {\n            var myState = this.myState(instance);\n            return myState[parts[1]];\n        }\n        return null;\n    }\n    */\n};\n","const ABProcessElement = require(\"../../../platform/process/tasks/ABProcessElement.js\");\n\nlet CalculateDefaults = {\n   category: null,\n   // category: {string} | null\n   // if this Element should show up on one of the popup replace menus, then\n   // specify one of the categories of elements it should be an option for.\n   // Available choices: [ \"start\", \"gateway\", \"task\", \"end\" ].\n   //\n   // if it shouldn't show up under the popup menu, then leave this null\n\n   icon: \"calculator\", // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\n   // icon: {string}\n   // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\n\n   instanceValues: [],\n   // instanceValues: {array}\n   // a list of values this element tracks as it is operating in a process.\n\n   key: \"Calculate\",\n   // key: {string}\n   // unique key to reference this specific Task\n\n   settings: [\"formulaText\"]\n};\n\nmodule.exports = class CalculateTaskCore extends ABProcessElement {\n   constructor(attributes, process, application) {\n      attributes.type = attributes.type || \"process.task.service.calculate\";\n      super(attributes, process, application, CalculateDefaults);\n\n      // listen\n   }\n\n   // return the default values for this DataField\n   static defaults() {\n      return CalculateDefaults;\n   }\n\n   static DiagramReplace() {\n      return null;\n   }\n\n   /**\n    * processDataFields()\n    * return an array of avaiable data fields that this element\n    * can provide to other ProcessElements.\n    * Different Process Elements can make data available to other\n    * process Elements.\n    * @return {array} | null\n    */\n   processDataFields() {\n      return {\n         key: `${this.id}.value`,\n         label: `${this.label}->Value`\n      };\n   }\n};\n","/**\n * ABProcessTaskServiceCore\n *\n * This defines the base Service Task element that can be placed on a BPMN\n * diagram.  In our system, we will let the designer choose a sub class\n * to make active for this element.\n *\n * Currently a ServiceTask performs a dedicated operation on the server.\n *  - performing a query, looking up data, etc...\n *\n */\nconst ABProcessElement = require(\"../../../platform/process/tasks/ABProcessElement.js\");\n\nvar ABProcessTaskServiceDefaults = {\n   category: \"task\",\n   // category: {string} | null\n   // if this Element should show up on one of the popup replace menus, then\n   // specify one of the categories of elements it should be an option for.\n   // Available choices: [ \"start\", \"gateway\", \"task\", \"end\" ].\n   //\n   // if it shouldn't show up under the popup menu, then leave this null\n\n   icon: \"check-circle\", // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\n   // icon: {string}\n   // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\n\n   instanceValues: [],\n   // instanceValues: {array}\n   // a list of values this element tracks as it is operating in a process.\n\n   key: \"TaskService\",\n   // key: {string}\n   // unique key to reference this specific Task\n\n   settings: [],\n   // settings: {array}\n   // a list of internal setting values this Element tracks. These are the\n   // values set by the platform .propertiesStash()\n};\n\nmodule.exports = class ABProcessTaskServiceCore extends ABProcessElement {\n   constructor(attributes, process, AB) {\n      attributes.type = attributes.type || \"process.task.service\";\n      super(attributes, process, AB, ABProcessTaskServiceDefaults);\n\n      // listen\n   }\n\n   // return the default values for this DataField\n   static defaults() {\n      return ABProcessTaskServiceDefaults;\n   }\n\n   static DiagramReplace() {\n      return {\n         label: \"Service Task\",\n         actionName: \"replace-with-service-task\",\n         className: \"bpmn-icon-service\",\n         target: {\n            type: \"bpmn:ServiceTask\",\n         },\n      };\n   }\n\n   /*\n    fromValues(attributes) {\n        /*\n        {\n            id: uuid(),\n            name: 'name',\n            type: 'xxxxx',\n            json: \"{json}\"\n        }\n        * /\n        super.fromValues(attributes);\n\n        ABProcessTaskServiceDefaults.fields.forEach((f) => {\n            this[f] = attributes[f];\n        });\n    }\n    */\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABApplication instance\n    * into the values needed for saving to the DB.\n    *\n    * Most of the instance data is stored in .json field, so be sure to\n    * update that from all the current values of our child fields.\n    *\n    * @return {json}\n    */\n   /*\n    toObj() {\n        var data = super.toObj();\n\n        ABProcessTaskServiceDefaults.fields.forEach((f) => {\n            data[f] = this[f];\n        });\n\n        return data;\n    }\n    */\n\n   ////\n   //// Process Instance Methods\n   ////\n\n   /**\n    * initState()\n    * setup this task's initial state variables\n    * @param {obj} context  the context data of the process instance\n    * @param {obj} val  any values to override the default state\n    */\n   /*\n    initState(context, val) {\n        var myDefaults = {\n            userFormID: null,\n            userFormResponse: null\n        };\n\n        super.initState(context, myDefaults, val);\n    }\n    */\n\n   /**\n    * processDataFields()\n    * return an array of avaiable data fields that this element\n    * can provide to other ProcessElements.\n    * Different Process Elements can make data available to other\n    * process Elements.\n    * @return {array} | null\n    */\n   /*\n    processDataFields() {\n        // in this Task, we can return the Response to the UserForm\n        return [\n            {\n                key: `${this.id}.userFormResponse`,\n                label: `${this.label}->Response`\n            }\n        ];\n    }\n    */\n\n   /**\n    * processData()\n    * return the current value requested for the given data key.\n    * @param {obj} instance\n    * @return {mixed} | null\n    */\n   /*\n    processData(instance, key) {\n        var parts = key.split(\".\");\n        if (parts[0] == this.id) {\n            var myState = this.myState(instance);\n            return myState[parts[1]];\n        }\n        return null;\n    }\n    */\n};\n","// import ABApplication from \"./ABApplication\"\n// const ABApplication = require(\"./ABApplication\"); // NOTE: change to require()\nconst ABProcessElement = require(\"../../../platform/process/tasks/ABProcessElement.js\");\n\nconst ABProcessTaskGetResetPasswordUrlDefaults = {\n   category: null,\n   // category: {string} | null\n   // if this Element should show up on one of the popup replace menus, then\n   // specify one of the categories of elements it should be an option for.\n   // Available choices: [ \"start\", \"gateway\", \"task\", \"end\" ].\n   //\n   // if it shouldn't show up under the popup menu, then leave this null\n\n   icon: \"plus-circle\", // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\n   // icon: {string}\n   // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\n\n   instanceValues: [],\n   // instanceValues: {array}\n   // a list of values this element tracks as it is operating in a process.\n\n   key: \"GetResetPasswordUrl\",\n   // key: {string}\n   // unique key to reference this specific Task\n\n   settings: [\"email\"],\n   // settings: {array}\n   // a list of internal setting values this Element tracks. These are the\n   // values set by the platform .propertiesStash()\n};\n\nmodule.exports = class ABProcessTaskGetResetPasswordUrlCore extends (\n   ABProcessElement\n) {\n   constructor(attributes, process, AB) {\n      attributes.type =\n         attributes.type || \"process.task.service.getResetPasswordUrl\";\n      super(attributes, process, AB, ABProcessTaskGetResetPasswordUrlDefaults);\n\n      // listen\n   }\n\n   // return the default values for this DataField\n   static defaults() {\n      return ABProcessTaskGetResetPasswordUrlDefaults;\n   }\n\n   static DiagramReplace() {\n      return null;\n   }\n\n   /**\n    * processDataFields()\n    * return an array of avaiable data fields that this element\n    * can provide to other ProcessElements.\n    * Different Process Elements can make data available to other\n    * process Elements.\n    * @return {array} | null\n    */\n   processDataFields() {\n      return {\n         key: `${this.id}.url`,\n         label: `${this.label}->URL`,\n      };\n   }\n};\n","const ABProcessElement = require(\"../../../platform/process/tasks/ABProcessElement.js\");\n\nlet InsertRecordDefaults = {\n   category: null,\n   // category: {string} | null\n   // if this Element should show up on one of the popup replace menus, then\n   // specify one of the categories of elements it should be an option for.\n   // Available choices: [ \"start\", \"gateway\", \"task\", \"end\" ].\n   //\n   // if it shouldn't show up under the popup menu, then leave this null\n\n   icon: \"plus-circle\", // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\n   // icon: {string}\n   // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\n\n   instanceValues: [],\n   // instanceValues: {array}\n   // a list of values this element tracks as it is operating in a process.\n\n   key: \"InsertRecord\",\n   // key: {string}\n   // unique key to reference this specific Task\n\n   settings: [\n      \"objectID\",\n      \"fieldValues\",\n      \"isRepeat\",\n      \"repeatMode\",\n      \"repeatColumn\",\n   ],\n};\n\nmodule.exports = class InsertRecordCore extends ABProcessElement {\n   constructor(attributes, process, AB) {\n      attributes.type = attributes.type || \"process.task.service.insertRecord\";\n      super(attributes, process, AB, InsertRecordDefaults);\n\n      // listen\n   }\n\n   // return the default values for this DataField\n   static defaults() {\n      return InsertRecordDefaults;\n   }\n\n   static DiagramReplace() {\n      return null;\n   }\n\n   fromValues(attributes) {\n      super.fromValues(attributes);\n\n      this.isRepeat = JSON.parse(attributes.isRepeat || false);\n   }\n\n   get startElement() {\n      let startElem = this.process.elements(\n         (elem) => elem && elem.defaults && elem.defaults.category == \"start\"\n      )[0];\n      return startElem;\n   }\n\n   get previousElement() {\n      return this.process.connectionPreviousTask(this)[0];\n   }\n\n   get objectOfStartElement() {\n      let startElem = this.startElement;\n      if (!startElem) return null;\n\n      let startElemObj = this.AB.objectByID(startElem.objectID);\n      return startElemObj;\n   }\n\n   get objectOfPrevElement() {\n      let prevElem = this.previousElement;\n      if (!prevElem) return null;\n\n      let objectID;\n      switch (prevElem.type) {\n         case \"process.task.service.query\":\n            objectID = prevElem.qlObj ? prevElem.qlObj.objectID : null;\n            break;\n         case \"process.task.service.insertRecord\":\n         default:\n            objectID = prevElem.objectID;\n            break;\n      }\n\n      return this.AB.objectByID(objectID);\n   }\n\n   get fieldRepeat() {\n      let obj = this.objectOfStartElement;\n      if (!obj) return null;\n\n      return obj.fields((f) => f.id == this.repeatColumn)[0];\n   }\n\n   /*\n     fromValues(attributes) {\n         /*\n         {\n             id: uuid(),\n             name: 'name',\n             type: 'xxxxx',\n             json: \"{json}\"\n         }\n         * /\n         super.fromValues(attributes);\n \n         AccountingBatchProcessingDefaults.settings.forEach((f) => {\n             this[f] = attributes[f];\n         });\n     }\n     */\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABApplication instance\n    * into the values needed for saving to the DB.\n    *\n    * Most of the instance data is stored in .json field, so be sure to\n    * update that from all the current values of our child fields.\n    *\n    * @return {json}\n    */\n   /*\n     toObj() {\n         var data = super.toObj();\n \n         AccountingBatchProcessingDefaults.settings.forEach((f) => {\n             data[f] = this[f];\n         });\n \n         return data;\n     }\n     */\n\n   ////\n   //// Process Instance Methods\n   ////\n\n   /**\n    * initState()\n    * setup this task's initial state variables\n    * @param {obj} context  the context data of the process instance\n    * @param {obj} val  any values to override the default state\n    */\n   /*\n     initState(context, val) {\n         var myDefaults = {\n             instanceVariable1: null,\n             instanceVariable2: null\n         };\n \n         super.initState(context, myDefaults, val);\n     }\n     */\n\n   /**\n    * processDataFields()\n    * return an array of avaiable data fields that this element\n    * can provide to other ProcessElements.\n    * Different Process Elements can make data available to other\n    * process Elements.\n    * @return {array} | null\n    */\n   /*\n     processDataFields() {\n         // in this Task, we can return the Response to the UserForm\n         return [\n             {\n                 key: `${this.id}.[someInstanceVariableHere]`,\n                 label: `${this.label}->Response`\n             }\n         ];\n     }\n     */\n\n   /**\n    * processData()\n    * return the current value requested for the given data key.\n    * @param {obj} instance\n    * @return {mixed} | null\n    */\n   /*\n     processData(instance, key) {\n         var parts = key.split(\".\");\n         if (parts[0] == this.id) {\n             var myState = this.myState(instance);\n             return myState[parts[1]];\n         }\n         return null;\n     }\n     */\n};\n","const ABProcessElement = require(\"../../../platform/process/tasks/ABProcessElement.js\");\n\nconst ABQLManager = require(\"../../../platform/ql/ABQLManager.js\");\n\nvar ABProcessTaskServiceQueryDefaults = {\n   category: null,\n   // category: {string} | null\n   // if this Element should show up on one of the popup replace menus, then\n   // specify one of the categories of elements it should be an option for.\n   // Available choices: [ \"start\", \"gateway\", \"task\", \"end\" ].\n   //\n   // if it shouldn't show up under the popup menu, then leave this null\n\n   icon: \"check-circle\", // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\n   // icon: {string}\n   // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\n\n   instanceValues: [],\n   // instanceValues: {array}\n   // a list of values this element tracks as it is operating in a process.\n\n   key: \"TaskServiceQuery\",\n   // key: {string}\n   // unique key to reference this specific Task\n\n   settings: [\"qlObj\"],\n   // settings: {array}\n   // a list of internal setting values this Element tracks. These are the\n   // values set by the platform .propertiesStash()\n};\n\nmodule.exports = class ABProcessTaskServiceQueryCore extends ABProcessElement {\n   constructor(attributes, process, AB) {\n      attributes.type = attributes.type || \"process.task.service.query\";\n      super(attributes, process, AB, ABProcessTaskServiceQueryDefaults);\n\n      // listen\n   }\n\n   // return the default values for this DataField\n   static defaults() {\n      return ABProcessTaskServiceQueryDefaults;\n   }\n\n   static DiagramReplace() {\n      return null;\n   }\n\n   fromValues(attributes) {\n      super.fromValues(attributes);\n\n      // Before we make instances of qlObj:\n      this._datasources = [];\n\n      // comvert our qlObj into an ABQLxxx instance.\n      if (this.qlObj) {\n         this.qlObj = ABQLManager.fromAttributes(this.qlObj, this, this.AB);\n      }\n   }\n\n   /**\n    * @method toObj()\n    * properly compile the current state of this object instance\n    * into the values needed for saving to the DB.\n    * @return {json}\n    */\n   toObj() {\n      var data = super.toObj();\n\n      // convert qlObj into obj format:\n      if (this.qlObj) {\n         data.qlObj = this.qlObj.toObj();\n      }\n\n      return data;\n   }\n\n   registerDatasource(obj) {\n      this._datasources.push(obj);\n   }\n\n   ////\n   //// Process Instance Methods\n   ////\n\n   /**\n    * initState()\n    * setup this task's initial state variables\n    * @param {obj} context  the context data of the process instance\n    * @param {obj} val  any values to override the default state\n    */\n   /*\n    initState(context, val) {\n        var myDefaults = {\n            instanceVariable1: null,\n            instanceVariable2: null\n        };\n\n        super.initState(context, myDefaults, val);\n    }\n    */\n\n   /**\n    * processDataFields()\n    * return an array of avaiable data fields that this element\n    * can provide to other ProcessElements.\n    * Different Process Elements can make data available to other\n    * process Elements.\n    * @return {array} | null\n    */\n   processDataFields() {\n      // in this Task, we can return the Response to the UserForm\n      var fields = null;\n      if (this._datasources.length > 0) {\n         fields = [];\n         this._datasources.forEach((s) => {\n            var param = s.processDataField(this.id, this.label);\n            if (param) {\n               fields.push(param);\n            }\n         });\n      }\n      return fields;\n   }\n\n   /**\n    * processData()\n    * return the current value requested for the given data key.\n    * @param {obj} instance\n    * @return {mixed} | null\n    */\n   processData(instance, key) {\n      var parts = key.split(\".\");\n      if (parts[0] == this.id) {\n         var myState = this.myState(instance);\n         return myState[parts[1]];\n      }\n      return null;\n   }\n};\n","const ABProcessElement = require(\"../../../platform/process/tasks/ABProcessElement.js\");\n\nlet SubProcessDefaults = {\n   category: \"task\",\n   // category: {string} | null\n   // if this Element should show up on one of the popup replace menus, then\n   // specify one of the categories of elements it should be an option for.\n   // Available choices: [ \"start\", \"gateway\", \"task\", \"end\" ].\n   //\n   // if it shouldn't show up under the popup menu, then leave this null\n\n   icon: \"object-group\", // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\n   // icon: {string}\n   // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\n\n   instanceValues: [],\n   // instanceValues: {array}\n   // a list of values this element tracks as it is operating in a process.\n\n   key: \"SubProcess\",\n   // key: {string}\n   // unique key to reference this specific Task\n\n   settings: [\n      \"isEnable\",\n      \"parameterId\",\n      \"connectionAttrs\",\n      \"elementIDs\",\n      \"loopType\",\n   ],\n};\n\nmodule.exports = class SubProcessCore extends ABProcessElement {\n   constructor(attributes, process, AB) {\n      attributes.type = attributes.type || \"process.task.service.subProcess\";\n      super(attributes, process, AB, SubProcessDefaults);\n\n      // listen\n   }\n\n   // return the default values for this DataField\n   static defaults() {\n      return SubProcessDefaults;\n   }\n\n   static DiagramReplace() {\n      // taken from \"bpmn-js/lib/features/replace/ReplaceOptions\"\n      return {\n         label: \"Sub Process\",\n         actionName: \"replace-with-subprocess\",\n         className: \"bpmn-icon-subprocess-expanded\",\n         target: {\n            type: \"bpmn:SubProcess\",\n            isExpanded: true,\n         },\n      };\n   }\n\n   fromValues(attributes) {\n      super.fromValues(attributes);\n\n      // Convert string to boolean\n      this.isEnable = this.isEnable == null ? true : JSON.parse(this.isEnable);\n\n      this._elements = {};\n      (attributes.elementIDs || []).forEach((eID) => {\n         let ele = this.AB.processElementNew(eID, this);\n         if (ele) {\n            this._elements[eID] = ele;\n         }\n      });\n\n      this._connections = attributes.connectionAttrs || {};\n   }\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABApplication instance\n    * into the values needed for saving to the DB.\n    *\n    * Most of the instance data is stored in .json field, so be sure to\n    * update that from all the current values of our child fields.\n    *\n    * @return {json}\n    */\n   toObj() {\n      let data = super.toObj();\n\n      data.elementIDs = [];\n      for (let e in this._elements) {\n         data.elementIDs.push(this._elements[e].id);\n      }\n\n      data.connectionAttrs = this._connections;\n\n      return data;\n   }\n\n   /**\n    * @method processDataFields()\n    * return an array of avaiable data fields that this element\n    * can provide to other ProcessElements.\n    * Different Process Elements can make data available to other\n    * process Elements.\n    * @param {ABProcessElement} currElement\n    *        the ABProcessElement that is requesting the data.\n    * @return {array} | null\n    */\n   processDataFields(currElement) {\n      if (this.parameterId == null) return [];\n\n      let dataFieldOpt = (this.process.processDataFields(this) || []).filter(\n         (opt) => opt.key == this.parameterId\n      )[0];\n      if (dataFieldOpt == null) return [];\n\n      let result = [];\n\n      // Connect field type\n      if (\n         dataFieldOpt.field &&\n         dataFieldOpt.field.key == \"connectObject\" &&\n         dataFieldOpt.field.datasourceLink &&\n         dataFieldOpt.field.datasourceLink.fields\n      ) {\n         result.push({\n            key: `${this.id}.uuid.subProcess`,\n            label: `${this.label}->Repeat Data.ID`,\n            object: dataFieldOpt.field.datasourceLink,\n         });\n\n         dataFieldOpt.field.datasourceLink.fields().forEach((f) => {\n            result.push({\n               key: `${this.id}.${f.id}.subProcess`,\n               label: `${this.label}->Repeat Data.${f.label}`,\n               field: f,\n               object: f.object,\n            });\n         });\n      }\n      // Other field types\n      else {\n         result.push({\n            key: dataFieldOpt.field\n               ? `${this.id}.${dataFieldOpt.field.id}.subProcess`\n               : `${this.id}.subProcess`,\n            label: `${this.label}->Repeat Data`,\n            field: dataFieldOpt.field,\n            object: dataFieldOpt.object,\n         });\n      }\n\n      let previousFields = this.process.processDataFields.call(\n         this,\n         currElement\n      );\n      if (previousFields && previousFields.length > 0) {\n         result = result.concat(previousFields);\n      }\n\n      return result;\n   }\n\n   /**\n    * @method processData()\n    * return an array of avaiable ABObjects that are represented\n    * by the data previous ProcessElements are working with.\n    * @param {ABProcessElement} currElement\n    *        the ABProcessElement that is requesting the data.\n    * @return {array} | null\n    */\n   processData(currElement, params) {\n      let instance = params[0];\n      let key = params[1];\n      let data;\n\n      if (instance && key && key.startsWith && key.startsWith(this.id)) {\n         let fieldId = key.split(\".\")[2];\n         let myState = this.myState(instance);\n         let stateData = myState ? myState.data : null;\n         data = stateData;\n\n         if (stateData && fieldId) {\n            let dataFieldOpt = (\n               this.process.processDataFields(this) || []\n            ).filter((opt) => opt.key == this.parameterId)[0];\n\n            if (\n               dataFieldOpt &&\n               dataFieldOpt.field &&\n               dataFieldOpt.field.key == \"connectObject\"\n            ) {\n               if (!Array.isArray(stateData)) stateData = [stateData];\n\n               // Extract data\n               data = stateData.map((item) => {\n                  if (fieldId == \"uuid\" || fieldId == \"id\") {\n                     return item.uuid || item.id;\n                  } else if (dataFieldOpt.field.datasourceLink) {\n                     let returnField = dataFieldOpt.field.datasourceLink.fields(\n                        (f) => f.id == fieldId\n                     )[0];\n                     if (returnField) return item[returnField.columnName];\n                     else return item;\n                  }\n               });\n            }\n         }\n      }\n\n      if (data == null)\n         data = this.process.processData.call(this, currElement, params);\n\n      if (data == null) data = this.process.processData(this, params);\n\n      return data;\n   }\n\n   //\n   // Diagram Elements\n   //\n\n   /**\n    * @method connections()\n    * return an array of connections that describe the relationships between\n    * our process elements.\n    * @param {fn} fn an iterator that returns true if the provided element\n    *                should be returned.\n    * @return [{SimpleConnectionObj}]\n    */\n   connections(fn) {\n      return this.process.connections.call(this, fn);\n   }\n\n   /**\n    * @method connectionForDiagramID()\n    * return the connection for the given diagram id\n    * @param {string} dID\n    *        the bpmn:Element diagram id\n    */\n   connectionForDiagramID(dID) {\n      if (!dID) return;\n\n      return this.process.connectionForDiagramID.call(this, dID);\n   }\n\n   /**\n    * @method connectionsIncoming()\n    * return the connections that are entering this Element\n    * @param {string} dID\n    *        the bpmn:Element diagram id\n    */\n   connectionsIncoming(dID) {\n      if (!dID) return;\n\n      return this.process.connectionsIncoming.call(this, dID);\n   }\n\n   /**\n    * @method connectionsOutgoing()\n    * return the connections that are leaving this Element\n    * @param {string} dID\n    *        the bpmn:Element diagram id\n    */\n   connectionsOutgoing(dID) {\n      if (!dID) return;\n\n      return this.process.connectionsOutgoing.call(this, dID);\n   }\n\n   /**\n    * @method connectionRemove()\n    * remove the connection info for the given bpmn:element\n    * @param {BMPNDiagramOBJ} element\n    *        the {element} returned from the BPMN.io modeling library event.\n    */\n   connectionRemove(element) {\n      if (!element) return;\n\n      this.process.connectionRemove.call(this, element);\n   }\n\n   /**\n    * @method connectionSimplyElement()\n    * given a BPMN diagram element, return a simplified object that describes\n    * the connection between two elements.\n    * @param {BMPNDiagramOBJ} element\n    *        the {element} returned from the BPMN.io modeling library event.\n    * @return {SimpleConnectionObj}\n    *        .id : {string} diagram id of the connection element\n    *        .type : {string} the type of connection\n    *        .from : {string} the diagram id of the source element\n    *        .to : {string} the diagram id of the dest element\n    */\n   connectionSimplyElement(element) {\n      if (!element) return;\n\n      return this.process.connectionSimplyElement.call(this, element);\n   }\n\n   /**\n    * @method connectionUpsert()\n    * add or update the connection information for the given bpmn:element\n    * @param {BMPNDiagramOBJ} element\n    *        the {element} returned from the BPMN.io modeling library event.\n    */\n   connectionUpsert(element) {\n      if (!element) return;\n\n      this.process.connectionUpsert.call(this, element);\n   }\n\n   /**\n    * @method connectionPreviousTask()\n    * return the ABProcessElement(s) that was a previous Element\n    * (eg connects to) this element.\n    * @param {ABProcessElement} currElement\n    * @return {array}\n    */\n   connectionPreviousTask(currElement) {\n      if (!currElement) return;\n\n      return this.process.connectionPreviousTask.call(this, currElement);\n   }\n\n   /**\n    * @method elements()\n    * return an array of elements that match the given filter (or all elements\n    * if no filter is provided).\n    * @param {fn} fn an iterator that returns true if the provided element\n    *                should be returned.\n    * @return {[ABProcessTask, ABProcessParticipant, etc...]}\n    */\n   elements(fn = () => true) {\n      return this.process.elements.call(this, fn);\n   }\n\n   /**\n    * @method elementAdd()\n    * insert an element to be tracked by this process.\n    * @param {ABProcessElement} element\n    *        the full instance of an ABProcessElement to track.\n    */\n   elementAdd(element) {\n      if (!element) return;\n\n      this.process.elementAdd.call(this, element);\n   }\n\n   /**\n    * @method elementForDiagramID()\n    * return the object that is tied to the given xml diagram ID.\n    * @param {string} dID the diagram ID\n    * @return {ABProcess[OBJ]}\n    */\n   elementForDiagramID(dID) {\n      if (!dID) return null;\n\n      return this.process.elementForDiagramID.call(this, dID);\n   }\n\n   /**\n    * @method elementRemove()\n    * remove an element from being tracked by this process.\n    * @param {obj|ABProcessElement} def\n    *        a definition of, or full Object instance of the ABProcessElement\n    *        to remove.\n    */\n   elementRemove(def) {\n      if (!def) return;\n\n      this.process.elementRemove.call(this, def);\n   }\n};\n","const ABProcessElement = require(\"../../../platform/process/tasks/ABProcessElement.js\");\n\nconst ABFieldList = require(\"../../../platform/dataFields/ABFieldList.js\");\n\nvar ABProcessTaskApprovalDefaults = {\n   category: null,\n   // category: {string} | null\n   // if this Element should show up on one of the popup replace menus, then\n   // specify one of the categories of elements it should be an option for.\n   // Available choices: [ \"start\", \"gateway\", \"task\", \"end\" ].\n   //\n   // if it shouldn't show up under the popup menu, then leave this null\n\n   icon: \"check-circle\", // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\n   // icon: {string}\n   // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\n\n   instanceValues: [\"userFormID\", \"userFormResponse\"],\n   // instanceValues: {array}\n   // a list of values this element tracks as it is operating in a process.\n\n   key: \"Approval\",\n   // key: {string}\n   // unique key to reference this specific Task\n\n   settings: [\"who\", \"toUsers\", \"formBuilder\"],\n   // settings: {array}\n   // a list of internal setting values this Element tracks. These are the\n   // values set by the platform .propertiesStash()\n};\n\nmodule.exports = class ABProcessTaskUserApprovalCore extends ABProcessElement {\n   constructor(attributes, process, AB) {\n      attributes.type = attributes.type || \"process.task.user.approval\";\n      super(attributes, process, AB, ABProcessTaskApprovalDefaults);\n\n      // listen\n   }\n\n   // return the default values for this DataField\n   static defaults() {\n      return ABProcessTaskApprovalDefaults;\n   }\n\n   static DiagramReplace() {\n      return null;\n   }\n\n   fromValues(attributes) {\n      /*\n        {\n            id: uuid(),\n            name: 'name',\n            type: 'xxxxx',\n            json: \"{json}\"\n        }\n        */\n      super.fromValues(attributes);\n\n      function fixBoolean(obj) {\n         if (obj) {\n            Object.keys(obj).forEach((k) => {\n               if (obj[k] == \"false\") {\n                  obj[k] = false;\n               } else if (obj[k] == \"true\") {\n                  obj[k] = true;\n               } else if (typeof obj[k] == \"object\") {\n                  fixBoolean(obj[k]);\n               }\n            });\n         }\n      }\n      fixBoolean(this.formBuilder);\n   }\n\n   /**\n    * @method toObj()\n    * properly compile the current state of this object instance\n    * into the values needed for saving to the DB.\n    * @return {json}\n    */\n   /*     \n    toObj() {\n        var data = super.toObj();\n\n        ABProcessTaskApprovalDefaults.fields.forEach((f) => {\n            data[f] = this[f];\n        });\n\n        return data;\n    }\n*/\n   ////\n   //// Process Instance Methods\n   ////\n\n   /**\n    * initState()\n    * setup this task's initial state variables\n    * @param {obj} context  the context data of the process instance\n    * @param {obj} val  any values to override the default state\n    */\n   /*\n    initState(context, val) {\n        var myDefaults = {};\n        ABProcessTaskApprovalDefaults.instanceValues.forEach((v) => {\n            myDefaults[v] = null;\n        });\n\n        super.initState(context, myDefaults, val);\n    }\n*/\n\n   /*\n    * preProcessFormIOComponents()\n    * we need to parse the form.io components to ensure the proper columnName\n    * and labels are being used. We also will translate the columnNames at this\n    * point in the code\n    */\n   preProcessFormIOComponents() {\n      var fields = this.process.processDataFields(this);\n      if (fields && this.formBuilder && this.formBuilder.components) {\n         this.formBuilder.components.forEach((c) => {\n            if (c.abFieldID) {\n               fields.filter((entry) => {\n                  if (entry.field && entry.field.id == c.abFieldID) {\n                     c.label = entry.field.label;\n                     c.key = entry.key;\n                     if (\n                        c.data &&\n                        c.data.values &&\n                        entry.field.settings.options\n                     ) {\n                        var vals = [];\n                        entry.field.settings.options.forEach((opt) => {\n                           vals.push({\n                              label: opt.text,\n                              value: opt.id,\n                           });\n                        });\n                        c.data.values = vals;\n                     }\n                  }\n               });\n            } else if (c.components && c.components.length) {\n               c.key = c.path;\n               c.components.forEach((o) => {\n                  if (o.abFieldID) {\n                     // these are plucked conneted values\n                     // gather up all their fields to be used\n                     var pluck = fields.filter((f) => {\n                        return f.key == c.path;\n                     })[0];\n                     if (!pluck) return;\n                     pluck.object.fields().filter((entry) => {\n                        if (entry && entry.id == o.abFieldID) {\n                           o.label = entry.label;\n                           o.key = entry.columnName;\n                           if (\n                              o.data &&\n                              o.data.values &&\n                              entry.settings.options\n                           ) {\n                              var vals = [];\n                              entry.settings.options.forEach((opt) => {\n                                 vals.push({\n                                    label: opt.text,\n                                    value: opt.id\n                                 });\n                              });\n                              o.data.values = vals;\n                           }\n                        }\n                     });\n                  }\n               });\n            }\n         });\n      }\n      return this.formBuilder;\n   }\n\n   /**\n    * processDataFields()\n    * return an array of avaiable data fields that this element\n    * can provide to other ProcessElements.\n    * Different Process Elements can make data available to other\n    * process Elements.\n    * @return {array} | null\n    */\n   processDataFields() {\n      // we need to get the button events defined by the form.io formBuilder\n      var options = [];\n      this.formBuilder.components.forEach((comp) => {\n         if (comp.type == \"button\" && comp.action == \"event\" && comp.event) {\n            options.push({\n               id: comp.event,\n               text: comp.label,\n            });\n         }\n      });\n      // in this Task, we can return the Response to the UserForm\n      // The Response can be in the form of a List Field, with one or more\n      // return options.\n\n      var myID = this.diagramID;\n\n      // create an ABFieldList object:\n      // make sure the options follow what is currently defined for our\n      // responses:\n      var myObj = this.AB.objectNew({});\n      var listField = new ABFieldList(\n         {\n            id: `${myID}.userFormResponse`,\n            label: `${this.label}->Response`,\n            columnName: `${myID}.userFormResponse`,\n            settings: {\n               options: options,\n            },\n         },\n         myObj\n      );\n\n      return [\n         {\n            key: `${myID}.userFormResponse`,\n            label: `${this.label}->Response`,\n            field: listField,\n            object: null,\n         },\n      ];\n   }\n\n   /**\n    * processData()\n    * return the current value requested for the given data key.\n    * @param {obj} instance\n    * @return {mixed} | null\n    */\n   processData(instance, key) {\n      if (key) {\n         var parts = key.split(\".\");\n         if (parts[0] == this.diagramID) {\n            var myState = this.myState(instance);\n            return myState[parts[1]];\n         }\n      }\n      return null;\n   }\n};\n","/**\n * ABProcessTaskUserCore\n *\n * This defines the base User Task element that can be placed on a BPMN\n * diagram.  In our system, we will let the designer choose a sub class\n * to make active for this element.\n *\n * Currently a UserTask expects a human user to perform an action.  These\n * actions are in the possible forms:\n *  - confirm offline action\n *  - approve data\n *  - fill out a form\n *\n */\n\nconst ABProcessElement = require(\"../../../platform/process/tasks/ABProcessElement.js\");\n\nvar ABProcessTaskUserDefaults = {\n   category: \"task\",\n   // category: {string} | null\n   // if this Element should show up on one of the popup replace menus, then\n   // specify one of the categories of elements it should be an option for.\n   // Available choices: [ \"start\", \"gateway\", \"task\", \"end\" ].\n   //\n   // if it shouldn't show up under the popup menu, then leave this null\n\n   icon: \"user\", // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\n   // icon: {string}\n   // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\n\n   instanceValues: [],\n   // instanceValues: {array}\n   // a list of values this element tracks as it is operating in a process.\n\n   key: \"TaskUser\",\n   // key: {string}\n   // unique key to reference this specific Task\n\n   settings: [],\n   // settings: {array}\n   // a list of internal setting values this Element tracks. These are the\n   // values set by the platform .propertiesStash()\n};\n\nmodule.exports = class ABProcessTaskUserCore extends ABProcessElement {\n   constructor(attributes, process, AB) {\n      attributes.type = attributes.type || \"process.task.user\";\n      super(attributes, process, AB, ABProcessTaskUserDefaults);\n\n      // listen\n   }\n\n   // return the default values for this DataField\n   static defaults() {\n      return ABProcessTaskUserDefaults;\n   }\n\n   static DiagramReplace() {\n      // taken from \"bpmn-js/lib/features/replace/ReplaceOptions\"\n      return {\n         label: \"User Task\",\n         actionName: \"replace-with-user-task\",\n         className: \"bpmn-icon-user\",\n         target: {\n            type: \"bpmn:UserTask\",\n         },\n      };\n   }\n\n   ////\n   //// Process Instance Methods\n   ////\n\n   /**\n    * do()\n    * this method actually performs the action for this task.\n    * @param {obj} instance  the instance data of the running process\n    * @return {Promise}\n    *      resolve(true/false) : true if the task is completed.\n    *                            false if task is still waiting\n    */\n   // do(instance) {\n   //     return new Promise((resolve, reject) => {\n   //         // for testing:\n   //         var myState = this.myState(instance);\n   //         myState.status = \"completed\";\n   //         this.log(instance, \"Email Sent successfully\");\n   //         resolve(true);\n   //     });\n   // }\n\n   /**\n    * initState()\n    * setup this task's initial state variables\n    * @param {obj} context  the context data of the process instance\n    * @param {obj} val  any values to override the default state\n    */\n   initState(context, val) {\n      var myDefaults = {\n         roles: [],\n         ui: null,\n      };\n\n      super.initState(context, myDefaults, val);\n   }\n};\n","// import ABApplication from \"./ABApplication\"\n// const ABApplication = require(\"./ABApplication\"); // NOTE: change to require()\nconst ABProcessElement = require(\"../../../platform/process/tasks/ABProcessElement.js\");\n\nconst ABProcessTaskUserExternalDefaults = {\n   category: null,\n   // category: {string} | null\n   // if this Element should show up on one of the popup replace menus, then\n   // specify one of the categories of elements it should be an option for.\n   // Available choices: [ \"start\", \"gateway\", \"task\", \"end\" ].\n   //\n   // if it shouldn't show up under the popup menu, then leave this null\n\n   icon: \"plus-circle\", // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\n   // icon: {string}\n   // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\n\n   instanceValues: [\"userFormID\", \"userFormResponse\"],\n   // instanceValues: {array}\n   // a list of values this element tracks as it is operating in a process.\n\n   key: \"External\",\n   // key: {string}\n   // unique key to reference this specific Task\n\n   settings: [\"who\", \"toUsers\", \"url\"],\n   // settings: {array}\n   // a list of internal setting values this Element tracks. These are the\n   // values set by the platform .propertiesStash()\n};\n\nconst settings = {\n   who: \"0\",\n   toUsers: null,\n   url: \"\",\n};\n\nmodule.exports = class ABProcessTaskUserExternalCore extends ABProcessElement {\n   constructor(attributes, process, AB) {\n      for (const key in settings)\n         attributes[key] = attributes[key] ?? settings[key];\n      super(\n         Object.assign(\n            {\n               type: \"process.task.service.external\",\n            },\n            attributes\n         ),\n         process,\n         AB,\n         ABProcessTaskUserExternalDefaults\n      );\n\n      // listen\n   }\n\n   // return the default values for this DataField\n   static defaults() {\n      return ABProcessTaskUserExternalDefaults;\n   }\n\n   static DiagramReplace() {\n      return null;\n   }\n\n   /**\n    * processDataFields()\n    * return an array of avaiable data fields that this element\n    * can provide to other ProcessElements.\n    * Different Process Elements can make data available to other\n    * process Elements.\n    * @return {array} | null\n    */\n   processDataFields() {\n      return [\n         {\n            key: `${this.id}.userFormResponse`,\n            label: `${this.label}->Response`,\n         },\n      ];\n   }\n};\n","const ABProcessElement = require(\"../../../platform/process/tasks/ABProcessElement.js\");\n\nvar ABProcessTriggerDefaults = {\n   category: \"start\",\n   // category: {string} | null\n   // if this Element should show up on one of the popup replace menus, then\n   // specify one of the categories of elements it should be an option for.\n   // Available choices: [ \"start\", \"gateway\", \"task\", \"end\" ].\n   //\n   // if it shouldn't show up under the popup menu, then leave this null\n\n   fields: [],\n   // fields: {array}\n   // a list of internal setting values this Element tracks\n\n   icon: \"key\", // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\n   // icon: {string}\n   // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\n\n   key: \"Trigger\",\n   // key: {string}\n   // unique key to reference this specific Task\n};\n\nmodule.exports = class ABProcessTriggerCore extends ABProcessElement {\n   constructor(attributes, process, AB) {\n      attributes.type = attributes.type || \"trigger\";\n      super(attributes, process, AB, ABProcessTriggerDefaults);\n\n      // listen\n   }\n\n   // return the default values for this DataField\n   static defaults() {\n      return ABProcessTriggerDefaults;\n   }\n\n   static DiagramReplace() {\n      return {\n         label: \"Signal Start Event\",\n         actionName: \"replace-with-signal-start\",\n         className: \"bpmn-icon-start-event-signal\",\n         target: {\n            type: \"bpmn:StartEvent\",\n            // type: {string} the general bpmn category\n            //      \"StartEvent\", \"Task\", \"EndEvent\", \"ExclusiveGateway\"\n            eventDefinitionType: \"bpmn:SignalEventDefinition\",\n         },\n      };\n   }\n\n   fromValues(attributes) {\n      super.fromValues(attributes);\n\n      this.triggerKey = attributes.triggerKey || \"triggerKey.??\";\n   }\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABApplication instance\n    * into the values needed for saving to the DB.\n    *\n    * Most of the instance data is stored in .json field, so be sure to\n    * update that from all the current values of our child fields.\n    *\n    * @return {json}\n    */\n   toObj() {\n      var data = super.toObj();\n\n      data.triggerKey = this.triggerKey;\n\n      return data;\n   }\n};\n","// import ABApplication from \"./ABApplication\"\n// const ABApplication = require(\"./ABApplication\"); // NOTE: change to require()\nconst ABProcessTrigger = require(\"../../../platform/process/tasks/ABProcessTrigger.js\");\n\nvar ABProcessTaskTriggerLifecycleDefaults = {\n   category: \"start\",\n   // category: {string} | null\n   // if this Element should show up on one of the popup replace menus, then\n   // specify one of the categories of elements it should be an option for.\n   // Available choices: [ \"start\", \"gateway\", \"task\", \"end\" ].\n   //\n   // if it shouldn't show up under the popup menu, then leave this null\n\n   fields: [\n      \"objectID\",\n      \"lifecycleKey\" /* , \"triggerKey\" is tracked in ABProcessTrigger */,\n   ],\n   // fields: {array}\n   // a list of internal setting values this Element tracks\n\n   icon: \"key\",\n   // icon: {string}\n   // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\n\n   key: \"TriggerLifecycle\",\n   // key: {string}\n   // unique key to reference this specific Task\n};\n\nmodule.exports = class ABProcessTriggerLifecycle extends ABProcessTrigger {\n   constructor(attributes, process, AB) {\n      attributes.type = attributes.type || \"trigger\";\n      super(attributes, process, AB, ABProcessTaskTriggerLifecycleDefaults);\n\n      // listen\n   }\n\n   // return the default values for this DataField\n   static defaults() {\n      return ABProcessTaskTriggerLifecycleDefaults;\n   }\n\n   static DiagramReplace() {\n      return {\n         label: \"Object Lifecycle Trigger\",\n         actionName: \"replace-with-signal-lifecycle-start\",\n         // type: {string} a unique key to reference this element\n         className: \"bpmn-icon-start-event-signal\",\n         target: {\n            type: \"bpmn:StartEvent\",\n            // type: {string} the general bpmn category\n            //      \"StartEvent\", \"Task\", \"EndEvent\", \"ExclusiveGateway\"\n            eventDefinitionType: \"ab:SignalLifecycle\",\n         },\n      };\n   }\n\n   fromValues(attributes) {\n      super.fromValues(attributes);\n\n      this.objectID = attributes.objectID || \"objID.??\";\n      this.lifecycleKey = attributes.lifecycleKey || \"lifecycle.key??\";\n   }\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABApplication instance\n    * into the values needed for saving to the DB.\n    *\n    * Most of the instance data is stored in .json field, so be sure to\n    * update that from all the current values of our child fields.\n    *\n    * @return {json}\n    */\n   toObj() {\n      var data = super.toObj();\n\n      data.objectID = this.objectID;\n      data.lifecycleKey = this.lifecycleKey;\n      return data;\n   }\n\n   /**\n    * processDataFields()\n    * return an array of avaiable data fields that this element\n    * can provide to other ProcessElements.\n    * Different Process Elements can make data available to other\n    * process Elements.\n    * @return {array} | null\n    */\n   processDataFields() {\n      var fields = null;\n      if (this.objectID) {\n         fields = [];\n         var object = this.AB.objectByID(this.objectID);\n         if (object) {\n            var myID = this.diagramID;\n            object.fields().forEach((field) => {\n               fields.push({\n                  key: `${myID}.${field.id}`,\n                  label: `${this.label}->${object.label}->${field.label}`,\n                  field,\n                  object,\n               });\n            });\n            fields.push({\n               key: `${myID}.uuid`,\n               label: `${this.label}->${object.label}`,\n               field: null,\n               object,\n            });\n         } else {\n            // OK, so we have an this.objectID defined, but we can't find it.\n            // that's something we need to alert:\n            var error = new Error(\n               `ABProcessTriggerLifecycleCore.processDataFields():TaskID[${this.id}]: could not find referenced object by ID [${this.objectID}]`\n            );\n            this.AB.error(error);\n         }\n      }\n      return fields;\n   }\n\n   /**\n    * processData()\n    * return the current value requested for the given data key.\n    * @param {obj} instance\n    * @return {mixed} | null\n    */\n   processData(instance, key) {\n      var parts = key.split(\".\");\n      if (parts[0] == this.diagramID) {\n         var myState = this.myState(instance);\n         if (myState[\"data\"]) {\n            var object = this.AB.objectByID(this.objectID);\n            var field = object.fields((f) => {\n               return f.id == parts[1];\n            })[0];\n            if (field) {\n               if (parts[2]) {\n                  return field[parts[2]].call(field, myState[\"data\"]);\n               } else {\n                  // instance.context.data[field.column_name];\n                  // if field is \"calculate\" or \"TextFormula\" data is not stored\n                  // in data base and we need to run format method\n                  if ([\"calculate\", \"TextFormula\"].indexOf(field.key) != -1) {\n                     return field.format(myState[\"data\"]);\n                  } else if (field.key == \"connectObject\") {\n                     return (\n                        myState[\"data\"][field.columnName] ||\n                        myState[\"data\"][field.relationName()]\n                     );\n                  } else {\n                     return myState[\"data\"][field.columnName];\n                  }\n               }\n            } else if (parts[1] == \"uuid\") {\n               return myState[\"data\"][\"uuid\"];\n            } else {\n               // parts[1] should be a field.id\n               var object = this.AB.objectByID(this.objectID);\n               var field = object.fields((f) => {\n                  return f.id == parts[1];\n               })[0];\n               if (field) {\n                  if (parts[2]) {\n                     return field[parts[2]].call(field, myState[\"data\"]);\n                  } else {\n                     // instance.context.data[field.column_name];\n                     return myState[\"data\"][field.columnName];\n                  }\n               }\n            }\n         }\n      }\n      return null;\n   }\n\n   /**\n    * processDataObjects()\n    * return an array of avaiable ABObjects that this element\n    * can provide to other ProcessElements.\n    * @return {array} | null\n    */\n   processDataObjects() {\n      var objects = null;\n      if (this.objectID) {\n         objects = [this.AB.objectByID(this.objectID)];\n      }\n      return objects;\n   }\n};\n","const ABProcessTrigger = require(\"../../../platform/process/tasks/ABProcessTrigger.js\");\n\nvar ABProcessTaskTriggerLifecycleDefaults = {\n   category: \"start\",\n   // category: {string} | null\n   // if this Element should show up on one of the popup replace menus, then\n   // specify one of the categories of elements it should be an option for.\n   // Available choices: [ \"start\", \"gateway\", \"task\", \"end\" ].\n   //\n   // if it shouldn't show up under the popup menu, then leave this null\n\n   fields: [\n      \"repeatEvery\",\n      \"repeatTime\",\n      \"repeatDaily\",\n      \"repeatWeekly\",\n      \"repeatMonthly\",\n      \"isEnabled\"\n   ],\n   // fields: {array}\n   // a list of internal setting values this Element tracks\n\n   icon: \"clock-o\", // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\n   // icon: {string}\n   // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\n\n   key: \"TimerStartEvent\",\n   // key: {string}\n   // unique key to reference this specific Task\n\n   repeatEvery: \"daily\",\n   repeatTime: \"01:00\",\n   repeatDaily: \"day\",\n   repeatWeekly: \"FRI\",\n   repeatMonthly: \"last\",\n   isEnabled: true\n};\n\nmodule.exports = class ABProcessTriggerTimer extends ABProcessTrigger {\n   constructor(attributes, process, application) {\n      attributes.type = attributes.type || \"trigger\";\n      super(\n         attributes,\n         process,\n         application,\n         ABProcessTaskTriggerLifecycleDefaults\n      );\n   }\n\n   // return the default values for this DataField\n   static defaults() {\n      return ABProcessTaskTriggerLifecycleDefaults;\n   }\n\n   static DiagramReplace() {\n      return {\n         label: \"Timer Start Event\",\n         actionName: \"replace-with-signal-timer-start\",\n         // type: {string} a unique key to reference this element\n         className: \"bpmn-icon-start-event-timer\",\n         target: {\n            type: \"bpmn:StartEvent\",\n            // type: {string} the general bpmn category\n            //      \"StartEvent\", \"Task\", \"EndEvent\", \"ExclusiveGateway\"\n            eventDefinitionType: \"ab:SignalTriggerTimer\"\n         }\n      };\n   }\n\n   fromValues(attributes) {\n      super.fromValues(attributes);\n\n      this.repeatEvery =\n         attributes.repeatEvery ||\n         ABProcessTaskTriggerLifecycleDefaults.repeatEvery;\n\n      this.repeatDaily =\n         attributes.repeatDaily ||\n         ABProcessTaskTriggerLifecycleDefaults.repeatDaily;\n\n      this.repeatWeekly =\n         attributes.repeatWeekly ||\n         ABProcessTaskTriggerLifecycleDefaults.repeatWeekly;\n\n      this.repeatMonthly =\n         attributes.repeatMonthly ||\n         ABProcessTaskTriggerLifecycleDefaults.repeatMonthly;\n\n      // Convert UTC to local time\n      if (attributes.repeatTime) {\n         let timeVals = attributes.repeatTime.split(\":\");\n         let currDate = new Date();\n         currDate.setUTCHours(timeVals[0]);\n         currDate.setUTCMinutes(timeVals[1]);\n         this.repeatTime = `${currDate.getHours()}:${currDate.getMinutes()}`;\n      } else {\n         this.repeatTime = ABProcessTaskTriggerLifecycleDefaults.repeatTime;\n      }\n\n      this.isEnabled = JSON.parse(\n         attributes.isEnabled || ABProcessTaskTriggerLifecycleDefaults.isEnabled\n      );\n   }\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABApplication instance\n    * into the values needed for saving to the DB.\n    *\n    * Most of the instance data is stored in .json field, so be sure to\n    * update that from all the current values of our child fields.\n    *\n    * @return {json}\n    */\n   toObj() {\n      var data = super.toObj();\n\n      data.repeatEvery = this.repeatEvery;\n      data.repeatDaily = this.repeatDaily;\n      data.repeatWeekly = this.repeatWeekly;\n      data.repeatMonthly = this.repeatMonthly;\n\n      // Convert local time to UTC\n      data.repeatTime = this.repeatTime;\n      if (data.repeatTime && data.repeatTime instanceof Date) {\n         data.repeatTime = `${data.repeatTime.getUTCHours()}:${data.repeatTime.getMinutes()}`;\n      }\n\n      data.isEnabled = this.isEnabled;\n\n      return data;\n   }\n\n   getCronExpression() {\n      let timeVals = this.repeatTime.split(\":\");\n      let second = \"*\";\n      let minute = timeVals[1];\n      let hour = timeVals[0];\n      let day;\n      let month;\n      let dayWeek;\n      let year = \"*\";\n\n      switch (this.repeatEvery) {\n         case \"daily\":\n            day = \"*\";\n            month = \"*\";\n            dayWeek = this.repeatDaily == \"weekday\" ? \"1-5\" : \"*\";\n            break;\n         case \"weekly\":\n            day = \"*\";\n            month = \"*\";\n            dayWeek = this.repeatWeekly;\n            break;\n         case \"monthly\":\n            day = this.repeatMonthly;\n            month = \"*\";\n            dayWeek = \"*\";\n            break;\n      }\n\n      return `${second} ${minute} ${hour} ${day} ${month} ${dayWeek} ${year}`;\n   }\n};\n\n","/*\n * ABQL\n *\n * An ABQL defines the base class for our AB Query Language Objects.\n * These classes share a common way to\n *   - parse input strings for commands\n *\n *\n */\n\nclass ABQLCore {\n   constructor(attributes, parameterDefinitions, prevOP, task, AB) {\n      // manage the incoming Parameter Definitions\n      if (!Array.isArray(parameterDefinitions)) {\n         parameterDefinitions = [parameterDefinitions];\n      }\n      this.parameterDefinitions = parameterDefinitions;\n\n      this.object = prevOP ? prevOP.object : null;\n      // {ABObject}\n      // The current {ABObject} the current Query Language Operation is associated\n      // with.\n\n      // if the previous Operation defined an .objectOut then our .object is THAT\n      // one.\n      if (prevOP && prevOP.objectOut) {\n         this.object = prevOP.objectOut;\n      }\n\n      this.prevOP = prevOP;\n      this.task = task;\n      // {ABProcessTaskxxx}\n      // This is running under a specific ABProcessTaskServiceQuery.  When\n      // searching for data from the Process, we must go through this.task\n      // to do so.\n\n      this.AB = AB;\n\n      this.next = null;\n\n      this.fromAttributes(attributes);\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   initObject(attributes) {}\n\n   fromAttributes(attributes) {\n      /*\n        {\n            id: uuid(),\n            name: 'name',\n            type: 'xxxxx',\n            json: \"{json}\"\n        }\n        */\n\n      // super.fromValues(attributes);\n\n      // this.entryComplete = attributes.entryComplete || false;\n      this.params = attributes.params || {};\n      // {hash}\n      // The configuration values entered by the AppBuilder UI for this\n      // operation.\n\n      this.objectID = attributes.objectID || null;\n      // be sure to do a hard lookup if an objectID was saved:\n      if (this.objectID) {\n         this.object = this.objectLookup(this.objectID);\n      }\n\n      this.initObject(attributes);\n\n      if (this.objectID && !this.object) {\n         // at least dump a warning here:\n         this.AB.notify.developer(\n            new Error(\n               `ABQLCore.fromAttributes(): unable to initialize ABObject [${this.objectID}]`\n            ),\n            {\n               attributes,\n               objectID: this.objectID,\n            }\n         );\n      }\n\n      if (attributes.next) {\n         var nextOP = null;\n         (this.NextQLOps || this.constructor.NextQLOps).forEach((OP) => {\n            if (OP.key == attributes.next.key) {\n               nextOP = OP;\n            }\n         });\n         if (nextOP) {\n            // exact match, so add next:\n            var qlOP = new nextOP(attributes.next, this, this.task, this.AB);\n            this.next = qlOP;\n         }\n      }\n   }\n\n   /**\n    * @method objectLookup()\n    * return a matching {ABObject} that is represented by the given id.\n    * NOTE: we will try to match on: our initial .objectID first, then\n    * the given objID.\n    * NOTE: this will match an object.id as well as object.label\n    * @param {string} objID\n    */\n   objectLookup(objID) {\n      return this.AB.objects((o) => {\n         var quotedLabel = `\"${o.label}\"`;\n         return (\n            // o.id == this.objectID ||\n            o.id == objID || quotedLabel.indexOf(objID) == 0\n         );\n      })[0];\n   }\n\n   /**\n    * @method availableProcessDataFieldsHash()\n    * return a { \"field.key\" => {processFieldDef} } hash of the currently\n    * available fields in the process.\n    * @return {obj}\n    */\n   availableProcessDataFieldsHash() {\n      var availableProcessDataFields =\n         this.task.process.processDataFields(this.task) || [];\n      var hashFieldIDs = {};\n      availableProcessDataFields.forEach((f) => {\n         if (f.field) {\n            hashFieldIDs[f.field.id] = f;\n         } else {\n            hashFieldIDs[f.key] = f;\n         }\n      });\n      return hashFieldIDs;\n   }\n\n   /*\n    * @method paramChanged()\n    * respond to an update to the given parameter.\n    * NOTE: the value will ALREADY be saved in this.params[pDef.name].\n    * @param {obj} pDef\n    *        the this.parameterDefinition entry of the parameter that was\n    *        changed.\n    */\n   paramChanged(pDef) {}\n\n   /**\n    * @method toObj()\n    * properly compile the current state of this ABQL instance\n    * into the values needed for saving to the DB.\n    * @return {json}\n    */\n   toObj() {\n      var obj = {\n         key: this.constructor.key,\n         // entryComplete: this.entryComplete,\n         params: this.params,\n         // currQuery: this.currQuery,\n         // queryValid: this.queryValid,\n         objectID: this.object ? this.object.id : null,\n      };\n\n      if (this.next) {\n         obj.next = this.next.toObj();\n      }\n\n      return obj;\n   }\n}\n\nmodule.exports = ABQLCore;\n","/*\n * ABQLFindCore\n *\n * An ABQLFind depends on a BASE QL object (Object, Datacollection, Query)\n * and can perform a DB query based upon that BASE object.\n *\n */\n\nconst ABQL = require(\"../../platform/ql/ABQL.js\");\nconst NextQLOps = require(\"./ABQLSet.js\");\n// {array} of {ABQLxxx} options\n// this is an array of what possible next Operations can come after an\n// ABQLFind task is complete.  In this case the {ABQLSet} operations come\n// next.  {ABQLSet} operations work on a Set|{Array} or data results.\n\nvar ParameterDefinitions = [\n   {\n      type: \"objectConditions\",\n      name: \"cond\",\n   },\n];\n\nclass ABQLFindCore extends ABQL {\n   constructor(attributes, prevOP, task, AB) {\n      super(attributes, ParameterDefinitions, prevOP, task, AB);\n   }\n\n   ///\n   /// Instance Methods\n   ///\n}\n\nABQLFindCore.key = \"find\";\nABQLFindCore.label = \"find\";\nABQLFindCore.NextQLOps = NextQLOps;\n\nmodule.exports = ABQLFindCore;\n","/*\n * ABQLManagerCore\n *\n * An interface for managing the different ABQL Operations available in our\n * AppBuilder.\n *\n */\n\nconst QLObject = require(\"../../platform/ql/ABQLRootObject.js\");\nvar QLOps = [QLObject];\n\nvar ABQLManagerCore = {\n   /**\n    * @method fromAttributes()\n    * return an {ABQL} object that represents the given attributes that\n    * were saved from the previous .toObj()\n    * @param {object} attributes\n    *\t\t  the values returned from the previous .toObj() call\n    * @param {ABProcessTask***} task\n    *\t\t  the current ABProcessTaskServiceQuery that contains this QL\n    * @param {ABFactory} AB\n    *\t\t  the current ABFactory we are operating under.\n    * @return {ABQL} | null\n    */\n   fromAttributes: function (attributes, task, AB) {\n      if (!attributes) {\n         return null;\n      }\n      var matchingOPs = [];\n      ABQLManagerCore.QLOps.forEach((Op) => {\n         if (Op.key == attributes.key) {\n            matchingOPs.push(Op);\n         }\n      });\n      if (matchingOPs.length == 1) {\n         // let this Operation initialize and return the last OP\n         // in the chain\n         var qlOP = new matchingOPs[0](attributes, task, AB);\n         return qlOP;\n      } else {\n         return null;\n      }\n   },\n\n   /**\n    * @array QLOps\n    * An array of the root QL Operations.\n    */\n   QLOps: QLOps,\n};\nmodule.exports = ABQLManagerCore;\n","/*\n * ABQLRootObjectCore\n *\n * An ABQL defines a Query Language Operation. A QL Operation\n * is intended to be evaluated at run time and return a value that can be\n * assigned to form value or an object.\n *\n *\n */\n\nconst ABQL = require(\"../../platform/ql/ABQL.js\");\n\n// Define the Operations that can be performed off of a RootObject.\n// Each Root Object might have a different set of Operations, so we\n// define them here.\nconst QLFind = require(\"../../platform/ql/ABQLFind.js\");\nvar NextQLOps = [QLFind];\n\nvar ParameterDefinitions = [\n   {\n      type: \"objectName\",\n      name: \"name\",\n   },\n];\n\nclass ABQLObjectCore extends ABQL {\n   constructor(attributes, task, AB) {\n      // NOTE: keep this so we can insert the prevOp == null\n      super(attributes, ParameterDefinitions, null, task, AB);\n   }\n\n   ///\n   /// Instance Methods\n   ///\n   initObject(attributes) {\n      if (!this.object && this.params) {\n         var objNameDef = this.parameterDefinitions.find((pDef) => {\n            return pDef.type == \"objectName\";\n         });\n         if (objNameDef) {\n            this.objectID = this.params[objNameDef.name];\n            this.object = this.objectLookup(this.objectID);\n         }\n      }\n   }\n\n   toObj() {\n      var obj = super.toObj();\n\n      // if we don't have an objectID, but we have an objectName parameter\n      // definition then save that as our objectID\n      if (!obj.objectID && this.params) {\n         var objNameDef = this.parameterDefinitions.find((pDef) => {\n            return pDef.type == \"objectName\";\n         });\n         if (objNameDef) {\n            obj.objectID = this.params[objNameDef.name];\n         }\n      }\n      return obj;\n   }\n}\nABQLObjectCore.key = \"object\";\nABQLObjectCore.label = \"object\";\nABQLObjectCore.NextQLOps = NextQLOps;\n\nmodule.exports = ABQLObjectCore;\n","/*\n * ABQLRow\n *\n * Defines all the QL operations that can be performed on a Row of data. This is a\n * Single row/instance of an object.\n *\n */\n\nconst QLUpdate = require(\"../../platform/ql/ABQLRowUpdate.js\");\nconst QLSave = require(\"../../platform/ql/ABQLRowSave\");\nconst QLPluck = require(\"../../platform/ql/ABQLRowPluck\");\n\nmodule.exports = [QLUpdate, QLSave, QLPluck];\n","/*\n/*\n * ABQLRowPluckCore\n *\n * An ABQLRowPluckCore can process a value of data and puck out a specified\n * field to then make an object of values that only contain that field.\n *\n */\n\nconst ABQLValue = require(\"./ABQLValue.js\");\n// const ABQLSet = require(\"./ABQLSet.js\");\nconst ABQLSetPluck = require(\"../../platform/ql/ABQLSetPluck.js\");\n\nclass ABQLRowPluckCore extends ABQLSetPluck {\n   // Dynamic NextQLOps\n   get NextQLOps() {\n      let nextQLOps = [];\n      let field = this.field;\n      if (field == null) {\n         field = this.object.fieldByID(this.fieldID);\n      }\n\n      // Update .NextQLOps WARN: update to static it affects to every ABQLRowPluck instances.\n      if (field) {\n         // M:1 M:N connect field, then set ABQLSet to next steps\n         if (field.key == \"connectObject\") {\n            if (field.settings.linkType == \"many\") {\n               // NOTE: Could not require(\"./ABQLSet.js\") on the top. It returns an empty object. Why ><\n               const ABQLSet = require(\"./ABQLSet.js\");\n               nextQLOps = ABQLSet;\n            } else {\n               // return ABQLRow.js\n               nextQLOps = this.prevOP.constructor.NextQLOps;\n            }\n         }\n         // Normal field\n         else {\n            nextQLOps = ABQLValue;\n         }\n      } else if (this.fieldID == \"_PK\") {\n         nextQLOps = ABQLValue;\n      }\n\n      return nextQLOps;\n   }\n}\n\nABQLRowPluckCore.key = \"row_pluck\";\nABQLRowPluckCore.label = \"pluck\";\nABQLRowPluckCore.NextQLOps = []; // Static NextQLOps\n\nmodule.exports = ABQLRowPluckCore;\n","/*\n * ABQLRowUpdateCore\n *\n * An ABQLRow Update allows you to update the values on the current\n * Row of data.\n *\n */\n\nconst ABQL = require(\"../../platform/ql/ABQL.js\");\n// const ABQLRow = require(\"./ABQLRow.js\");\n\nvar ParameterDefinitions = [\n   {\n      type: \"objectValues\",\n      name: \"values\",\n   },\n];\n\nclass ABQLRowUpdateCore extends ABQL {\n   constructor(attributes, prevOP, task, AB) {\n      super(attributes, ParameterDefinitions, prevOP, task, AB);\n\n      // #Hack! : when an Operation provides the same .NextQlOps that it\n      // was defined in, we can't require it again ==> circular dependency.\n      // so we manually set it here from the operation that created us:\n      this.constructor.NextQLOps = prevOP.constructor.NextQLOps;\n   }\n\n   ///\n   /// Instance Methods\n   ///\n}\n\nABQLRowUpdateCore.key = \"update\";\nABQLRowUpdateCore.label = \"update record\";\nABQLRowUpdateCore.NextQLOps = [];\n// NOTE: .NextQLOps => see the #Hack in the constructor\n\nmodule.exports = ABQLRowUpdateCore;\n","/*\n * ABQLSet\n *\n * Here we define the group of operations that can be performed on a SET of data.\n * A SET is an array of objects/row data.\n *\n */\n\nmodule.exports = [\n   require(\"../../platform/ql/ABQLSetFirst.js\"),\n   require(\"../../platform/ql/ABQLSetPluck.js\"),\n   require(\"../../platform/ql/ABQLSetSave.js\")\n];\n","/*\n/*\n * ABQLSetFirstCore\n *\n * An ABQLFind depends on a BASE QL object (Object, Datacollection, Query)\n * and can perform a DB query based upon that BASE object.\n *\n */\n\nconst ABQL = require(\"../../platform/ql/ABQL.js\");\nconst ABQLRow = require(\"./ABQLRow.js\");\n// {array} of {ABQLxxx} options\n// this is an array of what possible next Operations can come after an\n// ABQLSetFirst task is complete.  In this case the {ABQLRow} operations come\n// next.  {ABQLRow} operations work on a single row of data.\n\nclass ABQLSetFirstCore extends ABQL {\n   constructor(attributes, prevOP, task, AB) {\n      super(attributes, [], prevOP, task, AB);\n   }\n\n   ///\n   /// Instance Methods\n   ///\n}\n\nABQLSetFirstCore.key = \"first\";\nABQLSetFirstCore.label = \"first\";\nABQLSetFirstCore.NextQLOps = ABQLRow;\n\nmodule.exports = ABQLSetFirstCore;\n","/*\n/*\n * ABQLSetPluckCore\n *\n * An ABQLSetPluck can process a set (array) of data and puck out a specified\n * field to then make an array of values that only contain that field.\n *\n */\n\nconst ABQL = require(\"../../platform/ql/ABQL.js\");\n// const ABQLSet = require(\"./ABQLSet.js\");\n\nvar ParameterDefinitions = [\n   {\n      type: \"objectFields\",\n      name: \"field\",\n   },\n];\n\nclass ABQLSetPluckCore extends ABQL {\n   constructor(attributes, prevOP, task, AB) {\n      super(attributes, ParameterDefinitions, prevOP, task, AB);\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   fromAttributes(attributes) {\n      // #Hack! : when an Operation provides the same .NextQlOps that it\n      // was defined in, we can't require it again ==> circular dependency.\n      // so we manually set it here from the operation that created us:\n      this.constructor.NextQLOps = this.prevOP.constructor.NextQLOps;\n\n      // we need to gather our .field and .objectOut before we\n      // allow our base class to continue forward:\n\n      this.fieldID = attributes.fieldID;\n      this.field = this.object?.fieldByID(this.fieldID);\n\n      if (attributes.objectOutID) {\n         this.objectOut = this.objectLookup(attributes.objectOutID);\n      }\n\n      super.fromAttributes(attributes);\n   }\n\n   toObj() {\n      var obj = super.toObj();\n\n      if (this.fieldID) {\n         obj.fieldID = this.fieldID;\n         if (this.objectOut) {\n            obj.objectOutID = this.objectOut.id;\n         }\n      } else {\n         obj.fieldID = this.params.field || null;\n         var field = this.object.fieldByID(obj.fieldID);\n\n         if (field?.isConnection) {\n            obj.objectOutID = field.datasourceLink.id;\n         }\n      }\n      return obj;\n   }\n}\n\nABQLSetPluckCore.key = \"set_pluck\";\nABQLSetPluckCore.label = \"pluck\";\nABQLSetPluckCore.NextQLOps = [];\n\nmodule.exports = ABQLSetPluckCore;\n","/*\n/*\n * ABQLSetSaveCore\n *\n * An ABQLSetSave can store the current Data set into the Process Task it is\n * in, so that this data can be made available to other Process Tasks.\n *\n */\n\nconst ABQL = require(\"../../platform/ql/ABQL.js\");\n\nvar ParameterDefinitions = [\n   {\n      type: \"taskParam\",\n      name: \"task_param\"\n   }\n];\n\nclass ABQLSetSaveCore extends ABQL {\n   constructor(attributes, prevOP, task, AB) {\n      super(attributes, ParameterDefinitions, prevOP, task, AB);\n\n      // TODO: register with the task that we can provide data.\n      if (this.taskParam) {\n         task.registerDatasource(this);\n         this.registered = true;\n      }\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   fromAttributes(attributes) {\n      // #Hack! : when an Operation provides the same .NextQlOps that it\n      // was defined in, we can't require it again ==> circular dependency.\n      // so we manually set it here from the operation that created us:\n      this.constructor.NextQLOps = this.prevOP.constructor.NextQLOps;\n\n      super.fromAttributes(attributes);\n      this.taskParam = attributes.taskParam || this.params.task_param;\n   }\n\n   toObj() {\n      var obj = super.toObj();\n\n      obj.taskParam = this.taskParam || this.params.task_param;\n\n      return obj;\n   }\n\n   processDataField(id, label) {\n      // we have to report back on:\n      // key:  id.taskParam\n      // label: label->taskParam\n      // object: ABObject\n      // field: ABField\n      // set : {bool}\n\n      var field = null;\n      // {ABField}\n      // if the value being stored is NOT a connectObject, then it is\n      // a particular field in the previous object.\n\n      // if we are saving a specific field of an Object, pass that\n      // ABField along:\n      if (\n         this.prevOP?.field?.key != \"connectObject\"\n      ) {\n         field = this.prevOP.field;\n      }\n\n      return {\n         key: `${id}.${this.taskParam || this.params.task_param}`,\n         label: `${label}->${this.taskParam || this.params.task_param}`,\n         field: field,\n         object: this.object,\n         set: true\n      };\n   }\n}\n\nABQLSetSaveCore.key = \"set_save\";\nABQLSetSaveCore.label = \"save\";\nABQLSetSaveCore.NextQLOps = [];\n// NOTE: currently, this is an ending step. but it doesn't have to be...\n\nmodule.exports = ABQLSetSaveCore;\n","/*\n * ABQLValue\n *\n * Here we define the group of operations that can be performed on a VALUE.\n * A VALUE is an object or array.\n *\n */\n\nmodule.exports = [require(\"../../platform/ql/ABQLValueSave.js\")];\n","/*\n/*\n * ABQLRowValueCore\n *\n * An ABQLRowSave can store the current Data set into the Process Task it is\n * in, so that this data can be made available to other Process Tasks.\n *\n */\n\nconst ABQLSetSave = require(\"../../platform/ql/ABQLSetSave.js\");\n\nclass ABQLValueSaveCore extends ABQLSetSave {\n   ///\n   /// Instance Methods\n   ///\n\n   fromAttributes(attributes) {\n      super.fromAttributes(attributes);\n\n      this.constructor.NextQLOps =\n         this.prevOP.NextQLOps || this.prevOP.constructor.NextQLOps;\n   }\n}\n\nABQLValueSaveCore.key = \"value_save\";\nABQLValueSaveCore.label = \"save\";\nABQLValueSaveCore.NextQLOps = [];\n// NOTE: currently, this is an ending step. but it doesn't have to be...\n\nmodule.exports = ABQLValueSaveCore;\n\n","const ABViewWidget = require(\"../../platform/views/ABViewWidget\");\n\nconst ABViewCSVExporterDefaults = {\n   key: \"csvExporter\", // unique key identifier for this ABViewForm\n   icon: \"download\", // icon reference: (without 'fa-' )\n   labelKey: \"CSV Exporter\", // {string} the multilingual label key for the class label\n};\n\nconst ABViewCSVExporterPropertyComponentDefaults = {\n   dataviewID: null,\n   where: null,\n   buttonLabel: \"Export CSV\",\n   filename: \"exportCSV\",\n   hasHeader: true,\n   width: 150,\n};\n\nmodule.exports = class ABViewCSVExporterCore extends ABViewWidget {\n   constructor(values, application, parent, defaultValues) {\n      super(\n         values,\n         application,\n         parent,\n         defaultValues || ABViewCSVExporterDefaults\n      );\n   }\n\n   static common() {\n      return ABViewCSVExporterDefaults;\n   }\n\n   static defaultValues() {\n      return ABViewCSVExporterPropertyComponentDefaults;\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      super.fromValues(values);\n\n      // convert to boolean\n      if (typeof values.settings.hasHeader == \"string\")\n         this.settings.hasHeader = JSON.parse(values.settings.hasHeader);\n\n      if (this.settings.hasHeader == null)\n         this.settings.hasHeader =\n            ABViewCSVExporterPropertyComponentDefaults.hasHeader;\n\n      // convert from \"0\" => 0\n      this.settings.width = parseInt(\n         values.settings.width ||\n            ABViewCSVExporterPropertyComponentDefaults.width\n      );\n   }\n};\n","const ABViewWidget = require(\"../../platform/views/ABViewWidget\");\n\nconst ABRecordRule = require(\"../../rules/ABViewRuleListFormRecordRules\");\n\nconst ABViewCSVImporterDefaults = {\n   key: \"csvImporter\",\n   // {string}\n   // unique key identifier for this ABViewForm\n\n   icon: \"upload\",\n   // {string}\n   // font-awesome icon reference: (without 'fa-' )\n\n   labelKey: \"CSV Importer\",\n   // {string}\n   // the multilingual label key for the class label\n   // NOTE: will be used as L(labelKey)\n};\n\nconst ABViewCSVImporterPropertyComponentDefaults = {\n   dataviewID: null,\n   // {uuid}\n   // The ABDataCollection.uuid that we are using to store the data.\n   // NOTE: we actually use the DC to get the ABObject it is connected to.\n\n   availableFieldIds: [],\n   //{array}\n   // A list of ABField.ids that are allowed to be imported using this widget.\n\n   buttonLabel: \"Upload CSV\",\n   // {string}\n   // The Label(key) to display on the initial button\n\n   width: 0,\n   // {integer}\n   // Width of the Popup.\n\n   recordRules: [],\n   // {array}  [ {RecordRule}, ... ]\n   // A list of ABViewRuleListFormRecordRules that should be performed upon\n   // each row of data imported.\n   // The Array should look like:\n   // [{\n   //    action: {string},\n   //    when: [\n   //       {\n   //          fieldId: {UUID},\n   //          comparer: {string},\n   //          value: {string}\n   //       }\n   //    ],\n   //    values: [\n   //       {\n   //          fieldId: {UUID},\n   //          value: {object}\n   //       }\n   //    ]\n   // }]\n};\n\nmodule.exports = class ABViewCSVImporterCore extends ABViewWidget {\n   constructor(values, application, parent, defaultValues) {\n      super(\n         values,\n         application,\n         parent,\n         defaultValues || ABViewCSVImporterDefaults\n      );\n   }\n\n   /**\n    * @method common()\n    * Provides the default settings for an instance of an ABViewCSVImporter\n    * @return {json}\n    */\n   static common() {\n      return ABViewCSVImporterDefaults;\n   }\n\n   /**\n    * @method defaultValues()\n    * Provides the default settings for an instance of an ABViewCSVImporter\n    * Component that is displayed on the UI.\n    * @return {json}\n    */\n   static defaultValues() {\n      return ABViewCSVImporterPropertyComponentDefaults;\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      super.fromValues(values);\n\n      // convert from \"0\" => 0\n      this.settings.width = parseInt(\n         this.settings.width || ABViewCSVImporterPropertyComponentDefaults.width\n      );\n   }\n\n   get RecordRule() {\n      let object = this.datacollection?.datasource;\n      if (!object) return;\n\n      if (this._recordRule == null) {\n         this._recordRule = new ABRecordRule();\n      }\n\n      this._recordRule.formLoad(this);\n      this._recordRule.fromSettings(this.settings.recordRules);\n      this._recordRule.objectLoad(object);\n\n      return this._recordRule;\n   }\n\n   doRecordRulesPre(rowDatas) {\n      if (rowDatas && !Array.isArray(rowDatas)) {\n         rowDatas = [rowDatas];\n      }\n\n      rowDatas.forEach((row) => {\n         this.RecordRule?.processPre({ data: row.data || row, form: this });\n      });\n   }\n\n   doRecordRules(rowDatas) {\n      if (rowDatas && !Array.isArray(rowDatas)) {\n         rowDatas = [rowDatas];\n      }\n\n      if (!this.RecordRule) return Promise.resolve();\n\n      let tasks = [];\n\n      rowDatas.forEach((row) => {\n         tasks.push(\n            this.RecordRule.process({ data: row.data || row, form: this })\n         );\n      });\n\n      return Promise.all(tasks);\n   }\n};\n","const ABViewWidget = require(\"../../platform/views/ABViewWidget\");\n\nconst ABViewCarouselPropertyComponentDefaults = {\n   dataviewID: null, // uuid of ABDatacollection\n   field: null, // uuid\n\n   width: 460,\n   height: 275,\n   showLabel: true,\n   hideItem: false,\n   hideButton: false,\n   navigationType: \"corner\", // \"corner\" || \"side\"\n   filterByCursor: false,\n\n   detailsPage: null, // uuid\n   detailsTab: null, // uuid\n   editPage: null, // uuid\n   editTab: null, // uuid\n};\n\nconst ABViewDefaults = {\n   key: \"carousel\", // {string} unique key for this view\n   icon: \"clone\", // {string} fa-[icon] reference for this view\n   labelKey: \"Carousel\", // {string} the multilingual label key for the class label\n};\n\nmodule.exports = class ABViewCarouselCore extends ABViewWidget {\n   constructor(values, application, parent, defaultValues) {\n      super(values, application, parent, defaultValues || ABViewDefaults);\n   }\n\n   static common() {\n      return ABViewDefaults;\n   }\n\n   static defaultValues() {\n      return ABViewCarouselPropertyComponentDefaults;\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      super.fromValues(values);\n\n      // convert from \"0\" => 0\n      if (typeof this.settings.width != \"undefined\") {\n         this.settings.width = parseInt(this.settings.width);\n      } else {\n         this.settings.width = ABViewCarouselPropertyComponentDefaults.width;\n      }\n      if (typeof this.settings.height != \"undefined\") {\n         this.settings.height = parseInt(this.settings.height);\n      } else {\n         this.settings.height = ABViewCarouselPropertyComponentDefaults.height;\n      }\n      try {\n         this.settings.showLabel = JSON.parse(this.settings.showLabel);\n      } catch (e) {\n         this.settings.showLabel =\n            ABViewCarouselPropertyComponentDefaults.showLabel;\n      }\n      try {\n         this.settings.hideItem = JSON.parse(this.settings.hideItem);\n      } catch (e) {\n         this.settings.hideItem =\n            ABViewCarouselPropertyComponentDefaults.hideItem;\n      }\n      try {\n         this.settings.hideButton = JSON.parse(this.settings.hideButton);\n      } catch (e) {\n         this.settings.hideButton =\n            ABViewCarouselPropertyComponentDefaults.hideButton;\n      }\n      this.settings.navigationType =\n         this.settings.navigationType ||\n         ABViewCarouselPropertyComponentDefaults.navigationType;\n      try {\n         this.settings.filterByCursor = JSON.parse(\n            this.settings.filterByCursor\n         );\n      } catch (e) {\n         this.settings.filterByCursor =\n            ABViewCarouselPropertyComponentDefaults.filterByCursor;\n      }\n   }\n\n   /**\n    * @method componentList\n    * return the list of components available on this view to display in the editor.\n    */\n   componentList() {\n      return [];\n   }\n\n   get imageField() {\n      let dc = this.datacollection;\n      if (!dc) return null;\n\n      let obj = dc.datasource;\n      if (!obj) return null;\n\n      return obj.fields((f) => f.id == this.settings.field)[0];\n   }\n};\n","const ABViewChartComponent = require(\"../../platform/views/ABViewChartComponent\");\n\nconst ABViewChartAreaPropertyComponentDefaults = {\n   areaType: \"area\",\n   isLegend: true,\n   // chartWidth: 600,\n   chartHeight: 0,\n   labelFontSize: 12,\n   stepValue: 20,\n   maxValue: 100,\n};\n\nconst ABViewDefaults = {\n   key: \"area\", // {string} unique key for this view\n   icon: \"area-chart\", // {string} fa-[icon] reference for this view\n   labelKey: \"ab.components.chart.area\", // {string} the multilingual label key for the class label\n};\n\nmodule.exports = class ABViewChartAreaCore extends ABViewChartComponent {\n   constructor(values, application, parent, defaultValues) {\n      super(values, application, parent, defaultValues || ABViewDefaults);\n   }\n\n   static common() {\n      return ABViewDefaults;\n   }\n\n   static defaultValues() {\n      return ABViewChartAreaPropertyComponentDefaults;\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      super.fromValues(values);\n\n      this.settings.isLegend = JSON.parse(\n         this.settings.isLegend ||\n            ABViewChartAreaPropertyComponentDefaults.isLegend\n      );\n\n      // this.settings.chartWidth = parseInt(this.settings.chartWidth || ABViewChartAreaPropertyComponentDefaults.chartWidth);\n      this.settings.chartHeight = parseInt(\n         this.settings.chartHeight ||\n            ABViewChartAreaPropertyComponentDefaults.chartHeight\n      );\n\n      this.settings.labelFontSize = parseInt(\n         this.settings.labelFontSize ||\n            ABViewChartAreaPropertyComponentDefaults.labelFontSize\n      );\n      this.settings.stepValue = parseInt(\n         this.settings.stepValue ||\n            ABViewChartAreaPropertyComponentDefaults.stepValue\n      );\n      this.settings.maxValue = parseInt(\n         this.settings.maxValue ||\n            ABViewChartAreaPropertyComponentDefaults.maxValue\n      );\n\n      this.translate(this, this, [\"areaLabel\"]);\n   }\n\n   /**\n    * @method componentList\n    * return the list of components available on this view to display in the editor.\n    */\n   componentList() {\n      return [];\n   }\n};\n","const ABViewChartComponent = require(\"../../platform/views/ABViewChartComponent\");\n\nconst ABViewChartBarPropertyComponentDefaults = {\n   barType: \"bar\",\n   barPreset: \"column\",\n   isLegend: true,\n   // chartWidth: 600,\n   height: 200,\n   labelFontSize: 12,\n   stepValue: 20,\n   maxValue: 100,\n};\n\nconst ABViewDefaults = {\n   key: \"bar\", // {string} unique key for this view\n   icon: \"bar-chart\", // {string} fa-[icon] reference for this view\n   labelKey: \"ab.components.chart.bar\", // {string} the multilingual label key for the class label\n};\n\nmodule.exports = class ABViewChartBarCore extends ABViewChartComponent {\n   constructor(values, application, parent, defaultValues) {\n      super(values, application, parent, defaultValues || ABViewDefaults);\n   }\n\n   static common() {\n      return ABViewDefaults;\n   }\n\n   static defaultValues() {\n      return ABViewChartBarPropertyComponentDefaults;\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      super.fromValues(values);\n\n      this.settings.isLegend = JSON.parse(\n         this.settings.isLegend ||\n            ABViewChartBarPropertyComponentDefaults.isLegend\n      );\n\n      // this.settings.chartWidth = parseInt(this.settings.chartWidth || ABViewChartBarPropertyComponentDefaults.chartWidth);\n      this.settings.height = parseInt(\n         this.settings.height || ABViewChartBarPropertyComponentDefaults.height\n      );\n\n      this.settings.labelFontSize = parseInt(\n         this.settings.labelFontSize ||\n            ABViewChartBarPropertyComponentDefaults.labelFontSize\n      );\n      this.settings.stepValue = parseInt(\n         this.settings.stepValue ||\n            ABViewChartBarPropertyComponentDefaults.stepValue\n      );\n      this.settings.maxValue = parseInt(\n         this.settings.maxValue ||\n            ABViewChartBarPropertyComponentDefaults.maxValue\n      );\n\n      this.translate(this, this, [\"barLabel\"]);\n   }\n\n   /**\n    * @method componentList\n    * return the list of components available on this view to display in the editor.\n    */\n   componentList() {\n      return [];\n   }\n};\n","const ABViewContainer = require(\"../../platform/views/ABViewContainer\");\n\nconst ABViewChartPropertyComponentDefaults = {\n   dataviewID: null,\n   columnValue: null,\n   columnLabel: null,\n   columnValue2: null,\n   isPercentage: true,\n   showLabel: true,\n   labelPosition: \"left\",\n   labelWidth: 120,\n   height: 200,\n   multipleSeries: false,\n};\n\nconst ABViewChartDefaults = {\n   key: \"chart\", // {string} unique key for this view\n   icon: \"bar-chart\", // {string} fa-[icon] reference for this view\n   labelKey: \"Chart\", // {string} the multilingual label key for the class label\n};\n\nmodule.exports = class ABViewChartCore extends ABViewContainer {\n   constructor(values, application, parent, defaultValues) {\n      super(values, application, parent, defaultValues || ABViewChartDefaults);\n   }\n\n   static common() {\n      return ABViewChartDefaults;\n   }\n\n   static defaultValues() {\n      return ABViewChartPropertyComponentDefaults;\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      super.fromValues(values);\n\n      this.settings.isPercentage = JSON.parse(\n         this.settings.isPercentage ||\n            ABViewChartPropertyComponentDefaults.isPercentage\n      );\n\n      this.settings.labelPosition =\n         this.settings.labelPosition ||\n         ABViewChartPropertyComponentDefaults.labelPosition;\n\n      // convert from \"0\" => true/false\n      this.settings.showLabel = JSON.parse(\n         this.settings.showLabel != null\n            ? this.settings.showLabel\n            : ABViewChartPropertyComponentDefaults.showLabel\n      );\n      this.settings.multipleSeries = JSON.parse(\n         this.settings.multipleSeries != null\n            ? this.settings.multipleSeries\n            : ABViewChartPropertyComponentDefaults.multipleSeries\n      );\n\n      // convert from \"0\" => 0\n      this.settings.labelWidth = parseInt(\n         this.settings.labelWidth ||\n            ABViewChartPropertyComponentDefaults.labelWidth\n      );\n      this.settings.height = parseInt(\n         this.settings.height || ABViewChartPropertyComponentDefaults.height\n      );\n\n      this.translate(this, this, [\"chartLabel\"]);\n   }\n\n   /**\n    * @method componentList\n    * return the list of components available on this view to display in the editor.\n    */\n   componentList() {\n      var viewsToAllow = [\"label\", \"pie\", \"bar\", \"line\", \"area\"],\n         allComponents = this.application.viewAll(); // ABViewManager.allViews();\n\n      var ret = allComponents.filter((c) => {\n         return viewsToAllow.indexOf(c.common().key) > -1;\n      });\n      return ret;\n   }\n\n   labelField() {\n      var dc = this.datacollection;\n      if (!dc) return null;\n\n      var obj = dc.datasource;\n      if (!obj) return null;\n\n      return obj.fields((f) => f.id == this.settings.columnLabel)[0];\n   }\n\n   valueField() {\n      var dc = this.datacollection;\n      if (!dc) return null;\n\n      var obj = dc.datasource;\n      if (!obj) return null;\n\n      return obj.fields((f) => f.id == this.settings.columnValue)[0];\n   }\n\n   valueField2() {\n      var dc = this.datacollection;\n      if (!dc) return null;\n\n      var obj = dc.datasource;\n      if (!obj) return null;\n\n      return obj.fields((f) => f.id == this.settings.columnValue2)[0];\n   }\n};\n","const ABViewChartComponent = require(\"../../platform/views/ABViewChartComponent\");\n\nconst ABViewChartLinePropertyComponentDefaults = {\n   lineType: \"line\",\n   linePreset: \"plot\",\n   isLegend: true,\n   // chartWidth: 600,\n   chartHeight: 200,\n   labelFontSize: 12,\n   stepValue: 20,\n   maxValue: 100,\n};\n\nconst ABViewDefaults = {\n   key: \"line\", // {string} unique key for this view\n   icon: \"line-chart\", // {string} fa-[icon] reference for this view\n   labelKey: \"ab.components.chart.line\", // {string} the multilingual label key for the class label\n};\n\nmodule.exports = class ABViewChartLineCore extends ABViewChartComponent {\n   constructor(values, application, parent, defaultValues) {\n      super(values, application, parent, defaultValues || ABViewDefaults);\n   }\n\n   static common() {\n      return ABViewDefaults;\n   }\n\n   static defaultValues() {\n      return ABViewChartLinePropertyComponentDefaults;\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      super.fromValues(values);\n\n      this.settings.isLegend = JSON.parse(\n         this.settings.isLegend ||\n            ABViewChartLinePropertyComponentDefaults.isLegend\n      );\n\n      // this.settings.chartWidth = parseInt(this.settings.chartWidth || ABViewChartLinePropertyComponentDefaults.chartWidth);\n      this.settings.chartHeight = parseInt(\n         this.settings.chartHeight ||\n            ABViewChartLinePropertyComponentDefaults.chartHeight\n      );\n\n      this.settings.labelFontSize = parseInt(\n         this.settings.labelFontSize ||\n            ABViewChartLinePropertyComponentDefaults.labelFontSize\n      );\n      this.settings.stepValue = parseInt(\n         this.settings.stepValue ||\n            ABViewChartLinePropertyComponentDefaults.stepValue\n      );\n      this.settings.maxValue = parseInt(\n         this.settings.maxValue ||\n            ABViewChartLinePropertyComponentDefaults.maxValue\n      );\n\n      this.translate(this, this, [\"lineLabel\"]);\n   }\n\n   /**\n    * @method componentList\n    * return the list of components available on this view to display in the editor.\n    */\n   componentList() {\n      return [];\n   }\n};\n","const ABViewChartComponent = require(\"../../platform/views/ABViewChartComponent\");\n\nconst ABViewChartPiePropertyComponentDefaults = {\n   pieType: \"pie\",\n   isLegend: true,\n   // chartWidth: 600,\n   height: 200,\n   innerFontSize: 12,\n   labelFontSize: 12,\n};\n\nconst ABViewDefaults = {\n   key: \"pie\", // {string} unique key for this view\n   icon: \"pie-chart\", // {string} fa-[icon] reference for this view\n   labelKey: \"ab.components.chart.pie\", // {string} the multilingual label key for the class label\n};\n\nmodule.exports = class ABViewChartPieCore extends ABViewChartComponent {\n   constructor(values, application, parent, defaultValues) {\n      super(values, application, parent, defaultValues || ABViewDefaults);\n   }\n\n   static common() {\n      return ABViewDefaults;\n   }\n\n   static defaultValues() {\n      return ABViewChartPiePropertyComponentDefaults;\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      super.fromValues(values);\n\n      this.settings.isLegend = JSON.parse(\n         this.settings.isLegend ||\n            ABViewChartPiePropertyComponentDefaults.isLegend\n      );\n\n      // this.settings.chartWidth = parseInt(this.settings.chartWidth || ABViewChartPiePropertyComponentDefaults.chartWidth);\n      this.settings.height = parseInt(\n         this.settings.height || ABViewChartPiePropertyComponentDefaults.height\n      );\n\n      this.settings.innerFontSize = parseInt(\n         this.settings.innerFontSize ||\n            ABViewChartPiePropertyComponentDefaults.innerFontSize\n      );\n      this.settings.labelFontSize = parseInt(\n         this.settings.labelFontSize ||\n            ABViewChartPiePropertyComponentDefaults.labelFontSize\n      );\n\n      this.translate(this, this, [\"pieLabel\"]);\n   }\n\n   /**\n    * @method componentList\n    * return the list of components available on this view to display in the editor.\n    */\n   componentList() {\n      return [];\n   }\n};\n","const ABViewWidget = require(\"../../platform/views/ABViewWidget\");\n\nconst ABViewCommentPropertyComponentDefaults = {\n   dataviewID: null,\n   columnUser: null,\n   columnComment: null,\n   columnDate: null,\n   height: 300,\n   label: \"\", // label is required and you can add more if the component needs them\n   // format:0  \t// 0 - normal, 1 - title, 2 - description\n};\n\nconst ABViewDefaults = {\n   key: \"comment\", // {string} unique key for this view\n   icon: \"comments\", // {string} fa-[icon] reference for this view\n   labelKey: \"Comment\", // {string} the multilingual label key for the class label\n};\n\nmodule.exports = class ABViewCommentCore extends ABViewWidget {\n   constructor(values, application, parent, defaultValues) {\n      super(values, application, parent, defaultValues || ABViewDefaults);\n   }\n\n   static common() {\n      return ABViewDefaults;\n   }\n\n   static defaultValues() {\n      return ABViewCommentPropertyComponentDefaults;\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      super.fromValues(values);\n\n      // convert from \"0\" => 0\n      // this.settings.format = parseInt(this.settings.format);\n      // if this is being instantiated on a read from the Property UI,\n      this.settings.height = parseInt(this.settings.height || 0);\n   }\n\n   /**\n    * @method componentList\n    * return the list of components available on this view to display in the editor.\n    */\n   componentList() {\n      return [];\n   }\n\n   getUserField() {\n      var dv = this.datacollection;\n      if (!dv) return null;\n\n      var obj = dv.datasource;\n      if (!obj) return null;\n\n      return obj.fields((f) => f.id == this.settings.columnUser)[0];\n   }\n\n   getCommentField() {\n      var dv = this.datacollection;\n      if (!dv) return null;\n\n      var obj = dv.datasource;\n      if (!obj) return null;\n\n      return obj.fields((f) => f.id == this.settings.columnComment)[0];\n   }\n\n   getDateField() {\n      var dv = this.datacollection;\n      if (!dv) return null;\n\n      var obj = dv.datasource;\n      if (!obj) return null;\n\n      return obj.fields((f) => f.id == this.settings.columnDate)[0];\n   }\n\n   getUserData() {\n      var userObject = this.getUsers();\n      var userList = [];\n\n      if (!userObject) return;\n\n      userObject.forEach((item, index) => {\n         var imageURL = \"\";\n         if (item.image) {\n            imageURL = \"/opsportal/image/UserProfile/\" + item.image;\n         }\n         var user = { id: index + 1, value: item.value, image: imageURL };\n         userList.push(user);\n      });\n      return userList;\n   }\n\n   model() {\n      let dv = this.datacollection;\n      if (!dv) return null; // TODO: refactor in v2\n\n      // get ABObject\n      let obj = dv.datasource;\n      if (obj == null) return null; // TODO: refactor in v2\n\n      // get ABModel\n      let model = dv.model; // already notified\n      if (!model) return null;\n\n      return model;\n   }\n};\n","const ABViewContainer = require(\"../../platform/views/ABViewContainer\");\n\nconst ABViewPropertyDefaults = {\n   dataviewID: null,\n   filterConditions: {},\n};\n\nconst ABViewDefaults = {\n   key: \"conditionalcontainer\", // unique key identifier for this ABView\n   icon: \"shield\", // icon reference: (without 'fa-' )\n   labelKey: \"Conditional Container\", // {string} the multilingual label key for the class label\n};\n\nmodule.exports = class ABViewConditionalContainerCore extends ABViewContainer {\n   constructor(values, application, parent, defaultValues) {\n      super(values, application, parent, defaultValues || ABViewDefaults);\n\n      var L = this.AB.Multilingual.label;\n\n      // the conditional container always has 'If' and 'Else' panels\n      if (this.views((v) => v instanceof ABViewContainer).length < 2) {\n         // 'If' panel\n         var ifPanel = application.viewNew(\n            {\n               key: ABViewContainer.common().key,\n               label: L(\"If\", \"If\"),\n               settings: {\n                  removable: false,\n               },\n            },\n            application,\n            this\n         );\n         this._views.push(ifPanel);\n\n         // 'Else' panel\n         var elsePanel = application.viewNew(\n            {\n               key: ABViewContainer.common().key,\n               label: L(\"Else\", \"Else\"),\n               settings: {\n                  removable: false,\n               },\n            },\n            application,\n            this\n         );\n         this._views.push(elsePanel);\n      }\n   }\n\n   static common() {\n      return ABViewDefaults;\n   }\n\n   static defaultValues() {\n      return ABViewPropertyDefaults;\n   }\n};\n","const ABViewWidget = require(\"../../platform/views/ABViewWidget\");\n\nconst ABViewConnectDataFilterPropertyComponentDefaults = {\n   dataviewID: null, // uuid of ABDatacollection\n   field: null, // uuid\n};\n\nconst ABViewDefaults = {\n   key: \"connect-data-filter\", // {string} unique key for this view\n   icon: \"filter\", // {string} fa-[icon] reference for this view\n   labelKey: \"Connected Data Filter\", // {string} the multilingual label key for the class label\n};\n\nmodule.exports = class ABViewConnectDataFilterCore extends ABViewWidget {\n   constructor(values, application, parent, defaultValues) {\n      super(values, application, parent, defaultValues ?? ABViewDefaults);\n   }\n\n   static common() {\n      return ABViewDefaults;\n   }\n\n   static defaultValues() {\n      return ABViewConnectDataFilterPropertyComponentDefaults;\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      super.fromValues(values);\n   }\n\n   /**\n    * @method componentList\n    * return the list of components available on this view to display in the editor.\n    */\n   componentList() {\n      return [];\n   }\n\n};\n","/*\n * ABViewContainerCore\n *\n * An ABViewContainerCore defines a UI display component.\n *\n * A container might have multiple columns of display info.\n *\n */\n\nconst ABView = require(\"../../platform/views/ABView\");\n\n// function L(key, altText) {\n// \treturn AD.lang.label.getLabel(key) || altText;\n// }\n\nconst ABViewDefaults = {\n   key: \"viewcontainer\", // {string} unique key for this view\n   icon: \"braille\", // {string} fa-[icon] reference for this view\n   labelKey: \"Container\", // {string} the multilingual label key for the class label\n};\n\nconst ABPropertyComponentDefaults = {\n   columns: 1,\n   gravity: 1,\n};\n\nmodule.exports = class ABViewContainerCore extends ABView {\n   /**\n    * @param {obj} values  key=>value hash of ABView values\n    * @param {ABApplication} application the application object this view is under\n    * @param {ABView} parent the ABView this view is a child of. (can be null)\n    * @param {obj} defaultValues special sub class defined default values.\n    */\n   constructor(values, application, parent, defaultValues) {\n      super(values, application, parent, defaultValues || ABViewDefaults);\n   }\n\n   static common() {\n      return ABViewDefaults;\n   }\n\n   static defaultValues() {\n      return ABPropertyComponentDefaults;\n   }\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      super.fromValues(values);\n\n      // convert from \"0\" => 0\n      this.settings.columns = parseInt(\n         this.settings.columns || ABPropertyComponentDefaults.columns\n      );\n\n      if (typeof this.settings.gravity != \"undefined\") {\n         this.settings.gravity.map(function (gravity) {\n            return parseInt(gravity);\n         });\n      }\n\n      if (this.settings.removable != null) {\n         this.settings.removable = JSON.parse(this.settings.removable); // convert to boolean\n      } else {\n         this.settings.removable = true;\n      }\n\n      if (this.settings.movable != null) {\n         this.settings.movable = JSON.parse(this.settings.movable); // convert to boolean\n      } else {\n         this.settings.movable = true;\n      }\n   }\n\n   viewsSortByPosition() {\n      // Sort views from y, x positions\n      return this.views().sort((a, b) => {\n         if (a.position.y == b.position.y) return a.position.x - b.position.x;\n         else return a.position.y - b.position.y;\n      });\n   }\n\n   // saveReorder() {\n   //    return this.application.viewReorder(this);\n   // }\n};\n","/*\n * ABViewCore\n *\n * ABViewCore defines the common ABView structure that is shared between\n * the client and the server.  Mostly how it manages it's internal data, and\n * how it is related to the ABView classes.\n *\n */\n\nvar ABMLClass = require(\"../../platform/ABMLClass\");\n\nconst ABViewDefaults = {\n   key: \"view\", // {string} unique key for this view\n   icon: \"window-maximize\", // {string} fa-[icon] reference for this view\n   labelKey: \"ab.components.view\", // {string} the multilingual label key for the class label\n   tabicon: \"\", // no default tab icons\n};\n\nconst ABViewPropertyComponentDefaults = {\n   label: \"\",\n};\n\nmodule.exports = class ABViewCore extends ABMLClass {\n   /**\n    * @param {obj} values  key=>value hash of ABView values\n    * @param {ABApplication} application the application object this view is under\n    * @param {ABView} parent the ABView this view is a child of. (can be null)\n    */\n   constructor(values, application, parent, defaultValues) {\n      super([\"label\"], application.AB);\n\n      this.__events = [];\n      // keep track of any event listeners attached to this ABView object\n\n      this.defaults = defaultValues || ABViewDefaults;\n\n      this.application = application;\n\n      this.parent = parent || null;\n\n      this.warningsSilent = false;\n      // {bool}\n      // Should we suppress our configuration warnings?\n\n      this.fromValues(values);\n   }\n\n   static common() {\n      return ABViewDefaults;\n   }\n\n   static defaultValues() {\n      return ABViewPropertyComponentDefaults;\n   }\n\n   /**\n    * @method newInstance()\n    * return a new instance of this ABView.\n    * @param {ABApplication} application  \t: the root ABApplication this view is under\n    * @param {ABView/ABApplication} parent\t: the parent object of this ABView.\n    * @return {ABView}\n    */\n   static newInstance(application, parent) {\n      console.error(\"!!! where is this being called???\");\n      // return a new instance from ABViewManager:\n      return application.viewNew(\n         { key: this.common().key },\n         application,\n         parent\n      ); // ABViewManager.newView({ key: this.common().key }, application, parent);\n   }\n\n   viewKey() {\n      return this.defaults.key;\n   }\n\n   viewIcon() {\n      return this.defaults.icon;\n   }\n\n   tabIcon() {\n      return this.defaults.tabicon;\n   }\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABView instance\n    * into the values needed for saving to the DB.\n    *\n    * @return {json}\n    */\n   toObj() {\n      // // NOTE: ensure we have a uuid() set:\n      // if (!this.id) {\n      //    this.id = this.application.uuid();\n      // }\n\n      // this.application.unTranslate(this, this, [\"label\"]);\n\n      // MLClass translation\n      var obj = super.toObj();\n\n      var result = {\n         id: this.id,\n         type: this.type || \"view\",\n         key: this.key,\n         icon: this.icon,\n         tabicon: this.tabicon,\n         name: this.name,\n         settings: this.AB.cloneDeep(this.settings || {}),\n         accessLevels: this.accessLevels,\n         translations: obj.translations,\n      };\n\n      // encode our child view references\n      result.viewIDs = (this._views || []).map((v) => v.id).filter((id) => id);\n\n      if (this.position) result.position = this.position;\n\n      // encode our .isRoot() reference.\n      // (NOTE: this is set so our server side code can distinguish) between a .view\n      // and a root page:\n      // NOTE: we intentionally do NOT pull this out in .fromValues()\n      result.isRoot = this.isRoot();\n\n      return result;\n   }\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      this.id = values.id; // NOTE: only exists after .save()\n      // {string} .id\n      // the uuid of this ABObject Definition.\n\n      this.type = values.type || \"view\";\n      // {string} .type\n      // the type of ABDefinition this is.\n\n      this.key = values.key || this.viewKey();\n      // {string} .key\n      // the unique lookup key for our ABViewManager to create new\n      // instances of this object.\n\n      this.icon = values.icon || this.viewIcon();\n      // {string} .icon\n      // the font awesome icon reference for showing an icon for this\n      // view in the AppBuilder interface builder.\n\n      this.tabicon = values.tabicon || this.tabIcon();\n\n      this.name = values.name;\n      // {string} .name\n      // A name reference for this ABView. This is a reference that isn't\n      // translateable and will be used for lookups across languages.\n\n      // if this is being instantiated on a read from the Property UI,\n      // .label is coming in under .settings.label\n      values.settings = values.settings || {};\n      this.label = values.label || values.settings.label || \"?label?\";\n\n      this.settings = values.settings || {};\n      // {obj} .settings\n      // the property settings for this ABView\n\n      // make sure .settings.height is an int and not a string\n      this.settings.height = parseInt(this.settings.height || 0);\n\n      this.accessLevels = values.accessLevels || {};\n      // {obj} .accessLevels\n      // Hash: { ABRole.id : accessLevel }\n      // tracks the Role -> AccessLevel settings of this particular\n      // view.\n      // accessLevel: 0 : no access, 1 : view only, 2: full access\n\n      // let the MLClass now process the translations:\n      super.fromValues(values);\n\n      // If the View / DataCollection does not have a .name already,\n      // use the English label translation as the .name instead.\n      if (!this.name && Array.isArray(this.translations)) {\n         for (var i = 0; i < this.translations.length; i++) {\n            if (i == 0) {\n               // Use the first label found, in case there is no 'en'\n               this.name = this.translations[i].label;\n            }\n            if (this.translations[i].language_code == \"en\") {\n               // But the 'en' label will have final priority\n               this.name = this.translations[i].label;\n               break;\n            }\n         }\n      }\n\n      // default value for our label\n      if (this.label == \"?label?\") {\n         if (this.parent) {\n            this.label = this.parent.label + \".\" + this.defaults.key;\n         }\n      }\n\n      var views = [];\n      (values.viewIDs || []).forEach((id) => {\n         var def = this.AB.definitionByID(id);\n         if (def) {\n            views.push(this.application.viewNew(def, this.application, this));\n         } else {\n            this.AB.notify.builder(\n               new Error(\n                  `Application[${this.application.name}][${this.application.id}].View[${this.name}][${this.id}] references unknown View[${id}]`\n               ),\n               {\n                  context:\"ABViewCore:fromValues():values.viewIDs for each\",\n                  id\n               }\n            );\n         }\n      });\n      this._views = views;\n\n      // convert from \"0\" => 0\n      this.position = values.position || {};\n\n      if (this.position.x != null) this.position.x = parseInt(this.position.x);\n      if (this.position.y != null) this.position.y = parseInt(this.position.y);\n\n      this.position.dx = parseInt(this.position.dx || 1);\n      this.position.dy = parseInt(this.position.dy || 1);\n   }\n\n   isRoot() {\n      return this.parent == null || this.parent == this.application;\n   }\n\n   /**\n    * @method allParents()\n    *\n    * return an flatten array of all the ABViews parents\n    *\n    * @return {array}      array of ABViews\n    */\n   allParents() {\n      var parents = [];\n      var curView = this;\n\n      // add current view to array\n      parents.unshift(curView);\n\n      while (!curView.isRoot() && curView.parent) {\n         parents.unshift(curView.parent);\n\n         curView = curView.parent;\n      }\n\n      return parents;\n   }\n\n   /**\n    * @method isAccessibleForRoles()\n    * return true/false if this ABViewPage is accessible for one of the\n    * passed in ABRoles.\n    * @param {array[ABRole]} roles\n    *        an array of {ABRole} instances.\n    * @return {bool}\n    */\n   isAccessibleForRoles(roles) {\n      var foundRole = false;\n\n      var accessibleRoles = Object.keys(this.accessLevels) || [];\n      (roles || []).forEach((r) => {\n         if (accessibleRoles.indexOf(r.uuid || r) > -1) {\n            foundRole = true;\n         }\n      });\n\n      return foundRole;\n   }\n\n   /**\n    * @method getUserAccess()\n    *\n    * return the access level of the current user on the current view\n    *\n    * @return {integer}  // 0 = No Access // 1 = Read Only // 2 = Full Access\n    */\n   getUserAccess() {\n      // by default everyone has no access\n      var accessLevel = 0;\n\n      if (this.application.isAccessManaged) {\n         // check to see if the current users is the access manager\n         var isAccessManager = false;\n         // first check if manager is defined by their role\n         if (parseInt(this.application.accessManagers.useRole) == 1) {\n            // if so check if any of the user's role match the managers\n            this.AB.Account.roles().forEach((role) => {\n               if (\n                  this.application.accessManagers.role.indexOf(\n                     role.id || role.uuid\n                  ) > -1\n               ) {\n                  // if so set the access level to full access\n                  isAccessManager = true;\n                  accessLevel = 2;\n               }\n            });\n         }\n         // if the user isn't already set as the manager and the manager is defined by their account\n         if (\n            !isAccessManager &&\n            parseInt(this.application.accessManagers.useAccount) == 1\n         ) {\n            // check if the user's account matches the managers\n            if (\n               this.application.accessManagers.account.indexOf(\n                  this.AB.Account.uuid() + \"\"\n               ) > -1\n            ) {\n               // if so set the access level to full access\n               isAccessManager = true;\n               accessLevel = 2;\n            }\n         }\n\n         // if the user is not the manager check if the page has access levels defined for roles\n         if (\n            this.accessLevels &&\n            Object.keys(this.accessLevels).length > 0 &&\n            !isAccessManager\n         ) {\n            // check to see if the user's roles matches one of the roles defined\n            this.AB.Account.roles().forEach((role) => {\n               var currentRole = this.accessLevels[role.id || role.uuid];\n               if (currentRole && parseInt(currentRole) > accessLevel)\n                  // if the access level is higher than a previous role set to the new level\n                  accessLevel = parseInt(currentRole);\n            });\n         }\n      } else {\n         accessLevel = 2;\n      }\n\n      return accessLevel;\n   }\n\n   /**\n    * @method parentFormComponent\n    * return the closest form object this component is on.\n    */\n   parentFormComponent() {\n      var form = null;\n\n      var curr = this;\n      while (curr.key != \"form\" && !curr.isRoot() && curr.parent) {\n         curr = curr.parent;\n      }\n\n      if (curr.key == \"form\") {\n         form = curr;\n      }\n\n      return form;\n   }\n\n   /**\n    * @method parentDetailComponent\n    * return the closest detail object that this component is on.\n    * @returns {ABViewDetail} detail component\n    */\n   parentDetailComponent() {\n      var detail = null;\n\n      var curr = this;\n      while (curr.key != \"detail\" && !curr.isRoot() && curr.parent) {\n         curr = curr.parent;\n      }\n\n      if (curr.key == \"detail\") {\n         detail = curr;\n      }\n\n      return detail;\n   }\n\n   pageParent(filterFn) {\n      if (filterFn == null) filterFn = () => true;\n\n      // if current page is the root page, then return itself.\n      if (this.isRoot()) {\n         return this;\n      }\n\n      var parentPage = this.parent;\n      while (\n         parentPage &&\n         (parentPage.key != \"page\" || !filterFn(parentPage))\n      ) {\n         parentPage = parentPage.parent;\n      }\n\n      return parentPage;\n   }\n\n   pageRoot() {\n      var rootPage = this.pageParent();\n\n      while (!rootPage.isRoot()) {\n         rootPage = rootPage.pageParent();\n      }\n\n      return rootPage;\n   }\n\n   /**\n    * @method urlPointer()\n    * return the url pointer that references this view.  This url pointer\n    * should be able to be used by this.application.urlResolve() to return\n    * this view object.\n    * @return {string}\n    */\n   urlPointer() {\n      if (this.parent) {\n         return this.parent.urlView() + this.id;\n      } else {\n         return this.application.urlPage() + this.id;\n      }\n   }\n\n   /**\n    * @method urlView\n    * return a string pointer to this object's views.\n    * @return {string}\n    */\n   urlView() {\n      return this.urlPointer() + \"/_views/\";\n   }\n\n   /**\n    * @property datacollection\n    * return data source\n    *\n    * @return {ABDataCollection}\n    */\n   get datacollection() {\n      let dataviewID = (this.settings || {}).dataviewID;\n      if (!dataviewID) {\n         if (\n            [\"form\", \"grid\", \"line\", \"area\", \"bar\", \"gantt\", \"kanban\"].indexOf(\n               this.key\n            ) > -1\n         ) {\n            // NOTE: ignore kanban side forms where this is the case:\n            if (this.key == \"form\" && this._currentObject) return null;\n\n            if (this.warningsSilent) return null;\n\n            var errNoDCID = new Error(\n               `ABViewCore:get datacollection(): View[${this.key}] didn't define a dataviewID.`\n            );\n            this.AB.notify.builder(errNoDCID, {\n               view: this,\n               settings: this.settings,\n            });\n         } else {\n            // These views shouldn't matter if they don't have a datacollection.\n            if ([\"page\", \"viewcontainer\"].indexOf(this.key) == -1) {\n               console.warn(\n                  `TODO: figure out which ABView* require a .dataviewID: ${this.key}?`\n               );\n            }\n         }\n         return null;\n      }\n\n      var dc = this.AB.datacollectionByID(dataviewID);\n      if (!dc) {\n         var errNoDC = new Error(\n            `View[${this.label}][${this.id}] is unable to find associated DataCollection`\n         );\n         this.AB.notify.builder(errNoDC, {\n            view: this,\n            dataviewID,\n         });\n      }\n      return dc;\n   }\n\n   ///\n   /// Update Access accessLevels\n   ///\n\n   /**\n    * @method updateAccessLevels()\n    *\n    *\n    * @param {string} roleId\n    *\n    * @param {string} accessLevel\n    *\n    * @return {Promise}\n    *\n    */\n   updateAccessLevels(roleId, accessLevel) {\n      if (parseInt(accessLevel) == 0) {\n         if (this.accessLevels[roleId]) delete this.accessLevels[roleId];\n      } else {\n         this.accessLevels[roleId] = accessLevel;\n      }\n\n      return this.save(false, false);\n   }\n\n   ///\n   /// Views\n   ///\n\n   /**\n    * @method views()\n    *\n    * return an array of all the ABViews children\n    *\n    * @param {fn} filter  \ta filter fn to return a set of ABViews that this fn\n    *\t\t\t\t\t\treturns true for.\n    * @param {boolean} deep\n    *\n    * @return {array} \tarray of ABViews\n    */\n   views(filter = () => true, deep = false) {\n      var result = [];\n\n      if (!this._views || this._views.length < 1) return result;\n\n      // find into recursively\n      if (filter && deep) {\n         result = result.concat(this._views.filter(filter));\n\n         this._views.forEach((v) => {\n            var subViews = v.views(filter, deep);\n            if (subViews && subViews.length > 0) {\n               result = result.concat(subViews);\n            }\n         });\n      } else {\n         result = this._views.filter(filter);\n      }\n\n      return result;\n   }\n\n   /**\n    * @method viewNew()\n    *\n    *\n    * @return {ABView}\n    */\n   viewNew(values, application, parent) {\n      return this.application.viewNew(\n         values,\n         application || this.application,\n         parent || this\n      );\n   }\n\n   /**\n    * @method viewDestroy()\n    *\n    * remove the current ABView from our list of ._views.\n    *\n    * @param {ABView} view\n    * @return {Promise}\n    */\n   viewDestroy(view) {\n      console.error(\"DEPRECIATED: where is this called?\");\n      return this.viewRemove(view);\n   }\n\n   /**\n    * @method viewRemove()\n    *\n    * remove the current ABView from our list of ._views.\n    *\n    * @param {ABView} view\n    * @return {Promise}\n    */\n   viewRemove(view) {\n      var origLen = this._views.length;\n      this._views = this.views(function (v) {\n         return v.id != view.id;\n      });\n\n      if (this._views.length < origLen) {\n         return this.save();\n      }\n\n      return Promise.resolve();\n   }\n\n   /**\n    * @method viewInsert()\n    *\n    * persist the current ABView in our list of ._views.\n    *\n    * @param {ABView} object\n    * @return {Promise}\n    */\n   viewInsert(view) {\n      var isIncluded =\n         this.views(function (v) {\n            return v.id == view.id;\n         }).length > 0;\n      if (!isIncluded) {\n         this._views.push(view);\n         return this.save();\n      }\n\n      return Promise.resolve();\n   }\n\n   /**\n    * @method viewReorder()\n    *\n    * reorder the current ABView in our list of ._views.\n    *\n    * @param {string} viewId - id of the active view\n    * @param {string} toPosition - 'to' postion\n    * @return {Promise}\n    */\n   viewReorder(viewId, toPosition) {\n      var from = this._views.findIndex((v) => v.id == viewId);\n      if (from < 0) return;\n\n      // move drag item to 'to' position\n      this._views.splice(toPosition, 0, this._views.splice(from, 1)[0]);\n\n      // save to database\n      return this.save(true);\n   }\n\n   /// ABApplication data methods\n\n   /**\n    * @method destroy()\n    *\n    * destroy the current instance of ABApplication\n    *\n    * also remove it from our _AllApplications\n    *\n    * @return {Promise}\n    */\n   destroy() {\n      // unsubscribe events\n      this.eventClear(true);\n\n      return Promise.resolve()\n         .then(() => {\n            // When deleting an ABView\n            // be sure to remove any of it's ABViews as well\n            // This cleans out any dangling ABDefinitions\n\n            var allViewDeletes = [];\n            var allViews = this.views();\n            this._views = [];\n            // doing ._views = [] prevents any of my updates when\n            // a sub-view is .destroy()ed\n\n            allViews.forEach((v) => {\n               allViewDeletes.push(v.destroy());\n            });\n            return Promise.all(allViewDeletes);\n         })\n         .then(() => {\n            // NOTE: this should not happen on ABViewPage objects\n            if (this.parent && !this.pages) {\n               return this.parent.viewRemove(this);\n            }\n         })\n         .then(() => {\n            return super.destroy();\n         })\n         .then(() => {\n            this.emit(\"destroyed\");\n         });\n   }\n\n   /**\n    * @method save()\n    * persist this instance of ABView\n    * @return {Promise}\n    *\t\t.resolve( {this} )\n    */\n   save() {\n      return Promise.resolve()\n         .then(() => {\n            // this creates our .id\n            return super.save();\n         })\n         .then(() => {\n            // NOTE: this should not happen on ABViewPage objects:\n            if (this.parent && !this.pages) {\n               // if we have a .parent, make sure we are included in our .parent's\n               // viewIDs\n               return this.parent.viewInsert(this);\n            }\n         })\n         .then(() => {\n            return this;\n         });\n   }\n\n   ///\n   /// Events\n   ///\n\n   /**\n    * @method eventAdd()\n    *\n    *\n    *\n    * @param {object} evt - {\n    * \t\t\t\t\t\t\temitter: object,\n    * \t\t\t\t\t\t\teventName: string,\n    * \t\t\t\t\t\t\tlistener: function\n    * \t\t\t\t\t\t}\n    */\n   eventAdd(evt) {\n      if (!evt || !evt.emitter || !evt.listener) return;\n\n      var exists = this.__events.find((e) => {\n         return e.emitter == evt.emitter && e.eventName == evt.eventName;\n         // && e.listener == evt.listener;\n      });\n\n      if (!exists || exists.length < 1) {\n         // add to array\n         this.__events.push({\n            emitter: evt.emitter,\n            eventName: evt.eventName,\n            listener: evt.listener,\n         });\n\n         // listening this event\n         evt.emitter.on(evt.eventName, evt.listener);\n      }\n   }\n\n   /**\n    * @method eventClear()\n    * unsubscribe all events.\n    * should do it before destroy a component\n    *\n    * @param {bool} deep - clear events of child views\n    */\n   eventClear(deep) {\n      if (deep) {\n         this.views().forEach((v) => {\n            v.eventClear(deep);\n         });\n      }\n\n      if (this.__events && this.__events.length > 0) {\n         this.__events.forEach((e) => {\n            e.emitter.removeListener(e.eventName, e.listener);\n         });\n      }\n   }\n\n   /**\n    * @method clone()\n    * clone the definitions of this ABView object.\n    * @param {obj} lookUpIds\n    *        an { oldID : newID } lookup hash for converting ABView objects\n    *        and their setting pointers.\n    * @param {ABView*} parent\n    *        Which ABView should be connected as the parent object of this\n    *        copy.\n    * @param {obj} options\n    *        option settings for the copy command.\n    *        options.ignoreSubPages {bool}\n    *             set to true to skip copying any sub pages of this ABView.\n    * @return {obj}\n    *        obj defs of this ABView\n    */\n   clone(lookUpIds, parent, options = {}) {\n      lookUpIds = lookUpIds || {};\n\n      // get settings of the target\n      let config = this.toObj();\n\n      // remove sub-elements property\n      [\"pages\", \"views\"].forEach((prop) => {\n         delete config[prop];\n      });\n\n      // update id of linked components\n      if (this.copyUpdateProperyList) {\n         (this.copyUpdateProperyList() || []).forEach((prop) => {\n            if (config && config.settings)\n               config.settings[prop] = lookUpIds[config.settings[prop]];\n         });\n      }\n\n      // copy from settings\n      let result = this.viewNew(config, this.application, parent);\n\n      // change id\n      if (parent == null) {\n         // the page is getting cloned to root: there is no parent, as parent is the application\n         result.id = null;\n      } else {\n         result.id = lookUpIds[result.id] || this.AB.uuid();\n      }\n\n      // copy sub pages\n      if (this.pages && !options.ignoreSubPages) {\n         result._pages = [];\n         this.pages().forEach((p) => {\n            let copiedSubPage = p.clone(lookUpIds, result, options);\n            copiedSubPage.parent = result;\n\n            result._pages.push(copiedSubPage);\n         });\n      }\n\n      // copy sub views\n      if (this.views && !options.ignoreSubViews) {\n         result._views = [];\n         this.views().forEach((v) => {\n            let copiedView = v.clone(lookUpIds, result, options);\n\n            result._views.push(copiedView);\n         });\n      }\n\n      return result;\n   }\n\n   /**\n    * @method copy()\n    * create a new copy of this ABView object. The resulting ABView should\n    * be identical in settings and all sub pages/views, but each new object\n    * is a unique view (different ids).\n    * @param {obj} lookUpIds\n    *        an { oldID : newID } lookup hash for converting ABView objects\n    *        and their setting pointers.\n    * @param {ABView*} parent\n    *        Which ABView should be connected as the parent object of this\n    *        copy.\n    * @param {obj} options\n    *        option settings for the copy command.\n    *        options.ignoreSubPages {bool}\n    *             set to true to skip copying any sub pages of this ABView.\n    *        options.newName {string}\n    *             new user determined name for page\n    * @return {Promise}\n    *        .resolved with the instance of the copied ABView\n    */\n   copy(lookUpIds, parent, options = {}) {\n      lookUpIds = lookUpIds || {};\n\n      // get settings of the target\n      let config = this.toObj();\n\n      // remove sub-elements property\n      [\"pageIDs\", \"viewIDs\"].forEach((prop) => {\n         delete config[prop];\n      });\n\n      // update id of linked components\n      if (this.copyUpdateProperyList) {\n         (this.copyUpdateProperyList() || []).forEach((prop) => {\n            if (config && config.settings)\n               config.settings[prop] = lookUpIds[config.settings[prop]];\n         });\n      }\n\n      // copy from settings\n      let result = this.application.viewNew(config, this.application, parent);\n\n      // keep the parent\n      result.parent = parent || this.parent;\n\n      // change id\n      if (parent == null) {\n         // the page is getting cloned to root: there is no parent, as parent is the application.\n         // pages with null parent ids default to getting put on root\n         result.id = null;\n      } else {\n         result.id = lookUpIds[result.id] || this.AB.uuid();\n      }\n\n      // page's name should not be duplicate\n      if (this.key == \"page\") {\n         result.name =\n            options?.newName ||\n            `${result.name}_copied_${this.AB.uuid().slice(0, 3)}`;\n\n         result.label = options?.newName || `${result.label} (copied)`;\n      }\n\n      return Promise.resolve()\n         .then(() => {\n            // copy sub pages\n            var allSaves = [];\n\n            if (this._pages && !options.ignoreSubPages) {\n               result._pages = [];\n               this.pages().forEach((p) => {\n                  // this prevents result.save() from happening on each of these\n                  // p.copy():\n                  if (p.isRoot())\n                     this.application._pages.push({ id: lookUpIds[p.id] });\n\n                  allSaves.push(\n                     p\n                        .copy(lookUpIds, result, options)\n                        .then((copiedSubPage) => {\n                           copiedSubPage.parent = result;\n                           // remove the temp {id:} entry above:\n                           this.application._pages = this.application._pages.filter(\n                              (p2) => p2.id != lookUpIds[p.id]\n                           );\n\n                           // now add the full copiedSubPage:\n                           result._pages.push(copiedSubPage);\n                        })\n                  );\n               });\n            }\n\n            return Promise.all(allSaves);\n         })\n         .then(() => {\n            // copy sub views\n            var allSaves = [];\n\n            if (this._views && !options.ignoreSubViews) {\n               result._views = [];\n               this.views().forEach((v) => {\n                  allSaves.push(\n                     // send a null for parent, so that the .save() wont trigger\n                     // a save of the parent.\n                     v.copy(lookUpIds, result, options).then((copiedView) => {\n                        // now patch up the parent connection:\n                        // copiedView.parent = result;\n                        if (\n                           result._views.filter((vi) => vi.id == copiedView.id)\n                              .length < 1\n                        ) {\n                           result._views.push(copiedView);\n                        }\n                     })\n                  );\n               });\n            }\n\n            return Promise.all(allSaves);\n         })\n         .then(() => {\n            // now we do 1 save for all the views\n            return result.save();\n         })\n         .then(() => {\n            return result;\n         });\n   }\n};\n","const ABViewDetail = require(\"../../platform/views/ABViewDetail\");\n\nconst ABViewDataviewPropertyComponentDefaults = {\n   xCount: 1, // {int} the number of columns per row (need at least one)\n   detailsPage: \"\",\n   detailsTab: \"\",\n   editPage: \"\",\n   editTab: \"\",\n};\n\nconst ABViewDataviewDefaults = {\n   key: \"dataview\", // {string} unique key for this view\n   icon: \"th\", // {string} fa-[icon] reference for this view\n   labelKey: \"Data view\", // {string} the multilingual label key for the class label\n};\n\nmodule.exports = class ABViewDataviewCore extends ABViewDetail {\n   /**\n    * @param {obj} values  key=>value hash of ABView values\n    * @param {ABApplication} application the application object this view is under\n    * @param {ABView} parent the ABView this view is a child of. (can be null)\n    */\n   constructor(values, application, parent, defaultValues) {\n      super(\n         values,\n         application,\n         parent,\n         defaultValues || ABViewDataviewDefaults\n      );\n   }\n\n   static common() {\n      return ABViewDataviewDefaults;\n   }\n\n   static defaultValues() {\n      return ABViewDataviewPropertyComponentDefaults;\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      super.fromValues(values);\n\n      this.settings.xCount = parseInt(\n         this.settings.xCount || ABViewDataviewPropertyComponentDefaults.xCount\n      );\n      this.settings.detailsPage =\n         this.settings.detailsPage ||\n         ABViewDataviewPropertyComponentDefaults.detailsPage;\n      this.settings.editPage =\n         this.settings.editPage ||\n         ABViewDataviewPropertyComponentDefaults.editPage;\n      this.settings.detailsTab =\n         this.settings.detailsTab ||\n         ABViewDataviewPropertyComponentDefaults.detailsTab;\n      this.settings.editTab =\n         this.settings.editTab ||\n         ABViewDataviewPropertyComponentDefaults.editTab;\n   }\n};\n","const ABViewDetailComponent = require(\"../../platform/views/ABViewDetailComponent\");\n\nconst ABViewDetailCheckboxPropertyComponentDefaults = {};\n\nconst ABViewDetailCheckboxDefaults = {\n   key: \"detailcheckbox\", // {string} unique key for this view\n   icon: \"check-square-o\", // {string} fa-[icon] reference for this view\n   labelKey: \"ab.components.detail.checkbox\", // {string} the multilingual label key for the class label\n};\n\nmodule.exports = class ABViewDetailCheckboxCore extends ABViewDetailComponent {\n   /**\n    * @param {obj} values  key=>value hash of ABView values\n    * @param {ABApplication} application the application object this view is under\n    * @param {ABView} parent the ABView this view is a child of. (can be null)\n    */\n   constructor(values, application, parent, defaultValues) {\n      super(\n         values,\n         application,\n         parent,\n         defaultValues || ABViewDetailCheckboxDefaults\n      );\n   }\n\n   static common() {\n      return ABViewDetailCheckboxDefaults;\n   }\n\n   static defaultValues() {\n      return ABViewDetailCheckboxPropertyComponentDefaults;\n   }\n\n   /*\n    * @method componentList\n    * return the list of components available on this view to display in the editor.\n    */\n   componentList() {\n      return [];\n   }\n};\n","const ABViewWidget = require(\"../../platform/views/ABViewWidget\");\n\nmodule.exports = class ABViewDetailComponentCore extends ABViewWidget {\n   // constructor(values, application, parent, defaultValues) {\n   //    super(values, application, parent, defaultValues);\n   // }\n\n   detailComponent() {\n      var detailView = null;\n\n      var curr = this;\n      while (\n         !curr.isRoot() &&\n         curr.parent &&\n         curr.key != \"detail\" &&\n         curr.key != \"dataview\"\n      ) {\n         curr = curr.parent;\n      }\n\n      if (curr.key == \"detail\" || curr.key == \"dataview\") {\n         detailView = curr;\n      }\n\n      return detailView;\n   }\n\n   field() {\n      let detailComponent = this.detailComponent();\n      if (detailComponent == null) return null;\n\n      let datacollection = detailComponent.datacollection;\n      if (datacollection == null) return null;\n\n      let object = datacollection.datasource;\n      if (object == null) return null;\n\n      let field = object.fields((v) => v.id == this.settings.fieldId)[0];\n\n      // set .alias to support queries that contains alias name\n      // [aliasName].[columnName]\n      if (field && this.settings.alias) {\n         field.alias = this.settings.alias;\n      }\n\n      return field;\n   }\n\n   getCurrentData() {\n      var detailCom = this.detailComponent();\n      if (!detailCom) return null;\n\n      var dv = detailCom.datacollection;\n      if (!dv) return null;\n\n      var field = this.field();\n      if (!field) return null;\n\n      var currData = dv.getCursor();\n      if (currData) return currData[field.columnName];\n      else return null;\n   }\n};\n","// const ABViewDetailSelectivity = require(\"../../platform/views/ABViewDetailSelectivity\");\nconst ABViewDetailComponent = require(\"../../platform/views/ABViewDetailComponent\");\n\nconst ABViewDetailPropertyComponentDefaults = {\n   formView: \"\", // id of form to add new data\n};\n\nconst ABViewDefaults = {\n   key: \"detailconnect\", // {string} unique key for this view\n   icon: \"list-ul\", // {string} fa-[icon] reference for this view\n   labelKey: \"ab.components.detail.connect\", // {string} the multilingual label key for the class label\n};\n\nmodule.exports = class ABViewDetailConnectCore extends ABViewDetailComponent {\n   /**\n    * @param {obj} values  key=>value hash of ABView values\n    * @param {ABApplication} application the application object this view is under\n    * @param {ABView} parent the ABView this view is a child of. (can be null)\n    */\n   constructor(values, application, parent, defaultValues) {\n      super(values, application, parent, defaultValues || ABViewDefaults);\n   }\n\n   static common() {\n      return ABViewDefaults;\n   }\n\n   static defaultValues() {\n      return ABViewDetailPropertyComponentDefaults;\n   }\n};\n","const ABViewContainer = require(\"../../platform/views/ABViewContainer\");\n\nconst ABViewDetailDefaults = {\n   key: \"detail\", // {string} unique key for this view\n   icon: \"file-text-o\", // {string} fa-[icon] reference for this view\n   labelKey: \"Detail\", // {string} the multilingual label key for the class label\n};\n\nconst ABViewDetailPropertyComponentDefaults = {\n   dataviewID: null,\n   showLabel: true,\n   labelPosition: \"left\",\n   labelWidth: 120,\n   height: 0,\n};\n\nmodule.exports = class ABViewDetailCore extends ABViewContainer {\n   /**\n    * @param {obj} values  key=>value hash of ABView values\n    * @param {ABApplication} application the application object this view is under\n    * @param {ABView} parent the ABView this view is a child of. (can be null)\n    */\n   constructor(values, application, parent, defaultValues) {\n      super(values, application, parent, defaultValues || ABViewDetailDefaults);\n   }\n\n   static common() {\n      return ABViewDetailDefaults;\n   }\n\n   static defaultValues() {\n      return ABViewDetailPropertyComponentDefaults;\n   }\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      super.fromValues(values);\n\n      this.settings.labelPosition =\n         this.settings.labelPosition ||\n         ABViewDetailPropertyComponentDefaults.labelPosition;\n\n      // convert from \"0\" => true/false\n      this.settings.showLabel = JSON.parse(\n         this.settings.showLabel != null\n            ? this.settings.showLabel\n            : ABViewDetailPropertyComponentDefaults.showLabel\n      );\n\n      // convert from \"0\" => 0\n      this.settings.labelWidth = parseInt(\n         this.settings.labelWidth ||\n            ABViewDetailPropertyComponentDefaults.labelWidth\n      );\n      this.settings.height = parseInt(\n         this.settings.height || ABViewDetailPropertyComponentDefaults.height\n      );\n   }\n\n   /**\n    * @method componentList\n    * return the list of components available on this view to display in the editor.\n    */\n   componentList() {\n      var viewsToAllow = [\"label\", \"text\"],\n         allComponents = this.application.viewAll();\n\n      return allComponents.filter((c) => {\n         return viewsToAllow.indexOf(c.common().key) > -1;\n      });\n   }\n};\n","const ABViewDetailComponent = require(\"../../platform/views/ABViewDetailComponent\");\n\nconst ABViewDetailCustomPropertyComponentDefaults = {};\n\nconst ABViewDetailCustomDefaults = {\n   key: \"detailcustom\", // {string} unique key for this view\n   icon: \"dot-circle-o\", // {string} fa-[icon] reference for this view\n   labelKey: \"ab.components.detail.custom\", // {string} the multilingual label key for the class label\n};\n\nmodule.exports = class ABViewDetailCustomCore extends ABViewDetailComponent {\n   /**\n    * @param {obj} values  key=>value hash of ABView values\n    * @param {ABApplication} application the application object this view is under\n    * @param {ABView} parent the ABView this view is a child of. (can be null)\n    */\n   constructor(values, application, parent, defaultValues) {\n      super(\n         values,\n         application,\n         parent,\n         defaultValues || ABViewDetailCustomDefaults\n      );\n   }\n\n   static common() {\n      return ABViewDetailCustomDefaults;\n   }\n\n   static defaultValues() {\n      return ABViewDetailCustomPropertyComponentDefaults;\n   }\n\n   /*\n    * @method componentList\n    * return the list of components available on this view to display in the editor.\n    */\n   componentList() {\n      return [];\n   }\n};\n","const ABViewDetailComponent = require(\"../../platform/views/ABViewDetailComponent\");\n\nconst ABViewDetailImagePropertyComponentDefaults = {\n   height: 80,\n   width: 120,\n};\n\nconst ABViewDetailImageDefaults = {\n   key: \"detailimage\", // {string} unique key for this view\n   icon: \"image\", // {string} fa-[icon] reference for this view\n   labelKey: \"ab.components.detail.image\", // {string} the multilingual label key for the class label\n};\n\nmodule.exports = class ABViewDetailImageCore extends ABViewDetailComponent {\n   /**\n    * @param {obj} values  key=>value hash of ABView values\n    * @param {ABApplication} application the application object this view is under\n    * @param {ABView} parent the ABView this view is a child of. (can be null)\n    */\n   constructor(values, application, parent, defaultValues) {\n      super(\n         values,\n         application,\n         parent,\n         defaultValues || ABViewDetailImageDefaults\n      );\n   }\n\n   static common() {\n      return ABViewDetailImageDefaults;\n   }\n\n   static defaultValues() {\n      return ABViewDetailImagePropertyComponentDefaults;\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      super.fromValues(values);\n\n      // convert from \"0\" => 0\n      this.settings.height = parseInt(\n         this.settings.height ||\n            ABViewDetailImagePropertyComponentDefaults.height\n      );\n      this.settings.width = parseInt(\n         this.settings.width || ABViewDetailImagePropertyComponentDefaults.width\n      );\n   }\n\n   /**\n    * @method componentList\n    * return the list of components available on this view to display in the editor.\n    */\n   componentList() {\n      return [];\n   }\n};\n","const ABViewDetailComponent = require(\"../../platform/views/ABViewDetailComponent\");\n\nconst ABViewDetailTextPropertyComponentDefaults = {\n   height: 0,\n};\n\nconst ABViewDetailTextDefaults = {\n   key: \"detailtext\", // {string} unique key for this view\n   icon: \"etsy\", // {string} fa-[icon] reference for this view\n   labelKey: \"ab.components.detail.text\", // {string} the multilingual label key for the class label\n};\n\nmodule.exports = class ABViewDetailTextCore extends ABViewDetailComponent {\n   /**\n    * @param {obj} values  key=>value hash of ABView values\n    * @param {ABApplication} application the application object this view is under\n    * @param {ABView} parent the ABView this view is a child of. (can be null)\n    */\n   constructor(values, application, parent, defaultValues) {\n      super(\n         values,\n         application,\n         parent,\n         defaultValues || ABViewDetailTextDefaults\n      );\n   }\n\n   static common() {\n      return ABViewDetailTextDefaults;\n   }\n\n   static defaultValues() {\n      return ABViewDetailTextPropertyComponentDefaults;\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      super.fromValues(values);\n\n      // convert from \"0\" => 0\n      this.settings.height = parseInt(\n         this.settings.height ||\n            ABViewDetailTextPropertyComponentDefaults.height\n      );\n   }\n\n   /**\n    * @method componentList\n    * return the list of components available on this view to display in the editor.\n    */\n   componentList() {\n      return [];\n   }\n};\n","const ABViewDetailComponent = require(\"../../platform/views/ABViewDetailComponent\");\n\nconst ABViewDetailPropertyComponentDefaults = {};\n\nconst ABViewDetailTreeDefaults = {\n   key: \"detailtree\", // {string} unique key for this view\n   icon: \"sitemap\", // {string} fa-[icon] reference for this view\n   labelKey: \"ab.components.detail.tree\", // {string} the multilingual label key for the class label\n};\n\nmodule.exports = class ABViewDetailTextCore extends ABViewDetailComponent {\n   /**\n    * @param {obj} values  key=>value hash of ABView values\n    * @param {ABApplication} application the application object this view is under\n    * @param {ABView} parent the ABView this view is a child of. (can be null)\n    */\n   constructor(values, application, parent, defaultValues) {\n      super(\n         values,\n         application,\n         parent,\n         defaultValues || ABViewDetailTreeDefaults\n      );\n   }\n\n   static common() {\n      return ABViewDetailTreeDefaults;\n   }\n\n   static defaultValues() {\n      return ABViewDetailPropertyComponentDefaults;\n   }\n\n   /**\n    * @method componentList\n    * return the list of components available on this view to display in the editor.\n    */\n   componentList() {\n      return [];\n   }\n};\n","const ABViewWidget = require(\"../../platform/views/ABViewWidget\");\n\nconst ABViewDocxBuilderPropertyComponentDefaults = {\n   buttonlabel: \"Download DOCX\",\n   dataviewID: null,\n   width: 0,\n   filename: \"\", // uuid\n   filelabel: \"output.docx\",\n   language: \"en\", // en\n   toolbarBackground: \"ab-background-default\",\n   buttonPosition: \"left\",\n};\n\nconst ABViewDefaults = {\n   key: \"docxBuilder\", // {string} unique key for this view\n   icon: \"file-word-o\", // {string} fa-[icon] reference for this view\n   labelKey: \"DOCX Builder\", // {string} the multilingual label key for the class label\n};\n\nmodule.exports = class ABViewDocxBuilderCore extends ABViewWidget {\n   constructor(values, application, parent, defaultValues) {\n      super(values, application, parent, defaultValues || ABViewDefaults);\n   }\n\n   static common() {\n      return ABViewDefaults;\n   }\n\n   static defaultValues() {\n      return ABViewDocxBuilderPropertyComponentDefaults;\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABViewLabel instance\n    * into the values needed for saving.\n    *\n    * @return {json}\n    */\n   toObj() {\n      this.unTranslate(this, this, [\"filelabel\", \"buttonlabel\"]);\n\n      var obj = super.toObj();\n      obj.viewIDs = [];\n      return obj;\n   }\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      super.fromValues(values);\n\n      // convert from \"0\" => 0\n      this.settings.width = parseInt(\n         this.settings.width || ABViewDocxBuilderPropertyComponentDefaults.width\n      );\n\n      this.translate(this, this, [\"filelabel\", \"buttonlabel\"]);\n   }\n\n   uploadUrl() {\n      // TODO: Convert this to use ABFactory.urlFileUpload() or a ABFieldFile\n      // to get the URL:\n      console.warn(\n         new Error(\n            \"TODO: convert ABViewDocxBuilderCore.uploadUrl() to use common url code.\"\n         )\n      );\n      // let actionKey =\n      //    \"opstool.AB_\" + this.application.name.replace(\"_\", \"\") + \".view\";\n\n      // return (\n      //    \"/\" +\n      //    [\"opsportal\", \"file\", this.application.name, actionKey, \"1\"].join(\"/\")\n      // );\n      return `/file/upload/DOCX${this.id}/VIEW${this.id}/1`;\n   }\n\n   downloadUrl() {\n      return `/file/${this.settings.filename}`;\n   }\n\n   get languageCode() {\n      return (\n         this.settings.language ||\n         ABViewDocxBuilderPropertyComponentDefaults.language\n      );\n   }\n\n   get datacollections() {\n      let dataviewID = (this.settings || {}).dataviewID;\n      if (!dataviewID) return [];\n\n      let dvList = dataviewID.split(\",\") || [];\n\n      return this.AB.datacollections((dv) => dvList.indexOf(dv.id) > -1) || [];\n   }\n};\n","const ABView = require(\"../../platform/views/ABView\");\n\nconst ABViewFormButtonPropertyComponentDefaults = {\n   includeSave: true,\n   saveLabel: \"\",\n   includeCancel: false,\n   cancelLabel: \"\",\n   includeReset: false,\n   resetLabel: \"\",\n   afterCancel: null,\n   alignment: \"right\",\n   isDefault: false, // mark default button of form widget\n};\n\nconst ABViewFormButtonDefaults = {\n   key: \"button\",\n   // {string} unique key for this view\n\n   icon: \"square\",\n   // {string} fa-[icon] reference for this view\n\n   labelKey: \"ab.components.button\",\n   // {string} the multilingual label key for the class label\n};\n\nmodule.exports = class ABViewFormButtonCore extends ABView {\n   constructor(values, application, parent, defaultValues) {\n      super(\n         values,\n         application,\n         parent,\n         defaultValues || ABViewFormButtonDefaults\n      );\n   }\n\n   static common() {\n      return ABViewFormButtonDefaults;\n   }\n\n   static defaultValues() {\n      return ABViewFormButtonPropertyComponentDefaults;\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   toObj() {\n      // labels are multilingual values:\n      let labels = [];\n\n      if (this.settings.saveLabel) labels.push(\"saveLabel\");\n\n      if (this.settings.cancelLabel) labels.push(\"cancelLabel\");\n\n      if (this.settings.resetLabel) labels.push(\"resetLabel\");\n\n      this.unTranslate(this.settings, this.settings, labels);\n\n      let result = super.toObj();\n\n      return result;\n   }\n\n   fromValues(values) {\n      super.fromValues(values);\n\n      // labels are multilingual values:\n      let labels = [];\n\n      if (this.settings.saveLabel) labels.push(\"saveLabel\");\n\n      if (this.settings.cancelLabel) labels.push(\"cancelLabel\");\n\n      if (this.settings.resetLabel) labels.push(\"resetLabel\");\n\n      this.unTranslate(this.settings, this.settings, labels);\n\n      this.settings.includeSave = JSON.parse(\n         this.settings.includeSave ||\n            ABViewFormButtonPropertyComponentDefaults.includeSave\n      );\n      this.settings.includeCancel = JSON.parse(\n         this.settings.includeCancel ||\n            ABViewFormButtonPropertyComponentDefaults.includeCancel\n      );\n      this.settings.includeReset = JSON.parse(\n         this.settings.includeReset ||\n            ABViewFormButtonPropertyComponentDefaults.includeReset\n      );\n\n      this.settings.isDefault = JSON.parse(\n         this.settings.isDefault ||\n            ABViewFormButtonPropertyComponentDefaults.isDefault\n      );\n   }\n\n   /**\n    * @method componentList\n    * return the list of components available on this view to display in the editor.\n    */\n   componentList() {\n      return [];\n   }\n};\n","const ABViewFormComponent = require(\"../../platform/views/ABViewFormComponent\");\n\nconst ABViewFormCheckboxPropertyComponentDefaults = {};\n\nconst ABViewFormCheckboxDefaults = {\n   key: \"checkbox\", // {string} unique key for this view\n   icon: \"check-square-o\", // {string} fa-[icon] reference for this view\n   labelKey: \"ab.components.checkbox\", // {string} the multilingual label key for the class label\n};\n\nmodule.exports = class ABViewFormCheckboxCore extends ABViewFormComponent {\n   constructor(values, application, parent, defaultValues) {\n      super(\n         values,\n         application,\n         parent,\n         defaultValues || ABViewFormCheckboxDefaults\n      );\n   }\n\n   static common() {\n      return ABViewFormCheckboxDefaults;\n   }\n\n   static defaultValues() {\n      return ABViewFormCheckboxPropertyComponentDefaults;\n   }\n\n   /**\n    * @method componentList\n    * return the list of components available on this view to display in the editor.\n    */\n   componentList() {\n      return [];\n   }\n};\n","const ABView = require(\"../../platform/views/ABView\");\n\nconst ABViewFormFieldPropertyComponentDefaults = {\n   required: 0,\n   disable: 0,\n};\n\nmodule.exports = class ABViewFormComponentCore extends ABView {\n   // constructor(values, application, parent, defaultValues) {\n   //    super(values, application, parent, defaultValues);\n   // }\n\n   static defaultValues() {\n      return ABViewFormFieldPropertyComponentDefaults;\n   }\n\n   field() {\n      if (this.settings.objectId) {\n         let object = this.AB.objectByID(this.settings.objectId);\n         if (!object) return null;\n\n         return object.fieldByID(this.settings.fieldId);\n      } else {\n         let form = this.parentFormComponent();\n         if (form == null) return null;\n\n         let object;\n         if (form._currentObject) {\n            object = form._currentObject;\n         } else {\n            let datacollection = form.datacollection;\n            if (datacollection == null) return null;\n\n            object = datacollection.datasource;\n         }\n\n         if (object == null) return null;\n\n         let field = object.fieldByID(this.settings.fieldId);\n         return field;\n      }\n   }\n};\n","const ABViewFormComponent = require(\"../../platform/views/ABViewFormComponent\");\n\nconst ABViewFormConnectPropertyComponentDefaults = {\n   formView: \"\", // id of form to add new data\n   filterConditions: {\n      // array of filters to apply to the data table\n      glue: \"and\",\n      rules: [],\n   },\n   sortFields: [],\n   // objectWorkspace: {\n   //    filterConditions: {\n   //       // array of filters to apply to the data table\n   //       glue: \"and\",\n   //       rules: [],\n   //    },\n   // },\n   popupWidth: 700,\n   popupHeight: 450,\n};\n\nconst ABViewFormConnectDefaults = {\n   key: \"connect\", // {string} unique key for this view\n   icon: \"list-ul\", // {string} fa-[icon] reference for this view\n   labelKey: \"Connect\", // {string} the multilingual label key for the class label\n};\n\nmodule.exports = class ABViewFormConnectCore extends ABViewFormComponent {\n   constructor(values, application, parent, defaultValues) {\n      super(\n         values,\n         application,\n         parent,\n         defaultValues || ABViewFormConnectDefaults\n      );\n   }\n\n   static common() {\n      return ABViewFormConnectDefaults;\n   }\n\n   static defaultValues() {\n      return ABViewFormConnectPropertyComponentDefaults;\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      super.fromValues(values);\n\n      this.settings.filterConditions =\n         this.settings.filterConditions ||\n         ABViewFormConnectPropertyComponentDefaults.filterConditions;\n   }\n\n   /**\n    * @method componentList\n    * return the list of components available on this view to display in the editor.\n    */\n   componentList() {\n      return [];\n   }\n};\n","const ABViewContainer = require(\"../../platform/views/ABViewContainer\");\nconst ABViewFormComponent = require(\"../../platform/views/ABViewFormComponent\");\n\nconst ABRecordRule = require(\"../../rules/ABViewRuleListFormRecordRules\");\nconst ABSubmitRule = require(\"../../rules/ABViewRuleListFormSubmitRules\");\n\nconst ABViewFormDefaults = {\n   key: \"form\", // unique key identifier for this ABViewForm\n   icon: \"list-alt\", // icon reference: (without 'fa-' )\n   labelKey: \"Form\", // {string} the multilingual label key for the class label\n};\n\nconst ABViewFormPropertyComponentDefaults = {\n   dataviewID: null,\n   showLabel: true,\n   labelPosition: \"left\",\n   labelWidth: 120,\n   height: 200,\n   clearOnLoad: false,\n   clearOnSave: false,\n   displayRules: [],\n   editForm: \"none\", // The url pointer of ABViewForm\n\n   //\t[{\n   //\t\taction: {string},\n   //\t\twhen: [\n   //\t\t\t{\n   //\t\t\t\tfieldId: {UUID},\n   //\t\t\t\tcomparer: {string},\n   //\t\t\t\tvalue: {string}\n   //\t\t\t}\n   //\t\t],\n   //\t\tvalues: [\n   //\t\t\t{\n   //\t\t\t\tfieldId: {UUID},\n   //\t\t\t\tvalue: {object}\n   //\t\t\t}\n   //\t\t]\n   //\t}]\n   recordRules: [],\n\n   //\t[{\n   //\t\taction: {string},\n   //\t\twhen: [\n   //\t\t\t{\n   //\t\t\t\tfieldId: {UUID},\n   //\t\t\t\tcomparer: {string},\n   //\t\t\t\tvalue: {string}\n   //\t\t\t}\n   //\t\t],\n   //\t\tvalue: {string}\n   //\t}]\n   submitRules: [],\n};\n\nmodule.exports = class ABViewFormCore extends ABViewContainer {\n   constructor(values, application, parent, defaultValues) {\n      super(values, application, parent, defaultValues || ABViewFormDefaults);\n   }\n\n   static common() {\n      return ABViewFormDefaults;\n   }\n\n   static defaultValues() {\n      return ABViewFormPropertyComponentDefaults;\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      super.fromValues(values);\n\n      this.settings.labelPosition =\n         this.settings.labelPosition ||\n         ABViewFormPropertyComponentDefaults.labelPosition;\n\n      // convert from \"0\" => true/false\n      this.settings.showLabel = JSON.parse(\n         this.settings.showLabel != null\n            ? this.settings.showLabel\n            : ABViewFormPropertyComponentDefaults.showLabel\n      );\n      this.settings.clearOnLoad = JSON.parse(\n         this.settings.clearOnLoad != null\n            ? this.settings.clearOnLoad\n            : ABViewFormPropertyComponentDefaults.clearOnLoad\n      );\n      this.settings.clearOnSave = JSON.parse(\n         this.settings.clearOnSave != null\n            ? this.settings.clearOnSave\n            : ABViewFormPropertyComponentDefaults.clearOnSave\n      );\n\n      // convert from \"0\" => 0\n      this.settings.labelWidth = parseInt(\n         this.settings.labelWidth == null\n            ? ABViewFormPropertyComponentDefaults.labelWidth\n            : this.settings.labelWidth\n      );\n      this.settings.height = parseInt(\n         this.settings.height == null\n            ? ABViewFormPropertyComponentDefaults.height\n            : this.settings.height\n      );\n   }\n\n   // Use this function in kanban\n   objectLoad(object) {\n      this._currentObject = object;\n   }\n\n   /**\n    * @method componentList\n    * return the list of components available on this view to display in the editor.\n    */\n   componentList() {\n      var viewsToAllow = [\"label\", \"layout\", \"button\", \"text\"],\n         allComponents = this.application.viewAll();\n\n      return allComponents.filter((c) => {\n         return viewsToAllow.indexOf(c.common().key) > -1;\n      });\n   }\n\n   /**\n    * @method fieldComponents()\n    *\n    * return an array of all the ABViewFormField children\n    *\n    * @param {fn} filter  \ta filter fn to return a set of ABViewFormField that this fn\n    *\t\t\t\t\t\treturns true for.\n    * @return {array} \tarray of ABViewFormField\n    */\n   fieldComponents(filter) {\n      const flattenComponents = (views) => {\n         let components = [];\n\n         views.forEach((v) => {\n            if (v == null) return;\n\n            components.push(v);\n\n            if (v._views?.length) {\n               components = components.concat(flattenComponents(v._views));\n            }\n         });\n\n         return components;\n      };\n\n      if (this._views?.length) {\n         const allComponents = flattenComponents(this._views);\n\n         if (filter == null) {\n            filter = (comp) => comp instanceof ABViewFormComponent;\n         }\n\n         return allComponents.filter(filter);\n      } else {\n         return [];\n      }\n   }\n\n   addFieldToForm(field, yPosition) {\n      if (field == null) return;\n\n      var fieldComponent = field.formComponent();\n      if (fieldComponent == null) return;\n\n      var newView = fieldComponent.newInstance(this.application, this);\n      if (newView == null) return;\n\n      // set settings to component\n      newView.settings = newView.settings || {};\n      newView.settings.fieldId = field.id;\n      // TODO : Default settings\n\n      if (yPosition != null) newView.position.y = yPosition;\n\n      // add a new component\n      this._views.push(newView);\n\n      return newView;\n   }\n\n   get RecordRule() {\n      let object = this.datacollection.datasource;\n\n      if (this._recordRule == null) {\n         this._recordRule = new ABRecordRule();\n      }\n\n      this._recordRule.formLoad(this);\n      this._recordRule.fromSettings(this.settings.recordRules);\n      this._recordRule.objectLoad(object);\n\n      return this._recordRule;\n   }\n\n   doRecordRulesPre(rowData) {\n      return this.RecordRule.processPre({ data: rowData, form: this });\n   }\n\n   doRecordRules(rowData) {\n      // validate for record rules\n      if (rowData) {\n         let object = this.datacollection.datasource;\n         let ruleValidator = object.isValidData(rowData);\n         let isUpdatedDataValid = ruleValidator.pass();\n         if (!isUpdatedDataValid) {\n            console.error(\"Updated data is invalid.\", { rowData: rowData });\n            return Promise.reject(new Error(\"Updated data is invalid.\"));\n         }\n      }\n\n      return this.RecordRule.process({ data: rowData, form: this });\n   }\n\n   doSubmitRules(rowData) {\n      var object = this.datacollection.datasource;\n\n      var SubmitRules = new ABSubmitRule();\n      SubmitRules.formLoad(this);\n      SubmitRules.fromSettings(this.settings.submitRules);\n      SubmitRules.objectLoad(object);\n\n      return SubmitRules.process({ data: rowData, form: this });\n   }\n};\n","const ABViewFormComponent = require(\"../../platform/views/ABViewFormComponent\");\n\nconst ABViewFormCustomPropertyComponentDefaults = {};\n\nconst ABViewFormCustomDefaults = {\n   key: \"fieldcustom\",\n   // {string} unique key for this view\n   icon: \"object-group\",\n   // {string} fa-[icon] reference for this view\n   labelKey: \"ab.components.custom\",\n   // {string} the multilingual label key for the class label\n};\n\nmodule.exports = class ABViewFormCustom extends ABViewFormComponent {\n   constructor(values, application, parent, defaultValues) {\n      super(\n         values,\n         application,\n         parent,\n         defaultValues || ABViewFormCustomDefaults\n      );\n   }\n\n   static common() {\n      return ABViewFormCustomDefaults;\n   }\n\n   static defaultValues() {\n      return ABViewFormCustomPropertyComponentDefaults;\n   }\n\n   /**\n    * @method componentList\n    * return the list of components available on this view to display in the editor.\n    */\n   componentList() {\n      return [];\n   }\n};\n","const ABViewFormComponent = require(\"../../platform/views/ABViewFormComponent\");\n\nconst ABViewFormDatepickerPropertyComponentDefaults = {\n   timepicker: false,\n};\n\nconst ABViewFormDatepickerDefaults = {\n   key: \"datepicker\", // {string} unique key for this view\n   icon: \"calendar\", // {string} fa-[icon] reference for this view\n   labelKey: \"ab.components.datepicker\", // {string} the multilingual label key for the class label\n};\n\nmodule.exports = class ABViewFormDatepickerCore extends ABViewFormComponent {\n   constructor(values, application, parent, defaultValues) {\n      super(\n         values,\n         application,\n         parent,\n         defaultValues || ABViewFormDatepickerDefaults\n      );\n   }\n\n   static common() {\n      return ABViewFormDatepickerDefaults;\n   }\n\n   static defaultValues() {\n      return ABViewFormDatepickerPropertyComponentDefaults;\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   /**\n    * @method componentList\n    * return the list of components available on this view to display in the editor.\n    */\n   componentList() {\n      return [];\n   }\n};\n","const ABViewFormComponent = require(\"../../platform/views/ABViewFormComponent\");\n\nconst ABViewFormNumberPropertyComponentDefaults = {\n   isStepper: 0,\n};\n\nconst ABViewFormNumberDefaults = {\n   key: \"numberbox\", // {string} unique key for this view\n   icon: \"hashtag\", // {string} fa-[icon] reference for this view\n   labelKey: \"ab.components.number\", // {string} the multilingual label key for the class label\n};\n\nmodule.exports = class ABViewFormNumberCore extends ABViewFormComponent {\n   constructor(values, application, parent, defaultValues) {\n      super(\n         values,\n         application,\n         parent,\n         defaultValues || ABViewFormNumberDefaults\n      );\n   }\n\n   static common() {\n      return ABViewFormNumberDefaults;\n   }\n\n   static defaultValues() {\n      return ABViewFormNumberPropertyComponentDefaults;\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABViewFormText instance\n    * into the values needed for saving.\n    *\n    * @return {json}\n    */\n   toObj() {\n      this.unTranslate(this, this, [\"label\", \"formLabel\"]);\n\n      var obj = super.toObj();\n      obj.views = []; // no subviews\n      return obj;\n   }\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      super.fromValues(values);\n\n      // if this is being instantiated on a read from the Property UI,\n      this.settings.isStepper =\n         this.settings.isStepper ||\n         ABViewFormNumberPropertyComponentDefaults.isStepper;\n\n      // convert from \"0\" => 0\n      this.settings.isStepper = parseInt(this.settings.isStepper);\n   }\n\n   /**\n    * @method componentList\n    * return the list of components available on this view to display in the editor.\n    */\n   componentList() {\n      return [];\n   }\n};\n","const ABViewFormCustom = require(\"../../platform/views/ABViewFormCustom\");\n\nconst ABViewFormReadonlyPropertyComponentDefaults = {};\n\nconst ABViewFormReadonlyDefaults = {\n   key: \"fieldreadonly\", // {string} unique key for this view\n   icon: \"calculator\", // {string} fa-[icon] reference for this view\n   labelKey: \"ab.components.readonly\", // {string} the multilingual label key for the class label\n};\n\nmodule.exports = class ABViewFormReadonly extends ABViewFormCustom {\n   constructor(values, application, parent, defaultValues) {\n      super(\n         values,\n         application,\n         parent,\n         defaultValues || ABViewFormReadonlyDefaults\n      );\n   }\n\n   static common() {\n      return ABViewFormReadonlyDefaults;\n   }\n\n   static defaultValues() {\n      return ABViewFormReadonlyPropertyComponentDefaults;\n   }\n\n   /**\n    * @method componentList\n    * return the list of components available on this view to display in the editor.\n    */\n   componentList() {\n      return [];\n   }\n};\n","const ABViewFormComponent = require(\"../../platform/views/ABViewFormComponent\");\n\nconst ABViewFormSelectMultiplePropertyComponentDefaults = {\n   type: \"multicombo\", // 'richselect' or 'radio'\n};\n\nconst ABSelectMultipleDefaults = {\n   key: \"selectmultiple\", // {string} unique key for this view\n   icon: \"list-ul\", // {string} fa-[icon] reference for this view\n   labelKey: \"ab.components.selectmultiple\", // {string} the multilingual label key for the class label\n};\n\nmodule.exports = class ABViewFormSelectMultipleCore extends ABViewFormComponent {\n   constructor(values, application, parent, defaultValues) {\n      super(\n         values,\n         application,\n         parent,\n         defaultValues || ABSelectMultipleDefaults\n      );\n   }\n\n   static common() {\n      return ABSelectMultipleDefaults;\n   }\n\n   static defaultValues() {\n      return ABViewFormSelectMultiplePropertyComponentDefaults;\n   }\n\n   /**\n    * @method componentList\n    * return the list of components available on this view to display in the editor.\n    */\n   componentList() {\n      return [];\n   }\n};\n","const ABViewFormComponent = require(\"../../platform/views/ABViewFormComponent\");\n\nconst ABViewFormSelectSinglePropertyComponentDefaults = {\n   type: \"richselect\", // 'richselect' or 'radio'\n};\n\nconst ABSelectSingleDefaults = {\n   key: \"selectsingle\", // {string} unique key for this view\n   icon: \"list-ul\", // {string} fa-[icon] reference for this view\n   labelKey: \"ab.components.selectsingle\", // {string} the multilingual label key for the class label\n};\n\nmodule.exports = class ABViewFormSelectSingleCore extends ABViewFormComponent {\n   constructor(values, application, parent, defaultValues) {\n      super(\n         values,\n         application,\n         parent,\n         defaultValues || ABSelectSingleDefaults\n      );\n   }\n\n   static common() {\n      return ABSelectSingleDefaults;\n   }\n\n   static defaultValues() {\n      return ABViewFormSelectSinglePropertyComponentDefaults;\n   }\n\n   /**\n    * @method componentList\n    * return the list of components available on this view to display in the editor.\n    */\n   componentList() {\n      return [];\n   }\n};\n","const ABViewFormComponent = require(\"../../platform/views/ABViewFormComponent\");\n\nconst ABViewFormTextboxPropertyComponentDefaults = {\n   type: \"single\", // 'single', 'multiple' or 'rich'\n};\n\nconst ABViewFormTextboxDefaults = {\n   key: \"textbox\", // {string} unique key for this view\n   icon: \"i-cursor\", // {string} fa-[icon] reference for this view\n   labelKey: \"ab.components.textbox\", // {string} the multilingual label key for the class label\n};\n\nmodule.exports = class ABViewFormTextboxCore extends ABViewFormComponent {\n   constructor(values, application, parent, defaultValues) {\n      super(\n         values,\n         application,\n         parent,\n         defaultValues || ABViewFormTextboxDefaults\n      );\n   }\n\n   static common() {\n      return ABViewFormTextboxDefaults;\n   }\n\n   static defaultValues() {\n      return ABViewFormTextboxPropertyComponentDefaults;\n   }\n\n   /**\n    * @method componentList\n    * return the list of components available on this view to display in the editor.\n    */\n   componentList() {\n      return [];\n   }\n};\n","const ABViewFormCustom = require(\"../../platform/views/ABViewFormCustom\");\n\nconst ABViewFormTreePropertyComponentDefaults = {};\n\nconst ABTreeDefaults = {\n   key: \"formtree\", // {string} unique key for this view\n   icon: \"sitemap\", // {string} fa-[icon] reference for this view\n   labelKey: \"ab.components.tree\", // {string} the multilingual label key for the class label\n};\n\nmodule.exports = class ABViewFormTreeCore extends ABViewFormCustom {\n   constructor(values, application, parent, defaultValues) {\n      super(values, application, parent, defaultValues || ABTreeDefaults);\n   }\n\n   static common() {\n      return ABTreeDefaults;\n   }\n\n   static defaultValues() {\n      return ABViewFormTreePropertyComponentDefaults;\n   }\n\n   /**\n    * @method componentList\n    * return the list of components available on this view to display in the editor.\n    */\n   componentList() {\n      return [];\n   }\n};\n","const ABViewWidget = require(\"../../platform/views/ABViewWidget\");\n\nconst ABViewGanttPropertyComponentDefaults = {\n   dataviewID: \"\",\n   // {string}\n   // {ABDatacollection.id} of the datacollection that contains the data for\n   // the Gantt chart.\n\n   titleFieldID: \"\",\n   // {string}\n   // {ABFieldXXX.id} of the field that contains the value of the title\n   // ABFieldString, ABFieldLongText\n\n   startDateFieldID: \"\",\n   // {string}\n   // {ABFieldDate.id} of the field that contains the start date\n\n   endDateFieldID: \"\",\n   // {string}\n   // {ABFieldDate.id} of the field that contains the end date\n\n   durationFieldID: \"\",\n   // {string}\n   // {ABFieldNumber.id} of the field that contains the duration\n\n   progressFieldID: \"\",\n   // {string}\n   // {ABFieldNumber.id} of the field that marks the progress\n\n   notesFieldID: \"\",\n   // {string}\n   // {ABFieldXXX.id} of the field that contains the value of the title\n   // ABFieldString, ABFieldLongText\n};\n\nconst ABViewDefaults = {\n   key: \"gantt\", // {string} unique key for this view\n   icon: \"tasks\", // {string} fa-[icon] reference for this view\n   labelKey: \"Gantt\", // {string} the multilingual label key for the class label\n};\n\nmodule.exports = class ABViewGanttCore extends ABViewWidget {\n   /**\n    * @param {obj} values  key=>value hash of ABView values\n    * @param {ABApplication} application the application object this view is under\n    * @param {ABViewWidget} parent the ABViewWidget this view is a child of. (can be null)\n    */\n   constructor(values, application, parent, defaultValues) {\n      super(values, application, parent, defaultValues || ABViewDefaults);\n   }\n\n   static common() {\n      return ABViewDefaults;\n   }\n\n   static defaultValues() {\n      return ABViewGanttPropertyComponentDefaults;\n   }\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      super.fromValues(values);\n\n      Object.keys(ABViewGanttPropertyComponentDefaults).forEach((k) => {\n         this.settings[k] =\n            this.settings[k] || ABViewGanttPropertyComponentDefaults[k];\n      });\n   }\n\n   /**\n    * @method componentList\n    * return the list of components available on this view to display in the editor.\n    */\n   componentList() {\n      return [];\n   }\n};\n","const ABViewWidget = require(\"../../platform/views/ABViewWidget\");\n\nconst ABViewGridPropertyComponentDefaults = {\n   label: \"\",\n   // {string}\n   // label is required and you can add more if the component needs them\n\n   // format:0  \t// 0 - normal, 1 - title, 2 - description\n   dataviewID: \"\",\n   // {uuid}\n   // uuid of ABDataCollection that drives the data for our Grid\n\n   padding: 17,\n   // {int}\n   // the default padding surrounding the component\n\n   showToolbar: 1,\n   // {bool}\n   // do we show our toolbar?\n\n   isEditable: 0,\n   // {bool}\n   // do we allow editing in the grid?\n\n   massUpdate: 0,\n   // {bool}\n   // do we allow the Mass Update capability? (row checkboxes and the\n   // MassUpdate popup)\n\n   allowDelete: 0,\n   // {bool}\n   // do we allow deleting multiple rows at a time? Mass Delete.\n\n   // isFilterable:0,\n\n   isSortable: 1,\n   // {bool}\n   // do we allow the sort options.\n\n   isExportable: 0,\n   // {bool}\n   // do we enable the webix export from grid capabilities?\n\n   // linkedObject:'',\n   // linkedField:'',\n   // linkedPage:'',\n   // linkedPageView:'',\n   // linkedEditPage:'',\n   // linkedEditPageForm:'',\n\n   detailsPage: \"\",\n   // {ABViewPage.id}\n   // the ABViewPage that has the details component.\n\n   detailsTab: \"\",\n   // {ABViewTab.id}\n   // the ABViewTab component, that has the details component.\n   // NOTE: if your details is embedded on a TAB, we need both the\n   // .detailsPage & .detailsTab to successfully show the item.\n\n   editPage: \"\",\n   // {ABViewPage.id}\n   // the ABViewPage that has the edit component.\n\n   editTab: \"\",\n   // {ABViewTab.id}\n   // the ABViewTab component, that has the edit component.\n   // NOTE: if your editor is embedded on a TAB, we need both the\n   // .editPage & .editTab to successfully show the form.\n\n   trackView: 0,\n   // {bool}\n   // Do we offer the ability to track changes to this object/row?\n\n   frozenColumnID: \"\",\n   // {ABField.id}\n   // id of column you want to stop freezing the left hand side at.\n\n   hiddenFields: [],\n   // {array}  [ ABField.id, ABField.id, ... ]\n   // array of [ids] to add hidden:true to\n\n   summaryColumns: [],\n   // {array}  [ ABField.id, ABField.id, ... ]\n   // array of [ids] to add the SUM footer to\n\n   countColumns: [],\n   // {array}  [ ABField.id, ABField.id, ... ]\n   // array of [ids] to add the Count footer to\n\n   // TODO: get rid of objectWorkspace!\n   objectWorkspace: {\n      // sortFields:[], // array of columns with their sort configurations\n      // filterConditions:[], // array of filters to apply to the data table\n      frozenColumnID: \"\", // id of column you want to stop freezing\n      hiddenFields: [], // array of [ids] to add hidden:true to\n      summaryColumns: [],\n      countColumns: [],\n   },\n   gridFilter: {\n      filterOption: 1,\n      userFilterPosition: \"toolbar\",\n      isGlobalToolbar: 1,\n   },\n   // summaryFields: [], // array of [field ids] to add the summary column in footer\n   // countFields: [], // array of [field ids] to add the summary column in footer\n\n   height: 0,\n   // {int}\n   // The Height of our Grid.\n   // See ../views/ABViewDataview.js\n\n   hideHeader: 0,\n   labelAsField: 0,\n   hideButtons: 0,\n   groupBy: \"\", // id of field\n\n   // TODO: add to ABDesigner.interface design:\n   columnConfig: [],\n   // {array} [ {columnHeader}, {columnHeader} ... ]\n   // An array of column headers for the grid to display. These should\n   // be generated at Design time, and can allow the designer to ORDER the\n   // columns, assign column widths, fillspace, etc...\n   //    {columnHeader}\n   //    The minimum amount of information a Grid needs for it's customization\n   //    .id {string} ABField.columnName\n   //    .fieldId {string} ABField.id\n   //    .width {int}\n   //    .fillspace {bool}\n   //    .minwidth\n   //\n   //    When displaying column headers, we will ask the\n   //    CurrentObject.columnHeaders(), and then modify them with our settings\n   //    here.\n\n   saveLocal: 1,\n   // {bool}\n   // Allow saving of local changes to our grid display. This will enable\n   // a user to modify the Grid display locally.\n};\n\nconst ABViewDefaults = {\n   key: \"grid\", // {string} unique key for this view\n   icon: \"table\", // {string} fa-[icon] reference for this view\n   labelKey: \"Grid\", // {string} the multilingual label key for the class label\n};\n\n/**\n * @function settingsDefault()\n * Verifies a given field is set and if not, defaults to what we havein our\n * ABViewGridPropertyComponentDefaults.\n * NOTE: use this fn() for values that are NOT TRUTHY ... so not for numeric\n * 1 or 0.\n * @param {hash} base\n *        The current settings value hash.\n * @param {string} field\n *        The parameter we are checking.\n */\nfunction settingsDefault(base, field) {\n   if (typeof base[field] == \"undefined\") {\n      base[field] = ABViewGridPropertyComponentDefaults[field];\n      return;\n   }\n   base[field] = base[field] || ABViewGridPropertyComponentDefaults[field];\n}\n\n/**\n * @function settingsDefaultJSON()\n * Verifies a given field is set and if not, defaults to what we havein our\n * ABViewGridPropertyComponentDefaults.\n * NOTE: use this fn() for values that ARE TRUTHY ... so for numeric 1 or 0\n * @param {hash} base\n *        The current settings value hash.\n * @param {string} field\n *        The parameter we are checking.\n */\nfunction settingsDefaultJSON(base, field) {\n   try {\n      base[field] = JSON.parse(base[field]);\n   } catch (e) {\n      base[field] = ABViewGridPropertyComponentDefaults[field];\n   }\n}\n\nmodule.exports = class ABViewGridCore extends ABViewWidget {\n   /**\n    * @param {obj} values  key=>value hash of ABView values\n    * @param {ABApplication} application the application object this view is under\n    * @param {ABViewWidget} parent the ABViewWidget this view is a child of. (can be null)\n    */\n   constructor(values, application, parent, defaultValues) {\n      super(values, application, parent, defaultValues || ABViewDefaults);\n   }\n\n   static common() {\n      return ABViewDefaults;\n   }\n\n   static defaultValues() {\n      return ABViewGridPropertyComponentDefaults;\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      super.fromValues(values);\n\n      // if this is being instantiated on a read from the Property UI,\n      settingsDefault(this.settings, \"dataviewID\");\n\n      // Convert to boolean\n      // these values are sometimes 0 (number) at this point so the JSON.parse\n      // with the || (or) statement was always falling to the default so I am\n      // trying to parse the value...if it fails we use the default value\n      settingsDefaultJSON(this.settings, \"padding\");\n      settingsDefaultJSON(this.settings, \"showToolbar\");\n      settingsDefaultJSON(this.settings, \"isEditable\");\n      settingsDefaultJSON(this.settings, \"massUpdate\");\n      settingsDefaultJSON(this.settings, \"allowDelete\");\n      // this.settings.isFilterable = JSON.parse(this.settings.isFilterable || ABViewGridPropertyComponentDefaults.isFilterable);\n      settingsDefaultJSON(this.settings, \"isSortable\");\n      settingsDefaultJSON(this.settings, \"isExportable\");\n      settingsDefaultJSON(this.settings, \"hideHeader\");\n      settingsDefaultJSON(this.settings, \"labelAsField\");\n      settingsDefaultJSON(this.settings, \"hideButtons\");\n      settingsDefaultJSON(this.settings, \"columnConfig\");\n      settingsDefaultJSON(this.settings, \"saveLocal\");\n\n      this.settings.gridFilter =\n         this.settings.gridFilter ||\n         ABViewGridPropertyComponentDefaults.gridFilter;\n\n      try {\n         this.settings.gridFilter.filterOption = JSON.parse(\n            this.settings.gridFilter.filterOption\n         );\n      } catch (e) {\n         this.settings.gridFilter.filterOption =\n            ABViewGridPropertyComponentDefaults.gridFilter.filterOption;\n      }\n\n      try {\n         this.settings.gridFilter.isGlobalToolbar = JSON.parse(\n            this.settings.gridFilter.isGlobalToolbar\n         );\n      } catch (e) {\n         this.settings.gridFilter.isGlobalToolbar =\n            ABViewGridPropertyComponentDefaults.gridFilter.isGlobalToolbar;\n      }\n\n      // this.settings.linkedObject = this.settings.linkedObject || ABViewGridPropertyComponentDefaults.linkedObject;\n      // this.settings.linkedField = this.settings.linkedField || ABViewGridPropertyComponentDefaults.linkedField;\n      // this.settings.linkedPage = this.settings.linkedPage || ABViewGridPropertyComponentDefaults.linkedPage;\n      // this.settings.linkedPageView = this.settings.linkedPageView || ABViewGridPropertyComponentDefaults.linkedPageView;\n      // this.settings.linkedEditPage = this.settings.linkedEditPage || ABViewGridPropertyComponentDefaults.linkedEditPage;\n      // this.settings.linkedEditPageForm = this.settings.linkedEditPageForm || ABViewGridPropertyComponentDefaults.linkedEditPageForm;\n\n      settingsDefault(this.settings, \"detailsPage\");\n      settingsDefault(this.settings, \"editPage\");\n      settingsDefault(this.settings, \"detailsTab\");\n      settingsDefault(this.settings, \"editTab\");\n      settingsDefaultJSON(this.settings, \"trackView\");\n\n      // TODO: remove objectworkspace!\n      // this.settings.objectWorkspace =\n      //    this.settings.objectWorkspace ||\n      //    ABViewGridPropertyComponentDefaults.objectWorkspace;\n\n      // if (typeof this.settings.objectWorkspace != \"undefined\") {\n      //    if (typeof this.settings.objectWorkspace.sortFields == \"undefined\")\n      //       this.settings.objectWorkspace.sortFields = [];\n      //    if (\n      //       typeof this.settings.objectWorkspace.filterConditions == \"undefined\"\n      //    )\n      //       this.settings.objectWorkspace.filterConditions = [];\n      //    if (typeof this.settings.objectWorkspace.frozenColumnID == \"undefined\")\n      //       this.settings.objectWorkspace.frozenColumnID = \"\";\n      //    if (typeof this.settings.objectWorkspace.hiddenFields == \"undefined\")\n      //       this.settings.objectWorkspace.hiddenFields = [];\n      //    if (typeof this.settings.objectWorkspace.summaryColumns == \"undefined\")\n      //       this.settings.objectWorkspace.summaryColumns = [];\n      //    if (typeof this.settings.objectWorkspace.countColumns == \"undefined\")\n      //       this.settings.objectWorkspace.countColumns = [];\n      // }\n\n      var owFields = [\n         \"sortFields\",\n         \"filterConditions\",\n         \"frozenColumnID\",\n         \"hiddenFields\",\n         \"summaryColumns\",\n         \"countColumns\",\n      ];\n      // Transition: if we have an .objectWorkspace, copy those values in here:\n      if (this.settings.objectWorkspace) {\n         owFields.forEach((f) => {\n            this.settings[f] = this.settings.objectWorkspace[f];\n         });\n      }\n\n      // make sure they have actual default values now.\n      owFields.forEach((f) => {\n         settingsDefault(this.settings, f);\n      });\n\n      // we are not allowed to have sub views:\n      this._views = [];\n   }\n\n   /**\n    * @method componentList\n    * return the list of components available on this view to display in the editor.\n    */\n   componentList() {\n      return [];\n   }\n\n   removeField(field, cb) {\n      let shouldSave = false;\n\n      // check to see if there is a frozenColumnID and if it matches the\n      // deleted field\n      if (this.settings?.frozenColumnID == field.columnName) {\n         // remove the column name from the frozen column id\n         this.settings.frozenColumnID = \"\";\n         // flag the object to be saved later\n         shouldSave = true;\n      }\n\n      // check to see if there are hidden fields\n      if (this.settings.hiddenFields?.length) {\n         // find if the deleted field is in the array\n         let index = this.settings.hiddenFields.indexOf(field.columnName);\n         // if so splice it out of the array\n         if (index > -1) {\n            this.settings.hiddenFields.splice(index, 1);\n            // flag the object to be saved later\n            shouldSave = true;\n         }\n      }\n\n      // check to see if there are hidden fields\n      if (this.settings.summaryColumns?.length) {\n         // find if the deleted field is in the array\n         let index = this.settings.summaryColumns.indexOf(field.id);\n         // if so splice it out of the array\n         if (index > -1) {\n            this.settings.summaryColumns.splice(index, 1);\n            // flag the object to be saved later\n            shouldSave = true;\n         }\n      }\n\n      // check to see if there are hidden fields\n      if (this.settings.countColumns?.length) {\n         // find if the deleted field is in the array\n         let index = this.settings.countColumns.indexOf(field.id);\n         // if so splice it out of the array\n         if (index > -1) {\n            this.settings.countColumns.splice(index, 1);\n            // flag the object to be saved later\n            shouldSave = true;\n         }\n      }\n      // if settings were changed call the callback\n\n      cb(null, shouldSave);\n   }\n\n   copyUpdateProperyList() {\n      return [\"detailsPage\", \"detailsTab\", \"editPage\", \"editTab\"];\n   }\n};\n","const ABViewWidget = require(\"../../platform/views/ABViewWidget\");\n\nconst ABViewImagePropertyComponentDefaults = {\n   filename: \"\",\n   width: 200,\n   height: 100,\n};\n\nconst ABViewDefaults = {\n   key: \"image\", // {string} unique key for this view\n   icon: \"picture-o\", // {string} fa-[icon] reference for this view\n   labelKey: \"Image\", // {string} the multilingual label key for the class label\n};\n\nmodule.exports = class ABViewImageCore extends ABViewWidget {\n   constructor(values, application, parent, defaultValues) {\n      super(values, application, parent, defaultValues || ABViewDefaults);\n   }\n\n   static common() {\n      return ABViewDefaults;\n   }\n\n   static defaultValues() {\n      return ABViewImagePropertyComponentDefaults;\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      super.fromValues(values);\n\n      // convert from \"0\" => 0\n      this.settings.width = parseInt(\n         this.settings.width || ABViewImagePropertyComponentDefaults.width\n      );\n      this.settings.height = parseInt(\n         this.settings.height || ABViewImagePropertyComponentDefaults.height\n      );\n   }\n};\n","const ABViewWidget = require(\"../../platform/views/ABViewWidget\");\n\nconst ABViewKanbanPropertyComponentDefaults = {\n   dataviewID: null,\n   // {uuid}\n   // The ABDataCollection.uuid that we are using to store the data.\n   // NOTE: we actually use the DC to get the ABObject it is connected to.\n\n   editFields: [],\n   // {array}\n   // An array of {ABField.id} that determines which fields should show up\n   // in the editor.\n\n   verticalGroupingField: \"\",\n   // {ABField.id}\n   // the .id of the ABField instance that determines the Vertical Grouping\n   // of the Kanban.\n\n   horizontalGroupingField: \"\",\n   // {ABField.id}\n   // the .id of the ABField instance that determines the horizontal Grouping\n   // of the Kanban.\n\n   ownerField: \"\",\n   // {ABFieldUser.id}\n   // the .id of the ABFieldUser instance that determines the owner of the\n   // entries.\n\n   template: \"\",\n   // {json}\n   // The {ABViewText} definition used to display the template for this KanBan.\n   //\n   // A display template used for displaying the information in each Card. The\n   // template is a basic string with special placeholders:  {field.id}\n   // Given a row of data, the current object will scan the template for any\n   // placeholders matching one of it's fields, and then update it with the\n   // current value.\n};\n\nconst ABViewDefaults = {\n   key: \"kanban\",\n   // {string}\n   // unique key identifier for this ABViewForm\n\n   icon: \"columns\",\n   // {string}\n   // font-awesome icon reference: (without 'fa-' )\n\n   labelKey: \"Kanban\",\n   // {string}\n   // the multilingual label key\n   // NOTE: will be used as L(labelKey)\n};\n\nmodule.exports = class ABViewKanbanCore extends ABViewWidget {\n   constructor(values, application, parent, defaultValues) {\n      super(values, application, parent, defaultValues || ABViewDefaults);\n   }\n\n   fromValues(values) {\n      super.fromValues(values);\n\n      // set a default .template value\n      if (!this.settings.template) {\n         this.settings.template = { id: `${this.id}_template`, key: \"text\" };\n         this.settings.template.text = this.settings.textTemplate;\n      }\n\n      this.TextTemplate = this.AB.viewNewDetatched(this.settings.template);\n   }\n\n   toObj() {\n      var obj = super.toObj();\n      obj.settings.template = this.TextTemplate.toObj();\n      return obj;\n   }\n\n   static common() {\n      return ABViewDefaults;\n   }\n\n   static defaultValues() {\n      return ABViewKanbanPropertyComponentDefaults;\n   }\n};\n","const ABViewWidget = require(\"../../platform/views/ABViewWidget\");\n\nconst ABViewLabelPropertyComponentDefaults = {\n   label: \"\",\n   format: 0, // 0 - normal, 1 - title, 2 - description\n   alignment: \"left\",\n};\n\nconst ABViewDefaults = {\n   key: \"label\", // {string} unique key for this view\n   icon: \"font\", // {string} fa-[icon] reference for this view\n   labelKey: \"ab.components.label\", // {string} the multilingual label key for the class label\n};\n\nmodule.exports = class ABViewLabelCore extends ABViewWidget {\n   /**\n    * @param {obj} values  key=>value hash of ABView values\n    * @param {ABApplication} application the application object this view is under\n    * @param {ABViewWidget} parent the ABViewWidget this view is a child of. (can be null)\n    */\n   constructor(values, application, parent, defaultValues) {\n      super(values, application, parent, defaultValues || ABViewDefaults);\n   }\n\n   static common() {\n      return ABViewDefaults;\n   }\n\n   static defaultValues() {\n      return ABViewLabelPropertyComponentDefaults;\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABViewLabel instance\n    * into the values needed for saving.\n    *\n    * @return {json}\n    */\n   toObj() {\n      this.unTranslate(this, this, [\"label\", \"text\"]);\n\n      var obj = super.toObj();\n      obj.viewIDs = [];\n      return obj;\n   }\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      super.fromValues(values); // <-- this performs the translations\n\n      // if this is being instantiated on a read from the Property UI,\n      // .text is coming in under .settings.label\n      this.text = values.text || values.settings.text || \"*text\";\n\n      this.settings.format =\n         this.settings.format || ABViewLabelPropertyComponentDefaults.format;\n      this.settings.alignment =\n         this.settings.alignment ||\n         ABViewLabelPropertyComponentDefaults.alignment;\n\n      // we are not allowed to have sub views:\n      this._views = [];\n\n      // convert from \"0\" => 0\n      this.settings.format = parseInt(this.settings.format);\n\n      this.translate(this, this, [\"label\", \"text\"]);\n   }\n\n   /**\n    * @method componentList\n    * return the list of components available on this view to display in the editor.\n    */\n   componentList() {\n      return [];\n   }\n\n   //// Allow external interface to manipulate our settings:\n\n   /**\n    * @method formatNormal\n    * display text in the normal format.\n    */\n   formatNormal() {\n      this.settings.format = 0;\n   }\n\n   /**\n    * @method formatTitle\n    * display text as a Title.\n    */\n   formatTitle() {\n      this.settings.format = 1;\n   }\n\n   /**\n    * @method formatDescription\n    * display text as a description.\n    */\n   formatDescription() {\n      this.settings.format = 2;\n   }\n};\n","const ABViewContainer = require(\"../../platform/views/ABViewContainer\");\nconst ABViewWidget = require(\"../../platform/views/ABViewWidget\");\n\nconst PropertyComponentDefaults = {\n   label: \"\",\n   numColumns: 1, // The number of columns for this layout\n};\n\nconst ABViewDefaults = {\n   key: \"layout\", // {string} unique key for this view\n   icon: \"columns\", // {string} fa-[icon] reference for this view\n   labelKey: \"Layout\", // {string} the multilingual label key for the class label\n};\n\nmodule.exports = class ABViewLayoutCore extends ABViewWidget {\n   /**\n    * @param {obj} values  key=>value hash of ABView values\n    * @param {ABApplication} application the application object this view is under\n    * @param {ABView} parent the ABView this view is a child of. (can be null)\n    */\n   constructor(values, application, parent, defaultValues) {\n      super(values, application, parent, defaultValues || ABViewDefaults);\n   }\n\n   static common() {\n      return ABViewDefaults;\n   }\n\n   static defaultValues() {\n      return PropertyComponentDefaults;\n   }\n\n   /**\n    * @method addColumn\n    * method to actually add a new ABView as one of our columns.\n    * This is called by the static .addView() method.\n    */\n   addColumn() {\n      this._views.push(\n         this.application.viewNew(\n            {\n               key: ABViewContainer.common().key,\n            },\n            this.application,\n            this\n         )\n      );\n   }\n\n   /**\n    * @method componentList\n    * return the list of components available on this view to display in the editor.\n    * @param {bool} isEdited  is this component currently in the Interface Editor\n    * @return {array} of ABView objects.\n    */\n   componentList(isEdited) {\n      if (isEdited) {\n         // if the layout component is being edited in the editor (isEdited == true)\n         // then we return [];\n         return [];\n      } else {\n         // the layout view doesn't care what components are offered, it get's\n         // the list from it's parent view.\n         // ## NOTE: layout views should not be root views.\n         if (this.parent) {\n            return this.parent.componentList(false);\n         } else {\n            return [];\n         }\n      }\n   }\n};\n","const ABViewWidget = require(\"../../platform/views/ABViewWidget\");\n\nconst ABViewListPropertyComponentDefaults = {\n   dataviewID: null,\n   field: null,\n   height: 0,\n};\n\nconst ABViewDefaults = {\n   key: \"list\", // {string} unique key for this view\n   icon: \"list-ul\", // {string} fa-[icon] reference for this view\n   labelKey: \"List\", // {string} the multilingual label key for the class label\n};\n\nmodule.exports = class ABViewLabelCore extends ABViewWidget {\n   constructor(values, application, parent, defaultValues) {\n      super(values, application, parent, defaultValues || ABViewDefaults);\n   }\n\n   static common() {\n      return ABViewDefaults;\n   }\n\n   static defaultValues() {\n      return ABViewListPropertyComponentDefaults;\n   }\n\n   field() {\n      var dv = this.datacollection;\n      if (!dv) return null;\n\n      var object = dv.datasource;\n      if (!object) return null;\n\n      return object.fields((f) => f.id == this.settings.field)[0];\n   }\n};\n","const ABViewWidget = require(\"../../platform/views/ABViewWidget\");\n\nconst ABViewMenuPropertyComponentDefaults = {\n   orientation: \"x\",\n   buttonStyle: \"ab-menu-default\",\n   menuAlignment: \"ab-menu-left\",\n   menuInToolbar: 1,\n   menuPadding: 10,\n   menuTheme: \"bg_gray\",\n   menuPosition: \"left\",\n   menuTextLeft: \"\",\n   menuTextRight: \"\",\n   menuTextCenter: \"\",\n   // [\n   // \t\t{\n   //\t\t\tpageId: uuid,\n   //\t\t\ttabId: uuid,\n   //\t\t\ttype: string, // \"page\", \"tab\"\n   //\t\t\tisChecked: bool,\n   //\t\t\taliasname: string,\n   //\t\t\ttranslations: []\n   //\t\t}\n   // ]\n   pages: [],\n   order: [],\n};\n\nconst ABMenuDefaults = {\n   key: \"menu\", // {string} unique key for this view\n   icon: \"th-large\", // {string} fa-[icon] reference for this view\n   labelKey: \"Menu\", // {string} the multilingual label key for the class label\n};\n\nmodule.exports = class ABViewMenuCore extends ABViewWidget {\n   /**\n    * @param {obj} values  key=>value hash of ABView values\n    * @param {ABApplication} application the application object this view is under\n    * @param {ABViewWidget} parent the ABViewWidget this view is a child of. (can be null)\n    */\n   constructor(values, application, parent, defaultValues) {\n      super(values, application, parent, defaultValues || ABMenuDefaults);\n   }\n\n   static common() {\n      return ABMenuDefaults;\n   }\n\n   static defaultValues() {\n      return ABViewMenuPropertyComponentDefaults;\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABViewMenu instance\n    * into the values needed for saving.\n    *\n    * @return {json}\n    */\n   toObj() {\n      this.unTranslate(this, this, [\n         \"menuTextLeft\",\n         \"menuTextCenter\",\n         \"menuTextRight\",\n      ]);\n      if (this.settings.pages) {\n         this.settings.pages.forEach((page) => {\n            this.unTranslate(page, page, [\"aliasname\"]);\n         });\n      }\n\n      var obj = super.toObj();\n      obj.viewIDs = [];\n      return obj;\n   }\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      super.fromValues(values);\n\n      this.translate(this, this, [\n         \"menuTextLeft\",\n         \"menuTextCenter\",\n         \"menuTextRight\",\n      ]);\n\n      this.settings.pages =\n         this.settings.pages || ABViewMenuPropertyComponentDefaults.pages;\n\n      for (var i = 0; i < this.settings.pages.length; i++) {\n         var page = this.settings.pages[i];\n         if (page instanceof Object) {\n            page.isChecked = JSON.parse(page.isChecked || false);\n\n            this.translate(page, page, [\"aliasname\"]);\n         }\n         // Compatible with old data\n         else if (typeof page == \"string\") {\n            this.settings.pages[i] = {\n               pageId: page,\n               isChecked: true,\n            };\n         }\n      }\n   }\n\n   /**\n    * @method componentList\n    * return the list of components available on this view to display in the editor.\n    */\n   componentList() {\n      return [];\n   }\n\n   ClearPagesInView(view) {\n      // clear menu items\n      if (view && view.count() > 1) {\n         view.find({}).forEach((item) => {\n            view.remove(item.id);\n         });\n      }\n   }\n\n   AddPagesToView(view, pages) {\n      if (!view || !pages) return;\n\n      (pages || []).forEach((displayPage) => {\n         if (displayPage.isChecked) {\n            let existsPage = this.application.pages(\n               (p) => p.id == displayPage.pageId,\n               true\n            )[0];\n            if (!existsPage) return;\n\n            var pageAccessLevel = existsPage.getUserAccess();\n            if (pageAccessLevel == 0) return;\n\n            if (displayPage.tabId) {\n               let existsTab = this.application.views(\n                  (v) => v.id == displayPage.tabId,\n                  true\n               )[0];\n               if (!existsTab) return;\n\n               var tabAccessLevel = existsTab.getUserAccess();\n               if (tabAccessLevel == 0) return;\n            }\n\n            let label = this.getAliasname(displayPage);\n            // create a temporaty store for the menu item\n            var menuItem;\n            // check if page has a parent or not\n            if (displayPage.parent && displayPage.parent != \"0\") {\n               // if page has a parent attempt to grab its submenu\n               menuItem = view.getSubMenu(displayPage.parent);\n            } else {\n               // if the page doesn't have parent use the current menu\n               menuItem = view;\n            }\n            // if the menu item doesn't have a menu selected find it\n            if (menuItem == null) {\n               // get the menu item\n               var curMenu = view.getMenuItem(displayPage.parent);\n               // create a submenu placeholder\n               curMenu.submenu = [];\n               // update the menu with the new submenu included\n               view.refresh(displayPage.parent);\n               // get the submenu we just created\n               menuItem = view.getSubMenu(displayPage.parent);\n            }\n            if (menuItem.exists(displayPage.tabId || displayPage.pageId))\n               return;\n            // add a new item to the menu/submenu\n            menuItem.add(\n               {\n                  id: displayPage.tabId || displayPage.pageId,\n                  value: label,\n                  type: displayPage.type,\n                  pageId: displayPage.pageId,\n                  icon: displayPage.icon\n                     ? \"fa fa-fw fa-\" + displayPage.icon\n                     : \"\",\n               },\n               displayPage.position ? parseInt(displayPage.position) : 0\n            );\n         }\n      });\n   }\n\n   /**\n    * @method getAliasname\n    * @param pageInfo - an object in settings\n    * {\n    * \tpageId: uuid,\n    * \ttabId: uuid,\n    * \ttype: string, - \"page\" or \"tab\"\n    * \tisChecked: bool,\n    * \taliasname: string,\n    *\ttranslations: []\n    *}\n    *\n    * @return {string}\n    */\n   getAliasname(pageInfo) {\n      var lang = this.AB.Multilingual.currentLanguage();\n      var translation = pageInfo.translations.filter((t) => {\n         return t.language_code == lang;\n      });\n\n      var label = \"\";\n\n      if (translation.length) {\n         if (translation[0].aliasname) {\n            label = translation[0].aliasname;\n         } else if (translation[0].label) {\n            label = translation[0].label;\n         }\n      }\n\n      // Just in case there isn't one stored in the translations yet\n      if (!label && pageInfo.aliasname) {\n         label = pageInfo.aliasname;\n      }\n\n      // if alias is empty, then find label of page or tab\n      if (\n         !label ||\n         // remove [en] or [th] etc.\n         !label.replace(/\\[.{2,}\\]/g, \"\")\n      ) {\n         // first check to see if we are actually on a page\n         // if not recursivly look up for the nearest parent page\n         var pageId;\n         if (pageInfo.pageId) {\n            pageId = pageInfo.pageId;\n         } else {\n            pageId = this.getParentPageId(pageInfo);\n         }\n         // find label of the actual page\n         var page = this.application.pages((p) => p.id == pageId, true)[0];\n         if (page) {\n            // find label of the tab view\n            if (pageInfo.type == \"tab\" || pageInfo.key == \"viewcontainer\") {\n               var tabView = page.views(\n                  (v) => v.id == pageInfo.tabId || v.id == pageInfo.id,\n                  true\n               )[0];\n               if (tabView) {\n                  label = tabView.label;\n               }\n            } else {\n               label = page.label;\n            }\n         }\n      }\n\n      return label;\n   }\n\n   getParentPageId(currentView) {\n      if (currentView.key != \"page\") {\n         return this.getParentPageId(currentView.parent);\n      } else {\n         return currentView.id;\n      }\n   }\n\n   copy(lookUpIds, parent) {\n      return super.copy(lookUpIds, parent).then((result) => {\n         // update ids of page's settings\n         (result.settings.pages || []).forEach((p, i) => {\n            let page = result.settings.pages[i];\n\n            // Compatible with old data\n            if (typeof page == \"string\") {\n               result.settings.pages[i] = lookUpIds[page];\n            } else {\n               page.pageId = lookUpIds[page.pageId];\n               page.tabId = lookUpIds[page.tabId];\n            }\n         });\n\n         return result.save().then(() => {\n            return result;\n         });\n      });\n   }\n};\n","/*\n * ABViewPage\n *\n * An ABView that represents a \"Page\" in the system.\n *\n * Pages are\n *\t- allowed to be displayed in the interface list\n *\t- return a full list of components that can be added to the view editor\n *\n *\n */\n\nconst ABViewContainer = require(\"../../platform/views/ABViewContainer\");\n// var ABViewManager = require(\"../ABViewManager\");\n\n// function L(key, altText) {\n//     return AD.lang.label.getLabel(key) || altText;\n// }\n\nconst ABViewDefaults = {\n   key: \"page\", // unique key identifier for this ABView\n   icon: \"file\", // icon reference: (without 'fa-' )\n};\n\nconst ABPropertyComponentDefaults = {\n   type: \"page\", // 'page', 'popup' or 'reportPage'\n   popupWidth: 700,\n   popupHeight: 450,\n   pageWidth: null,\n   fixedPageWidth: 0,\n   pageBackground: \"ab-background-default\",\n};\n\nmodule.exports = class ABViewPageCore extends ABViewContainer {\n   constructor(values, application, parent, defaultValues) {\n      super(values, application, parent, defaultValues || ABViewDefaults);\n\n      // \t{\n      // \t\tid:'uuid',\t\t\t\t\t// uuid value for this obj\n      // \t\tkey:'viewKey',\t\t\t\t// unique key for this View Type\n      // \t\ticon:'font',\t\t\t\t// fa-[icon] reference for an icon for this View Type\n\n      //\t\tname: '',\t\t\t\t\t// unique page name\n\n      // \t\tlabel:'',\t\t\t\t\t// pulled from translation\n\n      //\t\tsettings: {\t\t\t\t\t// unique settings for the type of field\n      //\t\t},\n\n      //\t\ttranslations:[]\n      // \t}\n\n      this.parent = null; // will be set by the pageNew() that creates this obj.\n      // {obj} .parent\n      // this points to the ABView object that manages this object as a child.\n      // this param is shared across ABViews as well as ABViewPage, but has\n      // different implications ... so we default an ABViewPage.parent = null\n      // and the place that Creates the Page must assign the .parent externally.\n   }\n\n   static common() {\n      return ABViewDefaults;\n   }\n\n   static defaultValues() {\n      return ABPropertyComponentDefaults;\n   }\n\n   static getPageActionKey(view) {\n      return [\n         \"opstools\",\n         \"AB_\" + String(view.application.name).replace(/[^a-z0-9]/gi, \"\"),\n         String(view.name)\n            .replace(/[^a-z0-9]/gi, \"\")\n            .toLowerCase(),\n         \"view\",\n      ].join(\".\");\n   }\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABViewPage instance\n    * into the values needed for saving to the DB.\n    *\n    * @return {json}\n    */\n   toObj() {\n      var obj = super.toObj();\n\n      obj.name = this.name;\n\n      obj.myAppID = this.myAppID;\n\n      // icon of popup page\n      if (this.settings.type == \"popup\") obj.icon = \"clone\";\n\n      // set label of the page\n      if (!this.label || this.label == \"?label?\") obj.label = obj.name;\n\n      // compile our pages\n      obj.pageIDs = (this._pages || []).map((p) => p.id);\n\n      return obj;\n   }\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      super.fromValues(values);\n\n      // icon of popup page\n      if (values.settings.type == \"popup\") this.icon = \"clone\";\n\n      // set label of the page\n      if (!this.label || this.label == \"?label?\") this.label = this.name;\n\n      // track which application this Page belongs to:\n      this.myAppID = values.myAppID;\n      if (!this.myAppID && this.application) {\n         this.myAppID = this.application.id;\n      }\n\n      // now properly handle our sub pages.\n      var pages = [];\n      (values.pageIDs || []).forEach((id) => {\n         var def = this.AB.definitionByID(id);\n         if (def) {\n            pages.push(this.pageNew(def));\n         } else {\n            this.AB.error(\n               `App[${this.application.name}][${this.application.id}]->Page[${this.name}][${this.id}] referenced an unknown Page[${id}]`\n            );\n         }\n      });\n      this._pages = pages;\n\n      // the default columns of ABView is 1\n      this.settings.columns = this.settings.columns || 1;\n      this.settings.gravity = this.settings.gravity || [1];\n\n      // convert from \"0\" => 0\n   }\n\n   /**\n    * @method destroy()\n    *\n    * destroy the current instance of ABApplication\n    *\n    * also remove it from our _AllApplications\n    *\n    * @return {Promise}\n    */\n   destroy() {\n      return Promise.resolve()\n         .then(() => {\n            // When deleting an ABViewPage\n            // be sure to remove any of it's ABViewPages as well\n            // This cleans out any dangling ABDefinitions and cleans up the\n            // OpsPortal Permissions:\n\n            var allPageDeletes = [];\n            var allPages = this.pages();\n            this._pages = [];\n            // doing ._pages = [] prevents any of my updates when\n            // a sub-page is .destroy()ed\n\n            allPages.forEach((p) => {\n               allPageDeletes.push(p.destroy());\n            });\n            return Promise.all(allPageDeletes);\n         })\n         .then(() => {\n            var parent = this.parent || this.application;\n\n            return parent.pageRemove(this);\n         })\n         .then(() => {\n            return super.destroy();\n         });\n\n      // return new Promise((resolve, reject) => {\n      //    // verify we have been .save() before:\n      //    if (this.id) {\n      //       this.application\n      //          .viewDestroy(this)\n      //          .then(() => {\n      //             // remove the page in list\n      //             var parent = this.parent || this.application;\n      //             var remainingPages = parent.pages((p) => {\n      //                return p.id != this.id;\n      //             });\n      //             parent._pages = remainingPages;\n\n      //             resolve();\n      //          })\n      //          .catch(reject);\n      //    } else {\n      //       resolve(); // nothing to do really\n      //    }\n      // });\n   }\n\n   /**\n    * @method save()\n    * persist this instance of ABViewPage\n    * @return {Promise}\n    *         .resolve( {this} )\n    */\n   save() {\n      return Promise.resolve()\n         .then(() => {\n            // this creates our .id\n            return super.save();\n         })\n         .then(() => {\n            // now we can persist ourself in our parent\n            var parent = this.parent || this.application;\n\n            return parent.pageInsert(this);\n         })\n         .then(() => {\n            return this;\n         });\n   }\n\n   ///\n   /// Pages\n   ///\n\n   /**\n    * @method pages()\n    *\n    * return an array of all the ABViewPages for this ABViewPage.\n    *\n    * @param {fn} filter\t\ta filter fn to return a set of ABViewPages that this fn\n    *\t\t\t\t\t\t\treturns true for.\n    * @param {boolean} deep\tflag to find in sub pages\n    *\n    * @return {array}\t\t\tarray of ABViewPages\n    */\n   pages(filter = () => true, deep = false) {\n      var result = [];\n\n      // find into sub-pages recursively\n      if (filter && deep) {\n         if (this._pages && this._pages.length > 0) {\n            result = this._pages.filter(filter);\n\n            if (result.length < 1) {\n               this._pages.forEach((p) => {\n                  var subPages = p.pages(filter, deep);\n                  if (subPages && subPages.length > 0) {\n                     result = subPages;\n                  }\n               });\n            }\n         }\n      }\n      // find root pages\n      else {\n         result = this._pages.filter(filter);\n      }\n\n      return result;\n   }\n\n   /**\n    * @method pageInsert()\n    *\n    * save the given ABViewPage in our ._pages array and persist the current\n    * values if they changed.\n    *\n    * @param {ABViewPage} page The instance of the page to save.\n    * @return {Promise}\n    */\n   pageInsert(page) {\n      var isIncluded = this.pages((o) => o.id === page.id).length > 0;\n      if (!isIncluded) {\n         // if not already included, then add and save the Obj definition:\n         this._pages.push(page);\n         return this.save();\n      }\n\n      // Nothing was required so return\n      return Promise.resolve();\n   }\n\n   /**\n    * @method pageNew()\n    *\n    * return an instance of a new (unsaved) ABViewPage that is tied to this\n    * ABViewPage.\n    *\n    * NOTE: this new page is not included in our this.pages until a .save()\n    * is performed on the page.\n    *\n    * @return {ABViewPage}\n    */\n   pageNew(values) {\n      // make sure this is an ABViewPage description\n      values.key = ABViewDefaults.key;\n\n      // NOTE: this returns a new ABView component.\n      // when creating a new page, the 3rd param should be null, to signify\n      // the top level component.\n      var page = this.application.viewNew(values, this.application, null);\n      page.parent = this;\n      return page;\n   }\n\n   /**\n    * @method pageRemove()\n    *\n    * remove the given ABViewPage from our ._pages array and persist the current\n    * values.\n    *\n    * @param {ABViewPage} page The instance of the page to remove.\n    * @return {Promise}\n    */\n   pageRemove(page) {\n      var origLen = this._pages.length;\n      this._pages = this.pages(function (p) {\n         return p.id != page.id;\n      });\n\n      if (this._pages.length < origLen) {\n         return this.save();\n      }\n\n      // if we get here, then nothing changed so nothing to do.\n      return Promise.resolve();\n   }\n\n   /**\n    * @method urlView()\n    * return the url pointer for views in this application.\n    * @return {string}\n    */\n   urlPage() {\n      return this.urlPointer() + \"/_pages/\";\n   }\n\n   /**\n    * @method urlPointer()\n    * return the url pointer that references this view.  This url pointer\n    * should be able to be used by this.application.urlResolve() to return\n    * this view object.\n    * @return {string}\n    */\n   urlPointer() {\n      if (this.parent) {\n         return this.parent.urlPage() + this.id;\n      } else {\n         return this.application.urlPage() + this.id;\n      }\n   }\n\n   updateIcon(obj) {\n      // icon of page\n      if (obj.settings.type == \"popup\") {\n         obj.icon = \"clone\";\n      } else {\n         obj.icon = ABViewDefaults.icon;\n      }\n      return obj;\n   }\n\n   /**\n    * @method clone()\n    * clone the defintions of this ABViewPage object.\n    * @param {obj} lookUpIds\n    *        an { oldID : newID } lookup hash for converting ABView objects\n    *        and their setting pointers.\n    * @param {ABView*} parent\n    *        Which ABView should be connected as the parent object of this\n    *        copy.\n    * @return {obj}\n    *        defs of the copied ABView\n    */\n   clone(lookUpIds, parent) {\n      // initial new ids of pages and components\n      if (lookUpIds == null) {\n         // create a hash of { oldID : newID } of any sub Pages and Views.\n         lookUpIds = {};\n\n         let mapNewIdFn = (currView) => {\n            if (!lookUpIds[currView.id])\n               lookUpIds[currView.id] = this.AB.uuid();\n\n            if (currView.pages) {\n               currView.pages().forEach((p) => mapNewIdFn(p));\n            }\n\n            if (currView.views) {\n               currView.views().forEach((v) => mapNewIdFn(v));\n            }\n         };\n\n         // start map new ids\n         mapNewIdFn(this);\n      }\n\n      // copy\n      let result = super.clone(lookUpIds, parent);\n\n      // page's name should not be duplicate\n      result.name = null;\n\n      return result;\n   }\n\n   /**\n    * @method copy()\n    * create a new copy of this ABViewPage object. The resulting ABView should\n    * be identical in settings and all sub pages/views, but each new object\n    * is a unique view (different ids).\n    * @param {obj} lookUpIds\n    *        an { oldID : newID } lookup hash for converting ABView objects\n    *        and their setting pointers.\n    * @param {ABView*} parent\n    *        Which ABView should be connected as the parent object of this\n    *        copy.\n    * @return {Promise}\n    *        .resolved with the instance of the copied ABView\n    */\n   copy(lookUpIds, parent, options) {\n      // initial new ids of pages and components\n      if (lookUpIds == null) {\n         // create a hash of { oldID : newID } of any sub Pages and Views.\n         lookUpIds = {};\n\n         let mapNewIdFn = (currView) => {\n            if (!lookUpIds[currView.id])\n               lookUpIds[currView.id] = this.AB.uuid();\n\n            if (currView.pages) {\n               currView.pages().forEach((p) => mapNewIdFn(p));\n            }\n\n            if (currView.views) {\n               currView.views().forEach((v) => mapNewIdFn(v));\n            }\n         };\n\n         // start map new ids\n         mapNewIdFn(this);\n      }\n\n      // now continue with the default .copy()\n      return super.copy(lookUpIds, parent, options);\n   }\n};\n","const ABViewWidget = require(\"../../platform/views/ABViewWidget\");\n\nconst ABViewPivotPropertyComponentDefaults = {\n   dataviewID: null,\n   removeMissed: 0,\n   totalColumn: 0,\n   separateLabel: 0,\n   min: 0,\n   max: 0,\n   height: 0,\n};\n\nconst ABViewDefaults = {\n   key: \"pivot\", // {string} unique key for this view\n   icon: \"cube\", // {string} fa-[icon] reference for this view\n   labelKey: \"ab.components.pivot\", // {string} the multilingual label key for the class label\n};\n\nmodule.exports = class ABViewPivotCore extends ABViewWidget {\n   constructor(values, application, parent, defaultValues) {\n      super(values, application, parent, defaultValues || ABViewDefaults);\n   }\n\n   static common() {\n      return ABViewDefaults;\n   }\n\n   static defaultValues() {\n      return ABViewPivotPropertyComponentDefaults;\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      super.fromValues(values);\n\n      // Convert to boolean\n      this.settings.removeMissed = JSON.parse(\n         this.settings.removeMissed ||\n            ABViewPivotPropertyComponentDefaults.removeMissed\n      );\n      this.settings.totalColumn = JSON.parse(\n         this.settings.totalColumn ||\n            ABViewPivotPropertyComponentDefaults.totalColumn\n      );\n      this.settings.separateLabel = JSON.parse(\n         this.settings.separateLabel ||\n            ABViewPivotPropertyComponentDefaults.separateLabel\n      );\n      this.settings.min = JSON.parse(\n         this.settings.allowDelete || ABViewPivotPropertyComponentDefaults.min\n      );\n      this.settings.max = JSON.parse(\n         this.settings.max || ABViewPivotPropertyComponentDefaults.max\n      );\n\n      if (this.settings.structure && typeof this.settings.structure == \"string\")\n         this.settings.structure = JSON.parse(this.settings.structure);\n\n      // \"0\" -> 0\n      this.settings.height = parseInt(\n         this.settings.height || ABViewPivotPropertyComponentDefaults.height\n      );\n   }\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABViewLabel instance\n    * into the values needed for saving.\n    *\n    * @return {json}\n    */\n   toObj() {\n      var obj = super.toObj();\n\n      obj.views = [];\n      obj.settings = obj.settings || {};\n\n      if (this.settings.structure)\n         obj.settings.structure = JSON.stringify(this.settings.structure);\n\n      return obj;\n   }\n\n   /**\n    * @method componentList\n    * return the list of components available on this view to display in the editor.\n    */\n   componentList() {\n      return [];\n   }\n};\n","const ABViewWidget = require(\"../../platform/views/ABViewWidget\");\n\nconst ABViewReportManagerPropertyComponentDefaults = {\n   moduleList: [],\n   queryList: []\n};\n\nconst ABViewDefaults = {\n   key: \"reportsManager\", // {string} unique key for this view\n   icon: \"wpforms\", // {string} fa-[icon] reference for this view\n   labelKey: \"ab.components.reportsManager\" // {string} the multilingual label key for the class label\n};\n\nmodule.exports = class ABViewReportsManagerCore extends ABViewWidget {\n   constructor(values, application, parent, defaultValues) {\n      super(values, application, parent, defaultValues || ABViewDefaults);\n   }\n\n   static common() {\n      return ABViewDefaults;\n   }\n\n   static defaultValues() {\n      return ABViewReportManagerPropertyComponentDefaults;\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      super.fromValues(values);\n\n      this.settings.moduleList =\n         this.settings.moduleList ||\n         ABViewReportManagerPropertyComponentDefaults.moduleList;\n\n      this.settings.queryList =\n         this.settings.queryList ||\n         ABViewReportManagerPropertyComponentDefaults.queryList;\n   }\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABViewLabel instance\n    * into the values needed for saving.\n    *\n    * @return {json}\n    */\n   toObj() {\n      var obj = super.toObj();\n\n      obj.settings = obj.settings || {};\n\n      return obj;\n   }\n\n   /**\n    * @method componentList\n    * return the list of components available on this view to display in the editor.\n    */\n   componentList() {\n      return [];\n   }\n};\n\n","const ABViewWidget = require(\"../../platform/views/ABViewWidget\");\nconst ABViewContainer = require(\"../../platform/views/ABViewContainer\");\n\nconst ABViewTabPropertyComponentDefaults = {\n   height: 0,\n   minWidth: 0,\n   stackTabs: 0, // use sidebar view instead of tabview\n   darkTheme: 0, // set dark theme css or not\n   sidebarWidth: 200, // width of sidebar menu when stacking tabs\n   sidebarPos: \"left\", // the default position of sidebar\n   iconOnTop: 0, // do you want to put the icon above the text label?\n};\n\nconst ABViewTabDefaults = {\n   key: \"tab\", // {string} unique key for this view\n   icon: \"window-maximize\", // {string} fa-[icon] reference for this view\n   labelKey: \"Tab\", // {string} the multilingual label key for the class label\n};\n\nmodule.exports = class ABViewTabCore extends ABViewWidget {\n   /**\n    * @param {obj} values  key=>value hash of ABView values\n    * @param {ABApplication} application the application object this view is under\n    * @param {ABViewWidget} parent the ABViewWidget this view is a child of. (can be null)\n    */\n   constructor(values, application, parent, defaultValues) {\n      super(values, application, parent, defaultValues || ABViewTabDefaults);\n   }\n\n   static common() {\n      return ABViewTabDefaults;\n   }\n\n   static defaultValues() {\n      return ABViewTabPropertyComponentDefaults;\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      super.fromValues(values);\n\n      // convert from \"0\" => 0\n      this.settings.height = parseInt(this.settings.height);\n      this.settings.minWidth = parseInt(this.settings.minWidth || 0);\n      this.settings.stackTabs = parseInt(this.settings.stackTabs);\n      this.settings.darkTheme = parseInt(this.settings.darkTheme);\n      this.settings.sidebarWidth = parseInt(this.settings.sidebarWidth);\n      this.settings.sidebarPos = this.settings.sidebarPos;\n      this.settings.iconOnTop = parseInt(this.settings.iconOnTop);\n   }\n\n   addTab(tabName, tabIcon) {\n      return this.application\n         .viewNew(\n            {\n               key: ABViewContainer.common().key,\n               label: tabName,\n               tabicon: tabIcon,\n            },\n            this.application,\n            this\n         )\n         .save();\n   }\n\n   /**\n    * @method componentList\n    * return the list of components available on this view to display in the editor.\n    */\n   componentList() {\n      return [];\n   }\n};\n","const ABViewWidget = require(\"../../platform/views/ABViewWidget\");\n\nconst ABViewTextPropertyComponentDefaults = {\n   text: \"\",\n   // {string}\n   // A multilingual text template that is used to display a given set of\n   // values.\n\n   height: 0,\n   // {integer}\n   // The default height of this widget.\n\n   dataviewID: null,\n   // {uuid}\n   // The {ABDataCollection.id} of the datacollection this ABViewText is\n   // pulling data from.\n   // In most usage situations this ABView is tied to the data in an\n   // ABDataCollection.  However, it is possible for an ABObject to be\n   // directly assigned to the ABView, and that will be used instead.\n};\n\nconst ABViewDefaults = {\n   key: \"text\",\n   // {string}\n   // unique key for this view\n\n   icon: \"font\",\n   // {string}\n   // fa-[icon] reference for this view\n\n   labelKey: \"Text\",\n   // {string}\n   // the multilingual label key for the class label\n};\n\nmodule.exports = class ABViewTextCore extends ABViewWidget {\n   constructor(values, application, parent, defaultValues) {\n      super(values, application, parent, defaultValues || ABViewDefaults);\n\n      this._object = null;\n   }\n\n   static common() {\n      return ABViewDefaults;\n   }\n\n   static defaultValues() {\n      return ABViewTextPropertyComponentDefaults;\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABViewLabel instance\n    * into the values needed for saving.\n    *\n    * @return {json}\n    */\n   toObj() {\n      // NOTE: ABView auto translates/untranslates \"label\"\n      // add in any additional fields here:\n      this.unTranslate(this, this, [\"text\"]);\n\n      var obj = super.toObj();\n      obj.views = [];\n      return obj;\n   }\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      super.fromValues(values);\n\n      this.settings = this.settings || {};\n\n      // convert from \"0\" => 0\n      this.settings.height = parseInt(\n         this.settings.height || ABViewTextPropertyComponentDefaults.height\n      );\n\n      // if this is being instantiated on a read from the Property UI,\n      this.text = values.text || ABViewTextPropertyComponentDefaults.text;\n\n      // NOTE: ABView auto translates/untranslates \"label\"\n      // add in any additional fields here:\n      this.translate(this, this, [\"text\"]);\n   }\n\n   /**\n    * @method componentList\n    * return the list of components available on this view to display in the editor.\n    */\n   componentList() {\n      return [];\n   }\n\n   /**\n    * @property datacollection\n    * return ABDatacollection of this form\n    *\n    * @return {ABDatacollection}\n    */\n   get datacollection() {\n      if (this.parent?.key == \"dataview\") {\n         return this.AB.datacollectionByID(this.parent.settings.dataviewID);\n      } else {\n         return this.AB.datacollectionByID(this.settings.dataviewID);\n      }\n   }\n\n   fieldKey(field) {\n      let label = field.label || \"\";\n      label = label.replace(/\\(/g, \"\\\\(\");\n      label = label.replace(/\\)/g, \"\\\\)\");\n      return label;\n   }\n\n   displayText(val, componentID) {\n      var result = this.text;\n\n      let clearTemplateValue = (result) => {\n         return result.replace(/{(.*?)}/g, \"\");\n      };\n\n      var dv = this.datacollection;\n      // if (!dv) return clearTemplateValue(result);\n\n      var object = dv?.datasource ?? this._object;\n      if (!object) return clearTemplateValue(result);\n\n      const rowData = val || dv.getCursor() || {};\n\n      object.fields().forEach((f) => {\n         // add \\\\ in front of the regular expression special charactors\n         // let label = f.label || \"\";\n         // label = label.replace(/\\(/g, \"\\\\(\");\n         // label = label.replace(/\\)/g, \"\\\\)\");\n         let label = this.fieldKey(f);\n\n         var template = new RegExp(\"{\" + label + \"}\", \"g\");\n\n         // IDEA: I'd like to keep all the image url logic INSIDE the ABFieldImage\n         // object.  Is there some way we can simply call: f.imageTemplate(rowData)\n         // and parse the results for the url to display here?\n\n         var data = f.format(rowData);\n         if (f.key == \"image\") {\n            var fData = data;\n            data = f.urlImage(fData);\n\n            // Question: should we change f.urlImage() to return the defaultImageUrl\n            // if fData is \"\" and .useDefaultImage = true?\n\n            if (\n               !fData &&\n               f.settings.defaultImageUrl &&\n               f.settings.useDefaultImage\n            ) {\n               data = f.urlImage(f.settings.defaultImageUrl);\n\n               ////\n               //// James:  Revisit this and make sure we are handling things ok now.\n               // result = result.replace(\n               //    \"img\",\n               //    'img onload=\\'AD.comm.hub.publish(\"component.adjust\", {\"containerID\": \"' +\n               //       componentID +\n               //       \"\\\"});' \"\n               // );\n               // } else if (\n               //    fData != \"\" &&\n               //    result.indexOf(\"onload\") == -1 &&\n               //    componentID\n               // ) {\n               // result = result.replace(\n               //    \"img\",\n               //    'img onload=\\'AD.comm.hub.publish(\"component.adjust\", {\"containerID\": \"' +\n               //       componentID +\n               //       \"\\\"});' \"\n               // );\n            } else {\n               ////\n               //// James: It looks like this routine assumes the this.text template will\n               //// only have 1 <img> tag in it.  Is that necessarilly true?\n               ////\n               //// If NOT, then we need to rethink this next line:\n\n               result = result.replace(\n                  \"img\",\n                  \"img onerror='this.parentNode.removeChild(this);' \"\n               );\n            }\n         }\n\n         result = result.replace(template, data);\n      });\n\n      // Support {uuid} tag in tempalte\n      result = result.replace(/{PK}/g, rowData[object.PK()]);\n\n      return result;\n   }\n\n   objectLoad(object) {\n      this._object = object;\n   }\n};\n","const ABView = require(\"../../platform/views/ABView\");\n\nconst ABViewDefaults = {\n   key: \"viewwidget\", // {string} unique key for this view\n   icon: \"circle-o-notch \", // {string} fa-[icon] reference for this view\n   labelKey: \"ab.components.widget\", // {string} the multilingual label key for the class label\n};\n\nconst ABPropertyComponentDefaults = {\n   columnSpan: 1,\n   rowSpan: 1,\n};\n\nmodule.exports = class ABViewWidgetCore extends ABView {\n   /**\n    * @param {obj} values  key=>value hash of ABView values\n    * @param {ABApplication} application the application object this view is under\n    * @param {ABView} parent the ABView this view is a child of. (can be null)\n    * @param {obj} defaultValues special sub class defined default values.\n    */\n   constructor(values, application, parent, defaultValues) {\n      super(values, application, parent, defaultValues || ABViewDefaults);\n   }\n\n   static common() {\n      return ABViewDefaults;\n   }\n\n   static defaultValues() {\n      return ABPropertyComponentDefaults;\n   }\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      super.fromValues(values);\n\n      // convert from \"0\" => 0\n      this.settings.columnSpan = parseInt(\n         this.settings.columnSpan || ABPropertyComponentDefaults.columnSpan\n      );\n      this.settings.rowSpan = parseInt(\n         this.settings.rowSpan || ABPropertyComponentDefaults.rowSpan\n      );\n   }\n};\n","const _ = require(\"lodash\");\n\n// prettier-ignore\nconst ABApplicationCore = require(\"../core/ABApplicationCore.js\");\n\nconst ABViewPage = require(\"./views/ABViewPage\");\nconst ABViewManager = require(\"./ABViewManager\");\n\nmodule.exports = class ABClassApplication extends ABApplicationCore {\n   constructor(attributes, AB) {\n      super(attributes, AB);\n\n      // now listen for any updates to our managed objects\n      this._handler_page_updated = (definition) => {\n         var currPage = this._pages.find((p) => p.id === definition.id);\n         if (currPage) {\n            this._pages = this._pages.filter((p) => p.id != currPage.id);\n            this._pages.push(currPage.refreshInstance());\n         }\n      };\n      this._pages.forEach((p) => {\n         p.on(\"definition.updated\", this._handler_page_updated);\n      });\n   }\n\n   static applications(/*fn = () => true*/) {\n      console.error(\n         \"ABApplication.applicationForID(): Depreciated. Who is doing this?\"\n      );\n      return null;\n   }\n   static applicationForID(/*id*/) {\n      var errDepreciated = new Error(\n         \"ABApplication.applicationForID(): Depreciated. Who is doing this?\"\n      );\n      console.error(errDepreciated);\n      return null;\n   }\n\n   static definitionForID(/*id*/) {\n      var errDepreciated = new Error(\n         \"ABApplication.definitionForID(): Depreciated. Who is doing this?\"\n      );\n      console.error(errDepreciated);\n      return null;\n   }\n\n   areaKey() {\n      return this.AB.kebabCase(`ab-${this.name}`);\n   }\n\n   /**\n    * @method refreshInstance()\n    * Used when a definition.updated message is detected on this ABApplication.\n    * This method will return a new instance based upon the current definition\n    * and properly resolve any handlers and pending network Requests.\n    * @return {ABObject}\n    */\n   refreshInstance() {\n      var newObj = this.AB.applicationByID(this.id);\n\n      // remove my listeners\n      this._pages.forEach((p) => {\n         p.removeListener(\"definition.updated\", this._handler_page_updated);\n      });\n\n      return newObj;\n   }\n\n   ///\n   /// Definition\n   ///\n\n   /**\n    * @method _listInsert()\n    * save the given entity into our desired list:\n    * @param {varid} entity\n    * @param {string} key\n    *        the key of the list we are managing\n    * @return {Promise}\n    */\n   async _listInsert(entity, key) {\n      var isIncluded = this[key].indexOf(entity.id) != -1;\n      if (!isIncluded) {\n         this[key].push(entity.id);\n         await this.save();\n      }\n   }\n\n   async _listRemove(entity, key) {\n      var begLen = this[key].length;\n      this[key] = this[key].filter((id) => {\n         return id != entity.id;\n      });\n      // if there was a change then save this.\n      if (begLen != this[key].length) {\n         await this.save();\n      }\n   }\n\n   /**\n    * @method datacollectionInsert()\n    * persist the current ABDataCollection in our list of .datacollectionIDs.\n    * @param {ABDataCollection} dc\n    * @return {Promise}\n    */\n   datacollectionInsert(dc) {\n      return this._listInsert(dc, \"datacollectionIDs\");\n   }\n\n   /**\n    * @method datacollectionRemove()\n    * remove the given ABDataCollection from our list of .datacollectionIDs.\n    * @param {ABDataCollection} dc\n    * @return {Promise}\n    */\n   datacollectionRemove(dc) {\n      return this._listRemove(dc, \"datacollectionIDs\");\n   }\n\n   /**\n    * @method objectInsert()\n    * persist the current ABObject in our list of .objectIDs.\n    * @param {ABObject} object\n    * @return {Promise}\n    */\n   objectInsert(object) {\n      return this._listInsert(object, \"objectIDs\");\n   }\n\n   /**\n    * @method objectRemove()\n    * remove the current ABObject from our list of .objectIDs.\n    * NOTE: this method persists the changes to the server.\n    * @param {ABObject} object\n    * @return {Promise}\n    */\n   objectRemove(object) {\n      return this._listRemove(object, \"objectIDs\");\n   }\n\n   /**\n    * @method processInsert()\n    * persist the current ABProcess in our list of .processIDs.\n    * @param {ABProcess} process\n    * @return {Promise}\n    */\n   processInsert(process) {\n      this._processes.push(process);\n      return this._listInsert(process, \"processIDs\");\n   }\n\n   /**\n    * @method processRemove()\n    * remove the current ABProcess from our list of .processIDs.\n    * NOTE: this method persists the changes to the server.\n    * @param {ABProcess} process\n    * @return {Promise}\n    */\n   processRemove(process) {\n      this._processes = this._processes.filter((p) => p.id != process.id);\n      return this._listRemove(process, \"processIDs\");\n   }\n\n   /**\n    * @method queryInsert()\n    * persist the current ABObjectQuery in our list of .queryIDs.\n    * @param {ABObjectQuery} query\n    * @return {Promise}\n    */\n   queryInsert(query) {\n      return this._listInsert(query, \"queryIDs\");\n   }\n\n   /**\n    * @method queryRemove()\n    * remove the current ABObjectQuery from our list of .queryIDs.\n    * NOTE: this method persists the changes to the server.\n    * @param {ABObjectQuery} query\n    * @return {Promise}\n    */\n   queryRemove(query) {\n      return this._listRemove(query, \"queryIDs\");\n   }\n\n   /**\n    * @method exportIDs()\n    * export any relevant .ids for the necessary operation of this application.\n    * @param {array} ids\n    *         the array of ids to insert any relevant .ids into\n    */\n   exportIDs(ids) {\n      // make sure we don't get into an infinite loop:\n      if (ids.indexOf(this.id) > -1) return;\n\n      ids.push(this.id);\n\n      // start with Objects:\n      this.objectsIncluded().forEach((o) => {\n         o.exportIDs(ids);\n      });\n\n      // Queries\n      this.queriesIncluded().forEach((q) => {\n         q.exportIDs(ids);\n      });\n\n      // Datacollections\n      // NOTE: currently the server doesn't make instances of DataCollections\n      // so we manually parse the related info here:\n      this.datacollectionIDs.forEach((dID) => {\n         if (ids.indexOf(dID) > -1) return;\n\n         var def = this.AB.definitionByID(dID);\n         if (def) {\n            ids.push(dID);\n            if (def.settings.datasourceID) {\n               var object = this.AB.objectByID(def.settings.datasourceID);\n               if (object) {\n                  object.exportIDs(ids);\n               }\n            }\n         }\n      });\n\n      // Processes\n      this.processes().forEach((p) => {\n         p.exportIDs(ids);\n      });\n\n      // Pages\n      // NOTE: currently the server doesn't make instances of ABViews\n      // so we manually parse the object data here:\n      var parseView = (view) => {\n         if (ids.indexOf(view.id) > -1) return;\n         ids.push(view.id);\n         (view.pageIDs || []).forEach((pid) => {\n            var pdef = this.AB.definitionByID(pid);\n            if (pdef) {\n               parseView(pdef);\n            }\n         });\n\n         (view.viewIDs || []).forEach((vid) => {\n            var vdef = this.AB.definitionByID(vid);\n            if (vdef) {\n               parseView(vdef);\n            }\n         });\n      };\n\n      var pageIDs = this._pages.map((p) => p.id);\n      (pageIDs || []).forEach((pid) => {\n         var pdef = this.AB.definitionByID(pid);\n         if (pdef) {\n            parseView(pdef);\n         }\n      });\n\n      // return only unique entries:\n      ids = this.AB.uniq(ids);\n   }\n\n   /**\n    * @method pageNew()\n    * return a new instance of an ABViewPage\n    * @param values\n    *        The initial settings for the page.\n    * @return {ABViewPage}\n    */\n   pageNew(values) {\n      return new ABViewPage(values, this);\n   }\n\n   /**\n    * @method pageInsert()\n    * Insert a new ABViewPage into this Application.\n    * @param {ABViewPage} page\n    *        The instance of the page to save.\n    * @return {Promise}\n    */\n   async pageInsert(page) {\n      // var isIncluded = this.pageByID(page.id);\n      var isIncluded = this._pages.filter((p) => p.id == page.id)[0];\n      if (!isIncluded) {\n         this._pages.push(page);\n         // Save our own Info:\n         return this.save();\n      }\n   }\n\n   /**\n    * @method pageRemove()\n    * remove the current ABViewPage from our list of pages.\n    * @param {ABViewPage} page\n    * @return {Promise}\n    */\n   async pageRemove(page) {\n      var origLen = this._pages.length;\n      this._pages = this.pages(function (p) {\n         return p.id != page.id;\n      });\n\n      if (this._pages.length < origLen) {\n         return this.save();\n      }\n\n      // if we get here, then nothing changed so nothing to do.\n   }\n\n   save() {\n      // if someone just changed the name of our ABApplication, reflect that\n      // in our Def.Name\n      if (this.name != this.label) {\n         this.name = this.label;\n      }\n      return super.save();\n   }\n\n   warningsEval() {\n      this._warnings = [];\n\n      //\n      // check for valid object references:\n      //\n      var checks = {\n         objectIDs: \"object\",\n         queryIDs: \"query\",\n         datacollectionIDs: \"datacollection\",\n      };\n\n      Object.keys(checks).forEach((k) => {\n         this[k].forEach((id) => {\n            var def = this.AB.definitionByID(id);\n            if (!def) {\n               this.emit(\n                  \"warning\",\n                  `Application is referencing a missing ${checks[k]}`,\n                  {\n                     appID: this.id,\n                     id,\n                  }\n               );\n            }\n         });\n      });\n\n      //\n      // Make sure there is some way to access this Application:\n      //\n      if (this.roleAccess.length == 0 && !this.isAccessManaged) {\n         this.emit(\n            \"warning\",\n            \"Application has no Role assigned, and is unaccessible.\"\n         );\n      }\n\n      // do our Role references exist?\n      var allRoles = this.AB.Account.rolesAll().map((r) => r.id);\n      this.roleAccess.forEach((r) => {\n         if (allRoles.indexOf(r) == -1) {\n            this.emit(\n               \"warning\",\n               `Specified Role Access [${r}] does not exist in this system`,\n               { role: r }\n            );\n         }\n      });\n   }\n\n   warningsAll() {\n      var warnings = [].concat(this._warnings);\n      [\n         \"objectsIncluded\",\n         \"queriesIncluded\",\n         \"datacollectionsIncluded\",\n         \"processes\",\n         \"pages\",\n         \"views\",\n      ].forEach((k) => {\n         this[k]().forEach((o) => {\n            warnings = warnings.concat(o.warningsAll());\n         });\n      });\n\n      return warnings;\n   }\n\n   /**\n    * @method mobileAppNew()\n    *\n    * return an instance of a new (unsaved) ABMobileApp that is tied to this\n    * ABApplication.\n    *\n    * @return {ABMobileApp}\n    */\n   // mobileAppNew(values) {\n   //    return new ABMobileApp(values, this);\n   // }\n};\n","const ABEmitter = require(\"./ABEmitter\");\n\nconst CustomComponentManager = require(\"../../webix_custom_components/customComponentManager\");\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABComponent extends ABEmitter {\n   /**\n    * @param {object} App\n    *      ?what is this?\n    * @param {string} idBase\n    *      Identifier for this component\n    */\n   constructor(App, idBase, AB) {\n      super();\n\n      // Transition Code:\n      // make sure we have an this.AB\n      if (App && App.AB) {\n         this.AB = App.AB;\n      }\n\n      // passed in AB will override\n      if (AB) {\n         this.AB = AB;\n         // {ABFactory} AB\n      }\n\n      if (!App) {\n         if (AB._App) {\n            App = AB._App;\n         } else {\n            App = {\n               uuid: AB.Webix.uid(),\n\n               /*\n                * AB\n                * the {ABFactory} for our interface.\n                */\n               AB: AB,\n\n               /*\n                * actions:\n                * a hash of exposed application methods that are shared among our\n                * components, so one component can invoke an action that updates\n                * another component.\n                */\n               actions: {},\n\n               /*\n                * config\n                * webix configuration settings for our current browser\n                */\n               config: AB.UISettings.config(),\n\n               /*\n                * custom\n                * a collection of custom components for this App Instance.\n                */\n               custom: null,\n\n               /*\n                * Icons\n                * this will provide you with the list of avaialbe font awesome 4.7.0 icons to use in interface building\n                */\n               icons: AB.UISettings.icons,\n\n               Label: L,\n\n               /*\n                * labels\n                * a collection of labels that are common for the Application.\n                */\n               labels: {\n                  add: L(\"Add\"),\n                  create: L(\"Create\"),\n                  delete: L(\"Delete\"),\n                  edit: L(\"Edit\"),\n                  export: L(\"Export\"),\n                  formName: L(\"Name\"),\n                  import: L(\"Import\"),\n                  rename: L(\"Rename\"),\n                  ok: L(\"Ok\"),\n\n                  cancel: L(\"Cancel\"),\n                  save: L(\"Save\"),\n\n                  yes: L(\"Yes\"),\n                  no: L(\"No\"),\n\n                  none: L(\"None\"),\n                  close: L(\"Close\"),\n\n                  default: L(\"Default\"),\n                  defaultPlaceholder: L(\"Enter default value\"),\n\n                  disable: L(\"Disable\"),\n\n                  required: L(\"Required\"),\n                  unique: L(\"Unique\"),\n\n                  invalidMessage: {\n                     required: L(\"This field is required\"),\n                  },\n\n                  createErrorMessage: L(\"System could not create <b>{0}</b>.\"),\n                  createSuccessMessage: L(\"<b>{0}</b> is created.\"),\n\n                  updateErrorMessage: L(\"System could not update <b>{0}</b>.\"),\n                  updateSucessMessage: L(\"<b>{0}</b> is updated.\"),\n\n                  deleteErrorMessage: L(\"System could not delete <b>{0}</b>.\"),\n                  deleteSuccessMessage: L(\"<b>{0}</b> is deleted.\"),\n\n                  renameErrorMessage: L(\"System could not rename <b>{0}</b>.\"),\n                  renameSuccessMessage: L(\"<b>{0}</b> is renamed.\"),\n\n                  // Data Field  common Property labels:\n                  dataFieldHeaderLabel: L(\"Section Title\"),\n                  dataFieldHeaderLabelPlaceholder: L(\"Section Name\"),\n\n                  dataFieldLabel: L(\"Label\"),\n                  dataFieldLabelPlaceholder: L(\"Label\"),\n\n                  dataFieldColumnName: L(\"Field Name\"),\n                  dataFieldColumnNamePlaceholder: L(\"Database field name\"),\n\n                  dataFieldShowIcon: L(\"show icon?\"),\n\n                  componentDropZone: L(\"add widgets here\"),\n               },\n\n               /*\n                * unique()\n                * A function that returns a globally unique Key.\n                * @param {string} key   The key to modify and return.\n                * @return {string}\n                */\n               unique: function (key) {\n                  return `${key}${this.uuid}`;\n               },\n            };\n            AB._App = App;\n         }\n      }\n\n      if (!App.custom) {\n         if (!AB.custom) {\n            var componentManager = new CustomComponentManager();\n            componentManager.initComponents(App);\n         } else {\n            App.custom = AB.custom;\n         }\n      }\n\n      this.App = App;\n\n      this.idBase = idBase || \"?idbase?\";\n   }\n\n   actions(_actions) {\n      console.error(\"!!! REFACTOR out .actions()\");\n      if (_actions) {\n         for (var a in _actions) {\n            this.App.actions[a] = _actions[a];\n         }\n      }\n   }\n\n   Label() {\n      return (...params) => {\n         // console.error(\"!! App.label() depreciated.\");\n         return this.AB.Multilingual.label(...params);\n      };\n   }\n\n   unique(key) {\n      return this.App.unique(`${this.idBase}_${key}`);\n   }\n};\n","const ABObjectQuery = require(\"./ABObjectQuery\");\nconst ABDataCollectionCore = require(\"../core/ABDataCollectionCore\");\n\nmodule.exports = class ABDataCollection extends ABDataCollectionCore {\n   constructor(attributes, AB) {\n      super(attributes, AB);\n      this.setMaxListeners(0);\n   }\n\n   /**\n    * @method save()\n    *\n    * persist this instance of ABDataCollection with it's parent\n    *\n    *\n    * @return {Promise}\n    *\t\t\t.resolve( {this} )\n    */\n   async save() {\n      if (!this.id) {\n         this.label = this.label || this.name;\n      }\n      await super.save();\n      this.AB.emit(\"ab.datacollection.update\", {\n         datacollectionId: this.id,\n      });\n      return this;\n   }\n\n   isValid() {\n      var validator = this.AB.Validation.validator();\n      var L = this.AB.Label();\n\n      // label/name must be unique:\n      var isNameUnique =\n         this.AB.datacollections((o) => {\n            return (\n               o.id != this.id &&\n               o.name.toLowerCase() == this.name.toLowerCase()\n            );\n         }).length == 0;\n      if (!isNameUnique) {\n         validator.addError(\n            \"name\",\n            L('Name must be unique (\"{0}\" already in use)', [this.name])\n         );\n      }\n\n      return validator;\n   }\n\n   ///\n   /// Cursor\n   ///\n\n   /**\n    * currentUserUsername\n    * must return the proper value for the current user that would match a \"user\" field\n    * in an object.\n    * This is platform dependent, so must be implemented by a child object.\n    * @return {string}\n    */\n   currentUserUsername() {\n      return this.AB.Account.username();\n   }\n\n   ///\n   /// Data\n   ///\n\n   init() {\n      // prevent initialize many times\n      if (this.initialized) return;\n      // this.initialized = true;  // <<---- DO NOT SET THIS HERE\n\n      super.init();\n\n      //// Now connect our platform hub to our Object Triggers:\n\n      // events\n      this.AB.on(\"ab.datacollection.create\", (data) => {\n         // debugger;\n         this.emit(\"ab.datacollection.create\", data);\n      });\n\n      this.AB.on(\"ab.datacollection.update\", (data) => {\n         // debugger;\n         this.emit(\"ab.datacollection.update\", data);\n      });\n\n      // We are subscribing to notifications from the server that an item may\n      // be stale and needs updating\n      // We will improve this later and verify that it needs updating before\n      // attempting the update on the client side\n      this.AB.on(\"ab.datacollection.stale\", (data) => {\n         // debugger;\n         this.emit(\"ab.datacollection.stale\", data);\n      });\n\n      this.AB.on(\"ab.datacollection.delete\", (data) => {\n         // debugger;\n         this.emit(\"ab.datacollection.delete\", data);\n      });\n\n      this.bindParentDc();\n   }\n\n   bindParentDc() {\n      // if we pass the master datacollection and the field it is linked to\n      // we want to bind it witht hat field as second param so dataFeed is\n      // used on the slave datacollection\n      let dataCollectionLink = this.datacollectionLink;\n      let fieldLink = this.fieldLink;\n      if (!this.settings.loadAll && dataCollectionLink && fieldLink) {\n         let dc = this.__dataCollection;\n         // the second param is the field id we bind the data to the master with\n         dc.bind(dataCollectionLink.__dataCollection, fieldLink.id);\n         // defining dataFeed allows us to query the database when the table is scrolled\n         dc.define(\"dataFeed\", (value, params) => {\n            // copy current wheres\n            var wheres = this.AB.cloneDeep(\n               this.settings.objectWorkspace.filterConditions\n            );\n            // add bind items data as a filter to wheres\n            if (value) {\n               // don't include an empty where condition in our .rules\n               // start by replacing it with null\n               if (!wheres.rules) {\n                  wheres = null;\n               }\n\n               wheres = {\n                  glue: \"and\",\n                  rules: [\n                     wheres,\n                     {\n                        alias: fieldLink.alias, // ABObjectQuery\n                        key: Object.keys(params)[0],\n                        rule: fieldLink.alias ? \"contains\" : \"equals\", // NOTE: If object is query, then use \"contains\" because ABOBjectQuery return JSON\n                        value: fieldLink.getRelationValue(\n                           dataCollectionLink.__dataCollection.getItem(value)\n                        ),\n                     },\n                  ],\n               };\n\n               // remove any null in the .rules\n               wheres.rules = wheres.rules.filter((r) => r);\n            }\n\n            // this is the same item that was already bound...don't reload data\n            if (\n               JSON.stringify(this.__reloadWheres) == JSON.stringify(wheres) ||\n               (wheres.rules && wheres.rules.length == 0)\n            ) {\n               return;\n            } else {\n               // now that we have the modified wheres the dataCollections wheres\n               // need to be modified for subsequent loads on scroll so lets set them\n               this.reloadWheres(wheres);\n               // reload data\n               this.reloadData(0, 20);\n            }\n         });\n      }\n   }\n\n   loadData(start, limit = 20) {\n      return super.loadData(start, limit).catch((err) => {\n         // hideProgressOfComponents() is a platform specific action.\n         this.hideProgressOfComponents();\n\n         // propagate the error here:\n         if (err) {\n            throw err;\n         }\n      });\n   }\n\n   /**\n    * processIncomingData()\n    * is called from loadData() once the data is returned.  This method\n    * allows the platform to make adjustments to the data based upon any\n    * platform defined criteria.\n    * @param {obj} data  the data as it was returned from the Server\n    *        which should be in following format:\n    *        {\n    *          status: \"success\", // or \"error\"\n    *          data:[ {ABObjectData}, {ABObjectData}, ...]\n    *        }\n    */\n   processIncomingData(data) {\n      // Web Platform:\n\n      // data check:\n      if (data.data && !Array.isArray(data.data)) {\n         data.data = [data.data];\n      }\n\n      // standardize the heights\n\n      /*\n       // In v2: we move the row height calculation into the Interface designer.\n       //\n\n      // calculate default value of $height of rows\n      let obj = this.datasource;\n      let defaultHeight = 0;\n      let minHeight = 0;\n      let imageFields = obj.fields((f) => f.key == \"image\");\n      let hiddenFields = obj.objectWorkspace.hiddenFields;\n      imageFields.forEach(function (f) {\n         if (hiddenFields.indexOf(f.columnName) == -1) {\n            if (\n               parseInt(f.settings.useHeight) == 1 &&\n               parseInt(f.settings.imageHeight) > minHeight\n            ) {\n               minHeight = parseInt(f.settings.imageHeight) + 20;\n            } else {\n               minHeight = 100;\n            }\n         }\n      });\n      if (minHeight > 0) {\n         defaultHeight = minHeight;\n      }\n\n      (data.data || []).forEach((d) => {\n         // define $height of rows to render in webix elements\n         if (\n            d.properties != null &&\n            d.properties.height != \"undefined\" &&\n            parseInt(d.properties.height) > 0\n         ) {\n            d.$height = parseInt(d.properties.height);\n         } else if (defaultHeight > 0) {\n            d.$height = defaultHeight;\n         }\n      });\n      */\n\n      return super.processIncomingData(data).then(() => {\n         // Web Platform:\n         // when that is done:\n         this.hideProgressOfComponents();\n      });\n   }\n\n   ///\n   /// Components\n   ///\n\n   /**\n    * @method attachFlexlayout\n    *\n    *\n    * @param {Object} component - a webix flexlayout element instance\n    */\n   attachFlexlayout(component) {\n      var dc = this.__dataCollection;\n\n      // prevent attach many times\n      if (this.__flexComponentIds.indexOf(component.config.id) > -1) {\n         return;\n      } else {\n         // keep component id to an array\n         this.__flexComponentIds.push(component.config.id);\n      }\n   }\n\n   /**\n    * @method bind\n    *\n    *\n    * @param {Object} component - a webix element instance\n    */\n   bind(component) {\n      var dc = this.__dataCollection;\n\n      // prevent bind many times\n      if (\n         this.__bindComponentIds.indexOf(component.config.id) > -1 &&\n         $$(component.config.id).data &&\n         $$(component.config.id).data.find &&\n         $$(component.config.id).data.find({}).length > 0\n      )\n         return;\n      // keep component id to an array\n      else this.__bindComponentIds.push(component.config.id);\n\n      if (\n         component.config.view == \"datatable\" ||\n         component.config.view == \"dataview\" ||\n         component.config.view == \"treetable\" ||\n         component.config.view == \"kanban\"\n      ) {\n         if (dc) {\n            var items = dc.count();\n            if (\n               items == 0 &&\n               (this._dataStatus == this.dataStatusFlag.notInitial ||\n                  this._dataStatus == this.dataStatusFlag.initializing) &&\n               component.showProgress\n            ) {\n               component.showProgress({ type: \"icon\" });\n            }\n\n            component.define(\"datafetch\", 20);\n            component.define(\"datathrottle\", 500);\n\n            // initial data of treetable\n            if (component.config.view == \"treetable\") {\n               if (\n                  this.datasource &&\n                  this.datasource.isGroup &&\n                  this.__treeCollection\n               ) {\n                  component.define(\"data\", this.__treeCollection);\n                  component.refresh();\n               } else {\n                  // NOTE: tree data does not support dynamic loading when scrolling\n                  // https://forum.webix.com/discussion/3078/dynamic-loading-in-treetable\n                  component.define(\"data\", []);\n                  component.parse(dc.find({}));\n               }\n            } else {\n               component.data.sync(dc);\n            }\n\n            // Implement .onDataRequest for paging loading\n            if (!this.settings.loadAll) {\n               component.___AD = component.___AD || {};\n               // if (component.___AD.onDataRequestEvent) component.detachEvent(component.___AD.onDataRequestEvent);\n               if (!component.___AD.onDataRequestEvent) {\n                  component.___AD.onDataRequestEvent = component.attachEvent(\n                     \"onDataRequest\",\n                     (start, count) => {\n                        if (component.showProgress)\n                           component.showProgress({ type: \"icon\" });\n\n                        // load more data to the data collection\n                        dc.loadNext(count, start);\n\n                        return false; // <-- prevent the default \"onDataRequest\"\n                     }\n                  );\n               }\n\n               // // NOTE : treetable should use .parse or TreeCollection\n               // // https://forum.webix.com/discussion/1694/tree-and-treetable-using-data-from-datacollection\n               // if (\n               //    component.config.view == \"treetable\" &&\n               //    !this.datasource.isGroup\n               // ) {\n               //    component.___AD = component.___AD || {};\n               //    if (!component.___AD.onDcLoadData) {\n               //       component.___AD.onDcLoadData = () => {\n               //          component.parse(dc.find({}));\n               //       };\n\n               //       this.on(\"loadData\", component.___AD.onDcLoadData);\n               //    }\n               // }\n            }\n         } else {\n            component.data.unsync();\n         }\n      } else if (component.bind) {\n         if (dc) {\n            // Do I need to check if there is any data in the collection before binding?\n            component.bind(dc);\n         } else {\n            component.unbind();\n         }\n\n         if (component.refresh) component.refresh();\n      }\n   }\n\n   unbind(component) {\n      if (!component) return;\n\n      component.detachEvent(\"onDataRequest\");\n      if (component.___AD) {\n         if (component.___AD.onDataRequestEvent)\n            delete component.___AD.onDataRequestEvent;\n\n         if (component.___AD.onDcLoadData) {\n            if (this.off) this.off(\"loadData\", component.___AD.onDcLoadData);\n            delete component.___AD.onDcLoadData;\n         }\n      }\n\n      if (component.data && component.data.unsync) {\n         component.data.unsync();\n         component.define(\"data\", []);\n      }\n\n      if (component.unbind) component.unbind();\n\n      if (component.refresh) component.refresh();\n\n      // remove from array\n      this.__bindComponentIds = (this.__bindComponentIds || []).filter(\n         (id) => id != component.config.id\n      );\n   }\n\n   hideProgressOfComponents() {\n      this.__bindComponentIds.forEach((comId) => {\n         if ($$(comId) && $$(comId).hideProgress) $$(comId).hideProgress();\n      });\n   }\n\n   /** Private methods */\n\n   /**\n    * @method _dataCollectionNew\n    * Get webix.DataCollection\n    *\n    * @return {webix.DataCollection}\n    *\n    * @param {Array} data - initial data\n    */\n   _dataCollectionNew(data) {\n      // get a webix data collection\n      let dc = new webix.DataCollection({\n         data: data || [],\n      });\n\n      this._extendCollection(dc);\n\n      return dc;\n   }\n\n   /**\n    * @method _treeCollectionNew\n    * Get webix.TreeCollection\n    *\n    * @return {webix.TreeCollection}\n    *\n    */\n   _treeCollectionNew() {\n      // get a webix data collection\n      let treeStore = new webix.TreeCollection();\n\n      this._extendCollection(treeStore);\n\n      return treeStore;\n   }\n\n   _extendCollection(dataStore) {\n      // Apply this data collection to support multi-selection\n      // https://docs.webix.com/api__refs__selectionmodel.html\n      webix.extend(dataStore, webix.SelectionModel);\n\n      dataStore.___AD = dataStore.___AD || {};\n\n      // Implement .onDataRequest for paging loading\n      if (!this.settings.loadAll) {\n         if (!dataStore.___AD.onDataRequestEvent) {\n            dataStore.___AD.onDataRequestEvent = dataStore.attachEvent(\n               \"onDataRequest\",\n               (start, count) => {\n                  if (start < 0) start = 0;\n\n                  // load more data to the data collection\n                  this.loadData(start, count);\n\n                  return false; // <-- prevent the default \"onDataRequest\"\n               }\n            );\n         }\n\n         if (!dataStore.___AD.onAfterLoadEvent) {\n            dataStore.___AD.onAfterLoadEvent = dataStore.attachEvent(\n               \"onAfterLoad\",\n               () => {\n                  this.emit(\"loadData\", {});\n               }\n            );\n         }\n      }\n\n      // override unused functions of selection model\n      dataStore.addCss = function () {};\n      dataStore.removeCss = function () {};\n      dataStore.render = function () {};\n\n      if (!dataStore.___AD.onAfterLoad) {\n         dataStore.___AD.onAfterLoad = dataStore.attachEvent(\n            \"onAfterLoad\",\n            () => {\n               this.hideProgressOfComponents();\n            }\n         );\n      }\n   }\n\n   parseTreeCollection(data = {}) {\n      if (\n         !(this.__datasource instanceof ABObjectQuery) ||\n         !this.__datasource.isGroup ||\n         !this.__treeCollection\n      )\n         return;\n\n      let addRowToTree = (join = {}, parentAlias = null) => {\n         let alias = join.alias;\n\n         (data.data || []).forEach((row) => {\n            let dataId = row[`${alias}.uuid`] || row[`${alias}.id`];\n            if (!dataId) return;\n\n            // find parent nodes\n            let parentItemIds = [];\n            let parentId =\n               row[`${parentAlias}.uuid`] || row[`${parentAlias}.id`];\n            if (parentId) {\n               parentItemIds = this.__treeCollection\n                  .find(\n                     (item) =>\n                        item._alias == parentAlias && item._dataId == parentId\n                  )\n                  .map((item) => item.id);\n            }\n\n            // check exists\n            let exists = this.__treeCollection.find((item) => {\n               return (\n                  item._alias == alias &&\n                  item._dataId == dataId &&\n                  (parentItemIds.length == 0 ||\n                     parentItemIds.indexOf(item.$parent) > -1)\n               );\n            }, true);\n            if (exists) return;\n\n            let treeNode = {};\n            treeNode._alias = alias;\n            treeNode._dataId = dataId;\n            treeNode._itemId = row.id; // Keep row id for set cursor to data collection\n\n            Object.keys(row).forEach((propName) => {\n               // Pull value from alias\n               if (propName.indexOf(`${alias}.`) == 0) {\n                  treeNode[propName] = row[propName];\n               }\n            });\n\n            if (row.translations) treeNode.translations = row.translations;\n\n            // child nodes\n            if (parentItemIds.length > 0)\n               parentItemIds.forEach((parentItemId) => {\n                  this.__treeCollection.add(treeNode, null, parentItemId);\n               });\n            // root node\n            else this.__treeCollection.add(treeNode, null);\n         });\n\n         // Sub-joins\n         (join.links || []).forEach((link) => {\n            addRowToTree(link, alias);\n         });\n      };\n\n      // Show loading cursor\n      (this.__bindComponentIds || []).forEach((comId) => {\n         //// Webix Command here:\n         let boundComp = $$(comId);\n         if (boundComp && boundComp.showProgress)\n            boundComp.showProgress({ type: \"icon\" });\n\n         if (boundComp.data && boundComp.data.unsync) boundComp.data.unsync();\n      });\n\n      addRowToTree(this.__datasource.joins());\n\n      // Hide loading cursor\n      (this.__bindComponentIds || []).forEach((comId) => {\n         let boundComp = $$(comId);\n         if (boundComp && boundComp.hideProgress) boundComp.hideProgress();\n         boundComp.define(\"data\", this.__treeCollection);\n      });\n   }\n\n   warningsAll() {\n      // report both OUR warnings, and any warnings from any of our fields\n      const allWarnings = [].concat(this._warnings);\n\n      if (!this.datasource) {\n         allWarnings.push({\n            message: `Datacollection[${this.label}][${this.id}] doesn't have a datasource.`,\n            data: {},\n         });\n      } else if (this.linkDatacollectionID) {\n         const linkDC = this.AB.datacollectionById(this.linkDatacollectionID);\n\n         if (linkDC)\n            allWarnings.push({\n               message: `Datacollection[${this.label}][${this.id}] can't resolve linkDatacollectionID[${this.linkDatacollectionID}]`,\n               data: {},\n            });\n      }\n\n      return allWarnings;\n   }\n\n   warningsEval() {\n      // our .fromValues() has already registered any missing fields.\n      // those should get reported from warnings()\n   }\n\n   get userScopes() {\n      return this.AB.Account.scopes();\n   }\n};\n","var ABDefinitionCore = require(\"../core/ABDefinitionCore\");\n\nmodule.exports = class ABDefinition extends ABDefinitionCore {\n   // constructor(attributes, AB) {\n   //    super(attributes, AB);\n   // }\n};\n","/**\n * ABEmitter\n *\n * This is the platform dependent implementation of an Emitter object.\n *\n */\n\nvar EventEmitter = require(\"events\").EventEmitter;\n\nmodule.exports = class ABEmitter extends EventEmitter {\n   constructor() {\n      super(/*{ maxListeners: 0 }*/);\n   }\n};\n","const ABIndexCore = require(\"../core/ABIndexCore\");\n\nmodule.exports = class ABIndex extends ABIndexCore {\n   // constructor(attributes, object) {\n   //    super(attributes, object);\n   // }\n\n   /**\n    * @method save()\n    * persist this instance of ABIndex with it's parent ABObject\n    * @return {Promise}\n    */\n   save() {\n      return super\n         .save()\n         .then(() => this.object.indexSave(this))\n         .then(() => this.migrateCreate());\n   }\n\n   /**\n    * @method destroy()\n    * destroy the current instance of ABIndex\n    * also remove it from our parent ABObject\n    * @return {Promise}\n    */\n   destroy() {\n      return new Promise((resolve, reject) => {\n         if (this.id) {\n            this.migrateDrop()\n               .then(() => {\n                  return super.destroy();\n               })\n               .then(() => this.object.indexRemove(this))\n               .then(resolve)\n               .catch(reject);\n         } else {\n            resolve();\n         }\n      });\n   }\n\n   ///\n   /// DB Migrations\n   ///\n\n   migrateCreate() {\n      return this.AB.Network.post({\n         url: `/definition/migrate/object/${this.object.id}/index/${this.id}`,\n         // data: this.toObj(),\n      });\n   }\n\n   migrateDrop() {\n      return this.AB.Network[\"delete\"]({\n         url: `/definition/migrate/object/${this.object.id}/index/${this.id}`,\n      });\n   }\n};\n","/**\n * ABMLClass\n * manage the multilingual information of an instance of a AB Defined Class.\n *\n * these classes have certain fields (\"label\", \"description\"), that can be\n * represented in different language options as defined by our platform.\n *\n * This platform ABMLClass will define 2 methods that allow for the translation\n * untranslation of this data.\n */\nvar ABMLClassCore = require(\"../core/ABMLClassCore\");\n\nmodule.exports = class ABMLClass extends ABMLClassCore {\n   constructor(fieldList, AB) {\n      super(fieldList, AB);\n\n      this._warnings = [];\n      // {array}\n      // an array of warning messages for this object.\n\n      this.on(\"warning\", (message, data) => {\n         this._warnings.push({ message, data });\n      });\n   }\n\n   // fromValues(attributes) {\n   //    super.fromValues(attributes);\n   // }\n\n   warnings() {\n      return this._warnings;\n   }\n\n   warningsEval() {\n      this._warnings = [];\n      // if (\n      //    [\"datacollection\", \"object\", \"query\", \"process\"].indexOf(this.type) >\n      //    -1\n      // ) {\n      //    console.warn(\n      //       `ABML Object [${this.type}][${this.label}] has not overwritten .warningsEval()`\n      //    );\n      // }\n\n      // many of our warnings are generated during the .fromValues() method\n      // when we initialize our Objects.  So, cause this process to repeat.\n      this.fromValues(this.toObj());\n   }\n\n   warningsAll() {\n      // console.warn(\n      //    `ABML Object [${this.label}] has not overwritten .warningsAll()`\n      // );\n      return this.warnings();\n   }\n\n   /**\n    * @method languageDefault\n    * return a default language code.\n    * @return {string}\n    */\n   languageDefault() {\n      return this.AB.Account.language() || \"en\";\n   }\n\n   /**\n    * @method destroy()\n    * remove this definition.\n    * @return {Promise}\n    */\n   async destroy() {\n      var def = this.toDefinition();\n      if (def.id) {\n         return def.destroy().catch((err) => {\n            if (err.toString().indexOf(\"No record found\") > -1) {\n               // this is weird, but not breaking:\n               console.log(\n                  `ABMLClass.destroy(): could not find record for id[${def.id}]`\n               );\n               console.log(def);\n               return;\n            }\n            throw err;\n         });\n      }\n      return Promise.resolve();\n   }\n\n   /**\n    * @method save()\n    * persist this definition of our {ABxxx} Object\n    * @return {Promise}\n    */\n   async save() {\n      var def = this.toDefinition();\n      // if not name, try to use our label as the name\n      def.name = def.name || this.name || this.label || \"name\";\n      var data = await def.save();\n      if (!this.id) {\n         this.id = data.id;\n      }\n   }\n};\n","const ABModelCore = require(\"../core/ABModelCore\");\n\n//\n// ABModel\n//\n// Represents the Data interface for an ABObject data.\n//\n// 2 ways to use an ABModel to load a DataTable:\n// \tMethod 1:\n// \tgather all the data externally and send to the DataTable\n//\t\tModel.findAll()\n//\t\t.then((data)=>{\n//\t\t\tDataTable.parse(data);\n//\t\t})\n//\n// \tMethod 2:\n// \tSet the Model object with a condition / skip / limit, then\n// \tuse it to load the DataTable:\n//\t\tModel.where({})\n//\t\t.skip(XX)\n//\t\t.limit(XX)\n//\t\t.loadInto(DataTable);\n\nfunction errorPopup(error) {\n   // Show the pop up\n   if (error && error.data && error.data.error == \"READONLY\") {\n      webix.alert({\n         title: \"Your action is blocked\",\n         ok: \"Ok\",\n         text: error.data.message || \"\",\n         type: \"alert-warning\",\n      });\n   }\n}\n\n/*\n * @function no_socket_trigger()\n * a common routine to trigger an update.\n * In the case where our AB.Network.type() isn't a socket implementation\n * we need to manually trigger the expected socket events ourselves.\n * This fn() attempts to simulate the socket responses in such a case.\n * @param {ABModel} model\n *        The ABModel currently processing the network transaction.\n * @param {string} key\n *        The socket update trigger we are simulating.\n * @param {json} data\n *        The relevant response from our network transaction.\n */\nfunction no_socket_trigger(model, key, data) {\n   // If we do not have socket updates available, then trigger an\n   // update event with this data.\n   if (model.AB.Network.type() != \"socket\") {\n      model.AB.emit(key, {\n         objectId: model.object.id,\n         data,\n      });\n   }\n}\n\nmodule.exports = class ABModel extends ABModelCore {\n   constructor(object) {\n      super(object);\n\n      this.handler_create = (...params) => {\n         this.handler_common(\"ab.datacollection.create\", ...params);\n      };\n\n      this.handler_delete = (...params) => {\n         this.handler_common(\"ab.datacollection.update\", ...params);\n      };\n\n      this.handler_findAll = (...params) => {\n         this.handler_common(null, ...params);\n      };\n\n      this.handler_logs = (context, err, data) => {\n         if (err) {\n            context.reject?.(err);\n            return;\n         }\n         context.resolve?.(data);\n      };\n\n      this.handler_update = (...params) => {\n         this.handler_common(\"ab.datacollection.update\", ...params);\n      };\n\n      this.handler_common = (key, context, err, data) => {\n         // key: {string} the relevant socket event key\n         //      can be null if not relevant.\n         // context : {obj} any provided context data provided on the\n         //           this.AB.Network.get() call.\n         // err: {Error} any returned error message from api\n         // data: {obj} returned data from the model-get api in format:\n         //       {data: [], total_count: 1, pos: 0, offset: 0, limit: 0}\n         if (err) {\n            context.reject?.(err);\n            return;\n         }\n         if (key) {\n            // on \"update\" & \"create\" we want to normalizeData()\n            if (key.indexOf(\"delete\") == -1) {\n               this.normalizeData(data);\n            }\n         } else {\n            // on a findAll we normalize data.data\n            this.normalizeData(data.data);\n         }\n\n         context.resolve?.(data);\n\n         if (key) {\n            no_socket_trigger(this, key, data);\n         }\n      };\n   }\n\n   ///\n   /// Static Methods\n   ///\n   /// Available to the Class level object.  These methods are not dependent\n   /// on the instance values of the Application.\n   ///\n\n   ///\n   /// Instance Methods\n   ///\n\n   // Prepare multilingual fields to be untranslated\n   // Before untranslating we need to ensure that values.translations is set.\n   prepareMultilingualData(values) {\n      // if this object has some multilingual fields, translate the data:\n      var mlFields = this.object.multilingualFields();\n      // if mlFields are inside of the values saved we want to translate otherwise do not because it will reset the translation field and you may loose unchanged translations\n      var shouldTranslate = false;\n      if (mlFields.length) {\n         mlFields.forEach(function (field) {\n            if (values[field] != null) {\n               shouldTranslate = true;\n            }\n         });\n      }\n      if (shouldTranslate) {\n         if (\n            values.translations == null ||\n            typeof values.translations == \"undefined\" ||\n            values.translations == \"\"\n         ) {\n            values.translations = [];\n         }\n         this.object.unTranslate(values, values, mlFields);\n      }\n   }\n\n   request(method, params) {\n      return this.AB.Network[method](params);\n   }\n\n   /**\n    * @method batchCreate\n    * update model values on the server.\n    */\n   batchCreate(values) {\n      values.batch.map((vals) => {\n         return this.prepareMultilingualData(vals.data);\n      });\n\n      return new Promise((resolve, reject) => {\n         var jobID = this.AB.jobID();\n         this.AB.Network.once(jobID, (context, err, data) => {\n            if (err) {\n               reject(err);\n               return;\n            }\n            this.normalizeData(data);\n            resolve(data);\n            // FIX: now with sockets, the triggers are fired from socket updates.\n            // trigger a create event\n            // triggerEvent('create', this.object, data);\n         });\n\n         this.AB.Network.post(\n            {\n               url: this.object.urlRestBatch(),\n               params: values,\n            },\n            {\n               key: jobID,\n               context: {},\n            }\n         )\n            // .then((data) => {\n            //    this.normalizeData(data);\n\n            //    resolve(data);\n\n            //    // FIX: now with sockets, the triggers are fired from socket updates.\n            //    // trigger a create event\n            //    // triggerEvent('create', this.object, data);\n            // })\n            .catch(reject);\n      });\n   }\n\n   /**\n    * @method create\n    * update model values on the server.\n    */\n   create(values) {\n      this.prepareMultilingualData(values);\n\n      // add default values record if no value is passed for column\n      this.object.fields().forEach((f) => {\n         if (values[f.columnName] === undefined) {\n            f.defaultValue(values);\n         }\n      });\n\n      return new Promise((resolve, reject) => {\n         var jobID = this.AB.jobID();\n         this.AB.Network.once(jobID, this.handler_create);\n         this.AB.Network.post(\n            {\n               url: this.object.urlRest(),\n               params: values,\n            },\n            {\n               key: jobID,\n               context: { resolve, reject },\n            }\n         ).catch((err) => {\n            errorPopup(err);\n            reject(err);\n         });\n      });\n   }\n\n   /**\n    * @method delete\n    * remove this model instance from the server\n    * @param {integer|UUID} id  the .id of the instance to remove.\n    * @return {Promise}\n    */\n   delete(id) {\n      return new Promise((resolve, reject) => {\n         var jobID = this.AB.jobID();\n         this.AB.Network.once(jobID, this.handler_delete);\n         this.AB.Network[\"delete\"](\n            {\n               url: this.object.urlRestItem(id),\n            },\n            {\n               key: jobID,\n               context: { resolve, reject },\n            }\n         ).catch((err) => {\n            errorPopup(err);\n            reject(err);\n         });\n      });\n   }\n\n   /**\n    * @method findAll\n    * performs a data find with the provided condition.\n    */\n   findAll(cond) {\n      cond = cond || {};\n\n      // \t\t// prepare our condition:\n      // \t\tvar newCond = {};\n\n      // \t\t// if the provided cond looks like our { where:{}, skip:xx, limit:xx } format,\n      // \t\t// just use this one.\n      // \t\tif (cond.where) {\n      // \t\t\tnewCond = cond;\n      // \t\t} else {\n\n      // \t\t\t// else, assume the provided condition is the .where clause.\n      // \t\t\tnewCond.where = cond;\n      // \t\t}\n\n      // /// if this is our depreciated format:\n      // if (newCond.where.where) {\n      // \tOP.Error.log('Depreciated Embedded .where condition.');\n      // }\n\n      return new Promise((resolve, reject) => {\n         var jobID = this.AB.jobID();\n         this.AB.Network.once(jobID, this.handler_findAll);\n         this.AB.Network.get(\n            {\n               url: this.object.urlRest(),\n               params: cond,\n               // params: newCond\n            },\n            {\n               key: jobID,\n               context: { resolve, reject },\n            }\n         )\n            // .then((data) => {\n            //    this.normalizeData(data.data);\n\n            //    resolve(data);\n            // })\n            .catch((err) => {\n               if (err && err.code) {\n                  switch (err.code) {\n                     case \"ER_PARSE_ERROR\":\n                        this.AB.notify.developer(err, {\n                           message:\n                              \"AppBuilder:ABModel:findAll(): Parse Error with provided condition\",\n                           condition: cond,\n                        });\n                        break;\n\n                     default:\n                        this.AB.notify.developer(err, {\n                           message:\n                              \"AppBuilder:ABModel:findAll(): Unknown Error with provided condition\",\n                           condition: cond,\n                        });\n                        break;\n                  }\n               }\n               reject(err);\n            });\n      });\n   }\n\n   /**\n    * @method loadInto\n    * loads the current values into the provided Webix DataTable\n    * @param {DataTable} DT  A Webix component that can dynamically load data.\n    */\n   loadInto(DT) {\n      // if a limit was applied, then this component should be loading dynamically\n      if (this._limit) {\n         DT.define(\"datafetch\", this._limit);\n         DT.define(\"datathrottle\", 250); // 250ms???\n\n         // catch the event where data is requested:\n         // here we will do our own findAll() so we can persist\n         // the provided .where condition.\n\n         // oh yeah, and make sure to remove any existing event handler when we\n         // perform a new .loadInto()\n         DT.___AD = DT.___AD || {};\n         if (DT.___AD.onDataRequestEvent) {\n            DT.detachEvent(DT.___AD.onDataRequestEvent);\n         }\n         DT.___AD.onDataRequestEvent = DT.attachEvent(\n            \"onDataRequest\",\n            (start, count) => {\n               var cond = {\n                  where: this._where,\n                  sort: this._sort,\n                  limit: count,\n                  skip: start,\n               };\n\n               if (DT.showProgress) DT.showProgress({ type: \"icon\" });\n\n               this.findAll(cond).then((data) => {\n                  /*\n                   // In V2: we move the row height processing into \n                   // the interface designer \n\n                  data.data.forEach((item) => {\n                     if (\n                        item.properties != null &&\n                        item.properties.height != \"undefined\" &&\n                        parseInt(item.properties.height) > 0\n                     ) {\n                        item.$height = parseInt(item.properties.height);\n                     } else if (parseInt(this._where.height) > 0) {\n                        item.$height = parseInt(this._where.height);\n                     }\n                  });\n                  */\n                  DT.parse(data);\n\n                  if (DT.hideProgress) DT.hideProgress();\n               });\n\n               return false; // <-- prevent the default \"onDataRequest\"\n            }\n         );\n\n         DT.refresh();\n      }\n\n      // else just load it all at once:\n      var cond = {};\n      if (this._where) cond.where = this._where;\n      if (this._sort) cond.sort = this._sort;\n      if (this._limit != null) cond.limit = this._limit;\n      if (this._skip != null) cond.skip = this._skip;\n\n      if (DT.showProgress) DT.showProgress({ type: \"icon\" });\n\n      this.findAll(cond)\n         .then((data) => {\n            // v2: we no longer process item $height\n            /*\n            data.data.forEach((item) => {\n               if (\n                  item.properties != null &&\n                  item.properties.height != \"undefined\" &&\n                  parseInt(item.properties.height) > 0\n               ) {\n                  item.$height = parseInt(item.properties.height);\n               } else if (parseInt(this._where.height) > 0) {\n                  item.$height = parseInt(this._where.height);\n               }\n            });\n            */\n\n            DT.parse(data);\n\n            if (DT.hideProgress) DT.hideProgress();\n         })\n         .catch((err) => {\n            console.error(\"!!!!!\", err);\n         });\n   }\n\n   /**\n    * @method logs()\n    * return the log history related to this model's ABObject.\n    * @param {hash} options\n    *        a key=>value hash of optional search criteria\n    *        .rowId {string} the uuid of the individual entry we are querying\n    *        .levelName {string} the type of entry [\"insert\", \"update\", \"delete\"]\n    *        .username {string} the entries associated with the given user\n    *        .startDate {date} entries that happened ON or AFTER this date\n    *        .endDate {date} entries that happened ON or BEFORE this date\n    *        .start {integer} paging control: how many entries to skip\n    *        .limit {integer} paging control: only return this # entries\n    * @return {Promise}\n    */\n   logs(options) {\n      return new Promise((resolve, reject) => {\n         var jobID = this.AB.jobID();\n         this.AB.Network.once(jobID, this.handler_logs);\n         this.AB.Network.get(\n            {\n               url: this.object.urlRestLog(),\n               params: options,\n               // params: newCond\n            },\n            {\n               key: jobID,\n               context: { resolve, reject },\n            }\n         ).catch((err) => {\n            if (err && err.code) {\n               this.AB.notify.developer(err, {\n                  context: \"AppBuilder:ABModel:logs(): Error\",\n                  options,\n               });\n            }\n            reject(err);\n         });\n      });\n   }\n\n   /**\n    * @method limit\n    * set the limit value for this set of data\n    * @param {integer} limit  the number or elements to return in this call\n    * @return {ABModel} this object that is chainable.\n    */\n   limit(limit) {\n      this._limit = limit;\n      return this;\n   }\n\n   /**\n    * @method skip\n    * set the skip value for this set of data\n    * @param {integer} skip  the number or elements to skip\n    * @return {ABModel} this object that is chainable.\n    */\n   skip(skip) {\n      this._skip = skip;\n      return this;\n   }\n\n   /**\n    * @method update\n    * update model values on the server.\n    */\n   update(id, values) {\n      this.prepareMultilingualData(values);\n\n      // remove empty properties\n      for (var key in values) {\n         if (values[key] == null) delete values[key];\n      }\n\n      return new Promise((resolve, reject) => {\n         var jobID = this.AB.jobID();\n         this.AB.Network.once(jobID, this.handler_update);\n         this.AB.Network.put(\n            {\n               url: this.object.urlRestItem(id),\n               params: values,\n            },\n            { key: jobID, context: { resolve, reject } }\n         )\n            // .then((data) => {\n            //    this.normalizeData(data);\n\n            //    resolve(data);\n\n            //    // If we do not have socket updates available, then trigger an\n            //    // update event with this data.\n            //    if (this.AB.Network.type() != \"socket\") {\n            //       this.AB.emit(\"ab.datacollection.update\", {\n            //          objectId: this.object.id,\n            //          data,\n            //       });\n            //    }\n            // })\n            .catch((err) => {\n               errorPopup(err);\n               reject(err);\n            });\n      });\n   }\n\n   /**\n    * @method batchUpdate\n    * update value to many rows on the server.\n    */\n   batchUpdate({ rowIds, values }) {\n      return new Promise((resolve, reject) => {\n         var jobID = this.AB.jobID();\n         this.AB.Network.once(jobID, (context, err /*, data */) => {\n            if (err) {\n               reject(err);\n               return;\n            }\n            // this.normalizeData(data);\n            resolve(true);\n            // what about checking for socket updates?\n         });\n         this.AB.Network.put(\n            {\n               url: this.object.urlRestBatch(),\n               params: {\n                  rowIds,\n                  values,\n               },\n            },\n            { key: jobID, context: {} }\n         )\n            // .then(() => {\n            //    resolve(true);\n            // })\n            .catch(reject);\n      });\n   }\n};\n","//\n// ABModelQuery\n//\n// Represents the Data interface for an ABObjectQuery data.\n\nconst ABModel = require(\"./ABModel\");\n\nmodule.exports = class ABModelQuery extends ABModel {\n   ///\n   /// Instance Methods\n   ///\n\n   /**\n    * @method batchCreate\n    * update model values on the server.\n    */\n   batchCreate(values) {\n      var error = new Error(\n         \"ABObjectQuery.ABModelQuery.batchCreate() should not be called.\"\n      );\n      return Promise.reject(error);\n   }\n\n   /**\n    * @method create\n    * update model values on the server.\n    */\n   create(values) {\n      var error = new Error(\n         \"ABObjectQuery.ABModelQuery.create() should not be called.\"\n      );\n      return Promise.reject(error);\n   }\n\n   /**\n    * @method delete\n    * remove this model instance from the server\n    * @param {integer|UUID} id  the .id of the instance to remove.\n    * @return {Promise}\n    */\n   delete(id) {\n      var error = new Error(\n         \"ABObjectQuery.ABModelQuery.delete() should not be called.\"\n      );\n      return Promise.reject(error);\n   }\n\n   /**\n    * @method update\n    * update model values on the server.\n    */\n   update(id, values) {\n      var error = new Error(\n         \"ABObjectQuery.ABModelQuery.update() should not be called.\"\n      );\n      return Promise.reject(error);\n   }\n\n   /**\n    * @method batchUpdate\n    * update value to many rows on the server.\n    */\n   batchUpdate({ rowIds, values }) {\n      var error = new Error(\n         \"ABObjectQuery.ABModelQuery.batchUpdate() should not be called.\"\n      );\n      return Promise.reject(error);\n   }\n};\n","const ABObjectCore = require(\"../core/ABObjectCore\");\nconst ABObjectWorkspaceViewCollection = require(\"./workspaceViews/ABObjectWorkspaceViewCollection\");\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\n// NOTE: this has been moved to NetworkRestSocket:\n//\n// // Start listening for server events for object updates and call triggerEvent as the callback\n// if (typeof io != \"undefined\") {\n//    io.socket.on(\"ab.object.update\", function (msg) {\n//       AB.emit(\"ab.object.update\", {\n//          objectId: msg.objectId,\n//          data: msg.data,\n//       });\n//    });\n// } else {\n//    console.error(\"TODO: ABObject: configure Socket.io\");\n// }\n\n// io.socket.on(\"ab.object.delete\", function (msg) {\n// });\n\nmodule.exports = class ABObject extends ABObjectCore {\n   constructor(attributes, AB) {\n      super(attributes, AB);\n\n      this.workspaceViews = new ABObjectWorkspaceViewCollection(\n         attributes,\n         this,\n         AB\n      );\n\n      // listen for our ABFields.\"definition.updated\"\n      this.fields().forEach((f) => {\n         f.on(\"definition.updated\", (field) => {\n            // create a new Field with the updated def\n            var def = this.AB.definitionByID(field.id);\n            if (!def) return;\n\n            var newField = this.AB.fieldNew(def, this);\n\n            // we want to keep the same fieldID order:\n            var newFields = [];\n            this.fields().forEach((f) => {\n               if (f.id === field.id) {\n                  newFields.push(newField);\n                  return;\n               }\n               newFields.push(f);\n            });\n\n            this._fields = newFields;\n         });\n      });\n\n      // listen\n      // this.AB.on(\"ab.object.update\", (data) => {\n      //    if (this.id == data.objectId) this.fromValues(data.data);\n      // });\n\n      this._pendingNetworkRequests = {};\n      // {hash}   uuid : {Promise}\n      // convert our migrateXXXX() operations to be Relay/offline compatible.\n      // if a queued operation is sent after a web browser refresh, then\n      // we will NOT have a pending promise to .resolve()/.reject()\n\n      this._handler_object_migrate = (context, err, response) => {\n         // NOTE:\n         var pending = this._pendingNetworkRequests?.[context.uuid];\n         if (err) {\n            pending?.reject(err);\n            return;\n         }\n         pending?.resolve(response);\n      };\n      this.AB.Network.on(\"object.migrate\", this._handler_object_migrate);\n   }\n\n   /**\n    * @method refreshInstance()\n    * Used when a definition.updated message is detected on this ABObject.\n    * This method will return a new instance based upon the current definition\n    * and properly resolve any handlers and pending network Requests.\n    * @return {ABObject}\n    */\n   refreshInstance() {\n      var newObj = this.AB.objectByID(this.id);\n\n      // prevent doing this multiple times:\n      if (this._pendingNetworkRequests) {\n         // remove object.migrate listener\n         this.AB.Network.removeListener(\n            \"object.migrate\",\n            this._handler_object_migrate\n         );\n\n         // transfer the pending network requests\n         newObj._pendingNetworkRequests = this._pendingNetworkRequests;\n         this._pendingNetworkRequests = null;\n      }\n\n      return newObj;\n   }\n\n   ///\n   /// Static Methods\n   ///\n   /// Available to the Class level object.  These methods are not dependent\n   /// on the instance values of the Application.\n   ///\n\n   fromValues(attributes) {\n      /*\n\t\t{\n\t\t\tid: uuid(),\n\t\t\tname: 'name',\n\t\t\tlabelFormat: 'xxxxx',\n\t\t\tisImported: 1/0,\n\t\t\tisExternal: 1/0,\n\t\t\turlPath:'string',\n\t\t\timportFromObject: 'string', // JSON Schema style reference:  '#[ABApplication.id]/objects/[ABObject.id]'\n\t\t\t\t\t\t\t\t\t\t// to get other object:  ABApplication.objectFromRef(obj.importFromObject);\n\t\t\ttranslations:[\n\t\t\t\t{}\n\t\t\t],\n\t\t\tfields:[\n\t\t\t\t{ABDataField}\n\t\t\t]\n\t\t}\n\t\t*/\n\n      super.fromValues(attributes);\n\n      if (this.workspaceViews) this.workspaceViews.fromObj(attributes);\n   }\n\n   //// TODO: Refactor isValid() to ignore op and not error if duplicateName is own .id\n\n   isValid() {\n      var validator = this.AB.Validation.validator();\n\n      // label/name must be unique:\n      var isNameUnique =\n         this.AB.objects((o) => {\n            return (\n               o.id != this.id &&\n               o.name.toLowerCase() == this.name.toLowerCase()\n            );\n         }).length == 0;\n      if (!isNameUnique) {\n         validator.addError(\n            \"name\",\n            L('Object name must be unique (\"{0}\" already in use)', [this.name])\n         );\n      }\n\n      // Check the common validations:\n      // TODO:\n      // if (!inputValidator.validate(values.label)) {\n      // \t_logic.buttonSaveEnable();\n      // \treturn false;\n      // }\n\n      return validator;\n   }\n\n   /**\n    * @method isValidData\n    * Parse through the given data and return an array of any invalid\n    * value errors.\n    * @param {obj} data a key=>value hash of the inputs to parse.\n    * @return {array}\n    */\n   isValidData(data) {\n      var validator = this.AB.Validation.validator();\n      this.fields().forEach((f) => {\n         // check if value was passed, if so validate it\n         if (data.hasOwnProperty(f.columnName)) f.isValidData(data, validator);\n      });\n\n      return validator;\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   /**\n    * @method fieldNew()\n    *\n    * return an instance of a new (unsaved) ABField that is tied to this\n    * ABObject.\n    *\n    * NOTE: this new field is not included in our this.fields until a .save()\n    * is performed on the field.\n    *\n    * @param {obj} values  the initial values for this field.\n    *\t\t\t\t\t\t{ key:'{string}'} is required\n    * @return {ABField}\n    */\n   // fieldNew ( values ) {\n   // \t// NOTE: ABFieldManager returns the proper ABFieldXXXX instance.\n   // \treturn ABFieldManager.newField( values, this );\n   // }\n\n   /// ABApplication data methods\n\n   /**\n    * @method destroy()\n    *\n    * destroy the current instance of ABObject\n    *\n    * also remove it from our parent application\n    *\n    * @return {Promise}\n    */\n   async destroy() {\n      /*\n        return new Promise((resolve, reject) => {\n            // Remove the import object, then its model will not be destroyed\n            if (this.isImported) {\n                this.application\n                    .objectDestroy(this)\n                    .catch(reject)\n                    .then(() => {\n                        resolve();\n                    });\n\n                return;\n            }\n\n            // OK, some of our Fields have special follow up actions that need to be\n            // considered when they no longer exist, so before we simply drop this\n            // object/table, drop each of our fields and give them a chance to clean up\n            // what needs cleaning up.\n\n            // ==> More work, but safer.\n            var fieldDrops = [];\n            this.fields().forEach((f) => {\n                fieldDrops.push(f.destroy());\n            });\n\n            Promise.all(fieldDrops)\n                .then(() => {\n                    return new Promise((next, err) => {\n                        // now drop our table\n                        // NOTE: our .migrateXXX() routines expect the object to currently exist\n                        // in the DB before we perform the DB operations.  So we need to\n                        // .migrateDrop()  before we actually .objectDestroy() this.\n                        this.migrateDrop()\n                            .then(() => {\n                                // finally remove us from the application storage\n                                return this.application.objectDestroy(this);\n                            })\n                            .then(next)\n                            .catch(err);\n                    });\n                })\n\n                // flag .disable to queries who contains this removed object\n                .then(() => {\n                    return new Promise((next, err) => {\n                        this.application\n                            .queries(\n                                (q) =>\n                                    q.objects((o) => o.id == this.id).length > 0\n                            )\n                            .forEach((q) => {\n                                q._objects = q.objects((o) => o.id != this.id);\n\n                                q.disabled = true;\n                            });\n\n                        next();\n                    });\n                })\n                .then(resolve)\n                .catch(reject);\n        });\n */\n\n      var removeFromApplications = () => {\n         var allRemoves = [];\n         this.AB.applications().forEach((app) => {\n            allRemoves.push(app.objectRemove(this));\n         });\n         return Promise.all(allRemoves);\n      };\n\n      var disableRelatedQueries = () => {\n         return new Promise((next /*, err */) => {\n            this.AB.queries(\n               (q) => q.objects((o) => o.id == this.id).length > 0\n            ).forEach((q) => {\n               // q._objects = q.objects((o) => o.id != this.id);\n\n               q.disabled = true;\n            });\n\n            next();\n         });\n      };\n\n      try {\n         // 1) remove us from all Application:\n         await removeFromApplications();\n\n         // 2) disable any connected Queries\n         await disableRelatedQueries();\n\n         // if an imported Object (FederatedTable, Existing Table, etc...)\n         // then skip this step\n         if (this.isImported) {\n            return Promise.resolve();\n         }\n\n         // time to remove my table:\n         // NOTE: our .migrateXXX() routines expect the object to currently exist\n         // in the DB before we perform the DB operations.  So we need to\n         // .migrateDrop()  before we actually .destroy() this.\n         await this.migrateDrop();\n\n         // now remove my definition\n\n         // start with my fields:\n         var fieldDrops = [];\n\n         // Only ABObjects should attempt any fieldDrops.\n         // ABObjectQueries can safely skip this step:\n         if (this.type == \"object\") {\n            var allFields = this.fields();\n            this._fields = []; // clear our field counter so we don't retrigger\n            // this.save() on each field.destroy();\n\n            allFields.forEach((f) => {\n               fieldDrops.push(f.destroy());\n            });\n         }\n         await Promise.all(fieldDrops);\n\n         await super.destroy();\n         this.emit(\"destroyed\");\n      } catch (err) {\n         this.AB.notify.developer(err, {\n            context: \"ABObject.destroy(): error destroying object.\",\n         });\n      }\n\n      // return Promise.resolve()\n      //    .then(() => {\n      //       // 1) remove us from all Application:\n      //       return removeFromApplications();\n      //    })\n      //    .then(() => {\n      //       // 2) disable any connected Queries\n      //       return disableRelatedQueries();\n      //    })\n      //    .then(() => {\n      //       // if an imported Object (FederatedTable, Existing Table, etc...)\n      //       // then skip this step\n      //       if (this.isImported) {\n      //          return Promise.resolve();\n      //       }\n\n      //       // time to remove my table:\n      //       // NOTE: our .migrateXXX() routines expect the object to currently exist\n      //       // in the DB before we perform the DB operations.  So we need to\n      //       // .migrateDrop()  before we actually .destroy() this.\n      //       return this.migrateDrop();\n      //    })\n      //    .then(() => {\n      //       // now remove my definition\n\n      //       // start with my fields:\n      //       var fieldDrops = [];\n\n      //       // Only ABObjects should attempt any fieldDrops.\n      //       // ABObjectQueries can safely skip this step:\n      //       if (this.type == \"object\") {\n      //          var allFields = this.fields();\n      //          this._fields = []; // clear our field counter so we don't retrigger\n      //          // this.save() on each field.destroy();\n\n      //          allFields.forEach((f) => {\n      //             fieldDrops.push(f.destroy());\n      //          });\n      //       }\n\n      //       return Promise.all(fieldDrops)\n      //          .then(() => {\n      //             // now me.\n      //             return super.destroy();\n      //          })\n      //          .then(() => {\n      //             this.emit(\"destroyed\");\n      //          });\n      //    });\n   }\n\n   /**\n    * @method save()\n    *\n    * persist this instance of ABObject with it's parent ABApplication\n    *\n    *\n    * @return {Promise}\n    *\t\t\t\t\t\t.resolve( {this} )\n    */\n   async save() {\n      var isAdd = false;\n\n      // if this is our initial save()\n      if (!this.id) {\n         this.label = this.label || this.name;\n         isAdd = true;\n      }\n\n      try {\n         await super.save();\n         if (isAdd) {\n            await this.migrateCreate();\n         }\n         return this;\n      } catch (err) {\n         this.AB.notify.developer(err, {\n            context: \"ABObject.save()\",\n            obj: this.toObj(),\n         });\n         throw err;\n      }\n   }\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABApplication instance\n    * into the values needed for saving to the DB.\n    *\n    * Most of the instance data is stored in .json field, so be sure to\n    * update that from all the current values of our child fields.\n    *\n    * @return {json}\n    */\n   toObj() {\n      var result = super.toObj();\n\n      result.objectWorkspaceViews = this.workspaceViews.toObj();\n\n      return result;\n   }\n\n   ///\n   /// DB Migrations\n   ///\n\n   migrateCreate() {\n      return new Promise((resolve, reject) => {\n         var uuid = this.AB.uuid();\n         this._pendingNetworkRequests[uuid] = { resolve, reject };\n         var jobResponse = {\n            key: \"object.migrate\",\n            context: { uuid, id: this.id },\n         };\n         this.AB.Network.post(\n            {\n               url: `/definition/migrate/object/${this.id}`,\n            },\n            jobResponse\n         );\n      });\n   }\n\n   migrateDrop() {\n      return new Promise((resolve, reject) => {\n         var uuid = this.AB.uuid();\n         this._pendingNetworkRequests[uuid] = { resolve, reject };\n         var jobResponse = {\n            key: \"object.migrate\",\n            context: { uuid, id: this.id },\n         };\n         this.AB.Network[\"delete\"](\n            {\n               url: `/definition/migrate/object/${this.id}`,\n            },\n            jobResponse\n         );\n      });\n   }\n\n   ///\n   /// Working with Client Components:\n   ///\n\n   /**\n    * @method columnResize()\n    *\n    * save the new width of a column\n    *\n    * @param {} id The instance of the field to save.\n    * @param {int} newWidth the new width of the field\n    * @param {int} oldWidth the old width of the field\n    * @return {Promise}\n    */\n   columnResize(columnName, newWidth /*, oldWidth */) {\n      var fieldID = null;\n      for (var i = 0; i < this._fields.length; i++) {\n         if (this._fields[i].columnName == columnName) {\n            fieldID = this._fields[i].id;\n            break;\n            // this._fields[i].settings.width = newWidth;\n         }\n      }\n\n      // Johnny: This is better but still not right.  the ABObject should not be\n      // storing sizes for field widths.  That is a function of the UI and which\n      // Grid is being displayed.  THAT GRID should be storing a column width\n      // locally.\n      // TODO: once we have v2 in place.\n\n      var fieldSettings = this.AB.localSettings(fieldID);\n      fieldSettings = fieldSettings || {};\n      fieldSettings.width = newWidth;\n\n      return this.AB.localSettings(fieldID, fieldSettings);\n      // return this.save();\n   }\n\n   // return the column headers for this object\n   // @param {bool} isObjectWorkspace  return the settings saved for the object workspace\n   columnHeaders(\n      isObjectWorkspace,\n      isEditable,\n      summaryColumns,\n      countColumns,\n      hiddenFieldNames\n   ) {\n      summaryColumns = summaryColumns || [];\n      countColumns = countColumns || [];\n\n      var headers = [];\n      // var columnNameLookup = {};\n\n      // get the header for each of our fields:\n      this.fields().forEach((f) => {\n         var header = f.columnHeader({\n            isObjectWorkspace: isObjectWorkspace,\n            editable: isEditable,\n         });\n\n         if (isEditable) {\n            header.validationRules = f.settings.validationRules;\n         }\n\n         header.alias = f.alias || undefined; // query type\n         header.fieldID = f.id;\n         // header.fieldURL = f.urlPointer();\n\n         // if the field specifies a width\n         if (f.settings.width != 0) {\n            header.width = f.settings.width;\n         }\n\n         // if the User has already updated a local width for this\n         var fieldSettings = this.AB.localSettings(f.id);\n         if (fieldSettings && fieldSettings.width) {\n            if (!header.width || fieldSettings.width > header.width) {\n               // set column width to the customized width\n               header.width = fieldSettings.width;\n            }\n         }\n\n         if (!header.width) {\n            // set column width to adjust:true by default;\n            header.adjust = true;\n         }\n\n         // add the summary footer\n         if (summaryColumns.indexOf(f.id) > -1) {\n            if (f.key == \"calculate\" || f.key == \"formula\") {\n               header.footer = { content: \"totalColumn\", field: f };\n            } else {\n               header.footer = { content: \"summColumn\" };\n            }\n         }\n         // add the count footer\n         else if (countColumns.indexOf(f.id) > -1)\n            header.footer = { content: \"countColumn\" };\n\n         headers.push(header);\n         // columnNameLookup[header.id] = f.columnName; // name => id\n      });\n\n      // update our headers with any settings applied in the Object Workspace\n      /*\n      // In v2: this is handled by the ABDesigner\n      //\n      if (isObjectWorkspace) {\n         let hiddenFieldList = [];\n\n         if (hiddenFieldNames && hiddenFieldNames.length > 0)\n            hiddenFieldList = hiddenFieldNames;\n         // else if (this.workspaceHiddenFields)\n         //    hiddenFieldList = this.workspaceHiddenFields;\n\n         if (hiddenFieldList.length > 0) {\n            hiddenFieldList.forEach((hfID) => {\n               headers.forEach((h) => {\n                  if (columnNameLookup[h.id] == hfID) {\n                     h.hidden = true;\n                  }\n               });\n            });\n         }\n      }\n      */\n\n      return headers;\n   }\n\n   // after a component has rendered, tell each of our fields to perform\n   // any custom display operations\n   // @param {Webix.DataStore} data a webix datastore of all the rows effected\n   //        by the render.\n   customDisplays(data, App, DataTable, rowIds, isEditable) {\n      if (!data || !data.getFirstId) return;\n\n      // var fields = this.fields(f => this.workspaceHiddenFields.indexOf(f.columnName) < 0);\n      let fields = [];\n      DataTable.eachColumn((columnName) => {\n         let field = this.fields((f) => f.columnName == columnName)[0];\n         if (field) fields.push(field);\n      });\n\n      if (rowIds != null) {\n         rowIds.forEach((id) => {\n            let row = data.getItem(id);\n            if (row) {\n               fields.forEach((f) => {\n                  let node = DataTable.getItemNode({\n                     row: row.id,\n                     column: f.columnName,\n                  });\n                  f.customDisplay(row, App, node, {\n                     editable: isEditable,\n                  });\n               });\n            }\n         });\n      } else {\n         let id = data.getFirstId();\n         while (id) {\n            var row = data.getItem(id);\n            if (row) {\n               fields.forEach((f) => {\n                  var node = DataTable.getItemNode({\n                     row: row.id,\n                     column: f.columnName,\n                  });\n                  f.customDisplay(row, App, node, {\n                     editable: isEditable,\n                  });\n               });\n            }\n            id = data.getNextId(id);\n         }\n      }\n   }\n\n   // Display data with label format of object\n   displayData(rowData) {\n      if (rowData == null) return \"\";\n\n      // translate multilingual\n      //// TODO: isn't this a MLObject??  use this.translate()\n      var mlFields = this.multilingualFields();\n      this.translate(rowData, rowData, mlFields);\n\n      var labelData = this.labelFormat || \"\";\n\n      // default label\n      if (!labelData && this.fields().length > 0) {\n         var defaultField = this.fields((f) => f.fieldUseAsLabel())[0];\n         if (defaultField) labelData = `{${defaultField.id}}`;\n         else\n            labelData = `${this.AB.isUUID(rowData.id) ? \"ID: \" : \"\"}${\n               rowData.id\n            }`; // show id of row\n      }\n\n      // get column ids in {colId} template\n      // ['{colId1}', ..., '{colIdN}']\n      var colIds = labelData.match(/\\{[^}]+\\}/g);\n\n      if (colIds && colIds.forEach) {\n         colIds.forEach((colId) => {\n            var colIdNoBracket = colId.replace(\"{\", \"\").replace(\"}\", \"\");\n\n            var field = this.fieldByID(colIdNoBracket);\n            if (field == null) return;\n\n            labelData = labelData.replace(colId, field.format(rowData) || \"\");\n         });\n      }\n\n      // if label is empty, then show .id\n      if (!labelData.trim()) {\n         let labelSettings = this.labelSettings || {};\n         if (labelSettings && labelSettings.isNoLabelDisplay) {\n            labelData = L(labelSettings.noLabelText || \"[No Label]\");\n         } else {\n            // show id of row\n            labelData = `${this.AB.isUUID(rowData.id) ? \"ID: \" : \"\"}${\n               rowData.id\n            }`;\n         }\n      }\n\n      return labelData;\n   }\n\n   currentView() {\n      return this.workspaceViews.getCurrentView();\n   }\n\n   warningsAll() {\n      // report both OUR warnings, and any warnings from any of our fields\n      var allWarnings = [].concat(this._warnings);\n      this.fields().forEach((f) => {\n         allWarnings = allWarnings.concat(f.warnings());\n      });\n\n      if (this.fields().length == 0) {\n         allWarnings.push({ message: \"I got no fields.\", data: {} });\n      }\n\n      this.indexes().forEach((i) => {\n         allWarnings = allWarnings.concat(i.warnings());\n      });\n\n      return allWarnings;\n   }\n\n   // warningsEval() {\n   //    // our .fromValues() has already registered any missing fields.\n   //    // those should get reported from warnings()\n   // }\n\n   isUuid(text) {\n      console.error(\n         \"ABObject.isUuid(): is depreciated.  directly reference AB.Rules.isUUID() instead.\"\n      );\n      return this.AB.isUUID(text);\n   }\n};\n","const ABObject = require(\"./ABObject\");\n\n/**\n * ABObjectExternal\n * These are ABObjects that ... (might need to be refactored out?)\n * NOTE: on the web client, these should function just like ABObjects\n */\nmodule.exports = class ABObjectExternal extends ABObject {};\n","const ABObject = require(\"./ABObject\");\n\n/**\n * ABObjectImport\n * These are ABObjects that were Imported from existing Tables in the\n * system.\n *\n * NOTE: on the web client, these should function just like ABObjects\n */\nmodule.exports = class ABObjectImport extends ABObject {};\n","//\n// ABObjectQuery\n//\n// A type of Object in our system that is based upon a complex relationship of multiple\n// existing Objects.\n//\n// In the QueryBuilder section of App Builder, a new Query Object can be created.\n// An initial Object can be chosen from our current list of Objects. After that, additional Objects\n// and a specified join type can be specified.\n//\n// A list of fields from each specified Object can also be included as the data to be returned.\n//\n// A where statement is also part of the definition.\n//\n\nconst ABObjectQueryCore = require(\"../core/ABObjectQueryCore\");\n\nvar ABFactory = null;\nif (typeof io != \"undefined\") {\n   io.socket.on(\"ab.query.update\", function (msg) {\n      if (ABFactory) {\n         ABFactory.emit(\"ab.query.update\", {\n            queryId: msg.queryId,\n            data: msg.data,\n         });\n      } else {\n         console.error(\n            \"ABObjectQuery:: received io.socket msg before ABFactory is defined\"\n         );\n         console.error(\"TODO: move this to ABFactory!\");\n      }\n   });\n} else {\n   console.error(\"TODO: install socket.io client for sails updates.\");\n}\n\n// io.socket.on(\"ab.query.delete\", function (msg) {\n// });\n\nmodule.exports = class ABObjectQuery extends ABObjectQueryCore {\n   constructor(attributes, AB) {\n      super(attributes, AB);\n\n      if (!ABFactory) {\n         ABFactory = AB;\n      }\n      // listen\n      this.AB.on(\"ab.query.update\", (data) => {\n         if (this.id == data.queryId) this.fromValues(data.data);\n      });\n\n      // .fromValues() should already have been called in super()\n      // so now add in our conditionScan()\n      // NOTE: this can be folded into the Core once filterComplex\n      // is fully implemented and not on Platform only.\n\n      // now scan our conditions to make sure they are\n      // 1) reference fields that exist in our Query\n      // 2) completely filled out conditions.\n      this.conditionScan(this.where);\n   }\n\n   ///\n   /// Static Methods\n   ///\n   /// Available to the Class level object.  These methods are not dependent\n   /// on the instance values of the Application.\n   ///\n\n   ///\n   /// Instance Methods\n   ///\n\n   /// ABApplication data methods\n\n   /**\n    * @method destroy()\n    *\n    * destroy the current instance of ABObjectQuery\n    *\n    * also remove it from our parent application\n    *\n    * @return {Promise}\n    */\n   // destroy() {\n   //    return super.destroy().then(() => {\n   //       console.error(\"Move .queryRemove() to Appbuilder Designer.\");\n   //       // return this.AB.queryRemove(this);\n   //    });\n   // }\n\n   /**\n    * @method save()\n    *\n    * persist this instance of ABObjectQuery with it's parent ABApplication\n    *\n    * @return {Promise}\n    *\t\t\t\t\t\t.resolve( {this} )\n    */\n   // async save() {\n   //    try {\n   //       await super.save();\n   //       return this;\n   //    } catch (err) {\n   //       this.AB.notify.developer(err, {\n   //          context: \"ABObjectQuery.save()\",\n   //          query: this.toObj(),\n   //       });\n   //       throw err;\n   //    }\n   // }\n\n   ///\n   /// Fields\n   ///\n\n   /**\n    * @method importFields\n    * instantiate a set of fields from the given attributes.\n    * Our attributes are a set of field URLs That should already be created in their respective\n    * ABObjects.\n    * @param {array} fieldSettings The different field urls for each field\n    *             { }\n    * @param {bool} shouldAliasColumn\n    *        should we add the object alias to the columnNames?\n    *        this is primarily used on the web client\n    */\n   importFields(fieldSettings) {\n      super.importFields(fieldSettings);\n\n      this._fields.forEach((fieldEntry) => {\n         // include object name {aliasName}.{columnName}\n         // to use it in grid headers & hidden fields\n         fieldEntry.field.columnName = `${fieldEntry.alias}.${fieldEntry.field.columnName}`;\n      });\n   }\n\n   /**\n    * @method columnResize()\n    *\n    * save the new width of a column\n    *\n    * @param {} id The instance of the field to save.\n    * @param {int} newWidth the new width of the field\n    * @param {int} oldWidth the old width of the field\n    * @return {Promise}\n    */\n   columnResize(columnName, newWidth, oldWidth) {\n      let field = this.fields((f) => f.columnName == columnName)[0];\n      if (field) {\n         field.settings.width = newWidth;\n\n         return this.save();\n      } else {\n         return Promise.resolve();\n      }\n   }\n\n   ///\n   /// Working with Client Components:\n   ///\n\n   // return the column headers for this object\n   // @param {bool} isObjectWorkspace  return the settings saved for the object workspace\n   columnHeaders(\n      isObjectWorkspace,\n      isEditable,\n      summaryColumns,\n      countColumns,\n      hiddenFieldNames\n   ) {\n      var headers = super.columnHeaders(\n         isObjectWorkspace,\n         isEditable,\n         summaryColumns,\n         countColumns,\n         hiddenFieldNames\n      );\n\n      headers.forEach((h) => {\n         // pull object by alias\n         let object = this.objectByAlias(h.alias);\n         if (!object) return;\n\n         let field = object.fieldByID(h.fieldID);\n         if (!field) return;\n\n         // NOTE: query v1\n         let alias = \"\";\n         if (Array.isArray(this.joins())) {\n            alias = field.object.name;\n         } else {\n            alias = h.alias;\n         }\n\n         // include object name {aliasName}.{columnName}\n         // to use it in grid headers & hidden fields\n         h.id = `${alias}.${field.columnName}`;\n\n         // label\n         if (this.settings && this.settings.hidePrefix) {\n            h.header = `${field.label || \"\"}`;\n         } else {\n            h.header = `${field.object.label || \"\"}.${field.label || \"\"}`;\n         }\n\n         // icon\n         if (field.settings && field.settings.showIcon) {\n            h.header = `<span class=\"webix_icon fa fa-${field.fieldIcon()}\"></span>${\n               h.header\n            }`;\n         }\n\n         // If this query supports grouping, then add folder icon to display in grid\n         if (this.isGroup) {\n            let originTemplate = h.template;\n\n            h.template = (item, common) => {\n               if (item[h.id])\n                  return (\n                     common.icon(item, common) +\n                     (originTemplate\n                        ? originTemplate(item, common, item[h.id])\n                        : item[h.id])\n                  );\n               else return \"\";\n            };\n         }\n\n         h.adjust = true;\n         h.minWidth = 220;\n      });\n\n      return headers;\n   }\n\n   /**\n    * @method conditionScan()\n    * Scan the provided condition object and determine if there are any\n    * configuration issues.\n    * @param {obj} rule\n    *        the QueryBuilder rule that we are scanning.\n    * @param {array} listWarnings\n    *        An array of warnings that we should add our notices to.\n    */\n   conditionScan(rule) {\n      if (!rule) {\n         return;\n      }\n\n      if (rule.glue) {\n         (rule.rules || []).forEach((r) => {\n            this.conditionScan(r);\n         });\n         return;\n      }\n\n      // 1) we need to have any key as one of our fields.\n      let field = this.fieldByID(rule.key);\n      if (!field && rule.key != \"this_object\") {\n         this.emit(\n            \"warning\",\n            \"condition does not reference one of our fields\",\n            {\n               rule,\n            }\n         );\n      }\n\n      // 2) completely filled out conditions.\n      if (!this._conditionCheck) {\n         this._conditionCheck = this.AB.filterComplexNew(\n            `${this.id}_conditionCheck`\n         );\n         // {FilterComplex} ._conditionCheck\n         // has our .isConditionComplete() method.\n      }\n      if (!this._conditionCheck.isConditionComplete(rule)) {\n         this.emit(\"warning\", \"incomplete condition definition\", {\n            rule,\n         });\n      }\n   }\n\n   /**\n    * @method warningsAll()\n    * Compile any warnings from this Query, or any of it's fields.\n    * @return {array}\n    *         An array of warning objects.\n    *         .message {string} message to display\n    *         .data {obj} associated debug info for this warning.\n    */\n   // warningsAll() {\n   //    // report both OUR warnings, and any warnings from any of our fields\n   //    // NOTE: this will get\n   //    var allWarnings = super.warningsAll();\n\n   //    return allWarnings;\n   // }\n};\n","const ABProcessCore = require(\"../core/ABProcessCore\");\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABProcess extends ABProcessCore {\n   constructor(attributes, AB) {\n      super(attributes, AB);\n\n      // listen\n      this.AB.on(\"ab.abprocess.update\", (data) => {\n         if (this.id == data.objectId) this.fromValues(data.data);\n      });\n   }\n\n   /**\n    * @method destroy()\n    *\n    * destroy the current instance of ABObject\n    *\n    * also remove it from our parent application\n    *\n    * @return {Promise}\n    */\n   destroy() {\n      // remove all my Elements\n      var allElements = this.elements();\n      var allDestroy = [];\n      allElements.forEach((e) => {\n         allDestroy.push(e.destroy());\n      });\n\n      return Promise.all(allDestroy).then(() => {\n         // now remove myself\n         return new Promise((resolve, reject) => {\n            this.toDefinition()\n               .destroy()\n               .then(() => {\n                  // allow normal processing to contine now:\n                  resolve();\n               })\n               .then(() => {\n                  // in the background\n                  // remove this reference from ALL Applications that link\n                  // to me:\n                  console.error(\n                     \"TODO: ABProcess.destroy(): refactor to .emit('destroyed') and let containing Apps self remove.\"\n                  );\n                  var appsWithProcess = this.AB.applications().find((a) => {\n                     return a.hasProcess(this);\n                  });\n                  if (appsWithProcess.length > 0) {\n                     appsWithProcess.forEach((a) => {\n                        a.processRemove(this);\n                     });\n                  }\n               })\n               .catch((err) => {\n                  reject(err);\n               });\n         });\n      });\n   }\n\n   /**\n    * @method save()\n    *\n    * persist this instance of ABObject with it's parent ABApplication\n    *\n    *\n    * @return {Promise}\n    *\t\t\t\t\t\t.resolve( {this} )\n    */\n   save() {\n      // if this is an update:\n      // if (this.id) {\n      // \treturn ABDefinition.update(this.id, this.toDefinition());\n      // } else {\n\n      // \treturn ABDefinition.create(this.toDefinition());\n      // }\n\n      // make sure all our tasks have save()ed.\n      var allSaves = [];\n      var allTasks = this.elements();\n      allTasks.forEach((t) => {\n         allSaves.push(t.save());\n      });\n      return Promise.all(allSaves).then(() => {\n         // now we can save our Process definition\n         return this.toDefinition()\n            .save()\n            .then((data) => {\n               // if I didn't have an .id then this was a create()\n               // and I need to update my data with the generated .id\n\n               if (!this.id) {\n                  this.id = data.id;\n               }\n\n               // Also, our embedded elements now all have .ids\n               // where they might not have before.  So now\n               // rebuild our this._elements hash with all id\n               var _new = {};\n               Object.keys(this._elements).forEach((k) => {\n                  _new[this._elements[k].id] = this._elements[k];\n               });\n               this._elements = _new;\n            });\n      });\n   }\n\n   isValid() {\n      var validator = this.AB.Validation.validator();\n\n      // label/name must be unique:\n      var isNameUnique =\n         this.AB.processes((o) => {\n            return o.name.toLowerCase() == this.name.toLowerCase();\n         }).length == 0;\n      if (!isNameUnique) {\n         validator.addError(\n            \"name\",\n            L(`Process name must be unique (\"{0}\" already in use)`, [this.name])\n         );\n      }\n\n      return validator;\n   }\n\n   /**\n    * @method elementNewForModelDefinition()\n    * create a new process element defined by the given BPMN:Element\n    *\n    * the BPMN:Element definition comes from the BPMN Modeler when a new\n    * diagram element is created.\n    *\n    * @param {BPMN:Element} element\n    *        the BPMN modeler diagram element definition\n    * @return {ABProcess[OBJ]}\n    */\n   elementNewForModelDefinition(element) {\n      var task = this.AB.processElementNewForModelDefinition(element, this);\n      if (task) {\n         this.elementAdd(task);\n      }\n      return task;\n   }\n};\n","const ABViewManagerCore = require(\"../core/ABViewManagerCore\");\n\nmodule.exports = class ABViewManager extends ABViewManagerCore {};\n","var L = null;\n// multilingual Label fn()\n\nmodule.exports = class CSVImporter {\n   constructor(Label) {\n      // {ABMultilingual.label()} function.\n      //\n      if (!L) {\n         L = Label;\n\n         // if this was a v1: App param:\n         if (Label.Label) {\n            L = Label.Label;\n         }\n      }\n   }\n\n   /**\n    * @method getSeparateItems()\n    * Return the options of how the CSV values are separated.\n    * @return {array}  [ {id, value} ... ]\n    */\n   getSeparateItems() {\n      return [\n         { id: \",\", value: L(\"Comma (,)\") },\n         { id: \"\\t\", value: L(\"Tab (&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)\") },\n         { id: \";\", value: L(\"Semicolon (;)\") },\n         { id: \"s\", value: L(\"Space ( )\") },\n      ];\n   }\n\n   /**\n    * @method validateFile\n    * Validate file extension\n    * @param {*} fileInfo\n    *        https://docs.webix.com/api__ui.uploader_onbeforefileadd_event.html\n    * @return {boolean}\n    */\n   validateFile(fileInfo) {\n      if (!fileInfo || !fileInfo.file || !fileInfo.file.type) return false;\n\n      // validate file type\n      let extensionType = fileInfo.file.type.toLowerCase();\n      if (\n         extensionType == \"text/csv\" ||\n         extensionType == \"application/vnd.ms-excel\"\n      ) {\n         return true;\n      } else {\n         return false;\n      }\n   }\n\n   /**\n    * @method getDataRows\n    * Pull data rows from the CSV file\n    *\n    * @param {Object} fileInfo - https://docs.webix.com/api__ui.uploader_onbeforefileadd_event.html\n    * @param {string} separatedBy\n    *\n    * @return {Promise} -[\n    * \t\t\t\t\t\t[\"Value 1.1\", \"Value 1.2\", \"Value 1.3\"],\n    * \t\t\t\t\t\t[\"Value 2.1\", \"Value 2.2\", \"Value 2.3\"],\n    * \t\t\t\t\t]\n    */\n   getDataRows(fileInfo, separatedBy) {\n      if (!this.validateFile(fileInfo)) return Promise.reject();\n\n      return new Promise((resolve, reject) => {\n         // read CSV file\n         let reader = new window.FileReader();\n         reader.onload = (e) => {\n            let result = [];\n\n            // split lines\n            let dataRows = reader.result\n               .split(/\\r\\n|\\n|\\r/) // CRLF = \\r\\n; LF = \\n; CR = \\r;\n               .filter((row) => row && row.length > 0);\n\n            // split columns\n            (dataRows || []).forEach((row) => {\n               let dataCols = [];\n               if (separatedBy == \",\") {\n                  // NOTE: if the file contains ,, .match() can not reconize this empty string\n                  row = row.replace(/,,/g, \", ,\");\n\n                  // https://stackoverflow.com/questions/11456850/split-a-string-by-commas-but-ignore-commas-within-double-quotes-using-javascript#answer-11457952\n                  dataCols = row.match(/(\".*?\"|[^\",]+)(?=\\s*,|\\s*$)/g);\n               } else {\n                  dataCols = row.split(separatedBy);\n               }\n\n               result.push(dataCols.map((dCol) => this.reformat(dCol)));\n            });\n\n            resolve(result);\n         };\n         reader.readAsText(fileInfo.file);\n      });\n   }\n\n   /**\n    * @method getGuessDataType\n    * return our best guess of what type of data for the requested column.\n    * @param {array} dataRows\n    *        The data we are evaluating:\n    *        [\n    *           [\"Value 1.1\", \"Value 1.2\", \"Value 1.3\"],\n    *           [\"Value 2.1\", \"Value 2.2\", \"Value 2.3\"],\n    * \t\t ]\n    * @param colIndex {Number}\n    * @return {string}\n    */\n   getGuessDataType(dataRows, colIndex) {\n      var data,\n         // {various} the data pulled from the requested row/column\n         repeatNum = 10;\n      // {integer} how many rows do we want to scan trying to find a value\n\n      // Loop to find a value\n      for (var i = 1; i <= repeatNum; i++) {\n         var line = dataRows[i];\n         if (!line) break;\n\n         data = line[colIndex];\n\n         if (data != null && data.length > 0) break;\n      }\n\n      if (data == null || data == \"\") {\n         return \"string\";\n      } else if (\n         data == 0 ||\n         data == 1 ||\n         data == true ||\n         data == false ||\n         data == \"checked\" ||\n         data == \"unchecked\"\n      ) {\n         return \"boolean\";\n      } else if (!isNaN(data)) {\n         return \"number\";\n      } else if (Date.parse(data)) {\n         return \"date\";\n      } else {\n         // determine which type of string this might be:\n         if (data.length > 100) return \"LongText\";\n         else return \"string\";\n      }\n   }\n\n   /**\n    * @method reformat\n    * @param {string} str\n    */\n   reformat(str) {\n      if (!str) return \"\";\n\n      return str.trim().replace(/\"/g, \"\").replace(/'/g, \"\");\n   }\n};\n","const FilterComplexCore = require(\"../core/FilterComplexCore\");\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\n/**\n * @function _toInternal()\n * translate our external QB conditions into our internal format that\n * makes the cond.rule unique by adding the field.id to the rule.\n * @param {obj} cond - {\n *                         rules: [\n *                            {\n *                               alias: string || undefined,\n *                               key: uuid,\n *                               rule: string,\n *                               value: object,\n *                            }\n *                         ]\n *                      }\n *        the QB condition format we use exernally in our AB system.\n */\nfunction _toInternal(cond, fields = []) {\n   if (!cond) return;\n   if (cond.key) {\n      // Convert to format\n      // {\n      //    glue: \"and\",\n      //    rules: [\n      //       {\n      //          field: \"test_col\",\n      //          condition: { type: \"greater\", filter: 100 },\n      //       },\n      //    ],\n      // }\n      const field = fields.filter(\n         (f) => f.id == cond.key || f.columnName == cond.key\n      )[0];\n      cond.field = field?.columnName ?? field?.id;\n\n      cond.condition = {\n         type: cond.rule,\n         filter: cond.value,\n      };\n\n      if (Array.isArray(cond.value)) cond.includes = cond.value;\n      else cond.includes = (cond.value ?? \"\").split(\",\");\n\n      if (field?.key == \"date\" || field?.key == \"datetime\") {\n         cond.condition.filter = cond.condition.filter\n            ? AB.toDate(cond.condition.filter)\n            : null;\n\n         cond.includes = cond.includes.map((v) => AB.toDate(v));\n      }\n\n      delete cond.key;\n      delete cond.rule;\n      delete cond.value;\n   }\n\n   if (cond.rules && cond.rules.length) {\n      (cond.rules ?? []).forEach((r) => {\n         _toInternal(r, fields);\n      });\n   }\n}\n\n/**\n * @function _toExternal()\n * translate our internal QB conditions into our external format that\n * where the cond.rule no longer has the field.id.\n * @param {obj} cond - {\n *                         glue: \"and\",\n *                         rules: [\n *                            {\n *                               field: \"test_col\",\n *                               condition: { type: \"greater\", filter: 100 },\n *                            },\n *                         ],\n *                      }\n *        the QB condition format we use internally\n */\nfunction _toExternal(cond, fields = []) {\n   if (!cond) return;\n   if (cond.field) {\n      let field = fields.filter((f) => f.columnName == cond.field)[0];\n      // cond.alias = alias || undefined;\n      cond.key = field?.id ?? cond.field;\n      cond.condition = cond.condition ?? {};\n      cond.rule = cond.condition.type;\n\n      // Convert multi-values to a string\n      let values = cond.includes ?? [];\n      if (cond.condition.filter && values.indexOf(cond.condition.filter) < 0)\n         values.push(cond.condition.filter);\n\n      cond.value = values\n         .map((v) => {\n            // Convert date format\n            if (field && (field.key == \"date\" || field.key == \"datetime\")) {\n               return field.exportValue(v);\n            } else if (v instanceof Date) {\n               return v.toISOString();\n            } else {\n               return v;\n            }\n         })\n         .join(\",\");\n\n      delete cond.field;\n      delete cond.type;\n      delete cond.includes;\n      delete cond.condition;\n   }\n\n   if (cond.rules && cond.rules.length) {\n      (cond.rules ?? []).forEach((r) => {\n         _toExternal(r, fields);\n      });\n   }\n}\n\nmodule.exports = class FilterComplex extends FilterComplexCore {\n   constructor(idBase, AB, options = {}) {\n      idBase = idBase ?? \"ab_filterComplex\";\n\n      super(idBase, AB);\n\n      this._options = options ?? {};\n\n      this._initComplete = false;\n      // {bool}\n      // trying to prevent multiple .init() from being called due to\n      // various ways of initializing the component.\n\n      this.observing = false;\n      // {bool}\n      // try to prevent multiple observers generating >1 \"changed\"\n      // event.\n\n      let labels = (this.labels = {\n         common: (AB._App ?? {}).labels,\n         component: {\n            and: L(\"And\"),\n            or: L(\"Or\"),\n\n            thisObject: L(\"This Object\"),\n            inQuery: L(\"In Query\"),\n            notInQuery: L(\"Not In Query\"),\n            inQueryField: L(\"By Query Field\"),\n            notInQueryField: L(\"Not By Query Field\"),\n\n            inQueryFieldQueryPlaceholder: L(\"Choose a Query\"),\n            inQueryFieldFieldPlaceholder: L(\"Choose a Field\"),\n\n            sameAsUser: L(\"Same As User\"),\n            notSameAsUser: L(\"Not Same As User\"),\n\n            sameAsField: L(\"Same As Field\"),\n            notSameAsField: L(\"Not Field\"),\n\n            inDataCollection: L(\"In Data Collection\"),\n            notInDataCollection: L(\"Not In Data Collection\"),\n\n            containsCondition: L(\"contains\"),\n            notContainsCondition: L(\"doesn't contain\"),\n            isCondition: L(\"is\"),\n            isNotCondition: L(\"is not\"),\n            isEmpty: L(\"is empty\"),\n            isNotEmpty: L(\"is not empty\"),\n\n            beforeCondition: L(\"is before\"),\n            afterCondition: L(\"is after\"),\n            onOrBeforeCondition: L(\"is on or before\"),\n            onOrAfterCondition: L(\"is on or after\"),\n            beforeCurrentCondition: L(\"is before current date\"),\n            afterCurrentCondition: L(\"is after current date\"),\n            onOrBeforeCurrentCondition: L(\"is on or before current date\"),\n            onOrAfterCurrentCondition: L(\"is on or after current date\"),\n            onLastDaysCondition: L(\"last ... days\"),\n            onNextDaysCondition: L(\"next ... days\"),\n\n            equalCondition: L(\":\"),\n            notEqualCondition: L(\"≠\"),\n            lessThanCondition: L(\"<\"),\n            moreThanCondition: L(\">\"),\n            lessThanOrEqualCondition: L(\"≤\"),\n            moreThanOrEqualCondition: L(\"≥\"),\n\n            equalListCondition: L(\"equals\"),\n            notEqualListCondition: L(\"does not equal\"),\n\n            checkedCondition: L(\"is checked\"),\n            notCheckedCondition: L(\"is not checked\"),\n\n            isCurrentUserCondition: L(\"is current user\"),\n            isNotCurrentUserCondition: L(\"is not current user\"),\n            containsCurrentUserCondition: L(\"contains current user\"),\n            notContainsCurrentUserCondition: L(\"does not contain current user\"),\n\n            ContextDefaultOption: L(\"choose option\"),\n            EqualsProcessValue: L(\"equals process value\"),\n            NotEqualsProcessValueCondition: L(\"not equals process value\"),\n            InProcessValueCondition: L(\"in process value\"),\n            notInProcessValueCondition: L(\"not in process value\"),\n         },\n      });\n\n      // internal list of Webix IDs to reference our UI components.\n      let ids = (this.ids = {\n         popup: this.unique(`${idBase}_popup`),\n         querybuilder: this.unique(`${idBase}_querybuilder`),\n         save: this.unique(`${idBase}_save`),\n      });\n\n      // Set current username\n      this.Account.username = this.AB.Account.username();\n\n      this._recordRuleFieldOptions = [];\n\n      // webix UI definition:\n      this.ui = {\n         rows: [\n            {\n               view: \"layout\",\n               type: \"clean\",\n               borderless: true,\n               rows: [\n                  {\n                     id: ids.querybuilder,\n                     view: \"query\",\n                     data: () => [],\n                     // data: async (field) => await this.pullOptions(field),\n                     fields: [],\n                  },\n               ],\n            },\n            {\n               id: ids.save,\n               view: \"button\",\n               css: \"webix_primary\",\n               value: L(\"Save\"),\n               hidden: this._options.isSaveHidden ?? false,\n               click: () => {\n                  if (this.myPopup) this.myPopup.hide();\n                  this.emit(\"save\", this.getValue());\n               },\n            },\n         ],\n      };\n   }\n\n   // setting up UI\n   init(options) {\n      if (this._initComplete) return;\n\n      super.init(options);\n\n      this._isRecordRule = options?.isRecordRule ?? false;\n      this._recordRuleFieldOptions = options?.fieldOptions ?? [];\n\n      const el = $$(this.ids.querybuilder);\n      if (el) {\n         if (!this.observing) {\n            this.__blockOnChange = true;\n            el.getState().$observe(\"value\", (v) => {\n               if (this.__blockOnChange) return false;\n\n               this.emit(\"changed\", this.getValue());\n            });\n            this.__blockOnChange = false;\n\n            // HACK!! The process of setting the $observe() is actually\n            // calling the cb() when set.  This is clearing our .condition\n            // if we call init() after we have setValues(). which can happen\n            // when using the popUp() method.\n            let _cond = this.condition;\n            this.condition = _cond;\n            this.observing = true;\n         }\n         this._initComplete = true;\n      }\n   }\n\n   /**\n    * @method isValid\n    * validate the row data is valid filter condition\n    *\n    * @param rowData {Object} - data row\n    */\n   isValid(rowData) {\n      let helper = () => true;\n\n      let $query = $$(this.ids.querybuilder);\n      if ($query) {\n         helper = $query.getFilterFunction();\n         return helper(rowData);\n      } else {\n         return super.isValid(rowData);\n      }\n   }\n\n   /**\n    * @method isConditionComplete()\n    * Check a given condition entry and indicate if it is fully\n    * filled out.\n    * @param {obj} cond\n    *        The Condition object we are checking.  If a Macro\n    *        condition if provided: { glue:\"and\", rules:[] } then\n    *        this method will return True/False if All rules are\n    *        complete.\n    *        If an individual rule is provided, then it evaluates\n    *        the completness of that rule. { key, rule, value }\n    * @return {bool}\n    */\n   isConditionComplete(cond) {\n      if (!cond) return false;\n\n      let isComplete = true;\n      // start optimistically.\n\n      if (cond.glue) {\n         (cond.rules ?? []).forEach((r) => {\n            isComplete = isComplete && this.isConditionComplete(r);\n         });\n      } else {\n         // every condition needs a .key & .rule\n         if (!cond.key || cond.key == \"\") {\n            isComplete = false;\n         }\n\n         if (!cond.rule || cond.rule == \"\") {\n            isComplete = false;\n         }\n\n         if (isComplete) {\n            switch (cond.rule) {\n               case \"is_current_user\":\n               case \"is_not_current_user\":\n               case \"contain_current_user\":\n               case \"not_contain_current_user\":\n               case \"same_as_user\":\n               case \"not_same_as_user\":\n               case \"less_current\":\n               case \"greater_current\":\n               case \"less_or_equal_current\":\n               case \"greater_or_equal_current\":\n               case \"is_empty\":\n               case \"is_not_empty\":\n                  // There are only a few rules that don't need a\n                  // value\n                  break;\n\n               default:\n                  // The rest do need a .value\n                  if (!cond.value || cond.value == \"\") {\n                     isComplete = false;\n                  }\n                  break;\n            }\n         }\n      }\n\n      return isComplete;\n   }\n\n   setValue(settings) {\n      super.setValue(settings);\n      this.condition = settings;\n\n      const el = $$(this.ids.querybuilder);\n      if (el) {\n         if (!settings) {\n            // Clear settings value of webix.query\n            el.define(\"value\", {\n               glue: \"and\",\n               rules: [],\n            });\n            return;\n         }\n\n         let qbSettings = this.AB.cloneDeep(settings);\n\n         // Settings should match a condition built upon our QB format:\n         // {\n         //    glue:\"and\",\n         //    rules:[\n         //       {\n         //          key:\"uuid\",\n         //          rule:\"\",\n         //          value:\"\"\n         //       }\n         //    ]\n         // }\n         // externally our key should be the field.id and the rules should be\n         // the \"contains\", \"not_contains\", \"equal\" ... keywords.\n         // However, internally, we convert these rules into .ids that are\n         // unique for each field (see uiInit()).  So when we bring in settings\n         // we need to translate them into our internal format:\n\n         _toInternal(qbSettings, this._Fields);\n\n         this.__blockOnChange = true;\n         el.define(\"value\", qbSettings);\n         this.__blockOnChange = false;\n      }\n   }\n\n   getValue() {\n      if ($$(this.ids.querybuilder)) {\n         let settings = this.AB.cloneDeep(\n            $$(this.ids.querybuilder).getState().value ?? {}\n         );\n\n         // what we pull out of the QB will have .rules in our internal format:\n         // {field.id}_{rule}  (see uiInit() )\n         // But we need to store them in our generic QB format for use outside\n         // our FilterComplex widget.\n         _toExternal(settings, this._Fields);\n         this.condition = settings;\n      }\n\n      return super.getValue();\n   }\n\n   fieldsLoad(fields = [], object = null) {\n      super.fieldsLoad(fields, object);\n      this.uiInit();\n   }\n\n   toShortHand() {\n      return \"Add Filters\";\n   }\n\n   uiInit() {\n      this.uiQueryCustomValue();\n\n      let el = $$(this.ids.querybuilder);\n      if (el) {\n         // Clear fields\n         while (el.config.fields.length > 0) {\n            el.config.fields.pop();\n         }\n         // Set fields\n         (this.fieldsToQB() ?? []).forEach((f) => {\n            el.config.fields.push(f);\n         });\n      }\n   }\n\n   // HACK: have to overwrite Webix Query's function to support our custom input requirement.\n   // HooWoo\n   uiQueryCustomValue() {\n      const $el = $$(this.ids.querybuilder);\n      if (!$el) return;\n\n      // window.query.views.filter.prototype.CreateFilter = (\n      $el.$app.require(\"jet-views\", \"filter\").prototype.CreateFilter = (\n         field,\n         type,\n         format,\n         conditions,\n         place\n      ) => {\n         let inputs = this.uiValue(field);\n\n         let ui = {\n            id: place.config.id,\n            view: \"filter\",\n            localId: \"filter\",\n            conditions: conditions,\n            field: field,\n            mode: type,\n            template: function (o) {\n               let str = o[field];\n               let parser =\n                  format ?? (type == \"date\" ? webix.i18n.dateFormatStr : null);\n               if (parser) str = parser(str);\n               return str;\n            },\n            inputs: inputs,\n            margin: 6,\n         };\n\n         let filter = webix.ui(ui, place);\n\n         // let data = [];\n         // const $query = $$(this.ids.querybuilder);\n         // if ($query) {\n         //    data = $query.app.getService(\"backend\").data(field);\n         // }\n         // filter.parse(data);\n\n         return filter;\n      };\n   }\n\n   uiValue(fieldColumnName) {\n      let result;\n\n      // Special case: this_object\n      if (fieldColumnName == \"this_object\") {\n         return []\n            .concat(this.uiQueryValue(\"this_object\"))\n            .concat(this.uiDataCollectionValue(\"this_object\"))\n            .concat(this.uiCustomValue(\"this_object\"))\n            .concat(this.uiContextValue(\"this_object\", \"uuid\"));\n      }\n\n      let field = (this._Fields ?? []).filter(\n         (f) => f.columnName == fieldColumnName\n      )[0];\n\n      switch (field?.key) {\n         case \"boolean\":\n            result = this.uiBooleanValue(field);\n            break;\n         case \"connectObject\":\n            result = []\n               .concat(this.uiQueryValue(field))\n               .concat(this.uiUserValue(field))\n               .concat(this.uiDataCollectionValue(field))\n               .concat(this.uiContextValue(field))\n               .concat(this.uiNoneValue());\n            break;\n         case \"date\":\n         case \"datetime\":\n            result = [\"datepicker\", \"daterangepicker\"];\n            break;\n         case \"list\":\n            result = this.uiListValue(field);\n            break;\n         case \"user\":\n            result = []\n               .concat(this.uiNoneValue())\n               .concat(this.uiUserValue(field));\n            break;\n         // case \"number\":\n         //    result = [\"text\"];\n         //    break;\n         case \"string\":\n         case \"LongText\":\n         case \"email\":\n            result = this.uiNoneValue();\n            break;\n      }\n\n      // Add filter options to Custom index\n      const LinkType = `${field?.settings?.linkType}:${field?.settings?.linkViaType}`;\n      if (\n         field?.settings?.isCustomFK &&\n         // 1:M\n         (LinkType == \"one:many\" ||\n            // 1:1 isSource = true\n            (LinkType == \"one:one\" && field?.settings?.isSource))\n      ) {\n         result = (result ?? []).concat(this.uiTextValue(field));\n      } else if (field?.key != \"connectObject\") {\n         result = (result ?? [])\n            .concat(this.uiTextValue(field))\n            .concat(this.uiQueryFieldValue(field))\n            .concat(this.uiContextValue(field));\n      }\n      // Special case: from Process builder\n      // .processFieldsLoad()\n      else if (fieldColumnName.indexOf(\"uuid\") > -1) {\n         result = this.uiContextValue(null, fieldColumnName);\n      }\n\n      if (this._isRecordRule) {\n         result = (result ?? []).concat(this.uiRecordRuleValue(field));\n      }\n\n      result = (result ?? []).concat(this.uiCustomValue(field));\n\n      return result;\n   }\n\n   uiNoneValue() {\n      return [\n         {\n            batch: \"none\",\n            borderless: true,\n            view: \"template\",\n            template: \"\",\n         },\n      ];\n   }\n\n   uiBooleanValue(field) {\n      return [\n         {\n            batch: \"boolean\",\n            view: \"checkbox\",\n         },\n      ];\n   }\n\n   uiTextValue(field) {\n      return [\n         {\n            batch: \"text\",\n            view: \"text\",\n            on: {\n               onAfterRender: function () {\n                  // HACK: focus on webix.text and webix.textarea\n                  // Why!! If the parent layout has zIndex lower than 101,\n                  // then is not able to focus to webix.text and webix.textarea\n                  let $layout =\n                     this.queryView(function (a) {\n                        return !a.getParentView();\n                     }, \"parent\") ?? this;\n                  $layout.$view.style.zIndex = 202;\n               },\n            },\n         },\n      ];\n   }\n\n   uiQueryValue(field) {\n      let options = [];\n\n      let isQueryField =\n         this._QueryFields?.filter((f) => f.id == field.id).length > 0;\n\n      // populate the list of Queries for this_object:\n      if (field == \"this_object\" && this._Object) {\n         options = this.queries((q) => q.canFilterObject(this._Object));\n      }\n      // populate the list of Queries for a query field\n      else if (isQueryField) {\n         options = this.queries(\n            (q) =>\n               (this._Object ? this._Object.id : \"\") != q.id && // Prevent filter looping\n               q.canFilterObject(field.datasourceLink)\n         );\n      }\n\n      options?.forEach((q) => {\n         options.push({\n            id: q.id,\n            value: q.label,\n         });\n      });\n\n      return [\n         {\n            batch: \"query\",\n            view: \"combo\",\n            options: options ?? [],\n         },\n      ];\n   }\n\n   uiListValue(field) {\n      return [\n         {\n            batch: \"list\",\n            view: \"combo\",\n            options: field?.settings?.options?.map(function (x) {\n               return {\n                  id: x.id,\n                  value: x.text,\n               };\n            }),\n         },\n      ];\n   }\n\n   uiUserValue(field) {\n      return [\n         {\n            batch: \"user\",\n            view: \"combo\",\n            options: this.AB.Account.userList().map((u) => {\n               return {\n                  id: u.username,\n                  value: u.username,\n               };\n            }),\n         },\n      ];\n   }\n\n   uiDataCollectionValue(field) {\n      let linkObjectId;\n      if (field == \"this_object\" && this._Object) {\n         linkObjectId = this._Object.id;\n      } else {\n         linkObjectId = field?.settings?.linkObject;\n      }\n\n      return [\n         {\n            batch: \"datacollection\",\n            view: \"combo\",\n            options: linkObjectId\n               ? this.AB.datacollections(\n                    (dc) => dc?.datasource?.id == linkObjectId\n                 ).map((dc) => {\n                    return {\n                       id: dc.id,\n                       value: dc.label,\n                    };\n                 })\n               : [],\n         },\n      ];\n   }\n\n   uiQueryFieldValue(field) {\n      return [\n         {\n            batch: \"queryField\",\n            view: \"combo\",\n            placeholder: this.labels.component.inQueryFieldQueryPlaceholder,\n            options: this.queries(\n               (q) => this._Object == null || q.id != this._Object.id\n            ).map((q) => {\n               return {\n                  id: q.id,\n                  value: q.label,\n               };\n            }),\n         },\n      ];\n   }\n\n   uiRecordRuleValue(field) {\n      return [\n         {\n            batch: \"recordRule\",\n            view: \"select\",\n            options: this._recordRuleFieldOptions ?? [],\n         },\n      ];\n   }\n\n   uiContextValue(field, processFieldKey = null) {\n      let processField = (this._ProcessFields ?? []).filter((pField) => {\n         if (!pField) return false;\n\n         if (pField.field) {\n            return pField.field.id == field.id;\n         } else if (pField.key) {\n            // uuid\n            let processFieldId = pField.key.split(\".\").pop();\n            return (\n               processFieldId == field.id ||\n               processFieldId == field.key ||\n               processFieldId == processFieldKey ||\n               pField.key == processFieldKey\n            );\n         }\n      })[0];\n\n      if (!processField) return [];\n\n      return [\n         {\n            batch: \"context\",\n            view: \"select\",\n            options: [\n               {\n                  id: \"empty\",\n                  value: this.labels.component.ContextDefaultOption,\n               },\n               {\n                  id: processField.key,\n                  value: L(\"context({0})\", [processField.label]),\n               },\n            ],\n         },\n      ];\n   }\n\n   uiCustomValue(field) {\n      if (!field) return [];\n\n      const customOptions = this._customOptions ?? {};\n      const options = customOptions[field.id ?? field] ?? {};\n      return options.values ?? [];\n   }\n\n   popUp(...options) {\n      if (!this.myPopup) {\n         let ui = {\n            id: this.ids.popup,\n            view: \"popup\",\n            height: 400,\n            width: 800,\n            body: this.ui,\n         };\n\n         this.myPopup = webix.ui(ui);\n         this.init();\n      }\n\n      if (this._Fields) {\n         this.fieldsLoad(this._Fields, this._Object);\n      }\n\n      // NOTE: do this, before the .setValue() operation, as we need to have\n      // our fields and filters defined BEFORE a setValue() is performed.\n      // this.uiInit();\n\n      if (this.condition) {\n         this.setValue(this.condition);\n      }\n\n      this.myPopup.show(...options);\n   }\n\n   /**\n    * @method addCustomOption\n    *\n    * @param {string|uuid} fieldId\n    * @param {Object} options - {\n    *                               conditions: [],\n    *                               values: []\n    *                           }\n    */\n   addCustomOption(fieldId, options = {}) {\n      this._customOptions = this._customOptions ?? {};\n      this._customOptions[fieldId] = options;\n   }\n};\n","const RowFilterCore = require(\"../core/RowFilterCore\");\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class RowFilter extends RowFilterCore {\n   constructor(App, idBase, AB) {\n      super(App, idBase, AB);\n\n      console.error(\"TODO: Switch RowFilter => FilterComplex\");\n\n      // internal list of Webix IDs to reference our UI components.\n      let ids = (this.ids = {\n         component: this.unique(`${idBase}_rowFilter`),\n         filterForm: this.unique(`${idBase}_rowFilter_form`),\n         addNewFilter: this.unique(`${idBase}_rowFilter_addNewFilter`),\n\n         glue: this.unique(`${idBase}_rowFilter_glue`),\n         field: this.unique(`${idBase}_rowFilter_field`),\n         rule: this.unique(`${idBase}_rowFilter_rule`),\n         inputValue: this.unique(`${idBase}_rowFilter_inputValue`),\n\n         queryCombo: this.unique(`${idBase}_rowFilter_queryCombo`),\n         queryFieldCombo: this.unique(`${idBase}_rowFilter_queryFieldCombo`),\n         queryFieldComboQuery: this.unique(\n            `${idBase}_rowFilter_queryFieldComboQuery`\n         ),\n         queryFieldComboField: this.unique(\n            `${idBase}_rowFilter_queryFieldComboField`\n         ),\n         fieldMatch: this.unique(`${idBase}_rowFilter_fieldMatchCombo`),\n\n         dataCollection: this.unique(`${idBase}_rowFilter_dataCollection`),\n\n         listOptions: this.unique(`${idBase}_rowFilter_listOptions`),\n\n         datePicker: this.unique(`${idBase}_rowFilter_datePicker`),\n      });\n\n      // Set current username\n      // this.Account.username = this.AB.Account.username();\n\n      var batchName; // we need to revert to this default when switching away from a in/by query field\n\n      // Default options list to push to all fields\n      this.queryFieldOptions = [\n         {\n            value: L(\"By Query Field\"),\n            id: \"in_query_field\",\n         },\n         {\n            value: L(\"Not In Query\"),\n            id: \"not_in_query_field\",\n         },\n      ];\n\n      this.recordRuleOptions = [];\n      this.recordRuleFieldOptions = [];\n\n      let _logic = this._logic || {};\n\n      /**\n       * @method getFieldList\n       * return field list to render options\n       */\n      _logic.getFieldList = () => {\n         return (this._Fields || []).map((f) => {\n            let label = f.label;\n\n            // include object's name to options\n            if (this._settings.showObjectName && f.object) {\n               label = f.object.label + \".\" + f.label;\n            }\n\n            return {\n               id: f.id,\n               value: label,\n               alias: f.alias || undefined, // ABObjectQuery\n            };\n         });\n      };\n\n      _logic.getFilterUI = () => {\n         let instance = this;\n         let config_settings = this.config_settings || {};\n\n         return {\n            id: \"f\" + webix.uid(),\n            isolate: true,\n            cols: [\n               {\n                  // Add / Or\n                  view: \"combo\",\n                  id: ids.glue,\n                  width: 80,\n                  value: config_settings.glue || \"and\",\n                  options: [\n                     {\n                        value: L(\"And\"),\n                        id: \"and\",\n                     },\n                     {\n                        value: L(\"Or\"),\n                        id: \"or\",\n                     },\n                  ],\n                  on: {\n                     onChange: function (newVal, oldVal) {\n                        _logic.selectCombineCondition(newVal);\n                     },\n                  },\n               },\n               {\n                  // Field list\n                  view: \"combo\",\n                  id: ids.field,\n                  suggest: {\n                     on: {\n                        onBeforeShow: function () {\n                           this.define(\"width\", 400);\n                           this.resize();\n                        },\n                     },\n                     data: _logic.getFieldList(),\n                  },\n                  on: {\n                     onChange: function (columnId) {\n                        var $viewCond = this.getParentView();\n                        _logic.selectField(columnId, $viewCond);\n                     },\n                  },\n               },\n               // Comparer\n               {\n                  id: ids.rule,\n                  width: 220,\n                  cells: [\n                     {},\n                     // Query\n                     {\n                        batch: \"query\",\n                        view: \"combo\",\n                        value: \"in_query\",\n                        options: [\n                           {\n                              value: L(\"In Query\"),\n                              id: \"in_query\",\n                           },\n                           {\n                              value: L(\"Not In Query\"),\n                              id: \"not_in_query\",\n                           },\n                           {\n                              value: L(\"contains\"),\n                              id: \"contains\",\n                           },\n                           {\n                              value: L(\"doesn't contain\"),\n                              id: \"not_contains\",\n                           },\n                           {\n                              value: L(\"is\"),\n                              id: \"equals\",\n                           },\n                           {\n                              value: L(\"is not\"),\n                              id: \"not_equal\",\n                           },\n                           {\n                              value: L(\"is empty\"),\n                              id: \"is_empty\",\n                           },\n                           {\n                              value: L(\"is not empty\"),\n                              id: \"is_not_empty\",\n                           },\n                           {\n                              value: L(\"Same As User\"),\n                              id: \"same_as_user\",\n                           },\n                           {\n                              value: L(\"Not Same As User\"),\n                              id: \"not_same_as_user\",\n                           },\n                           {\n                              value: L(\"In Data Collection\"),\n                              id: \"in_data_collection\",\n                           },\n                           {\n                              value: L(\"Not In Data Collection\"),\n                              id: \"not_in_data_collection\",\n                           },\n                        ].concat(instance.recordRuleOptions),\n                        on: {\n                           onChange: function (condition, oldValue) {\n                              var $viewComparer = this.getParentView();\n                              var $viewCond = $viewComparer.getParentView();\n                              _logic.onChangeRule(condition, $viewCond);\n                              _logic.onChange();\n                           },\n                        },\n                     },\n\n                     // Date\n                     {\n                        batch: \"date\",\n                        view: \"combo\",\n                        value: \"less\",\n                        options: [\n                           {\n                              value: L(\"equals\"),\n                              id: \"equals\",\n                           },\n                           {\n                              value: L(\"does not equal\"),\n                              id: \"not_equal\",\n                           },\n                           {\n                              value: L(\"is before\"),\n                              id: \"less\",\n                           },\n                           {\n                              value: L(\"is after\"),\n                              id: \"greater\",\n                           },\n                           {\n                              value: L(\"is on or before\"),\n                              id: \"less_or_equal\",\n                           },\n                           {\n                              value: L(\"is on or after\"),\n                              id: \"greater_or_equal\",\n                           },\n                           {\n                              value: L(\"is before current date\"),\n                              id: \"less_current\",\n                           },\n                           {\n                              value: L(\"is after current date\"),\n                              id: \"greater_current\",\n                           },\n                           {\n                              value: L(\"is on or before current date\"),\n                              id: \"less_or_equal_current\",\n                           },\n                           {\n                              value: L(\"is on or after current date\"),\n                              id: \"greater_or_equal_current\",\n                           },\n                           {\n                              value: L(\"last ... days\"),\n                              id: \"last_days\",\n                           },\n                           {\n                              value: L(\"next ... days\"),\n                              id: \"next_days\",\n                           },\n                        ]\n                           .concat(instance.queryFieldOptions)\n                           .concat(instance.recordRuleOptions),\n                        on: {\n                           onChange: function (condition) {\n                              var $viewComparer = this.getParentView();\n                              var $viewCond = $viewComparer.getParentView();\n                              _logic.onChangeRule(condition, $viewCond);\n                              _logic.onChange();\n                           },\n                        },\n                     },\n                     // Number\n                     {\n                        batch: \"number\",\n                        view: \"combo\",\n                        value: \"equals\",\n                        options: [\n                           {\n                              value: L(\":\"),\n                              id: \"equals\",\n                           },\n                           {\n                              value: L(\"≠\"),\n                              id: \"not_equal\",\n                           },\n                           {\n                              value: L(\"<\"),\n                              id: \"less\",\n                           },\n                           {\n                              value: L(\">\"),\n                              id: \"greater\",\n                           },\n                           {\n                              value: L(\"≤\"),\n                              id: \"less_or_equal\",\n                           },\n                           {\n                              value: L(\"≥\"),\n                              id: \"greater_or_equal\",\n                           },\n                        ]\n                           .concat(instance.queryFieldOptions)\n                           .concat(instance.recordRuleOptions),\n                        on: {\n                           onChange: function (condition) {\n                              var $viewComparer = this.getParentView();\n                              var $viewCond = $viewComparer.getParentView();\n                              _logic.onChangeRule(condition, $viewCond);\n                              _logic.onChange();\n                           },\n                        },\n                     },\n                     // List\n                     {\n                        batch: \"list\",\n                        view: \"combo\",\n                        value: \"equals\",\n                        options: [\n                           {\n                              value: L(\"equals\"),\n                              id: \"equals\",\n                           },\n                           {\n                              value: L(\"does not equal\"),\n                              id: \"not_equal\",\n                           },\n                           {\n                              value: L(\"Same As User\"),\n                              id: \"same_as_user\",\n                           },\n                           {\n                              value: L(\"Not Same As User\"),\n                              id: \"not_same_as_user\",\n                           },\n                        ]\n                           .concat(instance.queryFieldOptions)\n                           .concat(instance.recordRuleOptions),\n                        on: {\n                           onChange: function (condition, oldValue) {\n                              var $viewComparer = this.getParentView();\n                              var $viewCond = $viewComparer.getParentView();\n                              _logic.onChangeRule(condition, $viewCond);\n                              _logic.onChange();\n                           },\n                        },\n                     },\n                     // Boolean\n                     {\n                        batch: \"boolean\",\n                        view: \"combo\",\n                        value: \"equals\",\n                        options: [\n                           {\n                              value: L(\"equals\"),\n                              id: \"equals\",\n                           },\n                           {\n                              value: L(\"does not equal\"),\n                              id: \"not_equal\",\n                           },\n                        ]\n                           .concat(instance.queryFieldOptions)\n                           .concat(instance.recordRuleOptions),\n                        on: {\n                           onChange: function (condition) {\n                              var $viewComparer = this.getParentView();\n                              var $viewCond = $viewComparer.getParentView();\n                              _logic.onChangeRule(condition, $viewCond);\n                              _logic.onChange();\n                           },\n                        },\n                     },\n                     // User\n                     {\n                        batch: \"user\",\n                        view: \"combo\",\n                        value: \"is_current_user\",\n                        options: [\n                           {\n                              value: L(\"is current user\"),\n                              id: \"is_current_user\",\n                           },\n                           {\n                              value: L(\"is not current user\"),\n                              id: \"is_not_current_user\",\n                           },\n                           {\n                              value: L(\"contains current user\"),\n                              id: \"contain_current_user\",\n                           },\n                           {\n                              value: L(\"does not contain current user\"),\n                              id: \"not_contain_current_user\",\n                           },\n                           {\n                              value: L(\"equals\"),\n                              id: \"equals\",\n                           },\n                           {\n                              value: L(\"does not equal\"),\n                              id: \"not_equal\",\n                           },\n                        ]\n                           .concat(instance.queryFieldOptions)\n                           .concat(instance.recordRuleOptions),\n                        on: {\n                           onChange: function (condition) {\n                              var $viewComparer = this.getParentView();\n                              var $viewCond = $viewComparer.getParentView();\n                              _logic.onChangeRule(condition, $viewCond);\n                              _logic.onChange();\n                           },\n                        },\n                     },\n                     // String\n                     {\n                        batch: \"string\",\n                        view: \"combo\",\n                        value: \"contains\",\n                        options: [\n                           {\n                              value: L(\"contains\"),\n                              id: \"contains\",\n                           },\n                           {\n                              value: L(\"doesn't contain\"),\n                              id: \"not_contains\",\n                           },\n                           {\n                              value: L(\"is\"),\n                              id: \"equals\",\n                           },\n                           {\n                              value: L(\"is not\"),\n                              id: \"not_equal\",\n                           },\n                        ]\n                           .concat(instance.queryFieldOptions)\n                           .concat(instance.recordRuleOptions),\n                        on: {\n                           onChange: function (condition) {\n                              var $viewComparer = this.getParentView();\n                              var $viewCond = $viewComparer.getParentView();\n                              _logic.onChangeRule(condition, $viewCond);\n                              _logic.onChange();\n                           },\n                        },\n                     },\n                     // Email\n                     {\n                        batch: \"email\",\n                        view: \"combo\",\n                        value: \"contains\",\n                        options: [\n                           {\n                              value: L(\"contains\"),\n                              id: \"contains\",\n                           },\n                           {\n                              value: L(\"doesn't contain\"),\n                              id: \"not_contains\",\n                           },\n                           {\n                              value: L(\"is\"),\n                              id: \"equals\",\n                           },\n                           {\n                              value: L(\"is not\"),\n                              id: \"not_equal\",\n                           },\n                        ]\n                           .concat(instance.queryFieldOptions)\n                           .concat(instance.recordRuleOptions),\n                        on: {\n                           onChange: function (condition) {\n                              var $viewComparer = this.getParentView();\n                              var $viewCond = $viewComparer.getParentView();\n                              _logic.onChangeRule(condition, $viewCond);\n                              _logic.onChange();\n                           },\n                        },\n                     },\n                  ],\n               },\n               // Value\n               {\n                  id: ids.inputValue,\n                  isolate: true,\n                  cells: [\n                     {\n                        batch: \"empty\",\n                     },\n\n                     // Query\n                     {\n                        id: ids.queryCombo,\n\n                        batch: \"query\",\n                        view: \"combo\",\n                        options: [],\n                        on: {\n                           onChange: _logic.onChange,\n                        },\n                     },\n\n                     // Query Field\n                     {\n                        id: ids.queryFieldCombo,\n                        batch: \"queryField\",\n                        rows: [\n                           {\n                              id: ids.queryFieldComboQuery,\n                              view: \"combo\",\n                              options: [],\n                              placeholder: L(\"Choose a Query\"),\n                              on: {\n                                 onChange: function (value) {\n                                    var $viewComparer = this.getParentView();\n                                    var $viewCond = $viewComparer\n                                       .getParentView()\n                                       .getParentView();\n                                    _logic.onChangeQueryFieldCombo(\n                                       value,\n                                       $viewCond\n                                    );\n\n                                    _logic.onChange();\n                                 },\n                              },\n                           },\n                           {\n                              id: ids.queryFieldComboField,\n                              view: \"combo\",\n                              options: [],\n                              placeholder: L(\"Choose a Field\"),\n                              on: {\n                                 onChange: _logic.onChange,\n                              },\n                           },\n                        ],\n                     },\n\n                     // Field match\n                     {\n                        id: ids.fieldMatch,\n                        batch: \"fieldMatch\",\n                        view: \"combo\",\n                        options: [],\n                        on: {\n                           onChange: _logic.onChange,\n                        },\n                     },\n\n                     // Data collection\n                     {\n                        id: ids.dataCollection,\n                        batch: \"dataCollection\",\n                        view: \"richselect\",\n                        options: [],\n                        on: {\n                           onChange: _logic.onChange,\n                        },\n                     },\n\n                     // Date\n                     {\n                        // inputView.format = field.getDateFormat();\n                        batch: \"date\",\n                        id: ids.datePicker,\n                        view: \"datepicker\",\n                        on: {\n                           onChange: function () {\n                              _logic.onChange();\n                           },\n                        },\n                     },\n                     // Number\n                     {\n                        batch: \"number\",\n                        view: \"text\",\n                        validate: webix.rules.isNumber,\n                        on: {\n                           onTimedKeyPress: function () {\n                              if (this.validate()) _logic.onChange();\n                           },\n                        },\n                     },\n                     // List\n                     {\n                        batch: \"list\",\n                        id: ids.listOptions,\n                        view: \"combo\",\n                        options: [],\n                        on: {\n                           onChange: function () {\n                              _logic.onChange();\n                           },\n                        },\n                     },\n                     // Boolean\n                     {\n                        batch: \"boolean\",\n                        view: \"checkbox\",\n                        on: {\n                           onChange: function () {\n                              _logic.onChange();\n                           },\n                        },\n                     },\n                     // User\n                     {\n                        batch: \"user\",\n                        view: \"combo\",\n                        options: this.AB.Account.userList().map((u) => {\n                           return {\n                              id: u.username,\n                              value: u.username,\n                           };\n                        }),\n                        on: {\n                           onChange: function () {\n                              _logic.onChange();\n                           },\n                        },\n                     },\n                     // String\n                     {\n                        batch: \"string\",\n                        view: \"text\",\n                        on: {\n                           onTimedKeyPress: function () {\n                              _logic.onChange();\n                           },\n                        },\n                     },\n                     // Email\n                     {\n                        batch: \"email\",\n                        view: \"text\",\n                        on: {\n                           onTimedKeyPress: function () {\n                              _logic.onChange();\n                           },\n                        },\n                     },\n                  ],\n               },\n               {\n                  view: \"button\",\n                  css: \"webix_primary\",\n                  icon: \"fa fa-plus\",\n                  type: \"icon\",\n                  autowidth: true,\n                  click: function () {\n                     var $viewForm = this.getFormView();\n\n                     var indexView = $viewForm.index(this.getParentView());\n\n                     _logic.addNewFilter(indexView + 1);\n                  },\n               },\n               {\n                  view: \"button\",\n                  css: \"webix_danger\",\n                  icon: \"fa fa-trash\",\n                  type: \"icon\",\n                  autowidth: true,\n                  click: function () {\n                     var $viewCond = this.getParentView();\n\n                     _logic.removeNewFilter($viewCond);\n                  },\n               },\n            ],\n         };\n      };\n\n      _logic.getAddButtonUI = () => {\n         return {\n            view: \"button\",\n            id: ids.addNewFilter,\n            css: \"webix_primary\",\n            type: \"form\",\n            label: L(\"Add a filter\"),\n            click: () => {\n               _logic.addNewFilter();\n            },\n         };\n      };\n\n      _logic.addNewFilter = (index, fieldId) => {\n         var viewId;\n         var ui = _logic.getFilterUI();\n\n         var $viewForm = $$(ids.filterForm);\n         if ($viewForm) {\n            viewId = $viewForm.addView(ui, index);\n\n            _logic.toggleAddNewButton();\n\n            // select a option of field\n            if (fieldId) _logic.selectField(fieldId, $$(viewId), true);\n         }\n\n         return viewId;\n      };\n\n      _logic.removeNewFilter = function ($viewCond) {\n         var $viewForm = $$(ids.filterForm);\n\n         $viewForm.removeView($viewCond);\n\n         _logic.toggleAddNewButton();\n\n         _logic.onChange();\n      };\n\n      _logic.toggleAddNewButton = function () {\n         if (!$$(ids.filterForm)) return;\n\n         // Show \"Add new filter\" button\n         if ($$(ids.filterForm).getChildViews().length < 1) {\n            $$(ids.filterForm).hide();\n            $$(ids.addNewFilter).show();\n         }\n         // Hide \"Add new filter\" button\n         else {\n            $$(ids.filterForm).show();\n            $$(ids.addNewFilter).hide();\n         }\n      };\n\n      _logic.selectCombineCondition = (val, ignoreNotify) => {\n         // define combine value to configuration\n         this.config_settings.glue = val;\n\n         // update value of every combine conditions\n         var $viewConds = $$(ids.filterForm).getChildViews();\n         $viewConds.forEach((v) => {\n            if (v.$$ && v.$$(ids.glue)) v.$$(ids.glue).setValue(val);\n         });\n\n         if (!ignoreNotify) _logic.onChange();\n      };\n\n      _logic.selectField = (columnId, $viewCond, ignoreNotify) => {\n         if (!this._Fields) return;\n\n         var field = this._Fields.filter((f) => f.id == columnId)[0];\n         if (!field) return;\n\n         // switch view\n         batchName = field.key;\n         if (field.id == \"this_object\") batchName = \"query\";\n         // Special this object query\n         else if (batchName == \"LongText\" || batchName == \"combined\")\n            batchName = \"string\";\n         else if (field.key == \"formula\") batchName = \"number\";\n         var isQueryField =\n            this._QueryFields.filter((f) => {\n               return f.id == field.id;\n            }).length > 0;\n         if (isQueryField) {\n            // we chose a connectField which is now a Query type\n            batchName = \"query\";\n         }\n         $viewCond.$$(ids.rule).showBatch(batchName);\n         $viewCond.$$(ids.inputValue).showBatch(batchName);\n\n         let options = [];\n         let Queries = [];\n\n         // populate the list of Queries for this_object:\n         if (field.id == \"this_object\" && this._Object) {\n            Queries = this.queries((q) => q.canFilterObject(this._Object));\n         }\n         // populate the list of Queries for a query field\n         else if (isQueryField) {\n            Queries = this.queries((q) => {\n               return (\n                  (this._Object ? this._Object.id : \"\") != q.id && // Prevent filter looping\n                  q.canFilterObject(field.datasourceLink)\n               );\n            });\n         }\n\n         Queries.forEach((q) => {\n            options.push({\n               id: q.id,\n               value: q.label,\n            });\n         });\n         $viewCond\n            .$$(ids.inputValue)\n            .$$(ids.queryCombo)\n            .define(\"options\", options);\n         $viewCond.$$(ids.inputValue).$$(ids.queryCombo).refresh();\n\n         // populate options of list\n         if (field.key == \"list\") {\n            let listOptions = field.settings.options.map(function (x) {\n               return {\n                  id: x.id,\n                  value: x.text,\n               };\n            });\n\n            $viewCond\n               .$$(ids.inputValue)\n               .$$(ids.listOptions)\n               .define(\"options\", listOptions);\n            $viewCond.$$(ids.inputValue).$$(ids.listOptions).refresh();\n         }\n         // set format of datepicker\n         else if (field.key == \"date\") {\n            $viewCond\n               .$$(ids.inputValue)\n               .$$(ids.datePicker)\n               .define(\"format\", field.getFormat());\n            $viewCond.$$(ids.inputValue).$$(ids.datePicker).refresh();\n         }\n\n         var rule = null,\n            ruleViewId = $viewCond.$$(ids.rule).getActiveId(),\n            $viewComparer = $viewCond\n               .$$(ids.rule)\n               .queryView({ id: ruleViewId });\n         if ($viewComparer && $viewComparer.getList) {\n            let defaultOpt = ($viewComparer.getList().config.data || [])[0];\n            if (defaultOpt) {\n               $viewComparer.setValue(defaultOpt.id);\n            }\n\n            // rule = $viewComparer.getValue();\n            // if (rule == \"in_query_field\" || rule == \"not_in_query_field\") {\n            // \t// Show the new value inputs\n            // \t$viewCond.$$(ids.inputValue).showBatch(\"queryField\");\n            // } else if (rule == \"same_as_field\" || rule == \"not_same_as_field\") {\n            // \t// Show the new value inputs\n            // \t$viewCond.$$(ids.inputValue).showBatch(\"fieldMatch\");\n            // }\n         }\n\n         if (!ignoreNotify) _logic.onChange();\n      };\n\n      _logic.onChangeRule = (rule, $viewCond, notify = false) => {\n         switch (rule) {\n            case \"contains\":\n            case \"not_contains\":\n            case \"equals\":\n            case \"not_equal\":\n               // For \"connect_fields\" search by CUSTOM index value\n               if (batchName == \"query\") {\n                  $viewCond.$$(ids.inputValue).showBatch(\"string\");\n               }\n               // If want to call notify or call .onChange(), then pass notify is true.\n               // _logic.onChange();\n               break;\n\n            case \"is_current_user\":\n            case \"is_not_current_user\":\n            case \"contain_current_user\":\n            case \"not_contain_current_user\":\n            case \"same_as_user\":\n            case \"not_same_as_user\":\n            case \"less_current\":\n            case \"greater_current\":\n            case \"less_or_equal_current\":\n            case \"greater_or_equal_current\":\n            case \"is_empty\":\n            case \"is_not_empty\":\n               // clear and disable the value field\n               $viewCond.$$(ids.inputValue).showBatch(\"empty\");\n               _logic.onChange();\n               break;\n\n            case \"last_days\":\n            case \"next_days\":\n               // Show the number input\n               $viewCond.$$(ids.inputValue).showBatch(\"number\");\n               break;\n\n            case \"in_query_field\":\n            case \"not_in_query_field\":\n               // populate the list of Queries for this_object:\n               var options = [];\n\n               // Get all application's queries\n               this.queries(\n                  (q) => this._Object == null || q.id != this._Object.id\n               ).forEach((q) => {\n                  options.push({\n                     id: q.id,\n                     value: q.label,\n                  });\n               });\n\n               $viewCond\n                  .$$(ids.inputValue)\n                  .$$(ids.queryFieldComboQuery)\n                  .define(\"options\", options);\n               $viewCond\n                  .$$(ids.inputValue)\n                  .$$(ids.queryFieldComboQuery)\n                  .refresh();\n\n               // Show the new value inputs\n               $viewCond.$$(ids.inputValue).showBatch(\"queryField\");\n               break;\n\n            case \"same_as_field\":\n            case \"not_same_as_field\":\n               $viewCond\n                  .$$(ids.inputValue)\n                  .$$(ids.fieldMatch)\n                  .define(\"options\", this.recordRuleFieldOptions);\n               $viewCond.$$(ids.inputValue).$$(ids.fieldMatch).refresh();\n\n               // Show the new value inputs\n               $viewCond.$$(ids.inputValue).showBatch(\"fieldMatch\");\n               break;\n\n            case \"in_data_collection\":\n            case \"not_in_data_collection\": {\n               let dcOptions = [];\n\n               // pull data collection list\n\n               // get id of the link object\n               let linkObjectId,\n                  columnId = $viewCond.$$(ids.field).getValue();\n               if (columnId == \"this_object\" && this._Object) {\n                  linkObjectId = this._Object.id;\n               } else {\n                  let field = this._Fields.filter((f) => f.id == columnId)[0];\n                  if (field) linkObjectId = field.settings.linkObject;\n               }\n\n               if (this._Application && linkObjectId) {\n                  this._Application\n                     .datacollections(\n                        (dc) =>\n                           dc.datasource && dc.datasource.id == linkObjectId\n                     )\n                     .forEach((dc) => {\n                        dcOptions.push({\n                           id: dc.id,\n                           value: dc.label,\n                        });\n                     });\n               }\n\n               $viewCond\n                  .$$(ids.inputValue)\n                  .$$(ids.dataCollection)\n                  .define(\"options\", dcOptions);\n               $viewCond.$$(ids.inputValue).$$(ids.dataCollection).refresh();\n\n               // Show the new value inputs\n               $viewCond.$$(ids.inputValue).showBatch(\"dataCollection\");\n               break;\n            }\n\n            default:\n               // Show the default value inputs\n               $viewCond.$$(ids.inputValue).showBatch(batchName);\n\n               if (notify) _logic.onChange();\n\n               break;\n         }\n      };\n\n      _logic.onChangeQueryFieldCombo = (value, $viewCond) => {\n         // populate the list of Queries for this_object:\n         let options = [];\n         // Get all queries fields\n         let Query = this.queries((q) => {\n            return q.id == value;\n         })[0];\n         if (Query) {\n            Query.fields((f) => {\n               return !f.isConnection;\n            }).forEach((q) => {\n               options.push({\n                  id: q.id,\n                  value: q.object.label + \".\" + q.label,\n               });\n            });\n\n            $viewCond\n               .$$(ids.inputValue)\n               .$$(ids.queryFieldComboField)\n               .define(\"options\", options);\n            $viewCond.$$(ids.inputValue).$$(ids.queryFieldComboField).refresh();\n         }\n\n         // _logic.onChange();\n      };\n\n      _logic.onChange = () => {\n         if (!this.__blockOnChange) {\n            // refresh config settings before notify\n            _logic.getValue();\n\n            console.warn(\"convert RowFilter.callback.onChange() to .emit()\");\n            _logic.callbacks.onChange();\n            this.emit(\"change\");\n         }\n\n         return false;\n      };\n\n      _logic.blockOnChange = () => {\n         this.__blockOnChange = true;\n      };\n\n      _logic.unblockOnChange = () => {\n         this.__blockOnChange = false;\n      };\n\n      /**\n       * @method getValue\n       *\n       * @return {JSON} -\n       * {\n       * \t\tglue: '', // 'and', 'or'\n       *\t\trules: [\n       *\t\t\t{\n       *\t\t\t\tkey:\t'column name',\n       *\t\t\t\trule:\t'rule',\n       *\t\t\t\tvalue:\t'value'\n       *\t\t\t}\n       *\t\t]\n       * }\n       */\n      _logic.getValue = () => {\n         let config_settings = {\n            glue: \"and\",\n            rules: [],\n         };\n\n         var $viewForm = $$(ids.filterForm);\n         if ($viewForm) {\n            $viewForm.getChildViews().forEach(($viewCond, index) => {\n               if (index == 0) {\n                  config_settings.glue = $viewCond.$$(ids.glue).getValue();\n               }\n\n               var $fieldElem = $viewCond.$$(ids.field);\n               if (!$fieldElem) return;\n\n               /* field id */\n               var fieldId = $fieldElem.getValue();\n               if (!fieldId) return;\n\n               /* alias */\n               var alias;\n               var selectedOpt = $viewCond\n                  .$$(ids.field)\n                  .getPopup()\n                  .config.body.data.filter((opt) => opt.id == fieldId)[0];\n               if (selectedOpt) alias = selectedOpt.alias || undefined;\n\n               /* rule */\n               var rule = null,\n                  ruleViewId = $viewCond.$$(ids.rule).getActiveId(),\n                  $viewComparer = $viewCond\n                     .$$(ids.rule)\n                     .queryView({ id: ruleViewId });\n               if ($viewComparer && $viewComparer.getValue)\n                  rule = $viewComparer.getValue();\n\n               /* value */\n               var value = null,\n                  valueViewId = $viewCond.$$(ids.inputValue).getActiveId(),\n                  $viewConditionValue = $viewCond\n                     .$$(ids.inputValue)\n                     .queryView({ id: valueViewId });\n               if ($viewConditionValue && $viewConditionValue.getValue) {\n                  value = $viewConditionValue.getValue();\n               } else if (\n                  $viewConditionValue &&\n                  $viewConditionValue.getChildViews()\n               ) {\n                  var vals = [];\n                  $viewConditionValue.getChildViews().forEach((element) => {\n                     vals.push($$(element).getValue());\n                  });\n                  value = vals.join(\":\");\n               }\n\n               // Convert date format\n               if (value instanceof Date) {\n                  let dateField = this._Fields.filter(\n                     (f) => f.id == fieldId\n                  )[0];\n                  if (dateField) {\n                     value = dateField.exportValue(value);\n                  } else {\n                     value = value.toISOString();\n                  }\n               }\n\n               config_settings.rules.push({\n                  alias: alias || undefined,\n                  key: fieldId,\n                  rule: rule,\n                  value: value,\n               });\n            });\n         }\n\n         this.config_settings = config_settings;\n\n         return this.config_settings;\n      };\n\n      // webix UI definition:\n      this.ui = {\n         id: ids.component,\n         rows: [\n            {\n               view: \"form\",\n               id: ids.filterForm,\n               hidden: true,\n               elements: [],\n            },\n            _logic.getAddButtonUI(),\n         ],\n      };\n   }\n\n   // setting up UI\n   init(options = {}) {\n      super.init(options);\n\n      // register our callbacks:\n      for (var c in this._logic.callbacks) {\n         this._logic.callbacks[c] = options[c] || this._logic.callbacks[c];\n      }\n\n      if (options.showObjectName)\n         this._settings.showObjectName = options.showObjectName;\n\n      if (options.isRecordRule) {\n         this.recordRuleOptions = [\n            {\n               value: L(\"Same As Field\"),\n               id: \"same_as_field\",\n            },\n            {\n               value: L(\"Not Field\"),\n               id: \"not_same_as_field\",\n            },\n         ];\n         this.recordRuleFieldOptions = options.fieldOptions;\n      }\n   }\n\n   setValue(settings) {\n      settings = settings || {};\n\n      super.setValue(settings);\n\n      let ids = this.ids;\n      let logic = this._logic;\n\n      // block .onChange event\n      logic.blockOnChange();\n\n      let config_settings = this.AB.cloneDeep(settings);\n      config_settings.rules = config_settings.rules || [];\n\n      // Redraw form with no elements\n      var $viewForm = $$(ids.filterForm);\n      if ($viewForm) webix.ui([], $viewForm);\n\n      // Add \"new filter\" button\n      if (config_settings.rules.length == 0) {\n         logic.toggleAddNewButton();\n      }\n\n      config_settings.rules.forEach((f) => {\n         var viewId = logic.addNewFilter(),\n            $viewCond = $$(viewId);\n\n         if ($viewCond == null) return;\n\n         var field = this._Fields.filter((col) => col.id == f.key)[0];\n\n         // \"and\" \"or\"\n         $viewCond.$$(ids.glue).define(\"value\", config_settings.glue);\n         $viewCond.$$(ids.glue).refresh();\n\n         // Select Field\n         $viewCond.$$(ids.field).define(\"value\", f.key);\n         $viewCond.$$(ids.field).refresh();\n         logic.selectField(f.key, $viewCond, true);\n\n         // Comparer\n         var ruleViewId = $viewCond.$$(ids.rule).getActiveId(),\n            $viewComparer = $viewCond\n               .$$(ids.rule)\n               .queryView({ id: ruleViewId });\n         if ($viewComparer && $viewComparer.setValue) {\n            $viewComparer.define(\"value\", f.rule);\n            $viewComparer.refresh();\n         }\n\n         // if (f.rule == \"in_query_field\" || f.rule == \"not_in_query_field\" || f.rule == \"same_as_field\" || f.rule == \"not_same_as_field\") {\n         $viewCond.blockEvent();\n         logic.onChangeRule(f.rule, $viewCond);\n         $viewCond.unblockEvent();\n         // }\n\n         // Input\n         var valueViewId = $viewCond.$$(ids.inputValue).getActiveId(),\n            $viewConditionValue = $viewCond\n               .$$(ids.inputValue)\n               .queryView({ id: valueViewId });\n         if ($viewConditionValue && $viewConditionValue.setValue) {\n            // convert to Date object\n            if (\n               field &&\n               field.key == \"date\" &&\n               f.value &&\n               (f.rule == \"less\" ||\n                  f.rule == \"greater\" ||\n                  f.rule == \"less_or_equal\" ||\n                  f.rule == \"greater_or_equal\")\n            ) {\n               $viewConditionValue.define(\"value\", new Date(f.value));\n            } else {\n               $viewConditionValue.define(\"value\", f.value);\n            }\n\n            $viewConditionValue.refresh();\n         } else if (\n            $viewConditionValue &&\n            $viewConditionValue.getChildViews()\n         ) {\n            let vals = (f.value || \"\").split(\":\");\n            let index = 0;\n            $viewConditionValue.getChildViews().forEach((element) => {\n               $$(element).blockEvent();\n               $$(element).setValue(vals[index]);\n               if (index == 0) {\n                  logic.onChangeQueryFieldCombo(vals[index], $viewCond);\n               }\n               $$(element).unblockEvent();\n               // $$(element).refresh();\n               index++;\n            });\n         }\n\n         if (field && field.key == \"user\") {\n            $viewCond.blockEvent();\n            logic.onChangeRule(f.rule, $viewCond);\n            $viewCond.blockEvent();\n         }\n      });\n\n      // unblock .onChange event\n      logic.unblockOnChange();\n   }\n\n   /**\n    * @method isComplete()\n    * returns a truthy value representing whether or not our current condition\n    * expression is fully completed.  Then externally checks can be made to\n    * verify if the data is complete.\n    * @return {bool}\n    */\n   isComplete() {\n      if (!this._completeConditions) {\n         this._completeConditions = this.AB.filterComplexNew(\n            `${this.ids.component}_iscomplete`\n         );\n      }\n\n      return this._completeConditions.isConditionComplete(this.getValue());\n   }\n};\n","// const ABComponent = require(\"./ABComponent\");\nimport ClassUI from \"../../ui/ClassUI\";\nconst ABViewForm = require(\"../platform/views/ABViewForm\");\n\nvar L = null;\n\nexport default class RowUpdater extends ClassUI {\n   constructor(idBase, AB) {\n      super(idBase, {\n         form: `${idBase}_rowUpdaterForm`,\n         addNew: `${idBase}_rowUpdaterAddNew`,\n         field: `${idBase}_rowUpdaterField`,\n      });\n\n      this.idBase = idBase;\n\n      this._Object = null;\n      // {ABObject}\n      // The ABObject we are building a form for.\n\n      this._mockFormWidget = null;\n      // {ABViewForm}\n      // When building our form components to display, they need a\n      // ABViewForm to be associated with.\n\n      this.AB = AB;\n\n      if (!L) {\n         L = (...params) => {\n            return this.AB.Multilingual.label(...params);\n         };\n      }\n   }\n\n   /**\n    * @method uiItem()\n    * Return the webix description of a new field/value row.\n    * @return {json}\n    */\n   uiItem() {\n      var self = this;\n      return {\n         rows: [\n            {\n               view: \"layout\",\n               isolate: true,\n               cols: [\n                  {\n                     // Label\n                     view: \"label\",\n                     width: 40,\n                     label: L(\"Set\")\n                  },\n                  {\n                     // Field list\n                     view: \"combo\",\n                     id: this.ids.field,\n                     options: this.getFieldList(true),\n                     on: {\n                        onChange: function(columnId) {\n                           let $viewItem = this.getParentView();\n                           self.selectField(columnId, $viewItem);\n                        }\n                     }\n                  },\n                  {\n                     // Label\n                     view: \"label\",\n                     width: 40,\n                     label: L(\"To\")\n                  },\n                  {\n                     view: \"segmented\",\n                     value: \"custom\",\n                     height: 40,\n                     maxWidth: 160,\n                     options: [\n                        { id: \"custom\", value: L(\"Custom\") },\n                        { id: \"process\", value: L(\"Process\") }\n                     ],\n                     hidden:\n                        this._extendedOptions == null ||\n                        !this._extendedOptions.length,\n                     on: {\n                        onChange: function(val) {\n                           let $viewItem = this.getParentView();\n\n                           self.toggleCustomProcessOption(\n                              $viewItem,\n                              val == \"process\"\n                           );\n                        }\n                     }\n                  },\n                  // Field value\n                  {},\n                  // Extended value\n                  {\n                     hidden: true\n                  },\n                  {\n                     // \"Remove\" button\n                     view: \"button\",\n                     css: \"webix_danger\",\n                     icon: \"fa fa-trash\",\n                     type: \"icon\",\n                     autowidth: true,\n\n                     click: function() {\n                        let $viewCond = this.getParentView().getParentView();\n\n                        self.removeItem($viewCond);\n                     }\n                  },\n               ]\n            },\n         ],\n      };\n   }\n\n   /**\n    * @method ui()\n    * return the webix description of our Entry form.\n    * @return {json}\n    */\n   ui() {\n      // webix UI definition:\n      return {\n         rows: [\n            {\n               view: \"form\",\n               id: this.ids.form,\n               hidden: true,\n               borderless: true,\n               elements: [],\n            },\n            {\n               view: \"button\",\n               id: this.ids.addNew,\n               icon: \"fa fa-plus\",\n               type: \"iconButton\",\n               label: L(\"Add field to edit\"),\n               click: () => {\n                  this.addItem();\n               },\n            },\n         ],\n      };\n   }\n\n   init(/* AB */) {\n      return Promise.resolve();\n   }\n\n   /**\n    * @method addItem()\n    * Add another field/value entry item to our form.\n    * @param {integer} index\n    *        which position in the list of form elements do we want to\n    *        insert the new row.\n    * @return {string} the webix .id of the new row we just added.\n    */\n   addItem(index) {\n      let $form = $$(this.ids.form);\n\n      let remainFields = this.getFieldList(true);\n      if (remainFields.length < 1) return;\n\n      let ui = this.uiItem();\n\n      let viewId = $form.addView(ui, index);\n\n      this.toggleForm();\n\n      return viewId;\n   }\n\n   /**\n    * @method getFieldList()\n    * Return an array of options in a webix.list format that represents the\n    * possible fields that can be selected on the current ABObject.\n    * @param {bool} excludeSelected\n    *        should we exclude from the list the fields that are ALREADY\n    *        displayed on the form?\n    * @return {array} [ { id, value }, ... ]\n    *         id: ABField.id\n    *         value: ABField.label\n    */\n   getFieldList(excludeSelected) {\n      let options = (this._Object.fields() || []).map((f) => {\n         return {\n            id: f.id,\n            value: f.label,\n         };\n      });\n\n      if (excludeSelected) {\n         let $form = $$(this.ids.form);\n\n         $form.getChildViews().forEach(($viewCond) => {\n            // Ignore \"Add new\" button\n            if (!$viewCond || !$viewCond.$$) return;\n\n            let $fieldElem = $viewCond.$$(this.ids.field);\n            if (!$fieldElem) return;\n\n            let fieldId = $fieldElem.getValue();\n            if (!fieldId) return;\n\n            options = options.filter((opt) => opt.id != fieldId);\n         });\n      }\n      return options;\n   }\n\n   /**\n    * @method getValue\n    * Return an array of field:value results that have been entered on this\n    * form.\n    * @return {Array}\n    *         [\n    *            {\n    *               fieldId: {UUID}\n    *               isProcessValue: {Boolean} - If it is true, then value is from Process parameter\n    *               value: {Object}\n    *            },\n    *            ...\n    *         ]\n    */\n   getValue() {\n      let result = [];\n\n      let $form = $$(this.ids.form);\n      if ($form) {\n         $form.getChildViews().forEach(($viewContainer) => {\n            let $viewItem = $viewContainer.getChildViews()[0];\n\n            // Ignore \"Add new\" button\n            if (!$viewItem || !$viewItem.$$) return;\n\n            let $fieldElem = $viewItem.$$(this.ids.field);\n            if (!$fieldElem) return;\n\n            let fieldId = $fieldElem.getValue();\n            if (!fieldId) return;\n\n            let $customValueElem = $viewItem.getChildViews()[4];\n            let $processValueElem = $viewItem.getChildViews()[5];\n            if (!$customValueElem && !$processValueElem) return;\n\n            let fieldInfo = this._Object.fieldByID(fieldId);\n\n            let val = {\n               fieldId: fieldId\n            };\n\n            // Custom value\n            if ($customValueElem && $customValueElem.isVisible()) {\n               if (fieldInfo.key == \"connectObject\") {\n                  val.value = fieldInfo.getValue(\n                     $customValueElem.getChildViews()[0]\n                  );\n               } else if (\n                  fieldInfo.key == \"date\" ||\n                  fieldInfo.key == \"datetime\"\n               ) {\n                  let currDateCheckbox = $customValueElem.getChildViews()[0];\n                  if (currDateCheckbox.getValue() == true) {\n                     val.value = \"ab-current-date\";\n                  } else {\n                     let datePicker = $customValueElem.getChildViews()[1];\n                     val.value = fieldInfo.getValue(datePicker);\n                  }\n               } else {\n                  // Get value from data field manager\n                  val = fieldInfo.getValue($customValueElem);\n               }\n            }\n            // Process value\n            else if ($processValueElem && $processValueElem.isVisible()) {\n               val.isProcessValue = true;\n               val.value = $processValueElem.getValue();\n            }\n\n            // Add to output\n            result.push(val);\n         });\n      }\n\n      return result;\n   }\n\n   /**\n    * @method objectLoad\n    * Load the Object we are currently working with.\n    * @param {ABObject} object\n    */\n   objectLoad(object) {\n      this._Object = object;\n\n      this._mockApp = this.AB.applicationNew({});\n      this._mockFormWidget = new ABViewForm(\n         {\n            settings: {\n               showLabel: false,\n               labelWidth: 0,\n            },\n         },\n         this._mockApp // just need any ABApplication here\n      );\n      this._mockFormWidget.objectLoad(object);\n\n      this.setValue(null); // clear\n   }\n\n   /**\n    * @method removeItem\n    * Remove the current form row.\n    * @param {webix.view} $viewCond\n    *        This is the webix.view that contains the whole value row\n    *        we are removing.\n    */\n   removeItem($viewCond) {\n      let $form = $$(this.ids.form);\n      $form.removeView($viewCond);\n      this.toggleForm();\n   }\n\n   /**\n    * @method selectField\n    * Update the value display when a field is selected. Changing to a\n    * different field will change the types of values that can be entered.\n    * @param {string} columnId\n    *        The field.uuid of the object that was selected.\n    * @param {webix.view} $viewItem\n    *        The webix.view that contains the value expression of the field\n    *        that was selected.\n    */\n   async selectField(columnId, $viewItem) {\n      let field = this._Object.fieldByID(columnId);\n      if (!field) {\n         this.AB.notify.builder(\n            new Error(`could not find field for id[${columnId}]`),\n            {\n               context: \"RowUpdater.selectField() could not find a field\",\n               fieldID: columnId,\n            }\n         );\n         return;\n      }\n      let fieldComponent = field.formComponent(),\n         formFieldWidget = fieldComponent.newInstance(\n            this._mockApp,\n            this._mockFormWidget\n         ),\n         formFieldComponent = formFieldWidget.component(\n            this.AB._App,\n            this.idBase\n         ),\n         inputView = formFieldComponent.ui;\n\n      // WORKAROUND: add '[Current User]' option to the user data field\n      switch (field.key) {\n         case \"connectObject\":\n            {\n               const options = (await field.getOptions()) ?? [];\n               const $combo = inputView.rows[0];\n               $combo.suggest.body.data = options;\n            }\n            break;\n         case \"user\":\n            inputView.options = inputView.options || [];\n            inputView.options.unshift({\n               id: \"ab-current-user\",\n               value: L(\"[Current User]\"),\n            });\n            break;\n         case \"date\":\n         case \"datetime\":\n            inputView = {\n               view: \"layout\",\n               rows: [\n                  {\n                     view: \"checkbox\",\n                     labelWidth: 0,\n                     labelRight: L(\"Current Date/Time\"),\n                     on: {\n                        onChange: function (newVal) {\n                           let layout = this.getParentView();\n                           if (!layout) return;\n\n                           let datePicker = layout.getChildViews()[1];\n                           if (!datePicker) return;\n\n                           newVal ? datePicker.hide() : datePicker.show();\n                        },\n                     },\n                  },\n                  inputView,\n               ],\n            };\n            break;\n      }\n\n      let childViews = $viewItem.getChildViews();\n\n      // Change component to display value\n      $viewItem.removeView(childViews[4]);\n      $viewItem.addView(inputView, 4);\n\n      formFieldComponent.init();\n\n      // Show custom display of data field\n      if (field.customDisplay)\n         field.customDisplay({}, this.AB._App, childViews[4].$view);\n\n      // Add extended value options\n      $viewItem.removeView(childViews[5]);\n      if (this._extendedOptions && this._extendedOptions.length) {\n         $viewItem.addView(\n            {\n               view: \"richselect\",\n               options: this._extendedOptions,\n               hidden: true\n            },\n            5\n         );\n      } else {\n         $viewItem.addView(\n            {\n               hidden: true\n            },\n            5\n         );\n      }\n\n      this.toggleCustomProcessOption(\n         $viewItem,\n         childViews[3].getValue() == \"process\"\n      );\n\n      // _logic.refreshFieldList();\n      // $$(this).adjust();\n      $$($viewItem).adjust();\n      $viewItem.getFormView().adjust();\n   }\n\n   /**\n    * @method setValue\n    * Given the previous settings, redraw the form with the field/value\n    * entries.\n    * @param {array} settings\n    *        [\n    *           {\n    *              fieldId: {UUID}\n    *              value: {Object|String}\n    *           }, ...\n    *        ]\n    */\n   setValue(settings) {\n      let $form = $$(this.ids.form);\n      if (!$form) return;\n\n      // Redraw form with no elements\n      webix.ui([], $form);\n\n      settings = settings || [];\n      if (settings.length < 1) return;\n\n      settings.forEach((item) => {\n         let $viewContainer = $$(this.addItem());\n         let $viewItem = $viewContainer.getChildViews()[0];\n\n         $viewItem.$$(this.ids.field).setValue(item.fieldId);\n         let $valueTypeButton = $viewItem.queryView(\n            { view: \"segmented\" },\n            \"self\"\n         );\n         $valueTypeButton.setValue(\n            item.isProcessValue ? \"process\" : \"custom\"\n         );\n\n         let $customValueElem = $viewItem.getChildViews()[4];\n         let $processValueElem = $viewItem.getChildViews()[5];\n         if (!$customValueElem && !$processValueElem) return;\n\n         let fieldInfo = this._Object.fieldByID(item.fieldId);\n         if (!fieldInfo) return;\n\n         // Set custom value\n         let rowData = {};\n         rowData[fieldInfo.columnName] = item.value;\n         fieldInfo.setValue($customValueElem, rowData);\n\n         // Set process value\n         $processValueElem.setValue(item.value);\n      });\n\n      this.toggleForm();\n   }\n\n   /**\n    * @method toggleForm\n    * decide if the form with the field/value elements should be displayed.\n    */\n   toggleForm() {\n      let $form = $$(this.ids.form);\n      if ($form) {\n         let childViews = $form.getChildViews();\n         if (childViews && childViews.length) {\n            $form.show();\n         } else {\n            $form.hide();\n         }\n         $form.adjust();\n      }\n   }\n\n   setExtendedOptions(options) {\n      this._extendedOptions = options;\n   }\n\n   toggleCustomProcessOption($viewItem, showProcessOption) {\n      let $customOption = $viewItem.getChildViews()[4];\n      let $processOption = $viewItem.getChildViews()[5];\n\n      if (showProcessOption) {\n         $customOption.hide();\n         $processOption.show();\n      } else {\n         $customOption.show();\n         $processOption.hide();\n      }\n   }\n}\n","/*\n * ABField\n *\n * An ABField defines a single unique Field/Column in a ABObject.\n *\n */\n\nconst ABFieldCore = require(\"../../core/dataFields/ABFieldCore\");\n\nconst L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABField extends ABFieldCore {\n   constructor(values, object, fieldDefaults) {\n      super(values, object, fieldDefaults);\n\n      this.AB.on(\"ab.abdefinition.update\", (def) => {\n         if (def.id == this.id) {\n            this.emit(\"definition.updated\", this);\n         }\n      });\n\n      //  \t// NOTE: setup this first so later we can use .fieldType(), .fieldIcon()\n      //  \tthis.defaults = fieldDefaults;\n\n      // \t{\n      // \t\tid:'uuid',\t\t\t\t\t// uuid value for this obj\n      // \t\tkey:'fieldKey',\t\t\t\t// unique key for this Field\n      // \t\ticon:'font',\t\t\t\t// fa-[icon] reference for an icon for this Field Type\n      // \t\tlabel:'',\t\t\t\t\t// pulled from translation\n      // \t\tcolumnName:'column_name',\t// a valid mysql table.column name\n      //\t\tsettings: {\t\t\t\t\t// unique settings for the type of field\n      // \t\t\tshowIcon:true/false,\t// only useful in Object Workspace DataTable\n      // \t\t\tisImported: 1/0,\t\t// flag to mark is import from other object\n      // \t\t\trequired: 1/0,\t\t\t// field allows does not allow NULL or it does allow NULL\n      // \t\t\twidth: {int}\t\t\t// width of display column\n\n      // \t\t// specific for dataField\n      // \t\t},\n      // \t\ttranslations:[]\n      // \t}\n\n      // \tthis.fromValues(values);\n\n      // this.object = object;\n   }\n\n   ///\n   /// Static Methods\n   ///\n   /// Available to the Class level object.  These methods are not dependent\n   /// on the instance values of the Application.\n   ///\n\n   static clearEditor(ids) {\n      this._CurrentField = null;\n\n      const defaultValues = {\n         label: \"\",\n         columnName: \"\",\n         showIcon: 1,\n         required: 0,\n         unique: 0,\n         validationRules: \"\",\n      };\n\n      for (const f in defaultValues) {\n         const component = $$(ids[f]);\n         if (component) component.setValue(defaultValues[f]);\n      }\n\n      // reset the validation rules UI\n      const filterViews = $$(ids.filterComplex).queryView(\n         {\n            view: \"form\",\n            css: \"abValidationForm\",\n         },\n         \"all\"\n      );\n      if (filterViews.length) {\n         filterViews.forEach((v) => {\n            $$(ids.filterComplex).removeView(v);\n         });\n      }\n\n      $$(ids.addValidation).hide();\n\n      // hide warning message of null data\n      $$(ids.numberOfNull).hide();\n   }\n\n   /**\n    * @function editorPopulate\n    *\n    * populate the form with the given ABField instance provided.\n    *\n    * @param {object} ids\n    * @param {ABField} field\n    */\n   static editorPopulate(ids, field) {\n      this._CurrentField = field;\n\n      $$(ids.label).setValue(field.label);\n      $$(ids.columnName).setValue(field.columnName);\n      $$(ids.showIcon).setValue(field.settings.showIcon);\n      $$(ids.required).setValue(field.settings.required);\n      $$(ids.unique).setValue(field.settings.unique);\n\n      if (this._CurrentField) {\n         $$(ids.addValidation).show();\n      }\n\n      if (field.settings && field.settings.validationRules) {\n         let rules = field.settings.validationRules;\n         if (typeof rules == \"string\") {\n            try {\n               rules = JSON.parse(rules);\n            } catch (e) {\n               // continue regardless of error\n            }\n         }\n         (rules || []).forEach((settings) => {\n            field.addValidation(ids, settings);\n         });\n      }\n   }\n\n   /**\n    * @function definitionEditor\n    *\n    * Many DataFields share some base information for their usage\n    * in the AppBuilder.  The UI Editors have a common header\n    * and footer format, and this function allows child DataFields\n    * to not have to define those over and over.\n    *\n    * The common layout header contains:\n    *\t\t[Menu Label]\n    *\t\t[textBox: labelName]\n    *\t\t[text:    description]\n    *\n    * The defined DataField UI will be added at the end of this.\n    *\n    * This routine actually updated the live DataField definition\n    * with the common header info.\n    *\n    * @param {DataField} field  The DataField object to work with.\n    */\n   static definitionEditor(App, ids, _logic, Field) {\n      /// TODO: maybe just pass in onChange instead of _logic\n      /// if not onChange, then use our default:\n\n      // setup our default labelOnChange functionality:\n      let labelOnChange = function (newVal, oldVal) {\n         oldVal = oldVal || \"\";\n\n         if (\n            newVal != oldVal &&\n            oldVal == $$(ids.columnName).getValue() &&\n            $$(ids.columnName).isEnabled()\n         ) {\n            $$(ids.columnName).setValue(newVal);\n         }\n      };\n\n      // if they provided a labelOnChange() override, use that:\n      if (_logic.labelOnChange) {\n         labelOnChange = _logic.labelOnChange;\n      }\n\n      let requiredOnChange = function (newVal, oldVal, ids) {\n         console.warn(\n            \"Field has not implemented .requiredOnChange() is that okay?\"\n         );\n      };\n\n      const addValidation = (ids) => {\n         return this._CurrentField.addValidation(ids);\n      };\n\n      // if the provided a requriedOnChange() override, use that:\n      if (_logic.requiredOnChange) {\n         requiredOnChange = _logic.requiredOnChange;\n      }\n\n      const getNumberOfNullValue = async (isRequired) => {\n         if (\n            isRequired &&\n            this._CurrentField &&\n            this._CurrentField.id &&\n            this._CurrentField.settings.required != isRequired\n         ) {\n            // TODO: disable save button\n\n            // get count number\n            const data = await this._CurrentField.object.model().count({\n               where: {\n                  glue: \"and\",\n                  rules: [\n                     {\n                        key: this._CurrentField.id,\n                        rule: \"is_null\",\n                     },\n                  ],\n               },\n            });\n\n            if (data.count > 0) {\n               const messageTemplate = L(\n                  \"** There are {0} rows that will be updated to default value\",\n                  [data.count]\n               );\n\n               $$(ids.numberOfNull).setValue(messageTemplate);\n               $$(ids.numberOfNull).show();\n            } else {\n               $$(ids.numberOfNull).hide();\n            }\n\n            // TODO: enable save button\n         } else {\n            $$(ids.numberOfNull).hide();\n         }\n      };\n\n      const _ui = {\n         // id: ids.component,\n         rows: [\n            // {\n            // \tview: \"label\",\n            // \tlabel: \"<span class='webix_icon fa fa-{0}'></span>{1}\".replace('{0}', Field.icon).replace('{1}', Field.menuName)\n            // },\n            {\n               view: \"text\",\n               id: ids.label,\n               name: \"label\",\n               label: L(\"Label\"),\n               placeholder: L(\"Label\"),\n               labelWidth: this.AB.UISettings.config().labelWidthLarge,\n               css: \"ab-new-label-name\",\n               on: {\n                  onChange: function (newVal, oldVal) {\n                     labelOnChange(newVal, oldVal);\n                  },\n               },\n            },\n            {\n               view: \"text\",\n               id: ids.columnName,\n               name: \"columnName\",\n               disallowEdit: true,\n               label: L(\"Field Name\"),\n               labelWidth: this.AB.UISettings.config().labelWidthLarge,\n               placeholder: L(\"Database field name\"),\n            },\n            {\n               view: \"label\",\n               id: ids.fieldDescription,\n               label: L(\"Description\"),\n               align: \"right\",\n            },\n            {\n               view: \"checkbox\",\n               id: ids.showIcon,\n               name: \"showIcon\",\n               labelRight: App.labels.dataFieldShowIcon, // 'Show icon',\n               labelWidth: this.AB.UISettings.config().labelWidthCheckbox,\n               value: true,\n            },\n            {\n               view: \"checkbox\",\n               id: ids.required,\n               name: \"required\",\n               hidden: !Field.supportRequire,\n               labelRight: App.labels.required,\n               // disallowEdit: true,\n               labelWidth: this.AB.UISettings.config().labelWidthCheckbox,\n               on: {\n                  onChange: async (newVal, oldVal) => {\n                     requiredOnChange(newVal, oldVal, ids);\n\n                     // If check require on edit field, then show warning message\n                     await getNumberOfNullValue(newVal);\n                  },\n               },\n            },\n            // warning message: number of null value rows\n            {\n               view: \"label\",\n               id: ids.numberOfNull,\n               css: { color: \"#f00\" },\n               label: \"\",\n               hidden: true,\n            },\n\n            {\n               view: \"checkbox\",\n               id: ids.unique,\n               name: \"unique\",\n               hidden: !Field.supportUnique,\n               labelRight: App.labels.unique,\n               disallowEdit: true,\n               labelWidth: this.AB.UISettings.config().labelWidthCheckbox,\n            },\n            {\n               id: ids.filterComplex,\n               rows: [],\n            },\n            {\n               id: ids.addValidation,\n               view: \"button\",\n               label: L(\"Add Field Validation\"),\n               css: \"webix_primary\",\n               click: () => {\n                  addValidation(ids);\n               },\n            },\n            // have a hidden field to contain the validationRules\n            // value we will parse out later\n            {\n               id: ids.validationRules,\n               view: \"text\",\n               hidden: true,\n               name: \"validationRules\",\n            },\n         ],\n      };\n\n      return _ui;\n   }\n\n   static editorValues(settings) {\n      const obj = {\n         label: settings.label,\n         columnName: settings.columnName,\n         settings: settings,\n      };\n\n      delete settings.label;\n      delete settings.columnName;\n\n      return obj;\n   }\n\n   addValidation(ids, settings) {\n      const App = this.object.application.App;\n      const Filter = this.AB.filterComplexNew(\n         `${this.id}_field_validation_rules`\n      );\n      $$(ids.filterComplex).addView({\n         view: \"form\",\n         css: \"abValidationForm\",\n         cols: [\n            {\n               rows: [\n                  {\n                     view: \"text\",\n                     name: \"invalidMessage\",\n                     labelWidth: this.AB.UISettings.config().labelWidthLarge,\n                     value:\n                        settings && settings.invalidMessage\n                           ? settings.invalidMessage\n                           : \"\",\n                     label: L(\"Invalid Message\"),\n                  },\n                  Filter.ui,\n               ],\n            },\n            {\n               view: \"button\",\n               css: \"webix_danger\",\n               icon: \"fa fa-trash\",\n               type: \"icon\",\n               autowidth: true,\n               click: function () {\n                  const $viewCond = this.getParentView();\n                  $$(ids.filterComplex).removeView($viewCond);\n               },\n            },\n         ],\n      });\n      $$(Filter.ids.save).hide();\n      // Filter.applicationLoad(this.object.application);\n      Filter.fieldsLoad(this.object.fields());\n      if (settings && settings.rules) Filter.setValue(settings.rules);\n   }\n\n   /*\n    * @method isValid\n    * check the current values to make sure they are valid.\n    * Here we check the default values provided by ABField.\n    *\n    * @return null or [{OP.Validation.validator()}] objects.\n    */\n   isValid() {\n      const validator = this.AB.Validation.validator();\n\n      // .columnName must be unique among fileds on the same object\n      const isNameUnique =\n         this.object.fields((f) => {\n            return (\n               f.id != this.id &&\n               f.columnName.toLowerCase() == this.columnName.toLowerCase()\n            );\n         }).length == 0;\n      if (!isNameUnique) {\n         validator.addError(\n            \"columnName\",\n            L(\n               \"Field columnName must be unique ({0} already used in this Application)\",\n               [this.columnName]\n            )\n         );\n      }\n\n      return validator;\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   /// ABApplication data methods\n\n   /**\n    * @method destroy()\n    *\n    * destroy the current instance of ABApplication\n    *\n    * also remove it from our _AllApplications\n    *\n    * @return {Promise}\n    */\n   async destroy() {\n      // verify we have been .save() before:\n      if (!this.id) return;\n\n      // NOTE: our .migrateXXX() routines expect the object to currently exist\n      // in the DB before we perform the DB operations.  So we need to\n      // .migrateDrop()  before we actually .objectDestroy() this.\n      await this.migrateDrop();\n\n      // the server still references an ABField in relationship to it's\n      // ABObject, so we need to destroy the Field 1st, then remove it\n      // from it's object.\n      await super.destroy();\n\n      await this.object.fieldRemove(this);\n   }\n\n   /**\n    * @method save()\n    *\n    * persist this instance of ABField with it's parent ABObject\n    *\n    *\n    * @return {Promise}\n    *\t\t\t\t\t\t.resolve( {this} )\n    */\n   async save() {\n      let isAdd = false;\n      // if this is our initial save()\n      if (!this.id) {\n         isAdd = true;\n      }\n\n      // Whenever we update our settings, make sure any\n      // existing rows that have NULL values for this field\n      // are updated to have our current .default value.\n      if (!isAdd && this.settings.required && this.settings.default) {\n         const model = this.object.model();\n\n         // pull rows that has null value\n         const result = await model.findAll({\n            where: {\n               glue: \"and\",\n               rules: [\n                  {\n                     key: this.id,\n                     rule: \"is_null\",\n                  },\n               ],\n            },\n         });\n\n         const tasks = [];\n\n         // updating ...\n         result.data.forEach((d) => {\n            if (!d[this.columnName]) d[this.columnName] = this.settings.default;\n\n            tasks.push(model.update(d.id, d));\n         });\n\n         await Promise.all(tasks);\n      }\n\n      // New ABDefinition method of saving:\n      // when this is done, we now have an .id\n      await super.save();\n\n      // incase this was an ADD operation, make sure the\n      // parent Obj now includes this object:\n      // NOTE: must be done after the .save() so we have an .id\n      await this.object.fieldAdd(this);\n\n      // perform any server side migrations for this Field:\n\n      // but not connectObject fields:\n      // ABFieldConnect.migrateXXX() gets called from the UI popupNewDataField\n      // in order to handle the timings of the 2 fields that need to be created\n      if (!this.isConnection) {\n         const fnMigrate = isAdd ? this.migrateCreate() : this.migrateUpdate();\n         await fnMigrate;\n      }\n\n      return this;\n   }\n\n   ///\n   /// DB Migrations\n   ///\n\n   migrateCreate() {\n      return this.AB.Network.post({\n         url: `/definition/migrate/object/${this.object.id}/field/${this.id}`,\n      });\n   }\n\n   migrateUpdate() {\n      return this.AB.Network.put({\n         url: `/definition/migrate/object/${this.object.id}/field/${this.id}`,\n      });\n   }\n\n   migrateDrop() {\n      return this.AB.Network[\"delete\"]({\n         url: `/definition/migrate/object/${this.object.id}/field/${this.id}`,\n      });\n   }\n\n   ///\n   /// Working with Actual Object Values:\n   ///\n\n   /**\n    * @function columnHeader\n    * Return the column header for a webix grid component for this specific\n    * data field.\n    * @param {Object} options\n    * {\n    *    isObjectWorkspace: {bool},  is this being used in the Object workspace.\n    *    width: {int},\n    *    height: {int},\n    *    editable: {bool}\n    * }\n    * @return {obj}  configuration obj\n    */\n   columnHeader(options) {\n      options = options || {};\n\n      const config = {\n         id: this.columnName, // this.id,\n         header: this.label,\n      };\n\n      if (options.isObjectWorkspace && this.settings.showIcon) {\n         config.header = `<span class=\"webix_icon fa fa-${this.fieldIcon()}\"></span>${\n            config.header\n         }`;\n      }\n\n      return config;\n   }\n\n   /*\n    * @function customDisplay\n    * perform any custom display modifications for this field.  If this isn't\n    * a standard value display (think image, Map, graph, etc...) then use this\n    * method to create the display in the table/grid cell.\n    * @param {object} row\n    *        is the {name=>value} hash of the current row of data.\n    * @param {App} App\n    *        the shared ui App object useful more making globally\n    *\t\t\t unique id references.\n    * @param {HtmlDOM} node\n    *        the HTML Dom object for this field's display.\n    * @param {object} options\n    *        option of additional settings\n    */\n   customDisplay(row, App, node, options) {}\n\n   /*\n    * @function customEdit\n    *\n    *\n    *\n    * @param {object} row is the {name=>value} hash of the current row of data.\n    * @param {App} App the shared ui App object useful more making globally\n    *\t\t\t\t\tunique id references.\n    * @param {HtmlDOM} node  the HTML Dom object for this field's display.\n    */\n   customEdit(row, App, node) {\n      return true;\n   }\n\n   /**\n    * @method getValue\n    * this function uses for form component and mass update popup\n    * to get value of fields that apply custom editor\n    *\n    * @param {Object} item - Webix element\n    * @param {Object} rowData - data of row\n    *\n    * @return {Object}\n    */\n   getValue(item, rowData) {\n      return item.getValue();\n   }\n\n   /**\n    * @method setValue\n    * this function uses for form component and mass update popup\n    * to get value of fields that apply custom editor\n    *\n    * @param {Object} item - Webix element\n    * @param {Object} rowData - data of row\n    *\n    */\n   setValue(item, rowData, defaultValue) {\n      if (!item) return;\n\n      let val;\n\n      if (\n         (rowData == null || rowData[this.columnName] == null) &&\n         defaultValue != null\n      ) {\n         val = defaultValue;\n      } else if (rowData && rowData[this.columnName] != null) {\n         val = rowData[this.columnName];\n      } else {\n         val = rowData;\n      }\n\n      item.setValue(val);\n   }\n\n   /**\n    * @method formComponent\n    * returns a drag and droppable component that is used on the UI\n    * interface builder to place form components related to this ABField.\n    *\n    * an ABField defines which form component is used to edit it's contents.\n    * However, what is returned here, needs to be able to create an instance of\n    * the component that will be stored with the ABViewForm.\n    */\n   formComponent(formKey) {\n      // NOTE: what is being returned here needs to mimic an ABView CLASS.\n      // primarily the .common() and .newInstance() methods.\n\n      return {\n         // .common() is used to create the display in the list\n         common: () => {\n            return {\n               key: formKey,\n\n               // // but since this is a common place holder: use the\n               // // multilingual label here:\n               // labelKey: 'ab.abfield.labelPlaceholder',\n               // icon:  'square'\n            };\n         },\n\n         // .newInstance() is used to create the view instance when the component\n         // \t\tis dropped onto the ABView list.\n         newInstance: (application, parent) => {\n            // NOTE: in case you were wondering, the base ABField\n            // \t\t will just return a label with 'ABFieldPlaceholder'\n            // \t\t as the text.  Any sub class of ABField should overwrite\n            // \t\t this and return an actual Form Component.\n\n            // store object id and field id to field component\n            const values = this.formComponent().common();\n            values.settings = values.settings || {};\n            values.settings.objectId = this.object.id;\n            values.settings.fieldId = this.id;\n\n            const ABFieldPlaceholder = application.viewNew(\n               values,\n               application,\n               parent\n            ); // ABViewManager.newView(values, application, parent);\n            // ABFieldPlaceholder.formatTitle();\n            // ABFieldPlaceholder.text = \"ABFieldPlaceholder\";\n\n            return ABFieldPlaceholder;\n         },\n      };\n   }\n\n   /**\n    * @method detailComponent\n    */\n   detailComponent() {\n      return {\n         common: () => {\n            return {\n               icon: \"square\",\n            };\n         },\n\n         // .newInstance() is used to create the view instance when the component\n         // \t\tis dropped onto the ABView list.\n         newInstance: (application, parent) => {\n            // store object id and field id to field component\n            const values = this.detailComponent().common();\n            values.settings = values.settings || {};\n            values.settings.objectId = this.object.id;\n            values.settings.fieldId = this.id;\n\n            const ABFieldPlaceholder = application.viewNew(\n               values,\n               application,\n               parent\n            ); // ABViewManager.newView(values, application, parent);\n\n            return ABFieldPlaceholder;\n         },\n      };\n   }\n};\n","const ABFieldAutoIndexCore = require(\"../../core/dataFields/ABFieldAutoIndexCore\");\n\nmodule.exports = class ABFieldAutoIndex extends ABFieldAutoIndexCore {\n   // constructor(values, object) {\n   //    super(values, object);\n   // }\n\n   ///\n   /// Instance Methods\n   ///\n\n   isValid() {\n      const validator = super.isValid();\n\n      // validator.addError('columnName', L('ab.validation.object.name.unique', 'Field columnName must be unique (#name# already used in this Application)').replace('#name#', this.name) );\n\n      return validator;\n   }\n\n   ///\n   /// Working with Actual Object Values:\n   ///\n\n   // return the grid column header definition for this instance of ABFieldAutoIndex\n   columnHeader(options) {\n      const config = super.columnHeader(options);\n\n      config.editor = null; // read only\n      config.css = \"textCell\";\n      config.template = (rowData) => {\n         // if this isn't part of a group header display the default format\n         if (!rowData.$group) {\n            return this.format(rowData);\n         } else {\n            return \"\";\n         }\n      };\n\n      return config;\n   }\n\n   /*\n    * @funciton formComponent\n    * returns a drag and droppable component that is used on the UI\n    * interface builder to place form components related to this ABField.\n    *\n    * an ABField defines which form component is used to edit it's contents.\n    * However, what is returned here, needs to be able to create an instance of\n    * the component that will be stored with the ABViewForm.\n    */\n   formComponent() {\n      return super.formComponent(\"fieldreadonly\");\n   }\n\n   detailComponent() {\n      const detailComponentSetting = super.detailComponent();\n\n      detailComponentSetting.common = () => {\n         return {\n            key: \"detailtext\",\n         };\n      };\n\n      return detailComponentSetting;\n   }\n};\n","const ABFieldBooleanCore = require(\"../../core/dataFields/ABFieldBooleanCore\");\n\nmodule.exports = class ABFieldBoolean extends ABFieldBooleanCore {\n   constructor(values, object) {\n      super(values, object);\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   isValid() {\n      const validator = super.isValid();\n\n      // validator.addError('columnName', L('ab.validation.object.name.unique', 'Field columnName must be unique (#name# already used in this Application)').replace('#name#', this.name) );\n\n      return validator;\n   }\n\n   ///\n   /// Working with Actual Object Values:\n   ///\n\n   // return the grid column header definition for this instance of ABFieldBoolean\n   columnHeader(options) {\n      options = options || {};\n\n      const config = super.columnHeader(options);\n\n      config.editor = \"template\";\n      config.css = \"center\";\n      config.template = (row, common, value, config) => {\n         // Group header\n         if (row.$group) return row[this.columnName];\n\n         // editable\n         if (options.editable) {\n            return (\n               '<div class=\"ab-boolean-display\">' +\n               common.checkbox(row, common, value, config) +\n               \"</div>\"\n            );\n         }\n\n         // readonly\n         else {\n            if (value)\n               return \"<div class='webix_icon fa fa-check-square-o'></div>\";\n            else return \"<div class='webix_icon fa fa-square-o'></div>\";\n         }\n      };\n\n      return config;\n   }\n\n   /*\n    * @funciton formComponent\n    * returns a drag and droppable component that is used on the UI\n    * interface builder to place form components related to this ABField.\n    *\n    * an ABField defines which form component is used to edit it's contents.\n    * However, what is returned here, needs to be able to create an instance of\n    * the component that will be stored with the ABViewForm.\n    */\n   formComponent() {\n      return super.formComponent(\"checkbox\");\n   }\n\n   detailComponent() {\n      const detailComponentSetting = super.detailComponent();\n\n      detailComponentSetting.common = () => {\n         return {\n            key: \"detailcheckbox\",\n         };\n      };\n\n      return detailComponentSetting;\n   }\n};\n","const ABFieldCalculateCore = require(\"../../core/dataFields/ABFieldCalculateCore\");\n\nmodule.exports = class ABFieldCalculate extends ABFieldCalculateCore {\n   constructor(values, object) {\n      super(values, object);\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   isValid() {\n      const validator = super.isValid();\n\n      // validator.addError('columnName', L('ab.validation.object.name.unique', 'Field columnName must be unique (#name# already used in this Application)').replace('#name#', this.name) );\n\n      return validator;\n   }\n\n   ///\n   /// Working with Actual Object Values:\n   ///\n\n   // return the grid column header definition for this instance of ABFieldCalculate\n   columnHeader(options) {\n      const config = super.columnHeader(options);\n\n      config.editor = null; // read only\n      config.css = \"textCell\";\n      config.template = (rowData) => {\n         if (rowData.$group) return rowData[this.columnName];\n\n         return this.format(rowData);\n      };\n\n      return config;\n   }\n\n   /*\n    * @funciton formComponent\n    * returns a drag and droppable component that is used on the UI\n    * interface builder to place form components related to this ABField.\n    *\n    * an ABField defines which form component is used to edit it's contents.\n    * However, what is returned here, needs to be able to create an instance of\n    * the component that will be stored with the ABViewForm.\n    */\n   formComponent() {\n      return super.formComponent(\"fieldreadonly\");\n   }\n\n   detailComponent() {\n      const detailComponentSetting = super.detailComponent();\n\n      detailComponentSetting.common = () => {\n         return {\n            key: \"detailtext\",\n         };\n      };\n\n      return detailComponentSetting;\n   }\n};\n","const ABFieldCombineCore = require(\"../../core/dataFields/ABFieldCombineCore\");\n\nmodule.exports = class ABFieldCombine extends ABFieldCombineCore {\n   constructor(values, object) {\n      super(values, object);\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   isValid() {\n      const validator = super.isValid();\n\n      // validator.addError('columnName', L('ab.validation.object.name.unique', 'Field columnName must be unique (#name# already used in this Application)').replace('#name#', this.name) );\n\n      return validator;\n   }\n\n   ///\n   /// Working with Actual Object Values:\n   ///\n\n   // return the grid column header definition for this instance of ABFieldCombine\n   columnHeader(options) {\n      const config = super.columnHeader(options);\n\n      config.editor = null; // read only\n      config.css = \"textCell\";\n      config.template = (rowData) => {\n         // if this isn't part of a group header display the default format\n         if (!rowData.$group) {\n            return this.format(rowData);\n         } else {\n            return \"\";\n         }\n      };\n\n      return config;\n   }\n\n   /*\n    * @funciton formComponent\n    * returns a drag and droppable component that is used on the UI\n    * interface builder to place form components related to this ABField.\n    *\n    * an ABField defines which form component is used to edit it's contents.\n    * However, what is returned here, needs to be able to create an instance of\n    * the component that will be stored with the ABViewForm.\n    */\n   formComponent() {\n      return super.formComponent(\"fieldreadonly\");\n   }\n\n   detailComponent() {\n      const detailComponentSetting = super.detailComponent();\n\n      detailComponentSetting.common = () => {\n         return {\n            key: \"detailtext\",\n         };\n      };\n\n      return detailComponentSetting;\n   }\n};\n","const ABFieldConnectCore = require(\"../../core/dataFields/ABFieldConnectCore\");\n\nconst L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABFieldConnect extends ABFieldConnectCore {\n   constructor(values, object, fieldDefaults) {\n      super(values, object, fieldDefaults);\n   }\n\n   /**\n    * @method destroy()\n    *\n    * destroy the current instance of ABApplication\n    *\n    * also remove it from our _AllApplications\n    *\n    * @return {Promise}\n    */\n   async destroy() {\n      // verify we have been .save()d before:\n      if (!this.id) return Promise.resolve();\n\n      // NOTE: our .migrateXXX() routines expect the object to currently exist\n      // in the DB before we perform the DB operations.  So we need to\n      // .migrateDrop()  before we actually .objectDestroy() this.\n      // this.migrateDrop()\n      //    // .then(() => {\n      //    //    // NOTE : prevent recursive remove connected fields\n      //    //    // - remove this field from JSON\n      //    //    this.object._fields = this.object.fields((f) => {\n      //    //       return f.id != this.id;\n      //    //    });\n      //    // })\n      //    .then(() => {\n      //       // Save JSON of the object\n      //       return this.object.fieldRemove(this);\n      //    })\n      await super.destroy();\n\n      // Now we need to remove our linked Object->field\n\n      const linkObject = this.datasourceLink;\n      if (!linkObject) return Promise.resolve(); // already notified\n\n      const linkField = this.fieldLink;\n      if (!linkField) return Promise.resolve(); // already notified\n\n      // destroy linked field\n      return linkField.destroy();\n   }\n\n   ///\n   /// Working with Actual Object Values:\n   ///\n\n   /**\n    * @method pullRelationValues\n    *\n    * On the Web client, we want our returned relation values to be\n    * ready for Webix objects that require a .text and .value field.\n    *\n    * @param {*} row\n    * @return {array}\n    */\n   pullRelationValues(row) {\n      let selectedData = [];\n\n      const data = super.pullRelationValues(row);\n      const linkedObject = this.datasourceLink;\n\n      if (data && linkedObject) {\n         // if this select value is array\n         if (Array.isArray(data)) {\n            selectedData = data.map(function (d) {\n               // display label in format\n               if (d) {\n                  d.text = d.text || linkedObject.displayData(d);\n                  d.value = d.text;\n               }\n\n               return d;\n            });\n         } else if (data.id || data.uuid) {\n            selectedData = data;\n            selectedData.text =\n               selectedData.text || linkedObject.displayData(selectedData);\n            selectedData.value = selectedData.text;\n         } else if (typeof data == \"string\") {\n            selectedData = { text: data };\n         }\n      }\n\n      return selectedData;\n   }\n\n   columnHeader(options) {\n      options = options || {};\n      const config = super.columnHeader(options);\n      const field = this;\n      const App = field.AB._App;\n\n      if (options.filters == null) {\n         options.filters = {};\n      }\n\n      var multiselect = this.settings.linkType == \"many\";\n\n      config.editor = multiselect ? \"multiselect\" : \"combo\";\n      config.editFormat = (value) => {\n         return this.editFormat(value);\n      };\n      config.editParse = (value) => {\n         return this.editParse(value);\n      };\n      config.template = (row) => {\n         var selectedData = this.pullRelationValues(row);\n         var values = [];\n         values.push('<div class=\"badgeContainer\">');\n         if (\n            selectedData &&\n            Array.isArray(selectedData) &&\n            selectedData.length\n         ) {\n            selectedData.forEach((val) => {\n               values.push(\n                  `<div class='webix_multicombo_value'><span>${val.value}</span><!-- span data-uuid=\"${val.id}\" class=\"webix_multicombo_delete\" role=\"button\" aria-label=\"Remove item\"></span --></div>`\n               );\n            });\n            if (selectedData.length > 1) {\n               values.push(\n                  `<span class=\"webix_badge selectivityBadge\">${selectedData.length}</span>`\n               );\n            }\n         } else if (selectedData.value) {\n            let clear = \"\";\n            if (options.editable) {\n               clear = `<span class=\"webix_multicombo_delete clear-combo-value\" role=\"button\" aria-label=\"Remove item\"></span>`;\n            }\n            values.push(\n               `<div class='webix_multicombo_value'>${clear}<span class=\"ellip\">${selectedData.value}</span></div>`\n            );\n         } else {\n            return \"\";\n         }\n         values.push(\"</div>\");\n         return values.join(\"\");\n      };\n\n      config.suggest = {\n         on: {\n            onBeforeShow: function () {\n               field.openOptions(this);\n            },\n         },\n\n         // Support partial matches\n         filter: ({ value }, search) =>\n            (value ?? \"\").toLowerCase().includes((search ?? \"\").toLowerCase()),\n      };\n\n      if (multiselect) {\n         config.suggest.view = \"checksuggest\";\n         config.suggest.button = true;\n      }\n\n      return config;\n   }\n\n   openOptions($suggest) {\n      // PREVENT repeatedly pull data:\n      // If the options list was populated, then skip\n      const $list = $suggest.getList();\n      if (($list?.find({}) ?? []).length) return;\n\n      // Listen create/update events of the linked object, then clear data list to re-populate\n      [\"create\", \"update\"].forEach((key) => {\n         if (this[`_dc_${key}_event`]) return;\n\n         this[`_dc_${key}_event`] = this.AB.on(\n            `ab.datacollection.${key}`,\n            (res) => {\n               if (this.datasourceLink.id == res.objectId) $list.clearAll();\n            }\n         );\n      });\n\n      this.getAndPopulateOptions($suggest);\n   }\n\n   /*\n    * @function customEdit\n    *\n    * @param {object} row is the {name=>value} hash of the current row of data.\n    * @param {App} App the shared ui App object useful more making globally\n    *\t\t\t\t\tunique id references.\n    * @param {HtmlDOM} node  the HTML Dom object for this field's display.\n    */\n\n   //// NOTE: why do we pass in row, App, and node?  is this something we do in our external components?\n   ////       are these values present when this Object is instanciated? Can't we just pass these into the\n   ////       object constructor and have it internally track these things?\n   customEdit(row, App, node) {\n      // var selectedData = this.pullRelationValues(row);\n      // this._selectedData = selectedData;\n   }\n\n   /*\n    * @funciton formComponent\n    * returns a drag and droppable component that is used on the UI\n    * interface builder to place form components related to this ABField.\n    *\n    * an ABField defines which form component is used to edit it's contents.\n    * However, what is returned here, needs to be able to create an instance of\n    * the component that will be stored with the ABViewForm.\n    */\n   formComponent() {\n      return super.formComponent(\"connect\");\n   }\n\n   detailComponent() {\n      const detailComponentSetting = super.detailComponent();\n\n      detailComponentSetting.common = () => {\n         return {\n            key: \"detailconnect\",\n         };\n      };\n\n      return detailComponentSetting;\n   }\n\n   /**\n    * @method getOptions\n    * show options list in selectivity\n    *\n    * @return {Promise}\n    */\n   getOptions(where, term, sort) {\n      return new Promise((resolve, reject) => {\n         let haveResolved = false;\n         // {bool}\n         // have we already passed back a result?\n\n         const respond = (options) => {\n            // filter the raw lookup with the provided search term\n            options = options.filter((item) => {\n               if (item.text.toLowerCase().includes(term.toLowerCase())) {\n                  return true;\n               }\n            });\n\n            if (!haveResolved) {\n               haveResolved = true;\n               resolve(options);\n            } else {\n               // if we have already resolved() then .emit() that we have\n               // updated \"option.data\".\n               this.emit(\"option.data\", options);\n            }\n         };\n\n         // Prepare Where clause\n\n         where = where || {};\n         sort = sort || [];\n\n         if (!where.glue) where.glue = \"and\";\n\n         if (!where.rules) where.rules = [];\n\n         term = term || \"\";\n\n         // check if linked object value is not define, should return a empty array\n         if (!this.settings.linkObject) return [];\n\n         // if options was cached\n         // if (this._options != null) return resolve(this._options);\n\n         const linkedObj = this.datasourceLink;\n\n         // System could not found the linked object - It may be deleted ?\n         if (linkedObj == null) throw new Error(\"No linked object\");\n\n         const linkedCol = this.fieldLink;\n\n         // System could not found the linked field - It may be deleted ?\n         if (linkedCol == null) throw new Error(\"No linked column\");\n\n         // Get linked object model\n         const linkedModel = linkedObj.model();\n\n         // M:1 - get data that's only empty relation value\n         if (\n            this.settings.linkType == \"many\" &&\n            this.settings.linkViaType == \"one\"\n         ) {\n            // Mar 8, 2022 I (James) removed this because we need these options\n            // to appear so we can put a checkbox next to them with the new UI\n            // where.rules.push({\n            //    key: linkedCol.id,\n            //    rule: \"is_null\",\n            // });\n            // where[linkedCol.columnName] = null;\n         }\n         // 1:1\n         else if (\n            this.settings.linkType == \"one\" &&\n            this.settings.linkViaType == \"one\"\n         ) {\n            // 1:1 - get data is not match link id that we have\n            if (this.settings.isSource == true) {\n               // NOTE: make sure \"haveNoRelation\" shows up as an operator\n               // the value \":0\" doesn't matter, we just need 'haveNoRelation' as an operator.\n               // newRule[linkedCol.id] = { 'haveNoRelation': 0 };\n               where.rules.push({\n                  key: linkedCol.id,\n                  rule: \"have_no_relation\",\n               });\n            }\n            // 1:1 - get data that's only empty relation value by query null value from link table\n            else {\n               where.rules.push({\n                  key: linkedCol.id,\n                  rule: \"is_null\",\n               });\n               // newRule[linkedCol.id] = 'null';\n               // where[linkedCol.id] = null;\n            }\n         }\n\n         const storageID = `${this.id}-${JSON.stringify(where)}`;\n\n         Promise.resolve()\n            // TODO: debug the cached data + response so the droplist can display\n            // updated data.\n            .then(async () => {\n               // Get Local Storage\n\n               // We store the .findAll() results locally and return that for a\n               // quick response:\n               const storedOptions = await this.AB.Storage.get(storageID);\n               if (storedOptions) {\n                  // immediately respond with our stored options.\n                  this._options = storedOptions;\n                  return respond(this._options);\n               }\n            })\n            .then(async () => {\n               try {\n                  // Pull linked object data\n                  const result = await linkedModel.findAll({\n                     where: where,\n                     sort: sort,\n                     populate: false,\n                  });\n\n                  // cache linked object data\n                  this._options = result.data || result || [];\n\n                  // populate display text\n                  (this._options || []).forEach((opt) => {\n                     opt.text = linkedObj.displayData(opt);\n                     opt.value = opt.text;\n                  });\n\n                  this.AB.Storage.set(storageID, this._options);\n                  return respond(this._options);\n               } catch (err) {\n                  this.AB.notify.developer(err, {\n                     context:\n                        \"ABFieldConnect:getOptions(): unable to retrieve options from server\",\n                     field: this.toObj(),\n                     where,\n                  });\n\n                  haveResolved = true;\n                  throw err;\n               }\n            });\n      });\n   }\n\n   editFormat(value) {\n      if (!value) return \"\";\n      let vals = [];\n      if (Array.isArray(value)) {\n         value.forEach((val) => {\n            if (typeof val == \"object\") {\n               vals.push(val.id);\n            } else {\n               let itemObj = this.getItemFromVal(val);\n               vals.push(itemObj.id);\n            }\n         });\n      } else {\n         if (typeof value == \"object\") {\n            vals.push(value.id);\n         } else {\n            let itemObj = this.getItemFromVal(value);\n            if (itemObj && itemObj.id) {\n               vals.push(itemObj.id);\n            }\n         }\n      }\n      return vals.join();\n   }\n\n   editParse(value) {\n      var multiselect = this.settings.linkType == \"many\";\n      if (multiselect) {\n         if (!value) {\n            return [];\n         } else {\n            let returnVals = [];\n            let vals = value.split(\",\");\n            vals.forEach((val) => {\n               returnVals.push(this.getItemFromVal(val));\n            });\n            return returnVals;\n         }\n      } else {\n         let item = this.getItemFromVal(value);\n         return item;\n      }\n   }\n\n   getAndPopulateOptions(editor, options, field, form) {\n      const theEditor = editor;\n\n      // if we are filtering based off another selectivity's value we\n      // need to do it on fetch each time because the value can change\n      // copy the filters so we don't add to them every time there is a change\n      const combineFilters = options?.filters\n         ? Object.assign({}, options.filters)\n         : { glue: \"and\", rules: [] };\n\n      if (options?.filterByConnectValues) {\n         const parseFilterByConnectValues = (conditions, values, depth = 0) => {\n            const valuesByDepth = values.filter((e) => e.depth === depth);\n\n            return [\n               ...conditions.rules.map((e) => {\n                  if (e.glue)\n                     return {\n                        glue: e.glue,\n                        rules: parseFilterByConnectValues(e, values, depth + 1),\n                     };\n\n                  const value = valuesByDepth.filter(\n                     (ef) => ef.key === e.key && ef.value === e.value\n                  )[0];\n\n                  if (!value) return e;\n\n                  const $parentField = value?.filterValue?.config.id\n                     ? $$(value.filterValue.config.id)\n                     : null;\n\n                  if (!$parentField)\n                     throw Error(\n                        \"Some parent field's view components don't exist\"\n                     );\n\n                  const parentValue = value?.filterValue\n                     ? $parentField.getValue() ?? \"\"\n                     : \"\";\n\n                  let newVal = \"\";\n\n                  if (parentValue) {\n                     if (value.filterColumn) {\n                        if (\n                           field.object\n                              .fieldByID(value.filterValue.config.dataFieldId)\n                              .getItemFromVal(parentValue)\n                        ) {\n                           newVal = field.object\n                              .fieldByID(value.filterValue.config.dataFieldId)\n                              .getItemFromVal(parentValue)[value.filterColumn];\n                        } else {\n                           newVal = parentValue;\n                        }\n                     } else {\n                        newVal = parentValue;\n                     }\n                  }\n\n                  return {\n                     key: e.key,\n                     rule: \"equals\",\n                     value: newVal,\n                  };\n               }),\n            ];\n         };\n\n         combineFilters.rules = parseFilterByConnectValues(\n            combineFilters,\n            options.filterByConnectValues\n         );\n      }\n\n      const handlerOptionData = (data) => {\n         this.populateOptions(theEditor, data, field, form, true);\n      };\n\n      // try to make sure we don't continually add up listeners.\n      this.removeListener(\"option.data\", handlerOptionData).once(\n         \"option.data\",\n         handlerOptionData\n      );\n\n      this.getOptions(combineFilters, \"\").then((data) => {\n         this.populateOptions(theEditor, data, field, form, false);\n      });\n   }\n\n   populateOptions(theEditor, data, field, form, addCy) {\n      theEditor.blockEvent();\n      theEditor.getList().clearAll();\n      theEditor.getList().define(\"data\", data);\n      if (addCy) {\n         this.populateOptionsDataCy(theEditor, field, form);\n      }\n      if (theEditor.getValue && theEditor.getValue()) {\n         theEditor.setValue(theEditor.getValue());\n         // } else if (this._selectedData && this._selectedData.length) {\n         //    theEditor.setValue(this.editFormat(this._selectedData));\n      }\n      theEditor.unblockEvent();\n   }\n\n   populateOptionsDataCy(theEditor, field, form) {\n      // Add data-cy attributes\n      if (theEditor?.getList) {\n         if (!theEditor.getPopup) return;\n         var popup = theEditor.getPopup();\n         if (!popup) return;\n         theEditor.getList().data.each((option) => {\n            if (!option) return;\n            var node = popup.$view.querySelector(\n               \"[webix_l_id='\" + option.id + \"']\"\n            );\n            if (!node) return;\n            node.setAttribute(\n               \"data-cy\",\n               `${field.key} options ${option.id} ${field.id} ${form.id}`\n            );\n         });\n      }\n   }\n\n   getItemFromVal(val) {\n      let item;\n      let options = this._options || [];\n      if (options.length > 0) {\n         for (let i = 0; i < options.length; i++) {\n            if (\n               this.indexField &&\n               options[i][this.indexField.object.PK()] == val\n            ) {\n               item = options[i];\n               break;\n            } else if (\n               this.indexField2 &&\n               options[i][this.indexField2.object.PK()] == val\n            ) {\n               item = options[i];\n               break;\n            } else {\n               if (options[i].id == val) {\n                  item = options[i];\n                  break;\n               }\n            }\n         }\n         return item;\n      } else {\n         return \"\";\n      }\n   }\n\n   getValue(item) {\n      var multiselect = this.settings.linkType == \"many\";\n      if (multiselect) {\n         let vals = [];\n         if (item.getValue()) {\n            let val = item.getValue().split(\",\");\n            val.forEach((record) => {\n               vals.push(item.getList().getItem(record));\n            });\n         }\n         return vals;\n      } else {\n         if (item.getValue()) {\n            return item.getList().getItem(item.getValue());\n         } else {\n            return \"\";\n         }\n      }\n   }\n\n   setValue(item, rowData) {\n      if (!item) return;\n      // if (AB.isEmpty(rowData)) return; removed because sometimes we will\n      // want to set this to empty\n      let val = this.pullRelationValues(rowData);\n      // put in current values as options so we can display them before\n      // the rest of the options are fetched when field is clicked\n      if (item.getList && item.getList().count() == 0) {\n         if (this.settings.linkType != \"one\" && !Array.isArray(val)) {\n            val = [val];\n         }\n         item.getList().define(\"data\", val);\n      }\n      item.define(\"value\", val);\n   }\n\n   /**\n    * @method pullRecordRelationValues\n    *\n    * On the Web client, we want our returned relation values to be\n    * ready for Webix objects that require a .text and .value field.\n    *\n    * @param {*} row\n    * @return {array}\n    */\n   pullRecordRelationValues(record) {\n      var selectedData = [];\n\n      var data = record;\n      var linkedObject = this.datasourceLink;\n\n      if (data && linkedObject) {\n         // if this select value is array\n         if (Array.isArray(data)) {\n            selectedData = data.map(function (d) {\n               // display label in format\n               if (d) {\n                  d.text = d.text || linkedObject.displayData(d);\n                  d.value = d.text;\n               }\n\n               return d;\n            });\n         } else if (data.id || data.uuid) {\n            selectedData = data;\n            selectedData.text =\n               selectedData.text || linkedObject.displayData(selectedData);\n            selectedData.value = selectedData.text;\n         }\n      }\n\n      return selectedData;\n   }\n};\n","const ABFieldDateCore = require(\"../../core/dataFields/ABFieldDateCore\");\n\nmodule.exports = class ABFieldDate extends ABFieldDateCore {\n   constructor(values, object) {\n      super(values, object);\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   isValid() {\n      const validator = super.isValid();\n\n      // validator.addError('columnName', L('ab.validation.object.name.unique', 'Field columnName must be unique (#name# already used in this Application)').replace('#name#', this.name) );\n\n      return validator;\n   }\n\n   ///\n   /// Working with Actual Object Values:\n   ///\n\n   // return the grid column header definition for this instance of ABFieldDate\n   columnHeader(options) {\n      const config = super.columnHeader(options);\n\n      // if (this.settings.includeTime)\n      // config.editor = \"datetime\";\n      // else\n      config.editor = \"date\";\n\n      // allows entering characters in datepicker input, false by default\n      config.editable = true;\n\n      // NOTE: it seems that the default value is a string in ISO format.\n\n      //// NOTE: webix seems unable to parse ISO string into => date here.\n      // config.map = '(date)#'+this.columnName+'#';   // so don't use this.\n\n      config.template = (row) => {\n         if (row.$group) return row[this.columnName];\n\n         return this.format(row);\n      };\n\n      config.format = (d) => {\n         const rowData = {};\n         rowData[this.columnName] = d;\n\n         return this.format(rowData);\n      };\n\n      config.editFormat = (d) => {\n         // this routine needs to return a Date() object for the editor to work with.\n\n         if (d == \"\" || d == null) {\n            return \"\";\n         }\n\n         // else retun the actual ISO string => Date() value\n         return this.AB.toDate(d);\n      };\n\n      return config;\n   }\n\n   /*\n    * @funciton formComponent\n    * returns a drag and droppable component that is used on the UI\n    * interface builder to place form components related to this ABField.\n    *\n    * an ABField defines which form component is used to edit it's contents.\n    * However, what is returned here, needs to be able to create an instance of\n    * the component that will be stored with the ABViewForm.\n    */\n   formComponent() {\n      // NOTE: what is being returned here needs to mimic an ABView CLASS.\n      // primarily the .common() and .newInstance() methods.\n      const formComponentSetting = super.formComponent(\"datepicker\");\n\n      // .common() is used to create the display in the list\n      formComponentSetting.common = () => {\n         return {\n            key: \"datepicker\",\n         };\n      };\n\n      return formComponentSetting;\n   }\n\n   detailComponent() {\n      const detailComponentSetting = super.detailComponent();\n\n      detailComponentSetting.common = () => {\n         return {\n            key: \"detailtext\",\n         };\n      };\n\n      return detailComponentSetting;\n   }\n\n   dateToString(dateFormat, dateData) {\n      return webix.Date.dateToStr(dateFormat)(dateData);\n   }\n\n   // Overwrite core.format to use webix locales.\n   format(rowData) {\n      if (!window.webixLocale) return super.format(rowData);\n      const d = this.dataValue(rowData);\n\n      if (d == \"\" || d == null) {\n         return \"\";\n      }\n      const dateObj = this.AB.toDate(d);\n\n      const dateFormat = this.settings.dateFormat;\n      // @const {int} dateFormat AB Date Format\n      // 1 - ignore, 2 - dd/mm/yyyy, 3 - mm/dd/yyyy, 4 - M D, yyyy, 5 - D M, yyyy\n\n      // Return longdate if option 4 or 5\n      if (dateFormat >= 4) {\n         return webix.i18n.longDateFormatStr(dateObj);\n      } else {\n         return webix.i18n.dateFormatStr(dateObj);\n      }\n   }\n};\n","const ABFieldDateTimeCore = require(\"../../core/dataFields/ABFieldDateTimeCore\");\n\nmodule.exports = class ABFieldDateTime extends ABFieldDateTimeCore {\n   constructor(values, object) {\n      super(values, object);\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   // isValid() {\n   //    const validator = super.isValid();\n\n   //    // validator.addError('columnName', L('ab.validation.object.name.unique', 'Field columnName must be unique (#name# already used in this Application)').replace('#name#', this.name) );\n\n   //    return validator;\n   // }\n\n   ///\n   /// Working with Actual Object Values:\n   ///\n\n   // return the grid column header definition for this instance of ABFieldDate\n   columnHeader(options) {\n      const config = super.columnHeader(options);\n\n      // Ignore date\n      if (this.settings.dateFormat == 1) {\n         config.editor = \"time\";\n      } else {\n         config.editor = \"datetime\";\n      }\n\n      // allows entering characters in datepicker input, false by default\n      config.editable = true;\n\n      // NOTE: it seems that the default value is a string in ISO format.\n\n      //// NOTE: webix seems unable to parse ISO string into => date here.\n      // config.map = '(date)#'+this.columnName+'#';   // so don't use this.\n\n      config.template = (row) => {\n         if (row.$group) return row[this.columnName];\n\n         return this.format(row);\n      };\n\n      config.format = (d) => {\n         const rowData = {};\n         rowData[this.columnName] = d;\n\n         return this.format(rowData);\n      };\n\n      config.editFormat = (d) => {\n         // this routine needs to return a Date() object for the editor to work with.\n\n         if (d == \"\" || d == null) {\n            return \"\";\n         }\n\n         // else retun the actual ISO string => Date() value\n         return this.AB.toDate(d);\n      };\n\n      return config;\n   }\n\n   /*\n    * @funciton formComponent\n    * returns a drag and droppable component that is used on the UI\n    * interface builder to place form components related to this ABField.\n    *\n    * an ABField defines which form component is used to edit it's contents.\n    * However, what is returned here, needs to be able to create an instance of\n    * the component that will be stored with the ABViewForm.\n    */\n   formComponent() {\n      // NOTE: what is being returned here needs to mimic an ABView CLASS.\n      // primarily the .common() and .newInstance() methods.\n      const formComponentSetting = super.formComponent(\"datepicker\");\n\n      // .common() is used to create the display in the list\n      formComponentSetting.common = () => {\n         return {\n            key: \"datepicker\",\n         };\n      };\n\n      return formComponentSetting;\n   }\n\n   detailComponent() {\n      const detailComponentSetting = super.detailComponent();\n\n      detailComponentSetting.common = () => {\n         return {\n            key: \"detailtext\",\n         };\n      };\n\n      return detailComponentSetting;\n   }\n\n   // Overwrite core.format to use webix locales.\n   format(rowData) {\n      if (!window.webixLocale) return super.format(rowData);\n      const d = this.dataValue(rowData);\n\n      if (d == \"\" || d == null) {\n         return \"\";\n      }\n      const dateObj = this.AB.toDate(d);\n\n      const dateFormat = this.settings.dateFormat;\n      // @const {int} dateFormat AB Date Format\n      // 1 - ignore, 2 - dd/mm/yyyy, 3 - mm/dd/yyyy, 4 - M D, yyyy, 5 - D M, yyyy\n      const timeToStr = webix.Date.dateToStr(this.getTimeFormat());\n\n      if (dateFormat >= 4) {\n         return `${webix.i18n.longDateFormatStr(dateObj)} ${timeToStr(\n            dateObj\n         )}`;\n      } else {\n         return `${webix.i18n.dateFormatStr(dateObj)} ${timeToStr(dateObj)}`;\n      }\n   }\n};\n","const ABFieldEmailCore = require(\"../../core/dataFields/ABFieldEmailCore\");\n\nmodule.exports = class ABFieldEmail extends ABFieldEmailCore {\n   // constructor(values, object) {\n   //    super(values, object);\n   // }\n\n   ///\n   /// Instance Methods\n   ///\n\n   // isValid() {\n   //    const validator = super.isValid();\n\n   //    // validator.addError('columnName', L('ab.validation.object.name.unique', 'Field columnName must be unique (#name# already used in this Application)').replace('#name#', this.name) );\n\n   //    return validator;\n   // }\n\n   ///\n   /// Working with Actual Object Values:\n   ///\n\n   // return the grid column header definition for this instance of ABFieldBoolean\n   columnHeader(options) {\n      const config = super.columnHeader(options);\n\n      config.editor = \"text\";\n\n      return config;\n   }\n\n   /*\n    * @funciton formComponent\n    * returns a drag and droppable component that is used on the UI\n    * interface builder to place form components related to this ABField.\n    *\n    * an ABField defines which form component is used to edit it's contents.\n    * However, what is returned here, needs to be able to create an instance of\n    * the component that will be stored with the ABViewForm.\n    */\n   formComponent() {\n      // NOTE: what is being returned here needs to mimic an ABView CLASS.\n      // primarily the .common() and .newInstance() methods.\n      const formComponentSetting = super.formComponent();\n\n      // .common() is used to create the display in the list\n      formComponentSetting.common = () => {\n         return {\n            key: \"textbox\",\n            settings: {\n               type: \"single\",\n            },\n         };\n      };\n\n      return formComponentSetting;\n   }\n\n   detailComponent() {\n      const detailComponentSetting = super.detailComponent();\n\n      detailComponentSetting.common = () => {\n         return {\n            key: \"detailtext\",\n         };\n      };\n\n      return detailComponentSetting;\n   }\n};\n","const ABFieldFileCore = require(\"../../core/dataFields/ABFieldFileCore\");\n\nconst L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABFieldFile extends ABFieldFileCore {\n   constructor(values, object) {\n      super(values, object);\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   isValid() {\n      const validator = super.isValid();\n\n      // validator.addError('columnName', L('ab.validation.object.name.unique', 'Field columnName must be unique (#name# already used in this Application)').replace('#name#', this.name) );\n\n      return validator;\n   }\n\n   /**\n    * @function destroy\n    * On a destroy operation, ask if the user wants to keep the related file.\n    */\n   async destroy() {\n      return new Promise((resolve, reject) => {\n         // verify we have been .save()d before:\n         if (!this.id) {\n            resolve();\n            return;\n         }\n\n         // Ask the user what to do about the existing file:\n         webix.confirm({\n            title: L(\"Keep Files?\"),\n            message: L(\"Do you want to keep the files referenced by {0}?\", [\n               this.label,\n            ]),\n            callback: async (result) => {\n               // update this setting so the server can respond correctly in\n               // ABFieldFile.migrateDrop()\n               this.settings.removeExistingData = result ? 0 : 1;\n\n               try {\n                  await this.save();\n\n                  // TODO: a reminder that you still got alot on the server to do!\n                  webix.alert({\n                     title: \"!! TODO !!\",\n                     text:\n                        \"Tell a Developer to actually pay attention to this!\",\n                  });\n\n                  // now the default .destroy()\n                  await super.destroy();\n\n                  resolve();\n               } catch (err) {\n                  reject(err);\n               }\n            },\n         });\n      });\n   }\n\n   ///\n   /// Working with Actual Object Values:\n   ///\n\n   // return the grid column header definition for this instance of ABFieldFile\n   columnHeader(options) {\n      options = options || {};\n\n      const config = super.columnHeader(options);\n\n      config.editor = false;\n\n      const editable = options.editable;\n\n      // populate our default template:\n      config.template = (obj) => {\n         if (obj.$group) return this.dataValue(obj);\n\n         const fileDiv = [\n            '<div class=\"ab-file-data-field\" style=\"float: left;\">',\n            '<div class=\"webix_view ab-file-holder\">',\n            '<div class=\"webix_template\">',\n            this.fileTemplate(obj, editable),\n            \"</div>\",\n            \"</div>\",\n            \"</div>\",\n         ].join(\"\");\n\n         return fileDiv;\n      };\n\n      return config;\n   }\n\n   /*\n    * @function customDisplay\n    * perform any custom display modifications for this field.\n    * @param {object} row is the {name=>value} hash of the current row of data.\n    * @param {App} App the shared ui App object useful more making globally\n    *\t\t\t\t\tunique id references.\n    * @param {HtmlDOM} node  the HTML Dom object for this field's display.\n    */\n   customDisplay(row, App, node, options) {\n      // sanity check.\n      if (!node) {\n         return;\n      }\n      options = options || {};\n\n      let typesList = [];\n      let maximumSize = 0;\n\n      if (this.settings.limitFileType && this.settings.fileType) {\n         typesList = this.settings.fileType.split(\",\");\n      }\n\n      if (this.settings.limitFileSize && this.settings.fileSize) {\n         maximumSize = this.settings.fileSize;\n      }\n\n      // \t\t// safety check:\n      // \t\t// webix seems to crash if you specify a .container that doesn't exists:\n      // \t\t// Note: when the template is first created, we don't have App.unique()\n      const parentContainer = node.querySelector(\".ab-file-holder\");\n      if (parentContainer) {\n         parentContainer.innerHTML = \"\";\n         // parentContainer.id = idBase;\t// change it to the unique one.\n\n         // \t\t\t// use a webix component for displaying the content.\n         // \t\t\t// do this so I can use the progress spinner\n\n         const webixContainer = webix.ui({\n            view: \"template\",\n            container: parentContainer,\n\n            template: this.fileTemplate(row, options.editable),\n\n            borderless: true,\n            width: 160,\n            height: 60,\n         });\n         webix.extend(webixContainer, webix.ProgressBar);\n\n         // \t\t\t////\n         // \t\t\t//// Prepare the Uploader\n         // \t\t\t////\n\n         if (!options.editable) {\n            const domNode = parentContainer.querySelector(\".delete-image\");\n            if (domNode) domNode.style.display = \"none\";\n\n            return;\n         }\n\n         const url = this.urlUpload(true);\n\n         const uploader = webix.ui({\n            view: \"uploader\",\n            apiOnly: true,\n            upload: url,\n            inputName: \"file\",\n            multiple: false,\n            on: {\n               // when a file is added to the uploader\n               onBeforeFileAdd: function (item) {\n                  node.classList.remove(\"webix_invalid\");\n                  node.classList.remove(\"webix_invalid_cell\");\n\n                  // verify file type\n                  const acceptableTypes = typesList;\n                  if (acceptableTypes && acceptableTypes != \"\") {\n                     const type = item.type.toLowerCase();\n                     if (acceptableTypes.indexOf(type) == -1) {\n                        webix.message(\n                           L(\"Only [{0}] files are supported\", [\n                              acceptableTypes.join(\", \"),\n                           ])\n                        );\n                        return false;\n                     }\n                  }\n\n                  //verify file size\n                  //Convert to MegaBytes\n                  if (maximumSize > 0) {\n                     const acceptableSizes = maximumSize * 1000000;\n                     if (item.size > acceptableSizes) {\n                        webix.message(\n                           L(\"Maximum file size is {0}MB\", [maximumSize])\n                        );\n                        return false;\n                     }\n                  }\n\n                  // start progress indicator\n                  webixContainer.showProgress({\n                     type: \"icon\",\n                     delay: 2000,\n                  });\n               },\n\n               // when upload is complete:\n               onFileUpload: async (item, response) => {\n                  webixContainer.hideProgress();\n                  // this.showFile(idBase, response.data.uuid);\n\n                  const values = {};\n                  values[this.columnName] = {};\n                  values[this.columnName].uuid = response.data.uuid;\n                  values[this.columnName].filename = item.name;\n\n                  // update just this value on our current object.model\n                  if (row.id) {\n                     try {\n                        await this.object.model().update(row.id, values);\n\n                        // update the client side data object as well so other data changes won't cause this save to be reverted\n                        if ($$(node) && $$(node).updateItem)\n                           $$(node).updateItem(row.id, values);\n                     } catch (err) {\n                        node.classList.add(\"webix_invalid\");\n                        node.classList.add(\"webix_invalid_cell\");\n\n                        this.AB.notify.developer(err, {\n                           context:\n                              \"ABFieldFile.onFileUpload(): Error updating our entry.\",\n                           row: row,\n                           values: values,\n                        });\n                     }\n                  }\n\n                  // update value in the form component\n                  this.setValue($$(node), values);\n               },\n\n               // if an error was returned\n               onFileUploadError: (item, response) => {\n                  this.AB.notify.developer(new Error(\"Error loading file\"), {\n                     message: \"Error loading file\",\n                     response,\n                  });\n                  webixContainer.hideProgress();\n               },\n            },\n         });\n         uploader.addDropZone(webixContainer.$view);\n\n         // store upload id into html element (it will be used in .customEdit)\n         node.dataset[\"uploaderId\"] = uploader.config.id;\n\n         // open file upload dialog when's click\n         node.addEventListener(\"click\", (e) => {\n            if (e.target.className.indexOf(\"delete-image\") > -1) {\n               this.deleteFile = true;\n            }\n         });\n      }\n   }\n\n   /*\n    * @function customEdit\n    *\n    * @param {object} row is the {name=>value} hash of the current row of data.\n    * @param {App} App the shared ui App object useful more making globally\n    *\t\t\t\t\tunique id references.\n    * @param {HtmlDOM} node  the HTML Dom object for this field's display.\n    */\n   customEdit(row, App, node) {\n      if (this.deleteFile == true) {\n         // remove the property because it is only needed to prevent the file dialog from showing\n         delete this.deleteFile;\n\n         // Ask the user if they really want to delete the photo\n         webix.confirm({\n            title: \"\",\n            message: L(\"Are you sure you want to remove this file?\"),\n            callback: async (result) => {\n               const confirmDelete = result ? 1 : 0;\n               if (confirmDelete) {\n                  // update just this value on our current object.model\n                  const values = {};\n                  values[this.columnName] = \"\";\n\n                  if (row.id) {\n                     try {\n                        await this.object.model().update(row.id, values);\n\n                        // update the client side data object as well so other data changes won't cause this save to be reverted\n                        if ($$(node) && $$(node).updateItem)\n                           $$(node).updateItem(row.id, values);\n                     } catch (err) {\n                        node.classList.add(\"webix_invalid\");\n                        node.classList.add(\"webix_invalid_cell\");\n\n                        this.AB.notify.developer(err, {\n                           message: \"Error updating our entry.\",\n                           row: row,\n                           values: values,\n                        });\n                     }\n                  }\n                  // update value in the form component\n                  else {\n                     this.setValue($$(node), values);\n                  }\n               }\n            },\n         });\n      } else {\n         const rowData = this.dataValue(row);\n         if (!rowData || !rowData.uuid) {\n            const uploaderId = node.dataset[\"uploaderId\"],\n               uploader = $$(uploaderId);\n\n            if (uploader && uploader.fileDialog)\n               uploader.fileDialog({ rowid: row.id });\n         }\n      }\n\n      return false;\n   }\n\n   /*\n    * @funciton formComponent\n    * returns a drag and droppable component that is used on the UI\n    * interface builder to place form components related to this ABField.\n    *\n    * an ABField defines which form component is used to edit it's contents.\n    * However, what is returned here, needs to be able to create an instance of\n    * the component that will be stored with the ABViewForm.\n    */\n   formComponent() {\n      return super.formComponent(\"fieldcustom\");\n   }\n\n   detailComponent() {\n      const detailComponentSetting = super.detailComponent();\n\n      detailComponentSetting.common = () => {\n         return {\n            key: \"detailcustom\",\n         };\n      };\n\n      return detailComponentSetting;\n   }\n\n   //File Template\n\n   fileTemplate(obj, editable) {\n      let iconDisplay = \"\";\n      let fileDisplay = \"display:none;\";\n      let fileURL = \"\";\n\n      let value = \"\";\n      let name = \"\";\n\n      const rowData = this.dataValue(obj);\n      if (rowData) {\n         value = rowData.uuid;\n         name = rowData.filename;\n      }\n\n      if (value && name) {\n         iconDisplay = \"display:none;\";\n         fileDisplay = \"\";\n         fileURL = \"/file/\" + value;\n      }\n\n      const html = [\n         `<div class=\"file-data-field-icon\" style=\"text-align: center; height: inherit; display: table-cell; vertical-align: middle; border: 2px dotted #CCC; background: #FFF; border-radius: 10px; font-size: 11px; line-height: 13px; padding: 0 10px; ${iconDisplay}\"><i class=\"fa fa-file fa-2x\" style=\"opacity: 0.6; font-size: 32px; margin-top: 3px; margin-bottom: 5px;\"></i>${\n            editable ? `<br/>${L(\"Drag and drop or click here\")}` : \"\"\n         }</div>`,\n         `<div class=\"file-data-field-name\" style=\" width:100%; height:100%; position:relative; \"><a target=\"_blank\" href=\"${fileURL}\">${\n            name || \"\"\n         }</a>${\n            editable\n               ? `<a style=\"${fileDisplay}\" class=\"ab-delete-photo\" href=\"javascript:void(0);\"><i class=\"fa fa-times delete-image\"></i></a>`\n               : \"\"\n         }</div>`,\n      ].join(\"\");\n\n      return html;\n   }\n\n   getValue(item, rowData) {\n      const file = item.$view.querySelector(\".file-data-field-name\");\n      const fileLink = file.querySelector(\"a\");\n\n      return {\n         uuid: file.getAttribute(\"file-uuid\"),\n         filename: fileLink.innerHTML,\n      };\n   }\n\n   setValue(item, rowData) {\n      if (!item) return;\n\n      const domNode = item.$view;\n      if (!domNode) return;\n\n      let val = null;\n      if (rowData) {\n         val = this.dataValue(rowData);\n\n         // if (val == null) {\n         // \t// assume they just sent us a single value\n         // \tval = rowData;\n         // }\n      }\n\n      const fileicon = domNode.querySelector(\".file-data-field-icon\");\n      if (fileicon) fileicon.style.display = val && val.uuid ? \"none\" : \"block\";\n\n      const file = domNode.querySelector(\".file-data-field-name\");\n      if (file) {\n         const fileDeleteIcon = file.querySelector(\".ab-delete-photo\");\n         if (fileDeleteIcon)\n            fileDeleteIcon.style.display = val && val.uuid ? \"block\" : \"none\";\n\n         file.style.display = val && val.uuid ? \"block\" : \"none\";\n         if (val && val.uuid) file.setAttribute(\"file-uuid\", val.uuid);\n         else file.removeAttribute(\"file-uuid\");\n\n         const fileLink = file.querySelector(\"a\");\n         const fileURL = \"/file/\" + (val ? val.uuid : \"\");\n         fileLink.href = fileURL;\n         fileLink.innerHTML = val ? val.filename : \"\";\n      }\n   }\n\n   /**\n    * @method urlUpload()\n    * return the url for uploading a file.\n    * When used in a webix widget, the response is different than our normal\n    * API, so we can pass in a param to indicate a response compatible with\n    * webix.\n    * @param {bool} isWebix\n    *        Is this url being used by a webix component?\n    * @return {string}\n    */\n   urlUpload(isWebix = true) {\n      return `/file/upload/${this.object.id}/${this.id}/${isWebix ? \"1\" : \"0\"}`;\n   }\n};\n","const ABFieldFormulaCore = require(\"../../core/dataFields/ABFieldFormulaCore\");\n\nmodule.exports = class ABFieldFormula extends ABFieldFormulaCore {\n   // constructor(values, object) {\n   //    super(values, object);\n   // }\n\n   ///\n   /// Instance Methods\n   ///\n\n   // isValid() {\n   //    const validator = super.isValid();\n\n   //    // validator.addError('columnName', L('ab.validation.object.name.unique', 'Field columnName must be unique (#name# already used in this Application)').replace('#name#', this.name) );\n\n   //    return validator;\n   // }\n\n   ///\n   /// Working with Actual Object Values:\n   ///\n\n   // return the grid column header definition for this instance of ABFieldFormula\n   columnHeader(options) {\n      const config = super.columnHeader(options);\n\n      config.editor = null; // read only\n      config.css = \"textCell\";\n      config.template = (rowData) => {\n         if (rowData.$group) return rowData[this.columnName];\n\n         return this.format(rowData);\n      };\n\n      return config;\n   }\n\n   /*\n    * @funciton formComponent\n    * returns a drag and droppable component that is used on the UI\n    * interface builder to place form components related to this ABField.\n    *\n    * an ABField defines which form component is used to edit it's contents.\n    * However, what is returned here, needs to be able to create an instance of\n    * the component that will be stored with the ABViewForm.\n    */\n   formComponent() {\n      // not support in the form widget\n      return super.formComponent(\"fieldreadonly\");\n   }\n\n   detailComponent() {\n      const detailComponentSetting = super.detailComponent();\n\n      detailComponentSetting.common = () => {\n         return {\n            key: \"detailtext\",\n         };\n      };\n\n      return detailComponentSetting;\n   }\n};\n","const ABFieldImageCore = require(\"../../core/dataFields/ABFieldImageCore\");\n\nconst L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABFieldImage extends ABFieldImageCore {\n   constructor(values, object) {\n      super(values, object);\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   /**\n    * @function destroy\n    * On a destroy operation, ask if the user wants to keep the related images.\n    */\n   async destroy() {\n      return new Promise((resolve, reject) => {\n         // verify we have been .save()d before:\n         if (this.id) {\n            // Ask the user what to do about the existing images:\n            webix.confirm({\n               title: L(\"Keep Images?\"),\n               message: L(\"Do you want to keep the images referenced by {0}?\", [\n                  this.label,\n               ]),\n               callback: async (result) => {\n                  // update this setting so the server can respond correctly in\n                  // ABFieldImage.migrateDrop()\n                  this.settings.removeExistingData = result ? 0 : 1;\n\n                  try {\n                     await this.save();\n\n                     // TODO: a reminder that you still got alot on the server to do!\n                     webix.alert({\n                        title: \"!! TODO !!\",\n                        text:\n                           \"ABFieldImage.destroy(): Tell a Developer to actually pay attention to this!\",\n                     });\n\n                     await super.destroy();\n\n                     resolve();\n                  } catch (err) {\n                     reject(err);\n                  }\n               },\n            });\n         } else {\n            resolve(); // nothing to do really\n         }\n      });\n   }\n\n   ///\n   /// Working with Actual Object Values:\n   ///\n\n   idCustomContainer(obj, formId) {\n      // if formId is passed the field is in a form view not a grid and\n      // we won't have the obj and each time this\n      // field is in a form it will conflict with the last one rendered\n      if (formId) {\n         return `${this.columnName.replace(/ /g, \"_\")}-${formId}-image`;\n      } else {\n         return `${this.columnName.replace(/ /g, \"_\")}-${obj.id}-image`;\n      }\n   }\n\n   // return the grid column header definition for this instance of ABFieldImage\n   columnHeader(options) {\n      options = options || {};\n\n      const config = super.columnHeader(options);\n      const field = this;\n\n      config.editor = false; // 'text';  // '[edit_type]'   for your unique situation\n      // config.sort   = 'string' // '[sort_type]'   for your unique situation\n\n      let containerHeight = \"100%\";\n      let imageHeight = \"100%\";\n      let width = \"100%\";\n      let imageSrcHeight = \"100%\";\n      if (field.settings.useWidth) {\n         config.width = field.settings.imageWidth || 100;\n         const heightVal =\n            field.settings.useHeight && field.settings.imageHeight\n               ? field.settings.imageHeight + 20\n               : 80;\n         containerHeight = `${heightVal}px`;\n         width = `${field.settings.imageWidth || 100}px`;\n         imageHeight =\n            field.settings.useHeight && field.settings.imageHeight\n               ? field.settings.imageHeight\n               : 80;\n         imageHeight = `${imageHeight}px`;\n         imageSrcHeight =\n            field.settings.useHeight && field.settings.imageHeight\n               ? field.settings.imageHeight\n               : 60;\n         imageSrcHeight = `${imageSrcHeight}px`;\n      } else if (options.width) {\n         config.width = options.width || 100;\n         width = `${options.width || 100}px`;\n         imageHeight = options.width;\n         imageHeight = `${imageHeight}px`;\n         imageSrcHeight = options.width;\n         imageSrcHeight = `${imageSrcHeight}px`;\n      }\n      if (\n         field.settings.useHeight &&\n         field.settings.imageHeight &&\n         field.settings.imageHeight != \"NaN\"\n      ) {\n         config.height = field.settings.imageHeight || 0;\n         containerHeight = parseInt(config.height) + 20;\n         containerHeight = `${containerHeight}px`;\n         imageHeight = parseInt(config.height);\n         imageHeight = `${imageHeight}px`;\n         imageSrcHeight = parseInt(config.height);\n         imageSrcHeight = `${imageSrcHeight}px`;\n      }\n\n      const editable = options.editable;\n\n      // populate our default template:\n      // debugger;\n      config.template = (obj) => {\n         if (obj.$group) return obj[this.columnName];\n\n         const widthStyle = `width: ${width}; height: ${containerHeight}`;\n\n         const imageStyle = `width: ${width}; height: ${imageHeight}`;\n\n         const imgDiv = [\n            `<div class=\"ab-image-data-field\" style=\"float: left; ${widthStyle}\">`,\n            `<div class=\"webix_view ab-image-holder\" style=\"${imageStyle}\">`,\n            '<div class=\"webix_template\">',\n            this.imageTemplate(obj, {\n               editable: editable,\n               height: imageSrcHeight,\n               width: width,\n            }),\n            \"</div>\",\n            \"</div>\",\n            \"</div>\",\n         ].join(\"\");\n\n         return imgDiv;\n      };\n\n      return config;\n   }\n\n   /*\n    * @function customDisplay\n    * perform any custom display modifications for this field.\n    * @param {object} row is the {name=>value} hash of the current row of data.\n    * @param {App} App the shared ui App object useful more making globally\n    *\t\t\t\t\tunique id references.\n    * @param {HtmlDOM} node  the HTML Dom object for this field's display.\n    * @param {object} options - {\n    * \t\teditable {Bool}   where or not this field is currently editable\n    * \t\tformId {string}   the id of the presenting form if any\n    * }\n    */\n   customDisplay(row, App, node, options) {\n      // sanity check.\n      if (!node) {\n         return;\n      }\n      const L = App.Label;\n\n      options = options || {};\n\n      const idBase = App.unique(this.idCustomContainer(row, options.formId));\n\n      // safety check:\n      // webix seems to crash if you specify a .container that doesn't exists:\n      // Note: when the template is first created, we don't have App.unique()\n      const parentContainer = node.querySelector(\".ab-image-holder\");\n      if (parentContainer) {\n         parentContainer.innerHTML = \"\";\n         // parentContainer.id = idBase;\t// change it to the unique one.\n\n         let imgHeight = 0;\n         if (this.settings.useHeight) {\n            imgHeight = parseInt(this.settings.imageHeight) || imgHeight;\n         }\n\n         let imgWidth = 0;\n         if (this.settings.useWidth) {\n            imgWidth = parseInt(this.settings.imageWidth) || imgWidth;\n         }\n\n         if (options.height) imgHeight = options.height;\n\n         if (options.width) imgWidth = options.width;\n         //// TODO: actually pay attention to the height and width when\n         //// displaying the images.\n\n         // use a webix component for displaying the content.\n         // do this so I can use the progress spinner\n         const webixContainer = webix.ui({\n            view: \"template\",\n            css: \"ab-image-holder\",\n            // id: ids.container,\n            container: parentContainer,\n\n            template: this.imageTemplate(row, {\n               editable: options.editable,\n               height: imgHeight ? imgHeight + \"px\" : 0,\n               width: imgWidth ? imgWidth + \"px\" : 0,\n            }),\n\n            borderless: true,\n            height: imgHeight,\n            width: imgWidth,\n         });\n         webix.extend(webixContainer, webix.ProgressBar);\n\n         ////\n         //// Prepare the Uploader\n         ////\n\n         if (!options.editable) {\n            const domNode = parentContainer.querySelector(\".delete-image\");\n            if (domNode) domNode.style.display = \"none\";\n\n            return;\n         }\n\n         const url = this.urlUpload();\n\n         const uploader = webix.ui({\n            view: \"uploader\",\n            // id:ids.uploader,\n            apiOnly: true,\n            upload: url,\n            inputName: \"file\",\n            multiple: false,\n            // formData:{\n            // \tappKey:application.name,\n            // \tpermission:actionKey,\n            // \tisWebix:true,\n            // \timageParam:'upload'\n            // },\n            on: {\n               // when a file is added to the uploader\n               onBeforeFileAdd: function (item) {\n                  node.classList.remove(\"webix_invalid\");\n                  node.classList.remove(\"webix_invalid_cell\");\n\n                  // verify file type\n                  const acceptableTypes = [\"jpg\", \"jpeg\", \"bmp\", \"png\", \"gif\"];\n                  const type = item.type.toLowerCase();\n                  if (acceptableTypes.indexOf(type) == -1) {\n                     webix.message(\n                        L(\"Only [{0}] images are supported\", [\n                           acceptableTypes.join(\", \"),\n                        ])\n                     );\n                     return false;\n                  }\n\n                  // start progress indicator\n                  webixContainer.showProgress({\n                     type: \"icon\",\n                     delay: 2000,\n                  });\n               },\n\n               // when upload is complete:\n               onFileUpload: async (item, response) => {\n                  webixContainer.hideProgress();\n                  this.showImage(response.data.uuid, node);\n\n                  // TODO: delete previous image from our OPsPortal service?\n\n                  const values = {};\n                  values[this.columnName] = response.data.uuid;\n\n                  // update just this value on our current object.model\n                  if (row.id) {\n                     try {\n                        await this.object.model().update(row.id, values);\n\n                        // update the client side data object as well so other data changes won't cause this save to be reverted\n                        if (\n                           $$(node) &&\n                           $$(node).getItem &&\n                           $$(node).getItem(row.id)\n                        ) {\n                           $$(node).updateItem(row.id, values);\n                        } else {\n                           // if you scroll the table the connection to the datatable is lost so we need to find it again\n                           const dataTable = document.querySelector(\n                              \".webix_dtable\"\n                           );\n                           if ($$(dataTable) && $$(dataTable).getItem(row.id))\n                              $$(dataTable).updateItem(row.id, values);\n                        }\n                     } catch (err) {\n                        node.classList.add(\"webix_invalid\");\n                        node.classList.add(\"webix_invalid_cell\");\n\n                        this.AB.notify.developer(err, {\n                           context:\n                              \"ABFieldImage.onFileUpload(): model.update(): error updating our entry\",\n                           field: this,\n                           row,\n                           values,\n                        });\n                     }\n                  }\n\n                  // update value in the form component\n                  this.setValue($$(node), values);\n               },\n\n               // if an error was returned\n               onFileUploadError: (item, response) => {\n                  this.AB.notify.developer(new Error(\"Error uploading image\"), {\n                     context: \"ABFieldImage. uploader. onFileUploadError():\",\n                     field: this,\n                     response,\n                  });\n                  webixContainer.hideProgress();\n               },\n            },\n         });\n         uploader.addDropZone(webixContainer.$view);\n\n         // store upload id into html element (it will be used in .customEdit)\n         node.dataset[\"uploaderId\"] = uploader.config.id;\n\n         // if we are working in a datagrid we need to add a click event to\n         // check if the user is clicking on the delete button\n         if (node.className == \"webix_cell\") {\n            node.addEventListener(\"click\", (e) => {\n               if (e.target.className.indexOf(\"delete-image\") > -1) {\n                  this.deleteImage = true;\n               }\n            });\n         }\n      }\n   }\n\n   /*\n    * @function customEdit\n    *\n    * @param {object} row is the {name=>value} hash of the current row of data.\n    * @param {App} App the shared ui App object useful more making globally\n    *\t\t\t\t\tunique id references.\n    * @param {HtmlDOM} node  the HTML Dom object for this field's display.\n    */\n   customEdit(row, App, node, id, evt) {\n      if (\n         (evt && evt.target.className.indexOf(\"delete-image\") > -1) ||\n         this.deleteImage\n      ) {\n         delete this.deleteImage;\n         if (!row.removeDefaultImage) {\n            row.removeDefaultImage = [];\n         }\n         row.removeDefaultImage[this.columnName] = true;\n\n         // Ask the user if they really want to delete the photo\n         webix.confirm({\n            title: L(\"Are you sure you want to remove this image?\"),\n            callback: async (result) => {\n               const confirmDelete = result ? 1 : 0;\n               if (confirmDelete) {\n                  // update just this value on our current object.model\n                  const values = {};\n                  values[this.columnName] = \"\"; // removing the reference to the image here\n\n                  try {\n                     await this.object.model().update(row.id, values);\n\n                     // update the client side data object as well so other data changes won't cause this save to be reverted\n                     if ($$(node) && $$(node).updateItem)\n                        $$(node).updateItem(row.id, values);\n\n                     // update value in the form component\n                     this.setValue($$(node), values);\n                  } catch (err) {\n                     node.classList.add(\"webix_invalid\");\n                     node.classList.add(\"webix_invalid_cell\");\n\n                     this.AB.notify.developer(err, {\n                        context:\n                           \"ABFieldImage: customEdit(): Error updating our entry\",\n                        field: this,\n                        row: row,\n                        values: values,\n                     });\n                  }\n               }\n            },\n         });\n      } else {\n         const uploaderId = node.dataset[\"uploaderId\"],\n            uploader = $$(uploaderId);\n\n         if (uploader && uploader.fileDialog)\n            uploader.fileDialog({ rowid: row.id });\n      }\n\n      return false;\n   }\n\n   /*\n    * @funciton formComponent\n    * returns a drag and droppable component that is used on the UI\n    * interface builder to place form components related to this ABField.\n    *\n    * an ABField defines which form component is used to edit it's contents.\n    * However, what is returned here, needs to be able to create an instance of\n    * the component that will be stored with the ABViewForm.\n    */\n   formComponent() {\n      return super.formComponent(\"fieldcustom\");\n   }\n\n   detailComponent() {\n      const detailComponentSetting = super.detailComponent();\n\n      detailComponentSetting.common = () => {\n         return {\n            key: \"detailimage\",\n         };\n      };\n\n      return detailComponentSetting;\n   }\n\n   imageTemplate(obj, options) {\n      options = options || {};\n      options.height = options.height || \"100%\";\n      options.width = options.width || \"100%\";\n\n      // deault view is icon:\n      let iconDisplay = \"\";\n      let imageDisplay = \"display:none;\";\n      let imageURL = \"\";\n\n      let value = \"\";\n      let isRemoveDefaultImage = false;\n      if (obj[this.columnName]) {\n         value = obj[this.columnName];\n      }\n      if (obj.removeDefaultImage) {\n         if (obj.removeDefaultImage[this.columnName]) {\n            isRemoveDefaultImage = obj.removeDefaultImage[this.columnName];\n         }\n      }\n\n      if (value) {\n         iconDisplay = \"display:none;\";\n         imageDisplay = \"\";\n         imageURL = `background-image:url('${this.urlImage(value)}');`;\n      } else {\n         if (this.settings.useDefaultImage && !isRemoveDefaultImage) {\n            iconDisplay = \"display:none;\";\n            imageDisplay = \"\";\n            imageURL = `background-image:url('${this.urlImage(\n               this.settings.defaultImageUrl\n            )}');`;\n         }\n      }\n\n      let html = [\n         `<div class=\"image-data-field-icon\" style=\"${iconDisplay}\">#drag#</div>` +\n            `<div class=\"image-data-field-image\" style=\"${imageDisplay} width:${options.width}; height:${options.height}; ${imageURL}\">#remove#</div>`,\n      ].join(\"\");\n\n      html = html.replace(\n         \"#drag#\",\n         options.editable\n            ? `<div>${L(\"Drag and drop or click here\")}</div>`\n            : \"\"\n      );\n      html = html.replace(\n         \"#remove#\",\n         options.editable\n            ? `<a style=\"${imageDisplay}\" class=\"ab-delete-photo\" href=\"javascript:void(0);\"><i class=\"fa fa-times delete-image\"></i></a>`\n            : \"\"\n      );\n\n      return html;\n   }\n\n   showImage(uuid, node) {\n      const parentContainer = node.querySelector(\".ab-image-holder\");\n      if (parentContainer) {\n         parentContainer.querySelector(\".image-data-field-icon\").style.display =\n            \"none\";\n         const image = parentContainer.querySelector(\".image-data-field-image\");\n         image.style.display = \"\";\n         image.style.backgroundImage = `url('${this.urlImage(uuid)}')`;\n         image.setAttribute(\"image-uuid\", uuid);\n      }\n   }\n\n   getValue(item, rowData) {\n      const image = item.$view.querySelector(\".image-data-field-image\");\n      return image.getAttribute(\"image-uuid\");\n   }\n\n   setValue(item, rowData) {\n      if (!item) return;\n\n      const domNode = item.$view;\n      if (!domNode) return;\n\n      let val = null;\n      if (rowData) {\n         val = this.dataValue(rowData);\n\n         // if (val == null) {\n         // \t// assume they just sent us a single value\n         // \tval = rowData;\n         // }\n      }\n\n      const imageIcon = domNode.querySelector(\".image-data-field-icon\");\n      if (imageIcon) imageIcon.style.display = val ? \"none\" : \"\";\n\n      const image = domNode.querySelector(\".image-data-field-image\");\n      if (image) {\n         const imageDeleteIcon = image.querySelector(\".ab-delete-photo\");\n         if (imageDeleteIcon)\n            imageDeleteIcon.style.display = val ? \"block\" : \"none\";\n\n         image.style.display = val ? \"block\" : \"none\";\n\n         if (val) {\n            image.style.backgroundImage = `url('${this.urlImage(val)}')`;\n            image.setAttribute(\"image-uuid\", val);\n         } else {\n            image.removeAttribute(\"image-uuid\");\n         }\n      }\n   }\n\n   /**\n    * @method toBase64\n    *\n    * @param {Object} rowData\n    *\n    * @return {Promise} - {\n    * \t\tdata: string,\n    * \t\twidth: number,\n    * \t\theight: number\n    * }\n    */\n   toBase64(rowData) {\n      const promise = new Promise((resolve, reject) => {\n         if (!rowData[this.columnName]) return resolve(null);\n\n         const img = new Image();\n         img.crossOrigin = \"Anonymous\";\n         img.onerror = function (err) {\n            reject(err);\n         };\n         img.onload = function () {\n            const canvas = document.createElement(\"canvas\");\n            canvas.width = img.width;\n            canvas.height = img.height;\n            const ctx = canvas.getContext(\"2d\");\n            ctx.drawImage(img, 0, 0);\n            const dataURL = canvas.toDataURL();\n            const imageData = {\n               data: dataURL,\n               width: img.width,\n               height: img.height,\n            };\n            resolve(imageData);\n         };\n\n         img.src = this.urlImage(rowData[this.columnName]);\n      });\n      return promise;\n   }\n\n   /**\n    * @method urlImage()\n    * return the url to use to reference the image by it's id.\n    * @param {string} id\n    *        the file.uuid reference of this image.\n    * @return {string}\n    */\n   urlImage(id) {\n      return `/file/${id}`;\n   }\n\n   /**\n    * @method urlUpload()\n    * return the url for uploading a file.\n    * When used in a webix widget, the response is different than our normal\n    * API, so we can pass in a param to indicate a response compatible with\n    * webix.\n    * @param {bool} isWebix\n    *        Is this url being used by a webix component?\n    * @return {string}\n    */\n   urlUpload(isWebix = true) {\n      return `/file/upload/${this.object.id}/${this.id}/${isWebix ? \"1\" : \"0\"}`;\n   }\n};\n","const ABFieldJsonCore = require(\"../../core/dataFields/ABFieldJsonCore\");\n\nmodule.exports = class ABFieldJson extends ABFieldJsonCore {\n   // constructor(values, object) {\n   //    super(values, object);\n   // }\n\n   ///\n   /// Working with Actual Object Values:\n   ///\n\n   // return the grid column header definition for this instance of ABFieldJson\n   columnHeader(options) {\n      const config = super.columnHeader(options);\n\n      // config.editor = null; // read only for now\n      config.editor = \"text\";\n      config.css = \"textCell\";\n\n      // when called by ABViewFormCustom, will need a .template() fn.\n      // currently we don't need to return anything so ...\n      config.template = () => \"\";\n\n      return config;\n   }\n\n   /*\n    * @funciton formComponent\n    * returns a drag and droppable component that is used on the UI\n    * interface builder to place form components related to this ABField.\n    *\n    * an ABField defines which form component is used to edit it's contents.\n    * However, what is returned here, needs to be able to create an instance of\n    * the component that will be stored with the ABViewForm.\n    */\n   formComponent() {\n      // read-only for now\n      return super.formComponent(\"fieldreadonly\");\n   }\n\n   detailComponent() {\n      const detailComponentSetting = super.detailComponent();\n\n      detailComponentSetting.common = () => {\n         return {\n            key: \"detailtext\",\n         };\n      };\n\n      return detailComponentSetting;\n   }\n};\n","const ABFieldListCore = require(\"../../core/dataFields/ABFieldListCore\");\n\nconst L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABFieldList extends ABFieldListCore {\n   constructor(values, object) {\n      super(values, object);\n\n      // this._Selectivity = new ABFieldSelectivity(values, object);\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   save() {\n      return super.save().then(() => {\n         // Now we want to clear out any entries that had values == to item removed from our list:\n         if (this.pendingDeletions.length) {\n            const model = this.object.model();\n\n            if (this.settings.isMultiple == true) {\n               // find all the entries that have one of the deleted values:\n               // use Promise to prevent issues with data being loaded before it is deleted on client side\n               return new Promise((resolve, reject) => {\n                  let numDone = 0;\n                  let numToDo = 0;\n\n                  model\n                     .findAll({})\n                     .then((list) => {\n                        list = list.data || list;\n\n                        // for each list item\n                        list.forEach((item) => {\n                           if (Array.isArray(item[this.columnName])) {\n                              // get fields not in pendingDeletions\n                              let remainingFields = item[\n                                 this.columnName\n                              ].filter((i) => {\n                                 return (\n                                    this.pendingDeletions.indexOf(i.id) == -1\n                                 );\n                              });\n\n                              if (\n                                 remainingFields.length !=\n                                 item[this.columnName].length\n                              ) {\n                                 numToDo++;\n\n                                 // update value to new field list\n                                 if (remainingFields.length == 0) {\n                                    remainingFields = \"\";\n                                 }\n                                 const value = {};\n                                 value[this.columnName] = remainingFields;\n                                 model.update(item.id, value).then(() => {\n                                    // if ($$(node) && $$(node).updateItem)\n                                    //    $$(node).updateItem(value.id, value);\n                                    numDone++;\n                                    if (numDone >= numToDo) {\n                                       resolve();\n                                    }\n                                 });\n                              }\n                           }\n                        });\n                        if (numToDo == 0) {\n                           resolve();\n                        }\n                     })\n                     .catch(reject);\n               });\n            } else {\n               // find all the entries that have one of the deleted values:\n               const where = {};\n               where[this.columnName] = this.pendingDeletions;\n               return new Promise((resolve, reject) => {\n                  let numDone = 0;\n\n                  model\n                     .findAll(where)\n                     .then((list) => {\n                        // make sure we just work with the { data:[] } that was returned\n                        list = list.data || list;\n\n                        // for each one, set the value to ''\n                        // NOTE: jQuery ajax routines filter out null values, so we can't\n                        // set them to null. :(\n                        // const numDone = 0;\n                        const value = {};\n                        value[this.columnName] = \"\";\n\n                        list.forEach((item) => {\n                           model.update(item.id, value).then(() => {\n                              numDone++;\n                              if (numDone >= list.length) {\n                                 resolve();\n                              }\n                           });\n                        });\n                        if (list.length == 0) {\n                           resolve();\n                        }\n                     })\n                     .catch(reject);\n               });\n            }\n         }\n      });\n   }\n\n   isValid() {\n      const validator = super.isValid();\n\n      // validator.addError('columnName', L('ab.validation.object.name.unique', 'Field columnName must be unique (#name# already used in this Application)').replace('#name#', this.name) );\n\n      return validator;\n   }\n\n   ///\n   /// Working with Actual Object Values:\n   ///\n\n   // return the grid column header definition for this instance of ABFieldList\n   columnHeader(options) {\n      options = options || {};\n\n      const config = super.columnHeader(options);\n      const field = this;\n      const App = field.AB._App;\n\n      var formClass = \"\";\n      var placeHolder = \"\";\n      if (options.editable) {\n         formClass = \" form-entry\";\n         placeHolder = `<span style='color: #CCC; padding: 0 5px;'>${L(\n            \"Select item\"\n         )}</span>`;\n      }\n      var isRemovable = options.editable && !this.settings.required;\n\n      config.editFormat = (value) => {\n         return this.editFormat(value);\n      };\n      config.editParse = (value) => {\n         return this.editParse(value);\n      };\n\n      config.template = (rowData) => {\n         let selectedData = rowData[this.columnName];\n         if (selectedData == null) return \"\";\n         if (this.settings.isMultiple) {\n            selectedData = _getSelectedOptions(this, rowData);\n         }\n         var values = [];\n         values.push('<div class=\"badgeContainer\">');\n         let hasCustomColor = \"\";\n         let optionHex = \"\";\n         if (\n            selectedData &&\n            Array.isArray(selectedData) &&\n            selectedData.length\n         ) {\n            selectedData.forEach((val) => {\n               if (this.settings.hasColors && val.hex) {\n                  hasCustomColor = \"hascustomcolor\";\n                  optionHex = `background: ${val.hex};`;\n               }\n               if (val.text) {\n                  values.push(\n                     `<div style=\"${optionHex}\" class='webix_multicombo_value ${hasCustomColor}'><span>${val.text}</span><!-- span data-uuid=\"${val.id}\" class=\"webix_multicombo_delete\" role=\"button\" aria-label=\"Remove item\"></span --></div>`\n                  );\n               }\n            });\n            if (selectedData.length > 1) {\n               values.push(\n                  `<span class=\"webix_badge selectivityBadge\">${selectedData.length}</span>`\n               );\n            }\n         } else if (selectedData) {\n            let selectedObj = selectedData;\n            if (typeof selectedData == \"string\") {\n               selectedObj = this.getItemFromVal(selectedData);\n            }\n            if (!selectedObj) return \"\";\n            if (this.settings.hasColors && selectedObj.hex) {\n               hasCustomColor = \"hascustomcolor\";\n               optionHex = `background: ${selectedObj.hex};`;\n            }\n            if (selectedObj.text) {\n               let clear = \"\";\n               if (options.editable && !this.settings.required) {\n                  clear = `<span class=\"webix_multicombo_delete clear-combo-value\" role=\"button\" aria-label=\"Remove item\"></span>`;\n               }\n               values.push(\n                  `<div style=\"${optionHex}\" class='webix_multicombo_value ${hasCustomColor}'>${clear}<span class=\"ellip\">${selectedObj.text}</span></div>`\n               );\n            }\n         } else {\n            return \"\";\n         }\n         values.push(\"</div>\");\n         return values.join(\"\");\n      };\n      config.editor = this.settings.isMultiple ? \"multiselect\" : \"combo\";\n      config.suggest = {\n         button: true,\n         data: this.settings.options.map(function (opt) {\n            return {\n               id: opt.id,\n               value: opt.text,\n               hex: opt.hex,\n            };\n         }),\n      };\n      if (this.settings.isMultiple) {\n         config.suggest.view = \"checksuggest\";\n      }\n\n      return config;\n   }\n\n   /*\n    * @function customDisplay\n    * perform any custom display modifications for this field.\n    * @param {object} row is the {name=>value} hash of the current row of data.\n    * @param {App} App the shared ui App object useful more making globally\n    *             unique id references.\n    * @param {HtmlDOM} node  the HTML Dom object for this field's display.\n    */\n   customDisplay(row, App, node, options) {\n      // sanity check.\n      if (!node) {\n         return;\n      }\n\n      options = options || {};\n\n      if (!node.querySelector) return;\n\n      var clearButton = node.querySelector(\n         \".selectivity-single-selected-item-remove\"\n      );\n      if (clearButton) {\n         clearButton.addEventListener(\"click\", (e) => {\n            e.stopPropagation();\n            var values = {};\n            values[this.columnName] = \"\";\n            this.object\n               .model()\n               .update(row.id, values)\n               .then(() => {\n                  // update the client side data object as well so other data changes won't cause this save to be reverted\n                  $$(node)?.updateItem?.(row.id, values);\n               })\n               .catch((err) => {\n                  node.classList.add(\"webix_invalid\");\n                  node.classList.add(\"webix_invalid_cell\");\n\n                  this.AB.notify.developer(err, {\n                     message: \"Error updating our entry.\",\n                     row: row,\n                     values: \"\",\n                     field: this.toObj(),\n                  });\n               });\n         });\n      }\n   }\n\n   /*\n    * @function customEdit\n    *\n    * @param {object} row is the {name=>value} hash of the current row of data.\n    * @param {App} App the shared ui App object useful more making globally\n    *             unique id references.\n    * @param {HtmlDOM} node  the HTML Dom object for this field's display.\n    */\n   // customEdit(row, App, node) {\n   //    return super.customEdit(row, App, node);\n   // }\n\n   /*\n    * @funciton formComponent\n    * returns a drag and droppable component that is used on the UI\n    * interface builder to place form components related to this ABField.\n    *\n    * an ABField defines which form component is used to edit it's contents.\n    * However, what is returned here, needs to be able to create an instance of\n    * the component that will be stored with the ABViewForm.\n    */\n   formComponent() {\n      // NOTE: what is being returned here needs to mimic an ABView CLASS.\n      // primarily the .common() and .newInstance() methods.\n      const formComponentSetting = super.formComponent();\n\n      // .common() is used to create the display in the list\n      formComponentSetting.common = () => {\n         return {\n            key: this.settings.isMultiple ? \"selectmultiple\" : \"selectsingle\",\n            settings: {\n               options: this.settings.options.map(function (opt) {\n                  return {\n                     id: opt.id,\n                     value: opt.text,\n                     hex: opt.hex,\n                  };\n               }),\n            },\n         };\n      };\n\n      return formComponentSetting;\n   }\n\n   detailComponent() {\n      const detailComponentSetting = super.detailComponent();\n\n      detailComponentSetting.common = () => {\n         return {\n            key: this.settings.isMultiple ? \"detailtext\" : \"detailtext\",\n         };\n      };\n\n      return detailComponentSetting;\n   }\n\n   editFormat(value) {\n      if (!value) return \"\";\n      let vals = [];\n      if (Array.isArray(value)) {\n         value.forEach((val) => {\n            if (typeof val == \"object\") {\n               vals.push(val.id);\n            } else {\n               let itemObj = this.getItemFromVal(val);\n               vals.push(itemObj.id);\n            }\n         });\n      } else {\n         if (typeof value == \"object\") {\n            vals.push(value.id);\n         } else {\n            let itemObj = this.getItemFromVal(value);\n            if (itemObj && itemObj.id) {\n               vals.push(itemObj.id);\n            }\n         }\n      }\n      return vals.join();\n   }\n\n   editParse(value) {\n      if (this.settings.isMultiple) {\n         let returnVals = [];\n         let vals = value.split(\",\");\n         vals.forEach((val) => {\n            returnVals.push(this.getItemFromVal(val));\n         });\n         return returnVals;\n      } else {\n         return value;\n      }\n   }\n\n   getItemFromVal(val) {\n      let item;\n      let options = this.options();\n      if (options.length > 1) {\n         options.forEach((option) => {\n            if (option.id == val) {\n               item = option;\n               return false;\n            }\n         });\n         return item;\n      } else {\n         return \"\";\n      }\n   }\n\n   getValue(item, rowData) {\n      return this.editParse(item.getValue());\n   }\n\n   getSelectedOptions(field, rowData = {}) {\n      let result = [];\n      if (rowData[this.columnName] != null) {\n         result = rowData[this.columnName];\n      } else if (rowData) {\n         if (Array.isArray(rowData)) {\n            result = rowData;\n         } else {\n            result.push(rowData);\n         }\n      }\n      if (result.length) {\n         if (typeof result == \"string\") result = JSON.parse(result);\n\n         // Pull text with current language\n         if (this.settings) {\n            result = (this.settings.options || []).filter((opt) => {\n               return (\n                  (result || []).filter((v) => (opt.id || opt) == (v.id || v))\n                     .length > 0\n               );\n            });\n         }\n      }\n\n      return result;\n   }\n\n   setValue(item, rowData) {\n      if (!item) return;\n\n      if (this.settings.isMultiple) {\n         // do we need anything here?\n      } else {\n         super.setValue(item, rowData);\n      }\n   }\n};\n\n// == Private methods ==\nfunction _getSelectedOptions(field, rowData = {}) {\n   let result = [];\n   if (rowData[field.columnName] != null) {\n      result = rowData[field.columnName];\n\n      if (typeof result == \"string\") result = JSON.parse(result);\n\n      // Pull text with current language\n      if (field.settings) {\n         result = (field.settings.options || []).filter((opt) => {\n            return (\n               (result || []).filter((v) => (opt.id || opt) == (v.id || v))\n                  .length > 0\n            );\n         });\n      }\n   }\n\n   return result;\n}\n","const ABFieldLongTextCore = require(\"../../core/dataFields/ABFieldLongTextCore\");\n\nmodule.exports = class ABFieldLongText extends ABFieldLongTextCore {\n   constructor(values, object) {\n      super(values, object);\n\n      /*\n\t\t{\n\t\t\tsettings: {\n\t\t\t\tdefault: 'string',\n\t\t\t\tsupportMultilingual: 1/0\n\t\t\t}\n\t\t}\n\t\t*/\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   isValid() {\n      const validator = super.isValid();\n\n      // validator.addError('columnName', L('ab.validation.object.name.unique', 'Field columnName must be unique (#name# already used in this Application)').replace('#name#', this.name) );\n\n      return validator;\n   }\n\n   ///\n   /// Working with Actual Object Values:\n   ///\n\n   // return the grid column header definition for this instance of ABFieldLongText\n   columnHeader(options) {\n      const config = super.columnHeader(options);\n\n      config.editor = \"text\"; // '[edit_type]'   for your unique situation\n      // config.sort = 'string' // '[sort_type]'   for your unique situation\n      config.template = (obj, common, value, col, ind) => {\n         return (value || \"\").toString().replace(/[<]/g, \"&lt;\");\n      };\n\n      return config;\n   }\n\n   /*\n    * @funciton formComponent\n    * returns a drag and droppable component that is used on the UI\n    * interface builder to place form components related to this ABField.\n    *\n    * an ABField defines which form component is used to edit it's contents.\n    * However, what is returned here, needs to be able to create an instance of\n    * the component that will be stored with the ABViewForm.\n    */\n   formComponent() {\n      // NOTE: what is being returned here needs to mimic an ABView CLASS.\n      // primarily the .common() and .newInstance() methods.\n      const formComponentSetting = super.formComponent();\n\n      // .common() is used to create the display in the list\n      formComponentSetting.common = () => {\n         return {\n            key: \"textbox\",\n            settings: {\n               type: \"multiple\",\n            },\n         };\n      };\n\n      return formComponentSetting;\n   }\n\n   detailComponent() {\n      const detailComponentSetting = super.detailComponent();\n\n      detailComponentSetting.common = () => {\n         return {\n            key: \"detailtext\",\n         };\n      };\n\n      return detailComponentSetting;\n   }\n\n   /**\n    * @method setValue\n    * this function uses for form component and mass update popup\n    * to get value of fields that apply custom editor\n    *\n    * @param {Object} item - Webix element\n    * @param {Object} rowData - data of row\n    *\n    * @return {Object}\n    */\n   setValue(item, rowData) {\n      super.setValue(item, rowData, \"\");\n   }\n};\n","const ABFieldNumberCore = require(\"../../core/dataFields/ABFieldNumberCore\");\n\nlet INIT_EDITOR = false;\n// {bool} INIT_EDITOR\n// Transition code between previous Framework and current.\n// we now need to wait until webix is declared or accessible globally.\n\nmodule.exports = class ABFieldNumber extends ABFieldNumberCore {\n   constructor(values, object) {\n      if (!INIT_EDITOR) {\n         // NOTE: if you need a unique [edit_type] by your returned config.editor above:\n         webix.editors.number = webix.extend(\n            {\n               // TODO : Validate number only\n            },\n            webix.editors.text\n         );\n         INIT_EDITOR = true;\n      }\n      super(values, object);\n   }\n\n   ///\n   /// Working with Actual Object Values:\n   ///\n\n   /**\n    * @method formComponent\n    * returns a drag and droppable component that is used on the UI\n    * interface builder to place form components related to this ABField.\n    *\n    * an ABField defines which form component is used to edit it's contents.\n    * However, what is returned here, needs to be able to create an instance of\n    * the component that will be stored with the ABViewForm.\n    */\n   // return the grid column header definition for this instance of ABFieldNumber\n   columnHeader(options) {\n      const config = super.columnHeader(options);\n\n      config.editor = \"number\"; // [edit_type] simple inline editing.\n\n      config.format = (d) => {\n         const rowData = {};\n         rowData[this.columnName] = d;\n\n         return this.format(rowData);\n      };\n\n      return config;\n   }\n\n   /**\n    * @method formComponent\n    * returns a drag and droppable component that is used on the UI\n    * interface builder to place form components related to this ABField.\n    *\n    * an ABField defines which form component is used to edit it's contents.\n    * However, what is returned here, needs to be able to create an instance of\n    * the component that will be stored with the ABViewForm.\n    */\n   formComponent() {\n      return super.formComponent(\"numberbox\");\n   }\n\n   detailComponent() {\n      const detailComponentSetting = super.detailComponent();\n\n      detailComponentSetting.common = () => {\n         return {\n            key: \"detailtext\",\n         };\n      };\n\n      return detailComponentSetting;\n   }\n};\n","/*\n * ABFieldSelectivity\n *\n * An ABFieldSelectivity defines a single unique Field/Column in a ABObject.\n *\n */\n\nconst ABField = require(\"./ABField\");\n\nconst defaultSettings = {\n   allowClear: true,\n   removeOnly: false,\n   readOnly: false,\n   showDropdown: true,\n   placeholder: \"\",\n   multiple: false,\n};\n\nconst ABFieldSelectivityDefaults = {\n   key: \"selectivity\",\n};\n\nmodule.exports = class ABFieldSelectivity extends ABField {\n   constructor(values, object, fieldDefaults = ABFieldSelectivityDefaults) {\n      super(values, object, fieldDefaults);\n   }\n\n   // return the default values for this DataField\n   static defaults() {\n      return {\n         key: \"selectivity\",\n         icon: \"bars\",\n         menuName: \"\",\n         description: \"\",\n      };\n   }\n\n   selectivityRender(domNode, settings, App, row) {\n      if (domNode == null) return;\n\n      const cypress = settings.dataCy || \"\";\n      domNode.setAttribute(\"data-cy\", cypress);\n\n      // setting up our specific settings:\n      settings = settings || {};\n      for (const dv in defaultSettings) {\n         if (settings[dv] === null) {\n            settings[dv] = null;\n         } else {\n            settings[dv] = settings[dv] || defaultSettings[dv];\n         }\n      }\n\n      if (\n         settings.multiple &&\n         settings.items &&\n         settings.data &&\n         settings.data.length\n      ) {\n         settings.data.forEach(function (d) {\n            settings.items.map(function (i) {\n               if (i.id == d.id) d.hex = i.hex;\n            });\n         });\n         settings[\"data\"] = this.prepareData(\n            settings[\"data\"],\n            settings.multiple\n         );\n      } else if (settings[\"data\"] == null || settings[\"data\"] == \"\") {\n         settings[\"data\"] = this.prepareData([], settings.multiple);\n      } else {\n         settings[\"data\"] = this.prepareData(\n            settings[\"data\"],\n            settings.multiple\n         );\n      }\n\n      // store the field id so we can look it up on click events later\n      settings[\"field\"] = this.id;\n\n      // Prevent render selectivity duplicate\n      if (domNode.selectivity != null) {\n         // Refresh selectivity settings\n         domNode.selectivity.setOptions(settings);\n\n         return;\n      }\n\n      settings.element = domNode;\n\n      // Render selectivity\n      let selectivityInput;\n      if (settings.multiple) {\n         if (settings.isUsers) {\n            settings.templates = {\n               multipleSelectedItem: function (options) {\n                  return `<span class=\"selectivity-multiple-selected-item ${\n                     options.highlighted ? \" highlighted\" : \"\"\n                  }\"\n\t\t\t\t\t\t\t\tstyle=\"background-color: #eee !important; color: #666 !important; box-shadow: inset 0px 1px 1px #333;\"\n\t\t\t\t\t\t\t\tdata-item-id=\"${options.uuid}\" data-field-id=\"${settings.field}\">\n\t\t\t\t\t\t\t\t<i class=\"fa fa-user\" style=\"color: #666; opacity: 0.6;\"></i> \n                        ${\n                           settings.additionalText\n                              ? settings.additionalText(options)\n                              : \"\"\n                        }\n\t\t\t\t\t\t\t\t${!settings.isLabelHidden ? options.text : \"\"}\n\t\t\t\t\t\t\t\t${\n                           options.removable\n                              ? ` <a class=\"selectivity-multiple-selected-item-remove\" style=\"color: #333;\"><i class=\"fa fa-remove\"></i></a>`\n                              : \"\"\n                        }\n\t\t\t\t\t\t\t</span>`;\n               },\n            };\n         } else {\n            settings.templates = {\n               multipleSelectedItem: function (options) {\n                  return `<span class=\"selectivity-multiple-selected-item ${\n                     options.highlighted ? \" highlighted\" : \"\"\n                  }\"\n\t\t\t\t\t\t\t\tstyle=\"background-color: ${options.hex} !important;\"\n\t\t\t\t\t\t\t\tdata-item-id=\"${options.uuid}\" data-field-id=\"${settings.field}\">\n                        ${\n                           settings.editPage\n                              ? ` <a class=\"selectivity-multiple-selected-item-edit\"><i class=\"fa fa-edit\"></i></a>`\n                              : \"\"\n                        }\n                        ${\n                           settings.additionalText\n                              ? settings.additionalText(options)\n                              : \"\"\n                        }\n                        ${!settings.isLabelHidden ? options.text : \"\"}\n                        ${\n                           options.removable\n                              ? ` <a class=\"selectivity-multiple-selected-item-remove\"><i class=\"fa fa-remove\"></i></a>`\n                              : \"\"\n                        }\n\t\t\t\t\t\t\t</span>`;\n               },\n            };\n         }\n         selectivityInput = new Selectivity.Inputs.Multiple(settings);\n\n         domNode.selectivity = selectivityInput;\n         this.selectivitySetBadge(domNode, App, row);\n      } else {\n         settings.templates = {\n            singleSelectedItem: function (options) {\n               return `<span class=\"selectivity-single-selected-item\" data-item-id=\"${\n                  options.uuid\n               }\" data-field-id=\"${settings.field}\">\n\t\t\t\t\t\t\t${\n                        settings.editPage\n                           ? '<a class=\"selectivity-single-selected-item-edit\"><i class=\"fa fa-edit\"></i></a>'\n                           : \"\"\n                     }\n                     ${\n                        settings.additionalText\n                           ? settings.additionalText(options)\n                           : \"\"\n                     }\n                     ${!settings.isLabelHidden ? options.text : \"\"}\n                     ${\n                        options.removable\n                           ? '<a class=\"selectivity-single-selected-item-remove\"><i class=\"fa fa-remove\"></i></a>'\n                           : \"\"\n                     }\n\t\t\t\t\t\t</span>`;\n            },\n         };\n\n         selectivityInput = new Selectivity.Inputs.Single(settings);\n         domNode.selectivity = selectivityInput;\n      }\n\n      if (settings.editPage) {\n         const trigerEditPageEvent = () => {\n            const instance = this;\n            const editMenus = document.querySelectorAll(\n               \".selectivity-single-selected-item-edit, .selectivity-multiple-selected-item-edit\"\n            );\n            for (let i = 0; i < editMenus.length; i++) {\n               const eMenu = editMenus[i];\n               if (eMenu && !eMenu.__hasClickEvent) {\n                  eMenu.addEventListener(\n                     \"click\",\n                     function (e) {\n                        e.stopPropagation();\n                        e.preventDefault();\n\n                        const parentElm = this.parentElement;\n                        if (!parentElm) return;\n\n                        const rowId = parentElm.getAttribute(\"data-item-id\");\n                        if (!rowId) return;\n\n                        const fieldId = parentElm.getAttribute(\"data-field-id\");\n                        if (!fieldId) return;\n\n                        const thisField = instance.object.fieldByID(fieldId);\n                        if (!thisField) return;\n\n                        thisField.emit(\"editPage\", rowId);\n                     },\n                     true\n                  );\n                  eMenu.__hasClickEvent = true;\n               }\n            }\n         };\n\n         setTimeout(() => {\n            trigerEditPageEvent();\n\n            domNode.addEventListener(\"change\", () => {\n               trigerEditPageEvent();\n            });\n         }, 500);\n      }\n\n      // WORKAROUND : remove caret icon of selectivity\n      if (settings.readOnly) {\n         const caretElems = domNode.getElementsByClassName(\"selectivity-caret\");\n         for (let i = 0; i < caretElems.length; i++) {\n            const caretElm = caretElems[i];\n            if (caretElm) {\n               caretElm.parentNode.removeChild(caretElm);\n            }\n         }\n      }\n\n      // remember our settings values\n      this.selectivitySettings = settings;\n   }\n\n   selectivityGet(domNode) {\n      if (domNode && domNode.selectivity) {\n         if (this.selectivitySettings && this.selectivitySettings.multiple) {\n            // on a multiple select, return an array of results, or empty array\n            return domNode.selectivity.getData() || [];\n         } else {\n            // if a single select, return the object or null\n            return domNode.selectivity.getData() || null;\n         }\n      } else {\n         if (this.selectivitySettings && this.selectivitySettings.multiple)\n            return [];\n         else return null;\n      }\n   }\n\n   selectivitySet(domNode, data) {\n      if (!domNode || !domNode.selectivity) return;\n\n      data = this.prepareData(data, domNode.selectivity.options.multiple);\n\n      if (\n         (Array.isArray(data) && data[0]) || // Check Array\n         (data && data.id)\n      )\n         // Check a object\n         domNode.selectivity.setData(data);\n      else domNode.selectivity.clear();\n   }\n\n   selectivityDestroy(domNode) {\n      if (domNode && domNode.selectivity) {\n         domNode.selectivity.destroy();\n\n         delete domNode.selectivity;\n      }\n   }\n\n   prepareData(data, multiple = true) {\n      if (!data && multiple) {\n         return [];\n      } else if (multiple && data && Array.isArray(data) && data.length == 0) {\n         return [];\n      } else if (!multiple && data && Array.isArray(data) && data.length == 0) {\n         return null;\n      } else if (!data && !multiple) {\n         return null;\n      }\n\n      if (typeof data == \"string\" && data.length > 0) {\n         try {\n            data = JSON.parse(data);\n         } catch (e) {\n            // not JSON parsable, so convert to\n            data = { id: data, text: data };\n         }\n      }\n\n      // if single select, then it should be object\n      if (!multiple && Array.isArray(data)) {\n         data = data[0];\n      } else if (multiple && !Array.isArray(data)) {\n         data = [data];\n      }\n\n      // check to see if id is present on each item\n      if (multiple) {\n         data.forEach((d) => {\n            if (!d.id && d.uuid) {\n               d.id = d.uuid;\n            }\n         });\n      } else {\n         if (!data.id && data.uuid) data.id = data.uuid;\n      }\n\n      if (data == null && multiple) {\n         data = [];\n      }\n\n      return data;\n   }\n\n   selectivitySetBadge(domNode) {\n      if (!domNode.clientHeight) return;\n      const innerHeight = domNode.clientHeight;\n      const outerHeight = domNode.parentElement.clientHeight;\n      if (innerHeight - outerHeight > 5) {\n         let count = 0;\n         let values = [];\n         if (domNode && domNode.selectivity)\n            values = domNode.selectivity.getValue() || [];\n\n         count = values.length;\n         if (count > 1) {\n            const badge = domNode.querySelector(\n               \".webix_badge.selectivityBadge\"\n            );\n            if (badge != null) {\n               badge.innerHTML = count;\n            } else {\n               const anchor = document.createElement(\"A\");\n               anchor.href = \"javascript:void(0);\";\n               // v2: this just updated the $height property for this row\n               // we don't do that anymore:\n               // anchor.addEventListener(\"click\", function () {\n               //    App.actions.onRowResizeAuto(row.id, innerHeight);\n               // });\n               const node = document.createElement(\"SPAN\");\n               const textnode = document.createTextNode(count);\n               node.classList.add(\"webix_badge\", \"selectivityBadge\");\n               node.appendChild(textnode);\n               anchor.appendChild(node);\n               domNode.appendChild(anchor);\n            }\n         }\n      }\n   }\n};\n","const ABFieldStringCore = require(\"../../core/dataFields/ABFieldStringCore\");\n\nmodule.exports = class ABFieldString extends ABFieldStringCore {\n   // constructor(values, object) {\n   //    super(values, object);\n\n   // {\n   //   settings: {\n   // \t  default: 'string',\n   // \t  supportMultilingual: 1/0\n   //   }\n   // }\n\n   // }\n\n   ///\n   /// Working with Actual Object Values:\n   ///\n\n   // return the grid column header definition for this instance of ABFieldString\n   columnHeader(options) {\n      const config = super.columnHeader(options);\n\n      config.editor = \"text\";\n      config.css = \"textCell\";\n      // config.sort   = 'string'\n      config.template = (obj, common, value /* , col, ind */) => {\n         // if this isn't part of a group header display the default format\n         if (!obj.$group) {\n            return (value || \"\").toString().replace(/[<]/g, \"&lt;\");\n         } else {\n            return \"\";\n         }\n      };\n\n      return config;\n   }\n\n   /**\n    * @method defaultValue\n    * insert a key=>value pair that represent the default value\n    * for this field.\n    * @param {obj} values a key=>value hash of the current values.\n    */\n   defaultValue(values) {\n      // if no default value is set, then don't insert a value.\n      if (!values[this.columnName]) {\n         // Set default string\n         if (this.settings.default) {\n            if (this.settings.default.indexOf(\"{uuid}\") >= 0) {\n               values[this.columnName] = this.AB.uuid();\n            } else {\n               values[this.columnName] = this.settings.default;\n            }\n         }\n      }\n   }\n\n   /**\n    * @method isValidData\n    * Parse through the given data and return an error if this field's\n    * data seems invalid.\n    * @param {obj} data  a key=>value hash of the inputs to parse.\n    * @param {OPValidator} validator  provided Validator fn\n    * @return {array}\n    */\n   isValidData(data, validator) {\n      super.isValidData(data, validator);\n\n      if (data && data[this.columnName]) {\n         const max_length = this.constructor.defaults().MAX_CHAR_LENGTH;\n\n         if (data[this.columnName].length > max_length) {\n            const L = this.AB.Label();\n            validator.addError(\n               this.columnName,\n               L(\"should NOT be longer than {0} characters\", [max_length])\n            );\n         }\n      }\n   }\n\n   /*\n    * @property isMultilingual\n    * does this field represent multilingual data?\n    * @return {bool}\n    */\n   get isMultilingual() {\n      return this.settings.supportMultilingual == 1;\n   }\n\n   /**\n    * @method formComponent\n    * returns a drag and droppable component that is used on the UI\n    * interface builder to place form components related to this ABField.\n    *\n    * an ABField defines which form component is used to edit it's contents.\n    * However, what is returned here, needs to be able to create an instance of\n    * the component that will be stored with the ABViewForm.\n    */\n   formComponent() {\n      // NOTE: what is being returned here needs to mimic an ABView CLASS.\n      // primarily the .common() and .newInstance() methods.\n      const formComponentSetting = super.formComponent();\n\n      // .common() is used to create the display in the list\n      formComponentSetting.common = () => {\n         return {\n            key: \"textbox\",\n            settings: {\n               type: \"single\",\n            },\n         };\n      };\n\n      return formComponentSetting;\n   }\n\n   detailComponent() {\n      const detailComponentSetting = super.detailComponent();\n\n      detailComponentSetting.common = () => {\n         return {\n            key: \"detailtext\",\n         };\n      };\n\n      return detailComponentSetting;\n   }\n\n   /**\n    * @method setValue\n    * this function uses for form component and mass update popup\n    * to get value of fields that apply custom editor\n    *\n    * @param {Object} item - Webix element\n    * @param {Object} rowData - data of row\n    *\n    * @return {Object}\n    */\n   setValue(item, rowData) {\n      super.setValue(item, rowData, \"\");\n   }\n};\n","const ABFieldTextFormulaCore = require(\"../../core/dataFields/ABFieldTextFormulaCore\");\n\nmodule.exports = class ABFieldTextFormula extends ABFieldTextFormulaCore {\n   // constructor(values, object) {\n   //    super(values, object);\n   // }\n\n   ///\n   /// Instance Methods\n   ///\n\n   // isValid() {\n   //    const validator = super.isValid();\n\n   //    // validator.addError('columnName', L('ab.validation.object.name.unique', 'Field columnName must be unique (#name# already used in this Application)').replace('#name#', this.name) );\n\n   //    return validator;\n   // }\n\n   ///\n   /// Working with Actual Object Values:\n   ///\n\n   // return the grid column header definition for this instance of ABFieldTextFormula\n   columnHeader(options) {\n      const config = super.columnHeader(options);\n\n      config.editor = null; // read only\n      config.css = \"textCell\";\n      config.template = (rowData) => {\n         // if this isn't part of a group header display the default format\n         if (!rowData.$group) {\n            return this.format(rowData);\n         } else {\n            return \"\";\n         }\n      };\n\n      return config;\n   }\n\n   /*\n    * @function customDisplay\n    * perform any custom display modifications for this field.\n    * @param {object} row is the {name=>value} hash of the current row of data.\n    * @param {App} App the shared ui App object useful more making globally\n    *\t\t\t\t\tunique id references.\n    * @param {HtmlDOM} node  the HTML Dom object for this field's display.\n    */\n   customDisplay(/* row, App, node, options */) {}\n\n   /*\n    * @funciton formComponent\n    * returns a drag and droppable component that is used on the UI\n    * interface builder to place form components related to this ABField.\n    *\n    * an ABField defines which form component is used to edit it's contents.\n    * However, what is returned here, needs to be able to create an instance of\n    * the component that will be stored with the ABViewForm.\n    */\n   formComponent() {\n      // not support in the form widget\n      return null;\n   }\n\n   detailComponent() {\n      const detailComponentSetting = super.detailComponent();\n\n      detailComponentSetting.common = () => {\n         return {\n            key: \"detailtext\",\n         };\n      };\n\n      return detailComponentSetting;\n   }\n};\n","const ABFieldTreeCore = require(\"../../core/dataFields/ABFieldTreeCore\");\n\nconst L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABFieldTree extends ABFieldTreeCore {\n   // constructor(values, object) {\n   //    super(values, object);\n   // }\n\n   ///\n   /// Instance Methods\n   ///\n\n   // isValid() {\n   //    const validator = super.isValid();\n\n   //    // validator.addError('columnName', L('ab.validation.object.name.unique', 'Field columnName must be unique (#name# already used in this Application)').replace('#name#', this.name) );\n\n   //    return validator;\n   // }\n\n   ///\n   /// Working with Actual Object Values:\n   ///\n\n   idCustomContainer(obj) {\n      return \"#columnName#-#id#-tree\"\n         .replace(\"#id#\", obj.id)\n         .replace(\"#columnName#\", this.columnName.replace(/ /g, \"_\"));\n   }\n\n   // return the grid column header definition for this instance of ABFieldTree\n   columnHeader(options) {\n      options = options || {};\n\n      const config = super.columnHeader(options);\n      const field = this;\n\n      let formClass = \"\";\n      let placeHolder = \"\";\n      if (options.isForm) {\n         formClass = \" form-entry\";\n         placeHolder =\n            \"<span style='color: #CCC; padding: 0 5px;'>\" +\n            L(\"Select items\") +\n            \"</span>\";\n      }\n\n      const width = options.width;\n\n      config.template = (obj) => {\n         if (obj.$group) return obj[field.columnName];\n\n         const branches = [];\n         let selectOptions = this.AB.cloneDeep(field.settings.options);\n         selectOptions = new webix.TreeCollection({\n            data: selectOptions,\n         });\n\n         let values = obj;\n         if (obj[field.columnName] != null) {\n            values = obj[field.columnName];\n         }\n\n         selectOptions.data.each(function (obj) {\n            if (\n               typeof values.indexOf != \"undefined\" &&\n               values.indexOf(obj.id) != -1\n            ) {\n               let html = \"\";\n\n               let rootid = obj.id;\n               while (this.getParentId(rootid)) {\n                  selectOptions.data.each(function (par) {\n                     if (selectOptions.data.getParentId(rootid) == par.id) {\n                        html = par.text + \": \" + html;\n                     }\n                  });\n                  rootid = this.getParentId(rootid);\n               }\n\n               html += obj.text;\n               branches.push(html);\n            }\n         });\n\n         const myHex = \"#4CAF50\";\n         let nodeHTML = \"\";\n         nodeHTML += \"<div class='list-data-values'>\";\n         if (branches.length == 0) {\n            nodeHTML += placeHolder;\n         } else {\n            branches.forEach(function (item) {\n               nodeHTML +=\n                  '<span class=\"selectivity-multiple-selected-item rendered\" style=\"background-color:' +\n                  myHex +\n                  ' !important;\">' +\n                  item +\n                  \"</span>\";\n            });\n         }\n         nodeHTML += \"</div>\";\n\n         // field.setBadge(node, App, row);\n\n         if (width) {\n            return (\n               '<div style=\"margin-left: ' +\n               width +\n               'px;\" class=\"list-data-values' +\n               formClass +\n               '\">' +\n               nodeHTML +\n               \"</div>\"\n            );\n         } else {\n            return (\n               '<div class=\"list-data-values' +\n               formClass +\n               '\">' +\n               nodeHTML +\n               \"</div>\"\n            );\n         }\n      };\n\n      return config;\n   }\n\n   /*\n    * @function customDisplay\n    * perform any custom display modifications for this field.\n    * @param {object} row is the {name=>value} hash of the current row of data.\n    * @param {App} App the shared ui App object useful more making globally\n    *\t\t\t\t\tunique id references.\n    * @param {HtmlDOM} node  the HTML Dom object for this field's display.\n    */\n   customDisplay(row, App, node, options) {\n      // sanity check.\n      if (!node) {\n         return;\n      }\n\n      options = options || {};\n\n      const field = this;\n\n      if (options.isForm) {\n         if (!row || row.length == 0) {\n            node.innerHTML =\n               \"<div class='list-data-values form-entry'><span style='color: #CCC; padding: 0 5px;'>\" +\n               L(\"Select items\") +\n               \"</span></div>\";\n            return;\n         }\n\n         const branches = [];\n         options = this.AB.cloneDeep(field.settings.options);\n         options = new webix.TreeCollection({\n            data: options,\n         });\n\n         let values = row;\n         if (row[field.columnName] != null) {\n            values = row[field.columnName];\n         }\n\n         options.data.each(function (obj) {\n            if (\n               typeof values.indexOf != \"undefined\" &&\n               values.indexOf(obj.id) != -1\n            ) {\n               let html = \"\";\n\n               let rootid = obj.id;\n               while (this.getParentId(rootid)) {\n                  options.data.each(function (par) {\n                     if (options.data.getParentId(rootid) == par.id) {\n                        html = par.text + \": \" + html;\n                     }\n                  });\n                  rootid = this.getParentId(rootid);\n               }\n\n               html += obj.text;\n               branches.push(html);\n            }\n         });\n\n         const myHex = \"#4CAF50\";\n         let nodeHTML = \"\";\n         nodeHTML += \"<div class='list-data-values form-entry'>\";\n         branches.forEach(function (item) {\n            nodeHTML +=\n               '<span class=\"selectivity-multiple-selected-item rendered\" style=\"background-color:' +\n               myHex +\n               ' !important;\">' +\n               item +\n               \"</span>\";\n         });\n         nodeHTML += \"</div>\";\n\n         node.innerHTML = nodeHTML;\n      }\n\n      field.setBadge(node, App, row);\n   }\n\n   /*\n    * @function customEdit\n    *\n    * @param {object} row is the {name=>value} hash of the current row of data.\n    * @param {App} App the shared ui App object useful more making globally\n    *\t\t\t\t\tunique id references.\n    * @param {HtmlDOM} node  the HTML Dom object for this field's display.\n    */\n   customEdit(row, App, node, component) {\n      const idBase = App.unique(this.idCustomContainer(row));\n      const idPopup = `${idBase}-popup`;\n      const idTree = `${idBase}-tree`;\n      const view = $$(node);\n      const field = this;\n      const parentComponent = component;\n      let values = {};\n      let firstRender = true;\n\n      function getValues(field, row) {\n         let values = {};\n         if (\n            typeof field != \"undefined\" &&\n            typeof field.columnName != \"undefined\" &&\n            typeof row[field.columnName] != \"undefined\"\n         ) {\n            values = row[field.columnName];\n         }\n         return values;\n      }\n\n      function populateTree(field, vals) {\n         values = getValues(field, vals);\n\n         $$(idTree).blockEvent(); // prevents endless loop\n\n         const options = field.AB.cloneDeep(field.settings.options);\n         $$(idTree).clearAll();\n         $$(idTree).parse(options);\n         $$(idTree).refresh();\n         $$(idTree).uncheckAll();\n         $$(idTree).openAll();\n\n         if (values != null && values.length) {\n            values.forEach(function (id) {\n               if ($$(idTree).exists(id)) {\n                  $$(idTree).checkItem(id);\n                  const dom = $$(idTree).getItemNode(id);\n                  dom.classList.add(\"selected\");\n               }\n            });\n         }\n         $$(idTree).unblockEvent();\n      }\n\n      if ($$(idPopup)) {\n         $$(idPopup).show();\n         populateTree(this, row);\n      } else {\n         webix\n            .ui({\n               id: idPopup,\n               view: \"popup\",\n               width: 500,\n               height: 400,\n               on: {\n                  onShow: () => {\n                     if (firstRender == true) populateTree(this, row);\n\n                     firstRender = false;\n                  },\n               },\n               body: {\n                  id: idTree,\n                  view: \"tree\",\n                  css: \"ab-data-tree\",\n                  template: function (obj, common) {\n                     return (\n                        \"<label>\" +\n                        common.checkbox(obj, common) +\n                        \"&nbsp;\" +\n                        obj.text +\n                        \"</label>\"\n                     );\n                  },\n                  on: {\n                     onItemCheck: async function (id, value, event) {\n                        const dom = this.getItemNode(id);\n                        const tree = this;\n                        if (value == true) {\n                           dom.classList.add(\"selected\");\n                        } else {\n                           dom.classList.remove(\"selected\");\n                        }\n                        // works for the same-level children only\n                        // except root items\n                        if (this.getParentId(id)) {\n                           tree.blockEvent(); // prevents endless loop\n\n                           let rootid = id;\n                           while (this.getParentId(rootid)) {\n                              rootid = this.getParentId(rootid);\n                              if (rootid != id) tree.uncheckItem(rootid);\n                           }\n\n                           this.data.eachSubItem(rootid, function (item) {\n                              if (item.id != id) tree.uncheckItem(item.id);\n                           });\n\n                           tree.unblockEvent();\n                        } else {\n                           tree.blockEvent(); // prevents endless loop\n                           this.data.eachSubItem(id, function (obj) {\n                              if (obj.id != id) tree.uncheckItem(obj.id);\n                           });\n                           tree.unblockEvent();\n                        }\n                        const values = {};\n                        values[field.columnName] = $$(idTree).getChecked();\n\n                        if (row.id) {\n                           // pass null because it could not put empty array in REST api\n                           if (values[field.columnName].length == 0)\n                              values[field.columnName] = \"\";\n\n                           try {\n                              await field.object.model().update(row.id, values);\n\n                              // update the client side data object as well so other data changes won't cause this save to be reverted\n                              if (view && view.updateItem) {\n                                 view.updateItem(row.id, values);\n                              }\n                           } catch (err) {\n                              node.classList.add(\"webix_invalid\");\n                              node.classList.add(\"webix_invalid_cell\");\n\n                              this.AB.notify.developer(err, {\n                                 message: \"Error updating our entry.\",\n                                 row: row,\n                                 values: values,\n                              });\n                           }\n                        } else {\n                           const rowData = {};\n                           rowData[field.columnName] = $$(idTree).getChecked();\n\n                           field.setValue($$(parentComponent.ui.id), rowData);\n                        }\n                     },\n                  },\n               },\n            })\n            .show(node, {\n               x: -7,\n            });\n      }\n      return false;\n   }\n\n   setBadge(domNode, row) {\n      const field = this;\n      domNode = domNode.querySelector(\".list-data-values\");\n      const innerHeight = domNode.scrollHeight;\n      const outerHeight = domNode.parentElement.clientHeight;\n      if (innerHeight - outerHeight > 5) {\n         let count = 0;\n         if (row[field.columnName] && row[field.columnName].length)\n            count = row[field.columnName].length;\n         else count = 0;\n\n         if (count > 1) {\n            const badge = domNode.querySelector(\n               \".webix_badge.selectivityBadge\"\n            );\n            if (badge != null) {\n               badge.innerHTML = count;\n            } else {\n               const anchor = document.createElement(\"A\");\n               anchor.href = \"javascript:void(0);\";\n               anchor.addEventListener(\"click\", function (event) {\n                  // v2: this was just saving the new height to the\n                  // field properties. We don't do that anymore:\n                  // App.actions.onRowResizeAuto(row.id, innerHeight);\n                  event.stopPropagation();\n               });\n               const node = document.createElement(\"SPAN\");\n               const textnode = document.createTextNode(count);\n               node.classList.add(\"webix_badge\", \"selectivityBadge\");\n               node.appendChild(textnode);\n               anchor.appendChild(node);\n               domNode.appendChild(anchor);\n            }\n         }\n      }\n   }\n\n   /*\n    * @funciton formComponent\n    * returns a drag and droppable component that is used on the UI\n    * interface builder to place form components related to this ABField.\n    *\n    * an ABField defines which form component is used to edit it's contents.\n    * However, what is returned here, needs to be able to create an instance of\n    * the component that will be stored with the ABViewForm.\n    */\n   formComponent() {\n      return super.formComponent(\"formtree\");\n   }\n\n   detailComponent() {\n      const detailComponentSetting = super.detailComponent();\n\n      detailComponentSetting.common = () => {\n         return {\n            key: \"detailtree\",\n         };\n      };\n\n      return detailComponentSetting;\n   }\n\n   getValue(item, rowData) {\n      let values = {};\n      values = item.getValues();\n      return values;\n   }\n\n   setValue(item, rowData) {\n      if (!item) return false;\n\n      const val = rowData[this.columnName] || [];\n\n      item.setValues(val);\n      // get dom\n      const dom = item.$view.querySelector(\".list-data-values\");\n\n      if (!dom) return false;\n\n      // set value to selectivity\n      this.customDisplay(val, this.App, dom, {\n         editable: true,\n         isForm: true,\n      });\n\n      setTimeout(function () {\n         let height = 33;\n         if (dom.scrollHeight > 33) {\n            height = dom.scrollHeight;\n         }\n         item.config.height = height + 5;\n         item.resize();\n      }, 200);\n   }\n};\n","const ABFieldConnectCore = require(\"../../core/dataFields/ABFieldConnectCore\");\nconst ABFieldUserCore = require(\"../../core/dataFields/ABFieldUserCore\");\n\nmodule.exports = class ABFieldUser extends ABFieldUserCore {\n   constructor(values, object, fieldDefaults) {\n      super(values, object, fieldDefaults);\n   }\n\n   ///\n   /// Working with Actual Object Values:\n   ///\n\n   async save() {\n      // Add new\n      if (this.id == null) {\n         const SiteUser = this.AB.objectUser();\n         const Defaults = ABFieldUserCore.defaults();\n\n         this.settings.linkObject = SiteUser.id;\n         this.settings.isCustomFK = 1;\n\n         if (this.settings.isMultiple) {\n            this.settings.indexField2 = Defaults.USERNAME_FIELD_ID;\n            this.settings.linkType = \"many\";\n            this.settings.linkViaType = \"many\";\n            this.settings.isSource = 1;\n         } else {\n            this.settings.indexField = Defaults.USERNAME_FIELD_ID;\n            this.settings.linkType = \"one\";\n            this.settings.linkViaType = \"many\";\n            this.settings.isSource = 1;\n         }\n\n         // TODO: .fieldCustomNew() for saving \"local\" changes.\n         // NOTE: The Object adding this Field sees it's data as a ABFieldUser\n         //       connection.\n         //       However, the SiteUser will see the data as a ABFieldConnect\n         //       connection\n         const linkCol = SiteUser.fieldNew({\n            key: ABFieldConnectCore.defaults().key,\n            columnName: `${this.object.name}_${this.label}`,\n            label: this.object.label,\n            settings: {\n               showIcon: this.settings.showIcon,\n               linkObject: this.object.id,\n               linkType: this.settings.linkViaType,\n               linkViaType: this.settings.linkType,\n               isCustomFK: this.settings.isCustomFK,\n               indexField: this.settings.indexField,\n               indexField2: this.settings.indexField2,\n               isSource: 0,\n            },\n         });\n\n         // // Create definitions of the connected fields\n         // // NOTE: skip directly to the ABMLClass.save() to avoid the\n         // // migrations caused during the ABField.save() operations.\n         // await ABFieldUserCore.prototype.save.call(this);\n\n         // linkCol.settings.linkColumn = this.id;\n         // await ABFieldUserCore.prototype.save.call(linkCol);\n\n         // // Update the id value of linked field to connect together\n         // this.settings.linkColumn = linkCol.id;\n         // await ABFieldUserCore.prototype.save.call(this);\n\n         let newDef = await this.toDefinition().save();\n         this.id = newDef.id;\n\n         linkCol.settings.linkColumn = this.id;\n         let newLinkDef = await linkCol.toDefinition().save();\n         linkCol.id = newLinkDef.id;\n\n         this.settings.linkColumn = linkCol.id;\n         await this.toDefinition().save();\n\n         // Add fields to Objects\n         await this.object.fieldAdd(this);\n\n         await SiteUser.fieldAdd(linkCol);\n\n         // Create column to DB\n         await this.migrateCreate();\n\n         await linkCol.migrateCreate();\n\n         return this;\n      } else {\n         return super.save();\n      }\n   }\n\n   // return the grid column header definition for this instance of ABFieldUser\n\n   columnHeader(options) {\n      // debugger;\n      options = this.setDisplayOptions(options);\n      return super.columnHeader(options);\n   }\n\n   /**\n    * @function customDisplay\n    * perform any custom display modifications for this field.\n    * @param {object} row is the {name=>value} hash of the current row of data.\n    * @param {App} App the shared ui App object useful more making globally\n    *             unique id references.\n    * @param {HtmlDOM} node  the HTML Dom object for this field's display.\n    */\n   // customDisplay(row, App, node, options = {}) {\n   //    debugger;\n   //    options = this.setDisplayOptions(options);\n   //\n   //    return super.customDisplay(row, App, node, options);\n   // }\n\n   setDisplayOptions(options) {\n      options = options || {};\n      options.editable =\n         this.settings.editable != null ? this.settings.editable : true;\n\n      options.isLabelHidden =\n         this.settings.isShowUsername != null\n            ? !this.settings.isShowUsername\n            : false;\n\n      options.additionalText = (opt) => {\n         if (!this.settings.isShowProfileImage) return \"\";\n\n         if (opt.image_id)\n            return `<img src='/opsportal/image/UserProfile/${opt.image_id}' style='border-radius:100%; object-fit: cover; margin: 0 5px 0 -10px;' width='28' height='28' />`;\n         else return '<i style=\"opacity: 0.6;\" class=\"fa fa-user\"></i> ';\n      };\n\n      return options;\n   }\n\n   /**\n    * @method defaultValue\n    * insert a key=>value pair that represent the default value\n    * for this field.\n    * @param {obj} values a key=>value hash of the current values.\n    */\n   defaultValue(values) {\n      if (this.settings.isCurrentUser) {\n         if (this.settings.isMultiple) {\n            values[this.columnName] = [\n               {\n                  id: this.AB.Account.username(),\n                  text: this.AB.Account.username(),\n               },\n            ];\n         } else {\n            values[this.columnName] = this.AB.Account.username();\n         }\n      }\n   }\n\n   // getValue() {\n   //    var elem = $$(ids.component);\n   //\n   //    return field.getValue(elem, rowData);\n   // }\n\n   setValue(item, rowData) {\n      let val = rowData[this.columnName];\n      // Select \"[Current user]\" to update\n      if (val == \"ab-current-user\") val = this.AB.Account.username();\n\n      rowData[this.columnName] = val;\n\n      super.setValue(item, rowData);\n   }\n\n   getUsers() {\n      return this.AB.Account.userList().map((u) => {\n         const result = {\n            id: u.username,\n            image: u.image_id,\n         };\n\n         if (this.settings.isMultiple) {\n            result.text = u.username;\n         } else {\n            result.value = u.username;\n         }\n\n         return result;\n      });\n   }\n};\n","/**\n * ABProcessLane\n * manages a lane in a Process Diagram.\n *\n * Lanes manage users in the system, and provide a way to lookup a SiteUser.\n */\nvar ABProcessLaneCore = require(\"../../core/process/ABProcessLaneCore\");\n\nmodule.exports = class ABProcessLane extends ABProcessLaneCore {\n   // constructor(attributes, process, application) {\n   //    super(attributes, process, application);\n   // }\n\n   ////\n   //// Modeler Instance Methods\n   ////\n\n   transferParticipantWhereToMe(id) {\n      var myParticipant = this.process.elementForDiagramID(id);\n      if (myParticipant) {\n         // if I haven't already set my where clause, and my Participant\n         // has one, then take it:\n         if (!this.stashed && myParticipant.stashed) {\n            var copyParams = [\n               \"stashed\",\n               \"useRole\",\n               \"role\",\n               \"useAccount\",\n               \"account\",\n            ];\n            copyParams.forEach((p) => {\n               var swap = this[p];\n               this[p] = myParticipant[p];\n               myParticipant[p] = swap; // ?? do this ??\n            });\n         }\n      }\n   }\n\n   /**\n    * fromElement()\n    * initialize this Lane's values from the given BPMN:Lane\n    * @param {BPMNParticipant}\n    */\n   fromElement(element) {\n      this.diagramID = element.id || this.diagramID;\n\n      // on creation, if I have child objects, then move the .where definition\n      // from my parent Participant to ME\n      if (element.children && element.children.length > 0) {\n         if (element.parent && element.parent.type == \"bpmn:Participant\") {\n            this.transferParticipantWhereToMe(element.parent.id);\n         }\n      } else {\n         // this info might just reside in the .parent.children[]\n         if (\n            element.parent &&\n            element.parent.children &&\n            element.parent.children.length > 0\n         ) {\n            element.parent.children.forEach((child) => {\n               if (child.type != \"bpmn:Lane\") {\n                  // if child has lanes\n                  if (\n                     child.businessObject.lanes &&\n                     child.businessObject.lanes.length > 0\n                  ) {\n                     // if lane is me\n                     var myLane = child.businessObject.lanes.find((l) => {\n                        return l.id == this.diagramID;\n                     });\n                     if (myLane) {\n                        this.transferParticipantWhereToMe(element.parent.id);\n\n                        // tell child I'm it's lane:\n                        var objChild = this.process.elementForDiagramID(\n                           child.id\n                        );\n                        if (objChild) {\n                           objChild.setLane(this);\n                        }\n                     }\n                  }\n               }\n            });\n         }\n      }\n\n      this.onChange(element);\n   }\n\n   /**\n    * onChange()\n    * update the current Lane with information that was relevant\n    * from the provided BPMN:Lane\n    * @param {BPMNParticipant}\n    */\n   onChange(defElement) {\n      /*\n        Sample DefElement:\n            {\n                \"labels\": [],\n                \"children\": [],\n                \"id\": \"Participant_185ljkg\",\n                \"width\": 958,\n                \"height\": 240,\n                \"type\": \"bpmn:Participant\",\n                \"x\": -810,\n                \"y\": -2010,\n                \"order\": {\n                    \"level\": -2\n                },\n               \"businessObject\": {\n                    \"$type\": \"bpmn:Participant\",\n                    \"id\": \"Participant_185ljkg\",\n                    \"di\": {\n                        \"$type\": \"bpmndi:BPMNShape\",\n                        \"bounds\": {\n                            \"$type\": \"dc:Bounds\",\n                            \"x\": -810,\n                            \"y\": -2010,\n                            \"width\": 958,\n                            \"height\": 240\n                        },\n                        \"id\": \"Participant_185ljkg_di\",\n                        \"isHorizontal\": true\n                    },\n                    \"processRef\": {\n                        \"$type\": \"bpmn:Process\",\n                        \"id\": \"Process_0x3sul5\"\n                    }\n                }\n         */\n\n      // from the BPMI modeler we can gather a label for this:\n      if (\n         defElement.businessObject.name &&\n         defElement.businessObject.name != \"\"\n      ) {\n         this.label = defElement.businessObject.name;\n      }\n\n      // if I picked up a new task, inform it I am it's lane:\n   }\n};\n","/**\n * ABProcessParticipant\n * manages the participant lanes in a Process Diagram.\n *\n * Participants manage users in the system (when there are no lanes defined)\n * and provide a way to lookup a SiteUser.\n */\nvar ABProcessParticipantCore = require(\"../../core/process/ABProcessParticipantCore\");\n\nconst L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABProcessParticipant extends ABProcessParticipantCore {\n   // constructor(attributes, process, AB) {\n   //    super(attributes, process, AB);\n   // }\n\n   ////\n   //// Modeler Instance Methods\n   ////\n\n   /**\n    * fromElement()\n    * initialize this Participant's values from the given BPMN:Participant\n    * @param {BPMNParticipant}\n    */\n   fromElement(element) {\n      this.diagramID = element.id || this.diagramID;\n      this.onChange(element);\n   }\n\n   /**\n    * onChange()\n    * update the current Participant with information that was relevant\n    * from the provided BPMN:Participant\n    * @param {BPMNParticipant}\n    */\n   onChange(defElement) {\n      /*\n        Sample DefElement:\n            {\n                \"labels\": [],\n                \"children\": [],\n                \"id\": \"Participant_185ljkg\",\n                \"width\": 958,\n                \"height\": 240,\n                \"type\": \"bpmn:Participant\",\n                \"x\": -810,\n                \"y\": -2010,\n                \"order\": {\n                    \"level\": -2\n                },\n               \"businessObject\": {\n                    \"$type\": \"bpmn:Participant\",\n                    \"id\": \"Participant_185ljkg\",\n                    \"di\": {\n                        \"$type\": \"bpmndi:BPMNShape\",\n                        \"bounds\": {\n                            \"$type\": \"dc:Bounds\",\n                            \"x\": -810,\n                            \"y\": -2010,\n                            \"width\": 958,\n                            \"height\": 240\n                        },\n                        \"id\": \"Participant_185ljkg_di\",\n                        \"isHorizontal\": true\n                    },\n                    \"processRef\": {\n                        \"$type\": \"bpmn:Process\",\n                        \"id\": \"Process_0x3sul5\"\n                    }\n                }\n         */\n\n      // from the BPMI modeler we can gather a label for this:\n      if (\n         defElement.businessObject.name &&\n         defElement.businessObject.name != \"\"\n      ) {\n         this.label = defElement.businessObject.name;\n      }\n\n      if (defElement.children) {\n         var laneIDs = [];\n         defElement.children.forEach((c) => {\n            if (c.type == \"bpmn:Lane\") {\n               laneIDs.push(c.id);\n            }\n         });\n         this.laneIDs = laneIDs;\n      }\n   }\n\n   /**\n    * diagramProperties()\n    * return a set of values for the XML shape definition based upon\n    * the current values of this objec.\n    * @return {json}\n    */\n   diagramProperties() {\n      return [\n         {\n            id: this.diagramID,\n            def: {\n               name: this.name,\n            },\n         },\n      ];\n   }\n\n   // static propertyIDs(id) {\n   //    return {\n   //       form: `${id}_form`,\n   //       name: `${id}_name`,\n   //       role: `${id}_role`,\n   //       useRole: `${id}_useRoles`,\n   //       useAccount: `${id}_useAccounts`,\n   //       account: `${id}_account`,\n   //    };\n   // }\n   /**\n    * propertiesShow()\n    * display the properties panel for this Process Element.\n    * @param {string} id\n    *        the webix $$(id) of the properties panel area.\n    */\n   propertiesShow(id) {\n      console.error(\"TODO: refactor to ABDesigner\");\n\n      var ids = ABProcessParticipant.propertyIDs(id);\n\n      var ui = {\n         id: id,\n         rows: [\n            { view: \"label\", label: `${this.type} :` },\n            {\n               view: \"form\",\n               id: ids.form,\n               // width: 300,\n               elements: [\n                  {\n                     id: ids.name,\n                     view: \"text\",\n                     label: L(\"Name\"),\n                     name: \"name\",\n                     value: this.name,\n                  },\n                  // { template: \"Select Users\", type: \"section\" },\n                  // {\n                  //     id: id + \"_userView\",\n                  //     cols: [\n                  //         {\n                  //             view: \"checkbox\",\n                  //             id: ids.useRole,\n                  //             labelRight: \"by Role\",\n                  //             value: this.useRole || 0\n                  //         },\n                  //         {\n                  //             id: ids.role,\n                  //             view: \"select\",\n                  //             label: \"Role\",\n                  //             value: this.role,\n                  //             options: __Roles,\n                  //             labelAlign: \"left\"\n                  //         }\n                  //     ]\n                  // }\n                  // {\n                  //     margin: 5,\n                  //     cols: [\n                  //         {\n                  //             view: \"button\",\n                  //             value: \"Login\",\n                  //             css: \"webix_primary\"\n                  //         },\n                  //         { view: \"button\", value: \"Cancel\" }\n                  //     ]\n                  // }\n               ],\n            },\n         ],\n      };\n\n      // If we don't have any sub lanes, then offer the select user options:\n      if (this.laneIDs && this.laneIDs.length == 0) {\n         var userUI = ABProcessParticipant.selectUsersUi(id, this);\n         ui.rows[1].elements.push(userUI);\n      }\n\n      webix.ui(ui, $$(id));\n\n      $$(id).show();\n   }\n\n   /**\n    * selectUsersUi()\n    * A resuable fn to return the webix ui for a reusable Select User picker.\n    * @param {ABFactory} AB\n    * @param {string} id\n    *        the webix $$(id) of the properties panel area.\n    * @param {json} values\n    *        the current values represented for this user selection.\n    */\n   static selectUsersUi(AB, id, values) {\n      console.warn(\"!!! Where is this used???\");\n\n      var L = (...params) => {\n         return this.AB.Multilingual.label(...params);\n      };\n\n      var ids = ABProcessParticipant.propertyIDs(id);\n      var __Roles = this.AB.Account.rolesAll();\n      var __Users = this.AB.Account.userList();\n\n      __Roles.unshift({ id: \"--\", value: L(\"select a role\") });\n      __Users.unshift({ id: \"--\", value: L(\"select a user\") });\n\n      return {\n         view: \"fieldset\",\n         label: L(\"Select Users\"),\n         body: {\n            rows: [\n               {\n                  cols: [\n                     {\n                        view: \"checkbox\",\n                        id: ids.useRole,\n                        labelRight: L(\"by Role\"),\n                        labelWidth: 0,\n                        width: 120,\n                        value: values.useRole ? values.useRole : 0,\n                        click: function (id /*, event */) {\n                           if ($$(id).getValue()) {\n                              $$(ids.role).enable();\n                           } else {\n                              $$(ids.role).disable();\n                           }\n                        },\n                     },\n                     {\n                        id: ids.role,\n                        view: \"select\",\n                        value: values.role ? values.role : \"\",\n                        disabled: values.useRole ? false : true,\n                        options: __Roles,\n                        labelAlign: \"left\",\n                     },\n                  ],\n               },\n               {\n                  cols: [\n                     {\n                        view: \"checkbox\",\n                        id: ids.useAccount,\n                        labelRight: L(\"by Account\"),\n                        labelWidth: 0,\n                        width: 120,\n                        value: values.useAccount ? values.useAccount : 0,\n                        click: function (id /*, event */) {\n                           if ($$(id).getValue()) {\n                              $$(ids.account).enable();\n                           } else {\n                              $$(ids.account).disable();\n                           }\n                        },\n                     },\n                     {\n                        id: ids.account,\n                        view: \"multicombo\",\n                        value: values.account ? values.account : 0,\n                        disabled: values.useAccount ? false : true,\n                        suggest: __Users,\n                        labelAlign: \"left\",\n                        placeholder: L(\"Click or type to add user...\"),\n                        stringResult: false /* returns data as an array of [id] */,\n                     },\n                  ],\n               },\n            ],\n         },\n      };\n   }\n\n   /**\n    * selectManagersUi()\n    * A resuable fn to return the webix ui for a reusable Select Managers picker.\n    * This UI is used in the ABDesigner New Application form.\n    * @param {ABFactory} AB\n    * @param {string} id\n    *        the webix $$(id) of the properties panel area.\n    * @param {jsonobj} obj\n    *        the default values for these fields.\n    */\n\n   /*\n    * Moving this to ABDesigner/src/rootPages/Designer/forms/process\n    */\n   // static selectManagersUi(AB, id, obj) {\n   //    var L = (...params) => {\n   //       return AB.Multilingual.label(...params);\n   //    };\n\n   //    var ids = ABProcessParticipant.propertyIDs(id);\n   //    var __Roles = AB.Account.rolesAll().map((r) => {\n   //       return { id: r.id, value: r.name };\n   //    });\n   //    var __Users = AB.Account.userList().map((u) => {\n   //       return { id: u.uuid, value: u.username };\n   //    });\n\n   //    return {\n   //       type: \"form\",\n   //       css: \"no-margin\",\n   //       rows: [\n   //          {\n   //             cols: [\n   //                {\n   //                   view: \"checkbox\",\n   //                   id: ids.useRole,\n   //                   labelRight: L(\"by Role\"),\n   //                   labelWidth: 0,\n   //                   width: 120,\n   //                   value: obj.useRole == \"1\" ? 1 : 0,\n   //                   click: function (id /*, event */) {\n   //                      if ($$(id).getValue()) {\n   //                         $$(ids.role).enable();\n   //                      } else {\n   //                         $$(ids.role).disable();\n   //                      }\n   //                   },\n   //                },\n   //                {\n   //                   id: ids.role,\n   //                   view: \"multicombo\",\n   //                   value: obj.role ? obj.role : 0,\n   //                   disabled: obj.useRole == \"1\" ? false : true,\n   //                   suggest: __Roles,\n   //                   placeholder: L(\"Click or type to add role...\"),\n   //                   labelAlign: \"left\",\n   //                   stringResult: false /* returns data as an array of [id] */,\n   //                },\n   //             ],\n   //          },\n   //          {\n   //             cols: [\n   //                {\n   //                   view: \"checkbox\",\n   //                   id: ids.useAccount,\n   //                   labelRight: L(\"by Account\"),\n   //                   labelWidth: 0,\n   //                   width: 120,\n   //                   value: obj.useAccount == \"1\" ? 1 : 0,\n   //                   click: function (id /*, event */) {\n   //                      if ($$(id).getValue()) {\n   //                         $$(ids.account).enable();\n   //                      } else {\n   //                         $$(ids.account).disable();\n   //                      }\n   //                   },\n   //                },\n   //                {\n   //                   id: ids.account,\n   //                   view: \"multicombo\",\n   //                   value: obj.account ? obj.account : 0,\n   //                   disabled: obj.useAccount == \"1\" ? false : true,\n   //                   suggest: __Users,\n   //                   labelAlign: \"left\",\n   //                   placeholder: L(\"Click or type to add user...\"),\n   //                   stringResult: false /* returns data as an array of [id] */,\n   //                },\n   //             ],\n   //          },\n   //       ],\n   //    };\n   // }\n\n   /**\n    * stashUsersUi()\n    * A resuable fn to return the values from our static selectUsersUI().\n    * @param {string} id\n    *        the webix $$(id) of the properties panel area.\n    */\n   /*\n    * Moving this to ABDesigner/src/rootPages/Designer/forms/process\n    */\n   // static stashUsersUi(id) {\n   //    var obj = {};\n   //    var ids = ABProcessParticipant.propertyIDs(id);\n\n   //    if ($$(ids.useRole)) {\n   //       obj.useRole = $$(ids.useRole).getValue();\n   //    }\n\n   //    if ($$(ids.role) && obj.useRole) {\n   //       obj.role = $$(ids.role).getValue();\n   //       if (obj.role === \"--\") obj.role = null;\n   //    } else {\n   //       obj.role = null;\n   //    }\n\n   //    if ($$(ids.useAccount)) {\n   //       obj.useAccount = $$(ids.useAccount).getValue();\n   //    }\n\n   //    if ($$(ids.account) && obj.useAccount) {\n   //       obj.account = $$(ids.account).getValue(/*{ options: true }*/);\n   //       if (obj.account === \"--\") obj.account = null;\n   //    } else {\n   //       obj.account = null;\n   //    }\n\n   //    return obj;\n   // }\n\n   /**\n    * propertiesStash()\n    * pull our values from our property panel.\n    * @param {string} id\n    *        the webix $$(id) of the properties panel area.\n    */\n   propertiesStash(id) {\n      var ids = ABProcessParticipant.propertyIDs(id);\n      this.name = $$(ids.name).getValue();\n      if (this.laneIDs.length == 0) {\n         var userDef = ABProcessParticipant.stashUsersUi(id);\n         Object.keys(userDef).forEach((k) => {\n            this[k] = userDef[k];\n         });\n      }\n      this.stashed = true;\n   }\n};\n","const ABProcessElementCore = require(\"../../../core/process/tasks/ABProcessElementCore.js\");\n\nmodule.exports = class ABProcessElement extends ABProcessElementCore {\n   // constructor(attributes, process, AB, defaultValues) {\n   //    super(attributes, process, AB, defaultValues);\n\n   //    // listen\n   // }\n\n   /**\n    * @method destroy()\n    * remove this task definition.\n    * @return {Promise}\n    */\n   destroy() {\n      ////\n      //// TODO: once our core conversion is complete, this .save() can be\n      //// moved to ABProcessTaskCore, and our ABDefinition.save() can take\n      //// care of the proper method to save depending on the current Platform.\n      ////\n      // return this.toDefinition()\n      //     .destroy()\n\n      return super.destroy().then(() => {\n         return this.process.elementRemove(this);\n      });\n   }\n\n   isValid() {\n      /*\n        var validator = OP.Validation.validator();\n\n        // label/name must be unique:\n        var isNameUnique =\n            this.AB.processes((o) => {\n                return o.name.toLowerCase() == this.name.toLowerCase();\n            }).length == 0;\n        if (!isNameUnique) {\n            validator.addError(\n                \"name\",\n                L(\n                    \"ab.validation.object.name.unique\",\n                    `Process name must be unique (\"${this.name}\"\" already used in this Application)`\n                )\n            );\n        }\n\n        return validator;\n        */\n\n      // var isValid =\n      //     this.AB.processes((o) => {\n      //         return o.name.toLowerCase() == this.name.toLowerCase();\n      //     }).length == 0;\n      // return isValid;\n\n      return true;\n   }\n\n   ////\n   //// Modeler Instance Methods\n   ////\n\n   findLane(curr, cb) {\n      if (!curr) {\n         cb(null, null);\n         return;\n      }\n\n      // if current object has a LANE definition, use that one:\n      if (curr.lanes && curr.lanes.length > 0) {\n         cb(null, curr.lanes[0]);\n      } else if (curr.$type == \"bpmn:Participant\") {\n         // if the current is a Participant, take that one\n         cb(null, curr);\n      } else {\n         // else move upwards and check again:\n         curr = curr.$parent;\n         this.findLane(curr, cb);\n      }\n   }\n\n   setLane(Lane) {\n      this.laneDiagramID = Lane.diagramID;\n   }\n\n   /**\n    * fromElement()\n    * initialize this Task's values from the given BPMN:Element\n    * @param {BPMNElement}\n    */\n   fromElement(element) {\n      this.diagramID = element.id || this.diagramID;\n      this.onChange(element);\n   }\n\n   /**\n    * onChange()\n    * update the current Task with information that was relevant\n    * from the provided BPMN:Element\n    * @param {BPMNElement}\n    */\n   onChange(defElement) {\n      /*\n        Sample DefElement:\n            {\n                \"labels\": [],\n                \"children\": [],\n                \"id\": \"Task_08j07ni\",\n                \"width\": 100,\n                \"height\": 80,\n                \"type\": \"bpmn:SendTask\",\n                \"x\": 20,\n                \"y\": -2130,\n                \"order\": {\n                    \"level\": 5\n                },\n                \"businessObject\": {\n                    \"$type\": \"bpmn:SendTask\",\n                    \"id\": \"Task_08j07ni\",\n                    \"name\": \"ffff\",\n                    \"di\": {\n                        \"$type\": \"bpmndi:BPMNShape\",\n                        \"bounds\": {\n                            \"$type\": \"dc:Bounds\",\n                            \"x\": 20,\n                            \"y\": -2130,\n                            \"width\": 100,\n                            \"height\": 80\n                        },\n                        \"id\": \"SendTask_0iidv6o_di\"\n                    }\n\n                    // Some elements (like EndEvents) have:\n                    .eventDefinitions: [\n                        {\n                            $type: \"actual bpmn:ElementType\",\n                            ...\n                        }\n                    ]\n                },\n                \"incoming\":[],\n                \"outgoing\":[]\n            }\n         */\n\n      // from the BPMI modeler we can gather a label for this:\n      if (\n         defElement.businessObject.name &&\n         defElement.businessObject.name != \"\"\n      ) {\n         this.label = defElement.businessObject.name;\n      }\n\n      // our lane may have changed:\n      var currObj = defElement.businessObject;\n      this.findLane(currObj, (err, obj) => {\n         if (obj) {\n            this.laneDiagramID = obj.id;\n         } else {\n            // if my parent shape is a Participant, then use that:\n            if (\n               defElement.parent &&\n               defElement.parent.type == \"bpmn:Participant\"\n            ) {\n               this.laneDiagramID = defElement.parent.id;\n            } else {\n               this.laneDiagramID = null;\n            }\n         }\n      });\n   }\n\n   /**\n    * diagramProperties()\n    * return a set of values for the XML shape definition based upon\n    * the current values of this object.\n    * @return {json}\n    */\n   diagramProperties() {\n      return [\n         {\n            id: this.diagramID,\n            def: {\n               name: this.name,\n            },\n         },\n      ];\n   }\n\n   /**\n    * propertiesShow()\n    * display the properties panel for this Process Element.\n    * @param {string} id\n    *        the webix $$(id) of the properties panel area.\n    */\n   propertiesShow(id) {\n      var ui = {\n         id: id,\n         view: \"label\",\n         label: \"this task has not implement properties yet...\",\n      };\n\n      webix.ui(ui, $$(id));\n\n      $$(id).show();\n   }\n\n   /**\n    * propertiesStash()\n    * pull our values from our property panel.\n    * @param {string} id\n    *        the webix $$(id) of the properties panel area.\n    */\n   propertiesStash(id) {}\n\n   /**\n    * property()\n    * return the specific property value if it exists.\n    * @return {mixed} | undefined\n    */\n   property(id) {\n      if ($$(id)) {\n         return $$(id).getValue();\n      }\n   }\n\n   /**\n    * switchTo()\n    * replace this object with an instance of one of our child classes:\n    * @param {ABProcessTask*} child\n    *        an instance of the new Process Task we are replaced with.\n    * @param {string} propertiesID\n    *        the webix ui.id container for the properties panel.\n    */\n   switchTo(child, propertiesID) {\n      // remove myself from our containing process's elements\n      this.process.elementRemove(this);\n\n      // add the new Process WITH the same id\n      this.process.elementAdd(child);\n\n      // show the child properties:\n      child.propertiesShow(propertiesID);\n\n      this.emit(\"switchTo\", child);\n   }\n};\n","const ABProcessEndCore = require(\"../../../core/process/tasks/ABProcessEndCore.js\");\n\nmodule.exports = class ABProcessEnd extends ABProcessEndCore {\n   /**\n    * do()\n    * this method actually performs the action for this task.\n    * @param {obj} instance  the instance data of the running process\n    * @return {Promise}\n    *      resolve(true/false) : true if the task is completed.\n    *                            false if task is still waiting\n    */\n   // do(instance) {\n   //     return new Promise((resolve, reject) => {\n   //         // An End Event doesn't perform any other actions\n   //         // than to signal it has successfully completed.\n   //         // But it provides no Additional Tasks to work on.\n   //         // for testing:\n   //         this.stateCompleted(instance);\n   //         this.log(instance, \"End Event Reached\");\n   //         resolve(true);\n   //     });\n   // }\n};\n","const ABProcessGatewayExclusiveCore = require(\"../../../core/process/tasks/ABProcessGatewayExclusiveCore.js\");\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABProcessGatewayExclusive extends (\n   ABProcessGatewayExclusiveCore\n) {\n   ////\n   //// Process Instance Methods\n   ////\n\n   propertyIDs(id) {\n      return {\n         name: `${id}_name`,\n      };\n   }\n\n   /**\n    * propertiesShow()\n    * display the properties panel for this Process Element.\n    * @param {string} id\n    *        the webix $$(id) of the properties panel area.\n    */\n   propertiesShow(id, App) {\n      var ids = this.propertyIDs(id);\n\n      var ui = {\n         id: id,\n         view: \"form\",\n         elements: [\n            {\n               id: ids.name,\n               view: \"text\",\n               label: L(\"Name\"),\n               name: \"name\",\n               value: this.name,\n            },\n         ],\n      };\n\n      // here is how we can find out what possible process data\n      // fields are available to this task:\n      //   returns an [{ key:'{uuid}', label:\"\" field:{ABDataField} }, {}, ...]\n      var listDataFields = this.process.processDataFields(this);\n      var abFields = (listDataFields || []).map((f) => {\n         return f.field;\n      });\n\n      var myOutgoingConnections = this.process.connectionsOutgoing(\n         this.diagramID\n      );\n\n      this.__dfLookup = {};\n      this.conditions = this.conditions || {};\n      myOutgoingConnections.forEach((conn) => {\n         var condition = this.conditions[conn.id] || {};\n\n         var connectedElement = this.process.elementForDiagramID(conn.to);\n\n         var DF = this.AB.filterComplexNew(`${id}_${conn.id}_filter`);\n         // DF.applicationLoad(this.application);\n         DF.fieldsLoad(abFields);\n         this.__dfLookup[conn.id] = DF;\n\n         var connUI = {\n            view: \"fieldset\",\n            label: L(\"to {0}\", [\n               connectedElement\n                  ? connectedElement.name\n                  : L(\"unlabeled Task({0})\", [conn.id]),\n            ]),\n            body: {\n               rows: [\n                  {\n                     id: `${id}_${conn.id}_label`,\n                     view: \"text\",\n                     label: L(\"Label\"),\n                     value: condition.label || \"\",\n                  },\n                  DF.ui,\n               ],\n            },\n         };\n\n         ui.elements.push(connUI);\n      });\n\n      // DF.setValue(CurrentQuery.where);\n\n      webix.ui(ui, $$(id));\n\n      $$(id).show();\n\n      // update the filters after they have been .show()n\n      myOutgoingConnections.forEach((conn) => {\n         var condition = this.conditions[conn.id] || {};\n         var DF = this.__dfLookup[conn.id];\n         if (condition.filterValue) {\n            DF.setValue(condition.filterValue);\n         }\n      });\n   }\n\n   /**\n    * propertiesStash()\n    * pull our values from our property panel.\n    * @param {string} id\n    *        the webix $$(id) of the properties panel area.\n    */\n   propertiesStash(id) {\n      var ids = this.propertyIDs(id);\n      this.name = this.property(ids.name);\n      this.conditions = {};\n\n      var myOutgoingConnections = this.process.connectionsOutgoing(\n         this.diagramID\n      );\n      myOutgoingConnections.forEach((conn) => {\n         this.conditions[conn.id] = {};\n         this.conditions[conn.id].label = this.property(\n            `${id}_${conn.id}_label`\n         );\n         if (this.__dfLookup && this.__dfLookup[conn.id]) {\n            var DF = this.__dfLookup[conn.id];\n            this.conditions[conn.id].filterValue = DF.getValue();\n         }\n      });\n   }\n\n   /**\n    * diagramProperties()\n    * return a set of values for the XML shape definition based upon\n    * the current values of this object.\n    * @return {json}\n    */\n   diagramProperties() {\n      // the first entry is for the gateway element itself\n      var properties = [\n         {\n            id: this.diagramID,\n            def: {\n               name: this.name,\n            },\n         },\n      ];\n\n      // now add any additional updates for each of our connections:\n      var myOutgoingConnections = this.process.connectionsOutgoing(\n         this.diagramID\n      );\n      myOutgoingConnections.forEach((conn) => {\n         properties.push({\n            id: conn.id,\n            def: {\n               name: this.conditions[conn.id].label,\n            },\n         });\n      });\n      return properties;\n   }\n};\n","// import ABApplication from \"./ABApplication\"\n// const ABApplication = require(\"./ABApplication\"); // NOTE: change to require()\nconst ABProcessTaskEmailCore = require(\"../../../core/process/tasks/ABProcessTaskEmailCore.js\");\nconst ABProcessParticipant = require(\"../ABProcessParticipant.js\");\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABProcessTaskEmail extends ABProcessTaskEmailCore {\n   ////\n   //// Process Instance Methods\n   ////\n\n   /**\n    * do()\n    * this method actually performs the action for this task.\n    * @param {obj} instance  the instance data of the running process\n    * @return {Promise}\n    *      resolve(true/false) : true if the task is completed.\n    *                            false if task is still waiting\n    */\n   // do(instance) {\n   //     return new Promise((resolve, reject) => {\n   //         // for testing:\n   //         var myState = this.myState(instance);\n   //         myState.status = \"completed\";\n   //         this.log(instance, \"Email Sent successfully\");\n   //         resolve(true);\n   //     });\n   // }\n\n   /**\n    * initState()\n    * setup this task's initial state variables\n    * @param {obj} context  the context data of the process instance\n    * @param {obj} val  any values to override the default state\n    */\n   // initState(context, val) {\n   //     var myDefaults = {\n   //         to: \"0\",\n   //         from: \"0\",\n   //         subject: \"\",\n   //         message: \"\",\n   //         fromUsers: {},\n   //         toUsers: {},\n   //         toCustom: \"\",\n   //         fromCustom: \"\"\n   //     };\n\n   //     super.initState(context, myDefaults, val);\n   // }\n\n   propertyIDs(id) {\n      return {\n         name: `${id}_name`,\n         to: `${id}_to`,\n         from: `${id}_from`,\n         subject: `${id}_subject`,\n         fromUser: `${id}_from_user`,\n         toUser: `${id}_to_user`,\n         message: `${id}_message`,\n         toCustom: `${id}_to_custom`,\n         fromCustom: `${id}_from_custom`,\n      };\n   }\n\n   /**\n    * propertiesShow()\n    * display the properties panel for this Process Element.\n    * @param {string} id\n    *        the webix $$(id) of the properties panel area.\n    */\n   propertiesShow(id) {\n      var ids = this.propertyIDs(id);\n\n      var toUserUI = ABProcessParticipant.selectUsersUi(\n         id + \"_to_\",\n         this.toUsers || {}\n      );\n      var fromUserUI = ABProcessParticipant.selectUsersUi(\n         id + \"_from_\",\n         this.fromUsers || {}\n      );\n\n      var ui = {\n         id: id,\n         view: \"form\",\n         elements: [\n            {\n               id: ids.name,\n               view: \"text\",\n               label: L(\"Name\"),\n               name: \"name\",\n               value: this.name,\n            },\n            {\n               id: ids.to,\n               view: \"select\",\n               label: L(\"To\"),\n               name: \"to\",\n               value: this.to,\n               options: [\n                  {\n                     id: 0,\n                     value: L(\"Next Participant\"),\n                  },\n                  {\n                     id: 1,\n                     value: L(\"Select Role or User\"),\n                  },\n                  {\n                     id: 2,\n                     value: L(\"Custom\"),\n                  },\n               ],\n               on: {\n                  onChange: (val) => {\n                     if (parseInt(val) == 1) {\n                        $$(ids.toUser).show();\n                        $$(ids.toCustom).hide();\n                     } else if (parseInt(val) == 2) {\n                        $$(ids.toUser).hide();\n                        $$(ids.toCustom).show();\n                     } else {\n                        $$(ids.toUser).hide();\n                        $$(ids.toCustom).hide();\n                     }\n                  },\n               },\n            },\n            {\n               id: ids.toUser,\n               rows: [toUserUI],\n               paddingY: 10,\n               hidden: parseInt(this.to) == 1 ? false : true,\n            },\n            {\n               id: ids.toCustom,\n               view: \"text\",\n               label: L(\"Email\"),\n               placeholder: L(\"Type email address here...\"),\n               name: \"toCustom\",\n               value: this.toCustom,\n               hidden: parseInt(this.to) == 2 ? false : true,\n            },\n            {\n               id: ids.from,\n               view: \"select\",\n               label: L(\"From\"),\n               name: \"from\",\n               value: this.from,\n               options: [\n                  {\n                     id: 0,\n                     value: L(\"Current Participant\"),\n                  },\n                  {\n                     id: 1,\n                     value: L(\"Select Role or User\"),\n                  },\n                  {\n                     id: 2,\n                     value: L(\"Custom\"),\n                  },\n               ],\n               on: {\n                  onChange: (val) => {\n                     if (parseInt(val) == 1) {\n                        $$(ids.fromUser).show();\n                        $$(ids.fromCustom).hide();\n                     } else if (parseInt(val) == 2) {\n                        $$(ids.fromUser).hide();\n                        $$(ids.fromCustom).show();\n                     } else {\n                        $$(ids.fromUser).hide();\n                        $$(ids.fromCustom).hide();\n                     }\n                  },\n               },\n            },\n            {\n               id: ids.fromUser,\n               rows: [fromUserUI],\n               paddingY: 10,\n               hidden: parseInt(this.from) == 1 ? false : true,\n            },\n            {\n               id: ids.fromCustom,\n               view: \"text\",\n               label: L(\"Email\"),\n               placeholder: L(\"Type email address here...\"),\n               name: \"fromCustom\",\n               value: this.fromCustom,\n               hidden: parseInt(this.from) == 2 ? false : true,\n            },\n            {\n               id: ids.subject,\n               view: \"text\",\n               label: L(\"Subject\"),\n               name: \"subject\",\n               value: this.subject,\n            },\n            {\n               view: \"spacer\",\n               height: 10,\n            },\n            {\n               id: ids.message,\n               view: \"tinymce-editor\",\n               label: L(\"Message\"),\n               name: \"message\",\n               value: this.message,\n               borderless: true,\n               minHeight: 500,\n               config: {\n                  plugins: [\n                     \"advlist autolink lists link image charmap print preview anchor\",\n                     \"searchreplace visualblocks code fullscreen\",\n                     \"insertdatetime media table contextmenu paste imagetools wordcount\",\n                  ],\n                  toolbar:\n                     \"insertfile undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image\",\n                  init_instance_callback: (editor) => {\n                     editor.on(\"KeyUp\", (event) => {\n                        // _logic.onChange();\n                     });\n\n                     editor.on(\"Change\", function (event) {\n                        // _logic.onChange();\n                     });\n                  },\n               },\n            },\n         ],\n      };\n\n      webix.ui(ui, $$(id));\n\n      $$(id).show();\n   }\n\n   /**\n    * propertiesStash()\n    * pull our values from our property panel.\n    * @param {string} id\n    *        the webix $$(id) of the properties panel area.\n    */\n   propertiesStash(id) {\n      var ids = this.propertyIDs(id);\n      this.name = this.property(ids.name);\n      this.to = this.property(ids.to);\n      this.from = this.property(ids.from);\n      this.subject = this.property(ids.subject);\n      this.message = this.property(ids.message);\n      this.toCustom = this.property(ids.toCustom);\n      this.fromCustom = this.property(ids.fromCustom);\n      this.toUsers = ABProcessParticipant.stashUsersUi(id + \"_to_\");\n      this.fromUsers = ABProcessParticipant.stashUsersUi(id + \"_from_\");\n   }\n};\n","const ABProcessTaskServiceCore = require(\"../../../core/process/tasks/ABProcessTaskServiceCore.js\");\n\nmodule.exports = class ABProcessTaskService extends ABProcessTaskServiceCore {};\n","const AccountingBatchProcessingCore = require(\"../../../core/process/tasks/ABProcessTaskServiceAccountingBatchProcessingCore.js\");\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class AccountingBatchProcessing extends (\n   AccountingBatchProcessingCore\n) {\n   ////\n   //// Process Instance Methods\n   ////\n\n   propertyIDs(id) {\n      return {\n         name: `${id}_name`,\n         processBatchValue: `${id}_processBatchValue`,\n         objectBatch: `${id}_objectBatch`,\n         fieldBatchEntries: `${id}_fieldBatchEntries`,\n         fieldBatchFinancialPeriod: `${id}_fieldBatchFinancialPeriod`,\n         objectJE: `${id}_objectJE`,\n         fieldJEAccount: `${id}_fieldJEAccount`,\n         fieldJERC: `${id}_fieldJERC`,\n         fieldJEStatus: `${id}_fieldJEStatus`,\n         fieldJEStatusComplete: `${id}_fieldJEStatusComplete`,\n         objectBR: `${id}_objectBR`,\n         fieldBRFinancialPeriod: `${id}_fieldBRFinancialPeriod`,\n         fieldBRAccount: `${id}_fieldBRAccount`,\n         fieldBRRC: `${id}_fieldBRRC`,\n         fieldBREntries: `${id}_fieldBREntries`,\n      };\n   }\n\n   /**\n    * propertiesShow()\n    * display the properties panel for this Process Element.\n    * @param {string} id\n    *        the webix $$(id) of the properties panel area.\n    */\n   propertiesShow(id) {\n      var ids = this.propertyIDs(id);\n\n      var processValues = [{ id: 0, value: L(\"Select a Process Value\") }];\n      var processDataFields = this.process.processDataFields(this);\n      (processDataFields || []).forEach((row) => {\n         processValues.push({ id: row.key, value: row.label });\n      });\n\n      var objectList = this.AB.objects().map((o) => {\n         return { id: o.id, value: o.label || o.name, object: o };\n      });\n      objectList.unshift({\n         id: 0,\n         value: L(\"Select an Object\"),\n      });\n\n      //\n      // set up field settings:\n      //\n\n      var blankField = {\n         id: 0,\n         value: L(\"Select a Field\"),\n      };\n      // blankField : generic Select a field entry\n\n      function defaultFields(objID) {\n         // create a new options array of Field Choices for the given obj.id\n\n         var fields = [blankField];\n         if (objID) {\n            var entry = objectList.find((o) => o.id == objID);\n            if (entry && entry.object) {\n               entry.object.fields().forEach((f) => {\n                  fields.push({ id: f.id, value: f.label, field: f });\n               });\n            }\n         }\n         return fields;\n      }\n\n      function updateFields(fieldPickers, fieldValues, defaultValue) {\n         // update the list of field select choices with the new field choices\n\n         fieldPickers.forEach((fp) => {\n            var picker = $$(fp);\n            if (picker) {\n               picker.define(\"options\", fieldValues);\n               // if (defaultValue) {\n               //    picker.define(\"value\", defaultValue);\n               // } else {\n               //    picker.define(\"value\", fieldValues[0].value);\n               // }\n               picker.refresh();\n               picker.show();\n            }\n         });\n      }\n\n      var batchFields = defaultFields(this.objectBatch);\n      // batchFields : the default list of fields for the Batch Object\n\n      var fieldPickersBatch = [\n         ids.fieldBatchEntries,\n         ids.fieldBatchFinancialPeriod,\n      ];\n      // fieldPickersBatch : the list of field selects to update for the Batch\n      //      object.\n\n      var jeFields = defaultFields(this.objectJE);\n      // jeFields : the default list of fields for the Journal Entry Object\n\n      var fieldPickersJE = [\n         ids.fieldJEAccount,\n         ids.fieldJERC,\n         ids.fieldJEStatus,\n      ];\n      // fieldPickersJE : the list of field selects to update for the Journal Entry\n      //      object.\n\n      function compileStatusValues(statusField) {\n         var values = [{ id: 0, value: L(\"Select the Complete Value\") }];\n         if (statusField && statusField.options) {\n            statusField.options().forEach((o) => {\n               values.push({ id: o.id, value: o.text });\n            });\n         }\n         return values;\n      }\n\n      function updatePickerStatusComplete(values) {\n         var wbxComplete = $$(ids.fieldJEStatusComplete);\n         if (wbxComplete) {\n            // update fieldJEStatusComplete options\n            wbxComplete.define(\"options\", values);\n            wbxComplete.refresh();\n            // show fieldJEStatusComplete\n            wbxComplete.show();\n         }\n      }\n\n      function onStatusComplete(newVal) {\n         // pull the ABField object from newValue\n         var jeEntryID = $$(ids.objectJE).getValue();\n         var jeEntry = objectList.find((o) => o.id == jeEntryID);\n         if (jeEntry && jeEntry.object) {\n            var statusField = jeEntry.object.fieldByID(newVal);\n            if (statusField && statusField.options) {\n               // get the options as an []\n               jeFieldStatusValues = compileStatusValues(statusField);\n\n               updatePickerStatusComplete(jeFieldStatusValues);\n            }\n         }\n      }\n\n      var jeFieldStatusValues = compileStatusValues();\n      // jeFieldStatusValues : the list of status options from the fieldJEStatus\n      //      selected entry.\n\n      var brFields = defaultFields(this.objectBR);\n      // jeFields : the default list of fields for the Journal Entry Object\n\n      var fieldPickersBR = [\n         ids.fieldBRFinancialPeriod,\n         ids.fieldBRAccount,\n         ids.fieldBRRC,\n         ids.fieldBREntries,\n      ];\n      // fieldPickersBR : the list of field selects to update for the Balance Record\n      //      object.\n\n      var ui = {\n         id: id,\n         view: \"form\",\n         elements: [\n            {\n               id: ids.name,\n               view: \"text\",\n               label: L(\"Name\"),\n               name: \"name\",\n               value: this.name,\n            },\n            {\n               id: ids.processBatchValue,\n               view: \"select\",\n               label: L(\"Process Batch Value\"),\n               value: this.processBatchValue,\n               name: \"processBatchValue\",\n               options: processValues,\n            },\n            {\n               id: ids.objectBatch,\n               view: \"select\",\n               label: L(\"Batch Object\"),\n               value: this.objectBatch,\n               name: \"objectBatch\",\n               options: objectList,\n               on: {\n                  onChange(newVal, oldVal) {\n                     if (newVal != oldVal) {\n                        // gather new set of batchFields\n                        batchFields = defaultFields(newVal);\n                        // rebuild the associated list of Fields to pick\n                        updateFields(fieldPickersBatch, batchFields);\n                     }\n                  },\n               },\n            },\n            {\n               id: ids.fieldBatchEntries,\n               view: \"select\",\n               label: L(\"Batch->JE[]\"),\n               value: this.fieldBatchEntries,\n               name: \"fieldBatchEntries\",\n               options: batchFields,\n               hidden: true,\n            },\n            {\n               id: ids.fieldBatchFinancialPeriod,\n               view: \"select\",\n               label: L(\"Batch->FinancialPeriod\"),\n               value: this.fieldBatchFinancialPeriod,\n               name: \"fieldBatchFinancialPeriod\",\n               options: batchFields,\n               hidden: true,\n            },\n            {\n               id: ids.objectJE,\n               view: \"select\",\n               label: L(\"Journal Entry Object\"),\n               value: this.objectJE,\n               name: \"objectJE\",\n               options: objectList,\n               on: {\n                  onChange(newVal, oldVal) {\n                     if (newVal != oldVal) {\n                        // gather new set of jeFields\n                        jeFields = defaultFields(newVal);\n                        // rebuild the associated list of Fields to pick\n                        updateFields(fieldPickersJE, jeFields);\n                     }\n                  },\n               },\n            },\n            {\n               id: ids.fieldJEAccount,\n               view: \"select\",\n               label: L(\"JE->Account\"),\n               value: this.fieldJEAccount,\n               name: \"fieldJEAccount\",\n               options: jeFields,\n               hidden: true,\n            },\n            {\n               id: ids.fieldJERC,\n               view: \"select\",\n               label: L(\"JE->RC\"),\n               value: this.fieldJERC,\n               name: \"fieldJERC\",\n               options: jeFields,\n               hidden: true,\n            },\n            {\n               id: ids.fieldJEStatus,\n               view: \"select\",\n               label: L(\"JE->Status\"),\n               value: this.fieldJEStatus,\n               name: \"fieldJEStatus\",\n               options: jeFields,\n               hidden: true,\n               on: {\n                  onChange(newVal, oldVal) {\n                     if (newVal != oldVal) {\n                        onStatusComplete(newVal);\n                     }\n                  },\n               },\n            },\n            {\n               id: ids.fieldJEStatusComplete,\n               view: \"select\",\n               label: L(\"JE->Status->Complete\"),\n               value: this.fieldJEStatusComplete,\n               name: \"fieldJEStatusComplete\",\n               options: jeFieldStatusValues,\n               hidden: true,\n            },\n            {\n               id: ids.objectBR,\n               view: \"select\",\n               label: L(\"Balance Record\"),\n               value: this.objectBR,\n               name: \"objectBR\",\n               options: objectList,\n               on: {\n                  onChange(newVal, oldVal) {\n                     if (newVal != oldVal) {\n                        // gather new set of jeFields\n                        brFields = defaultFields(newVal);\n                        // rebuild the associated list of Fields to pick\n                        updateFields(fieldPickersBR, brFields);\n                     }\n                  },\n               },\n            },\n            {\n               id: ids.fieldBRFinancialPeriod,\n               view: \"select\",\n               label: L(\"BR->FP\"),\n               value: this.fieldBRFinancialPeriod,\n               name: \"fieldBRFinancialPeriod\",\n               options: brFields,\n               hidden: true,\n            },\n            {\n               id: ids.fieldBRAccount,\n               view: \"select\",\n               label: L(\"BR->Account\"),\n               value: this.fieldBRAccount,\n               name: \"fieldBRAccount\",\n               options: brFields,\n               hidden: true,\n            },\n            {\n               id: ids.fieldBRRC,\n               view: \"select\",\n               label: L(\"BR->RC\"),\n               value: this.fieldBRRC,\n               name: \"fieldBRRC\",\n               options: brFields,\n               hidden: true,\n            },\n            {\n               id: ids.fieldBREntries,\n               view: \"select\",\n               label: L(\"BR->Entries\"),\n               value: this.fieldBREntries,\n               name: \"fieldBREntries\",\n               options: brFields,\n               hidden: true,\n            },\n         ],\n      };\n\n      webix.ui(ui, $$(id));\n\n      // if there are already default values for our Objects,\n      // unhide the field selectors:\n      if (this.objectBatch && this.objectBatch != 0) {\n         updateFields(fieldPickersBatch, batchFields);\n      }\n\n      if (this.objectJE && this.objectJE != 0) {\n         updateFields(fieldPickersJE, jeFields);\n      }\n\n      if (this.fieldJEStatus) {\n         onStatusComplete(this.fieldJEStatus);\n      }\n\n      if (this.objectBR && this.objectBR != 0) {\n         updateFields(fieldPickersBR, brFields);\n      }\n\n      $$(id).show();\n   }\n\n   /**\n    * propertiesStash()\n    * pull our values from our property panel.\n    * @param {string} id\n    *        the webix $$(id) of the properties panel area.\n    */\n   propertiesStash(id) {\n      var ids = this.propertyIDs(id);\n      this.name = this.property(ids.name);\n\n      this.defaults.settings.forEach((s) => {\n         this[s] = this.property(ids[s]);\n      });\n   }\n};\n","const AccountingFPCloseCore = require(\"../../../core/process/tasks/ABProcessTaskServiceAccountingFPCloseCore.js\");\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class AccountingFPClose extends AccountingFPCloseCore {\n   ////\n   //// Process Instance Methods\n   ////\n\n   propertyIDs(id) {\n      return {\n         name: `${id}_name`,\n         processFPValue: `${id}_processFPValue`,\n         objectFP: `${id}_objectFP`,\n         objectGL: `${id}_objectGL`,\n         objectAcc: `${id}_objectAcc`,\n         fieldFPStart: `${id}_fieldFPStart`,\n         fieldFPOpen: `${id}_fieldFPOpen`,\n         fieldFPStatus: `${id}_fieldFPStatus`,\n         fieldFPActive: `${id}_fieldFPActive`,\n         fieldGLStarting: `${id}_fieldGLStarting`,\n         fieldGLRunning: `${id}_fieldGLRunning`,\n         fieldGLAccount: `${id}_fieldGLAccount`,\n         fieldGLRc: `${id}_fieldGLRc`,\n         fieldGLDebit: `${id}fieldGLDebit`,\n         fieldGLCredit: `${id}_fieldGLCredit`,\n         fieldAccType: `${id}_fieldAccType`,\n         fieldAccAsset: `${id}_fieldAccAsset`,\n         fieldAccExpense: `${id}_fieldAccExpense`,\n         fieldAccLiabilities: `${id}_fieldAccLiabilities`,\n         fieldAccEquity: `${id}_fieldAccEquity`,\n         fieldAccIncome: `${id}_fieldAccIncome`,\n      };\n   }\n\n   /**\n    * propertiesShow()\n    * display the properties panel for this Process Element.\n    * @param {string} id\n    *        the webix $$(id) of the properties panel area.\n    */\n   propertiesShow(id) {\n      var ids = this.propertyIDs(id);\n\n      var processValues = [{ id: 0, value: L(\"Select a Process Value\") }];\n      var processDataFields = this.process.processDataFields(this);\n      (processDataFields || []).forEach((row) => {\n         processValues.push({ id: row.key, value: row.label });\n      });\n\n      var objectList = this.AB.objects().map((o) => {\n         return { id: o.id, value: o.label || o.name, object: o };\n      });\n      objectList.unshift({\n         id: 0,\n         value: L(\"Select an Object\"),\n      });\n\n      let getFieldOptions = (objID) => {\n         let fields = [\n            {\n               id: 0,\n               value: L(\"Select a Field\"),\n            },\n         ];\n\n         if (objID) {\n            var entry = objectList.find((o) => o.id == objID);\n            if (entry && entry.object) {\n               entry.object.fields().forEach((f) => {\n                  fields.push({ id: f.id, value: f.label, field: f });\n               });\n            }\n         }\n         return fields;\n      };\n\n      let getStatusFieldOptions = (statusFieldId) => {\n         let result = [];\n         let fpObject = this.AB.objectByID(this.objectFP);\n         if (!fpObject) return result;\n\n         let fpStatusField = fpObject.fieldByID(statusFieldId);\n         if (\n            !fpStatusField ||\n            !fpStatusField.settings ||\n            !fpStatusField.settings.options\n         )\n            return result;\n\n         result = (fpStatusField.settings.options || []).map((opt) => {\n            return {\n               id: opt.id,\n               value: opt.text,\n            };\n         });\n\n         return result;\n      };\n\n      let updateFPFields = (fpFields) => {\n         [ids.fieldFPStart, ids.fieldFPOpen, ids.fieldFPStatus].forEach(\n            (fieldGLElem) => {\n               $$(fieldGLElem).define(\"options\", fpFields);\n               $$(fieldGLElem).refresh();\n            }\n         );\n      };\n\n      let updateFPStatusFields = (fpStatusOptions) => {\n         $$(ids.fieldFPActive).define(\"options\", fpStatusOptions);\n         $$(ids.fieldFPActive).refresh();\n      };\n\n      let updateGLFields = (glFields) => {\n         [\n            ids.fieldGLRunning,\n            ids.fieldGLAccount,\n            ids.fieldGLRc,\n            ids.fieldGLDebit,\n            ids.fieldGLCredit,\n         ].forEach((fieldGLElem) => {\n            $$(fieldGLElem).define(\"options\", glFields);\n            $$(fieldGLElem).refresh();\n         });\n      };\n\n      let updateAccFields = (accFields) => {\n         $$(ids.fieldAccType).define(\"options\", accFields);\n         $$(ids.fieldAccType).refresh();\n      };\n\n      let updateAccTypeOptions = (accTypeOptions) => {\n         [\n            ids.fieldAccAsset,\n            ids.fieldAccExpense,\n            ids.fieldAccLiabilities,\n            ids.fieldAccEquity,\n            ids.fieldAccIncome,\n         ].forEach((fieldGLElem) => {\n            $$(fieldGLElem).define(\"options\", accTypeOptions);\n            $$(fieldGLElem).refresh();\n         });\n      };\n\n      let getListOptions = (objectId, fieldId) => {\n         let result = [];\n         let object = this.AB.objectByID(objectId);\n         if (!object) return result;\n\n         let fpStatusField = object.fieldByID(fieldId);\n         if (\n            !fpStatusField ||\n            !fpStatusField.settings ||\n            !fpStatusField.settings.options\n         )\n            return result;\n\n         result = (fpStatusField.settings.options || []).map((opt) => {\n            return {\n               id: opt.id,\n               value: opt.text,\n            };\n         });\n\n         return result;\n      };\n\n      let fpFields = getFieldOptions(this.objectFP);\n      let glFields = getFieldOptions(this.objectGL);\n      let accFields = getFieldOptions(this.objectAcc);\n      let fpStatusFields = getStatusFieldOptions(this.fieldFPStatus);\n      let accTypeOptions = getListOptions(this.objectAcc, this.fieldAccType);\n\n      var ui = {\n         id: id,\n         view: \"form\",\n         elementsConfig: {\n            labelWidth: 200,\n         },\n         elements: [\n            {\n               id: ids.name,\n               view: \"text\",\n               label: L(\"Name\"),\n               name: \"name\",\n               value: this.name,\n            },\n            {\n               id: ids.processFPValue,\n               view: \"select\",\n               label: L(\"Process Fiscal Period Value\"),\n               value: this.processFPValue,\n               name: \"processFPValue\",\n               options: processValues,\n            },\n            {\n               id: ids.objectFP,\n               view: \"select\",\n               label: L(\"FP Object\"),\n               value: this.objectFP,\n               name: \"objectFP\",\n               options: objectList,\n               on: {\n                  onChange(newVal, oldVal) {\n                     if (newVal != oldVal) {\n                        // gather new set of batchFields\n                        fpFields = getFieldOptions(newVal);\n                        // rebuild the associated list of Fields to pick\n                        updateFPFields(fpFields);\n                     }\n                  },\n               },\n            },\n            {\n               id: ids.objectGL,\n               view: \"select\",\n               label: L(\"GL Object\"),\n               value: this.objectGL,\n               name: \"objectGL\",\n               options: objectList,\n               on: {\n                  onChange(newVal, oldVal) {\n                     if (newVal != oldVal) {\n                        // gather new set of batchFields\n                        glFields = getFieldOptions(newVal);\n                        // rebuild the associated list of Fields to pick\n                        updateGLFields(glFields);\n                     }\n                  },\n               },\n            },\n            {\n               id: ids.objectAcc,\n               view: \"select\",\n               label: L(\"Account Object\"),\n               value: this.objectAcc,\n               name: \"objectAcc\",\n               options: objectList,\n               on: {\n                  onChange(newVal, oldVal) {\n                     if (newVal != oldVal) {\n                        accFields = getFieldOptions(newVal);\n                        updateAccFields(accFields);\n                     }\n                  },\n               },\n            },\n            {\n               id: ids.fieldFPStart,\n               view: \"select\",\n               label: L(\"FP -> Start\"),\n               value: this.fieldFPStart,\n               name: \"fieldFPStart\",\n               options: fpFields,\n            },\n            {\n               id: ids.fieldFPOpen,\n               view: \"select\",\n               label: L(\"FP -> Open\"),\n               value: this.fieldFPOpen,\n               name: \"fieldFPOpen\",\n               options: fpFields,\n            },\n            {\n               id: ids.fieldFPStatus,\n               view: \"select\",\n               label: L(\"FP -> Status\"),\n               value: this.fieldFPStatus,\n               name: \"fieldFPStatus\",\n               options: fpFields,\n               on: {\n                  onChange(newVal, oldVal) {\n                     if (newVal != oldVal) {\n                        fpStatusFields = getStatusFieldOptions(newVal);\n                        updateFPStatusFields(fpStatusFields);\n                     }\n                  },\n               },\n            },\n            {\n               id: ids.fieldFPActive,\n               view: \"select\",\n               label: L(\"FP -> Active\"),\n               value: this.fieldFPActive,\n               name: \"fieldFPActive\",\n               options: fpStatusFields,\n            },\n            {\n               id: ids.fieldGLStarting,\n               view: \"select\",\n               label: L(\"GL -> Starting BL\"),\n               value: this.fieldGLStarting,\n               name: \"fieldGLStarting\",\n               options: glFields,\n            },\n            {\n               id: ids.fieldGLRunning,\n               view: \"select\",\n               label: L(\"GL -> Running BL\"),\n               value: this.fieldGLRunning,\n               name: \"fieldGLRunning\",\n               options: glFields,\n            },\n            {\n               id: ids.fieldGLAccount,\n               view: \"select\",\n               label: L(\"GL -> Account\"),\n               value: this.fieldGLAccount,\n               name: \"fieldGLAccount\",\n               options: glFields,\n            },\n            {\n               id: ids.fieldGLRc,\n               view: \"select\",\n               label: L(\"GL -> RC\"),\n               value: this.fieldGLRc,\n               name: \"fieldGLRc\",\n               options: glFields,\n            },\n            {\n               id: ids.fieldGLDebit,\n               view: \"select\",\n               label: L(\"GL -> Debit\"),\n               value: this.fieldGLDebit,\n               name: \"fieldGLDebit\",\n               options: glFields,\n            },\n            {\n               id: ids.fieldGLCredit,\n               view: \"select\",\n               label: L(\"GL -> Credit\"),\n               value: this.fieldGLCredit,\n               name: \"fieldGLCredit\",\n               options: glFields,\n            },\n            {\n               id: ids.fieldAccType,\n               view: \"select\",\n               label: L(\"Acc -> Type\"),\n               value: this.fieldAccType,\n               name: \"fieldAccType\",\n               options: accFields,\n               on: {\n                  onChange: (newVal, oldVal) => {\n                     if (newVal != oldVal) {\n                        accTypeOptions = getListOptions(\n                           this.objectAcc || $$(ids.objectAcc).getValue(),\n                           newVal\n                        );\n                        updateAccTypeOptions(accTypeOptions);\n                     }\n                  },\n               },\n            },\n            {\n               id: ids.fieldAccAsset,\n               view: \"select\",\n               label: L(\"Acc -> Asset\"),\n               value: this.fieldAccAsset,\n               name: \"fieldAccAsset\",\n               options: accTypeOptions,\n            },\n            {\n               id: ids.fieldAccExpense,\n               view: \"select\",\n               label: L(\"Acc -> Expense\"),\n               value: this.fieldAccExpense,\n               name: \"fieldAccExpense\",\n               options: accTypeOptions,\n            },\n            {\n               id: ids.fieldAccLiabilities,\n               view: \"select\",\n               label: L(\"Acc -> Liabilities\"),\n               value: this.fieldAccLiabilities,\n               name: \"fieldAccLiabilities\",\n               options: accTypeOptions,\n            },\n            {\n               id: ids.fieldAccEquity,\n               view: \"select\",\n               label: L(\"Acc -> Equity\"),\n               value: this.fieldAccEquity,\n               name: \"fieldAccEquity\",\n               options: accTypeOptions,\n            },\n            {\n               id: ids.fieldAccIncome,\n               view: \"select\",\n               label: L(\"Acc -> Income\"),\n               value: this.fieldAccIncome,\n               name: \"fieldAccIncome\",\n               options: accTypeOptions,\n            },\n         ],\n      };\n\n      webix.ui(ui, $$(id));\n\n      $$(id).show();\n   }\n\n   /**\n    * propertiesStash()\n    * pull our values from our property panel.\n    * @param {string} id\n    *        the webix $$(id) of the properties panel area.\n    */\n   propertiesStash(id) {\n      var ids = this.propertyIDs(id);\n      this.name = this.property(ids.name);\n\n      // TIP: keep the .settings entries == ids[s] keys and this will\n      // remain simple:\n      this.defaults.settings.forEach((s) => {\n         this[s] = this.property(ids[s]);\n      });\n   }\n};\n","const AccountingFPYearCloseCore = require(\"../../../core/process/tasks/ABProcessTaskServiceAccountingFPYearCloseCore.js\");\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class AccountingFPYearClose extends AccountingFPYearCloseCore {\n   ////\n   //// Process Instance Methods\n   ////\n   propertyIDs(id) {\n      return {\n         name: `${id}_name`,\n         processFPYearValue: `${id}_processFPYearValue`,\n         objectFPYear: `${id}_objectFPYear`,\n         objectFPMonth: `${id}_objectFPMonth`,\n         objectGL: `${id}_objectGL`,\n         objectAccount: `${id}_objectAccount`,\n         valueFundBalances: `${id}_valueFundBalances`,\n         valueNetIncome: `${id}_valueNetIncome`,\n         fieldFPYearStart: `${id}_fieldFPYearStart`,\n         fieldFPYearEnd: `${id}_fieldFPYearEnd`,\n         fieldFPYearStatus: `${id}_fieldFPYearStatus`,\n         fieldFPYearActive: `${id}_fieldFPYearActive`,\n         fieldFPMonthStart: `${id}_fieldFPMonthStart`,\n         fieldFPMonthEnd: `${id}_fieldFPMonthEnd`,\n         fieldGLStartBalance: `${id}_fieldGLStartBalance`,\n         fieldGLRunningBalance: `${id}_fieldGLRunningBalance`,\n         fieldGLrc: `${id}_fieldGLrc`,\n         fieldAccNumber: `${id}_fieldAccNumber`,\n         fieldAccType: `${id}_fieldAccType`,\n         fieldAccTypeIncome: `${id}_fieldAccTypeIncome`,\n         fieldAccTypeExpense: `${id}_fieldAccTypeExpense`,\n         fieldAccTypeEquity: `${id}_fieldAccTypeEquity`,\n      };\n   }\n\n   /**\n    * propertiesShow()\n    * display the properties panel for this Process Element.\n    * @param {string} id\n    *        the webix $$(id) of the properties panel area.\n    */\n   propertiesShow(id) {\n      var ids = this.propertyIDs(id);\n\n      var processValues = [{ id: 0, value: L(\"Select a Process Value\") }];\n      var processDataFields = this.process.processDataFields(this);\n      (processDataFields || []).forEach((row) => {\n         processValues.push({ id: row.key, value: row.label });\n      });\n\n      var objectList = this.AB.objects().map((o) => {\n         return { id: o.id, value: o.label || o.name, object: o };\n      });\n      objectList.unshift({\n         id: 0,\n         value: L(\"Select an Object\"),\n      });\n\n      let getFieldOptions = (objID, fieldKey) => {\n         let fields = [\n            {\n               id: 0,\n               value: L(\"Select a Field\"),\n            },\n         ];\n\n         if (objID) {\n            var entry = objectList.find((o) => o.id == objID);\n            if (entry && entry.object) {\n               entry.object\n                  .fields((f) => f.key == fieldKey)\n                  .forEach((f) => {\n                     fields.push({ id: f.id, value: f.label, field: f });\n                  });\n            }\n         }\n         return fields;\n      };\n\n      let getListOptions = (objectId, fieldId) => {\n         let result = [];\n         let object = this.AB.objectByID(objectId);\n         if (!object) return result;\n\n         let fpStatusField = object.fieldByID(fieldId);\n         if (\n            !fpStatusField ||\n            !fpStatusField.settings ||\n            !fpStatusField.settings.options\n         )\n            return result;\n\n         result = (fpStatusField.settings.options || []).map((opt) => {\n            return {\n               id: opt.id,\n               value: opt.text,\n            };\n         });\n\n         return result;\n      };\n\n      let updateAccNumberFields = (accNumberFields) => {\n         $$(ids.fieldAccNumber).define(\"options\", accNumberFields);\n         $$(ids.fieldAccNumber).refresh();\n      };\n\n      let updateAccFields = (accFields) => {\n         $$(ids.fieldAccType).define(\"options\", accFields);\n         $$(ids.fieldAccType).refresh();\n      };\n\n      let updateAccTypeOptions = (accTypeOptions) => {\n         [\n            ids.fieldAccTypeIncome,\n            ids.fieldAccTypeExpense,\n            ids.fieldAccTypeEquity,\n         ].forEach((fieldGLElem) => {\n            $$(fieldGLElem).define(\"options\", accTypeOptions);\n            $$(fieldGLElem).refresh();\n         });\n      };\n\n      let updateFPYearDateOptions = (fpYearDateOptions) => {\n         [ids.fieldFPYearStart, ids.fieldFPYearEnd].forEach((fieldGLElem) => {\n            $$(fieldGLElem).define(\"options\", fpYearDateOptions);\n            $$(fieldGLElem).refresh();\n         });\n      };\n\n      let updateFPYearStatusOptions = (fpYearStatusFields) => {\n         $$(ids.fieldFPYearStatus).define(\"options\", fpYearStatusFields);\n         $$(ids.fieldFPYearStatus).refresh();\n      };\n\n      let updateFPYearActiveOptions = (fpYearStatusOptions) => {\n         $$(ids.fieldFPYearActive).define(\"options\", fpYearStatusOptions);\n         $$(ids.fieldFPYearActive).refresh();\n      };\n\n      let updateFPMonthDateFields = (fpMonthDateOpts) => {\n         [ids.fieldFPMonthStart, ids.fieldFPMonthEnd].forEach((fieldGLElem) => {\n            $$(fieldGLElem).define(\"options\", fpMonthDateOpts);\n            $$(fieldGLElem).refresh();\n         });\n      };\n\n      let updateGlNumberFields = (glNumberOptions) => {\n         [ids.fieldGLStartBalance, ids.fieldGLRunningBalance].forEach(\n            (fieldGLElem) => {\n               $$(fieldGLElem).define(\"options\", glNumberOptions);\n               $$(fieldGLElem).refresh();\n            }\n         );\n      };\n\n      let updateGlConnectFields = (glRcOptions) => {\n         $$(ids.fieldGLrc).define(\"options\", glRcOptions);\n         $$(ids.fieldGLrc).refresh();\n      };\n\n      let fpYearDateFields = getFieldOptions(this.objectFPYear, \"date\");\n      let fpYearStatusFields = getFieldOptions(this.objectFPYear, \"list\");\n      let fpYearStatusOptions = getListOptions(\n         this.objectFPYear,\n         this.fieldFPYearStatus\n      );\n      let fpMonthDateFields = getFieldOptions(this.objectFPMonth, \"date\");\n      let glNumberFields = getFieldOptions(this.objectGL, \"number\");\n      let glRcFields = getFieldOptions(this.objectGL, \"connectObject\");\n      let accNumberFields = getFieldOptions(this.objectAccount, \"number\");\n      let accTypeFields = getFieldOptions(this.objectAccount, \"list\");\n      let accTypeOptions = getListOptions(\n         this.objectAccount,\n         this.fieldAccType\n      );\n\n      var ui = {\n         id: id,\n         view: \"form\",\n         elementsConfig: {\n            labelWidth: 200,\n         },\n         elements: [\n            {\n               id: ids.name,\n               view: \"text\",\n               label: L(\"Name\"),\n               name: \"name\",\n               value: this.name,\n            },\n            {\n               id: ids.processFPYearValue,\n               view: \"select\",\n               label: L(\"Process Fiscal Period Year Value\"),\n               value: this.processFPYearValue,\n               name: \"processFPYearValue\",\n               options: processValues,\n            },\n            {\n               id: ids.objectFPYear,\n               view: \"select\",\n               label: L(\"FP Year Object\"),\n               value: this.objectFPYear,\n               name: \"objectFPYear\",\n               options: objectList,\n               on: {\n                  onChange: (newVal, oldVal) => {\n                     if (newVal != oldVal) {\n                        fpYearDateFields = getFieldOptions(newVal, \"date\");\n                        updateFPYearDateOptions(fpYearDateFields);\n\n                        accTypeFields = getFieldOptions(newVal, \"list\");\n                        updateFPYearStatusOptions(accTypeFields);\n                     }\n                  },\n               },\n            },\n            {\n               id: ids.objectFPMonth,\n               view: \"select\",\n               label: L(\"FP Month Object\"),\n               value: this.objectFPMonth,\n               name: \"objectFPMonth\",\n               options: objectList,\n               on: {\n                  onChange: (newVal, oldVal) => {\n                     if (newVal != oldVal) {\n                        fpMonthDateFields = getFieldOptions(newVal, \"date\");\n                        updateFPMonthDateFields(fpMonthDateFields);\n                     }\n                  },\n               },\n            },\n            {\n               id: ids.objectGL,\n               view: \"select\",\n               label: L(\"Balance Object\"),\n               value: this.objectGL,\n               name: \"objectGL\",\n               options: objectList,\n               on: {\n                  onChange: (newVal, oldVal) => {\n                     if (newVal != oldVal) {\n                        glNumberFields = getFieldOptions(newVal, \"number\");\n                        updateGlNumberFields(glNumberFields);\n\n                        glRcFields = getFieldOptions(newVal, \"connectObject\");\n                        updateGlConnectFields(glRcFields);\n                     }\n                  },\n               },\n            },\n            {\n               id: ids.objectAccount,\n               view: \"select\",\n               label: L(\"Account Object\"),\n               value: this.objectAccount,\n               name: \"objectAccount\",\n               options: objectList,\n               on: {\n                  onChange: (newVal, oldVal) => {\n                     if (newVal != oldVal) {\n                        accTypeFields = getFieldOptions(newVal, \"list\");\n                        updateAccFields(accTypeFields);\n\n                        accNumberFields = getFieldOptions(newVal, \"number\");\n                        updateAccNumberFields(accNumberFields);\n                     }\n                  },\n               },\n            },\n            {\n               id: ids.valueFundBalances,\n               view: \"text\",\n               label: L(\"Fund Balances Code\"),\n               value: this.valueFundBalances,\n               name: \"valueFundBalances\",\n            },\n            {\n               id: ids.valueNetIncome,\n               view: \"text\",\n               label: L(\"Net Income Code\"),\n               value: this.valueNetIncome,\n               name: \"valueNetIncome\",\n            },\n            {\n               id: ids.fieldFPYearStart,\n               view: \"select\",\n               label: L(\"FP Year -> Start\"),\n               value: this.fieldFPYearStart,\n               name: \"fieldFPYearStart\",\n               options: fpYearDateFields,\n            },\n            {\n               id: ids.fieldFPYearEnd,\n               view: \"select\",\n               label: L(\"FP Year -> End\"),\n               value: this.fieldFPYearEnd,\n               name: \"fieldFPYearEnd\",\n               options: fpYearDateFields,\n            },\n            {\n               id: ids.fieldFPYearStatus,\n               view: \"select\",\n               label: L(\"FP Year -> Status\"),\n               value: this.fieldFPYearStatus,\n               name: \"fieldFPYearStatus\",\n               options: fpYearStatusFields,\n               on: {\n                  onChange: (newVal, oldVal) => {\n                     if (newVal != oldVal) {\n                        fpYearStatusOptions = getListOptions(\n                           this.objectFPYear || $$(ids.objectFPYear).getValue(),\n                           newVal\n                        );\n                        updateFPYearActiveOptions(fpYearStatusOptions);\n                     }\n                  },\n               },\n            },\n            {\n               id: ids.fieldFPYearActive,\n               view: \"select\",\n               label: L(\"FP Year -> Active\"),\n               value: this.fieldFPYearActive,\n               name: \"fieldFPYearActive\",\n               options: fpYearStatusOptions,\n            },\n            {\n               id: ids.fieldFPMonthStart,\n               view: \"select\",\n               label: L(\"FP Month -> Start\"),\n               value: this.fieldFPMonthStart,\n               name: \"fieldFPMonthStart\",\n               options: fpMonthDateFields,\n            },\n            {\n               id: ids.fieldFPMonthEnd,\n               view: \"select\",\n               label: L(\"FP Month -> End\"),\n               value: this.fieldFPMonthEnd,\n               name: \"fieldFPMonthEnd\",\n               options: fpMonthDateFields,\n            },\n            {\n               id: ids.fieldGLStartBalance,\n               view: \"select\",\n               label: L(\"GL -> Start Balance\"),\n               value: this.fieldGLStartBalance,\n               name: \"fieldGLStartBalance\",\n               options: glNumberFields,\n            },\n            {\n               id: ids.fieldGLRunningBalance,\n               view: \"select\",\n               label: L(\"GL -> Running Balance\"),\n               value: this.fieldGLRunningBalance,\n               name: \"fieldGLRunningBalance\",\n               options: glNumberFields,\n            },\n            {\n               id: ids.fieldGLrc,\n               view: \"select\",\n               label: L(\"GL -> RC\"),\n               value: this.fieldGLrc,\n               name: \"fieldGLrc\",\n               options: glRcFields,\n            },\n            {\n               id: ids.fieldAccNumber,\n               view: \"select\",\n               label: L(\"Acc -> Account Number\"),\n               value: this.fieldAccNumber,\n               name: \"fieldAccNumber\",\n               options: accNumberFields,\n            },\n            {\n               id: ids.fieldAccType,\n               view: \"select\",\n               label: L(\"Acc -> Type\"),\n               value: this.fieldAccType,\n               name: \"fieldAccType\",\n               options: accTypeFields,\n               on: {\n                  onChange: (newVal, oldVal) => {\n                     if (newVal != oldVal) {\n                        accTypeOptions = getListOptions(\n                           this.objectAccount ||\n                              $$(ids.objectAccount).getValue(),\n                           newVal\n                        );\n                        updateAccTypeOptions(accTypeOptions);\n                     }\n                  },\n               },\n            },\n            {\n               id: ids.fieldAccTypeIncome,\n               view: \"select\",\n               label: L(\"Acc -> Income\"),\n               value: this.fieldAccTypeIncome,\n               name: \"fieldAccTypeIncome\",\n               options: accTypeOptions,\n            },\n            {\n               id: ids.fieldAccTypeExpense,\n               view: \"select\",\n               label: L(\"Acc -> Expense\"),\n               value: this.fieldAccTypeExpense,\n               name: \"fieldAccTypeExpense\",\n               options: accTypeOptions,\n            },\n            {\n               id: ids.fieldAccTypeEquity,\n               view: \"select\",\n               label: L(\"Acc -> Equity\"),\n               value: this.fieldAccTypeEquity,\n               name: \"fieldAccTypeEquity\",\n               options: accTypeOptions,\n            },\n         ],\n      };\n\n      webix.ui(ui, $$(id));\n\n      $$(id).show();\n   }\n\n   /**\n    * propertiesStash()\n    * pull our values from our property panel.\n    * @param {string} id\n    *        the webix $$(id) of the properties panel area.\n    */\n   propertiesStash(id) {\n      var ids = this.propertyIDs(id);\n      this.name = this.property(ids.name);\n\n      // TIP: keep the .settings entries == ids[s] keys and this will\n      // remain simple:\n      this.defaults.settings.forEach((s) => {\n         this[s] = this.property(ids[s]);\n      });\n   }\n};\n","const AccountingJEArchiveCore = require(\"../../../core/process/tasks/ABProcessTaskServiceAccountingJEArchiveCore.js\");\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class AccountingJEArchive extends AccountingJEArchiveCore {\n   ////\n   //// Process Instance Methods\n   ////\n\n   propertyIDs(id) {\n      return {\n         name: `${id}_name`,\n         processBatchValue: `${id}_processBatchValue`,\n         objectBatch: `${id}_objectBatch`,\n         objectBalance: `${id}_objectBalance`,\n         objectJE: `${id}_objectJE`,\n         objectJEArchive: `${id}_objectJEArchive`,\n\n         fieldBatchFiscalMonth: `${id}_fieldBatchFiscalMonth`,\n         fieldJeAccount: `${id}_fieldJeAccount`,\n         fieldJeRC: `${id}_fieldJeRC`,\n         fieldJeArchiveBalance: `${id}_fieldJeArchiveBalance`,\n         fieldBrFiscalMonth: `${id}_fieldBrFiscalMonth`,\n         fieldBrAccount: `${id}_fieldBrAccount`,\n         fieldBrRC: `${id}_fieldBrRC`,\n\n         fieldsMatch: `${id}_fieldsMatch`,\n      };\n   }\n\n   /**\n    * propertiesShow()\n    * display the properties panel for this Process Element.\n    * @param {string} id\n    *        the webix $$(id) of the properties panel area.\n    */\n   propertiesShow(id) {\n      let ids = this.propertyIDs(id);\n\n      let processValues = [{ id: 0, value: L(\"Select a Process Value\") }];\n      let processDataFields = this.process.processDataFields(this);\n      (processDataFields || []).forEach((row) => {\n         processValues.push({ id: row.key, value: row.label });\n      });\n\n      let objectList = this.AB.objects().map((o) => {\n         return { id: o.id, value: o.label || o.name, object: o };\n      });\n\n      objectList.unshift({\n         id: 0,\n         value: L(\"Select an Object\"),\n      });\n\n      let getConnectFieldOptions = (objectId) => {\n         let object = this.AB.objectByID(objectId);\n         if (!object) return [];\n\n         let options = object\n            .fields((f) => f.isConnection)\n            .map((f) => {\n               return {\n                  id: f.id,\n                  value: f.label,\n               };\n            });\n\n         options.unshift({\n            id: 0,\n            value: L(\"Select a Field\"),\n         });\n\n         return options;\n      };\n\n      let updateFields = (fieldPickers, fieldValues) => {\n         fieldPickers.forEach((fp) => {\n            var picker = $$(fp);\n            if (picker) {\n               picker.define(\"options\", fieldValues);\n               picker.refresh();\n               picker.show();\n            }\n         });\n      };\n\n      let refreshBatchFields = (objectId) => {\n         let options = getConnectFieldOptions(objectId);\n         updateFields([ids.fieldBatchFiscalMonth], options);\n      };\n\n      let refreshBRFields = (objectId) => {\n         let options = getConnectFieldOptions(objectId);\n         updateFields(\n            [ids.fieldBrAccount, ids.fieldBrFiscalMonth, ids.fieldBrRC],\n            options\n         );\n      };\n\n      let refreshJeFields = (objectId) => {\n         let options = getConnectFieldOptions(objectId);\n         updateFields([ids.fieldJeAccount, ids.fieldJeRC], options);\n      };\n\n      let refreshJeArchiveFields = (objectId) => {\n         let options = getConnectFieldOptions(objectId);\n         updateFields([ids.fieldJeArchiveBalance], options);\n      };\n\n      let refreshFieldsMatch = () => {\n         let $fieldsMatch = $$(ids.fieldsMatch);\n         if (!$fieldsMatch) return;\n\n         // clear form\n         webix.ui([], $fieldsMatch);\n\n         let JEObj = this.AB.objectByID(this.objectJE);\n         if (!JEObj) return;\n\n         let JEArchiveObj = this.AB.objectByID(this.objectJEArchive);\n         if (!JEArchiveObj) return;\n\n         // create JE acrhive field options to the form\n         JEArchiveObj.fields().forEach((f) => {\n            let jeFields = [];\n\n            if (f.isConnection) {\n               jeFields = JEObj.fields((fJe) => {\n                  return (\n                     fJe.isConnection &&\n                     fJe.settings &&\n                     f.settings &&\n                     fJe.settings.linkObject == f.settings.linkObject &&\n                     fJe.settings.linkType == f.settings.linkType &&\n                     fJe.settings.linkViaType == f.settings.linkViaType &&\n                     fJe.settings.isCustomFK == f.settings.isCustomFK\n                  );\n               });\n            } else {\n               jeFields = JEObj.fields((fJe) => fJe.key == f.key);\n            }\n\n            jeFields = jeFields.map((fJe) => {\n               return {\n                  id: fJe.id,\n                  value: fJe.label,\n               };\n            });\n\n            $fieldsMatch.addView({\n               view: \"select\",\n               name: f.id,\n               label: f.label,\n               options: jeFields,\n            });\n         });\n\n         $fieldsMatch.setValues(this.fieldsMatch || {});\n      };\n\n      let fieldBatchList = getConnectFieldOptions(this.objectBatch);\n      let fieldBalanceList = getConnectFieldOptions(this.objectBalance);\n      let fieldJeList = getConnectFieldOptions(this.objectJE);\n      let fieldJeArchiveList = getConnectFieldOptions(this.objectJEArchive);\n\n      let ui = {\n         id: id,\n         view: \"form\",\n         elementsConfig: {\n            labelWidth: 180,\n         },\n         elements: [\n            {\n               id: ids.name,\n               view: \"text\",\n               label: L(\"Name\"),\n               name: \"name\",\n               value: this.name,\n            },\n            {\n               id: ids.processBatchValue,\n               view: \"select\",\n               label: L(\"Process Batch Value\"),\n               value: this.processBatchValue,\n               name: \"processBatchValue\",\n               options: processValues,\n            },\n            {\n               id: ids.objectBatch,\n               view: \"select\",\n               label: L(\"Batch Object\"),\n               value: this.objectBatch,\n               name: \"objectBatch\",\n               options: objectList,\n               on: {\n                  onChange: (newVal) => {\n                     this.objectBatch = newVal;\n                     refreshBatchFields(newVal);\n                  },\n               },\n            },\n            {\n               id: ids.fieldBatchFiscalMonth,\n               view: \"select\",\n               label: L(\"Batch -> Fiscal Month\"),\n               value: this.fieldBatchFiscalMonth,\n               name: \"fieldBatchFiscalMonth\",\n               options: fieldBatchList,\n            },\n            {\n               id: ids.objectBalance,\n               view: \"select\",\n               label: L(\"BR Object\"),\n               value: this.objectBalance,\n               name: \"objectBalance\",\n               options: objectList,\n               on: {\n                  onChange: (newVal) => {\n                     this.objectBalance = newVal;\n                     refreshBRFields(newVal);\n                  },\n               },\n            },\n            {\n               id: ids.fieldBrFiscalMonth,\n               view: \"select\",\n               label: L(\"BR -> Fiscal Month\"),\n               value: this.fieldBrFiscalMonth,\n               name: \"fieldBrFiscalMonth\",\n               options: fieldBalanceList,\n            },\n            {\n               id: ids.fieldBrAccount,\n               view: \"select\",\n               label: L(\"BR -> Account\"),\n               value: this.fieldBrAccount,\n               name: \"fieldBrAccount\",\n               options: fieldBalanceList,\n            },\n            {\n               id: ids.fieldBrRC,\n               view: \"select\",\n               label: L(\"BR -> RC\"),\n               value: this.fieldBrRC,\n               name: \"fieldBrRC\",\n               options: fieldBalanceList,\n            },\n            {\n               id: ids.objectJE,\n               view: \"select\",\n               label: L(\"JE Object\"),\n               value: this.objectJE,\n               name: \"objectJE\",\n               options: objectList,\n               on: {\n                  onChange: (newVal) => {\n                     this.objectJE = newVal;\n                     refreshJeFields(newVal);\n                     refreshFieldsMatch();\n                  },\n               },\n            },\n            {\n               id: ids.fieldJeAccount,\n               view: \"select\",\n               label: L(\"JE -> Account\"),\n               value: this.fieldJeAccount,\n               name: \"fieldJeAccount\",\n               options: fieldJeList,\n            },\n            {\n               id: ids.fieldJeRC,\n               view: \"select\",\n               label: L(\"JE -> RC\"),\n               value: this.fieldJeRC,\n               name: \"fieldJeRC\",\n               options: fieldJeList,\n            },\n            {\n               id: ids.objectJEArchive,\n               view: \"select\",\n               label: L(\"JE Archive Object\"),\n               value: this.objectJEArchive,\n               name: \"objectJEArchive\",\n               options: objectList,\n               on: {\n                  onChange: (newVal) => {\n                     this.objectJEArchive = newVal;\n                     refreshJeArchiveFields(newVal);\n                     refreshFieldsMatch();\n                  },\n               },\n            },\n            {\n               id: ids.fieldJeArchiveBalance,\n               view: \"select\",\n               label: L(\"JE Archive -> BR\"),\n               value: this.fieldJeArchiveBalance,\n               name: \"fieldJeArchiveBalance\",\n               options: fieldJeArchiveList,\n            },\n            {\n               view: \"fieldset\",\n               label: \"Fields Matching\",\n               body: {\n                  id: ids.fieldsMatch,\n                  view: \"form\",\n                  borderless: true,\n                  elements: [],\n               },\n            },\n         ],\n      };\n\n      webix.ui(ui, $$(id));\n\n      $$(id).show();\n\n      refreshFieldsMatch();\n   }\n\n   /**\n    * propertiesStash()\n    * pull our values from our property panel.\n    * @param {string} id\n    *        the webix $$(id) of the properties panel area.\n    */\n   propertiesStash(id) {\n      let ids = this.propertyIDs(id);\n      this.name = this.property(ids.name);\n\n      // TIP: keep the .settings entries == ids[s] keys and this will\n      // remain simple:\n      this.defaults.settings.forEach((s) => {\n         if (s === \"fieldsMatch\") {\n            this[s] = $$(ids.fieldsMatch).getValues();\n         } else {\n            this[s] = this.property(ids[s]);\n         }\n      });\n   }\n};\n","const CalculateTaskCore = require(\"../../../core/process/tasks/ABProcessTaskServiceCalculateCore.js\");\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class CalculateTask extends CalculateTaskCore {\n   ////\n   //// Process Instance Methods\n   ////\n\n   propertyIDs(id) {\n      return {\n         name: `${id}_name`,\n         formulaText: `${id}_formulaText`,\n\n         variablePopup: `${id}_variablePopup`,\n         operatorPopup: `${id}_operatorPopup`,\n      };\n   }\n\n   /**\n    * @method propertiesShow()\n    * display the properties panel for this Process Element.\n    * @param {string} id\n    *        the webix $$(id) of the properties panel area.\n    */\n   propertiesShow(id) {\n      let ids = this.propertyIDs(id);\n\n      let list = (this.process.processDataFields(this) || []).map((item) => {\n         return {\n            id: item.key,\n            value: item.label,\n         };\n      });\n\n      let labelWidth = 120;\n      let ui = {\n         id: id,\n         view: \"form\",\n         elementsConfig: {\n            labelWidth: labelWidth,\n         },\n         elements: [\n            {\n               id: ids.name,\n               view: \"text\",\n               label: L(\"Name\"),\n               name: \"name\",\n               value: this.name,\n            },\n            {\n               id: ids.formulaText,\n               view: \"texthighlight\",\n               height: 200,\n               label: L(\"Formula\"),\n               type: \"textarea\",\n               value: this.formulaText || \"\",\n               highlight: (text) => {\n                  list.forEach(function (item) {\n                     text = text.replace(\n                        new RegExp(`{${item.value}}`, \"g\"),\n                        `<span style='background: #90adb5; color:#000000;'>{${item.value}}</span>`\n                     );\n                  });\n                  return text;\n               },\n            },\n            {\n               cols: [\n                  {\n                     width: labelWidth,\n                     fillspace: true,\n                  },\n                  {\n                     view: \"button\",\n                     css: \"webix_primary\",\n                     type: \"icon\",\n                     icon: \"fa fa-at\",\n                     label: L(\"Parameters\"),\n                     click: function () {\n                        // show popup\n                        $$(ids.variablePopup).show(this.$view);\n                     },\n                  },\n                  {\n                     view: \"button\",\n                     css: \"webix_primary\",\n                     type: \"icon\",\n                     icon: \"fa fa-hashtag\",\n                     label: L(\"Operators\"),\n                     click: function () {\n                        // show popup\n                        $$(ids.operatorPopup).show(this.$view);\n                     },\n                  },\n               ],\n            },\n         ],\n      };\n\n      webix.ui(ui, $$(id));\n\n      if ($$(ids.variablePopup) == null) {\n         webix.ui({\n            id: ids.variablePopup,\n            view: \"popup\",\n            hidden: true,\n            body: {\n               view: \"list\",\n               template: (item) => {\n                  return item.value;\n               },\n               data: list,\n               on: {\n                  onItemClick: function (id, e, node) {\n                     var component = this.getItem(id);\n\n                     insertFormula(`{${component.value}}`);\n\n                     $$(ids.variablePopup).hide();\n                  },\n               },\n            },\n         });\n      }\n\n      if ($$(ids.operatorPopup) == null) {\n         webix.ui({\n            id: ids.operatorPopup,\n            view: \"popup\",\n            hidden: true,\n            width: 180,\n            body: {\n               view: \"list\",\n               template: (item) => {\n                  var template = \"\";\n\n                  if (item.icon) {\n                     template += `<i class=\"fa fa-${item.icon}\" aria-hidden=\"true\"></i> `;\n                  }\n\n                  if (item.label) {\n                     template += item.label;\n                  }\n\n                  return template;\n               },\n               data: [\n                  {\n                     label: L(\"+ Adds\"),\n                     symbol: \"+\",\n                  },\n                  {\n                     label: L(\"- Subtracts\"),\n                     symbol: \"-\",\n                  },\n                  {\n                     label: L(\"* Multiples\"),\n                     symbol: \"*\",\n                  },\n                  {\n                     label: L(\"/ Divides\"),\n                     symbol: \"/\",\n                  },\n                  {\n                     label: L(\"( Open Bracket\"),\n                     symbol: \"(\",\n                  },\n                  {\n                     label: L(\") Closed Bracket\"),\n                     symbol: \")\",\n                  },\n               ],\n               on: {\n                  onItemClick: function (id, e, node) {\n                     var component = this.getItem(id);\n\n                     insertFormula(component.symbol);\n\n                     $$(ids.operatorPopup).hide();\n                  },\n               },\n            },\n         });\n      }\n\n      let insertFormula = (message) => {\n         let formula = $$(ids.formulaText).getValue();\n\n         $$(ids.formulaText).setValue(`${formula}${message} `);\n      };\n\n      $$(id).show();\n   }\n\n   /**\n    * @method propertiesStash()\n    * pull our values from our property panel.\n    * @param {string} id\n    *        the webix $$(id) of the properties panel area.\n    */\n   propertiesStash(id) {\n      let ids = this.propertyIDs(id);\n\n      this.name = this.property(ids.name);\n      this.formulaText = this.property(ids.formulaText);\n   }\n};\n","// import ABApplication from \"./ABApplication\"\n// const ABApplication = require(\"./ABApplication\"); // NOTE: change to require()\nconst ABProcessTaskServiceGetResetPasswordUrlCore = require(\"../../../core/process/tasks/ABProcessTaskServiceGetResetPasswordUrlCore.js\");\n\nmodule.exports = class ABProcessTaskServiceGetResetPasswordUrl extends (\n   ABProcessTaskServiceGetResetPasswordUrlCore\n) {};\n","const InsertRecordTaskCore = require(\"../../../core/process/tasks/ABProcessTaskServiceInsertRecordCore.js\");\n\nmodule.exports = class InsertRecordTask extends InsertRecordTaskCore {};\n","const ABProcessTaskServiceQueryCore = require(\"../../../core/process/tasks/ABProcessTaskServiceQueryCore.js\");\n\nconst ABQLManager = require(\"../../ql/ABQLManager.js\");\n\nmodule.exports = class ABProcessTaskServiceQuery extends (\n   ABProcessTaskServiceQueryCore\n) {\n   constructor(attributes, process, AB) {\n      super(attributes, process, AB);\n   }\n\n   ABQLManager() {\n      return ABQLManager;\n   }\n};\n","const SubProcessCore = require(\"../../../core/process/tasks/ABProcessTaskSubProcessCore.js\");\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class SubProcess extends SubProcessCore {\n   ////\n   //// Process Instance Methods\n   ////\n\n   propertyIDs(id) {\n      return {\n         name: `${id}_name`,\n         isEnable: `${id}_isEnable`,\n         parameterId: `${id}_parameterId`,\n      };\n   }\n\n   /**\n    * @method propertiesShow()\n    * display the properties panel for this Process Element.\n    * @param {string} id\n    *        the webix $$(id) of the properties panel area.\n    */\n   propertiesShow(id) {\n      let ids = this.propertyIDs(id);\n\n      // Pull query tasks option list\n      let parameterOptions = (this.process.processDataFields(this) || []).map(\n         (item) => {\n            return {\n               id: item.key,\n               value: item.label,\n            };\n         }\n      );\n\n      let ui = {\n         id: id,\n         view: \"form\",\n         elementsConfig: {\n            labelWidth: 120,\n         },\n         elements: [\n            {\n               id: ids.name,\n               view: \"text\",\n               label: L(\"Name\"),\n               name: \"name\",\n               value: this.name,\n            },\n            {\n               id: ids.isEnable,\n               view: \"switch\",\n               label: L(\"Enable\"),\n               value: this.isEnable,\n            },\n            {\n               id: ids.parameterId,\n               view: \"richselect\",\n               label: L(\"Repeat for\"),\n               options: parameterOptions,\n               value: this.parameterId,\n            },\n         ],\n      };\n\n      webix.ui(ui, $$(id));\n\n      $$(id).show();\n   }\n\n   /**\n    * @method propertiesStash()\n    * pull our values from our property panel.\n    * @param {string} id\n    *        the webix $$(id) of the properties panel area.\n    */\n   propertiesStash(id) {\n      let ids = this.propertyIDs(id);\n      this.name = this.property(ids.name);\n      this.isEnable = this.property(ids.isEnable);\n      this.parameterId = this.property(ids.parameterId);\n   }\n\n   /**\n    * @method diagramProperties()\n    * return a set of values for the XML shape definition based upon\n    * the current values of this object.\n    * @return {json}\n    */\n   diagramProperties(bpmnModeler) {\n      let props = super.diagramProperties();\n      props = props || [{}];\n      props[0].def = props[0].def || {};\n\n      if (this.parameterId != null) {\n         props[0].def = props[0].def || {};\n         props[0].def.loopCharacteristics = bpmnModeler\n            .get(\"moddle\")\n            .create(\"bpmn:MultiInstanceLoopCharacteristics\");\n         props[0].def.loopCharacteristics.isSequential = true;\n      }\n\n      return props;\n   }\n\n   /**\n    * @method onChange()\n    * update the current Task with information that was relevant\n    * from the provided BPMN:Element\n    * @param {BPMNElement}\n    */\n   onChange(defElement) {\n      let loopCharacteristics =\n         defElement.loopCharacteristics ||\n         defElement.businessObject.loopCharacteristics ||\n         {};\n\n      switch (loopCharacteristics.$type) {\n         case \"bpmn:MultiInstanceLoopCharacteristics\":\n            this.loopType = loopCharacteristics.isSequential\n               ? \"sequential\"\n               : \"parallel\";\n            break;\n         case \"bpmn:StandardLoopCharacteristics\":\n            this.loopType = \"looping\";\n            break;\n      }\n   }\n\n   /**\n    * @method destroy()\n    * destroy this sub process and inside tasks\n    *\n    * @return {Promise}\n    */\n   destroy() {\n      // reuse .destroy function of ABProcess \n      // to clear tasks within this sub process\n      return this.process.destroy.call(this);\n   }\n\n   /**\n    * @method save()\n    * persist this sub process\n    *\n    * @return {Promise}\n    *\t\t\t\t\t\t.resolve( {this} )\n    */\n   save() {\n      // reuse .save function of ABProcess \n      // to update tasks within this sub process\n      return this.process.save.call(this);\n   }\n\n   /**\n    * @method elementNewForModelDefinition()\n    * create a new process element defined by the given BPMN:Element\n    *\n    * the BPMN:Element definition comes from the BPMN Modeler when a new\n    * diagram element is created.\n    *\n    * @param {BPMN:Element} element\n    *        the BPMN modeler diagram element definition\n    * @return {ABProcessParticipant|ABProcessLane|ABProcessElement}\n    * \n    */\n   elementNewForModelDefinition(element) {\n      let task = this.application.processElementNewForModelDefinition(\n         element,\n         this\n      );\n\n      // Add a new task to this sub process\n      if (task) {\n         this.elementAdd(task);\n      }\n      return task;\n   }\n};\n","const ABProcessTaskUserCore = require(\"../../../core/process/tasks/ABProcessTaskUserCore.js\");\n\nmodule.exports = class ABProcessTaskUser extends ABProcessTaskUserCore {};\n","const ABProcessTaskUserApprovalCore = require(\"../../../core/process/tasks/ABProcessTaskUserApprovalCore.js\");\n\nmodule.exports = class ABProcessTaskUserApproval extends (\n   ABProcessTaskUserApprovalCore\n) {};\n","// import ABApplication from \"./ABApplication\"\n// const ABApplication = require(\"./ABApplication\"); // NOTE: change to require()\nconst ABProcessTaskUserExternalCore = require(\"../../../core/process/tasks/ABProcessTaskUserExternalCore.js\");\n\nmodule.exports = class ABProcessTaskUserExternal extends (\n   ABProcessTaskUserExternalCore\n) {};\n","// import ABApplication from \"./ABApplication\"\n// const ABApplication = require(\"./ABApplication\"); // NOTE: change to require()\nconst ABProcessTriggerCore = require(\"../../../core/process/tasks/ABProcessTriggerCore.js\");\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABProcessTrigger extends ABProcessTriggerCore {\n   propertyIDs(id) {\n      return {\n         name: `${id}_name`,\n      };\n   }\n\n   /**\n    * propertiesShow()\n    * display the properties panel for this Process Element.\n    * @param {string} id\n    *        the webix $$(id) of the properties panel area.\n    */\n   propertiesShow(id) {\n      var ids = this.propertyIDs(id);\n\n      var ui = {\n         id: id,\n         rows: [\n            {\n               id: ids.name,\n               view: \"text\",\n               label: L(\"Name\"),\n               name: \"name\",\n               value: this.name,\n            },\n         ],\n      };\n\n      webix.ui(ui, $$(id));\n\n      $$(id).show();\n   }\n\n   /**\n    * propertiesStash()\n    * pull our values from our property panel.\n    * @param {string} id\n    *        the webix $$(id) of the properties panel area.\n    */\n   propertiesStash(id) {\n      var ids = this.propertyIDs(id);\n      this.name = this.property(ids.name);\n   }\n};\n","// import ABApplication from \"./ABApplication\"\n// const ABApplication = require(\"./ABApplication\"); // NOTE: change to require()\nconst ABProcessTriggerLifecycleCore = require(\"../../../core/process/tasks/ABProcessTriggerLifecycleCore.js\");\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABProcessTriggerLifecycle extends (\n   ABProcessTriggerLifecycleCore\n) {\n   propertyIDs(id) {\n      return {\n         name: `${id}_name`,\n         objList: `${id}_objlist`,\n         lifecycleList: `${id}_lifecycleList`,\n      };\n   }\n\n   /**\n    * propertiesShow()\n    * display the properties panel for this Process Element.\n    * @param {string} id\n    *        the webix $$(id) of the properties panel area.\n    */\n   propertiesShow(id) {\n      var ids = this.propertyIDs(id);\n\n      var allObjects = this.application.objectsIncluded();\n      var listObj = [];\n      allObjects.forEach((obj) => {\n         listObj.push({ id: obj.id, value: obj.label });\n      });\n\n      var ui = {\n         view: \"form\",\n         id: id,\n         elements: [\n            {\n               id: ids.name,\n               view: \"text\",\n               label: L(\"Name\"),\n               name: \"name\",\n               value: this.name,\n            },\n            {\n               id: ids.objList,\n               view: \"select\",\n               label: L(\"Object\"),\n               value: this.objectID,\n               options: listObj,\n            },\n            {\n               id: ids.lifecycleList,\n               view: \"select\",\n               label: L(\"lifecycle\"),\n               value: this.lifecycleKey,\n               options: [\n                  { id: \"added\", value: L(\"after Add\") },\n                  { id: \"updated\", value: L(\"after Update\") },\n                  { id: \"deleted\", value: L(\"after Delete\") },\n               ],\n            },\n         ],\n      };\n\n      webix.ui(ui, $$(id));\n\n      $$(id).show();\n   }\n\n   /**\n    * propertiesStash()\n    * pull our values from our property panel.\n    * @param {string} id\n    *        the webix $$(id) of the properties panel area.\n    */\n   propertiesStash(id) {\n      var ids = this.propertyIDs(id);\n      this.name = this.property(ids.name);\n      this.objectID = this.property(ids.objList);\n      this.lifecycleKey = this.property(ids.lifecycleList);\n      this.triggerKey = `${this.objectID}.${this.lifecycleKey}`;\n   }\n};\n","const ABProcessTriggerTimerCore = require(\"../../../core/process/tasks/ABProcessTriggerTimerCore.js\");\n\nconst START_URL = \"/process/timer/#id#/start\";\nconst STOP_URL = \"/process/timer/#id#/stop\";\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABProcessTriggerTimer extends ABProcessTriggerTimerCore {\n   propertyIDs(id) {\n      return {\n         name: `${id}_name`,\n         repeatEvery: `${id}_repeatEvery`,\n         repeatTime: `${id}_repeatTime`,\n         repeatOnPanel: `${id}_repeatOnPanel`,\n         repeatDaily: `${id}_repeatDaily`,\n         repeatWeekly: `${id}_repeatWeekly`,\n         repeatMonthly: `${id}_repeatMonthly`,\n         isEnabled: `${id}_isEnabled`,\n      };\n   }\n\n   /**\n    * @function propertiesShow()\n    * display the properties panel for this Process Element.\n    * @param {string} id\n    *        the webix $$(id) of the properties panel area.\n    */\n   propertiesShow(id) {\n      let ids = this.propertyIDs(id);\n      let defaultValues = ABProcessTriggerTimer.defaults();\n\n      let dayOptions = [];\n      for (let day = 1; day <= 31; day++) {\n         dayOptions.push({\n            id: day,\n            value: day,\n         });\n      }\n      // dayOptions.push({\n      //    id: \"L\",\n      //    value: \"Last\"\n      // });\n\n      const LABEL_WIDTH = 120;\n      let ui = {\n         view: \"form\",\n         id: id,\n         elements: [\n            {\n               id: ids.name,\n               view: \"text\",\n               label: L(\"Name\"),\n               labelWidth: LABEL_WIDTH,\n               name: \"name\",\n               value: this.name,\n            },\n            {\n               id: ids.repeatEvery,\n               view: \"richselect\",\n               name: \"repeatEvery\",\n               label: L(\"Repeat every\"),\n               labelWidth: LABEL_WIDTH,\n               value: this.repeatEvery || defaultValues.repeatEvery,\n               options: [\n                  { id: \"daily\", value: L(\"Daily\") },\n                  {\n                     id: \"weekly\",\n                     value: L(\"Weekly\"),\n                  },\n                  {\n                     id: \"monthly\",\n                     value: L(\"Monthly\"),\n                  },\n               ],\n               on: {\n                  onChange: (repeatEvery) => {\n                     $$(ids.repeatOnPanel).showBatch(repeatEvery);\n                  },\n               },\n            },\n            {\n               id: ids.repeatTime,\n               view: \"datepicker\",\n               name: \"repeatTime\",\n               label: L(\"Time\"),\n               labelWidth: LABEL_WIDTH,\n               value: this.repeatTime || defaultValues.repeatTime,\n               timepicker: true,\n               type: \"time\",\n               multiselect: false,\n            },\n            {\n               view: \"multiview\",\n               id: ids.repeatOnPanel,\n               cells: [\n                  {\n                     view: \"radio\",\n                     id: ids.repeatDaily,\n                     label: \" \",\n                     labelWidth: LABEL_WIDTH,\n                     batch: \"daily\",\n                     vertical: true,\n                     value: this.repeatDaily || defaultValues.repeatDaily,\n                     options: [\n                        { id: \"day\", value: L(\"Day\") },\n                        { id: \"weekday\", value: L(\"Weekday\") },\n                     ],\n                  },\n                  {\n                     view: \"multiselect\",\n                     id: ids.repeatWeekly,\n                     labelWidth: LABEL_WIDTH,\n                     label: L(\"Every week on:\"),\n                     batch: \"weekly\",\n                     value: this.repeatWeekly || defaultValues.repeatWeekly,\n                     options: [\n                        {\n                           id: \"SUN\",\n                           value: L(\"Sunday\"),\n                        },\n                        {\n                           id: \"MON\",\n                           value: L(\"Monday\"),\n                        },\n                        {\n                           id: \"TUE\",\n                           value: L(\"Tuesday\"),\n                        },\n                        {\n                           id: \"WED\",\n                           value: L(\"Wednesday\"),\n                        },\n                        {\n                           id: \"THU\",\n                           value: L(\"Thursday\"),\n                        },\n                        {\n                           id: \"FRI\",\n                           value: L(\"Friday\"),\n                        },\n                        {\n                           id: \"SAT\",\n                           value: L(\"Saturday\"),\n                        },\n                     ],\n                  },\n                  {\n                     view: \"layout\",\n                     batch: \"monthly\",\n                     rows: [\n                        {\n                           id: ids.repeatMonthly,\n                           view: \"richselect\",\n                           labelWidth: LABEL_WIDTH,\n                           label: L(\"Monthly on day\"),\n                           options: dayOptions,\n                           value:\n                              this.repeatMonthly || defaultValues.repeatMonthly,\n                        },\n                     ],\n                  },\n               ],\n            },\n            {\n               id: ids.isEnabled,\n               view: \"switch\",\n               label: L(\"Enable\"),\n               labelWidth: LABEL_WIDTH,\n               value: this.isEnabled,\n            },\n         ],\n      };\n\n      webix.ui(ui, $$(id));\n\n      $$(id).show();\n      $$(ids.repeatOnPanel).showBatch(\n         this.repeatEvery || defaultValues.repeatEvery\n      );\n   }\n\n   /**\n    * @function propertiesStash()\n    * pull our values from our property panel.\n    * @param {string} id\n    *        the webix $$(id) of the properties panel area.\n    */\n   propertiesStash(id) {\n      let ids = this.propertyIDs(id);\n      this.name = $$(ids.name).getValue();\n      this.repeatEvery = $$(ids.repeatEvery).getValue();\n      this.repeatTime = $$(ids.repeatTime).getValue();\n      this.repeatDaily = $$(ids.repeatDaily).getValue();\n      this.repeatWeekly = $$(ids.repeatWeekly).getValue();\n      this.repeatMonthly = $$(ids.repeatMonthly).getValue();\n      this.isEnabled = $$(ids.isEnabled).getValue();\n      this.triggerKey =\n         this.triggerKey == null || this.triggerKey == \"triggerKey.??\"\n            ? `timer.${this.id || this.AB.uuid()}`\n            : this.triggerKey;\n   }\n\n   /**\n    * @method save()\n    * persist this instance of ABObject with it's parent ABApplication\n    * @return {Promise}\n    */\n   save() {\n      return (\n         Promise.resolve()\n            .then(() => super.save())\n            // Restart the timer\n            .then((result) => {\n               return this.AB.Network.put({\n                  url: (this.isEnabled ? START_URL : STOP_URL).replace(\n                     \"#id#\",\n                     this.id\n                  ),\n               });\n            })\n      );\n   }\n};\n","/*\n * ABQL\n *\n * An ABQL defines the base class for our AB Query Language Objects.\n * These classes share a common way to\n *   - parse input strings for commands\n *\n *\n */\nconst ABQLCore = require(\"../../core/ql/ABQLCore.js\");\nconst RowUpdater = require(\"../RowUpdater.js\");\n\nconst L = (...params) => AB.Multilingual.label(...params);\n\nclass ABQL extends ABQLCore {\n   // constructor(attributes, parameterDefinitions, prevOP, task, application) {\n   //     super(attributes, parameterDefinitions, prevOP, task, application);\n   // }\n\n   ///\n   /// Instance Methods\n   ///\n\n   /**\n    * @method parseRow()\n    * When it is time to pull the information from the properties panel,\n    * use this fn to get the current Row of data.\n    *\n    * This fn() will populate the this.params with the values for each\n    * of our .parameterDefinitions.\n    *\n    * @param {webixNode} row\n    *        the current webix node that contains the ROW defining the\n    *        operation and it's parameters.\n    * @param {string} id\n    *        the unique id for where the properties panel is displayed.\n    */\n   parseRow(row, id) {\n      // var allColumns = row.getChildViews();\n      // allColumns.shift(); // remove selector\n      this.parameterDefinitions.forEach((pDef) => {\n         // var col = allColumns.shift();\n         var myID = this.uiID(id);\n         this.ids = this.toIDs(myID);\n         this.params = this.params || {};\n\n         switch (pDef.type) {\n            case \"objectName\":\n               this.params[pDef.name] = $$(this.ids.objectname).getValue();\n               break;\n\n            case \"objectConditions\":\n            case \"objectValues\":\n               var uiCondition = $$(this.ids.condition);\n               if (uiCondition) {\n                  var condition = uiCondition.getValue();\n                  if (condition && condition != \"\") {\n                     this.params[pDef.name] = JSON.parse(condition);\n                  }\n               }\n               break;\n         }\n      });\n   }\n\n   /*\n    * @method toIDs()\n    * generate a set of unique webix ids to use for our UI.\n    * @param {string} myID\n    *        the unique id generated by .uiID()\n    */\n   toIDs(myID) {\n      return {\n         condition: `${myID}_condition`,\n         objectname: `${myID}_objname`,\n         popup: `${myID}_popup`,\n         select: `${myID}_select`,\n         shorthand: `${myID}_shorthand`,\n      };\n   }\n\n   /**\n    * @method uiAddParamForDef()\n    * Add an operation parameter for each parameterDefinition we have defined.\n    * @param {obj} pDef\n    *        the current parameterDefinition entry we are creating the UI\n    *        for.\n    * @param {string} id\n    *        the unique id for where the properties panel is displayed.\n    * @param {obj} ui\n    *        the current webix ui definition we are building.\n    */\n   uiAddParamForDef(pDef, id, ui) {\n      // params are added to a .col[] definition.\n      // if our ui isn't down to the current .col element, then drill down\n      if (!ui.cols) {\n         if (ui.rows) {\n            for (var i = 0; i < ui.rows.length; i++) {\n               if (ui.rows[i].cols) {\n                  this.uiAddParamForDef(pDef, id, ui.rows[i]);\n                  break;\n               }\n            }\n         } else {\n            throw new Error(\"provided ui is not able to add a parameter!\");\n         }\n         return;\n      }\n\n      var paramUI = this.uiParamUI(pDef, id);\n\n      if (paramUI) {\n         // if we only have 1 param\n         if (this.parameterDefinitions.length == 1) {\n            ui.cols.push(paramUI);\n         } else {\n            // if we haven't already added a parameter\n            if (ui.cols.length < 3) {\n               // create a row stack of parameters:\n               ui.cols.push({\n                  rows: [paramUI],\n               });\n            } else {\n               // add to the current stack of parameters\n               ui.cols[2].rows.push(paramUI);\n            }\n         }\n      }\n   }\n\n   /**\n    * @method uiAddNext()\n    * Add the next row selector for this operation:\n    * @param {string} id\n    *        the unique id for where the properties panel is displayed.\n    * @param {obj} ui\n    *        the current webix ui definition we are building.\n    */\n   uiAddNext(id, ui) {\n      var uiRow = this.uiNextRow(id);\n\n      // if we have a next operation defined, then add on the ui definitions\n      // for that operation:\n      if (this.next) {\n         this.next.uiAddParams(id, uiRow);\n         ui.rows.push(uiRow);\n         this.next.uiAddNext(id, ui);\n      } else {\n         // otherwise we just leave the selector:\n         ui.rows.push(uiRow);\n      }\n   }\n\n   /**\n    * @method uiAddParams()\n    * Add operation parameter(s) for each parameterDefinition we have defined.\n    * @param {string} id\n    *        the unique id for where the properties panel is displayed.\n    * @param {obj} ui\n    *        the current webix ui definition we are building.\n    */\n   uiAddParams(id, ui) {\n      this.parameterDefinitions.forEach((pDef) => {\n         this.uiAddParamForDef(pDef, id, ui);\n      });\n   }\n\n   /*\n    * @method uiID()\n    * generate a unique webix id for this operation.\n    * @param {string} id\n    *        the webix id of the base property.query holder\n    */\n   uiID(id) {\n      if (this.prevOP) {\n         return `${this.prevOP.uiID(id)}_${this.constructor.key}`;\n      } else {\n         return `${id}_${this.constructor.key}`;\n      }\n   }\n\n   /*\n    * uiXXX Operations:\n    * are UI building operations that are performed BEFORE the webix UI\n    * is generated.  They work by filling out a {ui} object definition\n    * that webix will eventually create into the DOM.\n    *\n    * viewXXX Operations:\n    * are UI building operations that are performed AFTER the webix UI\n    * is generated. They work by adding in child views to an existing\n    * DOM.\n    */\n\n   /**\n    * @method uiNextRow()\n    * return the webix UI definition for the next of UI chaining.\n    * @param {string} id\n    *        the unique id for where the properties panel is displayed.\n    * @return {obj}\n    */\n   uiNextRow(id) {\n      var options = this.constructor.NextQLOps.map((op) => {\n         return { id: op.key, value: op.label };\n      });\n      options.unshift({ id: 0, value: L(\"choose next operation\") });\n\n      var myID = this.uiID(id);\n      var ids = this.toIDs(myID);\n\n      var uiRow = {\n         cols: [\n            { view: \"spacer\", width: this.constructor.uiIndentNext || 10 },\n            {\n               id: ids.select,\n               view: \"select\",\n               value: this.next ? this.next.constructor.key : 0,\n               options: options,\n               on: {\n                  onChange: (newValue, oldValue) => {\n                     function resetValue() {\n                        var select = $$(ids.select);\n                        select.blockEvent();\n                        select.setValue(oldValue);\n                        select.unblockEvent();\n                     }\n                     if (newValue == oldValue) {\n                        return;\n                     }\n                     var newOP = this.constructor.NextQLOps.find((op) => {\n                        return op.key == newValue;\n                     });\n                     if (!newOP) {\n                        resetValue();\n                        return;\n                     }\n\n                     var thisRow = $$(ids.select).getParentView();\n                     var thisQuery = thisRow.getParentView();\n\n                     var addOP = () => {\n                        if (newOP) {\n                           var nextOP = new newOP({}, this, this.task, this.AB);\n                           this.next = nextOP;\n                           nextOP.viewAddParams(id, thisRow);\n                           nextOP.viewAddNext(id, thisQuery);\n                        }\n                     };\n\n                     // if there are rows after this one, then warn\n                     // about changing\n                     var allRows = thisQuery.getChildViews();\n                     if (allRows.length - 1 > allRows.indexOf(thisRow)) {\n                        webix.confirm({\n                           title: \"continue?\",\n                           text:\n                              \"changing this rule will reset any following rules.\",\n                           ok: \"yes\",\n                           cancel: \"no\",\n                           callback: (result) => {\n                              if (result) {\n                                 // remove the current additional Rows:\n                                 var ir = allRows.length - 1;\n                                 while (\n                                    allRows[ir].config.id != thisRow.config.id\n                                 ) {\n                                    thisQuery.removeView(allRows[ir]);\n                                    ir--;\n                                 }\n\n                                 // now remove the parameters\n                                 var allCols = thisRow.getChildViews();\n                                 var ic = allCols.length;\n                                 while (ic > 1) {\n                                    thisRow.removeView(allCols[ic - 1]);\n                                    ic--;\n                                 }\n\n                                 addOP();\n                              } else {\n                                 resetValue();\n                              }\n                           },\n                        });\n                     } else {\n                        addOP();\n                     }\n                  },\n               },\n            },\n         ],\n      };\n\n      return uiRow;\n   }\n\n   /**\n    * @method uiParamUI()\n    * return the webix UI definition for the parameter entry of this current\n    * operation.\n    * @param {obj} pDef\n    *        the current parameterDefinition entry we are creating the UI\n    *        for.\n    * @param {string} id\n    *        the unique id for where the properties panel is displayed.\n    * @return {obj}\n    */\n   uiParamUI(pDef, id) {\n      var myID = this.uiID(id);\n      this.ids = this.toIDs(myID);\n      var paramUI = null;\n\n      // now add the parameter\n      switch (pDef.type) {\n         case \"objectName\":\n            // an objectName parameter returns a select list of available\n            // objects in this ABFactory.\n            var options = this.AB.objects().map((o) => {\n               return { id: o.id, value: o.label };\n            });\n            paramUI = {\n               id: this.ids.objectname,\n               view: \"select\",\n               value: this.objectID,\n               options: options,\n               on: {\n                  onChange: (newValue /*, oldValue */) => {\n                     this.params = this.params || {};\n                     if (newValue != this.params[pDef.name]) {\n                        this.params[pDef.name] = newValue;\n                        this.paramChanged(pDef);\n                     }\n                  },\n               },\n            };\n            break;\n\n         case \"objectConditions\":\n            // objectConditions: returns a filter text summary, that when\n            // clicked, pops up a Filter Entry Popup.\n            // the actual value is stored in a hidden field.\n\n            // we will create a new FilterComplex() object to use for our\n            // filtering.\n            // Our goal is to create a special filter entry for each avaiable\n            // process data value that is available.\n            // A filter entry needs to look like:\n            // {\n            //     id: `{string}`,      // A unique id selector for this filter\n            //     name: `{string}`,    // the operation name displayed\n            //     type, {obj}          // an object defining the editor to show\n            //     fn: ()=>{}           // a function used for filtering elements\n            // }\n            //\n            // In our filters, we are assigning filters to EACH field by the\n            // field.id.  So the type definition needs to look like:\n            // {\n            //     \"uniqueID of the field (field.id)\" : {webixUI definition}\n            // }\n\n            var Filter = this.AB.filterComplexNew(id);\n            var hashFieldIDs = this.availableProcessDataFieldsHash();\n            if (this.object) {\n               Filter.fieldsLoad(this.object.fields(), this.object);\n               // NOTE: this will create default filters based upon the\n               // object fields() and their types\n\n               // Now we need to add in the Process Data Fields:\n               // for each Process Data Field that matches our same object\n               var foundFields = Object.keys(hashFieldIDs)\n                  .map((f) => {\n                     return hashFieldIDs[f];\n                  })\n                  .filter((k) => {\n                     return k.object && k.object.id == this.object.id;\n                  });\n\n               Filter.processFieldsLoad(foundFields);\n               /*\n               (foundFields || []).forEach((processField) => {\n                  var type = {};\n                  if (processField.field) {\n                     type[processField.field.id] = {\n                        view: \"select\",\n                        options: [\n                           {\n                              id: \"empty\",\n                              value: \"choose option\"\n                           },\n                           {\n                              id: processField.key,\n                              value: `context(${processField.label})`\n                           }\n                        ]\n                     };\n                  } else {\n                     // if there is no .field, it is probably an embedded special field\n                     // like: .uuid\n                     var key = processField.key.split(\".\").pop();\n                     type[key] = {\n                        view: \"select\",\n                        options: [\n                           {\n                              id: \"empty\",\n                              value: \"choose option\"\n                           },\n                           {\n                              id: processField.key,\n                              value: `context(${processField.label})`\n                           }\n                        ]\n                     };\n                  }\n\n                  // add an \"equals\" and \"not equals\" filter for each:\n                  Filter.filterAdd([\n                     {\n                        id: `context_equals`,\n                        name: `equals`,\n                        type,\n                        fn: (a, b) => {\n                           return a == b;\n                        }\n                     },\n                     {\n                        id: `context_not_equal`,\n                        name: `not equals`,\n                        type,\n                        fn: (a, b) => {\n                           return a != b;\n                        }\n                     }\n                  ]);\n                  \n               }); */\n            }\n\n            // every time the Filter \"saves\" it's data, it emits this event:\n            // take the given condition and store it in our hidden element.\n            Filter.on(\"save\", (condition) => {\n               // @param {obj} condition an object describing the filter\n               // condition.\n\n               this.params = this.params || {};\n               this.params[pDef.name] = condition;\n\n               let shortHand = $$(this.ids.shorthand);\n               // console.log(Filter.toShortHand());\n               shortHand.define({\n                  label: Filter.toShortHand(),\n               });\n               shortHand.refresh();\n\n               // NOTE: the hidden element is a text field, so convert the\n               // {condition object} => a string\n               let elCondition = $$(this.ids.condition);\n               elCondition.define({\n                  value: JSON.stringify(this.params[pDef.name]),\n               });\n               elCondition.refresh();\n            });\n\n            // create the initial condition value from our inputs.\n            var initialCond = \"\";\n            if (this.params && this.params[pDef.name]) {\n               Filter.setValue(this.params[pDef.name]);\n               initialCond = JSON.stringify(this.params[pDef.name]);\n            }\n\n            // what we show on the panel, is a text representation\n            // of the current condition.\n            var displayLabel = Filter.toShortHand();\n            paramUI = {\n               rows: [\n                  {\n                     id: this.ids.shorthand,\n                     view: \"label\",\n                     label: displayLabel,\n                     on: {\n                        onItemClick: function () {\n                           Filter.popUp();\n                        },\n                     },\n                  },\n                  // have a hidden field to contain the condition\n                  // value we will parse out later\n                  {\n                     id: this.ids.condition,\n                     view: \"text\",\n                     value: initialCond,\n                     hidden: true,\n                  },\n               ],\n            };\n            break;\n\n         case \"objectValues\":\n            // objectValues : shows a condenced textual representation of the\n            // field => value changes.  Clicking on the text will show a popup\n            // that allows you to add/remove additional field updates for\n            // the current object.\n\n            var initialValue = \"\";\n            var Updater = new RowUpdater(null, myID);\n            if (this.object) {\n               Updater.objectLoad(this.object);\n            }\n\n            // Set processed data key to value options\n            Updater.setExtendedOptions(\n               (this.task.process.processDataFields(this.task) || []).map(\n                  (item) => {\n                     return {\n                        id: item.key,\n                        value: item.label\n                     };\n                  }\n               )\n            );\n\n            // NOTE: .setValue() must be called once the RowUpdater is already\n            // displayed.  See the end of popUp() below:\n            if (this.params && this.params[pDef.name]) {\n               Updater.setValue(this.params[pDef.name]);\n               initialValue = JSON.stringify(this.params[pDef.name]);\n            }\n\n            var popUp = () => {\n               // show the RowUpdater in a popup:\n               var ui = {\n                  id: this.ids.popup,\n                  view: \"popup\",\n                  position: \"center\",\n                  minWidth: 700,\n                  modal: true,\n                  resize: true,\n                  body: {\n                     rows: [\n                        {\n                           height: 30,\n                           borderless: true,\n                           cols: [\n                              { fillspace: true },\n                              {\n                                 view: \"button\",\n                                 value: \"X\",\n                                 width: 30,\n                                 click: () => {\n                                    $$(this.ids.popup).hide();\n                                 }\n                              }\n                           ]\n                        },\n                        Updater.ui,\n                        {\n                           view: \"button\",\n                           value: L(\"Save\"),\n                           css: \"webix_primary\",\n                           click: () => {\n                              this.params = this.params || {};\n                              this.params[pDef.name] = Updater.getValue();\n                              var sh = $$(this.ids.shorthand);\n                              sh.define({\n                                 label: JSON.stringify(this.params[pDef.name]),\n                              });\n                              sh.refresh();\n\n                              var cond = $$(this.ids.condition);\n                              cond.define({\n                                 value: JSON.stringify(this.params[pDef.name]),\n                              });\n                              cond.refresh();\n\n                              $$(this.ids.popup).hide();\n                           },\n                        },\n                     ],\n                  },\n               };\n\n               // create and show the popup\n               this._myPopup = webix.ui(ui);\n               this._myPopup.show();\n\n               // NOTE: on a RowUpdater, the values need to be set\n               // AFTER it is displayed:\n               if (this.params && this.params[pDef.name]) {\n                  Updater.setValue(this.params[pDef.name]);\n               }\n            };\n            paramUI = {\n               rows: [\n                  // the textual shorthand for these values\n                  {\n                     id: this.ids.shorthand,\n                     view: \"label\",\n                     label: initialValue,\n                     on: {\n                        onItemClick: function () {\n                           popUp();\n                        },\n                     },\n                  },\n                  // the hidden field that contains the results\n                  {\n                     id: this.ids.condition,\n                     view: \"text\",\n                     value: initialValue,\n                     hidden: true,\n                  },\n               ],\n            };\n            break;\n      }\n\n      return paramUI;\n   }\n\n   /**\n    * @method viewAddNext()\n    * Add the next selector row After this Operation:\n    * @param {string} id\n    *        the unique id for where the properties panel is displayed.\n    * @param {webixNode} topView\n    *        the current webix node that needs this view added to\n    *        NOTE: this should be the top container that is adding a new\n    *        row for each operation.\n    */\n   viewAddNext(id, topView) {\n      var uiRow = this.uiNextRow(id);\n      topView.addView(uiRow);\n   }\n\n   /**\n    * @method viewAddParams()\n    * Add operation parameter(s) for each parameterDefinition we have defined.\n    * @param {string} id\n    *        the unique id for where the properties panel is displayed.\n    * @param {webixNode} rowView\n    *        the current webix node that needs this view added to\n    *        NOTE: this should be the ROW that the parameters are added to\n    */\n   viewAddParams(id, rowView) {\n      var params = [];\n      this.parameterDefinitions.forEach((pDef) => {\n         // get the definition from .uiParamUI()\n         params.push(this.uiParamUI(pDef, id));\n      });\n      var toInsert = null;\n      // stack parameters in a row if there are more than 1\n      if (params.length > 1) {\n         toInsert = {\n            rows: params,\n         };\n      } else {\n         toInsert = params.pop();\n      }\n      if (toInsert) {\n         rowView.addView(toInsert);\n      }\n   }\n\n   ////\n   //// QueryString Parser routines:\n   ////\n\n   /*\n     * parseQuery()\n     * check the given query string input and see if this object is the\n     * starting object.\n     * @param {string} query\n     *\t\t\t the entered query string operation.\n     * @return {bool}\n     * /\n    static parseQuery(query) {\n        // we want to see if the beginning of this query matches our\n        // option_begin string.\n        var begQuery = query;\n        if (query.length > this.option_begin.length) {\n            begQuery = query.slice(0, this.option_begin.length);\n        }\n        if (this.option_begin.indexOf(begQuery) == 0) {\n            return true;\n        }\n        return false;\n    }\n\n\n\n    /// ABApplication data methods\n\n    tabComplete() {\n        if (this._suggestions) {\n            // if our begin tag is  present in _suggestions\n            if (\n                this._suggestions.indexOf(this.constructor.option_begin) != -1\n            ) {\n                // this is probably finishing out our command:\n                this.currQuery = this._suggestions;\n            } else {\n                // we are suggesting a parameter value:\n                this.currQuery = `${this.constructor.option_begin}${this._suggestions}`;\n            }\n\n            // now make sure we do another refresh to get another\n            // suggestion.\n            this.fromQuery(this.currQuery);\n        }\n    }\n\n    paramsToString() {\n        var strs = [];\n        this.parameterDefinitions.forEach((pDef) => {\n            strs.push(this.params[pDef.name]);\n            // switch (pDef.type) {\n            //     case \"objectName\":\n            //         strs.push(this.params[pDef.name]);\n            //         break;\n            // }\n        });\n\n        return strs.join(\",\");\n    }\n\n    /**\n     * @method toObj()\n     *\n     * properly compile the current state of this ABView instance\n     * into the values needed for saving to the DB.\n     *\n     * @return {json}\n     * /\n    toQuery() {\n        if (this.entryComplete) {\n            return `${this.prevOP ? this.prevOP.toQuery() : \"\"}${\n                this.constructor.option_begin\n            }${this.params ? this.paramsToString() : \"\"})`;\n        } else {\n            return `${this.prevOP ? this.prevOP.toQuery() : \"\"}${\n                this.currQuery ? this.currQuery : \"\"\n            }`;\n        }\n    }\n\n    fromQuery(queryString) {\n        var results = this.constructor.regEx.exec(queryString);\n        if (results) {\n            this.entryComplete = true;\n            this.queryValid = true;\n            this.params = {};\n\n            if (this.paramsValid(results[1])) {\n                // now progress on to any next operations:\n                var newQuery = queryString.replace(this.constructor.regEx, \"\");\n                var matchingOPs = [];\n                this.constructor.NextQLOps.forEach((OP) => {\n                    if (OP.parseQuery(newQuery)) {\n                        matchingOPs.push(OP);\n                    }\n                });\n                if (matchingOPs.length == 1) {\n                    // exact match, so add next:\n                    var qlOP = new matchingOPs[0](\n                        {},\n                        this,\n                        this.task,\n                        this.application\n                    );\n                    qlOP.fromQuery(newQuery);\n                    this.next = qlOP;\n                }\n\n                // if there were no matching OPs, then they typed an error:\n                if (matchingOPs.length == 0) {\n                    this.queryValid = false;\n                }\n            } else {\n                // I don't recoginze these params!\n                this.queryValid = false;\n                this._suggestions = \" ! Invalid Params !\";\n            }\n        } else {\n            this.currQuery = queryString;\n            this.queryValid = true; // assume true then set to false later\n            this._suggestions = null;\n\n            // calculate the processing of our command + params:\n            // if we have finished our begining\n            if (this.currQuery.indexOf(this.constructor.option_begin) == 0) {\n                var param = this.currQuery.slice(\n                    this.constructor.option_begin.length\n                );\n\n                this.paramsFromQuery(param);\n            } else {\n                // else they need to finish the beginning\n                this._suggestions = this.constructor.option_begin;\n            }\n\n            // if we didn't have any suggestions, then what they typed\n            // doesn't match, so remove the last character:\n            if (!this._suggestions) {\n                this.currQuery = this.currQuery.slice(0, -1);\n                this.queryValid = false;\n                this._suggestions = null;\n\n                // try to regenerate the suggestions again:\n                var param = this.currQuery.slice(\n                    this.constructor.option_begin.length\n                );\n\n                this.paramsFromQuery(param);\n            }\n        }\n    }\n\n    firstOP() {\n        if (!this.prevOP) {\n            return this;\n        } else {\n            return this.prevOP.firstOP();\n        }\n    }\n\n    lastOP() {\n        if (!this.entryComplete) {\n            return this;\n        } else {\n            // now figure out which of our nextOps are being used.\n            if (this.next) {\n                return this.next.lastOP();\n            } else {\n                // we haven't specified a next OP, so we are still up.\n                return this;\n            }\n        }\n    }\n\n    paramPull(paramDef, queryString) {\n        var result = { param: queryString, balance: 0 };\n        if (queryString.length > 0) {\n            switch (paramDef.type) {\n                case \"objectName\":\n                    // define a lexer for objectNames\n                    var lexerObjectName = moo.compile({\n                        comma: { match: \",\" },\n                        name: {\n                            match: /\"(?:\\\\[\"\\\\]|[^\\n\"\\\\])*\"/\n                            // value: (s) => s.slice(1, -1)\n                        },\n                        WS: /[ \\t]+/,\n                        currKey: moo.error\n                    });\n                    lexerObjectName.reset(queryString);\n                    var name = \"\";\n                    var foundObj = null;\n                    var token = lexerObjectName.next();\n\n                    if (token) {\n                        // if this is the 2nd time through, might\n                        // begin with a ','\n                        while (token.type == \"comma\") {\n                            token = lexerObjectName.next();\n                        }\n\n                        // pull the parameter from the current queryString\n                        if ([\"name\", \"currKey\"].indexOf(token.type) != -1) {\n                            name = token.value;\n                        }\n                        result.param = name;\n                    }\n\n                    break;\n\n                case \"objectConditions\":\n                case \"objectValues\":\n                    // define a lexer for objectConditions\n                    // the goal of this lexer is to achieve json balance\n                    // ( equal # of { & }) while reaching an end condition:\n                    var lexerObjectCond = moo.compile({\n                        comma: { match: \",\" },\n                        colon: { match: \":\" },\n                        lbrace: { match: \"{\" },\n                        rbrace: { match: \"}\" },\n                        rparen: { match: \")\" },\n                        keyval: {\n                            match: /\"(?:\\\\[\"\\\\]|[^\\n\"\\\\])*\"/\n                            // value: (s) => s.slice(1, -1)\n                        },\n                        WS: /[ \\t]+/,\n                        currKey: moo.error\n                    });\n                    lexerObjectCond.reset(queryString);\n                    var balance = 0;\n                    var foundObj = null;\n                    var token = lexerObjectCond.next();\n                    var stop = false;\n                    var param = \"\";\n                    while (token && !stop) {\n                        if (token.type == \"lbrace\") {\n                            balance++;\n                        }\n                        if (token.type == \"rbrace\") {\n                            balance--;\n                        }\n\n                        // check for stop condition:\n                        // when balance is achieved and we find a \",\"\n                        if (balance == 0) {\n                            if (token.type == \"comma\") {\n                                stop = true;\n                            }\n                        }\n\n                        if (!stop) {\n                            param += token.value;\n                            token = lexerObjectCond.next();\n                        }\n                    }\n                    result.param = param;\n                    result.balance = balance;\n                    break;\n            }\n        }\n\n        return result;\n    }\n\n    suggestionComplete() {\n        var params = [];\n        this.parameterDefinitions.forEach((pDef) => {\n            params.push(this.params[pDef.name]);\n        });\n        return `${this.constructor.option_begin}${params.join(\",\")})`;\n    }\n\n    /**\n     * @method paramsFromQuery()\n     * take the given queryString value and see if it matches our\n     * possible parameter values.\n     * we update ._suggestions based upon the current param state.\n     * @param {string} queryString\n     * /\n    paramsFromQuery(queryString) {\n        var keepGoing = true;\n        var current = queryString;\n\n        // for each of our parameters,\n        this.parameterDefinitions.forEach((pDef) => {\n            if (!keepGoing) return;\n\n            // pull the current param\n            var pullResult = this.paramPull(pDef, current);\n            current = current.replace(pullResult.param, \"\");\n\n            // if this param is NOT valid\n            if (!this.paramIsValid(pDef, pullResult)) {\n                // don't keep going after this\n                keepGoing = false;\n\n                // offer suggestions for this param\n                switch (pDef.type) {\n                    case \"objectName\":\n                        // return suggestions for our parameters\n                        var suggestions = [];\n                        var objects = this.application.objects((o) => {\n                            var quotedLabel = `\"${o.label}\"`;\n                            return (\n                                pullResult.param.length == 0 ||\n                                quotedLabel.indexOf(pullResult.param) == 0\n                            );\n                        });\n                        objects.forEach((o) => {\n                            suggestions.push(`\"${o.label}\"`);\n                        });\n                        this._suggestions = suggestions.join(\"\\n\");\n                        break;\n\n                    case \"objectConditions\":\n                    case \"objectValues\":\n                        var paramComplete = false;\n                        var paramObj = null;\n                        try {\n                            paramObj = JSON.parse(pullResult.param);\n                            paramComplete = true;\n                        } catch (e) {}\n\n                        if (paramComplete) {\n                            this.paramObj = paramObj;\n                            this.params[pDef.name] = pullResult.param;\n                            // this.entryComplete = true;\n                            this._suggestions = this.suggestionComplete();\n                        } else {\n                            // define a lexer to help us parse through the provided cond string\n                            var lexer = moo.states({\n                                start: {\n                                    lbrace: { match: \"{\", push: \"key\" }\n                                },\n                                key: {\n                                    colon: { match: \":\", push: \"value\" },\n                                    rparen: { match: \")\", pop: true },\n                                    key: {\n                                        match: /\"(?:\\\\[\"\\\\]|[^\\n\"\\\\])*\"/\n                                        // value: (s) => s.slice(1, -1)\n                                    },\n                                    WS: /[ \\t]+/,\n                                    currKey: moo.error\n                                },\n                                value: {\n                                    // lbrace: { match: \"{\", push: \"complexValue\" },\n                                    rbrace: { match: \"}\", pop: true },\n                                    valueContext: {\n                                        match: /\"\\$context\\((?:\\\\[\"\\\\]|[^\\n\"\\\\])*?\\)\"/\n                                    },\n                                    value: {\n                                        match: /\"(?:\\\\[\"\\\\]|[^\\n\"\\\\])*\"/\n                                    },\n                                    comma: { match: \",\", pop: true },\n                                    currVal: moo.error\n                                }\n                            });\n\n                            // now follow our state, to figure out if we are entering a\n                            // key, or a value, and then figure out how to offer suggestions\n                            // based upon what they are entering now:\n                            var state = \"start\";\n                            lexer.reset(pullResult.param);\n                            var token = lexer.next();\n                            var lastToken = null;\n                            var lastKey = null;\n                            while (token) {\n                                switch (state) {\n                                    case \"start\":\n                                        if (token.type == \"lbrace\") {\n                                            state = \"key\";\n                                        }\n                                        break;\n                                    case \"key\":\n                                        if (token.type == \"colon\") {\n                                            state = \"value\";\n                                        }\n                                        if (token.type == \"key\") {\n                                            lastKey = token.value;\n                                        }\n                                        break;\n\n                                    case \"value\":\n                                        if (token.type == \"comma\") {\n                                            state = \"key\";\n                                        }\n                                        break;\n                                }\n                                lastToken = token;\n                                token = lexer.next();\n                            }\n\n                            // by this point, we have ended on a state, and can figure out\n                            // what to suggest:\n                            switch (state) {\n                                case \"start\":\n                                    // if we ended here, then we didn't even have our first {\n                                    this._suggestions = \"{cond}\";\n                                    break;\n\n                                case \"key\":\n                                    // we are entering a Key, so suggest the available fields\n                                    // from this object\n                                    var currKey = \"\";\n                                    var types = [\"key\", \"currKey\"];\n                                    if (types.indexOf(lastToken.type) != -1) {\n                                        currKey = lastToken.value;\n                                    }\n                                    this._suggestions = this.fieldList(currKey);\n\n                                    // if we end up with ._suggestions == currKey\n                                    // then the key is complete, and we need to now enter \":\"\n                                    if (this._suggestions == currKey) {\n                                        this._suggestions = \":\";\n                                    }\n                                    break;\n\n                                case \"value\":\n                                    // entering a value, decide what to suggest based on what\n                                    // the current key/field we are on:\n                                    var currValue = \"\";\n                                    var types = [\n                                        \"value\",\n                                        \"valueContext\",\n                                        \"currVal\"\n                                    ];\n                                    if (types.indexOf(lastToken.type) != -1) {\n                                        currValue = lastToken.value;\n                                    }\n                                    this._suggestions = this.valueList(\n                                        lastKey,\n                                        currValue\n                                    );\n                                    break;\n                            }\n                        }\n\n                        break;\n                }\n            }\n        });\n\n        if (keepGoing) {\n            // none of our params were invalid, so just suggest to complete our\n            this._suggestions = this.suggestionComplete();\n        }\n    }\n\n    paramIsValid(paramDef, pullResult) {\n        var isValid = true;\n        this.params = this.params || {};\n        switch (paramDef.type) {\n            case \"objectName\":\n                // verify it is valid\n                var param = pullResult.param;\n                var foundObj = null;\n                if (param) {\n                    // see if we find a Matching Object\n                    foundObj = this.application.objects((o) => {\n                        var quotedLabel = `\"${o.label}\"`;\n                        return (\n                            param.length == 0 || quotedLabel.indexOf(param) == 0\n                        );\n                    })[0];\n                    if (foundObj) {\n                        this.params[paramDef.name] = param;\n                        // it is NOT valid unless it is an exact match:\n                        if (`\"${foundObj.label}\"` != param) {\n                            isValid = false;\n                        }\n                    }\n                }\n                isValid = isValid && param.length > 0 && foundObj;\n                break;\n\n            case \"objectConditions\":\n            case \"objectValues\":\n                if (pullResult.balance == 0) {\n                    this.params[paramDef.name] = pullResult.param;\n                }\n                isValid =\n                    isValid &&\n                    pullResult.balance == 0 &&\n                    pullResult.param.length > 0;\n                break;\n        }\n\n        return isValid;\n    }\n    /**\n     * @method paramsValid()\n     * parse through the given text and see if our defined parameters\n     * can be properly represented.\n     * @param {string} queryString\n     *        the current value of the text that is the parameter(s) to our\n     *        function.\n     * @return {bool}\n     *         true : if every parameter parses\n     *         false: otherwise\n     * /\n    paramsValid(queryString) {\n        // queryString represents the full text parameters. Might be > 1 params\n\n        var current = queryString;\n        var isValid = true; // so optimistic.\n\n        // for each of our defined parameters\n        this.parameterDefinitions.forEach((pDef) => {\n            var pullResult = this.paramPull(pDef, current);\n            current = current.replace(pullResult.param, \"\");\n            isValid = isValid && this.paramIsValid(pDef, pullResult);\n        });\n\n        return isValid;\n    }\n\n    suggestions() {\n        if (this.entryComplete) {\n            // return suggestions for next operations.\n            var suggestions = [];\n\n            this.constructor.NextQLOps.forEach((OP) => {\n                suggestions.push(OP.option);\n            });\n            return suggestions.join(\"\\n\");\n        } else {\n            return this._suggestions;\n        }\n    }\n    */\n}\n\nmodule.exports = ABQL;\n","/*\n * ABQLFind\n *\n * An ABQLFind depends on a BASE QL object (Object, Datacollection, Query)\n * and can perform a DB query based upon that BASE object.\n *\n */\nconst ABQLFindCore = require(\"../../core/ql/ABQLFindCore.js\");\n\nclass ABQLFind extends ABQLFindCore {\n   // constructor(attributes, prevOP, task, application) {\n   //     super(attributes, ParameterDefinitions, prevOP, task, application);\n   // }\n   ///\n   /// Instance Methods\n   ///\n}\nABQLFind.uiIndentNext = 10;\n\nmodule.exports = ABQLFind;\n","/*\n * ABQLManager\n *\n * An interface for managing the different ABQL Operations available in our\n * AppBuilder.\n *\n */\n\nconst ABQLManagerCore = require(\"../../core/ql/ABQLManagerCore.js\");\n\nvar ABQLManager = {\n   /**\n    * @method fromAttributes()\n    * return an {ABQL} object that represents the given attributes that\n    * were saved from the previous .toObj()\n    * @param {object} attributes\n    *\t\t  the values returned from the previous .toObj() call\n    * @param {ABProcessTask***} task\n    *\t\t  the current ABProcessTaskServiceQuery that contains this QL\n    * @param {ABFactory} AB\n    *\t\t  the current {ABFactory} active for this interface.\n    * @return {ABQL} | null\n    */\n   fromAttributes: ABQLManagerCore.fromAttributes,\n\n   /**\n    * @method ids()\n    * return a set of unique webix ids for the ui portions of this object.\n    * @param {string} id\n    *\t\t  the webix base id of the parameters panel.\n    * @return {object}\n    */\n   ids: function (id) {\n      return {\n         root: `${id}_root`,\n         select: `${id}_root_select`,\n         options: `${id}_root_options`,\n      };\n   },\n\n   /**\n    * @method builder\n    * return a UI component like object that will display the QL builder.\n    * The component will support:\n    *\t\t.ui(id) : returns a webix ui definition for the current builder\n    *\t\t.init(id) : performs any special actions to prepare the webix ui\n    * @param {object} rootOP\n    *\t\t  the root ABQLxxxx operation\n    * @param {ABProcessTask***} task\n    *\t\t  the current Process Task that is requesting the data.\n    * @param {ABFactory} AB\n    *\t\t  the {ABFactory} active for this display.\n    * @return {object}\n    */\n   builder: function (rootOP, task, AB) {\n      // var rootOP = this.fromAttributes(attributes, task, AB);\n      let L = (...params) => AB.Multilingual.label(...params);\n\n      return {\n         ui: function (id) {\n            var options = [{ id: 0, value: L(\"choose Root\") }];\n            ABQLManagerCore.QLOps.forEach((op) => {\n               options.push({ id: op.key, value: op.label });\n            });\n\n            var ids = ABQLManager.ids(id);\n            var ui = {\n               rows: [\n                  {\n                     view: \"label\",\n                     label: L(\"Query:\"),\n                  },\n                  {\n                     id: ids.root,\n                     cols: [\n                        {\n                           id: ids.select,\n                           view: \"select\",\n                           value: rootOP ? rootOP.constructor.key : 0,\n                           options: options,\n                           on: {\n                              onChange: (newValue, oldValue) => {\n                                 function resetValue() {\n                                    var select = $$(ids.select);\n                                    select.blockEvent();\n                                    select.setValue(oldValue);\n                                    select.unblockEvent();\n                                 }\n                                 if (newValue == oldValue) {\n                                    return;\n                                 }\n                                 var newOP = ABQLManagerCore.QLOps.find(\n                                    (op) => {\n                                       return op.key == newValue;\n                                    }\n                                 );\n                                 if (!newOP) {\n                                    resetValue();\n                                    return;\n                                 }\n                                 function addOP() {\n                                    if (newOP) {\n                                       rootOP = new newOP({}, task, AB);\n                                       rootOP.viewAddParams(id, $$(ids.root));\n                                       rootOP.viewAddNext(\n                                          id,\n                                          $$(ids.root).getParentView()\n                                       );\n                                    }\n                                 }\n                                 var topEntry = $$(ids.root).getParentView();\n                                 var allRows = topEntry.getChildViews();\n                                 if (allRows.length > 2) {\n                                    webix.confirm({\n                                       title: \"continue?\",\n                                       text:\n                                          \"changing this rule will reset any following rules.\",\n                                       ok: \"yes\",\n                                       cancel: \"no\",\n                                       callback: (result) => {\n                                          if (result) {\n                                             // remove the current additional Rows:\n                                             var thisView = $$(ids.root);\n                                             var ir = allRows.length - 1;\n                                             while (\n                                                allRows[ir].config.id !=\n                                                thisView.config.id\n                                             ) {\n                                                topEntry.removeView(\n                                                   allRows[ir]\n                                                );\n                                                ir--;\n                                             }\n\n                                             // now remove the parameters\n                                             var allCols = thisView.getChildViews();\n                                             var ic = allCols.length;\n                                             while (ic > 1) {\n                                                thisView.removeView(\n                                                   allCols[ic - 1]\n                                                );\n                                                ic--;\n                                             }\n\n                                             addOP();\n                                          } else {\n                                             resetValue();\n                                          }\n                                       },\n                                    });\n                                 } else {\n                                    addOP();\n                                 } // if allRows.length > 2\n                              }, // onChange\n                           },\n                        },\n                     ],\n                  },\n               ],\n            };\n\n            if (rootOP) {\n               rootOP.uiAddParams(id, ui);\n               rootOP.uiAddNext(id, ui);\n            }\n\n            return ui;\n         },\n         init: function (id) {},\n      };\n   },\n\n   /**\n    * @method parse\n    * step through the current properties panel and decode the QL objects\n    * and their parameters.\n    * Return the .toOBJ() attributes definition as a result.\n    * @param {string} id\n    *\t\t  the webix base id of the parameters panel.\n    * @param {ABProcessTask***} task\n    *\t\t  the current Process Task that is requesting the data.\n    * @param {ABFactory} AB\n    *\t\t  the {ABFactory} object that is currently active.\n    * @return {object}\n    */\n   parse: function (id, task, AB) {\n      var ids = ABQLManager.ids(id);\n      var root = $$(ids.root);\n\n      if (!root) {\n         console.warn(\"ABQLManager.parse(): unable to find root element\");\n         return;\n      }\n\n      // get all the input rows\n      var rows = root.getParentView().getChildViews();\n      rows.shift(); // remove the query label row:\n\n      function parseCurrent(rows, options, prevOP) {\n         if (rows.length == 0) {\n            return null;\n         }\n         var row = rows.shift();\n\n         // get which operation was selected\n         // find the operation selector (skip any indents)\n         var views = row.getChildViews();\n         var selector = views.shift();\n         while (!selector.getValue) {\n            selector = views.shift();\n         }\n         var value = selector.getValue();\n\n         // figure out the QLOP object\n         var OP = options.find((o) => {\n            return o.key == value;\n         });\n         if (OP) {\n            var currOP = null;\n            if (prevOP) {\n               currOP = new OP({}, prevOP, task, AB);\n            } else {\n               currOP = new OP({}, task, AB);\n            }\n\n            // now get currOP to initialize from it's parameters:\n            currOP.parseRow(row, id);\n\n            // carry forward any .object info if not already established\n            // by the .parseRow():\n            if (!currOP.object && prevOP) {\n               currOP.object = prevOP.object;\n               currOP.objectID = currOP.object ? currOP.object.id : null;\n            }\n\n            var nextRow = parseCurrent(\n               rows,\n               currOP.constructor.NextQLOps,\n               currOP\n            );\n            currOP.next = nextRow;\n            return currOP;\n         }\n         return null;\n      }\n      var operation = parseCurrent(rows, ABQLManagerCore.QLOps, null);\n      return operation;\n   },\n};\nmodule.exports = ABQLManager;\n","/*\n * ABQLRootObject\n *\n * An ABQL defines a Query Language Operation. A QL Operation\n * is intended to be evaluated at run time and return a value that can be\n * assigned to form value or an object.\n *\n *\n */\n\nconst ABQLRootObjectCore = require(\"../../core/ql/ABQLRootObjectCore.js\");\n\nclass ABQLObject extends ABQLRootObjectCore {\n   // constructor(attributes, task, application) {\n   //     // NOTE: keep this so we can insert the prevOp == null\n   //     super(attributes, ParameterDefinitions, null, task, application);\n   // }\n\n   ///\n   /// Instance Methods\n   ///\n\n   /*\n    * @method paramChanged()\n    * respond to an update to the given parameter.\n    * NOTE: the value will ALREADY be saved in this.params[pDef.name].\n    * @param {obj} pDef\n    *        the this.parameterDefinition entry of the parameter that was\n    *        changed.\n    */\n   paramChanged(pDef) {\n      if (pDef.name == \"name\") {\n         this.objectID = this.params[pDef.name];\n         this.object = this.objectLookup(this.objectID);\n\n         // ?? is this correct?\n         // if we already have created a .next operation, and we have\n         // just changed our .object, pass that information forward.\n         if (this.next) {\n            this.next.object = this.object;\n         }\n      }\n   }\n\n   /**\n    * @method parseRow()\n    * When it is time to pull the information from the properties panel,\n    * use this fn to get the current Row of data.\n    *\n    * This fn() will populate the this.params with the values for each\n    * of our .parameterDefinitions.\n    *\n    * @param {webixNode} row\n    *        the current webix node that contains the ROW defining the\n    *        operation and it's parameters.\n    * @param {string} id\n    *        the unique id for where the properties panel is displayed.\n    */\n   parseRow(row, id) {\n      super.parseRow(row, id);\n\n      // for an Object operation, we need to set our .objectID after\n      // the values are parsed.\n\n      if (this.params.name) {\n         this.objectID = this.params.name;\n         this.object = this.objectLookup(this.params.name);\n      }\n   }\n}\nABQLObject.uiIndentNext = 10;\n\nmodule.exports = ABQLObject;\n","const ABQLRowPluckCore = require(\"../../core/ql/ABQLRowPluckCore.js\");\n\nclass ABQLRowPluck extends ABQLRowPluckCore {\n   /*\n    * @method paramChanged()\n    * respond to an update to the given parameter.\n    * NOTE: the value will ALREADY be saved in this.params[pDef.name].\n    * @param {obj} pDef\n    *        the this.parameterDefinition entry of the parameter that was\n    *        changed.\n    */\n   paramChanged(pDef, id) {\n      super.paramChanged(pDef);\n      if (pDef.name == \"field\") {\n         // Re-generate next select options\n         this.uiNextRowSelectorRefresh(id);\n      }\n   }\n}\nABQLRowPluck.uiIndentNext = 20;\n\nmodule.exports = ABQLRowPluck;\n","/*\n * ABQLRowSave\n *\n * An ABQLRowSave can store the current Data set into the Process Task it is\n * in, so that this data can be made available to other Process Tasks.\n *\n */\n\nconst ABQLSetSaveCore = require(\"../../core/ql/ABQLSetSaveCore.js\");\n\nclass ABQLRowSave extends ABQLSetSaveCore {}\nABQLRowSave.uiIndentNext = 20;\n\nmodule.exports = ABQLRowSave;\n","/*\n * ABQLRowUpdate\n *\n * An ABQLRow Update allows you to update the values on the current\n * Row of data.\n *\n */\n\nconst ABQLRowUpdateCore = require(\"../../core/ql/ABQLRowUpdateCore.js\");\n\nclass ABQLRowUpdate extends ABQLRowUpdateCore {\n   // constructor(attributes, prevOP, task, application) {\n   //     super(attributes, ParameterDefinitions, prevOP, task, application);\n   //     // #Hack! : when an Operation provides the same .NextQlOps that it\n   //     // was defined in, we can't require it again ==> circular dependency.\n   //     // so we manually set it here from the operation that created us:\n   //     this.constructor.NextQLOps = prevOP.constructor.NextQLOps;\n   // }\n   ///\n   /// Instance Methods\n   ///\n}\nABQLRowUpdate.uiIndentNext = 20;\n\nmodule.exports = ABQLRowUpdate;\n","/*\n * ABQLSetFirst\n *\n * An ABQLFind depends on a BASE QL object (Object, Datacollection, Query)\n * and can perform a DB query based upon that BASE object.\n *\n */\n\nconst ABQLSetFirstCore = require(\"../../core/ql/ABQLSetFirstCore.js\");\n\nclass ABQLSetFirst extends ABQLSetFirstCore {\n   // constructor(attributes, prevOP, task, application) {\n   //     super(attributes, [], prevOP, task, application);\n   // }\n   ///\n   /// Instance Methods\n   ///\n}\nABQLSetFirst.uiIndentNext = 20;\n\nmodule.exports = ABQLSetFirst;\n","/*\n * ABQLSetPluck\n *\n * An ABQLSetPluck can process a set (array) of data and puck out a specified\n * field from each row to then make an array of values that only contain that \n * field.\n * \n * Example: \narray = [\n {\n\tname: \"Neo\",\n\temail: \"neo@thematrix.com\",\n\trelationships: [ { morpheous}, {trinity} ]\n },\n {\n\tname: \"trinity\",\n\temail: \"trinity@thematrix.com\",\n\trelationships: [ {neo}, {morpheous} ]\n },\n {\n\tname: \"morpheous\",\n\temail: \"morpheous@thematrix.com\",\n\trelationships: [ {neo}, {trinity}]\n }\n\n]\n\npluck(\"email\") :\n\t[\n\t\t\"neo@thematrix.com\",\n\t\t\"trinity@thematrix.com\",\n\t\t\"morpheous@thematrix.com\"\n\t]\n\npluck(\"relationships\"):\n\t[\n\t\t{neo},\n\t\t{trinity},\n\t\t{morpheous}\n\t]\n *\n */\n\nconst ABQLSetPluckCore = require(\"../../core/ql/ABQLSetPluckCore.js\");\n\nclass ABQLSetPluck extends ABQLSetPluckCore {\n   // constructor(attributes, prevOP, task, application) {\n   //     super(attributes, [], prevOP, task, application);\n   // }\n   ///\n   /// Instance Methods\n   ///\n\n   /*\n    * @method paramChanged()\n    * respond to an update to the given parameter.\n    * NOTE: the value will ALREADY be saved in this.params[pDef.name].\n    * @param {obj} pDef\n    *        the this.parameterDefinition entry of the parameter that was\n    *        changed.\n    */\n   paramChanged(pDef) {\n      if (pDef.name == \"field\") {\n         // debugger;\n         this.fieldID = this.params[pDef.name];\n         // v2 method:\n         // this.field = this.object.fieldByID(this.fieldID);\n         this.field = this.object.fieldByID(this.fieldID);\n\n         // v2 method:\n         // if (this.field && this.field.isConnected) {\n         if (this.field && this.field.key == \"connectObject\") {\n            this.objectOut = this.field.datasourceLink;\n\n            // ?? is this correct?\n            // if we already have created a .next operation, and we have\n            // just changed our .object, pass that information forward.\n            if (this.next) {\n               this.next.object = this.objectOut;\n            }\n         }\n      }\n   }\n\n   /**\n    * @method parseRow()\n    * When it is time to pull the information from the properties panel,\n    * use this fn to get the current Row of data.\n    *\n    * This fn() will populate the this.params with the values for each\n    * of our .parameterDefinitions.\n    *\n    * NOTE: in this process our .object and .objectOut isn't as simple\n    * as the other QL node types.  We'll have to interpolate our values\n    * from the given fieldID in our property panel.\n    *\n    * @param {webixNode} row\n    *        the current webix node that contains the ROW defining the\n    *        operation and it's parameters.\n    * @param {string} id\n    *        the unique id for where the properties panel is displayed.\n    */\n   parseRow(row, id) {\n      super.parseRow(row, id);\n\n      this.fieldID = this.params.field;\n\n      // we now have to build backwards from the current fieldID to set our\n      // relevant .object and .objectOut\n      this.AB.objects((o) => {\n         if (!this.field) {\n            // var field = o.fieldByID(this.fieldID);\n            var field = o.fieldByID(this.fieldID);\n            if (field) {\n               this.field = field;\n            }\n         }\n      });\n\n      if (this.field) {\n         this.object = this.field.object;\n         // v2 method:\n         // if (this.field.isConnected) {\n         if (this.field && this.field.key == \"connectObject\") {\n            this.objectOut = this.field.datasourceLink;\n         }\n      }\n   }\n}\nABQLSetPluck.uiIndentNext = 10;\n\nmodule.exports = ABQLSetPluck;\n","/*\n * ABQLSetSave\n *\n * An ABQLSetSave can store the current Data set into the Process Task it is\n * in, so that this data can be made available to other Process Tasks.\n *\n */\n\nconst ABQLSetSaveCore = require(\"../../core/ql/ABQLSetSaveCore.js\");\n\nclass ABQLSetSave extends ABQLSetSaveCore {\n   // constructor(attributes, prevOP, task, application) {\n   //     super(attributes, [], prevOP, task, application);\n   // }\n   ///\n   /// Instance Methods\n   ///\n\n   /*\n    * @method paramChanged()\n    * respond to an update to the given parameter.\n    * NOTE: the value will ALREADY be saved in this.params[pDef.name].\n    * @param {obj} pDef\n    *        the this.parameterDefinition entry of the parameter that was\n    *        changed.\n    */\n   paramChanged(pDef) {\n      if (pDef.name == \"task_param\") {\n         this.taskParam = this.params[pDef.name];\n      }\n   }\n\n   parseRow(row, id) {\n      super.parseRow(row, id);\n\n      if (!this.registered) {\n         this.task.registerDatasource(this);\n         this.registered = true;\n      }\n   }\n}\nABQLSetSave.uiIndentNext = 10;\n\nmodule.exports = ABQLSetSave;\n","/*\n * ABQLValueSave\n *\n * An ABQLValueSave can store the current Data field set into the Process Task it is\n * in, so that this data can be made available to other Process Tasks.\n *\n */\n\nconst ABQLValueSaveCore = require(\"../../core/ql/ABQLValueSaveCore.js\");\n\nclass ABQLValueSave extends ABQLValueSaveCore {}\nABQLValueSave.uiIndentNext = 30;\n\nmodule.exports = ABQLValueSave;\n","const ABViewCore = require(\"../../core/views/ABViewCore.js\");\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABView extends ABViewCore {\n   // constructor(attributes, application, parent) {\n   //    super(attributes, application, parent);\n   // }\n\n   // /*\n   //  * @method isValid\n   //  * check the current values to make sure they are valid.\n   //  * Here we check the default values provided by ABView.\n   //  *\n   //  * @return {ABFactory.Validation.validator()}\n   //  */\n   // isValid() {\n   //    var validator = this.AB.Validation.validator();\n\n   //    // // labels must be unique among views on the same parent\n   //    var parent = this.parent;\n   //    // if (!parent) { parent = this.application; }\n\n   //    // if we have a parent component:\n   //    if (parent) {\n   //       var isNameUnique =\n   //          parent.views((v) => {\n   //             return (\n   //                v.id != this.id &&\n   //                v.label.toLowerCase() == this.label.toLowerCase()\n   //             );\n   //          }).length == 0;\n   //       if (!isNameUnique) {\n   //          validator.addError(\n   //             \"label\",\n   //             L(\"View label must be unique among peers.\")\n   //          );\n   //       }\n   //    }\n   //    return validator;\n   // }\n\n   // /**\n   //  * @method editorComponent\n   //  * return the Editor for this UI component.\n   //  * the editor should display either a \"block\" view or \"preview\" of\n   //  * the current layout of the view.\n   //  * @param {string} mode what mode are we in ['block', 'preview']\n   //  * @return {Component}\n   //  */\n   // editorComponent(App, mode) {\n   //    var idBase = \"ABViewEditorComponent\";\n   //    var ids = {\n   //       component: App.unique(idBase + \"_component\"),\n   //       view: App.unique(idBase + \"_view\"),\n   //    };\n\n   //    var _ui = {\n   //       rows: [\n   //          {\n   //             id: ids.component,\n   //             view: App.custom.savablelayout.view,\n   //             type: \"space\",\n   //             rows: [],\n   //          },\n   //       ],\n   //    };\n\n   //    var _init = (options) => {\n   //       var Layout = $$(ids.component);\n\n   //       var allComponents = [];\n\n   //       App.eventIds = App.eventIds || {};\n\n   //       // prevent .attachEvent multiple times\n   //       if (App.eventIds[\"onAfterPortletMove\"])\n   //          webix.detachEvent(\"onAfterPortletMove\");\n\n   //       // listen a event of the porlet when layout is changed\n   //       App.eventIds[\"onAfterPortletMove\"] = webix.attachEvent(\n   //          \"onAfterPortletMove\",\n   //          (source, parent, active, target, mode) => {\n   //             _logic.onAfterPortletMove();\n   //          }\n   //       );\n\n   //       // attach all the .UI views:\n   //       this.views().forEach((child) => {\n   //          var component = child.component(App);\n\n   //          var porletUI = {\n   //             viewId: child.id, // set id to .viewId, the layout template\n   //             view: \"portlet\",\n   //             css: \"ab-interface-component\",\n   //             // borderless: true,\n   //             layoutType: \"head\", // Drag on icon\n   //             body: {\n   //                rows: [\n   //                   {\n   //                      view: \"template\",\n   //                      height: 30,\n   //                      css: \"ab-porlet-header\",\n   //                      template: _logic.template(child),\n   //                      onClick: {\n   //                         \"ab-component-edit\": (e, id, trg) => {\n   //                            _logic.viewEdit(e, child.id, trg);\n   //                         },\n   //                         \"ab-component-remove\": (e, id, trg) => {\n   //                            _logic.viewDelete(e, child.id, trg);\n   //                         },\n   //                      },\n   //                   },\n   //                   mode == \"preview\"\n   //                      ? component.ui\n   //                      : {\n   //                           // empty element\n   //                           view: \"spacer\",\n   //                           hidden: true,\n   //                        },\n   //                ],\n   //             },\n   //          };\n\n   //          // get element in template\n   //          var elem = Layout.queryView({ viewId: child.id });\n\n   //          // If webix element is not exists in html, then destroy it.\n   //          // NOTE : webix does not know html is missing when we redraw layout at .setState\n   //          if (elem && !document.body.contains(elem.$view)) elem.destructor();\n\n   //          if (elem) {\n   //             // replace component to layout\n   //             webix.ui(porletUI, elem);\n   //          }\n   //          // add component to rows\n   //          else {\n   //             Layout.addView(porletUI);\n   //          }\n\n   //          allComponents.push(component);\n   //       });\n\n   //       // in preview mode, have each child render a preview\n   //       // of their content:\n   //       if (mode == \"preview\") {\n   //          // perform any init setups for the content:\n   //          allComponents.forEach((component) => {\n   //             component.init();\n   //          });\n   //       }\n   //    };\n\n   //    var _logic = {\n   //       /**\n   //        * @method template()\n   //        * render the list template for the View\n   //        * @param {obj} obj the current View instance\n   //        * @param {obj} common  Webix provided object with common UI tools\n   //        */\n   //       template: function (child) {\n   //          return (\n   //             \"<div>\" +\n   //             `<i class=\"fa fa-${child.icon} webix_icon_btn\"></i> ` +\n   //             ` ${child.label}` +\n   //             '<div class=\"ab-component-tools\">' +\n   //             '<i class=\"fa fa-trash ab-component-remove\"></i>' +\n   //             '<i class=\"fa fa-edit ab-component-edit\"></i>' +\n   //             \"</div>\" +\n   //             \"</div>\"\n   //          );\n   //       },\n\n   //       /**\n   //        * @method viewDelete()\n   //        * Called when the [delete] icon for a child View is clicked.\n   //        * @param {obj} e the onClick event object\n   //        * @param {integer} id the id of the element to delete\n   //        * @param {obj} trg  Webix provided object\n   //        */\n   //       viewDelete: (e, id, trg) => {\n   //          var deletedView = this.views((v) => v.id == id)[0];\n\n   //          if (!deletedView) return false;\n\n   //          this.AB.Dialog.Confirm({\n   //             title: L(\"Delete component\"),\n   //             text: L(\"Do you want to delete <b>{0}</b>?\", [\n   //                deletedView.label,\n   //             ]),\n   //             callback: function (result) {\n   //                if (result) {\n   //                   var Layout = $$(ids.component);\n\n   //                   // remove UI of this component in template\n   //                   var deletedElem = Layout.queryView({ viewId: id });\n   //                   if (deletedElem)\n   //                      $$(ids.component).destroyView(deletedElem);\n\n   //                   // update/refresh template to ABView\n   //                   _logic.refreshTemplate();\n\n   //                   deletedView\n   //                      .destroy()\n   //                      .then(() => {\n   //                         // signal the current view has been deleted.\n   //                         deletedView.emit(\"destroyed\", deletedView);\n\n   //                         // if we don't have any views, then place a \"drop here\" placeholder\n   //                         if ($$(ids.component).getChildViews().length == 0) {\n   //                            webix.extend($$(ids.component), webix.OverlayBox);\n   //                            $$(ids.component).showOverlay(\n   //                               \"<div class='drop-zone'><div>\" +\n   //                                  App.labels.componentDropZone +\n   //                                  \"</div></div>\"\n   //                            );\n   //                         }\n   //                      })\n   //                      .catch((err) => {\n   //                         this.AB.error(\n   //                            \"Error trying to delete selected View:\",\n   //                            { error: err, view: deletedView }\n   //                         );\n   //                      });\n   //                }\n   //             },\n   //          });\n   //          e.preventDefault();\n   //       },\n\n   //       /**\n   //        * @method viewEdit()\n   //        * Called when the [edit] icon for a child View is clicked.\n   //        * @param {obj} e the onClick event object\n   //        * @param {integer} id the id of the element to edit\n   //        * @param {obj} trg  Webix provided object\n   //        */\n   //       viewEdit: (e, id, trg) => {\n   //          var view = this.views((v) => v.id == id)[0];\n\n   //          if (!view) return false;\n\n   //          // yeah, if the empty placeholder fires an [edit] event,\n   //          // then ignore it.\n   //          if (view.id == \"del_me\") return false;\n\n   //          // NOTE: let webix finish this onClick event, before\n   //          // calling .populateInterfaceWorkspace() which will replace\n   //          // the interface elements with the edited view.  (apparently\n   //          // that causes errors.)\n   //          setTimeout(() => {\n   //             App.actions.populateInterfaceWorkspace(view);\n   //          }, 50);\n\n   //          e.preventDefault();\n\n   //          return false;\n   //       },\n\n   //       onAfterPortletMove: () => {\n   //          _logic.refreshTemplate();\n\n   //          // save template layout to ABPageView\n   //          this.save();\n\n   //          // // Reorder\n   //          // var viewId = active.config.id;\n   //          // var targetId = target.config.id;\n\n   //          // var toPosition = this._views.findIndex((v) => v.id == targetId);\n\n   //          // this.viewReorder(viewId, toPosition);\n   //       },\n\n   //       refreshTemplate: () => {\n   //          // get portlet template UI to ABView\n   //          this.template = $$(ids.component).getState();\n   //       },\n   //    };\n\n   //    return {\n   //       ui: _ui,\n   //       init: _init,\n   //    };\n   // }\n\n   // static propertyEditorComponent(App) {\n   //    var ABViewPropertyComponent = new ABPropertyComponent({\n   //       editObject: this, // ABView\n\n   //       fieldDefaults: this.common(), // ABViewDefaults,\n\n   //       elements: (App, field) => {\n   //          var ids = {\n   //             imageWidth: \"\",\n   //             imageHeight: \"\",\n   //          };\n   //          ids = field.idsUnique(ids, App);\n\n   //          return [];\n   //       },\n\n   //       // defaultValues: the keys must match a .name of your elements to set it's default value.\n   //       defaultValues: ABViewPropertyComponentDefaults,\n\n   //       // rules: basic form validation rules for webix form entry.\n   //       // the keys must match a .name of your .elements for it to apply\n   //       rules: {\n   //          // 'textDefault':webix.rules.isNotEmpty,\n   //          // 'supportMultilingual':webix.rules.isNotEmpty\n   //       },\n\n   //       // include additional behavior on default component operations here:\n   //       // The base routines will be processed first, then these.  Any results\n   //       // from the base routine, will be passed on to these:\n   //       //   @param {obj} ids  the list of ids used to generate the UI.  your\n   //       //           provided .elements will have matching .name keys\n   //       //           to access them here.\n   //       //  @param {obj} values the current set of values provided for this instance\n   //       //             of ABField:\n   //       //           {\n   //       //           id:'',      // if already .saved()\n   //       //             label:'',\n   //       //             columnName:'',\n   //       //           settings:{\n   //       //             showIcon:'',\n   //       //\n   //       //             your element key=>values here\n   //       //           }\n   //       //           }\n   //       //\n   //       //     .clear(ids)  : reset the display to an empty state\n   //       //     .isValid(ids, isValid): perform validation on the current editor values\n   //       //     .populate(ids, ABField) : populate the form with your current settings\n   //       //     .show(ids)   : display the form in the editor\n   //       //     .values(ids, values) : return the current values from the form\n   //       logic: {},\n\n   //       // perform any additional setup actions here.\n   //       // @param {obj} ids  the hash of id values for all the current form elements.\n   //       //          it should have your elements + the default Header elements:\n   //       //           .label, .columnName, .fieldDescription, .showIcon\n   //       init: function (ids) {\n   //          // want to hide the description? :\n   //          // $$(ids.fieldDescription).hide();\n   //       },\n   //    });\n\n   //    return ABViewPropertyComponent.component(App);\n   // }\n\n   // static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\n   //    return [\n   //       // Component Label\n   //       {\n   //          view: \"text\",\n   //          // id: ids.label,\n   //          name: \"label\",\n   //          label: App.labels.dataFieldHeaderLabel,\n   //          placeholder: App.labels.dataFieldHeaderLabelPlaceholder,\n   //          labelWidth: this.AB.UISettings.config().labelWidthLarge,\n   //          css: \"ab-new-label-name\",\n   //          //        on: {\n   //          //          onChange: function (newVal, oldVal) {\n   //          // console.warn('ABView.onChange()!!!');\n   //          //          }\n   //          //        }\n   //       },\n   //    ];\n   // }\n\n   // static propertyEditorPopulate(App, ids, view) {\n   //    if (!view) return;\n   //    $$(ids.label).setValue(view.label);\n   // }\n\n   // static propertyEditorValues(ids, view) {\n   //    if (!view) return;\n   //    view.label = $$(ids.label).getValue();\n   // }\n\n   // static propertyEditorSave(ids, view, includeSubViews = false) {\n   //    this.propertyEditorValues(ids, view);\n\n   //    return new Promise((resolve, reject) => {\n   //       view\n   //          .save(includeSubViews)\n   //          .then(function () {\n   //             // signal the current view has been updated.\n   //             view.emit(\"properties.updated\", view);\n\n   //             resolve();\n   //          })\n   //          .catch(function (err) {\n   //             this.AB.error(\"unable to save view:\", {\n   //                error: err,\n   //                view: view,\n   //             });\n   //             reject(err);\n   //          });\n   //    });\n   // }\n\n   // /**\n   //  * @method propertyDatacollections()\n   //  * a convience method to return a list of available Datacollections\n   //  * @param {bool} isGlobal\n   //  *        true : return a list of ALL available DataCollections\n   //  *        false: (default) only return a list of included DCs\n   //  * @return {array}\n   //  *        [ { id:dc.id, value:dc.label } ]\n   //  *        this format is used by the webix select lists to choose your\n   //  *        datasources.\n   //  */\n   // propertyDatacollections(\n   //    filter = () => true,\n   //    isGlobal = false,\n   //    defaultOption = null\n   // ) {\n   //    if (defaultOption == null) {\n   //       defaultOption = {\n   //          id: \"\",\n   //          value: L(\"Select a DataCollection\"),\n   //       };\n   //    }\n\n   //    var list = [];\n   //    if (isGlobal) {\n   //       list = this.AB.datacollections(filter);\n   //    } else {\n   //       list = this.application.datacollectionsIncluded(filter);\n   //    }\n   //    list = list.map((dc) => {\n   //       return {\n   //          id: dc.id,\n   //          value: dc.label,\n   //       };\n   //    });\n   //    list.unshift(defaultOption);\n   //    return list;\n   // }\n\n   /*\n    * @component()\n    * return a UI component based upon this view.\n    * @param {obj} App\n    * @return {obj} UI component\n    */\n   component(App) {\n      var idBase = \"ABView_\" + this.id;\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n      };\n\n      // an ABView is a collection of rows:\n      var _ui = {\n         id: ids.component,\n         view: \"layout\",\n         type: \"space\",\n         rows: [],\n      };\n\n      // if this form is empty, then force a minimal row height\n      // so the component isn't completely hidden on the screen.\n      // (important in the editor so we don't loose the ability to edit the\n      // component)\n      if (_ui.rows.length == 0) {\n         _ui.height = 30;\n      }\n\n      // make sure each of our child views get .init() called\n      var _init = (options) => {};\n\n      return {\n         ui: _ui,\n         init: _init,\n      };\n   }\n\n   /*\n    * @method componentList\n    * return the list of components available on this view to display in the editor.\n    * @param {bool} isEdited  is this component currently in the Interface Editor\n    * @return {array} of ABView objects.\n    */\n   componentList(isEdited) {\n      // if (this.parent) {\n      //  return this.parent.componentList(false);\n      // } else {\n\n      // views not allowed to drop onto this View:\n      var viewsToIgnore = [\n         \"view\",\n         \"page\",\n         \"formpanel\",\n         \"viewcontainer\",\n         // not allowed Detail's widgets\n         \"detailcheckbox\",\n         \"detailcustom\",\n         \"detailconnect\",\n         \"detailimage\",\n         \"detailselectivity\",\n         \"detailtext\",\n         \"detailtree\",\n         // not allowed Form's widgets\n         \"button\",\n         \"checkbox\",\n         \"connect\",\n         \"datepicker\",\n         \"fieldcustom\",\n         \"textbox\",\n         \"numberbox\",\n         \"selectsingle\",\n         \"selectmultiple\",\n         \"formtree\",\n         \"fieldreadonly\",\n         // not allowed Chart's Widgets\n         \"pie\",\n         \"bar\",\n         \"line\",\n         \"area\",\n         // not allowed Report page\n         \"report\",\n         \"reportPage\",\n         \"reportPanel\",\n      ];\n\n      var allComponents = this.application.viewAll(); // ABViewManager.allViews();\n      var allowedComponents = allComponents.filter((c) => {\n         return viewsToIgnore.indexOf(c.common().key) == -1;\n      });\n\n      return allowedComponents;\n\n      // }\n   }\n\n   changePage(pageId) {\n      this.emit(\"changePage\", pageId);\n   }\n\n   // removeField(field, cb) {\n   //    // if this view has matching field then destroy()\n   //    if (this.settings.fieldId == field.id) {\n   //       this.destroy()\n   //          .then(() => {\n   //             // signal the current view has been deleted.\n   //             this.emit(\"destroyed\", this);\n   //             cb(null, true);\n   //          })\n   //          .catch((err) => {\n   //             this.AB.error(\"Error trying to delete selected View:\", {\n   //                error: err,\n   //                view: this,\n   //             });\n   //             cb(err);\n   //          });\n   //    } else {\n   //       // if not check for subViews then call removeField on them\n\n   //       var shouldSave = false;\n\n   //       var finish = () => {\n   //          if (shouldSave) {\n   //             this.save()\n   //                .then(() => {\n   //                   cb();\n   //                })\n   //                .catch(cb);\n   //          } else {\n   //             cb();\n   //          }\n   //       };\n\n   //       // for each sub view, view.removeField(field);\n   //       var listViews = this.views();\n   //       var done = 0;\n   //       listViews.forEach((v) => {\n   //          v.removeField(field, (err, updateMade) => {\n   //             if (err) {\n   //                cb(err);\n   //             } else {\n   //                if (updateMade) {\n   //                   shouldSave = true;\n   //                }\n\n   //                done++;\n   //                if (done >= listViews.length) {\n   //                   finish();\n   //                }\n   //             }\n   //          });\n   //       });\n\n   //       if (listViews.length == 0) {\n   //          finish();\n   //       }\n   //    }\n   // }\n};\n","const ABViewCSVExporterCore = require(\"../../core/views/ABViewCSVExporterCore\");\n\nconst ABViewCSVExporterPropertyComponentDefaults =\n   ABViewCSVExporterCore.defaultValues();\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nlet PropertyFilter = null;\n\nmodule.exports = class ABViewCSVExporter extends ABViewCSVExporterCore {\n   constructor(values, application, parent, defaultValues) {\n      super(values, application, parent, defaultValues);\n   }\n\n   //\n   //\tEditor Related\n   //\n\n   /**\n    * @method editorComponent\n    * return the Editor for this UI component.\n    * the editor should display either a \"block\" view or \"preview\" of\n    * the current layout of the view.\n    * @param {string} mode what mode are we in ['block', 'preview']\n    * @return {Component}\n    */\n   editorComponent(App, mode) {\n      let idBase = \"ABViewCsvExporterEditorComponent\";\n      let component = this.component(App, idBase);\n\n      return component;\n   }\n\n   //\n   // Property Editor\n   //\n\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\n      let idBase = \"ABViewCSVExporter\";\n\n      let commonUI = super.propertyEditorDefaultElements(\n         App,\n         ids,\n         _logic,\n         ObjectDefaults\n      );\n\n      _logic.showFilterPopup = ($view) => {\n         this.filter_popup.show($view, null, { pos: \"top\" });\n      };\n\n      _logic.onFilterChange = () => {\n         let view = _logic.currentEditObject();\n         let filterValues = PropertyFilter.getValue() || {};\n\n         let allComplete = true;\n         (filterValues.rules || []).forEach((f) => {\n            // if all 3 fields are present, we are good.\n            if (f.key && f.rule && f.value) {\n               allComplete = allComplete && true;\n            } else {\n               // else, we found an entry that wasn't complete:\n               allComplete = false;\n            }\n         });\n\n         // only perform the update if a complete row is specified:\n         if (allComplete) {\n            // we want to call .save() but give webix a chance to properly update it's\n            // select boxes before this call causes them to be removed:\n            setTimeout(() => {\n               this.propertyEditorSave(ids, view);\n            }, 10);\n         }\n      };\n\n      // create filter popups\n      this.initPopupEditors(App, ids, _logic);\n\n      // _logic functions\n\n      _logic.selectSource = (dcId, oldDcId) => {\n         let currView = _logic.currentEditObject();\n\n         // this.propertyUpdateRules(ids, currView);\n\n         // refresh UI\n         currView.emit(\"properties.updated\", currView);\n\n         // save\n         currView.settings.dataviewID = dcId;\n         this.propertyEditorValues(ids, currView);\n         currView.save();\n      };\n\n      return commonUI.concat([\n         {\n            view: \"fieldset\",\n            label: L(\"Data:\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n            body: {\n               rows: [\n                  {\n                     name: \"datacollection\",\n                     view: \"richselect\",\n                     label: L(\"Data Source\"),\n                     labelWidth: this.AB.UISettings.config().labelWidthLarge,\n                     skipAutoSave: true,\n                     on: {\n                        onChange: _logic.selectSource,\n                     },\n                  },\n                  {\n                     name: \"hasHeader\",\n                     view: \"checkbox\",\n                     label: L(\"Header on first line\"),\n                     labelWidth: this.AB.UISettings.config().labelWidthXLarge,\n                  },\n                  {\n                     cols: [\n                        {\n                           view: \"label\",\n                           label: L(\"Filter Option:\"),\n                           css: \"ab-text-bold\",\n                           width: this.AB.UISettings.config().labelWidthLarge,\n                        },\n                        {\n                           view: \"button\",\n                           name: \"filterMenuButton\",\n                           css: \"webix_primary\",\n                           label: L(\"Settings\"),\n                           icon: \"fa fa-gear\",\n                           type: \"icon\",\n                           badge: 0,\n                           click: function () {\n                              _logic.showFilterPopup(this.$view);\n                           },\n                        },\n                     ],\n                  },\n               ],\n            },\n         },\n         {\n            view: \"fieldset\",\n            label: L(\"Customize Display:\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n            body: {\n               type: \"clean\",\n               padding: 10,\n               rows: [\n                  {\n                     name: \"buttonLabel\",\n                     view: \"text\",\n                     label: L(\"Label\"),\n                     labelWidth: this.AB.UISettings.config().labelWidthLarge,\n                  },\n                  {\n                     name: \"filename\",\n                     view: \"text\",\n                     label: L(\"File name\"),\n                     labelWidth: this.AB.UISettings.config().labelWidthLarge,\n                  },\n                  {\n                     view: \"counter\",\n                     name: \"width\",\n                     label: L(\"Width:\"),\n                     labelWidth: this.AB.UISettings.config().labelWidthLarge,\n                  },\n               ],\n            },\n         },\n      ]);\n   }\n\n   static propertyEditorPopulate(App, ids, view) {\n      super.propertyEditorPopulate(App, ids, view);\n\n      // Pull data views to options\n      let dcOptions = view.AB.datacollections().map((dc) => {\n         return {\n            id: dc.id,\n            value: dc.label,\n         };\n      });\n\n      let $DcSelector = $$(ids.datacollection);\n      $DcSelector.define(\"options\", dcOptions);\n      $DcSelector.define(\"value\", view.settings.dataviewID || null);\n      $DcSelector.refresh();\n\n      $$(ids.hasHeader).setValue(\n         view.settings.hasHeader ||\n            ABViewCSVExporterPropertyComponentDefaults.hasHeader\n      );\n      $$(ids.buttonLabel).setValue(\n         view.settings.buttonLabel ||\n            ABViewCSVExporterPropertyComponentDefaults.buttonLabel\n      );\n      $$(ids.filename).setValue(\n         view.settings.filename ||\n            ABViewCSVExporterPropertyComponentDefaults.filename\n      );\n      $$(ids.width).setValue(\n         view.settings.width || ABViewCSVExporterPropertyComponentDefaults.width\n      );\n\n      // Populate data to popups\n      // PropertyFilter.applicationLoad(view.application);\n      let dc = view.datacollection;\n      let obj = dc ? dc.datasource : null;\n      if (obj) {\n         PropertyFilter.fieldsLoad(obj.fields());\n      } else {\n         PropertyFilter.fieldsLoad([]);\n      }\n      PropertyFilter.setValue(view.settings.where);\n\n      this.propertyBadgeNumber(ids, view);\n\n      //   // when a change is made in the properties the popups need to reflect the change\n      //   this.updateEventIds = this.updateEventIds || {}; // { viewId: boolean, ..., viewIdn: boolean }\n      //   if (!this.updateEventIds[view.id]) {\n      //      this.updateEventIds[view.id] = true;\n\n      //      view.addListener(\"properties.updated\", () => {\n      //         this.populateBadgeNumber(ids, view);\n      //      });\n      //   }\n   }\n\n   static initPopupEditors(App, ids, _logic) {\n      var idBase = \"ABViewCSVExporterPropertyEditor\";\n\n      PropertyFilter = this.AB.filterComplexNew(`${idBase}_filter`);\n      PropertyFilter.init();\n      // when we make a change in the popups we want to make sure we save the new workspace to the properties to do so just fire an onChange event\n      PropertyFilter.on(\"change\", (val) => {\n         _logic.onFilterChange(val);\n      });\n\n      this.filter_popup = webix.ui({\n         view: \"popup\",\n         width: 800,\n         hidden: true,\n         body: PropertyFilter.ui,\n      });\n   }\n\n   static propertyEditorValues(ids, view) {\n      super.propertyEditorValues(ids, view);\n\n      view.settings.dataviewID = $$(ids.datacollection).getValue();\n      view.settings.hasHeader = $$(ids.hasHeader).getValue();\n      view.settings.where = PropertyFilter.getValue();\n\n      view.settings.buttonLabel =\n         $$(ids.buttonLabel).getValue() ||\n         ABViewCSVExporterPropertyComponentDefaults.buttonLabel;\n\n      view.settings.filename =\n         $$(ids.filename).getValue() ||\n         ABViewCSVExporterPropertyComponentDefaults.filename;\n\n      view.settings.width =\n         $$(ids.width).getValue() ||\n         ABViewCSVExporterPropertyComponentDefaults.width;\n\n      this.propertyBadgeNumber(ids, view);\n   }\n\n   static propertyBadgeNumber(ids, view) {\n      if (view.settings.where && view.settings.where.rules) {\n         $$(ids.filterMenuButton).define(\n            \"badge\",\n            view.settings.where.rules.length\n         );\n         $$(ids.filterMenuButton).refresh();\n      } else {\n         $$(ids.filterMenuButton).define(\"badge\", null);\n         $$(ids.filterMenuButton).refresh();\n      }\n   }\n\n   component(App, idBase) {\n      idBase = idBase || \"ABCSVExporter_\" + this.id;\n      let ids = {\n         button: App.unique(`${idBase}_button`),\n         buttonFilter: App.unique(`${idBase}_button_filter`),\n         popupFilter: App.unique(`${idBase}_popup_filter`),\n      };\n\n      let ClientFilter = this.AB.filterComplexNew(`${idBase}_filter`);\n\n      let _ui = {\n         view: \"layout\",\n         type: \"clean\",\n         borderless: true,\n         cols: [\n            {\n               id: ids.buttonFilter,\n               view: \"button\",\n               css: \"webix_transparent\",\n               type: \"icon\",\n               icon: \"fa fa-filter\",\n               borderless: true,\n               width: 50,\n               label: \"\",\n               click: () => {\n                  _logic.showFilterPopup();\n               },\n            },\n            {\n               id: ids.button,\n               view: \"button\",\n               css: \"webix_primary\",\n               type: \"icon\",\n               icon: \"fa fa-download\",\n               borderless: true,\n               width:\n                  this.settings.width ||\n                  ABViewCSVExporterPropertyComponentDefaults.width,\n               label:\n                  this.settings.buttonLabel ||\n                  ABViewCSVExporterPropertyComponentDefaults.buttonLabel,\n               click: () => {\n                  _logic.downloadCsvFile();\n               },\n            },\n            { fillspace: true },\n         ],\n      };\n\n      // make sure each of our child views get .init() called\n      let _init = (options) => {\n         let dc = this.datacollection;\n         if (dc) {\n            let obj = dc.datasource;\n\n            // ClientFilter.applicationLoad(obj ? obj.application : null);\n            ClientFilter.fieldsLoad(obj ? obj.fields() : [], obj);\n         }\n\n         ClientFilter.init();\n         ClientFilter.on(\"change\", (val) => {\n            _logic.onFilterChange(val);\n         });\n\n         // webix.ui({\n         //    view: \"popup\",\n         //    id: ids.popupFilter,\n         //    width: 800,\n         //    hidden: true,\n         //    body: ClientFilter.ui,\n         // });\n      };\n\n      let _logic = (this._logic = {\n         downloadCsvFile: () => {\n            let url = `/appbuilder/csv-export/${this.id}`;\n            let where = ClientFilter.getValue();\n\n            if (where && (where.rules || []).length) {\n               let qsWhere = JSON.stringify(where);\n               qsWhere = encodeURIComponent(qsWhere);\n               url = `${url}?where=${qsWhere}`;\n            }\n\n            window.open(url);\n         },\n         showFilterPopup: () => {\n            let $buttonFilter = $$(ids.buttonFilter);\n            ClientFilter.popUp($buttonFilter ? $buttonFilter.$view : null);\n         },\n         onFilterChange: () => {\n            let $buttonFilter = $$(ids.buttonFilter);\n            if (!$buttonFilter) return;\n\n            let where = ClientFilter.getValue();\n            $buttonFilter.define(\"badge\", (where.rules || []).length || null);\n            $buttonFilter.refresh();\n         },\n      });\n\n      return {\n         ui: _ui,\n         init: _init,\n      };\n   }\n};\n","const ABViewCSVImporterCore = require(\"../../core/views/ABViewCSVImporterCore\");\n// import ClassUI from \"../../../ui/ClassUI\";\nconst ClassUI = require(\"../../../ui/ClassUI\").default;\n\nconst CSVImporter = require(\"../CSVImporter\");\nconst ABRecordRule = require(\"../../rules/ABViewRuleListFormRecordRules\");\n\nconst ABViewCSVImporterPropertyComponentDefaults =\n   ABViewCSVImporterCore.defaultValues();\n\nlet L = (...params) => AB.Multilingual.label(...params);\n// multilingual Label fn()\n\nlet PopupRecordRule = null;\n\nclass ABViewCSVImporterComponent extends ClassUI {\n   constructor(viewCSVImporter, idBase) {\n      idBase = idBase || `ABCSVImporter_${viewCSVImporter.id}`;\n\n      super(idBase, {\n         button: \"\",\n         popup: \"\",\n\n         form: \"\",\n         uploader: \"\",\n         uploadFileList: \"\",\n         separatedBy: \"\",\n         headerOnFirstLine: \"\",\n         columnList: \"\",\n\n         search: \"\",\n         datatable: \"\",\n\n         statusMessage: \"\",\n         progressBar: \"\",\n\n         importButton: \"\",\n         rules: \"\",\n      });\n\n      this.viewCSVImporter = viewCSVImporter;\n      // {ABViewCSVImporter}\n      // The ABView that has created this CSVImporter.\n\n      this.settings = this.viewCSVImporter.settings;\n      // {json}\n      // a local copy of the settings for our ABView\n\n      this.csvImporter = new CSVImporter(L);\n      // {CSVImporter}\n      // An instance of the object that imports the CSV data.\n\n      this._dataRows = null;\n\n      this.CurrentObjectID = null;\n      // {string}\n      // the ABObject.id of the object we are working with.\n\n      this._csvFileInfo = null;\n\n      this.validationError = false;\n   }\n\n   ui() {\n      return {\n         cols: [\n            {\n               view: \"button\",\n               css: \"webix_primary\",\n               type: \"icon\",\n               icon: \"fa fa-upload\",\n               label: L(\n                  this.settings.buttonLabel ||\n                     ABViewCSVImporterPropertyComponentDefaults.buttonLabel\n               ),\n               width:\n                  this.settings.width ||\n                  ABViewCSVImporterPropertyComponentDefaults.width,\n               click: () => {\n                  this.showPopup();\n               },\n            },\n            {\n               fillspace: true,\n            },\n         ],\n      };\n   }\n\n   uiConfig() {\n      var ids = this.ids;\n\n      return {\n         view: \"form\",\n         type: \"clean\",\n         id: ids.form,\n         borderless: true,\n         minWidth: 400,\n         gravity: 1,\n         elements: [\n            {\n               rows: [\n                  {\n                     id: ids.uploader,\n                     view: \"uploader\",\n                     name: \"csvFile\",\n                     css: \"webix_primary\",\n                     value: L(\"Choose a CSV file\"),\n                     accept: \"text/csv\",\n                     multiple: false,\n                     autosend: false,\n                     link: ids.uploadFileList,\n                     on: {\n                        onBeforeFileAdd: (fileInfo) => {\n                           this._csvFileInfo = fileInfo;\n                           return this.loadCsvFile();\n                        },\n                     },\n                  },\n                  {\n                     id: ids.uploadFileList,\n                     name: \"uploadedFile\",\n                     view: \"list\",\n                     type: \"uploader\",\n                     autoheight: true,\n                     borderless: true,\n                     onClick: {\n                        webix_remove_upload: (e, id /*, trg */) => {\n                           this.removeCsvFile(id);\n                        },\n                     },\n                  },\n                  {\n                     padding: 10,\n                     rows: [\n                        {\n                           id: ids.separatedBy,\n                           view: \"richselect\",\n                           name: \"separatedBy\",\n                           label: L(\"Separated by\"),\n                           labelWidth: 140,\n                           options: this.csvImporter.getSeparateItems(),\n                           value: \",\",\n                           on: {\n                              onChange: () => {\n                                 this.loadCsvFile();\n                              },\n                           },\n                        },\n                        {\n                           id: ids.headerOnFirstLine,\n                           view: \"checkbox\",\n                           name: \"headerOnFirstLine\",\n                           label: L(\"Header on first line\"),\n                           labelWidth: 140,\n                           disabled: true,\n                           value: true,\n                           on: {\n                              onChange: (/*newVal, oldVal*/) => {\n                                 this.populateColumnList();\n                              },\n                           },\n                        },\n                     ],\n                  },\n                  {\n                     type: \"space\",\n                     rows: [\n                        {\n                           view: \"scrollview\",\n                           minHeight: 300,\n                           body: {\n                              padding: 10,\n                              id: ids.columnList,\n                              rows: [],\n                           },\n                        },\n                     ],\n                  },\n               ],\n            },\n         ],\n      };\n   }\n\n   uiRecordsView() {\n      var ids = this.ids;\n      return {\n         gravity: 2,\n         rows: [\n            {\n               view: \"toolbar\",\n               css: \"bg_gray\",\n               cols: [\n                  { width: 5 },\n                  {\n                     id: ids.search,\n                     view: \"search\",\n                     value: \"\",\n                     label: \"\",\n                     placeholder: L(\"Search records...\"),\n                     keyPressTimeout: 200,\n                     on: {\n                        onTimedKeyPress: () => {\n                           let text = $$(ids.search).getValue();\n                           this.search(text);\n                        },\n                     },\n                  },\n                  { width: 2 },\n               ],\n            },\n            {\n               id: ids.datatable,\n               view: \"datatable\",\n               resizeColumn: true,\n               editable: true,\n               editaction: \"dblclick\",\n               css: \"ab-csv-importer\",\n               borderless: false,\n               tooltip: (obj) => {\n                  var tooltip = obj._errorMsg\n                     ? obj._errorMsg\n                     : \"No validation errors\";\n                  return tooltip;\n               },\n               minWidth: 650,\n               columns: [],\n               on: {\n                  onValidationError: function (id, obj, details) {\n                     // console.log(`item ${id} invalid`);\n                     var errors = \"\";\n                     Object.keys(details).forEach((key) => {\n                        this.$view.complexValidations[key].forEach((err) => {\n                           errors += err.invalidMessage + \"</br>\";\n                        });\n                     });\n                     var $dt = $$(ids.datatable);\n                     $dt.blockEvent();\n                     $dt.updateItem(id, {\n                        _status: \"invalid\",\n                        _errorMsg: errors,\n                     });\n                     $dt.unblockEvent();\n                     this.validationError = true;\n                  },\n                  onValidationSuccess: function (id, obj, details) {\n                     // console.log(`item ${id} valid`);\n                     var $dt = $$(ids.datatable);\n                     $dt.blockEvent();\n                     $dt.updateItem(id, {\n                        _status: \"valid\",\n                        _errorMsg: \"\",\n                     });\n                     $dt.unblockEvent();\n                     this.validationError = false;\n                  },\n                  onCheck: () => {\n                     var selected = $$(ids.datatable).find({ _included: true });\n                     $$(ids.importButton).setValue(this.labelImport(selected));\n                     if (this.overLimitAlert(selected)) {\n                        $$(ids.importButton).disable();\n                     } else {\n                        $$(ids.importButton).enable();\n                     }\n                  },\n               },\n            },\n            {\n               id: ids.progressBar,\n               height: 6,\n            },\n            {\n               view: \"button\",\n               name: \"import\",\n               id: ids.importButton,\n               value: L(\"Import\"),\n               css: \"webix_primary\",\n               disabled: true,\n               click: () => {\n                  this.import();\n               },\n            },\n         ],\n      };\n   }\n\n   uiPopup() {\n      var ids = this.ids;\n\n      return {\n         id: ids.popup,\n         view: \"window\",\n         hidden: true,\n         position: \"center\",\n         modal: true,\n         resize: true,\n         head: {\n            view: \"toolbar\",\n            css: \"webix_dark\",\n            cols: [\n               {},\n               {\n                  view: \"label\",\n                  label: L(\"CSV Importer\"),\n                  autowidth: true,\n               },\n               {},\n               {\n                  view: \"button\",\n                  width: 35,\n                  css: \"webix_transparent\",\n                  type: \"icon\",\n                  icon: \"nomargin fa fa-times\",\n                  click: () => {\n                     this.hide();\n                  },\n               },\n            ],\n         },\n         body: {\n            type: \"form\",\n            rows: [\n               {\n                  type: \"line\",\n                  cols: [\n                     this.uiConfig(),\n                     { width: 20 },\n                     this.uiRecordsView(),\n                     { width: 1 },\n                  ],\n               },\n               {\n                  id: ids.statusMessage,\n                  view: \"label\",\n                  align: \"right\",\n                  hidden: true,\n               },\n               {\n                  hidden: true,\n                  margin: 5,\n                  cols: [\n                     { fillspace: true },\n                     {\n                        view: \"button\",\n                        name: \"cancel\",\n                        value: L(\"Cancel\"),\n                        css: \"ab-cancel-button\",\n                        autowidth: true,\n                        click: () => {\n                           this.hide();\n                        },\n                     },\n                     /*,\n                        {\n                           view: \"button\",\n                           name: \"import\",\n                           id: ids.importButton,\n                           value: labels.component.import,\n                           css: \"webix_primary\",\n                           disabled: true,\n                           autowidth: true,\n                           type: \"form\",\n                           click: () => {\n                              _logic.import();\n                           }\n                        }*/\n                  ],\n               },\n            ],\n         },\n      };\n   }\n\n   /**\n    * @method CurrentObject()\n    * A helper to return the current ABObject we are working with.\n    * @return {ABObject}\n    */\n   get CurrentObject() {\n      return this.AB.objectByID(this.CurrentObjectID);\n   }\n\n   objectLoad(object) {\n      this.CurrentObjectID = object?.id;\n   }\n\n   init(AB) {\n      this.AB = AB;\n      var ids = this.ids;\n\n      // Populate values to rules\n\n      let selectedDv = this.viewCSVImporter.datacollection;\n\n      if (selectedDv) {\n         this.CurrentObjectID = selectedDv.datasource.id;\n      }\n\n      webix.ui(this.uiPopup());\n\n      if ($$(ids.form)) webix.extend($$(ids.form), webix.ProgressBar);\n      if ($$(ids.progressBar))\n         webix.extend($$(ids.progressBar), webix.ProgressBar);\n   }\n\n   showPopup() {\n      $$(this.ids.popup)?.show();\n\n      this.formClear();\n\n      // open file dialog to upload\n      $$(this.ids.uploader).fileDialog();\n   }\n\n   hide() {\n      $$(this.ids.popup)?.hide();\n   }\n\n   formClear() {\n      var ids = this.ids;\n      this._dataRows = null;\n      this._csvFileInfo = null;\n\n      $$(ids.form).clearValidation();\n      $$(ids.form).clear();\n      $$(ids.separatedBy).setValue(\",\");\n\n      webix.ui([], $$(ids.columnList));\n\n      $$(ids.headerOnFirstLine).disable();\n      $$(ids.importButton).disable();\n\n      $$(ids.search).setValue(\"\");\n      $$(ids.uploadFileList).clearAll();\n      $$(ids.datatable).clearAll();\n\n      $$(ids.statusMessage).setValue(\"\");\n      $$(ids.statusMessage).hide();\n   }\n\n   search(searchText) {\n      let $datatable = $$(this.ids.datatable);\n      if (!$datatable) return;\n\n      searchText = (searchText || \"\").toLowerCase();\n\n      let matchFields = this.getMatchFields();\n\n      $datatable.filter((row) => {\n         let exists = false;\n\n         (matchFields || []).forEach((f) => {\n            if (exists) return;\n\n            exists =\n               (row[`${f.columnIndex}`] || \"\")\n                  .toString()\n                  .toLowerCase()\n                  .indexOf(searchText) > -1;\n         });\n\n         return exists;\n      });\n   }\n\n   statusTemplate(item) {\n      let template = \"\";\n\n      if (!item) return template;\n\n      switch (item._status) {\n         case \"in-progress\":\n            template = \"<span class='fa fa-refresh'></span>\";\n            break;\n         case \"invalid\":\n            template = \"<span class='fa fa-exclamation-triangle'></span>\";\n            break;\n         case \"valid\":\n            template = \"<span class='fa fa-check'></span>\";\n            break;\n         case \"done\":\n            template = \"<span class='fa fa-check'></span>\";\n            break;\n         case \"fail\":\n            template = \"<span class='fa fa-remove'></span>\";\n            break;\n      }\n\n      return template;\n   }\n\n   async loadCsvFile() {\n      if (!this._csvFileInfo) return false;\n\n      if (!this.csvImporter.validateFile(this._csvFileInfo)) {\n         webix.alert({\n            title: L(\"This file extension is not allowed\"),\n            text: L(\"Please only upload CSV files\"),\n            ok: L(\"Ok\"),\n         });\n\n         return false;\n      }\n\n      var ids = this.ids;\n\n      // show loading cursor\n      $$(ids.form)?.showProgress?.({ type: \"icon\" });\n\n      // read CSV file\n      let separatedBy = $$(ids.separatedBy).getValue();\n      this._dataRows = await this.csvImporter.getDataRows(\n         this._csvFileInfo,\n         separatedBy\n      );\n\n      $$(ids.headerOnFirstLine).enable();\n      $$(ids.importButton).enable();\n      let length = this._dataRows.length;\n      if ($$(ids.headerOnFirstLine).getValue()) {\n         length = this._dataRows.length - 1;\n      }\n      $$(ids.importButton).setValue(this.labelImport(length));\n\n      this.populateColumnList();\n\n      $$(ids.form)?.hideProgress?.();\n\n      return true;\n   }\n\n   removeCsvFile(fileId) {\n      $$(this.ids.uploadFileList).remove(fileId);\n      this.formClear();\n      return true;\n   }\n\n   populateColumnList() {\n      var ids = this.ids;\n      var self = this;\n\n      // clear list\n      webix.ui([], $$(ids.columnList));\n\n      if (this._dataRows == null) return;\n\n      // check first line of CSV\n      let firstLine = this._dataRows[0];\n      if (firstLine == null) return;\n\n      let csvColumnList = [];\n      let fieldList = [];\n      if (this.CurrentObject) {\n         fieldList =\n            this.CurrentObject.fields((f) => {\n               // available fields\n               if (\n                  this.settings.availableFieldIds?.length &&\n                  this.settings.availableFieldIds.indexOf(f.id) < 0\n               ) {\n                  return false;\n               }\n\n               // filter editable fields\n               let formComp = f.formComponent();\n               if (!formComp) return true;\n\n               let formConfig = formComp.common();\n               if (!formConfig) return true;\n\n               return formConfig.key != \"fieldreadonly\";\n            }) || [];\n      }\n      // check first line be header columns\n      if ($$(ids.headerOnFirstLine).getValue()) {\n         csvColumnList = firstLine.map((colName, index) => {\n            return {\n               id: index + 1, // webix .options list disallow value 0\n               value: colName,\n               key: this.csvImporter.getGuessDataType(this._dataRows, index),\n            };\n         });\n      } else {\n         for (let i = 0; i < firstLine.length; i++) {\n            csvColumnList.push({\n               id: i + 1, // webix .options list disallow value 0\n               value: L(\"Column {0}\", [i + 1]),\n               key: this.csvImporter.getGuessDataType(this._dataRows, i),\n            });\n         }\n      }\n\n      // Add unselect item\n      csvColumnList.unshift({\n         id: \"none\",\n         value: L(\"None\"),\n      });\n\n      // populate columns to UI\n      let uiColumns = [];\n      let selectedCsvCols = [];\n      fieldList.forEach((f) => {\n         let selectVal = \"none\";\n\n         // match up by data type\n         let matchCol = csvColumnList.filter(\n            (c) => c.key == f.key && selectedCsvCols.indexOf(c.id) < 0\n         )[0];\n         if (matchCol) {\n            selectVal = matchCol.id;\n\n            // cache\n            selectedCsvCols.push(selectVal);\n         }\n\n         let columnOptUI = {\n            view: \"richselect\",\n            gravity: 2,\n            options: csvColumnList,\n            fieldId: f.id,\n            abName: \"columnIndex\",\n            value: selectVal,\n            on: {\n               onChange: function () {\n                  self.toggleLinkFields(this);\n                  self.loadDataToGrid();\n               },\n            },\n         };\n\n         // Add date format options\n         if (f.key == \"date\") {\n            let dateSeparatorOptions = [\"/\", \"-\", \".\", \",\", \" \"];\n            let dayFormatOptions = [\n               { value: L(\"1 to 31\"), id: \"D\" },\n               { value: L(\"01 to 31\"), id: \"DD\" },\n            ];\n            let monthFormatOptions = [\n               { value: L(\"1 to 12\"), id: \"M\" },\n               { value: L(\"01 to 12\"), id: \"MM\" },\n            ];\n            let yearFormatOptions = [\n               { value: L(\"00 to 99\"), id: \"YY\" },\n               { value: L(\"2000 to 2099\"), id: \"YYYY\" },\n            ];\n            let dateOrderOptions = [\n               {\n                  value: L(\"D-M-Y\"),\n                  id: 1,\n               },\n               {\n                  value: L(\"M-D-Y\"),\n                  id: 2,\n               },\n               {\n                  value: L(\"Y-M-D\"),\n                  id: 3,\n               },\n               {\n                  value: L(\"Y-D-M\"),\n                  id: 4,\n               },\n            ];\n\n            columnOptUI = {\n               gravity: 2,\n               rows: [\n                  columnOptUI,\n                  {\n                     view: \"richselect\",\n                     label: L(\"Separator\"),\n                     labelWidth: 100,\n                     on: {\n                        onChange: () => {\n                           this.loadDataToGrid();\n                        },\n                     },\n                     name: \"separator\",\n                     abName: \"columnDateFormat\",\n                     options: dateSeparatorOptions,\n                     value: \"/\",\n                  },\n                  {\n                     view: \"richselect\",\n                     label: L(\"Day\"),\n                     labelWidth: 100,\n                     on: {\n                        onChange: () => {\n                           this.loadDataToGrid();\n                        },\n                     },\n                     name: \"day\",\n                     abName: \"columnDateFormat\",\n                     options: dayFormatOptions,\n                     value: \"D\",\n                  },\n                  {\n                     view: \"richselect\",\n                     label: L(\"Month\"),\n                     labelWidth: 100,\n                     on: {\n                        onChange: () => {\n                           this.loadDataToGrid();\n                        },\n                     },\n                     name: \"month\",\n                     abName: \"columnDateFormat\",\n                     options: monthFormatOptions,\n                     value: \"M\",\n                  },\n                  {\n                     view: \"richselect\",\n                     label: L(\"Year\"),\n                     labelWidth: 100,\n                     on: {\n                        onChange: () => {\n                           this.loadDataToGrid();\n                        },\n                     },\n                     name: \"year\",\n                     abName: \"columnDateFormat\",\n                     options: yearFormatOptions,\n                     value: \"YY\",\n                  },\n                  {\n                     view: \"richselect\",\n                     label: L(\"Order\"),\n                     labelWidth: 100,\n                     on: {\n                        onChange: () => {\n                           this.loadDataToGrid();\n                        },\n                     },\n                     name: \"order\",\n                     abName: \"columnDateFormat\",\n                     options: dateOrderOptions,\n                     value: 1,\n                  },\n               ],\n            };\n         }\n\n         // Add connected field options\n         if (f.isConnection) {\n            let linkFieldOptions = [];\n\n            if (f.datasourceLink) {\n               linkFieldOptions = f.datasourceLink\n                  .fields((fld) => !fld.isConnection)\n                  .map((fld) => {\n                     return {\n                        id: fld.id,\n                        value: fld.label,\n                     };\n                  });\n            }\n\n            columnOptUI = {\n               gravity: 2,\n               rows: [\n                  columnOptUI,\n                  {\n                     view: \"richselect\",\n                     label: \"=\",\n                     labelWidth: 20,\n                     abName: \"columnLinkData\",\n                     hidden: true,\n                     options: linkFieldOptions,\n                     value: linkFieldOptions[0] ? linkFieldOptions[0].id : null,\n                  },\n               ],\n            };\n         }\n\n         uiColumns.push({\n            view: \"layout\",\n            borderless: true,\n            cols: [\n               {\n                  view: \"template\",\n                  gravity: 1,\n                  borderless: true,\n                  css: { \"padding-top\": 10 },\n                  template: `<span class=\"fa fa-${f.icon}\"></span> ${f.label}`,\n               },\n               columnOptUI,\n            ],\n         });\n      });\n      webix.ui(uiColumns, $$(ids.columnList));\n\n      this.loadDataToGrid();\n   }\n\n   toggleLinkFields($columnOption) {\n      if (!$columnOption) return;\n\n      let $optionPanel = $columnOption.getParentView();\n      let $linkFieldOption = $optionPanel.queryView(\n         { abName: \"columnLinkData\" },\n         \"all\"\n      )[0];\n      if (!$linkFieldOption) return;\n\n      if ($columnOption.getValue() == \"none\") {\n         $linkFieldOption.hide();\n      } else {\n         $linkFieldOption.show();\n      }\n   }\n\n   overLimitAlert(data) {\n      var limit = 1000;\n      if (data.length > limit) {\n         // we only allow 1000 record imports\n         webix.alert({\n            title: L(\"Too many records\"),\n            ok: L(\"Ok\"),\n            text: L(\n               \"Due to browser limitations we only allow imports of {0} records. Please upload a new CSV or deselect records to import.\",\n               [limit]\n            ),\n         });\n         return true;\n      }\n      return false;\n   }\n\n   loadDataToGrid() {\n      var ids = this.ids;\n      let $datatable = $$(ids.datatable);\n      if (!$datatable) return;\n\n      $datatable.clearAll();\n\n      // show loading cursor\n      $datatable?.showProgress?.({ type: \"icon\" });\n\n      /** Prepare Columns */\n      let matchFields = this.getMatchFields();\n\n      let columns = [];\n\n      // add \"status\" column\n      columns.push({\n         id: \"_status\",\n         header: \"\",\n         template: this.statusTemplate,\n         width: 30,\n      });\n\n      // add \"checkbox\" column\n      columns.push({\n         id: \"_included\",\n         header: { content: \"masterCheckbox\" },\n         template: \"{common.checkbox()}\",\n         width: 30,\n      });\n\n      var fieldValidations = [];\n      var rulePops = [];\n      // populate columns\n      (matchFields || []).forEach((f) => {\n         var validationRules = f.field.settings.validationRules;\n         // parse the rules because they were stored as a string\n         // check if rules are still a string...if so lets parse them\n         if (validationRules && typeof validationRules === \"string\") {\n            validationRules = JSON.parse(validationRules);\n         }\n\n         if (validationRules && validationRules.length) {\n            var validationUI = [];\n            // there could be more than one so lets loop through and build the UI\n            validationRules.forEach((rule) => {\n               var Filter = this.AB.filterComplexNew(\n                  `${f.field.id}_${webix.uid()}`\n               );\n               // add the new ui to an array so we can add them all at the same time\n               validationUI.push(Filter.ui);\n               // store the filter's info so we can assign values and settings after the ui is rendered\n               fieldValidations.push({\n                  filter: Filter,\n                  view: Filter.ids.querybuilder,\n                  columnName: f.field.id,\n                  validationRules: rule.rules,\n                  invalidMessage: rule.invalidMessage,\n                  columnIndex: f.columnIndex,\n               });\n            });\n            // create a unique view id for popup\n            var popUpId = ids.rules + \"_\" + f.field.id + \"_\" + webix.uid();\n            // store the popup ids so we can remove the later\n            rulePops.push(popUpId);\n            // add the popup to the UI but don't show it\n            webix.ui({\n               view: \"popup\",\n               css: \"ab-rules-popup\",\n               id: popUpId,\n               body: {\n                  rows: validationUI,\n               },\n            });\n         }\n\n         var editor = \"text\";\n         switch (f.field.key) {\n            case \"number\":\n               editor = \"number\";\n               break;\n            default:\n            // code block\n         }\n         columns.push({\n            id: f.columnIndex,\n            header: f.field.label,\n            editor: editor,\n            template: function (obj, common, value /*, col, ind */) {\n               return value.replace(/[<]/g, \"&lt;\");\n            },\n            minWidth: 150,\n            fillspace: true,\n         });\n      });\n\n      if (fieldValidations.length) {\n         // we need to store the rules for use later so lets build a container array\n         var complexValidations = [];\n         fieldValidations.forEach((f) => {\n            // init each ui to have the properties (app and fields) of the object we are editing\n            // f.filter.applicationLoad(App);\n            f.filter.fieldsLoad(this.CurrentObject.fields());\n            // now we can set the value because the fields are properly initialized\n            f.filter.setValue(f.validationRules);\n            // if there are validation rules present we need to store them in a lookup hash\n            // so multiple rules can be stored on a single field\n            if (!Array.isArray(complexValidations[f.columnName]))\n               complexValidations[f.columnName] = [];\n\n            // now we can push the rules into the hash\n            complexValidations[f.columnName].push({\n               filters: $$(f.view).getFilterHelper(),\n               values: $$(ids.datatable).getSelectedItem(),\n               invalidMessage: f.invalidMessage,\n               columnIndex: f.columnIndex,\n            });\n         });\n         var rules = {};\n         var dataTable = $$(ids.datatable);\n         // store the rules in a data param to be used later\n         dataTable.$view.complexValidations = complexValidations;\n         // use the lookup to build the validation rules\n         Object.keys(complexValidations).forEach(function (key) {\n            rules[key] = function (value, data) {\n               // default valid is true\n               var isValid = true;\n               dataTable.$view.complexValidations[key].forEach((filter) => {\n                  let rowValue = {};\n                  // use helper funtion to check if valid\n                  // map the column names to the index numbers of data\n                  // reformat data to display\n                  (matchFields || []).forEach((f) => {\n                     let record = data[f.columnIndex];\n                     if (\n                        f.field.key == \"date\" &&\n                        record.includes(\"Invalid date\")\n                     ) {\n                        isValid = false;\n                     }\n                     rowValue[f.field.id] = record;\n                  });\n                  var ruleValid = filter.filters(rowValue);\n                  // if invalid we need to tell the field\n                  if (ruleValid == false) {\n                     isValid = false;\n                     // webix.message({\n                     //    type: \"error\",\n                     //    text: invalidMessage\n                     // });\n                  }\n               });\n               return isValid;\n            };\n         });\n         // define validation rules\n         dataTable.define(\"rules\", rules);\n         // store the array of view ids on the webix object so we can get it later\n         dataTable.config.rulePops = rulePops;\n         dataTable.refresh();\n      } else {\n         var dataTable = $$(ids.datatable);\n         // check if the previous datatable had rule popups and remove them\n         if (dataTable.config.rulePops) {\n            dataTable.config.rulePops.forEach((popup) => {\n               if ($$(popup)) $$(popup).destructor();\n            });\n         }\n         // remove any validation rules from the previous table\n         dataTable.define(\"rules\", {});\n         dataTable.refresh();\n      }\n\n      /** Prepare Data */\n      let parsedData = [];\n\n      (this._dataRows || []).forEach((row, index) => {\n         let rowValue = {\n            id: index + 1,\n         };\n\n         // reformat data to display\n         (matchFields || []).forEach((f) => {\n            let data = row[f.columnIndex - 1];\n\n            if (f.field.key == \"date\") {\n               // let dateFormat = moment(data, f.format).format(\n               //    \"YYYY-MM-DD\"\n               // );\n               // debugger;\n               let dateFormat = this.AB.toDate(data, { format: f.format });\n               dateFormat = this.AB.toDateFormat(dateFormat, {\n                  format: \"YYYY-MM-DD\",\n               });\n               if (dateFormat == \"Invalid date\") {\n                  dateFormat = dateFormat + \" - \" + data;\n               }\n               rowValue[f.columnIndex] = dateFormat;\n            } else {\n               rowValue[f.columnIndex] = data; // array to object\n            }\n         });\n\n         // insert \"true\" value of checkbox\n         rowValue[\"_included\"] = true;\n\n         parsedData.push(rowValue);\n      });\n\n      // skip the first line\n      let isSkipFirstLine = $$(ids.headerOnFirstLine).getValue();\n      if (isSkipFirstLine && parsedData.length > 1) {\n         parsedData = parsedData.slice(1);\n      }\n\n      $$(ids.importButton).setValue(this.labelImport(parsedData));\n\n      $datatable.refreshColumns(columns);\n\n      $datatable.parse(parsedData);\n\n      if (this.overLimitAlert(parsedData)) {\n         $$(ids.importButton).disable();\n      } else {\n         $$(ids.importButton).enable();\n      }\n\n      // hide loading cursor\n      $datatable?.hideProgress?.();\n   }\n\n   refreshRemainingTimeText(startUpdateTime, total, index) {\n      const ids = this.ids;\n\n      // Calculate remaining time\n      let spentTime = new Date() - startUpdateTime; // milliseconds that has passed since last completed record since start\n\n      let averageRenderTime = spentTime / index; // average milliseconds per single render at this point\n\n      let remainTime = averageRenderTime * (total - index);\n\n      let result = \"\";\n\n      // Convert milliseconds to a readable string\n      let days = (remainTime / 86400000).toFixed(0);\n      let hours = (remainTime / 3600000).toFixed(0);\n      let minutes = (remainTime / 60000).toFixed(0);\n      let seconds = (remainTime / 1000).toFixed(0);\n\n      if (seconds < 1) result = \"\";\n      else if (seconds < 60)\n         result = L(\"Approximately {0} second(s) remaining\", [seconds]);\n      // result = `Approximately ${seconds} second${\n      //    seconds > 1 ? \"s\" : \"\"\n      // }`;\n      else if (minutes == 1)\n         result = L(\"Approximately 1 minute {0} seconds remaining\", [\n            seconds - 60,\n         ]);\n      // result = `Approximately 1 minute ${seconds - 60} seconds`;\n      else if (minutes < 60)\n         result = L(\"Approximately {0} minutes remaining\", [minutes]);\n      else if (hours < 24)\n         result = L(\"Approximately {0} hour(s) remaining\", [hours]);\n      else result = L(\"Approximately {0} day(s) remaining\", [days]);\n\n      if (result) {\n         $$(ids.importButton)?.setValue(result);\n      } else {\n         const selected = $$(ids.datatable)?.find({ _included: true });\n         $$(ids.importButton)?.setValue(this.labelImport(selected));\n      }\n   }\n\n   /**\n    * @method getMatchFields\n    *\n    * @return {Object} - [\n    *                      {\n    *                         columnIndex: {number},\n    *                         field: {ABField},\n    *                         searchField: {ABField} [optional]\n    *                      },\n    *                      ...\n    *                    ]\n    */\n   getMatchFields() {\n      let result = [];\n      var ids = this.ids;\n\n      // get richselect components\n      let $selectorViews = $$(ids.columnList)\n         .queryView({ abName: \"columnIndex\" }, \"all\")\n         .filter((selector) => selector.getValue() != \"none\");\n\n      ($selectorViews || []).forEach(($selector) => {\n         if (!this.CurrentObject) return;\n\n         // webix .options list disallow value 0\n         let colIndex = $selector.getValue();\n\n         let field = this.CurrentObject.fieldByID($selector.config.fieldId);\n         if (!field) return;\n\n         let fieldData = {\n            columnIndex: colIndex,\n            field: field,\n         };\n\n         if (field.key == \"date\") {\n            let $optionPanel = $selector.getParentView();\n            let $dateFormatSelectors = $optionPanel.queryView(\n               { abName: \"columnDateFormat\" },\n               \"all\"\n            );\n\n            // define the column to compare data to search .id\n            if ($dateFormatSelectors) {\n               $dateFormatSelectors.forEach((selector) => {\n                  fieldData[selector.config.name] = selector.getValue();\n               });\n\n               // convert all dates into mysql date format YYYY-DD-MM\n               var format;\n               switch (fieldData.order) {\n                  case \"1\":\n                     format =\n                        fieldData.day +\n                        fieldData.separator +\n                        fieldData.month +\n                        fieldData.separator +\n                        fieldData.year;\n                     break;\n                  case \"2\":\n                     format =\n                        fieldData.month +\n                        fieldData.separator +\n                        fieldData.day +\n                        fieldData.separator +\n                        fieldData.year;\n                     break;\n                  case \"3\":\n                     format =\n                        fieldData.year +\n                        fieldData.separator +\n                        fieldData.month +\n                        fieldData.separator +\n                        fieldData.day;\n                     break;\n                  case \"4\":\n                     format =\n                        fieldData.year +\n                        fieldData.separator +\n                        fieldData.day +\n                        fieldData.separator +\n                        fieldData.month;\n               }\n               fieldData.format = format;\n            }\n         }\n\n         if (field.isConnection) {\n            let $optionPanel = $selector.getParentView();\n            let $linkDataSelector = $optionPanel.queryView(\n               { abName: \"columnLinkData\" },\n               \"all\"\n            )[0];\n\n            // define the column to compare data to search .id\n            if ($linkDataSelector) {\n               let searchField = field.datasourceLink.fieldByID(\n                  $linkDataSelector.getValue()\n               );\n               fieldData.searchField = searchField;\n            }\n         }\n\n         result.push(fieldData);\n      });\n\n      return result;\n   }\n\n   labelImport(selected) {\n      var length = selected;\n      if (Array.isArray(selected)) length = selected.length;\n\n      return L(\"Import {0} Records\", [length]);\n   }\n\n   /**\n    * @method import\n    *\n    * @return {Promise}\n    */\n   import() {\n      // get ABDatacollection\n      let dv = this.viewCSVImporter.datacollection;\n      // if (dv == null) return Promise.resolve();\n\n      // // get ABObject\n      // let obj = dv.datasource;\n\n      // Make sure we are connected to an Object\n      let obj = this.CurrentObject;\n      if (obj == null) return Promise.resolve();\n\n      // get ABModel\n      // let model = dv.model;\n      // if (model == null) return Promise.resolve();\n\n      var ids = this.ids;\n      $$(ids.importButton).disable();\n\n      // Show loading cursor\n      $$(ids.form).showProgress({ type: \"icon\" });\n      $$(ids.progressBar).showProgress({\n         type: \"top\",\n         position: 0.0001,\n      });\n\n      // get richselect components\n      let matchFields = this.getMatchFields();\n\n      // Get object's model\n      let objModel = this.CurrentObject.model();\n\n      let selectedRows = $$(ids.datatable).find({ _included: true });\n\n      let _currProgress = 0;\n      let increaseProgressing = () => {\n         _currProgress += 1;\n         $$(ids.progressBar).showProgress({\n            type: \"bottom\",\n            position: _currProgress / selectedRows.length,\n         });\n      };\n\n      let itemFailed = (itemId, errMessage) => {\n         let $datatable = $$(ids.datatable);\n         if ($datatable) {\n            // set \"fail\" status\n            $datatable.addRowCss(itemId, \"row-fail\");\n            $datatable.blockEvent();\n            $datatable.updateItem(itemId, {\n               _status: \"fail\",\n               _errorMsg: errMessage,\n            });\n            $datatable.unblockEvent();\n         }\n         increaseProgressing();\n\n         console.error(errMessage);\n      };\n\n      let itemInvalid = (itemId, errors = []) => {\n         let $datatable = $$(ids.datatable);\n         if ($datatable) {\n            // combine all error messages to display in tooltip\n            let errorMsg = [];\n            // mark which column are invalid\n            errors.forEach((err) => {\n               if (!err || !err.name) return;\n               let fieldInfo = matchFields.filter(\n                  (f) => f.field && f.field.columnName == err.name\n               )[0];\n               errorMsg.push(err.name + \": \" + err.message);\n               // we also need to define an error message\n               // webix.message({\n               //    type: \"error\",\n               //    text: err.name + \": \" + err.message\n               // });\n            });\n            // set \"fail\" status\n            $$(ids.datatable).blockEvent();\n            $$(ids.datatable).updateItem(itemId, {\n               _status: \"invalid\",\n               _errorMsg: errorMsg.join(\"</br>\"),\n            });\n            $$(ids.datatable).unblockEvent();\n            $datatable.addRowCss(itemId, \"webix_invalid\");\n         }\n         // increaseProgressing();\n      };\n\n      let itemPass = (itemId) => {\n         let $datatable = $$(ids.datatable);\n         if ($datatable) {\n            // set \"done\" status\n            $datatable.removeRowCss(itemId, \"row-fail\");\n            $datatable.addRowCss(itemId, \"row-pass\");\n            $datatable.blockEvent();\n            $datatable.updateItem(itemId, {\n               _status: \"done\",\n               _errorMsg: \"\",\n            });\n            $datatable.unblockEvent();\n         }\n         increaseProgressing();\n      };\n\n      let itemValid = (itemId) => {\n         let $datatable = $$(ids.datatable);\n         if ($datatable) {\n            // mark all columns valid (just in case they were invalid before)\n            // matchFields.forEach((f) => {\n            //    $datatable.removeCellCss(\n            //       itemId,\n            //       f.columnIndex,\n            //       \"webix_invalid_cell\"\n            //    );\n            // });\n            // highlight the row\n            $datatable.removeRowCss(itemId, \"webix_invalid\");\n            $datatable.blockEvent();\n            $datatable.updateItem(itemId, {\n               _status: \"\",\n               _errorMsg: \"\",\n            });\n            $datatable.unblockEvent();\n            // $datatable.addRowCss(itemId, \"row-pass\");\n         }\n      };\n\n      let uiCleanUp = () => {\n         // To Do anyUI updates\n         // console.log(\"ui clean up now\");\n         $$(ids.importButton).enable();\n\n         // Hide loading cursor\n         $$(ids.form).hideProgress();\n         $$(ids.progressBar).hideProgress();\n         $$(ids.statusMessage).setValue(\"\");\n         $$(ids.statusMessage).hide();\n\n         var selected = $$(ids.datatable).find({ _included: true });\n         $$(ids.importButton).setValue(this.labelImport(selected));\n\n         this.emit(\"done\");\n      };\n\n      // Set parent's data collection cursor\n      let dcLink = dv?.datacollectionLink;\n      let objectLink;\n      let linkConnectFields = [];\n      let linkValues;\n      if (dcLink && dcLink.getCursor()) {\n         objectLink = dcLink.datasource;\n\n         linkConnectFields = this.CurrentObject.fields(\n            (f) => f.isConnection && f.settings.linkObject == objectLink.id\n         );\n\n         linkValues = dcLink.getCursor();\n      }\n\n      let allValid = true;\n      let validRows = [];\n      // Pre Check Validations of whole CSV import\n      // update row to green if valid\n      // update row to red if !valid\n      (selectedRows || []).forEach((data, index) => {\n         let newRowData = {};\n\n         // Set parent's data collection cursor\n         if (objectLink && linkConnectFields.length && linkValues) {\n            linkConnectFields.forEach((f) => {\n               let linkColName = f.indexField\n                  ? f.indexField.columnName\n                  : objectLink.PK();\n               newRowData[f.columnName] = {};\n               newRowData[f.columnName][linkColName] =\n                  linkValues[linkColName] || linkValues.id;\n            });\n         }\n\n         matchFields.forEach((f) => {\n            if (!f.field || !f.field.key) return;\n\n            switch (f.field.key) {\n               // case \"connectObject\":\n               //    // skip\n               //    break;\n               case \"number\":\n                  if (typeof data[f.columnIndex] != \"number\") {\n                     newRowData[f.field.columnName] = (\n                        data[f.columnIndex] || \"\"\n                     ).replace(/[^-0-9.]/gi, \"\");\n                  } else {\n                     newRowData[f.field.columnName] = data[f.columnIndex];\n                  }\n                  break;\n               default:\n                  newRowData[f.field.columnName] = data[f.columnIndex];\n                  break;\n            }\n         });\n\n         let isValid = false;\n         let errorMsg = \"\";\n\n         // first check legacy and server side validation\n         let validator = this.CurrentObject.isValidData(newRowData);\n         isValid = validator.pass();\n         errorMsg = validator.errors;\n\n         if (isValid) {\n            // now check complex field validation rules\n            isValid = $$(ids.datatable).validate(data.id);\n         } else {\n            allValid = false;\n            itemInvalid(data.id, errorMsg);\n         }\n         if (isValid) {\n            itemValid(data.id);\n            validRows.push({ id: data.id, data: newRowData });\n         } else {\n            allValid = false;\n         }\n         // $$(ids.datatable).unblockEvent();\n      });\n\n      if (!allValid) {\n         // To Do anyUI updates\n         // $$(ids.importButton).enable();\n         //\n         // // Hide loading cursor\n         // $$(ids.form).hideProgress();\n         // $$(ids.progressBar).hideProgress();\n         // $$(ids.statusMessage).setValue(\"\");\n         // $$(ids.statusMessage).hide();\n         //\n         // // _logic.hide();\n         //\n         // if (_logic.callbacks && _logic.callbacks.onDone)\n         //    _logic.callbacks.onDone();\n         uiCleanUp();\n\n         webix.alert({\n            title: L(\"Invalid Data\"),\n            ok: L(\"Ok\"),\n            text: L(\n               \"The highlighted row has invalid data. Please edit in the window or update the CSV and try again.\"\n            ),\n         });\n\n         return Promise.resolve();\n      }\n\n      // if pass, then continue to process each row\n      // ?? : can we process in Parallel?\n      // ?? : implement hash Lookups for connected Fields\n      var hashLookups = {};\n      // {obj}  /*  { connectField.id : { 'searchWord' : \"uuid\"}}\n      // use this hash to reduce the # of lookups needed to fill in our\n      // connected entries\n\n      let connectedFields = matchFields.filter(\n         (f) => f && f.field && f.field.isConnection && f.searchField\n      );\n\n      let startUpdateTime;\n      var numDone = 0;\n      return Promise.resolve()\n         .then(() => {\n            // forEach connectedFields in csv\n\n            var allLookups = [];\n\n            (connectedFields || []).forEach((f) => {\n               let connectField = f.field;\n               let searchField = f.searchField;\n               // let searchWord = newRowData[f.columnIndex];\n\n               let connectObject = connectField.datasourceLink;\n               if (!connectObject) return;\n\n               let connectModel = connectObject.model();\n               if (!connectModel) return;\n\n               let linkIdKey = connectField.indexField\n                  ? connectField.indexField.columnName\n                  : connectField.object.PK();\n\n               // prepare default hash entry:\n               hashLookups[connectField.id] = {};\n\n               // load all values of connectedField entries\n\n               allLookups.push(\n                  connectModel\n                     .findAll({\n                        where: {}, // !!!\n                        populate: false,\n                     })\n                     .then((list) => {\n                        if (list.data) {\n                           list = list.data;\n                        }\n                        (list || []).forEach((row) => {\n                           // store in hash[field.id] = { 'searchKey' : \"uuid\" }\n\n                           hashLookups[connectField.id][\n                              row[searchField.columnName]\n                           ] = row[linkIdKey];\n                        });\n                     })\n                     .catch((errMessage) => {\n                        console.error(errMessage);\n                     })\n               );\n            });\n\n            return Promise.all(allLookups);\n         })\n         .then(() => {\n            // forEach validRow\n            validRows.forEach((data) => {\n               let newRowData = data.data;\n\n               // update the datagrid row to in-progress\n               $$(ids.datatable).blockEvent();\n               $$(ids.datatable).updateItem(data.id, {\n                  _status: \"in-progress\",\n                  _errorMsg: \"\",\n               });\n               $$(ids.datatable).unblockEvent();\n\n               // forEach ConnectedField\n               (connectedFields || []).forEach((f) => {\n                  // find newRowData[field.columnName] = { field.PK : hash[field.id][searchWord] }\n                  let connectField = f.field;\n                  let linkIdKey = connectField.indexField\n                     ? connectField.indexField.columnName\n                     : connectField.object.PK();\n                  var uuid =\n                     hashLookups[connectField.id][\n                        newRowData[connectField.columnName]\n                     ];\n\n                  if (!uuid) {\n                     itemInvalid(data.id, [{ name: connectField.columnName }]);\n                     allValid = false;\n                  }\n\n                  newRowData[connectField.columnName] = {};\n                  newRowData[connectField.columnName][linkIdKey] = uuid;\n               });\n            });\n         })\n         .then(() => {\n            if (!allValid) {\n               webix.alert({\n                  title: L(\"Invalid Data\"),\n                  ok: L(\"Ok\"),\n                  text: L(\n                     \"The highlighted row has invalid data. Please edit in the window or update the CSV and try again.\"\n                  ),\n               });\n               uiCleanUp();\n\n               return Promise.resolve();\n            }\n            // NOTE: Parallel exectuion of all these:\n            var allSaves = [];\n\n            const createRecord = (objModel, newRowsData, element, total) => {\n               return new Promise((resolve, reject) => {\n                  element.doRecordRulesPre(newRowsData);\n\n                  objModel\n                     .batchCreate({ batch: newRowsData })\n                     .then((result) => {\n                        var recordRules = [];\n\n                        // Show errors of each row\n                        Object.keys(result.errors).forEach((rowIndex) => {\n                           let error = result.errors[rowIndex];\n                           if (error) {\n                              itemFailed(\n                                 rowIndex,\n                                 error.message || error.sqlMessage || error\n                              );\n                           }\n                        });\n\n                        Object.keys(result.data).forEach((rowIndex) => {\n                           let rowData = result.data[rowIndex];\n                           recordRules.push(\n                              new Promise((next, err) => {\n                                 // Process Record Rule\n                                 element\n                                    .doRecordRules(rowData)\n                                    .then(() => {\n                                       itemPass(rowIndex);\n                                       next();\n                                    })\n                                    .catch((errMessage) => {\n                                       itemFailed(rowIndex, errMessage);\n                                       err(\"that didn't work\");\n                                    });\n                              })\n                           );\n                        });\n                        Promise.all(recordRules)\n                           .then(() => {\n                              newRowsData.forEach((row) => {\n                                 // itemPass(row.id);\n                                 numDone++;\n                                 if (numDone % 50 == 0) {\n                                    this.refreshRemainingTimeText(\n                                       startUpdateTime,\n                                       validRows.length,\n                                       numDone\n                                    );\n                                 }\n                              });\n                              if (numDone == total) {\n                                 uiCleanUp();\n                                 $$(ids.importButton).disable();\n                              }\n                              resolve();\n                           })\n                           .catch((err) => {\n                              // newRowsData.forEach((row) => {\n                              //    itemFailed(row.id, err);\n                              // });\n                              reject(err);\n                           });\n                     })\n                     .catch((errMessage) => {\n                        console.error(errMessage);\n                        reject(errMessage);\n                     });\n               });\n            };\n\n            validRows.forEach((data) => {\n               let newRowData = data.data;\n               allSaves.push({ id: data.id, data: newRowData });\n            });\n\n            // we are going to store these promises in an array of\n            // arrays with 50 in each sub array\n            var throttledSaves = [];\n            var index = 0;\n            var total = allSaves.length;\n            while (allSaves.length) {\n               throttledSaves[index] = allSaves.splice(0, 50);\n               index++;\n            }\n\n            // execute the array of array of 100 promises one at at time\n            function performThrottledSaves(\n               currentRecords,\n               remainingRecords,\n               importer,\n               total\n            ) {\n               // execute the next 100\n               // const requests = currentRecords.map((data) => {\n               //    return createRecord(\n               //       objModel,\n               //       data.record,\n               //       data.data,\n               //       importer\n               //    );\n               // });\n               const requests = createRecord(\n                  objModel,\n                  currentRecords,\n                  importer,\n                  total\n               );\n               requests\n                  .then(() => {\n                     // when done get the next 10\n                     var nextRecords = remainingRecords.shift();\n                     // if there are any remaining in the group call performThrottledSaves\n                     if (nextRecords && nextRecords.length) {\n                        return performThrottledSaves(\n                           nextRecords,\n                           remainingRecords,\n                           importer,\n                           total\n                        );\n                     } else {\n                        // uiCleanUp();\n                        return Promise.resolve();\n                     }\n                  })\n                  .catch((err) => {\n                     // Handle errors here\n                     return Promise.reject(err);\n                  });\n            }\n\n            // now we are going to processes these new containers one at a time\n            // $$(ids.datatable).blockEvent();\n            // this is when the real work starts so lets begin our countdown timer now\n            startUpdateTime = new Date();\n            // get the first group of Promises out of the collection\n            var next = throttledSaves.shift();\n            // execute our Promise iterator\n            return performThrottledSaves(\n               next,\n               throttledSaves,\n               this.viewCSVImporter,\n               total\n            );\n         })\n         .catch((err) => {\n            // resolve Error UI\n            webix.alert({\n               title: L(\"Error Creating Records\"),\n               ok: L(\"Ok\"),\n               text: L(\"One or more records failed upon creation.\"),\n            });\n            // $$(ids.datatable).unblockEvent();\n            uiCleanUp();\n            console.error(err);\n         });\n   }\n}\n\nmodule.exports = class ABViewCSVImporter extends ABViewCSVImporterCore {\n   // constructor(values, application, parent, defaultValues) {\n   //    super(values, application, parent, defaultValues);\n   // }\n\n   //\n   //\tEditor Related\n   //\n\n   /**\n    * @method editorComponent\n    * return the Editor for this UI component.\n    * the editor should display either a \"block\" view or \"preview\" of\n    * the current layout of the view.\n    * @param {string} mode what mode are we in ['block', 'preview']\n    * @return {Component}\n    */\n   editorComponent(App, mode) {\n      let idBase = \"ABViewCsvImporterEditorComponent\";\n      let component = this.component(App, idBase);\n\n      return component;\n   }\n\n   //\n   // Property Editor\n   //\n\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\n      let commonUI = super.propertyEditorDefaultElements(\n         App,\n         ids,\n         _logic,\n         ObjectDefaults\n      );\n\n      let idBase = \"ABViewCSVImporter\";\n      let L = App.Label;\n\n      PopupRecordRule = new ABRecordRule();\n      PopupRecordRule.component(App, idBase + \"_recordrule\"); // prepare the UI component.\n\n      // _logic functions\n\n      _logic.selectSource = (dcId, oldDcId) => {\n         let currView = _logic.currentEditObject();\n\n         this.propertyUpdateRules(ids, currView);\n\n         // refresh UI\n         currView.emit(\"properties.updated\", currView);\n\n         currView.settings.dataviewID = dcId;\n\n         this.propertyAvailableFields(ids, currView, { selectAll: true });\n\n         // save\n         currView.save();\n      };\n\n      _logic.listTemplate = (field, common) => {\n         let currView = _logic.currentEditObject();\n\n         let fieldComponent = field.formComponent();\n         if (fieldComponent == null)\n            return `<i class='fa fa-times'></i>  ${field.label} <div class='ab-component-form-fields-component-info'> Disable </div>`;\n\n         let componentKey = fieldComponent.common().key;\n         let formComponent = currView.application.viewAll(\n            (v) => v.common().key == componentKey\n         )[0];\n\n         return `${common.markCheckbox(field)} ${\n            field.label\n         } <div class='ab-component-form-fields-component-info'> <i class='fa fa-${\n            formComponent ? formComponent.common().icon : \"fw\"\n         }'></i> ${\n            formComponent ? L(formComponent.common().labelKey, \"Label\") : \"\"\n         } </div>`;\n      };\n\n      _logic.check = (e, fieldId) => {\n         // update UI list\n         let item = $$(ids.fields).getItem(fieldId);\n         item.selected = item.selected ? 0 : 1;\n         $$(ids.fields).updateItem(fieldId, item);\n\n         let currView = _logic.currentEditObject();\n         this.propertyEditorValues(ids, currView);\n         currView.save();\n      };\n\n      _logic.recordRuleShow = () => {\n         let currView = _logic.currentEditObject();\n\n         PopupRecordRule.formLoad(currView);\n         PopupRecordRule.fromSettings(currView.settings.recordRules);\n         PopupRecordRule.show();\n\n         // Workaround\n         PopupRecordRule.qbFixAfterShow();\n      };\n\n      _logic.recordRuleSave = (settings) => {\n         let currView = _logic.currentEditObject();\n         currView.settings.recordRules = settings;\n\n         // trigger a save()\n         this.propertyEditorSave(ids, currView);\n\n         // update badge number of rules\n         this.populateBadgeNumber(ids, currView);\n      };\n\n      PopupRecordRule.init({\n         onSave: _logic.recordRuleSave,\n      });\n\n      return commonUI.concat([\n         {\n            view: \"fieldset\",\n            label: L(\"ab.component.label.dataSource\", \"*Data:\"),\n            labelWidth: App.config.labelWidthLarge,\n            body: {\n               name: \"datacollection\",\n               view: \"richselect\",\n               label: L(\"ab.components.form.dataSource\", \"*Data Source\"),\n               labelWidth: App.config.labelWidthLarge,\n               skipAutoSave: true,\n               on: {\n                  onChange: _logic.selectSource,\n               },\n            },\n         },\n         {\n            view: \"fieldset\",\n            label: L(\n               \"ab.component.csvImporter.availableFields\",\n               \"*Available Fields:\"\n            ),\n            labelWidth: App.config.labelWidthLarge,\n            body: {\n               type: \"clean\",\n               padding: 10,\n               rows: [\n                  {\n                     name: \"fields\",\n                     view: \"list\",\n                     select: false,\n                     minHeight: 250,\n                     template: _logic.listTemplate,\n                     type: {\n                        markCheckbox: function (item) {\n                           return (\n                              \"<span class='check webix_icon fa fa-\" +\n                              (item.selected ? \"check-\" : \"\") +\n                              \"square-o'></span>\"\n                           );\n                        },\n                     },\n                     onClick: {\n                        check: _logic.check,\n                     },\n                  },\n               ],\n            },\n         },\n         {\n            view: \"fieldset\",\n            label: L(\"ab.components.form.rules\", \"*Rules:\"),\n            labelWidth: App.config.labelWidthLarge,\n            body: {\n               type: \"clean\",\n               padding: 10,\n               rows: [\n                  {\n                     cols: [\n                        {\n                           view: \"label\",\n                           label: L(\n                              \"ab.components.form.recordRules\",\n                              \"*Record Rules:\"\n                           ),\n                           width: App.config.labelWidthLarge,\n                        },\n                        {\n                           view: \"button\",\n                           name: \"buttonRecordRules\",\n                           css: \"webix_primary\",\n                           label: L(\"ab.components.form.settings\", \"*Settings\"),\n                           icon: \"fa fa-gear\",\n                           type: \"icon\",\n                           badge: 0,\n                           click: function () {\n                              _logic.recordRuleShow();\n                           },\n                        },\n                     ],\n                  },\n               ],\n            },\n         },\n         {\n            view: \"fieldset\",\n            label: L(\n               \"ab.component.label.customizeDisplay\",\n               \"*Customize Display:\"\n            ),\n            labelWidth: App.config.labelWidthLarge,\n            body: {\n               type: \"clean\",\n               padding: 10,\n               rows: [\n                  {\n                     name: \"buttonLabel\",\n                     view: \"text\",\n                     label: L(\"ab.components.csvImporter.label\", \"*Label\"),\n                     labelWidth: App.config.labelWidthXLarge,\n                  },\n                  {\n                     view: \"counter\",\n                     name: \"width\",\n                     label: L(\"ab.components.csvImporter.width\", \"*Width:\"),\n                     labelWidth: App.config.labelWidthXLarge,\n                  },\n               ],\n            },\n         },\n      ]);\n   }\n\n   static propertyEditorPopulate(App, ids, view) {\n      super.propertyEditorPopulate(App, ids, view);\n\n      // Pull data views to options\n      let dcOptions = view.propertyDatacollections();\n\n      let $DcSelector = $$(ids.datacollection);\n      $DcSelector.define(\"options\", dcOptions);\n      $DcSelector.define(\"value\", view.settings.dataviewID || null);\n      $DcSelector.refresh();\n\n      $$(ids.buttonLabel).setValue(view.settings.buttonLabel);\n      $$(ids.width).setValue(view.settings.width);\n\n      // compatible to previous version\n      let availableFldOptions = {};\n      if (view.settings.availableFieldIds == null) {\n         availableFldOptions.selectAll = true;\n      }\n\n      this.propertyAvailableFields(ids, view, availableFldOptions);\n      this.propertyUpdateRules(ids, view);\n      this.populateBadgeNumber(ids, view);\n\n      // when a change is made in the properties the popups need to reflect the change\n      this.updateEventIds = this.updateEventIds || {}; // { viewId: boolean, ..., viewIdn: boolean }\n      if (!this.updateEventIds[view.id]) {\n         this.updateEventIds[view.id] = true;\n\n         view.addListener(\"properties.updated\", () => {\n            this.populateBadgeNumber(ids, view);\n         });\n      }\n   }\n\n   static propertyEditorValues(ids, view) {\n      super.propertyEditorValues(ids, view);\n\n      view.settings.dataviewID = $$(ids.datacollection).getValue();\n      view.settings.buttonLabel = $$(ids.buttonLabel).getValue();\n      view.settings.width = $$(ids.width).getValue();\n\n      view.settings.availableFieldIds = [];\n      let fields = $$(ids.fields).find({ selected: true });\n      (fields || []).forEach((f) => {\n         view.settings.availableFieldIds.push(f.id);\n      });\n   }\n\n   static propertyAvailableFields(ids, view, options = {}) {\n      let datacollection = view.AB.datacollections(\n         (dc) => dc.id == view.settings.dataviewID\n      )[0];\n      let object = datacollection ? datacollection.datasource : null;\n\n      view.settings = view.settings || {};\n      let availableFields = view.settings.availableFieldIds || [];\n\n      // Pull field list\n      let fieldOptions = [];\n      if (object != null) {\n         fieldOptions = object.fields().map((f) => {\n            f.selected = options.selectAll\n               ? true\n               : availableFields.filter((fieldId) => f.id == fieldId).length >\n                 0;\n\n            return f;\n         });\n      }\n\n      $$(ids.fields).clearAll();\n      $$(ids.fields).parse(fieldOptions);\n   }\n\n   static propertyUpdateRules(ids, view) {\n      if (!view) return;\n\n      // Populate values to rules\n      let selectedDv = view.datacollection;\n      if (selectedDv) {\n         PopupRecordRule.objectLoad(selectedDv.datasource);\n      }\n\n      // PopupDisplayRule.formLoad(view);\n      PopupRecordRule.formLoad(view);\n   }\n\n   static populateBadgeNumber(ids, view) {\n      if (!view) return;\n\n      if (view.settings.recordRules) {\n         $$(ids.buttonRecordRules).define(\n            \"badge\",\n            view.settings.recordRules.length || null\n         );\n         $$(ids.buttonRecordRules).refresh();\n      } else {\n         $$(ids.buttonRecordRules).define(\"badge\", null);\n         $$(ids.buttonRecordRules).refresh();\n      }\n   }\n\n   /**\n    * @method component()\n    * return a UI component based upon this view.\n    * @param {obj} App\n    * @return {obj} UI component\n    */\n   component(v1App = false, idBase) {\n      var component = new ABViewCSVImporterComponent(this, idBase);\n\n      // if this is our v1Interface\n      if (v1App) {\n         var newComponent = component;\n         component = {\n            ui: component.ui(),\n            init: (options, accessLevel) => {\n               return newComponent.init(this.AB, accessLevel);\n            },\n            onShow: (...params) => {\n               return newComponent.onShow?.(...params);\n            },\n         };\n      }\n\n      return component;\n   }\n};\n","\nconst ABViewCarouselCore = require(\"../../core/views/ABViewCarouselCore\");\n\n// const ABViewPropertyFilterData = require(\"./viewProperties/ABViewPropertyFilterData\");\n// const ABViewPropertyLinkPage = require(\"./viewProperties/ABViewPropertyLinkPage\");\n\nimport ABViewPropertyFilterData from \"./viewProperties/ABViewPropertyFilterData\";\nimport ABViewPropertyLinkPage from \"./viewProperties/ABViewPropertyLinkPage\";\n\nconst ABFieldImage = require(\"../dataFields/ABFieldImage\");\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nlet PopupCarouselFilterMenu = null;\n\nexport default class ABViewCarousel extends ABViewCarouselCore {\n   constructor(values, application, parent, defaultValues) {\n      super(values, application, parent, defaultValues);\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      super.fromValues(values);\n\n      // filter property\n      this.filterHelper.fromSettings(this.settings.filter);\n   }\n\n   //\n   //\tEditor Related\n   //\n\n   /**\n    * @method editorComponent\n    * return the Editor for this UI component.\n    * the editor should display either a \"block\" view or \"preview\" of\n    * the current layout of the view.\n    * @param {string} mode what mode are we in ['block', 'preview']\n    * @return {Component}\n    */\n   editorComponent(App, mode) {\n      var idBase = \"ABViewCarouselEditorComponent\";\n\n      var CarouselComponent = this.component(App, idBase);\n\n      return CarouselComponent;\n   }\n\n   //\n   // Property Editor\n   //\n\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\n      var idBase = \"ABViewCarouselPropertyEditor\";\n\n      let commonUI = super.propertyEditorDefaultElements(\n         App,\n         ids,\n         _logic,\n         ObjectDefaults\n      );\n\n      PopupCarouselFilterMenu = ABViewPropertyFilterData.propertyComponent(\n         App,\n         idBase\n      );\n      this.linkPageComponent = ABViewPropertyLinkPage.propertyComponent(\n         App,\n         idBase\n      );\n\n      let filter_property_popup = webix.ui({\n         view: \"window\",\n         modal: true,\n         position: \"center\",\n         resize: true,\n         width: 700,\n         height: 450,\n         css: \"ab-main-container\",\n         head: {\n            view: \"toolbar\",\n            cols: [\n               {\n                  view: \"label\",\n                  label: L(\"Filter Menu\"),\n               },\n            ],\n         },\n         body: PopupCarouselFilterMenu.ui,\n      });\n\n      _logic.filterMenuShow = () => {\n         var currView = _logic.currentEditObject();\n\n         PopupCarouselFilterMenu.setSettings(currView.settings.filter);\n\n         // show filter popup\n         filter_property_popup.show();\n      };\n\n      _logic.filterSave = () => {\n         var currView = _logic.currentEditObject();\n\n         // hide filter popup\n         filter_property_popup.hide();\n\n         // refresh settings\n         this.propertyEditorValues(ids, currView);\n\n         // trigger a save()\n         this.propertyEditorSave(ids, currView);\n      };\n\n      _logic.filterCancel = () => {\n         // hide filter popup\n         filter_property_popup.hide();\n      };\n\n      PopupCarouselFilterMenu.init({\n         onSave: _logic.filterSave,\n         onCancel: _logic.filterCancel,\n      });\n\n      return commonUI.concat([\n         {\n            view: \"fieldset\",\n            label: L(\"Data:\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n            body: {\n               type: \"clean\",\n               padding: 10,\n               rows: [\n                  {\n                     view: \"select\",\n                     name: \"datacollection\",\n                     label: L(\"Object:\"),\n                     labelWidth: this.AB.UISettings.config().labelWidthLarge,\n                     options: [],\n                     on: {\n                        onChange: function (newv, oldv) {\n                           if (newv != oldv) {\n                              $$(ids.detailsPage).setValue(\"\");\n                              $$(ids.editPage).setValue(\"\");\n\n                              let imageFields = [];\n\n                              let dataCollection = _logic\n                                 .currentEditObject()\n                                 .AB.datacollectionByID(newv);\n                              if (dataCollection) {\n                                 let datasource = dataCollection.datasource;\n                                 if (datasource) {\n                                    imageFields =\n                                       datasource\n                                          .fields(\n                                             (f) => f instanceof ABFieldImage\n                                          )\n                                          .map((f) => {\n                                             return {\n                                                id: f.id,\n                                                value: f.label,\n                                             };\n                                          }) || [];\n                                 }\n                              }\n                              if (imageFields.length > 0) {\n                                 imageFields.unshift({\n                                    id: \"\",\n                                    value: L(\"Select a field\"),\n                                 });\n                              } else {\n                                 imageFields.unshift({\n                                    id: \"\",\n                                    value: L(\"no image fields.\"),\n                                 });\n                              }\n\n                              $$(ids.field).define(\"options\", imageFields);\n                              $$(ids.field).refresh();\n                           }\n                        },\n                     },\n                  },\n\n                  {\n                     view: \"select\",\n                     name: \"field\",\n                     label: L(\"Image Field:\"),\n                     labelWidth: this.AB.UISettings.config().labelWidthLarge,\n                     options: [],\n                  },\n\n                  {\n                     view: \"checkbox\",\n                     name: \"filterByCursor\",\n                     labelWidth: 0,\n                     labelRight: L(\"Filter images by cursor\")\n                  },\n               ],\n            },\n         },\n\n         this.linkPageComponent.ui,\n         // {\n         // \tview: \"fieldset\",\n         // \tlabel: L('ab.component.label.linkedPages', '*Linked Pages:'),\n         // \tlabelWidth: this.AB.UISettings.config().labelWidthLarge,\n         // \tbody: {\n         // \t\ttype: \"clean\",\n         // \t\tpadding: 10,\n         // \t\trows: [\n         // \t\t\t{\n         // \t\t\t\tview: \"select\",\n         // \t\t\t\tname: \"detailsPage\",\n         // \t\t\t\tlabel: L('ab.component.label.detailsPage', '*Details Page:'),\n         // \t\t\t\tlabelWidth: this.AB.UISettings.config().labelWidthLarge,\n         // \t\t\t\toptions: []\n         // \t\t\t},\n         // \t\t\t{\n         // \t\t\t\tview: \"select\",\n         // \t\t\t\tname: \"editPage\",\n         // \t\t\t\tlabel: L('ab.component.label.editForm', '*Edit Form:'),\n         // \t\t\t\tlabelWidth: this.AB.UISettings.config().labelWidthLarge,\n         // \t\t\t\toptions: []\n         // \t\t\t}\n         // \t\t]\n         // \t}\n         // },\n         {\n            view: \"fieldset\",\n            label: L(\"Customize Display:\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n            body: {\n               type: \"clean\",\n               padding: 10,\n               rows: [\n                  {\n                     view: \"select\",\n                     name: \"navigationType\",\n                     label: L(\"Navigation Type\"),\n                     labelWidth: this.AB.UISettings.config().labelWidthLarge,\n                     options: [\n                        { id: \"corner\", value: L(\"Corner\") },\n                        { id: \"side\", value: L(\"Side\") },\n                     ],\n                  },\n\n                  {\n                     view: \"checkbox\",\n                     name: \"showLabel\",\n                     labelRight: L(\"Show label of image\"),\n                     labelWidth: this.AB.UISettings.config().labelWidthCheckbox,\n                  },\n\n                  {\n                     view: \"checkbox\",\n                     name: \"hideItem\",\n                     labelRight: L(\"Hide item list\"),\n                     labelWidth: this.AB.UISettings.config().labelWidthCheckbox,\n                  },\n\n                  {\n                     view: \"checkbox\",\n                     name: \"hideButton\",\n                     labelRight: L(\"Hide navigation buttons\"),\n                     labelWidth: this.AB.UISettings.config().labelWidthCheckbox,\n                  },\n\n                  {\n                     view: \"counter\",\n                     name: \"width\",\n                     label: L(\"Width:\"),\n                     labelWidth: this.AB.UISettings.config().labelWidthXLarge,\n                  },\n\n                  {\n                     view: \"counter\",\n                     name: \"height\",\n                     label: L(\"Height:\"),\n                     labelWidth: this.AB.UISettings.config().labelWidthXLarge,\n                  },\n\n                  {\n                     cols: [\n                        {\n                           view: \"label\",\n                           label: L(\"Filter Option:\"),\n                           css: \"ab-text-bold\",\n                           width: this.AB.UISettings.config().labelWidthXLarge,\n                        },\n                        {\n                           view: \"button\",\n                           id: ids.gridFilterMenuButton,\n                           css: \"webix_primary\",\n                           label: L(\"Settings\"),\n                           icon: \"fa fa-gear\",\n                           type: \"icon\",\n                           badge: 0,\n                           click: function () {\n                              _logic.filterMenuShow(this.$view);\n                           },\n                        },\n                     ],\n                  },\n               ],\n            },\n         },\n      ]);\n   }\n\n   static propertyEditorPopulate(App, ids, view) {\n      super.propertyEditorPopulate(App, ids, view);\n\n      if (!view) return;\n\n      // Set the objects you can choose from in the list\n      // Pull data collections to options\n      var objectOptions = view.propertyDatacollections();\n      $$(ids.datacollection).define(\"options\", objectOptions);\n      $$(ids.datacollection).refresh();\n\n      $$(ids.datacollection).setValue(view.settings.dataviewID);\n      $$(ids.field).setValue(view.settings.field);\n      $$(ids.filterByCursor).setValue(view.settings.filterByCursor);\n\n      $$(ids.width).setValue(view.settings.width);\n      $$(ids.height).setValue(view.settings.height);\n      $$(ids.showLabel).setValue(view.settings.showLabel);\n      $$(ids.hideItem).setValue(view.settings.hideItem);\n      $$(ids.hideButton).setValue(view.settings.hideButton);\n      $$(ids.navigationType).setValue(view.settings.navigationType);\n\n      // Populate values to QueryBuilder\n      var selectedDv = view.datacollection;\n      if (selectedDv) {\n         PopupCarouselFilterMenu.objectLoad(selectedDv.datasource);\n      }\n\n      // Populate values to link page properties\n      this.linkPageComponent.viewLoad(view);\n      this.linkPageComponent.setSettings(view.settings);\n   }\n\n   static propertyEditorValues(ids, view) {\n      super.propertyEditorValues(ids, view);\n\n      view.settings.dataviewID = $$(ids.datacollection).getValue();\n      view.settings.field = $$(ids.field).getValue();\n      view.settings.filterByCursor = $$(ids.filterByCursor).getValue() || false;\n\n      view.settings.width = $$(ids.width).getValue();\n      view.settings.height = $$(ids.height).getValue();\n      view.settings.showLabel = $$(ids.showLabel).getValue();\n      view.settings.hideItem = $$(ids.hideItem).getValue();\n      view.settings.hideButton = $$(ids.hideButton).getValue();\n      view.settings.navigationType = $$(ids.navigationType).getValue();\n\n      // filter\n      view.settings.filter = PopupCarouselFilterMenu.getSettings();\n\n      // link pages\n      let linkSettings = this.linkPageComponent.getSettings();\n      for (let key in linkSettings) {\n         view.settings[key] = linkSettings[key];\n      }\n   }\n\n   /**\n    * @method component()\n    * return a UI component based upon this view.\n    * @param {obj} App\n    * @return {obj} UI component\n    */\n   component(App) {\n      var idBase = this.idBase;\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n      };\n\n      var dv = this.datacollection;\n      if (dv) {\n         this.filterHelper.objectLoad(dv.datasource);\n         this.filterHelper.fromSettings(this.settings.filter);\n      }\n\n      let filterUI = this.filterHelper.component(App, idBase);\n      let linkPage = this.linkPageHelper.component(App, idBase);\n\n      let spacer = {};\n      if (this.settings.width == 0) {\n         spacer = {\n            width: 1,\n         };\n      }\n\n      let _ui = {\n         borderless: true,\n         cols: [\n            spacer, // spacer\n            {\n               borderless: true,\n               rows: [\n                  filterUI.ui, // filter UI\n                  {\n                     id: ids.component,\n                     view: \"carousel\",\n                     cols: [],\n                     width: this.settings.width,\n                     height: this.settings.height,\n                     navigation: {\n                        items: !this.settings.hideItem,\n                        buttons: !this.settings.hideButton,\n                        type: this.settings.navigationType,\n                     },\n                     on: {\n                        onShow: function () {\n                           let activeIndex = $$(ids.component).getActiveIndex();\n                           _logic.switchImage(activeIndex);\n                        },\n                     },\n                  },\n               ],\n            },\n            spacer, // spacer\n         ],\n      };\n\n      // make sure each of our child views get .init() called\n      let _init = (options) => {\n         let dv = this.datacollection;\n         if (!dv) return;\n\n         let object = dv.datasource;\n         if (!object) return;\n\n         dv.on(\"loadData\", () => {\n            _logic.onShow();\n         });\n         dv.on(\"update\", () => {\n            dv.reloadData();\n         });\n         dv.on(\"delete\", () => {\n            dv.reloadData();\n         });\n         dv.on(\"create\", () => {\n            dv.reloadData();\n         });\n         dv.on(\"initializingData\", () => {\n            _logic.busy();\n         });\n         dv.on(\"initializedData\", () => {\n            _logic.ready();\n         });\n\n         if (this.settings.filterByCursor) {\n            dv.on(\"changeCursor\", () => {\n               _logic.onShow();\n            });\n         }\n\n         // filter helper\n         this.filterHelper.objectLoad(object);\n         this.filterHelper.viewLoad(this);\n\n         filterUI.init({\n            onFilterData: (fnFilter) => {\n               _logic.onShow(fnFilter); // be notified when there is a change in the filter\n            },\n         });\n\n         // link page helper\n         linkPage.init({\n            view: this,\n            datacollection: dv,\n         });\n\n         // set data-cy\n         const carousel = $$(ids.component).$view;\n         carousel.setAttribute('data-cy', `${this.key} ${this.id}`);\n         carousel\n             .querySelector('.webix_nav_button_prev')\n             ?.firstElementChild\n             ?.setAttribute('data-cy', `${this.key} button previous ${this.id}`);\n         carousel\n             .querySelector('.webix_nav_button_next')\n             ?.firstElementChild\n             ?.setAttribute('data-cy', `${this.key} button next ${this.id}`);\n\n      };\n\n      let _logic = {\n         myTemplate: (row) => {\n            if (row && row.src) {\n               let template =\n                  `<div class=\"ab-carousel-image-container\">` +\n                  `<img src=\"${row.src}\" class=\"content\" ondragstart=\"return false\" />` +\n                  (this.settings.showLabel\n                     ? `<div class=\"ab-carousel-image-title\">${\n                          row.label || \"\"\n                       }</div>`\n                     : \"\") +\n                  `<div class=\"ab-carousel-image-icon\">` +\n                  (this.settings.detailsPage || this.settings.detailsTab\n                     ? `<span ab-row-id=\"${row.id}\" class=\"ab-carousel-detail webix_icon fa fa-eye\"></span>`\n                     : \"\") +\n                  (this.settings.editPage || this.settings.editTab\n                     ? `<span ab-row-id=\"${row.id}\" class=\"ab-carousel-edit webix_icon fa fa-pencil\"></span>`\n                     : \"\") +\n                  `<span class=\"webix_icon ab-carousel-fullscreen fa fa-arrows-alt\"></span>` +\n                  `<span style=\"display: none;\" class=\"webix_icon ab-carousel-exit-fullscreen fa fa-times\"></span>` +\n                  `</div>` +\n                  `</div>`;\n\n               return template;\n            } // empty image\n            else return \"\";\n         },\n\n         busy: () => {\n            let Carousel = $$(ids.component);\n\n            Carousel.disable();\n\n            if (Carousel.showProgress) Carousel.showProgress({ type: \"icon\" });\n         },\n\n         ready: () => {\n            let Carousel = $$(ids.component);\n\n            Carousel.enable();\n\n            if (Carousel.hideProgress) Carousel.hideProgress();\n         },\n\n         switchImage: async (current_position) => {\n            let dv = this.datacollection;\n            if (!dv) return;\n\n            // Check want to load more images\n            if (\n               current_position >= this._imageCount - 1 && // check last image\n               dv.totalCount > this._rowCount\n            ) {\n               // loading cursor\n               _logic.busy();\n\n               try {\n                  await dv.loadData(this._rowCount || 0);\n               } catch (err) {\n                  App.AB.notify.developer(err, {\n                     message: \"Error when load data from a Data collection\",\n                  });\n               }\n\n               _logic.ready();\n            }\n         },\n\n         onShow: (fnFilter) => {\n            let dv = this.datacollection;\n            if (!dv) return;\n\n            let obj = dv.datasource;\n            if (!obj) return;\n\n            let field = this.imageField;\n            if (!field) return;\n\n            if (dv && dv.dataStatus == dv.dataStatusFlag.notInitial) {\n               // load data when a widget is showing\n               dv.loadData();\n\n               // it will call .onShow again after dc loads completely\n               return;\n            }\n\n            fnFilter = fnFilter || filterUI.getFilter();\n\n            let rows = dv.getData(fnFilter);\n\n            // Filter images by cursor\n            if (this.settings.filterByCursor) {\n               let cursor = dv.getCursor();\n               if (cursor) {\n                  rows = rows.filter(\n                     (r) =>\n                        (r[obj.PK()] || r.id || r) ==\n                        (cursor[obj.PK()] || cursor.id || cursor)\n                  );\n               }\n            }\n\n            let images = [];\n\n            rows.forEach((r) => {\n               let imgFile = r[field.columnName];\n               if (imgFile) {\n                  let imgData = {\n                     id: r.id,\n                     src: `/file/${imgFile}`,\n                  };\n\n                  // label of row data\n                  if (this.settings.showLabel) {\n                     imgData.label = obj.displayData(r);\n                  }\n\n                  images.push({\n                     css: \"image\",\n                     borderless: true,\n                     template: _logic.myTemplate,\n                     data: imgData,\n                  });\n               }\n            });\n\n            // insert the default image to first item\n            if (field.settings.defaultImageUrl) {\n               images.unshift({\n                  css: \"image\",\n                  template: _logic.myTemplate,\n                  data: {\n                     id: this.AB.uuid(),\n                     src: `/file/${field.settings.defaultImageUrl}`,\n                     label: L(\"Default image\"),\n                  },\n               });\n            }\n\n            // empty image\n            if (images.length < 1) {\n               images.push({\n                  rows: [\n                     {\n                        view: \"label\",\n                        align: \"center\",\n                        height: this.settings.height,\n                        label:\n                           \"<div style='display: block; font-size: 180px; background-color: #666; color: transparent; text-shadow: 0px 1px 1px rgba(255,255,255,0.5); -webkit-background-clip: text; -moz-background-clip: text; background-clip: text;' class='fa fa-picture-o'></div>\",\n                     },\n                     {\n                        view: \"label\",\n                        align: \"center\",\n                        label: L(\"No image\"),\n                     },\n                  ],\n               });\n            }\n\n            // store total of rows\n            this._rowCount = rows.length;\n\n            // store total of images\n            this._imageCount = images.length;\n\n            var Carousel = $$(ids.component);\n\n            // re-render\n            webix.ui(images, Carousel);\n\n            // add loading cursor\n            if (Carousel) webix.extend(Carousel, webix.ProgressBar);\n\n            // link pages events\n            let editPage = this.settings.editPage;\n            let detailsPage = this.settings.detailsPage;\n\n            // if (detailsPage || editPage) {\n            $$(ids.component).$view.onclick = (e) => {\n               if (e.target.className) {\n                  if (e.target.className.indexOf(\"ab-carousel-edit\") > -1) {\n                     webix.html.removeCss(\n                        $$(ids.component).getNode(),\n                        \"fullscreen\"\n                     );\n                     webix.fullscreen.exit();\n                     let rowId = e.target.getAttribute(\"ab-row-id\");\n                     linkPage.changePage(editPage, rowId);\n                  } else if (\n                     e.target.className.indexOf(\"ab-carousel-detail\") > -1\n                  ) {\n                     webix.html.removeCss(\n                        $$(ids.component).getNode(),\n                        \"fullscreen\"\n                     );\n                     webix.fullscreen.exit();\n                     let rowId = e.target.getAttribute(\"ab-row-id\");\n                     linkPage.changePage(detailsPage, rowId);\n                  } else if (\n                     e.target.className.indexOf(\"ab-carousel-fullscreen\") > -1\n                  ) {\n                     $$(ids.component).define(\"css\", \"fullscreen\");\n                     webix.fullscreen.set(ids.component, {\n                        head: {\n                           view: \"toolbar\",\n                           css: \"webix_dark\",\n                           elements: [\n                              {},\n                              {\n                                 view: \"icon\",\n                                 icon: \"fa fa-times\",\n                                 click: function () {\n                                    webix.html.removeCss(\n                                       $$(ids.component).getNode(),\n                                       \"fullscreen\"\n                                    );\n                                    webix.fullscreen.exit();\n                                 },\n                              },\n                           ],\n                        },\n                     });\n                  }\n               }\n            };\n            // }\n         },\n\n         showFilterPopup: ($view) => {\n            filterUI.showPopup($view);\n         },\n      };\n\n      return {\n         ui: _ui,\n         init: _init,\n         logic: _logic,\n\n         onShow: _logic.onShow,\n      };\n   }\n\n   get idBase() {\n      return `ABViewCarousel_${this.id}`;\n   }\n\n   get filterHelper() {\n      if (this.__filterHelper == null)\n         this.__filterHelper = new ABViewPropertyFilterData(this.AB, this.idBase);\n\n      return this.__filterHelper;\n   }\n\n   get linkPageHelper() {\n      if (this.__linkPageHelper == null)\n         this.__linkPageHelper = new ABViewPropertyLinkPage();\n\n      return this.__linkPageHelper;\n   }\n};\n","const ABViewChartCore = require(\"../../core/views/ABViewChartCore\");\n\nconst ABViewChartPropertyComponentDefaults = ABViewChartCore.defaultValues();\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABViewChart extends ABViewChartCore {\n   // constructor(values, application, parent, defaultValues) {\n   //    super(values, application, parent, defaultValues);\n   // }\n\n   /**\n    * @method editorComponent\n    * return the Editor for this UI component.\n    * the editor should display either a \"block\" view or \"preview\" of\n    * the current layout of the view.\n    * @param {string} mode what mode are we in ['block', 'preview']\n    * @return {Component}\n    */\n   editorComponent(App, mode) {\n      var comp = super.editorComponent(App, mode);\n\n      // Define height of cell\n      comp.ui.rows[0].cellHeight = 400;\n\n      return comp;\n   }\n\n   //\n   // Property Editor\n   //\n\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\n      var commonUI = super.propertyEditorDefaultElements(\n         App,\n         ids,\n         _logic,\n         ObjectDefaults\n      );\n      this._App = App; // #Hack!!\n\n      _logic.enableMultipleSeries = (isEnable) => {\n         var currView = _logic.currentEditObject();\n\n         if (isEnable) {\n            this.populateFieldOptions2(ids, currView);\n         } else {\n            $$(ids.columnValue2).define(\"options\", []);\n            $$(ids.columnValue2).refresh();\n            $$(ids.columnValue2).disable();\n         }\n      };\n      return commonUI.concat([\n         {\n            name: \"multipleSeries\",\n            view: \"checkbox\",\n            label: L(\"Multiple Series\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n            on: {\n               onChange: _logic.enableMultipleSeries,\n            },\n         },\n         {\n            name: \"dataview\",\n            view: \"richselect\",\n            label: L(\"Chart Data\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n         },\n         {\n            name: \"columnLabel\",\n            view: \"richselect\",\n            label: L(\"Label Column\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n         },\n         {\n            name: \"columnValue\",\n            view: \"richselect\",\n            label: L(\"Value Column\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n         },\n         {\n            name: \"columnValue2\",\n            view: \"richselect\",\n            label: L(\"Value Column 2\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n         },\n         {\n            name: \"isPercentage\",\n            view: \"checkbox\",\n            labelRight: L(\"Percentage\"),\n            labelWidth: this.AB.UISettings.config().labelWidthCheckbox,\n         },\n         {\n            name: \"showLabel\",\n            view: \"checkbox\",\n            label: L(\"Display Label\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n         },\n         {\n            name: \"labelPosition\",\n            view: \"richselect\",\n            label: L(\"Label Position\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n            options: [\n               {\n                  id: \"left\",\n                  value: L(\"Left\"),\n               },\n               {\n                  id: \"top\",\n                  value: L(\"Top\"),\n               },\n            ],\n         },\n         {\n            name: \"labelWidth\",\n            view: \"counter\",\n            label: L(\"Label Width\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n         },\n         {\n            view: \"counter\",\n            name: \"height\",\n            label: L(\"Height:\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n         },\n      ]);\n   }\n\n   static propertyEditorPopulate(App, ids, view) {\n      super.propertyEditorPopulate(App, ids, view);\n\n      this.populateDataview(ids, view);\n      this.populateFieldOptions(ids, view);\n\n      $$(ids.multipleSeries).setValue(\n         view.settings.multipleSeries ||\n            ABViewChartPropertyComponentDefaults.multipleSeries\n      );\n      $$(ids.dataview).setValue(\n         view.settings.dataviewID ||\n            ABViewChartPropertyComponentDefaults.dataviewID\n      );\n      $$(ids.columnValue).setValue(\n         view.settings.columnValue ||\n            ABViewChartPropertyComponentDefaults.columnValue\n      );\n      $$(ids.columnLabel).setValue(\n         view.settings.columnLabel ||\n            ABViewChartPropertyComponentDefaults.columnLabel\n      );\n      $$(ids.isPercentage).setValue(\n         view.settings.isPercentage != null\n            ? view.settings.isPercentage\n            : ABViewChartPropertyComponentDefaults.isPercentage\n      );\n\n      $$(ids.showLabel).setValue(\n         view.settings.showLabel ||\n            ABViewChartPropertyComponentDefaults.showLabel\n      );\n      $$(ids.labelPosition).setValue(\n         view.settings.labelPosition ||\n            ABViewChartPropertyComponentDefaults.labelPosition\n      );\n      $$(ids.labelWidth).setValue(\n         view.settings.labelWidth ||\n            ABViewChartPropertyComponentDefaults.labelWidth\n      );\n      $$(ids.height).setValue(\n         view.settings.height || ABViewChartPropertyComponentDefaults.height\n      );\n\n      if (view.settings.multipleSeries) {\n         this.populateFieldOptions2(ids, view);\n         $$(ids.columnValue2).setValue(\n            view.settings.columnValue2 ||\n               ABViewChartPropertyComponentDefaults.columnValue2\n         );\n      }\n   }\n\n   static propertyEditorValues(ids, view) {\n      super.propertyEditorValues(ids, view);\n\n      view.settings.multipleSeries = $$(ids.multipleSeries).getValue();\n      view.settings.dataviewID = $$(ids.dataview).getValue();\n      view.settings.columnValue = $$(ids.columnValue).getValue();\n      view.settings.columnLabel = $$(ids.columnLabel).getValue();\n      view.settings.isPercentage = $$(ids.isPercentage).getValue();\n\n      view.settings.showLabel = $$(ids.showLabel).getValue();\n      view.settings.labelPosition = $$(ids.labelPosition).getValue();\n      view.settings.labelWidth = $$(ids.labelWidth).getValue();\n      view.settings.height = $$(ids.height).getValue();\n\n      this.populateFieldOptions(ids, view);\n\n      if (view.settings.multipleSeries) {\n         view.settings.columnValue2 = $$(ids.columnValue2).getValue();\n         this.populateFieldOptions2(ids, view);\n      }\n\n      // UPDATE charts when parent properties are changed\n      view.views().forEach((v) => {\n         v.parent.refreshData();\n      });\n   }\n\n   static populateDataview(ids, view) {\n      // Set the objects you can choose from in the list\n      var objectOptions = view.propertyDatacollections();\n\n      $$(ids.dataview).define(\"options\", objectOptions);\n      $$(ids.dataview).refresh();\n   }\n\n   static populateFieldOptions(ids, view) {\n      // clear options\n      $$(ids.columnLabel).define(\"options\", []);\n      $$(ids.columnLabel).refresh();\n\n      $$(ids.columnValue).define(\"options\", []);\n      $$(ids.columnValue).refresh();\n\n      var dc = view.datacollection;\n      if (dc == null) return;\n\n      var obj = dc.datasource;\n      if (obj == null) return;\n\n      var allFields = obj.fields();\n      var numFields = obj.fields(\n         (f) => f.key == \"number\" || f.key == \"formula\" || f.key == \"calculate\"\n      );\n\n      var convertOption = (opt) => {\n         return {\n            id: opt.id,\n            value: opt.columnName,\n            key: opt.key,\n         };\n      };\n\n      var columnLabelOptions = allFields.map(convertOption);\n      var columnValueOptions = numFields.map(convertOption);\n\n      var defaultOption = {\n         id: \"\",\n         value: L(\"Select a column\"),\n         key: \"\",\n      };\n      columnLabelOptions.unshift(defaultOption);\n      columnValueOptions.unshift(defaultOption);\n\n      $$(ids.columnLabel).define(\"options\", columnLabelOptions);\n      $$(ids.columnLabel).refresh();\n      $$(ids.columnLabel).enable();\n\n      $$(ids.columnValue).define(\"options\", columnValueOptions);\n      $$(ids.columnValue).refresh();\n      $$(ids.columnValue).enable();\n   }\n\n   static populateFieldOptions2(ids, view) {\n      // clear options\n      $$(ids.columnValue2).define(\"options\", []);\n      $$(ids.columnValue2).refresh();\n      $$(ids.columnValue2).enable();\n\n      var dc = view.datacollection;\n      if (dc == null) return;\n\n      var obj = dc.datasource;\n      if (obj == null) return;\n\n      var numFields = obj.fields((f) => f.key == \"number\");\n\n      var convertOption = (opt) => {\n         return {\n            id: opt.id,\n            value: opt.columnName,\n            key: opt.key,\n         };\n      };\n\n      var columnValueOptions = numFields.map(convertOption);\n\n      var defaultOption = {\n         id: \"\",\n         value: L(\"Select a column\"),\n         key: \"\",\n      };\n      columnValueOptions.unshift(defaultOption);\n\n      $$(ids.columnValue2).define(\"options\", columnValueOptions);\n      $$(ids.columnValue2).refresh();\n   }\n\n   /**\n    * @method component()\n    * return a UI component based upon this view.\n    * @param {obj} App\n    * @return {obj} UI component\n    */\n   component(App) {\n      var idBase = \"ABViewChart_\" + this.id;\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n      };\n\n      // get webix.dashboard\n      var container = super.component(App);\n\n      var _ui = {\n         type: \"form\",\n         borderless: true,\n         // height: this.settings.height || ABViewChartPropertyComponentDefaults.height,\n         rows: [\n            {\n               // view: \"scrollview\",\n               body: container.ui,\n            },\n         ],\n      };\n\n      // make sure each of our child views get .init() called\n      var _init = (options, accessLevel) => {\n         container.init(options, accessLevel);\n\n         var currentComponent = $$(ids.component);\n         if (currentComponent) {\n            webix.extend(currentComponent, webix.ProgressBar);\n         }\n\n         let dc = this.datacollection;\n         if (dc) {\n            if (dc.datacollectionLink) {\n               this.eventAdd({\n                  emitter: dc.datacollectionLink,\n                  eventName: \"changeCursor\",\n                  listener: () => this.refreshData(),\n               });\n            }\n\n            this.eventAdd({\n               emitter: dc,\n               eventName: \"changeCursor\",\n               listener: () => this.refreshData(),\n            });\n\n            this.eventAdd({\n               emitter: dc,\n               eventName: \"create\",\n               listener: () => this.refreshData(),\n            });\n\n            this.eventAdd({\n               emitter: dc,\n               eventName: \"update\",\n               listener: () => this.refreshData(),\n            });\n\n            this.eventAdd({\n               emitter: dc,\n               eventName: \"delete\",\n               listener: () => this.refreshData(),\n            });\n\n            this.eventAdd({\n               emitter: dc,\n               eventName: \"initializedData\",\n               listener: () => this.refreshData(),\n            });\n         }\n      };\n\n      var _logic = {};\n\n      return {\n         ui: _ui,\n         init: _init,\n         logic: _logic,\n\n         onShow: container.onShow,\n      };\n   }\n\n   getReportData() {\n      if (!this.dcChart) {\n         this.dcChart = new webix.DataCollection();\n      }\n\n      return this.dcChart;\n   }\n\n   refreshData() {\n      var dc = this.datacollection;\n      if (dc == null) return this.dcChart;\n\n      var labelCol = this.labelField();\n      var valueCol = this.valueField();\n      var valueCol2 = this.valueField2();\n\n      if (!labelCol || !valueCol) return this.dcChart;\n\n      // var labelColName = labelCol.columnName;\n      var numberColName = valueCol.columnName;\n\n      var numberColName2 = \"\";\n      if (this.settings.multipleSeries && valueCol2) {\n         numberColName2 = valueCol2.columnName;\n      }\n\n      var colorList = [\n         \"#ee4339\",\n         \"#ee9336\",\n         \"#eed236\",\n         \"#d3ee36\",\n         \"#a7ee70\",\n         \"#58dccd\",\n         \"#36abee\",\n         \"#476cee\",\n         \"#a244ea\",\n         \"#e33fc7\",\n      ];\n\n      var dInfo = dc.getData();\n\n      var result = [];\n      var sumData = {};\n      var sumNumber = 0;\n      var sumNumber2 = 0;\n      var countNumber = dInfo.length;\n      var obj;\n\n      switch (valueCol.key) {\n         case \"formula\":\n            {\n               obj = valueCol.object;\n               var objLink = this.AB.objectByID(valueCol.settings.object);\n               var fieldBase = obj.fieldByID(valueCol.settings.field);\n               var fieldLink = objLink.fieldByID(valueCol.settings.fieldLink);\n            }\n            break;\n\n         case \"calculate\":\n            {\n               obj = valueCol.object;\n               var place = valueCol.settings.decimalPlaces;\n            }\n            break;\n\n         default:\n            break;\n      }\n\n      dInfo.forEach((item) => {\n         var labelKey = labelCol.format(item) || item.id;\n         var numberVal = parseFloat(item[numberColName] || 0);\n         if (this.settings.multipleSeries) {\n            var numberVal2 = parseFloat(item[numberColName2]) || 0;\n         }\n\n         switch (valueCol.key) {\n            //Formula Datatype\n            case \"formula\":\n               {\n                  var data = item[fieldBase.relationName()];\n                  if (!Array.isArray(data)) {\n                     data = [data];\n                  }\n                  var numberList = [];\n\n                  // pull number from data\n                  switch (fieldLink.key) {\n                     case \"calculate\":\n                        data.forEach((d) => {\n                           numberList.push(\n                              parseFloat(fieldLink.format(d) || 0)\n                           );\n                        });\n                        break;\n                     case \"number\":\n                        numberList = data.map(\n                           (d) => d[fieldLink.columnName] || 0\n                        );\n                        break;\n                  }\n\n                  var result = 0;\n\n                  // calculate\n                  switch (valueCol.settings.type) {\n                     case \"sum\":\n                        numberList.forEach((num) => (result += num));\n                        break;\n                     case \"average\":\n                        if (numberList.length > 0) {\n                           numberList.forEach((num) => (result += num)); // sum\n                           result = result / numberList.length;\n                        }\n                        break;\n                     case \"max\":\n                        numberList.forEach((num) => {\n                           if (result < num) result = num;\n                        });\n                        break;\n                     case \"min\":\n                        numberList.forEach((num) => {\n                           if (result > num) result = num;\n                        });\n                        break;\n                     case \"count\":\n                        result = numberList.length;\n                        break;\n                  }\n                  numberVal = result;\n               }\n               break;\n\n            //Calcualte Datatype\n            case \"calculate\":\n               {\n                  var formula = valueCol.settings.formula;\n                  // replace with current date\n                  formula = formula.replace(/\\(CURRENT\\)/g, \"(new Date())\");\n\n                  obj.fields().forEach((f) => {\n                     var colName = f.columnName;\n                     if (colName.indexOf(\".\") > -1)\n                        // QUERY: get only column name\n                        colName = colName.split(\".\")[1];\n\n                     // if template does not contain, then should skip\n                     if (formula.indexOf(`{${colName}}`) < 0) return;\n\n                     // number fields\n                     if (f.key == \"number\") {\n                        let numberVal = `(${item[f.columnName] || 0})`; // (number) - NOTE : (-5) to support negative number\n                        formula = formula.replace(\n                           new RegExp(`{${colName}}`, \"g\"),\n                           numberVal\n                        );\n                     }\n                     // calculate and formula fields\n                     else if (f.key == \"calculate\" || f.key == \"formula\") {\n                        let calVal = `(${f.format(item) || 0})`;\n                        formula = formula.replace(\n                           new RegExp(`{${colName}}`, \"g\"),\n                           calVal\n                        );\n                     }\n                     // date fields\n                     else if (f.key == \"date\") {\n                        let dateVal = `\"${\n                           item[f.columnName] ? item[f.columnName] : \"\"\n                        }\"`; // \"date\"\n                        formula = formula.replace(\n                           new RegExp(`{${colName}}`, \"g\"),\n                           dateVal\n                        );\n                     }\n                     // boolean fields\n                     else if (f.key == \"boolean\") {\n                        let booleanVal = `(${item[f.columnName] || 0})`; // show 1 or 0 for boolean\n                        formula = formula.replace(\n                           new RegExp(`{${colName}}`, \"g\"),\n                           booleanVal\n                        );\n                     }\n                  });\n\n                  // decimal places - toFixed()\n                  // FIX: floating number calculation\n                  // https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/\n                  numberVal = parseFloat(eval(formula).toFixed(place || 0));\n               }\n               break;\n\n            default:\n               break;\n         }\n         if (sumData[labelKey] == null) {\n            var label = labelKey;\n\n            // Get label of the connect field\n            if (labelCol.isConnection) {\n               var relateValues = labelCol.pullRelationValues(item);\n               if (relateValues != null) {\n                  if (Array.isArray(relateValues))\n                     label = relateValues\n                        .map((val) => val.text || \"\")\n                        .join(\", \");\n                  else label = relateValues.text;\n               }\n            }\n\n            if (this.settings.multipleSeries) {\n               sumData[labelKey] = {\n                  label: label || item.id,\n                  value: 0,\n                  value2: 0,\n               };\n            } else {\n               sumData[labelKey] = {\n                  label: label || item.id,\n                  value: 0,\n               };\n            }\n         }\n\n         sumData[labelKey].value += numberVal;\n         sumNumber += numberVal;\n\n         if (this.settings.multipleSeries) {\n            sumData[labelKey].value2 += numberVal2;\n            sumNumber2 += numberVal2;\n         }\n      });\n\n      var index = 0;\n\n      for (var key in sumData) {\n         var val = sumData[key].value;\n         if (val <= 0) continue;\n\n         // Display to percent values\n         if (this.settings.isPercentage) {\n            val = (val / sumNumber) * 100;\n            val = Math.round(val * 100) / 100; // round decimal 2 digits\n            val = val + \" %\";\n         }\n\n         if (this.settings.multipleSeries) {\n            var val2 = sumData[key].value2;\n            if (val2 <= 0) continue;\n\n            // Display to percent values\n            if (this.settings.isPercentage) {\n               val2 = (val2 / sumNumber2) * 100;\n               val2 = Math.round(val2 * 100) / 100; // round decimal 2 digits\n               val2 = val2 + \" %\";\n            }\n\n            result.push({\n               label: sumData[key].label,\n               value: val,\n               value2: val2,\n               color: colorList[index % colorList.length],\n               count: countNumber,\n            });\n         } else {\n            result.push({\n               label: sumData[key].label,\n               value: val,\n               color: colorList[index % colorList.length],\n               count: countNumber,\n            });\n         }\n\n         index += 1;\n      }\n\n      let dcChart = this.getReportData();\n      dcChart.clearAll();\n      dcChart.parse(result);\n\n      this.emit(\"refreshData\", this.dcChart);\n   }\n};\n","const ABViewChartAreaCore = require(\"../../core/views/ABViewChartAreaCore\");\n\nconst ABViewChartAreaPropertyComponentDefaults = ABViewChartAreaCore.defaultValues();\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABViewChartArea extends ABViewChartAreaCore {\n   // constructor(values, application, parent, defaultValues) {\n   //    super(values, application, parent, defaultValues);\n   // }\n\n   //\n   //\tEditor Related\n   //\n\n   /**\n    * @method editorComponent\n    * return the Editor for this UI component.\n    * the editor should display either a \"block\" view or \"preview\" of\n    * the current layout of the view.\n    * @param {string} mode what mode are we in ['block', 'preview']\n    * @return {Component}\n    */\n   editorComponent(App, mode) {\n      let idBase = \"ABViewChartAreaEditorComponent\";\n      let ids = {\n         component: App.unique(`${idBase}_component`),\n      };\n      let baseEditor = super.editorComponent(App, mode, {\n         componentId: ids.component,\n      });\n\n      return baseEditor;\n   }\n\n   //\n   // Property Editor\n   //\n\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\n      var commonUI = super.propertyEditorDefaultElements(\n         App,\n         ids,\n         _logic,\n         ObjectDefaults\n      );\n\n      // in addition to the common .label  values, we\n      // ask for:\n      return commonUI.concat([\n         {\n            name: \"areaType\",\n            view: \"richselect\",\n            label: L(\"Chart Type\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n            options: [\n               {\n                  id: \"area\",\n                  value: L(\"Area\"),\n               },\n               {\n                  id: \"stackedArea\",\n                  value: L(\"Stacked Area\"),\n               },\n            ],\n         },\n         // {\n         // \tname: 'chartWidth',\n         // \tview: 'counter',\n         // \tmin: 1,\n         // \tlabel: L('ab.component.chart.area.chartWidth', '*Width')\n         // },\n         {\n            name: \"chartHeight\",\n            view: \"counter\",\n            min: 1,\n            label: L(\"Height\"),\n         },\n         {\n            name: \"stepValue\",\n            view: \"counter\",\n            min: 1,\n            label: L(\"Step\"),\n         },\n         {\n            name: \"maxValue\",\n            view: \"counter\",\n            min: 1,\n            label: L(\"Max Value\"),\n         },\n         {\n            name: \"labelFontSize\",\n            view: \"counter\",\n            min: 1,\n            label: L(\"Label Font Size\"),\n            labelWidth: this.AB.UISettings.config().labelWidthXLarge,\n         },\n         {\n            name: \"isLegend\",\n            view: \"checkbox\",\n            labelRight: L(\"Show Legend\"),\n            labelWidth: this.AB.UISettings.config().labelWidthCheckbox,\n         },\n      ]);\n   }\n\n   static propertyEditorPopulate(App, ids, view) {\n      super.propertyEditorPopulate(App, ids, view);\n\n      // Make sure you set the values for this property editor in Webix\n      // $$(ids.chartWidth).setValue(view.settings.chartWidth != null ? view.settings.chartWidth : ABViewChartAreaPropertyComponentDefaults.chartWidth);\n      $$(ids.chartHeight).setValue(\n         view.settings.chartHeight != null\n            ? view.settings.chartHeight\n            : ABViewChartAreaPropertyComponentDefaults.chartHeight\n      );\n      $$(ids.labelFontSize).setValue(\n         view.settings.labelFontSize != null\n            ? view.settings.labelFontSize\n            : ABViewChartAreaPropertyComponentDefaults.labelFontSize\n      );\n      $$(ids.stepValue).setValue(\n         view.settings.stepValue != null\n            ? view.settings.stepValue\n            : ABViewChartAreaPropertyComponentDefaults.stepValue\n      );\n      $$(ids.maxValue).setValue(\n         view.settings.maxValue != null\n            ? view.settings.maxValue\n            : ABViewChartAreaPropertyComponentDefaults.maxValue\n      );\n      $$(ids.areaType).setValue(\n         view.settings.areaType != null\n            ? view.settings.areaType\n            : ABViewChartAreaPropertyComponentDefaults.areaType\n      );\n      $$(ids.isLegend).setValue(\n         view.settings.isLegend != null\n            ? view.settings.isLegend\n            : ABViewChartAreaPropertyComponentDefaults.isLegend\n      );\n   }\n\n   static propertyEditorValues(ids, view) {\n      super.propertyEditorValues(ids, view);\n\n      // Retrive the values of your properties from Webix and store them in the view\n      view.settings.areaType = $$(ids.areaType).getValue();\n      view.settings.isLegend = $$(ids.isLegend).getValue();\n      // view.settings.chartWidth = $$(ids.chartWidth).getValue();\n      view.settings.chartHeight = $$(ids.chartHeight).getValue();\n      view.settings.labelFontSize = $$(ids.labelFontSize).getValue();\n      view.settings.stepValue = $$(ids.stepValue).getValue();\n      view.settings.maxValue = $$(ids.maxValue).getValue();\n   }\n\n   /**\n    * @method component()\n    * return a UI component based upon this view.\n    * @param {obj} App\n    * @return {obj} UI component\n    */\n   component(App) {\n      let baseComp = super.component(App);\n\n      // get a UI component for each of our child views\n      var viewComponents = [];\n      this.views().forEach((v) => {\n         viewComponents.push(v.component(App));\n      });\n\n      var idBase = \"ABViewChartArea_\" + this.id;\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n      };\n\n      var _ui = {\n         id: ids.component,\n         view: \"chart\",\n         type:\n            this.settings.areaType != null\n               ? this.settings.areaType\n               : ABViewChartAreaPropertyComponentDefaults.areaType,\n         yAxis: {\n            start: 0,\n            step:\n               this.settings.stepValue != null\n                  ? this.settings.stepValue\n                  : ABViewChartAreaPropertyComponentDefaults.stepValue, //\"#stepValue#\",\n            end:\n               this.settings.maxValue != null\n                  ? this.settings.maxValue\n                  : ABViewChartAreaPropertyComponentDefaults.maxValue, //\"#maxValue#\"\n         },\n         xAxis: {\n            template:\n               this.settings.isLegend == true\n                  ? \"<div style='font-size:\" +\n                    this.settings.labelFontSize +\n                    \"px;'>#label#</div>\"\n                  : \"\",\n         },\n         legend:\n            this.settings.isLegend == true\n               ? {\n                    template:\n                       \"<div style='font-size:\" +\n                       this.settings.labelFontSize +\n                       \"px;'>#label#</div>\",\n                    values: [], // TODO : bug in webix 5.1.7\n                 }\n               : null,\n         series: [\n            {\n               alpha: 0.7,\n               value: \"#value#\",\n               color: \"#ee4339\",\n            },\n            {\n               alpha: 0.4,\n               value: \"#value2#\",\n               color: \"#a7ee70\",\n            },\n         ],\n         // height: this.settings.chartHeight != null ? this.settings.chartHeight : ABViewChartAreaPropertyComponentDefaults.chartHeight,\n         // width: this.settings.chartWidth != null ? this.settings.chartWidth : ABViewChartAreaPropertyComponentDefaults.chartWidth,\n         // data: reportData\n      };\n\n      if (this.settings.chartHeight) _ui.height = this.settings.chartHeight;\n\n      // make sure each of our child views get .init() called\n      let _init = (options) => {\n         baseComp.init({\n            componentId: ids.component,\n         });\n      };\n      let _logic = baseComp.logic;\n      let _onShow = baseComp.onShow;\n\n      return {\n         ui: _ui,\n         init: _init,\n         logic: _logic,\n\n         onShow: _onShow,\n      };\n   }\n};\n","const ABViewChartBarCore = require(\"../../core/views/ABViewChartBarCore\");\n\nconst ABViewChartBarPropertyComponentDefaults = ABViewChartBarCore.defaultValues();\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABViewChartBar extends ABViewChartBarCore {\n   // constructor(values, application, parent, defaultValues) {\n   //    super(values, application, parent, defaultValues);\n   // }\n\n   //\n   //\tEditor Related\n   //\n\n   /**\n    * @method editorComponent\n    * return the Editor for this UI component.\n    * the editor should display either a \"block\" view or \"preview\" of\n    * the current layout of the view.\n    * @param {string} mode what mode are we in ['block', 'preview']\n    * @return {Component}\n    */\n   editorComponent(App, mode) {\n      let idBase = \"ABViewChartBarEditorComponent\";\n      let ids = {\n         component: App.unique(`${idBase}_component`),\n      };\n\n      let baseEditor = super.editorComponent(App, mode, {\n         componentId: ids.component,\n      });\n\n      return baseEditor;\n   }\n\n   //\n   // Property Editor\n   //\n\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\n      var commonUI = super.propertyEditorDefaultElements(\n         App,\n         ids,\n         _logic,\n         ObjectDefaults\n      );\n\n      // in addition to the common .label  values, we\n      // ask for:\n      return commonUI.concat([\n         {\n            name: \"barType\",\n            view: \"richselect\",\n            label: L(\"Chart Type\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n            options: [\n               {\n                  id: \"bar\",\n                  value: L(\"Vertical\"),\n               },\n               {\n                  id: \"barH\",\n                  value: L(\"Horizontal\"),\n               },\n            ],\n         },\n         {\n            name: \"barPreset\",\n            view: \"richselect\",\n            label: L(\"Chart Preset\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n            options: [\n               {\n                  id: \"column\",\n                  value: L(\"Column\"),\n               },\n               {\n                  id: \"stick\",\n                  value: L(\"Stick\"),\n               },\n               {\n                  id: \"alpha\",\n                  value: L(\"Alpha\"),\n               },\n            ],\n         },\n         // {\n         // \tname: 'chartWidth',\n         // \tview: 'counter',\n         // \tmin: 1,\n         // \tlabel: L('ab.component.chart.bar.chartWidth', '*Width')\n         // },\n         {\n            name: \"height\",\n            view: \"counter\",\n            min: 1,\n            label: L(\"Height\"),\n         },\n         {\n            name: \"stepValue\",\n            view: \"counter\",\n            min: 1,\n            label: L(\"Step\"),\n         },\n         {\n            name: \"maxValue\",\n            view: \"counter\",\n            min: 1,\n            label: L(\"Max Value\"),\n         },\n         {\n            name: \"labelFontSize\",\n            view: \"counter\",\n            min: 1,\n            label: L(\"Label Font Size\"),\n            labelWidth: this.AB.UISettings.config().labelWidthXLarge,\n         },\n         {\n            name: \"isLegend\",\n            view: \"checkbox\",\n            labelRight: L(\"Show Legend\"),\n            labelWidth: this.AB.UISettings.config().labelWidthCheckbox,\n         },\n      ]);\n   }\n\n   static propertyEditorPopulate(App, ids, view) {\n      super.propertyEditorPopulate(App, ids, view);\n\n      // Make sure you set the values for this property editor in Webix\n      // $$(ids.chartWidth).setValue(view.settings.chartWidth != null ? view.settings.chartWidth : ABViewChartBarPropertyComponentDefaults.chartWidth);\n      $$(ids.height).setValue(\n         view.settings.height != null\n            ? view.settings.height\n            : ABViewChartBarPropertyComponentDefaults.height\n      );\n      $$(ids.labelFontSize).setValue(\n         view.settings.labelFontSize != null\n            ? view.settings.labelFontSize\n            : ABViewChartBarPropertyComponentDefaults.labelFontSize\n      );\n      $$(ids.stepValue).setValue(\n         view.settings.stepValue != null\n            ? view.settings.stepValue\n            : ABViewChartBarPropertyComponentDefaults.stepValue\n      );\n      $$(ids.maxValue).setValue(\n         view.settings.maxValue != null\n            ? view.settings.maxValue\n            : ABViewChartBarPropertyComponentDefaults.maxValue\n      );\n      $$(ids.barType).setValue(\n         view.settings.barType != null\n            ? view.settings.barType\n            : ABViewChartBarPropertyComponentDefaults.barType\n      );\n      $$(ids.barPreset).setValue(\n         view.settings.barPreset != null\n            ? view.settings.barPreset\n            : ABViewChartBarPropertyComponentDefaults.barPreset\n      );\n      $$(ids.isLegend).setValue(\n         view.settings.isLegend != null\n            ? view.settings.isLegend\n            : ABViewChartBarPropertyComponentDefaults.isLegend\n      );\n   }\n\n   static propertyEditorValues(ids, view) {\n      super.propertyEditorValues(ids, view);\n\n      // Retrive the values of your properties from Webix and store them in the view\n      view.settings.barType = $$(ids.barType).getValue();\n      view.settings.barPreset = $$(ids.barPreset).getValue();\n      view.settings.isLegend = $$(ids.isLegend).getValue();\n      // view.settings.chartWidth = $$(ids.chartWidth).getValue();\n      view.settings.height = $$(ids.height).getValue();\n      view.settings.labelFontSize = $$(ids.labelFontSize).getValue();\n      view.settings.stepValue = $$(ids.stepValue).getValue();\n      view.settings.maxValue = $$(ids.maxValue).getValue();\n   }\n\n   /**\n    * @method component()\n    * return a UI component based upon this view.\n    * @param {obj} App\n    * @return {obj} UI component\n    */\n   component(App) {\n      let baseComp = super.component(App);\n\n      // get a UI component for each of our child views\n      var viewComponents = [];\n      this.views().forEach((v) => {\n         viewComponents.push(v.component(App));\n      });\n\n      var idBase = \"ABViewChartBar_\" + this.id;\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n      };\n      var _ui;\n\n      if (this.settings.barType == \"bar\" || this.settings.barType == null) {\n         _ui = {\n            id: ids.component,\n            view: \"chart\",\n            type:\n               this.settings.barType != null\n                  ? this.settings.barType\n                  : ABViewChartBarPropertyComponentDefaults.barType,\n            preset:\n               this.settings.barPreset != null\n                  ? this.settings.barPreset\n                  : ABViewChartBarPropertyComponentDefaults.barPreset,\n            value: \"#value#\",\n            color: \"#color#\",\n            yAxis: {\n               start: 0,\n               step:\n                  this.settings.stepValue != null\n                     ? this.settings.stepValue\n                     : ABViewChartBarPropertyComponentDefaults.stepValue, //\"#stepValue#\",\n               end:\n                  this.settings.maxValue != null\n                     ? this.settings.maxValue\n                     : ABViewChartBarPropertyComponentDefaults.maxValue, //\"#maxValue#\"\n            },\n            xAxis: {\n               template:\n                  this.settings.isLegend == true\n                     ? \"<div style='font-size:\" +\n                       this.settings.labelFontSize +\n                       \"px;'>#label#</div>\"\n                     : \"\",\n            },\n            legend:\n               this.settings.isLegend == true\n                  ? \"<div style='font-size:\" +\n                    this.settings.labelFontSize +\n                    \"px;'>#label#</div>\"\n                  : \"\",\n            height:\n               this.settings.height != null\n                  ? this.settings.height\n                  : ABViewChartBarPropertyComponentDefaults.height,\n            // width: this.settings.chartWidth != null ? this.settings.chartWidth : ABViewChartBarPropertyComponentDefaults.chartWidth,\n            // data: reportData\n         };\n      } else {\n         _ui = {\n            id: ids.component,\n            view: \"chart\",\n            type:\n               this.settings.barType != null\n                  ? this.settings.barType\n                  : ABViewChartBarPropertyComponentDefaults.barType,\n            preset:\n               this.settings.barPreset != null\n                  ? this.settings.barPreset\n                  : ABViewChartBarPropertyComponentDefaults.barPreset,\n            value: \"#value#\",\n            color: \"#color#\",\n            yAxis: {\n               template:\n                  this.settings.isLegend == true\n                     ? \"<div style='font-size:\" +\n                       this.settings.labelFontSize +\n                       \"px;'>#label#</div>\"\n                     : \"\",\n            },\n            xAxis: {\n               start: 0,\n               step: \"#stepValue#\",\n               end: \"#maxValue#\",\n            },\n            legend:\n               this.settings.isLegend == true\n                  ? {\n                       template:\n                          \"<div style='font-size:\" +\n                          this.settings.labelFontSize +\n                          \"px;'>#label#</div>\",\n                       values: [], // TODO : bug in webix 5.1.7\n                    }\n                  : null,\n            height:\n               this.settings.height != null\n                  ? this.settings.height\n                  : ABViewChartBarPropertyComponentDefaults.height,\n            // width: this.settings.chartWidth != null ? this.settings.chartWidth : ABViewChartBarPropertyComponentDefaults.chartWidth,\n            // data: reportData\n         };\n      }\n\n      let _init = () => {\n         baseComp.init({\n            componentId: ids.component,\n         });\n      };\n      let _logic = baseComp.logic;\n      let _onShow = baseComp.onShow;\n\n      return {\n         ui: _ui,\n         init: _init,\n         logic: _logic,\n\n         onShow: _onShow,\n      };\n   }\n};\n","const ABViewWidget = require(\"./ABViewWidget\");\n\nmodule.exports = class ABViewChartComponent extends ABViewWidget {\n   editorComponent(App, mode, options) {\n      let component = this.component(App);\n      let _ui = component.ui;\n      _ui.id = options.componentId;\n\n      let _init = () => {\n         component.init({\n            componentId: _ui.id,\n         });\n      };\n      let _logic = component.logic;\n      let _onShow = component.onShow;\n\n      return {\n         ui: _ui,\n         init: _init,\n         logic: _logic,\n         onShow: _onShow,\n      };\n   }\n\n   /**\n    * @method component()\n    * return a UI component based upon this view.\n    * @param {obj} App\n    * @return {obj} UI component\n    */\n   component(App) {\n      // make sure each of our child views get .init() called\n      var _init = (options) => {\n         this._componentId = options.componentId;\n\n         this.eventAdd({\n            emitter: this.parent,\n            eventName: \"refreshData\",\n            listener: (reportData) => {\n               // If this widget does not show, then will not refresh data\n               if (this._isShow) _logic.refreshData(reportData);\n            },\n         });\n      };\n\n      var _logic = {\n         setValue: (componentId, val) => {\n            if ($$(componentId)) $$(componentId).setValues({ display: val });\n         },\n\n         onShow: () => {\n            // if (!this._isShow) {\n\n            // Mark this widget is showing\n            this._isShow = true;\n\n            let reportData = this.parent.getReportData();\n            _logic.refreshData(reportData);\n            // }\n         },\n\n         refreshData: (reportData) => {\n            let comp = $$(this._componentId);\n            if (comp && comp.data) comp.data.sync(reportData);\n         },\n      };\n\n      return {\n         // ui: _ui,\n         init: _init,\n         logic: _logic,\n\n         onShow: _logic.onShow,\n      };\n   }\n};\n","const ABViewChartLineCore = require(\"../../core/views/ABViewChartLineCore\");\n\nconst ABViewChartLinePropertyComponentDefaults = ABViewChartLineCore.defaultValues();\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABViewChartLine extends ABViewChartLineCore {\n   // constructor(values, application, parent, defaultValues) {\n   //    super(values, application, parent, defaultValues);\n   // }\n\n   //\n   //\tEditor Related\n   //\n\n   /**\n    * @method editorComponent\n    * return the Editor for this UI component.\n    * the editor should display either a \"block\" view or \"preview\" of\n    * the current layout of the view.\n    * @param {string} mode what mode are we in ['block', 'preview']\n    * @return {Component}\n    */\n   editorComponent(App, mode) {\n      let idBase = \"ABViewChartLineEditorComponent\";\n      let ids = {\n         component: App.unique(`${idBase}_component`),\n      };\n\n      let baseEditor = super.editorComponent(App, mode, {\n         componentId: ids.component,\n      });\n\n      return baseEditor;\n   }\n\n   //\n   // Property Editor\n   //\n\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\n      var commonUI = super.propertyEditorDefaultElements(\n         App,\n         ids,\n         _logic,\n         ObjectDefaults\n      );\n\n      // in addition to the common .label  values, we\n      // ask for:\n      return commonUI.concat([\n         {\n            name: \"lineType\",\n            view: \"richselect\",\n            label: L(\"Chart Type\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n            options: [\n               {\n                  id: \"line\",\n                  value: L(\"Line\"),\n               },\n               {\n                  id: \"spline\",\n                  value: L(\"Spline\"),\n               },\n            ],\n         },\n         {\n            name: \"linePreset\",\n            view: \"richselect\",\n            label: L(\"Chart Preset\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n            options: [\n               {\n                  id: \"plot\",\n                  value: L(\"Plot\"),\n               },\n               {\n                  id: \"diamond\",\n                  value: L(\"Diamond\"),\n               },\n               {\n                  id: \"simple\",\n                  value: L(\"Simple\"),\n               },\n            ],\n         },\n         // {\n         // \tname: 'chartWidth',\n         // \tview: 'counter',\n         // \tmin: 1,\n         // \tlabel: L('ab.component.chart.line.chartWidth', '*Width')\n         // },\n         {\n            name: \"chartHeight\",\n            view: \"counter\",\n            min: 1,\n            label: L(\"Height\"),\n         },\n         {\n            name: \"stepValue\",\n            view: \"counter\",\n            min: 1,\n            label: L(\"Step\"),\n         },\n         {\n            name: \"maxValue\",\n            view: \"counter\",\n            min: 1,\n            label: L(\"Max Value\"),\n         },\n         {\n            name: \"labelFontSize\",\n            view: \"counter\",\n            min: 1,\n            label: L(\"Label Font Size\"),\n            labelWidth: this.AB.UISettings.config().labelWidthXLarge,\n         },\n         {\n            name: \"isLegend\",\n            view: \"checkbox\",\n            labelRight: L(\"Show Legend\"),\n            labelWidth: this.AB.UISettings.config().labelWidthCheckbox,\n         },\n      ]);\n   }\n\n   static propertyEditorPopulate(App, ids, view) {\n      super.propertyEditorPopulate(App, ids, view);\n\n      // Make sure you set the values for this property editor in Webix\n      // $$(ids.chartWidth).setValue(view.settings.chartWidth != null ? view.settings.chartWidth : ABViewChartLinePropertyComponentDefaults.chartWidth);\n      $$(ids.chartHeight).setValue(\n         view.settings.chartHeight != null\n            ? view.settings.chartHeight\n            : ABViewChartLinePropertyComponentDefaults.chartHeight\n      );\n      $$(ids.labelFontSize).setValue(\n         view.settings.labelFontSize != null\n            ? view.settings.labelFontSize\n            : ABViewChartLinePropertyComponentDefaults.labelFontSize\n      );\n      $$(ids.stepValue).setValue(\n         view.settings.stepValue != null\n            ? view.settings.stepValue\n            : ABViewChartLinePropertyComponentDefaults.stepValue\n      );\n      $$(ids.maxValue).setValue(\n         view.settings.maxValue != null\n            ? view.settings.maxValue\n            : ABViewChartLinePropertyComponentDefaults.maxValue\n      );\n      $$(ids.lineType).setValue(\n         view.settings.lineType != null\n            ? view.settings.lineType\n            : ABViewChartLinePropertyComponentDefaults.lineType\n      );\n      $$(ids.linePreset).setValue(\n         view.settings.linePreset != null\n            ? view.settings.linePreset\n            : ABViewChartLinePropertyComponentDefaults.linePreset\n      );\n      $$(ids.isLegend).setValue(\n         view.settings.isLegend != null\n            ? view.settings.isLegend\n            : ABViewChartLinePropertyComponentDefaults.isLegend\n      );\n   }\n\n   static propertyEditorValues(ids, view) {\n      super.propertyEditorValues(ids, view);\n\n      // Retrive the values of your properties from Webix and store them in the view\n      view.settings.lineType = $$(ids.lineType).getValue();\n      view.settings.linePreset = $$(ids.linePreset).getValue();\n      view.settings.isLegend = $$(ids.isLegend).getValue();\n      // view.settings.chartWidth = $$(ids.chartWidth).getValue();\n      view.settings.chartHeight = $$(ids.chartHeight).getValue();\n      view.settings.labelFontSize = $$(ids.labelFontSize).getValue();\n      view.settings.stepValue = $$(ids.stepValue).getValue();\n      view.settings.maxValue = $$(ids.maxValue).getValue();\n   }\n\n   /**\n    * @method component()\n    * return a UI component based upon this view.\n    * @param {obj} App\n    * @return {obj} UI component\n    */\n   component(App) {\n      let baseComp = super.component(App);\n\n      // get a UI component for each of our child views\n      var viewComponents = [];\n      this.views().forEach((v) => {\n         viewComponents.push(v.component(App));\n      });\n\n      var idBase = \"ABViewChartLine_\" + this.id;\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n      };\n\n      var _ui = {\n         id: ids.component,\n         view: \"chart\",\n         type:\n            this.settings.lineType != null\n               ? this.settings.lineType\n               : ABViewChartLinePropertyComponentDefaults.lineType,\n         preset:\n            this.settings.linePreset != null\n               ? this.settings.linePreset\n               : ABViewChartLinePropertyComponentDefaults.linePreset,\n         value: \"#value#\",\n         color: \"#color#\",\n         yAxis: {\n            start: 0,\n            step:\n               this.settings.stepValue != null\n                  ? this.settings.stepValue\n                  : ABViewChartLinePropertyComponentDefaults.stepValue, //\"#stepValue#\",\n            end:\n               this.settings.maxValue != null\n                  ? this.settings.maxValue\n                  : ABViewChartLinePropertyComponentDefaults.maxValue, //\"#maxValue#\"\n         },\n         xAxis: {\n            template:\n               this.settings.isLegend == true\n                  ? \"<div style='font-size:\" +\n                    this.settings.labelFontSize +\n                    \"px;'>#label#</div>\"\n                  : \"\",\n         },\n         legend:\n            this.settings.isLegend == true\n               ? {\n                    template:\n                       \"<div style='font-size:\" +\n                       this.settings.labelFontSize +\n                       \"px;'>#label#</div>\",\n                    values: [], // TODO : bug in webix 5.1.7\n                 }\n               : null,\n         height:\n            this.settings.chartHeight != null\n               ? this.settings.chartHeight\n               : ABViewChartLinePropertyComponentDefaults.chartHeight,\n         // width: this.settings.chartWidth != null ? this.settings.chartWidth : ABViewChartLinePropertyComponentDefaults.chartWidth,\n         // data: reportData\n      };\n\n      let _init = () => {\n         baseComp.init({\n            componentId: ids.component,\n         });\n      };\n      let _logic = baseComp.logic;\n      let _onShow = baseComp.onShow;\n\n      return {\n         ui: _ui,\n         init: _init,\n         logic: _logic,\n\n         onShow: _onShow,\n      };\n   }\n};\n","const ABViewChartPieCore = require(\"../../core/views/ABViewChartPieCore\");\n\nconst ABViewChartPiePropertyComponentDefaults = ABViewChartPieCore.defaultValues();\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABViewChartPie extends ABViewChartPieCore {\n   // constructor(values, application, parent, defaultValues) {\n   //    super(values, application, parent, defaultValues);\n   // }\n\n   //\n   //\tEditor Related\n   //\n\n   /**\n    * @method editorComponent\n    * return the Editor for this UI component.\n    * the editor should display either a \"block\" view or \"preview\" of\n    * the current layout of the view.\n    * @param {string} mode what mode are we in ['block', 'preview']\n    * @return {Component}\n    */\n   editorComponent(App, mode) {\n      let idBase = \"ABViewChartPieEditorComponent\";\n      // let ids = {\n      //    component: App.unique(idBase + \"_component\")\n      // };\n\n      // let baseEditor = super.editorComponent(App, mode, {\n      //    componentId: ids.component\n      // });\n\n      // return baseEditor;\n\n      return this.component(App, idBase);\n   }\n\n   //\n   // Property Editor\n   //\n\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\n      var commonUI = super.propertyEditorDefaultElements(\n         App,\n         ids,\n         _logic,\n         ObjectDefaults\n      );\n\n      // in addition to the common .label  values, we\n      // ask for:\n      return commonUI.concat([\n         {\n            name: \"pieType\",\n            view: \"richselect\",\n            label: L(\"Chart Type\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n            options: [\n               {\n                  id: \"pie\",\n                  value: L(\"Standard\"),\n               },\n               {\n                  id: \"pie3D\",\n                  value: L(\"Pie3D\"),\n               },\n               {\n                  id: \"donut\",\n                  value: L(\"Donut\"),\n               },\n            ],\n         },\n         // {\n         // \tname: 'chartWidth',\n         // \tview: 'counter',\n         // \tmin: 1,\n         // \tlabel: L('ab.component.chart.pie.chartWidth', '*Width')\n         // },\n         {\n            name: \"height\",\n            view: \"counter\",\n            min: 1,\n            label: L(\"Height\"),\n         },\n         {\n            name: \"innerFontSize\",\n            view: \"counter\",\n            min: 1,\n            label: L(\"Inner Font Size\"),\n            labelWidth: this.AB.UISettings.config().labelWidthXLarge,\n         },\n         {\n            name: \"labelFontSize\",\n            view: \"counter\",\n            min: 1,\n            label: L(\"Label Font Size\"),\n            labelWidth: this.AB.UISettings.config().labelWidthXLarge,\n         },\n         {\n            name: \"isLegend\",\n            view: \"checkbox\",\n            labelRight: L(\"Show Legend\"),\n            labelWidth: this.AB.UISettings.config().labelWidthCheckbox,\n         },\n      ]);\n   }\n\n   static propertyEditorPopulate(App, ids, view) {\n      super.propertyEditorPopulate(App, ids, view);\n\n      // Make sure you set the values for this property editor in Webix\n      // $$(ids.chartWidth).setValue(view.settings.chartWidth != null ? view.settings.chartWidth : ABViewChartPiePropertyComponentDefaults.chartWidth);\n      $$(ids.height).setValue(\n         view.settings.height != null\n            ? view.settings.height\n            : ABViewChartPiePropertyComponentDefaults.height\n      );\n      $$(ids.innerFontSize).setValue(\n         view.settings.innerFontSize != null\n            ? view.settings.innerFontSize\n            : ABViewChartPiePropertyComponentDefaults.innerFontSize\n      );\n      $$(ids.labelFontSize).setValue(\n         view.settings.labelFontSize != null\n            ? view.settings.labelFontSize\n            : ABViewChartPiePropertyComponentDefaults.labelFontSize\n      );\n      $$(ids.pieType).setValue(\n         view.settings.pieType != null\n            ? view.settings.pieType\n            : ABViewChartPiePropertyComponentDefaults.pieType\n      );\n      $$(ids.isLegend).setValue(\n         view.settings.isLegend != null\n            ? view.settings.isLegend\n            : ABViewChartPiePropertyComponentDefaults.isLegend\n      );\n   }\n\n   static propertyEditorValues(ids, view) {\n      super.propertyEditorValues(ids, view);\n\n      // Retrive the values of your properties from Webix and store them in the view\n      view.settings.pieType = $$(ids.pieType).getValue();\n      view.settings.isLegend = $$(ids.isLegend).getValue();\n      // view.settings.chartWidth = $$(ids.chartWidth).getValue();\n      view.settings.height = $$(ids.height).getValue();\n      view.settings.innerFontSize = $$(ids.innerFontSize).getValue();\n      view.settings.labelFontSize = $$(ids.labelFontSize).getValue();\n   }\n\n   /**\n    * @method component()\n    * return a UI component based upon this view.\n    * @param {obj} App\n    * @return {obj} UI component\n    */\n   component(App, idBase) {\n      let baseComp = super.component(App);\n\n      // get a UI component for each of our child views\n      var viewComponents = [];\n      this.views().forEach((v) => {\n         viewComponents.push(v.component(App));\n      });\n\n      idBase = idBase || \"ABViewChartPie_\" + this.id;\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n      };\n\n      let legend = null;\n      if (this.settings.isLegend == true) {\n         legend = {\n            width: this.parent.settings.labelWidth,\n            template:\n               this.settings.isLegend == true\n                  ? `<div style='font-size: ${this.settings.labelFontSize}px;'>#label#</div>`\n                  : \"\",\n         };\n      }\n\n      var _ui = {\n         id: ids.component,\n         view: \"chart\",\n         type:\n            this.settings.pieType != null\n               ? this.settings.pieType\n               : ABViewChartPiePropertyComponentDefaults.pieType,\n         value: \"#value#\",\n         color: \"#color#\",\n         legend: legend,\n         pieInnerText: `<div style='font-size: ${this.settings.innerFontSize}px;'>#value#</div>`,\n         shadow: 1,\n         height:\n            this.settings.height != null\n               ? this.settings.height\n               : ABViewChartPiePropertyComponentDefaults.height,\n         // width: this.settings.chartWidth != null ? this.settings.chartWidth : ABViewChartPiePropertyComponentDefaults.chartWidth,\n         // data: reportData\n      };\n\n      let _init = () => {\n         baseComp.init({\n            componentId: ids.component,\n         });\n      };\n      let _logic = baseComp.logic;\n      let _onShow = baseComp.onShow;\n\n      return {\n         ui: _ui,\n         init: _init,\n         logic: _logic,\n\n         onShow: _onShow,\n      };\n   }\n};\n","const ABViewCommentCore = require(\"../../core/views/ABViewCommentCore\");\n\nconst ABViewCommentPropertyComponentDefaults = ABViewCommentCore.defaultValues();\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABViewComment extends ABViewCommentCore {\n   // constructor(values, application, parent, defaultValues) {\n   //    super(values, application, parent, defaultValues);\n   // }\n\n   //\n   //\tEditor Related\n   //\n\n   /**\n    * @method editorComponent\n    * return the Editor for this UI component.\n    * the editor should display either a \"block\" view or \"preview\" of\n    * the current layout of the view.\n    * @param {string} mode what mode are we in ['block', 'preview']\n    * @return {Component}\n    */\n   editorComponent(App, mode) {\n      var idBase = \"ABViewCommentEditorComponent\";\n      var CommentView = this.component(App, idBase);\n\n      return {\n         ui: CommentView.ui,\n         init: CommentView.init,\n         logic: CommentView.logic,\n         onShow: CommentView.onShow,\n      };\n   }\n\n   //\n   // Property Editor\n   //\n\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\n      var commonUI = super.propertyEditorDefaultElements(\n         App,\n         ids,\n         _logic,\n         ObjectDefaults\n      );\n\n      // _logic functions\n\n      _logic.selectSource = (dcId, oldDcId) => {\n         var currView = _logic.currentEditObject();\n\n         // Update field options in property\n         this.propertyUpdateUserFieldOptions(ids, currView, dcId);\n         this.propertyUpdateCommentFieldOptions(ids, currView, dcId);\n         this.propertyUpdateDateFieldOptions(ids, currView, dcId);\n      };\n\n      // in addition to the common .label  values, we\n      // ask for:\n      return commonUI.concat([\n         {\n            name: \"dataSource\",\n            view: \"richselect\",\n            label: L(\"Data Source\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n            on: {\n               onChange: _logic.selectSource,\n            },\n         },\n         {\n            name: \"columnUser\",\n            view: \"richselect\",\n            label: L(\"Select a user field\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n         },\n         {\n            name: \"columnComment\",\n            view: \"richselect\",\n            label: L(\"Select a comment field\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n         },\n         {\n            name: \"columnDate\",\n            view: \"richselect\",\n            label: L(\"Select a date field\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n         },\n         {\n            view: \"counter\",\n            name: \"height\",\n            label: L(\"Height:\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n         },\n      ]);\n   }\n\n   static propertyEditorPopulate(App, ids, view) {\n      super.propertyEditorPopulate(App, ids, view);\n\n      var datacollectionId = view.settings.dataviewID\n         ? view.settings.dataviewID\n         : null;\n\n      this.propertyUpdateDatacollectionOptions(ids, view, datacollectionId);\n      this.propertyUpdateUserFieldOptions(ids, view, datacollectionId);\n      this.propertyUpdateCommentFieldOptions(ids, view, datacollectionId);\n      this.propertyUpdateDateFieldOptions(ids, view, datacollectionId);\n\n      $$(ids.dataSource).setValue(\n         view.settings.dataviewID ||\n            ABViewCommentPropertyComponentDefaults.dataviewID\n      );\n      $$(ids.columnUser).setValue(\n         view.settings.columnUser ||\n            ABViewCommentPropertyComponentDefaults.columnUser\n      );\n      $$(ids.columnComment).setValue(\n         view.settings.columnComment ||\n            ABViewCommentPropertyComponentDefaults.columnComment\n      );\n      $$(ids.columnDate).setValue(\n         view.settings.columnDate ||\n            ABViewCommentPropertyComponentDefaults.columnDate\n      );\n      $$(ids.height).setValue(\n         view.settings.height || ABViewCommentPropertyComponentDefaults.height\n      );\n   }\n\n   static propertyEditorValues(ids, view) {\n      super.propertyEditorValues(ids, view);\n\n      view.settings.dataviewID = $$(ids.dataSource).getValue();\n      view.settings.columnUser = $$(ids.columnUser).getValue();\n      view.settings.columnComment = $$(ids.columnComment).getValue();\n      view.settings.columnDate = $$(ids.columnDate).getValue();\n      view.settings.height = $$(ids.height).getValue();\n\n      // Retrive the values of your properties from Webix and store them in the view\n   }\n\n   static propertyUpdateDatacollectionOptions(ids, view, dcId) {\n      // Pull data collections to options\n      var dcOptions = view.propertyDatacollections();\n      $$(ids.dataSource).define(\"options\", dcOptions);\n      $$(ids.dataSource).define(\"value\", dcId);\n      $$(ids.dataSource).refresh();\n   }\n\n   static propertyUpdateUserFieldOptions(ids, view, dcId) {\n      var datacollection = view.AB.datacollectionByID(dcId);\n      var object = datacollection ? datacollection.datasource : null;\n\n      // Pull field list\n      var fieldOptions = [];\n      if (object != null) {\n         fieldOptions = object\n            .fields((f) => f.key == \"user\")\n            .map((f) => {\n               return {\n                  id: f.id,\n                  value: f.label,\n               };\n            });\n      }\n      // Add a default option\n      var defaultOption = { id: null, value: \"[Select]\" };\n      fieldOptions.unshift(defaultOption);\n\n      $$(ids.columnUser).define(\"options\", fieldOptions);\n      $$(ids.columnUser).refresh();\n   }\n\n   static propertyUpdateCommentFieldOptions(ids, view, dcId) {\n      var datacollection = view.AB.datacollectionByID(dcId);\n      var object = datacollection ? datacollection.datasource : null;\n\n      // Pull field list\n      var fieldOptions = [];\n      if (object != null) {\n         fieldOptions = object\n            .fields((f) => f.key == \"string\" || f.key == \"LongText\")\n            .map((f) => {\n               return {\n                  id: f.id,\n                  value: f.label,\n               };\n            });\n      }\n      // Add a default option\n      var defaultOption = { id: null, value: \"[Select]\" };\n      fieldOptions.unshift(defaultOption);\n\n      $$(ids.columnComment).define(\"options\", fieldOptions);\n      $$(ids.columnComment).refresh();\n   }\n\n   static propertyUpdateDateFieldOptions(ids, view, dcId) {\n      var datacollection = view.AB.datacollectionByID(dcId);\n      var object = datacollection ? datacollection.datasource : null;\n\n      // Pull field list\n      var fieldOptions = [];\n      if (object != null) {\n         fieldOptions = object\n            .fields((f) => f.key == \"date\")\n            .map((f) => {\n               return {\n                  id: f.id,\n                  value: f.label,\n               };\n            });\n      }\n      // Add a default option\n      var defaultOption = { id: null, value: \"[Select]\" };\n      fieldOptions.unshift(defaultOption);\n\n      $$(ids.columnDate).define(\"options\", fieldOptions);\n      $$(ids.columnDate).refresh();\n   }\n\n   /*\n    * @component()\n    * return a UI component based upon this view.\n    * @param {obj} App\n    * @return {obj} UI component\n    */\n   component(App) {\n      var idBase = \"ABViewComment_\" + this.id;\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n      };\n\n      let base = super.component(App);\n\n      var userList = this.getUserData();\n      var userId = this.getCurrentUserId();\n\n      var _ui = {\n         id: ids.component,\n         view: \"comments\",\n         users: userList,\n         currentUser: userId,\n         height: this.settings.height,\n         on: {\n            onBeforeAdd: function (id, obj, index) {\n               _logic.addComment(obj.text, new Date());\n            },\n            // NOTE: no update event of comment widget !!\n            // Updating event handles in .init function\n            // https://docs.webix.com/api__ui.comments_onbeforeeditstart_event.html#comment-4509366150\n\n            // onAfterEditStart: function (rowId) {\n            // \tlet item = this.getItem(rowId);\n\n            // \t_logic.updateComment(rowId, item);\n            // },\n            onAfterDelete: function (rowId) {\n               _logic.deleteComment(rowId);\n            },\n         },\n      };\n\n      // make sure each of our child views get .init() called\n      var _init = (options) => {\n         this.__dvEvents = this.__dvEvents || {};\n\n         let $comment = $$(ids.component);\n         if ($comment) {\n            let $commentList = $comment.queryView({ view: \"list\" });\n            if ($commentList) {\n               // Updating comment event\n               if (!this.__dvEvents.onStoreUpdated)\n                  this.__dvEvents.onStoreUpdated = $commentList.data.attachEvent(\n                     \"onStoreUpdated\",\n                     (rowId, data, operate) => {\n                        if (operate == \"update\") {\n                           _logic.updateComment(rowId, (data || {}).text);\n                        }\n                     }\n                  );\n\n               // Implement progress bar\n               webix.extend($commentList, webix.ProgressBar);\n            }\n         }\n\n         var dv = this.datacollection;\n         if (!dv) return;\n\n         // bind dc to component\n         // dv.bind($$(ids.component));\n\n         if (!this.__dvEvents.create)\n            this.__dvEvents.create = dv.on(\"create\", () =>\n               _logic.refreshComment()\n            );\n\n         if (!this.__dvEvents.update)\n            this.__dvEvents.update = dv.on(\"update\", () =>\n               _logic.refreshComment()\n            );\n\n         if (!this.__dvEvents.delete)\n            this.__dvEvents.delete = dv.on(\"delete\", () =>\n               _logic.refreshComment()\n            );\n\n         if (!this.__dvEvents.loadData)\n            this.__dvEvents.loadData = dv.on(\"loadData\", () =>\n               _logic.refreshComment()\n            );\n      };\n\n      var _logic = {\n         getCommentData: () => {\n            let dv = this.datacollection;\n            if (!dv) return null;\n\n            let userCol = this.getUserField();\n            let commentCol = this.getCommentField();\n            let dateCol = this.getDateField();\n\n            if (!userCol || !commentCol) return null;\n\n            let userColName = userCol.columnName;\n            let commentColName = commentCol.columnName;\n            let dateColName = dateCol ? dateCol.columnName : null;\n\n            let dataObject = dv.getData();\n            let dataList = [];\n\n            dataObject.forEach((item, index) => {\n               if (item[commentColName]) {\n                  var user = this.getUserData().find((user) => {\n                     return user.value == item[userColName];\n                  });\n                  var data = {\n                     id: item.id,\n                     user_id: user ? user.id : 0,\n                     date: item[dateColName]\n                        ? new Date(item[dateColName])\n                        : null,\n                     default_date: new Date(item[\"created_at\"]),\n                     text: item[commentColName],\n                  };\n\n                  dataList.push(data);\n               }\n            });\n\n            dataList.sort(function (a, b) {\n               if (dateColName) {\n                  return (\n                     new Date(a.date).getTime() - new Date(b.date).getTime()\n                  );\n               } else {\n                  return (\n                     new Date(a.default_date).getTime() -\n                     new Date(b.default_date).getTime()\n                  );\n               }\n            });\n\n            return {\n               data: dataList,\n            };\n         },\n         refreshComment: () => {\n            if (this.__refreshTimeout) clearTimeout(this.__refreshTimeout);\n\n            _logic.busy();\n\n            this.__refreshTimeout = setTimeout(() => {\n               let $comment = $$(ids.component);\n               if (!$comment) return;\n\n               // clear comments\n               let $commentList = $comment.queryView({ view: \"list\" });\n               if ($commentList) $commentList.clearAll();\n\n               // populate comments\n               let commentData = _logic.getCommentData();\n               if (commentData) {\n                  $$(ids.component).parse(commentData);\n               }\n\n               // scroll to the last item\n               if ($commentList)\n                  $commentList.scrollTo(0, Number.MAX_SAFE_INTEGER);\n\n               delete this.__refreshTimeout;\n\n               _logic.ready();\n            }, 90);\n         },\n         addComment: (commentText, dateTime) => {\n            this.saveData(commentText, dateTime);\n         },\n         updateComment: (rowId, commentText) => {\n            let model = this.model();\n            if (!model) return Promise.resolve(); // already notified\n\n            let commentField = this.getCommentField();\n            if (!commentField) return Promise.resolve(); // already notified\n\n            let values = {};\n            values[commentField.columnName] = commentText || \"\";\n\n            return model.update(rowId, values);\n         },\n         deleteComment: (rowId) => {\n            let model = this.model();\n            if (!model) return;\n\n            return model.delete(rowId);\n         },\n         busy: () => {\n            let $comment = $$(ids.component);\n            if (!$comment) return;\n\n            let $commentList = $comment.queryView({ view: \"list\" });\n            if (!$commentList) return;\n\n            $commentList.disable();\n\n            if ($commentList.showProgress)\n               $commentList.showProgress({ type: \"icon\" });\n         },\n         ready: () => {\n            let $comment = $$(ids.component);\n            if (!$comment) return;\n\n            let $commentList = $comment.queryView({ view: \"list\" });\n            if (!$commentList) return;\n\n            $commentList.enable();\n\n            if ($commentList.hideProgress) $commentList.hideProgress();\n         },\n      };\n\n      var onShow = () => {\n         base.onShow();\n\n         _logic.refreshComment();\n      };\n\n      return {\n         ui: _ui,\n         init: _init,\n         logic: _logic,\n         onShow: onShow,\n      };\n   }\n\n   getUsers() {\n      return this.AB.Account.userList().map((u) => {\n         return {\n            id: u.username,\n            value: u.username,\n            image: u.image_id,\n         };\n      });\n   }\n\n   getCurrentUserId() {\n      var userObject = this.getUsers();\n      var currentUser = this.AB.Account.username();\n      //Anonymous User = 0\n      var currentUserId = 0;\n\n      if (!userObject) return;\n\n      userObject.forEach((item, index) => {\n         if (item.value == currentUser) {\n            currentUserId = index + 1;\n         }\n      });\n      return currentUserId;\n   }\n\n   async saveData(commentText, dateTime) {\n      if (commentText == null || commentText == \"\") return Promise.resolve();\n\n      let dv = this.datacollection;\n      if (!dv) return Promise.resolve();\n\n      let model = this.model();\n      if (model == null) {\n         this.AB.notify.builder(\n            {},\n            {\n               message:\n                  \"ABViewComment.saveData(): could not pull a model to work with.\",\n               viewName: this.label,\n            }\n         );\n         return Promise.resolve();\n      }\n\n      let comment = {};\n\n      let userField = this.getUserField();\n      if (userField) comment[userField.columnName] = this.AB.Account.username();\n\n      let commentField = this.getCommentField();\n      if (commentField) comment[commentField.columnName] = commentText;\n\n      let dateField = this.getDateField();\n      if (dateField) comment[dateField.columnName] = dateTime;\n\n      // add parent cursor to default\n      let dvLink = dv.datacollectionLink;\n      if (dvLink && dvLink.getCursor()) {\n         let objectLink = dvLink.datasource;\n         let fieldLink = dv.fieldLink;\n\n         if (objectLink && fieldLink) {\n            comment[fieldLink.columnName] = {};\n            comment[fieldLink.columnName][\n               objectLink.PK()\n            ] = dvLink.getCursor().id;\n         }\n      }\n\n      return await model.create(comment);\n   }\n};\n","/**\n * ABViewComponent\n * A common UI component class for our UI widgets.\n */\nimport ClassUI from \"../../../ui/ClassUI\";\n\nexport default class ABViewComponent extends ClassUI {\n   constructor(...params) {\n      super(...params);\n\n      this.__events = [];\n      // {array}\n      // A collection of any listeners we are managing.\n      // {\n      //   emitter:   {EventEmitter} the object we are listening on\n      //   eventName: {string} the event key we are listening for\n      //   listener:  {fn} the function to call on\n      // }\n\n      this.CurrentObjectID = null;\n      // {string}\n      // the ABObject.id of the object we are working with.\n\n      this.CurrentDatacollectionID = null;\n      // {string}\n      // the ABDataCollection.id of the DC we are working with\n   }\n\n   /**\n    * @method CurrentObject()\n    * A helper to return the current ABObject we are working with.\n    * @return {ABObject}\n    */\n   get CurrentObject() {\n      return this.AB.objectByID(this.CurrentObjectID);\n   }\n   /**\n    * @method CurrentDatacollection()\n    * A helper to return the current ABDataCollection we are working with.\n    * @return {ABDataCollection}\n    */\n   get CurrentDatacollection() {\n      return this.AB.datacollectionByID(this.CurrentDatacollectionID);\n   }\n\n   /**\n    * @method datacollectionLoad\n    *\n    * @param datacollection {ABDatacollection}\n    */\n   datacollectionLoad(datacollection) {\n      this.CurrentDatacollectionID = datacollection.id;\n   }\n\n   objectLoad(object) {\n      this.CurrentObjectID = object.id;\n   }\n\n   /**\n    * @method eventAdd()\n    * Create a new listener on an object. Note, this will prevent multiple\n    * listeners being applied to the same Object.\n    * @param {object} evt\n    *        The definition of the event we are adding:\n    *        {\n    *           emitter:   {EventEmitter} the object we are listening on\n    *           eventName: {string} the event key we are listening for\n    *           listener:   {fn} the function to call on\n    *        }\n    */\n   eventAdd(evt) {\n      if (!evt || !evt.emitter || !evt.listener) return;\n\n      // make sure we haven't done this before:\n      var exists = this.__events.find((e) => {\n         return e.emitter == evt.emitter && e.eventName == evt.eventName;\n         // && e.listener == evt.listener;\n      });\n\n      if (!exists || exists.length < 1) {\n         // add to array\n         this.__events.push({\n            emitter: evt.emitter,\n            eventName: evt.eventName,\n            listener: evt.listener,\n         });\n\n         // listening this event\n         evt.emitter.on(evt.eventName, evt.listener);\n      }\n   }\n\n   /**\n    * @method eventsClear()\n    * Remove all the attached event listeners and reset our tracking.\n    */\n   eventsClear() {\n      (this.__events || []).forEach((e) => {\n         e.emitter.removeListener(e.eventName, e.listener);\n      });\n      this.__events = [];\n   }\n\n   /**\n    * @method onShow()\n    * perform any preparations necessary when showing this component.\n    */\n   onShow() {\n      // if we manage a datacollection, then make sure it has started\n      // loading it's data when we are showing our component.\n      var dv = this.datacollection;\n      if (dv) {\n         if (dv.dataStatus == dv.dataStatusFlag.notInitial) {\n            // load data when a widget is showing\n            dv.loadData();\n         }\n      }\n   }\n}\n","const ABViewConditionalContainerCore = require(\"../../core/views/ABViewConditionalContainerCore\");\n\nconst ABViewPropertyDefaults = ABViewConditionalContainerCore.defaultValues();\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nlet FilterComponent = null;\n\nmodule.exports = class ABViewConditionalContainer extends (\n   ABViewConditionalContainerCore\n) {\n   constructor(values, application, parent, defaultValues) {\n      super(values, application, parent, defaultValues);\n\n      // Set filter value\n      this.__filterComponent = this.AB.filterComplexNew(\n         `${this.id}_filterComponent`\n      );\n      // this.__filterComponent.applicationLoad(application);\n      this.populateFilterComponent();\n   }\n\n   //\n   // Property Editor\n   //\n\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\n      var commonUI = super.propertyEditorDefaultElements(\n         App,\n         ids,\n         _logic,\n         ObjectDefaults\n      );\n\n      var idBase = \"ABViewConditionalContainerPropertyEditor\";\n\n      _logic.changeDatacollection = (dvId) => {\n         var view = _logic.currentEditObject();\n\n         this.populatePopupEditors(ids, view, dvId);\n      };\n\n      _logic.showFilterPopup = ($view) => {\n         this.filter_popup.show($view, null, { pos: \"top\" });\n      };\n\n      _logic.onFilterChange = () => {\n         var view = _logic.currentEditObject();\n\n         var filterValues = FilterComponent.getValue();\n\n         view.settings.filterConditions = filterValues;\n\n         var allComplete = true;\n         filterValues.rules.forEach((f) => {\n            // if all 3 fields are present, we are good.\n            if (f.key && f.rule && f.value) {\n               allComplete = allComplete && true;\n            } else {\n               // else, we found an entry that wasn't complete:\n               allComplete = false;\n            }\n         });\n\n         // only perform the update if a complete row is specified:\n         if (allComplete) {\n            // we want to call .save() but give webix a chance to properly update it's\n            // select boxes before this call causes them to be removed:\n            setTimeout(() => {\n               this.propertyEditorSave(ids, view);\n            }, 10);\n         }\n\n         this.populateBadgeNumber(ids, view);\n      };\n\n      FilterComponent = this.AB.filterComplexNew(`${idBase}_filter`);\n      FilterComponent.init();\n      FilterComponent.on(\"change\", (val) => {\n         _logic.onFilterChange(val);\n      });\n\n      this.filter_popup = webix.ui({\n         view: \"popup\",\n         width: 800,\n         hidden: true,\n         body: FilterComponent.ui,\n      });\n\n      return commonUI.concat([\n         {\n            name: \"datacollection\",\n            view: \"richselect\",\n            label: L(\"Data Source\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n            on: {\n               onChange: function (dvId) {\n                  _logic.changeDatacollection(dvId);\n               },\n            },\n         },\n         {\n            view: \"fieldset\",\n            name: \"filter\",\n            label: L(\"Filter:\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n            body: {\n               type: \"clean\",\n               padding: 10,\n               rows: [\n                  {\n                     cols: [\n                        {\n                           view: \"label\",\n                           label: L(\"Filter Data:\"),\n                           width: this.AB.UISettings.config().labelWidthLarge,\n                        },\n                        {\n                           view: \"button\",\n                           name: \"buttonFilter\",\n                           label: L(\"Settings\"),\n                           icon: \"fa fa-gear\",\n                           type: \"icon\",\n                           css: \"webix_primary\",\n                           autowidth: true,\n                           badge: 0,\n                           click: function () {\n                              _logic.showFilterPopup(this.$view);\n                           },\n                        },\n                     ],\n                  },\n               ],\n            },\n         },\n      ]);\n   }\n\n   static propertyEditorPopulate(App, ids, view) {\n      super.propertyEditorPopulate(App, ids, view);\n\n      // FilterComponent.applicationLoad(view.application);\n\n      var datacollectionId = view.settings.dataviewID\n         ? view.settings.dataviewID\n         : null;\n      var SourceSelector = $$(ids.datacollection);\n\n      // Pull data collections to options\n      var dcOptions = view.propertyDatacollections();\n      SourceSelector.define(\"options\", dcOptions);\n      SourceSelector.define(\"value\", datacollectionId);\n      SourceSelector.refresh();\n\n      this.populatePopupEditors(ids, view);\n   }\n\n   static propertyEditorValues(ids, view) {\n      super.propertyEditorValues(ids, view);\n\n      view.settings.dataviewID = $$(ids.datacollection).getValue();\n   }\n\n   static populatePopupEditors(ids, view, datacollectionId) {\n      // pull current data collection\n      var dv = view.datacollection;\n\n      // specify data collection id\n      if (datacollectionId) {\n         dv = view.AB.datacollectionByID(datacollectionId);\n      }\n\n      if (dv && dv.datasource) {\n         FilterComponent.fieldsLoad(dv.datasource.fields());\n         view.__filterComponent.fieldsLoad(dv.datasource.fields());\n      } else {\n         FilterComponent.fieldsLoad();\n         view.__filterComponent.fieldsLoad();\n      }\n\n      FilterComponent.setValue(\n         view.settings.filterConditions ||\n            ABViewPropertyDefaults.filterConditions\n      );\n      view.__filterComponent.setValue(\n         view.settings.filterConditions ||\n            ABViewPropertyDefaults.filterConditions\n      );\n\n      this.populateBadgeNumber(ids, view);\n   }\n\n   static populateBadgeNumber(ids, view) {\n      if (\n         view.settings.filterConditions &&\n         view.settings.filterConditions.rules\n      ) {\n         $$(ids.buttonFilter).define(\n            \"badge\",\n            view.settings.filterConditions.rules.length || null\n         );\n         $$(ids.buttonFilter).refresh();\n      } else {\n         $$(ids.buttonFilter).define(\"badge\", null);\n         $$(ids.buttonFilter).refresh();\n      }\n   }\n\n   /*\n    * @component()\n    * return a UI component based upon this view.\n    * @param {obj} App\n    * @return {obj} UI component\n    */\n   component(App) {\n      var idBase = \"ABViewConditionalContainer_\" + this.id;\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n      };\n\n      var baseComp = super.component(App);\n\n      const ifComp = this.views()[0].component(App);\n      const elseComp = this.views()[1].component(App);\n\n      ifComp.ui.batch = \"if\";\n      elseComp.ui.batch = \"else\";\n\n      var _ui = {\n         id: ids.component,\n         view: \"multiview\",\n         cells: [\n            {\n               batch: \"wait\",\n               view: \"layout\",\n               rows: [\n                  {\n                     view: \"label\",\n                     label: L(\"Please wait...\"),\n                  },\n               ],\n            },\n            ifComp.ui,\n            elseComp.ui,\n         ],\n      };\n\n      var _init = (options, accessLevel) => {\n         baseComp.init(options);\n         ifComp.init(options, accessLevel);\n         elseComp.init(options, accessLevel);\n\n         this.populateFilterComponent();\n\n         var dv = this.datacollection;\n         if (dv) {\n            // listen DC events\n            this.eventAdd({\n               emitter: dv,\n               eventName: \"loadData\",\n               listener: () => _logic.displayView(),\n            });\n            this.eventAdd({\n               emitter: dv,\n               eventName: \"initializedData\",\n               listener: () => _logic.displayView(),\n            });\n\n            this.eventAdd({\n               emitter: dv,\n               eventName: \"changeCursor\",\n               listener: (...p) => _logic.displayView(...p),\n            });\n         }\n\n         _logic.displayView();\n      };\n\n      var _logic = {\n         displayView: (currData) => {\n            let dv = this.datacollection;\n            if (dv && dv.dataStatus === dv.dataStatusFlag.initialized) {\n               if (currData == null) {\n                  currData = dv.getCursor();\n               }\n               var isValid = this.__filterComponent.isValid(currData);\n\n               // dataStatus initialized\n               // filter is valid\n               // currentData has been loaded from cursor\n               if (\n                  isValid &&\n                  currData != undefined // if , at this point, there is no cursor; the data collection is empty\n               ) {\n                  // if (isValid && currData) {\n                  $$(ids.component).showBatch(\"if\");\n               } else {\n                  $$(ids.component).showBatch(\"else\");\n               }\n            } else {\n               // show 'waiting' panel if data is not loaded\n               $$(ids.component).showBatch(\"wait\");\n               return;\n            }\n         },\n      };\n\n      return {\n         ui: _ui,\n         init: _init,\n         logic: _logic,\n\n         onShow: baseComp.onShow,\n      };\n   }\n\n   populateFilterComponent() {\n      let dc = this.datacollection;\n      if (dc && dc.datasource)\n         this.__filterComponent.fieldsLoad(dc.datasource.fields());\n      else this.__filterComponent.fieldsLoad([]);\n\n      this.__filterComponent.setValue(\n         this.settings.filterConditions ||\n            ABViewPropertyDefaults.filterConditions\n      );\n   }\n\n   save() {\n      // Because conditional container has always IF and ELSE containers, then it should be include them to call save too\n      let includeSubViews = true;\n\n      return super.save(includeSubViews);\n   }\n};\n","import ABViewConnectDataFilterCore from \"../../core/views/ABViewConnectDataFilterCore\";\nimport ABViewComponent from \"./ABViewComponent\";\n\nconst L = (...params) => AB.Multilingual.label(...params);\n\nclass ABViewConnectDataFilterComponent extends ABViewComponent {\n   constructor(view, idbase) {\n      super(idbase ?? `ABViewConnectDataFilter_${view.id}`, {\n         reset: \"\",\n      });\n\n      this.view = view;\n      this.AB = view.AB;\n      this.datacollection = this.view.datacollection;\n      this.settings = view.settings;\n   }\n\n   ui() {\n      return {\n         type: \"space\",\n         borderless: true,\n         cols: [\n            {\n               view: \"icon\",\n               icon: \"fa fa-filter\",\n               align: \"left\",\n               disabled: true,\n            },\n            {\n               view: \"combo\",\n               id: this.ids.component,\n               labelWidth: this.AB.UISettings.config().labelWidthXLarge,\n               disabled: true,\n               on: {\n                  onChange: (id) => this.applyConnectFilter(id),\n               },\n            },\n            {\n               view: \"icon\",\n               id: this.ids.reset,\n               icon: \"fa fa-times\",\n               align: \"left\",\n               disabled: true,\n               tooltip: L(\"Renmove this filter\"),\n               on: {\n                  onItemClick: () => this.resetConnectFilter(),\n               },\n            },\n         ],\n      };\n   }\n\n   async init(options) {\n      const dv = this.datacollection;\n      if (!dv) return;\n\n      const object = dv.datasource;\n      if (!object) return;\n\n      const [field] = object.fields((f) => f.columnName == this.settings.field);\n      if (!field) {\n         this.AB.notify.developer(\n            `Cannot find field \"${this.settings.field}\" in ${object.name}`,\n            {\n               context: \"ABViewConnectDataFilterComponent.init()\",\n               data: { settings: this.settings },\n            }\n         );\n         return;\n      }\n      this.field = field;\n\n      const suggest = webix.ui({\n         view: \"suggest\",\n         filter: ({ value }, search) =>\n            value.toLowerCase().includes(search.toLowerCase()),\n         on: {\n            onShow: () => {\n               field.populateOptionsDataCy($$(this.ids.component), field, {});\n            },\n         },\n      });\n      field.getAndPopulateOptions(suggest, null, field);\n\n      $$(this.ids.component).define(\"suggest\", suggest);\n      $$(this.ids.component).define(\n         \"label\",\n         `${L(\"Filter by\")} ${field.label}`\n      );\n      $$(this.ids.component).enable();\n      $$(this.ids.component).refresh();\n   }\n\n   resetConnectFilter() {\n      this.datacollection.filterCondition({ glue: \"and\", rules: [] });\n      this.datacollection.reloadData();\n      // Block applyConnectFields() from triggering\n      $$(this.ids.component).blockEvent();\n      $$(this.ids.component).setValue();\n      $$(this.ids.component).unblockEvent();\n      $$(this.ids.reset).disable();\n   }\n\n   applyConnectFilter(connectId) {\n      const filterRule = {\n         key: this.field.id,\n         rule: \"equals\",\n         value: connectId,\n      };\n\n      this.datacollection.filterCondition({ glue: \"and\", rules: [filterRule] });\n      this.datacollection.reloadData();\n      $$(this.ids.reset).enable();\n   }\n}\n\nexport default class ABViewConnectDataFilter extends ABViewConnectDataFilterCore {\n   /**\n    * @method component()\n    * return a UI component based upon this view.\n    * @param {obj} App\n    * @return {obj} UI component\n    */\n   component(v1App = false) {\n      let component = new ABViewConnectDataFilterComponent(this);\n\n      // if this is our v1Interface\n      if (v1App) {\n         var newComponent = component;\n         component = {\n            ui: newComponent.ui(),\n            init: (options, accessLevel) => {\n               return newComponent.init(this.AB, accessLevel);\n            },\n            onShow: (...params) => {\n               return newComponent.onShow?.(...params);\n            },\n         };\n      }\n      return component;\n   }\n}\n","const ABViewContainerCore = require(\"../../core/views/ABViewContainerCore\");\n\nconst ABPropertyComponentDefaults = ABViewContainerCore.defaultValues();\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABViewContainer extends ABViewContainerCore {\n   // constructor(values, application, parent, defaultValues) {\n   //    super(values, application, parent, defaultValues);\n   // }\n\n   //\n   //\tEditor Related\n   //\n\n   /**\n    * @method editorComponent\n    * return the Editor for this UI component.\n    * the editor should display either a \"block\" view or \"preview\" of\n    * the current layout of the view.\n    * @param {string} mode what mode are we in ['block', 'preview']\n    * @return {Component}\n    */\n   editorComponent(App, mode) {\n      var idBase = \"ABViewContainerEditorComponent\";\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n      };\n\n      var subComponents = {}; // { viewId: viewComponent, ..., viewIdn: viewComponent }\n\n      var cellHeight = 250;\n      // if (this.key == \"form\" || this.key == \"detail\") {\n      // \tcellHeight = 80;\n      // }\n\n      var _ui = {\n         rows: [\n            {\n               id: ids.component,\n               view: \"dashboard\",\n               css: \"ab-\" + this.key + \"-container\",\n               cellHeight: cellHeight,\n               gridColumns:\n                  this.settings.columns || ABPropertyComponentDefaults.columns,\n            },\n         ],\n      };\n\n      var _init = (options) => {\n         var Dashboard = $$(ids.component);\n         if (Dashboard) {\n            webix.extend(Dashboard, webix.OverlayBox);\n            webix.extend(Dashboard, webix.ProgressBar);\n         }\n\n         // this.views().reverse().forEach((child) => {\n\n         // NOTE: need to sorting before .addView because there is a render position bug in webix 5.1.7\n         // https://webix.com/snippet/404cf0c7\n         var childViews = this.viewsSortByPosition();\n\n         // attach all the .UI views:\n         childViews.forEach((child) => {\n            var component = child.component(App);\n\n            // store\n            subComponents[child.id] = component;\n\n            let view = \"panel\";\n            if (child.settings.movable == false) view = \"scrollview\";\n\n            Dashboard.addView({\n               view: view,\n\n               // specific viewId to .name, it will be used to save view position\n               name: child.id,\n               icon: \"fa fa-arrows\",\n               css: \"ab-widget-container\",\n               body: {\n                  rows: [\n                     {\n                        view: \"template\",\n                        height: 30,\n                        css: \"ab-widget-header\",\n                        template: _logic.template(child),\n                        onClick: {\n                           \"ab-component-edit\": (e, id, trg) => {\n                              _logic.viewEdit(e, child.id, trg);\n                           },\n                           \"ab-component-remove\": (e, id, trg) => {\n                              _logic.viewDelete(e, child.id, trg);\n                           },\n                        },\n                     },\n                     component.ui,\n                     // (mode == 'preview' ? component.ui : {\n                     // \t// empty element\n                     // \tview: 'spacer',\n                     // \thidden: true,\n                     // })\n                  ],\n               },\n\n               // dx: _logic.validatePosition(child.position.dx, 1, Dashboard.config.gridColumns),\n               // dy: _logic.validatePosition(child.position.dy, 1, Dashboard.config.gridRows),\n\n               dx: child.position.dx || 1,\n               dy: child.position.dy || 1,\n               x: _logic.validatePosition(\n                  child.position.x,\n                  0,\n                  Dashboard.config.gridColumns - 1\n               ),\n               y: child.position.y || 0,\n            });\n\n            // initial sub-component\n            component.init(null, 2); // when in editor allow full access\n         });\n\n         // listen onChange event\n         // NOTE: listen after populate views by .addView\n         if (this._onChangeId) Dashboard.detachEvent(this._onChangeId);\n         this._onChangeId = Dashboard.attachEvent(\"onChange\", () => {\n            _logic.onReorder();\n         });\n\n         // show \"drop here\" panel\n         _logic.showEmptyPlaceholder();\n\n         Dashboard.adjust();\n      };\n\n      var _logic = {\n         /**\n          * @method template()\n          * render the list template for the View\n          * @param {obj} obj the current View instance\n          * @param {obj} common  Webix provided object with common UI tools\n          */\n         template: (child) => {\n            return `<div>\n               <i class=\"fa fa-${child.icon} webix_icon_btn\"></i> ${child.label}\n               <div class=\"ab-component-tools\">\n               ${\n                  child.settings.removable == false\n                     ? \"\"\n                     : '<i class=\"fa fa-trash ab-component-remove\"></i>'\n               }\n               <i class=\"fa fa-edit ab-component-edit\"></i>\n               </div></div>`;\n         },\n\n         /**\n          * @method viewDelete()\n          * Called when the [delete] icon for a child View is clicked.\n          * @param {obj} e the onClick event object\n          * @param {integer} id the id of the element to delete\n          * @param {obj} trg  Webix provided object\n          */\n         viewDelete: (e, id, trg) => {\n            var deletedView = this.views((v) => v.id == id)[0];\n            if (!deletedView) return false;\n\n            webix.confirm({\n               title: L(\"Delete component\"),\n               text: L(\"Do you want to delete <b>{0}</b>?\", [\n                  deletedView.label,\n               ]),\n               callback: async (result) => {\n                  if (!result) return;\n                  // let Dashboard = $$(ids.component);\n\n                  // // remove UI of this component in template\n                  // var deletedElem = Dashboard.queryView({ name: id });\n                  // if (deletedElem) {\n\n                  // \t// store the removed view to signal event in .onChange\n                  // \tthis.__deletedView = deletedView;\n\n                  // \t// remove view\n                  // \tvar remainingViews = this.views((v) => { return v.id != deletedView.id; })\n                  // \tthis._views = remainingViews;\n\n                  // \t// this calls the remove REST to API server\n                  // \tDashboard.removeView(deletedElem);\n                  // }\n\n                  _logic.busy();\n\n                  try {\n                     await deletedView.destroy();\n\n                     // signal the current view has been deleted.\n                     deletedView.emit(\"destroyed\", deletedView);\n\n                     let Dashboard = $$(ids.component);\n\n                     // Update UI\n                     var deletedElem = Dashboard.queryView({ name: id });\n                     if (deletedElem) {\n                        Dashboard.blockEvent();\n                        Dashboard.removeView(deletedElem);\n                        Dashboard.unblockEvent();\n                     }\n\n                     _logic.showEmptyPlaceholder();\n                  } catch (err) {\n                     App.AB.notify.developer(err, {\n                        message: \"Error trying to delete selected View:\",\n                        view: deletedView,\n                     });\n                  }\n\n                  _logic.ready();\n               },\n            });\n            e.preventDefault();\n         },\n\n         /**\n          * @method viewEdit()\n          * Called when the [edit] icon for a child View is clicked.\n          * @param {obj} e the onClick event object\n          * @param {integer} id the id of the element to edit\n          * @param {obj} trg  Webix provided object\n          */\n         viewEdit: (e, id, trg) => {\n            var view = this.views((v) => v.id == id)[0];\n\n            if (!view) return false;\n\n            // NOTE: let webix finish this onClick event, before\n            // calling .populateInterfaceWorkspace() which will replace\n            // the interface elements with the edited view.  (apparently\n            // that causes errors.)\n            setTimeout(() => {\n               App.actions.populateInterfaceWorkspace(view);\n            }, 50);\n\n            e.preventDefault();\n\n            return false;\n         },\n\n         onReorder: async () => {\n            _logic.busy();\n\n            var Dashboard = $$(ids.component);\n\n            // ignore in \"preview\" mode\n            // if (Dashboard == null || Dashboard.config.view != \"dashboard\") return;\n\n            var viewState = Dashboard.serialize();\n\n            var allViewUpdates = [];\n\n            // save view position state to views\n            this.views().forEach((v) => {\n               var state = viewState.filter((vs) => vs.name == v.id)[0];\n               if (state) {\n                  v.position.x = state.x;\n                  v.position.y = state.y;\n\n                  // validate position data\n                  if (v.position.x < 0) v.position.x = 0;\n                  if (v.position.y < 0) v.position.y = 0;\n\n                  allViewUpdates.push(v.save());\n               }\n            });\n\n            try {\n               // save template layout\n               // this.saveReorder()\n               await Promise.all(allViewUpdates);\n\n               await this.save();\n\n               _logic.ready();\n            } catch (err) {\n               App.AB.notify.developer(err, {\n                  message: \"Error trying to save selected View:\",\n                  view: this.toObj(),\n               });\n               _logic.ready();\n            }\n         },\n\n         showEmptyPlaceholder: () => {\n            var Dashboard = $$(ids.component);\n\n            // if we don't have any views, then place a \"drop here\" placeholder\n            if (Dashboard.getChildViews().length == 0) {\n               Dashboard.showOverlay(\n                  \"<div class='drop-zone'><div>\" +\n                     App.labels.componentDropZone +\n                     \"</div></div>\"\n               );\n            }\n         },\n\n         validatePosition: (curPosition, minPosition, maxPosition) => {\n            if (curPosition < minPosition) return minPosition;\n            if (curPosition > maxPosition) return maxPosition;\n            else return curPosition;\n         },\n\n         busy: () => {\n            let Dashboard = $$(ids.component);\n            if (Dashboard) {\n               Dashboard.disable();\n\n               if (Dashboard.showProgress)\n                  Dashboard.showProgress({ type: \"icon\" });\n            }\n         },\n\n         ready: () => {\n            let Dashboard = $$(ids.component);\n            if (Dashboard) {\n               Dashboard.enable();\n\n               if (Dashboard.hideProgress) Dashboard.hideProgress();\n            }\n         },\n      };\n\n      var _onShow = () => {\n         this.views().forEach((v) => {\n            var component = subComponents[v.id];\n\n            if (component && component.onShow) {\n               component.onShow();\n            }\n         });\n\n         let dc = this.datacollection;\n         if (dc && dc.dataStatus == dc.dataStatusFlag.notInitial) {\n            // load data when a widget is showing\n            dc.loadData();\n         }\n      };\n\n      return {\n         ui: _ui,\n         init: _init,\n         logic: _logic,\n\n         onShow: _onShow,\n      };\n   }\n\n   //\n   // Property Editor\n   //\n\n   // static propertyEditorComponent(App) {\n   // \treturn ABViewPropertyComponent.component(App);\n   // }\n\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\n      var commonUI = super.propertyEditorDefaultElements(\n         App,\n         ids,\n         _logic,\n         ObjectDefaults\n      );\n\n      _logic.addColumnGravity = (newVal, oldVal) => {\n         var pos = $$(ids.gravity).getParentView().index($$(ids.gravity));\n         $$(ids.gravity)\n            .getParentView()\n            .addView(\n               {\n                  view: \"counter\",\n                  value: \"1\",\n                  min: 1,\n                  label: L(\"Column {0} Gravity\", [newVal]),\n                  labelWidth: this.AB.UISettings.config().labelWidthXLarge,\n                  css: \"gravity_counter\",\n                  on: {\n                     onChange: () => {\n                        _logic.onChange();\n                     },\n                  },\n               },\n               pos\n            );\n      };\n\n      _logic.removeColumnGravity = (newVal, oldVal) => {\n         $$(ids.gravity)\n            .getParentView()\n            .removeView(\n               $$(ids.gravity).getParentView().getChildViews()[\n                  $$(ids.gravity).getParentView().index($$(ids.gravity)) - 1\n               ]\n            );\n      };\n\n      // in addition to the common .label  values, we\n      // ask for:\n      return commonUI.concat([\n         {\n            name: \"columns\",\n            view: \"counter\",\n            min: 1,\n            label: L(\"Columns\"),\n            labelWidth: this.AB.UISettings.config().labelWidthXLarge,\n            on: {\n               onChange: function (newVal, oldVal) {\n                  if (newVal > 8) $$(ids.columns).setValue(8);\n\n                  if (newVal > oldVal) {\n                     _logic.addColumnGravity(newVal, oldVal);\n                  } else if (newVal < oldVal) {\n                     _logic.removeColumnGravity(newVal, oldVal);\n                  }\n               },\n            },\n         },\n         {\n            view: \"text\",\n            name: \"gravity\",\n            height: 1,\n         },\n      ]);\n   }\n\n   static propertyEditorPopulate(App, ids, view, logic) {\n      super.propertyEditorPopulate(App, ids, view, logic);\n      this._App = App;\n\n      $$(ids.columns).setValue(\n         view.settings.columns || ABPropertyComponentDefaults.columns\n      );\n\n      var gravityCounters = $$(ids.gravity)\n         .getParentView()\n         .queryView({ css: \"gravity_counter\" }, \"all\")\n         .map((counter) => $$(ids.gravity).getParentView().removeView(counter));\n\n      for (var step = 1; step <= $$(ids.columns).getValue(); step++) {\n         var pos = $$(ids.gravity).getParentView().index($$(ids.gravity));\n         $$(ids.gravity)\n            .getParentView()\n            .addView(\n               {\n                  view: \"counter\",\n                  min: 1,\n                  label: L(\"Column {0} Gravity\", [step]),\n                  labelWidth: this.AB.UISettings.config().labelWidthXLarge,\n                  css: \"gravity_counter\",\n                  value:\n                     view.settings.gravity && view.settings.gravity[step - 1]\n                        ? view.settings.gravity[step - 1]\n                        : ABPropertyComponentDefaults.gravity,\n                  on: {\n                     onChange: () => {\n                        logic.onChange();\n                     },\n                  },\n               },\n               pos\n            );\n      }\n\n      // NOTE : Move to .propertyEditorSave\n      // // when a change is made in the properties the popups need to reflect the change\n      // this.updateEventIds = this.updateEventIds || {}; // { viewId: boolean, ..., viewIdn: boolean }\n      // if (!this.updateEventIds[view.id]) {\n      // \tthis.updateEventIds[view.id] = true;\n\n      // \t// refresh dashboard to update \"position.x\" and \"position.y\" of child views\n      // \tview.addListener('properties.updated', function () {\n\n      // \t\tsetTimeout(() => {\n      // \t\t\tview.editorComponent(App).logic.onChange();\n      // \t\t}, 100)\n\n      // \t}, this);\n      // }\n   }\n\n   static propertyEditorValues(ids, view) {\n      super.propertyEditorValues(ids, view);\n\n      view.settings.columns = $$(ids.columns).getValue();\n\n      var gravity = [];\n      $$(ids.gravity)\n         .getParentView()\n         .queryView({ css: \"gravity_counter\" }, \"all\")\n         .map((counter) => gravity.push($$(counter).getValue()));\n      view.settings.gravity = gravity;\n   }\n\n   static async propertyEditorSave(ids, view) {\n      this.propertyEditorValues(ids, view);\n\n      // Save .settings of container\n      await view.save();\n\n      // signal the current view has been updated.\n      view.emit(\"properties.updated\", view);\n\n      // Save reorder of subviews\n      let editorComponent = view.editorComponent(this._App);\n      await editorComponent.logic.onReorder();\n   }\n\n   /**\n    * @method component()\n    * return a UI component based upon this view.\n    * @param {obj} App\n    * @param {string} idPrefix\n    *\n    * @return {obj} UI component\n    */\n   component(App, idPrefix) {\n      var idBase = \"ABViewContainer_\" + (idPrefix || \"\") + this.id;\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n      };\n\n      this.viewComponents = this.viewComponents || {}; // { viewId: viewComponent, ..., viewIdn: viewComponent }\n\n      var _logic = {\n         changePage: (pageId) => {\n            this.changePage(pageId);\n         },\n\n         callbacks: {},\n\n         getElements: (views) => {\n            var rows = [];\n            var curRowIndex;\n            var curColIndex;\n\n            views.forEach((v) => {\n               let component = this.viewComponents[v.id];\n               // if (!component) {\n               component = v.component(App, idPrefix);\n               this.viewComponents[v.id] = component;\n               // }\n\n               // if key == \"form\" or \"button\" register the callbacks to the parent\n               // NOTE this will only work on the last form of a page!\n               if (v.key == \"form\" && v._logic.callbacks) {\n                  _logic.callbacks = v._logic.callbacks;\n               }\n\n               // Create a new row\n               if (v.position.y == null || v.position.y != curRowIndex) {\n                  curRowIndex = v.position.y || rows.length;\n                  curColIndex = 0;\n\n                  var rowNew = {\n                     cols: [],\n                  };\n\n                  // Create columns following setting value\n                  var colNumber =\n                     this.settings.columns ||\n                     ABPropertyComponentDefaults.columns;\n                  for (var i = 0; i < colNumber; i++) {\n                     var grav =\n                        this.settings.gravity && this.settings.gravity[i]\n                           ? parseInt(this.settings.gravity[i])\n                           : ABPropertyComponentDefaults.gravity;\n                     rowNew.cols.push({\n                        gravity: grav,\n                     });\n                  }\n\n                  rows.push(rowNew);\n               }\n\n               // Get the last row\n               var curRow = rows[rows.length - 1];\n\n               var newPos = v.position.x || 0;\n               var getGrav = 1;\n\n               if (curRow.cols[newPos] && curRow.cols[newPos].gravity) {\n                  getGrav = curRow.cols[newPos].gravity;\n               }\n\n               component.ui.gravity = getGrav;\n\n               // Add ui of sub-view to column\n               curRow.cols[newPos] = component.ui;\n\n               curColIndex += 1;\n\n               // Trigger 'changePage' event to parent\n               this.eventAdd({\n                  emitter: v,\n                  eventName: \"changePage\",\n                  listener: (...p) => _logic.changePage(...p),\n               });\n            });\n\n            return rows;\n         },\n      };\n\n      // Generate rows & cols of views to .layout\n      var views = this.viewsSortByPosition();\n      var rowViews = _logic.getElements(views);\n\n      var _ui = {\n         id: ids.component,\n         view: \"layout\",\n         rows: rowViews,\n      };\n\n      // make sure each of our child views get .init() called\n      var _init = (options, parentAccessLevel = 0) => {\n         // register our callbacks:\n         if (options) {\n            for (var c in _logic.callbacks) {\n               _logic.callbacks[c] = options[c] || _logic.callbacks[c];\n            }\n         }\n\n         // see access by CSS class\n         if ($$(ids.component))\n            $$(ids.component).define(\"css\", \"accessLevel-\" + parentAccessLevel);\n\n         // attach all the .UI views:\n         for (var key in this.viewComponents) {\n            // skip when the view is removed.\n            if (this.views((v) => v.id == key)[0] == null) return;\n\n            var component = this.viewComponents[key];\n\n            // Initial component along with options in case there are callbacks we need to listen for\n            if (parentAccessLevel > 0) {\n               component.init(options, parentAccessLevel);\n            } else {\n               $$(component.ui.id).hide();\n            }\n         }\n      };\n\n      var _onShow = () => {\n         let dv = this.datacollection;\n         if (dv && dv.dataStatus == dv.dataStatusFlag.notInitial) {\n            // load data when a widget is showing\n            dv.loadData();\n         }\n\n         // calll .onShow in child components\n         this.views().forEach((v) => {\n            var component = this.viewComponents[v.id];\n\n            if (component && component.onShow) {\n               component.onShow();\n            }\n         });\n      };\n\n      return {\n         ui: _ui,\n         init: _init,\n         logic: _logic,\n\n         onShow: _onShow,\n      };\n   }\n};\n","const ABViewDataviewCore = require(\"../../core/views/ABViewDataviewCore\");\nconst ABViewPropertyLinkPage = require(\"./viewProperties/ABViewPropertyLinkPage\")\n   .default;\n\nconst ABViewDataviewDefaults = ABViewDataviewCore.defaultValues();\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABViewDataview extends ABViewDataviewCore {\n   // constructor(values, application, parent, defaultValues) {\n   //    super(values, application, parent, defaultValues);\n   // }\n\n   //\n   // Property Editor\n   //\n\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\n      var idBase = \"ABViewDataviewPropertyEditor\";\n\n      var commonUI = super.propertyEditorDefaultElements(\n         App,\n         ids,\n         _logic,\n         ObjectDefaults\n      );\n\n      this.linkPageComponent = ABViewPropertyLinkPage.propertyComponent(\n         App,\n         idBase\n      );\n\n      return commonUI.concat([\n         {\n            view: \"counter\",\n            name: \"xCount\",\n            min: 1, // we cannot have 0 columns per row so lets not accept it\n            label: L(\"Items in a row\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n            step: 1,\n         },\n         this.linkPageComponent.ui,\n      ]);\n   }\n\n   static propertyEditorPopulate(App, ids, view) {\n      super.propertyEditorPopulate(App, ids, view);\n\n      $$(ids.xCount).setValue(\n         view.settings.xCount || ABViewDataviewDefaults.xCount\n      );\n\n      this.linkPageComponent.viewLoad(view);\n      this.linkPageComponent.setSettings(view.settings);\n   }\n\n   static propertyEditorValues(ids, view) {\n      super.propertyEditorValues(ids, view);\n\n      view.settings.xCount = $$(ids.xCount).getValue();\n\n      let linkSettings = this.linkPageComponent.getSettings();\n      for (let key in linkSettings) {\n         view.settings[key] = linkSettings[key];\n      }\n   }\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      super.fromValues(values);\n\n      this.settings.detailsPage =\n         this.settings.detailsPage || ABViewDataviewDefaults.detailsPage;\n      this.settings.editPage =\n         this.settings.editPage || ABViewDataviewDefaults.editPage;\n      this.settings.detailsTab =\n         this.settings.detailsTab || ABViewDataviewDefaults.detailsTab;\n      this.settings.editTab =\n         this.settings.editTab || ABViewDataviewDefaults.editTab;\n   }\n\n   /**\n    * @method component()\n    * return a UI component based upon this view.\n    * @param {obj } App\n    * @return {obj } UI component\n    */\n   component(App) {\n      var com = {};\n\n      var idBase = \"ABViewDataview_\" + this.id;\n      var ids = {\n         scrollview: App.unique(`${idBase}_scrollview`),\n         component: App.unique(`${idBase}_component`),\n         dataFlexView: App.unique(`${idBase}_dataFlexView`),\n      };\n\n      let linkPage = this.linkPageHelper.component(App, idBase);\n\n      com.ui = {\n         id: ids.component,\n         rows: [\n            {\n               id: ids.scrollview,\n               view: \"scrollview\",\n               scroll: \"y\",\n               body: {\n                  id: ids.dataFlexView,\n                  view: \"flexlayout\",\n                  paddingX: 15,\n                  paddingY: 19,\n                  type: \"space\",\n                  cols: [],\n               },\n               on: {\n                  onAfterScroll: function () {\n                     let pos = this.getScrollState();\n\n                     com.logic.scroll(pos);\n                  },\n               },\n            },\n         ],\n      };\n\n      if (this.settings.height) com.ui.height = this.settings.height;\n\n      com.init = (options) => {\n         var dc = this.datacollection;\n         if (!dc) return;\n\n         let dataView = $$(ids.dataFlexView);\n\n         // initial the link page helper\n         linkPage.init({\n            view: this,\n            datacollection: dc,\n         });\n\n         // if (dc.datacollectionLink && dc.fieldLink) {\n         //    dc.bind(dataView, dc.datacollectionLink, dc.fieldLink);\n         // } else {\n         //    dc.bind(dataView);\n         // }\n         // track all flexlayout component IDs on the data collectino so we can notify them of changes\n         dc.attachFlexlayout(dataView);\n         dc.on(\"initializingData\", () => {\n            com.logic.busy();\n         });\n         dc.on(\"initializedData\", () => {\n            com.logic.ready();\n         });\n         dc.on(\"loadData\", () => {\n            com.emptyView();\n            com.renderData();\n         });\n         dc.on(\"update\", () => {\n            com.emptyView();\n            com.renderData();\n         });\n         dc.on(\"delete\", () => {\n            com.emptyView();\n            com.renderData();\n         });\n         dc.on(\"create\", () => {\n            com.emptyView();\n            com.renderData();\n         });\n\n         // this.eventClear();\n         //\n         // this.eventAdd({\n         //    emitter: dc,\n         //    eventName: \"loadData\",\n         //    listener: () => {\n         //       com.renderData();\n         //    },\n         // });\n      };\n\n      com.logic = {\n         busy: () => {\n            let Layout = $$(ids.dataFlexView);\n            let Scroll = $$(ids.scrollview);\n\n            // editor mode doesn't load this ui\n            if (!Scroll || !Layout) return;\n\n            Layout.disable();\n\n            if (!Scroll.showProgress) {\n               webix.extend(Scroll, webix.ProgressBar);\n            }\n            Scroll.showProgress({ type: \"icon\" });\n         },\n\n         ready: () => {\n            let Layout = $$(ids.dataFlexView);\n            let Scroll = $$(ids.scrollview);\n\n            // editor mode doesn't load this ui\n            if (!Scroll || !Layout) return;\n\n            Layout.enable();\n\n            if (Scroll && !Scroll.hideProgress) {\n               webix.extend(Scroll, webix.ProgressBar);\n            }\n            Scroll.hideProgress();\n         },\n\n         // we need to recursivly look backwards to toggle tabs into view when a user choosed to select a tab for edit or details views\n         toggleTab: (parentTab, wb) => {\n            // find the tab\n            var tab = wb.getTopParentView().queryView({ id: parentTab });\n            // if we didn't pass and id we may have passed a domNode\n            if (tab == null) {\n               tab = $$(parentTab);\n            }\n\n            if (tab == null) return;\n\n            // set the tabbar to to the tab\n            var tabbar = tab.getParentView().getParentView();\n\n            if (tabbar == null) return;\n\n            if (tabbar.setValue) {\n               // if we have reached the top we won't have a tab\n               tabbar.setValue(parentTab);\n            }\n\n            // find if it is in a multiview of a tab\n            var nextTab = tabbar.queryView({ view: \"scrollview\" }, \"parent\");\n            // if so then do this again\n            if (nextTab) {\n               com.toggleTab(nextTab, wb);\n            }\n         },\n\n         /**\n          * @method scroll\n          * @param pos - {\n          * \t\t\t\t\tx: {integer},\n          * \t\t\t\t\ty: {integer}\n          * \t\t\t\t}\n          */\n         scroll: async (pos) => {\n            let loadWhen = 40;\n\n            let y = pos.y;\n            let maxYPos =\n               $$(ids.dataFlexView).$height - $$(ids.scrollview).$height;\n            if (maxYPos - y <= loadWhen) {\n               if (this.loadMoreTimer) return;\n\n               com.setYPos(y);\n\n               var dc = this.datacollection;\n               if (!dc) return;\n\n               if ($$(ids.dataFlexView).getChildViews().length >= dc.totalCount)\n                  return;\n\n               // loading cursor\n               com.logic.busy();\n\n               await dc.loadData(\n                  $$(ids.dataFlexView).getChildViews().length || 0\n               );\n\n               this.loadMoreTimer = setTimeout(() => {\n                  this.loadMoreTimer = null;\n               }, 1100);\n            }\n         },\n      };\n\n      com.onShow = () => {\n         var dc = this.datacollection;\n         if (!dc) return;\n\n         if (dc.dataStatus == dc.dataStatusFlag.notInitial) {\n            // load data when a widget is showing\n            dc.loadData();\n         } else if (dc.dataStatus == dc.dataStatusFlag.initialized) {\n            com.renderData();\n         }\n      };\n\n      com.setYPos = (pos) => {\n         this.yPosition = pos;\n      };\n\n      com.getYPos = () => {\n         return this.yPosition || 0;\n      };\n\n      com.emptyView = () => {\n         let flexlayout = {\n            id: ids.dataFlexView,\n            view: \"flexlayout\",\n            type: \"clean\",\n            padding: 10,\n            css: { background: \"#ebedf0 !important\" },\n            cols: [],\n         };\n         webix.ui(flexlayout, $$(ids.scrollview), $$(ids.dataFlexView));\n      };\n\n      com.renderData = () => {\n         let editPage = this.settings.editPage;\n         let detailsPage = this.settings.detailsPage;\n         var editTab = this.settings.editTab;\n         var detailsTab = this.settings.detailsTab;\n         var records = [];\n\n         var dc = this.datacollection;\n         if (!dc) {\n            com.logic.ready();\n            return;\n         }\n\n         let Layout = $$(ids.dataFlexView) || $$(ids.component);\n\n         if (!Layout || isNaN(Layout.$width)) {\n            com.logic.ready();\n            return;\n         }\n\n         let recordWidth = Math.floor(\n            (Layout.$width - 20 - parseInt(this.settings.xCount) * 20) /\n               parseInt(this.settings.xCount)\n         );\n\n         var rows = dc.getData();\n\n         // if this amount of data is already parsed just skip the rest.\n         if (Layout.currentLength == rows.length) {\n            com.logic.ready();\n            return;\n         }\n\n         Layout.currentLength = rows.length;\n\n         // store total of rows\n         this._startPos = Layout.getChildViews\n            ? Layout.getChildViews().length\n            : 0;\n\n         let stopPos = rows.length;\n\n         if (this._startPos == 0) {\n            stopPos = rows.length;\n         } else if (rows.length - this._startPos > 20) {\n            stopPos = this._startPos + 20;\n         }\n\n         if (dc.settings.loadAll) {\n            stopPos = rows.length;\n         }\n\n         var dataGrid = [];\n         for (var i = this._startPos; i < stopPos; i++) {\n            // get the components configuation\n            let detailCom = App.AB.cloneDeep(super.component(App, rows[i].id));\n\n            // adjust the UI to make sure it will look like a \"card\"\n            detailCom.ui.type = \"space\";\n            detailCom.ui.css = \"ab-detail-view\";\n            if (detailsPage || editPage) {\n               detailCom.ui.css += \" ab-detail-hover ab-record-\" + rows[i].id;\n            }\n            if (detailsPage) {\n               detailCom.ui.css += \" ab-detail-page\";\n            }\n            if (editPage) {\n               detailCom.ui.css += \" ab-edit-page\";\n            }\n            detailCom.ui.paddingX = 10;\n            detailCom.ui.paddingY = 6;\n            detailCom.ui.minWidth = recordWidth - 10;\n            detailCom.ui.maxWidth = recordWidth;\n\n            if (Layout.addView) {\n               Layout.addView(detailCom.ui, -1);\n               detailCom.init(null, 2); // 2 - Always allow access to components inside data view\n               setTimeout(detailCom.logic.displayData(rows[i]), 0);\n            } else {\n               records.push(detailCom.ui);\n            }\n         }\n\n         if (records.length) {\n            var flexlayout = {\n               id: ids.dataFlexView,\n               view: \"flexlayout\",\n               paddingX: 15,\n               paddingY: 19,\n               type: \"space\",\n               cols: records,\n            };\n            webix.ui(flexlayout, $$(ids.scrollview), $$(ids.dataFlexView));\n\n            for (let i = this._startPos; i < stopPos; i++) {\n               let detailCom = App.AB.cloneDeep(\n                  super.component(App, rows[i].id)\n               );\n               detailCom.init(null, 2); // 2 - Always allow access to components inside data view\n               setTimeout(detailCom.logic.displayData(rows[i]), 0);\n            }\n         }\n\n         if ($$(ids.scrollview)) {\n            $$(ids.scrollview).scrollTo(0, com.getYPos());\n\n            if (detailsPage || editPage) {\n               Layout.$view.onclick = (e) => {\n                  var clicked = false;\n                  if (editPage) {\n                     for (let p of e.path) {\n                        if (\n                           p.className &&\n                           p.className.indexOf(\"webix_accordionitem_header\") >\n                              -1\n                        ) {\n                           clicked = true;\n                           p.parentNode.parentNode.classList.forEach((c) => {\n                              if (c.indexOf(\"ab-record-\") > -1) {\n                                 // var record = parseInt(c.replace(\"ab-record-\", \"\"));\n                                 var record = c.replace(\"ab-record-\", \"\");\n                                 linkPage.changePage(editPage, record);\n                                 // com.logic.toggleTab(detailsTab, ids.component);\n                              }\n                           });\n                           break;\n                        }\n                     }\n                  }\n                  if (detailsPage && !clicked) {\n                     for (let p of e.path) {\n                        if (\n                           p.className &&\n                           p.className.indexOf(\"webix_accordionitem\") > -1\n                        ) {\n                           p.parentNode.parentNode.classList.forEach((c) => {\n                              if (c.indexOf(\"ab-record-\") > -1) {\n                                 // var record = parseInt(c.replace(\"ab-record-\", \"\"));\n                                 var record = c.replace(\"ab-record-\", \"\");\n                                 linkPage.changePage(detailsPage, record);\n                                 // com.logic.toggleTab(detailsTab, ids.component);\n                              }\n                           });\n                           break;\n                        }\n                     }\n                  }\n               };\n            }\n         }\n\n         //Add data-cy attributes for cypress tests\n         const name = this.name.replace(\".dataview\", \"\");\n         Layout.$view.setAttribute(\n            \"data-cy\",\n            `dataview container ${name} ${this.id}`\n         );\n\n         Layout.getChildViews().forEach((child, i) => {\n            const uuid = rows[i + this._startPos][\"uuid\"];\n            const view = child.$view;\n            view\n               .querySelector(\".webix_accordionitem_body\")\n               .setAttribute(\n                  \"data-cy\",\n                  `dataview item ${name} ${uuid} ${this.id}`\n               );\n            view\n               .querySelector(\".webix_accordionitem_button\")\n               .setAttribute(\n                  \"data-cy\",\n                  `dataview item button ${name} ${uuid} ${this.id}`\n               );\n         });\n\n         com.logic.ready();\n      };\n\n      return com;\n   }\n\n   get linkPageHelper() {\n      if (this.__linkPageHelper == null)\n         this.__linkPageHelper = new ABViewPropertyLinkPage();\n\n      return this.__linkPageHelper;\n   }\n};\n","const ABViewDetailCore = require(\"../../core/views/ABViewDetailCore\");\nconst ABViewDetailComponent = require(\"./ABViewDetailComponent\");\nconst ABObjectQuery = require(\"../ABObjectQuery\");\n\nconst ABViewDetailPropertyComponentDefaults = ABViewDetailCore.defaultValues();\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABViewDetail extends ABViewDetailCore {\n   // constructor(values, application, parent, defaultValues) {\n   //    super(values, application, parent, defaultValues);\n   // }\n\n   /**\n    * @method editorComponent\n    * return the Editor for this UI component.\n    * the editor should display either a \"block\" view or \"preview\" of\n    * the current layout of the view.\n    * @param {string} mode what mode are we in ['block', 'preview']\n    * @return {Component}\n    */\n   editorComponent(App, mode) {\n      var comp = super.editorComponent(App, mode);\n\n      // Define height of cell\n      comp.ui.rows[0].cellHeight = 75;\n\n      return comp;\n   }\n\n   //\n   // Property Editor\n   //\n\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\n      var commonUI = super.propertyEditorDefaultElements(\n         App,\n         ids,\n         _logic,\n         ObjectDefaults\n      );\n\n      // _logic functions\n\n      _logic.selectSource = async (dcId, oldDcId) => {\n         // TODO : warning message\n\n         _logic.busy();\n\n         let currView = _logic.currentEditObject();\n         currView.settings.dataviewID = dcId;\n\n         // clear sub views\n         currView._views = [];\n\n         this.propertyUpdateFieldOptions(ids, currView, dcId);\n\n         // add all fields to editor by default\n         if (currView._views.length > 0) return Promise.resolve();\n\n         let fieldSaves = [];\n         let fields = $$(ids.fields).find({});\n         fields.reverse();\n         fields.forEach((f, index) => {\n            if (!f.selected) {\n               let yPosition = fields.length - index - 1;\n\n               var fieldView = currView.addFieldToView(f, yPosition, ids, App);\n               fieldSaves.push(fieldView.save());\n\n               // update item to UI list\n               f.selected = 1;\n               $$(ids.fields).updateItem(f.id, f);\n            }\n         });\n\n         await Promise.all(fieldSaves);\n\n         // Saving\n         await currView.save();\n\n         currView.emit(\"properties.updated\", currView);\n\n         _logic.ready();\n      };\n\n      _logic.listTemplate = (field, common) => {\n         return `${common.markCheckbox(field)} ${field.label}`;\n      };\n\n      _logic.check = async (e, fieldId) => {\n         var currView = _logic.currentEditObject();\n\n         // update UI list\n         var item = $$(ids.fields).getItem(fieldId);\n         item.selected = item.selected ? 0 : 1;\n         $$(ids.fields).updateItem(fieldId, item);\n\n         // add a field to the form\n         if (item.selected) {\n            await currView.addFieldToView(item, null, ids, App).save();\n\n            // Refresh UI\n            currView.emit(\"properties.updated\", currView);\n\n            // .addFieldToView() does not auto update the currView:\n            await currView.save();\n         }\n         // remove field in the form\n         else {\n            let fieldView = currView.views(\n               (c) => c.settings.fieldId == fieldId\n            )[0];\n            if (fieldView) {\n               // let remainingViews = currView.views(c => c.settings.fieldId != fieldId);\n               // currView._views = remainingViews;\n\n               await fieldView.destroy();\n\n               // Refresh UI\n               currView.emit(\"properties.updated\", currView);\n            }\n         }\n\n         // trigger a save()\n         // this.propertyEditorSave(ids, currView);\n      };\n\n      return commonUI.concat([\n         {\n            name: \"datacollection\",\n            view: \"richselect\",\n            label: L(\"Data Source\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n            skipAutoSave: true,\n            on: {\n               onChange: (dcId, oldDcId) => _logic.selectSource(dcId, oldDcId),\n            },\n         },\n         {\n            name: \"fields\",\n            view: \"list\",\n            select: false,\n            minHeight: 200,\n            template: _logic.listTemplate,\n            type: {\n               markCheckbox: function (item) {\n                  return (\n                     \"<span class='check webix_icon fa fa-\" +\n                     (item.selected ? \"check-\" : \"\") +\n                     \"square-o'></span>\"\n                  );\n               },\n            },\n            onClick: {\n               check: (e, fieldId) => _logic.check(e, fieldId),\n            },\n         },\n         {\n            name: \"showLabel\",\n            view: \"checkbox\",\n            label: L(\"Display Label\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n         },\n         {\n            name: \"labelPosition\",\n            view: \"richselect\",\n            label: L(\"Label Position\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n            options: [\n               {\n                  id: \"left\",\n                  value: L(\"Left\"),\n               },\n               {\n                  id: \"top\",\n                  value: L(\"Top\"),\n               },\n            ],\n         },\n         {\n            name: \"labelWidth\",\n            view: \"counter\",\n            label: L(\"Label Width\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n         },\n         {\n            view: \"counter\",\n            name: \"height\",\n            label: L(\"Height:\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n         },\n      ]);\n   }\n\n   static propertyEditorPopulate(App, ids, view) {\n      super.propertyEditorPopulate(App, ids, view);\n\n      var SourceSelector = $$(ids.datacollection);\n      var datacollectionId = view.settings.dataviewID || null;\n\n      // Pull data views to options\n      var dcOptions = view.propertyDatacollections();\n      SourceSelector.define(\"options\", dcOptions);\n      SourceSelector.define(\"value\", datacollectionId);\n      SourceSelector.refresh();\n\n      this.propertyUpdateFieldOptions(ids, view, datacollectionId);\n\n      $$(ids.showLabel).setValue(\n         view.settings.showLabel != null\n            ? view.settings.showLabel\n            : ABViewDetailPropertyComponentDefaults.showLabel\n      );\n      $$(ids.labelPosition).setValue(\n         view.settings.labelPosition ||\n            ABViewDetailPropertyComponentDefaults.labelPosition\n      );\n      $$(ids.labelWidth).setValue(\n         parseInt(view.settings.labelWidth) ||\n            ABViewDetailPropertyComponentDefaults.labelWidth\n      );\n      $$(ids.height).setValue(\n         view.settings.height >= 0\n            ? view.settings.height\n            : ABViewDetailPropertyComponentDefaults.height\n      );\n\n      // update properties when a field component is deleted\n      view.views().forEach((v) => {\n         if (v instanceof ABViewDetailComponent)\n            v.once(\"destroyed\", () =>\n               this.propertyEditorPopulate(App, ids, view)\n            );\n      });\n   }\n\n   static propertyEditorValues(ids, view) {\n      super.propertyEditorValues(ids, view);\n\n      view.settings.dataviewID = $$(ids.datacollection).getValue();\n      view.settings.showLabel = $$(ids.showLabel).getValue();\n      view.settings.labelPosition = $$(ids.labelPosition).getValue();\n      view.settings.labelWidth = $$(ids.labelWidth).getValue();\n      view.settings.height = $$(ids.height).getValue();\n   }\n\n   static propertyUpdateFieldOptions(ids, view, dcId) {\n      var datacollection = view.AB.datacollectionByID(dcId);\n      var object = datacollection ? datacollection.datasource : null;\n\n      // Pull field list\n      var fieldOptions = [];\n      if (object != null) {\n         fieldOptions = object.fields().map((f) => {\n            f.selected =\n               view.views((com) => {\n                  return f.id == com.settings.fieldId;\n               }).length > 0;\n\n            return f;\n         });\n      }\n\n      $$(ids.fields).clearAll();\n      $$(ids.fields).parse(fieldOptions);\n   }\n\n   /**\n    * @method component()\n    * return a UI component based upon this view.\n    * @param {obj } App\n    * @param {string} idPrefix - define to support in 'Datacollection' widget\n    *\n    * @return {obj } UI component\n    */\n   component(App, idPrefix) {\n      // get webix.dashboard\n      var container = super.component(App, idPrefix);\n\n      var _ui = {\n         type: \"form\",\n         borderless: true,\n         // height: this.settings.height || ABViewDetailPropertyComponentDefaults.height,\n         rows: [\n            {\n               // view: \"scrollview\",\n               body: container.ui,\n            },\n         ],\n      };\n\n      // make sure each of our child views get .init() called\n      var _init = (options, parentAccessLevel) => {\n         // populate .views to webix.dashboard\n         container.init(options, parentAccessLevel);\n      };\n\n      var _logic = {\n         displayData: (rowData) => {\n            rowData = rowData || {};\n\n            let views = this.views() || [];\n            views = views.sort((a, b) => {\n               if (!a || !b || !a.field || !b.field) return 0;\n\n               // NOTE: sort order of calculated fields.\n               // FORMULA field type should be calculated before CALCULATE field type\n               if (a.field.key == \"formula\" && b.field.key == \"calculate\") {\n                  return -1;\n               } else if (\n                  a.field.key == \"calculate\" &&\n                  b.field.key == \"formula\"\n               ) {\n                  return 1;\n               } else {\n                  return 0;\n               }\n            });\n\n            views.forEach((f) => {\n               if (f.field) {\n                  var field = f.field();\n                  var val;\n\n                  if (!field) return;\n\n                  if (!rowData) return;\n\n                  // get value of relation when field is a connect field\n                  switch (field.key) {\n                     case \"connectObject\":\n                        val = field.pullRelationValues(rowData);\n                        break;\n                     case \"list\":\n                        val = rowData[field.columnName];\n                        if (!val) {\n                           val = \"\";\n                           break;\n                        }\n\n                        if (field.settings.isMultiple == 0) {\n                           let myVal = \"\";\n\n                           field.settings.options.forEach(function (options) {\n                              if (options.id == val) myVal = options.text;\n                           });\n\n                           if (field.settings.hasColors) {\n                              let myHex = \"#66666\";\n                              let hasCustomColor = \"\";\n                              field.settings.options.forEach(function (h) {\n                                 if (h.text == myVal) {\n                                    myHex = h.hex;\n                                    hasCustomColor = \"hascustomcolor\";\n                                 }\n                              });\n                              myVal = `<span class=\"webix_multicombo_value ${hasCustomColor}\" style=\"background-color: ${myHex} !important;\"><span>${myVal}</span></span>`;\n                           }\n\n                           val = myVal;\n                        } else {\n                           let items = [];\n                           let myVal = \"\";\n                           val.forEach((value) => {\n                              var hasCustomColor = \"\";\n                              var optionHex = \"\";\n                              if (field.settings.hasColors && value.hex) {\n                                 hasCustomColor = \"hascustomcolor\";\n                                 optionHex = `background: ${value.hex};`;\n                              }\n                              field.settings.options.forEach(function (\n                                 options\n                              ) {\n                                 if (options.id == value.id)\n                                    myVal = options.text;\n                              });\n                              items.push(\n                                 `<span class=\"webix_multicombo_value ${hasCustomColor}\" style=\"${optionHex}\" optvalue=\"${value.id}\"><span>${myVal}</span></span>`\n                              );\n                           });\n                           val = items.join(\"\");\n                        }\n                        break;\n                     case \"user\":\n                        val = field.pullRelationValues(rowData);\n                        break;\n                     case \"file\":\n                        val = rowData[field.columnName];\n                        break;\n                     case \"formula\":\n                        if (rowData) {\n                           let dv = this.datacollection;\n                           let ds = dv ? dv.datasource : null;\n                           let needRecalculate =\n                              !ds || ds instanceof ABObjectQuery ? false : true;\n\n                           val = field.format(rowData, needRecalculate);\n                        }\n                        break;\n                     default:\n                        val = field.format(rowData);\n                     // break;\n                  }\n               }\n\n               // set value to each components\n               var vComponent = f.component(App, idPrefix);\n\n               // if (vComponent.onShow) vComponent.onShow();\n\n               if (vComponent.logic && vComponent.logic.setValue) {\n                  vComponent.logic.setValue(val);\n               }\n\n               if (vComponent.logic && vComponent.logic.displayText) {\n                  vComponent.logic.displayText(rowData);\n               }\n            });\n         },\n      };\n\n      var _onShow = () => {\n         container.onShow();\n         try {\n            const dataCy = `Detail ${this.name.split(\".\")[0]} ${this.id}`;\n            $$(container.ui.id).$view.setAttribute(\"data-cy\", dataCy);\n         } catch (e) {\n            console.warn(\"Problem setting data-cy\", e);\n         }\n\n         // listen DC events\n         let dv = this.datacollection;\n         if (dv) {\n            let currData = dv.getCursor();\n            if (currData) {\n               _logic.displayData(currData);\n            }\n\n            this.eventAdd({\n               emitter: dv,\n               eventName: \"changeCursor\",\n               listener: (newRow) => {\n                  _logic.displayData(newRow);\n               },\n            });\n\n            this.eventAdd({\n               emitter: dv,\n               eventName: \"create\",\n               listener: (createdRow) => {\n                  let currCursor = dv.getCursor();\n                  if (currCursor && currCursor.id == createdRow.id)\n                     _logic.displayData(createdRow);\n               },\n            });\n\n            this.eventAdd({\n               emitter: dv,\n               eventName: \"update\",\n               listener: (updatedRow) => {\n                  let currCursor = dv.getCursor();\n                  if (currCursor && currCursor.id == updatedRow.id)\n                     _logic.displayData(updatedRow);\n               },\n            });\n         }\n      };\n\n      return {\n         ui: _ui,\n         init: _init,\n         logic: _logic,\n\n         onShow: _onShow,\n      };\n   }\n\n   clearFieldComponents() {\n      let tasks = [];\n\n      this.views().forEach((comp) => {\n         tasks.push(() => comp.destroy());\n      });\n\n      return tasks.reduce((promiseChain, currTask) => {\n         return promiseChain.then(currTask);\n      }, Promise.resolve([]));\n   }\n\n   addFieldToView(field, yPosition, ids, App) {\n      if (field == null) return;\n\n      let newView = field.detailComponent().newInstance(this.application, this);\n      if (newView == null) return;\n\n      // set settings to component\n      newView.settings = newView.settings || {};\n      newView.settings.fieldId = field.id;\n      newView.settings.labelWidth =\n         this.settings.labelWidth ||\n         ABViewDetailPropertyComponentDefaults.labelWidth;\n\n      // keep alias to support Query that contains alias name\n      // [alias].[columnName]\n      newView.settings.alias = field.alias;\n\n      // TODO : Default settings\n\n      newView.position.y = yPosition;\n\n      // add a new component\n      this._views.push(newView);\n\n      // update properties when a sub-view is destroyed\n      newView.once(\"destroyed\", () => {\n         ABViewDetail.propertyEditorPopulate(App, ids, this);\n      });\n\n      return newView;\n   }\n};\n","const ABViewDetailCheckboxCore = require(\"../../core/views/ABViewDetailCheckboxCore\");\n\nmodule.exports = class ABViewDetailCheckbox extends ABViewDetailCheckboxCore {\n   /**\n    * @param {obj} values  key=>value hash of ABView values\n    * @param {ABApplication} application the application object this view is under\n    * @param {ABView} parent the ABView this view is a child of. (can be null)\n    */\n   // constructor(values, application, parent, defaultValues) {\n   //    super(values, application, parent, defaultValues);\n   // }\n\n   //\n   //\tEditor Related\n   //\n\n   /**\n    * @method editorComponent\n    * return the Editor for this UI component.\n    * the editor should display either a \"block\" view or \"preview\" of\n    * the current layout of the view.\n    * @param {string} mode what mode are we in ['block', 'preview']\n    * @return {Component}\n    */\n   editorComponent(App, mode) {\n      var idBase = \"ABViewDetailCheckboxEditorComponent\";\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n      };\n\n      var checkboxElem = this.component(App).ui;\n      checkboxElem.id = ids.component;\n\n      var _ui = {\n         rows: [checkboxElem, {}],\n      };\n\n      var _init = (options) => {};\n\n      var _logic = {};\n\n      return {\n         ui: _ui,\n         init: _init,\n         logic: _logic,\n      };\n   }\n\n   //\n   // Property Editor\n   //\n\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\n      var commonUI = super.propertyEditorDefaultElements(\n         App,\n         ids,\n         _logic,\n         ObjectDefaults\n      );\n\n      // in addition to the common .label  values, we\n      // ask for:\n      return commonUI.concat([]);\n   }\n\n   static propertyEditorPopulate(App, ids, view) {\n      super.propertyEditorPopulate(App, ids, view);\n   }\n\n   static propertyEditorValues(ids, view) {\n      super.propertyEditorValues(ids, view);\n   }\n\n   /**\n    * @component()\n    * return a UI component based upon this view.\n    * @param {obj} App\n    * @param {string} idPrefix\n    *\n    * @return {obj} UI component\n    */\n   component(App, idPrefix) {\n      var component = super.component(App);\n      var field = this.field();\n\n      var idBase = \"ABViewDetailCheckbox_\" + (idPrefix || \"\") + this.id;\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n         detail: this.parentDetailComponent()?.id || this.parent.id,\n      };\n\n      component.ui.id = ids.component;\n\n      component.ui.on = {\n         //Add data-cy attribute for Cypress Testing\n         onAfterRender: () => {\n            const dataCy = `detail checkbox ${field?.columnName} ${field?.id} ${ids.detail}`;\n            $$(ids.component)?.$view.setAttribute(\"data-cy\", dataCy);\n         },\n      };\n\n      return {\n         ui: component.ui,\n         init: component.init,\n\n         logic: {\n            setValue: (val) => {\n               var checkbox = \"\";\n\n               // Check\n               if (val && JSON.parse(val))\n                  checkbox =\n                     '<span class=\"check webix_icon fa fa-check-square-o\"></span>';\n               // Uncheck\n               else\n                  checkbox =\n                     '<span class=\"check webix_icon fa fa-square-o\"></span>';\n\n               component.logic.setValue(ids.component, checkbox);\n            },\n         },\n      };\n   }\n};\n","const ABViewDetailComponentCore = require(\"../../core/views/ABViewDetailComponentCore\");\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABViewDetailComponent extends ABViewDetailComponentCore {\n   // constructor(values, application, parent, defaultValues) {\n   //    super(values, application, parent, defaultValues);\n   // }\n\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\n      var commonUI = super.propertyEditorDefaultElements(\n         App,\n         ids,\n         _logic,\n         ObjectDefaults\n      );\n\n      return commonUI.concat([\n         {\n            name: \"fieldLabel\",\n            view: \"text\",\n            disabled: true,\n            label: L(\"Field\"),\n         },\n      ]);\n   }\n\n   static propertyEditorPopulate(App, ids, view) {\n      super.propertyEditorPopulate(App, ids, view);\n\n      var field = view.field();\n\n      if (field) {\n         $$(ids.fieldLabel).setValue(field.label);\n      }\n   }\n\n   /**\n    * @component()\n    * return a UI component based upon this view.\n    * @param {obj} App\n    * @param {string} idPrefix\n    *\n    * @return {obj} UI component\n    */\n   component(App, idPrefix) {\n      var idBase = \"ABViewDetailComponent_\" + (idPrefix || \"\") + this.id;\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n      };\n      // setup 'label' of the element\n      var detailView = this.detailComponent(),\n         field = this.field() || {},\n         label = \"\";\n\n      var settings = {};\n      if (detailView) settings = detailView.settings;\n\n      var isUsers = false;\n      if (field && field.key == \"user\") isUsers = true;\n\n      var templateLabel = \"\";\n      if (settings.showLabel == true) {\n         if (settings.labelPosition == \"top\")\n            templateLabel =\n               \"<label style='display:block; text-align: left;' class='webix_inp_top_label'>#label#</label>#display#\";\n         else\n            templateLabel =\n               \"<label style='width: #width#px; display: inline-block; float: left; line-height: 32px;'>#label#</label><div class='ab-detail-component-holder' style='margin-left: #width#px;'>#display#</div>\";\n      }\n      // no label\n      else {\n         templateLabel = \"#display#\";\n      }\n\n      var template = templateLabel\n         .replace(/#width#/g, settings.labelWidth)\n         .replace(/#label#/g, field ? field.label : \"\");\n\n      var height = 38;\n      if (settings.labelPosition == \"top\") height = height * 2;\n\n      if (\n         field &&\n         field.settings &&\n         typeof field.settings.useHeight != \"undefined\" &&\n         field.settings.useHeight == 1\n      ) {\n         height = parseInt(field.settings.imageHeight) || height;\n      }\n\n      var _ui = {\n         id: ids.component,\n         view: \"template\",\n         borderless: true,\n         height: height,\n         isUsers: isUsers,\n         template: template,\n         data: { display: \"\" }, // show empty data in template\n      };\n\n      // make sure each of our child views get .init() called\n      var _init = (options) => {};\n\n      var _logic = {\n         setValue: (componentId, val) => {\n            if ($$(componentId)) {\n               if (field.key == \"string\" || field.key == \"LongText\") {\n                  val = val.replace(/[<]/g, \"&lt;\");\n               } else if (field.key == \"user\") {\n                  val = val.text ?? val.value ?? val.username ?? val;\n               }\n               $$(componentId).setValues({ display: val });\n            }\n         },\n      };\n\n      return {\n         ui: _ui,\n         init: _init,\n         logic: _logic,\n      };\n   }\n};\n","const ABViewDetailConnectCore = require(\"../../core/views/ABViewDetailConnectCore\");\nconst ABViewPropertyAddPage = require(\"./viewProperties/ABViewPropertyAddPage\")\n   .default;\n\nmodule.exports = class ABViewDetailConnect extends ABViewDetailConnectCore {\n   ///\n   /// Instance Methods\n   ///\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      super.fromValues(values);\n\n      this.addPageTool.fromSettings(this.settings);\n   }\n\n   //\n   // Property Editor\n   //\n\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\n      let commonUI = super.propertyEditorDefaultElements(\n         App,\n         ids,\n         _logic,\n         ObjectDefaults\n      );\n\n      let idBase = \"ABViewDetailConnectPropertyEditor\";\n\n      if (this.addPageProperty == null) {\n         this.addPageProperty = ABViewPropertyAddPage.propertyComponent(\n            App,\n            idBase\n         );\n         this.addPageProperty.init({\n            onSave: () => {\n               let currView = _logic.currentEditObject();\n               if (!currView) return;\n\n               // refresh settings\n               this.propertyEditorValues(ids, currView);\n\n               // trigger a save()\n               this.propertyEditorSave(ids, currView);\n            },\n         });\n      }\n\n      // in addition to the common .label  values, we\n      // ask for:\n      return commonUI.concat([this.addPageProperty.ui]);\n   }\n\n   static propertyEditorPopulate(App, ids, view) {\n      super.propertyEditorPopulate(App, ids, view);\n\n      this.addPageProperty.setSettings(view, view.settings);\n   }\n\n   static propertyEditorValues(ids, view) {\n      super.propertyEditorValues(ids, view);\n\n      view.settings = this.addPageProperty.getSettings(view);\n\n      // refresh settings of app page tool\n      view.addPageTool.fromSettings(view.settings);\n   }\n\n   /**\n    * @method component()\n    * return a UI component based upon this view.\n    * @param {obj} App\n    * @param {string} idPrefix\n    *\n    * @return {obj} UI component\n    */\n   component(App, idPrefix) {\n      let idBase = \"ABViewDetailConnect_\" + (idPrefix || \"\") + this.id;\n      let baseComp = super.component(App, idBase);\n      var ids = {\n         detail: this.parentDetailComponent()?.id || this.parent.id,\n      };\n\n      let addPageComponent = this.addPageTool.component(App, idBase);\n\n      let _init = (options) => {\n         baseComp.init(options);\n\n         addPageComponent.applicationLoad(this.application);\n         addPageComponent.init({\n            // TODO : callbacks\n         });\n      };\n\n      baseComp.ui.on = {\n         //Add data-cy attribute for Cypress Testing\n         onAfterRender: () => {\n            let field = this.field((fld) => {\n               return fld.id == this.settings.fieldId;\n            });\n            // some form fields are remaining in the UI even after removed from data structure\n            if (field?.columnName) {\n               let columnName = field.columnName;\n               const dataCy = `detail connected ${columnName} ${this.settings.fieldId} ${ids.detail}`;\n               $$(baseComp.ui.id)?.$view.setAttribute(\"data-cy\", dataCy);\n            }\n         },\n      };\n\n      // Click to open new data form\n      // addPageComponent.ui.onClick = addPageComponent.ui.onClick || {};\n      let ui = {};\n      if (addPageComponent.ui) {\n         addPageComponent.ui.click = (e, id, trg) => {\n            // e.stopPropagation();\n\n            // TODO: busy cursor\n\n            let dc;\n            let detail = this.detailComponent();\n            if (detail) dc = detail.datacollection;\n\n            setTimeout(() => {\n               addPageComponent.onClick(dc);\n            }, 50);\n\n            return false;\n         };\n\n         ui = {\n            rows: [\n               {\n                  cols: [baseComp.ui, addPageComponent.ui],\n               },\n            ],\n         };\n      } else {\n         ui = baseComp.ui;\n      }\n\n      return {\n         ui: ui,\n\n         init: _init,\n         logic: {\n            setValue: (val) => {\n               let vals = [];\n               if (Array.isArray(val)) {\n                  val.forEach((record) => {\n                     vals.push(\n                        `<span class=\"webix_multicombo_value\">${record.text}</span>`\n                     );\n                  });\n               } else {\n                  vals.push(\n                     `<span class=\"webix_multicombo_value\">${val.text}</span>`\n                  );\n               }\n               baseComp.logic.setValue(baseComp.ui.id, vals.join(\"\"));\n            },\n         },\n      };\n   }\n\n   get addPageTool() {\n      if (this.__addPageTool == null)\n         this.__addPageTool = new ABViewPropertyAddPage();\n\n      return this.__addPageTool;\n   }\n};\n","const ABViewDetailCustomCore = require(\"../../core/views/ABViewDetailCustomCore\");\n\nmodule.exports = class ABViewDetailCustom extends ABViewDetailCustomCore {\n   /**\n    * @param {obj} values  key=>value hash of ABView values\n    * @param {ABApplication} application the application object this view is under\n    * @param {ABView} parent the ABView this view is a child of. (can be null)\n    */\n   // constructor(values, application, parent, defaultValues) {\n   //    super(values, application, parent, defaultValues);\n   // }\n\n   //\n   //\tEditor Related\n   //\n\n   /**\n    * @method editorComponent\n    * return the Editor for this UI component.\n    * the editor should display either a \"block\" view or \"preview\" of\n    * the current layout of the view.\n    * @param {string} mode what mode are we in ['block', 'preview']\n    * @return {Component}\n    */\n   editorComponent(App, mode) {\n      var idBase = \"ABViewDetailCustomEditorComponent\";\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n      };\n\n      var component = this.component(App);\n\n      var textElem = component.ui;\n      textElem.id = ids.component;\n\n      var _ui = {\n         rows: [textElem, {}],\n      };\n\n      var _init = component.init;\n      var _logic = component.logic;\n\n      var _onShow = component.onShow;\n\n      return {\n         ui: _ui,\n         init: _init,\n         logic: _logic,\n\n         onShow: _onShow,\n      };\n   }\n\n   //\n   // Property Editor\n   //\n\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\n      var commonUI = super.propertyEditorDefaultElements(\n         App,\n         ids,\n         _logic,\n         ObjectDefaults\n      );\n\n      // in addition to the common .label  values, we\n      // ask for:\n      return commonUI.concat([]);\n   }\n\n   static propertyEditorPopulate(App, ids, view) {\n      super.propertyEditorPopulate(App, ids, view);\n   }\n\n   static propertyEditorValues(ids, view) {\n      super.propertyEditorValues(ids, view);\n   }\n\n   /**\n    * @component()\n    * return a UI component based upon this view.\n    * @param {obj} App\n    * @param {string} idPrefix\n    *\n    * @return {obj} UI component\n    */\n   component(App, idPrefix) {\n      var component = super.component(App);\n      var field = this.field();\n      var detailView = this.detailComponent();\n\n      var idBase = \"ABViewDetailCustom_\" + (idPrefix || \"\") + this.id;\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n         detail: this.parentDetailComponent()?.id || this.parent.id,\n      };\n\n      var templateLabel = \"\";\n      if (detailView.settings.showLabel == true) {\n         if (detailView.settings.labelPosition == \"top\")\n            templateLabel =\n               \"<label style='display:block; text-align: left;' class='webix_inp_top_label'>#label#</label>\";\n         else\n            templateLabel =\n               \"<label style='width: #width#px; display: inline-block; float: left; line-height: 32px;'>#label#</label>\";\n      }\n\n      var template = (templateLabel + \"#result#\")\n         // var template = (templateLabel)\n         .replace(/#width#/g, detailView.settings.labelWidth)\n         .replace(/#label#/g, field ? field.label : \"\")\n         .replace(/#result#/g, field ? field.columnHeader().template({}) : \"\");\n\n      component.ui.id = ids.component;\n      component.ui.view = \"template\";\n      component.ui.minHeight = 45;\n      component.ui.height = 60;\n      component.ui.borderless = true;\n      component.ui.template = template;\n\n      component.ui.on = {\n         //Add data-cy attribute for Cypress Testing\n         onAfterRender: () => {\n            const dataCy = `detail custom ${field?.columnName} ${field?.id} ${ids.detail}`;\n            $$(ids.component)?.$view.setAttribute(\"data-cy\", dataCy);\n         },\n      };\n\n      // make sure each of our child views get .init() called\n      component.init = (options) => {};\n\n      component.onShow = () => {\n         if (!field) return;\n\n         var elem = $$(ids.component);\n         if (!elem) return;\n\n         var detailCom = this.detailComponent(),\n            rowData = detailCom.datacollection.getCursor() || {},\n            node = elem.$view;\n\n         field.customDisplay(rowData, App, node, {\n            editable: false,\n         });\n      };\n\n      component.logic.setValue = (val) => {\n         if (!field) return;\n\n         var elem = $$(ids.component);\n         if (!elem) return;\n\n         var rowData = {};\n         rowData[field.columnName] = val;\n\n         field.setValue(elem, rowData);\n      };\n\n      return component;\n   }\n};\n","const ABViewDetailImageCore = require(\"../../core/views/ABViewDetailImageCore\");\n\nconst ABViewDetailImagePropertyComponentDefaults = ABViewDetailImageCore.defaultValues();\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABViewDetailImage extends ABViewDetailImageCore {\n   /**\n    * @param {obj} values  key=>value hash of ABView values\n    * @param {ABApplication} application the application object this view is under\n    * @param {ABView} parent the ABView this view is a child of. (can be null)\n    */\n   // constructor(values, application, parent, defaultValues) {\n   //    super(values, application, parent, defaultValues);\n   // }\n\n   //\n   //\tEditor Related\n   //\n\n   /**\n    * @method editorComponent\n    * return the Editor for this UI component.\n    * the editor should display either a \"block\" view or \"preview\" of\n    * the current layout of the view.\n    * @param {string} mode what mode are we in ['block', 'preview']\n    * @return {Component}\n    */\n   editorComponent(App, mode) {\n      var idBase = \"ABViewDetailImageEditorComponent\";\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n      };\n\n      var elem = this.component(App).ui;\n      elem.id = ids.component;\n\n      var _ui = {\n         rows: [elem, {}],\n      };\n\n      var _init = (options) => {};\n\n      var _logic = {};\n\n      return {\n         ui: _ui,\n         init: _init,\n         logic: _logic,\n      };\n   }\n\n   //\n   // Property Editor\n   //\n\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\n      var commonUI = super.propertyEditorDefaultElements(\n         App,\n         ids,\n         _logic,\n         ObjectDefaults\n      );\n\n      // in addition to the common .label  values, we\n      // ask for:\n      return commonUI.concat([\n         {\n            view: \"counter\",\n            name: \"height\",\n            label: L(\"Height:\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n         },\n         {\n            view: \"counter\",\n            name: \"width\",\n            label: L(\"Width:\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n         },\n      ]);\n   }\n\n   static propertyEditorPopulate(App, ids, view) {\n      super.propertyEditorPopulate(App, ids, view);\n\n      $$(ids.height).setValue(\n         view.settings.height ||\n            ABViewDetailImagePropertyComponentDefaults.height\n      );\n      $$(ids.width).setValue(\n         view.settings.width || ABViewDetailImagePropertyComponentDefaults.width\n      );\n   }\n\n   static propertyEditorValues(ids, view) {\n      super.propertyEditorValues(ids, view);\n\n      view.settings.height = $$(ids.height).getValue();\n      view.settings.width = $$(ids.width).getValue();\n   }\n\n   /**\n    * @component()\n    * return a UI component based upon this view.\n    * @param {obj} App\n    * @param {string} idPrefix\n    *\n    * @return {obj} UI component\n    */\n   component(App, idPrefix) {\n      var component = super.component(App);\n      var field = this.field();\n\n      var idBase = `ABViewDetailImage_${idPrefix || \"\"}${this.id}`;\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n         detail: this.parentDetailComponent()?.id || this.parent.id,\n      };\n\n      var defaultImageUrl = field ? field.settings.defaultImageUrl : \"\";\n\n      component.ui.id = ids.component;\n\n      if (this.settings.height) component.ui.height = this.settings.height;\n\n      // if (this.settings.width)\n      // \tcomponent.ui.width = this.settings.width;\n\n      component.ui.on = {\n         //Add data-cy attribute for Cypress Testing\n         onAfterRender: () => {\n            const dataCy = `detail image ${field?.columnName} ${field?.id} ${ids.detail}`;\n            $$(ids.component)?.$view.setAttribute(\"data-cy\", dataCy);\n         },\n      };\n\n      var _logic = {\n         setValue: (val) => {\n            var imageTemplate = \"\";\n\n            if (val || (!val && defaultImageUrl)) {\n               let imageUrl = field.urlImage(val || defaultImageUrl);\n               let width =\n                  field && field.settings.imageWidth\n                     ? `${field.settings.imageWidth}px`\n                     : \"200px\";\n               let height =\n                  field && field.settings.imageHeight\n                     ? `${field.settings.imageHeight}px`\n                     : \"100%\";\n\n               if (this.settings.height) height = `${this.settings.height}px`;\n\n               if (this.settings.width) width = `${this.settings.width}px`;\n\n               imageTemplate =\n                  `<div class=\"ab-image-data-field\">` +\n                  `<div style=\"float: left; background-size: cover; background-position: center center; background-image:url('${imageUrl}');  width: ${width}; height: ${height}; position:relative;\">` +\n                  `<a href=\"${imageUrl}\" target=\"_blank\" title=\"\" class=\"fa fa-download ab-image-data-field-download\"></a>` +\n                  `</div></div>`;\n            }\n\n            component.logic.setValue(ids.component, imageTemplate);\n         },\n      };\n\n      return {\n         ui: component.ui,\n         init: component.init,\n\n         logic: _logic,\n      };\n   }\n};\n","const ABViewDetailTextCore = require(\"../../core/views/ABViewDetailTextCore\");\n\nconst ABViewDetailTextPropertyComponentDefaults = ABViewDetailTextCore.defaultValues();\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABViewDetailText extends ABViewDetailTextCore {\n   /**\n    * @param {obj} values  key=>value hash of ABView values\n    * @param {ABApplication} application the application object this view is under\n    * @param {ABView} parent the ABView this view is a child of. (can be null)\n    */\n   // constructor(values, application, parent, defaultValues) {\n   //    super(values, application, parent, defaultValues);\n   // }\n\n   //\n   //\tEditor Related\n   //\n\n   /**\n    * @method editorComponent\n    * return the Editor for this UI component.\n    * the editor should display either a \"block\" view or \"preview\" of\n    * the current layout of the view.\n    * @param {string} mode what mode are we in ['block', 'preview']\n    * @return {Component}\n    */\n   editorComponent(App, mode) {\n      var idBase = \"ABViewDetailTextEditorComponent\";\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n      };\n\n      var textElem = this.component(App).ui;\n      textElem.id = ids.component;\n\n      var _ui = {\n         rows: [textElem, {}],\n      };\n\n      var _init = (options) => {};\n\n      var _logic = {};\n\n      return {\n         ui: _ui,\n         init: _init,\n         logic: _logic,\n      };\n   }\n\n   //\n   // Property Editor\n   //\n\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\n      var commonUI = super.propertyEditorDefaultElements(\n         App,\n         ids,\n         _logic,\n         ObjectDefaults\n      );\n\n      // in addition to the common .label  values, we\n      // ask for:\n      return commonUI.concat([\n         {\n            view: \"counter\",\n            name: \"height\",\n            label: L(\"Height:\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n         },\n      ]);\n   }\n\n   static propertyEditorPopulate(App, ids, view) {\n      super.propertyEditorPopulate(App, ids, view);\n\n      $$(ids.height).setValue(\n         view.settings.height ||\n            ABViewDetailTextPropertyComponentDefaults.height\n      );\n   }\n\n   static propertyEditorValues(ids, view) {\n      super.propertyEditorValues(ids, view);\n\n      view.settings.height = $$(ids.height).getValue();\n   }\n\n   /**\n    * @component()\n    * return a UI component based upon this view.\n    * @param {obj} App\n    * @param {string} idPrefix\n    *\n    * @return {obj} UI component\n    */\n   component(App, idPrefix) {\n      var component = super.component(App);\n      var field = this.field();\n      var idBase = \"ABViewDetailText_\" + (idPrefix || \"\") + this.id;\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n         detail: this.parentDetailComponent()?.id || this.parent.id,\n      };\n\n      component.ui.id = ids.component;\n\n      component.ui.css = \"ab-text\";\n\n      if (this.settings.height) component.ui.height = this.settings.height;\n\n      component.ui.on = {\n         //Add data-cy attribute for Cypress Testing\n         onAfterRender: () => {\n            const dataCy = `detail text ${field?.columnName} ${field?.id} ${ids.detail}`;\n            $$(ids.component)?.$view.setAttribute(\"data-cy\", dataCy);\n         },\n      };\n\n      return {\n         ui: component.ui,\n         init: component.init,\n\n         logic: {\n            setValue: (val) => {\n               component.logic.setValue(ids.component, val);\n            },\n         },\n      };\n   }\n};\n","let ABViewDetailTreeCore = require(\"../../core/views/ABViewDetailTreeCore\");\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABViewDetailTree extends ABViewDetailTreeCore {\n   /**\n    * @param {obj} values  key=>value hash of ABView values\n    * @param {ABApplication} application the application object this view is under\n    * @param {ABView} parent the ABView this view is a child of. (can be null)\n    */\n   // constructor(values, application, parent, defaultValues) {\n   //    super(values, application, parent, defaultValues);\n   // }\n\n   //\n   //\tEditor Related\n   //\n\n   /**\n    * @method editorComponent\n    * return the Editor for this UI component.\n    * the editor should display either a \"block\" view or \"preview\" of\n    * the current layout of the view.\n    * @param {string} mode what mode are we in ['block', 'preview']\n    * @return {Component}\n    */\n   editorComponent(App, mode) {\n      var idBase = \"ABViewDetailTreeEditorComponent\";\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n      };\n\n      var elem = this.component(App).ui;\n      elem.id = ids.component;\n\n      var _ui = {\n         rows: [elem, {}],\n      };\n\n      var _init = (options) => {};\n\n      var _logic = {};\n\n      return {\n         ui: _ui,\n         init: _init,\n         logic: _logic,\n      };\n   }\n\n   //\n   // Property Editor\n   //\n\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\n      var commonUI = super.propertyEditorDefaultElements(\n         App,\n         ids,\n         _logic,\n         ObjectDefaults\n      );\n\n      // in addition to the common .label  values, we\n      // ask for:\n      return commonUI.concat([]);\n   }\n\n   static propertyEditorPopulate(App, ids, view) {\n      super.propertyEditorPopulate(App, ids, view);\n   }\n\n   static propertyEditorValues(ids, view) {\n      super.propertyEditorValues(ids, view);\n   }\n\n   /**\n    * @component()\n    * return a UI component based upon this view.\n    * @param {obj} App\n    * @param {string} idPrefix\n    *\n    * @return {obj} UI component\n    */\n   component(App, idPrefix) {\n      var component = super.component(App);\n      var field = this.field();\n      var detailView = this.detailComponent();\n\n      var idBase = `ABViewDetailTree_${idPrefix || \"\"}${this.id}`;\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n      };\n      var className = \"ab-detail-tree\";\n\n      component.ui.id = ids.component;\n\n      var _init = (options) => {\n         component.init(options);\n\n         // add div of tree to detail\n         var divTree = `<div class=\"${className}\"></div>`;\n         component.logic.setValue(ids.component, divTree);\n      };\n\n      var _logic = {\n         getDomTree: () => {\n            var elem = $$(ids.component);\n            if (!elem) return;\n\n            return elem.$view.getElementsByClassName(className)[0];\n         },\n\n         setValue: (val) => {\n            // convert value to array\n            if (val != null && !(val instanceof Array)) {\n               val = [val];\n            }\n\n            setTimeout(function () {\n               // get tree dom\n               var domTree = _logic.getDomTree();\n\n               if (!domTree) return false;\n\n               var branches = [];\n               if (typeof field.settings.options.data == \"undefined\") {\n                  field.settings.options = new webix.TreeCollection({\n                     data: field.settings.options,\n                  });\n               }\n\n               field.settings.options.data.each(function (obj) {\n                  if (val != null && val.indexOf(obj.id) != -1) {\n                     var html = \"\";\n\n                     var rootid = obj.id;\n                     while (this.getParentId(rootid)) {\n                        field.settings.options.data.each(function (par) {\n                           if (\n                              field.settings.options.data.getParentId(rootid) ==\n                              par.id\n                           ) {\n                              html = par.text + \": \" + html;\n                           }\n                        });\n                        rootid = this.getParentId(rootid);\n                     }\n\n                     html += obj.text;\n                     branches.push(html);\n                  }\n               });\n\n               var myHex = \"#4CAF50\";\n               var nodeHTML = \"<div class='list-data-values'>\";\n               branches.forEach(function (item) {\n                  nodeHTML +=\n                     '<span class=\"selectivity-multiple-selected-item rendered\" style=\"background-color:' +\n                     myHex +\n                     ' !important;\">' +\n                     item +\n                     \"</span>\";\n               });\n               nodeHTML += \"</div>\";\n               domTree.innerHTML = nodeHTML;\n\n               var height = 33;\n               if (domTree.scrollHeight > 33) height = domTree.scrollHeight;\n\n               $$(ids.component).config.height = height;\n               $$(ids.component).resize();\n            }, 50);\n         },\n      };\n\n      return {\n         ui: component.ui,\n\n         init: _init,\n         logic: _logic,\n      };\n   }\n};\n","const ABViewDocxBuilderCore = require(\"../../core/views/ABViewDocxBuilderCore\");\n\nconst ABFieldConnect = require(\"../dataFields/ABFieldConnect\");\nconst ABFieldImage = require(\"../dataFields/ABFieldImage\");\nconst ABObjectQuery = require(\"../ABObjectQuery\");\n\nconst Docxtemplater = require(\"../../../js/docxtemplater.v3.0.12.min.js\");\nconst ImageModule = require(\"../../../js/docxtemplater-image-module.v3.0.2.min.js\");\nconst JSZipUtils = require(\"jszip-utils/dist/jszip-utils.min.js\");\nconst JSZip = require(\"../../../js/jszip.min.js\");\n\nconst ABViewDocxBuilderPropertyComponentDefaults = ABViewDocxBuilderCore.defaultValues();\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nfunction letUserDownload(blob, filename) {\n   let url = window.URL.createObjectURL(blob);\n\n   let a = document.createElement(\"a\");\n   a.href = url;\n   a.download = filename;\n   document.body.appendChild(a); // we need to append the element to the dom -> otherwise it will not work in firefox\n   a.click();\n   a.remove(); //afterwards we remove the element again\n\n   window.URL.revokeObjectURL(url);\n}\n\nmodule.exports = class ABViewDocxBuilder extends ABViewDocxBuilderCore {\n   // constructor(values, application, parent, defaultValues) {\n   //    super(values, application, parent, defaultValues);\n   // }\n\n   //\n   //\tEditor Related\n   //\n\n   /**\n    * @method editorComponent\n    * return the Editor for this UI component.\n    * the editor should display either a \"block\" view or \"preview\" of\n    * the current layout of the view.\n    * @param {string} mode what mode are we in ['block', 'preview']\n    * @return {Component}\n    */\n   editorComponent(App, mode) {\n      var idBase = \"ABViewDocxBuilderEditorComponent\";\n\n      var DocxBuilderComponent = this.component(App, idBase);\n\n      return DocxBuilderComponent;\n   }\n\n   //\n   // Property Editor\n   //\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\n      var commonUI = super.propertyEditorDefaultElements(\n         App,\n         ids,\n         _logic,\n         ObjectDefaults\n      );\n\n      _logic.validateType = (item) => {\n         // verify file type\n         var acceptableTypes = [\"docx\"];\n         var type = item.type.toLowerCase();\n         if (acceptableTypes.indexOf(type) == -1) {\n            //// TODO: multilingual\n            webix.message(\n               \"Only [\" + acceptableTypes.join(\", \") + \"] files are supported\"\n            );\n            return false;\n         } else {\n            // set upload url to uploader\n            let currView = _logic.currentEditObject();\n            let uploadUrl = currView.uploadUrl();\n\n            $$(ids.docxFile).define(\"upload\", uploadUrl);\n            $$(ids.docxFile).refresh();\n\n            return true;\n         }\n      };\n\n      _logic.uploadedFile = (fileInfo) => {\n         if (!fileInfo || !fileInfo.data) return;\n\n         let currView = _logic.currentEditObject();\n         currView.settings.filename = fileInfo.data.uuid;\n         currView.filelabel = fileInfo.name;\n\n         $$(ids.filelabel).setValue(currView.filelabel);\n         $$(ids.docxDownload).show();\n      };\n\n      _logic.downloadFile = () => {\n         let currView = _logic.currentEditObject();\n         let url = currView.downloadUrl();\n\n         fetch(url)\n            .then((response) => response.blob())\n            .then((blob) => {\n               letUserDownload(blob, currView.filelabel);\n            });\n      };\n\n      // Populate language options\n      var langOptions = App.AB.Multilingual.languages().map((lang) => {\n         return {\n            id: lang.language_code,\n            value: lang.language_label,\n         };\n      });\n\n      $$(ids.language).define(\"options\", langOptions);\n      $$(ids.language).refresh();\n\n      // in addition to the common .label  values, we\n      // ask for:\n      return commonUI.concat([\n         {\n            view: \"fieldset\",\n            label: L(\"Data:\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n            body: {\n               type: \"clean\",\n               padding: 10,\n               rows: [\n                  {\n                     name: \"datacollection\",\n                     // view: 'richselect',\n                     view: \"multicombo\",\n                     label: L(\"Data Source\"),\n                     labelWidth: this.AB.UISettings.config().labelWidthLarge,\n                  },\n               ],\n            },\n         },\n\n         {\n            view: \"fieldset\",\n            label: L(\"Template file:\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n            body: {\n               type: \"clean\",\n               padding: 10,\n               rows: [\n                  {\n                     cols: [\n                        {\n                           view: \"label\",\n                           label: L(\"DOCX file:\"),\n                           css: \"ab-text-bold\",\n                           width: this.AB.UISettings.config().labelWidthXLarge,\n                        },\n                        {\n                           view: \"uploader\",\n                           value: L(\"Upload\"),\n                           name: \"docxFile\",\n                           apiOnly: true,\n                           inputName: \"file\",\n                           multiple: false,\n                           on: {\n                              onBeforeFileAdd: (item) => {\n                                 return _logic.validateType(item);\n                              },\n\n                              onFileUpload: (file, response) => {\n                                 _logic.uploadedFile(file);\n                              },\n\n                              onFileUploadError: (file, response) => {},\n                           },\n                        },\n                     ],\n                  },\n                  {\n                     name: \"filelabel\",\n                     view: \"text\",\n                     label: L(\"Filename\"),\n                     labelWidth: this.AB.UISettings.config().labelWidthLarge,\n                  },\n                  {\n                     name: \"docxDownload\",\n                     view: \"button\",\n                     type: \"icon\",\n                     css: \"webix_primary\",\n                     icon: \"fa fa-file-word-o\",\n                     label: L(\"Download Template File\"),\n                     click: () => {\n                        _logic.downloadFile();\n                     },\n                  },\n               ],\n            },\n         },\n\n         {\n            view: \"fieldset\",\n            label: L(\"Language:\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n            body: {\n               type: \"clean\",\n               padding: 10,\n               rows: [\n                  {\n                     name: \"language\",\n                     view: \"richselect\",\n                     label: L(\"Language\"),\n                     labelWidth: this.AB.UISettings.config().labelWidthLarge,\n                  },\n               ],\n            },\n         },\n\n         {\n            view: \"fieldset\",\n            label: L(\"Customize Display:\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n            body: {\n               type: \"clean\",\n               padding: 10,\n               rows: [\n                  {\n                     name: \"buttonlabel\",\n                     view: \"text\",\n                     label: L(\"Label\"),\n                     labelWidth: this.AB.UISettings.config().labelWidthXLarge,\n                  },\n\n                  {\n                     view: \"counter\",\n                     name: \"width\",\n                     label: L(\"Width:\"),\n                     labelWidth: this.AB.UISettings.config().labelWidthXLarge,\n                  },\n                  {\n                     view: \"richselect\",\n                     name: \"toolbarBackground\",\n                     label: L(\"Page background:\"),\n                     labelWidth: this.AB.UISettings.config().labelWidthXLarge,\n                     options: [\n                        {\n                           id: \"ab-background-default\",\n                           value: L(\"White (default)\"),\n                        },\n                        {\n                           id: \"webix_dark\",\n                           value: L(\"Dark\"),\n                        },\n                        {\n                           id: \"ab-background-lightgray\",\n                           value: L(\"Gray\"),\n                        },\n                     ],\n                  },\n\n                  {\n                     view: \"richselect\",\n                     name: \"buttonPosition\",\n                     label: L(\"Button Position:\"),\n                     labelWidth: this.AB.UISettings.config().labelWidthXLarge,\n                     options: [\n                        {\n                           id: \"left\",\n                           value: L(\"Left (default)\"),\n                        },\n                        {\n                           id: \"center\",\n                           value: L(\"Centered\"),\n                        },\n                        {\n                           id: \"right\",\n                           value: L(\"Right\"),\n                        },\n                     ],\n                  },\n               ],\n            },\n         },\n      ]);\n   }\n\n   static propertyEditorPopulate(App, ids, view) {\n      super.propertyEditorPopulate(App, ids, view);\n\n      let $DcSelector = $$(ids.datacollection);\n\n      let selectedDvId = view.settings.dataviewID\n         ? view.settings.dataviewID\n         : null;\n\n      $$(ids.toolbarBackground).setValue(\n         view.settings.toolbarBackground ||\n            ABViewDocxBuilderPropertyComponentDefaults.toolbarBackground\n      );\n      $$(ids.buttonPosition).setValue(\n         view.settings.buttonPosition ||\n            ABViewDocxBuilderPropertyComponentDefaults.buttonPosition\n      );\n\n      // Pull data views to options\n      let dcOptions = view.AB.datacollections().map((dc) => {\n         return {\n            id: dc.id,\n            value: dc.label,\n         };\n      });\n\n      $DcSelector.define(\"options\", dcOptions);\n      $DcSelector.define(\"value\", selectedDvId);\n      $DcSelector.refresh();\n\n      $$(ids.language).setValue(\n         view.settings.language ||\n            ABViewDocxBuilderPropertyComponentDefaults.language\n      );\n\n      $$(ids.filelabel).setValue(view.filelabel || view.settings.filelabel);\n      $$(ids.buttonlabel).setValue(\n         view.buttonlabel || view.settings.buttonlabel\n      );\n      $$(ids.width).setValue(view.settings.width);\n\n      if (view.settings.filename) {\n         $$(ids.docxDownload).show();\n      } else {\n         $$(ids.docxDownload).hide();\n      }\n   }\n\n   static propertyEditorValues(ids, view) {\n      super.propertyEditorValues(ids, view);\n\n      view.buttonlabel = $$(ids.buttonlabel).getValue();\n      view.settings.dataviewID = $$(ids.datacollection).getValue();\n      view.settings.width = $$(ids.width).getValue();\n      view.filelabel = $$(ids.filelabel).getValue();\n      view.settings.language = $$(ids.language).getValue();\n      view.settings.toolbarBackground = $$(ids.toolbarBackground).getValue();\n      view.settings.buttonPosition = $$(ids.buttonPosition).getValue();\n   }\n\n   /**\n    * @function component()\n    * return a UI component based upon this view.\n    * @param {obj} App\n    * @return {obj} UI component\n    */\n   component(App) {\n      let baseCom = super.component(App);\n\n      var idBase = \"ABViewDocxBuilder_\" + this.id;\n      var ids = {\n         button: App.unique(`${idBase}_button`),\n         noFile: App.unique(`${idBase}_noFile`),\n      };\n\n      var autowidth = false;\n      var buttonWidth =\n         this.settings.width ||\n         ABViewDocxBuilderPropertyComponentDefaults.width;\n      if (buttonWidth == 0) {\n         autowidth = true;\n      }\n\n      var leftSpacer = {\n         type: \"spacer\",\n         width: 1,\n      };\n      var rightSpacer = {\n         type: \"spacer\",\n         width: 1,\n      };\n      var buttonPos =\n         this.settings.buttonPosition ||\n         ABViewDocxBuilderPropertyComponentDefaults.buttonPosition;\n      if (buttonPos == \"left\") {\n         rightSpacer = {\n            type: \"spacer\",\n         };\n      } else if (buttonPos == \"center\") {\n         leftSpacer = {\n            type: \"spacer\",\n         };\n         rightSpacer = {\n            type: \"spacer\",\n         };\n      } else if (buttonPos == \"right\") {\n         leftSpacer = {\n            type: \"spacer\",\n         };\n      }\n\n      var buttonLabelText = this.buttonlabel || this.settings.buttonlabel;\n      if (!buttonLabelText) {\n         buttonLabelText =\n            ABViewDocxBuilderPropertyComponentDefaults.buttonlabel;\n      }\n\n      var _ui = {\n         view: \"toolbar\",\n         css:\n            this.settings.toolbarBackground ||\n            ABViewDocxBuilderPropertyComponentDefaults.toolbarBackground,\n         cols: [\n            leftSpacer,\n            {\n               id: ids.button,\n               view: \"button\",\n               css: \"webix_primary\",\n               type: \"icon\",\n               icon: \"fa fa-file-word-o\",\n               label: buttonLabelText,\n               width:\n                  this.settings.width ||\n                  ABViewDocxBuilderPropertyComponentDefaults.width,\n               autowidth: autowidth,\n               click: () => {\n                  _logic.renderFile();\n               },\n               on: {\n                  // Add data-cy attribute for cypress tests\n                  onAfterRender: () => {\n                     const name = this.name.replace(\".docxBuilder\", \"\");\n                     const dataCy = `docx download ${name} ${this.id}`;\n                     $$(ids.button)\n                        ?.$view.querySelector(\"button\")\n                        .setAttribute(\"data-cy\", dataCy);\n                  },\n               },\n            },\n            {\n               id: ids.noFile,\n               view: \"label\",\n               label: L(\"No template file\"),\n            },\n            {\n               type: \"spacer\",\n            },\n            rightSpacer,\n         ],\n      };\n\n      // make sure each of our child views get .init() called\n      var _init = (options) => {\n         let DownloadButton = $$(ids.button);\n         let NoFileLabel = $$(ids.noFile);\n\n         if (this.settings.filename) {\n            DownloadButton.show();\n            NoFileLabel.hide();\n         } else {\n            DownloadButton.hide();\n            NoFileLabel.show();\n         }\n      };\n\n      let _logic = {\n         busy: () => {\n            let DownloadButton = $$(ids.button);\n            if (!DownloadButton) return;\n\n            DownloadButton.disable();\n\n            DownloadButton.define(\"icon\", \"fa fa-refresh fa-spin\");\n            DownloadButton.refresh();\n         },\n\n         ready: () => {\n            let DownloadButton = $$(ids.button);\n            if (!DownloadButton) return;\n\n            DownloadButton.enable();\n\n            DownloadButton.define(\"icon\", \"fa fa-file-word-o\");\n            DownloadButton.refresh();\n         },\n\n         onShow: (viewId) => {\n            let tasks = [];\n\n            this.datacollections.forEach((dc) => {\n               if (dc && dc.dataStatus == dc.dataStatusFlag.notInitial) {\n                  // load data when a widget is showing\n                  tasks.push(dc.loadData());\n               }\n            });\n\n            // Show loading cursor\n            if (tasks.length > 0) _logic.busy();\n\n            Promise.all(tasks)\n               .catch((err) => console.error(err))\n               .then(() => {\n                  // Hide loading cursor\n                  _logic.ready();\n               });\n         },\n\n         renderFile: () => {\n            _logic.busy();\n\n            let reportValues = {};\n            let images = {};\n            let summaries = {}; // { varName: sum number, ..., varName2: number2 }\n\n            Promise.resolve()\n               // Get current cursor\n               .then(() => {\n                  let datacollections = this.datacollections;\n                  let isDcLabelAdded = datacollections.length > 1;\n\n                  datacollections.forEach((dc) => {\n                     if (dc == null) return;\n\n                     let obj = dc.datasource;\n                     if (obj == null) return;\n\n                     let dcValues = [];\n                     let dataList = [];\n\n                     let dcCursor = dc.getCursor();\n\n                     // merge cursor to support dc and tree cursor in the report\n                     if (dcCursor) {\n                        let treeCursor = dc.getCursor(true);\n                        dataList.push(App.AB.merge({}, dcCursor, treeCursor));\n                     } else dataList = App.AB.cloneDeep(dc.getData());\n\n                     // update property names to column labels to match format names in docx file\n                     let mlFields = obj.multilingualFields();\n\n                     let setReportValues = (\n                        baseData,\n                        targetData,\n                        field,\n                        fieldLabels = []\n                     ) => {\n                        let val = null;\n\n                        targetData.id = baseData.id;\n                        targetData[`${field.columnName}_ORIGIN`] =\n                           baseData[field.columnName]; // Keep origin value for compare value with custom index\n\n                        // Translate multilinguage fields\n                        if (mlFields.length) {\n                           let transFields = (mlFields || []).filter(\n                              (fieldName) => baseData[fieldName] != null\n                           );\n                           this.translate(\n                              baseData,\n                              baseData,\n                              transFields,\n                              this.languageCode\n                           );\n                        }\n\n                        // Pull value\n                        if (field instanceof ABFieldConnect) {\n                           // If field is connected field, then\n                           // {\n                           //\t\tfieldName: {Object} or [Array]\n                           // }\n                           val = baseData[field.columnName];\n\n                           if (val && val.forEach) {\n                              val.forEach((v) => {\n                                 if (v == null) return;\n\n                                 // format relation data\n                                 if (field.datasourceLink) {\n                                    field.datasourceLink\n                                       .fields((f) => !f.isConnection)\n                                       .forEach((f) => {\n                                          v[`${f.columnName}_ORIGIN`] =\n                                             v[f.columnName];\n\n                                          v[f.columnName] = f.format(v, {\n                                             languageCode: this.languageCode,\n                                          });\n                                       });\n                                 }\n\n                                 // Keep ABObject to relation data\n                                 if (v && typeof v == \"object\")\n                                    v._object = field.datasourceLink;\n                              });\n                           }\n                           // TODO\n                           // data[label + '_label'] = field.format(baseData);\n                        } else {\n                           val = field.format(baseData, {\n                              languageCode: this.languageCode,\n                           });\n                        }\n\n                        // Set value to report with every languages of label\n                        fieldLabels.forEach((label) => {\n                           if (val) {\n                              targetData[label] = val;\n                           } else if (!targetData[label]) {\n                              targetData[label] = \"\";\n                           }\n                        });\n\n                        // normalize child items\n                        if (baseData.data && baseData.data.length) {\n                           targetData.data = targetData.data || [];\n                           (baseData.data || []).forEach((childItem, index) => {\n                              // add new data item\n                              if (targetData.data[index] == null)\n                                 targetData.data[index] = {};\n\n                              setReportValues(\n                                 childItem,\n                                 targetData.data[index],\n                                 field,\n                                 fieldLabels\n                              );\n                           });\n                        }\n                     };\n\n                     dataList.forEach((data) => {\n                        let resultData = {};\n\n                        // Keep id of ABObject into .scope of DOCX templater\n                        resultData._object = obj;\n\n                        // For support label of columns every languages\n                        obj.fields().forEach((f) => {\n                           let fieldLabels = [];\n\n                           // Query Objects\n                           if (obj instanceof ABObjectQuery) {\n                              if (typeof f.object.translations == \"string\")\n                                 f.object.translations = JSON.parse(\n                                    f.object.translations\n                                 );\n\n                              if (typeof f.translations == \"string\")\n                                 f.translations = JSON.parse(f.translations);\n\n                              (f.object.translations || []).forEach(\n                                 (objTran) => {\n                                    let fieldTran = (\n                                       f.translations || []\n                                    ).filter(\n                                       (fieldTran) =>\n                                          fieldTran.language_code ==\n                                          objTran.language_code\n                                    )[0];\n\n                                    if (!fieldTran) return;\n\n                                    let objectLabel = objTran.label;\n                                    let fieldLabel = fieldTran.label;\n\n                                    // Replace alias with label of object\n                                    fieldLabels.push(\n                                       `${objectLabel}.${fieldLabel}`\n                                    );\n                                 }\n                              );\n                           }\n                           // Normal Objects\n                           else {\n                              if (typeof f.translations == \"string\")\n                                 f.translations = JSON.parse(f.translations);\n\n                              f.translations.forEach((tran) => {\n                                 fieldLabels.push(tran.label);\n                              });\n                           }\n\n                           setReportValues(data, resultData, f, fieldLabels);\n                        });\n\n                        dcValues.push(resultData);\n                     });\n\n                     // If data sources have more than 1 or the result data more than 1 items, then add label of data source\n                     let datacollectionData =\n                        dcValues.length > 1 ? dcValues : dcValues[0];\n                     if (\n                        isDcLabelAdded ||\n                        (Array.isArray(datacollectionData) &&\n                           datacollectionData.length > 1)\n                     ) {\n                        (dc.translations || []).forEach((tran) => {\n                           reportValues[tran.label] = datacollectionData;\n                        });\n                     } else reportValues = datacollectionData;\n                  });\n\n                  return Promise.resolve();\n               })\n               // Download images\n               .then(() => {\n                  console.log(\"DOCX data: \", reportValues);\n\n                  let tasks = [];\n\n                  let addDownloadTask = (fieldImage, data = []) => {\n                     data.forEach((d) => {\n                        let imageVal = fieldImage.format(d);\n                        if (imageVal && !images[imageVal]) {\n                           tasks.push(\n                              new Promise((ok, bad) => {\n                                 let imgUrl = fieldImage.urlImage(imageVal); // `/opsportal/image/${this.application.name}/${imageVal}`;\n\n                                 JSZipUtils.getBinaryContent(\n                                    imgUrl,\n                                    function (error, content) {\n                                       if (error) return bad(error);\n                                       else {\n                                          // store binary of image\n                                          images[imageVal] = content;\n\n                                          ok();\n                                       }\n                                    }\n                                 );\n                              })\n                           );\n                        }\n\n                        // download images of child items\n                        addDownloadTask(fieldImage, d.data || []);\n                     });\n                  };\n\n                  this.datacollections.forEach((dc) => {\n                     if (!dc) return;\n\n                     let obj = dc.datasource;\n                     if (!obj) return;\n\n                     let currCursor = dc.getCursor();\n                     if (currCursor) {\n                        // Current cursor\n                        let treeCursor = dc.getCursor(true);\n                        currCursor = [App.AB.merge({}, currCursor, treeCursor)];\n                     } // List of data\n                     else currCursor = dc.getData();\n\n                     obj.fields((f) => f instanceof ABFieldImage).forEach(\n                        (f) => {\n                           addDownloadTask(f, currCursor);\n                        }\n                     );\n                  });\n\n                  return Promise.all(tasks);\n               })\n               .then(() => {\n                  // Download the template file\n                  return new Promise((next, err) => {\n                     let url = this.downloadUrl();\n\n                     JSZipUtils.getBinaryContent(url, (error, content) => {\n                        if (error) return err(error);\n\n                        next(content);\n                     });\n                  });\n               })\n               .then((content) => {\n                  // Generate Docx file\n                  return new Promise((next, err) => {\n                     let zip = new JSZip(content);\n                     let doc = new Docxtemplater();\n\n                     let imageModule = new ImageModule({\n                        centered: false,\n                        getImage: (tagValue, tagName) => {\n                           // NOTE: .getImage of version 3.0.2 does not support async\n                           //\t\t\twe can buy newer version to support it\n                           //\t\t\thttps://docxtemplater.com/modules/image/\n\n                           return images[tagValue] || \"\";\n                        },\n                        getSize: (imgBuffer, tagValue, tagName) => {\n                           let defaultVal = [300, 160];\n\n                           let dc = this.datacollection;\n                           if (!dc) {\n                              let dcs = this.datacollections;\n                              if (dcs) {\n                                 dcs.forEach((dc) => {\n                                    let obj = dc.datasource;\n                                    if (!obj) return false;\n\n                                    // This is a query object\n                                    if (tagName.indexOf(\".\") > -1) {\n                                       let tagNames = tagName.split(\".\");\n\n                                       if (!obj.objects) return false; // not a query\n                                       obj = obj.objects(\n                                          (o) => o.label == tagNames[0]\n                                       )[0]; // Label of object\n                                       if (!obj) return false;\n\n                                       tagName = tagNames[1]; // Field name\n                                    }\n\n                                    let imageField = obj.fields(\n                                       (f) => f.columnName == tagName\n                                    )[0];\n                                    if (!imageField || !imageField.settings)\n                                       return false;\n\n                                    if (\n                                       imageField.settings.useWidth &&\n                                       imageField.settings.imageWidth\n                                    )\n                                       defaultVal[0] =\n                                          imageField.settings.imageWidth;\n\n                                    if (\n                                       imageField.settings.useHeight &&\n                                       imageField.settings.imageHeight\n                                    )\n                                       defaultVal[1] =\n                                          imageField.settings.imageHeight;\n\n                                    return false;\n                                 });\n                                 return defaultVal;\n                              } else {\n                                 return defaultVal;\n                              }\n                           } else {\n                              let obj = dc.datasource;\n                              if (!obj) return defaultVal;\n\n                              // This is a query object\n                              if (tagName.indexOf(\".\") > -1) {\n                                 let tagNames = tagName.split(\".\");\n\n                                 obj = obj.objects(\n                                    (o) => o.label == tagNames[0]\n                                 )[0]; // Label of object\n                                 if (!obj) return defaultVal;\n\n                                 tagName = tagNames[1]; // Field name\n                              }\n\n                              let imageField = obj.fields(\n                                 (f) => f.columnName == tagName\n                              )[0];\n                              if (!imageField || !imageField.settings)\n                                 return defaultVal;\n\n                              if (\n                                 imageField.settings.useWidth &&\n                                 imageField.settings.imageWidth\n                              )\n                                 defaultVal[0] = imageField.settings.imageWidth;\n\n                              if (\n                                 imageField.settings.useHeight &&\n                                 imageField.settings.imageHeight\n                              )\n                                 defaultVal[1] =\n                                    imageField.settings.imageHeight;\n\n                              return defaultVal;\n                           }\n                        },\n                        // getSize: function (imgBuffer, tagValue, tagName) {\n                        // \tif (imgBuffer) {\n                        // \t\tvar maxWidth = 300;\n                        // \t\tvar maxHeight = 160;\n\n                        // \t\t// Find aspect ratio image dimensions\n                        // \t\ttry {\n                        // \t\t\tvar image = sizeOf(imgBuffer);\n                        // \t\t\tvar ratio = Math.min(maxWidth / image.width, maxHeight / image.height);\n\n                        // \t\t\treturn [image.width * ratio, image.height * ratio];\n                        // \t\t}\n                        // \t\t// if invalid image, then should return 0, 0 sizes\n                        // \t\tcatch (err) {\n                        // \t\t\treturn [0, 0];\n                        // \t\t}\n\n                        // \t}\n                        // \telse {\n                        // \t\treturn [0, 0];\n                        // \t}\n                        // }\n                     });\n\n                     try {\n                        doc.attachModule(imageModule)\n                           .loadZip(zip)\n                           .setData(reportValues)\n                           .setOptions({\n                              parser: function (tag) {\n                                 return {\n                                    get: function (scope, context) {\n                                       // NOTE: AppBuilder custom filter : no return empty items\n                                       if (tag.indexOf(\"data|\") == 0) {\n                                          let prop = (\n                                             tag.split(\"|\")[1] || \"\"\n                                          ).trim();\n\n                                          return (scope[\"data\"] || []).filter(\n                                             function (item) {\n                                                return item[prop]\n                                                   ? true\n                                                   : false;\n                                             }\n                                          );\n                                       }\n                                       // Mark number to add to a variable\n                                       else if (tag.indexOf(\"|$sum?\") > -1) {\n                                          let prop = tag.split(\"|$sum?\")[0];\n                                          let varName = tag.split(\"|$sum?\")[1];\n\n                                          let number = scope[prop];\n                                          if (typeof number == \"string\") {\n                                             number = number.replace(\n                                                /[^\\d.]/g, // return only number and dot\n                                                \"\"\n                                             );\n                                          }\n\n                                          if (summaries[varName] == null)\n                                             summaries[varName] = 0.0;\n\n                                          summaries[varName] += parseFloat(\n                                             number\n                                          );\n\n                                          return scope[prop];\n                                       }\n                                       // Show sum value ^\n                                       else if (tag.indexOf(\"$sum?\") == 0) {\n                                          let varName = tag.replace(\n                                             \"$sum?\",\n                                             \"\"\n                                          );\n\n                                          return summaries[varName] || 0;\n                                       }\n                                       // // Sum number of .data (Grouped query)\n                                       // else if (tag.indexOf(\"$sum|\") == 0) {\n                                       //    let prop = (\n                                       //       tag.split(\"|\")[1] || \"\"\n                                       //    ).trim();\n\n                                       //    let sum = 0;\n                                       //    (scope[\"data\"] || []).forEach(\n                                       //       (childItem) => {\n                                       //          if (!childItem[prop]) return;\n\n                                       //          let number = childItem[prop];\n                                       //          if (typeof number == \"string\") {\n                                       //             number = number.replace(\n                                       //                /[^\\d.]/g, // return only number and dot\n                                       //                \"\"\n                                       //             );\n                                       //          }\n\n                                       //          try {\n                                       //             sum += parseFloat(\n                                       //                number || 0\n                                       //             );\n                                       //          } catch (e) {}\n                                       //       }\n                                       //    );\n\n                                       //    // Print number with commas\n                                       //    if (sum) {\n                                       //       sum = sum\n                                       //          .toString()\n                                       //          .replace(\n                                       //             /\\B(?=(\\d{3})+(?!\\d))/g,\n                                       //             \",\"\n                                       //          );\n                                       //    }\n\n                                       //    return sum;\n                                       // }\n                                       // NOTE: AppBuilder custom filter of another data source\n                                       else if (tag.indexOf(\"$\") == 0) {\n                                          let props = tag\n                                             .replace(\"$\", \"\")\n                                             .split(\"|\");\n                                          let propSource = props[0].trim();\n                                          let propFilter = props[1].trim(); // column name of ABFieldConnect\n\n                                          if (!propSource || !propFilter)\n                                             return \"\";\n\n                                          // Pull Index field of connect field\n                                          let indexColName;\n                                          let obj = scope._object;\n                                          if (obj) {\n                                             let connectedField = obj.fields(\n                                                (f) =>\n                                                   f.columnName == propFilter\n                                             )[0];\n                                             if (connectedField) {\n                                                let indexField =\n                                                   connectedField.indexField;\n                                                indexColName = indexField\n                                                   ? indexField.columnName\n                                                   : null;\n                                             }\n                                          }\n\n                                          let sourceVals =\n                                             reportValues[propSource];\n                                          if (\n                                             sourceVals &&\n                                             !Array.isArray(sourceVals)\n                                          )\n                                             sourceVals = [sourceVals];\n\n                                          let getVal = (data) => {\n                                             return (\n                                                data[\n                                                   `${indexColName}_ORIGIN`\n                                                ] || // Pull origin data to compare by custom index\n                                                data[indexColName] ||\n                                                data.id ||\n                                                data\n                                             );\n                                          };\n\n                                          return (sourceVals || []).filter(\n                                             function (item) {\n                                                // Pull data of parent to compare\n                                                let comparer =\n                                                   scope[propFilter];\n\n                                                if (Array.isArray(comparer))\n                                                   return (\n                                                      comparer.filter(\n                                                         (c) =>\n                                                            getVal(c) ==\n                                                            getVal(item)\n                                                      ).length > 0\n                                                   );\n                                                else {\n                                                   return (\n                                                      getVal(item) ==\n                                                      getVal(comparer)\n                                                   );\n                                                }\n                                             }\n                                          );\n                                       }\n                                       // ์NOTE : Custom filter\n                                       else if (tag.indexOf(\"?\") > -1) {\n                                          let result = scope;\n                                          let prop = tag.split(\"?\")[0];\n                                          let condition = tag.split(\"?\")[1];\n                                          if (prop && condition) {\n                                             let data = scope[prop];\n                                             if (data) {\n                                                if (!Array.isArray(data))\n                                                   data = [data];\n\n                                                return data.filter((d) =>\n                                                   eval(\n                                                      condition.replace(\n                                                         /\\./g,\n                                                         \"d.\"\n                                                      )\n                                                   )\n                                                );\n                                             }\n                                          }\n                                          return result;\n                                       } else if (tag === \".\") {\n                                          return scope;\n                                       } else {\n                                          return scope[tag];\n                                       }\n                                    },\n                                 };\n                              },\n                           })\n                           .render(); // render the document\n                     } catch (error) {\n                        return err(error);\n                     }\n\n                     var docxFile = doc.getZip().generate({\n                        type: \"blob\",\n                        mimeType:\n                           \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n                     }); //Output the document using Data-URI\n\n                     next(docxFile);\n                  });\n               })\n               .then((blobFile) => {\n                  // Let user download the output file\n                  return new Promise((next, err) => {\n                     letUserDownload(blobFile, this.filelabel);\n\n                     next();\n                  });\n               })\n               // Final step\n               .then(() => {\n                  _logic.ready();\n               });\n         },\n      };\n\n      return {\n         ui: _ui,\n         init: _init,\n         logic: _logic,\n         onShow: _logic.onShow,\n      };\n   }\n};\n","const ABViewFormCore = require(\"../../core/views/ABViewFormCore\");\nconst ABViewFormButton = require(\"./ABViewFormButton\");\nconst ABViewFormCustom = require(\"./ABViewFormCustom\");\nconst ABViewFormConnect = require(\"./ABViewFormConnect\");\nconst ABViewFormComponent = require(\"./ABViewFormComponent\");\nconst ABViewFormSelectMultiple = require(\"./ABViewFormSelectMultiple\");\nconst ABViewFormTextbox = require(\"./ABViewFormTextbox\");\n\nconst ABRecordRule = require(\"../../rules/ABViewRuleListFormRecordRules\");\nconst ABSubmitRule = require(\"../../rules/ABViewRuleListFormSubmitRules\");\n\nlet PopupRecordRule = null;\nlet PopupSubmitRule = null;\n\n////\n//// LEFT OFF HERE: Review and Refactor\n////\nconst ABViewFormPropertyComponentDefaults = ABViewFormCore.defaultValues();\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABViewForm extends ABViewFormCore {\n   // constructor(values, application, parent, defaultValues) {\n   //    super(values, application, parent, defaultValues);\n   // }\n\n   /**\n    * @method editorComponent\n    * return the Editor for this UI component.\n    * the editor should display either a \"block\" view or \"preview\" of\n    * the current layout of the view.\n    * @param {string} mode what mode are we in ['block', 'preview']\n    * @return {Component}\n    */\n   editorComponent(App, mode) {\n      var comp = super.editorComponent(App, mode);\n\n      // Define height of cell\n      comp.ui.rows[0].cellHeight = 75;\n\n      return comp;\n   }\n\n   //\n   // Property Editor\n   //\n\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\n      var commonUI = super.propertyEditorDefaultElements(\n         App,\n         ids,\n         _logic,\n         ObjectDefaults\n      );\n\n      var idBase = \"ABViewForm\";\n\n      // PopupDisplayRule = new ABDisplayRule(App, idBase + \"_displayrule\");\n\n      PopupRecordRule = new ABRecordRule();\n      PopupRecordRule.component(App, `${idBase}_recordrule`); // prepare the UI component.\n\n      PopupSubmitRule = new ABSubmitRule();\n      PopupSubmitRule.component(App, `${idBase}_submitrule`);\n\n      // _logic functions\n\n      _logic.selectSource = (dcId, oldDcId) => {\n         // TODO : warning message\n\n         _logic.busy();\n\n         let currView = _logic.currentEditObject();\n         let formView = currView.parentFormComponent();\n\n         currView.settings.dataviewID = dcId;\n\n         // clear sub views\n         var viewsToRemove = currView._views;\n         currView._views = [];\n\n         return (\n            Promise.resolve()\n               .then(() => {\n                  var allRemoves = [];\n                  viewsToRemove.forEach((v) => {\n                     allRemoves.push(v.destroy());\n                  });\n                  return Promise.all(allRemoves);\n               })\n               // .then(() => {\n               // \t// remove all old components\n               // \tlet destroyTasks = [];\n               // \tif (oldDcId != null) {\n               // \t\tlet oldComps = formView.views();\n               // \t\toldComps.forEach(child => destroyTasks.push(() => child.destroy()));\n               // \t}\n\n               // \treturn destroyTasks.reduce((promiseChain, currTask) => {\n               // \t\treturn promiseChain.then(currTask);\n               // \t}, Promise.resolve([]));\n               // })\n               .then(() => {\n                  // refresh UI\n                  // formView.emit('properties.updated', currView);\n\n                  _logic.busy();\n\n                  // Update field options in property\n                  this.propertyUpdateFieldOptions(ids, currView, dcId);\n\n                  // add all fields to editor by default\n                  if (currView._views.length > 0) return Promise.resolve();\n\n                  let saveTasks = [];\n                  let fields = $$(ids.fields).find({});\n                  fields.reverse();\n                  fields.forEach((f, index) => {\n                     if (!f.selected) {\n                        let yPosition = fields.length - index - 1;\n\n                        // Add new form field\n                        let newFieldView = currView.addFieldToForm(\n                           f,\n                           yPosition\n                        );\n                        if (newFieldView) {\n                           newFieldView.once(\"destroyed\", () =>\n                              this.propertyEditorPopulate(App, ids, currView)\n                           );\n\n                           // // Call save API\n                           saveTasks.push(newFieldView.save());\n                        }\n\n                        // update item to UI list\n                        f.selected = 1;\n                        $$(ids.fields).updateItem(f.id, f);\n                     }\n                  });\n\n                  let defaultButton = formView.refreshDefaultButton(ids);\n                  if (defaultButton) saveTasks.push(defaultButton.save());\n\n                  return Promise.all(saveTasks);\n               })\n               // Saving\n               .then(() => {\n                  //// NOTE: the way the .addFieldToForm() works, it will prevent\n                  //// the typical field.save() -> triggering the form.save() on a\n                  //// new Field.  So once all our field.saves() are finished, we\n                  //// need to perform a form.save() to persist the changes.\n                  return currView.save();\n               })\n               // Finally\n               .then(() => {\n                  // refresh UI\n                  formView.emit(\"properties.updated\", currView);\n\n                  // Update field options in property\n                  this.propertyUpdateRules(ids, currView, dcId);\n\n                  _logic.ready();\n\n                  return Promise.resolve();\n               })\n         );\n      };\n\n      _logic.listTemplate = (field, common) => {\n         let currView = _logic.currentEditObject();\n\n         // disable in form\n         var fieldComponent = field.formComponent();\n         if (fieldComponent == null)\n            return \"<i class='fa fa-times'></i>  #label# <div class='ab-component-form-fields-component-info'> Disable </div>\".replace(\n               \"#label#\",\n               field.label\n            );\n\n         var componentKey = fieldComponent.common().key;\n         var formComponent = currView.application.viewAll(\n            (v) => v.common().key == componentKey\n         )[0];\n\n         return `${common.markCheckbox(field)} ${\n            field.label\n         } <div class='ab-component-form-fields-component-info'> <i class='fa fa-${\n            formComponent ? formComponent.common().icon : \"fw\"\n         }'></i> ${\n            formComponent ? L(formComponent.common().labelKey) : \"\"\n         } </div>`;\n      };\n\n      _logic.check = (e, fieldId) => {\n         let currView = _logic.currentEditObject();\n         let formView = currView.parentFormComponent();\n\n         // update UI list\n         let item = $$(ids.fields).getItem(fieldId);\n         item.selected = item.selected ? 0 : 1;\n         $$(ids.fields).updateItem(fieldId, item);\n\n         let doneFn = () => {\n            formView\n               .refreshDefaultButton(ids)\n               .save()\n               .then(() => {\n                  // refresh UI\n                  currView.emit(\"properties.updated\", currView);\n               });\n\n            // // trigger a save()\n            // this.propertyEditorSave(ids, currView);\n         };\n\n         // add a field to the form\n         if (item.selected) {\n            let fieldView = currView.addFieldToForm(item);\n            if (fieldView) {\n               fieldView.save().then(() => {\n                  fieldView.once(\"destroyed\", () =>\n                     this.propertyEditorPopulate(App, ids, currView)\n                  );\n                  currView.save().then(() => {\n                     doneFn();\n                  });\n               });\n            }\n         }\n         // remove field in the form\n         else {\n            let fieldView = formView\n               .fieldComponents()\n               .filter((c) => c.settings.fieldId == fieldId)[0];\n            if (fieldView) {\n               // let remainingViews = formView.views(c => c.settings.fieldId != fieldId);\n               // formView._views = remainingViews;\n\n               fieldView.destroy().then(() => {\n                  doneFn();\n               });\n            }\n         }\n      };\n\n      // Display rule\n      _logic.displayRuleShow = () => {\n         // var currView = _logic.currentEditObject();\n         // PopupDisplayRule.setValue(currView.settings.displayRules);\n         // PopupDisplayRule.show();\n      };\n\n      _logic.displayRuleSave = () => {};\n\n      // Record rule\n      _logic.recordRuleShow = () => {\n         var currView = _logic.currentEditObject();\n\n         var selectedDv = currView.datacollection;\n         if (selectedDv) {\n            PopupRecordRule.objectLoad(selectedDv.datasource);\n         }\n         PopupRecordRule.formLoad(currView);\n         PopupRecordRule.fromSettings(currView.settings.recordRules);\n         PopupRecordRule.show();\n\n         // NOTE: Querybuilder v5.2 has a bug where it won't display the [and/or]\n         // choosers properly if it hasn't been shown before the .setValue() call.\n         // so this work around allows us to refresh the display after the .show()\n         // on the popup.\n         // When they've fixed the bug, we'll remove this workaround:\n         PopupRecordRule.qbFixAfterShow();\n      };\n\n      _logic.recordRuleSave = (settings) => {\n         var currView = _logic.currentEditObject();\n         currView.settings.recordRules = settings;\n\n         // trigger a save()\n         this.propertyEditorSave(ids, currView);\n\n         // update badge number of rules\n         this.populateBadgeNumber(ids, currView);\n      };\n\n      // Submit rule\n      _logic.submitRuleShow = () => {\n         var currView = _logic.currentEditObject();\n\n         PopupSubmitRule.fromSettings(currView.settings.submitRules);\n         PopupSubmitRule.show();\n      };\n\n      _logic.submitRuleSave = (settings) => {\n         var currView = _logic.currentEditObject();\n         currView.settings.submitRules = settings;\n\n         // trigger a save()\n         this.propertyEditorSave(ids, currView);\n\n         // update badge number of rules\n         this.populateBadgeNumber(ids, currView);\n      };\n\n      /** Initial rule popups */\n      // PopupDisplayRule.init({\n      // \tonSave: _logic.displayRuleSave\n      // });\n\n      PopupRecordRule.init({\n         onSave: _logic.recordRuleSave,\n      });\n\n      PopupSubmitRule.init({\n         onSave: _logic.submitRuleSave,\n      });\n\n      return commonUI.concat([\n         {\n            name: \"datacollection\",\n            view: \"richselect\",\n            label: L(\"Data Source\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n            skipAutoSave: true,\n            on: {\n               onChange: _logic.selectSource,\n            },\n         },\n\n         {\n            view: \"fieldset\",\n            label: L(\"Form Fields:\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n            body: {\n               type: \"clean\",\n               padding: 10,\n               rows: [\n                  {\n                     name: \"fields\",\n                     view: \"list\",\n                     select: false,\n                     minHeight: 200,\n                     template: _logic.listTemplate,\n                     type: {\n                        markCheckbox: function (item) {\n                           return (\n                              \"<span class='check webix_icon fa fa-\" +\n                              (item.selected ? \"check-\" : \"\") +\n                              \"square-o'></span>\"\n                           );\n                        },\n                     },\n                     onClick: {\n                        check: _logic.check,\n                     },\n                  },\n               ],\n            },\n         },\n         {\n            name: \"showLabel\",\n            view: \"checkbox\",\n            label: L(\"Display Label\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n         },\n         {\n            name: \"labelPosition\",\n            view: \"richselect\",\n            label: L(\"Label Position\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n            options: [\n               {\n                  id: \"left\",\n                  value: L(\"Left\"),\n               },\n               {\n                  id: \"top\",\n                  value: L(\"Top\"),\n               },\n            ],\n         },\n         {\n            name: \"labelWidth\",\n            view: \"counter\",\n            label: L(\"Label Width\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n         },\n         {\n            view: \"counter\",\n            name: \"height\",\n            label: L(\"Height:\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n         },\n         {\n            name: \"clearOnLoad\",\n            view: \"checkbox\",\n            label: L(\"Clear on load\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n         },\n         {\n            name: \"clearOnSave\",\n            view: \"checkbox\",\n            label: L(\"Clear on save\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n         },\n         {\n            view: \"fieldset\",\n            label: L(\"Rules:\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n            body: {\n               type: \"clean\",\n               padding: 10,\n               rows: [\n                  {\n                     cols: [\n                        {\n                           view: \"label\",\n                           label: L(\"Submit Rules:\"),\n                           width: this.AB.UISettings.config().labelWidthLarge,\n                        },\n                        {\n                           view: \"button\",\n                           css: \"webix_primary\",\n                           name: \"buttonSubmitRules\",\n                           label: L(\"Settings\"),\n                           icon: \"fa fa-gear\",\n                           type: \"icon\",\n                           badge: 0,\n                           click: function () {\n                              _logic.submitRuleShow();\n                           },\n                        },\n                     ],\n                  },\n                  {\n                     cols: [\n                        {\n                           view: \"label\",\n                           label: L(\"Display Rules:\"),\n                           width: this.AB.UISettings.config().labelWidthLarge,\n                        },\n                        {\n                           view: \"button\",\n                           name: \"buttonDisplayRules\",\n                           css: \"webix_primary\",\n                           label: L(\"Settings\"),\n                           icon: \"fa fa-gear\",\n                           type: \"icon\",\n                           badge: 0,\n                           click: function () {\n                              _logic.displayRuleShow();\n                           },\n                        },\n                     ],\n                  },\n                  {\n                     cols: [\n                        {\n                           view: \"label\",\n                           label: L(\"Record Rules:\"),\n                           width: this.AB.UISettings.config().labelWidthLarge,\n                        },\n                        {\n                           view: \"button\",\n                           name: \"buttonRecordRules\",\n                           css: \"webix_primary\",\n                           label: L(\"Settings\"),\n                           icon: \"fa fa-gear\",\n                           type: \"icon\",\n                           badge: 0,\n                           click: function () {\n                              _logic.recordRuleShow();\n                           },\n                        },\n                     ],\n                  },\n               ],\n            },\n         },\n      ]);\n   }\n\n   static propertyEditorPopulate(App, ids, view, logic) {\n      super.propertyEditorPopulate(App, ids, view, logic);\n\n      var formCom = view.parentFormComponent();\n      var datacollectionId = formCom.settings.dataviewID\n         ? formCom.settings.dataviewID\n         : null;\n      var SourceSelector = $$(ids.datacollection);\n\n      // Pull data collections to options\n      var dcOptions = view.propertyDatacollections((dc) => {\n         var obj = dc.datasource;\n\n         return dc.sourceType == \"object\" && obj && !obj.isImported;\n      });\n      SourceSelector.define(\"options\", dcOptions);\n      SourceSelector.define(\"value\", datacollectionId);\n      SourceSelector.refresh();\n\n      this.propertyUpdateFieldOptions(ids, view, datacollectionId);\n\n      // update properties when a field component is deleted\n      view.views().forEach((v) => {\n         if (v instanceof ABViewFormComponent)\n            v.once(\"destroyed\", () =>\n               this.propertyEditorPopulate(App, ids, view)\n            );\n      });\n\n      SourceSelector.enable();\n      $$(ids.showLabel).setValue(view.settings.showLabel);\n      $$(ids.labelPosition).setValue(\n         view.settings.labelPosition ||\n            ABViewFormPropertyComponentDefaults.labelPosition\n      );\n      $$(ids.labelWidth).setValue(\n         view.settings.labelWidth ||\n            ABViewFormPropertyComponentDefaults.labelWidth\n      );\n      $$(ids.height).setValue(\n         view.settings.height || ABViewFormPropertyComponentDefaults.height\n      );\n      $$(ids.clearOnLoad).setValue(\n         view.settings.clearOnLoad ||\n            ABViewFormPropertyComponentDefaults.clearOnLoad\n      );\n      $$(ids.clearOnSave).setValue(\n         view.settings.clearOnSave ||\n            ABViewFormPropertyComponentDefaults.clearOnSave\n      );\n\n      this.propertyUpdateRules(ids, view, datacollectionId);\n      this.populateBadgeNumber(ids, view);\n\n      // when a change is made in the properties the popups need to reflect the change\n      this.updateEventIds = this.updateEventIds || {}; // { viewId: boolean, ..., viewIdn: boolean }\n      if (!this.updateEventIds[view.id]) {\n         this.updateEventIds[view.id] = true;\n\n         view.addListener(\"properties.updated\", () => {\n            this.populateBadgeNumber(ids, view);\n         });\n      }\n   }\n\n   static propertyEditorValues(ids, view) {\n      super.propertyEditorValues(ids, view);\n\n      view.settings.dataviewID = $$(ids.datacollection).getValue();\n      view.settings.showLabel = $$(ids.showLabel).getValue();\n      view.settings.labelPosition =\n         $$(ids.labelPosition).getValue() ||\n         ABViewFormPropertyComponentDefaults.labelPosition;\n      view.settings.labelWidth =\n         $$(ids.labelWidth).getValue() ||\n         ABViewFormPropertyComponentDefaults.labelWidth;\n      view.settings.height = $$(ids.height).getValue();\n      view.settings.clearOnLoad = $$(ids.clearOnLoad).getValue();\n      view.settings.clearOnSave = $$(ids.clearOnSave).getValue();\n   }\n\n   /**\n    * @method propertyUpdateFieldOptions\n    * Populate fields of object to select list in property\n    *\n    * @param {Object} ids\n    * @param {ABViewForm} view - the current component\n    * @param {string} dcId - id of ABDatacollection\n    */\n   static propertyUpdateFieldOptions(ids, view, dcId) {\n      var formComponent = view.parentFormComponent();\n      var existsFields = formComponent.fieldComponents();\n      var datacollection = view.AB.datacollectionByID(dcId);\n      var object = datacollection ? datacollection.datasource : null;\n\n      // Pull field list\n      var fieldOptions = [];\n      if (object != null) {\n         fieldOptions = object.fields().map((f) => {\n            f.selected =\n               existsFields.filter((com) => {\n                  return f.id == com.settings.fieldId;\n               }).length > 0;\n\n            return f;\n         });\n      }\n\n      $$(ids.fields).clearAll();\n      $$(ids.fields).parse(fieldOptions);\n   }\n\n   static propertyUpdateRules(ids, view, dcId) {\n      if (!view) return;\n\n      // Populate values to rules\n      var selectedDv = view.datacollection;\n      if (selectedDv) {\n         // PopupDisplayRule.objectLoad(selectedDv.datasource);\n         PopupRecordRule.objectLoad(selectedDv.datasource);\n         PopupSubmitRule.objectLoad(selectedDv.datasource);\n      }\n\n      // PopupDisplayRule.formLoad(view);\n      PopupRecordRule.formLoad(view);\n      PopupSubmitRule.formLoad(view);\n   }\n\n   static populateBadgeNumber(ids, view) {\n      if (!view) return;\n\n      if (view.settings.submitRules) {\n         $$(ids.buttonSubmitRules).define(\n            \"badge\",\n            view.settings.submitRules.length || null\n         );\n         $$(ids.buttonSubmitRules).refresh();\n      } else {\n         $$(ids.buttonSubmitRules).define(\"badge\", null);\n         $$(ids.buttonSubmitRules).refresh();\n      }\n\n      if (view.settings.displayRules) {\n         $$(ids.buttonDisplayRules).define(\n            \"badge\",\n            view.settings.displayRules.length || null\n         );\n         $$(ids.buttonDisplayRules).refresh();\n      } else {\n         $$(ids.buttonDisplayRules).define(\"badge\", null);\n         $$(ids.buttonDisplayRules).refresh();\n      }\n\n      if (view.settings.recordRules) {\n         $$(ids.buttonRecordRules).define(\n            \"badge\",\n            view.settings.recordRules.length || null\n         );\n         $$(ids.buttonRecordRules).refresh();\n      } else {\n         $$(ids.buttonRecordRules).define(\"badge\", null);\n         $$(ids.buttonRecordRules).refresh();\n      }\n   }\n\n   /**\n    * @method component()\n    * return a UI component based upon this view.\n    * @param {obj} App\n    * @return {obj} UI component\n    */\n   component(App) {\n      this.App = App;\n      var idBase = \"ABViewForm_\" + this.id;\n      this.uniqueInstanceID = webix.uid();\n      var myUnique = (key) => {\n         return App.unique(`${idBase}_${key}_${this.uniqueInstanceID}`);\n      };\n      var ids = {\n         component: myUnique(\"_component\"),\n         layout: myUnique(\"_form_layout\"),\n         filterComplex: myUnique(\"_filter_complex\"),\n      };\n\n      var component = super.component(App);\n\n      // Pull fields that have validation rules\n      var fieldValidations = [];\n      var validationUI = [];\n      // NOTE: this._currentObject can be set in the KanBan Side Panel\n      var object = this.datacollection?.datasource ?? this._currentObject;\n      if (object) {\n         var existsFields = this.fieldComponents();\n\n         object.fields().forEach((f) => {\n            var view = existsFields.filter((com) => {\n               return f.id == com.settings.fieldId;\n            })[0];\n\n            // check to see if field has validation rules\n            if (view && f.settings.validationRules) {\n               // parse the rules because they were stored as a string\n               // check if rules are still a string...if so lets parse them\n               if (typeof f.settings.validationRules === \"string\") {\n                  f.settings.validationRules = JSON.parse(\n                     f.settings.validationRules\n                  );\n               }\n               // there could be more than one so lets loop through and build the UI\n               f.settings.validationRules.forEach((rule) => {\n                  var Filter = this.AB.filterComplexNew(\n                     `${f.columnName}_${webix.uid()}`\n                  );\n                  // add the new ui to an array so we can add them all at the same time\n                  validationUI.push(Filter.ui);\n                  // store the filter's info so we can assign values and settings after the ui is rendered\n                  fieldValidations.push({\n                     filter: Filter,\n                     view: Filter.ids.querybuilder,\n                     columnName: f.columnName,\n                     validationRules: rule.rules,\n                     invalidMessage: rule.invalidMessage,\n                  });\n               });\n            }\n         });\n      }\n\n      var fieldValidationsHolder = [\n         {\n            hidden: true,\n            rows: validationUI,\n         },\n         // {},\n      ];\n\n      // an ABViewForm_ is a collection of rows:\n      var _ui = {\n         // view: \"scrollview\",\n         // height: this.settings.height || ABViewFormPropertyComponentDefaults.height,\n         // body: {\n         id: ids.component,\n         view: \"form\",\n         abid: this.id,\n         rows: component.ui.rows.concat(fieldValidationsHolder),\n         // elementsConfig: {\n         //    on: {\n         //       onChange: function(newv, oldv) {\n         //          this.validate();\n         //       }\n         //    }\n         // }\n         // }\n      };\n\n      // make sure each of our child views get .init() called\n      var _init = (options, accessLevel) => {\n         // register our callbacks:\n         if (options) {\n            for (var c in _logic.callbacks) {\n               _logic.callbacks[c] = options[c] || _logic.callbacks[c];\n            }\n         }\n\n         component.init(options, accessLevel);\n\n         var Form = $$(ids.component);\n         if (Form) {\n            webix.extend(Form, webix.ProgressBar);\n         }\n\n         if (accessLevel < 2) {\n            Form.disable();\n         }\n\n         // bind a data collection to form component\n         let dc = this.datacollection;\n         if (dc) {\n            // listen DC events\n            this.eventAdd({\n               emitter: dc,\n               eventName: \"changeCursor\",\n               listener: (...p) => _logic.displayData(...p),\n            });\n\n            this.eventAdd({\n               emitter: dc,\n               eventName: \"initializingData\",\n               listener: () => {\n                  let Form = $$(ids.component);\n                  if (Form) {\n                     Form.disable();\n                     if (Form.showProgress) Form.showProgress({ type: \"icon\" });\n                  }\n               },\n            });\n\n            this.eventAdd({\n               emitter: dc,\n               eventName: \"initializedData\",\n               listener: () => {\n                  let Form = $$(ids.component);\n                  if (Form) {\n                     Form.enable();\n                     if (Form.hideProgress) Form.hideProgress();\n                  }\n               },\n            });\n\n            this.eventAdd({\n               emitter: dc,\n               eventName: \"ab.datacollection.update\",\n               listener: (msg, data) => {\n                  if (!data || !data.objectId) return;\n\n                  let object = dc.datasource;\n                  if (!object) return;\n\n                  if (\n                     object.id == data.objectId ||\n                     object.fields(\n                        (f) => f.settings.linkObject == data.objectId\n                     ).length > 0\n                  ) {\n                     let currData = dc.getCursor();\n                     if (currData) _logic.displayData(currData);\n                  }\n               },\n            });\n\n            // bind the cursor event of the parent DC\n            var linkDv = dc.datacollectionLink;\n            if (linkDv) {\n               // update the value of link field when data of the parent dc is changed\n               this.eventAdd({\n                  emitter: linkDv,\n                  eventName: \"changeCursor\",\n                  listener: (...p) => _logic.displayParentData(...p),\n               });\n            }\n\n            if (fieldValidations.length) {\n               // we need to store the rules for use later so lets build a container array\n               var complexValidations = [];\n               fieldValidations.forEach((f) => {\n                  // init each ui to have the properties (app and fields) of the object we are editing\n                  // f.filter.applicationLoad(dc.datasource.application);\n                  f.filter.fieldsLoad(dc.datasource.fields());\n                  // now we can set the value because the fields are properly initialized\n                  f.filter.setValue(f.validationRules);\n                  // if there are validation rules present we need to store them in a lookup hash\n                  // so multiple rules can be stored on a single field\n                  if (!Array.isArray(complexValidations[f.columnName]))\n                     complexValidations[f.columnName] = [];\n\n                  // now we can push the rules into the hash\n                  complexValidations[f.columnName].push({\n                     filters: $$(f.view).getFilterHelper(),\n                     // values: $$(ids.component).getValues(),\n                     invalidMessage: f.invalidMessage,\n                  });\n               });\n               // use the lookup to build the validation rules\n               Object.keys(complexValidations).forEach(function (key) {\n                  // get our field that has validation rules\n                  var formField = $$(ids.component).queryView({\n                     name: key,\n                  });\n                  // store the rules in a data param to be used later\n                  formField.$view.complexValidations = complexValidations[key];\n                  // define validation rules\n                  formField.define(\"validate\", function (nval, oval, field) {\n                     // get field now that we are validating\n                     var fieldValidating = $$(ids.component).queryView({\n                        name: field,\n                     });\n                     // default valid is true\n                     var isValid = true;\n                     // check each rule that was stored previously on the element\n                     fieldValidating.$view.complexValidations.forEach(\n                        (filter) => {\n                           let object = dc.datasource;\n                           let data = this.getValues();\n                           // convert rowData from { colName : data } to { id : data }\n                           var newData = {};\n                           (object.fields() || []).forEach((field) => {\n                              newData[field.id] = data[field.columnName];\n                           });\n                           // for the case of \"this_object\" conditions:\n                           if (data.uuid) {\n                              newData[\"this_object\"] = data.uuid;\n                           }\n\n                           // use helper funtion to check if valid\n                           var ruleValid = filter.filters(newData);\n                           // if invalid we need to tell the field\n                           if (ruleValid == false) {\n                              isValid = false;\n                              // we also need to define an error message\n                              fieldValidating.define(\n                                 \"invalidMessage\",\n                                 filter.invalidMessage\n                              );\n                           }\n                        }\n                     );\n                     return isValid;\n                  });\n                  formField.refresh();\n               });\n            }\n         }\n\n         // init DC in record rules\n         if (\n            this.settings &&\n            this.settings.recordRules &&\n            this.settings.recordRules.length\n         ) {\n            this.settings.recordRules.forEach((rule) => {\n               if (\n                  !rule ||\n                  !rule.actionSettings ||\n                  !rule.actionSettings.valueRules ||\n                  !rule.actionSettings.valueRules.fieldOperations ||\n                  !rule.actionSettings.valueRules.fieldOperations.length\n               )\n                  return;\n               rule.actionSettings.valueRules.fieldOperations.forEach((op) => {\n                  if (op.valueType != \"exist\") return;\n\n                  let pullDataDC = this.AB.datacollectionByID(op.value);\n\n                  if (\n                     pullDataDC &&\n                     pullDataDC.dataStatus ==\n                        pullDataDC.dataStatusFlag.notInitial\n                  ) {\n                     pullDataDC.loadData();\n                  }\n               });\n            });\n         }\n\n         // _onShow();\n      };\n\n      this.timerId = undefined;\n\n      var _logic = (this._logic = {\n         callbacks: {\n            onBeforeSaveData: function () {\n               return true;\n            },\n            onSaveData: function (saveData) {},\n            clearOnLoad: function () {\n               return false;\n            },\n         },\n\n         displayData: (rowData) => {\n            var customFields = this.fieldComponents((comp) => {\n               return (\n                  comp instanceof ABViewFormCustom ||\n                  comp instanceof ABViewFormConnect ||\n                  // rich text\n                  (comp instanceof ABViewFormTextbox &&\n                     comp.settings.type == \"rich\")\n               );\n            });\n            // If setTimeout is already scheduled, no need to do anything\n            if (this.timerId) {\n               return;\n            }\n\n            this.timerId = setTimeout(() => {\n               var customFields = this.fieldComponents((comp) => {\n                  return (\n                     comp instanceof ABViewFormCustom ||\n                     comp instanceof ABViewFormConnect ||\n                     // rich text\n                     (comp instanceof ABViewFormTextbox &&\n                        comp.settings.type == \"rich\")\n                  );\n               });\n\n               // Set default values\n               if (rowData == null) {\n                  customFields.forEach((f) => {\n                     var field = f.field();\n                     if (!field) return;\n\n                     var comp = this.viewComponents[f.id];\n                     if (comp == null) return;\n\n                     // var colName = field.columnName;\n                     if (this._showed && comp.onShow) comp.onShow();\n\n                     // set value to each components\n                     var defaultRowData = {};\n                     field.defaultValue(defaultRowData);\n                     field.setValue(\n                        $$(comp.ui.inputId ? comp.ui.inputId : comp.ui.id),\n                        defaultRowData\n                     );\n\n                     comp.logic?.refresh?.(defaultRowData);\n                  });\n                  var normalFields = this.fieldComponents(\n                     (comp) =>\n                        comp instanceof ABViewFormComponent &&\n                        !(comp instanceof ABViewFormCustom)\n                  );\n                  normalFields.forEach((f) => {\n                     var field = f.field();\n                     if (!field) return;\n\n                     var comp = this.viewComponents[f.id];\n                     if (comp == null) return;\n\n                     if (f.key != \"button\") {\n                        var colName = field.columnName;\n\n                        // set value to each components\n                        var values = {};\n                        field.defaultValue(values);\n\n                        if ($$(comp.ui.id))\n                           $$(comp.ui.id).setValue?.(\n                              values[colName] == null ? \"\" : values[colName]\n                           );\n                     }\n                  });\n               }\n\n               // Populate value to custom fields\n               else {\n                  customFields.forEach((f) => {\n                     var comp = this.viewComponents[f.id];\n                     if (comp == null) return;\n\n                     if (this._showed) comp.onShow?.();\n\n                     // set value to each components\n                     if (f.field()) {\n                        if (comp.ui.inputId) {\n                           f.field().setValue($$(comp.ui.inputId), rowData);\n                        } else {\n                           f.field().setValue($$(comp.ui.id), rowData);\n                        }\n                     }\n\n                     comp.logic?.refresh?.(rowData);\n                  });\n               }\n               this.timerId = undefined;\n            }, 80);\n         },\n\n         displayParentData: (rowData) => {\n            let dv = this.datacollection;\n            var currCursor = dv.getCursor();\n\n            // If the cursor is selected, then it will not update value of the parent field\n            if (currCursor != null) return;\n\n            var Form = $$(ids.component),\n               relationField = dv.fieldLink;\n\n            if (relationField == null) return;\n\n            // Pull a component of relation field\n            var relationFieldCom = this.fieldComponents((comp) => {\n               if (!(comp instanceof ABViewFormComponent)) return false;\n\n               return comp.field() && comp.field().id == relationField.id;\n            })[0];\n\n            if (relationFieldCom == null) return;\n\n            var relationFieldView = this.viewComponents[relationFieldCom.id].ui\n               .inputId;\n            // if (\n            //    this.viewComponents[relationFieldCom.id].ui.rows &&\n            //    this.viewComponents[relationFieldCom.id].ui.rows[0] &&\n            //    this.viewComponents[relationFieldCom.id].ui.rows[0].id\n            // ) {\n            //    relationFieldView = this.viewComponents[relationFieldCom.id].ui\n            //       .rows[0].id;\n            // }\n            if (relationFieldView == null) return;\n\n            var relationElem = $$(relationFieldView),\n               relationName = relationField.relationName();\n\n            // pull data of parent's dc\n            var formData = {};\n            formData[relationName] = rowData;\n\n            // set data of parent to default value\n            relationField.setValue(relationElem, formData);\n         },\n      });\n\n      var _onShow = (data) => {\n         this._showed = true;\n\n         // call .onShow in the base component\n         component.onShow();\n\n         var Form = $$(ids.component);\n\n         // var customFields = this.fieldComponents((comp) => {\n         // \treturn (comp instanceof ABViewFormCustom) ||\n         // \t\t// rich text\n         // \t\t((comp instanceof ABViewFormTextbox) && comp.settings.type == 'rich')\n         // });\n         // customFields.forEach((f) => {\n\n         // \tvar field = f.field();\n         // \tif (!field) return;\n\n         // \tvar component = this.viewComponents[f.id];\n         // \tif (!component) return;\n\n         // \t// set value to each components\n         // \tvar rowData = {};\n         // \tfield.defaultValue(rowData);\n         // \tfield.setValue($$(component.ui.id), rowData);\n\n         // });\n\n         var dc = this.datacollection;\n         if (dc) {\n            if (Form) dc.bind(Form);\n\n            // clear current cursor on load\n            // if (this.settings.clearOnLoad || _logic.callbacks.clearOnLoad() ) {\n            if (this.settings.clearOnLoad) {\n               dc.setCursor(null);\n               _logic.displayData(null);\n            }\n            // if the cursor is cleared before or after we need to make\n            // sure the reload view button does not appear\n            if (this.settings.clearOnLoad || this.settings.clearOnSave) {\n               if ($$(ids.component + \"_reloadView\"))\n                  $$(ids.component + \"_reloadView\")\n                     .getParentView()\n                     .removeView(ids.component + \"_reloadView\");\n            }\n\n            // pull data of current cursor\n            data = dc.getCursor();\n\n            // do this for the initial form display so we can see defaults\n            _logic.displayData(data);\n\n            // select parent data to default value\n            var linkDv = dc.datacollectionLink;\n            if (data == null && linkDv) {\n               var parentData = linkDv.getCursor();\n               _logic.displayParentData(parentData);\n            }\n         } else {\n            // show blank data in the form\n            _logic.displayData(data);\n         }\n\n         //Focus on first focusable component\n         this.focusOnFirst();\n\n         if (Form) Form.adjust();\n      };\n\n      return {\n         ui: _ui,\n         init: _init,\n         logic: _logic,\n\n         onShow: _onShow,\n      };\n   }\n\n   refreshDefaultButton(ids) {\n      // If default button is not exists, then skip this\n      let defaultButton = this.views(\n         (v) => v instanceof ABViewFormButton && v.settings.isDefault\n      )[0];\n\n      // Add a default button\n      if (defaultButton == null) {\n         defaultButton = ABViewFormButton.newInstance(this.application, this);\n         defaultButton.settings.isDefault = true;\n      }\n      // Remove default button from array, then we will add it to be the last item later (.push)\n      else {\n         this._views = this.views(\n            (v) => !(v instanceof ABViewFormButton) && !v.settings.isDefault\n         );\n      }\n\n      // Calculate position Y of the default button\n      let yList = this.views().map((v) => (v.position.y || 0) + 1);\n      yList.push(this._views.length || 0);\n      yList.push($$(ids.fields).length || 0);\n      let posY = Math.max(...yList);\n\n      // Update to be the last item\n      defaultButton.position.y = posY;\n\n      // Keep the default button is always the last item of array\n      this._views.push(defaultButton);\n\n      return defaultButton;\n   }\n\n   /**\n    * @method getFormValues\n    *\n    * @param {webix form} formView\n    * @param {ABObject} obj\n    * @param {ABDatacollection} dc\n    * @param {ABDatacollection} dcLink [optional]\n    */\n   getFormValues(formView, obj, dc, dcLink) {\n      // get the fields that are on this form\n      var visibleFields = [\"id\"]; // we always want the id so we can udpate records\n      var loopForm = formView.getValues(function (obj) {\n         visibleFields.push(obj.config.name);\n      });\n\n      // only get data passed from form\n      let allVals = formView.getValues();\n      let formVals = {};\n      visibleFields.forEach((val) => {\n         formVals[val] = allVals[val];\n      });\n\n      // get custom values\n      var customFields = this.fieldComponents(\n         (comp) =>\n            comp instanceof ABViewFormCustom ||\n            comp instanceof ABViewFormConnect ||\n            comp instanceof ABViewFormSelectMultiple\n      );\n      customFields.forEach((f) => {\n         var vComponent = this.viewComponents[f.id];\n         if (vComponent == null) return;\n\n         let field = f.field();\n         if (field) {\n            formVals[field.columnName] = vComponent.logic.getValue(formVals);\n         }\n      });\n\n      // remove connected fields if they were not on the form and they are present in the formVals because it is a datacollection\n      obj.connectFields().forEach((f) => {\n         if (\n            visibleFields.indexOf(f.columnName) == -1 &&\n            formVals[f.columnName]\n         ) {\n            delete formVals[f.columnName];\n            delete formVals[f.relationName()];\n         }\n      });\n\n      // clear undefined values or empty arrays\n      for (var prop in formVals) {\n         if (formVals[prop] == null || formVals[prop].length == 0)\n            formVals[prop] = \"\";\n      }\n\n      // Add parent's data collection cursor when a connect field does not show\n      let linkValues;\n\n      if (dcLink) {\n         linkValues = dcLink.getCursor();\n      }\n\n      if (linkValues) {\n         var objectLink = dcLink.datasource;\n\n         var connectFields = obj.connectFields();\n         connectFields.forEach((f) => {\n            var formFieldCom = this.fieldComponents((fComp) => {\n               return fComp.field && fComp.field().id == f.id;\n            });\n\n            if (\n               objectLink.id == f.settings.linkObject &&\n               formFieldCom.length < 1 && // check field does not show\n               formVals[f.columnName] === undefined\n            ) {\n               let linkColName = f.indexField\n                  ? f.indexField.columnName\n                  : objectLink.PK();\n\n               formVals[f.columnName] = {};\n               formVals[f.columnName][linkColName] =\n                  linkValues[linkColName] || linkValues.id;\n            }\n         });\n      }\n\n      // NOTE: need to pull data of current cursor to calculate Calculate & Formula fields\n      // .formVals variable does not include data that does not display in the Form widget\n      let cursorFormVals = Object.assign(dc.getCursor() || {}, formVals);\n\n      // Set value of calculate or formula fields to use in record rule\n      obj.fields((f) => f.key == \"calculate\" || f.key == \"formula\").forEach(\n         (f) => {\n            if (formVals[f.columnName] == null) {\n               formVals[f.columnName] = f.format(cursorFormVals, true);\n            }\n         }\n      );\n\n      return formVals;\n   }\n\n   /**\n    * @method validateData\n    *\n    * @param {webix form} formView\n    * @param {ABObject} object\n    * @param {object} formVals\n    *\n    * @return {boolean} isValid\n    */\n   validateData(formView, object, formVals) {\n      let isValid = true;\n\n      // validate required fields\n      let requiredFields = this.fieldComponents(\n         (fComp) =>\n            (fComp.field &&\n               fComp.field() &&\n               fComp.field().settings.required == true) ||\n            fComp.settings.required == true\n      ).map((fComp) => fComp.field());\n\n      // validate data\n      let validator;\n      if (isValid) {\n         validator = object.isValidData(formVals);\n         isValid = validator.pass();\n      }\n\n      $$(formView).validate();\n\n      // Display required messages\n      requiredFields.forEach((f) => {\n         if (f && !formVals[f.columnName] && formVals[f.columnName] != \"0\") {\n            formView.markInvalid(f.columnName, L(\"This is a required field.\"));\n            isValid = false;\n\n            // Fix position of invalid message\n            let $forminput = formView.elements[f.columnName];\n            if ($forminput) {\n               // Y position\n               let height = $forminput.$height;\n               if (height < 56) {\n                  $forminput.define(\"height\", 60);\n                  $forminput.resize();\n               }\n\n               // X position\n               let domInvalidMessage = $forminput.$view.getElementsByClassName(\n                  \"webix_inp_bottom_label\"\n               )[0];\n               if (\n                  domInvalidMessage &&\n                  !domInvalidMessage.style[\"margin-left\"]\n               ) {\n                  domInvalidMessage.style.marginLeft = `${\n                     this.settings.labelWidth ||\n                     ABViewFormPropertyComponentDefaults.labelWidth\n                  }px`;\n               }\n            }\n         }\n      });\n\n      // if data is invalid\n      if (!isValid) {\n         let saveButton = formView.queryView({\n            view: \"button\",\n            type: \"form\",\n         });\n\n         // error message\n         if (validator && validator.errors && validator.errors.length) {\n            validator.errors.forEach((err) => {\n               formView.markInvalid(err.name, err.message);\n            });\n\n            if (saveButton) saveButton.disable();\n         } else {\n            if (saveButton) saveButton.enable();\n         }\n      }\n\n      return isValid;\n   }\n\n   /**\n    * @method recordRulesReady()\n    * This returns a Promise that gets resolved when all record rules report\n    * that they are ready.\n    * @return {Promise}\n    */\n   async recordRulesReady() {\n      return this.RecordRule.rulesReady();\n   }\n\n   /**\n    * @method saveData\n    * save data in to database\n    * @param formView - webix's form element\n    *\n    * @return {Promise}\n    */\n   async saveData(formView) {\n      // call .onBeforeSaveData event\n      // if this function returns false, then it will not go on.\n      if (!this._logic.callbacks.onBeforeSaveData()) return;\n\n      // form validate\n      if (!formView || !formView.validate()) {\n         // TODO : error message\n         return;\n      }\n\n      formView.clearValidation();\n\n      // get ABDatacollection\n      var dv = this.datacollection;\n      if (dv == null) return;\n\n      // get ABObject\n      var obj = dv.datasource;\n      if (obj == null) return;\n\n      // get ABModel\n      var model = dv.model;\n      if (model == null) return;\n\n      // get update data\n      var formVals = this.getFormValues(\n         formView,\n         obj,\n         dv,\n         dv.datacollectionLink\n      );\n\n      // wait for our Record Rules to be ready before we continue.\n      await this.recordRulesReady();\n\n      // update value from the record rule (pre-update)\n      this.doRecordRulesPre(formVals);\n\n      // validate data\n      if (!this.validateData(formView, obj, formVals)) {\n         return;\n      }\n\n      // show progress icon\n      formView.showProgress?.({ type: \"icon\" });\n\n      // form ready function\n      var formReady = (newFormVals) => {\n         // clear cursor after saving.\n         if (dv) {\n            if (this.settings.clearOnSave) {\n               dv.setCursor(null);\n               formView.clear();\n            } else {\n               if (newFormVals && newFormVals.id) dv.setCursor(newFormVals.id);\n            }\n         }\n\n         formView.hideProgress?.();\n\n         // if there was saved data pass it up to the onSaveData callback\n         if (newFormVals) this._logic.callbacks.onSaveData(newFormVals);\n      };\n\n      let formError = (err) => {\n         let saveButton = formView.queryView({\n            view: \"button\",\n            type: \"form\",\n         });\n\n         // mark error\n         if (err) {\n            if (err.invalidAttributes) {\n               for (let attr in err.invalidAttributes) {\n                  let invalidAttrs = err.invalidAttributes[attr];\n                  if (invalidAttrs && invalidAttrs[0])\n                     invalidAttrs = invalidAttrs[0];\n\n                  formView.markInvalid(attr, invalidAttrs.message);\n               }\n            } else if (err.sqlMessage) {\n               webix.message({\n                  text: err.sqlMessage,\n                  type: \"error\",\n               });\n            } else {\n               webix.message({\n                  text: \"System could not save your data\",\n                  type: \"error\",\n               });\n               this.AB.notify.developer(err, {\n                  message: \"Could not save your data\",\n                  view: this.toObj(),\n               });\n            }\n         }\n\n         saveButton?.enable();\n\n         formView?.hideProgress?.();\n      };\n\n      let newFormVals;\n      // {obj}\n      // The fully populated values returned back from service call\n      // We use this in our post processing Rules\n\n      try {\n         // is this an update or create?\n         if (formVals.id) {\n            newFormVals = await model.update(formVals.id, formVals);\n         } else {\n            newFormVals = await model.create(formVals);\n         }\n      } catch (err) {\n         formError(err.data);\n         throw err;\n      }\n\n      try {\n         await this.doRecordRules(newFormVals);\n         // make sure any updates from RecordRules get passed along here.\n         this.doSubmitRules(newFormVals);\n         formReady(newFormVals);\n         return newFormVals;\n      } catch (err) {\n         this.AB.notify.developer(err, {\n            message: \"Error processing Record Rules.\",\n            view: this.toObj(),\n            newFormVals: newFormVals,\n         });\n         // Question:  how do we respond to an error?\n         // ?? just keep going ??\n         this.doSubmitRules(newFormVals);\n         formReady(newFormVals);\n         return;\n      }\n   }\n\n   focusOnFirst() {\n      var topPosition = 0;\n      var topPositionId = \"\";\n      this.views().forEach((item) => {\n         if (item.key == \"textbox\" || item.key == \"numberbox\") {\n            if (item.position.y == topPosition) {\n               topPosition = item.position.y;\n               topPositionId = item.id;\n            }\n         }\n      });\n      var childComponent = this.viewComponents[topPositionId];\n      if (childComponent && $$(childComponent.ui.id)) {\n         $$(childComponent.ui.id).focus();\n      }\n   }\n};\n","const ABViewFormButtonCore = require(\"../../core/views/ABViewFormButtonCore\");\n\nconst ABViewFormButtonPropertyComponentDefaults = ABViewFormButtonCore.defaultValues();\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABViewFormButton extends ABViewFormButtonCore {\n   // constructor(values, application, parent, defaultValues) {\n   //    super(values, application, parent, defaultValues);\n   // }\n\n   //\n   //\tEditor Related\n   //\n\n   /**\n    * @method editorComponent\n    * return the Editor for this UI component.\n    * the editor should display either a \"block\" view or \"preview\" of\n    * the current layout of the view.\n    * @param {string} mode what mode are we in ['block', 'preview']\n    * @return {Component}\n    */\n   editorComponent(App, mode) {\n      var idBase = \"ABViewFormButtonEditorComponent\";\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n      };\n\n      var button = this.component(App).ui;\n      button.id = ids.component;\n\n      var _ui = {\n         rows: [button, {}],\n      };\n\n      var _init = (options) => {};\n\n      var _logic = {};\n\n      return {\n         ui: _ui,\n         init: _init,\n         logic: _logic,\n      };\n   }\n\n   //\n   // Property Editor\n   //\n\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\n      var commonUI = super.propertyEditorDefaultElements(\n         App,\n         ids,\n         _logic,\n         ObjectDefaults\n      );\n\n      // in addition to the common .label  values, we\n      // ask for:\n      return commonUI.concat([\n         {\n            name: \"includeSave\",\n            view: \"checkbox\",\n            label: L(\"Save\"),\n         },\n         {\n            name: \"saveLabel\",\n            view: \"text\",\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n            label: L(\"Save Label\"),\n            placeholder: L(\"Save Placeholder\"),\n         },\n         {\n            name: \"includeCancel\",\n            view: \"checkbox\",\n            label: L(\"Cancel\"),\n         },\n         {\n            name: \"cancelLabel\",\n            view: \"text\",\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n            label: L(\"Cancel Label\"),\n            placeholder: L(\"Cancel Placeholder\"),\n         },\n         {\n            name: \"includeReset\",\n            view: \"checkbox\",\n            label: L(\"Reset\"),\n         },\n         {\n            name: \"resetLabel\",\n            view: \"text\",\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n            label: L(\"Reset Label\"),\n            placeholder: L(\"Reset Placeholder\"),\n         },\n         {\n            name: \"afterCancel\",\n            view: \"richselect\",\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n            label: L(\"After Cancel\"),\n            // options: []\n         },\n         {\n            name: \"alignment\",\n            view: \"richselect\",\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n            label: L(\"Alignment\"),\n            options: [\n               {\n                  id: \"left\",\n                  value: L(\"Left\"),\n               },\n               {\n                  id: \"center\",\n                  value: L(\"Center\"),\n               },\n               {\n                  id: \"right\",\n                  value: L(\"Right\"),\n               },\n            ],\n         },\n      ]);\n   }\n\n   static propertyEditorPopulate(App, ids, view) {\n      super.propertyEditorPopulate(App, ids, view);\n\n      var pagesList = [];\n      var allPage = view.application.pages();\n      view.AddPagesToList(pagesList, view.application, view.pageRoot().id);\n\n      var opts = pagesList.map(function (opt) {\n         return {\n            id: opt.id,\n            value: opt.value,\n         };\n      });\n      $$(ids.afterCancel).define(\"options\", opts);\n\n      $$(ids.includeSave).setValue(\n         view.settings.includeSave != null\n            ? view.settings.includeSave\n            : ABViewFormButtonPropertyComponentDefaults.includeSave\n      );\n      $$(ids.includeCancel).setValue(\n         view.settings.includeCancel != null\n            ? view.settings.includeCancel\n            : ABViewFormButtonPropertyComponentDefaults.includeCancel\n      );\n      $$(ids.includeReset).setValue(\n         view.settings.includeReset != null\n            ? view.settings.includeReset\n            : ABViewFormButtonPropertyComponentDefaults.includeReset\n      );\n\n      $$(ids.saveLabel).setValue(view.settings.saveLabel || \"\");\n      $$(ids.cancelLabel).setValue(view.settings.cancelLabel || \"\");\n      $$(ids.resetLabel).setValue(view.settings.resetLabel || \"\");\n\n      $$(ids.afterCancel).setValue(\n         view.settings.afterCancel ||\n            ABViewFormButtonPropertyComponentDefaults.afterCancel\n      );\n      $$(ids.alignment).setValue(\n         view.settings.alignment ||\n            ABViewFormButtonPropertyComponentDefaults.alignment\n      );\n   }\n\n   static propertyEditorValues(ids, view) {\n      super.propertyEditorValues(ids, view);\n\n      view.settings.includeSave = $$(ids.includeSave).getValue();\n      view.settings.saveLabel = $$(ids.saveLabel).getValue();\n      view.settings.includeCancel = $$(ids.includeCancel).getValue();\n      view.settings.cancelLabel = $$(ids.cancelLabel).getValue();\n      view.settings.includeReset = $$(ids.includeReset).getValue();\n      view.settings.resetLabel = $$(ids.resetLabel).getValue();\n      view.settings.afterCancel = $$(ids.afterCancel).getValue();\n      view.settings.alignment = $$(ids.alignment).getValue();\n   }\n\n   /**\n    * @method component()\n    * return a UI component based upon this view.\n    * @param {obj} App\n    * @return {obj} UI component\n    */\n   component(App) {\n      var idBase = this.parentFormUniqueID(`ABViewFormButton_${this.id}_f_`);\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n      };\n\n      var form = this.parentFormComponent();\n\n      var _ui = {\n         id: ids.component,\n         cols: [],\n      };\n\n      var alignment =\n         this.settings.alignment ||\n         ABViewFormButtonPropertyComponentDefaults.alignment;\n\n      // spacer\n      if (alignment == \"center\" || alignment == \"right\") {\n         _ui.cols.push({});\n      }\n\n      // cancel button\n      if (this.settings.includeCancel) {\n         _ui.cols.push(\n            {\n               view: \"button\",\n               autowidth: true,\n               value: this.settings.cancelLabel || L(\"Cancel\"),\n               click: function () {\n                  _logic.onCancel(this);\n               },\n               on: {\n                  onAfterRender: function () {\n                     this.getInputNode().setAttribute(\n                        \"data-cy\",\n                        \"button cancel \" + form.id\n                     );\n                  },\n               },\n            },\n            {\n               width: 10,\n            }\n         );\n      }\n\n      // reset button\n      if (this.settings.includeReset) {\n         _ui.cols.push(\n            {\n               view: \"button\",\n               autowidth: true,\n               value: this.settings.resetLabel || L(\"Reset\"),\n               click: function () {\n                  _logic.onClear(this);\n               },\n               on: {\n                  onAfterRender: function () {\n                     this.getInputNode().setAttribute(\n                        \"data-cy\",\n                        \"button reset \" + form.id\n                     );\n                  },\n               },\n            },\n            {\n               width: 10,\n            }\n         );\n      }\n\n      // save button\n      if (this.settings.includeSave) {\n         _ui.cols.push({\n            view: \"button\",\n            type: \"form\",\n            css: \"webix_primary\",\n            autowidth: true,\n            value: this.settings.saveLabel || L(\"Save\"),\n            click: function () {\n               _logic.callbacks.onSaveClick(this);\n            },\n            on: {\n               onAfterRender: function () {\n                  this.getInputNode().setAttribute(\n                     \"data-cy\",\n                     \"button save \" + form.id\n                  );\n               },\n            },\n         });\n      }\n\n      // spacer\n      if (alignment == \"center\" || alignment == \"left\") {\n         _ui.cols.push({});\n      }\n\n      // make sure each of our child views get .init() called\n      var _init = (options) => {\n         // register our callbacks:\n         if (options) {\n            for (var c in _logic.callbacks) {\n               _logic.callbacks[c] = options[c] || _logic.callbacks[c];\n            }\n         }\n      };\n\n      var _logic = (this._logic = {\n         callbacks: {\n            onCancelClick: function () {\n               return true;\n            },\n            onSaveClick: function (saveButton) {\n               _logic.onSave(saveButton);\n            },\n         },\n\n         onCancel: (cancelButton) => {\n            // attempt to call onCancleClick callback...if no override is set we simply return false\n            var shouldContinue = _logic.callbacks.onCancelClick();\n\n            // if override was called we should have returned true so we can stop now\n            if (!shouldContinue) {\n               return false;\n            }\n\n            // get form component\n            var form = this.parentFormComponent();\n\n            // get ABDatacollection\n            var dc = form.datacollection;\n\n            // clear cursor of DC\n            if (dc) {\n               dc.setCursor(null);\n            }\n\n            if (cancelButton.getFormView()) cancelButton.getFormView().clear();\n\n            if (this.settings.afterCancel)\n               super.changePage(this.settings.afterCancel);\n            // If the redirect page is not defined, then redirect to parent page\n            else {\n               var noPopupFilter = (p) =>\n                  p.settings && p.settings.type != \"popup\";\n\n               var pageCurr = this.pageParent();\n               if (pageCurr) {\n                  var pageParent =\n                     pageCurr.pageParent(noPopupFilter) || pageCurr;\n\n                  if (pageParent) super.changePage(pageParent.id);\n               }\n            }\n         },\n\n         onClear: (resetButton) => {\n            // get form component\n            var form = this.parentFormComponent();\n\n            // get ABDatacollection\n            var dc = form.datacollection;\n\n            // clear cursor of DC\n            if (dc) {\n               dc.setCursor(null);\n            }\n\n            if (resetButton.getFormView()) resetButton.getFormView().clear();\n         },\n\n         onSave: (saveButton) => {\n            // get form component\n            var form = this.parentFormComponent();\n            var formView = saveButton.getFormView();\n\n            // disable the save button\n            saveButton.disable();\n\n            // save data\n            form\n               .saveData(formView)\n               .then(() => {\n                  if (saveButton && saveButton.$view) saveButton.enable();\n\n                  //Focus on first focusable component\n                  form.focusOnFirst();\n               })\n               .catch(() => {\n                  if (saveButton && saveButton.$view) saveButton.enable();\n               });\n         },\n      });\n\n      return {\n         ui: _ui,\n         init: _init,\n         logic: _logic,\n      };\n   }\n\n   AddPagesToList(pagesList, parent, rootPageId) {\n      if (!parent || !parent.pages || !pagesList) return;\n\n      var pages = parent.pages() || [];\n\n      pages.forEach((page) => {\n         if (page.parent != null || page.id == rootPageId) {\n            pagesList.push({\n               id: page.id,\n               value: page.label,\n            });\n\n            this.AddPagesToList(pagesList, page, page.id);\n         }\n      });\n   }\n\n   /**\n    * @method parentFormUniqueID\n    * return a unique ID based upon the closest form object this component is on.\n    * @param {string} key  The basic id string we will try to make unique\n    * @return {string}\n    */\n   parentFormUniqueID(key) {\n      var form = this.parentFormComponent();\n      var uniqueInstanceID;\n      if (form) {\n         uniqueInstanceID = form.uniqueInstanceID;\n      } else {\n         uniqueInstanceID = webix.uid();\n      }\n\n      return key + uniqueInstanceID;\n   }\n};\n","const ABViewFormCheckboxCore = require(\"../../core/views/ABViewFormCheckboxCore\");\n\nmodule.exports = class ABViewFormCheckbox extends ABViewFormCheckboxCore {\n   // constructor(values, application, parent, defaultValues) {\n   //    super(values, application, parent, defaultValues);\n   // }\n\n   //\n   //\tEditor Related\n   //\n\n   /**\n    * @method editorComponent\n    * return the Editor for this UI component.\n    * the editor should display either a \"block\" view or \"preview\" of\n    * the current layout of the view.\n    * @param {string} mode what mode are we in ['block', 'preview']\n    * @return {Component}\n    */\n   editorComponent(App, mode) {\n      var idBase = \"ABViewFormCheckboxEditorComponent\";\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n      };\n\n      var checkboxElem = this.component(App).ui;\n      checkboxElem.id = ids.component;\n\n      var _ui = {\n         rows: [checkboxElem, {}],\n      };\n\n      var _init = (options) => {};\n\n      var _logic = {};\n\n      return {\n         ui: _ui,\n         init: _init,\n         logic: _logic,\n      };\n   }\n\n   /**\n    * @method component()\n    * return a UI component based upon this view.\n    * @param {obj} App\n    * @return {obj} UI component\n    */\n   component(App) {\n      var component = super.component(App);\n\n      var idBase = this.parentFormUniqueID(`ABViewFormCheckbox_${this.id}_f_`);\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n      };\n\n      component.ui.id = ids.component;\n      component.ui.view = \"checkbox\";\n\n      // make sure each of our child views get .init() called\n      component.init = (options) => {};\n\n      return component;\n   }\n};\n","const ABViewFormComponentCore = require(\"../../core/views/ABViewFormComponentCore\");\n\nconst ABViewFormFieldPropertyComponentDefaults = ABViewFormComponentCore.defaultValues();\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABViewFormComponent extends ABViewFormComponentCore {\n   // constructor(values, application, parent, defaultValues) {\n   //    super(values, application, parent, defaultValues);\n   // }\n\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\n      var commonUI = super.propertyEditorDefaultElements(\n         App,\n         ids,\n         _logic,\n         ObjectDefaults\n      );\n\n      return commonUI.concat([\n         {\n            name: \"fieldLabel\",\n            view: \"text\",\n            disabled: true,\n            label: L(\"Field\"),\n         },\n         {\n            name: \"required\",\n            view: \"checkbox\",\n            labelWidth: this.AB.UISettings.config().labelWidthCheckbox,\n            labelRight: L(\"Required\"),\n         },\n         {\n            name: \"disable\",\n            view: \"checkbox\",\n            labelWidth: this.AB.UISettings.config().labelWidthCheckbox,\n            labelRight: L(\"Disable\"),\n         },\n      ]);\n   }\n\n   static propertyEditorPopulate(App, ids, view) {\n      super.propertyEditorPopulate(App, ids, view);\n\n      var field = view.field();\n\n      $$(ids.fieldLabel).setValue(field ? field.label : \"\");\n\n      if (field && field.settings.required == 1) {\n         $$(ids.required).setValue(field.settings.required);\n         $$(ids.required).disable();\n      } else {\n         $$(ids.required).setValue(\n            view.settings.required != null\n               ? view.settings.required\n               : ABViewFormFieldPropertyComponentDefaults.required\n         );\n      }\n\n      if (view && view.settings.disable == 1) {\n         $$(ids.disable).setValue(view.settings.disable);\n      } else {\n         $$(ids.disable).setValue(\n            ABViewFormFieldPropertyComponentDefaults.disable\n         );\n      }\n   }\n\n   static propertyEditorValues(ids, view) {\n      super.propertyEditorValues(ids, view);\n\n      // console.log(\"here\");\n      view.settings.required = $$(ids.required).getValue();\n      view.settings.disable = $$(ids.disable).getValue();\n      // console.log(view);\n   }\n\n   /*\n    * @component()\n    * return a UI component based upon this view.\n    * @param {obj} App\n    * @return {obj} UI component\n    */\n   component(App) {\n      // setup 'label' of the element\n      var form = this.parentFormComponent(),\n         field = this.field(),\n         label = \"\";\n\n      var settings = {};\n      if (form) settings = form.settings;\n\n      var _ui = {\n         labelPosition: settings.labelPosition,\n         labelWidth: settings.labelWidth,\n         label: label,\n      };\n\n      if (field != null) {\n         _ui.name = field.columnName;\n\n         // default value\n         var data = {};\n         field.defaultValue(data);\n         if (data[field.columnName]) _ui.value = data[field.columnName];\n\n         if (settings.showLabel == true) {\n            _ui.label = field.label;\n         }\n\n         if (\n            field.settings.required == true ||\n            this.settings.required == true\n         ) {\n            _ui.required = 1;\n         }\n\n         if (this.settings.disable == 1) {\n            _ui.disabled = true;\n         }\n\n         // add data-cy to form element for better testing code\n         _ui.on = {\n            onAfterRender() {\n               if (this.getList) {\n                  var popup = this.getPopup();\n                  if (!popup) return;\n                  this.getList().data.each((option) => {\n                     if (!option) return;\n                     var node = popup.$view.querySelector(\n                        \"[webix_l_id='\" + option.id + \"']\"\n                     );\n                     if (!node) return;\n                     node.setAttribute(\n                        \"data-cy\",\n                        `${field.key} options ${option.id} ${field.id} ${form.id}`\n                     );\n                  });\n               }\n               this.getInputNode().setAttribute(\n                  \"data-cy\",\n                  `${field.key} ${field.columnName} ${field.id} ${form.id}`\n               );\n            },\n         };\n\n         // this may be needed if we want to format data at this point\n         // if (field.format) data = field.format(data);\n\n         _ui.validate = (val, data, colName) => {\n            let validator = this.AB.Validation.validator();\n\n            field.isValidData(data, validator);\n\n            return validator.pass();\n         };\n      }\n\n      var _init = () => {};\n\n      return {\n         ui: _ui,\n         init: _init,\n      };\n   }\n\n   /**\n    * @method parentFormUniqueID\n    * return a unique ID based upon the closest form object this component is on.\n    * @param {string} key  The basic id string we will try to make unique\n    * @return {string}\n    */\n   parentFormUniqueID(key) {\n      var form = this.parentFormComponent();\n      var uniqueInstanceID;\n      if (form) {\n         uniqueInstanceID = form.uniqueInstanceID;\n      } else {\n         uniqueInstanceID = webix.uid();\n      }\n\n      return key + uniqueInstanceID;\n   }\n};\n","const ABViewFormConnectCore = require(\"../../core/views/ABViewFormConnectCore\");\nconst ABViewPropertyAddPage = require(\"./viewProperties/ABViewPropertyAddPage\")\n   .default;\nconst ABViewPropertyEditPage = require(\"./viewProperties/ABViewPropertyEditPage\")\n   .default;\n\nconst ABViewFormConnectPropertyComponentDefaults = ABViewFormConnectCore.defaultValues();\n\nconst ABPopupSort = require(\"../../../ABDesigner/ab_work_object_workspace_popupSortFields\");\n\nlet FilterComponent = null;\nlet SortComponent = null;\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nfunction _onShow(App, compId, instance, component) {\n   const elem = $$(compId);\n\n   if (!elem) return;\n\n   const field = instance.field();\n\n   if (!field) return;\n\n   const node = elem.$view;\n\n   if (!node) return;\n\n   const $node = $$(node);\n\n   if (!$node) return;\n\n   const filterConditions = instance.settings.objectWorkspace\n      .filterConditions || { glue: \"and\", rules: [] };\n\n   const getFilterByConnectValues = (conditions, depth = 0) => {\n      return [\n         ...conditions.rules\n            .filter((e) => e.rule === \"filterByConnectValue\")\n            .map((e) => {\n               const filterByConnectValue = Object.assign({}, e);\n\n               filterByConnectValue.depth = depth;\n\n               return filterByConnectValue;\n            }),\n      ].concat(\n         ...conditions.rules\n            .filter((e) => e.glue)\n            .map((e) => getFilterByConnectValues(e, depth + 1))\n      );\n   };\n\n   const filterByConnectValues = getFilterByConnectValues(filterConditions).map(\n      (e) => {\n         for (const key in instance.parent.viewComponents) {\n            const $ui = $$(instance.parent.viewComponents[key].ui.inputId);\n\n            if ($ui?.config?.name === e.value) {\n               // we need to use the element id stored in the settings to find out what the\n               // ui component id is so later we can use it to look up its current value\n               e.filterValue = $ui;\n\n               break;\n            }\n         }\n\n         const field = instance.AB.objectByID(\n            instance.settings.objectId\n         ).fieldByID(instance.settings.fieldId);\n         const linkedObject = instance.AB.objectByID(field.settings.linkObject);\n         const linkedField = linkedObject.fieldByID(e.key);\n\n         if (linkedField.settings.isCustomFK) {\n            // finally if this is a custom foreign key we need the stored columnName by\n            // default uuid is passed for all non CFK\n            e.filterColumn = instance.AB.objectByID(\n               linkedField.settings.linkObject\n            ).fields(\n               (filter) =>\n                  filter.id === linkedField.settings.indexField ||\n                  linkedField.settings.indexField2\n            )[0].columnName;\n         } else e.filterColumn = null;\n\n         return e;\n      }\n   );\n\n   instance.options = {\n      formView: instance.settings.formView,\n      filters: filterConditions,\n      sort: instance.settings.objectWorkspace.sortFields,\n      editable: instance.settings.disable === 1 ? false : true,\n      editPage:\n         !instance.settings.editForm || instance.settings.editForm === \"none\"\n            ? false\n            : true,\n      filterByConnectValues,\n   };\n\n   // if this field's options are filtered off another field's value we need\n   // to make sure the UX helps the user know what to do.\n   // fetch the options and set placeholder text for this view\n   if (instance.options.editable) {\n      const parentFields = [];\n\n      for (let i = 0; i < filterByConnectValues?.length; i++) {\n         if (\n            filterByConnectValues[i].filterValue &&\n            filterByConnectValues[i].key\n         ) {\n            const $filterValueConfig = $$(\n               filterByConnectValues[i].filterValue.config.id\n            );\n\n            let parentField = null;\n\n            if (!$filterValueConfig) {\n               // this happens in the Interface Builder when only the single form UI is displayed\n               parentField = {\n                  id: \"perentElement\",\n                  label: L(\"PARENT ELEMENT\"),\n               };\n            } else {\n               const value = field.getValue($filterValueConfig);\n\n               if (!value) {\n                  // if there isn't a value on the parent select element set this one to readonly and change placeholder text\n                  parentField = {\n                     id: filterByConnectValues[i].filterValue.config.id,\n                     label: $filterValueConfig.config.label,\n                  };\n               }\n\n               $filterValueConfig.attachEvent(\n                  \"onChange\",\n                  (e) => {\n                     const parentVal = $filterValueConfig.getValue();\n\n                     if (parentVal) {\n                        $node.define(\"disabled\", false);\n                        $node.define(\"placeholder\", L(\"Select items\"));\n                        field.getAndPopulateOptions(\n                           $node,\n                           instance.options,\n                           field,\n                           instance.parentFormComponent()\n                        );\n                     } else {\n                        $node.define(\"disabled\", true);\n                        $node.define(\n                           \"placeholder\",\n                           L(\"Must select item from '{0}' first.\", [\n                              $filterValueConfig.config.label,\n                           ])\n                        );\n                     }\n\n                     $node.setValue(\"\");\n                     $node.refresh();\n                  },\n                  false\n               );\n            }\n\n            if (\n               parentField &&\n               parentFields.findIndex((e) => e.id === parentField.id) < 0\n            )\n               parentFields.push(parentField);\n         }\n      }\n\n      if (parentFields.length && !$node.getValue()) {\n         $node.define(\"disabled\", true);\n         $node.define(\n            \"placeholder\",\n            L(\n               `Must select item from ${parentFields\n                  .map((e, i) => `'{${i}}'`)\n                  .join(\", \")} first.`,\n               parentFields.map((e) => e.label)\n            )\n         );\n      } else {\n         $node.define(\"disabled\", false);\n         $node.define(\"placeholder\", L(\"Select items\"));\n      }\n   } else {\n      $node.define(\"placeholder\", \"\");\n      $node.define(\"disabled\", true);\n   }\n\n   $node.refresh();\n\n   field.getAndPopulateOptions(\n      $node,\n      instance.options,\n      field,\n      instance.parentFormComponent()\n   );\n}\n\nmodule.exports = class ABViewFormConnect extends ABViewFormConnectCore {\n   /**\n    * @param {obj} values  key=>value hash of ABView values\n    * @param {ABApplication} application the application object this view is under\n    * @param {ABView} parent the ABView this view is a child of. (can be null)\n    */\n   constructor(values, application, parent, defaultValues) {\n      super(values, application, parent, defaultValues);\n\n      // Set filter value\n      this.__filterComponent = this.AB.filterComplexNew(\n         `${this.id}__filterComponent`\n      );\n      // this.__filterComponent.applicationLoad(application);\n      this.__filterComponent.fieldsLoad(\n         this.datasource ? this.datasource.fields() : [],\n         this.datasource ? this.datasource : null\n      );\n\n      if (\n         !this.settings.objectWorkspace ||\n         !this.settings.objectWorkspace.filterConditions\n      ) {\n         this.AB.error(\"Error: filter conditions do not exist\", {\n            error: \"filterConditions do not exist\",\n            viewLocation: {\n               application: this.application.name,\n               id: this.id,\n               name: this.label,\n            },\n            view: this,\n         });\n         // manually place an empty filter\n         this.settings[\"objectWorkspace\"] = {};\n         this.settings[\"objectWorkspace\"][\"filterConditions\"] = { glue: \"and\" };\n      }\n\n      this.__filterComponent.setValue(\n         this.settings.objectWorkspace.filterConditions ??\n            ABViewFormConnectPropertyComponentDefaults.filterConditions\n      );\n   }\n\n   //\n   //\tEditor Related\n   //\n\n   /**\n    * @method editorComponent\n    * return the Editor for this UI component.\n    * the editor should display either a \"block\" view or \"preview\" of\n    * the current layout of the view.\n    * @param {string} mode what mode are we in ['block', 'preview']\n    * @return {Component}\n    */\n   editorComponent(App, mode) {\n      let idBase = \"ABViewFormConnectEditorComponent\";\n      let ids = {\n         component: App.unique(`${idBase}_component`),\n      };\n\n      let baseComp = this.component(App);\n      let templateElem = baseComp.ui;\n      templateElem.id = ids.component;\n\n      var _ui = {\n         rows: [templateElem, {}],\n      };\n\n      return {\n         ui: _ui,\n         init: baseComp.init,\n         logic: baseComp.logic,\n         onShow: () => {\n            _onShow(App, ids.component, this, baseComp);\n         },\n      };\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      super.fromValues(values);\n\n      this.addPageTool.fromSettings(this.settings);\n      this.editPageTool.fromSettings(this.settings);\n   }\n\n   //\n   // Property Editor\n   //\n\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\n      var commonUI = super.propertyEditorDefaultElements(\n         App,\n         ids,\n         _logic,\n         ObjectDefaults\n      );\n\n      let idBase = \"ABViewFormConnectPropertyEditor\";\n      this.App = App;\n      this.idBase = idBase;\n\n      _logic.showFilterPopup = ($view) => {\n         this.filter_popup.show($view, null, { pos: \"top\" });\n      };\n\n      _logic.showSortPopup = ($button) => {\n         SortComponent.show($button, null, {\n            pos: \"top\",\n         });\n      };\n\n      _logic.onFilterChange = () => {\n         let view = _logic.currentEditObject();\n         let filterValues = FilterComponent.getValue() || {};\n\n         let allComplete = true;\n         (filterValues.rules || []).forEach((f) => {\n            // if all 3 fields are present, we are good.\n            if (f.key && f.rule && f.value) {\n               allComplete = allComplete && true;\n            } else {\n               // else, we found an entry that wasn't complete:\n               allComplete = false;\n            }\n         });\n\n         // only perform the update if a complete row is specified:\n         if (allComplete) {\n            // we want to call .save() but give webix a chance to properly update it's\n            // select boxes before this call causes them to be removed:\n            setTimeout(() => {\n               this.propertyEditorSave(ids, view);\n            }, 10);\n         }\n      };\n\n      _logic.onSortChange = () => {\n         let view = _logic.currentEditObject();\n         this.propertyEditorSave(ids, view);\n      };\n\n      // create filter & sort popups\n      this.initPopupEditors(App, ids, _logic);\n\n      let onSave = () => {\n         let currView = _logic.currentEditObject();\n         if (currView) {\n            // refresh settings\n            this.propertyEditorValues(ids, currView);\n\n            // trigger a save()\n            this.propertyEditorSave(ids, currView);\n         }\n      };\n\n      this.addPageProperty.init({\n         onSave: () => {\n            onSave();\n         },\n      });\n\n      this.editPageProperty.init({\n         onSave: () => {\n            onSave();\n         },\n      });\n\n      // in addition to the common .label  values, we\n      // ask for:\n      return commonUI.concat([\n         this.addPageProperty.ui,\n         this.editPageProperty.ui,\n         {\n            view: \"fieldset\",\n            name: \"addNewSettings\",\n            label: L(\"Add New Popup Settings:\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n            body: {\n               type: \"clean\",\n               padding: 10,\n               rows: [\n                  {\n                     view: \"text\",\n                     name: \"popupWidth\",\n                     placeholder: L(\"Set popup width\"),\n                     label: L(\"Width:\"),\n                     labelWidth: this.AB.UISettings.config().labelWidthLarge,\n                     validate: webix.rules.isNumber,\n                  },\n                  {\n                     view: \"text\",\n                     name: \"popupHeight\",\n                     placeholder: L(\"Set popup height\"),\n                     label: L(\"Height:\"),\n                     labelWidth: this.AB.UISettings.config().labelWidthLarge,\n                     validate: webix.rules.isNumber,\n                  },\n               ],\n            },\n         },\n         {\n            view: \"fieldset\",\n            name: \"advancedOption\",\n            label: L(\"Advanced Options:\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n            body: {\n               type: \"clean\",\n               padding: 10,\n               rows: [\n                  {\n                     cols: [\n                        {\n                           view: \"label\",\n                           label: L(\"Filter Options:\"),\n                           width: this.AB.UISettings.config().labelWidthLarge,\n                        },\n                        {\n                           view: \"button\",\n                           name: \"buttonFilter\",\n                           css: \"webix_primary\",\n                           label: L(\"Settings\"),\n                           icon: \"fa fa-gear\",\n                           type: \"icon\",\n                           badge: 0,\n                           click: function () {\n                              _logic.showFilterPopup(this.$view);\n                           },\n                        },\n                     ],\n                  },\n                  {\n                     rows: [\n                        {\n                           view: \"label\",\n                           label: L(\"Filter by Connected Field Value:\"),\n                        },\n                        {\n                           view: \"combo\",\n                           name: \"filterConnectedValue\",\n                           options: [], // we will add these in propertyEditorPopulate\n                        },\n                     ],\n                  },\n                  {\n                     height: 30,\n                  },\n                  {\n                     rows: [\n                        {\n                           cols: [\n                              {\n                                 view: \"label\",\n                                 label: L(\"Sort Options:\"),\n                                 width: App.config.labelWidthLarge,\n                              },\n                              {\n                                 view: \"button\",\n                                 name: \"buttonSort\",\n                                 css: \"webix_primary\",\n                                 label: L(\"Settings\"),\n                                 icon: \"fa fa-gear\",\n                                 type: \"icon\",\n                                 badge: 0,\n                                 click: function () {\n                                    _logic.showSortPopup(this.$view);\n                                 },\n                              },\n                           ],\n                        },\n                     ],\n                  },\n               ],\n            },\n         },\n      ]);\n   }\n\n   static propertyEditorPopulate(App, ids, view) {\n      super.propertyEditorPopulate(App, ids, view);\n\n      // Default set of options for filter connected combo\n      let filterConnectedOptions = [{ id: \"\", value: \"\" }];\n\n      // get the definitions for the connected field\n      let fieldDefs = view.AB.definitionForID(view.settings.fieldId);\n\n      // get the definition for the object that the field is related to\n      let objectDefs = view.AB.definitionForID(fieldDefs.settings.linkObject);\n\n      // we need these definitions later as we check to find out which field\n      // we are filtering by so push them into an array for later\n      let fieldsDefs = [];\n      objectDefs.fieldIDs.forEach((fld) => {\n         fieldsDefs.push(view.AB.definitionForID(fld));\n      });\n\n      // find out what connected objects this field has\n      let connectedObjs = view.application.connectedObjects(\n         fieldDefs.settings.linkObject\n      );\n\n      // loop through the form's elements (need to ensure that just looking at parent is okay in all cases)\n      view.parent.views().forEach((element) => {\n         // identify if element is a connected field\n         if (element.key == \"connect\") {\n            // we need to get the fields defs to find out what it is connected to\n            let formElementsDefs = view.AB.definitionForID(\n               element.settings.fieldId\n            );\n\n            // loop through the connected objects discovered above\n            connectedObjs.forEach((connObj) => {\n               // see if the connected object matches the connected object of the form element\n               if (connObj.id == formElementsDefs.settings.linkObject) {\n                  // get the ui id of this component that matches the link Object\n                  let fieldToCheck;\n                  fieldsDefs.forEach((fdefs) => {\n                     // if the field has a custom foreign key we need to store it\n                     // so selectivity later can know what value to get, otherwise\n                     // we just get the uuid of the record\n                     if (\n                        fdefs.settings.isCustomFK &&\n                        fdefs.settings.indexField != \"\" &&\n                        fdefs.settings.linkObject &&\n                        fdefs.settings.linkType == \"one\" &&\n                        fdefs.settings.linkObject ==\n                           formElementsDefs.settings.linkObject\n                     ) {\n                        fieldToCheck = fdefs.id;\n                        let customFK = view.application.definitionForID(\n                           fdefs.settings.indexField\n                        );\n\n                        // if the index definitions were found\n                        if (customFK) {\n                           fieldToCheck = `${fdefs.id}:${customFK.columnName}`;\n                        }\n                     } else if (\n                        fdefs.settings.linkObject &&\n                        fdefs.settings.linkType == \"one\" &&\n                        fdefs.settings.linkObject ==\n                           formElementsDefs.settings.linkObject\n                     ) {\n                        fieldToCheck = `${fdefs.id}:uuid`;\n                     }\n                  });\n\n                  // only add optinos that have a fieldToCheck\n                  if (fieldToCheck) {\n                     // get the component we are referencing so we can display its label\n                     let formComponent = view.parent.viewComponents[element.id]; // need to ensure that just looking at parent is okay in all cases\n                     filterConnectedOptions.push({\n                        id: `${formComponent.ui.name}:${fieldToCheck}`, // store the columnName name because the ui id changes on each load\n                        value: formComponent.ui.label, // should be the translated field label\n                     });\n                  }\n               }\n            });\n         }\n      });\n\n      // Set the options of the possible edit forms\n      this.addPageProperty.setSettings(view, view.settingsAddPage);\n      this.editPageProperty.setSettings(view, view.settingsEditPage);\n      $$(ids.filterConnectedValue).define(\"options\", filterConnectedOptions);\n      $$(ids.filterConnectedValue).setValue(view.settings.filterConnectedValue);\n\n      $$(ids.popupWidth).setValue(\n         view.settings.popupWidth ||\n            ABViewFormConnectPropertyComponentDefaults.popupWidth\n      );\n      $$(ids.popupHeight).setValue(\n         view.settings.popupHeight ||\n            ABViewFormConnectPropertyComponentDefaults.popupHeight\n      );\n\n      // initial populate of popups\n      this.populatePopupEditors(view);\n\n      // inform the user that some advanced settings have been set\n      this.populateBadgeNumber(ids, view);\n\n      // when a change is made in the properties the popups need to reflect the change\n      this.updateEventIds = this.updateEventIds || {}; // { viewId: boolean, ..., viewIdn: boolean }\n      if (!this.updateEventIds[view.id]) {\n         this.updateEventIds[view.id] = true;\n\n         view.addListener(\"properties.updated\", () => {\n            this.populatePopupEditors(view);\n            this.populateBadgeNumber(ids, view);\n         });\n      }\n   }\n\n   static propertyEditorValues(ids, view) {\n      super.propertyEditorValues(ids, view);\n\n      view.settings.popupWidth = $$(ids.popupWidth).getValue();\n      view.settings.popupHeight = $$(ids.popupHeight).getValue();\n      view.settings.filterConnectedValue = $$(\n         ids.filterConnectedValue\n      ).getValue();\n      view.settings.objectWorkspace = {\n         filterConditions: FilterComponent.getValue(),\n         sortFields: SortComponent.getValue(),\n      };\n\n      view.settingsAddPage = this.addPageProperty.getSettings(view);\n      view.settingsEditPage = this.editPageProperty.getSettings(view);\n\n      // refresh settings of app page tool\n      view.addPageTool.fromSettings(view.settingsAddPage);\n      view.editPageTool.fromSettings(view.settingsEditPage);\n   }\n\n   static populateBadgeNumber(ids, view) {\n      if (\n         view.settings.objectWorkspace &&\n         view.settings.objectWorkspace.filterConditions &&\n         view.settings.objectWorkspace.filterConditions.rules\n      ) {\n         $$(ids.buttonFilter).define(\n            \"badge\",\n            view.settings.objectWorkspace.filterConditions.rules.length || null\n         );\n         $$(ids.buttonFilter).refresh();\n      } else {\n         $$(ids.buttonFilter).define(\"badge\", null);\n         $$(ids.buttonFilter).refresh();\n      }\n\n      if (\n         view.settings.objectWorkspace &&\n         view.settings.objectWorkspace.sortFields &&\n         view.settings.objectWorkspace.sortFields.length\n      ) {\n         $$(ids.buttonSort).define(\n            \"badge\",\n            view.settings.objectWorkspace.sortFields.length || null\n         );\n         $$(ids.buttonSort).refresh();\n      } else {\n         $$(ids.buttonSort).define(\"badge\", null);\n         $$(ids.buttonSort).refresh();\n      }\n   }\n\n   static initPopupEditors(App, ids, _logic) {\n      var idBase = \"ABViewFormConnectPropertyEditor\";\n\n      FilterComponent = this.AB.filterComplexNew(`${idBase}_filter`);\n      FilterComponent.init();\n      // when we make a change in the popups we want to make sure we save the new workspace to the properties to do so just fire an onChange event\n      FilterComponent.on(\"change\", (val) => {\n         _logic.onFilterChange(val);\n      });\n\n      SortComponent = new ABPopupSort(this.App, `${idBase}_sort`);\n      SortComponent.init({\n         onChange: _logic.onSortChange,\n      });\n\n      this.filter_popup = webix.ui({\n         view: \"popup\",\n         width: 800,\n         hidden: true,\n         body: FilterComponent.ui,\n      });\n   }\n\n   static populatePopupEditors(view) {\n      let filterConditions =\n         ABViewFormConnectPropertyComponentDefaults.objectWorkspace\n            .filterConditions;\n\n      if (\n         view.settings.objectWorkspace &&\n         view.settings.objectWorkspace.filterConditions\n      )\n         filterConditions = view.settings.objectWorkspace.filterConditions;\n\n      // Populate data to popups\n      // FilterComponent.objectLoad(objectCopy);\n      let linkedObj;\n      let field = view.field();\n      if (field) {\n         linkedObj = field.datasourceLink;\n         if (linkedObj)\n            FilterComponent.fieldsLoad(linkedObj.fields(), linkedObj);\n      }\n\n      FilterComponent.setValue(filterConditions);\n\n      if (linkedObj) SortComponent.objectLoad(linkedObj);\n      SortComponent.setValue(view.settings.objectWorkspace.sortFields);\n   }\n\n   static get addPageProperty() {\n      return ABViewPropertyAddPage.propertyComponent(this.App, this.idBase);\n   }\n\n   static get editPageProperty() {\n      return ABViewPropertyEditPage.propertyComponent(this.App, this.idBase);\n   }\n\n   /**\n    * @method component()\n    * return a UI component based upon this view.\n    * @param {obj} App\n    * @return {obj} UI component\n    */\n   component(App, idPrefix) {\n      var field = this.field();\n      // this field may be deleted\n      if (!field) return super.component(App);\n\n      idPrefix = idPrefix ? idPrefix + \"_\" : \"\";\n\n      var component = super.component(App);\n      var form = this.parentFormComponent();\n      var idBase = this.parentFormUniqueID(\n         \"ABViewFormConnect_\" + this.id + \"_f_\"\n      );\n      var ids = {\n         component: App.unique(`${idPrefix}${idBase}_component`),\n         popup: App.unique(`${idPrefix}${idBase}_popup_add_new`),\n         editpopup: App.unique(\n            `${idPrefix}${idBase}_popup_edit_form_popup_add_new`\n         ),\n      };\n\n      var settings = {};\n      if (form) settings = form.settings;\n\n      let addPageComponent = this.addPageTool.component(App, idBase);\n      let editPageComponent;\n\n      component.init = (optionsParam) => {\n         var settings = {};\n         var options = optionsParam || {};\n         if (form) settings = form.settings;\n\n         addPageComponent.applicationLoad(this.application);\n         addPageComponent.init({\n            onSaveData: component.logic.callbackSaveData,\n            onCancelClick: component.logic.callbackCancel,\n            clearOnLoad: component.logic.callbackClearOnLoad,\n         });\n\n         editPageComponent = this.editPageTool.component(App, idBase);\n         editPageComponent.applicationLoad(this.application);\n         editPageComponent.init({\n            onSaveData: component.logic.callbackSaveData,\n            onCancelClick: component.logic.callbackCancel,\n            clearOnLoad: component.logic.callbackClearOnLoad,\n         });\n      };\n\n      component.logic = {\n         /**\n          * @function callbackSaveData\n          *\n          */\n         callbackSaveData: (saveData) => {\n            // find the selectivity component\n            var elem = $$(ids.component);\n            if (!elem) return;\n\n            field.once(\"option.data\", (data) => {\n               data.forEach((item) => {\n                  item.value = item.text;\n               });\n               $$(ids.component).getList().clearAll();\n               $$(ids.component).getList().define(\"data\", data);\n               if (field.settings.linkType == \"many\") {\n                  let currentVals = $$(ids.component).getValue();\n                  if (currentVals.indexOf(saveData.id) == -1) {\n                     $$(ids.component).setValue(\n                        currentVals\n                           ? currentVals + \",\" + saveData.id\n                           : saveData.id\n                     );\n                  }\n               } else {\n                  $$(ids.component).setValue(saveData.id);\n               }\n               // close the popup when we are finished\n               $$(ids.popup)?.close();\n               $$(ids.editpopup)?.close();\n            });\n\n            field\n               .getOptions(this.settings.objectWorkspace.filterConditions, \"\")\n               .then(function (data) {\n                  // we need new option that will be returned from server (above)\n                  // so we will not set this and then just reset it.\n               });\n         },\n\n         callbackCancel: () => {\n            $$(ids.popup).close();\n            return false;\n         },\n\n         callbackClearOnLoad: () => {\n            return true;\n         },\n\n         getValue: (rowData) => {\n            var elem = $$(ids.component);\n\n            return field.getValue(elem, rowData);\n         },\n\n         formBusy: ($form) => {\n            if (!$form) return;\n\n            if ($form.disable) $form.disable();\n\n            if ($form.showProgress) $form.showProgress({ type: \"icon\" });\n         },\n\n         formReady: ($form) => {\n            if (!$form) return;\n\n            if ($form.enable) $form.enable();\n\n            if ($form.hideProgress) $form.hideProgress();\n         },\n\n         goToEditPage: (rowId) => {\n            if (!this.settings.editForm) return;\n\n            let editForm = this.application.urlResolve(this.settings.editForm);\n            if (!editForm) return;\n\n            let $form;\n            let $elem = $$(ids.component);\n            if ($elem) {\n               $form = $elem.getFormView();\n            }\n\n            // Open the form popup\n            editPageComponent.onClick().then(() => {\n               let dc = editForm.datacollection;\n               if (dc) {\n                  dc.setCursor(rowId);\n\n                  if (!this.__editFormDcEvent) {\n                     this.__editFormDcEvent = dc.on(\"initializedData\", () => {\n                        dc.setCursor(rowId);\n                     });\n                  }\n               }\n            });\n         },\n      };\n\n      var multiselect = field.settings.linkType == \"many\";\n\n      component.ui.label = field.label;\n      component.ui.labelWidth = settings.labelWidth;\n      component.ui.id = ids.component;\n      component.ui.view = multiselect ? \"multicombo\" : \"combo\";\n      component.ui.on = {\n         onItemClick: (id, e) => {\n            if (\n               e.target.classList.contains(\"editConnectedPage\") &&\n               e.target.dataset.itemId\n            ) {\n               let rowId = e.target.dataset.itemId;\n               if (!rowId) return;\n               component.logic.goToEditPage(rowId);\n            }\n         },\n         onChange: (data) => {\n            let selectedValues;\n            if (Array.isArray(data)) {\n               selectedValues = [];\n               data.forEach((record) => {\n                  let recordObj = record;\n                  if (typeof record != \"object\") {\n                     // we need to convert either index or uuid to full data object\n                     recordObj = field.getItemFromVal(record);\n                  }\n                  if (recordObj && recordObj.id)\n                     selectedValues.push(recordObj.id);\n               });\n            } else {\n               selectedValues = data;\n               if (typeof data != \"object\") {\n                  // we need to convert either index or uuid to full data object\n                  selectedValues = field.getItemFromVal(data);\n               }\n               // selectedValues = field.pullRecordRelationValues(selectedValues);\n               if (selectedValues && selectedValues.id) {\n                  selectedValues = selectedValues.id;\n               } else {\n                  selectedValues = data;\n               }\n            }\n            // We can now set the new value but we need to block event listening\n            // so it doesn't trigger onChange again\n            const $$component = $$(ids.component);\n            if ($$component) {\n               $$component.blockEvent();\n               let prepedVals = selectedValues.join\n                  ? selectedValues.join()\n                  : selectedValues;\n               $$component.setValue(prepedVals);\n               $$component.unblockEvent();\n            }\n         },\n      };\n\n      component.ui.dataFieldId = field.id;\n\n      let editForm = \"\";\n      if (settings.editForm && settings.editForm != \"\") {\n         editForm =\n            '<i data-item-id=\"#id#\" class=\"fa fa-cog editConnectedPage\"></i>';\n      }\n      component.ui.suggest = {\n         button: true,\n         selectAll: multiselect ? true : false,\n         body: {\n            template: editForm + \"#value#\",\n         },\n         on: {\n            onShow: () => {\n               field.populateOptionsDataCy($$(ids.component), field, form);\n            },\n         },\n         // Support partial matches\n         filter: ({ value }, search) =>\n            value.toLowerCase().includes(search.toLowerCase()),\n      };\n\n      component.ui.onClick = {\n         customField: (id, e, trg) => {\n            if (this.settings.disable == 1) return;\n\n            var rowData = {};\n\n            if ($$(ids.component)) {\n               var node = $$(ids.component).$view;\n               field.customEdit(rowData, App, node);\n            }\n         },\n      };\n\n      if (addPageComponent.ui) {\n         // reset some component vals to make room for button\n         component.ui.label = \"\";\n         component.ui.labelWidth = 0;\n\n         // add click event to add new button\n         addPageComponent.ui.on = {\n            onItemClick: (id, evt) => {\n               let $form = $$(id).getFormView();\n\n               let dc = form.datacollection;\n\n               addPageComponent.onClick(dc);\n\n               return false;\n            },\n         };\n\n         component.ui = {\n            inputId: component.ui.id,\n            rows: [\n               {\n                  cols: [\n                     {\n                        view: \"label\",\n                        label: field.label,\n                        width: settings.labelWidth,\n                        align: \"left\",\n                     },\n                     addPageComponent.ui,\n                     component.ui,\n                  ],\n               },\n            ],\n         };\n      } else {\n         component.ui = {\n            inputId: component.ui.id,\n            rows: [component.ui],\n         };\n      }\n\n      component.onShow = () => {\n         _onShow(App, ids.component, this, component);\n         let elem = $$(ids.component);\n         if (!elem) return;\n\n         let node = elem.$view;\n\n         // Add data-cy attributes\n         const dataCy = `${field.key} ${field.columnName} ${field.id} ${this.parent.id}`;\n         node.setAttribute(\"data-cy\", dataCy);\n      };\n\n      return component;\n   }\n\n   get addPageTool() {\n      if (this.__addPageTool == null)\n         this.__addPageTool = new ABViewPropertyAddPage();\n\n      return this.__addPageTool;\n   }\n\n   get editPageTool() {\n      if (this.__editPageTool == null)\n         this.__editPageTool = new ABViewPropertyEditPage();\n\n      return this.__editPageTool;\n   }\n};\n","const ABViewFormCustomCore = require(\"../../core/views/ABViewFormCustomCore\");\n\nconst ABFieldImage = require(\"../dataFields/ABFieldImage\");\nconst DEFAULT_HEIGHT = 80;\n\nmodule.exports = class ABViewFormCustom extends ABViewFormCustomCore {\n   // constructor(values, application, parent, defaultValues) {\n   //    super(values, application, parent, defaultValues);\n   // }\n\n   //\n   //\tEditor Related\n   //\n\n   /**\n    * @method editorComponent\n    * return the Editor for this UI component.\n    * the editor should display either a \"block\" view or \"preview\" of\n    * the current layout of the view.\n    * @param {string} mode what mode are we in ['block', 'preview']\n    * @return {Component}\n    */\n   editorComponent(App, mode) {\n      var idBase = \"ABViewFormCustomEditorComponent\";\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n      };\n\n      var templateElem = this.component(App).ui;\n      templateElem.id = ids.component;\n\n      var _ui = {\n         rows: [templateElem, {}],\n      };\n\n      var _init = (options) => {};\n\n      var _logic = {};\n\n      return {\n         ui: _ui,\n         init: _init,\n         logic: _logic,\n      };\n   }\n\n   /**\n    * @method component()\n    * return a UI component based upon this view.\n    * @param {obj} App\n    * @return {obj} UI component\n    */\n   component(App) {\n      var component = super.component(App);\n      var field = this.field();\n      var form = this.parentFormComponent();\n\n      // this field may be deleted\n      if (!field) return component;\n\n      var idBase = this.parentFormUniqueID(`ABViewFormCustom_${this.id}_f_`);\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n      };\n\n      var settings = {};\n      if (form) settings = form.settings;\n\n      var requiredClass = \"\";\n      if (field.settings.required || this.settings.required) {\n         requiredClass = \"webix_required\";\n      }\n\n      var templateLabel = \"\";\n      if (settings.showLabel) {\n         if (settings.labelPosition == \"top\")\n            templateLabel =\n               '<label style=\"display:block; text-align: left; margin: 0; padding:1px 7.5px 0 3px; text-overflow:ellipsis; overflow:hidden; white-space:nowrap;\" class=\"webix_inp_top_label ' +\n               requiredClass +\n               '\">#label#</label>';\n         else\n            templateLabel =\n               '<label style=\"width: #width#px; display: inline-block; line-height: 32px; float: left; margin: 0; padding:1px 7.5px 0 3px; text-overflow:ellipsis; overflow:hidden; white-space:nowrap;\" class=\"' +\n               requiredClass +\n               '\">#label#</label>';\n      }\n\n      var newWidth = settings.labelWidth;\n      if (this.settings.formView) newWidth += 40;\n      else if (settings.showLabel == true && settings.labelPosition == \"top\")\n         newWidth = 0;\n\n      let height = 38;\n      if (field instanceof ABFieldImage) {\n         if (field.settings.useHeight) {\n            if (settings.labelPosition == \"top\") {\n               height = parseInt(field.settings.imageHeight) || DEFAULT_HEIGHT;\n               height += 38;\n            } else {\n               height = parseInt(field.settings.imageHeight) || DEFAULT_HEIGHT;\n            }\n         } else if (settings.labelPosition == \"top\") {\n            height = DEFAULT_HEIGHT + 38;\n         } else {\n            if (DEFAULT_HEIGHT > 38) {\n               height = DEFAULT_HEIGHT;\n            }\n         }\n      } else if (\n         settings.showLabel == true &&\n         settings.labelPosition == \"top\"\n      ) {\n         height = DEFAULT_HEIGHT;\n      }\n\n      let template = `<div class=\"customField ${settings.labelPosition}\">${templateLabel}#template#</div>`\n         .replace(/#width#/g, settings.labelWidth)\n         .replace(/#label#/g, field.label)\n         .replace(\n            /#template#/g,\n            field\n               .columnHeader({\n                  width: newWidth,\n                  height: height,\n                  editable: true,\n               })\n               .template({})\n         );\n\n      component.ui = {\n         id: ids.component,\n         view: \"forminput\",\n         labelWidth: 0,\n         paddingY: 0,\n         paddingX: 0,\n         css: \"ab-custom-field\",\n         name: component.ui.name,\n         // label:  field.label,\n         // labelPosition: settings.labelPosition, // webix.forminput does not have .labelPosition T T\n         // labelWidth: settings.labelWidth,\n         body: {\n            // id: ids.component,\n            view: App.custom.focusabletemplate.view,\n            css: \"customFieldCls\",\n            borderless: true,\n            template: template,\n            height: height,\n            onClick: {\n               customField: (evt, e, trg) => {\n                  if (this.settings.disable == 1) return;\n\n                  let rowData = {};\n\n                  let formView = this.parentFormComponent();\n                  if (formView) {\n                     let dv = formView.datacollection;\n                     if (dv) rowData = dv.getCursor() || {};\n                  }\n\n                  // var node = $$(ids.component).$view;\n                  let node = $$(trg).getParentView().$view;\n                  field.customEdit(rowData, App, node, ids.component, evt);\n               },\n            },\n         },\n      };\n\n      component.onShow = () => {\n         let elem = $$(ids.component);\n         if (!elem) return;\n\n         let rowData = {},\n            node = elem.$view;\n\n         // Add data-cy attributes\n         const dataCy = `${this.key} ${field.key} ${field.columnName} ${this.id} ${this.parent.id}`;\n         node.setAttribute('data-cy', dataCy);\n\n         let options = {\n            formId: ids.component,\n            editable: this.settings.disable == 1 ? false : true,\n         };\n\n         if (field instanceof ABFieldImage) {\n            options.height = field.settings.useHeight\n               ? parseInt(field.settings.imageHeight) || DEFAULT_HEIGHT\n               : DEFAULT_HEIGHT;\n            options.width = field.settings.useWidth\n               ? parseInt(field.settings.imageWidth) || newWidth\n               : newWidth;\n         }\n\n         field.customDisplay(rowData, App, node, options);\n      };\n\n      // make sure each of our child views get .init() called\n      component.init = (options) => {\n         // component.onShow();\n      };\n\n      component.logic = {\n         getValue: (rowData) => {\n            let elem = $$(ids.component);\n\n            return field.getValue(elem, rowData);\n         },\n      };\n\n      return component;\n   }\n};\n","const ABViewFormDatepickerCore = require(\"../../core/views/ABViewFormDatepickerCore\");\n\nmodule.exports = class ABViewFormDatepicker extends ABViewFormDatepickerCore {\n   // constructor(values, application, parent, defaultValues) {\n   //    super(values, application, parent, defaultValues);\n   // }\n\n   //\n   //\tEditor Related\n   //\n\n   /**\n    * @method editorComponent\n    * return the Editor for this UI component.\n    * the editor should display either a \"block\" view or \"preview\" of\n    * the current layout of the view.\n    * @param {string} mode what mode are we in ['block', 'preview']\n    * @return {Component}\n    */\n   editorComponent(App, mode) {\n      var idBase = \"ABViewFormDatepickerEditorComponent\";\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n      };\n\n      var datepickerElem = this.component(App).ui;\n      datepickerElem.id = ids.component;\n\n      var _ui = {\n         rows: [datepickerElem, {}],\n      };\n\n      var _init = (options) => {};\n\n      var _logic = {};\n\n      return {\n         ui: _ui,\n         init: _init,\n         logic: _logic,\n      };\n   }\n\n   /**\n    * @method component()\n    * return a UI component based upon this view.\n    * @param {obj} App\n    * @return {obj} UI component\n    */\n   component(App) {\n      var component = super.component(App);\n      var field = this.field();\n\n      var idBase = this.parentFormUniqueID(\n         `ABViewFormDatepicker_${this.id}_f_`\n      );\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n      };\n\n      component.ui.id = ids.component;\n      component.ui.view = \"datepicker\";\n      if (!field) return component;\n\n      // Ignore date - Only time picker\n      if (field.settings.dateFormat == 1) {\n         component.ui.type = \"time\";\n      }\n\n      // Date & Time picker\n      if (\n         field.key == \"datetime\" &&\n         field.settings &&\n         field.settings.timeFormat &&\n         field.settings.timeFormat != 1\n      ) {\n         component.ui.timepicker = true;\n      }\n\n      // allows entering characters in datepicker input, false by default\n      component.ui.editable = true;\n\n      // default value\n      if (component.ui.value && !(component.ui.value instanceof Date)) {\n         component.ui.value = new Date(component.ui.value);\n      }\n\n      // if we have webix locale set, will use the date format form there.\n      if (field != null && !window.webixLocale) {\n         component.ui.format = field.getFormat();\n      }\n\n      // make sure each of our child views get .init() called\n      component.init = (options) => {};\n\n      return component;\n   }\n};\n","const ABViewFormNumberCore = require(\"../../core/views/ABViewFormNumberCore\");\n\nconst ABViewFormNumberPropertyComponentDefaults = ABViewFormNumberCore.defaultValues();\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABViewFormNumber extends ABViewFormNumberCore {\n   // constructor(values, application, parent, defaultValues) {\n   //    super(values, application, parent, defaultValues);\n   // }\n\n   //\n   //\tEditor Related\n   //\n\n   /**\n    * @method editorComponent\n    * return the Editor for this UI component.\n    * the editor should display either a \"block\" view or \"preview\" of\n    * the current layout of the view.\n    * @param {string} mode what mode are we in ['block', 'preview']\n    * @return {Component}\n    */\n   editorComponent(App, mode) {\n      var idBase = \"ABViewFormNumberEditorComponent\";\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n      };\n\n      var numberElem = this.component(App).ui;\n      numberElem.id = ids.component;\n\n      var _ui = {\n         type: \"space\",\n         rows: [numberElem, {}],\n      };\n\n      var _init = (options) => {};\n\n      var _logic = {};\n\n      return {\n         ui: _ui,\n         init: _init,\n         logic: _logic,\n      };\n   }\n\n   //\n   // Property Editor\n   //\n\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\n      var commonUI = super.propertyEditorDefaultElements(\n         App,\n         ids,\n         _logic,\n         ObjectDefaults\n      );\n\n      // in addition to the common .label  values, we\n      // ask for:\n      return commonUI.concat([\n         {\n            name: \"isStepper\",\n            view: \"checkbox\",\n            labelWidth: this.AB.UISettings.config().labelWidthCheckbox,\n            labelRight: L(\"Plus/Minus Buttons\"),\n         },\n      ]);\n   }\n\n   static propertyEditorPopulate(App, ids, view) {\n      super.propertyEditorPopulate(App, ids, view);\n\n      $$(ids.isStepper).setValue(\n         view.settings.isStepper != null\n            ? view.settings.isStepper\n            : ABViewFormNumberPropertyComponentDefaults.isStepper\n      );\n   }\n\n   static propertyEditorValues(ids, view) {\n      super.propertyEditorValues(ids, view);\n\n      view.settings.isStepper = $$(ids.isStepper).getValue();\n   }\n\n   /**\n    * @method component()\n    * return a UI component based upon this view.\n    * @param {obj} App\n    * @return {obj} UI component\n    */\n   component(App) {\n      var component = super.component(App);\n      var field = this.field();\n\n      var idBase = this.parentFormUniqueID(`ABViewFormNumber_${this.id}_f_`);\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n      };\n\n      var viewType = this.settings.isStepper\n         ? \"counter\"\n         : App.custom.numbertext.view;\n\n      component.ui.id = ids.component;\n      component.ui.view = viewType;\n      component.ui.type = \"number\";\n      component.ui.validate = (val) => {\n         return !isNaN(val * 1);\n      };\n\n      // make sure each of our child views get .init() called\n      component.init = (options) => {};\n\n      return component;\n   }\n};\n","const ABViewFormReadonlyCore = require(\"../../core/views/ABViewFormReadonlyCore\");\n\nmodule.exports = class ABViewFormReadonly extends ABViewFormReadonlyCore {\n   // constructor(values, application, parent, defaultValues) {\n   //    super(values, application, parent, defaultValues);\n   // }\n\n   ///\n   /// Instance Methods\n   ///\n\n   //\n   //\tEditor Related\n   //\n\n   /**\n    * @method editorComponent\n    * return the Editor for this UI component.\n    * the editor should display either a \"block\" view or \"preview\" of\n    * the current layout of the view.\n    * @param {string} mode what mode are we in ['block', 'preview']\n    * @return {Component}\n    */\n   editorComponent(App, mode) {\n      var idBase = \"ABViewFormReadonlyEditorComponent\";\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n      };\n\n      var templateElem = this.component(App).ui;\n      templateElem.id = ids.component;\n\n      var _ui = {\n         rows: [templateElem, {}],\n      };\n\n      var _init = (options) => {};\n\n      var _logic = {};\n\n      return {\n         ui: _ui,\n         init: _init,\n         logic: _logic,\n      };\n   }\n\n   /**\n    * @method component()\n    * return a UI component based upon this view.\n    * @param {obj} App\n    * @return {obj} UI component\n    */\n   component(App) {\n      var component = super.component(App);\n      var field = this.field();\n      var form = this.parentFormComponent();\n\n      // this field may be deleted\n      if (!field) return component;\n\n      var idBase = this.parentFormUniqueID(\"ABViewFormReadonly_\" + this.id);\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n         template: App.unique(`${idBase}template`),\n      };\n\n      component.ui = {\n         id: ids.component,\n         view: \"forminput\",\n         labelWidth: 0,\n         paddingY: 0,\n         paddingX: 0,\n         readonly: true,\n         css: \"ab-readonly-field\",\n         // name: component.ui.name,\n         // label:  field.label,\n         // labelPosition: settings.labelPosition, // webix.forminput does not have .labelPosition T T\n         // labelWidth: settings.labelWidth,\n         body: {\n            id: ids.template,\n            view: \"label\",\n            borderless: true,\n            css: { \"background-color\": \"#fff\" },\n            label: \"\",\n         },\n      };\n\n      let settings = {};\n      if (form) settings = form.settings;\n\n      if (settings.showLabel == true && settings.labelPosition == \"top\") {\n         component.ui.body.height = 80;\n      } else if (field.settings.useHeight) {\n         component.ui.body.height = parseInt(field.settings.imageHeight) || 38;\n      } else {\n         component.ui.body.height = 38;\n      }\n\n      // make sure each of our child views get .init() called\n      component.init = (options) => {\n         let $elem = $$(ids.component);\n         if (!$elem) return;\n\n         let $form = $elem.getFormView();\n         if (!$form) return;\n\n         let rowData = $form.getValues();\n         component.logic.refresh(rowData);\n\n         $form.attachEvent(\"onChange\", function (newv, oldv) {\n            let rowData = $form.getValues();\n            component.logic.refresh(rowData);\n         });\n      };\n\n      component.onShow = () => {\n         var $elem = $$(ids.component);\n         if (!$elem) return;\n\n         let $form = $elem.getFormView();\n         if (!$form) return;\n\n         let rowData = $form.getValues();\n         component.logic.refresh(rowData);\n      };\n\n      component.logic = {\n         getValue: (rowData) => {\n            let field = this.field();\n            if (!field) return null;\n            return rowData[field.columnName];\n         },\n\n         refresh: (rowData) => {\n            let field = this.field(),\n               form = this.parentFormComponent();\n\n            let settings = {};\n            if (form) settings = form.settings;\n\n            let templateLabel = \"\";\n            if (settings.showLabel == true) {\n               if (settings.labelPosition == \"top\")\n                  templateLabel = `<label style=\"display:block; text-align: left; margin: 0; padding:1px 7.5px 0 3px; text-overflow:ellipsis; overflow:hidden; white-space:nowrap;\" class=\"webix_inp_top_label\">${field.label}</label>`;\n               else\n                  templateLabel = `<label style=\"width: ${settings.labelWidth}px; display: inline-block; line-height: 32px; float: left; margin: 0; padding:1px 7.5px 0 3px; text-overflow:ellipsis; overflow:hidden; white-space:nowrap;\">${field.label}</label>`;\n            }\n\n            let newWidth = settings.labelWidth;\n            if (this.settings.formView) newWidth += 40;\n            else if (\n               settings.showLabel == true &&\n               settings.labelPosition == \"top\"\n            )\n               newWidth = 0;\n\n            let template = `<div class=\"readonlyField\">${templateLabel}#template#</div>`.replace(\n               /#template#/g,\n               field\n                  .columnHeader({\n                     width: newWidth,\n                     editable: true,\n                  })\n                  .template(rowData)\n            );\n\n            // Re-build template element\n            if ($$(ids.template)) {\n               $$(ids.template).setHTML(template);\n            }\n         },\n      };\n\n      return component;\n   }\n};\n","const ABViewFormSelectMultipleCore = require(\"../../core/views/ABViewFormSelectMultipleCore\");\n\nconst ABViewFormSelectMultiplePropertyComponentDefaults = ABViewFormSelectMultipleCore.defaultValues();\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABViewFormSelectMultiple extends (\n   ABViewFormSelectMultipleCore\n) {\n   // constructor(values, application, parent, defaultValues) {\n   //    super(values, application, parent, defaultValues);\n   // }\n\n   //\n   //\tEditor Related\n   //\n\n   /**\n    * @method editorComponent\n    * return the Editor for this UI component.\n    * the editor should display either a \"block\" view or \"preview\" of\n    * the current layout of the view.\n    * @param {string} mode what mode are we in ['block', 'preview']\n    * @return {Component}\n    */\n   editorComponent(App, mode) {\n      var idBase = \"ABViewFormSelectMultipleEditorComponent\";\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n         options: App.unique(`${idBase}_option`),\n      };\n\n      var selectlist = this.component(App).ui;\n      selectlist.id = ids.component;\n\n      var _ui = {\n         rows: [selectlist, {}],\n      };\n\n      var _init = (options) => {};\n\n      var _logic = {};\n\n      return {\n         ui: _ui,\n         init: _init,\n         logic: _logic,\n      };\n   }\n\n   //\n   // Property Editor\n   //\n\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\n      var commonUI = super.propertyEditorDefaultElements(\n         App,\n         ids,\n         _logic,\n         ObjectDefaults\n      );\n\n      // in addition to the common .label  values, we\n      // ask for:\n      return commonUI.concat([\n         {\n            name: \"type\",\n            view: \"richselect\",\n            label: L(\"Type\"),\n            options: [\n               {\n                  id: \"multicombo\",\n                  value: L(\"Multi Combo\"),\n               },\n\n               {\n                  id: \"checkbox\",\n                  value: L(\"Checkboxes\"),\n               },\n            ],\n         },\n      ]);\n   }\n\n   static propertyEditorPopulate(App, ids, view) {\n      super.propertyEditorPopulate(App, ids, view);\n\n      $$(ids.type).setValue(\n         view.settings.type ||\n            ABViewFormSelectMultiplePropertyComponentDefaults.type\n      );\n   }\n\n   static propertyEditorValues(ids, view) {\n      super.propertyEditorValues(ids, view);\n\n      view.settings.type = $$(ids.type).getValue();\n   }\n\n   /*\n    * @component()\n    * return a UI component based upon this view.\n    * @param {obj} App\n    * @return {obj} UI component\n    */\n   component(App) {\n      var component = super.component(App);\n      var field = this.field();\n\n      var idBase = this.parentFormUniqueID(\n         `ABViewFormSelectMultiple_${this.id}_f_`\n      );\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n      };\n\n      component.ui.view =\n         this.settings.type ||\n         ABViewFormSelectMultiplePropertyComponentDefaults.type;\n\n      var options = [];\n\n      if (field && field.key == \"user\") options = field.getUsers();\n      else if (field)\n         options = field.settings.options || this.settings.options || [];\n\n      component.ui.id = ids.component;\n      component.ui.options = options.map((opt) => {\n         return {\n            id: opt.id,\n            value: opt.text,\n            hex: opt.hex,\n         };\n      });\n\n      if (component.ui.view == \"multicombo\") {\n         component.ui.tagMode = false;\n         component.ui.css = \"hideWebixMulticomboTag\";\n         component.ui.tagTemplate = function (values) {\n            let selectedOptions = [];\n            values.forEach((val) => {\n               selectedOptions.push($$(ids.component).getList().getItem(val));\n            });\n            let vals = selectedOptions;\n            if (field.getSelectedOptions) {\n               vals = field.getSelectedOptions(field, selectedOptions);\n            }\n\n            var items = [];\n            vals.forEach((val) => {\n               var hasCustomColor = \"\";\n               var optionHex = \"\";\n               if (field.settings.hasColors && val.hex) {\n                  hasCustomColor = \"hascustomcolor\";\n                  optionHex = `background: ${val.hex};`;\n               }\n               let text = val.text ? val.text : val.value;\n               items.push(\n                  `<span class=\"webix_multicombo_value ${hasCustomColor}\" style=\"${optionHex}\" optvalue=\"${val.id}\"><span>${text}</span><span class=\"webix_multicombo_delete\" role=\"button\" aria-label=\"Remove item\"></span></span>`\n               );\n            });\n            return items.join(\"\");\n         };\n      }\n\n      // radio element could not be empty options\n      if (component.ui.view == \"checkbox\") {\n         component.ui.options.push({\n            id: \"temp\",\n            value: L(\"Option\"),\n         });\n      }\n\n      // make sure each of our child views get .init() called\n      component.init = (options) => {};\n\n      component.logic = {\n         getValue: (rowData) => {\n            var elem = $$(ids.component);\n\n            return field.getValue(elem, rowData);\n         },\n      };\n\n      return component;\n   }\n};\n","const ABViewFormSelectSingleCore = require(\"../../core/views/ABViewFormSelectSingleCore\");\n\nconst ABViewFormSelectSinglePropertyComponentDefaults = ABViewFormSelectSingleCore.defaultValues();\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABViewFormSelectSingle extends (\n   ABViewFormSelectSingleCore\n) {\n   // constructor(values, application, parent, defaultValues) {\n   //    super(values, application, parent, defaultValues);\n   // }\n\n   //\n   //\tEditor Related\n   //\n\n   /**\n    * @method editorComponent\n    * return the Editor for this UI component.\n    * the editor should display either a \"block\" view or \"preview\" of\n    * the current layout of the view.\n    * @param {string} mode what mode are we in ['block', 'preview']\n    * @return {Component}\n    */\n   editorComponent(App, mode) {\n      var idBase = \"ABViewFormSelectSingleEditorComponent\";\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n         options: App.unique(`${idBase}_option`),\n      };\n\n      var selectlist = this.component(App).ui;\n      selectlist.id = ids.component;\n\n      var _ui = {\n         rows: [selectlist, {}],\n      };\n\n      var _init = (options) => {};\n\n      var _logic = {};\n\n      return {\n         ui: _ui,\n         init: _init,\n         logic: _logic,\n      };\n   }\n\n   //\n   // Property Editor\n   //\n\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\n      var commonUI = super.propertyEditorDefaultElements(\n         App,\n         ids,\n         _logic,\n         ObjectDefaults\n      );\n\n      // in addition to the common .label  values, we\n      // ask for:\n      return commonUI.concat([\n         {\n            name: \"type\",\n            view: \"richselect\",\n            label: L(\"Type\"),\n            options: [\n               {\n                  id: \"richselect\",\n                  value: L(\"Select list\"),\n               },\n               {\n                  id: \"radio\",\n                  value: L(\"Radio\"),\n               },\n            ],\n         },\n      ]);\n   }\n\n   static propertyEditorPopulate(App, ids, view) {\n      super.propertyEditorPopulate(App, ids, view);\n\n      $$(ids.type).setValue(\n         view.settings.type ||\n            ABViewFormSelectSinglePropertyComponentDefaults.type\n      );\n   }\n\n   static propertyEditorValues(ids, view) {\n      super.propertyEditorValues(ids, view);\n\n      view.settings.type = $$(ids.type).getValue();\n   }\n\n   /*\n    * @component()\n    * return a UI component based upon this view.\n    * @param {obj} App\n    * @return {obj} UI component\n    */\n   component(App) {\n      var component = super.component(App);\n      var field = this.field();\n\n      var idBase = this.parentFormUniqueID(\n         `ABViewFormSelectSingle_${this.id}_f_`\n      );\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n      };\n\n      component.ui.view =\n         this.settings.type ||\n         ABViewFormSelectSinglePropertyComponentDefaults.type;\n\n      var options = [];\n\n      if (field && field.key == \"user\") options = field.getUsers();\n      else if (field)\n         options = field.settings.options || this.settings.options || [];\n      else options = this.settings.options || [];\n\n      component.ui.id = ids.component;\n\n    if (field?.settings.hasColors) {\n         component.ui.css = \"combowithcolors\";\n         component.ui.options = {\n            view: \"suggest\",\n            body: {\n               view: \"list\",\n               data: options.map((opt) => {\n                  return {\n                     id: opt.id,\n                     value: opt.text || opt.value,\n                     hex: field.settings.hasColors ? opt.hex : \"\",\n                  };\n               }),\n               template: function (value) {\n                  var items = [];\n                  var hasCustomColor = \"\";\n                  var optionHex = \"\";\n                  if (value.hex) {\n                     hasCustomColor = \"hascustomcolor\";\n                     optionHex = `background: ${value.hex};`;\n                  }\n                  items.push(\n                     `<span class=\"webix_multicombo_value ${hasCustomColor}\" style=\"${optionHex}\" optvalue=\"${value.id}\"><span>${value.value}</span></span>`\n                  );\n                  return items.join(\"\");\n               },\n            },\n         };\n      } else {\n         component.ui.options = options.map((opt) => {\n            return {\n               id: opt.id,\n               value: opt.text || opt.value,\n            };\n         });\n      }\n\n      // radio element could not be empty options\n      if (component.ui.view == \"radio\" && component.ui.options.length < 1) {\n         component.ui.options.push({\n            id: \"temp\",\n            value: L(\"Option\"),\n         });\n      }\n\n      // component.ui = {\n      //    rows: [component.ui],\n      // };\n\n      // make sure each of our child views get .init() called\n      component.init = (options) => {};\n\n      return component;\n   }\n};\n","const ABViewFormTextboxCore = require(\"../../core/views/ABViewFormTextboxCore\");\n\nconst ABViewFormTextboxPropertyComponentDefaults = ABViewFormTextboxCore.defaultValues();\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABViewFormTextbox extends ABViewFormTextboxCore {\n   // constructor(values, application, parent, defaultValues) {\n   //    super(values, application, parent, defaultValues);\n   // }\n\n   //\n   //\tEditor Related\n   //\n\n   /**\n    * @method editorComponent\n    * return the Editor for this UI component.\n    * the editor should display either a \"block\" view or \"preview\" of\n    * the current layout of the view.\n    * @param {string} mode what mode are we in ['block', 'preview']\n    * @return {Component}\n    */\n   editorComponent(App, mode) {\n      var idBase = \"ABViewFormTextboxEditorComponent\";\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n      };\n      var textView = this.component(App);\n\n      var textUi = textView.ui;\n      textUi.id = ids.component;\n\n      var _ui = {\n         rows: [textUi, {}],\n      };\n\n      var _init = (options) => {\n         textView.init(options);\n      };\n\n      var _logic = {};\n\n      return {\n         ui: _ui,\n         init: _init,\n         logic: _logic,\n      };\n   }\n\n   //\n   // Property Editor\n   //\n\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\n      var commonUI = super.propertyEditorDefaultElements(\n         App,\n         ids,\n         _logic,\n         ObjectDefaults\n      );\n\n      // in addition to the common .label  values, we\n      // ask for:\n      return commonUI.concat([\n         {\n            name: \"type\",\n            view: \"radio\",\n            label: L(\"Type\"),\n            vertical: true,\n            options: [\n               {\n                  id: \"single\",\n                  value: L(\"Single line\"),\n               },\n               {\n                  id: \"multiple\",\n                  value: L(\"Multiple lines\"),\n               },\n               {\n                  id: \"rich\",\n                  value: L(\"Rich editor\"),\n               },\n            ],\n         },\n      ]);\n   }\n\n   static propertyEditorPopulate(App, ids, view) {\n      super.propertyEditorPopulate(App, ids, view);\n\n      $$(ids.type).setValue(\n         view.settings.type || ABViewFormTextboxPropertyComponentDefaults.type\n      );\n   }\n\n   static propertyEditorValues(ids, view) {\n      super.propertyEditorValues(ids, view);\n\n      view.settings.type = $$(ids.type).getValue();\n   }\n\n   /*\n    * @component()\n    * return a UI component based upon this view.\n    * @param {obj} App\n    * @return {obj} UI component\n    */\n   component(App) {\n      var component = super.component(App);\n\n      var idBase = this.parentFormUniqueID(`ABViewFormTextbox_${this.id}_f_`);\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n      };\n\n      component.ui.id = ids.component;\n\n      switch (\n         this.settings.type ||\n         ABViewFormTextboxPropertyComponentDefaults.type\n      ) {\n         case \"single\":\n            component.ui.view = \"text\";\n            break;\n         case \"multiple\":\n            component.ui.view = \"textarea\";\n            component.ui.height = 200;\n            break;\n         case \"rich\":\n            component.ui.view = \"forminput\";\n            component.ui.height = 200;\n            component.ui.css = \"ab-rich-text\";\n            component.ui.body = {\n               view: \"tinymce-editor\",\n               value: \"\",\n               cdn: \"/js/webix/extras/tinymce\",\n               config: {\n                  plugins: \"link\",\n                  menubar: \"format edit\",\n                  toolbar:\n                     \"undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | fontsizeselect | link\",\n               },\n            };\n            break;\n      }\n\n      component.onShow = () => {\n         // WORKAROUND : to fix breaks TinyMCE when switch pages/tabs\n         // https://forum.webix.com/discussion/6772/switching-tabs-breaks-tinymce\n         if (\n            this.settings.type &&\n            this.settings.type == \"rich\" &&\n            $$(component.ui.id)\n         ) {\n            // recreate rich editor\n            webix.ui(component.ui, $$(component.ui.id));\n            // Add dataCy to TinyMCE text editor\n            $$(component.ui.id).getChildViews()[0].getEditor(true).then((editor) => {\n               const dataCy = `${this.key} rich ${component.ui.name} ${this.id} ${this.parent.id}`;\n               editor.contentAreaContainer.setAttribute('data-cy', dataCy);\n            });\n         }\n      };\n\n      return webix.copy(component);\n   }\n};\n","const ABViewFormTreeCore = require(\"../../core/views/ABViewFormTreeCore\");\n\nmodule.exports = class ABViewFormTree extends ABViewFormTreeCore {\n   // constructor(values, application, parent, defaultValues) {\n   //    super(values, application, parent, defaultValues);\n   // }\n\n   //\n   //\tEditor Related\n   //\n\n   /**\n    * @method editorComponent\n    * return the Editor for this UI component.\n    * the editor should display either a \"block\" view or \"preview\" of\n    * the current layout of the view.\n    * @param {string} mode what mode are we in ['block', 'preview']\n    * @return {Component}\n    */\n   editorComponent(App, mode) {\n      var idBase = \"ABViewFormTreeEditorComponent\";\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n         options: App.unique(`${idBase}_option`),\n      };\n\n      var selectlist = this.component(App).ui;\n      selectlist.id = ids.component;\n\n      var _ui = {\n         rows: [selectlist, {}],\n      };\n\n      var _init = (options) => {};\n\n      var _logic = {};\n\n      return {\n         ui: _ui,\n         init: _init,\n         logic: _logic,\n      };\n   }\n\n   //\n   // Property Editor\n   //\n\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\n      var commonUI = super.propertyEditorDefaultElements(\n         App,\n         ids,\n         _logic,\n         ObjectDefaults\n      );\n      // var L = App.Label;\n\n      // in addition to the common .label  values, we\n      // ask for:\n      return commonUI.concat([\n         // {\n         // \tname: 'type',\n         // \tview: 'richselect',\n         // \tlabel: L('ab.component.selectsingle.type', '*Type'),\n         // \toptions: [\n         // \t\t{\n         // \t\t\tid: 'richselect',\n         // \t\t\tvalue: L('ab.component.selectsingle.selectlist', '*Select list')\n         // \t\t},\n         // \t\t{\n         // \t\t\tid: 'radio',\n         // \t\t\tvalue: L('ab.component.selectsingle.radio', '*Radio')\n         // \t\t}\n         // \t]\n         // }\n      ]);\n   }\n\n   static propertyEditorPopulate(App, ids, view) {\n      super.propertyEditorPopulate(App, ids, view);\n\n      // $$(ids.type).setValue(view.settings.type || ABViewFormTreePropertyComponentDefaults.type);\n   }\n\n   static propertyEditorValues(ids, view) {\n      super.propertyEditorValues(ids, view);\n\n      // view.settings.type = $$(ids.type).getValue();\n   }\n\n   /**\n    * @method component()\n    * return a UI component based upon this view.\n    * @param {obj} App\n    * @return {obj} UI component\n    */\n   component(App) {\n      var component = super.component(App);\n      var field = this.field();\n      var form = this.parentFormComponent();\n\n      // this field may be deleted\n      if (!field) return component;\n\n      var idBase = this.parentFormUniqueID(`ABViewFormTree_${this.id}_f_`);\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n      };\n\n      var settings = {};\n      if (form) settings = form.settings;\n\n      var requiredClass = \"\";\n      if (field.settings.required == 1) {\n         requiredClass = \"webix_required\";\n      }\n\n      var templateLabel = \"\";\n      if (settings.showLabel == true) {\n         if (settings.labelPosition == \"top\")\n            templateLabel =\n               '<label style=\"display:block; text-align: left; margin: 0; padding:1px 7.5px 0 3px; text-overflow:ellipsis; overflow:hidden; white-space:nowrap;\" class=\"webix_inp_top_label ' +\n               requiredClass +\n               '\">#label#</label>';\n         else\n            templateLabel =\n               '<label style=\"width: #width#px; display: inline-block; line-height: 32px; float: left; margin: 0; padding:1px 7.5px 0 3px; text-overflow:ellipsis; overflow:hidden; white-space:nowrap;\" class=\"' +\n               requiredClass +\n               '\">#label#</label>';\n      }\n\n      var newWidth = settings.labelWidth;\n      if (typeof this.settings.formView != \"undefined\") newWidth += 40;\n\n      var template = (templateLabel + \"#template#\")\n         .replace(/#width#/g, settings.labelWidth)\n         .replace(/#label#/g, field.label)\n         .replace(\n            /#template#/g,\n            field.columnHeader({\n               width: newWidth,\n            }).template\n         );\n\n      component.ui.id = ids.component;\n      component.ui.view = \"template\";\n      component.ui.css = \"webix_el_box\";\n      if (\n         typeof field.settings.useHeight != \"undefined\" &&\n         field.settings.useHeight == 1\n      ) {\n         component.ui.height = parseInt(field.settings.imageHeight);\n      } else {\n         component.ui.height = 38;\n      }\n      component.ui.borderless = true;\n\n      component.ui.template = '<div class=\"customField\">' + template + \"</div>\";\n\n      component.ui.onClick = {\n         customField: function (id, e, trg) {\n            var rowData = {},\n               node = $$(ids.component).$view;\n\n            rowData[field.columnName] = component.logic.getValue();\n            field.customEdit(rowData, App, node, component);\n         },\n      };\n\n      component.onShow = () => {};\n\n      // make sure each of our child views get .init() called\n      component.init = (options) => {};\n\n      component.logic = {\n         getValue: () => {\n            var vals = $$(ids.component).getValues();\n            // Pass empty string if the returned values is empty array\n            if (Array.isArray(vals) && vals.length == 0) vals = \"\";\n            return vals;\n         },\n      };\n\n      return component;\n   }\n};\n","const ABViewGanttCore = require(\"../../core/views/ABViewGanttCore\");\nimport ABViewComponent from \"./ABViewComponent\";\n\nlet L = null;\n\nconst DAY_SCALE = { unit: \"day\", format: \"%d\" },\n   WEEK_SCALE = {\n      unit: \"week\",\n      format: (start) => {\n         const parser = webix.Date.dateToStr(\"%d %M\");\n         const wstart = webix.Date.weekStart(start);\n         const wend = webix.Date.add(\n            webix.Date.add(wstart, 1, \"week\", true),\n            -1,\n            \"day\",\n            true\n         );\n         return parser(wstart) + \" - \" + parser(wend);\n      },\n   },\n   MONTH_SCALE = { unit: \"month\", format: \"%F\" },\n   YEAR_SCALE = { unit: \"year\", format: \"%Y\" };\n\nclass ABViewGanttComponent extends ABViewComponent {\n   constructor(viewGantt, idBase) {\n      var base = idBase || `ABViewGantt_${viewGantt.id}`;\n\n      super(base, {\n         menu: \"\",\n         gantt: \"\",\n      });\n\n      this.viewGantt = viewGantt;\n      this.AB = viewGantt.AB;\n\n      this.settings = viewGantt.settings;\n\n      this._tempDC = null;\n      // {ABDataCollection}\n      // A link to a DC that was passed in.  NOTE: this is only for\n      // the temp DCs created in the AppBuilder Designer and passed\n      // in.  Normal DCs are handled by the default CurrentDatacollection\n      // methods.\n\n      this.TitleField = null;\n      this.StartDateField = null;\n      this.EndDateField = null;\n      this.DurationField = null;\n      this.ProgressField = null;\n      this.NotesField = null;\n\n      this.originalStartDate = null;\n      this.originalEndDate = null;\n\n      this.pendingAdds = {};\n      // {Promise}  /* id : {Promise} */\n      // In order to prevent a race condition where multiple adds can be\n      // generated on the same item, we catch the repeats and just return\n      // the same data for each.\n\n      this.ganttElement = {\n         isExistsTask: (taskId) => {\n            let localService = $$(this.ids.gantt).getService(\"local\");\n            if (!localService) return false;\n\n            let tasksData = localService.tasks();\n            if (!tasksData || !tasksData.exists) return false;\n\n            return tasksData.exists(taskId);\n         },\n         removeTask: (taskId) => {\n            if (!this.ganttElement.isExistsTask(taskId)) return;\n\n            let opsService = $$(this.ids.gantt).getService(\"operations\");\n            if (!opsService) return;\n\n            return opsService.removeTask(taskId);\n         },\n      };\n\n      if (!L) {\n         L = (...params) => {\n            return this.AB.Multilingual.label(...params);\n         };\n      }\n   }\n\n   ui() {\n      var ids = this.ids;\n      var _this = this;\n\n      return {\n         id: ids.component,\n         rows: [\n            {\n               cols: [\n                  { fillspace: true },\n                  {\n                     view: \"menu\",\n                     id: ids.menu,\n                     layout: \"x\",\n                     width: 300,\n                     data: [\n                        {\n                           id: \"day\",\n                           value: L(\"Day\"),\n                        },\n                        {\n                           id: \"week\",\n                           value: L(\"Week\"),\n                        },\n                        {\n                           id: \"month\",\n                           value: L(\"Month\"),\n                        },\n                        {\n                           id: \"year\",\n                           value: L(\"Year\"),\n                        },\n                     ],\n                     on: {\n                        onItemClick: (id /* , e, node */) => {\n                           this.setScale(id);\n                        },\n                     },\n                  },\n               ],\n            },\n            {\n               id: ids.gantt,\n               view: \"gantt\",\n               scales: [YEAR_SCALE, MONTH_SCALE, DAY_SCALE],\n               override: new Map([\n                  [\n                     gantt.services.Backend,\n                     // global webix gantt object\n                     class MyBackend extends gantt.services.Backend {\n                        async tasks() {\n                           var DC = _this.CurrentDatacollection;\n                           if (!DC) return [];\n\n                           // if (DC.dataStatus != DC.dataStatusFlag.initialized) {\n                           //    await DC.loadData().catch((err) => {\n                           //       console.error(err);\n                           //    });\n                           // }\n                           return (DC.getData() || []).map((d, indx) =>\n                              _this.convertFormat(d, indx)\n                           );\n                        }\n                        links() {\n                           return Promise.resolve([]);\n                        }\n                        async addTask(obj, index, parent) {\n                           if (!_this.pendingAdds[obj.id]) {\n                              _this.pendingAdds[obj.id] = _this.taskAdd(obj);\n                           }\n                           let newTask = await _this.pendingAdds[obj.id];\n                           delete _this.pendingAdds[obj.id];\n                           return {\n                              id: (newTask || {}).id,\n                           };\n                        }\n                        async updateTask(id, obj) {\n                           await _this.taskUpdate(obj.id, obj);\n                           return {};\n                        }\n                        async removeTask(id) {\n                           await _this.taskRemove(id);\n                           return {};\n                        }\n                     },\n                  ],\n               ]),\n            },\n         ],\n      };\n   }\n\n   async init(AB) {\n      this.AB = AB;\n\n      // #HACK!: as of webix v.8.1.1 there is a visual glitch of the Gantt\n      // object if you replace a gantt widget with a new definition (like in\n      // the ABDesigner you can switch from Gantt1 to Gantt2 in the object\n      // workspace).  In that one case, the menu would disappear even though\n      // the data is present.  So this makes sure the menu is shown\n      let $menu = $$(this.ids.menu);\n      if ($menu) {\n         $menu.showItem(\"day\");\n      }\n   }\n\n   /**\n    * @method CurrentDatacollection()\n    * A helper to return the current ABDataCollection we are working with.\n    * @return {ABDataCollection}\n    */\n   get CurrentDatacollection() {\n      let DC = super.CurrentDatacollection;\n      if (!DC) {\n         DC = this._tempDC;\n      }\n      return DC;\n   }\n\n   /**\n    * @method convertFormat()\n    * Convert an ABObject's row value into a gantt task data format.\n    * @param {obj} row\n    *        The current row of data returned from an ABObject.\n    * @param {int} index\n    *        The order of this task.\n    * @return {obj}\n    *         A key=>value hash corresponding to the gantt task that\n    *         represents this row of data.\n    */\n   convertFormat(row, index = null) {\n      let data = {};\n      row = row || {};\n\n      if (!this.StartDateField || (!this.EndDateField && !this.DurationField))\n         return data;\n\n      let currDate = new Date();\n      data[\"id\"] = row.id || row.uuid;\n      data[\"type\"] = \"task\";\n      data[\"parent\"] = 0;\n      data[\"open\"] = true;\n      // define label\n      data[\"text\"] = this.TitleField\n         ? row[this.TitleField.columnName] || \"\"\n         : this.CurrentObject.displayData(row);\n      data[\"start_date\"] = row[this.StartDateField.columnName] || currDate;\n      data[\"progress\"] = this.ProgressField\n         ? parseFloat(row[this.ProgressField.columnName] || 0)\n         : 0;\n\n      if (this.NotesField)\n         data[\"details\"] = row[this.NotesField.columnName] || \"\";\n\n      if (this.EndDateField)\n         data[\"end_date\"] = row[this.EndDateField.columnName] || currDate;\n\n      if (this.DurationField)\n         data[\"duration\"] = row[this.DurationField.columnName] || 1;\n\n      // Default values\n      if (!data[\"end_date\"] && !data[\"duration\"]) {\n         data[\"end_date\"] = currDate;\n         data[\"duration\"] = 1;\n      }\n\n      if (index != null) data[\"order\"] = index;\n\n      return data;\n   }\n\n   /**\n    * @method convertValues()\n    * Convert a Gantt task into a set of values for our ABObject.\n    * @param {obj} task\n    *        The current gantt task data.\n    * @return {obj}\n    *         A key=>value hash corresponding to the ABObject that\n    *         is tied to this gantt.\n    */\n   convertValues(task) {\n      let patch = {};\n\n      if (this.TitleField)\n         patch[this.TitleField.columnName] = task[\"text\"] || \"\";\n\n      if (this.StartDateField)\n         patch[this.StartDateField.columnName] = task[\"start_date\"];\n\n      if (this.ProgressField)\n         patch[this.ProgressField.columnName] = parseFloat(\n            task[\"progress\"] || 0\n         );\n\n      if (this.NotesField) patch[this.NotesField.columnName] = task[\"details\"];\n\n      if (this.EndDateField)\n         patch[this.EndDateField.columnName] = task[\"end_date\"];\n\n      if (this.DurationField)\n         patch[this.DurationField.columnName] = task[\"duration\"];\n\n      return patch;\n   }\n\n   /**\n    * @method objectLoad\n    * @param {ABObject} object\n    */\n   objectLoad(object) {\n      super.objectLoad(object);\n      if (object) {\n         this.TitleField = object.fieldByID(this.settings.titleFieldID);\n         this.StartDateField = object.fieldByID(this.settings.startDateFieldID);\n         this.EndDateField = object.fieldByID(this.settings.endDateFieldID);\n         this.DurationField = object.fieldByID(this.settings.durationFieldID);\n         this.ProgressField = object.fieldByID(this.settings.progressFieldID);\n         this.NotesField = object.fieldByID(this.settings.notesFieldID);\n      }\n   }\n\n   /**\n    * @method datacollectionLoad\n    * @param {ABDatacollection} datacollection\n    */\n   datacollectionLoad(datacollection) {\n      super.datacollectionLoad(datacollection);\n\n      let DC = this.CurrentDatacollection;\n      if (!DC && datacollection) {\n         // NOTE: this can happen in the ABDesigner object workspace.\n         // we send in a temp DC with no .id\n         this._tempDC = datacollection;\n         DC = datacollection;\n      }\n\n      // NOTE: keep .objectLoad() before any .initData() is called.\n      this.objectLoad(DC.datasource);\n\n      if (DC.dataStatus == DC.dataStatusFlag.initialized) {\n         this.initData();\n      }\n\n      this.eventAdd({\n         emitter: DC,\n         eventName: \"initializedData\",\n         listener: () => {\n            this.initData();\n         },\n      });\n\n      // real-time update\n      this.eventAdd({\n         emitter: DC,\n         eventName: \"create\",\n         listener: () => {\n            this.initData();\n         },\n      });\n\n      this.eventAdd({\n         emitter: DC,\n         eventName: \"update\",\n         listener: () => {\n            this.initData();\n         },\n      });\n\n      this.eventAdd({\n         emitter: DC,\n         eventName: \"delete\",\n         listener: (taskId) => {\n            // remove this task in gantt\n            if (this.ganttElement.isExistsTask(taskId))\n               this.ganttElement.removeTask(taskId);\n         },\n      });\n   }\n\n   /**\n    * @function hide()\n    * hide this component.\n    */\n   hide() {\n      $$(this.ids.component)?.hide();\n   }\n\n   initData() {\n      let ganttElem = $$(this.ids.gantt);\n      if (!ganttElem) return;\n\n      let dataService = ganttElem.getService(\"local\");\n      if (!dataService) return;\n\n      let dcTasks = dataService.tasks();\n      if (!dcTasks) return;\n\n      // gantt v 8.1.1\n      // Note: there is a race condition that can happen here.\n      // dataService.tasks() calls the MyBackend.tasks() above which\n      // returns a Promise.\n      // when you call dcTasks.clearAll() before the promise\n      // is resolved, the gantt internally throws an error.\n      //\n      // So give webix some time to internally complete it's process\n      // before we do .clearAll();\n      setTimeout(() => {\n         dcTasks.clearAll();\n\n         let DC = this.CurrentDatacollection;\n         let gantt_data = {\n            data: DC\n               ? (DC.getData() || []).map((d, index) =>\n                    this.convertFormat(d, index)\n                 )\n               : [],\n         };\n\n         // check required fields before parse\n         if (this.StartDateField && (this.EndDateField || this.DurationField)) {\n            dcTasks.parse(gantt_data);\n         }\n\n         // Keep original start and end dates for calculate scale to display\n         const currScale = dataService.getScales();\n         this.originalStartDate = currScale.start;\n         this.originalEndDate = currScale.end;\n\n         this.sort();\n      }, 10);\n   }\n\n   setScale(scale) {\n      let ganttElem = $$(this.ids.gantt);\n      if (!ganttElem) return;\n\n      let ganttData = ganttElem.getService(\"local\");\n      if (!ganttData) return;\n\n      let newScales = [];\n\n      switch (scale) {\n         case \"day\":\n            newScales = [YEAR_SCALE, MONTH_SCALE, DAY_SCALE];\n            break;\n         case \"week\":\n            newScales = [YEAR_SCALE, MONTH_SCALE, WEEK_SCALE];\n            break;\n         case \"month\":\n            newScales = [YEAR_SCALE, MONTH_SCALE];\n            break;\n         case \"year\":\n            newScales = [YEAR_SCALE];\n            break;\n      }\n\n      const currScale = ganttElem.getService(\"local\").getScales(),\n         start = webix.Date.add(this.originalStartDate, -1, scale, true),\n         end = webix.Date.add(this.originalEndDate, 1, scale, true);\n\n      ganttData.setScales(\n         start,\n         end,\n         currScale.precise,\n         currScale.cellWidth,\n         currScale.cellHeight,\n         newScales\n      );\n      ganttElem.$app.refresh();\n      ganttElem.getState().$batch({ top: 0, left: 0 });\n   }\n\n   /**\n    * @function show()\n    * Show this component.\n    */\n   show() {\n      $$(this.ids.component)?.show();\n   }\n\n   sort() {\n      // TODO: sorting;\n      return;\n      // let gantt = $$(ids.gantt).getGantt();\n      // if (!gantt) return;\n\n      // // default sort\n      // let MAX_date = new Date(8640000000000000);\n      // gantt.sort(function(a, b) {\n      //    let aStartDate = a[\"start_date\"],\n      //       aEndDate = a[\"end_date\"],\n      //       aDuration = a[\"duration\"] || 1,\n      //       bStartDate = b[\"start_date\"],\n      //       bEndDate = b[\"end_date\"],\n      //       bDuration = b[\"duration\"] || 1;\n\n      //    // if no start date, then be a last item\n      //    if (\n      //       a[this.StartDateField.columnName] == null ||\n      //       b[this.StartDateField.columnName] == null\n      //    ) {\n      //       return (\n      //          (a[this.StartDateField.columnName] || MAX_date) -\n      //          (b[this.StartDateField.columnName] || MAX_date)\n      //       );\n      //    } else if (aStartDate != bStartDate) {\n      //       return aStartDate - bStartDate;\n      //    } else if (aEndDate != bEndDate) {\n      //       return aEndDate - bEndDate;\n      //    } else if (aDuration != bDuration) {\n      //       return bDuration - aDuration;\n      //    }\n      // }, false);\n   }\n\n   async taskAdd(taskData) {\n      let patch = this.convertValues(taskData);\n\n      try {\n         return await this.CurrentObject?.model().create(patch);\n      } catch (e) {\n         webix.alert({\n            title: L(\"Error Saving Item\"),\n            ok: L(\"Okay\"),\n            text: L(\"Unable to save this item.\"),\n         });\n         this.AB.notify.developer(e, {\n            context: \"ABViewGantt:taskAdd(): Error Saving Item\",\n            patch,\n         });\n         throw e;\n      }\n   }\n\n   async taskRemove(rowId) {\n      try {\n         await this.CurrentObject.model().delete(rowId);\n      } catch (e) {\n         webix.alert({\n            title: L(\"Error Removing Item\"),\n            ok: L(\"Okay\"),\n            text: L(\"Unable to remove this item.\"),\n         });\n         this.AB.notify.developer(e, {\n            context: \"ABViewGantt:taskRemove(): Error Removing Item\",\n            rowId,\n         });\n         throw e;\n      }\n   }\n\n   async taskUpdate(rowId, updatedTask) {\n      let patch = this.convertValues(updatedTask);\n      try {\n         await this.CurrentObject.model().update(rowId, patch);\n      } catch (e) {\n         webix.alert({\n            title: L(\"Error Updating Item\"),\n            ok: L(\"Okay\"),\n            text: L(\"Unable to update this item.\"),\n         });\n         this.AB.notify.developer(e, {\n            context: \"ABViewGantt:taskUpdate(): Error Updating Item\",\n            patch,\n         });\n         throw e;\n      }\n   }\n}\n\nexport default class ABViewGantt extends ABViewGanttCore {\n   constructor(values, application, parent, defaultValues) {\n      super(values, application, parent, defaultValues);\n   }\n\n   //\n   //\tEditor Related\n   //\n\n   /**\n    * @method editorComponent\n    * return the Editor for this UI component.\n    * the editor should display either a \"block\" view or \"preview\" of\n    * the current layout of the view.\n    * @param {string} mode what mode are we in ['block', 'preview']\n    * @return {Component}\n    */\n   editorComponent(App, mode) {\n      return this.component(App);\n   }\n\n   /*\n    * @component()\n    * return a UI component based upon this view.\n    * @param {obj} App\n    * @return {obj} UI component\n    */\n   component(v1App = false) {\n      var component = new ABViewGanttComponent(this);\n\n      // if this is our v1Interface\n      if (v1App) {\n         var newComponent = component;\n         component = {\n            ui: component.ui(),\n            init: (/* options, accessLevel*/) => {\n               return newComponent.init(this.AB);\n            },\n            onShow: (...params) => {\n               return newComponent.onShow?.(...params);\n            },\n         };\n      }\n\n      return component;\n   }\n}\n","/*\n * ABViewGridPopupExport.js\n * Manage the Popup that allows you to export data into one of our supported\n * formats.\n */\n\nimport ClassUI from \"../../../ui/ClassUI\";\n\nexport default class ABWorkObjectPopupExport extends ClassUI {\n   constructor(idBase) {\n      idBase = idBase || \"abviewgridpopupExport\";\n\n      super({\n         popupExport: `${idBase}_popupExport`,\n         list: `${idBase}_popupExport_list`,\n      });\n\n      this._currentObject = null;\n      // {ABObject}\n      // The ABObject of the data we will export.  We can find out the fields\n      // from the object.\n\n      this._dataCollection = null;\n      // {ABDatacCollection}\n      // The ABDataCollection that contains the data we are going to export.\n\n      this._grid = null;\n      // {webix.grid}\n      // the current webix.grid that contains the data we are going to export.\n\n      this._filename = null;\n      // {string}\n      // the name of the desired output file.\n\n      this._hiddenFields = [];\n      // {array}\n      // An array of ABField.columnName(s) that we are not wanting to export\n   }\n\n   ui() {\n      var self = this;\n\n      // webix UI definition:\n      return {\n         view: \"popup\",\n         id: this.ids.popupExport,\n         width: 160,\n         height: 0, //150,\n         select: false,\n         hidden: true,\n         body: {\n            id: this.ids.list,\n            view: \"list\",\n            autoheight: true,\n            data: [\n               { name: \"CSV\", icon: \"file-excel-o\" },\n               { name: \"Excel\", icon: \"file-excel-o\" },\n               { name: \"PDF\", icon: \"file-pdf-o\" },\n               { name: \"PNG\", icon: \"file-image-o\" },\n            ],\n            template:\n               \"<div><i class='fa fa-#icon# webix_icon_btn' aria-hidden='true'></i> #name#</div>\",\n            on: {\n               onItemClick: function (id /*, e, node */) {\n                  var component = this.getItem(id);\n                  self.export(component.name);\n               },\n            },\n         },\n      };\n   }\n\n   async init(AB) {\n      if (AB) {\n         this.AB = AB;\n      }\n      webix.ui(this.ui());\n      $$(this.ids.popupExport).resize();\n   }\n\n   // internal business logic\n\n   /**\n    * @method dataCollectionLoad()\n    * the current ABDataCollection we are working with.\n    * @param {ABDataCollection} dc\n    */\n   dataCollectionLoad(dc) {\n      this._dataCollection = dc;\n   }\n\n   /**\n    * @method objectLoad()\n    * The current ABObject we are working with.\n    * @param {ABObject} object\n    */\n   objectLoad(object) {\n      this._currentObject = object;\n   }\n\n   /**\n    * @method setHiddenFields\n    * Register Fields we don't want exported in our data.\n    * @param {array} fields\n    *        An array of ABField.columnName(s) to exclude from our export.\n    */\n   setHiddenFields(fields = []) {\n      this._hiddenFields = fields ?? [];\n   }\n\n   /**\n    * @method setFilename()\n    * Register the name of the file we want our data to export as.\n    * @param {string} filename\n    */\n   setFilename(filename) {\n      this._filename = filename;\n   }\n\n   /**\n    * @method setGridComponent()\n    * Register the webix.grid that currently stores the data we are\n    * exporting.\n    * @param {webix.grid} $grid\n    */\n   setGridComponent($grid) {\n      this._grid = $grid;\n   }\n\n   /**\n    * @function show()\n    * Show this component.\n    * @param {obj} $view\n    *        the webix.$view to hover the popup around.\n    */\n   show($view) {\n      $$(this.ids.popupExport).show($view);\n   }\n\n   async export(name) {\n      let fnExport;\n\n      let columns = {};\n\n      let dc = this._dataCollection;\n      let _currentObject = this._currentObject;\n      let _grid = this._grid;\n      let _filename = this._filename;\n\n      if (\n         dc &&\n         (!dc.settings.loadAll || dc.dataStatus == dc.dataStatusFlag.notInitial)\n      ) {\n         // Load all data\n         await dc.reloadData(0, null);\n         dc.settings.loadAll = true;\n      }\n\n      // client filter data\n      // template of report\n      if (_currentObject) {\n         _currentObject.fields().forEach((f) => {\n            // hidden fields\n            if (this._hiddenFields.indexOf(f.columnName) > -1) return;\n\n            columns[f.columnName] = {\n               template: (rowData) => {\n                  return f.format(rowData);\n               },\n            };\n         });\n      }\n\n      // If there are checked items, then export them only\n      // Otherwise export all items\n      const noCheckedRow = _grid.data.find({appbuilder_select_item: 1}).length < 1;\n      const filterRow = (row) => noCheckedRow || row?.appbuilder_select_item == 1;\n\n      switch (name) {\n         case \"CSV\":\n            webix.csv.delimiter.cols = \",\";\n\n            fnExport = webix.toCSV(_grid, {\n               filename:\n                  _filename || (_currentObject ? _currentObject.label : null),\n               columns: columns,\n               filter: filterRow\n            });\n            break;\n         case \"Excel\":\n            fnExport = webix.toExcel(_grid, {\n               filename:\n                  _filename || (_currentObject ? _currentObject.label : null),\n               name:\n                  _filename || (_currentObject ? _currentObject.label : null),\n               columns: columns,\n               filterHTML: true,\n               filter: filterRow\n            });\n            break;\n         case \"PDF\":\n            fnExport = webix.toPDF(_grid, {\n               filename:\n                  _filename || (_currentObject ? _currentObject.label : null),\n               filterHTML: true,\n               filter: filterRow\n            });\n            break;\n         case \"PNG\":\n            fnExport = webix.toPNG(_grid, {\n               filename:\n                  _filename || (_currentObject ? _currentObject.label : null),\n               // filter: NOT SUPPORT\n            });\n            break;\n      }\n\n      try {\n         await fnExport;\n         $$(this.ids.popupExport).hide();\n      } catch (err) {\n         this.AB.notify.developer(err, {\n            message: `ABViewGridPopupExport:export(): System could not export: ${name}`,\n            exportType: name,\n            columns,\n            fileName: _filename,\n         });\n      }\n   }\n\n   // this.dataCollectionLoad = _logic.dataCollectionLoad;\n   // this.objectLoad = _logic.objectLoad;\n   // this.setGridComponent = _logic.setGridComponent;\n   // this.setFilename = _logic.setFilename;\n   // this.setHiddenFields = _logic.setHiddenFields;\n   // this.show = _logic.show;\n}\n","/*\n * ABViewGridPopupMassUpdate\n *\n * An ABViewGrid can offer a mass update feature.  This is a ui component\n * to help with the processing of the update.\n *\n */\n\nimport ClassUI from \"../../../ui/ClassUI\";\nimport RowUpdater from \"../RowUpdater\";\n\nvar L = null;\n\nexport default class ABViewGridPopupMassUpdate extends ClassUI {\n   //.extend(idBase, function(App) {\n\n   constructor(ABViewGridComponent, idBase) {\n      idBase = idBase || \"abviewgridpopupMassUpdate\";\n\n      super({\n         component: `${idBase}_popupMassUpdate`,\n         submit: `${idBase}_submitMassUpdate`,\n      });\n\n      this.CurrentObject = null;\n      // {ABObject}\n      // Which ABObject are we currently working with.\n\n      this.GridComponent = ABViewGridComponent;\n      // {ABViewGridComponent}\n      // The current ABViewGridComponent we are working with.\n\n      this.AB = ABViewGridComponent.AB;\n      // {ABFactory}\n\n      this.rowUpdater = new RowUpdater(idBase, this.AB);\n      // {RowUpdater}\n      // An instance of our RowUpdater form builder.\n\n      if (!L) {\n         L = (...params) => {\n            return this.AB.Multilingual.label(...params);\n         };\n      }\n   }\n\n   ui() {\n      var ids = this.ids;\n\n      // Our webix UI definition:\n      return {\n         view: \"popup\",\n         id: ids.component,\n         // modal: true,\n         body: {\n            width: 500,\n            rows: [\n               // Update panel\n               this.rowUpdater.ui(),\n               { height: 15 },\n               {\n                  cols: [\n                     {},\n                     {\n                        view: \"button\",\n                        value: L(\"Cancel\"),\n                        width: 100,\n                        click: () => {\n                           this.hide();\n                        },\n                     },\n                     {\n                        id: ids.submit,\n                        css: \"webix_primary\",\n                        view: \"button\",\n                        label: L(\"Update\"),\n                        type: \"form\",\n                        width: 120,\n                        click: () => {\n                           this.submit();\n                        },\n                     },\n                  ],\n               },\n            ],\n         },\n         on: {\n            onShow: () => {\n               this.onShow();\n            },\n         },\n      };\n   }\n\n   async init(AB) {\n      webix.ui(this.ui());\n\n      return Promise.resolve();\n   }\n\n   /**\n    * @method hide()\n    * Hide the popup.\n    */\n   hide() {\n      $$(this.ids.component).hide();\n   }\n\n   /**\n    * @function objectLoad\n    * Ready the Popup according to the current object & datatable\n    * @param {ABObject} object\n    *        the currently selected object.\n    * @param {webix.datatable} dataTable\n    *        the dataTable we need to run the mass update on...trust me this\n    *        will be good\n    */\n   objectLoad(object, dataTable) {\n      this.CurrentObject = object;\n      this.rowUpdater.objectLoad(object);\n      this.DataTable = dataTable;\n   }\n\n   onShow() {}\n\n   /**\n    * @method show()\n    * Show this component.\n    * @param {obj} $view\n    *        the webix.$view to hover the popup around.\n    * @param {json} options\n    *        Additional webix options related to the .show() method.\n    */\n   show($view, options = null) {\n      if (options != null) {\n         $$(this.ids.component).show($view, options);\n      } else {\n         $$(this.ids.component).show($view);\n      }\n   }\n\n   /**\n    * @method submit()\n    * Process the submit action by getting the values to change and then\n    * running a batchUpdate() on the items in our datatable that were selected.\n    */\n   submit() {\n      // Update values to records\n      let update_button = $$(this.ids.submit),\n         update_items = this.rowUpdater.getValue() || [];\n\n      update_button.disable();\n\n      if (!this.GridComponent) {\n         // TODO : Message\n         // console.log(\"no data collection to update\");\n         update_button.enable();\n         return;\n      } else if (update_items.length < 1) {\n         // TODO : Message\n         update_button.enable();\n         return;\n      }\n\n      let $datatable = this.GridComponent.getDataTable(); // $$(DataTable.ui.id);\n      let updatedRowIds = [];\n      $datatable.data.each(function (row) {\n         if (\n            row &&\n            row.hasOwnProperty(\"appbuilder_select_item\") &&\n            row.appbuilder_select_item == 1\n         ) {\n            updatedRowIds.push(row.id);\n         }\n      });\n\n      let vals = {};\n      update_items.forEach((item) => {\n         let fieldInfo = this.CurrentObject.fieldByID(item.fieldId);\n         if (!fieldInfo) return;\n\n         vals[fieldInfo.columnName] = item.value;\n      });\n\n      if (updatedRowIds.length > 0) {\n         webix.confirm({\n            title: L(\"Updating Multiple Records\"),\n            text: L(\"Are you sure you want to update the selected records?\"),\n            callback: (result) => {\n               if (result) {\n                  if ($datatable && $datatable.showProgress)\n                     $datatable.showProgress({ type: \"icon\" });\n\n                  let objModel = this.CurrentObject.model();\n                  objModel\n                     .batchUpdate({\n                        rowIds: updatedRowIds,\n                        values: vals,\n                     })\n                     .then(() => {\n                        // Anything we need to do after we are done.\n                        update_button.enable();\n                        this.hide();\n\n                        if ($datatable && $datatable.hideProgress)\n                           $datatable.hideProgress();\n                     })\n                     .catch((err) => {\n                        this.AB.notify.developer(err, {\n                           context:\n                              \"ABViewGridPopupMassUpdate:submit(): Error during batchUpdate\",\n                           rowIds: updatedRowIds,\n                           values: vals,\n                        });\n                     });\n               } else {\n                  update_button.enable();\n               }\n            },\n         });\n      } else {\n         webix.alert({\n            title: L(\"No Records Selected\"),\n            text: L(\n               \"You need to select at least one record...did you drink your coffee today?\"\n            ),\n         });\n         update_button.enable();\n         this.hide();\n      }\n   }\n}\n","/*\n * ABViewGridPopupSortFields\n *\n * Manage the Sort Fields popup.\n *\n */\n\nimport ClassUI from \"../../../ui/ClassUI\";\n\nvar L = null;\n\nexport default class AB_Work_Object_Workspace_PopupSortFields extends ClassUI {\n   constructor(idBase) {\n      idBase = idBase || \"abviewgridpopupSortFields\";\n\n      super({\n         component: `${idBase}_popupSort`,\n         list: `${idBase}_popupSort_list`,\n         form: `${idBase}_popupSort_form`,\n      });\n\n      this.CurrentObject = null;\n      // {ABObject}\n      // The current ABObject we are working with.\n\n      this._blockOnChange = false;\n      // {bool}\n      // Should we skip the onChange handler processing at this time?\n\n      this._settings = null;\n      // {json}\n      // default sort settings.\n\n      if (!L) {\n         L = (...params) => {\n            return this.AB.Multilingual.label(...params);\n         };\n      }\n   }\n\n   uiForm() {\n      return {\n         view: \"form\",\n         id: this.ids.form,\n         // autoheight: true,\n         borderless: true,\n         elements: [\n            {\n               view: \"button\",\n               type: \"form\",\n               css: \"webix_primary\",\n               value: L(\"Add new sort\"),\n               on: {\n                  onItemClick: (/* id, e, node */) => {\n                     this.clickAddNewSort();\n                     this.triggerOnChange();\n                  },\n               },\n            },\n         ],\n      };\n   }\n\n   ui() {\n      return {\n         view: \"popup\",\n         id: this.ids.component,\n         // autoheight:true,\n         width: 600,\n         body: this.uiForm(),\n         on: {\n            onShow: () => {\n               this.onShow();\n            },\n         },\n      };\n   }\n\n   // Our init() function for setting up our UI\n   async init(AB) {\n      if (AB) {\n         this.AB = AB;\n      }\n\n      webix.ui(this.ui());\n   }\n\n   /**\n    * @function clickAddNewSort\n    * When the user clicks the \"Add New Sort\" button, this routine will\n    * add another row to the sort form.\n    * @param {string} fieldId\n    *        The ABField.id of the field to auto select in this new row.\n    * @param {string} dir\n    *        The sort order to auto select in this new row.\n    */\n   // clickAddNewSort: function(by, dir, isMulti, id) {\n   clickAddNewSort(fieldId, dir) {\n      var self = this;\n      var sort_form = $$(this.ids.form);\n\n      var viewIndex = sort_form.getChildViews().length - 1;\n      var listFields = this.getFieldList(true);\n      sort_form.addView(\n         {\n            id: \"sort\" + webix.uid(),\n            cols: [\n               {\n                  view: \"combo\",\n                  width: 220,\n                  options: listFields,\n                  on: {\n                     onChange: function (columnId) {\n                        var el = this;\n                        self.onChangeCombo(columnId, el);\n                     },\n                  },\n               },\n               {\n                  view: \"segmented\",\n                  width: 200,\n                  options: [\n                     {\n                        id: \"\",\n                        value: L(\"Please select field\"),\n                     },\n                  ],\n                  on: {\n                     onChange: (/* newv, oldv */) => {\n                        // 'asc' or 'desc' values\n                        this.triggerOnChange();\n                     },\n                  },\n               },\n               {\n                  view: \"button\",\n                  css: \"webix_danger\",\n                  icon: \"fa fa-trash\",\n                  type: \"icon\",\n                  width: 30,\n                  on: {\n                     onItemClick: function () {\n                        sort_form.removeView(this.getParentView());\n                        self.refreshFieldList(true);\n                        self.triggerOnChange();\n                     },\n                  },\n               },\n            ],\n         },\n         viewIndex\n      );\n\n      // Select field\n      if (fieldId) {\n         var fieldsCombo = sort_form\n            .getChildViews()\n            [viewIndex].getChildViews()[0];\n         fieldsCombo.setValue(fieldId);\n      }\n      // select direction\n      if (dir) {\n         var segmentButton = sort_form\n            .getChildViews()\n            [viewIndex].getChildViews()[1];\n         segmentButton.setValue(dir);\n      }\n   }\n\n   /**\n    * @function getFieldList\n    * return field list so we can present a custom UI for view\n    * @param {bool} excludeSelected\n    *        Should we ignore fields that already exist in the form?\n    * @return {array} [ { id, value } ]\n    *         an array that is compatible with the webix.list\n    *         widget.\n    */\n   getFieldList(excludeSelected) {\n      var sort_form = $$(this.ids.form),\n         listFields = [];\n\n      var allFields = this.CurrentObject.fields();\n      if (allFields.length == 0) return listFields;\n\n      // Get all fields include hidden fields\n      allFields.forEach((f) => {\n         if (f.fieldIsSortable()) {\n            listFields.push({\n               id: f.id,\n               value: f.label,\n            });\n         }\n      });\n\n      // Remove selected field\n      if (excludeSelected) {\n         var childViews = sort_form.getChildViews();\n         if (childViews.length > 1) {\n            // Ignore 'Add new sort' button\n            childViews.forEach(function (cView, index) {\n               if (childViews.length - 1 <= index) return false;\n\n               var selectedValue = cView.getChildViews()[0].getValue();\n               if (selectedValue) {\n                  listFields = listFields.filter((f) => f.id != selectedValue);\n               }\n            });\n         }\n      }\n      return listFields;\n   }\n\n   /**\n    * @function objectLoad\n    * Ready the Popup according to the current object\n    * @param {ABObject} object  the currently selected object.\n    */\n   objectLoad(object) {\n      this.CurrentObject = object;\n   }\n\n   /**\n    * @method setSettings\n    * Initialize the form with a set of conditions.\n    * @param {Array} settings\n    *        The default settings for this form.\n    *        [\n    *           {\n    *              key: uuid,     // ABField.id\n    *              dir: string,   // 'asc' or 'desc'\n    *           }\n    *        ]\n    */\n   setSettings(settings) {\n      this._settings = this.AB.cloneDeep(settings);\n   }\n\n   /**\n    * @method getSettings\n    * return the current sort settings stored by this form.\n    * @return {Array} -\n    *         [\n    *            {\n    *               key: uuid,     // ABField.id\n    *               dir: string,   // 'asc' or 'desc'\n    *            }\n    *         ]\n    */\n   getSettings() {\n      var sort_form = $$(this.ids.form),\n         sortFields = [];\n\n      var childViews = sort_form.getChildViews();\n      if (childViews.length > 1) {\n         // Ignore 'Add new sort' button\n         childViews.forEach(function (cView, index) {\n            if (childViews.length - 1 <= index) return false;\n\n            var fieldId = cView.getChildViews()[0].getValue();\n            var dir = cView.getChildViews()[1].getValue();\n            sortFields.push({\n               key: fieldId,\n               dir: dir,\n            });\n         });\n      }\n      return sortFields;\n   }\n\n   /**\n    * @method onChangeCombo()\n    * Update the display once they have chosen a field to sort by.\n    * We now need to offer the appropriate sort direction chooser.\n    * @param {string} fieldID\n    *        The value of the combo box now.\n    * @param {webix.$view} el\n    *        The current Webix.$view that was the combo box that just\n    *        changed.\n    */\n   onChangeCombo(fieldID, el) {\n      var allFields = this.CurrentObject.fields();\n      var chosenField = null,\n         sortDir = el.getParentView().getChildViews()[1],\n         // isMultiLingual = el.getParentView().getChildViews()[2],\n         // isMulti = 0,\n         options = null;\n\n      chosenField = allFields.find((f) => f.id == fieldID);\n      if (!chosenField) return;\n\n      switch (chosenField.key) {\n         case \"date\":\n            options = [\n               { id: \"asc\", value: L(\"Before -> After\") },\n               { id: \"desc\", value: L(\"After -> Before\") },\n            ];\n            break;\n         case \"number\":\n            options = [\n               { id: \"asc\", value: L(\"1 -> 9\") },\n               { id: \"desc\", value: L(\"9 -> 1\") },\n            ];\n            break;\n         case \"string\":\n         default:\n            options = [\n               { id: \"asc\", value: L(\"A -> Z\") },\n               { id: \"desc\", value: L(\"Z -> A\") },\n            ];\n            break;\n      }\n\n      sortDir.define(\"options\", options);\n      sortDir.refresh();\n\n      // if (columnConfig.settings.supportMultilingual)\n      //    isMulti = columnConfig.settings.supportMultilingual;\n\n      // isMultiLingual.setValue(isMulti);\n\n      this.refreshFieldList();\n      this.triggerOnChange();\n   }\n\n   /**\n    * @function onShow\n    * Rebuild the form when an onShow() is called.\n    */\n   onShow() {\n      var sort_form = $$(this.ids.form);\n\n      // clear field options in the form\n      webix.ui(this.uiForm(), sort_form);\n\n      var sorts = this._settings;\n      if (sorts && sorts.forEach) {\n         sorts.forEach((s) => {\n            this.clickAddNewSort(s.key, s.dir);\n         });\n      }\n\n      if (sorts == null || sorts.length == 0) {\n         this.clickAddNewSort();\n      }\n   }\n\n   /**\n    * @method refreshFieldList\n    * return an updated field list so you cannot duplicate a sort\n    * @param {bool} ignoreRemoveViews\n    *\n    */\n   refreshFieldList(ignoreRemoveViews) {\n      var sort_form = $$(this.ids.form),\n         listFields = this.getFieldList(false),\n         selectedFields = [],\n         removeChildViews = [];\n\n      var childViews = sort_form.getChildViews();\n      if (childViews.length > 1) {\n         // Ignore 'Add new sort' button\n         childViews.forEach(function (cView, index) {\n            if (childViews.length - 1 <= index) return false;\n\n            var fieldId = cView.getChildViews()[0].getValue(),\n               // fieldObj = $.grep(listFields, function (f) { return f.id == fieldId });\n               fieldObj = listFields.find((f) => f.id == fieldId);\n\n            if (fieldObj) {\n               // Add selected field to list\n               selectedFields.push(fieldObj);\n            } else {\n               // Add condition to remove\n               removeChildViews.push(cView);\n            }\n         });\n      }\n\n      // Remove filter conditions when column is deleted\n      if (!ignoreRemoveViews) {\n         removeChildViews.forEach(function (cView) {\n            sort_form.removeView(cView);\n         });\n      }\n\n      // Field list should not duplicate field items\n      childViews = sort_form.getChildViews();\n      if (childViews.length > 1) {\n         // Ignore 'Add new sort' button\n         childViews.forEach(function (cView, index) {\n            if (childViews.length - 1 <= index) return false;\n\n            var fieldId = cView.getChildViews()[0].getValue(),\n               // fieldObj = $.grep(listFields, function (f) { return f.id == fieldId }),\n               fieldObj = listFields.filter(function (f) {\n                  return f.id == fieldId;\n               });\n\n            // var selectedFieldsExcludeCurField = $(selectedFields).not(fieldObj);\n            var selectedFieldsExcludeCurField = selectedFields.filter(function (\n               x\n            ) {\n               if (Array.isArray(fieldObj) && fieldObj.indexOf(x) !== -1) {\n                  return false;\n               }\n               return true;\n            });\n\n            // var enableFields = $(listFields).not(selectedFieldsExcludeCurField).get();\n            var enableFields = listFields.filter(function (x) {\n               if (\n                  Array.isArray(selectedFieldsExcludeCurField) &&\n                  selectedFieldsExcludeCurField.indexOf(x) !== -1\n               ) {\n                  return false;\n               }\n               return true;\n            });\n\n            // Update field list\n            cView.getChildViews()[0].define(\"options\", enableFields);\n            cView.getChildViews()[0].refresh();\n         });\n      }\n   }\n\n   /**\n    * @function triggerOnChange\n    * This parses the sort form to build in order the sorts then saves to the application object workspace\n    */\n   triggerOnChange() {\n      // block .onChange callback\n      if (this._blockOnChange) return;\n\n      this._settings = this.getSettings();\n\n      this.emit(\"changed\", this._settings);\n   }\n\n   blockOnChange() {\n      this._blockOnChange = true;\n   }\n\n   unblockOnChange() {\n      this._blockOnChange = false;\n   }\n\n   /**\n    * @function show()\n    * Show this component.\n    * @param {obj} $view\n    *        the webix.$view to hover the popup around.\n    * @param {uuid} fieldId\n    *        the ABField.id we want to prefill the sort with\n    * @param {json} options\n    *        Additional webix.show() options parameters.\n    */\n   show($view, fieldId, options) {\n      this.blockOnChange();\n\n      $$(this.ids.component).show($view, options || null);\n\n      if (fieldId) {\n         this.clickAddNewSort(fieldId);\n      }\n\n      this.unblockOnChange();\n   }\n\n   /**\n    * @function sort()\n    * client sort data in list\n    *\n    * @param {Object} a\n    * @param {Object} b\n    */\n   sort(a, b) {\n      let result = 0;\n\n      const childViews = $$(this.ids.form).getChildViews();\n      if (childViews.length > 1) {\n         // Ignore 'Add new sort' button\n         childViews.forEach((cView, index) => {\n            if (childViews.length - 1 <= index || result != 0) return;\n\n            const fieldId = cView.getChildViews()[0].getValue();\n            const dir = cView.getChildViews()[1].getValue();\n\n            const field = this.CurrentObject.fieldByID(fieldId);\n            if (!field) return;\n\n            const by = field.columnName; // column name\n\n            let aValue = a[by],\n               bValue = b[by];\n\n            if (Array.isArray(aValue)) {\n               aValue = (aValue || [])\n                  .map(function (item) {\n                     return item.text || item;\n                  })\n                  .join(\" \");\n            }\n\n            if (Array.isArray(bValue)) {\n               bValue = (bValue ?? [])\n                  .map((item) => item.text || item)\n                  .join(\" \");\n            }\n\n            if (aValue != bValue) {\n               if (dir == \"asc\") {\n                  result = aValue > bValue ? 1 : -1;\n               } else {\n                  result = aValue < bValue ? 1 : -1;\n               }\n            }\n         });\n      }\n\n      return result;\n   }\n}\n","const ABViewGridCore = require(\"../../core/views/ABViewGridCore\");\nimport ABViewComponent from \"./ABViewComponent\";\n\nimport ABPopupExport from \"./ABViewGridPopupExport\";\nimport ABPopupMassUpdateClass from \"./ABViewGridPopupMassUpdate\";\nimport ABPopupSortField from \"./ABViewGridPopupSortFields\";\nimport ABViewGridFilter from \"./viewProperties/ABViewPropertyFilterData\";\nconst ABViewPropertyLinkPage =\n   require(\"./viewProperties/ABViewPropertyLinkPage\").default;\n\nconst KEY_STORAGE_SETTINGS = \"abviewgrid_settings\";\n// {string}\n// the unique key for ABViewGrids to store/retrieve their local settings\n\nvar GridSettings = null;\n// {hash} { grid.id : [ {columnHeader}, {columnHeader} ...]}\n// Keep a global copy of our local Grid settings, so we can optimize the header\n// sizes.\n\n// let PopupHideFieldComponent = null;\n// let PopupFrozenColumnsComponent = null;\n// let PopupFilterProperty = null;\n// let PopupSummaryColumnsComponent = null;\n// let PopupCountColumnsComponent = null;\n\nvar L = null;\n// multilingual Label fn()\n\nclass ABViewGridComponent extends ABViewComponent {\n   constructor(viewGrid, idBase) {\n      var base = idBase || `ABViewGrid_${viewGrid.id}`;\n\n      super(base, {\n         // component: `${base}_component`,\n         toolbar: \"\",\n         buttonDeleteSelected: \"\",\n\n         buttonFilter: \"\",\n         buttonMassUpdate: \"\",\n         buttonSort: \"\",\n         buttonExport: \"\",\n\n         globalSearchToolbar: \"\",\n\n         datatable: \"\",\n      });\n\n      this.viewGrid = viewGrid;\n      this.viewGrid.filterHelper.on(\"filter.data\", (fnFilter, filterRules) => {\n         this.callbackFilterData(fnFilter, filterRules); // be notified when there is a change in the filter\n      });\n\n      // derive these from viewGrid\n      this.AB = viewGrid.AB;\n      this.id = viewGrid.id;\n      this.settings = viewGrid.settings || {};\n\n      /////\n      ///// For TEsting:\n      /////\n      // this.settings.showToolbar = 1;\n      // this.settings.isEditable = 1;\n      // this.settings.isExportable = 1;\n      // this.settings.gridFilter = {\n      //    filterOption: 1,\n      //    userFilterPosition: \"form\",\n      //    isGlobalToolbar: 1,\n      // };\n\n      // this.settings.detailsPage = \"some-uuid\";\n      // this.settings.detailTab = \"some_uuid_2\";\n      // this.settings.trackView = 1;\n      /////\n      ///// end testing\n      /////\n\n      this.columnSplitLeft = 0;\n      // {integer}\n      // Which column to \"split\"/\"freeze\" from the left side of the grid.\n\n      this.columnSplitRight = 0;\n      // {integer}\n      // The # columns to the right to freeze.\n\n      this.datacollection = null;\n      // {ABDataCollection}\n      // The Webix DataCollection that manages the data we are displaying.\n\n      this.validationError = false;\n      // {bool}\n      // Has a Validation Error occured?\n\n      this.linkPage = this.viewGrid.linkPageHelper.component(\n         this.AB._App,\n         `${base}_gridlinkpage`\n      );\n      // {ABViewPropertyLinkPage}\n      //\n\n      this.PopupExport = new ABPopupExport(base);\n      this.PopupExport.init(this.AB);\n      // {ABViewGridPopupExport}\n      // Popup for managing how to export our data.\n\n      this.PopupMassUpdateComponent = new ABPopupMassUpdateClass(this, this.id);\n      this.PopupMassUpdateComponent.init(this.AB);\n      // this.PopupMassUpdateComponent.on(\"\")\n      // {}\n      // The popup for performing a Mass Edit operation.\n\n      this.PopupSortDataTableComponent = new ABPopupSortField(base);\n      this.PopupSortDataTableComponent.init(this.AB);\n      this.PopupSortDataTableComponent.on(\"changed\", (sortOptions) => {\n         this.callbackSortData(sortOptions);\n      });\n      // {ABViewGridPopupSortFields}\n      // The popup for adding sort criteria to our grid.\n\n      this.skippableColumns = [\n         \"appbuilder_select_item\",\n         \"appbuilder_view_detail\",\n         \"appbuilder_view_track\",\n         \"appbuilder_view_edit\",\n         \"appbuilder_trash\",\n      ];\n      // {array}\n      // An array of column names that should be skipped from some of our\n      // event handlers.\n\n      // this.EditField = null;\n      // // {ABFieldXXX}\n      // // Which ABField is the focus of our PopupHeader menu?\n\n      // this.EditNode = null;\n      // // {HTML DOM}\n      // // The webix.$node where the ABField Header is that our PopupHeader\n      // // should be displayed at.\n\n      this.handler_select = (...params) => {\n         this.selectRow(...params);\n      };\n      // {fn} .handler_select\n      // the callback fn for our selectRow()\n      // We want this called when the .datacollection we are linked to\n      // emits an \"onChange\" event.\n\n      if (!L) {\n         L = (...params) => {\n            return this.AB.Multilingual.label(...params);\n         };\n      }\n   }\n\n   /**\n    * @method getColumnIndex()\n    * return the Datatable.getColumnIndex() value\n    * @param {string} id\n    *        the uuid of the column we are referencing.\n    * @return {integer}\n    */\n   getColumnIndex(id) {\n      var indx = this.getDataTable().getColumnIndex(id);\n      if (!this.settings.massUpdate) {\n         // the index is 0 based. So if the massUpdate feature isn't\n         // enabled, we need to add 1 to the result so they look like\n         // a 1, 2, ...\n\n         indx++;\n      }\n      return indx;\n   }\n\n   uiDatatable() {\n      var ids = this.ids;\n      var settings = this.settings;\n      var self = this;\n\n      var view = \"datatable\";\n      if (settings.isTreeDatable || settings.groupBy) {\n         // switch datatable to support tree\n         view = \"treetable\";\n      }\n\n      var selectType = \"cell\";\n      if (!settings.isEditable && (settings.detailsPage || settings.editPage)) {\n         selectType = \"row\";\n      }\n\n      return {\n         view: view,\n         id: ids.datatable,\n         resizeColumn: { size: 10 },\n         resizeRow: { size: 10 },\n         prerender: false,\n         editable: settings.isEditable,\n         fixedRowHeight: false,\n         height: settings.height || 0,\n         editaction: \"custom\",\n         select: selectType,\n         footer:\n            // show footer when there are summary columns\n            settings.summaryColumns.length > 0 ||\n            settings.countColumns.length > 0,\n         tooltip: true,\n         // tooltip: {\n         //    // id: ids.tooltip,\n         //    template: (obj, common) => {\n         //       return this.toolTip(obj, common);\n         //    },\n         //    on: {\n         //       // When showing a larger image preview the tooltip sometime displays part of the image off the screen...this attempts to fix that problem\n         //       onBeforeRender: function () {\n         //          self.toolTipOnBeforeRender(this.getNode());\n         //       },\n         //       onAfterRender: function (data) {\n         //          self.toolTipOnAfterRender(this.getNode());\n         //       },\n         //    },\n         // },\n         dragColumn: true,\n         on: {\n            onBeforeSelect: function (data, preserve) {\n               if (self.skippableColumns.indexOf(data.column) != -1) {\n                  return false;\n               } else if (settings.isEditable) {\n                  var currObject = self.datacollection.datasource;\n                  var selectField = currObject.fields((f) => {\n                     return f.columnName == data.column;\n                  })[0];\n\n                  if (selectField == null) return true;\n\n                  var cellNode = this.getItemNode({\n                        row: data.row,\n                        column: data.column,\n                     }),\n                     rowData = this.getItem(data.row);\n\n                  console.error(\"TODO: field.customEdit() remove App param!\");\n                  return selectField.customEdit(\n                     rowData,\n                     self.AB._App,\n                     cellNode\n                  );\n               } else if (!settings.detailsPage && !settings.editPage) {\n                  return false;\n               }\n            },\n            onAfterSelect: (data, preserve) => {\n               // {ABObject} data\n               //            the selected object\n               // {bool} prevent\n               //        indicates whether the previous selection state should\n               //        be saved. (is multiselect and they are holding SHIFT)\n               if (this.settings.isEditable) {\n                  this.onAfterSelect(data, preserve);\n               }\n            },\n            onBeforeEditStart: function (id) {\n               if (!this.getItem(id) == \"appbuilder_select_item\") return false;\n            },\n            onCheck: function (row, col, val) {\n               // Update checkbox data\n               if (col == \"appbuilder_select_item\") {\n                  // do nothing because we will parse the table once we decide\n                  // if we are deleting or updating rows\n                  self.toggleUpdateDelete();\n               } else {\n                  if (self.settings.isEditable) {\n                     // if the colum is not the select item column move on to\n                     // the next step to save\n                     var state = {\n                        value: val,\n                     };\n\n                     var editor = {\n                        row: row,\n                        column: col,\n                        config: null,\n                     };\n                     self.onAfterEditStop(state, editor);\n                  } else {\n                     var node = this.getItemNode({\n                        row: row,\n                        column: col,\n                     });\n                     var checkbox = node.querySelector(\n                        'input[type=\"checkbox\"]'\n                     );\n                     if (val == 1) {\n                        checkbox.checked = false;\n                     } else {\n                        checkbox.checked = true;\n                     }\n                  }\n               }\n            },\n            onBeforeEditStop: function (state, editor) {\n               // console.warn(\"!! ToDo: onBeforeEditStop()\");\n            },\n            onAfterEditStop: (state, editor, ignoreUpdate) => {\n               if (this.validationError == false)\n                  this.onAfterEditStop(state, editor, ignoreUpdate);\n            },\n            onValidationError: function () {\n               this.validationError = true;\n            },\n            onValidationSuccess: function () {\n               this.validationError = false;\n            },\n\n            // We are sorting with server side requests now so we can remove this\n            // onAfterLoad: function () {\n            //    _logic.onAfterLoad();\n            // },\n            onColumnResize: function (\n               columnName,\n               newWidth,\n               oldWidth,\n               user_action\n            ) {\n               // if we resize the delete column we want to resize the last\n               // column but Webix will not allow since the column is split\n               var rightSplitItems = [\n                  \"appbuilder_view_detail\",\n                  \"appbuilder_view_track\",\n                  \"appbuilder_view_edit\",\n                  \"appbuilder_trash\",\n               ];\n               if (rightSplitItems.indexOf(columnName) != -1) {\n                  // Block events so we can leave the delete column alone\n                  this.blockEvent();\n                  // keeps original width\n                  this.setColumnWidth(columnName, oldWidth);\n                  this.unblockEvent();\n                  // Listen to events again\n\n                  // find the last column's config\n                  var column = self.getLastColumn();\n\n                  columnName = column.id;\n\n                  // determine if we are making the column larger or smaller\n                  if (newWidth < oldWidth) {\n                     newWidth = column.width + 40;\n                     // add 40 because there is not any more space to drag so we\n                     // will allow 40px increments\n                  } else {\n                     newWidth = column.width - (newWidth - 40);\n                     // take the column's width and subtrack the difference of\n                     // the expanded delet column drag\n                  }\n                  // we don't want columns to be smaller than 50 ?? do we ??\n                  // I could be wrong maybe a checkbox could be smaller so this\n                  // could change\n                  if (newWidth < 50) {\n                     newWidth = 50;\n                  }\n                  // minWidth is important because we are using fillspace:true\n                  column.minWidth = newWidth;\n                  // Sets the UI\n                  this.setColumnWidth(columnName, newWidth);\n               }\n               // Saves the new width\n               if (user_action) {\n                  self.onColumnResize(\n                     columnName,\n                     newWidth,\n                     oldWidth,\n                     user_action\n                  );\n               }\n            },\n            onRowResize: (rowId) => {\n               // V2: we no longer do anything onRowResize()\n               // before we saved the row height in the record.\n               // this.onRowResize(rowId);\n            },\n            onBeforeColumnDrag: (sourceId, event) => {\n               if (this.skippableColumns.indexOf(sourceId) != -1) return false;\n               else return true;\n            },\n            onBeforeColumnDrop: (sourceId, targetId, event) => {\n               // Make sure we are not trying to drop onto one of our special\n               // columns ...\n               if (this.skippableColumns.indexOf(targetId) != -1) return false;\n            },\n            onAfterColumnDrop: (sourceId, targetId, event) => {\n               this.onAfterColumnDrop(sourceId, targetId, event);\n            },\n            // onAfterColumnShow: function (id) {\n            //    // console.warn(\"!! ToDo: onAfterColumnShow()\");\n            //    // $$(self.webixUiId.visibleFieldsPopup).showField(id);\n            // },\n            // onAfterColumnHide: function (id) {\n            //    // console.warn(\"!! ToDo: onAfterColumnHide()\");\n            //    // $$(self.webixUiId.visibleFieldsPopup).hideField(id);\n            // },\n\n            onHeaderClick: (id, e, node) => {\n               /* if (settings.configureHeaders) */\n               this.onHeaderClick(id, e, node);\n            },\n         },\n      };\n   }\n\n   uiFilter() {\n      return this.viewGrid.filterHelper.ui();\n\n      // make sure onFilterData is now .emit()ed instead of passing in a callback.\n   }\n\n   /**\n    * @method uiToolbar()\n    * Return the webix definition for the toolbar row for our Grids.\n    * @return {json}\n    */\n   uiToolbar() {\n      var ids = this.ids;\n      var self = this;\n\n      return {\n         view: \"toolbar\",\n         id: ids.toolbar,\n         hidden: true,\n         css: \"ab-data-toolbar\",\n         cols: [\n            {\n               view: \"button\",\n               id: ids.buttonMassUpdate,\n               css: \"webix_transparent\",\n               label: L(\"Edit\"),\n               icon: \"fa fa-pencil-square-o\",\n               type: \"icon\",\n               disabled: true,\n               autowidth: true,\n               click: function () {\n                  self.toolbarMassUpdate(this.$view);\n               },\n            },\n            {\n               view: \"button\",\n               id: ids.buttonDeleteSelected,\n               css: \"webix_transparent\",\n               label: L(\"Delete\"),\n               icon: \"fa fa-trash\",\n               type: \"icon\",\n               disabled: true,\n               autowidth: true,\n               click: function () {\n                  self.toolbarDeleteSelected(this.$view);\n               },\n            },\n            {\n               view: \"button\",\n               id: ids.buttonFilter,\n               css: \"webix_transparent\",\n               label: L(\"Filters\"),\n               icon: \"fa fa-filter\",\n               type: \"icon\",\n               autowidth: true,\n               click: function () {\n                  self.toolbarFilter(this.$view);\n               },\n            },\n            {\n               view: \"button\",\n               id: ids.buttonSort,\n               css: \"webix_transparent\",\n               label: L(\"Sort\"),\n               icon: \"fa fa-sort\",\n               type: \"icon\",\n               autowidth: true,\n               click: function () {\n                  self.toolbarSort(this.$view);\n               },\n            },\n            {\n               view: \"button\",\n               id: ids.buttonExport,\n               css: \"webix_transparent\",\n               label: L(\"Export\"),\n               icon: \"fa fa-print\",\n               type: \"icon\",\n               autowidth: true,\n               click: function () {\n                  self.toolbarExport(this.$view);\n               },\n            },\n            {},\n            {\n               id: ids.globalSearchToolbar,\n               view: \"search\",\n               placeholder: L(\"Search...\"),\n               on: {\n                  onTimedKeyPress: () => {\n                     let searchText = $$(ids.globalSearchToolbar).getValue();\n                     this.viewGrid.filterHelper.externalSearchText(searchText);\n                  },\n               },\n            },\n         ],\n      };\n   }\n\n   ui() {\n      var tableUI = {\n         type: \"space\",\n         borderless: true,\n         rows: [\n            {},\n            {\n               view: \"label\",\n               label: L(\"Select an object to load.\"),\n               inputWidth: 200,\n               align: \"center\",\n            },\n            {},\n         ],\n      };\n\n      if (this.datacollection || this.settings.dataviewID != \"\") {\n         tableUI.padding = this.settings.padding;\n         tableUI.rows = [];\n         if (this.settings.showToolbar) {\n            tableUI.rows.push(this.uiToolbar());\n         }\n         if (this.settings.gridFilter.filterOption) {\n            tableUI.rows.push(this.uiFilter());\n         }\n\n         tableUI.rows.push(this.uiDatatable());\n      }\n\n      return tableUI;\n   }\n\n   async init(AB, accessLevel = 2) {\n      if (AB) {\n         this.AB = AB;\n      }\n      var self = this;\n      var ids = this.ids;\n\n      // WORKAROUND : Where should we define this ??\n      // For include PDF.js\n      webix.codebase = \"\";\n      webix.cdn = \"/js/webix\";\n\n      // this shows the options to Hide, Filter, sort , etc...\n      // only in Designer?\n      // PopupHeaderEditComponent.init({\n      //    onClick: _logic.callbackHeaderEdit, // be notified when there is a change in the hidden fields\n      // });\n\n      // NOTE: register the onAfterRender() here, so it only registers\n      // one.\n      var DataTable = this.getDataTable();\n      var throttleCustomDisplay = null;\n      var scrollStarted = null;\n\n      webix.extend(DataTable, webix.ProgressBar);\n\n      DataTable.config.accessLevel = accessLevel;\n      if (accessLevel < 2) {\n         DataTable.define(\"editable\", false);\n      }\n\n      let customDisplays = (data) => {\n         var CurrentObject = this.datacollection?.datasource;\n         if (!CurrentObject || !DataTable.data) return;\n\n         var displayRecords = [];\n\n         let verticalScrollState = DataTable.getScrollState().y,\n            rowHeight = DataTable.config.rowHeight,\n            height =\n               DataTable.$view.querySelector(\".webix_ss_body\").clientHeight,\n            startRecIndex = Math.floor(verticalScrollState / rowHeight),\n            endRecIndex = startRecIndex + DataTable.getVisibleCount(),\n            index = 0;\n\n         DataTable.data.order.each(function (id) {\n            if (id != null && startRecIndex <= index && index <= endRecIndex)\n               displayRecords.push(id);\n\n            index++;\n         });\n\n         var editable = this.settings.isEditable;\n         if (DataTable.config.accessLevel < 2) {\n            editable = false;\n         }\n         CurrentObject.customDisplays(\n            data,\n            this.AB._App,\n            DataTable,\n            displayRecords,\n            editable\n         );\n      };\n\n      DataTable.attachEvent(\"onAfterRender\", function (data) {\n         DataTable.resize();\n\n         if (throttleCustomDisplay) clearTimeout(throttleCustomDisplay);\n         throttleCustomDisplay = setTimeout(() => {\n            if (scrollStarted) clearTimeout(scrollStarted);\n            customDisplays(this.data);\n         }, 350);\n\n         AB.ClassUI.CYPRESS_REF(DataTable);\n         Object.keys(ids).forEach((key) => {\n            var $el = $$(ids[key]);\n            if ($el) {\n               AB.ClassUI.CYPRESS_REF($el);\n            }\n         });\n      });\n\n      // we have some data types that have custom displays that don't look\n      // right after scrolling large data sets we need to call customDisplays\n      // again\n      DataTable.attachEvent(\"onScroll\", function () {\n         if (scrollStarted) clearTimeout(scrollStarted);\n         if (throttleCustomDisplay) clearTimeout(throttleCustomDisplay);\n\n         scrollStarted = setTimeout(() => {\n            customDisplays(this.data);\n         }, 1500);\n      });\n      DataTable.attachEvent(\"onAfterScroll\", function () {\n         if (throttleCustomDisplay) clearTimeout(throttleCustomDisplay);\n\n         throttleCustomDisplay = setTimeout(() => {\n            if (scrollStarted) clearTimeout(scrollStarted);\n            customDisplays(this.data);\n         }, 350);\n      });\n\n      // Process our onItemClick events.\n      // this is a good place to check if our delete/trash icon was clicked.\n      DataTable.attachEvent(\"onItemClick\", function (id, e, node) {\n         // make sure we have an object selected before processing this.\n         var CurrentObject = self.datacollection?.datasource;\n         if (!CurrentObject) {\n            return;\n         }\n\n         if (self.settings.isEditable == 0) {\n            var items = DataTable.getItem(id);\n         }\n         // if this was our edit icon:\n         // console.log(e.target.className);\n         if (e == \"auto\" || e.target.className.indexOf(\"eye\") > -1) {\n            // View a Details Page:\n            self.changePage(dv, id, self.settings.detailsPage);\n            self.toggleTab(self.settings.detailsTab, this);\n         } else if (e.target.className.indexOf(\"pencil\") > -1) {\n            self.changePage(dv, id, self.settings.editPage);\n            self.toggleTab(self.settings.editTab, this);\n         } else if (e.target.className.indexOf(\"track\") > -1) {\n            self.emit(\"object.track\", CurrentObject, id.row);\n            // App.actions.openObjectTrack(CurrentObject, id.row);\n         } else if (e.target.className.indexOf(\"clear-combo-value\") > -1) {\n            let clearValue = {};\n            clearValue[id.column] = \"\";\n            CurrentObject.model()\n               .update(id.row, clearValue)\n               .then((response) => {\n                  // console.log(response);\n               })\n               .catch((err) => {\n                  self.AB.notify.developer(err, {\n                     context: \"ABViewGridComponent.onItemClick\",\n                     message: \"Error updating item\",\n                     obj: CurrentObject.toObj(),\n                     id: id.row,\n                  });\n               });\n         } else if (e.target.className.indexOf(\"trash\") > -1) {\n            // if this was our trash icon:\n\n            webix.confirm({\n               title: L(\"Delete data\"),\n               text: L(\"Do you want to delete this row?\"),\n               callback: function (result) {\n                  if (result) {\n                     CurrentObject.model()\n                        .delete(id.row)\n                        .then((response) => {\n                           if (response.numRows > 0) {\n                              DataTable.remove(id);\n                              DataTable.clearSelection();\n                           } else {\n                              webix.alert({\n                                 text: L(\n                                    \"No rows were effected.  This does not seem right.\"\n                                 ),\n                              });\n                           }\n                        })\n                        .catch((err) => {\n                           self.AB.notify.developer(err, {\n                              context: \"ABViewGridComponent.onItemClick\",\n                              message: \"Error deleting item\",\n                              obj: CurrentObject.toObj(),\n                              id: id.row,\n                           });\n\n                           //// TODO: what do we do here?\n                        });\n                  }\n\n                  DataTable.clearSelection();\n                  return true;\n               },\n            });\n         } else if (self.settings.detailsPage.length) {\n            // If an icon wasn't selected but a details page is set\n            // view the details page\n            self.changePage(dv, id, self.settings.detailsPage);\n            self.toggleTab(self.settings.detailsTab, this);\n         } else if (self.settings.editPage.length) {\n            // If an icon wasn't selected but an edit page is set\n            // view the edit page\n            self.changePage(dv, id, self.settings.editPage);\n            self.toggleTab(self.settings.editTab, this);\n         }\n      });\n\n      // ABViewGrid Original init();\n\n      if (this.settings.showToolbar) {\n         if (\n            this.settings.massUpdate ||\n            this.settings.isSortable ||\n            this.settings.isExportable ||\n            (this.settings.gridFilter &&\n               this.settings.gridFilter.filterOption &&\n               this.settings.gridFilter.userFilterPosition == \"toolbar\")\n         ) {\n            $$(ids.toolbar).show();\n         }\n\n         if (this.settings.massUpdate == false) {\n            $$(ids.buttonMassUpdate).hide();\n            $$(ids.buttonDeleteSelected).hide();\n         }\n\n         if (this.settings.allowDelete == false) {\n            $$(ids.buttonDeleteSelected).hide();\n         }\n\n         if (this.settings.gridFilter) {\n            if (\n               this.settings.gridFilter.filterOption != 1 ||\n               this.settings.gridFilter.userFilterPosition != \"toolbar\"\n            ) {\n               $$(ids.buttonFilter).hide();\n            }\n\n            if (\n               this.settings.gridFilter.filterOption == 3 &&\n               this.settings.gridFilter.globalFilterPosition == \"single\"\n            ) {\n               DataTable.hide();\n            }\n\n            if (this.settings.gridFilter.isGlobalToolbar)\n               $$(ids.globalSearchToolbar).show();\n            else $$(ids.globalSearchToolbar).hide();\n\n            if (this.settings.gridFilter.filterOption) {\n               this.viewGrid.filterHelper.init(this.AB);\n            }\n         }\n\n         if (this.settings.isSortable == false) {\n            $$(ids.buttonSort).hide();\n         }\n\n         if (this.settings.isExportable == false) {\n            $$(ids.buttonExport).hide();\n         }\n      }\n\n      if (this.settings.hideHeader == true) {\n         this.hideHeader();\n      }\n\n      if (!this.datacollection) {\n         if (this.settings.dataviewID) {\n            var dv = this.AB.datacollectionByID(this.settings.dataviewID);\n            this.datacollectionLoad(dv);\n         }\n      }\n\n      // Make sure\n      if (!GridSettings) {\n         GridSettings = (await this.AB.Storage.get(KEY_STORAGE_SETTINGS)) || {};\n      }\n\n      if (this.datacollection?.datasource) {\n         // TRANSITION: ABViewGrid_orig line 862 ...\n\n         this.linkPage.init({\n            view: this.viewGrid,\n            datacollection: this.datacollection,\n         });\n\n         this.refreshHeader();\n      }\n\n      return Promise.resolve();\n   }\n\n   /**\n    * @method busy()\n    * Indicate that our datatable is currently busy loading/processing\n    * data.\n    */\n   busy() {\n      this.getDataTable()?.showProgress?.({ type: \"icon\" });\n   }\n\n   /**\n    * @method callbackFilterData()\n    * Process the provided filter options from our filterHelper.\n    * @param {fn} fnFilter\n    *        A function that returns true/false for each row of data\n    *        to determine if is should exist.\n    * @param {array} filterRules\n    *        Any Filter Rules added by the user.\n    */\n   callbackFilterData(fnFilter, filterRules = []) {\n      var ids = this.ids;\n      var $ButtonFilter = $$(ids.buttonFilter);\n      if ($ButtonFilter) {\n         var badge = null;\n         var onlyFilterRules = this.viewGrid.filterHelper.filterRules();\n         if (onlyFilterRules?.rules?.length) {\n            badge = 1;\n         }\n         $ButtonFilter.define(\"badge\", badge);\n         $ButtonFilter.refresh();\n      }\n\n      this.datacollection.filterCondition(filterRules);\n      this.datacollection.reloadData();\n\n      /*\n      var $DataTable = $$(ids.datatable);\n      Promise.resolve()\n         .then(\n            () =>\n               new Promise((next, err) => {\n                  // if (\n                  //    !this.settings ||\n                  //    !this.settings.gridFilter ||\n                  //    this.settings.gridFilter.filterOption != 3\n                  // )\n                  //    // Global search\n                  //    return next();\n\n                  let dc = this.datacollection;\n                  if (\n                     !dc ||\n                     (dc.settings.loadAll &&\n                        dc.dataStatus != dc.dataStatusFlag.notInitial)\n                  )\n                     // Load all already\n                     return next();\n\n                  let limit = null;\n\n                  // Load all data\n                  // let gridElem = $$(this.ids.datatable);\n                  if (\n                     $DataTable.data.find({}).length < $DataTable.data.count()\n                  ) {\n                     dc.reloadData(0, limit)\n                        .then(() => {\n                           // Should set .loadAll to this data collection ?\n                           if (limit == null) dc.settings.loadAll = true;\n\n                           next();\n                        })\n                        .catch(err);\n                  } else {\n                     next();\n                  }\n               })\n         )\n         // client filter data\n         .then(\n            () =>\n               new Promise((next, err) => {\n                  if (!fnFilter) return next();\n\n                  // wait the data are parsed into webix.datatable\n                  setTimeout(() => {\n                     $DataTable.filter((rowData) => {\n                        // rowData is null when is not load from paging\n                        if (rowData == null) return false;\n\n                        return fnFilter(rowData);\n                     });\n\n                     if (\n                        this.settings.gridFilter.globalFilterPosition ==\n                        \"single\"\n                     ) {\n                        if ($DataTable.count() > 0) {\n                           $DataTable.show();\n                           $DataTable.select($DataTable.getFirstId(), false);\n                           $DataTable.callEvent(\"onItemClick\", [\n                              $DataTable.getFirstId(),\n                              \"auto\",\n                              null,\n                           ]);\n                        } else {\n                           $DataTable.hide();\n                        }\n                     }\n\n                     next();\n                  }, 500);\n               })\n         );\n         */\n   }\n\n   async callbackSortData(sortRules = []) {\n      $$(this.ids.buttonSort).define(\"badge\", sortRules.length || null);\n      $$(this.ids.buttonSort).refresh();\n\n      let gridElem = this.getDataTable();\n      if (gridElem.data.find({}).length < gridElem.data.count()) {\n         try {\n            // NOTE: Webix's client sorting does not support dynamic loading.\n            // If the data does not be loaded, then load all data.\n            await this.datacollection.reloadData(0, 0);\n         } catch (err) {\n            this.AB.notify.developer(err, {\n               context:\n                  \"ABViewGrid:callbackSortData(): Error perform datacollection.reloadData()\",\n            });\n         }\n      }\n      // wait until the grid component will done to repaint UI\n      setTimeout(() => {\n         gridElem.sort((a, b) => this.PopupSortDataTableComponent.sort(a, b));\n      }, 777);\n   }\n\n   /**\n    * @method changePage()\n    * Helper method to switch to another View.\n    * @param {ABDataCollection} dv\n    *        The DataCollection we are working with.\n    * @param {obj} rowItem\n    *        the { row:#, column:{string} } of the item that was clicked.\n    * @param {ABViewPage.uuid} page\n    *        The .uuid of the ABViewPage/ABViewTab we are to swtich to.\n    *\n    */\n   changePage(dv, rowItem, page) {\n      let rowId = rowItem?.row ?? null;\n\n      // Set cursor to data view\n      if (dv) {\n         dv.setCursor(rowId);\n      }\n\n      // Pass settings to link page module\n      // console.error(\"!!!! TODO: implement linkPageHelper() !!!!\");\n      if (this.linkPage) {\n         this.linkPage.changePage(page, rowId);\n      }\n\n      super.changePage(page);\n   }\n\n   columnConfig(headers = []) {\n      this.settings.columnConfig = headers;\n   }\n   /**\n    * @method datacollectionLoad()\n    * Assign an ABDataCollection to this component to use instead of any\n    * provided .dataviewID in our settings.\n    * NOTE: this primarily happens in the ABDesigner's Object Workspace.\n    * @param {ABDataCollection} dc\n    */\n   datacollectionLoad(dc) {\n      var oldDC = this.datacollection;\n      this.datacollection = dc;\n\n      var CurrentObject = dc?.datasource;\n      var $DataTable = this.getDataTable();\n      if ($DataTable) {\n         // preventing too many handlers\n         if (!this.__handler_dc_busy) {\n            this.__handler_dc_busy = () => {\n               this.busy();\n            };\n\n            this.__handler_dc_ready = () => {\n               this.ready();\n            };\n\n            this.__handler_dc_loadData = () => {\n               if (\n                  $DataTable.config.view == \"treetable\" &&\n                  CurrentObject &&\n                  !CurrentObject.isGroup\n               ) {\n                  $DataTable.clearAll();\n                  $DataTable.parse(dc.getData());\n\n                  this.grouping();\n                  this.ready();\n               }\n            };\n         }\n\n         if (oldDC) {\n            // remove our listeners from the previous DC\n            oldDC.removeListener(\"initializingData\", this.__handler_dc_busy);\n            oldDC.removeListener(\"initializedData\", this.__handler_dc_ready);\n            oldDC.removeListener(\"loadData\", this.__handler_dc_loadData);\n         }\n\n         if (dc) {\n            if (dc.datacollectionLink && dc.fieldLink) {\n               dc.bind($DataTable, dc.datacollectionLink, dc.fieldLink);\n            } else {\n               dc.bind($DataTable);\n            }\n            // making sure we only have 1 registered listener on this dc\n            dc.removeListener(\"initializingData\", this.__handler_dc_busy);\n            dc.on(\"initializingData\", this.__handler_dc_busy);\n            dc.removeListener(\"initializedData\", this.__handler_dc_ready);\n            dc.on(\"initializedData\", this.__handler_dc_ready);\n            dc.removeListener(\"loadData\", this.__handler_dc_loadData);\n            dc.on(\"loadData\", this.__handler_dc_loadData);\n            this.grouping();\n         } else {\n            $DataTable.unbind();\n         }\n\n         // Be sure to pass on our CurrentObject to our dependent components.\n         if (CurrentObject) {\n            this.viewGrid.filterHelper.objectLoad(CurrentObject);\n            this.PopupMassUpdateComponent.objectLoad(\n               CurrentObject,\n               this.getDataTable()\n            );\n            this.PopupSortDataTableComponent.objectLoad(CurrentObject);\n\n            this.PopupExport.objectLoad(CurrentObject);\n            this.PopupExport.dataCollectionLoad(dc);\n            this.PopupExport.setGridComponent(this.getDataTable());\n            this.PopupExport.setHiddenFields(this.settings.hiddenFields);\n            this.PopupExport.setFilename(this.viewGrid.label);\n         }\n      }\n   }\n\n   /**\n    * @function enableUpdateDelete\n    *\n    * disable the update or delete buttons in the toolbar if there no items selected\n    * we will make this externally accessible so we can call it from within the datatable component\n    */\n   disableUpdateDelete() {\n      $$(this.ids.buttonMassUpdate)?.disable();\n      $$(this.ids.buttonDeleteSelected)?.disable();\n      // externally indicate that no rows are selected\n      this.emit(\"selection.cleared\");\n   }\n\n   /**\n    * @function enableUpdateDelete\n    *\n    * enable the update or delete buttons in the toolbar if there are any items selected\n    * we will make this externally accessible so we can call it from within the datatable component\n    */\n   enableUpdateDelete() {\n      $$(this.ids.buttonMassUpdate)?.enable();\n      $$(this.ids.buttonDeleteSelected)?.enable();\n      // externally indicate that a row has been selected\n      this.emit(\"selection\");\n   }\n\n   freezeDeleteColumn() {\n      // we are going to always freeze the delete column if the datatable\n      // is wider than the container so it is easy to get to\n      return this.getDataTable().define(\"rightSplit\", this.columnSplitRight);\n   }\n\n   /**\n    * @method getDataTable()\n    * return the webix grid component.\n    * @return {webix.grid}\n    */\n   getDataTable() {\n      return $$(this.ids.datatable);\n   }\n\n   /**\n    * @method getLastColumn\n    * return the last column of a datagrid that is resizeable\n    */\n   getLastColumn() {\n      var DataTable = this.getDataTable();\n      var lastColumn = {};\n\n      // Loop through each columns config to find out if it is in the split 1 region and set it as the last item...then it will be overwritten by next in line\n      DataTable.eachColumn(function (columnId) {\n         var columnConfig = DataTable.getColumnConfig(columnId);\n         if (columnConfig.split == 1) lastColumn = columnConfig;\n      });\n\n      return lastColumn;\n   }\n\n   /**\n    * @method grouping()\n    * perform any grouping operations\n    */\n   grouping() {\n      if (!this.settings.groupBy) return;\n\n      let $treetable = this.getDataTable();\n\n      // map: {\n      //     votes:[\"votes\", \"sum\"],\n      //     title:[\"year\"]\n      // }\n      let baseGroupMap = {};\n      let CurrentObject = this.datacollection.datasource;\n      CurrentObject.fields().forEach((f) => {\n         switch (f.key) {\n            case \"number\":\n               baseGroupMap[f.columnName] = [f.columnName, \"sum\"];\n               break;\n            case \"calculate\":\n            case \"formula\":\n               baseGroupMap[f.columnName] = [\n                  f.columnName,\n                  function (prop, listData) {\n                     if (!listData) return 0;\n\n                     let sum = 0;\n\n                     listData.forEach((r) => {\n                        sum += f.format(r) * 1;\n                     });\n\n                     return sum;\n                  },\n               ];\n               break;\n            case \"connectObject\":\n               baseGroupMap[f.columnName] = [\n                  f.columnName,\n                  function (prop, listData) {\n                     if (!listData || !listData.length) return 0;\n\n                     let count = 0;\n\n                     listData.forEach((r) => {\n                        var valRelation = r[f.relationName()];\n\n                        // array\n                        if (valRelation && valRelation.length != null)\n                           count += valRelation.length;\n                        // object\n                        else if (valRelation) count += 1;\n                     });\n\n                     return count;\n                  },\n               ];\n               break;\n            default:\n               baseGroupMap[f.columnName] = [\n                  f.columnName,\n                  function (prop, listData) {\n                     if (!listData || !listData.length) return 0;\n\n                     let count = 0;\n\n                     listData.forEach((r) => {\n                        var val = prop(r);\n\n                        // count only exists data\n                        if (val) {\n                           count += 1;\n                        }\n                     });\n\n                     return count;\n                  },\n               ];\n               break;\n         }\n      });\n\n      // set group definition\n      // DataTable.define(\"scheme\", {\n      //    $group: {\n      //       by: settings.groupBy,\n      //       map: groupMap\n      //    }\n      // });\n\n      // NOTE: https://snippet.webix.com/e3a2bf60\n      let groupBys = (this.settings.groupBy || \"\")\n         .split(\",\")\n         .map((g) => g.trim());\n      // Reverse the array NOTE: call .group from child to root\n      groupBys = groupBys.reverse();\n      groupBys.forEach((colName, gIndex) => {\n         let by;\n         let groupMap = this.AB.cloneDeep(baseGroupMap);\n\n         // Root\n         if (gIndex == groupBys.length - 1) {\n            by = colName;\n         }\n         // Sub groups\n         else {\n            by = (row) => {\n               let byValue = row[colName];\n               for (let i = gIndex + 1; i < groupBys.length; i++) {\n                  byValue = `${row[groupBys[i]]} - ${byValue}`;\n               }\n               return byValue;\n            };\n\n            // remove parent group data\n            groupBys.forEach((gColName) => {\n               if (gColName != colName) groupMap[gColName] = [gColName];\n            });\n         }\n\n         $treetable.data.group({\n            by: by,\n            map: groupMap,\n         });\n      });\n   }\n\n   hideHeader() {\n      var DataTable = this.getDataTable();\n      DataTable.define(\"header\", false);\n      DataTable.refresh();\n   }\n\n   /**\n    * @function onAfterColumnDrop\n    * When an editor drops a column to save a new column order\n    * @param {string} sourceId\n    *        the columnName of the item dragged\n    * @param {string} targetId\n    *        the columnName of the item dropped on\n    * @param {event} event\n    */\n   async onAfterColumnDrop(sourceId, targetId, event) {\n      var DataTable = this.getDataTable();\n      let CurrentObject = this.datacollection.datasource;\n      var settings = this.settings;\n      var columnConfig = this.localSettings();\n\n      // Reorder our current columnConfig\n      // We know what was moved and what item it has replaced/pushed forward\n      // so first we want to splice the item moved out of the array of fields\n      // and store it so we can put it somewhere else\n      let itemMoved = null;\n      let oPos = 0; // original position\n      for (var i = 0; i < columnConfig.length; i++) {\n         if (columnConfig[i].id == sourceId) {\n            itemMoved = columnConfig[i];\n            columnConfig.splice(i, 1);\n            oPos = i;\n            break;\n         }\n      }\n      // once we have removed/stored it we can find where its new position\n      // will be by looping back through the array and finding the item it\n      // is going to push forward\n      for (var j = 0; j < columnConfig.length; j++) {\n         if (columnConfig[j].id == targetId) {\n            // if the original position was before the new position we will\n            // follow webix's logic that the drop should go after the item\n            // it was placed on\n            if (oPos <= j) {\n               j++;\n            }\n            columnConfig.splice(j, 0, itemMoved);\n            break;\n         }\n      }\n\n      // special case: dropped on end and need to update .fillspace\n      // if (j == columnConfig.length - 1) {\n      //    if (columnConfig[j - 1].fillspace) {\n      //       columnConfig[j - 1].fillspace = false;\n      //       columnConfig[j].fillspace = true;\n      //    }\n      // }\n\n      // if we allow local changes\n      this.localSettings(columnConfig);\n      if (settings.saveLocal) {\n         this.localSettingsSave();\n      }\n\n      // Now emit this event, in case an external object is wanting to\n      // respond to this: ABDesigner.objectBuilder, Interface  Designer,\n      // we send back an array[ ABField.id, ...] in the order we have\n      // them.\n      this.emit(\n         \"column.order\",\n         columnConfig.map((c) => c.fieldID)\n      );\n\n      this.refreshHeader();\n\n      // CurrentObject.fieldReorder(sourceId, targetId)\n      //    .then(() => {\n      //       // reset each column after a drop so we do not have multiple fillspace and minWidth settings\n      //       var editiable = settings.isEditable;\n      //       if (DataTable.config.accessLevel < 2) {\n      //          editiable = false;\n      //       }\n      //       var columnHeaders = CurrentObject.columnHeaders(true, editiable);\n      //       columnHeaders.forEach(function (col) {\n      //          if (col.id == sourceId && col.fillspace == true) {\n      //             columnHeader.fillspace = false;\n      //             columnHeader.minWidth = columnHeader.width;\n      //          }\n      //       });\n\n      //       _logic.callbacks.onColumnOrderChange(CurrentObject);\n      //       // freeze columns:\n      //       let frozenColumnID =\n      //          settings.frozenColumnID != null\n      //             ? settings.frozenColumnID\n      //             : CurrentObject.workspaceFrozenColumnID;\n      //       if (frozenColumnID != \"\") {\n      //          DataTable.define(\n      //             \"leftSplit\",\n      //             DataTable.getColumnIndex(frozenColumnID) + columnSplitLeft\n      //          );\n      //       } else {\n      //          DataTable.define(\"leftSplit\", columnSplitLeft);\n      //       }\n      //       _logic.freezeDeleteColumn();\n      //       DataTable.refreshColumns();\n      //    })\n      //    .catch((err) => {\n      //       OP.Error.log(\"Error saving new column order:\", {\n      //          error: err,\n      //       });\n      //    });\n   }\n\n   /**\n    * @function onAfterEditStop\n    * When an editor is finished.\n    * @param {json} state\n    * @param {} editor\n    * @param {} ignoreUpdate\n    * @return\n    */\n   async onAfterEditStop(state, editor, ignoreUpdate) {\n      // state:   {value: \"new value\", old: \"old value\"}\n      // editor:  { column:\"columnName\", row:ID, value:'value', getInputNode:fn(), config:{}, focus: fn(), getValue: fn(), setValue: function, getInputNode: function, render: function…}\n\n      var DataTable = this.getDataTable();\n\n      // if you don't edit an empty cell we just need to move on\n      if (\n         (state.old == null && state.value === \"\") ||\n         (state.old === \"\" && state.value === \"\")\n      ) {\n         DataTable.clearSelection();\n         return false;\n      }\n\n      if (editor.config) {\n         switch (editor.config.editor) {\n            case \"number\":\n               state.value = parseFloat(state.value);\n               break;\n            case \"datetime\":\n               state.value = state.value.getTime();\n               if (state && state.old && state.old.getTime)\n                  state.old = state.old.getTime();\n               break;\n            default:\n            // code block\n         }\n      }\n\n      if (state.value != state.old) {\n         var item = DataTable.getItem(editor.row);\n         item[editor.column] = state.value;\n\n         DataTable.removeCellCss(item.id, editor.column, \"webix_invalid\");\n         DataTable.removeCellCss(item.id, editor.column, \"webix_invalid_cell\");\n\n         var CurrentObject = this.datacollection.datasource;\n         var validator = CurrentObject.isValidData(item);\n         if (validator.pass()) {\n            //// Question: do we submit full item updates?  or just patches?\n            // IF Patch:\n            // var patch = {};\n            // patch.id = item.id;\n            // patch[editor.column] = item[editor.column];\n            // await CurrentObject.model().update(item.id, patch)\n\n            try {\n               await CurrentObject.model().update(item.id, item);\n               if (DataTable.exists(editor.row)) {\n                  DataTable.updateItem(editor.row, item);\n                  DataTable.clearSelection();\n                  DataTable.refresh(editor.row);\n               }\n            } catch (err) {\n               this.AB.notify.developer(err, {\n                  context: \"ABViewGrid:onAfterEditStop(): Error saving item\",\n                  item,\n                  editor,\n                  state,\n                  object: CurrentObject.toObj(),\n               });\n\n               DataTable.clearSelection();\n               if (\n                  this.AB.Validation.isGridValidationError(\n                     err,\n                     editor.row,\n                     DataTable\n                  )\n               ) {\n                  // Do we reset the value?\n                  // item[editor.column] = state.old;\n                  // DataTable.updateItem(editor.row, item);\n               } else {\n                  // this was some other Error!\n               }\n            }\n            // CurrentObject.model()\n            //    .update(item.id, item)\n            //    .then(() => {\n            //       if (DataTable.exists(editor.row)) {\n            //          DataTable.updateItem(editor.row, item);\n            //          DataTable.clearSelection();\n            //          DataTable.refresh(editor.row);\n            //       }\n            //    })\n            //    .catch((err) => {\n            //       OP.Error.log(\"Error saving item:\", {\n            //          error: err\n            //       });\n\n            //       DataTable.clearSelection();\n            //       if (\n            //          OP.Validation.isGridValidationError(\n            //             err,\n            //             editor.row,\n            //             DataTable\n            //          )\n            //       ) {\n            //          // Do we reset the value?\n            //          // item[editor.column] = state.old;\n            //          // DataTable.updateItem(editor.row, item);\n            //       } else {\n            //          // this was some other Error!\n            //       }\n            //    });\n         } else {\n            validator.updateGrid(editor.row, DataTable);\n         }\n      } else {\n         DataTable.clearSelection();\n      }\n      return false;\n\n      // var item = $$(self.webixUiId.objectDatatable).getItem(editor.row);\n\n      // self.updateRowData(state, editor, ignoreUpdate)\n      //    .fail(function (err) { // Cached\n      //       item[editor.column] = state.old;\n      //       $$(self.webixUiId.objectDatatable).updateItem(editor.row, item);\n      //       $$(self.webixUiId.objectDatatable).refresh(editor.row);\n\n      //       // TODO : Message\n\n      //       $$(self.webixUiId.objectDatatable).hideProgress();\n      //    })\n      //    .then(function (result) {\n      //       if (item) {\n      //          item[editor.column] = state.value;\n\n      //          if (result && result.constructor.name === 'Cached' && result.isUnsync())\n      //             item.isUnsync = true;\n\n      //          $$(self.webixUiId.objectDatatable).updateItem(editor.row, item);\n      //       }\n\n      //       // TODO : Message\n\n      //       $$(self.webixUiId.objectDatatable).hideProgress();\n      //    });\n   }\n\n   /**\n    * @function onAfterSelect\n    * This is when a user clicks on a cell.  We use the onAfterSelect to\n    * trigger a normal .editCell() if there isn't a custom editor for this field.\n    * @param {json} data webix cell data\n    * @return\n    */\n   onAfterSelect(data /*, preserve */) {\n      // data: {row: 1, column: \"name\", id: \"1_name\", toString: function}\n      // data.row: ABObject.id\n      // data.column => columnName of the field\n\n      // Normal update data\n      this.getDataTable()?.editCell(data.row, data.column);\n   }\n\n   /**\n    * @function onColumnResizeResize\n    * This is when a user adjusts the size of a column\n    * @param {} columnName\n    * @param {int} newWidth\n    * @param {int} oldWidth\n    * @param {} user_action\n    * @return\n    */\n   async onColumnResize(columnName, newWidth, oldWidth, user_action) {\n      // update the settings\n\n      var requireRefresh = false;\n      if (newWidth < 30) {\n         newWidth = 30;\n         requireRefresh = true;\n         webix.message({\n            type: \"info\",\n            text: this.AB.Multilingual.label(\"minimum column width is {0}\", [\n               30,\n            ]),\n            expire: 1000,\n         });\n      }\n\n      var localSettings = this.localSettings();\n      if (localSettings) {\n         var header = localSettings.find((h) => h.id == columnName);\n         if (header) {\n            header.width = newWidth;\n            delete header.adjust;\n         }\n      }\n\n      this.localSettings(localSettings);\n      if (this.settings.saveLocal) {\n         this.localSettingsSave();\n         // for (const item in GridSettings) {\n         //    GridSettings[item].forEach((item) => {\n         //       // we cannot include field info because of the cicular structure\n         //       if (item?.footer?.field) {\n         //          delete item.footer.field;\n         //       }\n         //    });\n         // }\n         // await this.AB.Storage.set(KEY_STORAGE_SETTINGS, GridSettings);\n      }\n\n      // refresh the display\n      if (requireRefresh) {\n         this.refreshHeader();\n      }\n      this.freezeDeleteColumn();\n\n      // this.getDataTable().refreshColumns();\n\n      // TODO: allow external app to respond in special cases:\n      // eg: ABDesigner object workspace, interface builder, etc...\n      this.emit(\"column.resize\", columnName, newWidth, oldWidth);\n   }\n\n   /**\n    * @method onHeaderClick\n    * process the user clicking on the header for one of our columns.\n    */\n   onHeaderClick(id, e, node) {\n      if (this.skippableColumns.indexOf(id.column) != -1) return false;\n\n      // save our EditNode & EditField:\n      // this.EditNode = node;\n\n      var EditField = this.datacollection.datasource.fields(\n         (f) => f.columnName == id.column\n      )[0];\n      // if (this.EditField) {\n      //    // show the popup\n      //    PopupHeaderEditComponent.show(node, this.EditField);\n      // }\n\n      this.emit(\"column.header.clicked\", node, EditField);\n      return false;\n   }\n\n   /**\n    * @method onShow()\n    * perform any preparations necessary when showing this component.\n    */\n   onShow() {\n      super.onShow();\n\n      // make sure our grid is properly .adjust()ed to the screen.\n      this.getDataTable()?.adjust();\n\n      var dv = this.datacollection;\n      if (dv) {\n         this.eventAdd({\n            emitter: dv,\n            eventName: \"changeCursor\",\n            listener: this.handler_select,\n         });\n      }\n   }\n\n   /**\n    * @method ready()\n    * Indicate that our datatable is currently ready for operation.\n    */\n   ready() {\n      this.getDataTable()?.hideProgress?.();\n   }\n\n   /**\n    * @function refreshHeader()\n    *\n    * refresh the header for the table apart from the refresh() command\n    * @param {bool} ignoreLocal\n    *        Should we ignore our local settings and build directly from\n    *        our config settings?\n    */\n   refreshHeader(ignoreLocal = false) {\n      // columnSplitRight = 0;\n      // wait until we have an Object defined:\n      var CurrentObject = this.datacollection.datasource;\n      if (!CurrentObject) return;\n\n      var ids = this.ids;\n      var DataTable = $$(ids.datatable);\n      if (!DataTable) return;\n\n      var accessLevel = DataTable.config.accessLevel;\n      DataTable.define(\"leftSplit\", 0);\n      DataTable.define(\"rightSplit\", 0);\n\n      let rowHeight = 0;\n      CurrentObject.imageFields().forEach((image) => {\n         if (\n            image.settings.useHeight &&\n            image.settings.imageHeight > rowHeight\n         ) {\n            rowHeight = image.settings.imageHeight;\n         }\n      });\n      if (rowHeight) {\n         DataTable.define(\"rowHeight\", rowHeight);\n      }\n\n      // DataTable.clearAll();\n\n      var settings = this.settings;\n      var editable = settings.isEditable;\n      if (DataTable.config.accessLevel < 2) {\n         editable = false;\n      }\n\n      //// update DataTable structure:\n      // get column list from our local settings\n      var objColumnHeaders = CurrentObject.columnHeaders(\n         true,\n         editable,\n         // TRANSITION: moving these from .columnHeaders() to here:\n         [], //settings.summaryColumns,\n         [], //settings.countColumns,\n         [] //settings.hiddenFields\n      );\n      var columnHeaders = this.localSettings();\n      if (!columnHeaders || ignoreLocal) {\n         // if that is empty, pull from our settings.columnConfig\n         columnHeaders = this.AB.cloneDeep(this.settings.columnConfig);\n      }\n      if (columnHeaders.length == 0) {\n         // if that is empty for some reason, rebuild from our CurrentObject\n\n         columnHeaders = objColumnHeaders;\n      }\n\n      // sanity check:\n      // columnHeaders can't contain a column that doesn't exist in objColumHeaders:\n      // (eg: a field might have been removed but localStorage doesn't know that )\n      var objColumnHeaderIDs = objColumnHeaders.map((h) => h.fieldID);\n      columnHeaders = columnHeaders.filter(\n         (c) => objColumnHeaderIDs.indexOf(c.fieldID) > -1\n      );\n\n      // default our columnConfig values to our columnHeaders:\n      columnHeaders.forEach((c) => {\n         // we want to overwrite our default settings with anything stored\n         // in local storage\n         var origCol = objColumnHeaders.find((h) => h.fieldID == c.fieldID);\n\n         // none of our functions can be stored in localStorage, so scan\n         // the original column and attach any template functions to our\n         // stashed copy.\n         // also the suggest for selects and connected fields may contain a\n         // function so go ahead and copy the original suggest to the column\n         Object.keys(origCol).forEach((k) => {\n            if (typeof origCol[k] == \"function\" || k == \"suggest\") {\n               c[k] = origCol[k];\n            }\n         });\n\n         var f = CurrentObject.fieldByID(c.fieldID);\n         if (!f) return;\n\n         // if it's a hidden field:\n         if (settings.hiddenFields.indexOf(f.columnName) > -1) {\n            c.hidden = true;\n         }\n         // add summary footer:\n         if (settings.summaryColumns.indexOf(f.id) > -1) {\n            if (f.key == \"calculate\" || f.key == \"formula\") {\n               c.footer = { content: \"totalColumn\", field: f };\n            } else {\n               c.footer = { content: \"summColumn\" };\n            }\n         }\n         // or add the count footer\n         else if (settings.countColumns.indexOf(f.id) > -1)\n            c.footer = { content: \"countColumn\" };\n      });\n\n      var localSettings = this.localSettings();\n      if (!localSettings || ignoreLocal) {\n         this.localSettings(columnHeaders);\n         localSettings = columnHeaders;\n      }\n      columnHeaders = this.AB.cloneDeep(localSettings);\n\n      var fieldValidations = [];\n      var rulePops = [];\n\n      columnHeaders.forEach((col) => {\n         col.fillspace = false;\n\n         // parse the rules because they were stored as a string\n         // check if rules are still a string...if so lets parse them\n         if (col.validationRules) {\n            if (typeof col.validationRules === \"string\") {\n               col.validationRules = JSON.parse(col.validationRules);\n            }\n\n            if (col.validationRules.length) {\n               var validationUI = [];\n               // there could be more than one so lets loop through and build the UI\n               col.validationRules.forEach((rule) => {\n                  var Filter = this.AB.filterComplexNew(\n                     col.id /*+ \"_\" + webix.uid()*/\n                  );\n                  // add the new ui to an array so we can add them all at the same time\n                  validationUI.push(Filter.ui);\n                  // store the filter's info so we can assign values and settings after the ui is rendered\n                  fieldValidations.push({\n                     filter: Filter,\n                     view: Filter.ids.querybuilder,\n                     columnName: col.id,\n                     validationRules: rule.rules,\n                     invalidMessage: rule.invalidMessage,\n                  });\n               });\n               // create a unique view id for popup\n               var popUpId = ids.rules + \"_\" + col.id; /* + \"_\" + webix.uid() */\n               // store the popup ids so we can remove the later\n               rulePops.push(popUpId);\n               // add the popup to the UI but don't show it\n               webix.ui({\n                  view: \"popup\",\n                  css: \"ab-rules-popup\",\n                  id: popUpId,\n                  body: {\n                     rows: validationUI,\n                  },\n               });\n            }\n         }\n\n         // group header\n         if (\n            settings.groupBy &&\n            (settings.groupBy || \"\").indexOf(col.id) > -1\n         ) {\n            var groupField = CurrentObject.fieldByID(col.fieldID);\n            if (groupField) {\n               col.template = (obj, common) => {\n                  // return common.treetable(obj, common) + obj.value;\n                  if (obj.$group) {\n                     let rowData = this.AB.cloneDeep(obj);\n                     rowData[groupField.columnName] = rowData.value;\n\n                     return (\n                        common.treetable(obj, common) +\n                        groupField.format(rowData)\n                     );\n                  } else return groupField.format(obj);\n               };\n            }\n         }\n      });\n\n      if (fieldValidations.length) {\n         // we need to store the rules for use later so lets build a container array\n         var complexValidations = [];\n         fieldValidations.forEach((f) => {\n            // init each ui to have the properties (app and fields) of the object we are editing\n            // f.filter.applicationLoad(CurrentObject.application);\n            f.filter.fieldsLoad(CurrentObject.fields());\n            // now we can set the value because the fields are properly initialized\n            f.filter.setValue(f.validationRules);\n            // if there are validation rules present we need to store them in a lookup hash\n            // so multiple rules can be stored on a single field\n            if (!Array.isArray(complexValidations[f.columnName]))\n               complexValidations[f.columnName] = [];\n\n            // now we can push the rules into the hash\n            complexValidations[f.columnName].push({\n               filters: $$(f.view).getFilterHelper(),\n               values: DataTable.getSelectedItem(),\n               invalidMessage: f.invalidMessage,\n            });\n         });\n         var rules = {};\n\n         // store the rules in a data param to be used later\n         DataTable.$view.complexValidations = complexValidations;\n         // use the lookup to build the validation rules\n         Object.keys(complexValidations).forEach(function (key) {\n            rules[key] = function (value, data) {\n               // default valid is true\n               var isValid = true;\n               var invalidMessage = \"\";\n               DataTable.$view.complexValidations[key].forEach((filter) => {\n                  // convert rowData from { colName : data } to { id : data }\n                  var newData = {};\n                  (CurrentObject.fields() || []).forEach((field) => {\n                     newData[field.id] = data[field.columnName];\n                  });\n                  // for the case of \"this_object\" conditions:\n                  if (data.uuid) {\n                     newData[\"this_object\"] = data.uuid;\n                  }\n\n                  // use helper funtion to check if valid\n                  var ruleValid = filter.filters(newData);\n                  // if invalid we need to tell the field\n                  if (ruleValid == false) {\n                     isValid = false;\n                     invalidMessage = filter.invalidMessage;\n                  }\n               });\n               if (isValid == false) {\n                  // we also need to define an error message\n                  webix.message({\n                     type: \"error\",\n                     text: invalidMessage,\n                  });\n               }\n               return isValid;\n            };\n         });\n         // define validation rules\n         DataTable.define(\"rules\", rules);\n         // store the array of view ids on the webix object so we can get it later\n         DataTable.config.rulePops = rulePops;\n         DataTable.refresh();\n      } else {\n         // check if the previous datatable had rule popups and remove them\n         if (DataTable.config.rulePops) {\n            DataTable.config.rulePops.forEach((popup) => {\n               if ($$(popup)) $$(popup).destructor();\n            });\n         }\n         // remove any validation rules from the previous table\n         DataTable.define(\"rules\", {});\n         DataTable.refresh();\n      }\n\n      var addedColumns = [];\n      // {array} the .id of the columnHeaders we add based upon our settings.\n      // this will help us pick the lastColumn that is part of the\n      // object.\n\n      if (settings.labelAsField) {\n         // console.log(CurrentObject);\n         columnHeaders.unshift({\n            id: \"appbuilder_label_field\",\n            header: \"Label\",\n            fillspace: true,\n            template: function (obj) {\n               return CurrentObject.displayData(obj);\n            },\n            // css: { 'text-align': 'center' }\n         });\n         addedColumns.push(\"appbuilder_label_field\");\n      }\n\n      if (settings.massUpdate && accessLevel == 2) {\n         columnHeaders.unshift({\n            id: \"appbuilder_select_item\",\n            header: { content: \"masterCheckbox\", contentId: \"mch\" },\n            width: 40,\n            template: \"<div class='singleSelect'>{common.checkbox()}</div>\",\n            css: { \"text-align\": \"center\" },\n         });\n         this.columnSplitLeft = 1;\n         addedColumns.push(\"appbuilder_select_item\");\n      } else {\n         this.columnSplitLeft = 0;\n      }\n      if (settings.detailsPage != \"\" && !settings.hideButtons) {\n         columnHeaders.push({\n            id: \"appbuilder_view_detail\",\n            header: \"\",\n            width: 40,\n            template: function (obj, common) {\n               return \"<div class='detailsView'><span class='webix_icon fa fa-eye'></span></div>\";\n            },\n            css: { \"text-align\": \"center\" },\n         });\n         // columnSplitRight++;\n         addedColumns.push(\"appbuilder_view_detail\");\n      }\n      if (settings.trackView != 0 && accessLevel == 2) {\n         columnHeaders.push({\n            id: \"appbuilder_view_track\",\n            header: \"\",\n            width: 40,\n            template:\n               \"<div class='track'><span class='track fa fa-history'></span></div>\",\n            css: { \"text-align\": \"center\", cursor: \"pointer\" },\n         });\n         // columnSplitRight++;\n         addedColumns.push(\"appbuilder_view_track\");\n      }\n      if (\n         settings.editPage != \"\" &&\n         !settings.hideButtons &&\n         accessLevel == 2\n      ) {\n         columnHeaders.push({\n            id: \"appbuilder_view_edit\",\n            header: \"\",\n            width: 40,\n            template: \"<div class='edit'>{common.editIcon()}</div>\",\n            css: { \"text-align\": \"center\" },\n         });\n         // columnSplitRight++;\n         addedColumns.push(\"appbuilder_view_edit\");\n      }\n      if (settings.allowDelete && accessLevel == 2) {\n         columnHeaders.push({\n            id: \"appbuilder_trash\",\n            header: \"\",\n            width: 40,\n            template: \"<div class='trash'>{common.trashIcon()}</div>\",\n            css: { \"text-align\": \"center\" },\n         });\n         // columnSplitRight++;\n         addedColumns.push(\"appbuilder_trash\");\n      }\n\n      // find our last displayed column (that isn't one we added);\n      var lastCol = null;\n      for (var i = columnHeaders.length - 1; i >= 0; i--) {\n         if (!lastCol) {\n            var col = columnHeaders[i];\n            if (!col.hidden && addedColumns.indexOf(col.id) == -1) {\n               lastCol = col;\n               break;\n            }\n         }\n      }\n\n      if (lastCol) {\n         lastCol.fillspace = true;\n         lastCol.minWidth = lastCol.width;\n         lastCol.width = 150; // set a width for last column but by default it will fill the available space or use the minWidth to take up more\n      }\n\n      DataTable.refreshColumns(columnHeaders);\n\n      // the addedColumns represent the additional icons that can be added.\n      this.columnSplitRight = addedColumns.length;\n      // the .massUpdate gets added to Left so don't include that in split right:\n      if (addedColumns.indexOf(\"appbuilder_select_item\") > -1)\n         this.columnSplitRight -= 1;\n      // .columnSplitRight can't be < 0\n      if (this.columnSplitRight < 0) this.columnSplitRight = 0;\n\n      // freeze columns:\n      let frozenColumnID = settings.frozenColumnID;\n      if (frozenColumnID != \"\") {\n         DataTable.define(\n            \"leftSplit\",\n            DataTable.getColumnIndex(frozenColumnID) + 1\n         );\n      } else {\n         DataTable.define(\"leftSplit\", this.columnSplitLeft);\n      }\n      this.freezeDeleteColumn();\n      DataTable.refreshColumns();\n\n      // }\n   }\n\n   /**\n    * localSettingsSave()\n    * Persist our current working copy of our GridSettings to localStorage.\n    * @return {Promise}\n    */\n   async localSettingsSave() {\n      var savedLocalSettings =\n         (await this.AB.Storage.get(KEY_STORAGE_SETTINGS)) || {};\n\n      savedLocalSettings[this.settingsID()] = GridSettings[this.settingsID()]\n         ? GridSettings[this.settingsID()]\n         : [];\n\n      for (const item in savedLocalSettings) {\n         savedLocalSettings[item].forEach((item) => {\n            // we cannot include field info because of the cicular structure\n            if (item?.footer?.field) {\n               delete item.footer.field;\n            }\n         });\n      }\n\n      await this.AB.Storage.set(KEY_STORAGE_SETTINGS, savedLocalSettings);\n   }\n\n   /**\n    * @method localSettings()\n    * An interface method to handle get/set operations on our local GridSettings\n    * storage.\n    * .localStorage() : a getter to return the current value\n    * .localStorage(value) : a setter to save value as our current value.\n    * @param {various} value\n    *        the value to set to our settings.\n    * @return {various}\n    */\n   localSettings(value = null) {\n      if (value) {\n         GridSettings[this.settingsID()] = value;\n      } else {\n         return GridSettings[this.settingsID()];\n      }\n   }\n\n   /**\n    * @method selectRow()\n    * Select the grid row that correspondes to the provided rowData.\n    * @param {json} rowData\n    *        A key=>value hash of data that matches an entry in the grid.\n    *        rowData.id should match an existing entry.\n    */\n   selectRow(rowData) {\n      let $DataTable = this.getDataTable();\n      if (!$DataTable) return;\n\n      if (rowData == null) $DataTable.unselect();\n      else if (rowData?.id && $DataTable.exists(rowData.id))\n         $DataTable.select(rowData.id, false);\n      else $DataTable.select(null, false);\n   }\n\n   /**\n    * @method settingsID()\n    * return the unique key for this Grid + object combo to store data\n    * in our localStorage.\n    * @return {string}\n    */\n   settingsID() {\n      var CurrentObject = this.datacollection.datasource;\n      return `${this.id}-${CurrentObject ? CurrentObject.id : \"0\"}`;\n   }\n\n   /**\n    * @method toggleTab()\n    * recursively toggle tabs into view once a user chooses a detail/edit view\n    * to display.\n    * @param {ABView.id} parentTab\n    * @param {webix.view} wb\n    */\n   toggleTab(parentTab, wb) {\n      // find the tab\n      var tab = wb.getTopParentView().queryView({ id: parentTab });\n      // if we didn't pass and id we may have passed a domNode\n      if (tab == null) {\n         tab = $$(parentTab);\n      }\n\n      if (tab == null) return;\n\n      // set the tabbar to to the tab\n      var tabbar = tab.getParentView().getParentView();\n\n      if (tabbar == null) return;\n\n      if (tabbar.setValue) {\n         // if we have reached the top we won't have a tab\n         tabbar.setValue(parentTab);\n      }\n\n      // find if it is in a multiview of a tab\n      var nextTab = tabbar.queryView({ view: \"scrollview\" }, \"parent\");\n      // if so then do this again\n      if (nextTab) {\n         this.toggleTab(nextTab, wb);\n      }\n   }\n\n   toggleUpdateDelete() {\n      var DataTable = this.getDataTable();\n      var checkedItems = 0;\n      DataTable.data.each(function (obj) {\n         if (\n            typeof obj != \"undefined\" &&\n            obj.hasOwnProperty(\"appbuilder_select_item\") &&\n            obj.appbuilder_select_item == 1\n         ) {\n            checkedItems++;\n         }\n      });\n      if (checkedItems > 0) {\n         this.enableUpdateDelete();\n      } else {\n         this.disableUpdateDelete();\n      }\n   }\n\n   toolbarDeleteSelected($view) {\n      var DataTable = this.getDataTable();\n      let CurrentObject = this.datacollection.datasource;\n      var deleteTasks = [];\n      DataTable.data.each(function (row) {\n         if (\n            typeof row != \"undefined\" &&\n            // row.hasOwnProperty(\"appbuilder_select_item\") &&\n            Object.prototype.hasOwnProperty.call(\n               row,\n               \"appbuilder_select_item\"\n            ) &&\n            row.appbuilder_select_item == 1\n         ) {\n            // NOTE: store a fn() to run later.\n            deleteTasks.push(() => CurrentObject.model().delete(row.id));\n         }\n      });\n\n      if (deleteTasks.length > 0) {\n         webix.confirm({\n            title: L(\"Delete Multiple Records\"),\n            text: L(\"Are you sure you want to delete the selected records?\"),\n            callback: async (result) => {\n               if (result) {\n                  // Now run those functions\n                  await Promise.all(deleteTasks.map((t) => t()));\n\n                  // Anything we need to do after we are done.\n                  this.disableUpdateDelete();\n               }\n            },\n         });\n      } else {\n         webix.alert({\n            title: L(\"No Records Selected\"),\n            text: L(\n               \"You need to select at least one record...did you drink your coffee today?\"\n            ),\n         });\n      }\n   }\n\n   toolbarFilter($view) {\n      this.viewGrid.filterHelper.showPopup($view);\n   }\n\n   toolbarSort($view) {\n      this.PopupSortDataTableComponent.show($view);\n   }\n\n   toolbarExport($view) {\n      this.PopupExport.show($view);\n   }\n\n   toolbarMassUpdate($view) {\n      this.PopupMassUpdateComponent.show($view);\n   }\n\n   /**\n    * @function toolTip()\n    *\n    * Retrieve the items toolTip\n    */\n   toolTip(obj, common) {\n      let CurrentObject = this.datacollection.datasource;\n      var imageFieldColNames = CurrentObject.imageFields().map(\n         (f) => f.columnName\n      );\n      var tip = \"\";\n      var columnName = common.column.id.replace(\" \", \"\");\n      if (Array.isArray(obj[columnName])) {\n         obj[columnName].forEach(function (o) {\n            if (o.text) tip += o.text + \"<br/>\";\n         });\n      } else if (typeof obj[columnName + \"__relation\"] != \"undefined\") {\n         var relationData = obj[columnName + \"__relation\"];\n         if (!Array.isArray(relationData)) relationData = [relationData];\n\n         (relationData || []).forEach(function (o) {\n            if (o) tip += o.text + \"<br/>\";\n         });\n      } else if (\n         typeof obj[columnName + \"__relation\"] != \"undefined\" &&\n         typeof obj[columnName] == \"number\"\n      ) {\n         tip = obj[columnName + \"__relation\"].text;\n      } else if (imageFieldColNames.indexOf(columnName) != -1) {\n         if (obj[columnName] == null) {\n            return \"\";\n         } else {\n            // TODO: we need to get this URL from the ABFieldImage object!\n            tip = `<img style='max-width: 500px; max-height: 500px;' src='/file/${obj[columnName]}' />`;\n         }\n      } else if (common.column.editor == \"date\") {\n         tip = common.column.format(obj[columnName]);\n      } else if (common.column.editor == \"richselect\") {\n         CurrentObject.fields().forEach(function (f) {\n            if (f.columnName == columnName) {\n               if (f.settings.options) {\n                  f.settings.options.forEach(function (o) {\n                     if (o.id == obj[columnName]) {\n                        tip = o.text;\n                     }\n                  });\n               }\n            }\n         });\n      } else {\n         tip = obj[columnName];\n      }\n      if (tip == null) {\n         return \"\";\n      } else {\n         return tip;\n      }\n   }\n\n   /**\n    * @function toolTipOnBeforeRender()\n    *\n    * Add visibility \"hidden\" to all tooltips before render so we can move to a new location without the visual jump\n    */\n   toolTipOnBeforeRender(node) {\n      // var node = $$(ids.tooltip).getNode();\n      node.style.visibility = \"hidden\";\n   }\n\n   /**\n    * @function toolTipOnAfterRender()\n    *\n    * If the tooltip is displaying off the screen we want to try to reposition it for a better experience\n    */\n   toolTipOnAfterRender(node) {\n      // var node = $$(ids.tooltip).getNode();\n      if (node.firstChild != null && node.firstChild.nodeName == \"IMG\") {\n         setTimeout(function () {\n            var imgBottom = parseInt(node.style.top.replace(\"px\", \"\")) + 500;\n            var imgRight = parseInt(node.style.left.replace(\"px\", \"\")) + 500;\n            if (imgBottom > window.innerHeight) {\n               var imgOffsetY = imgBottom - window.innerHeight;\n               var newTop =\n                  parseInt(node.style.top.replace(\"px\", \"\")) - imgOffsetY;\n               node.style.top = newTop + \"px\";\n            }\n            if (imgRight > window.innerWidth) {\n               var imgOffsetX = imgRight - window.innerWidth;\n               var newLeft =\n                  parseInt(node.style.left.replace(\"px\", \"\")) - imgOffsetX;\n               node.style.left = newLeft + \"px\";\n            }\n            node.style.visibility = \"visible\";\n         }, 250);\n      } else {\n         node.style.visibility = \"visible\";\n      }\n   }\n}\n\nexport default class ABViewGrid extends ABViewGridCore {\n   /**\n    * @param {obj} values  key=>value hash of ABView values\n    * @param {ABApplication} application the application object this view is under\n    * @param {ABViewWidget} parent the ABViewWidget this view is a child of. (can be null)\n    */\n   // constructor(values, application, parent, defaultValues) {\n   //    super(values, application, parent, defaultValues);\n   // }\n\n   ///\n   /// Instance Methods\n   ///\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      super.fromValues(values);\n\n      // filter property\n      this.filterHelper.fromSettings(this.settings.gridFilter);\n   }\n\n   //\n   // Editor Related\n   //\n\n   /**\n    * @method editorComponent\n    * return the Editor for this UI component.\n    * the editor should display either a \"block\" view or \"preview\" of\n    * the current layout of the view.\n    * @param {string} mode what mode are we in ['block', 'preview']\n    * @return {Component}\n    */\n   // editorComponent(App, mode) {\n   //    var idBase = \"ABViewGridEditorComponent\";\n\n   //    var DataTable = this.component(App, idBase);\n\n   //    return {\n   //       ui: DataTable.ui,\n   //       logic: DataTable.logic,\n   //       onShow: DataTable.onShow,\n\n   //       init: () => {\n   //          // remove id of the component in caching for refresh .bind of the data collection\n   //          let dv = this.datacollection;\n   //          if (dv) dv.removeComponent(DataTable.ui.id);\n\n   //          DataTable.init();\n   //       },\n   //    };\n   // }\n\n   //\n   // Property Editor\n   //\n\n   // static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\n   //    var commonUI = super.propertyEditorDefaultElements(\n   //       App,\n   //       ids,\n   //       _logic,\n   //       ObjectDefaults\n   //    );\n   //    var L = App.Label;\n\n   //    var idBase = \"ABViewGridPropertyEditor\";\n\n   //    // initialize our popup editors with unique names so we don't overwrite the previous editor each time\n   //    PopupHideFieldComponent = new ABPopupHideFields(App, idBase + \"_hide\");\n   //    PopupFrozenColumnsComponent = new ABPopupFrozenColumns(\n   //       App,\n   //       idBase + \"_freeze\"\n   //    );\n\n   //    PopupSummaryColumnsComponent = new ABPopupSummaryColumns(\n   //       App,\n   //       idBase + \"_summary\"\n   //    );\n   //    PopupCountColumnsComponent = new ABPopupCountColumns(\n   //       App,\n   //       idBase + \"_count\"\n   //    );\n\n   //    PopupFilterProperty = ABViewPropertyFilterData.propertyComponent(\n   //       App,\n   //       idBase + \"_gridfiltermenu\"\n   //    );\n   //    this.linkPageComponent = ABViewPropertyLinkPage.propertyComponent(\n   //       App,\n   //       idBase + \"_gridlinkpage\"\n   //    );\n\n   //    let filter_property_popup = webix.ui({\n   //       view: \"window\",\n   //       modal: true,\n   //       position: \"center\",\n   //       resize: true,\n   //       width: 700,\n   //       height: 450,\n   //       css: \"ab-main-container\",\n   //       head: {\n   //          view: \"toolbar\",\n   //          cols: [\n   //             {\n   //                view: \"label\",\n   //                label: L(\"ab.component.grid.filterMenu\", \"*Filter Menu\"),\n   //             },\n   //          ],\n   //       },\n   //       body: PopupFilterProperty.ui,\n   //    });\n\n   //    _logic.newObject = () => {\n   //       var currView = _logic.currentEditObject();\n   //       currView.settings.objectWorkspace = {\n   //          sortFields: [],\n   //          filterConditions: [],\n   //          frozenColumnID: \"\",\n   //          hiddenFields: [],\n   //          summaryColumns: [],\n   //          countColumns: [],\n   //       };\n   //       currView.populatePopupEditors(currView);\n   //    };\n\n   //    // Open our popup editors when their settings button is clicked\n   //    _logic.toolbarFieldsVisible = ($view) => {\n   //       PopupHideFieldComponent.show($view, { pos: \"top\" });\n   //    };\n\n   //    _logic.toolbarFrozen = ($view) => {\n   //       PopupFrozenColumnsComponent.show($view, { pos: \"top\" });\n   //    };\n\n   //    _logic.gridFilterMenuShow = () => {\n   //       let currView = _logic.currentEditObject();\n\n   //       // show filter popup\n   //       filter_property_popup.show();\n   //    };\n\n   //    _logic.summaryColumns = ($view) => {\n   //       PopupSummaryColumnsComponent.show($view, { pos: \"top\" });\n   //    };\n\n   //    _logic.countColumns = ($view) => {\n   //       PopupCountColumnsComponent.show($view, { pos: \"top\" });\n   //    };\n\n   //    _logic.callbackHideFields = (settings) => {\n   //       var currView = _logic.currentEditObject();\n\n   //       currView.objectWorkspace = currView.objectWorkspace || {};\n   //       currView.objectWorkspace.hiddenFields = settings;\n\n   //       _logic.onChange();\n   //    };\n\n   //    _logic.callbackFrozenFields = (settings) => {\n   //       var currView = _logic.currentEditObject();\n\n   //       currView.objectWorkspace = currView.objectWorkspace || {};\n   //       currView.objectWorkspace.frozenColumnID = settings || \"\";\n\n   //       _logic.onChange();\n   //    };\n\n   //    _logic.callbackSaveWorkspace = (data) => {\n   //       // when we make a change in the popups we want to make sure we save the new workspace to the properties to do so just fire an onChange event\n   //       _logic.onChange();\n   //    };\n\n   //    _logic.gridFilterSave = () => {\n   //       var currView = _logic.currentEditObject();\n   //       // currView.settings.isFilterable = settings.filterOption == 1 ? true : false;\n\n   //       // hide filter popup\n   //       filter_property_popup.hide();\n\n   //       // refresh settings\n   //       this.propertyEditorValues(ids, currView);\n\n   //       // trigger a save()\n   //       this.propertyEditorSave(ids, currView);\n   //    };\n\n   //    _logic.gridFilterCancel = () => {\n   //       // hide filter popup\n   //       filter_property_popup.hide();\n   //    };\n\n   //    _logic.callbackSaveSummaryColumns = (data) => {\n   //       var currObj = _logic.currentEditObject();\n   //       currObj.settings.objectWorkspace.summaryColumns = data;\n\n   //       // when we make a change in the popups we want to make sure we save the new workspace to the properties to do so just fire an onChange event\n   //       _logic.onChange();\n   //    };\n\n   //    _logic.callbackSaveCountColumns = (data) => {\n   //       var currObj = _logic.currentEditObject();\n   //       currObj.settings.objectWorkspace.countColumns = data;\n\n   //       // when we make a change in the popups we want to make sure we save the new workspace to the properties to do so just fire an onChange event\n   //       _logic.onChange();\n   //    };\n\n   //    PopupHideFieldComponent.init({\n   //       onChange: _logic.callbackHideFields, // be notified when there is a change in the hidden fields\n   //    });\n\n   //    PopupFrozenColumnsComponent.init({\n   //       onChange: _logic.callbackFrozenFields, // be notified when there is a change in the hidden fields\n   //    });\n\n   //    PopupFilterProperty.init({\n   //       onSave: _logic.gridFilterSave,\n   //       onCancel: _logic.gridFilterCancel,\n   //    });\n\n   //    PopupSummaryColumnsComponent.init({\n   //       onChange: _logic.callbackSaveSummaryColumns, // be notified when there is a change in the summary columns\n   //    });\n\n   //    PopupCountColumnsComponent.init({\n   //       onChange: _logic.callbackSaveCountColumns, // be notified when there is a change in the count columns\n   //    });\n\n   //    var view = \"button\";\n   //    // in addition to the common .label  values, we\n   //    // ask for:\n   //    return commonUI.concat([\n   //       {\n   //          view: \"fieldset\",\n   //          label: L(\"ab.component.label.gridProperties\", \"*Grid Properties:\"),\n   //          labelWidth: App.config.labelWidthLarge,\n   //          body: {\n   //             type: \"clean\",\n   //             padding: 10,\n   //             rows: [\n   //                {\n   //                   view: \"checkbox\",\n   //                   name: \"isEditable\",\n   //                   labelRight: L(\n   //                      \"ab.component.label.isEditable\",\n   //                      \"*User can edit in grid.\"\n   //                   ),\n   //                   labelWidth: App.config.labelWidthCheckbox,\n   //                },\n   //                {\n   //                   view: \"checkbox\",\n   //                   name: \"massUpdate\",\n   //                   labelRight: L(\n   //                      \"ab.component.label.massUpdate\",\n   //                      \"*User can edit multiple items at one time.\"\n   //                   ),\n   //                   labelWidth: App.config.labelWidthCheckbox,\n   //                },\n   //                {\n   //                   view: \"checkbox\",\n   //                   name: \"allowDelete\",\n   //                   labelRight: L(\n   //                      \"ab.component.label.allowDelete\",\n   //                      \"*User can delete records.\"\n   //                   ),\n   //                   labelWidth: App.config.labelWidthCheckbox,\n   //                },\n   //                {\n   //                   view: \"checkbox\",\n   //                   name: \"isSortable\",\n   //                   labelRight: L(\n   //                      \"ab.component.label.isSortable\",\n   //                      \"*User can sort records.\"\n   //                   ),\n   //                   labelWidth: App.config.labelWidthCheckbox,\n   //                },\n   //                {\n   //                   view: \"checkbox\",\n   //                   name: \"isExportable\",\n   //                   labelRight: L(\n   //                      \"ab.component.label.isExportable\",\n   //                      \"*User can export.\"\n   //                   ),\n   //                   labelWidth: App.config.labelWidthCheckbox,\n   //                },\n   //             ],\n   //          },\n   //       },\n   //       {\n   //          view: \"fieldset\",\n   //          label: L(\"ab.component.label.dataSource\", \"*Grid Data:\"),\n   //          labelWidth: App.config.labelWidthLarge,\n   //          body: {\n   //             type: \"clean\",\n   //             padding: 10,\n   //             rows: [\n   //                {\n   //                   view: \"select\",\n   //                   name: \"datacollection\",\n   //                   label: L(\"ab.component.label.dataSource\", \"*Object:\"),\n   //                   labelWidth: App.config.labelWidthLarge,\n   //                   on: {\n   //                      onChange: (newv, oldv) => {\n   //                         if (newv != oldv) {\n   //                            $$(ids.detailsPage).setValue(\"\");\n   //                            $$(ids.editPage).setValue(\"\");\n\n   //                            let editingGrid = _logic.currentEditObject();\n   //                            let currDC = editingGrid.AB.datacollections(\n   //                               (dc) => dc.id == newv\n   //                            )[0];\n   //                            // disallow edit data of query\n   //                            if (currDC && currDC.sourceType == \"query\") {\n   //                               $$(ids.isEditable).setValue(false);\n   //                               $$(ids.massUpdate).setValue(false);\n   //                               $$(ids.allowDelete).setValue(false);\n   //                               $$(ids.isEditable).disable();\n   //                               $$(ids.massUpdate).disable();\n   //                               $$(ids.allowDelete).disable();\n   //                            } else {\n   //                               $$(ids.isEditable).enable();\n   //                               $$(ids.massUpdate).enable();\n   //                               $$(ids.allowDelete).enable();\n   //                            }\n   //                         }\n   //                      },\n   //                   },\n   //                },\n   //             ],\n   //          },\n   //       },\n   //       {\n   //          view: \"fieldset\",\n   //          label: L(\"ab.component.grid.group\", \"*Group:\"),\n   //          labelWidth: App.config.labelWidthLarge,\n   //          body: {\n   //             type: \"clean\",\n   //             padding: 10,\n   //             rows: [\n   //                {\n   //                   view: \"multiselect\",\n   //                   name: \"groupBy\",\n   //                   label: L(\"ab.component.grid.groupBy\", \"*Group by:\"),\n   //                   labelWidth: App.config.labelWidthLarge,\n   //                   options: [],\n   //                   on: {\n   //                      onChange: (newV, oldV) => {\n   //                         let currView = _logic.currentEditObject();\n   //                         currView.propertyGroupByList(ids, newV);\n   //                      },\n   //                   },\n   //                },\n   //                {\n   //                   view: \"list\",\n   //                   name: \"groupByList\",\n   //                   drag: true,\n   //                   data: [],\n   //                   height: 200,\n   //                   template:\n   //                      \"<span class='fa fa-sort'></span>&nbsp;&nbsp; #value#\",\n   //                   on: {\n   //                      onAfterDrop: () => {\n   //                         let currView = _logic.currentEditObject();\n   //                         this.propertyEditorSave(ids, currView);\n   //                      },\n   //                   },\n   //                },\n   //             ],\n   //          },\n   //       },\n   //       this.linkPageComponent.ui,\n   //       {\n   //          view: \"fieldset\",\n   //          label: L(\n   //             \"ab.component.label.customizeDisplay\",\n   //             \"*Customize Display:\"\n   //          ),\n   //          labelWidth: App.config.labelWidthLarge,\n   //          body: {\n   //             type: \"clean\",\n   //             padding: 10,\n   //             rows: [\n   //                {\n   //                   cols: [\n   //                      {\n   //                         view: \"label\",\n   //                         label: L(\n   //                            \"ab.component.label.hiddenFields\",\n   //                            \"*Hidden Fields:\"\n   //                         ),\n   //                         css: \"ab-text-bold\",\n   //                         width: App.config.labelWidthXLarge,\n   //                      },\n   //                      {\n   //                         view: view,\n   //                         name: \"buttonFieldsVisible\",\n   //                         label: L(\"ab.component.label.settings\", \"*Settings\"),\n   //                         icon: \"fa fa-gear\",\n   //                         type: \"icon\",\n   //                         click: function () {\n   //                            _logic.toolbarFieldsVisible(this.$view);\n   //                         },\n   //                      },\n   //                   ],\n   //                },\n   //                {\n   //                   cols: [\n   //                      {\n   //                         view: \"label\",\n   //                         label: L(\n   //                            \"ab.component.label.filterData\",\n   //                            \"*Filter Option:\"\n   //                         ),\n   //                         css: \"ab-text-bold\",\n   //                         width: App.config.labelWidthXLarge,\n   //                      },\n   //                      {\n   //                         view: view,\n   //                         name: \"buttonFilterData\",\n   //                         label: L(\"ab.component.label.settings\", \"*Settings\"),\n   //                         icon: \"fa fa-gear\",\n   //                         type: \"icon\",\n   //                         click: function () {\n   //                            _logic.gridFilterMenuShow(this.$view);\n   //                         },\n   //                      },\n   //                   ],\n   //                },\n   //                {\n   //                   cols: [\n   //                      {\n   //                         view: \"label\",\n   //                         label: L(\n   //                            \"ab.component.label.freezeColumns\",\n   //                            \"*Freeze Columns:\"\n   //                         ),\n   //                         css: \"ab-text-bold\",\n   //                         width: App.config.labelWidthXLarge,\n   //                      },\n   //                      {\n   //                         view: view,\n   //                         name: \"buttonFieldsFreeze\",\n   //                         label: L(\"ab.component.label.settings\", \"*Settings\"),\n   //                         icon: \"fa fa-gear\",\n   //                         type: \"icon\",\n   //                         click: function () {\n   //                            _logic.toolbarFrozen(this.$view);\n   //                         },\n   //                      },\n   //                   ],\n   //                },\n\n   //                {\n   //                   cols: [\n   //                      {\n   //                         view: \"label\",\n   //                         label: L(\n   //                            \"ab.component.label.summaryFields\",\n   //                            \"*Summary Fields:\"\n   //                         ),\n   //                         css: \"ab-text-bold\",\n   //                         width: App.config.labelWidthXLarge,\n   //                      },\n   //                      {\n   //                         view: view,\n   //                         name: \"buttonSummaryFields\",\n   //                         label: L(\"ab.component.label.settings\", \"*Settings\"),\n   //                         icon: \"fa fa-gear\",\n   //                         type: \"icon\",\n   //                         click: function () {\n   //                            _logic.summaryColumns(this.$view);\n   //                         },\n   //                      },\n   //                   ],\n   //                },\n\n   //                {\n   //                   cols: [\n   //                      {\n   //                         view: \"label\",\n   //                         label: L(\n   //                            \"ab.component.label.countFields\",\n   //                            \"*Count Fields:\"\n   //                         ),\n   //                         css: \"ab-text-bold\",\n   //                         width: App.config.labelWidthXLarge,\n   //                      },\n   //                      {\n   //                         view: view,\n   //                         name: \"buttonCountFields\",\n   //                         label: L(\"ab.component.label.settings\", \"*Settings\"),\n   //                         icon: \"fa fa-gear\",\n   //                         type: \"icon\",\n   //                         click: function () {\n   //                            _logic.countColumns(this.$view);\n   //                         },\n   //                      },\n   //                   ],\n   //                },\n\n   //                {\n   //                   view: \"counter\",\n   //                   name: \"height\",\n   //                   label: L(\"ab.component.grid.height\", \"*Height:\"),\n   //                   labelWidth: App.config.labelWidthXLarge,\n   //                },\n\n   //                {\n   //                   view: \"checkbox\",\n   //                   name: \"hideHeader\",\n   //                   labelRight: L(\n   //                      \"ab.component.label.hideHeader\",\n   //                      \"*Hide table header\"\n   //                   ),\n   //                   labelWidth: App.config.labelWidthCheckbox,\n   //                },\n\n   //                {\n   //                   view: \"checkbox\",\n   //                   name: \"labelAsField\",\n   //                   labelRight: L(\n   //                      \"ab.component.label.labelAsField\",\n   //                      \"*Show a field using label template\"\n   //                   ),\n   //                   labelWidth: App.config.labelWidthCheckbox,\n   //                },\n\n   //                {\n   //                   view: \"checkbox\",\n   //                   name: \"hideButtons\",\n   //                   labelRight: L(\n   //                      \"ab.component.label.hideButtons\",\n   //                      \"*Hide edit and view buttons\"\n   //                   ),\n   //                   labelWidth: App.config.labelWidthCheckbox,\n   //                },\n   //             ],\n   //          },\n   //       },\n   //       {},\n   //    ]);\n   // }\n\n   // static propertyEditorPopulate(App, ids, view) {\n   //    super.propertyEditorPopulate(App, ids, view);\n\n   //    this.view = view;\n\n   //    $$(ids.datacollection).setValue(view.settings.dataviewID);\n   //    $$(ids.isEditable).setValue(view.settings.isEditable);\n   //    $$(ids.massUpdate).setValue(view.settings.massUpdate);\n   //    $$(ids.allowDelete).setValue(view.settings.allowDelete);\n   //    $$(ids.isSortable).setValue(view.settings.isSortable);\n   //    $$(ids.isExportable).setValue(view.settings.isExportable);\n   //    var details = view.settings.detailsPage;\n   //    if (view.settings.detailsTab != \"\") {\n   //       details += \":\" + view.settings.detailsTab;\n   //    }\n   //    $$(ids.detailsPage).setValue(details);\n   //    var edit = view.settings.editPage;\n   //    if (view.settings.editTab != \"\") {\n   //       edit += \":\" + view.settings.editTab;\n   //    }\n   //    $$(ids.editPage).setValue(edit);\n   //    $$(ids.height).setValue(view.settings.height);\n   //    $$(ids.hideHeader).setValue(view.settings.hideHeader);\n   //    $$(ids.labelAsField).setValue(view.settings.labelAsField);\n   //    $$(ids.hideButtons).setValue(view.settings.hideButtons);\n   //    $$(ids.groupBy).setValue(view.settings.groupBy);\n\n   //    // initial populate of properties and popups\n   //    view.populateEditor(ids, view);\n   //    view.populatePopupEditors(view);\n   //    view.populateBadgeNumber(ids, view);\n\n   //    // when a change is made in the properties the popups need to reflect the change\n   //    this.updateEventIds = this.updateEventIds || {}; // { viewId: boolean, ..., viewIdn: boolean }\n   //    if (!this.updateEventIds[view.id]) {\n   //       this.updateEventIds[view.id] = true;\n\n   //       view.addListener(\n   //          \"properties.updated\",\n   //          function () {\n   //             view.populateEditor(ids, view);\n   //             view.populatePopupEditors(view);\n   //             view.populateBadgeNumber(ids, view);\n   //          },\n   //          this\n   //       );\n   //    }\n\n   //    //Load ABDatacollection to QueryBuilder\n   //    this.propertyUpdateGridFilterObject(ids, view);\n\n   //    // Populate values to link page properties\n   //    this.linkPageComponent.viewLoad(view);\n   //    this.linkPageComponent.setSettings(view.settings);\n   // }\n\n   // static propertyEditorValues(ids, view) {\n   //    super.propertyEditorValues(ids, view);\n\n   //    // Retrive the values of your properties from Webix and store them in the view\n   //    view.settings.dataviewID = $$(ids.datacollection).getValue();\n   //    view.settings.isEditable = $$(ids.isEditable).getValue();\n   //    view.settings.massUpdate = $$(ids.massUpdate).getValue();\n   //    view.settings.allowDelete = $$(ids.allowDelete).getValue();\n   //    view.settings.isSortable = $$(ids.isSortable).getValue();\n   //    view.settings.isExportable = $$(ids.isExportable).getValue();\n\n   //    var detailsPage = $$(ids.detailsPage).getValue();\n   //    var detailsTab = \"\";\n   //    if (detailsPage.split(\":\").length > 1) {\n   //       var detailsVals = detailsPage.split(\":\");\n   //       detailsPage = detailsVals[0];\n   //       detailsTab = detailsVals[1];\n   //    }\n   //    view.settings.detailsPage = detailsPage;\n   //    view.settings.detailsTab = detailsTab;\n\n   //    var editPage = $$(ids.editPage).getValue();\n   //    var editTab = \"\";\n   //    if (editPage.split(\":\").length > 1) {\n   //       var editVals = editPage.split(\":\");\n   //       editPage = editVals[0];\n   //       editTab = editVals[1];\n   //    }\n   //    view.settings.editPage = editPage;\n   //    view.settings.editTab = editTab;\n\n   //    view.settings.height = $$(ids.height).getValue();\n   //    view.settings.hideHeader = $$(ids.hideHeader).getValue();\n   //    view.settings.labelAsField = $$(ids.labelAsField).getValue();\n   //    view.settings.hideButtons = $$(ids.hideButtons).getValue();\n   //    // view.settings.groupBy = $$(ids.groupBy).getValue();\n\n   //    // pull order groupBy list\n   //    let groupByList = $$(ids.groupByList).serialize() || [];\n   //    view.settings.groupBy = groupByList.map((item) => item.id).join(\",\");\n\n   //    view.settings.gridFilter = PopupFilterProperty.getSettings();\n\n   //    view.settings.objectWorkspace = view.settings.objectWorkspace || {};\n   //    view.settings.objectWorkspace.hiddenFields = PopupHideFieldComponent.getValue();\n   //    view.settings.objectWorkspace.frozenColumnID = PopupFrozenColumnsComponent.getValue();\n\n   //    // link pages\n   //    let linkSettings = this.linkPageComponent.getSettings();\n   //    for (let key in linkSettings) {\n   //       view.settings[key] = linkSettings[key];\n   //    }\n\n   //    // Populate values to link page properties\n   //    this.linkPageComponent.viewLoad(view);\n   //    this.linkPageComponent.setSettings(view.settings);\n   // }\n\n   // static propertyUpdateGridFilterObject(ids, view) {\n   //    if (!view) return;\n\n   //    // Populate values to QueryBuilder\n   //    var selectedDv = view.datacollection;\n\n   //    if (selectedDv) {\n   //       let object = selectedDv.datasource;\n   //       if (object) {\n   //          PopupFilterProperty.objectLoad(object, selectedDv.settings.loadAll);\n   //       }\n   //    }\n   // }\n\n   propertyGroupByList(ids, groupBy) {\n      let colNames = groupBy || [];\n      if (typeof colNames == \"string\") {\n         colNames = colNames.split(\",\");\n      }\n\n      let options = $$(ids.groupBy).getList().data.find({});\n\n      $$(ids.groupByList).clearAll();\n      colNames.forEach((colName) => {\n         let opt = options.filter((o) => o.id == colName)[0];\n         if (opt) {\n            $$(ids.groupByList).add(opt);\n         }\n      });\n   }\n\n   /**\n    * @method component()\n    * return a UI component based upon this view.\n    * @param {obj} App\n    * @return {obj} UI component\n    */\n   // component(App, objId) {\n   //    let baseCom = super.component(App);\n   //    var L = App.Label;\n\n   //    var idBase = objId || \"ABViewGrid_\" + this.id;\n   //    var ids = {\n   //       component: App.unique(idBase + \"_component\"),\n   //       toolbar: App.unique(idBase + \"_toolbar\"),\n   //       buttonDeleteSelected: App.unique(idBase + \"_deleteSelected\"),\n   //       // buttonExport: App.unique('buttonExport'),\n   //       buttonFilter: App.unique(idBase + \"_buttonFilter\"),\n   //       buttonMassUpdate: App.unique(idBase + \"_buttonMassUpdate\"),\n   //       buttonSort: App.unique(idBase + \"_buttonSort\"),\n   //       buttonExport: App.unique(idBase + \"_buttonExport\"),\n\n   //       globalSearchToolbar: App.unique(idBase + \"_globalSearchToolbar\"),\n   //    };\n\n   //    var labels = {\n   //       common: App.labels,\n   //    };\n\n   //    var CurrentObject = null;\n\n   //    var settings = {\n   //       allowDelete: this.settings.allowDelete,\n   //       detailsView: this.settings.detailsPage,\n   //       editView: this.settings.editPage,\n   //       isEditable: this.settings.isEditable,\n   //       massUpdate: this.settings.massUpdate,\n   //       configureHeaders: false,\n   //       summaryColumns: this.settings.summaryColumns,\n   //       countColumns: this.settings.countColumns,\n   //       hideHeader: this.settings.hideHeader,\n   //       labelAsField: this.settings.labelAsField,\n   //       hideButtons: this.settings.hideButtons,\n   //       groupBy: this.settings.groupBy,\n   //       hiddenFields: this.settings.hiddenFields,\n   //       frozenColumnID: this.settings.frozenColumnID || \"\",\n   //       isTreeDatable: this.datacollection && this.datacollection.isGroup,\n   //    };\n\n   //    let DataTable = new ABWorkspaceDatatable(App, idBase, settings);\n   //    let PopupMassUpdateComponent = new ABPopupMassUpdate(\n   //       App,\n   //       idBase + \"_mass\"\n   //    );\n   //    let PopupSortDataTableComponent = new ABPopupSortField(\n   //       App,\n   //       idBase + \"_sort\"\n   //    );\n   //    let exportPopup = new ABPopupExport(App, idBase + \"_export\");\n\n   //    let filterUI = this.filterHelper.component(App, idBase + \"_gridfilter\");\n   //    this.filterHelper.fromSettings(this.settings.gridFilter);\n\n   //    let linkPage = this.linkPageHelper.component(\n   //       App,\n   //       idBase + \"_gridlinkpage\"\n   //    );\n\n   //    let _init = (options, accessLevel) => {\n   //       if (this.settings.dataviewID != \"\") {\n   //          DataTable.init(\n   //             {\n   //                onCheckboxChecked: _logic.callbackCheckboxChecked,\n   //             },\n   //             accessLevel\n   //          );\n\n   //          PopupMassUpdateComponent.init({\n   //             // onSave:_logic.callbackAddFields        // be notified of something...who knows...\n   //          });\n\n   //          PopupSortDataTableComponent.init({\n   //             onChange: _logic.callbackSortData,\n   //          });\n\n   //          filterUI.init({\n   //             onFilterData: (fnFilter, filterRules) => {\n   //                _logic.callbackFilterData(fnFilter, filterRules); // be notified when there is a change in the filter\n   //             },\n   //          });\n\n   //          exportPopup.init({});\n\n   //          if (\n   //             this.settings.massUpdate ||\n   //             this.settings.isSortable ||\n   //             this.settings.isExportable ||\n   //             (this.settings.gridFilter &&\n   //                this.settings.gridFilter.filterOption &&\n   //                this.settings.gridFilter.userFilterPosition == \"toolbar\")\n   //          ) {\n   //             $$(ids.toolbar).show();\n   //          }\n\n   //          if (this.settings.massUpdate == false) {\n   //             $$(ids.buttonMassUpdate).hide();\n   //             $$(ids.buttonDeleteSelected).hide();\n   //          }\n\n   //          if (this.settings.allowDelete == false) {\n   //             $$(ids.buttonDeleteSelected).hide();\n   //          }\n\n   //          if (this.settings.gridFilter) {\n   //             if (\n   //                this.settings.gridFilter.filterOption != 1 ||\n   //                this.settings.gridFilter.userFilterPosition != \"toolbar\"\n   //             ) {\n   //                $$(ids.buttonFilter).hide();\n   //             }\n\n   //             if (\n   //                this.settings.gridFilter.filterOption == 3 &&\n   //                this.settings.gridFilter.globalFilterPosition == \"single\"\n   //             ) {\n   //                $$(DataTable.ui.id).hide();\n   //             }\n\n   //             if (this.settings.gridFilter.isGlobalToolbar)\n   //                $$(ids.globalSearchToolbar).show();\n   //             else $$(ids.globalSearchToolbar).hide();\n   //          }\n\n   //          if (this.settings.isSortable == false) {\n   //             $$(ids.buttonSort).hide();\n   //          }\n\n   //          if (this.settings.isExportable == false) {\n   //             $$(ids.buttonExport).hide();\n   //          }\n\n   //          if (this.settings.hideHeader == true) {\n   //             DataTable.hideHeader();\n   //          }\n\n   //          var dv = this.datacollection;\n   //          if (dv && dv.datasource) {\n   //             CurrentObject = dv.datasource;\n\n   //             DataTable.objectLoad(CurrentObject);\n   //             PopupMassUpdateComponent.objectLoad(CurrentObject, DataTable);\n   //             PopupSortDataTableComponent.objectLoad(CurrentObject);\n   //             PopupSortDataTableComponent.setValue(this.settings.sortFields);\n   //             this.filterHelper.objectLoad(CurrentObject);\n   //             this.filterHelper.viewLoad(this);\n   //             exportPopup.objectLoad(CurrentObject);\n   //             exportPopup.dataCollectionLoad(dv);\n   //             exportPopup.setGridComponent($$(DataTable.ui.id));\n   //             exportPopup.setHiddenFields(this.settings.hiddenFields);\n   //             exportPopup.setFilename(this.label);\n   //             DataTable.refreshHeader();\n\n   //             // link page helper\n   //             linkPage.init({\n   //                view: this,\n   //                datacollection: dv,\n   //             });\n\n   //             // dv.bind($$(DataTable.ui.id));\n   //             DataTable.datacollectionLoad(dv);\n\n   //             var editPage = this.settings.editPage;\n   //             var detailsPage = this.settings.detailsPage;\n   //             var editTab = this.settings.editTab;\n   //             var detailsTab = this.settings.detailsTab;\n   //             var isEditable = this.settings.isEditable;\n\n   //             // we need to recursivly look backwards to toggle tabs into view when a user choosed to select a tab for edit or details views\n   //             function toggleTab(parentTab, wb) {\n   //                // find the tab\n   //                var tab = wb.getTopParentView().queryView({ id: parentTab });\n   //                // if we didn't pass and id we may have passed a domNode\n   //                if (tab == null) {\n   //                   tab = $$(parentTab);\n   //                }\n\n   //                if (tab == null) return;\n\n   //                // set the tabbar to to the tab\n   //                var tabbar = tab.getParentView().getParentView();\n\n   //                if (tabbar == null) return;\n\n   //                if (tabbar.setValue) {\n   //                   // if we have reached the top we won't have a tab\n   //                   tabbar.setValue(parentTab);\n   //                }\n\n   //                // find if it is in a multiview of a tab\n   //                var nextTab = tabbar.queryView(\n   //                   { view: \"scrollview\" },\n   //                   \"parent\"\n   //                );\n   //                // if so then do this again\n   //                if (nextTab) {\n   //                   toggleTab(nextTab, wb);\n   //                }\n   //             }\n\n   //             $$(DataTable.ui.id).attachEvent(\n   //                \"onItemClick\",\n   //                function (id, e, node) {\n   //                   var item = id;\n\n   //                   if (e == \"auto\") {\n   //                      // automatically choose the details page if a record matches\n   //                      // later on we can decide if we want to have the choice to select the edit page intead.\n   //                      _logic.changePage(dv, item, detailsPage);\n   //                      toggleTab(detailsTab, this);\n   //                   } else if (e.target.className.indexOf(\"eye\") > -1) {\n   //                      _logic.changePage(dv, item, detailsPage);\n   //                      toggleTab(detailsTab, this);\n   //                   } else if (e.target.className.indexOf(\"pencil\") > -1) {\n   //                      _logic.changePage(dv, item, editPage);\n   //                      toggleTab(editTab, this);\n   //                   } else if (e.target.className.indexOf(\"trash\") > -1) {\n   //                      // don't do anything for delete it is handled elsewhere\n   //                   } else if (!isEditable && detailsPage.length) {\n   //                      _logic.changePage(dv, item, detailsPage);\n   //                      toggleTab(detailsTab, this);\n   //                   } else if (\n   //                      !isEditable &&\n   //                      !detailsPage.length &&\n   //                      editPage.length &&\n   //                      this.config.accessLevel == 2\n   //                   ) {\n   //                      _logic.changePage(dv, item, editPage);\n   //                      toggleTab(editTab, this);\n   //                   }\n   //                }\n   //             );\n\n   //             $$(DataTable.ui.id).attachEvent(\n   //                \"onAfterRender\",\n   //                function (data) {\n   //                   if ($$(DataTable.ui.id)) {\n   //                      //set cy data\n   //                      $$(DataTable.ui.id).$view.setAttribute(\n   //                         \"data-cy\",\n   //                         DataTable.idBase\n   //                      );\n   //                      for (const key in ids) {\n   //                         if (Object.hasOwnProperty.call(ids, key)) {\n   //                            let element = ids[key].toString();\n   //                            if ($$(element)) {\n   //                               $$(element).$view.setAttribute(\n   //                                  \"data-cy\",\n   //                                  element\n   //                               );\n   //                            }\n   //                         }\n   //                      }\n   //                   }\n   //                }\n   //             );\n\n   //             // $$(DataTable.ui.id).attachEvent('onBeforeRender', function (data) {\n   //             //    _logic.clientSideDataFilter();\n   //             // });\n\n   //             $$(DataTable.ui.id).adjust();\n   //          }\n\n   //          // Adjust grid based off Access Level of parent view\n   //          if (accessLevel < 2) {\n   //             $$(ids.buttonMassUpdate).hide();\n   //             $$(ids.buttonDeleteSelected).hide();\n   //          }\n   //       }\n   //    };\n\n   //    // specify height of the grid\n   //    if (this.settings.height) DataTable.ui.height = this.settings.height;\n\n   //    var tableUI = {\n   //       type: \"space\",\n   //       rows: [\n   //          {\n   //             view: \"label\",\n   //             label: \"Select an object to load.\",\n   //             inputWidth: 200,\n   //             align: \"center\",\n   //          },\n   //          {},\n   //       ],\n   //    };\n   //    if (this.settings.dataviewID != \"\") {\n   //       tableUI = {\n   //          type: \"space\",\n   //          padding: 17,\n   //          rows: [\n   //             {\n   //                view: \"toolbar\",\n   //                id: ids.toolbar,\n   //                hidden: true,\n   //                css: \"ab-data-toolbar\",\n   //                cols: [\n   //                   {\n   //                      view: \"button\",\n   //                      id: ids.buttonMassUpdate,\n   //                      css: \"webix_transparent\",\n   //                      label: L(\"ab.object.toolbar.massUpdate\", \"*Edit\"),\n   //                      icon: \"fa fa-pencil-square-o\",\n   //                      type: \"icon\",\n   //                      disabled: true,\n   //                      autowidth: true,\n   //                      click: function () {\n   //                         _logic.toolbarMassUpdate(this.$view);\n   //                      },\n   //                   },\n   //                   {\n   //                      view: \"button\",\n   //                      id: ids.buttonDeleteSelected,\n   //                      css: \"webix_transparent\",\n   //                      label: L(\"ab.object.toolbar.deleteRecords\", \"*Delete\"),\n   //                      icon: \"fa fa-trash\",\n   //                      type: \"icon\",\n   //                      disabled: true,\n   //                      autowidth: true,\n   //                      click: function () {\n   //                         _logic.toolbarDeleteSelected(this.$view);\n   //                      },\n   //                   },\n   //                   {\n   //                      view: \"button\",\n   //                      id: ids.buttonFilter,\n   //                      css: \"webix_transparent\",\n   //                      label: L(\"ab.object.toolbar.filterFields\", \"*Filters\"),\n   //                      icon: \"fa fa-filter\",\n   //                      type: \"icon\",\n   //                      autowidth: true,\n   //                      click: function () {\n   //                         _logic.toolbarFilter(this.$view);\n   //                      },\n   //                   },\n   //                   {\n   //                      view: \"button\",\n   //                      id: ids.buttonSort,\n   //                      css: \"webix_transparent\",\n   //                      label: L(\"ab.object.toolbar.sortFields\", \"*Sort\"),\n   //                      icon: \"fa fa-sort\",\n   //                      type: \"icon\",\n   //                      autowidth: true,\n   //                      click: function () {\n   //                         _logic.toolbarSort(this.$view);\n   //                      },\n   //                   },\n   //                   {\n   //                      view: \"button\",\n   //                      id: ids.buttonExport,\n   //                      css: \"webix_transparent\",\n   //                      label: L(\"ab.object.toolbar.export\", \"*Export\"),\n   //                      icon: \"fa fa-print\",\n   //                      type: \"icon\",\n   //                      autowidth: true,\n   //                      click: function () {\n   //                         _logic.toolbarExport(this.$view);\n   //                      },\n   //                   },\n   //                   /*\n   //             {\n   //                view: view,\n   //                id: ids.buttonExport,\n   //                label: labels.component.export,\n   //                icon: \"fa fa-download\",\n   //                type: \"icon\",\n   //                click: function() {\n   //                   _logic.toolbarButtonExport(this.$view);\n   //                }\n   //             }\n   //                          */\n   //                   {},\n   //                   {\n   //                      id: ids.globalSearchToolbar,\n   //                      view: \"search\",\n   //                      placeholder: \"Search...\",\n   //                      on: {\n   //                         onTimedKeyPress: () => {\n   //                            let searchText = $$(\n   //                               ids.globalSearchToolbar\n   //                            ).getValue();\n\n   //                            filterUI.searchText(searchText);\n   //                         },\n   //                      },\n   //                   },\n   //                ],\n   //             },\n   //             filterUI.ui,\n   //             DataTable.ui,\n   //          ],\n   //       };\n   //    }\n\n   //    // our internal business logic\n   //    var _logic = {\n   //       callbackCheckboxChecked: (state) => {\n   //          if (state == \"enable\") {\n   //             _logic.enableUpdateDelete();\n   //          } else {\n   //             _logic.disableUpdateDelete();\n   //          }\n   //       },\n\n   //       callbackSortData: (sort_settings) => {\n   //          let sortRules = sort_settings || [];\n\n   //          $$(ids.buttonSort).define(\"badge\", sortRules.length || null);\n   //          $$(ids.buttonSort).refresh();\n\n   //          let gridElem = $$(DataTable.ui.id);\n   //          Promise.resolve()\n   //             // NOTE: Webix's client sorting does not support dynamic loading.\n   //             // If the data does not be loaded, then load all data.\n   //             .then(() => {\n   //                if (gridElem.data.find({}).length < gridElem.data.count()) {\n   //                   return new Promise((next, bad) => {\n   //                      this.datacollection\n   //                         .reloadData(0, 0)\n   //                         .catch(bad)\n   //                         .then(() => {\n   //                            // wait until the grid component will done to repaint UI\n   //                            setTimeout(() => {\n   //                               next();\n   //                            }, 777);\n   //                         });\n   //                   });\n   //                } else {\n   //                   return Promise.resolve();\n   //                }\n   //             })\n   //             // client sort data\n   //             .then(() => {\n   //                gridElem.sort(PopupSortDataTableComponent.sort);\n   //             });\n   //       },\n\n   //       callbackFilterData: (fnFilter, filterRules) => {\n   //          filterRules = filterRules || [];\n\n   //          if ($$(ids.buttonFilter)) {\n   //             $$(ids.buttonFilter).define(\"badge\", filterRules.length || null);\n   //             $$(ids.buttonFilter).refresh();\n   //          }\n\n   //          Promise.resolve()\n   //             .then(\n   //                () =>\n   //                   new Promise((next, err) => {\n   //                      // if (\n   //                      //    !this.settings ||\n   //                      //    !this.settings.gridFilter ||\n   //                      //    this.settings.gridFilter.filterOption != 3\n   //                      // )\n   //                      //    // Global search\n   //                      //    return next();\n\n   //                      let dc = this.datacollection;\n   //                      if (\n   //                         !dc ||\n   //                         (dc.settings.loadAll &&\n   //                            dc.dataStatus != dc.dataStatusFlag.notInitial)\n   //                      )\n   //                         // Load all already\n   //                         return next();\n\n   //                      let limit = null;\n\n   //                      // limit pull data to reduce time and performance loading\n   //                      // if (dc.__dataCollection.count() > 300) limit = 300;\n\n   //                      // Load all data\n   //                      let gridElem = $$(DataTable.ui.id);\n   //                      if (\n   //                         gridElem.data.find({}).length < gridElem.data.count()\n   //                      ) {\n   //                         dc.reloadData(0, limit)\n   //                            .then(() => {\n   //                               // Should set .loadAll to this data collection ?\n   //                               if (limit == null) dc.settings.loadAll = true;\n\n   //                               next();\n   //                            })\n   //                            .catch(err);\n   //                      } else {\n   //                         next();\n   //                      }\n   //                   })\n   //             )\n   //             // client filter data\n   //             .then(\n   //                () =>\n   //                   new Promise((next, err) => {\n   //                      if (!fnFilter) return next();\n\n   //                      // wait the data are parsed into webix.datatable\n   //                      setTimeout(() => {\n   //                         let table = $$(DataTable.ui.id);\n   //                         table.filter((rowData) => {\n   //                            // rowData is null when is not load from paging\n   //                            if (rowData == null) return false;\n\n   //                            return fnFilter(rowData);\n   //                         });\n\n   //                         if (\n   //                            this.settings.gridFilter.globalFilterPosition ==\n   //                            \"single\"\n   //                         ) {\n   //                            if (table.count() > 0) {\n   //                               table.show();\n   //                               table.select(table.getFirstId(), false);\n   //                               table.callEvent(\"onItemClick\", [\n   //                                  table.getFirstId(),\n   //                                  \"auto\",\n   //                                  null,\n   //                               ]);\n   //                            } else {\n   //                               table.hide();\n   //                            }\n   //                         }\n\n   //                         next();\n   //                      }, 500);\n   //                   })\n   //             );\n   //       },\n\n   //       changePage: (dv, rowItem, page) => {\n   //          let rowId = rowItem && rowItem.row ? rowItem.row : null;\n\n   //          // Set cursor to data view\n   //          if (dv) {\n   //             dv.setCursor(rowId);\n   //          }\n\n   //          // Pass settings to link page module\n   //          if (linkPage) {\n   //             linkPage.changePage(page, rowId);\n   //          }\n\n   //          super.changePage(page);\n   //       },\n\n   //       selectRow: (rowData) => {\n   //          if (!$$(DataTable.ui.id)) return;\n\n   //          if (rowData == null) $$(DataTable.ui.id).unselect();\n   //          else if (\n   //             rowData &&\n   //             rowData.id &&\n   //             $$(DataTable.ui.id).exists(rowData.id)\n   //          )\n   //             $$(DataTable.ui.id).select(rowData.id, false);\n   //          else $$(DataTable.ui.id).select(null, false);\n   //       },\n\n   //       /**\n   //        * @function enableUpdateDelete\n   //        *\n   //        * enable the update or delete buttons in the toolbar if there are any items selected\n   //        * we will make this externally accessible so we can call it from within the datatable component\n   //        */\n   //       enableUpdateDelete: function () {\n   //          $$(ids.buttonMassUpdate).enable();\n   //          $$(ids.buttonDeleteSelected).enable();\n   //       },\n\n   //       /**\n   //        * @function enableUpdateDelete\n   //        *\n   //        * disable the update or delete buttons in the toolbar if there no items selected\n   //        * we will make this externally accessible so we can call it from within the datatable component\n   //        */\n   //       disableUpdateDelete: function () {\n   //          $$(ids.buttonMassUpdate).disable();\n   //          $$(ids.buttonDeleteSelected).disable();\n   //       },\n\n   //       toolbarDeleteSelected: function ($view) {\n   //          var deleteTasks = [];\n   //          $$(DataTable.ui.id).data.each(function (obj) {\n   //             if (\n   //                typeof obj != \"undefined\" &&\n   //                obj.hasOwnProperty(\"appbuilder_select_item\") &&\n   //                obj.appbuilder_select_item == 1\n   //             ) {\n   //                deleteTasks.push(function (next) {\n   //                   CurrentObject.model()\n   //                      .delete(obj.id)\n   //                      .then((response) => {\n   //                         next();\n   //                      }, next);\n   //                });\n   //             }\n   //          });\n\n   //          if (deleteTasks.length > 0) {\n   //             App.AB.Dialog.Confirm({\n   //                title: L(\"ab.massDelete.title\", \"*Delete Multiple Records\"),\n   //                text: L(\n   //                   \"ab.massDelete.description\",\n   //                   \"*Are you sure you want to delete the selected records?\"\n   //                ),\n   //                callback: function (result) {\n   //                   if (result) {\n   //                      async.parallel(deleteTasks, function (err) {\n   //                         if (err) {\n   //                            // TODO : Error message\n   //                         } else {\n   //                            // Anything we need to do after we are done.\n   //                            _logic.disableUpdateDelete();\n   //                         }\n   //                      });\n   //                   }\n   //                },\n   //             });\n   //          } else {\n   //             App.AB.Dialog.Alert({\n   //                title: L(\"key.no.records.selected\", \"No Records Selected\"),\n   //                text: L(\n   //                   \"key.select.one\",\n   //                   \"You need to select at least one record...did you drink your coffee today?\"\n   //                ),\n   //             });\n   //          }\n   //       },\n\n   //       toolbarFilter: ($view) => {\n   //          filterUI.showPopup($view);\n   //       },\n\n   //       toolbarSort: ($view) => {\n   //          PopupSortDataTableComponent.show($view);\n   //       },\n\n   //       toolbarExport: ($view) => {\n   //          exportPopup.show($view);\n   //       },\n\n   //       toolbarMassUpdate: function ($view) {\n   //          PopupMassUpdateComponent.show($view);\n   //       },\n   //    };\n\n   //    var _onShow = () => {\n   //       baseCom.onShow();\n\n   //       if ($$(DataTable.ui.id)) {\n   //          $$(DataTable.ui.id).adjust();\n   //       }\n\n   //       var dv = this.datacollection;\n   //       if (dv) {\n   //          this.eventAdd({\n   //             emitter: dv,\n   //             eventName: \"changeCursor\",\n   //             listener: _logic.selectRow,\n   //          });\n   //       }\n   //    };\n\n   //    return {\n   //       ui: tableUI,\n   //       init: _init,\n   //       logic: _logic,\n\n   //       onShow: _onShow,\n   //    };\n   // }\n\n   component(v1App = false) {\n      var component = new ABViewGridComponent(this);\n\n      // if this is our v1Interface\n      if (v1App) {\n         var newComponent = component;\n         component = {\n            ui: component.ui(),\n            init: (options, accessLevel) => {\n               return newComponent.init(this.AB, accessLevel);\n            },\n            onShow: (...params) => {\n               return newComponent.onShow?.(...params);\n            },\n         };\n      }\n\n      return component;\n   }\n\n   // populateEditor(ids, view) {\n   //    // Pull data collections to options\n   //    var objectOptions = view.propertyDatacollections();\n   //    $$(ids.datacollection).define(\"options\", objectOptions);\n   //    $$(ids.datacollection).refresh();\n   //    if (view.settings.datacollection != \"\") {\n   //       $$(ids.datacollection).setValue(view.settings.dataviewID);\n   //       // $$(ids.linkedObject).show();\n   //    } else {\n   //       $$(ids.datacollection).setValue(\"\");\n   //       // $$(ids.linkedObject).hide();\n   //    }\n\n   //    // Grouping options\n   //    let groupFields = [];\n   //    let dv = this.datacollection;\n   //    if (dv && dv.datasource) {\n   //       dv.datasource\n   //          .fields((f) => {\n   //             return (\n   //                !f.isConnection &&\n   //                view.settings.hiddenFields.indexOf(f.columnName) < 0\n   //             );\n   //          })\n   //          .forEach((f) => {\n   //             groupFields.push({\n   //                id: f.columnName,\n   //                value: f.label,\n   //             });\n   //          });\n   //    }\n   //    $$(ids.groupBy).define(\"options\", groupFields);\n   //    $$(ids.groupBy).refresh();\n\n   //    this.propertyGroupByList(ids, view.settings.groupBy);\n   // }\n\n   // populatePopupEditors(view, dataSource) {\n   //    var dv = this.datacollection;\n   //    if (!dv) return;\n\n   //    let object = dv.datasource;\n   //    if (!object) return;\n\n   //    PopupHideFieldComponent.objectLoad(object);\n   //    PopupHideFieldComponent.setValue(view.settings.hiddenFields || []);\n   //    PopupHideFieldComponent.setFrozenColumnID(\n   //       view.settings.frozenColumnID || \"\"\n   //    );\n   //    PopupFrozenColumnsComponent.objectLoad(object);\n   //    PopupFrozenColumnsComponent.setValue(view.settings.frozenColumnID || \"\");\n   //    PopupFrozenColumnsComponent.setHiddenFields(\n   //       view.settings.hiddenFields || []\n   //    );\n\n   //    PopupFilterProperty.objectLoad(object);\n   //    PopupFilterProperty.setSettings(view.settings.gridFilter);\n\n   //    PopupSummaryColumnsComponent.objectLoad(object, view);\n   //    PopupSummaryColumnsComponent.setValue(view.settings.summaryColumns || []);\n\n   //    PopupCountColumnsComponent.objectLoad(object, view);\n   //    PopupCountColumnsComponent.setValue(view.settings.countColumns || []);\n   // }\n\n   // populateBadgeNumber(ids, view) {\n   //    // set badge numbers to setting buttons\n   //    if (view.settings.hiddenFields) {\n   //       $$(ids.buttonFieldsVisible).define(\n   //          \"badge\",\n   //          view.settings.hiddenFields.length || null\n   //       );\n   //       $$(ids.buttonFieldsVisible).refresh();\n   //    } else {\n   //       $$(ids.buttonFieldsVisible).define(\"badge\", null);\n   //       $$(ids.buttonFieldsVisible).refresh();\n   //    }\n\n   //    if (view.settings.gridFilter && view.settings.gridFilter.filterOption) {\n   //       $$(ids.buttonFilterData).define(\"badge\", \"Y\");\n   //       $$(ids.buttonFilterData).refresh();\n   //    } else {\n   //       $$(ids.buttonFilterData).define(\"badge\", null);\n   //       $$(ids.buttonFilterData).refresh();\n   //    }\n\n   //    if (view.settings && view.settings.frozenColumnID) {\n   //       $$(ids.buttonFieldsFreeze).define(\"badge\", \"Y\");\n   //       $$(ids.buttonFieldsFreeze).refresh();\n   //    } else {\n   //       $$(ids.buttonFieldsFreeze).define(\"badge\", null);\n   //       $$(ids.buttonFieldsFreeze).refresh();\n   //    }\n\n   //    if (view.settings && view.settings.summaryColumns) {\n   //       $$(ids.buttonSummaryFields).define(\n   //          \"badge\",\n   //          view.settings.summaryColumns.length || null\n   //       );\n   //       $$(ids.buttonSummaryFields).refresh();\n   //    } else {\n   //       $$(ids.buttonSummaryFields).define(\"badge\", null);\n   //       $$(ids.buttonSummaryFields).refresh();\n   //    }\n\n   //    if (view.settings && view.settings.countColumns) {\n   //       $$(ids.buttonCountFields).define(\n   //          \"badge\",\n   //          view.settings.countColumns.length || null\n   //       );\n   //       $$(ids.buttonCountFields).refresh();\n   //    } else {\n   //       $$(ids.buttonCountFields).define(\"badge\", null);\n   //       $$(ids.buttonCountFields).refresh();\n   //    }\n   // }\n\n   get filterHelper() {\n      if (this.__filterHelper == null) {\n         this.__filterHelper = new ABViewGridFilter(\n            this.AB,\n            `${this.id}_filterHelper`\n         );\n      }\n\n      return this.__filterHelper;\n   }\n\n   get linkPageHelper() {\n      if (this.__linkPageHelper == null)\n         this.__linkPageHelper = new ABViewPropertyLinkPage();\n\n      return this.__linkPageHelper;\n   }\n}\n","const ABViewImageCore = require(\"../../core/views/ABViewImageCore\");\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABViewImage extends ABViewImageCore {\n   // constructor(values, application, parent, defaultValues) {\n   //    super(values, application, parent, defaultValues);\n   // }\n\n   //\n   //\tEditor Related\n   //\n\n   /**\n    * @method editorComponent\n    * return the Editor for this UI component.\n    * the editor should display either a \"block\" view or \"preview\" of\n    * the current layout of the view.\n    * @param {string} mode what mode are we in ['block', 'preview']\n    * @return {Component}\n    */\n   editorComponent(App, mode) {\n      var idBase = \"ABViewImageEditorComponent\";\n\n      var ImageComponent = this.component(App, idBase);\n\n      return ImageComponent;\n   }\n\n   //\n   // Property Editor\n   //\n\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\n      var commonUI = super.propertyEditorDefaultElements(\n         App,\n         ids,\n         _logic,\n         ObjectDefaults\n      );\n\n      _logic.validateType = (item) => {\n         // verify file type\n         var acceptableTypes = [\"jpg\", \"jpeg\", \"bmp\", \"png\", \"gif\"];\n         var type = item.type.toLowerCase();\n         if (acceptableTypes.indexOf(type) == -1) {\n            webix.message(\n               L(\"Only [{0}] images are supported\", [\n                  acceptableTypes.join(\", \"),\n               ])\n            );\n            return false;\n         } else {\n            // set upload url to uploader\n            var currView = _logic.currentEditObject();\n            let actionKey = `opstool.AB_${currView.application.name.replace(\n               \"_\",\n               \"\"\n            )}.view`;\n            let url = `/file/upload/${currView.application.name}/${actionKey}/1`;\n\n            $$(ids.file).define(\"upload\", url);\n            $$(ids.file).refresh();\n\n            return true;\n         }\n      };\n\n      _logic.uploadedFile = (fileInfo) => {\n         if (!fileInfo || !fileInfo.data) return;\n\n         var currView = _logic.currentEditObject();\n         currView.settings.filename = fileInfo.data.uuid;\n\n         // get width & height of images\n         if (fileInfo.file) {\n            let img = new Image();\n            img.onload = function () {\n               $$(ids.width).setValue(img.width);\n               $$(ids.height).setValue(img.height);\n            };\n            img.src = URL.createObjectURL(fileInfo.file);\n         }\n\n         // trigger a save()\n         this.propertyEditorSave(ids, currView);\n      };\n\n      // in addition to the common .label  values, we\n      // ask for:\n      return commonUI.concat([\n         {\n            cols: [\n               {\n                  view: \"label\",\n                  label: L(\"Image:\"),\n                  css: \"ab-text-bold\",\n                  width: this.AB.UISettings.config().labelWidthXLarge,\n               },\n               {\n                  view: \"uploader\",\n                  value: L(\"Upload image\"),\n                  name: \"file\",\n                  apiOnly: true,\n                  inputName: \"image\",\n                  multiple: false,\n                  on: {\n                     onBeforeFileAdd: (item) => {\n                        return _logic.validateType(item);\n                     },\n\n                     onFileUpload: (file, response) => {\n                        _logic.uploadedFile(file);\n                     },\n\n                     onFileUploadError: (file, response) => {},\n                  },\n               },\n            ],\n         },\n         {\n            view: \"counter\",\n            name: \"width\",\n            label: L(\"Width:\"),\n            labelWidth: this.AB.UISettings.config().labelWidthXLarge,\n         },\n         {\n            view: \"counter\",\n            name: \"height\",\n            label: L(\"Height:\"),\n            labelWidth: this.AB.UISettings.config().labelWidthXLarge,\n         },\n      ]);\n   }\n\n   static propertyEditorPopulate(App, ids, view) {\n      super.propertyEditorPopulate(App, ids, view);\n\n      $$(ids.width).setValue(view.settings.width);\n      $$(ids.height).setValue(view.settings.height);\n   }\n\n   static propertyEditorValues(ids, view) {\n      super.propertyEditorValues(ids, view);\n\n      view.settings.width = $$(ids.width).getValue();\n      view.settings.height = $$(ids.height).getValue();\n   }\n\n   /*\n    * @component()\n    * return a UI component based upon this view.\n    * @param {obj} App\n    * @return {obj} UI component\n    */\n   component(App) {\n      var idBase = `ABViewImage_${this.id}`;\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n      };\n\n      // an ABViewLabel is a simple Label\n      var _ui = {\n         cols: [\n            {\n               id: ids.component,\n               view: \"template\",\n               template: \"\",\n               height: this.settings.height,\n               width: this.settings.width,\n            },\n            {},\n         ],\n      };\n\n      // make sure each of our child views get .init() called\n      var _init = (options) => {\n         if (!$$(ids.component)) return;\n\n         if (this.settings.filename) {\n            let imgTag = `<img src=\"/file/${this.settings.filename}\" height=\"${this.settings.height}\" width=\"${this.settings.width}\">`;\n\n            $$(ids.component).define(\"template\", imgTag);\n         } else {\n            $$(ids.component).define(\"template\", \"\");\n         }\n\n         $$(ids.component).refresh();\n      };\n\n      return {\n         ui: _ui,\n         init: _init,\n      };\n   }\n};\n","const ABViewKanbanCore = require(\"../../core/views/ABViewKanbanCore\");\nimport ABViewComponent from \"./ABViewComponent\";\n\nconst ABViewPropertyLinkPage = require(\"./viewProperties/ABViewPropertyLinkPage\")\n   .default;\n\nconst ABFormSidePanel = require(\"./ABViewKanbanFormSidePanel\");\n\nvar L = null;\n// multilingual Label fn()\n\nvar ABFieldConnect = null;\nvar ABFieldUser = null;\nvar ABFieldList = null;\n\nclass ABViewKanBanComponent extends ABViewComponent {\n   constructor(viewKanBan, idBase) {\n      var base = idBase || `ABViewKanBan_${viewKanBan.id}`;\n\n      super(base, {\n         // component: \"\",\n         kanban: \"\",\n         resizer: \"\",\n      });\n\n      this.viewKanBan = viewKanBan;\n      this.AB = viewKanBan.AB;\n\n      this.settings = viewKanBan.settings;\n\n      this.FormSide = new ABFormSidePanel(\n         this,\n         `${base}_formSidePanel`,\n         this.settings.editFields\n      );\n\n      this.CurrentVerticalField = null;\n      this.CurrentHorizontalField = null;\n      this.CurrentOwnerField = null;\n\n      this.TextTemplate = viewKanBan.TextTemplate;\n\n      this._updatingOwnerRowId = null;\n\n      if (!L) {\n         L = (...params) => {\n            return this.AB.Multilingual.label(...params);\n         };\n\n         ABFieldConnect = this.AB.Class.ABFieldManager.fieldByKey(\n            \"connectObject\"\n         );\n         ABFieldUser = this.AB.Class.ABFieldManager.fieldByKey(\"user\");\n         ABFieldList = this.AB.Class.ABFieldManager.fieldByKey(\"list\");\n      }\n   }\n\n   ui() {\n      var ids = this.ids;\n      var self = this;\n\n      return {\n         id: ids.component,\n         cols: [\n            {\n               id: ids.kanban,\n               view: \"kanban\",\n               cols: [],\n               userList: {\n                  view: \"menu\",\n                  // yCount: 8,\n                  // scroll: false,\n                  template: '<i class=\"fa fa-user\"></i> #value#',\n                  width: 150,\n                  on: {\n                     onSelectChange: function () {\n                        if (self._updatingOwnerRowId == null)\n                           // get this row id from onAvatarClick event\n                           return;\n\n                        let userId = this.getSelectedId(false);\n                        if (userId == null) return;\n\n                        self.updateOwner(self._updatingOwnerRowId, userId);\n                     },\n                  },\n               },\n               editor: false, // we use side bar\n               users: [],\n               tags: [],\n               data: [],\n               on: {\n                  onListAfterSelect: (itemId, list) => {\n                     this.CurrentDatacollection?.setCursor(itemId);\n                     this.emit(\"select\", itemId);\n\n                     if (itemId) {\n                        let data = $$(ids.kanban).getItem(itemId);\n                        this.FormSide.show(data);\n\n                        $$(ids.resizer)?.show();\n                     } else {\n                        this.FormSide.hide();\n\n                        $$(ids.resizer)?.hide();\n                     }\n                  },\n                  onAfterStatusChange: (rowId, status /*, list */) => {\n                     this.updateStatus(rowId, status);\n                  },\n                  onAvatarClick: (rowId /*, ev, node, list */) => {\n                     // keep this row id for update owner data in .userList\n                     this._updatingOwnerRowId = rowId;\n                  },\n               },\n            },\n            {\n               id: ids.resizer,\n               view: \"resizer\",\n               css: \"bg_gray\",\n               width: 11,\n               hidden: true,\n            },\n            this.FormSide.ui(),\n         ],\n      };\n   }\n\n   init(AB) {\n      this.AB = AB;\n\n      if (this.$kb) webix.extend(this.$kb, webix.ProgressBar);\n\n      this.FormSide.init(AB);\n      this.FormSide.on(\"add\", (newVals) => {\n         this.saveData(newVals);\n      });\n      this.FormSide.on(\"update\", (updateVals) => {\n         this.saveData(updateVals);\n      });\n   }\n\n   get $kb() {\n      if (!this._kb) {\n         this._kb = $$(this.ids.kanban);\n      }\n      return this._kb;\n   }\n\n   kanbanListTemplate() {\n      return {\n         icons: [\n            // { icon: \"mdi mdi-comment\", show: function (obj) { return !!obj.comments }, template: \"#comments.length#\" },\n            {\n               icon: \"fa fa-trash-o\",\n               click: (rowId /*, e */) => {\n                  this.removeCard(rowId);\n               },\n            },\n         ],\n         // avatar template\n         templateAvatar: (obj) => {\n            if (\n               this.CurrentOwnerField &&\n               obj[this.CurrentOwnerField.columnName]\n            ) {\n               return this.CurrentOwnerField.format(obj);\n            } else {\n               return \"<span class='webix_icon fa fa-user'></span>\";\n            }\n         },\n         // template for item body\n         // show item image and text\n         templateBody: (data) => {\n            if (!this.settings.template) {\n               return this.CurrentObject?.displayData(data);\n            }\n            // return our default text template\n            return this.TextTemplate.displayText(data);\n         },\n      };\n   }\n\n   /**\n    * @function hide()\n    *\n    * hide this component.\n    */\n   hide() {\n      $$(this.ids.component)?.hide();\n   }\n\n   /**\n    * @function show()\n    * Show this component.\n    */\n   async show() {\n      var ids = this.ids;\n      $$(ids.component)?.show();\n\n      this.FormSide.hide();\n\n      $$(ids.resizer)?.hide();\n\n      var CurrentObject = this.CurrentObject;\n      if (!CurrentObject) return;\n\n      // Get vertical grouping field and populate to kanban list\n      // NOTE: this field should be the select list type\n      var CurrentVerticalField = CurrentObject.fieldByID(\n         this.settings.verticalGroupingField\n      );\n      if (!CurrentVerticalField) return;\n      this.CurrentVerticalField = CurrentVerticalField;\n\n      let horizontalOptions = [];\n      var CurrentHorizontalField = CurrentObject.fieldByID(\n         this.settings.horizontalGroupingField\n      );\n      this.CurrentHorizontalField = CurrentHorizontalField;\n\n      if (\n         CurrentHorizontalField &&\n         CurrentHorizontalField instanceof ABFieldConnect\n      ) {\n         // Pull horizontal options\n         horizontalOptions = await CurrentHorizontalField.getOptions();\n      }\n\n      // Option format -  { id: \"1543563751920\", text: \"Normal\", hex: \"#4CAF50\" }\n      let verticalOptions = (CurrentVerticalField.settings.options || []).map(\n         (opt) => {\n            // Vertical & Horizontal fields\n            if (CurrentVerticalField && CurrentHorizontalField) {\n               let rows = [],\n                  // [{\n                  //    id: '',\n                  //    text: ''\n                  // }]\n                  horizontalVals = [];\n\n               // pull options of the Horizontal field\n               if (CurrentHorizontalField instanceof ABFieldList) {\n                  // make a copy of the settings.\n                  horizontalVals = (\n                     CurrentHorizontalField.settings.options || []\n                  ).map((o) => o);\n               } else if (CurrentHorizontalField instanceof ABFieldUser) {\n                  horizontalVals = CurrentHorizontalField.getUsers().map(\n                     (u) => {\n                        return {\n                           id: u.id,\n                           text: u.text || u.value,\n                        };\n                     }\n                  );\n               } else if (CurrentHorizontalField instanceof ABFieldConnect) {\n                  horizontalVals = horizontalOptions.map(({ id, text }) => ({\n                     id,\n                     text,\n                  }));\n               }\n\n               horizontalVals.push({\n                  id: null,\n                  text: L(\"Other\"),\n               });\n\n               horizontalVals.forEach((val) => {\n                  let statusOps = {};\n                  statusOps[CurrentVerticalField.columnName] = opt.id;\n                  statusOps[CurrentHorizontalField.columnName] = val.id;\n\n                  // Header\n                  rows.push({\n                     template: val.text,\n                     height: 20,\n                     css: \"progress_header\",\n                  });\n\n                  // Kanban list\n                  rows.push({\n                     view: \"kanbanlist\",\n                     status: statusOps,\n                     type: this.kanbanListTemplate(),\n                  });\n               });\n\n               return {\n                  header: opt.text,\n                  body: {\n                     margin: 0,\n                     rows: rows,\n                  },\n               };\n            }\n            // Vertical field only\n            else if (CurrentVerticalField) {\n               let statusOps = {};\n               statusOps[CurrentVerticalField.columnName] = opt.id;\n\n               return {\n                  header: opt.text,\n                  body: {\n                     view: \"kanbanlist\",\n                     status: statusOps,\n                     type: this.kanbanListTemplate(),\n                  },\n               };\n            }\n         }\n      );\n\n      // Rebuild kanban that contains options\n      // NOTE: webix kanban does not support dynamic vertical list\n      webix.ui(verticalOptions, $$(ids.kanban));\n      $$(ids.kanban).reconstruct();\n\n      // Owner field\n      var CurrentOwnerField = CurrentObject.fieldByID(this.settings.ownerField);\n      this.CurrentOwnerField = CurrentOwnerField;\n      if (CurrentOwnerField) {\n         let $menuUser = $$(ids.kanban).getUserList();\n         $menuUser.clearAll();\n\n         if (CurrentOwnerField instanceof ABFieldUser) {\n            let users = this.AB.Account.userList().map((u) => {\n               return {\n                  id: u.username,\n                  value: u.username,\n               };\n            });\n\n            $menuUser.parse(users);\n         } else if (CurrentOwnerField instanceof ABFieldConnect) {\n            let options = await CurrentOwnerField.getOptions();\n\n            $menuUser.parse(\n               options.map((opt) => {\n                  return {\n                     id: opt.id,\n                     value: opt.text,\n                  };\n               })\n            );\n         }\n      }\n   }\n\n   busy() {\n      this.$kb?.showProgress?.({ type: \"icon\" });\n   }\n\n   ready() {\n      this.$kb?.hideProgress?.();\n   }\n\n   objectLoad(object) {\n      super.objectLoad(object);\n\n      this.TextTemplate.objectLoad(object);\n      this.FormSide.objectLoad(object);\n   }\n\n   /**\n    * @method datacollectionLoad\n    *\n    * @param datacollection {ABDatacollection}\n    */\n   datacollectionLoad(datacollection) {\n      super.datacollectionLoad(datacollection);\n\n      var DC = this.CurrentDatacollection;\n      if (!DC) {\n         DC = datacollection;\n      }\n      if (DC) {\n         DC.bind(this.$kb);\n         var obj = DC.datasource;\n         if (obj) this.objectLoad(obj);\n         return;\n      }\n\n      this.$kb.unbind();\n   }\n\n   async updateStatus(rowId, status) {\n      if (!this.CurrentVerticalField) return;\n\n      // Show loading cursor\n      this.busy();\n\n      let patch = {};\n\n      // update multi-values\n      if (status instanceof Object) {\n         patch = status;\n      }\n      // update single value\n      else {\n         patch[this.CurrentVerticalField.columnName] = status;\n      }\n\n      // update empty value\n      let needRefresh = false;\n      for (let key in patch) {\n         if (patch[key] == null) {\n            patch[key] = \"\";\n\n            // WORKAROUND: if update data is empty, then it will need to refresh\n            // the kanban after update\n            needRefresh = true;\n         }\n      }\n\n      try {\n         await this.CurrentObject?.model().update(rowId, patch);\n\n         this.ready();\n\n         if (needRefresh) this.show();\n\n         // update form data\n         if (this.FormSide.isVisible()) {\n            let data = $$(ids.kanban).getItem(rowId);\n            this.FormSide.refresh(data);\n         }\n      } catch (err) {\n         this.AB.notify.developer(err, {\n            context: \"ABViewKanban:updateStatus(): Error saving item:\",\n            rowId,\n            patch,\n         });\n         this.ready();\n      }\n   }\n\n   async updateOwner(rowId, val) {\n      if (!this.CurrentOwnerField) return;\n\n      // Show loading cursor\n      this.busy();\n\n      let patch = {};\n      patch[this.CurrentOwnerField.columnName] = val;\n\n      try {\n         let updatedRow = await this.CurrentObject?.model().update(\n            rowId,\n            patch\n         );\n\n         // update card\n         this.$kb?.updateItem(rowId, updatedRow);\n\n         // update form data\n         if (this.FormSide.isVisible()) {\n            let data = this.$kb.getItem(rowId);\n            this.FormSide.refresh(data);\n         }\n\n         this.ready();\n      } catch (err) {\n         this.AB.notify.developer(err, {\n            context: \"ABViewKanban:updateOwner(): Error saving item:\",\n            rowId,\n            val,\n         });\n\n         this.ready();\n      }\n   }\n\n   saveData(data) {\n      // update\n      if (data.id && this.$kb.exists(data.id)) {\n         this.$kb.updateItem(data.id, data);\n      }\n      // insert\n      else {\n         this.$kb.add(data);\n      }\n   }\n\n   unselect() {\n      if (this.$kb) {\n         this.$kb.eachList(function (list /*, status*/) {\n            list?.unselect?.();\n         });\n      }\n   }\n\n   addCard() {\n      this.unselect();\n\n      // show the side form\n      this.FormSide.show();\n      $$(this.ids.resizer).show();\n   }\n\n   async removeCard(rowId) {\n      webix.confirm({\n         title: L(\"Remove card\"),\n         text: L(\"Do you want to delete this card?\"),\n         callback: async (result) => {\n            if (!result) return;\n\n            this.busy();\n\n            try {\n               let response = await this.CurrentObject?.model().delete(rowId);\n\n               if (response.numRows > 0) {\n                  this.$kb.remove(rowId);\n               } else {\n                  webix.alert({\n                     text: L(\n                        \"No rows were effected. This does not seem right.\"\n                     ),\n                  });\n               }\n            } catch (err) {\n               this.AB.notify.developer(err, {\n                  message: \"ABViewKanban:removeCard(): Error deleting item:\",\n                  rowId,\n               });\n            }\n            this.ready();\n         },\n      });\n   }\n\n   /**\n    * @method setFields()\n    * Save the current view options.\n    * @param options - {\n    *       verticalGrouping:    {ABField} - required\n    *       horizontalGrouping:  {ABField} - optional\n    *       ownerField:          {ABField} - optional\n    * }\n    */\n   setFields(options) {\n      this.CurrentVerticalField = options.verticalGrouping;\n      this.CurrentHorizontalField = options.horizontalGrouping;\n      this.CurrentOwnerField = options.ownerField;\n   }\n}\n\nexport default class ABViewKanban extends ABViewKanbanCore {\n   //\n   //\tEditor Related\n   //\n\n   /**\n    * @method editorComponent\n    * return the Editor for this UI component.\n    * the editor should display either a \"block\" view or \"preview\" of\n    * the current layout of the view.\n    * @param {string} mode what mode are we in ['block', 'preview']\n    * @return {Component}\n    */\n   editorComponent(App, mode) {\n      var idBase = \"ABViewKanbanEditorComponent\";\n\n      var Kanban = this.component(App, idBase);\n\n      return {\n         ui: Kanban.ui,\n         logic: Kanban.logic,\n         onShow: Kanban.onShow,\n\n         init: () => {\n            // remove id of the component in caching for refresh .bind of the data collection\n            let dv = this.datacollection;\n            if (dv) dv.removeComponent(Kanban.ui.id);\n\n            Kanban.init();\n         },\n      };\n   }\n\n   component(v1App = false) {\n      var component = new ABViewKanBanComponent(this);\n\n      // if this is our v1Interface\n      if (v1App) {\n         var newComponent = component;\n         component = {\n            ui: component.ui(),\n            init: (options, accessLevel) => {\n               return newComponent.init(this.AB);\n            },\n            onShow: (...params) => {\n               return newComponent.onShow?.(...params);\n            },\n         };\n      }\n\n      return component;\n   }\n\n   get linkPageHelper() {\n      if (this.__linkPageHelper == null)\n         this.__linkPageHelper = new ABViewPropertyLinkPage();\n\n      return this.__linkPageHelper;\n   }\n}\n","/*\n * ABViewKanbanFormSidePanel\n *\n * Provide a form area for editing data in the Kan Ban view.\n *\n */\n\nconst ABViewComponent = require(\"./ABViewComponent\").default;\nconst ABViewForm = require(\"./ABViewForm\");\nconst ABViewFormButton = require(\"./ABViewFormButton\");\n\nvar L = null;\n// multilingual Label fn()\n\nmodule.exports = class ABWorkObjectKanBan extends ABViewComponent {\n   constructor(comKanBan, idBase, editFields) {\n      idBase = idBase || `${comKanBan.id}_formSidePanel`;\n      super(idBase, {\n         form: \"\",\n      });\n\n      if (!L) {\n         L = (...params) => {\n            return this.AB.Multilingual.label(...params);\n         };\n      }\n\n      this.AB = comKanBan.AB;\n\n      this.CurrentObjectID = null;\n      // {string}\n      // the ABObject.id of the object we are working with.\n\n      this.editFields = editFields;\n      // {array}\n      // An array of {ABField.id} that determines which fields should show up\n      // in the editor.\n\n      this._mockApp = this.AB.applicationNew({});\n      // {ABApplication}\n      // Any ABViews we create are expected to be in relation to\n      // an ABApplication, so we create a \"mock\" app for our\n      // workspace views to use to display.\n   }\n\n   /**\n    * @method CurrentObject()\n    * A helper to return the current ABObject we are working with.\n    * @return {ABObject}\n    */\n   get CurrentObject() {\n      return this.AB.objectByID(this.CurrentObjectID);\n   }\n\n   ui() {\n      var ids = this.ids;\n\n      // Our webix UI definition:\n      return {\n         id: ids.component,\n         width: 300,\n         hidden: true,\n         rows: [\n            {\n               view: \"toolbar\",\n               css: \"webix_dark\",\n               cols: [\n                  {\n                     view: \"label\",\n                     label: L(\"Edit Record\"),\n                  },\n                  {\n                     view: \"icon\",\n                     icon: \"wxi-close\",\n                     align: \"right\",\n                     click: (/* id */) => {\n                        this.hide();\n                     },\n                  },\n               ],\n            },\n            {\n               view: \"scrollview\",\n               body: {\n                  rows: [\n                     {\n                        id: ids.form,\n                        view: \"form\",\n                        borderless: true,\n                        rows: [],\n                     },\n                  ],\n               },\n            },\n         ],\n      };\n   }\n\n   async init(AB) {\n      this.AB = AB;\n   }\n\n   /**\n    * @method CurrentObject()\n    * A helper to return the current ABObject we are working with.\n    * @return {ABObject}\n    */\n   get CurrentObject() {\n      return this.AB.objectByID(this.CurrentObjectID);\n   }\n\n   objectLoad(object) {\n      this.CurrentObjectID = object.id;\n   }\n\n   hide() {\n      $$(this.ids.component)?.hide();\n\n      this.emit(\"close\");\n   }\n\n   show(data) {\n      $$(this.ids.component)?.show();\n\n      this.refreshForm(data);\n   }\n\n   isVisible() {\n      return $$(this.ids.component)?.isVisible() ?? false;\n   }\n\n   refreshForm(data) {\n      var ids = this.ids;\n      let $formView = $$(ids.form);\n      let CurrentObject = this.CurrentObject;\n\n      if (!CurrentObject || !$formView) return;\n\n      data = data || {};\n\n      let formAttrs = {\n         id: `${this.ids.component}_sideform`,\n         key: ABViewForm.common().key,\n         settings: {\n            columns: 1,\n            labelPosition: \"top\",\n            showLabel: 1,\n            clearOnLoad: 0,\n            clearOnSave: 0,\n            labelWidth: 120,\n            height: 0,\n         },\n      };\n\n      // let form = new ABViewForm(formAttrs, this._mockApp);\n      let form = this.AB.viewNewDetatched(formAttrs);\n\n      form.objectLoad(CurrentObject);\n\n      // Populate child elements\n      CurrentObject.fields().forEach((f, index) => {\n         // if this is one of our .editFields\n         if (!this.editFields || this.editFields.indexOf(f.id) > -1) {\n            form.addFieldToForm(f, index);\n         }\n      });\n\n      // add default button (Save button)\n      form._views.push(\n         new ABViewFormButton(\n            {\n               settings: {\n                  includeSave: true,\n                  includeCancel: false,\n                  includeReset: false,\n               },\n               position: {\n                  y: CurrentObject.fields().length, // yPosition\n               },\n            },\n            this._mockApp,\n            form\n         )\n      );\n\n      // add temp id to views\n      form._views.forEach(\n         (v, index) => (v.id = `${form.id}_${v.key}_${index}`)\n      );\n\n      let formCom = form.component(this.AB._App);\n\n      // Rebuild form\n      webix.ui(formCom.ui.rows.concat({}), $formView);\n      webix.extend($formView, webix.ProgressBar);\n\n      formCom.init(\n         {\n            onBeforeSaveData: () => {\n               // get update data\n               var formVals = form.getFormValues($formView, CurrentObject);\n\n               // validate data\n               if (!form.validateData($formView, CurrentObject, formVals))\n                  return false;\n\n               // show progress icon\n               $formView?.showProgress({ type: \"icon\" });\n\n               if (formVals.id) {\n                  CurrentObject.model()\n                     .update(formVals.id, formVals)\n                     .then((updateVals) => {\n                        this.emit(\"update\", updateVals);\n                        // _logic.callbacks.onUpdateData(updateVals);\n\n                        $formView?.hideProgress({ type: \"icon\" });\n                     })\n                     .catch((err) => {\n                        // TODO : error message\n                        this.AB.notify.developer(err, {\n                           context:\n                              \"ABViewKanbanFormSidePanel:onBeforeSaveData():update(): Error updating value\",\n                           formVals,\n                        });\n                        $formView?.hideProgress({ type: \"icon\" });\n                     });\n               }\n               // else add new row\n               else {\n                  CurrentObject.model()\n                     .create(formVals)\n                     .then((newVals) => {\n                        // _logic.callbacks.onAddData(newVals);\n                        this.emit(\"add\", newVals);\n\n                        $formView?.hideProgress({ type: \"icon\" });\n                     })\n                     .catch((err) => {\n                        // TODO : error message\n                        this.AB.notify.developer(err, {\n                           context:\n                              \"ABViewKanbanFormSidePanel:onBeforeSaveData():.create(): Error creating value\",\n                           formVals,\n                        });\n\n                        $formView?.hideProgress({ type: \"icon\" });\n                     });\n               }\n\n               return false;\n            },\n         },\n         2 /* NOTE: if you can see this KanBan, you should be able to see the side form? */\n      );\n\n      // display data\n      $formView.clear();\n      $formView.parse(data);\n\n      formCom.onShow(data);\n   }\n};\n","const ABViewLabelCore = require(\"../../core/views/ABViewLabelCore\");\n\nconst ABViewLabelPropertyComponentDefaults = ABViewLabelCore.defaultValues();\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABViewLabel extends ABViewLabelCore {\n   // constructor(values, application, parent, defaultValues) {\n   //    super(values, application, parent, defaultValues);\n   // }\n\n   //\n   //\tEditor Related\n   //\n\n   /**\n    * @method editorComponent\n    * return the Editor for this UI component.\n    * the editor should display either a \"block\" view or \"preview\" of\n    * the current layout of the view.\n    * @param {string} mode what mode are we in ['block', 'preview']\n    * @return {Component}\n    */\n   editorComponent(App, mode) {\n      var idBase = \"ABViewLabelEditorComponent\";\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n      };\n\n      var _ui = {\n         type: \"form\",\n         margin: 10,\n         padding: 10,\n         borderless: true,\n         rows: [\n            {\n               id: ids.component,\n               view: \"label\",\n               label: this.text || \"\",\n               align: this.settings.alignment,\n            },\n            {},\n         ],\n      };\n\n      _ui = this.uiFormatting(_ui);\n\n      var _init = (options) => {};\n\n      // var _logic = {\n      // }\n\n      return {\n         ui: _ui,\n         init: _init,\n      };\n   }\n\n   //\n   // Property Editor\n   //\n\n   // static propertyEditorComponent(App) {\n   // \treturn ABViewPropertyComponent.component(App);\n   // }\n\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\n      var commonUI = super.propertyEditorDefaultElements(\n         App,\n         ids,\n         _logic,\n         ObjectDefaults\n      );\n\n      // in addition to the common .label  values, we\n      // ask for:\n      return commonUI.concat([\n         // .text :  The Text displayed for this label\n         {\n            view: \"text\",\n            name: \"text\",\n            label: L(\"Text\"),\n            placeholder: L(\"Text Placeholder\"),\n            // labelWidth: this.AB.UISettings.config().labelWidthMedium,\n         },\n         {\n            view: \"fieldset\",\n            label: L(\"Format Options:\"),\n            body: {\n               type: \"clean\",\n               padding: 10,\n               rows: [\n                  {\n                     view: \"radio\",\n                     name: \"format\",\n                     vertical: true,\n                     value: ABViewLabelPropertyComponentDefaults.format,\n                     options: [\n                        {\n                           id: 0,\n                           value: L(\"normal\"),\n                        },\n                        {\n                           id: 1,\n                           value: L(\"title\"),\n                        },\n                        {\n                           id: 2,\n                           value: L(\"description\"),\n                        },\n                     ],\n                  },\n               ],\n            },\n         },\n         {\n            view: \"fieldset\",\n            label: L(\"Alignment:\"),\n            body: {\n               type: \"clean\",\n               padding: 10,\n               rows: [\n                  {\n                     view: \"radio\",\n                     name: \"alignment\",\n                     vertical: true,\n                     value: ABViewLabelPropertyComponentDefaults.alignment,\n                     options: [\n                        {\n                           id: \"left\",\n                           value: L(\"Left\"),\n                        },\n                        {\n                           id: \"center\",\n                           value: L(\"Center\"),\n                        },\n                        {\n                           id: \"right\",\n                           value: L(\"Right\"),\n                        },\n                     ],\n                  },\n               ],\n            },\n         },\n         {},\n      ]);\n   }\n\n   static propertyEditorPopulate(App, ids, view) {\n      super.propertyEditorPopulate(App, ids, view);\n\n      $$(ids.text).setValue(view.text);\n      $$(ids.format).setValue(view.settings.format);\n      $$(ids.alignment).setValue(view.settings.alignment);\n   }\n\n   static propertyEditorValues(ids, view) {\n      super.propertyEditorValues(ids, view);\n\n      view.text = $$(ids.text).getValue();\n      view.settings.format = $$(ids.format).getValue();\n      view.settings.alignment = $$(ids.alignment).getValue();\n   }\n\n   /*\n    * @component()\n    * return a UI component based upon this view.\n    * @param {obj} App\n    * @return {obj} UI component\n    */\n   component(App) {\n      // get a UI component for each of our child views\n      var viewComponents = [];\n      this.views().forEach((v) => {\n         viewComponents.push(v.component(App));\n      });\n\n      var idBase = `ABViewLabel_${this.id}`;\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n      };\n\n      // an ABViewLabel is a simple Label\n      var _ui = {\n         type: \"form\",\n         padding: 15,\n         borderless: true,\n         rows: [\n            {\n               id: ids.component,\n               view: \"label\",\n               // css: 'ab-component-header ab-ellipses-text',\n               label: this.text || \"*\",\n               align: this.settings.alignment,\n               type: {\n                  height: \"auto\",\n               },\n            },\n         ],\n      };\n      _ui = this.uiFormatting(_ui);\n\n      // make sure each of our child views get .init() called\n      var _init = (options) => {};\n\n      return {\n         ui: _ui,\n         init: _init,\n      };\n   }\n\n   /**\n    * @method uiFormatting\n    * a common routine to properly update the displayed label\n    * UI with the css formatting for the given .settings\n    * @param {obj} _ui the current webix.ui definition\n    * @return {obj} a properly formatted webix.ui definition\n    */\n   uiFormatting(_ui) {\n      // add different css settings based upon it's format\n      // type.\n      switch (parseInt(this.settings.format)) {\n         // normal\n         case 0:\n            _ui.rows[0].css = \"ab-component-label ab-ellipses-text\";\n            break;\n\n         // title\n         case 1:\n            _ui.rows[0].css = \"ab-component-header ab-ellipses-text\";\n            break;\n\n         // description\n         case 2:\n            _ui.rows[0].css = \"ab-component-description ab-ellipses-text\";\n            break;\n      }\n\n      return _ui;\n   }\n};\n","const ABViewContainer = require(\"../../platform/views/ABViewContainer\");\nconst ABViewLayoutCore = require(\"../../core/views/ABViewLayoutCore\");\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABViewLayout extends ABViewLayoutCore {\n   // constructor(values, application, parent, defaultValues) {\n   //    super(values, application, parent, defaultValues);\n   // }\n\n   //\n   //\tEditor Related\n   //\n\n   /**\n    * @method editorComponent\n    * return the Editor for this UI component.\n    * the editor should display either a \"block\" view or \"preview\" of\n    * the current layout of the view.\n    * @param {string} mode what mode are we in ['block', 'preview']\n    * @return {Component}\n    */\n   editorComponent(App, mode) {\n      var idBase = \"ABViewLayoutEditorComponent\";\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n         view: App.unique(`${idBase}_view`),\n      };\n\n      var component = this.component(App);\n\n      /** Logic */\n      var _logic = {\n         templateButton: function (obj) {\n            return `<div class=\"ab-widget-header ab-layout-header\">\n               <i class=\"fa fa-${obj.icon} webix_icon_btn\"></i> ${obj.label}\n               <div class=\"ab-component-tools\">'\n               <i class=\"fa fa-trash ab-component-remove\"></i>\n               <i class=\"fa fa-edit ab-component-edit\"></i>\n               </div></div>`;\n         },\n\n         viewEdit: (e, id, trg) => {\n            var view = this.views(function (v) {\n               return v.id == id;\n            })[0];\n\n            if (!view) return false;\n\n            // NOTE: let webix finish this onClick event, before\n            // calling .populateInterfaceWorkspace() which will replace\n            // the interface elements with the edited view.  (apparently\n            // that causes errors.)\n            setTimeout(() => {\n               App.actions.populateInterfaceWorkspace(view);\n            }, 50);\n\n            e.preventDefault();\n            return false;\n         },\n\n         viewDelete: (e, id, trg) => {\n            var view = this.views(function (v) {\n               return v.id == id;\n            })[0];\n\n            webix.confirm({\n               title: L(\"Delete component\"),\n               text: L(\"Do you want to delete <b>{0}</b>?\", [view.label]),\n               callback: (result) => {\n                  if (result) {\n                     // this.viewDestroy(view)\n                     view.destroy().then(() => {\n                        // refresh the editor interface.\n                        console.error(\n                           \"ABViewLayout: convert App.actions.* to .emit()\"\n                        );\n                        App.actions.populateInterfaceWorkspace(this);\n                     });\n                  }\n               },\n            });\n            e.preventDefault();\n         },\n      };\n\n      /** UI */\n      var _ui = Object.assign(component.ui, {});\n      _ui.type = \"form\";\n\n      this.views().forEach((v, index) => {\n         _ui.cols[index] = {\n            rows: [\n               // Add action buttons\n               {\n                  type: \"template\",\n                  css: \"ab-layout-header\",\n                  height: 30,\n                  template: _logic.templateButton({\n                     icon: v.icon,\n                     label: v.label,\n                  }),\n                  onClick: {\n                     \"ab-component-edit\": (e, id, trg) => {\n                        _logic.viewEdit(e, v.id, trg);\n                     },\n                     \"ab-component-remove\": (e, id, trg) => {\n                        _logic.viewDelete(e, v.id, trg);\n                     },\n                  },\n               },\n               // Preview display here\n               _ui.cols[index],\n               {},\n            ],\n         };\n      });\n\n      if (this.views().length == 0) {\n         _ui.cols[0] = {};\n      }\n\n      return {\n         ui: _ui,\n         init: component.init,\n         logic: _logic,\n      };\n   }\n\n   //\n   // Property Editor\n   //\n\n   /**\n    * @method addView\n    * called when the .propertyEditorDefaultElements() button is clicked.\n    * This method should find the current View instance and call it's .addColumn()\n    * method.\n    */\n   static addView(ids, _logic) {\n      // get current instance and .addColumn()\n      var LayoutView = _logic.currentEditObject();\n      LayoutView.addColumn();\n\n      var includeSubViews = true; // we ask later on down the save if we should save subviews...we do this time\n\n      // trigger a save()\n      this.propertyEditorSave(ids, LayoutView, includeSubViews);\n   }\n\n   /**\n    * @method propertyEditorDefaultElements\n    * return the input form used in the property editor for this View.\n    */\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\n      var commonUI = super.propertyEditorDefaultElements(\n         App,\n         ids,\n         _logic,\n         ObjectDefaults\n      );\n\n      // if I don't create my own propertyEditorComponent, then I need to\n      // create the onClick handler that will cause the current view instance\n      // to create a vew sub view/ column\n      if (!_logic.onClick) {\n         _logic.onClick = () => {\n            this.addView(ids, _logic);\n         };\n      }\n\n      // in addition to the common .label  values, we\n      // ask for:\n      return commonUI.concat([\n         // [button] : add column\n         {\n            view: \"button\",\n            css: \"webix_primary\",\n            value: L(\"Add Column \"),\n            click: _logic.onClick,\n         },\n      ]);\n   }\n\n   /**\n    * @method component()\n    * return a UI component based upon this view.\n    * @param {obj} App\n    * @param {string} idPrefix\n    *\n    * @return {obj} UI component\n    */\n   component(App, idPrefix) {\n      let idBase = `ABViewLayout_${idPrefix || \"\"}${this.id}`;\n      let ids = {\n         component: App.unique(`${idBase}_component`),\n      };\n\n      this.viewComponents = this.viewComponents || {}; // { viewId: viewComponent, ..., viewIdn: viewComponent }\n\n      let _ui = {\n         id: ids.component,\n         view: \"layout\",\n         cols: [],\n      };\n\n      this.views().forEach((v) => {\n         this.viewComponents[v.id] = v.component(App, idPrefix);\n         _ui.cols.push(this.viewComponents[v.id].ui);\n\n         // Trigger 'changePage' event to parent\n         this.eventAdd({\n            emitter: v,\n            eventName: \"changePage\",\n            listener: (pageId) => {\n               this.changePage(pageId);\n            },\n         });\n      });\n\n      // make sure each of our child views get .init() called\n      var _init = (options, accessLevel) => {\n         this.views().forEach((v) => {\n            var component = this.viewComponents[v.id];\n\n            // initial sub-component\n            if (component && component.init) {\n               component.init(options, accessLevel);\n            }\n         });\n      };\n\n      var _onShow = () => {\n         // calll .onShow in child components\n         this.views().forEach((v) => {\n            var component = this.viewComponents[v.id];\n\n            if (component && component.onShow) {\n               component.onShow();\n            }\n         });\n      };\n\n      return {\n         ui: _ui,\n         init: _init,\n         // logic: _logic,\n\n         onShow: _onShow,\n      };\n   }\n};\n","const ABViewListCore = require(\"../../core/views/ABViewListCore\");\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABViewList extends ABViewListCore {\n   // constructor(values, application, parent, defaultValues) {\n   //    super(values, application, parent, defaultValues);\n   // }\n\n   //\n   //\tEditor Related\n   //\n\n   /**\n    * @method editorComponent\n    * return the Editor for this UI component.\n    * the editor should display either a \"block\" view or \"preview\" of\n    * the current layout of the view.\n    * @param {string} mode what mode are we in ['block', 'preview']\n    * @return {Component}\n    */\n   editorComponent(App, mode) {\n      var idBase = \"ABViewListEditorComponent\";\n\n      var ListView = this.component(App, idBase);\n\n      return {\n         ui: ListView.ui,\n         logic: ListView.logic,\n         onShow: ListView.onShow,\n\n         init: () => {\n            // remove id of the component in caching for refresh .bind of the data collection\n            let dv = this.datacollection;\n            if (dv) dv.removeComponent(ListView.ui.id);\n\n            ListView.init();\n         },\n      };\n   }\n\n   //\n   // Property Editor\n   //\n\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\n      var commonUI = super.propertyEditorDefaultElements(\n         App,\n         ids,\n         _logic,\n         ObjectDefaults\n      );\n\n      // _logic functions\n\n      _logic.selectSource = (dcId, oldDcId) => {\n         var currView = _logic.currentEditObject();\n\n         // Update field options in property\n         this.propertyUpdateFieldOptions(ids, currView, dcId);\n      };\n\n      return commonUI.concat([\n         {\n            name: \"datacollection\",\n            view: \"richselect\",\n            label: L(\"Data Source\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n            on: {\n               onChange: _logic.selectSource,\n            },\n         },\n         {\n            name: \"field\",\n            view: \"richselect\",\n            label: L(\"Field\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n         },\n         {\n            view: \"counter\",\n            name: \"height\",\n            label: L(\"Height:\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n         },\n      ]);\n   }\n\n   /**\n    * @method propertyUpdateFieldOptions\n    * Populate fields of object to select list in property\n    *\n    * @param {Object} ids\n    * @param {ABViewForm} view - the current component\n    * @param {string} dvId - id of ABDatacollection\n    */\n   static propertyUpdateFieldOptions(ids, view, dvId) {\n      var datacollection = view.AB.datacollectionByID(dvId);\n      var object = datacollection ? datacollection.datasource : null;\n\n      // Pull field list\n      var fieldOptions = [];\n      if (object != null) {\n         fieldOptions = object.fields().map((f) => {\n            return {\n               id: f.id,\n               value: f.label,\n            };\n         });\n      }\n\n      $$(ids.field).define(\"options\", fieldOptions);\n      $$(ids.field).refresh();\n   }\n\n   static propertyEditorPopulate(App, ids, view) {\n      super.propertyEditorPopulate(App, ids, view);\n\n      var datacollectionId = view.settings.dataviewID\n         ? view.settings.dataviewID\n         : null;\n      var SourceSelector = $$(ids.datacollection);\n\n      // Pull data collections to options\n      var dcOptions = view.propertyDatacollections();\n      SourceSelector.define(\"options\", dcOptions);\n      SourceSelector.define(\"value\", datacollectionId);\n      SourceSelector.refresh();\n\n      this.propertyUpdateFieldOptions(ids, view, datacollectionId);\n\n      $$(ids.field).setValue(view.settings.field);\n      $$(ids.height).setValue(view.settings.height);\n   }\n\n   static propertyEditorValues(ids, view) {\n      super.propertyEditorValues(ids, view);\n\n      view.settings.dataviewID = $$(ids.datacollection).getValue();\n      view.settings.field = $$(ids.field).getValue();\n      view.settings.height = $$(ids.height).getValue();\n      view.settings.height =\n         parseInt(view.settings.height) || ABViewList.defaultValues().height;\n   }\n\n   /*\n    * @component()\n    * return a UI component based upon this view.\n    * @param {obj} App\n    * @return {obj} UI component\n    */\n   component(App) {\n      let baseCom = super.component(App);\n\n      var idBase = \"ABViewListEditorComponent\";\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n      };\n\n      var _ui = {\n         id: ids.component,\n         view: \"dataview\",\n         type: {\n            width: 1000,\n            height: 30,\n         },\n         template: (item) => {\n            var field = this.field();\n            if (!field) return \"\";\n\n            return field.format(item);\n         },\n      };\n\n      // set height or autoHeight\n      if (this.settings.height != 0) {\n         _ui.height = this.settings.height;\n      } else {\n         _ui.autoHeight = true;\n      }\n\n      var _init = (options) => {\n         var dv = this.datacollection;\n         if (!dv) return;\n\n         // bind dc to component\n         dv.bind($$(ids.component));\n         // $$(ids.component).sync(dv);\n      };\n\n      // var _logic = {\n      // }\n\n      return {\n         ui: _ui,\n         init: _init,\n\n         onShow: baseCom.onShow,\n      };\n   }\n};\n","const ABViewMenuCore = require(\"../../core/views/ABViewMenuCore\");\nconst ABViewTab = require(\"./ABViewTab\");\n\nconst ABViewMenuPropertyComponentDefaults = ABViewMenuCore.defaultValues();\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABViewMenu extends ABViewMenuCore {\n   // constructor(values, application, parent, defaultValues) {\n   //    super(values, application, parent, defaultValues);\n   // }\n\n   //\n   //\tEditor Related\n   //\n\n   /**\n    * @method editorComponent\n    * return the Editor for this UI component.\n    * the editor should display either a \"block\" view or \"preview\" of\n    * the current layout of the view.\n    * @param {string} mode what mode are we in ['block', 'preview']\n    * @return {Component}\n    */\n   editorComponent(App, mode) {\n      var idBase = \"ABViewMenuEditorComponent\";\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n         pages: App.unique(`${idBase}_pages`),\n         tree: App.unique(`${idBase}_tree`),\n      };\n\n      var component = this.component(App);\n\n      var menu = component.ui;\n      if (component.ui.elements) {\n         var menuIndex = 0;\n         component.ui.elements.forEach((elem) => {\n            if (elem.view == \"menu\") {\n               menu = component.ui.elements[menuIndex];\n            }\n            menuIndex++;\n         });\n      }\n      menu.id = ids.component;\n\n      var _ui = {\n         type: \"space\",\n         rows: [menu, {}],\n      };\n\n      var _init = (options) => {\n         var Menu = $$(ids.component);\n\n         this.ClearPagesInView(Menu);\n         if (this.settings.order && this.settings.order.length) {\n            this.AddPagesToView(Menu, this.settings.order);\n            // } else if (this.settings.pages && this.settings.pages.length) {\n            //    this.AddPagesToView(Menu, this.settings.pages);\n         }\n      };\n\n      var _logic = {};\n\n      return {\n         ui: _ui,\n         init: _init,\n         logic: _logic,\n      };\n   }\n\n   //\n   // Property Editor\n   //\n\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\n      var commonUI = super.propertyEditorDefaultElements(\n         App,\n         ids,\n         _logic,\n         ObjectDefaults\n      );\n\n      // _logic functions\n\n      _logic.updateTreeDnD = (id, state) => {\n         var currView = _logic.currentEditObject();\n\n         // var curPage = currView.settings.pages.filter((page) => {\n         //    return page.pageId == id || page.tabId == id;\n         // })[0];\n\n         var curPage = currView.application.pages(\n            (page) => page.id == id,\n            true\n         )[0];\n\n         // must not have been a page...lets check tabs\n         if (!curPage) {\n            curPage = currView.application.views(\n               (view) => view.id == id,\n               true\n            )[0];\n         }\n\n         if (state) {\n            let label = currView.getAliasname(curPage);\n            $$(ids.treeDnD).add({\n               id: curPage.id,\n               value: label,\n               type: curPage.type,\n               pageId: curPage.pageId || \"\",\n               tabId: curPage.tabId || \"\",\n            });\n            _logic.reorderPages();\n         } else {\n            // if this item exists in the tree and does not have a submenu you can remove it\n            // otherwise we will ask the user to move its submenu items out before deleting\n            if ($$(ids.treeDnD).exists(id) && !$$(ids.treeDnD).isBranch(id)) {\n               $$(ids.treeDnD).remove(id);\n               _logic.reorderPages();\n            } else if (\n               $$(ids.treeDnD).exists(id) &&\n               $$(ids.treeDnD).isBranch(id)\n            ) {\n               $$(ids.pages).blockEvent();\n               // we don't want to send a toggle event because it triggers saves to the database\n               $$(ids.pages).checkItem(id);\n               webix.message({\n                  text: L(\n                     \"Item comtains submenu, please remove items in submenu before removing.\"\n                  ),\n                  type: \"error\",\n                  expire: 10000,\n               });\n               //resume listening\n               $$(ids.pages).unblockEvent();\n            }\n         }\n      };\n\n      _logic.reorderPages = () => {\n         var currView = _logic.currentEditObject();\n\n         // add a new pages container\n         var pages = [];\n         // loop through tree to reorder pages\n         $$(ids.treeDnD).data.each((obj) => {\n            // find the page in settings that matches the item in the tree\n            // var curPage = currView.settings.pages.filter((page) => {\n            //    return page.pageId == obj.id || page.tabId == obj.id;\n            // })[0];\n\n            var curPage = currView.application.pages(\n               (page) => page.id == obj.id,\n               true\n            )[0];\n\n            // must not have been a page...lets check tabs\n            if (!curPage) {\n               curPage = currView.application.views(\n                  (view) => view.id == obj.id,\n                  true\n               )[0];\n            }\n\n            // put that page in the next possition of the page container\n            pages.push(curPage);\n         });\n\n         var newPageOrder = [];\n         // loop through pages\n         /*\n         {\n            \"pageId\": \"9b8a9458-3ad4-46c1-9ea8-6c96950e161d\",\n            \"tabId\": \"\",\n            \"type\": \"page\",\n            \"isChecked\": \"true\",\n            \"translations\": [\n               {\n                  \"language_code\": \"en\",\n                  \"label\": \"Sub Page 1\",\n                  \"aliasname\": \"Sub Page 1\"\n               }\n            ],\n            \"parent\": \"0\",\n            \"position\": \"0\"\n         }\n         */\n         pages.forEach((page) => {\n            if (page) {\n               var thisPage = {};\n               // get the id of the element we are clicking to\n               var id = page.id;\n               // get the object of the data with the id in the tree view\n               var treeItem = $$(ids.treeDnD).getItem(id);\n               // set the parent element in the page if the treeItem has one\n               thisPage.parent = treeItem.$parent;\n               // store the position so we can put it back in the right spot later\n               thisPage.position = $$(ids.treeDnD).getBranchIndex(id);\n               // store the icon\n               thisPage.icon = treeItem.icon;\n               // store the getAliasname\n               //thisPage.aliasname = currView.getAliasname(page);\n               // store the page types\n               thisPage.type = page.key == \"viewcontainer\" ? \"tab\" : \"page\";\n               if (thisPage.type == \"tab\") {\n                  thisPage.tabId = page.id;\n                  thisPage.pageId = currView.getParentPageId(page);\n               } else {\n                  thisPage.pageId = page.id;\n               }\n               thisPage.isChecked = \"true\";\n               thisPage.translations = page.translations;\n               newPageOrder.push(thisPage);\n            }\n         });\n         currView.settings.order = newPageOrder;\n\n         _logic.onChange();\n         $$(ids.treeDnD).openAll();\n      };\n\n      return commonUI.concat([\n         {\n            name: \"orientation\",\n            view: \"richselect\",\n            label: L(\"Orientation\"),\n            value: ABViewMenuPropertyComponentDefaults.orientation,\n            labelWidth: this.AB.UISettings.config().labelWidthXLarge,\n            options: [\n               {\n                  id: \"x\",\n                  value: L(\"Horizontal\"),\n               },\n               {\n                  id: \"y\",\n                  value: L(\"Vertical\"),\n               },\n            ],\n         },\n         {\n            name: \"buttonStyle\",\n            view: \"richselect\",\n            label: L(\"Button Style\"),\n            value: ABViewMenuPropertyComponentDefaults.buttonStyle,\n            labelWidth: this.AB.UISettings.config().labelWidthXLarge,\n            options: [\n               {\n                  id: \"ab-menu-default\",\n                  value: L(\"Default\"),\n               },\n               {\n                  id: \"ab-menu-link\",\n                  value: L(\"Link\"),\n               },\n            ],\n         },\n         {\n            name: \"menuAlignment\",\n            view: \"richselect\",\n            label: L(\"Menu Alignment\"),\n            value: ABViewMenuPropertyComponentDefaults.menuAlignment,\n            labelWidth: this.AB.UISettings.config().labelWidthXLarge,\n            options: [\n               {\n                  id: \"ab-menu-left\",\n                  value: L(\"Left\"),\n               },\n               {\n                  id: \"ab-menu-center\",\n                  value: L(\"Center\"),\n               },\n               {\n                  id: \"ab-menu-right\",\n                  value: L(\"Right\"),\n               },\n            ],\n         },\n         {\n            name: \"menuInToolbar\",\n            view: \"checkbox\",\n            labelRight: L(\"Put menu in toolbar\"),\n            value: ABViewMenuPropertyComponentDefaults.menuInToolbar,\n            labelWidth: this.AB.UISettings.config().labelWidthCheckbox,\n         },\n         {\n            name: \"toolbarFieldset\",\n            view: \"fieldset\",\n            label: L(\"Toolbar Settings:\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n            body: {\n               view: \"layout\",\n               type: \"clean\",\n               padding: 10,\n               rows: [\n                  {\n                     name: \"menuPadding\",\n                     view: \"counter\",\n                     label: L(\"Toolbar padding\"),\n                     value: ABViewMenuPropertyComponentDefaults.menuPadding,\n                     labelWidth: this.AB.UISettings.config().labelWidthLarge,\n                  },\n                  {\n                     name: \"menuTheme\",\n                     view: \"richselect\",\n                     label: L(\"Toolbar theme\"),\n                     value: ABViewMenuPropertyComponentDefaults.menuTheme,\n                     labelWidth: this.AB.UISettings.config().labelWidthLarge,\n                     options: [\n                        {\n                           id: \"white\",\n                           value: L(\"White (Default)\"),\n                        },\n                        {\n                           id: \"bg_gray\",\n                           value: L(\"Gray\"),\n                        },\n                        {\n                           id: \"webix_dark\",\n                           value: L(\"Dark\"),\n                        },\n                     ],\n                  },\n                  {\n                     name: \"menuPosition\",\n                     view: \"richselect\",\n                     label: L(\"Menu Position\"),\n                     value: ABViewMenuPropertyComponentDefaults.menuPosition,\n                     labelWidth: this.AB.UISettings.config().labelWidthLarge,\n                     options: [\n                        {\n                           id: \"left\",\n                           value: L(\"Left\"),\n                        },\n                        {\n                           id: \"center\",\n                           value: L(\"Center\"),\n                        },\n                        {\n                           id: \"right\",\n                           value: L(\"Right\"),\n                        },\n                     ],\n                  },\n                  {\n                     name: \"menuTextLeft\",\n                     view: \"text\",\n                     label: L(\"Text Left\"),\n                     placeholder: L(\"Place text in left region of toolbar.\"),\n                     labelWidth: this.AB.UISettings.config().labelWidthLarge,\n                     labelPosition: \"top\",\n                  },\n                  {\n                     name: \"menuTextCenter\",\n                     view: \"text\",\n                     label: L(\"Text Center\"),\n                     placeholder: L(\"Place text in center region of toolbar.\"),\n                     labelWidth: this.AB.UISettings.config().labelWidthLarge,\n                     labelPosition: \"top\",\n                  },\n                  {\n                     name: \"menuTextRight\",\n                     view: \"text\",\n                     label: L(\"Text Right\"),\n                     placeholder: L(\"Place text in right region of toolbar.\"),\n                     labelWidth: this.AB.UISettings.config().labelWidthLarge,\n                     labelPosition: \"top\",\n                  },\n               ],\n            },\n         },\n         {\n            name: \"pagesFieldset\",\n            view: \"fieldset\",\n            label: L(\"Page List:\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n            body: {\n               view: \"layout\",\n               type: \"clean\",\n               padding: 10,\n               rows: [\n                  {\n                     name: \"pages\",\n                     view: \"edittree\",\n                     borderless: true,\n                     css: \"transparent\",\n                     // editor: \"inline-text\",\n                     editable: true,\n                     editValue: \"aliasname\",\n                     editor: \"text\",\n                     template: function (item, common) {\n                        return `<div class='ab-page-list-item'>\n                           ${common.icon(item)} ${common.checkbox(\n                           item,\n                           false\n                        )} <div class=\"fa fa-${\n                           item.key == \"viewcontainer\"\n                              ? \"window-maximize\"\n                              : \"file\"\n                        }\"></div> \n                           ${item.label}</div>`;\n                     },\n                     on: {\n                        onItemCheck: function (id, state) {\n                           // trigger to save settings\n                           _logic.onChange();\n                           _logic.updateTreeDnD(id, state);\n                        },\n                        onBeforeEditStart: function (id) {\n                           var item = this.getItem(id);\n                           if (!item.aliasname) {\n                              item.aliasname = item.label;\n                              this.updateItem(item);\n                           }\n                        },\n                        onBeforeEditStop: function (state, editor) {\n                           var item = this.getItem(editor.id);\n                           if (item) {\n                              item.translations.forEach((t) => {\n                                 if (\n                                    t.language_code ==\n                                    App.AB.Multilingual.currentLanguage()\n                                 ) {\n                                    t.aliasname = state.value;\n                                 }\n                              });\n                              item.label = state.value;\n                              this.updateItem(editor.id, item);\n                           }\n\n                           if ($$(ids.treeDnD).exists(editor.id)) {\n                              // we need to update the drag and drop tree item as well so get it first\n                              var treeItem =\n                                 $$(ids.treeDnD).getItem(editor.id) || {};\n                              // change the value (since that is what is being displayed)\n                              treeItem.value = state.value;\n                              // then change the aliasname (since that property controls the final view)\n                              treeItem.aliasname = state.value;\n                              // trigger a save so when we update the preview it has the new data to work with\n                              _logic.onChange();\n                              // tell the tree to update with new alias (this will trigger a page reorder save and the values already saved will be used to rebuild the component)\n                              $$(ids.treeDnD).updateItem(editor.id, treeItem);\n                           }\n                        },\n                     },\n                  },\n               ],\n            },\n         },\n         {\n            name: \"pageOrderFieldset\",\n            view: \"fieldset\",\n            label: L(\"Drag & Drop to Reorder/Click to Add Icon:\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n            body: {\n               view: \"layout\",\n               type: \"clean\",\n               padding: 10,\n               rows: [\n                  {\n                     view: \"edittree\",\n                     borderless: true,\n                     name: \"treeDnD\",\n                     template:\n                        \"{common.icon()} <i class='fa fa-fw fa-#icon#'></i> <span>#value#</span>\",\n                     drag: true,\n                     editable: true,\n                     editValue: \"icon\",\n                     editor: \"combo\",\n                     options: App.icons,\n                     suggest: {\n                        template: \"#value#\",\n                        filter: function (item, value) {\n                           if (\n                              item.value\n                                 .toString()\n                                 .toLowerCase()\n                                 .indexOf(value.toLowerCase()) === 0\n                           )\n                              return true;\n                           return false;\n                        },\n                        body: {\n                           template:\n                              \"<i class='fa fa-fw fa-#value#'></i> #value#\",\n                        },\n                     },\n                     on: {\n                        onBeforeDrop: function (context) {\n                           context.parent = context.target; //drop as child\n                           context.index = -1; //as last child\n                        },\n                        onAfterDrop: function (context, native_event) {\n                           _logic.reorderPages();\n                        },\n                        onDataUpdate: function () {\n                           _logic.reorderPages();\n                        },\n                     },\n                  },\n               ],\n            },\n         },\n      ]);\n   }\n\n   static propertyEditorPopulate(App, ids, view) {\n      super.propertyEditorPopulate(App, ids, view);\n\n      $$(ids.orientation).setValue(\n         view.settings.orientation ||\n            ABViewMenuPropertyComponentDefaults.orientation\n      );\n      $$(ids.buttonStyle).setValue(\n         view.settings.buttonStyle ||\n            ABViewMenuPropertyComponentDefaults.buttonStyle\n      );\n      $$(ids.menuAlignment).setValue(\n         view.settings.menuAlignment ||\n            ABViewMenuPropertyComponentDefaults.menuAlignment\n      );\n      $$(ids.menuInToolbar).setValue(\n         parseInt(view.settings.menuInToolbar) ||\n            ABViewMenuPropertyComponentDefaults.menuInToolbar\n      );\n      $$(ids.menuPadding).setValue(\n         view.settings.menuPadding ||\n            ABViewMenuPropertyComponentDefaults.menuPadding\n      );\n      $$(ids.menuTheme).setValue(\n         view.settings.menuTheme ||\n            ABViewMenuPropertyComponentDefaults.menuTheme\n      );\n      $$(ids.menuPosition).setValue(\n         view.settings.menuPosition ||\n            ABViewMenuPropertyComponentDefaults.menuPosition\n      );\n      if (view.menuTextLeft == \"\" && view.settings.menuTextLeft) {\n         view.menuTextLeft = view.settings.menuTextLeft;\n      }\n      $$(ids.menuTextLeft).setValue(\n         view.menuTextLeft || ABViewMenuPropertyComponentDefaults.menuTextLeft\n      );\n      if (view.menuTextCenter == \"\" && view.settings.menuTextCenter) {\n         view.menuTextCenter = view.settings.menuTextCenter;\n      }\n      $$(ids.menuTextCenter).setValue(\n         view.menuTextCenter ||\n            ABViewMenuPropertyComponentDefaults.menuTextCenter\n      );\n      if (view.menuTextRight == \"\" && view.settings.menuTextRight) {\n         view.menuTextRight = view.settings.menuTextRight;\n      }\n      $$(ids.menuTextRight).setValue(\n         view.menuTextRight || ABViewMenuPropertyComponentDefaults.menuTextRight\n      );\n\n      var pageTree = new webix.TreeCollection();\n      var application = view.application;\n      var currentPage = view.pageParent();\n      var parentPage = currentPage.pageParent();\n      var rootPage = view.pageRoot();\n\n      /**\n       * @method addPage\n       *\n       * @param {ABView} page\n       * @param {integer} index\n       * @param {uuid} parentId\n       */\n      var addPage = function (page, index, parentId) {\n         // update .aliasname and .translations of the page\n         if (view.settings.order && view.settings.order.forEach) {\n            view.settings.order.forEach((localpage) => {\n               if (\n                  (localpage.pageId == page.id && !localpage.id) ||\n                  (parentId &&\n                     localpage.pageId == parentId &&\n                     localpage.tabId == page.id)\n               ) {\n                  page.translations = localpage.translations;\n               }\n            });\n         }\n         let alias = view.getAliasname(page);\n         page.label = alias ? alias : page.label;\n         // add to tree collection\n         pageTree.add(page, index, parentId);\n\n         // add sub-pages\n         var subPages = page.pages ? page.pages() : [];\n         subPages.forEach((childPage, childIndex) => {\n            addPage(childPage, childIndex, page.id);\n         });\n\n         // add tabs\n         page\n            .views((v) => v instanceof ABViewTab)\n            .forEach((tab, tabIndex) => {\n               // tab views\n               tab.views().forEach((tabView, tabViewIndex) => {\n                  // tab items will be below sub-page items\n                  var tIndex = subPages.length + tabIndex + tabViewIndex;\n\n                  addPage(tabView, tIndex, page.id);\n               });\n            });\n      };\n\n      application\n         .pages((p) => rootPage && rootPage.id == p.id, true)\n         .forEach((p, index) => {\n            addPage(p, index);\n         });\n\n      $$(ids.pages).clearAll();\n      $$(ids.pages).data.importData(pageTree);\n      $$(ids.pages).refresh();\n      $$(ids.pages).blockEvent();\n      $$(ids.pages).uncheckAll();\n      $$(ids.pages).unblockEvent();\n      $$(ids.pages).openAll();\n\n      // Select pages\n      // if (view.settings.pages && view.settings.pages.forEach) {\n      // $$(ids.treeDnD).clearAll();\n      // view.settings.pages.forEach((page) => {\n      //    if (page.isChecked) {\n      //       if ($$(ids.pages).exists(page.tabId || page.pageId)) {\n      //          //after this command all events will be ignored\n      //          $$(ids.pages).blockEvent();\n      //          // we don't want to send a toggle event because it triggers saves to the database\n      //          $$(ids.pages).checkItem(page.tabId || page.pageId);\n      //          //resume listening\n      //          $$(ids.pages).unblockEvent();\n      //       }\n      //    }\n      // });\n\n      $$(ids.treeDnD).clearAll();\n      if (view.settings.order && view.settings.order.forEach) {\n         view.settings.order.forEach((page) => {\n            if ($$(ids.pages).exists(page.tabId || page.pageId)) {\n               //after this command all events will be ignored\n               $$(ids.pages).blockEvent();\n               // we don't want to send a toggle event because it triggers saves to the database\n               $$(ids.pages).checkItem(page.tabId || page.pageId);\n               //resume listening\n               $$(ids.pages).unblockEvent();\n            }\n            let label = view.getAliasname(page);\n            $$(ids.treeDnD).add(\n               {\n                  id: page.tabId || page.pageId,\n                  value: label,\n                  type: page.type,\n                  pageId: page.pageId || \"\",\n                  tabId: page.tabId || \"\",\n                  icon: page.icon,\n               },\n               page.position ? parseInt(page.position) : 0,\n               page.parent && page.parent != \"0\" ? page.parent : \"\"\n            );\n         });\n         // } else if (view.settings.pages && view.settings.pages.forEach) {\n         //    view.settings.pages.forEach((page) => {\n         //       if (page.isChecked) {\n         //          let label = view.getAliasname(page);\n         //          $$(ids.treeDnD).add({\n         //             id: page.tabId || page.pageId,\n         //             value: label,\n         //             type: page.type,\n         //             pageId: page.pageId\n         //          });\n         //       }\n         //    });\n      }\n      $$(ids.treeDnD).openAll();\n      // }\n\n      // $$(ids.pagesFieldset).config.height = ($$(ids.pages).count()*28)+18; // Number of pages plus 9px of padding top and bottom\n      $$(ids.pagesFieldset).config.height =\n         $$(ids.pages).count() * 28 + 18 + 40; // Number of pages plus 9px of padding top and bottom\n      $$(ids.pagesFieldset).resize();\n      $$(ids.pageOrderFieldset).config.height =\n         $$(ids.pages).count() * 28 + 18 + 40; // Number of pages plus 9px of padding top and bottom\n      $$(ids.pageOrderFieldset).resize();\n   }\n\n   static propertyEditorValues(ids, view) {\n      super.propertyEditorValues(ids, view);\n\n      view.settings.orientation = $$(ids.orientation).getValue();\n      view.settings.buttonStyle = $$(ids.buttonStyle).getValue();\n      view.settings.menuAlignment = $$(ids.menuAlignment).getValue();\n      view.settings.menuInToolbar = $$(ids.menuInToolbar).getValue();\n      view.settings.menuPadding = $$(ids.menuPadding).getValue();\n      view.settings.menuTheme = $$(ids.menuTheme).getValue();\n      view.settings.menuPosition = $$(ids.menuPosition).getValue();\n      view.menuTextLeft = $$(ids.menuTextLeft).getValue();\n      view.menuTextCenter = $$(ids.menuTextCenter).getValue();\n      view.menuTextRight = $$(ids.menuTextRight).getValue();\n      // Legacy support: clear the old settings when new values are created\n      // otherwise leave them\n      if (view.menuTextLeft.length) {\n         view.settings.menuTextLeft = \"\";\n      }\n      if (view.menuTextCenter.length) {\n         view.settings.menuTextCenter = \"\";\n      }\n      if (view.menuTextCenter.length) {\n         view.settings.menuTextRight = \"\";\n      }\n\n      // var pagesIdList = [];\n      if ($$(ids.pages)) {\n         for (var i = 0; i < $$(ids.pages).data.count(); i++) {\n            var currentPageId = $$(ids.pages).getIdByIndex(i);\n            var currentItem = $$(ids.pages).getItem(currentPageId);\n\n            var type = \"page\",\n               tabId;\n            if (currentItem.key == \"viewcontainer\") {\n               type = \"tab\";\n               tabId = currentPageId;\n               currentPageId = currentItem.pageParent().id;\n            } else {\n               // if we have left the tabs we were looping through we need to reset the tabId\n               tabId = \"\";\n            }\n\n            // let pageInfo = view.settings.pages.filter(\n            //    (p) => p.pageId == currentPageId\n            // )[0];\n\n            let translations = [];\n\n            if (currentItem && currentItem.translations)\n               translations = currentItem.translations;\n            // else if (pageInfo && pageInfo.translations)\n            //    translations = AB.cloneDeep(pageInfo.translations);\n\n            // pagesIdList.push({\n            //    pageId: currentPageId,\n            //    tabId: tabId,\n            //    type: type,\n            //    aliasname: currentItem.aliasname,\n            //    isChecked: currentItem.checked,\n            //    translations: translations\n            // });\n         }\n         // view.settings.pages = pagesIdList;\n         if (view.settings.pages) delete view.settings.pages;\n      }\n   }\n\n   /*\n    * @component()\n    * return a UI component based upon this view.\n    * @param {obj} App\n    * @return {obj} UI component\n    */\n   component(App) {\n      var idBase = `ABMenuLabel_${this.id}`;\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n      };\n\n      var css = \"\";\n\n      if (this.settings.buttonStyle) {\n         css += this.settings.buttonStyle + \" \";\n      } else {\n         css += ABViewMenuPropertyComponentDefaults.buttonStyle + \" \";\n      }\n\n      if (this.settings.menuAlignment) {\n         css += this.settings.menuAlignment + \" \";\n      } else {\n         css += ABViewMenuPropertyComponentDefaults.menuAlignment + \" \";\n      }\n\n      var _ui = {\n         id: ids.component,\n         view: \"menu\",\n         autoheight: true,\n         autowidth: true,\n         datatype: \"json\",\n         css: css,\n         layout:\n            this.settings.orientation ||\n            ABViewMenuPropertyComponentDefaults.orientation,\n         on: {\n            onMenuItemClick: (id, e, node) => {\n               // switch tab view\n               var item = $$(ids.component).getMenuItem(id);\n               if (item.type == \"tab\") {\n                  this.changePage(item.pageId);\n\n                  var redirectPage = this.application.pages(\n                     (p) => p.id == item.pageId,\n                     true\n                  )[0];\n                  if (!redirectPage) return;\n\n                  var tabView = redirectPage.views(\n                     (v) => v.id == item.id,\n                     true\n                  )[0];\n                  if (!tabView) return;\n\n                  var tab = tabView.parent;\n                  if (!tab) return;\n\n                  toggleParent(tab);\n                  // if (!$$(tabView.id) || !$$(tabView.id).isVisible()) {\n                  let showIt = setInterval(function () {\n                     if ($$(tabView.id) && $$(tabView.id).isVisible()) {\n                        clearInterval(showIt);\n                        return;\n                     }\n                     tab.emit(\"changeTab\", tabView.id);\n                  }, 100);\n                  // }\n               }\n               // switch page\n               else {\n                  this.changePage(id);\n               }\n            },\n            onAfterRender: () => {\n               const Menu = $$(ids.component);\n               if (!Menu) return;\n               Menu?.data.each((item) => {\n                  const node = Menu.getItemNode(item.id);\n                  if (!node) return;\n                  // get linked page/tab info so we can use its name in the data-cy\n                  const viewInfo = this.AB.definitionByID(item.id);\n                  node.setAttribute(\n                     \"data-cy\",\n                     `menu-item ${viewInfo?.name} ${item.id} ${this.id}`\n                  );\n               });\n            },\n         },\n         type: {\n            subsign: true,\n         },\n      };\n\n      if (parseInt(this.settings.menuInToolbar)) {\n         var elems = [];\n         var menuIncluded = false;\n\n         // Legacy support: use old settings values if translated values are not set\n         if (this.menuTextLeft == \"\" && this.settings.menuTextLeft) {\n            this.menuTextLeft = this.settings.menuTextLeft;\n         }\n         if (this.menuTextCenter == \"\" && this.settings.menuTextCenter) {\n            this.menuTextCenter = this.settings.menuTextCenter;\n         }\n         if (this.menuTextRight == \"\" && this.settings.menuTextRight) {\n            this.menuTextRight = this.settings.menuTextRight;\n         }\n\n         if (\n            this.settings.menuPosition &&\n            this.settings.menuPosition == \"left\"\n         ) {\n            menuIncluded = true;\n            elems.push(_ui);\n         } else if (this.menuTextLeft && this.menuTextLeft.length) {\n            let width = this.menuTextLeft.length * 15;\n            elems.push({\n               view: \"label\",\n               label: this.menuTextLeft,\n               align: \"left\",\n               width: width,\n            });\n         } else {\n            elems.push({\n               view: \"label\",\n               label: \"\",\n               autowidth: true,\n            });\n         }\n\n         if (\n            this.settings.menuPosition &&\n            this.settings.menuPosition == \"center\"\n         ) {\n            menuIncluded = true;\n            elems.push(_ui);\n         } else if (this.menuTextCenter && this.menuTextCenter.length) {\n            let width = this.menuTextLeft.length * 15;\n            elems.push({});\n            elems.push({\n               view: \"label\",\n               label: this.menuTextCenter,\n               align: \"center\",\n               width: width,\n            });\n            elems.push({});\n         } else {\n            elems.push({\n               view: \"label\",\n               label: \"\",\n               autowidth: true,\n            });\n         }\n\n         if (\n            this.settings.menuPosition &&\n            this.settings.menuPosition == \"right\"\n         ) {\n            menuIncluded = true;\n            elems.push(_ui);\n         } else if (this.menuTextRight && this.menuTextRight.length) {\n            let width = this.menuTextLeft.length * 15;\n            elems.push({\n               view: \"label\",\n               label: this.menuTextRight,\n               align: \"right\",\n               width: width,\n            });\n         } else {\n            elems.push({\n               view: \"label\",\n               label: \"\",\n               autowidth: true,\n            });\n         }\n\n         if (menuIncluded == false) {\n            elems = [_ui];\n         }\n\n         _ui = {\n            view: \"toolbar\",\n            css: this.settings.menuTheme\n               ? this.settings.menuTheme\n               : ABViewMenuPropertyComponentDefaults.menuTheme,\n            padding: this.settings.menuPadding\n               ? parseInt(this.settings.menuPadding)\n               : ABViewMenuPropertyComponentDefaults.menuPadding,\n            elements: elems,\n         };\n      }\n\n      // make sure each of our child views get .init() called\n      var _init = (options) => {\n         var Menu = $$(ids.component);\n         if (Menu) {\n            this.ClearPagesInView(Menu);\n            if (this.settings.order && this.settings.order.length) {\n               this.AddPagesToView(Menu, this.settings.order);\n               // Force onAfterRender to fire\n               Menu.refresh();\n            }\n         }\n      };\n\n      var toggleParent = (element) => {\n         if (!element.parent) return false;\n         var parentElem = element.parent;\n         if (!parentElem.parent) return false;\n         parentElem.parent.emit(\"changeTab\", parentElem.id);\n         toggleParent(parentElem.parent);\n      };\n\n      return {\n         ui: _ui,\n         init: _init,\n      };\n   }\n};\n","const ABViewPageCore = require(\"../../core/views/ABViewPageCore\");\n\nconst ABPropertyComponentDefaults = ABViewPageCore.defaultValues();\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABViewPage extends ABViewPageCore {\n   // constructor(values, application, parent, defaultValues) {\n   //    super(values, application, parent, defaultValues);\n   // }\n\n   //\n   //\tEditor Related\n   //\n\n   /**\n    * @method editorComponent\n    * return the Editor for this UI component.\n    * the editor should display either a \"block\" view or \"preview\" of\n    * the current layout of the view.\n    * @param {string} mode what mode are we in ['block', 'preview']\n    * @return {Component}\n    */\n   editorComponent(App, mode) {\n      var comp = super.editorComponent(App, mode);\n\n      var _init = (options) => {\n         comp.init(options);\n      };\n\n      return {\n         ui: comp.ui,\n         init: _init,\n         logic: comp.logic,\n\n         onShow: comp.onShow,\n      };\n   }\n\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\n      var commonUI = super.propertyEditorDefaultElements(\n         App,\n         ids,\n         _logic,\n         ObjectDefaults\n      );\n\n      _logic.permissionClick = (id, e, node, isRetry = false) => {\n         var List = $$(ids.permissions);\n         var item = List.getItem(id);\n\n         List.showProgress({ type: \"icon\" });\n\n         if (item.markCheckbox) {\n            console.warn(\"ABViewPage:check for depreciated role removal here:\");\n            App.AB.Network.delete({\n               url: \"/app_builder/page/\" + item.action_key + \"/role\",\n               data: {\n                  role_id: item.id,\n               },\n            })\n               .then((data) => {\n                  item.markCheckbox = false;\n                  List.updateItem(id, item);\n                  List.hideProgress();\n               })\n               .catch((err) => {\n                  console.error(err);\n                  if (err.code == \"E_NOACTIONKEY\") {\n                     // if this our second time through, then display an error:\n                     if (isRetry) {\n                        console.error(\"Error Saving Permisison: \", err);\n                        List.hideProgress();\n                        return;\n                     }\n\n                     // in the case where no ActionKey was present,\n                     // we can still mark that this is no longer connected:\n                     item.markCheckbox = false;\n                     List.updateItem(id, item);\n\n                     // Now if we got here, there is an issue with the data in our\n                     // Permissions.  These permissions get created when a Page is\n                     // .created/saved, so let's run through our pages again and\n                     // save() them\n                     var allSaves = [];\n                     item._view.application.pages().forEach((page) => {\n                        allSaves.push(page.save());\n                     });\n\n                     // once that is all done, try this again:\n                     Promise.all(allSaves).then(() => {\n                        _logic.permissionClick(id, e, node, true);\n                     });\n                  }\n               });\n         } else {\n            console.warn(\"ABViewPage:check for depreciated role operation\");\n            App.AB.Network.put({\n               url: \"/app_builder/page/\" + item.action_key + \"/role\",\n               data: {\n                  role_id: item.id,\n               },\n            })\n               .then((data) => {\n                  item.markCheckbox = true;\n                  List.updateItem(id, item);\n                  List.hideProgress();\n               })\n               .catch((err) => {\n                  console.error(err);\n                  if (err.code == \"E_NOACTIONKEY\") {\n                     // if this our second time through, then display an error:\n                     if (isRetry) {\n                        console.error(\"Error Saving Permisison: \", err);\n                        List.hideProgress();\n                        return;\n                     }\n\n                     // Now if we got here, there is an issue with the data in our\n                     // Permissions.  These permissions get created when a Page is\n                     // .created/saved, so let's run through our pages again and\n                     // save() them\n                     var allSaves = [];\n                     item._view.application.pages().forEach((page) => {\n                        allSaves.push(page.save());\n                     });\n\n                     // once that is all done, try this again:\n                     Promise.all(allSaves).then(() => {\n                        _logic.permissionClick(id, e, node, true);\n                     });\n                  }\n               });\n         }\n      };\n\n      // in addition to the common .label  values, we\n      // ask for:\n      return commonUI.concat([\n         {\n            name: \"type\",\n            view: \"richselect\",\n            label: L(\"Type\"),\n            options: [\n               { id: \"page\", value: L(\"Page\") },\n               { id: \"popup\", value: L(\"Popup\") },\n            ],\n            on: {\n               onChange: function (newv, oldv) {\n                  if (newv == \"page\") {\n                     $$(ids.popupSettings).hide();\n                     $$(ids.pageSettings).show();\n                  } else {\n                     $$(ids.popupSettings).show();\n                     $$(ids.pageSettings).hide();\n                  }\n               },\n            },\n         },\n         {\n            view: \"fieldset\",\n            name: \"popupSettings\",\n            label: L(\"Popup Settings\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n            body: {\n               type: \"clean\",\n               padding: 10,\n               rows: [\n                  {\n                     view: \"text\",\n                     name: \"popupWidth\",\n                     placeholder: L(\"Set popup width\"),\n                     label: L(\"Width:\"),\n                     labelWidth: this.AB.UISettings.config().labelWidthLarge,\n                     validate: webix.rules.isNumber,\n                  },\n                  {\n                     view: \"text\",\n                     name: \"popupHeight\",\n                     placeholder: L(\"Set popup height\"),\n                     label: L(\"Height:\"),\n                     labelWidth: this.AB.UISettings.config().labelWidthLarge,\n                     validate: webix.rules.isNumber,\n                  },\n               ],\n            },\n         },\n         {\n            view: \"fieldset\",\n            name: \"pageSettings\",\n            label: L(\"Page Settings\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n            body: {\n               type: \"clean\",\n               padding: 10,\n               rows: [\n                  {\n                     view: \"checkbox\",\n                     name: \"fixedPageWidth\",\n                     labelRight: L(\"Page has fixed width\"),\n                     labelWidth: this.AB.UISettings.config().labelWidthCheckbox,\n                     click: function (id, event) {\n                        if (this.getValue() == 1) {\n                           $$(ids.pageWidth).show();\n                        } else {\n                           $$(ids.pageWidth).hide();\n                        }\n                     },\n                  },\n                  {\n                     view: \"text\",\n                     name: \"pageWidth\",\n                     placeholder: L(\"Set page width\"),\n                     label: L(\"Page width:\"),\n                     labelWidth: this.AB.UISettings.config().labelWidthLarge,\n                  },\n                  {\n                     view: \"richselect\",\n                     name: \"pageBackground\",\n                     label: L(\"Page background:\"),\n                     labelWidth: this.AB.UISettings.config().labelWidthXLarge,\n                     options: [\n                        {\n                           id: \"ab-background-default\",\n                           value: L(\"White (default)\"),\n                        },\n                        {\n                           id: \"ab-background-gray\",\n                           value: L(\"Dark\"),\n                        },\n                        // { \"id\":\"ab-background-texture\", \"value\":L('ab.component.page.pageBackgroundTextured', '*Textured')}\n                     ],\n                  },\n               ],\n            },\n         },\n         {\n            view: \"fieldset\",\n            name: \"pagePermissionPanel\",\n            label: L(\"Page Permissions:\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n            body: {\n               type: \"clean\",\n               padding: 10,\n               rows: [\n                  {\n                     name: \"permissions\",\n                     view: \"list\",\n                     select: false,\n                     minHeight: 200,\n                     template: \"{common.markCheckbox()} #name#\",\n                     type: {\n                        markCheckbox: function (obj) {\n                           return `<span class='check webix_icon fa fa-${\n                              obj.markCheckbox ? \"check-\" : \"\"\n                           }square-o'></span>`;\n                        },\n                     },\n                     on: {\n                        onItemClick: function (id, e, node) {\n                           _logic.permissionClick(id, e, node);\n                        },\n                     },\n                  },\n               ],\n            },\n         },\n      ]);\n   }\n\n   static propertyEditorPopulate(App, ids, view, logic) {\n      super.propertyEditorPopulate(App, ids, view, logic);\n\n      $$(ids.type).setValue(\n         view.settings.type || ABPropertyComponentDefaults.type\n      );\n      $$(ids.popupWidth).setValue(\n         view.settings.popupWidth || ABPropertyComponentDefaults.popupWidth\n      );\n      $$(ids.popupHeight).setValue(\n         view.settings.popupHeight || ABPropertyComponentDefaults.popupHeight\n      );\n      $$(ids.pageWidth).setValue(\n         view.settings.pageWidth || ABPropertyComponentDefaults.pageWidth\n      );\n      $$(ids.fixedPageWidth).setValue(\n         view.settings.fixedPageWidth ||\n            ABPropertyComponentDefaults.fixedPageWidth\n      );\n      $$(ids.pageBackground).setValue(\n         view.settings.pageBackground ||\n            ABPropertyComponentDefaults.pageBackground\n      );\n\n      // Disable select type of page when this page is root\n      if (view.isRoot()) {\n         $$(ids.type).hide();\n\n         // Update permission options\n         $$(ids.pagePermissionPanel).show();\n         this.propertyUpdatePermissionsOptions(ids, view);\n      } else {\n         $$(ids.pagePermissionPanel).hide();\n         $$(ids.type).show();\n      }\n\n      if (view.settings.type == \"popup\") {\n         $$(ids.popupSettings).show();\n         $$(ids.pageSettings).hide();\n      } else {\n         $$(ids.popupSettings).hide();\n         $$(ids.pageSettings).show();\n      }\n\n      if (view.settings.fixedPageWidth == 1) {\n         $$(ids.pageWidth).show();\n      } else {\n         $$(ids.pageWidth).hide();\n      }\n   }\n\n   static propertyEditorValues(ids, view) {\n      super.propertyEditorValues(ids, view);\n\n      view.settings.type = $$(ids.type).getValue();\n      view.settings.popupWidth = $$(ids.popupWidth).getValue();\n      view.settings.popupHeight = $$(ids.popupHeight).getValue();\n      view.settings.pageWidth = $$(ids.pageWidth).getValue();\n      view.settings.fixedPageWidth = $$(ids.fixedPageWidth).getValue();\n      view.settings.pageBackground = $$(ids.pageBackground).getValue();\n   }\n\n   /**\n    * @method propertyUpdatePermissionsOptions\n    * Populate permissions of Ops Portal to select list in property\n    *\n    */\n   static propertyUpdatePermissionsOptions(ids, view) {\n      var action_key = this.getPageActionKey(view);\n      var roles = [];\n\n      var List = $$(ids.permissions);\n\n      // make sure our list has been made into a ProgressBar\n      if (!List.showProgress) {\n         webix.extend(List, webix.ProgressBar);\n      }\n\n      List.clearAll();\n      List.showProgress({ type: \"icon\" });\n\n      console.error(\n         \"ABViewPage: check for depreciated Permission checks here.\"\n      );\n      view.application\n         .getPermissions()\n         .then(function (selected_role_ids) {\n            var app_roles = selected_role_ids;\n\n            view.AB.Network.get({\n               url: \"/app_builder/page/\" + action_key + \"/role\",\n            }).then((data) => {\n               var selectedRoles = [];\n               data.selected.forEach((s) => {\n                  selectedRoles.push(s.id);\n               });\n\n               data.roles.forEach((r) => {\n                  if (app_roles.indexOf(r.id) != -1) {\n                     if (selectedRoles.indexOf(r.id) != -1) {\n                        r.markCheckbox = true;\n                     } else {\n                        r.markCheckbox = false;\n                     }\n                     r.action_key = action_key;\n                     r._view = view;\n                     roles.push(r);\n                  }\n               });\n\n               roles = view.AB.orderBy(roles, \"id\", \"asc\");\n\n               List.parse(roles);\n               List.hideProgress();\n            });\n         })\n         .catch(function (err) {\n            List.hideProgress();\n\n            console.error(err);\n         });\n   }\n\n   /*\n    * @component()\n    * return a UI component based upon this view.\n    * @param {obj} App\n    * @return {obj} UI component\n    */\n   component(App) {\n      var comp = super.component(App);\n      var _ui = {\n         view: \"scrollview\",\n         borderless: true,\n         css:\n            this.settings.pageBackground ||\n            ABPropertyComponentDefaults.pageBackground,\n         body: comp.ui,\n      };\n\n      var _init = (options) => {\n         var accessLevel = this.getUserAccess();\n         comp.init(options, accessLevel);\n      };\n\n      return {\n         ui: _ui,\n         init: _init,\n         logic: comp.logic,\n\n         onShow: comp.onShow,\n      };\n   }\n};\n","const ABViewPivotCore = require(\"../../core/views/ABViewPivotCore\");\nconst ABFieldCalculate = require(\"../dataFields/ABFieldCalculate\");\nconst ABFieldFormula = require(\"../dataFields/ABFieldFormula\");\nconst ABFieldNumber = require(\"../dataFields/ABFieldNumber\");\nconst ABObjectQuery = require(\"../ABObjectQuery\");\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABViewPivot extends ABViewPivotCore {\n   constructor(values, application, parent, defaultValues) {\n      super(values, application, parent, defaultValues);\n   }\n\n   //\n   //\tEditor Related\n   //\n\n   /**\n    * @method editorComponent\n    * return the Editor for this UI component.\n    * the editor should display either a \"block\" view or \"preview\" of\n    * the current layout of the view.\n    * @param {string} mode what mode are we in ['block', 'preview']\n    * @return {Component}\n    */\n   editorComponent(App, mode) {\n      var idBase = \"ABViewPivotEditorComponent\";\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n      };\n\n      var componentBase = this.component(App);\n      var component = App.AB.cloneDeep(componentBase);\n\n      component.ui.id = ids.component;\n      component.ui.readonly = false;\n      component.ui.on = {\n         onBeforeApply: (structure) => {\n            this.settings.structure = structure;\n            this.save();\n         },\n      };\n\n      component.init = (options) => {\n         componentBase.init({\n            componentId: ids.component,\n         });\n      };\n\n      return component;\n   }\n\n   //\n   // Property Editor\n   //\n\n   // static propertyEditorComponent(App) {\n   // \treturn ABViewPropertyComponent.component(App);\n   // }\n\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\n      let commonUI = super.propertyEditorDefaultElements(\n         App,\n         ids,\n         _logic,\n         ObjectDefaults\n      );\n\n      return commonUI.concat([\n         {\n            name: \"datacollection\",\n            view: \"richselect\",\n            label: L(\"Data Source\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n         },\n         {\n            view: \"counter\",\n            name: \"height\",\n            label: L(\"Height:\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n         },\n         {\n            view: \"checkbox\",\n            name: \"removeMissed\",\n            labelRight: L(\"Remove empty data.\"),\n            labelWidth: this.AB.UISettings.config().labelWidthCheckbox,\n         },\n         {\n            view: \"checkbox\",\n            name: \"totalColumn\",\n            labelRight: L(\"Show a total column.\"),\n            labelWidth: this.AB.UISettings.config().labelWidthCheckbox,\n         },\n         {\n            view: \"checkbox\",\n            name: \"separateLabel\",\n            labelRight: L(\"Separate header label.\"),\n            labelWidth: this.AB.UISettings.config().labelWidthCheckbox,\n         },\n         {\n            view: \"checkbox\",\n            name: \"min\",\n            labelRight: L(\n               \"Highlighting of a cell(s) with the least value in a row.\"\n            ),\n            labelWidth: this.AB.UISettings.config().labelWidthCheckbox,\n         },\n         {\n            view: \"checkbox\",\n            name: \"max\",\n            labelRight: L(\n               \"Highlighting of a cell(s) with the biggest value in a row.\"\n            ),\n            labelWidth: this.AB.UISettings.config().labelWidthCheckbox,\n         },\n         {\n            name: \"decimalPlaces\",\n            view: \"counter\",\n            min: 1,\n            label: L(\"Decimal Places\"),\n            labelWidth: this.AB.UISettings.config().labelWidthXLarge,\n         },\n      ]);\n   }\n\n   static propertyEditorPopulate(App, ids, view) {\n      super.propertyEditorPopulate(App, ids, view);\n\n      var datacollectionId = view.settings.dataviewID\n         ? view.settings.dataviewID\n         : null;\n      var SourceSelector = $$(ids.datacollection);\n\n      // Pull data collections to options\n      var dcOptions = view.propertyDatacollections();\n      SourceSelector.define(\"options\", dcOptions);\n      SourceSelector.define(\"value\", datacollectionId);\n      SourceSelector.refresh();\n\n      $$(ids.removeMissed).setValue(view.settings.removeMissed);\n      $$(ids.totalColumn).setValue(view.settings.totalColumn);\n      $$(ids.separateLabel).setValue(view.settings.separateLabel);\n      $$(ids.min).setValue(view.settings.min);\n      $$(ids.max).setValue(view.settings.max);\n      $$(ids.height).setValue(view.settings.height);\n      $$(ids.decimalPlaces).setValue(\n         view.settings.decimalPlaces == null ? 2 : view.settings.decimalPlaces\n      );\n   }\n\n   static propertyEditorValues(ids, view) {\n      super.propertyEditorValues(ids, view);\n\n      view.settings.dataviewID = $$(ids.datacollection).getValue();\n\n      view.settings.removeMissed = $$(ids.removeMissed).getValue();\n      view.settings.totalColumn = $$(ids.totalColumn).getValue();\n      view.settings.separateLabel = $$(ids.separateLabel).getValue();\n      view.settings.min = $$(ids.min).getValue();\n      view.settings.max = $$(ids.max).getValue();\n      view.settings.height = $$(ids.height).getValue();\n   }\n\n   /*\n    * @component()\n    * return a UI component based upon this view.\n    * @param {obj} App\n    * @return {obj} UI component\n    */\n   component(App) {\n      let baseCom = super.component(App);\n\n      var idBase = `ABViewPivot_${this.id}`;\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n      };\n\n      // an ABViewLabel is a simple Label\n      var _ui = {\n         id: ids.component,\n         view: \"pivot\",\n         readonly: true,\n         removeMissed: this.settings.removeMissed,\n         totalColumn: this.settings.totalColumn,\n         separateLabel: this.settings.separateLabel,\n         min: this.settings.min,\n         max: this.settings.max,\n         format: (value) => {\n            let decimalPlaces = this.settings.decimalPlaces || 2;\n            return value && value != \"0\"\n               ? parseFloat(value).toFixed(decimalPlaces || 0)\n               : value;\n         },\n      };\n\n      // make sure each of our child views get .init() called\n      var _init = (options) => {\n         options = options || {};\n         options.componentId = options.componentId || ids.component;\n\n         let dc = this.datacollection;\n         if (!dc) return Promise.resolve();\n\n         let object = dc.datasource;\n         if (!object) return Promise.resolve();\n\n         let $pivotComp = $$(ids.component);\n         if ($pivotComp && object instanceof ABObjectQuery) {\n            let customLabels = {};\n            object.fields().forEach((f) => {\n               customLabels[f.columnName] = f.label;\n            });\n\n            $pivotComp.define(\"fieldMap\", customLabels);\n         }\n\n         let populateData = () => {\n            let data = dc.getData();\n            let dataMapped = data.map((d) => {\n               let result = {};\n\n               object.fields().forEach((f) => {\n                  if (\n                     f instanceof ABFieldCalculate ||\n                     f instanceof ABFieldFormula ||\n                     f instanceof ABFieldNumber\n                  )\n                     result[f.columnName] = d[f.columnName];\n                  else result[f.columnName] = f.format(d);\n               });\n\n               return result;\n            });\n\n            $$(options.componentId).parse(dataMapped);\n\n            // set pivot configuration\n            if (this.settings.structure)\n               $$(options.componentId).setStructure(this.settings.structure);\n         };\n\n         this.eventAdd({\n            emitter: dc,\n            eventName: \"initializedData\",\n            listener: () => {\n               populateData();\n            },\n         });\n\n         return (\n            Promise.resolve()\n               // get data\n               .then(() => {\n                  return new Promise((next, err) => {\n                     switch (dc.dataStatus) {\n                        case dc.dataStatusFlag.notInitial:\n                           dc.loadData();\n                           break;\n                        case dc.dataStatusFlag.initialized:\n                           next();\n                           break;\n                     }\n                  });\n               })\n\n               // populate data into pivot\n               .then(() => {\n                  return new Promise((next, err) => {\n                     populateData();\n                     next();\n                  });\n               })\n         );\n      };\n\n      return {\n         ui: _ui,\n         init: _init,\n\n         onShow: baseCom.onShow,\n      };\n   }\n};\n","const ABViewReportsManagerCore = require(\"../../core/views/ABViewReportsManagerCore\");\n\nmodule.exports = class ABViewReportsManager extends ABViewReportsManagerCore {\n   constructor(values, application, parent, defaultValues) {\n      super(values, application, parent, defaultValues);\n   }\n\n   //\n   //\tEditor Related\n   //\n\n   /**\n    * @method editorComponent\n    * return the Editor for this UI component.\n    * the editor should display either a \"block\" view or \"preview\" of\n    * the current layout of the view.\n    * @param {string} mode what mode are we in ['block', 'preview']\n    * @return {Component}\n    */\n   editorComponent(App, mode) {\n      let idBase = \"ABViewReportsManagerEditorComponent\";\n      let ids = {\n         component: App.unique(`${idBase}_component`),\n      };\n\n      let component = this.component(App);\n\n      component.ui.id = ids.component;\n\n      component.init = (options) => {};\n\n      return component;\n   }\n\n   //\n   // Property Editor\n   //\n\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\n      var commonUI = super.propertyEditorDefaultElements(\n         App,\n         ids,\n         _logic,\n         ObjectDefaults\n      );\n\n      return commonUI.concat([]);\n   }\n\n   static propertyEditorPopulate(App, ids, view) {\n      super.propertyEditorPopulate(App, ids, view);\n   }\n\n   static propertyEditorValues(ids, view) {\n      super.propertyEditorValues(ids, view);\n\n      view.settings.dataviewID = $$(ids.datacollection).getValue();\n   }\n\n   /*\n    * @component()\n    * return a UI component based upon this view.\n    * @param {obj} App\n    * @return {obj} UI component\n    */\n   component(App) {\n      let baseCom = super.component(App);\n\n      let idBase = `ABViewReportManager_${this.id}`;\n      let ids = {\n         component: App.unique(`${idBase}_component`),\n      };\n\n      let compInstance = this;\n\n      let _ui = {\n         id: ids.component,\n         view: \"reports\",\n         toolbar: true,\n         override: new Map([\n            [\n               reports.services.Backend,\n               class MyBackend extends reports.services.Backend {\n                  getModules() {\n                     return Promise.resolve(\n                        compInstance.settings.moduleList || []\n                     );\n                  }\n                  saveModule(id, data) {\n                     id = id || webix.uid();\n                     compInstance.settings.moduleList =\n                        compInstance.settings.moduleList || [];\n\n                     let indexOfModule = null;\n                     let module = compInstance.settings.moduleList.filter(\n                        (m, index) => {\n                           let isExists = m.id == id;\n                           if (isExists) indexOfModule = index;\n\n                           return isExists;\n                        }\n                     )[0];\n\n                     // Update\n                     if (module) {\n                        compInstance.settings.moduleList[indexOfModule] = data;\n                     }\n                     // Add\n                     else {\n                        compInstance.settings.moduleList.push(data);\n                     }\n\n                     return new Promise((resolve, reject) => {\n                        compInstance\n                           .save()\n                           .catch(reject)\n                           .then(() => {\n                              resolve({ id: id });\n                           });\n                     });\n                  }\n                  deleteModule(id) {\n                     compInstance.settings.moduleList =\n                        compInstance.settings.moduleList || [];\n\n                     compInstance.settings.moduleList = compInstance.settings.moduleList.filter(\n                        (m) => m.id != id\n                     );\n\n                     return new Promise((resolve, reject) => {\n                        compInstance\n                           .save()\n                           .catch(reject)\n                           .then(() => {\n                              resolve({ id: id });\n                           });\n                     });\n                  }\n\n                  getModels() {\n                     let reportModels = {};\n\n                     (compInstance.AB.datacollections() || []).forEach((dc) => {\n                        let obj = dc.datasource;\n                        if (!obj) return;\n\n                        let reportFields = _logic.getReportFields(dc);\n\n                        // get connected data collections\n                        // let linkedFields = [];\n                        // (obj.connectFields() || []).forEach((f, index) => {\n                        //    let connectedDcs = compInstance.AB.datacollections(\n                        //       (dColl) =>\n                        //          dColl &&\n                        //          dColl.datasource &&\n                        //          dColl.datasource.id == f.settings.linkObject\n                        //    );\n                        //    (connectedDcs || []).forEach((linkedDc) => {\n                        //       linkedFields.push({\n                        //          id: index + 1,\n                        //          name: linkedDc.label,\n                        //          source: dc.id,\n                        //          target: linkedDc.id\n                        //       });\n                        //    });\n                        // });\n\n                        // // MOCK UP for testing\n                        // let linkedFields = [\n                        //    {\n                        //       id: \"id\",\n                        //       name: \"id\",\n                        //       source: \"39378ee0-38f0-4b9d-a5aa-dddc61137fcd\", // Player\n                        //       target: \"0de82362-4ab5-4f0f-8cfa-d1288d173cba\" // Team\n                        //    }\n                        // ];\n\n                        reportModels[dc.id] = {\n                           id: dc.id,\n                           name: dc.label,\n                           data: reportFields,\n                           refs: [],\n                        };\n                     });\n\n                     return Promise.resolve(reportModels);\n                  }\n\n                  getQueries() {\n                     return Promise.resolve(\n                        compInstance.settings.queryList || []\n                     );\n                  }\n                  saveQuery(id, data) {\n                     id = id || webix.uid();\n                     compInstance.settings.queryList =\n                        compInstance.settings.queryList || [];\n\n                     let indexOfQuery = null;\n                     let query = compInstance.settings.queryList.filter(\n                        (m, index) => {\n                           let isExists = m.id == id;\n                           if (isExists) indexOfQuery = index;\n\n                           return isExists;\n                        }\n                     )[0];\n\n                     // Update\n                     if (query) {\n                        compInstance.settings.queryList[indexOfQuery] = data;\n                     }\n                     // Add\n                     else {\n                        compInstance.settings.queryList.push(data);\n                     }\n\n                     return new Promise((resolve, reject) => {\n                        compInstance\n                           .save()\n                           .catch(reject)\n                           .then(() => {\n                              resolve({ id: id });\n                           });\n                     });\n                  }\n                  deleteQuery(id) {\n                     compInstance.settings.queryList =\n                        compInstance.settings.queryList || [];\n\n                     compInstance.settings.queryList = compInstance.settings.queryList.filter(\n                        (m) => m.id != id\n                     );\n\n                     return new Promise((resolve, reject) => {\n                        compInstance\n                           .save()\n                           .catch(reject)\n                           .then(() => {\n                              resolve({ id: id });\n                           });\n                     });\n                  }\n\n                  getData(config) {\n                     let result = [];\n                     let pullDataTasks = [];\n                     let dcIds = [];\n                     let dcData = {};\n                     let reportFields = [];\n\n                     // pull data of the base and join DCs\n                     dcIds.push(config.data);\n                     (config.joins || []).forEach((j) => {\n                        dcIds.push(j.sid);\n                        dcIds.push(j.tid);\n                     });\n                     dcIds = compInstance.AB.uniq(dcIds);\n                     dcIds.forEach((dcId) => {\n                        pullDataTasks.push(\n                           new Promise((next, bad) => {\n                              _logic\n                                 .getData(dcId)\n                                 .catch(bad)\n                                 .then((data) => {\n                                    dcData[dcId] = data || [];\n                                    next();\n                                 });\n                           })\n                        );\n                     });\n\n                     dcIds.forEach((dcId) => {\n                        let dataCol = compInstance.AB.datacollectionByID(dcId);\n                        if (!dataCol) return;\n\n                        reportFields = reportFields.concat(\n                           _logic.getReportFields(dataCol).map((f) => {\n                              // change format of id to match the report widget\n                              f.id = `${dcId}.${f.id}`; // dc_id.field_id\n                              return f;\n                           })\n                        );\n                     });\n\n                     return (\n                        Promise.resolve()\n                           .then(() => Promise.all(pullDataTasks))\n                           .then(\n                              () =>\n                                 new Promise((next, bad) => {\n                                    // the data result equals data of the base DC\n                                    result = dcData[config.data] || [];\n\n                                    // no join settings\n                                    if (!config.joins || !config.joins.length) {\n                                       return next();\n                                    }\n\n                                    (config.joins || []).forEach((j) => {\n                                       let sourceDc = compInstance.AB.datacollectionByID(\n                                          j.sid\n                                       );\n                                       if (!sourceDc) return;\n\n                                       let sourceObj = sourceDc.datasource;\n                                       if (!sourceObj) return;\n\n                                       let targetDc = compInstance.AB.datacollectionByID(\n                                          j.tid\n                                       );\n                                       if (!targetDc) return;\n\n                                       let targetObj = targetDc.datasource;\n                                       if (!targetObj) return;\n\n                                       let sourceLinkField = sourceObj.fieldByID(\n                                          j.sf\n                                       );\n                                       let targetLinkField = targetObj.fieldByID(\n                                          j.tf\n                                       );\n                                       if (!sourceLinkField && !targetLinkField)\n                                          return;\n\n                                       let sourceData = dcData[j.sid] || [];\n                                       let targetData = dcData[j.tid] || [];\n                                       sourceData.forEach((sData) => {\n                                          targetData.forEach((tData) => {\n                                             let sVal =\n                                                sData[\n                                                   sourceLinkField\n                                                      ? `${j.sid}.${sourceLinkField.columnName}.id`\n                                                      : `${j.sid}.id`\n                                                ] || [];\n\n                                             let tVal =\n                                                tData[\n                                                   targetLinkField\n                                                      ? `${j.tid}.${targetLinkField.columnName}.id`\n                                                      : `${j.tid}.id`\n                                                ] || [];\n\n                                             if (!Array.isArray(sVal))\n                                                sVal = [sVal];\n                                             if (!Array.isArray(tVal))\n                                                tVal = [tVal];\n\n                                             // Add joined row to the result array\n                                             let matchedVal = sVal.filter(\n                                                (val) => tVal.indexOf(val) > -1\n                                             );\n                                             if (\n                                                matchedVal &&\n                                                matchedVal.length\n                                             ) {\n                                                let updateRows =\n                                                   result.filter(\n                                                      (r) =>\n                                                         r[`${j.sid}.id`] ==\n                                                            sData[\n                                                               `${j.sid}.id`\n                                                            ] &&\n                                                         r[`${j.tid}.id`] ==\n                                                            null\n                                                   ) || [];\n\n                                                if (\n                                                   updateRows &&\n                                                   updateRows.length\n                                                ) {\n                                                   (updateRows || []).forEach(\n                                                      (r) => {\n                                                         for (let key in tData) {\n                                                            if (key != \"id\")\n                                                               r[key] =\n                                                                  tData[key];\n                                                         }\n                                                      }\n                                                   );\n                                                } else {\n                                                   result.push(\n                                                      Object.assign(\n                                                         compInstance.AB.cloneDeep(\n                                                            sData\n                                                         ),\n                                                         compInstance.AB.cloneDeep(\n                                                            tData\n                                                         )\n                                                      )\n                                                   );\n                                                }\n                                             }\n                                          });\n                                       });\n                                    });\n\n                                    next();\n                                 })\n                           )\n                           // filter & sort\n                           .then(\n                              () =>\n                                 new Promise((next, bad) => {\n                                    let queryVal;\n                                    try {\n                                       queryVal = JSON.parse(\n                                          config.query || \"{}\"\n                                       );\n                                    } catch (err) {\n                                       bad(err);\n                                    }\n\n                                    if (\n                                       queryVal &&\n                                       queryVal.rules &&\n                                       queryVal.rules.length\n                                    ) {\n                                       queryVal.rules.forEach((r) => {\n                                          if (!r || !r.type || !r.condition)\n                                             return;\n\n                                          switch (r.type) {\n                                             case \"date\":\n                                             case \"datetime\":\n                                                // Convert string to Date object\n                                                if (r.condition.filter) {\n                                                   if (\n                                                      this.AB.isString(\n                                                         r.condition.filter\n                                                      )\n                                                   ) {\n                                                      r.condition.filter = this.AB.toDate(\n                                                         r.condition.filter\n                                                      );\n                                                   }\n\n                                                   if (\n                                                      r.condition.filter\n                                                         .start &&\n                                                      this.AB.isString(\n                                                         r.condition.filter\n                                                            .start\n                                                      )\n                                                   ) {\n                                                      r.condition.filter.start = this.AB.toDate(\n                                                         r.condition.filter\n                                                            .start\n                                                      );\n                                                   }\n\n                                                   if (\n                                                      r.condition.filter.end &&\n                                                      this.AB.isString(\n                                                         r.condition.filter.end\n                                                      )\n                                                   ) {\n                                                      r.condition.filter.end = this.AB.toDate(\n                                                         r.condition.filter.end\n                                                      );\n                                                   }\n                                                }\n                                                break;\n                                          }\n                                       });\n                                    }\n\n                                    // create a new query widget to get the filter function\n                                    let filterElem = webix.ui({\n                                       view: \"query\",\n                                       fields: reportFields,\n                                       value: queryVal,\n                                    });\n\n                                    // create a new data collection and apply the query filter\n                                    let tempDc = new webix.DataCollection();\n                                    tempDc.parse(result);\n\n                                    // filter\n                                    let filterFn;\n                                    try {\n                                       filterFn = filterElem.getFilterFunction();\n                                    } catch (error) {\n                                       // continue regardless of error\n                                    }\n                                    if (filterFn) tempDc.filter(filterFn);\n\n                                    // sorting\n                                    (config.sort || []).forEach((sort) => {\n                                       if (sort.id)\n                                          tempDc.sort({\n                                             as: \"string\",\n                                             dir: sort.mod || \"asc\",\n                                             by: `#${sort.id}#`,\n                                          });\n                                    });\n\n                                    result = tempDc.serialize();\n\n                                    // clear\n                                    filterElem.destructor();\n                                    tempDc.destructor();\n\n                                    // group by\n                                    if (config.group && config.group.length) {\n                                       (config.group || []).forEach(\n                                          (groupProp) => {\n                                             result = _(result).groupBy(\n                                                groupProp\n                                             );\n                                          }\n                                       );\n\n                                       result = result\n                                          .map((groupedData, id) => {\n                                             let groupedResult = {};\n\n                                             (config.columns || []).forEach(\n                                                (col) => {\n                                                   let agg = col.split(\".\")[0];\n                                                   let rawCol = col.replace(\n                                                      /sum.|avg.|count.|max.|min./g,\n                                                      \"\"\n                                                   );\n\n                                                   switch (agg) {\n                                                      case \"sum\":\n                                                         groupedResult[\n                                                            col\n                                                         ] = compInstance.AB.sumBy(\n                                                            groupedData,\n                                                            rawCol\n                                                         );\n                                                         break;\n                                                      case \"avg\":\n                                                         groupedResult[\n                                                            col\n                                                         ] = compInstance.AB.meanBy(\n                                                            groupedData,\n                                                            rawCol\n                                                         );\n                                                         break;\n                                                      case \"count\":\n                                                         groupedResult[col] = (\n                                                            groupedData || []\n                                                         ).length;\n                                                         break;\n                                                      case \"max\":\n                                                         groupedResult[col] =\n                                                            (compInstance.AB.maxBy(\n                                                               groupedData,\n                                                               rawCol\n                                                            ) || {})[rawCol] ||\n                                                            \"\";\n                                                         break;\n                                                      case \"min\":\n                                                         groupedResult[col] =\n                                                            (compInstance.AB.minBy(\n                                                               groupedData,\n                                                               rawCol\n                                                            ) || {})[rawCol] ||\n                                                            \"\";\n                                                         break;\n                                                      default:\n                                                         groupedResult[col] =\n                                                            groupedData[0][col];\n                                                         break;\n                                                   }\n                                                }\n                                             );\n\n                                             return groupedResult;\n                                          })\n                                          .value();\n                                    }\n\n                                    next();\n                                 })\n                           )\n                           .then(() => Promise.resolve(result))\n                     );\n                  }\n                  getOptions(fields) {\n                     // TODO\n                     // [\n                     //    {\"id\":\"1\",\"value\":\"South\"},\n                     //    {\"id\":\"2\",\"value\":\"North\"},\n                     //    // other options\n                     //  ]\n                     return Promise.resolve([]);\n                  }\n                  getFieldData(fieldId) {\n                     // TODO\n                     return Promise.resolve([]);\n                  }\n               },\n            ],\n            [\n               reports.views.table,\n               class MyTable extends reports.views.table {\n                  // NOTE: fix format of date column type\n                  GetColumnConfig(a) {\n                     if (a.type === \"date\") {\n                        return {\n                           id: a.id,\n                           header:\n                              !a.meta.header || a.meta.header === \"none\"\n                                 ? a.meta.name || a.name\n                                 : [\n                                      a.meta.name || a.name,\n                                      {\n                                         content:\n                                            a.header === \"text\"\n                                               ? \"textFilter\"\n                                               : \"richSelectFilter\",\n                                      },\n                                   ],\n                           type: a.type,\n                           sort: \"date\",\n                           width: a.width || 200,\n                           format: (val) => {\n                              // check valid date\n                              if (val && val.getTime && !isNaN(val.getTime())) {\n                                 return webix.i18n.dateFormatStr(val);\n                              } else {\n                                 return \"\";\n                              }\n                           },\n                        };\n                     } else {\n                        return super.GetColumnConfig(a);\n                     }\n                  }\n               },\n            ],\n         ]),\n      };\n\n      // make sure each of our child views get .init() called\n      let _init = (options) => {\n         options = options || {};\n         options.componentId = options.componentId || ids.component;\n\n         return Promise.resolve();\n      };\n\n      let _logic = {\n         getReportFields: (dc) => {\n            if (!dc) return [];\n\n            let object = dc.datasource;\n            if (!object) return [];\n\n            let fields = [];\n\n            object.fields().forEach((f) => {\n               let columnFormat = f.columnHeader();\n\n               fields.push({\n                  id: f.columnName,\n                  name: f.label,\n                  filter: f.fieldIsFilterable(),\n                  edit: false,\n                  type: columnFormat.editor || \"text\",\n                  format: columnFormat.format,\n                  options: columnFormat.options,\n                  ref: \"\",\n                  key: false,\n                  show: true,\n                  abField: f,\n               });\n\n               if (f.isConnection && f.settings.isSource) {\n                  let linkedDcs = compInstance.AB.datacollectionByID(f.settings.linkObject);\n                  (linkedDcs || []).forEach((linkDc) => {\n                     fields.push({\n                        id: f.id,\n                        name: f.label,\n                        filter: false,\n                        edit: false,\n                        type: \"reference\",\n                        ref: linkDc.id,\n                        key: false,\n                        show: false,\n                     });\n                  });\n               }\n            });\n\n            return fields;\n         },\n\n         getData: (datacollectionId) => {\n            let datacollection = compInstance.AB.datacollectionByID(\n               datacollectionId\n            );\n            if (!datacollection) return Promise.resolve([]);\n\n            let object = datacollection.datasource;\n            if (!object) return Promise.resolve([]);\n\n            return Promise.resolve()\n               .then(\n                  () =>\n                     new Promise((next, bad) => {\n                        if (\n                           datacollection.dataStatus ==\n                           datacollection.dataStatusFlag.notInitial\n                        ) {\n                           datacollection\n                              .loadData()\n                              .catch(bad)\n                              .then(() => next());\n                        } else {\n                           next();\n                        }\n                     })\n               )\n               .then(\n                  () =>\n                     new Promise((next, bad) => {\n                        let reportFields = _logic.getReportFields(\n                           datacollection\n                        );\n\n                        let reportData = [];\n                        let rawData = datacollection.getData();\n                        (rawData || []).forEach((row) => {\n                           let reportRow = { id: row.id };\n                           reportRow[`${datacollection.id}.id`] = row.id;\n\n                           object.fields().forEach((field) => {\n                              let columnName = field.columnName;\n                              let col = `${datacollection.id}.${columnName}`;\n\n                              reportRow[col] = field\n                                 ? field.format(row)\n                                 : row[columnName];\n\n                              // FK value of the connect field\n                              if (field && field.isConnection) {\n                                 if (Array.isArray(row[columnName])) {\n                                    reportRow[`${col}.id`] = row[\n                                       columnName\n                                    ].map(\n                                       (link) =>\n                                          link[field.datasourceLink.PK()] ||\n                                          link.id ||\n                                          link\n                                    );\n                                 } else if (row[columnName]) {\n                                    reportRow[`${col}.id`] =\n                                       row[columnName][\n                                          field.datasourceLink.PK()\n                                       ] ||\n                                       row[columnName].id ||\n                                       row[columnName];\n                                 }\n                              }\n\n                              let rField = reportFields.filter(\n                                 (f) => f.id == columnName\n                              )[0];\n                              if (!rField) return;\n\n                              switch (rField.type) {\n                                 case \"text\":\n                                 case \"reference\":\n                                    reportRow[col] = (\n                                       reportRow[col] || \"\"\n                                    ).toString();\n                                    break;\n                                 case \"number\":\n                                    reportRow[col] = parseFloat(\n                                       (reportRow[col] || 0)\n                                          .toString()\n                                          .replace(/[^\\d.-]/g, \"\")\n                                    );\n                                    break;\n                                 case \"date\":\n                                 case \"datetime\":\n                                    reportRow[col] = row[columnName];\n                                    if (reportRow[col]) {\n                                       if (!(reportRow[col] instanceof Date)) {\n                                          reportRow[\n                                             col\n                                          ] = compInstance.AB.toDate(\n                                             row[columnName]\n                                          );\n                                       }\n                                    } else {\n                                       reportRow[col] = \"\";\n                                    }\n                                    break;\n                              }\n                           });\n                           reportData.push(reportRow);\n                        });\n\n                        return next(reportData);\n                     })\n               );\n         },\n      };\n\n      return {\n         ui: _ui,\n         init: _init,\n         logic: _logic,\n\n         onShow: baseCom.onShow,\n      };\n   }\n};\n","const ABViewTabCore = require(\"../../core/views/ABViewTabCore\");\n\nconst ABViewTabPropertyComponentDefaults = ABViewTabCore.defaultValues();\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABViewTab extends ABViewTabCore {\n   // constructor(values, application, parent, defaultValues) {\n   //    super(values, application, parent, defaultValues);\n   // }\n\n   //\n   //\tEditor Related\n   //\n\n   /**\n    * @method editorComponent\n    * return the Editor for this UI component.\n    * the editor should display either a \"block\" view or \"preview\" of\n    * the current layout of the view.\n    * @param {string} mode what mode are we in ['block', 'preview']\n    * @return {Component}\n    */\n   editorComponent(App, mode) {\n      var idBase = \"ABViewTabEditorComponent\";\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n         view: App.unique(`${idBase}_view`),\n      };\n      var component = this.component(App);\n\n      var tabElem = component.ui;\n\n      if (tabElem.rows) {\n         tabElem.rows[0].id = ids.component;\n         tabElem.rows[0].tabbar = {\n            height: 60,\n            type: \"bottom\",\n            css: this.settings.darkTheme ? \"webix_dark\" : \"\",\n            on: {\n               onItemClick: (id, e) => {\n                  var tabId = $$(ids.component).getValue(),\n                     tab = this.views((v) => v.id == tabId)[0],\n                     currIndex = this._views.findIndex((v) => v.id == tabId);\n\n                  // Rename\n                  if (e.target.classList.contains(\"rename\")) {\n                     ABViewTab.popupShow(tab);\n                  }\n                  // Reorder back\n                  else if (e.target.classList.contains(\"move-back\")) {\n                     this.viewReorder(tabId, currIndex - 1);\n\n                     // refresh editor view\n                     this.emit(\"properties.updated\", this);\n                  }\n                  // Reorder next\n                  else if (e.target.classList.contains(\"move-next\")) {\n                     this.viewReorder(tabId, currIndex + 1);\n\n                     // refresh editor view\n                     this.emit(\"properties.updated\", this);\n                  }\n               },\n            },\n         };\n\n         // Add action buttons\n         if (tabElem.rows[0].cells && tabElem.rows[0].cells.length > 0) {\n            tabElem.rows[0].cells.forEach((tabView) => {\n               // Add 'move back' icon\n               tabView.header =\n                  '<i class=\"fa fa-caret-left move-back ab-tab-back\"></i>' +\n                  tabView.header;\n               // Add 'edit' icon\n               tabView.header +=\n                  ' <i class=\"fa fa-pencil-square rename ab-tab-edit\"></i>';\n               // Add 'move next' icon\n               tabView.header +=\n                  ' <i class=\"fa fa-caret-right move-next ab-tab-next\"></i>';\n            });\n         }\n      } else if (tabElem.cols) {\n         // if we detect colums we are using sidebar and need to format the onItemClick event differently\n         var viewIndex = 1;\n         var tabIndex = 0;\n\n         if (this.settings.sidebarPos == \"right\") {\n            // the sidebar is in the second column now so we need to reference it properly\n            viewIndex = 0;\n            tabIndex = 1;\n         }\n\n         tabElem.cols[viewIndex].id = ids.component;\n         tabElem.cols[tabIndex].on = {\n            onItemClick: (id, e) => {\n               var tabId = id.replace(\"_menu\", \"\"),\n                  tab = this.views((v) => v.id == tabId)[0],\n                  currIndex = this._views.findIndex((v) => v.id == tabId);\n\n               component.onShow(tabId);\n\n               // Rename\n               if (e.target.classList.contains(\"rename\")) {\n                  ABViewTab.popupShow(tab);\n               }\n               // Reorder back\n               else if (e.target.classList.contains(\"move-back\")) {\n                  this.viewReorder(tabId, currIndex - 1);\n\n                  // refresh editor view\n                  this.emit(\"properties.updated\", this);\n               }\n               // Reorder next\n               else if (e.target.classList.contains(\"move-next\")) {\n                  this.viewReorder(tabId, currIndex + 1);\n\n                  // refresh editor view\n                  this.emit(\"properties.updated\", this);\n               }\n            },\n         };\n\n         // Add action buttons\n         if (\n            tabElem.cols[tabIndex].data &&\n            tabElem.cols[tabIndex].data.length > 0\n         ) {\n            tabElem.cols[tabIndex].data.forEach((sidebarItem) => {\n               // Add 'edit' icon\n               sidebarItem.value =\n                  sidebarItem.value +\n                  ' <i class=\"fa fa-pencil-square rename ab-tab-edit\"></i>';\n               // Add 'move up' icon\n               sidebarItem.value +=\n                  '<i class=\"fa fa-caret-up move-back ab-tab-up\"></i>';\n               // Add 'move down' icon\n               sidebarItem.value +=\n                  ' <i class=\"fa fa-caret-down move-next ab-tab-down\"></i>';\n            });\n         }\n      }\n\n      var _ui = {\n         rows: [tabElem],\n      };\n\n      var _init = (options) => {\n         component.init(options);\n\n         // Add actions buttons - Edit , Delete\n         if ($$(ids.component) && $$(ids.component).config.view == \"tabview\") {\n            webix.ui({\n               container: $$(ids.component).getMultiview().$view,\n               view: \"template\",\n               autoheight: false,\n               height: 1,\n               width: 0,\n               template:\n                  '<div class=\"ab-component-tools ab-layout-view ab-tab-tools\">' +\n                  '<i class=\"fa fa-trash ab-component-remove\"></i>' +\n                  '<i class=\"fa fa-edit ab-component-edit\"></i>' +\n                  \"</div>\",\n               onClick: {\n                  \"ab-component-edit\": function (e, id, trg) {\n                     _logic.tabEdit(e, id, trg);\n                  },\n                  \"ab-component-remove\": function (e, id, trg) {\n                     _logic.tabRemove(e, id, trg);\n                  },\n               },\n            });\n         } else if (\n            $$(ids.component) &&\n            $$(ids.component).config.view == \"multiview\"\n         ) {\n            webix.ui({\n               container: $$(ids.component).$view,\n               view: \"template\",\n               autoheight: false,\n               height: 1,\n               width: 0,\n               template:\n                  '<div class=\"ab-component-tools ab-layout-view ab-tab-tools\">' +\n                  '<i class=\"fa fa-trash ab-component-remove\"></i>' +\n                  '<i class=\"fa fa-edit ab-component-edit\"></i>' +\n                  \"</div>\",\n               onClick: {\n                  \"ab-component-edit\": function (e, id, trg) {\n                     _logic.tabEdit(e, id, trg);\n                  },\n                  \"ab-component-remove\": function (e, id, trg) {\n                     _logic.tabRemove(e, id, trg);\n                  },\n               },\n            });\n         }\n\n         component.onShow();\n      };\n\n      var _logic = {\n         // templateBlock: (tab) => {\n         // \tvar _template = [\n         // \t\t'<div class=\"ab-component-in-page\">',\n         // \t\t'<div id=\"' + ids.view + '_#objID#\" >',\n         // \t\t'<i class=\"fa fa-#icon#\"></i>',\n         // \t\t' #label#',\n         // \t\t'</div>',\n         // \t\t'</div>'\n         // \t].join('');\n\n         // \treturn _template\n         // \t\t.replace('#objID#', tab.id)\n         // \t\t.replace('#icon#', tab.icon)\n         // \t\t.replace('#label#', tab.label);\n         // },\n\n         tabEdit: (e, nodeId, trg) => {\n            var tabId = $$(ids.component).getValue();\n            var view = this.views(function (v) {\n               return v.id == tabId;\n            })[0];\n\n            if (!view) return false;\n\n            // NOTE: let webix finish this onClick event, before\n            // calling .populateInterfaceWorkspace() which will replace\n            // the interface elements with the edited view.  (apparently\n            // that causes errors.)\n            setTimeout(() => {\n               console.error(\"ABViewTab: refactor .actions to .emit\");\n               App.actions.populateInterfaceWorkspace(view);\n            }, 50);\n\n            e.preventDefault();\n            return false;\n         },\n\n         tabRemove: (e, nodeId, trg) => {\n            var tabId = $$(ids.component).getValue();\n            var deletedView = this.views((v) => v.id == tabId)[0];\n            if (deletedView) {\n               webix.confirm({\n                  title: L(\"Delete tab\"),\n                  text: L(\"Do you want to delete <b>{0}</b>?\", [\n                     deletedView.label,\n                  ]),\n                  callback: (result) => {\n                     if (result) {\n                        // this.viewDestroy(deletedView);\n                        deletedView.destroy();\n\n                        // remove tab option\n                        $$(ids.component).removeView(tabId);\n                     }\n                  },\n               });\n            }\n\n            e.preventDefault();\n            return false;\n         },\n      };\n\n      return {\n         ui: _ui,\n         init: _init,\n         logic: _logic,\n      };\n   }\n\n   //\n   // Property Editor\n   //\n\n   static addTab(ids, _logic, tabName, tabIcon) {\n      // get current instance and .addTab()\n      var LayoutView = _logic.currentEditObject();\n      return LayoutView.addTab(tabName, tabIcon);\n\n      // trigger a save()\n      // this.propertyEditorSave(ids, LayoutView);\n   }\n\n   static editTab(ids, _logic, tabId, tabName, tabIcon) {\n      // get current instance and rename tab\n      var LayoutView = _logic.currentEditObject();\n      var editedTab = LayoutView.views((v) => v.id == tabId)[0];\n\n      if (!editedTab) return;\n\n      editedTab.label = tabName;\n      editedTab.tabicon = tabIcon;\n\n      // trigger a save()\n      // this.propertyEditorSave(ids, LayoutView);\n      return editedTab.save();\n   }\n\n   static popupShow(tab) {\n      var popup = $$(\"ab-component-tab-add-new-tab-popup\");\n      var form = $$(\"ab-component-tab-add-new-tab-form\");\n      var button = $$(\"ab-component-tab-save-button\");\n\n      if (popup) {\n         // Edit tab\n         if (tab) {\n            form.setValues({\n               id: tab.id,\n               label: tab.label,\n               tabicon: tab.tabicon,\n            });\n\n            popup.getHead().setHTML(L(\"Edit Tab\"));\n            button.setValue(L(\"Save\"));\n         }\n         // Add new tab\n         else {\n            form.setValues({\n               id: null,\n               label: \"\",\n            });\n\n            popup.getHead().setHTML(L(\"Add Tab\"));\n            button.setValue(L(\"Add\"));\n         }\n\n         button.refresh();\n\n         // show 'add new field' popup\n         popup.show();\n      }\n   }\n\n   static popupClose() {\n      var popup = $$(\"ab-component-tab-add-new-tab-popup\");\n\n      if (popup) popup.hide();\n   }\n\n   static popupBusy() {\n      var button = $$(\"ab-component-tab-save-button\");\n\n      if (button) button.disable();\n   }\n\n   static popupReady() {\n      var button = $$(\"ab-component-tab-save-button\");\n\n      if (button) button.enable();\n   }\n\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\n      var commonUI = super.propertyEditorDefaultElements(\n         App,\n         ids,\n         _logic,\n         ObjectDefaults\n      );\n\n      // create 'add new tab' popup\n      webix\n         .ui({\n            id: \"ab-component-tab-add-new-tab-popup\",\n            view: \"window\",\n            height: 250,\n            width: 300,\n            modal: true,\n            position: \"center\",\n            head: \" \",\n            body: {\n               id: \"ab-component-tab-add-new-tab-form\",\n               view: \"form\",\n               elements: [\n                  {\n                     view: \"text\",\n                     name: \"label\",\n                     id: \"ab-component-tab-name\",\n                     label: L(\"Label\"),\n                     required: true,\n                  },\n                  {\n                     view: \"combo\",\n                     id: \"ab-component-tab-icon\",\n                     name: \"tabicon\",\n                     label: L(\"Icon\"),\n                     options: {\n                        filter: function (item, value) {\n                           if (\n                              item.value\n                                 .toString()\n                                 .toLowerCase()\n                                 .indexOf(value.toLowerCase()) === 0\n                           )\n                              return true;\n                           return false;\n                        },\n                        body: {\n                           data: App.icons,\n                           template:\n                              \"<i class='fa fa-fw fa-#value#'></i> #value#\",\n                        },\n                     },\n                  },\n                  // action buttons\n                  {\n                     cols: [\n                        { fillspace: true },\n                        {\n                           view: \"button\",\n                           value: L(\"Cancel\"),\n                           css: \"ab-cancel-button\",\n                           autowidth: true,\n                           click: () => {\n                              this.popupClose();\n                           },\n                        },\n                        {\n                           id: \"ab-component-tab-save-button\",\n                           view: \"button\",\n                           css: \"webix_primary\",\n                           value: L(\"Add Tab\"),\n                           autowidth: true,\n                           type: \"form\",\n                           click: () => {\n                              let form = $$(\n                                 \"ab-component-tab-add-new-tab-form\"\n                              );\n                              if (form.validate()) {\n                                 this.popupBusy();\n\n                                 let vals = form.getValues();\n\n                                 let doneFn = () => {\n                                    this.popupReady();\n\n                                    this.popupClose();\n\n                                    // Refresh UI\n                                    let currView = _logic.currentEditObject();\n                                    currView.emit(\n                                       \"properties.updated\",\n                                       currView\n                                    );\n                                 };\n\n                                 // add\n                                 if (vals.id == null) {\n                                    this.addTab(\n                                       ids,\n                                       _logic,\n                                       vals.label,\n                                       vals.tabicon\n                                    ).then(() => doneFn());\n                                 }\n                                 // edit\n                                 else {\n                                    this.editTab(\n                                       ids,\n                                       _logic,\n                                       vals.id,\n                                       vals.label,\n                                       vals.tabicon\n                                    ).then(() => doneFn());\n                                 }\n                              }\n                           },\n                        },\n                     ],\n                  },\n               ],\n            },\n         })\n         .hide();\n\n      // in addition to the common .label  values, we\n      // ask for:\n      return commonUI.concat([\n         {\n            view: \"counter\",\n            name: \"height\",\n            label: L(\"Height\"),\n         },\n         {\n            view: \"counter\",\n            name: \"minWidth\",\n            label: L(\"Minimum width\"),\n         },\n         {\n            view: \"checkbox\",\n            name: \"stackTabs\",\n            labelRight: L(\"Stack Tabs Vertically\"),\n            labelWidth: this.AB.UISettings.config().labelWidthCheckbox,\n            on: {\n               onChange: (newv, oldv) => {\n                  if (newv == 1) {\n                     $$(ids.sidebarWidth).show();\n                     $$(ids.sidebarPos).show();\n                     $$(ids.iconOnTop).hide();\n                  } else {\n                     $$(ids.sidebarWidth).hide();\n                     $$(ids.sidebarPos).hide();\n                     $$(ids.iconOnTop).show();\n                  }\n               },\n            },\n         },\n         {\n            view: \"checkbox\",\n            name: \"iconOnTop\",\n            labelRight: L(\"Position icon above text\"),\n            labelWidth: this.AB.UISettings.config().labelWidthCheckbox,\n         },\n         {\n            view: \"checkbox\",\n            name: \"darkTheme\",\n            labelRight: L(\"Use Dark Theme\"),\n            labelWidth: this.AB.UISettings.config().labelWidthCheckbox,\n         },\n         {\n            view: \"counter\",\n            name: \"sidebarWidth\",\n            label: L(\"Width of Sidebar\"),\n            labelWidth: this.AB.UISettings.config().labelWidthXLarge,\n         },\n         {\n            view: \"richselect\",\n            name: \"sidebarPos\",\n            label: L(\"Position of Sidebar\"),\n            labelWidth: this.AB.UISettings.config().labelWidthXLarge,\n            options: [\n               { id: \"left\", value: L(\"Left\") },\n               { id: \"right\", value: L(\"Right\") },\n            ],\n         },\n         // [button] : add tab\n         {\n            view: \"button\",\n            css: \"webix_primary\",\n            value: L(\"Add Tab\"),\n            click: () => {\n               this.popupShow();\n            },\n         },\n      ]);\n   }\n\n   static propertyEditorPopulate(App, ids, view) {\n      super.propertyEditorPopulate(App, ids, view);\n\n      $$(ids.height).setValue(\n         view.settings.height || ABViewTabPropertyComponentDefaults.height\n      );\n      $$(ids.minWidth).setValue(\n         view.settings.minWidth || ABViewTabPropertyComponentDefaults.minWidth\n      );\n      $$(ids.stackTabs).setValue(\n         view.settings.stackTabs || ABViewTabPropertyComponentDefaults.stackTabs\n      );\n      $$(ids.darkTheme).setValue(\n         view.settings.darkTheme || ABViewTabPropertyComponentDefaults.darkTheme\n      );\n      $$(ids.sidebarWidth).setValue(\n         view.settings.sidebarWidth ||\n            ABViewTabPropertyComponentDefaults.sidebarWidth\n      );\n      $$(ids.sidebarPos).setValue(\n         view.settings.sidebarPos ||\n            ABViewTabPropertyComponentDefaults.sidebarPos\n      );\n      $$(ids.iconOnTop).setValue(\n         view.settings.iconOnTop || ABViewTabPropertyComponentDefaults.iconOnTop\n      );\n\n      if (view.settings.stackTabs) {\n         $$(ids.sidebarWidth).show();\n         $$(ids.sidebarPos).show();\n         $$(ids.iconOnTop).hide();\n      } else {\n         $$(ids.sidebarWidth).hide();\n         $$(ids.sidebarPos).hide();\n         $$(ids.iconOnTop).show();\n      }\n   }\n\n   static propertyEditorValues(ids, view) {\n      super.propertyEditorValues(ids, view);\n\n      view.settings.height = $$(ids.height).getValue();\n      view.settings.minWidth = $$(ids.minWidth).getValue();\n      view.settings.stackTabs = $$(ids.stackTabs).getValue();\n      view.settings.darkTheme = $$(ids.darkTheme).getValue();\n      view.settings.sidebarWidth = $$(ids.sidebarWidth).getValue();\n      view.settings.sidebarPos = $$(ids.sidebarPos).getValue();\n      view.settings.iconOnTop = $$(ids.iconOnTop).getValue();\n   }\n\n   /**\n    * @method component()\n    * return a UI component based upon this view.\n    * @param {obj} App\n    * @return {obj} UI component\n    */\n   component(App) {\n      var AB = this.AB;\n\n      var comp = super.component(App);\n      // get a UI component for each of our child views\n      this._viewComponents = [];\n      this.views().forEach((v) => {\n         var accessLevel = v.getUserAccess();\n         if (accessLevel > 0) {\n            this._viewComponents.push({\n               view: v,\n               // component: v.component(App)\n            });\n         }\n      });\n\n      var idBase = \"ABViewTab_\" + this.id;\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n         sidebar: App.unique(`${idBase}_sidebar`),\n         expandMenu: App.unique(`${idBase}_expand_menu`),\n         collapseMenu: App.unique(`${idBase}_collapse_menu`),\n      };\n\n      var _ui = {};\n\n      // We are going to make a custom icon using the first letter of a menu item for menu items that don't have an icon\n      // to do this we need to modify the default template with the method webix recommended form this snippet https://snippet.webix.com/b566d9f8\n      webix.type(webix.ui.tree, {\n         baseType: \"sideBar\", // inherit everything else from sidebar type\n         name: \"customIcons\",\n         icon: function (obj, common) {\n            if (obj.icon.length)\n               return (\n                  \"<span class='webix_icon webix_sidebar_icon fa fa-fw fa-\" +\n                  obj.icon +\n                  \"'></span>\"\n               );\n            return (\n               \"<span class='webix_icon webix_sidebar_icon sidebarCustomIcon'>\" +\n               obj.value.charAt(0).toUpperCase() +\n               \"</span>\"\n            );\n         },\n      });\n\n      if (this._viewComponents.length > 0) {\n         if (this.settings.stackTabs) {\n            // define your menu items from the view components\n            var menuItems = this.views((view) => {\n               var accessLevel = view.getUserAccess();\n               if (accessLevel > 0) {\n                  return view;\n               }\n            }).map((v) => {\n               return {\n                  id: v.id + \"_menu\",\n                  value: v.label,\n                  icon: v.tabicon ? v.tabicon : \"\",\n               };\n            });\n\n            if (menuItems.length) {\n               // create a menu item for the collapse option to use later\n               var collapseMenu = {\n                  id: ids.collapseMenu,\n                  value: L(\"Collapse Menu\"),\n                  icon: \"chevron-circle-left\",\n               };\n\n               // create a menu item from the expand option to use later\n               var expandMenu = {\n                  id: ids.expandMenu,\n                  value: L(\"Expand Menu\"),\n                  icon: \"chevron-circle-right\",\n                  hidden: true,\n               };\n\n               // find out what the first option is so we can set it later\n               var selectedItem = this._viewComponents[0].view.id + \"_menu\";\n\n               var sidebar = {\n                  view: \"sidebar\",\n                  type: \"customIcons\", // define the sidebar type with the new template created above\n                  id: ids.sidebar,\n                  width: this.settings.sidebarWidth\n                     ? this.settings.sidebarWidth\n                     : 0,\n                  scroll: true,\n                  position: this.settings.sidebarPos\n                     ? this.settings.sidebarPos\n                     : \"left\",\n                  css: this.settings.darkTheme ? \"webix_dark\" : \"\",\n                  data: menuItems.concat(collapseMenu), // add you menu items along with the collapse option to start\n                  on: {\n                     onItemClick: function (id, e, node) {\n                        // when a menu item is clicked\n                        if (id == ids.collapseMenu) {\n                           // if it was the collapse menu item\n                           setTimeout(function () {\n                              // remove the collapse option from the menu\n                              $$(ids.sidebar).remove(ids.collapseMenu);\n                              // add the expand option to the menu\n                              $$(ids.sidebar).add(expandMenu);\n                              // toggle the sidebar state\n                              $$(ids.sidebar).toggle();\n                              // we just clicked the collapse...but we don't wanted highlighted\n                              // so highlight the previously selected menu item\n                              $$(ids.sidebar).select(selectedItem);\n                              // store this state in local storage the user preference is\n                              // remembered next time they see this sidebar\n                              this.AB.Storage.set(\n                                 `${idBase}-state`,\n                                 $$(ids.sidebar).getState()\n                              );\n                           }, 0);\n                        } else if (id == ids.expandMenu) {\n                           setTimeout(function () {\n                              // remove the expand option from the menu\n                              $$(ids.sidebar).remove(ids.expandMenu);\n                              // add the collapse option to the menu\n                              $$(ids.sidebar).add(collapseMenu);\n                              // toggle the sidebar state\n                              $$(ids.sidebar).toggle();\n                              // we just clicked the collapse...but we don't wanted highlighted\n                              // so highlight the previously selected menu item\n                              $$(ids.sidebar).select(selectedItem);\n                              // store this state in local storage the user preference is\n                              // remembered next time they see this sidebar\n                              this.AB.Storage.set(\n                                 `${idBase}-state`,\n                                 $$(ids.sidebar).getState()\n                              );\n                           }, 0);\n                        } else {\n                           // store the selecte menu item just in case someone toggles the menu later\n                           selectedItem = id;\n                           // if the menu item is a regular menu item\n                           // call the onShow with the view id to load the view\n                           id = id.replace(\"_menu\", \"\");\n                           $$(id).show(false, false);\n                           // _onShow(id);\n                        }\n                     },\n                     onAfterRender: () => {\n                        // set ids of controller buttons\n                        let collapseNode = $$(ids.sidebar).$view.querySelector(\n                           `[webix_tm_id=\"${ids.collapseMenu}\"]`\n                        );\n                        if (collapseNode) {\n                           collapseNode.setAttribute(\n                              \"data-cy\",\n                              `tab-collapseMenu-${ids.collapseMenu}`\n                           );\n                        }\n                        let expandNode = $$(ids.sidebar).$view.querySelector(\n                           `[webix_tm_id=\"${ids.expandMenu}\"]`\n                        );\n                        if (expandNode) {\n                           expandNode.setAttribute(\n                              \"data-cy\",\n                              `tab-expandMenu-${ids.expandMenu}`\n                           );\n                        }\n                        this.views((view) => {\n                           var node = $$(ids.sidebar).$view.querySelector(\n                              `[webix_tm_id=\"${view.id}_menu\"]`\n                           );\n                           if (!node) return;\n                           node.setAttribute(\n                              \"data-cy\",\n                              `tab-${view.label.replace(\" \", \"\")}-${view.id}-${\n                                 this.id\n                              }`\n                           );\n                        });\n                     },\n                  },\n               };\n\n               var multiview = {\n                  view: \"multiview\",\n                  id: ids.component,\n                  keepViews: true,\n                  minWidth: this.settings.minWidth,\n                  height: this.settings.height,\n                  cells: this._viewComponents.map((v) => {\n                     var tabUi = {\n                        id: v.view.id,\n                        // ui will be loaded when its tab is opened\n                        view: \"layout\",\n                        rows: [],\n                     };\n\n                     return tabUi;\n                  }),\n                  on: {\n                     onViewChange: function (prevId, nextId) {\n                        _onShow(nextId);\n                     },\n                  },\n               };\n\n               var columns = [sidebar, multiview];\n               if (this.settings.sidebarPos == \"right\") {\n                  columns = [multiview, sidebar];\n               }\n\n               _ui = {\n                  cols: columns,\n               };\n            } else {\n               _ui = {\n                  view: \"spacer\",\n               };\n            }\n         } else {\n            var cells = this.views((view) => {\n               var accessLevel = view.getUserAccess();\n               if (accessLevel > 0) {\n                  return view;\n               }\n            }).map((v) => {\n               var tabUi = {\n                  id: v.id,\n                  // ui will be loaded when its tab is opened\n                  view: \"layout\",\n                  rows: [],\n               };\n\n               var tabTemplate = \"\";\n               // tab icon\n               if (v.tabicon) {\n                  if (this.settings.iconOnTop) {\n                     tabTemplate =\n                        \"<div class='ab-tabIconContainer'><span class='fa fa-lg fa-fw fa-\" +\n                        v.tabicon +\n                        \"'></span><br/>\" +\n                        v.label +\n                        \"</div>\";\n                  } else {\n                     tabTemplate =\n                        \"<span class='fa fa-lg fa-fw fa-\" +\n                        v.tabicon +\n                        \"'></span> \" +\n                        v.label;\n                  }\n               }\n               // no icon\n               else {\n                  tabTemplate = v.label;\n               }\n\n               return {\n                  header: tabTemplate,\n                  body: tabUi,\n               };\n            });\n\n            // if there are cells to display then return a tabview\n            if (cells.length) {\n               _ui = {\n                  rows: [\n                     {\n                        view: \"tabview\",\n                        id: ids.component,\n                        minWidth: this.settings.minWidth,\n                        tabbar: {\n                           height: 60,\n                           type: \"bottom\",\n                           css: this.settings.darkTheme ? \"webix_dark\" : \"\",\n                           on: {\n                              onAfterRender: () => {\n                                 this.views((view) => {\n                                    var node = $$(\n                                       ids.component\n                                    ).$view.querySelector(\n                                       '[button_id=\"' + view.id + '\"]'\n                                    );\n                                    if (!node) return;\n                                    node.setAttribute(\n                                       \"data-cy\",\n                                       \"tab \" +\n                                          view.name +\n                                          \" \" +\n                                          view.id +\n                                          \" \" +\n                                          this.id\n                                    );\n                                 });\n                              },\n                           },\n                        },\n                        multiview: {\n                           height: this.settings.height,\n                           on: {\n                              onViewChange: function (prevId, nextId) {\n                                 _onShow(nextId);\n                              },\n                           },\n                        },\n                        cells: cells,\n                     },\n                  ],\n               };\n            } else {\n               // else we return a spacer\n               _ui = {\n                  view: \"spacer\",\n               };\n            }\n         }\n      } else {\n         _ui = {\n            view: \"spacer\",\n         };\n      }\n\n      var _logic = {\n         changePage: (pageId) => {\n            $$(ids.component).blockEvent();\n            this.changePage(pageId);\n            $$(ids.component).unblockEvent();\n         },\n\n         changeTab: (tabViewId) => {\n            // switch tab view\n            _logic.toggleParent(this.parent);\n            if (this.settings.stackTabs) {\n               if (!$$(tabViewId).isVisible()) {\n                  var showIt = setInterval(function () {\n                     if ($$(tabViewId).isVisible()) {\n                        clearInterval(showIt);\n                     }\n                     $$(tabViewId).show(false, false);\n                  }, 200);\n               }\n            } else {\n               $$(ids.component).setValue(tabViewId);\n            }\n         },\n\n         toggleParent: (view) => {\n            if (\n               (view.key == \"tab\" || view.key == \"viewcontainer\") &&\n               $$(view.id) &&\n               $$(view.id).show\n            ) {\n               $$(view.id).show(false, false);\n            }\n            if (view.parent) {\n               _logic.toggleParent(view.parent);\n            }\n         },\n      };\n\n      // make sure each of our child views get .init() called\n      var _init = (options) => {\n         var parent = this;\n\n         if ($$(ids.component))\n            webix.extend($$(ids.component), webix.ProgressBar);\n\n         this._viewComponents.forEach((v) => {\n            // v.component.init(options);\n\n            // Trigger 'changePage' event to parent\n            this.eventAdd({\n               emitter: v.view,\n               eventName: \"changePage\",\n               listener: (...p) => _logic.changePage(...p),\n            });\n         });\n\n         // Trigger 'changeTab' event to parent\n         this.eventAdd({\n            emitter: this,\n            eventName: \"changeTab\",\n            listener: (...p) => _logic.changeTab(...p),\n         });\n\n         // initialize the sidebar and figure out if it should be collased or not\n         this.AB.Storage.get(`${idBase}-state`).then((state) => {\n            if (state) {\n               // this will collapse or expand the sidebar\n               $$(ids.sidebar).setState(state);\n\n               // if the state is collapsed we need to make sure the expand option is available\n               if (state.collapsed) {\n                  setTimeout(function () {\n                     $$(ids.sidebar).remove(ids.collapseMenu);\n                     $$(ids.sidebar).add(expandMenu);\n                  }, 0);\n               }\n            }\n         });\n      };\n\n      var _onShow = (viewId) => {\n         var parent = this;\n\n         var defaultViewIsSet = false;\n         // if no viewId is given, then try to get the currently selected ID\n         if (!viewId) {\n            var sidebar = $$(ids.sidebar);\n            if (sidebar) {\n               viewId = sidebar.getSelectedId().replace(\"_menu\", \"\");\n            }\n         }\n\n         this._viewComponents.forEach((v, index) => {\n            // set default view id\n            var currView = this.views((view) => {\n               return view.id == v.view.id;\n            });\n            var accessLevel = 0;\n            if (currView.length) {\n               accessLevel = currView[0].getUserAccess();\n            }\n            // choose the 1st View if we don't have one we are looking for.\n            if (!viewId && !defaultViewIsSet && accessLevel > 0) {\n               viewId = v.view.id;\n               defaultViewIsSet = true;\n            }\n\n            // create view's component once\n            if (v.component == null && v.view.id == viewId) {\n               // show loading cursor\n               if ($$(ids.component) && $$(ids.component).showProgress)\n                  $$(ids.component).showProgress({ type: \"icon\" });\n\n               v.component = v.view.component(App);\n\n               if (parent.settings.stackTabs) {\n                  // update multiview UI\n                  webix.ui(\n                     {\n                        // able to 'scroll' in tab view\n                        id: v.view.id,\n                        view: \"scrollview\",\n                        css: \"ab-multiview-scrollview\",\n                        body: v.component.ui,\n                     },\n                     $$(v.view.id)\n                  );\n               } else {\n                  // update tab UI\n                  webix.ui(\n                     {\n                        // able to 'scroll' in tab view\n                        id: v.view.id,\n                        view: \"scrollview\",\n                        css: \"ab-tabview-scrollview\",\n                        body: v.component.ui,\n                     },\n                     $$(v.view.id)\n                  );\n               }\n\n               // for tabs we need to look at the view's accessLevels\n               accessLevel = v.view.getUserAccess();\n               v.component.init(null, accessLevel);\n\n               // done\n               setTimeout(() => {\n                  // $$(v.view.id).adjust();\n\n                  if ($$(ids.component) && $$(ids.component).hideProgress)\n                     $$(ids.component).hideProgress();\n               }, 10);\n            }\n\n            // show UI\n            if (v.view.id == viewId && v.component && v.component.onShow)\n               v.component.onShow();\n\n            if (parent.settings.stackTabs && v.view.id == viewId) {\n               $$(viewId).show(false, false);\n               $$(ids.sidebar).select(viewId + \"_menu\");\n            }\n         });\n      };\n\n      return {\n         ui: _ui,\n         init: _init,\n         logic: _logic,\n\n         onShow: _onShow,\n      };\n   }\n};\n","const ABViewTextCore = require(\"../../core/views/ABViewTextCore\");\n\nconst ABViewTextPropertyComponentDefaults = ABViewTextCore.defaultValues();\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABViewText extends ABViewTextCore {\n   // constructor(values, application, parent, defaultValues) {\n   //    super(values, application, parent, defaultValues);\n   // }\n\n   //\n   //\tEditor Related\n   //\n\n   /**\n    * @method editorComponent\n    * return the Editor for this UI component.\n    * the editor should display either a \"block\" view or \"preview\" of\n    * the current layout of the view.\n    * @param {string} mode what mode are we in ['block', 'preview']\n    * @return {Component}\n    */\n   editorComponent(App, mode) {\n      webix.codebase = \"/js/webix/extras/\";\n\n      var idBase = \"ABViewTextEditorComponent\";\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n      };\n\n      var _ui = {\n         id: ids.component,\n         view: \"tinymce-editor\",\n         value: this.text || ABViewTextPropertyComponentDefaults.text,\n         config: {\n            plugins: [\n               \"advlist autolink lists link image charmap print preview anchor\",\n               \"searchreplace visualblocks code fullscreen\",\n               \"insertdatetime media table contextmenu paste imagetools wordcount\",\n            ],\n            toolbar:\n               \"insertfile undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image\",\n            // menu: {\n            // \tfile: { title: 'File', items: 'newdocument' },\n            // \tedit: { title: 'Edit', items: 'undo redo | cut copy paste pastetext | selectall' },\n            // \tformat: { title: 'Format', items: 'formats | removeformat' }\n            // },\n            init_instance_callback: (editor) => {\n               editor.on(\"KeyUp\", (event) => {\n                  _logic.onChange();\n               });\n\n               editor.on(\"Change\", function (event) {\n                  _logic.onChange();\n               });\n            },\n         },\n      };\n\n      var _init = (options) => {};\n\n      var _logic = {\n         onChange: () => {\n            if (this.__onChangeFn) {\n               clearTimeout(this.__onChangeFn);\n\n               this.__onChangeFn = null;\n            }\n\n            this.__onChangeFn = setTimeout(() => {\n               this.text = $$(ids.component).getValue();\n               this.save();\n            }, 400);\n         },\n      };\n\n      return {\n         ui: _ui,\n         init: _init,\n         logic: _logic,\n      };\n   }\n\n   //\n   // Property Editor\n   //\n\n   // static propertyEditorComponent(App) {\n   // \treturn ABViewPropertyComponent.component(App);\n   // }\n\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\n      var commonUI = super.propertyEditorDefaultElements(\n         App,\n         ids,\n         _logic,\n         ObjectDefaults\n      );\n\n      // _logic functions\n\n      _logic.selectSource = (dcId, oldDcId) => {\n         var currView = _logic.currentEditObject();\n\n         // Update field options in property\n         this.propertyUpdateFieldOptions(ids, currView, dcId);\n      };\n\n      _logic.selectField = (field) => {\n         let format = `{${field.label}}`;\n\n         // insert text to tinymce\n         tinymce.activeEditor.execCommand(\"mceInsertContent\", false, format);\n      };\n\n      // in addition to the common .label  values, we\n      // ask for:\n      return commonUI.concat([\n         {\n            view: \"counter\",\n            name: \"height\",\n            label: L(\"Height:\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n         },\n         {\n            name: \"datacollection\",\n            view: \"richselect\",\n            label: L(\"Data Source\"),\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\n            on: {\n               onChange: _logic.selectSource,\n            },\n         },\n         {\n            name: \"field\",\n            view: \"list\",\n            autoheight: true,\n            template: \"#label#\",\n            on: {\n               onItemClick: function (id, e, node) {\n                  var field = this.getItem(id);\n\n                  _logic.selectField(field);\n               },\n            },\n         },\n      ]);\n   }\n\n   /**\n    * @method propertyUpdateFieldOptions\n    * Populate fields of object to select list in property\n    *\n    * @param {Object} ids\n    * @param {ABViewForm} view - the current component\n    * @param {string} dvId - id of ABDatacollection\n    */\n   static propertyUpdateFieldOptions(ids, view, dvId) {\n      var datacollection = view.AB.datacollectionByID(dvId);\n\n      if (!datacollection && view.parent.key == \"dataview\") {\n         datacollection = view.AB.datacollectionByID(\n            view.parent.settings.dataviewID\n         );\n         $$(ids.datacollection).setValue(view.parent.settings.dataviewID);\n      }\n\n      var object = datacollection ? datacollection.datasource : null;\n\n      // Pull field list\n      $$(ids.field).clearAll();\n      if (object) $$(ids.field).parse(object.fields());\n      $$(ids.field).refresh();\n   }\n\n   static propertyEditorPopulate(App, ids, view) {\n      super.propertyEditorPopulate(App, ids, view);\n\n      $$(ids.height).setValue(view.settings.height);\n\n      var dataviewID = view.settings.dataviewID\n         ? view.settings.dataviewID\n         : null;\n      var SourceSelector = $$(ids.datacollection);\n\n      // Pull data collections to options\n      var dvOptions = view.propertyDatacollections();\n      SourceSelector.define(\"options\", dvOptions);\n      SourceSelector.define(\"value\", dataviewID);\n      SourceSelector.refresh();\n\n      this.propertyUpdateFieldOptions(ids, view, dataviewID);\n   }\n\n   static propertyEditorValues(ids, view) {\n      super.propertyEditorValues(ids, view);\n\n      view.settings.height = $$(ids.height).getValue();\n      view.settings.dataviewID = $$(ids.datacollection).getValue();\n   }\n\n   /**\n    * @method component()\n    * return a UI component based upon this view.\n    * @param {obj} App\n    * @return {obj} UI component\n    */\n   component(App, idPrefix) {\n      let baseCom = super.component(App);\n\n      var idBase = `ABViewText_${idPrefix ? idPrefix : \"\"}${this.id}`;\n      var ids = {\n         component: App.unique(`${idBase}_component`),\n      };\n\n      var _logic = {\n         displayText: (val) => {\n            var result = this.displayText(val, ids.component);\n\n            if ($$(ids.component)) {\n               $$(ids.component).define(\"template\", result);\n               $$(ids.component).refresh();\n            }\n         },\n      };\n\n      // an ABViewLabel is a simple Label\n      var _ui = {\n         id: ids.component,\n         view: \"template\",\n         autoheight: true,\n         minHeight: 10,\n         css: \"ab-custom-template\",\n         borderless: true,\n      };\n\n      // define height\n      if (this.settings.height) _ui.height = this.settings.height;\n      else _ui.autoheight = true;\n\n      // make sure each of our child views get .init() called\n      var _init = (options) => {};\n\n      var _onShow = (viewId) => {\n         baseCom.onShow(viewId);\n\n         // listen DC events\n         let dv = this.datacollection;\n         if (dv && this.parent.key != \"dataview\") {\n            this.eventAdd({\n               emitter: dv,\n               eventName: \"changeCursor\",\n               listener: (...p) => _logic.displayText(...p),\n            });\n         }\n\n         _logic.displayText();\n      };\n\n      return {\n         ui: _ui,\n         init: _init,\n         logic: _logic,\n         onShow: _onShow,\n      };\n   }\n};\n","const ABViewWidgetCore = require(\"../../core/views/ABViewWidgetCore\");\n\nconst ABPropertyComponentDefaults = ABViewWidgetCore.defaultValues();\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABViewWidget extends ABViewWidgetCore {\n   // constructor(values, application, parent, defaultValues) {\n   //    super(values, application, parent, defaultValues);\n   // }\n\n   //\n   // Property Editor\n   //\n\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\n      var commonUI = super.propertyEditorDefaultElements(\n         App,\n         ids,\n         _logic,\n         ObjectDefaults\n      );\n\n      // in addition to the common .label  values, we\n      // ask for:\n      return commonUI.concat([\n         {\n            name: \"columnSpan\",\n            view: \"counter\",\n            min: 1,\n            label: L(\"Column Span\"),\n\n            hidden: true, // TODO\n         },\n         {\n            name: \"rowSpan\",\n            view: \"counter\",\n            min: 1,\n            label: L(\"Row Span\"),\n\n            hidden: true, // TODO\n         },\n      ]);\n   }\n\n   static propertyEditorPopulate(App, ids, view) {\n      super.propertyEditorPopulate(App, ids, view);\n\n      $$(ids.columnSpan).setValue(\n         view.position.dx || ABPropertyComponentDefaults.columnSpan\n      );\n      $$(ids.rowSpan).setValue(\n         view.position.dy || ABPropertyComponentDefaults.rowSpan\n      );\n   }\n\n   static propertyEditorValues(ids, view) {\n      super.propertyEditorValues(ids, view);\n\n      view.position.dx = $$(ids.columnSpan).getValue();\n      view.position.dy = $$(ids.rowSpan).getValue();\n   }\n\n   /**\n    * @function component()\n    * return a UI component based upon this view.\n    * @param {obj} App\n    * @return {obj} UI component\n    */\n   component(App) {\n      let base = super.component(App);\n\n      base.onShow = (viewId) => {\n         let dv = this.datacollection; // get from a function or a (get) property\n         if (dv && dv.dataStatus == dv.dataStatusFlag.notInitial) {\n            // load data when a widget is showing\n            dv.loadData();\n         }\n      };\n\n      return base;\n   }\n};\n","import ClassUI from \"../../../../ui/ClassUI\";\n\nexport default class ABViewProperty extends ClassUI {\n   // constructor() {}\n\n   /**\n    * @property default\n    * return default settings\n    *\n    * @return {Object}\n    */\n   static get default() {\n      return {};\n   }\n\n   /** == Property == */\n   /**\n    * @function propertyComponent\n    * return the view and logic to display in property panel\n    *\n    * @return {Object} - {\n    * \t\t\t\t\t\tui: webix element,\n    * \t\t\t\t\t\tinit: function,\n    * \t\t\t\t\t\tlogic: object\n    * \t\t\t\t\t}\n    */\n   static propertyComponent() {\n      let ui = {\n         view: \"template\",\n         template: \"No UI\",\n      };\n\n      let init = (options) => {\n         // register callbacks:\n         for (var c in logic.callbacks) {\n            logic.callbacks[c] = options[c] || logic.callbacks[c];\n         }\n      };\n\n      let logic = {\n         callbacks: {},\n      };\n\n      return {\n         ui: ui,\n         init: init,\n         logic: logic,\n      };\n   }\n\n   fromSettings(settings) {\n      this.settings = settings;\n   }\n\n   toSettings() {\n      return this.settings || {};\n   }\n\n   /** == UI == */\n   /**\n    * @function component\n    * return the view and logic to display in display widget\n    * @param {object} App\n    *      The shared App object that is created in OP.Component\n    * @param {string} idBase\n    *      Identifier for this component\n    *\n    * @return {Object} - {\n    * \t\t\t\t\t\tui: webix element,\n    * \t\t\t\t\t\tinit: function,\n    * \t\t\t\t\t\tlogic: object\n    * \t\t\t\t\t}\n    */\n   component(App, idBase) {\n      this.App = App;\n      this.idBase = idBase;\n\n      let ui = {\n         view: \"template\",\n         template: \"No UI\",\n      };\n\n      let init = (options) => {\n         // register callbacks:\n         for (var c in logic.callbacks) {\n            logic.callbacks[c] = options[c] || logic.callbacks[c];\n         }\n      };\n\n      let logic = {\n         callbacks: {},\n      };\n\n      return {\n         ui: ui,\n         init: init,\n         logic: logic,\n      };\n   }\n}\n","import ABViewProperty from \"./ABViewProperty\";\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nexport default class ABViewPropertyAddPage extends ABViewProperty {\n   /**\n    * @property default\n    * return default settings\n    *\n    * @return {Object}\n    */\n   static get default() {\n      return {\n         formView: \"none\", // id of form to add new data\n      };\n   }\n\n   static propertyComponent(App, idBase) {\n      let ids = {\n         formView: `${idBase}_formView`,\n      };\n\n      let ui = {\n         id: ids.formView,\n         name: \"formView\",\n         view: \"richselect\",\n         label: L(\"Add New Form\"),\n         labelWidth: this.AB.UISettings.config().labelWidthXLarge,\n         on: {\n            onChange: (newVal, oldVal) => {\n               if (newVal == L(\"No add new option\")) {\n                  $$(ids.formView).setValue(\"\");\n               }\n\n               _logic.callbacks.onSave();\n            },\n         },\n      };\n\n      let _init = (options) => {\n         for (let c in _logic.callbacks) {\n            _logic.callbacks[c] = options[c] || _logic.callbacks[c];\n         }\n      };\n\n      let _logic = {\n         callbacks: {\n            onSave: function () {\n               console.warn(\"NO onSave()!\");\n            },\n         },\n\n         setSettings: (view, settings = {}) => {\n            if (view == null) return;\n\n            // Set the options of the possible edit forms\n            let editForms = [\n               {\n                  id: \"none\",\n                  value: L(\"No add new option\"),\n               },\n            ];\n\n            let pagesHasForm = view\n               .pageRoot()\n               .pages((p) => {\n                  return p.views((v) => {\n                     return (\n                        v &&\n                        v.key == \"form\" &&\n                        v.datacollection &&\n                        v.datacollection.datasource &&\n                        v.datacollection.datasource.id ==\n                           view.field().settings.linkObject\n                     );\n                  }, true).length;\n               }, true)\n               .map((p) => {\n                  return {\n                     id: p.id,\n                     value: p.label,\n                  };\n               });\n\n            editForms = editForms.concat(pagesHasForm);\n\n            let $selector = $$(ids.formView);\n            if ($selector) {\n               $selector.define(\"options\", editForms);\n               $selector.define(\n                  \"value\",\n                  settings.formView || this.default.formView\n               );\n               $selector.refresh();\n            }\n         },\n\n         getSettings: (view) => {\n            let settings = view.settings || {};\n\n            settings.formView = $$(ids.formView).getValue();\n\n            return settings;\n         },\n      };\n\n      return {\n         ui: ui,\n         init: _init,\n         setSettings: _logic.setSettings,\n         getSettings: _logic.getSettings,\n      };\n   }\n\n   fromSettings(settings = {}) {\n      this.settings = this.settings || {};\n      this.settings.formView =\n         settings.formView || this.constructor.default.formView;\n   }\n\n   component(App, idBase) {\n      let ids = {\n         popup: App.unique(`${idBase}_popup_add_new`),\n         field: idBase.split(\"_\")[1],\n         button: App.unique(`${idBase}_popup_add_new_button`),\n      };\n\n      let ui = \"\";\n\n      if (\n         this.settings.formView &&\n         this.settings.formView != this.constructor.default.formView\n      ) {\n         // let iDiv = document.createElement(\"div\");\n         // iDiv.className = \"ab-connect-add-new\";\n         const dataCy = `add new CR button ${this.settings.formView} ${ids.field}`;\n         // iDiv.innerHTML = `<a href=\"javascript:void(0);\" class=\"fa fa-plus ab-connect-add-new-link\" data-cy=\"${dataCy}\"></a>`;\n         // iDiv.appendChild(node);\n         // ui = iDiv.outerHTML;\n         ui = {\n            id: ids.button,\n            view: \"button\",\n            type: \"icon\",\n            icon: \"fa fa-plus\",\n            width: 32,\n            height: 32,\n            css: \"webix_primary ab-connect-add-new-link\",\n            on: {\n               onAfterRender: () => {\n                  $$(ids.button)\n                     ?.$view.querySelector(\"button\")\n                     .setAttribute(\"data-cy\", dataCy);\n               },\n            },\n         };\n      }\n\n      let _logic = {\n         callbacks: {\n            onSaveData: (saveData) => {\n               if ($$(ids.popup)) $$(ids.popup).close();\n            },\n            onCancel: () => {\n               if ($$(ids.popup)) $$(ids.popup).close();\n\n               return false;\n            },\n            onClearOnLoad: () => {\n               return true;\n            },\n         },\n\n         applicationLoad: (application) => {\n            this._application = application;\n         },\n\n         onClick: (dc) => {\n            let pageId = this.settings.formView;\n            let page = this._application.pages((p) => p.id == pageId, true)[0];\n\n            return _logic.openFormPopup(page, dc);\n         },\n\n         /**\n          * @method openFormPopup\n          *\n          * @param page {ABViewPage}\n          * @param dc {ABDataCollection}\n          */\n         openFormPopup: (page, dc) => {\n            return new Promise((resolve, reject) => {\n               if (this._application == null) return resolve();\n\n               if ($$(ids.popup)) {\n                  $$(ids.popup).show();\n                  return resolve();\n               }\n\n               // Clone page so we modify without causing problems\n               let pageClone = page.clone(null, null, { ignoreSubPages: true });\n               pageClone.id = this._application.AB.uuid(); // lets take the stored id can create a new dynamic one so our views don't duplicate\n               // pageClone.id = pageClone.id + \"-\" + webix.uid(); // lets take the stored id can create a new dynamic one so our views don't duplicate\n               let popUpComp = pageClone.component(App);\n               let ui = popUpComp.ui;\n\n               let popupTemplate = {\n                  view: \"window\",\n                  id: ids.popup,\n                  modal: true,\n                  position: \"center\",\n                  // position:function(stthis.__addPageToolate){\n                  // \tstate.left = x + 20this.__addPageTool; // offset the popups\n                  // \tstate.top = y + 20;this.__addPageTool\n                  // },\n                  resize: true,\n                  width: parseInt(this.settings.popupWidth) || 700,\n                  height: parseInt(this.settings.popupHeight) + 44 || 450,\n                  css: \"ab-main-container\",\n                  head: {\n                     view: \"toolbar\",\n                     css: \"webix_dark\",\n                     cols: [\n                        {\n                           view: \"label\",\n                           label: page.label,\n                           css: \"modal_title\",\n                           align: \"center\",\n                        },\n                        {\n                           view: \"button\",\n                           label: L(\"Close\"),\n                           autowidth: true,\n                           align: \"center\",\n                           click: function () {\n                              var popup = this.getTopParentView();\n                              popup.close();\n                           },\n                        },\n                     ],\n                  },\n                  body: {\n                     view: \"scrollview\",\n                     scroll: true,\n                     body: ui,\n                  },\n               };\n\n               // Create popup\n               webix.ui(popupTemplate).show();\n\n               // Initial UI components\n               setTimeout(() => {\n                  popUpComp.init({\n                     onSaveData: _logic.callbacks.onSaveData,\n                     onCancelClick: _logic.callbacks.onCancel,\n                     clearOnLoad: _logic.callbacks.onClearOnLoad,\n                  });\n\n                  popUpComp.onShow();\n\n                  _logic.setDefaultValue(dc, pageClone);\n\n                  resolve();\n               }, 50);\n            });\n         },\n\n         setDefaultValue: (dc, page) => {\n            if (!dc) return;\n\n            let obj = dc.datasource;\n            if (!obj) return;\n\n            let linkedData = dc.getCursor();\n            if (!linkedData) return;\n\n            page.views().forEach((v) => {\n               if (!v || v.key != \"form\") return;\n\n               v.views().forEach((fView) => {\n                  if (fView.key != \"connect\" || fView.settings == null) return;\n\n                  let field = fView.field();\n                  if (field == null) return;\n\n                  let objLink = field.datasourceLink;\n                  if (objLink == null || objLink.id != obj.id) return;\n\n                  let data = {};\n                  let relationName = field.relationName();\n                  data[relationName] = {\n                     id: linkedData.id,\n                  };\n\n                  // Add custom index values\n                  let indexes = obj.indexes() || [];\n                  indexes.forEach((idx) => {\n                     (idx.fields || []).forEach((f) => {\n                        data[relationName][f.columnName] =\n                           linkedData[f.columnName];\n                     });\n                  });\n\n                  // Set label of selected item\n                  if (linkedData.text) {\n                     data[relationName].text = linkedData.text;\n                     data[relationName].value = data[relationName].text;\n                  } else {\n                     let rawData = {};\n                     rawData[relationName] = linkedData;\n                     data[relationName].text = field.format(rawData);\n                     data[relationName].value = data[relationName].text;\n                  }\n\n                  let comp = v.viewComponents[fView.id];\n                  if (!comp) return;\n\n                  field.setValue($$(comp.ui.inputId), data);\n               });\n            });\n         },\n      };\n\n      let init = (options) => {\n         for (let c in _logic.callbacks) {\n            _logic.callbacks[c] = options[c] || _logic.callbacks[c];\n         }\n      };\n\n      return {\n         ui: ui,\n         init: init,\n\n         applicationLoad: _logic.applicationLoad,\n         onClick: _logic.onClick,\n         openFormPopup: _logic.openFormPopup,\n      };\n   }\n}\n","import ABViewPropertyAddPage from \"./ABViewPropertyAddPage\";\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nexport default class ABViewPropertyEditPage extends ABViewPropertyAddPage {\n   /**\n    * @property default\n    * return default settings\n    *\n    * @return {Object}\n    */\n   static get default() {\n      return {\n         editForm: \"none\", // The url pointer of ABViewForm\n      };\n   }\n\n   static propertyComponent(App, idBase) {\n      let ids = {\n         formEdit: `${idBase}_editForm`,\n      };\n\n      let ui = {\n         id: ids.formEdit,\n         name: \"editForm\",\n         view: \"richselect\",\n         label: L(\"Edit Form\"),\n         labelWidth: this.AB.UISettings.config().labelWidthXLarge,\n         on: {\n            onChange: (newVal, oldVal) => {\n               if (newVal == L(\"No add new option\")) {\n                  $$(ids.formEdit).setValue(\"\");\n               }\n\n               _logic.callbacks.onSave();\n            },\n         },\n      };\n\n      let _init = (options) => {\n         for (let c in _logic.callbacks) {\n            _logic.callbacks[c] = options[c] || _logic.callbacks[c];\n         }\n      };\n\n      let _logic = {\n         callbacks: {\n            onSave: function () {\n               console.warn(\"NO onSave()!\");\n            },\n         },\n\n         setSettings: (view, settings = {}) => {\n            if (view == null) return;\n\n            // Set the options of the possible edit forms\n            let editForms = [\n               {\n                  id: \"none\",\n\n                  value: L(\"No add new option\"),\n               },\n            ];\n\n            (view.pageRoot().pages(() => true, true) || []).forEach((p) => {\n               if (!p) return;\n\n               p.views(() => true, true).forEach((v) => {\n                  if (\n                     v &&\n                     v.key == \"form\" &&\n                     v.datacollection &&\n                     v.datacollection.datasource &&\n                     v.datacollection.datasource.id ==\n                        view.field().settings.linkObject\n                  ) {\n                     editForms.push({\n                        id: v.urlPointer(),\n                        value: `${p.label} - ${v.label}`,\n                     });\n                  }\n               });\n            });\n\n            let $selector = $$(ids.formEdit);\n            if ($selector) {\n               $selector.define(\"options\", editForms);\n               $selector.define(\n                  \"value\",\n                  settings.editForm || this.default.editForm\n               );\n               $selector.refresh();\n            }\n         },\n\n         getSettings: (view) => {\n            let settings = view.settings || {};\n\n            let $selector = $$(ids.formEdit);\n            let $selectPopup = $selector.getPopup();\n            let selectedItem = ($selectPopup.config.body.data || []).filter(\n               (opt) => opt.id == $selector.getValue()\n            )[0];\n            if (selectedItem) {\n               settings.editForm = selectedItem.id; // The url pointer of ABViewForm\n            }\n\n            return settings;\n         },\n      };\n\n      return {\n         ui: ui,\n         init: _init,\n         setSettings: _logic.setSettings,\n         getSettings: _logic.getSettings,\n      };\n   }\n\n   fromSettings(settings = {}) {\n      this.settings = this.settings || {};\n      this.settings.editForm =\n         settings.editForm || this.constructor.default.editForm;\n   }\n\n   component(App, idBase) {\n      idBase = `${idBase}_popup_edit_form`;\n\n      let comp = super.component(App, idBase);\n\n      comp.onClick = () => {\n         if (\n            !this._application ||\n            !this.settings.editForm ||\n            this.settings.editForm == this.constructor.default.editForm\n         )\n            return Promise.resolve();\n\n         let form = this._application.urlResolve(this.settings.editForm);\n         if (!form) return Promise.resolve();\n\n         let page = form.pageParent();\n         if (!page) return Promise.resolve();\n\n         return comp.openFormPopup(page);\n      };\n\n      return comp;\n   }\n}\n","/*\n * ABViewPropertyFilterData\n * This is a displayable ui component that will manage displaying a\n * means of searching for the user.\n *\n * This component will emit: \"filter.data\" when one of the filter options\n * have been enabled.\n *    \"filter.data\" has 2 parameters: fnFilter, filterRules\n *       fnFilter {function} when passed a row of data from the grid,\n *                return true/false if it passes the filter.\n *       filterRules {array} of each of the filter rules that have been\n *                created. Note: the fnFilter still checks the validity\n *                of the row based on these rules.\n *                (this is used for the parent component to indicate how\n *                many rules are currently applied to the data being displayed)\n */\n\nimport ABViewProperty from \"./ABViewProperty\";\n// const ABViewGridFilterRule = require(\"../../../rules/ABViewGridFilterRule\");\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\n// var getRule = (object, App, idBase) => {\n//    var FilterRule = new ABViewGridFilterRule();\n//    FilterRule.objectLoad(object);\n\n//    // run .component because it need to have .getValue and .setValue functions to Rule\n//    // NOTE: ABViewQueryBuilderObjectFieldCondition - why does not return new object from .compnent ?\n//    if ((App, idBase)) FilterRule.component(App, idBase);\n\n//    return FilterRule;\n// };\n\n// var rowFilter = null;\n// var rowFilterForm = null;\n\nexport default class ABViewPropertyFilterData extends ABViewProperty {\n   constructor(AB, idBase) {\n      super({\n         filterPanel: `${idBase}_filterPanel`,\n         globalFilterFormContainer: `${idBase}__globalFilterFormContainer`,\n         globalFilterForm: `${idBase}_globalFilterForm`,\n         filterMenutoolbar: `${idBase}_filterMenuToolbar`,\n         resetFilterButton: `${idBase}_resetFilterButton`,\n         component: `${idBase}_filterData_popup`,\n      });\n\n      this.AB = AB;\n      this.idBase = idBase;\n      this.object = null;\n      // this.queryRules = [];\n\n      this.__externalSearchText = null;\n      // {string}\n      // External sources of text filters are stored here. This is most likely\n      // from the global search toolbar entry.\n\n      this.rowFilter = this.AB.filterComplexNew(`${this.ids.component}_filter`);\n      // {RowFilter}\n      // When .userFilterPosition == \"toolbar\" we use this RowFilter to\n      // display a form in a popup where the toolbar button is.\n\n      this.rowFilterForm = this.AB.filterComplexNew(\n         `${this.ids.component}_filter_form`\n      );\n      // {RowFilter}\n      // When .userFilterPosition == \"form\" we use this RowFilter to\n      // display a form under the toolbar.\n   }\n\n   /**\n    * @property default\n    * return default settings\n    *\n    * @return {Object}\n    */\n   static get default() {\n      return {\n         filterOption: 1,\n         // {integer}\n         // 0 - Not allow\n         // 1 - Enable user filter\n         // 2 - Predefined filter menu\n         // 3 - Global filter input\n\n         // filterOptions == 1 options\n         userFilterPosition: \"toolbar\",\n         // {string} the location of the filter:\n         //    \"toolbar\" : there will be an \"Add Filters\" button on\n         //                the toolbar that will trigger the form popup\n         //    \"form\"    : there will be a button under the toolbar that\n         //                will bring up the form popup.\n\n         isGlobalToolbar: 1,\n         // {boolean|truthy}\n         // when \"toolbar\" is chosen for userFilterPosition, this setting\n         // allows us to also include the search criteria specified in\n         // the search box on the toolbar.\n\n         // filterOptions == 2 options\n         // predefined filters created by the builders. There will be\n         // an area under the toolbar that displays buttons to choose\n         // between one of the predefined queryRules.\n         // queryRules: [], // An array of ABViewGridFilterRule object\n\n         // filterOptions == 3 options\n         // globalFilterPosition: \"default\",\n         // {string} [ \"default\", \"single\" ]\n         //    \"default\" : shows default grid with all potential matches\n         //    \"single\"  : grid only shows when it has a match.  only 1\n         //                match is shown. ( is this true?? )\n      };\n   }\n\n   // static propertyComponent(App, idBase) {\n   //    let base = super.propertyComponent();\n\n   //    let ids = {\n   //       /** Property */\n   //       filterRules: idBase + \"_rules\",\n   //       filterRulesScrollview: idBase + \"_filterRulesScrollview\",\n\n   //       filterOptionRadio: idBase + \"_filterOptionRadio\",\n   //       filterUserLayout: idBase + \"_filterUserLayout\",\n   //       filterUser: idBase + \"_filterUser\",\n   //       filterGlobal: idBase + \"_filterGlobal\",\n   //       filterMenuLayout: idBase + \"_filterMenuLayout\",\n\n   //       needLoadAllLabel: idBase + \"_needLoadAll\",\n   //       globalToolbar: idBase + \"_globalToolbar\",\n   //    };\n\n   //    let labels = {\n   //       common: App.labels,\n   //       component: {\n   //          header: L(\"ab.component.grid.filterMenu\", \"*Filter Menu\"),\n   //          addNewFilter: L(\n   //             \"ab.components.grid.addNewFilter\",\n   //             \"*Add new filter\"\n   //          ),\n   //       },\n   //    };\n\n   //    let ui = {\n   //       type: \"form\",\n   //       rows: [\n   //          {\n   //             view: \"radio\",\n   //             id: ids.filterOptionRadio,\n   //             value: 0,\n   //             options: [\n   //                { id: 0, value: \"Do not Allow User filters\" },\n   //                { id: 1, value: \"Enable User filters\" },\n   //                { id: 2, value: \"Use a filter menu\" },\n   //                { id: 3, value: \"Use a global filter input\" },\n   //             ],\n   //             vertical: true,\n   //             label: \"Filter Option\",\n   //             labelWidth: App.config.labelWidthLarge,\n   //             on: {\n   //                onChange: (newValue, oldValue) => {\n   //                   logic.setFilterOption(newValue);\n   //                },\n   //             },\n   //          },\n\n   //          {\n   //             view: \"radio\",\n   //             id: ids.filterGlobal,\n   //             hidden: true,\n   //             vertical: true,\n   //             label: \"Show\",\n   //             labelWidth: App.config.labelWidthLarge,\n   //             options: [\n   //                { id: \"default\", value: \"All matching records\" },\n   //                { id: \"single\", value: \"Single records only\" },\n   //             ],\n   //          },\n\n   //          {\n   //             view: \"layout\",\n   //             id: ids.filterUserLayout,\n   //             hidden: true,\n   //             cols: [\n   //                {\n   //                   view: \"radio\",\n   //                   vertical: true,\n   //                   id: ids.filterUser,\n   //                   value: \"toolbar\",\n   //                   label: \"Display\",\n   //                   labelWidth: App.config.labelWidthLarge,\n   //                   width: 200,\n   //                   options: [\n   //                      { id: \"toolbar\", value: \"Toolbar\" },\n   //                      { id: \"form\", value: \"Form\" },\n   //                   ],\n   //                   on: {\n   //                      onChange: (newValue) => {\n   //                         logic.setFilterUser(newValue);\n   //                      },\n   //                   },\n   //                },\n   //                {\n   //                   view: \"checkbox\",\n   //                   id: ids.globalToolbar,\n   //                   width: 350,\n   //                   labelRight: \"Include a global filter input\",\n   //                },\n   //                {},\n   //             ],\n   //          },\n\n   //          {\n   //             view: \"layout\",\n   //             id: ids.filterMenuLayout,\n   //             hidden: true,\n   //             rows: [\n   //                {\n   //                   css: { \"padding-bottom\": 10 },\n   //                   cols: [\n   //                      {\n   //                         view: \"button\",\n   //                         css: \"webix_primary\",\n   //                         icon: \"fa fa-plus\",\n   //                         type: \"iconButton\",\n   //                         label: labels.component.addNewFilter,\n   //                         width: 150,\n   //                         click: () => {\n   //                            logic.addFilterRule();\n   //                         },\n   //                      },\n   //                      {\n   //                         view: \"label\",\n   //                         label: '*need \"LoadAll\" from datasource',\n   //                         css: { color: \"red\" },\n   //                         id: ids.needLoadAllLabel,\n   //                         hidden: true,\n   //                      },\n   //                      { fillspace: true },\n   //                   ],\n   //                },\n   //                {\n   //                   view: \"scrollview\",\n   //                   id: ids.filterRulesScrollview,\n   //                   scroll: \"xy\",\n   //                   body: {\n   //                      view: \"layout\",\n   //                      id: ids.filterRules,\n   //                      margin: 20,\n   //                      padding: 10,\n   //                      rows: [],\n   //                   },\n   //                },\n   //             ],\n   //          },\n   //          {\n   //             css: { \"background-color\": \"#fff\" },\n   //             cols: [\n   //                { fillspace: true },\n   //                {\n   //                   view: \"button\",\n   //                   name: \"cancel\",\n   //                   value: labels.common.cancel,\n   //                   css: \"ab-cancel-button\",\n   //                   autowidth: true,\n   //                   click: function () {\n   //                      logic.buttonCancel();\n   //                   },\n   //                },\n   //                {\n   //                   view: \"button\",\n   //                   css: \"webix_primary\",\n   //                   name: \"save\",\n   //                   label: labels.common.save,\n   //                   type: \"form\",\n   //                   autowidth: true,\n   //                   click: function () {\n   //                      logic.buttonSave();\n   //                   },\n   //                },\n   //                { fillspace: true },\n   //             ],\n   //          },\n   //       ],\n   //    };\n\n   //    let init = (options) => {\n   //       // register callbacks:\n   //       for (var c in logic.callbacks) {\n   //          logic.callbacks[c] = options[c] || logic.callbacks[c];\n   //       }\n   //    };\n\n   //    let instance = this;\n   //    instance.queryRules = [];\n\n   //    let logic = {\n   //       callbacks: {\n   //          onCancel: function () {\n   //             console.warn(\"NO onCancel()!\");\n   //          },\n   //          onSave: function () {\n   //             console.warn(\"NO onSave()!\");\n   //          },\n   //       },\n\n   //       buttonCancel: function () {\n   //          logic.callbacks.onCancel();\n   //       },\n\n   //       buttonSave: () => {\n   //          logic.callbacks.onSave();\n   //       },\n\n   //       objectLoad(object, isLoadAll = false) {\n   //          instance.object = object;\n   //          instance.isLoadAll = isLoadAll;\n\n   //          //tell each of our rules about our object\n   //          if (instance.queryRules && instance.queryRules.length) {\n   //             instance.queryRules.forEach((r) => {\n   //                r.objectLoad(object);\n   //             });\n   //          }\n   //       },\n\n   //       setSettings(settings = {}) {\n   //          //Convert some condition from string to integer\n   //          (settings.queryRules || []).forEach((qr) => {\n   //             if (\n   //                qr &&\n   //                qr.queryRules &&\n   //                qr.queryRules[0] &&\n   //                qr.queryRules[0].rules\n   //             ) {\n   //                qr.queryRules[0].rules.forEach((rule) => {\n   //                   if (/^[+-]?\\d+(\\.\\d+)?$/.exec(rule.value)) {\n   //                      rule.value = JSON.parse(rule.value);\n   //                   }\n   //                });\n   //             }\n   //          });\n\n   //          $$(ids.filterOptionRadio).setValue(settings.filterOption);\n   //          $$(ids.filterUser).setValue(\n   //             settings.userFilterPosition ||\n   //                ABViewPropertyFilterData.default.userFilterPosition\n   //          );\n   //          $$(ids.globalToolbar).setValue(\n   //             typeof settings.isGlobalToolbar != \"undefined\"\n   //                ? settings.isGlobalToolbar\n   //                : ABViewPropertyFilterData.default.isGlobalToolbar\n   //          );\n\n   //          $$(ids.filterGlobal).setValue(\n   //             settings.globalFilterPosition ||\n   //                ABViewPropertyFilterData.default.globalFilterPosition\n   //          );\n\n   //          // clear any existing Rules:\n   //          if (instance.queryRules && instance.queryRules.length > 0) {\n   //             instance.queryRules.forEach((rule) => {\n   //                if ($$(ids.filterRules))\n   //                   $$(ids.filterRules).removeView(rule.ids.component);\n   //             });\n   //          }\n   //          instance.queryRules = [];\n\n   //          (settings.queryRules || []).forEach((ruleSettings) => {\n   //             logic.addFilterRule(ruleSettings);\n   //          });\n   //       },\n\n   //       getSettings() {\n   //          var settings = this.settings || {};\n   //          settings.filterOption = parseInt(\n   //             $$(ids.filterOptionRadio).getValue()\n   //          );\n   //          settings.queryRules = [];\n\n   //          switch (settings.filterOption) {\n   //             case 0: // Disable User filters\n   //                settings.isGlobalToolbar = 0;\n   //                break;\n   //             case 1: // Enable User filters\n   //                settings.userFilterPosition = $$(ids.filterUser).getValue();\n\n   //                settings.isGlobalToolbar = $$(ids.globalToolbar).getValue();\n   //                break;\n   //             case 2: // Use a filter menu\n   //                instance.queryRules.forEach((r) => {\n   //                   settings.queryRules.push(r.toSettings());\n   //                });\n   //                break;\n   //             case 3: // Use a global filter menu\n   //                settings.globalFilterPosition = $$(\n   //                   ids.filterGlobal\n   //                ).getValue();\n   //                break;\n   //          }\n\n   //          return settings;\n   //       },\n\n   //       /**\n   //        * @method addFilterRule\n   //        * Instantiate a new Rule in our list.\n   //        * @param {obj} settings  The settings object from the Rule we created in .toSettings()\n   //        */\n   //       addFilterRule(settings) {\n   //          if (instance.object == null) return;\n\n   //          var Rule = getRule(instance.object, App, idBase);\n   //          instance.queryRules.push(Rule);\n\n   //          // if we have tried to create our component:\n   //          if (ids) {\n   //             // if our actually exists, then populate it:\n   //             var RulesUI = $$(ids.filterRules);\n   //             if (RulesUI) {\n   //                // make sure Rule.ui is created before calling .init()\n   //                Rule.component(App, idBase); // prepare the UI component\n   //                var viewId = RulesUI.addView(Rule.ui);\n   //                Rule.showQueryBuilderContainer();\n   //                Rule.init({\n   //                   onDelete: (deletedRule) => {\n   //                      $$(ids.filterRules).removeView(Rule.ids.component);\n\n   //                      var index = instance.queryRules.indexOf(deletedRule);\n   //                      if (index !== -1) {\n   //                         instance.queryRules.splice(index, 1);\n   //                      }\n   //                   },\n   //                });\n   //             }\n   //          }\n\n   //          if (settings) {\n   //             Rule.fromSettings(settings);\n   //          }\n   //       },\n\n   //       onShow: function () {\n   //          if (!this.isLoadAll) {\n   //             $$(ids.needLoadAllLabel).show();\n   //          } else {\n   //             $$(ids.needLoadAllLabel).hide();\n   //          }\n   //       },\n\n   //       setFilterOption: function (value) {\n   //          switch (JSON.parse(value || 0)) {\n   //             case 1: // Enable User filters\n   //                $$(ids.filterMenuLayout).hide();\n   //                $$(ids.filterGlobal).hide();\n   //                $$(ids.filterUserLayout).show();\n   //                break;\n   //             case 2: // Use a filter menu\n   //                $$(ids.filterUserLayout).hide();\n   //                $$(ids.filterGlobal).hide();\n   //                $$(ids.filterMenuLayout).show();\n   //                break;\n   //             case 3: // Use a global filter menu\n   //                $$(ids.filterUserLayout).hide();\n   //                $$(ids.filterMenuLayout).hide();\n   //                $$(ids.filterGlobal).show();\n   //                break;\n   //             case 0:\n   //             default:\n   //                // Do not Allow User filters\n   //                $$(ids.filterUserLayout).hide();\n   //                $$(ids.filterMenuLayout).hide();\n   //                $$(ids.filterGlobal).hide();\n   //                break;\n   //          }\n   //       },\n\n   //       setFilterUser: (val) => {\n   //          switch (val) {\n   //             case \"toolbar\":\n   //                $$(ids.globalToolbar).show();\n   //                break;\n   //             case \"form\":\n   //                $$(ids.globalToolbar).hide();\n   //                break;\n   //          }\n   //       },\n   //    };\n\n   //    return {\n   //       ui: ui,\n   //       init: init,\n   //       logic: logic,\n   //       onShow: logic.onShow,\n   //       objectLoad: logic.objectLoad,\n   //       setSettings: logic.setSettings,\n   //       getSettings: logic.getSettings,\n   //    };\n   // }\n\n   /**\n    * @method fromSettings\n    * Create an initial set of default values based upon our settings object.\n    * @param {obj} settings  The settings object we created in .toSettings()\n    */\n   fromSettings(settings) {\n      settings = settings || {};\n\n      settings.filterOption =\n         typeof settings.filterOption != \"undefined\"\n            ? settings.filterOption\n            : ABViewPropertyFilterData.default.filterOption;\n\n      settings.isGlobalToolbar =\n         typeof settings.isGlobalToolbar != \"undefined\"\n            ? settings.isGlobalToolbar\n            : ABViewPropertyFilterData.default.isGlobalToolbar;\n\n      this.settings = settings;\n   }\n\n   /**\n    * @method objectLoad\n    * A rule is based upon a Form that was working with an Object.\n    * .objectLoad() is how we specify which object we are working with.\n    *\n    * @param {ABObject} The object that will be used to evaluate the Rules\n    */\n   objectLoad(object) {\n      this.object = object;\n\n      //tell each of our rules about our object\n      // if (this.queryRules &&\n      // \tthis.queryRules.length) {\n      // \tthis.queryRules.forEach((r) => {\n      // \t\tr.objectLoad(object);\n      // \t});\n      // }\n\n      if (this.rowFilter) {\n         // this.rowFilter.applicationLoad(object.application);\n         this.rowFilter.fieldsLoad(object.fields());\n      }\n\n      if (this.rowFilterForm) {\n         // this.rowFilterForm.applicationLoad(object.application);\n         this.rowFilterForm.fieldsLoad(object.fields());\n      }\n   }\n\n   viewLoad(view) {\n      this.view = view;\n   }\n\n   /** == UI == */\n   ui() {\n      var self = this;\n      var ids = this.ids;\n\n      return {\n         id: ids.filterPanel,\n         type: \"space\",\n         borderless: true,\n         padding: 0,\n         rows: [\n            {\n               id: ids.globalFilterFormContainer,\n               hidden: true,\n               cols: [\n                  {\n                     id: ids.globalFilterForm,\n                     view: \"text\",\n                     placeholder: L(\"Search or scan a barcode to see results\"),\n                     on: {\n                        onTimedKeyPress: () => {\n                           this.triggerCallback();\n                           // var searchText = this.getValue();\n\n                           // self.searchText(searchText);\n                        },\n                     },\n                  },\n                  {\n                     view: \"button\",\n                     css: \"webix_primary\",\n                     width: 28,\n                     type: \"icon\",\n                     icon: \"fa fa-times\",\n                     click: function () {\n                        var $form = $$(ids.globalFilterForm);\n                        $form.setValue(\"\");\n                        $form.focus();\n                        $form.callEvent(\"onTimedKeyPress\");\n                     },\n                  },\n               ],\n            },\n            this.rowFilterForm.ui,\n            {\n               view: \"toolbar\",\n               id: ids.filterMenutoolbar,\n               css: \"ab-data-toolbar\",\n               hidden: true,\n               cols: [\n                  {\n                     view: \"button\",\n                     css: \"webix_primary\",\n                     id: ids.resetFilterButton,\n                     label: L(\"Reset Filter\"),\n                     icon: \"fa fa-ban\",\n                     type: \"icon\",\n                     badge: 0,\n                     autowidth: true,\n                     click: function () {\n                        self.resetFilter();\n                     },\n                  },\n               ],\n            },\n         ],\n      };\n   }\n\n   async init(AB) {\n      if (AB) {\n         this.AB = AB;\n      }\n\n      var ids = this.ids;\n      // this.filter_popup = webix.ui({\n      //    view: \"popup\",\n      //    id: ids.component,\n      //    width: 600,\n      //    height: 400,\n      //    hidden: true,\n      //    body: this.rowFilter.ui,\n      // });\n\n      this.rowFilter.init();\n      this.rowFilter.on(\"changed\", (value) => {\n         let filterRules = value.rules || [];\n\n         // if ($$(ids.buttonFilter)) {\n         // \t$$(ids.buttonFilter).define('badge', filterRules.length || null);\n         // \t$$(ids.buttonFilter).refresh();\n         // }\n\n         // be notified when there is a change in the filter\n         this.triggerCallback((rowData) => {\n            return this.rowFilter.isValid(rowData);\n         }, filterRules);\n      });\n\n      this.rowFilterForm.init();\n      this.rowFilterForm.on(\"changed\", () => {\n         this.triggerCallback();\n      });\n\n      $$(ids.filterPanel)?.hide();\n      if ($$(this.rowFilterForm.ui.id)) $$(this.rowFilterForm.ui.id).hide();\n      $$(ids.filterMenutoolbar).hide();\n      $$(ids.globalFilterFormContainer).hide();\n\n      switch (this.settings.filterOption) {\n         case 0:\n            break;\n         case 1:\n            switch (this.settings.userFilterPosition) {\n               case \"form\":\n                  $$(this.rowFilterForm.ui.id).show();\n                  $$(ids.filterPanel).show();\n                  break;\n               case \"toolbar\":\n                  $$(ids.filterPanel).hide();\n                  break;\n            }\n            break;\n         case 2:\n            $$(ids.filterPanel).show();\n            var $filterMenutoolbar = $$(ids.filterMenutoolbar);\n            if ($filterMenutoolbar) {\n               $filterMenutoolbar.show();\n\n               // populate filter items\n               if (this.settings?.queryRules) {\n                  (this.settings.queryRules || []).forEach((qr) => {\n                     var filterRuleButton = {\n                        view: \"button\",\n                        css: \"webix_primary\",\n                        label: qr.ruleName,\n                        icon: \"fa fa-filter\",\n                        type: \"icon\",\n                        badge: 0,\n                        autowidth: true,\n                        click: () => {\n                           this.selectFilter(qr.queryRules);\n                        },\n                     };\n                     $filterMenutoolbar.addView(filterRuleButton);\n                  });\n               }\n            }\n            break;\n         case 3:\n            $$(ids.globalFilterFormContainer).show();\n            $$(ids.filterPanel).show();\n            break;\n      }\n   }\n\n   filterRules() {\n      let rowFilterRules = null;\n\n      switch (this.settings.userFilterPosition) {\n         case \"form\":\n            rowFilterRules = this.rowFilterForm.getValue();\n            break;\n         case \"toolbar\":\n            rowFilterRules = this.rowFilter.getValue();\n            break;\n      }\n\n      return rowFilterRules;\n   }\n\n   /**\n    * @method triggerCallback()\n    * We compile our current search options and emit them back to our\n    * parent container.\n    */\n   triggerCallback(/*fnFilter, filterRules*/) {\n      let searchRules = this.searchText(this.__externalSearchText);\n      let rowFilterRules = this.filterRules();\n\n      if (rowFilterRules?.rules?.length) {\n         if (searchRules) {\n            rowFilterRules = {\n               glue: \"and\",\n               rules: [rowFilterRules, searchRules],\n            };\n         }\n      } else {\n         rowFilterRules = searchRules;\n      }\n\n      this.emit(\"filter.data\", null, rowFilterRules);\n   }\n\n   resetFilter() {\n      this.triggerCallback(() => true, []);\n   }\n\n   /**\n    * @method externalSearchText()\n    * Save any search criteria established from outside this filterHelper.\n    * NOTE: The ABViewGrid has a toolbar search entry that will provide\n    * this value.\n    * @param {string} search\n    *        The typed in search criteria.\n    */\n   externalSearchText(search = null) {\n      this.__externalSearchText = search;\n      this.triggerCallback(); // update each time\n   }\n\n   /**\n    * @method searchText()\n    * Retrieve the typed in search terms from the user, and convert them\n    * into a set of Rules that will modify our results.\n    * If an external search param is provided, use that instead.\n    * @param {string} externalText\n    * @return {json} The QB Rule condition for the search criteria\n    */\n   searchText(externalText) {\n      var search;\n      if (externalText) {\n         search = externalText;\n      } else {\n         search = ($$(this.ids.globalFilterForm).getValue() || \"\").trim();\n      }\n      if (!search) return null; // <-- includes \"\"\n\n      // find the individual \"terms\" that we should search for\n      let terms = search.trim().toLowerCase().split(\" \");\n\n      // build a set of conditions for each term\n      var allTerms = [];\n\n      var allFields = this.object?.fields() || [];\n\n      terms.forEach((t) => {\n         var fieldTerms = [];\n\n         // for each field, add a match condition for that field\n         // (if the field applies)\n         allFields.forEach((f) => {\n            if (f.fieldIsFilterable()) {\n               switch (f.key) {\n                  case \"string\":\n                  case \"LongText\":\n                  case \"email\":\n                     fieldTerms.push({\n                        key: f.id,\n                        rule: \"contains\",\n                        value: t,\n                     });\n                     break;\n\n                  case \"list\":\n                     var options = f.options();\n                     options.forEach((o) => {\n                        if (o.text.indexOf(t) > -1) {\n                           fieldTerms.push({\n                              key: f.id,\n                              rule: \"equals\",\n                              value: o.id,\n                           });\n                        }\n                     });\n                     break;\n               }\n            }\n         });\n\n         if (fieldTerms.length > 0) {\n            allTerms.push({\n               glue: \"or\",\n               rules: fieldTerms,\n            });\n         }\n      });\n\n      if (allTerms.length > 0) {\n         var searchRules = {\n            glue: \"and\",\n            rules: allTerms,\n         };\n         return searchRules;\n      } else {\n         return null;\n      }\n\n      // let isTextValid = (rowData) => {\n      //    var isValid = false;\n\n      //    // if empty search text in global single mode, then no display rows\n      //    if (\n      //       this.settings.filterOption == 3 &&\n      //       this.settings.globalFilterPosition == \"single\" &&\n      //       search.replace(/ /g, \"\") == \"\"\n      //    ) {\n      //       return isValid;\n      //    }\n\n      //    for (let key in rowData || {}) {\n      //       if (isValid || key == \"uuid\" || key == \"id\") continue;\n\n      //       texts.forEach((text) => {\n      //          if (\n      //             rowData[key] &&\n      //             rowData[key].toString().toLowerCase().indexOf(text) > -1\n      //          )\n      //             isValid = true;\n      //       });\n      //    }\n\n      //    return isValid;\n      // };\n\n      // this.triggerCallback(isTextValid);\n\n      // var table = $$(DataTable.ui.id);\n      // var columns = table.config.columns;\n      // var count = 0;\n      // var matchArray = [];\n      // table.filter(function (obj) {\n      //    matchArray = [];\n      //    // console.log(\"filter\", obj);\n      //    for (var i = 0; i < columns.length; i++) {\n      //       for (var x = 0; x < text.length; x++) {\n      //          var searchFor = text[x];\n      //          if (obj[columns[i].id] && obj[columns[i].id].toString().toLowerCase().indexOf(searchFor) !== -1) {\n      //             // console.log(\"matched on:\", searchFor);\n      //             if (matchArray.indexOf(searchFor) == -1) {\n      //                matchArray.push(searchFor);\n      //             }\n      //          }\n      //       }\n      //    }\n\n      //    if (matchArray.length == text.length) {\n      //       count++;\n      //       return true;\n      //    } else {\n      //       return false;\n      //    }\n      // });\n      // if (globalFilterPosition == \"single\") {\n      //    if (count == 1) {\n      //       table.show();\n      //       table.select(table.getFirstId(), false);\n      //       table.callEvent(\"onItemClick\", [table.getFirstId(), \"auto\", null]);\n      //    } else {\n      //       table.hide();\n      //    }\n      // }\n   }\n\n   showPopup($view) {\n      // this.filter_popup.show($view, null, { pos: \"top\" });\n      this.rowFilter.popUp($view);\n   }\n\n   /**\n    * @param {object} App\n    *      The shared App object that is created in OP.Component\n    * @param {string} idBase\n    *      Identifier for this component\n    */\n   component(App, idBase) {\n      super.component(App, idBase);\n\n      this.App = App;\n      this.idBase = idBase;\n\n      this.rowFilter = this.AB.filterComplexNew(`${idBase}_filter`);\n      this.rowFilterForm = this.AB.filterComplexNew(`${idBase}_filter_form`);\n\n      if (this.object) {\n         // this.rowFilter.applicationLoad(this.object.application);\n         this.rowFilter.fieldsLoad(this.object.fields());\n\n         // this.rowFilterForm.applicationLoad(this.object.application);\n         this.rowFilterForm.fieldsLoad(this.object.fields());\n      }\n\n      let ids = {\n         /** UI */\n         filterPanel: App.unique(`${idBase}_filterPanel`),\n         globalFilterFormContainer: App.unique(\n            `${idBase}_globalFilterFormContainer`\n         ),\n         globalFilterForm: App.unique(`${idBase}_globalFilterForm`),\n         filterMenutoolbar: App.unique(`${idBase}_filterMenuToolbar`),\n         resetFilterButton: App.unique(`${idBase}_resetFilterButton`),\n         component: App.unique(`${idBase}_filterData_popup`),\n      };\n\n      let instance = this;\n\n      // hide filter form\n      this.rowFilterForm.ui.hidden = true;\n\n      let _ui = {\n         id: ids.filterPanel,\n         type: \"space\",\n         borderless: true,\n         padding: 0,\n         rows: [\n            {\n               id: ids.globalFilterFormContainer,\n               hidden: true,\n               cols: [\n                  {\n                     id: ids.globalFilterForm,\n                     view: \"text\",\n                     placeholder: L(\"Search or scan a barcode to see results\"),\n                     on: {\n                        onTimedKeyPress: function () {\n                           var searchText = this.getValue();\n\n                           logic.searchText(searchText);\n                        },\n                     },\n                  },\n                  {\n                     view: \"button\",\n                     css: \"webix_primary\",\n                     width: 28,\n                     type: \"icon\",\n                     icon: \"fa fa-times\",\n                     click: function () {\n                        $$(ids.globalFilterForm).setValue(\"\");\n                        $$(ids.globalFilterForm).focus();\n                        $$(ids.globalFilterForm).callEvent(\"onTimedKeyPress\");\n                     },\n                  },\n               ],\n            },\n            this.rowFilterForm.ui,\n            {\n               view: \"toolbar\",\n               id: ids.filterMenutoolbar,\n               css: \"ab-data-toolbar\",\n               hidden: true,\n               cols: [\n                  {\n                     view: \"button\",\n                     css: \"webix_primary\",\n                     id: ids.resetFilterButton,\n                     label: L(\"Reset Filter\"),\n                     icon: \"fa fa-ban\",\n                     type: \"icon\",\n                     badge: 0,\n                     autowidth: true,\n                     click: function () {\n                        logic.resetFilter();\n                     },\n                  },\n               ],\n            },\n         ],\n      };\n\n      let init = (options) => {\n         // this.filter_popup = webix.ui({\n         //    view: \"popup\",\n         //    id: ids.component,\n         //    width: 800,\n         //    hidden: true,\n         //    body: this.rowFilter.ui,\n         // });\n\n         // register callbacks:\n         for (var c in logic.callbacks) {\n            logic.callbacks[c] = options[c] || logic.callbacks[c];\n         }\n\n         this.rowFilter.init({\n            //    onChange: () => {\n            //       let filterRules = this.rowFilter.getValue().rules || [];\n            //       // if ($$(ids.buttonFilter)) {\n            //       // \t$$(ids.buttonFilter).define('badge', filterRules.length || null);\n            //       // \t$$(ids.buttonFilter).refresh();\n            //       // }\n            //       // be notified when there is a change in the filter\n            //       logic.triggerCallback((rowData) => {\n            //          return this.rowFilter.isValid(rowData);\n            //       }, filterRules);\n            //    },\n         });\n\n         this.rowFilterForm.init({\n            //    onChange: () => {\n            //       let filterRules = this.rowFilterForm.getValue().rules || [];\n            //       // be notified when there is a change in the filter\n            //       logic.triggerCallback((rowData) => {\n            //          return this.rowFilterForm.isValid(rowData);\n            //       }, filterRules);\n            //    },\n         });\n\n         $$(ids.filterPanel).hide();\n         if ($$(this.rowFilterForm.ui.id)) $$(this.rowFilterForm.ui.id).hide();\n         $$(ids.filterMenutoolbar).hide();\n         $$(ids.globalFilterFormContainer).hide();\n\n         switch (this.settings.filterOption) {\n            case 0:\n               break;\n            case 1:\n               switch (this.settings.userFilterPosition) {\n                  case \"form\":\n                     $$(this.rowFilterForm.ui.id).show();\n                     $$(ids.filterPanel).show();\n                     break;\n                  case \"toolbar\":\n                     $$(ids.filterPanel).hide();\n                     break;\n               }\n\n               break;\n            case 2:\n               $$(ids.filterPanel).show();\n               $$(ids.filterMenutoolbar).show();\n\n               // populate filter items\n               if (\n                  this.settings.queryRules &&\n                  this.settings.queryRules.length > 0\n               ) {\n                  this.settings.queryRules.forEach((qr) => {\n                     var filterRuleButton = {\n                        view: \"button\",\n                        css: \"webix_primary\",\n                        label: qr.ruleName,\n                        icon: \"fa fa-filter\",\n                        type: \"icon\",\n                        badge: 0,\n                        autowidth: true,\n                        click: function () {\n                           logic.selectFilter(qr.queryRules);\n                        },\n                     };\n                     $$(ids.filterMenutoolbar).addView(filterRuleButton);\n                  });\n               }\n               break;\n            case 3:\n               $$(ids.globalFilterFormContainer).show();\n               $$(ids.filterPanel).show();\n               break;\n         }\n      };\n\n      let logic = {\n         callbacks: {\n            /**\n             * @param {function} fnFilter\n             */\n            onFilterData: function (/*fnFilter, filterRules*/) {\n               console.warn(\"NO onFilterData()\");\n            },\n         },\n\n         triggerCallback: (fnFilter, filterRules) => {\n            instance.__currentFilter = fnFilter;\n            logic.callbacks.onFilterData(this.__currentFilter, filterRules);\n            //// TODO: this.emit(\"filter.data\", )\n         },\n\n         resetFilter: () => {\n            let showAllFn = function (/* rowData */) {\n                  return true;\n               },\n               filterRules = [];\n\n            logic.triggerCallback(showAllFn, filterRules);\n         },\n\n         selectFilter: (queryRules) => {\n            let id = \"hiddenQB_\" + webix.uid();\n\n            debugger;\n            console.error(\"::: TODO: refactor getRule()\");\n            let queryRule; /* = getRule(this.object, this.App, this.idBase); */\n\n            let ui = {\n               id: id,\n               hidden: true,\n               view: \"querybuilder\",\n               fields: queryRule?.conditionFields(),\n            };\n            let hiddenQB = webix.ui(ui);\n\n            hiddenQB.setValue(queryRules);\n\n            let QBHelper = hiddenQB.getFilterHelper();\n\n            hiddenQB.destructor(); // remove the QB\n\n            logic.triggerCallback(QBHelper);\n         },\n\n         getFilter() {\n            // default filter\n            if (instance.__currentFilter == null) {\n               // if empty search text in global single mode, then no display rows\n               if (\n                  instance.settings.filterOption == 3 &&\n                  instance.settings.globalFilterPosition == \"single\"\n               )\n                  instance.__currentFilter = (/* row */) => {\n                     return false;\n                  };\n               // always true, show every rows\n               else\n                  instance.__currentFilter = (/* row */) => {\n                     return true;\n                  };\n            }\n\n            return instance.__currentFilter;\n         },\n\n         showFilterPopup($view) {\n            instance.filter_popup.show($view, null, { pos: \"top\" });\n         },\n\n         closeFilterPopup() {\n            instance.filter_popup.hide();\n         },\n\n         // searchText(search) {\n         //    let texts = search.trim().toLowerCase().split(\" \");\n\n         //    let isTextValid = (rowData) => {\n         //       var isValid = false;\n\n         //       // if empty search text in global single mode, then no display rows\n         //       if (\n         //          instance.settings.filterOption == 3 &&\n         //          instance.settings.globalFilterPosition == \"single\" &&\n         //          search.replace(/ /g, \"\") == \"\"\n         //       ) {\n         //          return isValid;\n         //       }\n\n         //       for (let key in rowData || {}) {\n         //          if (isValid || key == \"uuid\" || key == \"id\") continue;\n\n         //          texts.forEach((text) => {\n         //             if (\n         //                rowData[key] &&\n         //                rowData[key].toString().toLowerCase().indexOf(text) > -1\n         //             )\n         //                isValid = true;\n         //          });\n         //       }\n\n         //       return isValid;\n         //    };\n\n         //    logic.triggerCallback(isTextValid);\n\n         //    // var table = $$(DataTable.ui.id);\n         //    // var columns = table.config.columns;\n         //    // var count = 0;\n         //    // var matchArray = [];\n         //    // table.filter(function (obj) {\n         //    // \tmatchArray = [];\n         //    // \t// console.log(\"filter\", obj);\n         //    // \tfor (var i = 0; i < columns.length; i++) {\n         //    // \t\tfor (var x = 0; x < text.length; x++) {\n         //    // \t\t\tvar searchFor = text[x];\n         //    // \t\t\tif (obj[columns[i].id] && obj[columns[i].id].toString().toLowerCase().indexOf(searchFor) !== -1) {\n         //    // \t\t\t\t// console.log(\"matched on:\", searchFor);\n         //    // \t\t\t\tif (matchArray.indexOf(searchFor) == -1) {\n         //    // \t\t\t\t\tmatchArray.push(searchFor);\n         //    // \t\t\t\t}\n         //    // \t\t\t}\n         //    // \t\t}\n         //    // \t}\n\n         //    // \tif (matchArray.length == text.length) {\n         //    // \t\tcount++;\n         //    // \t\treturn true;\n         //    // \t} else {\n         //    // \t\treturn false;\n         //    // \t}\n         //    // });\n         //    // if (globalFilterPosition == \"single\") {\n         //    // \tif (count == 1) {\n         //    // \t\ttable.show();\n         //    // \t\ttable.select(table.getFirstId(), false);\n         //    // \t\ttable.callEvent(\"onItemClick\", [table.getFirstId(), \"auto\", null]);\n         //    // \t} else {\n         //    // \t\ttable.hide();\n         //    // \t}\n         //    // }\n         // },\n      };\n\n      return {\n         ui: _ui,\n         init: init,\n         logic: logic,\n\n         showPopup: logic.showFilterPopup,\n         closePopup: logic.closeFilterPopup,\n\n         getFilter: logic.getFilter,\n\n         searchText: logic.searchText,\n      };\n   }\n}\n","import ABViewProperty from \"./ABViewProperty\";\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nexport default class ABViewPropertyLinkPage extends ABViewProperty {\n   constructor() {\n      super();\n   }\n\n   /**\n    * @property default\n    * return default settings\n    *\n    * @return {Object}\n    */\n   static get default() {\n      return {\n         detailsPage: null, // uuid\n         detailsTab: null, // uuid\n         editPage: null, // uuid\n         editTab: null, // uuid\n      };\n   }\n\n   static propertyComponent(App, idBase) {\n      let base = super.propertyComponent();\n      const uiConfig = this.AB.Config.uiSettings();\n\n      let ids = {\n         detailsPage: idBase + \"_linkPage_detailsPage\",\n         editPage: idBase + \"_linkPage_editPage\",\n      };\n\n      let labels = {\n         common: App.labels,\n         component: {\n            // header: L(\"ab.component.grid.filterMenu\", \"*Filter Menu\")\n         },\n      };\n\n      let ui = {\n         view: \"fieldset\",\n         label: L(\"Linked Pages:\"),\n         labelWidth: uiConfig.labelWidthLarge,\n         body: {\n            type: \"clean\",\n            padding: 10,\n            rows: [\n               {\n                  id: ids.detailsPage,\n                  view: \"select\",\n                  name: \"detailsPage\",\n                  label: L(\"Details Page:\"),\n                  labelWidth: uiConfig.labelWidthLarge,\n               },\n               {\n                  id: ids.editPage,\n                  view: \"select\",\n                  name: \"editPage\",\n                  label: L(\"Edit Form:\"),\n                  labelWidth: uiConfig.labelWidthLarge,\n               },\n            ],\n         },\n      };\n\n      let init = (options) => {\n         // register callbacks:\n         for (var c in logic.callbacks) {\n            logic.callbacks[c] = options[c] || logic.callbacks[c];\n         }\n      };\n\n      let logic = {\n         callbacks: {\n            // onCancel: function () { console.warn('NO onCancel()!') },\n         },\n\n         viewLoad: (view) => {\n            this.view = view;\n\n            let filter = (v, widgetKey) => {\n               return (\n                  v.key == widgetKey &&\n                  v.settings.dataviewID == view.settings.dataviewID\n               );\n            };\n\n            // Set the options of the possible detail views\n            let pagesHasDetail = [];\n\n            pagesHasDetail = pagesHasDetail.concat(\n               view\n                  .pageRoot()\n                  .views((v) => {\n                     return filter(v, \"detail\");\n                  }, true)\n                  .map((p) => {\n                     return {\n                        id: p.id,\n                        value: p.label,\n                     };\n                  })\n            );\n\n            pagesHasDetail = pagesHasDetail.concat(\n               view\n                  .pageRoot()\n                  .pages((p) => {\n                     return p.views((v) => {\n                        return filter(v, \"detail\");\n                     }, true).length;\n                  }, true)\n                  .map((p) => {\n                     return {\n                        id: p.id,\n                        value: p.label,\n                     };\n                  })\n            );\n\n            pagesHasDetail.unshift({\n               id: \"\",\n               value: L(\"No linked view\"),\n            });\n            $$(ids.detailsPage).define(\"options\", pagesHasDetail);\n            $$(ids.detailsPage).refresh();\n\n            // Set the options of the possible edit forms\n            let pagesHasForm = [];\n\n            pagesHasForm = pagesHasForm.concat(\n               view\n                  .pageRoot()\n                  .views((v) => {\n                     return filter(v, \"form\");\n                  }, true)\n                  .map((p) => {\n                     return {\n                        id: p.id,\n                        value: p.label,\n                     };\n                  })\n            );\n\n            pagesHasForm = pagesHasForm.concat(\n               view\n                  .pageRoot()\n                  .pages((p) => {\n                     return p.views((v) => {\n                        return filter(v, \"form\");\n                     }, true).length;\n                  }, true)\n                  .map((p) => {\n                     return {\n                        id: p.id,\n                        value: p.label,\n                     };\n                  })\n            );\n\n            pagesHasForm.unshift({\n               id: \"\",\n               value: L(\"No linked form\"),\n            });\n            $$(ids.editPage).define(\"options\", pagesHasForm);\n            $$(ids.editPage).refresh();\n         },\n\n         setSettings: (settings) => {\n            var details = settings.detailsPage;\n            if (settings.detailsTab != \"\") {\n               details += \":\" + settings.detailsTab;\n            }\n            $$(ids.detailsPage).setValue(details);\n\n            var edit = settings.editPage;\n            if (settings.editTab != \"\") {\n               edit += \":\" + settings.editTab;\n            }\n            $$(ids.editPage).setValue(edit);\n         },\n\n         getSettings: () => {\n            let settings = {};\n\n            var detailsPage = $$(ids.detailsPage).getValue();\n            var detailsTab = \"\";\n            if (detailsPage.split(\":\").length > 1) {\n               var detailsVals = detailsPage.split(\":\");\n               detailsPage = detailsVals[0];\n               detailsTab = detailsVals[1];\n            }\n            settings.detailsPage = detailsPage;\n            settings.detailsTab = detailsTab;\n\n            var editPage = $$(ids.editPage).getValue();\n            var editTab = \"\";\n            if (editPage.split(\":\").length > 1) {\n               var editVals = editPage.split(\":\");\n               editPage = editVals[0];\n               editTab = editVals[1];\n            }\n            settings.editPage = editPage;\n            settings.editTab = editTab;\n\n            return settings;\n         },\n      };\n\n      return {\n         ui: ui,\n         init: init,\n         logic: logic,\n\n         viewLoad: logic.viewLoad,\n         setSettings: logic.setSettings,\n         getSettings: logic.getSettings,\n      };\n   }\n\n   /** == UI == */\n   /**\n    * @param {object} App\n    *      The shared App object that is created in OP.Component\n    * @param {string} idBase\n    *      Identifier for this component\n    */\n   component(App, idBase) {\n      let base = super.component(App, idBase);\n\n      /**\n       * @method init\n       * @param {Object} options - {\n       * \t\t\t\t\t\t\t\tview: {ABView},\n       * \t\t\t\t\t\t\t\tdatacollection: {ABDatacollection}\n       * \t\t\t\t\t\t\t}\n       */\n      let init = (options) => {\n         base.init(options);\n\n         if (options.view) this.view = options.view;\n\n         if (options.datacollection)\n            this.datacollection = options.datacollection;\n      };\n\n      let logic = {\n         changePage: (pageId, rowId) => {\n            if (this.datacollection) this.datacollection.setCursor(rowId);\n\n            if (this.view) this.view.changePage(pageId);\n         },\n      };\n\n      return {\n         ui: base.ui,\n         init: init,\n         logic: logic,\n\n         changePage: logic.changePage,\n      };\n   }\n}\n","// ABObjectWorkspaceView.js\n//\n// Manages the settings for a view in the AppBuilder Object Workspace\n\nmodule.exports = class ABObjectWorkspaceView {\n   constructor(attributes, object, defaultLabel) {\n      this.defaultLabel = defaultLabel || \"default view\";\n      /*\n\t{\n\t\tid:uuid(),\n\n\t}\n\n*/\n      // Note: keep this before .fromObj()\n      this.object = object;\n\n      this.fromObj(attributes || {});\n\n      // multilingual fields: label\n      this.object.translate(this, this, [\"label\"]);\n\n      // user ids.  if has user id, then only those users can see this.\n      // this.users = [];\n   }\n\n   /**\n    * unique key describing this View.\n    * @return {string}\n    */\n   static type() {\n      return \"view\";\n   }\n\n   /**\n    * @method fromObj\n    * take our persisted data, and properly load it\n    * into this object instance.\n    * @param {json} data  the persisted data\n    */\n   fromObj(data) {\n      this.id = data.id || this.object.AB.uuid();\n      this.isDefaultView = JSON.parse(data.isDefaultView || false);\n      this.translations =\n         data.translations ||\n         this.object.defaultTranslations([\"label\"], {\n            label: this.defaultLabel,\n         });\n   }\n\n   /**\n    * @method toObj()\n    * compile our current state into a {json} object\n    * that can be persisted.\n    */\n   toObj() {\n      this.object.unTranslate(this, this, [\"label\"]);\n      return {\n         id: this.id,\n         translations: this.translations,\n         isDefaultView: this.isDefaultView,\n      };\n   }\n\n   update(view) {\n      for (var key in view) {\n         this[key] = view[key];\n      }\n   }\n};\n","// ABObjectWorkspaceViewCollection.js\n//\n// Manages the settings for a collection of views in the AppBuilder Object Workspace\n\nconst ABObjectWorkspaceViewGrid = require(\"./ABObjectWorkspaceViewGrid\");\nconst ABObjectWorkspaceViewKanban = require(\"./ABObjectWorkspaceViewKanban\");\nconst ABObjectWorkspaceViewGantt = require(\"./ABObjectWorkspaceViewGantt\");\n\nvar hashViews = {};\nhashViews[ABObjectWorkspaceViewGrid.type()] = ABObjectWorkspaceViewGrid;\nhashViews[ABObjectWorkspaceViewKanban.type()] = ABObjectWorkspaceViewKanban;\nhashViews[ABObjectWorkspaceViewGantt.type()] = ABObjectWorkspaceViewGantt;\n\nconst defaultAttributes = {\n   currentViewID: undefined,\n   list: [],\n};\n\nmodule.exports = class ABObjectWorkspaceViewCollection {\n   constructor(attributes, object, AB) {\n      // link me to my parent ABObject\n      this.object = object;\n      this.AB = AB;\n\n      this.fromObj(attributes);\n   }\n\n   /**\n    * @method fromObj\n    * take our persisted data, and properly load it\n    * into this object instance.\n    * @param {json} data  the persisted data\n    */\n   fromObj(data) {\n      // import our Workspace View Objects\n      data.objectWorkspaceViews =\n         data.objectWorkspaceViews && data.objectWorkspaceViews.list\n            ? data.objectWorkspaceViews\n            : defaultAttributes;\n\n      // Temp\n      // data.objectWorkspaceViews = defaultAttributes;\n\n      if (\n         data.objectWorkspaceViews.list.filter((v) => v.isDefaultView)\n            .length === 0\n      ) {\n         // We should always have at least one default grid view. So if this list\n         // is empty we can assume we're 'upgrading' from the old single-view workspace...\n\n         /// So we import the 'old' format workspace settings\n         if (typeof data.objectWorkspace != \"undefined\") {\n            if (typeof data.objectWorkspace.sortFields == \"undefined\")\n               data.objectWorkspace.sortFields = [];\n            if (typeof data.objectWorkspace.filterConditions == \"undefined\")\n               data.objectWorkspace.filterConditions = [];\n            if (typeof data.objectWorkspace.frozenColumnID == \"undefined\")\n               data.objectWorkspace.frozenColumnID = \"\";\n            if (typeof data.objectWorkspace.hiddenFields == \"undefined\")\n               data.objectWorkspace.hiddenFields = [];\n         }\n\n         // ...and initialize our grid view attributes\n         var gridAttributes = data.objectWorkspace || {\n            sortFields: [], // array of columns with their sort configurations\n            filterConditions: [], // array of filters to apply to the data table\n            frozenColumnID: \"\", // id of column you want to stop freezing\n            hiddenFields: [], // array of [ids] to add hidden:true to\n         };\n         gridAttributes.isDefaultView = true;\n\n         var defaultGrid = new ABObjectWorkspaceViewGrid(\n            gridAttributes,\n            this.object\n         );\n         data.objectWorkspaceViews.list.unshift(defaultGrid);\n      }\n\n      this.importViews(data.objectWorkspaceViews);\n\n      this.currentViewID = data.objectWorkspaceViews.currentViewID;\n      if (!this.currentViewID) {\n         this.currentViewID = this.list()[0].id;\n      }\n   }\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABApplication instance\n    * into the values needed for saving to the DB.\n    *\n    * Most of the instance data is stored in .json field, so be sure to\n    * update that from all the current values of our child fields.\n    *\n    * @return {json}\n    */\n   toObj() {\n      return {\n         currentViewID: this.currentViewID,\n         list: this.exportViews(),\n      };\n   }\n\n   list(fn = () => true) {\n      return this._views.filter(fn);\n   }\n\n   importViews(viewSettings) {\n      this._views = [];\n      viewSettings.list.forEach((view) => {\n         this.addView(view, false);\n      });\n   }\n\n   exportViews() {\n      var views = [];\n      this._views.forEach((view) => {\n         views.push(view.toObj());\n      });\n\n      return views;\n   }\n\n   setCurrentView(viewID) {\n      this.currentViewID = viewID;\n   }\n\n   getCurrentView() {\n      return this.list((v) => {\n         return v.id == this.currentViewID;\n      })[0];\n   }\n\n   addView(view, save = true) {\n      var newView = new hashViews[view.type](view, this.object);\n      this._views.push(newView);\n      if (save) {\n         this.object.save();\n      }\n      return newView;\n   }\n\n   removeView(view) {\n      var indexToRemove = this._views.indexOf(view);\n      this._views.splice(indexToRemove, 1);\n      if (view.id === this.currentViewID) {\n         this.currentViewID = this._views[0].id;\n      }\n      this.object.save();\n   }\n\n   updateView(viewToUpdate, view) {\n      var newView;\n      if (view.type === viewToUpdate.type) {\n         viewToUpdate.update(view);\n         newView = viewToUpdate;\n      } else {\n         newView = new hashViews[view.type](view, this.object);\n         var indexToRemove = this._views.indexOf(viewToUpdate);\n         this._views.splice(indexToRemove, 1, newView);\n         if (this.currentViewID === viewToUpdate.id) {\n            this.currentViewID = newView.id;\n         }\n      }\n      this.object.save();\n      return newView;\n   }\n};\n","// ABObjectWorkspaceViewComponent.js\n//\n\nmodule.exports = class ABObjectWorkspaceViewComponent {\n   constructor(options) {\n      this.elements =\n         options.elements ||\n         function () {\n            return [];\n         };\n      this.init = options.init || function () {};\n      this.validate =\n         options.validate ||\n         function () {\n            return true;\n         };\n      this.values =\n         options.values ||\n         function () {\n            return {};\n         };\n      this.logic = options.logic || {};\n   }\n};\n","// ABObjectWorkspaceViewGantt.js\n//\n// Manages the settings for a Gantt Chart View in the AppBuilder Object Workspace\n\nconst ABObjectWorkspaceView = require(\"./ABObjectWorkspaceView\");\nconst ABObjectWorkspaceViewComponent = require(\"./ABObjectWorkspaceViewComponent\");\n\nconst ABPopupNewDataField = require(\"../../../ABDesigner/ab_work_object_workspace_popupNewDataField\");\n\nconst ABFieldDate = require(\"../dataFields/ABFieldDate\");\nconst ABFieldNumber = require(\"../dataFields/ABFieldNumber\");\nconst ABFieldString = require(\"../dataFields/ABFieldString\");\nconst ABFieldLongText = require(\"../dataFields/ABFieldLongText\");\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nvar defaultValues = {\n   name: \"Default Gantt\",\n   filterConditions: [], // array of filters to apply to the data table\n   sortFields: [],\n   title: \"none\", // id of a ABFieldString, ABFieldLongText\n   startDate: null, // id of a ABFieldDate\n   endDate: \"none\", // id of a ABFieldDate\n   duration: \"none\", // id of a ABFieldNumber\n   progress: \"none\", // id of a ABFieldNumber\n   notes: \"none\", // id of a ABFieldString, ABFieldLongText\n};\n\nmodule.exports = class ABObjectWorkspaceViewGantt extends (\n   ABObjectWorkspaceView\n) {\n   constructor(attributes, object) {\n      super(attributes, object, \"gantt\");\n\n      /*\n         {\n            id:uuid(),\n            type:'gantt',  \n            filterConditions:[],\n         }\n      \n      */\n   }\n\n   /**\n    * unique key describing this View.\n    * @return {string}\n    */\n   static type() {\n      return \"gantt\";\n   }\n\n   /**\n    * @return {string}\n    */\n   static icon() {\n      return \"fa fa-tasks\";\n   }\n\n   static component(App, idBase) {\n      let ids = {\n         title: App.unique(`${idBase}_popupGanttTitle`),\n         startDate: App.unique(`${idBase}_popupGanttStartDate`),\n         endDate: App.unique(`${idBase}_popupGanttEndDate`),\n         duration: App.unique(`${idBase}_popupGanttDuration`),\n         progress: App.unique(`${idBase}_popupGanttProgress`),\n         notes: App.unique(`${idBase}_popupGanttNotes`),\n      };\n\n      let refreshOptions = (object, view) => {\n         let dateFields = object\n            .fields((f) => f instanceof ABFieldDate)\n            .map(({ id, label }) => ({ id, value: label }));\n\n         // Start date\n         $$(ids.startDate).define(\"options\", dateFields);\n\n         // Add default option\n         dateFields.unshift({\n            id: \"none\",\n            value: L(\"Select a date field\"),\n         });\n\n         // End date\n         $$(ids.endDate).define(\"options\", dateFields);\n\n         // Duration\n         let numberFields = object\n            .fields((f) => f instanceof ABFieldNumber)\n            .map(({ id, label }) => ({ id, value: label }));\n\n         // Add default option\n         numberFields.unshift({\n            id: \"none\",\n            value: L(\"Select a number field\"),\n         });\n         $$(ids.duration).define(\"options\", numberFields);\n\n         // Progress\n         let decimalFields = object\n            .fields((f) => f instanceof ABFieldNumber)\n            .map(({ id, label }) => ({ id, value: label }));\n\n         // Add default option\n         decimalFields.unshift({\n            id: \"none\",\n            value: L(\"Select a number field\"),\n         });\n         $$(ids.progress).define(\"options\", decimalFields);\n\n         // Title & Notes\n         let stringFields = object\n            .fields(\n               (f) => f instanceof ABFieldString || f instanceof ABFieldLongText\n            )\n            .map(({ id, label }) => ({ id, value: label }));\n\n         // Add default option\n         stringFields.unshift({\n            id: \"none\",\n            value: L(\"Select a string field\"),\n         });\n         $$(ids.title).define(\"options\", stringFields);\n         $$(ids.notes).define(\"options\", stringFields);\n\n         // Select view's values\n         if (view && view.title) {\n            $$(ids.title).define(\"value\", view.title);\n            $$(ids.title).refresh();\n         }\n\n         if (view && view.startDate) {\n            $$(ids.startDate).define(\"value\", view.startDate);\n            $$(ids.startDate).refresh();\n         }\n\n         if (view && view.endDate) {\n            $$(ids.endDate).define(\n               \"value\",\n               view.endDate || defaultValues.endDate\n            );\n            $$(ids.endDate).refresh();\n         }\n\n         if (view && view.duration) {\n            $$(ids.duration).define(\n               \"value\",\n               view.duration || defaultValues.duration\n            );\n            $$(ids.duration).refresh();\n         }\n\n         if (view && view.progress) {\n            $$(ids.progress).define(\"value\", view.progress);\n            $$(ids.progress).refresh();\n         }\n\n         if (view && view.notes) {\n            $$(ids.notes).define(\"value\", view.notes);\n            $$(ids.notes).refresh();\n         }\n      };\n\n      var PopupNewDataFieldComponent = new ABPopupNewDataField(\n         App,\n         `${idBase}_gantt`\n      );\n\n      let ViewComponent = new ABObjectWorkspaceViewComponent({\n         elements: () => {\n            return {\n               batch: \"gantt\",\n               rows: [\n                  {\n                     cols: [\n                        {\n                           id: ids.title,\n                           view: \"richselect\",\n                           label: `<span class='webix_icon fa fa-calendar'></span> ${L(\n                              \"Title\"\n                           )}`,\n                           placeholder: L(\"Select a string field\"),\n                           labelWidth: 130,\n                           name: \"title\",\n                           options: [],\n                        },\n                        {\n                           view: \"button\",\n                           css: \"webix_primary\",\n                           type: \"icon\",\n                           icon: \"fa fa-plus\",\n                           label: \"\",\n                           width: 20,\n                           click: () => {\n                              PopupNewDataFieldComponent.show(\n                                 null,\n                                 ABFieldString.defaults().key\n                              );\n                           },\n                        },\n                     ],\n                  },\n                  {\n                     cols: [\n                        {\n                           id: ids.startDate,\n                           view: \"richselect\",\n                           label: `<span class='webix_icon fa fa-calendar'></span> ${L(\n                              \"Start Date\"\n                           )}`,\n                           placeholder: L(\"Select a date field\"),\n                           labelWidth: 130,\n                           name: \"startDate\",\n                           required: true,\n                           options: [],\n                        },\n                        {\n                           view: \"button\",\n                           css: \"webix_primary\",\n                           type: \"icon\",\n                           icon: \"fa fa-plus\",\n                           label: \"\",\n                           width: 20,\n                           click: () => {\n                              PopupNewDataFieldComponent.show(\n                                 null,\n                                 ABFieldDate.defaults().key\n                              );\n                           },\n                        },\n                     ],\n                  },\n                  {\n                     cols: [\n                        {\n                           id: ids.endDate,\n                           view: \"richselect\",\n                           label: `<span class='webix_icon fa fa-calendar'></span> ${L(\n                              \"End Date\"\n                           )}`,\n                           placeholder: L(\"Select a date field\"),\n                           labelWidth: 130,\n                           name: \"endDate\",\n                           options: [],\n                        },\n                        {\n                           view: \"button\",\n                           css: \"webix_primary\",\n                           type: \"icon\",\n                           icon: \"fa fa-plus\",\n                           label: \"\",\n                           width: 20,\n                           click: () => {\n                              PopupNewDataFieldComponent.show(\n                                 null,\n                                 ABFieldDate.defaults().key\n                              );\n                           },\n                        },\n                     ],\n                  },\n                  {\n                     cols: [\n                        {\n                           id: ids.duration,\n                           view: \"richselect\",\n                           label: `<span class='webix_icon fa fa-hashtag'></span> ${L(\n                              \"Duration\"\n                           )}`,\n                           placeholder: L(\"Select a number field\"),\n                           labelWidth: 130,\n                           name: \"duration\",\n                           options: [],\n                        },\n                        {\n                           view: \"button\",\n                           css: \"webix_primary\",\n                           type: \"icon\",\n                           icon: \"fa fa-plus\",\n                           label: \"\",\n                           width: 20,\n                           click: () => {\n                              PopupNewDataFieldComponent.show(\n                                 null,\n                                 ABFieldNumber.defaults().key\n                              );\n                           },\n                        },\n                     ],\n                  },\n                  {\n                     cols: [\n                        {\n                           id: ids.progress,\n                           view: \"richselect\",\n                           label: `<span class='webix_icon fa fa-hashtag'></span> ${L(\n                              \"Progress\"\n                           )}`,\n                           placeholder: L(\"Select a number field\"),\n                           labelWidth: 130,\n                           name: \"progress\",\n                           required: false,\n                           options: [],\n                        },\n                        {\n                           view: \"button\",\n                           css: \"webix_primary\",\n                           type: \"icon\",\n                           icon: \"fa fa-plus\",\n                           label: \"\",\n                           width: 20,\n                           click: () => {\n                              PopupNewDataFieldComponent.show(\n                                 null,\n                                 ABFieldNumber.defaults().key\n                              );\n                           },\n                        },\n                     ],\n                  },\n                  {\n                     cols: [\n                        {\n                           id: ids.notes,\n                           view: \"richselect\",\n                           label: `<span class='webix_icon fa fa-align-right'></span> ${L(\n                              \"Notes\"\n                           )}`,\n                           placeholder: L(\"Select a string field\"),\n                           labelWidth: 130,\n                           name: \"notes\",\n                           required: false,\n                           options: [],\n                        },\n                        {\n                           view: \"button\",\n                           css: \"webix_primary\",\n                           type: \"icon\",\n                           icon: \"fa fa-plus\",\n                           label: \"\",\n                           width: 20,\n                           click: () => {\n                              PopupNewDataFieldComponent.show(\n                                 null,\n                                 ABFieldLongText.defaults().key\n                              );\n                           },\n                        },\n                     ],\n                  },\n               ],\n            };\n         },\n\n         init: (object, view) => {\n            if (!object) return;\n\n            refreshOptions(object, view);\n\n            PopupNewDataFieldComponent.applicationLoad(object.application);\n            PopupNewDataFieldComponent.objectLoad(object);\n            PopupNewDataFieldComponent.init({\n               onSave: () => {\n                  // be notified when a new Field is created & saved\n\n                  refreshOptions(object, view);\n               },\n            });\n         },\n\n         validate: function ($form) {\n            let endDate = $$(ids.endDate).getValue() || defaultValues.endDate,\n               duration = $$(ids.duration).getValue() || defaultValues.duration;\n\n            if (\n               endDate == defaultValues.endDate &&\n               duration == defaultValues.duration\n            ) {\n               $form.markInvalid(\"endDate\", \"Required\");\n               $form.markInvalid(\"duration\", \"Required\");\n\n               return false;\n            } else {\n               return true;\n            }\n         },\n\n         values: function () {\n            let result = {};\n\n            result.title = $$(ids.title).getValue() || defaultValues.title;\n            result.startDate =\n               $$(ids.startDate).getValue() || defaultValues.startDate;\n            result.endDate =\n               $$(ids.endDate).getValue() || defaultValues.endDate;\n            result.duration =\n               $$(ids.duration).getValue() || defaultValues.duration;\n            result.progress =\n               $$(ids.progress).getValue() || defaultValues.progress;\n            result.notes = $$(ids.notes).getValue() || defaultValues.notes;\n\n            return result;\n         },\n\n         logic: {},\n      });\n\n      return ViewComponent;\n   }\n\n   /**\n    * @method fromObj\n    * take our persisted data, and properly load it\n    * into this object instance.\n    * @param {json} data  the persisted data\n    */\n   fromObj(data) {\n      super.fromObj(data);\n\n      for (var v in defaultValues) {\n         this[v] = data[v] || defaultValues[v];\n      }\n\n      this.type = ABObjectWorkspaceViewGantt.type();\n   }\n\n   /**\n    * @method toObj()\n    * compile our current state into a {json} object\n    * that can be persisted.\n    */\n   toObj() {\n      var obj = super.toObj();\n\n      for (var v in defaultValues) {\n         obj[v] = this[v];\n      }\n\n      obj.type = ABObjectWorkspaceViewGantt.type();\n      return obj;\n   }\n\n   get titleField() {\n      let viewCollection = this.object, // Should use another name property ?\n         object = viewCollection.object;\n\n      return object.fieldByID(this.title);\n   }\n\n   get startDateField() {\n      let viewCollection = this.object, // Should use another name property ?\n         object = viewCollection.object;\n\n      return object.fieldByID(this.startDate);\n   }\n\n   get endDateField() {\n      let viewCollection = this.object, // Should use another name property ?\n         object = viewCollection.object;\n\n      return object.fieldByID(this.endDate);\n   }\n\n   get durationField() {\n      let viewCollection = this.object, // Should use another name property ?\n         object = viewCollection.object;\n\n      return object.fieldByID(this.duration);\n   }\n\n   get progressField() {\n      let viewCollection = this.object, // Should use another name property ?\n         object = viewCollection.object;\n\n      return object.fieldByID(this.progress);\n   }\n\n   get notesField() {\n      let viewCollection = this.object,\n         object = viewCollection.object;\n\n      return object.fieldByID(this.notes);\n   }\n};\n","// ABObjectWorkspaceViewGrid.js\n//\n// Manages the settings for a Data Grid View in the AppBuilder Object Workspace\n\nconst ABObjectWorkspaceView = require(\"./ABObjectWorkspaceView\");\n\nvar defaultValues = {\n   name: \"Default Grid\",\n   sortFields: [], // array of columns with their sort configurations\n   filterConditions: [], // array of filters to apply to the data table\n   frozenColumnID: \"\", // id of column you want to stop freezing\n   hiddenFields: [], // array of [ids] to add hidden:true to\n};\n\nmodule.exports = class ABObjectWorkspaceViewGrid extends ABObjectWorkspaceView {\n   constructor(attributes, object) {\n      super(attributes, object, \"grid\");\n\n      /*\n\t{\n\t\tid:uuid(),\n\t\ttype:'grid',  \n\t\tsortFields:[],\n\t\tfilterConditions:[],\n\t\tfrozenColumnID:\"\",\n\t\thiddenFields:[],\n\t}\n\n*/\n   }\n\n   /**\n    * unique key describing this View.\n    * @return {string}\n    */\n   static type() {\n      return \"grid\";\n   }\n\n   /**\n    * @return {string}\n    */\n   static icon() {\n      return \"fa fa-table\";\n   }\n\n   /**\n    * @method fromObj\n    * take our persisted data, and properly load it\n    * into this object instance.\n    * @param {json} data  the persisted data\n    */\n   fromObj(data) {\n      super.fromObj(data);\n\n      for (var v in defaultValues) {\n         this[v] = data[v] || defaultValues[v];\n      }\n\n      this.type = ABObjectWorkspaceViewGrid.type();\n   }\n\n   /**\n    * @method toObj()\n    * compile our current state into a {json} object\n    * that can be persisted.\n    */\n   toObj() {\n      var obj = super.toObj();\n\n      for (var v in defaultValues) {\n         obj[v] = this[v];\n      }\n\n      obj.type = \"grid\";\n      return obj;\n   }\n};\n","// ABObjectWorkspaceViewKanban.js\n//\n// Manages the settings for a Data Grid View in the AppBuilder Object Workspace\n\nconst ABObjectWorkspaceView = require(\"./ABObjectWorkspaceView\");\nconst ABObjectWorkspaceViewComponent = require(\"./ABObjectWorkspaceViewComponent\");\n\nconst ABPopupNewDataField = require(\"../../../ABDesigner/ab_work_object_workspace_popupNewDataField\");\n\nconst ABFieldConnect = require(\"../dataFields/ABFieldConnect\");\nconst ABFieldList = require(\"../dataFields/ABFieldList\");\nconst ABFieldUser = require(\"../dataFields/ABFieldUser\");\n\nvar defaultValues = {\n   name: \"Default Kanban\",\n   filterConditions: [], // array of filters to apply to the data table\n   sortFields: [],\n   verticalGroupingField: null,\n   horizontalGroupingField: null,\n   ownerField: null,\n};\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABObjectWorkspaceViewKanban extends (\n   ABObjectWorkspaceView\n) {\n   constructor(attributes, object) {\n      super(attributes, object, \"kanban\");\n\n      /*\n\t\t\t{\n\t\t\t\tid:uuid(),\n\t\t\t\ttype:'kanban',  \n\t\t\t\tfilterConditions:[],\n\t\t\t}\n\t\t\n\t\t*/\n   }\n\n   /**\n    * unique key describing this View.\n    * @return {string}\n    */\n   static type() {\n      return \"kanban\";\n   }\n\n   /**\n    * @return {string}\n    */\n   static icon() {\n      return \"fa fa-columns\";\n   }\n\n   static component(AB, idBase) {\n      let ids = {\n         vGroupInput: `${idBase}_popupAddViewVGroup`,\n         hGroupInput: `${idBase}_popupAddViewHGroup`,\n         ownerInput: `${idBase}_popupAddViewOwner`,\n      };\n\n      // let labels = {\n      //    common: App.labels,\n      //    component: {\n      //       vGroup: L(\"ab.add_view.kanban.vGroup\", \"*Vertical Grouping\"),\n      //       hGroup: L(\"ab.add_view.kanban.hGroup\", \"*Horizontal Grouping\"),\n      //       owner: L(\"ab.add_view.kanban.owner\", \"*Card Owner\"),\n      //       groupingPlaceholder: L(\n      //          \"ab.add_view.kanban.grouping_placeholder\",\n      //          \"*Select a field\"\n      //       ),\n      //       ownerPlaceholder: L(\n      //          \"ab.add_view.kanban.owner_placeholder\",\n      //          \"*Select a user field\"\n      //       ),\n      //       noneOption: L(\"ab.add_view.kanban.none_option\", \"*None\"),\n      //    },\n      // };\n\n      let refreshOptions = (object, view, options = {}) => {\n         // Utility function to initialize the options for a field select input\n         const initSelect = (\n            $option,\n            attribute,\n            filter = (f) => f.key === ABFieldList.defaults().key,\n            isRequired\n         ) => {\n            if ($option == null || object == null) return;\n\n            // populate options\n            var options = object\n               .fields()\n               .filter(filter)\n               .map(({ id, label }) => ({ id, value: label }));\n            if (!isRequired && options.length) {\n               options.unshift({\n                  id: 0,\n                  value: L(\"None\"),\n               });\n            }\n            $option.define(\"options\", options);\n\n            // select a value\n            if (view) {\n               if (view[attribute]) {\n                  $option.define(\"value\", view[attribute]);\n               } else if (!isRequired && options[0]) {\n                  $option.define(\"value\", options[0].id);\n               }\n            } else if (options.filter((o) => o.id).length === 1) {\n               // If there's just one (real) option, default to the first one\n               $option.define(\"value\", options[0].id);\n            }\n\n            $option.refresh();\n         };\n\n         const verticalGroupingFieldFilter = (field) =>\n            [ABFieldList.defaults().key, ABFieldUser.defaults().key].includes(\n               field.key\n            );\n\n         const horizontalGroupingFieldFilter = (field) =>\n            [\n               ABFieldConnect.defaults().key,\n               ABFieldList.defaults().key,\n               ABFieldUser.defaults().key,\n            ].includes(field.key);\n\n         initSelect(\n            options.vGroupInput || $$(ids.vGroupInput),\n            \"verticalGroupingField\",\n            verticalGroupingFieldFilter,\n            true\n         );\n         initSelect(\n            options.hGroupInput || $$(ids.hGroupInput),\n            \"horizontalGroupingField\",\n            horizontalGroupingFieldFilter,\n            false\n         );\n         initSelect(\n            options.ownerInput || $$(ids.ownerInput),\n            \"ownerField\",\n            (f) => {\n               // User field\n               return (\n                  f.key === ABFieldUser.defaults().key ||\n                  // Connected field : type 1:M\n                  (f.key === ABFieldConnect.defaults().key &&\n                     f.settings.linkType == \"one\" &&\n                     f.settings.linkViaType == \"many\")\n               );\n            },\n            false\n         );\n      };\n\n      var PopupNewDataFieldComponent = new ABPopupNewDataField(\n         AB,\n         `${idBase}_kanban`\n      );\n\n      return new ABObjectWorkspaceViewComponent({\n         elements: () => {\n            return {\n               batch: \"kanban\",\n               rows: [\n                  {\n                     cols: [\n                        {\n                           view: \"richselect\",\n                           label: `<span class='webix_icon fa fa-columns'></span> ${L(\n                              \"Vertical Grouping\"\n                           )}`,\n                           id: ids.vGroupInput,\n                           placeholder: L(\"Select a field\"),\n                           labelWidth: 180,\n                           name: \"vGroup\",\n                           required: true,\n                           options: [],\n                           on: {\n                              onChange: function (id) {\n                                 $$(ids.vGroupInput).validate();\n                                 $$(ids.hGroupInput).validate();\n                              },\n                           },\n                           invalidMessage: L(\"Required\"),\n                        },\n                        {\n                           view: \"button\",\n                           css: \"webix_primary\",\n                           type: \"icon\",\n                           icon: \"fa fa-plus\",\n                           label: \"\",\n                           width: 20,\n                           click: () => {\n                              PopupNewDataFieldComponent.show(\n                                 null,\n                                 ABFieldList.defaults().key\n                              );\n                           },\n                        },\n                     ],\n                  },\n                  {\n                     cols: [\n                        {\n                           view: \"richselect\",\n                           label: `<span class='webix_icon fa fa-list'></span> ${L(\n                              \"Horizontal Grouping\"\n                           )}`,\n                           id: ids.hGroupInput,\n                           placeholder: L(\"Select a field\"),\n                           labelWidth: 180,\n                           name: \"hGroup\",\n                           required: false,\n                           options: [],\n                           invalidMessage: L(\n                              \"Cannot be the same as vertical grouping field\"\n                           ),\n                           validate: (value) => {\n                              var vGroupValue = $$(ids.vGroupInput).getValue();\n                              return (\n                                 !vGroupValue || !value || vGroupValue !== value\n                              );\n                           },\n                           on: {\n                              onChange: function (id) {\n                                 $$(ids.hGroupInput).validate();\n                              },\n                           },\n                        },\n                        {\n                           view: \"button\",\n                           css: \"webix_primary\",\n                           type: \"icon\",\n                           icon: \"fa fa-plus\",\n                           label: \"\",\n                           width: 20,\n                           click: () => {\n                              PopupNewDataFieldComponent.show(\n                                 null,\n                                 ABFieldList.defaults().key\n                              );\n                           },\n                        },\n                     ],\n                  },\n                  {\n                     cols: [\n                        {\n                           view: \"richselect\",\n                           label: `<span class='webix_icon fa fa-user-circle'></span> ${L(\n                              \"Card Owner\"\n                           )}`,\n                           placeholder: L(\"Select a user field\"),\n                           id: ids.ownerInput,\n                           labelWidth: 180,\n                           name: \"owner\",\n                           options: [],\n                        },\n                        {\n                           view: \"button\",\n                           css: \"webix_primary\",\n                           type: \"icon\",\n                           icon: \"fa fa-plus\",\n                           label: \"\",\n                           width: 20,\n                           click: () => {\n                              PopupNewDataFieldComponent.show(\n                                 null,\n                                 ABFieldConnect.defaults().key\n                              );\n                           },\n                        },\n                     ],\n                  },\n               ],\n            };\n         },\n\n         init: (object, view) => {\n            refreshOptions(object, view);\n\n            PopupNewDataFieldComponent.applicationLoad(object.application);\n            PopupNewDataFieldComponent.objectLoad(object);\n            PopupNewDataFieldComponent.init({\n               onSave: () => {\n                  // be notified when a new Field is created & saved\n\n                  refreshOptions(object, view);\n               },\n            });\n         },\n\n         values: function () {\n            let result = {};\n\n            result.verticalGroupingField =\n               $$(ids.vGroupInput).getValue() || null;\n            result.horizontalGroupingField =\n               $$(ids.hGroupInput).getValue() || null;\n            result.ownerField = $$(ids.ownerInput).getValue() || null;\n\n            return result;\n         },\n\n         logic: {\n            refreshOptions: refreshOptions,\n         },\n      });\n   }\n\n   /**\n    * @method fromObj\n    * take our persisted data, and properly load it\n    * into this object instance.\n    * @param {json} data  the persisted data\n    */\n   fromObj(data) {\n      super.fromObj(data);\n\n      for (var v in defaultValues) {\n         this[v] = data[v] || defaultValues[v];\n      }\n\n      this.type = ABObjectWorkspaceViewKanban.type();\n   }\n\n   /**\n    * @method toObj()\n    * compile our current state into a {json} object\n    * that can be persisted.\n    */\n   toObj() {\n      var obj = super.toObj();\n\n      for (var v in defaultValues) {\n         obj[v] = this[v];\n      }\n\n      obj.type = ABObjectWorkspaceViewKanban.type();\n      return obj;\n   }\n\n   getHorizontalGroupingField() {\n      let viewCollection = this.object, // Should use another name property ?\n         object = viewCollection.object;\n\n      return object.fieldByID(this.horizontalGroupingField);\n   }\n\n   getVerticalGroupingField() {\n      let viewCollection = this.object, // Should use another name property ?\n         object = viewCollection.object;\n\n      return object.fieldByID(this.verticalGroupingField);\n   }\n\n   getOwnerField() {\n      let viewCollection = this.object, // Should use another name property ?\n         object = viewCollection.object;\n\n      return object.fieldByID(this.ownerField);\n   }\n};\n","//\n// ABViewQueryBuilderObjectFieldConditions\n//\n// A UI component that is responsible for displaying a QueryBuilder based upon\n// the fields of a given ABObject.\n//\n// This object is also responsible for saving it's state to a settings value,\n// and generating the settings value to be saved.\n\nmodule.exports = class ABViewQueryBuilderObjectFieldConditions {\n   /**\n    * @param {object} App\n    *      The shared App object that is created in OP.Component\n    * @param {string} idBase\n    *      Identifier for this component\n    */\n   constructor(label) {\n      this.label = label;\n      this.ui = null;\n   }\n\n   /**\n    * cleanRules\n    * walk through all the QueryBuilder (QB) rules and make conversions\n    * of the data into their proper formats.\n    * @param {obj} rules  the {rules} obj that is returned from the QB object\n    * @param {array} fields  an array of field definitions from the QB object\n    * @param {bool} dateToString  convert Dates to String format?\n    */\n   cleanRules(rules, fields, dateToString) {\n      if (typeof dateToString == \"undefined\") dateToString = true;\n\n      // walk the given condition rules / values, walk them and make sure\n      // any given rules have properly formatted values.\n      function processCondition(rule) {\n         // make sure rule is provided\n         if (rule) {\n            if (rule.glue && rule.rules) {\n               rule.rules.forEach((r) => {\n                  processCondition(r);\n               });\n            } else {\n               // converting a single rule:\n\n               var field = fields.filter((f) => {\n                  return f.id == rule.key;\n               })[0];\n               if (field) {\n                  switch (field.type) {\n                     case \"number\":\n                     case \"formula\":\n                        // when getting data from the server, the numbers are\n                        // sent back as strings (\"100.25\").\n                        // make sure to convert strings to numbers:\n                        if (typeof rule.value == \"string\") {\n                           if (rule.value.indexOf(\".\") == -1) {\n                              rule.value = parseInt(rule.value);\n                           } else {\n                              rule.value = parseFloat(rule.value);\n                           }\n                        }\n                        break;\n                     case \"date\":\n                        // in some cases we want to convert the Date() object returned\n                        // by QueryBuilder into a string for saving on the Server.\n                        if (dateToString) {\n                           // if we have a Date() obj returned from QueryBuilder,\n                           // convert to a string format:\n                           if (rule.value instanceof Date) {\n                              rule.value = webix.i18n.dateFormatStr(rule.value);\n                           }\n                        } else {\n                           // in other cases we want to convert the string returned\n                           // by the server into a Date() for the QB\n                           if (typeof rule.value == \"string\") {\n                              rule.value = new Date(rule.value);\n                           }\n                        }\n\n                        break;\n                  }\n               }\n            }\n         }\n      }\n      processCondition(rules);\n   }\n\n   // component\n   // initialize the UI display for this popup editor.\n   component(App, idBase) {\n      this.App = App;\n      this.idBase = idBase;\n\n      var L = App.Label;\n\n      var uniqueInstanceID = webix.uid();\n      var myUnique = (key) => {\n         // return this.unique(idBase + key ) + '_' + uniqueInstanceID;\n         return `${idBase}_${key}_${uniqueInstanceID}`;\n      };\n\n      // internal list of Webix IDs to reference our UI components.\n      var ids = (this.ids = {\n         component: myUnique(\"qbObjectFieldConditions\"),\n         queryBuilder: myUnique(\"qBuilder\"),\n         queryBuilderContainer: myUnique(\"qBuilderContainer\"),\n         queryBuilderLayout: myUnique(\"qBuilderLayout\"),\n         showQBButton: myUnique(\"showQBButton\"),\n      });\n\n      // webix UI definition:\n      this.ui = {\n         view: \"layout\",\n         id: ids.queryBuilderLayout,\n         hidden: true,\n         type: \"line\",\n         rows: [\n            {\n               id: ids.showQBButton,\n               cols: [\n                  { fillspace: true },\n                  {\n                     view: \"button\",\n                     css: \"webix_primary\",\n                     name: \"addqb\",\n                     value: L(\"Add Custom Conditions\"),\n                     autowidth: true,\n                     click: function () {\n                        $$(ids.queryBuilderContainer).show();\n                        $$(ids.showQBButton).hide();\n                        // _logic.buttonCancel();\n                     },\n                  },\n                  { fillspace: true },\n               ],\n            },\n            {\n               hidden: true,\n               id: ids.queryBuilderContainer,\n               cols: [\n                  {\n                     view: \"querybuilder\",\n                     id: ids.queryBuilder,\n                     fields: this.conditionFields(),\n                  },\n               ],\n            },\n         ],\n      };\n\n      // tack on a label if provided.\n      if (this.label) {\n         this.ui.rows[1].cols.unshift({\n            view: \"label\",\n            css: \"ab-text-bold\",\n            label: this.label,\n            width: this.AB.UISettings.config().labelWidthLarge,\n         });\n      }\n\n      // for setting up UI\n      this.init = (options) => {\n         options = options || {};\n\n         // register callbacks:\n         for (var c in _logic.callbacks) {\n            _logic.callbacks[c] = options[c] || _logic.callbacks[c];\n         }\n      };\n\n      // internal business logic\n      var _logic = (this._logic = {\n         callbacks: {\n            onCancel: function () {\n               console.warn(\"NO onCancel()!\");\n            },\n            onSave: function (field) {\n               console.warn(\"NO onSave()!\");\n            },\n         },\n\n         /**\n          * cleanRules\n          * walk through all the QueryBuilder (QB) rules and make conversions\n          * of the data into their proper formats.\n          * @param {obj} rules  the {rules} obj that is returned from the QB object\n          * @param {array} fields  an array of field definitions from the QB object\n          * @param {bool} dateToString  convert Dates to String format?\n          */\n         cleanRules: (rules, fields, dateToString) => {\n            this.cleanRules(rules, fields, dateToString);\n         },\n\n         getValue: () => {\n            var values = null;\n            var QB = $$(ids.queryBuilder);\n            if (QB) {\n               values = QB.getValue();\n            }\n\n            // convert dates to simpler format:\n            // by default we're getting long values: \"Mon Feb 2, 2018 GMT xxxxxxx\",\n            // and webix doesn't seem to understand them when we send them back.\n            // so save simple date values: \"mm/dd/yyyy\"\n            if (values) {\n               _logic.cleanRules(values[0], values[1], true);\n            }\n\n            return values;\n         },\n\n         setValue: (values) => {\n            values = values || [];\n            if (!Array.isArray(values)) values = [values];\n            if (values.length == 0) {\n               values.push({});\n            } // push default rules\n            if (values.length < 2) {\n               values.push(this.conditionFields());\n            }\n\n            // convert dates from our server side \"string\" format into\n            // Date() objects.\n            _logic.cleanRules(values[0], values[1], false);\n\n            var QB = $$(ids.queryBuilder);\n            if (QB) {\n               if (values[0] && values[0].rules && values[0].rules.length) {\n                  QB.setValue(values[0]);\n                  $$(ids.queryBuilderContainer).show();\n                  $$(ids.showQBButton).hide();\n               }\n            }\n         },\n      });\n\n      this.getValue = _logic.getValue;\n      this.show = _logic.show;\n      this.setValue = _logic.setValue;\n   }\n\n   objectLoad(object) {\n      this.currentObject = object;\n   }\n\n   // conditionFields()\n   // Return the list of fields we are able to update.\n   // @return {array} of querybuilder field definitions:\n   //\t\t\t\t\t[\n   // \t\t\t\t\t\t{ id:\"fname\",   value:\"First Name\", type:\"string\" },\n   //\t\t\t\t\t    { id:\"lname\",   value:\"Last Name\",  type:\"string\" },\n   //\t\t\t\t\t    { id:\"age\",     value:\"Age\",        type:\"number\" },\n   //\t\t\t\t\t    { id:\"bdate\",   value:\"Birth Date\", type:\"date\" }\n   //\t\t\t\t\t]\n   conditionFields() {\n      var fieldTypes = [\n         \"string\",\n         \"LongText\",\n         \"number\",\n         \"date\",\n         \"email\",\n         \"formula\",\n         \"calculate\",\n      ];\n\n      var currFields = [];\n\n      if (this.currentObject) {\n         this.currentObject.fields().forEach((f) => {\n            if (fieldTypes.indexOf(f.key) != -1) {\n               // NOTE: the .id value must match the obj[.id]  in the data set\n               // so if your object data looks like:\n               // \t{\n               //\t\tname_first:'Neo',\n               //\t\tname_last: 'The One'\n               //  },\n               // then the ids should be:\n               // { id:'name_first', value:'xxx', type:'string' }\n\n               let type = f.key;\n               if (f.key == \"formula\" || f.key == \"calculate\") type = \"number\";\n               else if (f.key == \"LongText\") type = \"string\";\n\n               currFields.push({\n                  id: f.columnName,\n                  value: f.label,\n                  type: type,\n               });\n            }\n         });\n      }\n\n      return currFields;\n   }\n\n   // process\n   // Take the provided data and process each of our rules.\n   // @param {obj} options\n   // @return {promise}\n   process(options) {\n      return new Promise((resolve, reject) => {\n         var numDone = 0;\n         var onDone = () => {\n            numDone++;\n            if (numDone >= this.listRules.length) {\n               resolve();\n            }\n         };\n\n         this.listRules.forEach((rule) => {\n            rule\n               .process(options)\n               .then(function () {\n                  onDone();\n               })\n               .catch((err) => {\n                  reject(err);\n               });\n         });\n\n         if (this.listRules.length == 0) {\n            resolve();\n         }\n      });\n   }\n\n   showQueryBuilderContainer() {\n      $$(this.ids.queryBuilderLayout).show();\n      $$(this.ids.queryBuilderContainer).show();\n      $$(this.ids.showQBButton).hide();\n   }\n\n   // // fromSettings\n   // // Create an initial set of default values based upon our settings object.\n   // // @param {obj} settings  The settings object we created in .toSettings()\n   // fromSettings (settings) {\n   // \t// settings: [\n   // \t//  { rule.settings },\n   // \t//  { rule.settings }\n   // \t// ]\n\n   // \t// clear any existing Rules:\n   // \tthis.listRules.forEach((rule)=>{\n   // \t\t$$(this.ids.rules).removeView(rule.ids.component);\n   // \t})\n   // \tthis.listRules = [];\n\n   // \tif (settings) {\n   // \t\tsettings.forEach((ruleSettings)=>{\n   // \t\t\tthis.addRule(ruleSettings);\n   // \t\t})\n   // \t}\n   // }\n\n   // // toSettings\n   // // create a settings object to be persisted with the application.\n   // // @return {array} of rule settings.\n   // toSettings () {\n   // \tvar settings = [];\n   // \tthis.listRules.forEach((r)=>{\n   // \t\tsettings.push(r.toSettings());\n   // \t})\n   // \treturn settings;\n   // }\n};\n","//\n// ABViewRule\n//\n// A component that manages an individual Rule in a Rule list.\n//\n// Each rule can manage a set of given Actions.  For each Rule, one Action\n// can be chosen, A condition for when that action is executed, and then\n// inputs for any additional data required by that action.\n//\n// Rules are used in the Interface Builder to present the designer an interface\n// for defining the Action+Condition:\n//\n//\n//\n// In live apps, Rules are used when processing events and determining if an\n// action is to be performed:\n//\n//\n//\n// A Rule needs to save it's current state to an objects settings, and to\n// initialize itself from those settings.\n//\nconst ObjectQueryBuilder = require(\"./ABViewQueryBuilderObjectFieldConditions\");\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABViewRule {\n   /**\n    * @param {object} App\n    *      The shared App object that is created in OP.Component\n    * @param {string} idBase\n    *      Identifier for this component\n    */\n   constructor(listActions) {\n      this.listActions = listActions || []; // the list of Actions this Rule manages\n\n      this.actionDropList = []; // the Webix UI droplist\n      this.listActions.forEach((a) => {\n         this.actionDropList.push({ id: a.key, value: a.label });\n      });\n\n      this.selectedAction = null; // the currently selected Action.key\n      if (this.actionDropList.length > 0) {\n         this.selectedAction = this.actionDropList[0].id;\n      }\n\n      this.removable = true; // can I delete this rule?\n\n      this.currentObject = null; // What ABObject is this associated with\n      // NOTE: this is important for Actions.\n\n      this.objectQB = null; // The QueryBuilder (QB) object\n\n      this.currentForm = null;\n   }\n\n   component(App, idBase) {\n      this.App = App;\n      this.idBase = idBase;\n\n      // this is different because multiple instances of this View can be displayed\n      // at the same time.  So make each instance Unique:\n      var uniqueInstanceID = webix.uid();\n      var myUnique = (key) => {\n         // return this.unique(idBase + key ) + '_' + uniqueInstanceID;\n         return `${idBase}_${key}_${uniqueInstanceID}`;\n      };\n\n      // internal list of Webix IDs to reference our UI components.\n      var ids = (this.ids = {\n         // each instance must be unique\n         component: myUnique(\"component\"),\n\n         selectAction: myUnique(\"chooseAction\"),\n\n         queryBuilder: myUnique(\"queryBuilder\"),\n\n         valueDisplay: myUnique(\"valueArea\"),\n      });\n\n      this.objectQB.label = L(\"When\");\n      this.objectQB.component(this.App, this.idBase);\n      this.ui = this._generateUI();\n\n      // for setting up UI\n      this.init = (options) => {\n         // register callbacks:\n         for (var c in _logic.callbacks) {\n            _logic.callbacks[c] = options[c] || _logic.callbacks[c];\n         }\n\n         this.objectQB.init();\n\n         // make sure the current Action's value display is initialized:\n         var Action = this.currentAction();\n         if (Action) {\n            Action.component(this.App, this.idBase);\n            var comp = Action.valueDisplay(ids.valueDisplay);\n\n            _logic.replaceValueDisplay(comp);\n\n            // webix.ui(comp.ui, $$(this.ids.valueDisplay));\n            comp.init();\n         }\n      };\n\n      // internal business logic\n      var _logic = (this._logic = {\n         callbacks: {\n            onDelete: function () {\n               console.warn(\"NO onDelete()!\");\n            },\n            onSave: function (field) {\n               console.warn(\"NO onSave()!\");\n            },\n         },\n\n         replaceValueDisplay: (component) => {\n            // remove current content area:\n            var $ValueDisplay = $$(this.ids.valueDisplay);\n            if (!$ValueDisplay) return;\n\n            var children = $ValueDisplay.getChildViews();\n            var cloneChildren = [];\n            children.forEach((c) => {\n               cloneChildren.push(c);\n            });\n            cloneChildren.forEach((c) => {\n               $ValueDisplay.removeView(c);\n            });\n\n            $ValueDisplay.addView(component.ui);\n         },\n\n         selectAction: (newValue, oldVal) => {\n            if (newValue) {\n               $$(this.ids.component)\n                  .getChildViews()\n                  .forEach((views) => {\n                     views.show();\n                  });\n            }\n            // bonus:  save current state of previous Action\n            var prevAction = this.getAction(oldVal);\n            if (prevAction) {\n               prevAction.stashCondition(this.objectQB.getValue());\n            }\n\n            // now switch to the new Action\n            this.selectedAction = newValue;\n            var currAction = this.currentAction();\n            if (currAction) {\n               // reset Condition filters.\n               this.objectQB.setValue(currAction.condition());\n\n               // have Action display it's values form\n               currAction.component(this.App, this.idBase);\n               var component = currAction.valueDisplay(ids.valueDisplay);\n               _logic.replaceValueDisplay(component);\n               component.init();\n               // currAction.valueDisplay(ids.valueDisplay);\n            }\n         },\n      });\n   }\n\n   // not intended to be called externally\n   _generateUI() {\n      return {\n         id: this.ids.component,\n         view: \"layout\",\n         css: \"ab-component-form-rules\",\n         padding: 20,\n         // margin: 10,\n\n         // this should be a CSS setting: this.AB.Config.xxxx\n         // width: 680,\n         type: \"line\",\n         rows: [\n            {\n               view: \"template\",\n               css: \"ab-component-form-rules-delete\",\n               template: '<i class=\"fa fa-trash ab-component-remove\"></i>',\n               height: 30,\n               borderless: true,\n               hidddatasourceen: this.removable == false,\n               onClick: {\n                  \"ab-component-remove\": (e, id, trg) => {\n                     this._logic.callbacks.onDelete(this);\n                  },\n               },\n            },\n            // Action\n            {\n               id: this.ids.selectAction,\n               view: \"richselect\",\n               label: L(\"Action\"),\n               placeholder: L(\"Choose an action\"),\n               labelWidth: this.AB.UISettings.config().labelWidthLarge,\n               options: this.actionDropList,\n               on: {\n                  onChange: (newVal, oldVal) => {\n                     this._logic.selectAction(newVal, oldVal);\n                  },\n               },\n            },\n\n            // Values\n            {\n               for: \"values\",\n               hidden: true,\n               cells: [\n                  {\n                     view: \"layout\",\n                     cols: [\n                        {\n                           view: \"label\",\n                           label: L(\"Values\"),\n                           css: \"ab-text-bold\",\n                           width: this.AB.UISettings.config().labelWidthLarge,\n                        },\n                        {\n                           id: this.ids.valueDisplay,\n                           view: \"layout\",\n                           rows: [\n                              {\n                                 label: L(\n                                    \" ABViewRule: This should be the Set Area\"\n                                 ),\n                                 css: \"ab-text-bold\",\n                                 height: 30,\n                              },\n                           ],\n                        },\n                     ],\n                  },\n               ],\n            },\n\n            // When\n            this.objectQB.ui,\n         ],\n      };\n   }\n\n   // return the QueryBuilder fields data for the currently selected Action.\n   conditionFields() {\n      var fields = [];\n\n      var selectedAction = this.currentAction();\n      if (selectedAction) {\n         fields = selectedAction.conditionFields();\n      }\n\n      return fields;\n   }\n\n   currentAction() {\n      return this.getAction(this.selectedAction);\n   }\n\n   getAction(key) {\n      return this.listActions.filter((a) => {\n         return a.key == key;\n      })[0];\n   }\n\n   objectLoad(object) {\n      this.currentObject = object;\n      this.listActions.forEach((a) => {\n         a.objectLoad(object);\n      });\n\n      var label = L(\"When\");\n\n      this.objectQB = new ObjectQueryBuilder(label);\n      this.objectQB.objectLoad(object);\n\n      // regenerate our UI when a new object is loaded.\n      if (this.ids) {\n         this.ui = this._generateUI();\n      }\n   }\n\n   formLoad(form) {\n      this.currentForm = form;\n      this.listActions.forEach((a) => {\n         a.formLoad(form);\n      });\n   }\n\n   processPre(options = {}) {\n      let isValid = this.isValid(options.data);\n      if (!isValid) return;\n\n      let currentAction = this.currentAction();\n      if (!currentAction) return;\n\n      currentAction.processUpdateObject({}, options.data);\n   }\n\n   // process\n   // Take the provided data and process this rule\n   // @param {obj} options\n   // @return {Promise}\n   process(options) {\n      var currentAction = this.currentAction();\n      if (!currentAction) return Promise.resolve();\n\n      let isValid = this.isValid(options.data);\n      if (isValid) {\n         return currentAction.process(options);\n      } else {\n         // else just resolve and continue on\n         return new Promise((resolve, reject) => {\n            resolve();\n         });\n      }\n   }\n\n   fromSettings(settings) {\n      settings = settings || {};\n\n      if (settings.selectedAction) {\n         // store our Query Rules\n         this.selectedAction = settings.selectedAction;\n         var selectedAction = this.currentAction();\n         if (!selectedAction) return;\n         selectedAction.stashCondition(settings.queryRules || {});\n\n         // if our UI components are present, populate them properly:\n         if (this.ids) {\n            // Trigger our UI to refresh with this selected Action:\n            // NOTE: this also populates the QueryBuilder\n            $$(this.ids.selectAction).setValue(this.selectedAction);\n            // this._logic.selectAction(this.selectedAction);\n         }\n\n         // now continue with setting up our settings:\n         selectedAction.fromSettings(settings.actionSettings);\n      }\n   }\n\n   toSettings() {\n      var settings = {};\n\n      if (this.selectedAction) {\n         settings.selectedAction = this.selectedAction;\n         settings.queryRules = this.objectQB.getValue();\n         let currentAction = this.currentAction();\n         if (currentAction) {\n            settings.actionSettings = currentAction.toSettings();\n         }\n      }\n\n      return settings;\n   }\n\n   // NOTE: Querybuilder v5.2 has a bug where it won't display the [and/or]\n   // choosers properly if it hasn't been shown before the .setValue() call.\n   // so this work around allows us to refresh the display after the .show()\n   // on the popup.\n   // When they've fixed the bug, we'll remove this workaround:\n   qbFixAfterShow() {\n      var currAction = this.currentAction();\n      if (currAction && this.objectQB) {\n         this.objectQB.setValue(currAction.condition());\n         currAction.qbFixAfterShow();\n      }\n   }\n\n   /**\n    * @method isReady()\n    * returns a promise that gets resolved once our action is ready to work.\n    * @return {Promise}\n    */\n   async isReady() {\n      let currentAction = this.currentAction();\n      if (currentAction) {\n         return currentAction.isReady();\n      }\n      return Promise.resolve();\n   }\n\n   isValid(data = {}) {\n      var id = \"hiddenQB_\" + webix.uid();\n\n      // if our data passes the QueryRules then tell Action to process\n      var ui = {\n         id: id,\n         hidden: true,\n         view: \"querybuilder\",\n      };\n      var hiddenQB = webix.ui(ui);\n\n      let currentAction = this.currentAction();\n      var QBCondition = currentAction.condition();\n\n      if (this.objectQB) {\n         this.objectQB.cleanRules(QBCondition[0], QBCondition[1], false);\n      }\n\n      let query = QBCondition[0] || {},\n         fields = QBCondition[1] || [];\n\n      let convertToNumber = (text = \"\") => {\n         // if we have multiple rules we need to check if value is already a number before converting.\n         if (typeof text == \"number\") return text;\n\n         return parseFloat(text.replace(/[^-0-9.]/g, \"\"));\n      };\n\n      // Fix string data in number type\n      // NOTE: \"1000\" > \"99\" = false    >_<!\n      fields\n         .filter(\n            (f) =>\n               f.type == \"number\" ||\n               f.type == \"calculate\" ||\n               f.type == \"formula\"\n         )\n         .forEach((f) => {\n            try {\n               // filter conditions\n               if (query && query.rules && Array.isArray(query.rules)) {\n                  query.rules.forEach((r) => {\n                     if (r.key != f.id) return;\n\n                     r.value = convertToNumber(r.value);\n                  });\n               }\n\n               // row data\n               if (data[f.id] && typeof data[f.id] === \"string\") {\n                  data[f.id] = convertToNumber(data[f.id]);\n               }\n            } catch (e) {\n               // continue regardless of error\n            }\n         });\n\n      // hiddenQB.setValue(QBCondition);\n      hiddenQB.setValue({\n         query: query,\n         fields: fields,\n      });\n\n      var QBHelper = hiddenQB.getFilterHelper();\n      var isValid = QBHelper(data);\n\n      hiddenQB.destructor(); // remove the QB\n\n      return isValid;\n   }\n\n   get isPreProcess() {\n      let currentAction = this.currentAction();\n      return currentAction.isPreProcess || false;\n   }\n};\n","//\n// ABViewRuleAction\n//\n// A component that manages an individual Action in a Rule.\n//\n// Each Action is responsible for figuring out when it can run, and what to do.\n//\n// Actions are used in the Interface Builder to present the designer an interface\n// for defining the a Condition and a set of data necessary to complete the Action:\n//\n//\n//\n// In live apps, Actions are used when processing events and determining if an\n// if and what is to be performed:\n//\n//\n//\n// An Action needs to save it's current state to an objects settings, and to\n// initialize itself from those settings.\n//\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABViewRuleAction {\n   /**\n    * @param {object} App\n    *      The shared App object that is created in OP.Component\n    * @param {string} idBase\n    *      Identifier for this component\n    * @param {ABViewForm} currentForm\tthe current form this Action is associated with.\n    */\n   constructor(App, idBase, currentForm) {\n      this.key = \"ABViewRuleAction\";\n\n      this.queryObject = null; // the current ABObject we use to create QueryBuilder information.\n\n      this.currentForm = null;\n\n      this.queryRules = {}; // default set of rules for the Query Builder condition\n\n      this.valueRules = {}; // the initial Value Rules for this Action\n      // The Action Subclass defines what this {} is.\n\n      this.currentForm = currentForm; // the ABViewForm object that this rule Action is tied to.\n   }\n\n   component(App, idBase) {\n      this.App = App;\n      this.idBase = idBase;\n\n      this.label = L(\"generic abviewruleaction\");\n\n      function myUnique(key) {\n         return App.unique(`${idBase}_${key}`);\n      }\n\n      // internal list of Webix IDs to reference our UI components.\n      var ids = (this.ids = {\n         // each instance must be unique\n         component: `${myUnique(\"component\")}_${webix.uid()}`,\n      });\n\n      this._ui = null; // internally track our UI Component value Rules\n\n      // for setting up UI\n      this.init = (options) => {\n         // register callbacks:\n         for (var c in _logic.callbacks) {\n            _logic.callbacks[c] = options[c] || _logic.callbacks[c];\n         }\n      };\n\n      // internal business logic\n      var _logic = (this._logic = {\n         callbacks: {\n            onDelete: function () {\n               console.warn(\"NO onDelete()!\");\n            },\n            onSave: function (field) {\n               console.warn(\"NO onSave()!\");\n            },\n         },\n      });\n   }\n\n   // condition\n   // Return the querybuilder setup structure for this Action.\n   // @return {array}  of querybuilder setup\n   //\t\t\t\t\t[\n   //\t\t\t\t\t\t{rules},\n   //\t\t\t\t\t\t[fields]\n   //\t\t\t\t\t]\n   condition() {\n      return [this.conditionRules(), this.conditionFields()];\n   }\n\n   // stashCondition\n   // capture the current set of rules provided by the QB object.\n   // This doesn't guarantee these will be saved to the App settings.\n   // Instead it is a temporary stash. Only the selected Action's\n   // values will be persisited to the App settings.\n   // @param {obj/Array} rules  The QueryBuilder rule value returned from\n   //\t\t\t\t\t\t\t .getValue()\n   //\t\t\t\t\t\t\t note: it is the first entry .getValue()[0]\n   //\n   stashCondition(rules) {\n      // check to see if they sent us the raw QueryBuilder values and only\n      // pull off the rules if they did\n      if (Array.isArray(rules)) {\n         rules = rules[0];\n      }\n\n      // sanity check on glue value: don't update if null or not given.\n      if (rules) {\n         // sometimes .glue is undefined  so default to 'and'\n         if (rules.glue != \"or\") rules.glue = \"and\";\n\n         this.queryRules = rules;\n      }\n   }\n\n   // conditionFields()\n   // Return the list of fields we are able to update.\n   // @return {array} of querybuilder field definitions:\n   //\t\t\t\t\t[\n   // \t\t\t\t\t\t{ id:\"fname\",   value:\"First Name\", type:\"string\" },\n   //\t\t\t\t\t    { id:\"lname\",   value:\"Last Name\",  type:\"string\" },\n   //\t\t\t\t\t    { id:\"age\",     value:\"Age\",        type:\"number\" },\n   //\t\t\t\t\t    { id:\"bdate\",   value:\"Birth Date\", type:\"date\" }\n   //\t\t\t\t\t]\n   conditionFields() {\n      var fieldTypes = [\"string\", \"number\", \"date\", \"formula\", \"calculate\"];\n\n      var currFields = [];\n\n      if (this.queryObject) {\n         this.queryObject.fields().forEach((f) => {\n            if (fieldTypes.indexOf(f.key) != -1) {\n               // NOTE: the .id value must match the obj[.id]  in the data set\n               // so if your object data looks like:\n               // \t{\n               //\t\tname_first:'Neo',\n               //\t\tname_last: 'The One'\n               //  },\n               // then the ids should be:\n               // { id:'name_first', value:'xxx', type:'string' }\n               currFields.push({\n                  id: f.columnName,\n                  value: f.label,\n                  type: f.key,\n               });\n            }\n         });\n      }\n\n      return currFields;\n   }\n\n   // conditionRules()\n   // Return the current rule definition object for this Action.\n   // @return {obj}\n   conditionRules() {\n      return this.queryRules;\n   }\n\n   // objectLoad\n   // save the current object this Action is associated with.\n   objectLoad(object) {\n      // this.currentObject = object;\t\t\t\t// DO WE NEED THIS?\n      this.queryObjectLoad(object);\n   }\n\n   // queryObjectLoad\n   // save the current object this Action is using to build query rules.\n   queryObjectLoad(object) {\n      this.queryObject = object;\n   }\n\n   formLoad(form) {\n      this.currentForm = form;\n   }\n\n   // process\n   // gets called when a form is submitted and the data passes the Query Builder Rules.\n   // @param {obj} options\n   // @return {Promise}\n   process(options) {\n      console.error(\n         \"!!! ABViewRuleAction.process() should be overridden by its child class.\"\n      );\n      return new Promise((resolve, reject) => {\n         reject(\n            new Error(\n               \"ABViewRuleAction.process() should be overridden by its child class.\"\n            )\n         );\n      });\n   }\n\n   // valueDisplay\n   // create the form to collect the specific data this Action needs to function.\n   // @param {string} webixID  the $$(webixID) of the area to insert our display.\n   valueDisplay(webixID) {\n      return this.valueDisplayComponent(webixID);\n   }\n\n   // valueDisplayComponent\n   // Return an ABView to display our values form.\n   //\n   valueDisplayComponent(idBase) {\n      return (this._ui = {\n         ui: {\n            template: \"ABViewRuleAction.valueDisplayComponent\",\n         },\n         init: (data) => {\n            console.error(\n               \"!!! ABViewRuleAction.valueDisplayComponent() should be overridden.\"\n            );\n            console.warn(\" --> passed in data:\", data);\n         },\n      });\n   }\n\n   // fromSettings\n   // initialize this Action from a given set of setting values.\n   // @param {obj}  settings\n   fromSettings(settings) {\n      // settings: {\n      //\tvalueRules:{}\n      // }\n      settings = settings || {};\n      this.valueRules = settings.valueRules || {};\n   }\n\n   // toSettings\n   // return an object that represents the current state of this Action\n   // @return {obj}\n   toSettings() {\n      var settings = {};\n\n      // require the child to insert the valueRules\n      return settings;\n   }\n\n   /**\n    * @method isReady()\n    * returns a promise that gets resolved once our action is ready to work.\n    * @return {Promise}\n    */\n   isReady() {\n      return Promise.resolve();\n   }\n\n   // NOTE: Querybuilder v5.2 has a bug where it won't display the [and/or]\n   // choosers properly if it hasn't been shown before the .setValue() call.\n   // so this work around allows us to refresh the display after the .show()\n   // on the popup.\n   // When they've fixed the bug, we'll remove this workaround:\n   qbFixAfterShow() {\n      // our child classes can implement this if needed.\n      // \t- ABViewRuleActionFormRecordRuleUpdateConnected\n   }\n};\n","//\n// ABViewRuleList\n//\n// A UI component that is responsible for displaying a list of current \"Rules\"\n// for a given purpose.  Some examples are the\n//\t\tForm -> Submit Rules,\n//\t\tForm -> Display Rules\n// \t\tForm -> Record Rules.\n//\n\n// ABViewRuleList is the parent object that manages displaying the common popup,\n// list, adding a rule, removing rules, etc...\n//\n// It is intending to be subclassed by a Specific List object that will load\n// up a given set of Actions for their list.\n//\n// When using it in the AppBuilder Interface Builder, this object provides:\n// \tvar PopupRecordList = new ABViewRuleList(App, idBase);\n//  PopupRecordList.fromSettings(CurrentObjectDefinition.rules); // populates List with current settings defined in CurrentObjectDefinition\n//  PopupRecordList.init({ onSave:()=>{}})\t// displays the popup for IB\n//  CurrentObjectDefinition.rules = PopupRecordList.toSettings(); // save the settings to store in json config\n//\n// When using on a live running App:\n//  PopupRecordList = new ABViewRuleList(App, idBase);\n//  PopupRecordList.fromSettings();\n//\n//  onFormSubmit(data) {\n//\t\t// note: this automatically validates and runs each rule:\n//\t\tPopupRecordList.process({data:data, view:{ current ABViewForm object }})\n//\t\t.then()\n//\t\t.catch();\n//  }\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABViewRuleList {\n   /**\n    * @param {object} App\n    *      The shared App object that is created in OP.Component\n    * @param {string} idBase\n    *      Identifier for this component\n    */\n   constructor(childSettings) {\n      this.listRules = [];\n      this.currentObject = null;\n\n      // ensure required values:\n      childSettings = childSettings || {};\n      childSettings.labels = childSettings.labels || {};\n      childSettings.labels.header =\n         childSettings.labels.header || \"ab.components.form.ruleList\";\n      childSettings.labels.headerDefault =\n         childSettings.labels.headerDefault || \"*Rule List\";\n      this.childSettings = childSettings;\n   }\n\n   /**\n    * @method component\n    * initialize the UI display for this popup editor.\n    * @param {obj} App  The common UI App object shared among our UI components\n    * @param {string} idBase A unique Key used the the base of our unique ids\n    */\n   component(App, idBase) {\n      this.App = this.App || App;\n      this.idBase = idBase;\n\n      App = App || this.App;\n\n      this.currentForm = null;\n\n      // internal list of Webix IDs to reference our UI components.\n      var ids = (this.ids = {\n         component: `${idBase}_component`,\n         rules: `${idBase}_rules`,\n         rulesScrollview: `${idBase}_rulesScrollview`,\n\n         action: `${idBase}_action`,\n         when: `${idBase}_when`,\n\n         values: `${idBase}_values`,\n         set: `${idBase}_set`,\n      });\n\n      // webix UI definition:\n      this.ui = {\n         view: \"window\",\n         id: ids.component,\n         modal: true,\n         position: \"center\",\n         resize: true,\n         width: 700,\n         height: 450,\n         css: \"ab-main-container\",\n         head: {\n            view: \"toolbar\",\n            css: \"webix_dark\",\n            cols: [\n               {\n                  view: \"label\",\n                  label: this.childSettings.labels.headerDefault,\n               },\n               {\n                  view: \"button\",\n                  css: \"webix_primary\",\n                  icon: \"fa fa-plus\",\n                  type: \"iconButton\",\n                  label: L(\"Add new rule\"),\n                  width: 150,\n                  click: () => {\n                     this.addRule();\n                     console.log($$(ids.rules).$height);\n                     $$(ids.rulesScrollview).scrollTo(0, $$(ids.rules).$height);\n                  },\n               },\n            ],\n         },\n         body: {\n            type: \"form\",\n            rows: [\n               {\n                  view: \"scrollview\",\n                  id: ids.rulesScrollview,\n                  scroll: \"xy\",\n                  body: {\n                     view: \"layout\",\n                     id: ids.rules,\n                     margin: 20,\n                     padding: 10,\n                     rows: [],\n                  },\n               },\n               // {\n               // \tcss: { 'background-color': '#fff' },\n               // \tcols: [\n               // \t\t{\n               // \t\t\tview: \"button\",\n               // \t\t\ticon: \"plus\",\n               // \t\t\ttype: \"iconButton\",\n               // \t\t\tlabel: labels.component.addNewRule,\n               // \t\t\twidth: 150,\n               // \t\t\tclick: () => {\n               // \t\t\t\tthis.addRule();\n               // \t\t\t}\n               // \t\t},\n               // \t\t{ fillspace: true }\n               // \t]\n               // },\n               {\n                  css: { \"background-color\": \"#fff\" },\n                  cols: [\n                     { fillspace: true },\n                     {\n                        view: \"button\",\n                        name: \"cancel\",\n                        value: L(\"Cancel\"),\n                        css: \"ab-cancel-button\",\n                        autowidth: true,\n                        click: function () {\n                           _logic.buttonCancel();\n                        },\n                     },\n                     {\n                        view: \"button\",\n                        css: \"webix_primary\",\n                        name: \"save\",\n                        label: L(\"Save\"),\n                        type: \"form\",\n                        autowidth: true,\n                        click: function () {\n                           _logic.buttonSave();\n                        },\n                     },\n                     { fillspace: true },\n                  ],\n               },\n            ],\n         },\n      };\n\n      // var _currentObject = null;\n      var _rules = [];\n\n      // for setting up UI\n      this.init = (options) => {\n         // register callbacks:\n         for (var c in _logic.callbacks) {\n            _logic.callbacks[c] = options[c] || _logic.callbacks[c];\n         }\n\n         webix.ui(this.ui);\n      };\n\n      // internal business logic\n      var _logic = (this._logic = {\n         buttonCancel: function () {\n            $$(ids.component).hide();\n         },\n\n         buttonSave: () => {\n            var results = this.toSettings();\n\n            _logic.callbacks.onSave(results);\n            _logic.hide();\n         },\n\n         callbacks: {\n            onCancel: function () {\n               console.warn(\"NO onCancel()!\");\n            },\n            onSave: function (field) {\n               console.warn(\"NO onSave()!\");\n            },\n         },\n\n         hide: function () {\n            $$(ids.component).hide();\n         },\n\n         show: function () {\n            $$(ids.component).show();\n         },\n      });\n\n      this.show = _logic.show;\n      this.setValue = _logic.setValue;\n   }\n\n   /**\n    * @method addRule\n    * Instantiate a new Rule in our list.\n    * @param {obj} settings  The settings object from the Rule we created in .toSettings()\n    */\n   addRule(settings) {\n      var Rule = this.getRule();\n      if (!Rule) return;\n\n      this.listRules.push(Rule);\n\n      // if we have tried to create our component:\n      if (this.ids) {\n         // if our actually exists, then populate it:\n         var RulesUI = $$(this.ids.rules);\n         if (RulesUI) {\n            // make sure Rule.ui is created before calling .init()\n            Rule.component(this.App, this.idBase); // prepare the UI component\n            var viewId = RulesUI.addView(Rule.ui);\n\n            Rule.init({\n               onDelete: (deletedRule) => {\n                  $$(this.ids.rules).removeView(Rule.ids.component);\n\n                  var index = this.listRules.indexOf(deletedRule);\n                  if (index !== -1) {\n                     this.listRules.splice(index, 1);\n                  }\n               },\n            });\n         }\n      }\n\n      if (settings) {\n         Rule.fromSettings(settings);\n      }\n   }\n\n   /**\n    * @method fromSettings\n    * Create an initial set of default values based upon our settings object.\n    * @param {obj} settings  The settings object we created in .toSettings()\n    */\n   fromSettings(settings) {\n      // settings: [\n      //  { rule.settings },\n      //  { rule.settings }\n      // ]\n\n      // clear any existing Rules:\n      this.listRules.forEach((rule) => {\n         if (\n            this.ids &&\n            this.ids.rules &&\n            rule &&\n            rule.ids &&\n            rule.ids.component\n         ) {\n            $$(this.ids.rules).removeView(rule.ids.component);\n         }\n      });\n      this.listRules = [];\n\n      if (settings) {\n         settings.forEach((ruleSettings) => {\n            this.addRule(ruleSettings);\n         });\n      }\n   }\n\n   /**\n    * @method objectLoad\n    * A rule is based upon a Form that was working with an Object.\n    * .objectLoad() is how we specify which object we are working with.\n    *\n    * @param {ABObject} The object that will be used to evaluate the Rules\n    */\n   objectLoad(object) {\n      this.currentObject = object;\n\n      // tell each of our rules about our object\n      this.listRules.forEach((r) => {\n         r.objectLoad(object);\n      });\n   }\n\n   processPre(options) {\n      (this.listRules || [])\n         .filter((rule) => rule.isPreProcess == true)\n         .forEach((rule) => {\n            rule.processPre(options, options.data);\n         });\n   }\n\n   /**\n    * @method process\n    * Take the provided data and process each of our rules.\n    * @param {obj} options\n    * @return {promise}\n    */\n   process(options) {\n      return new Promise((resolve, reject) => {\n         let listRules = (this.listRules || []).filter(\n            (rule) => !rule.isPreProcess\n         );\n\n         var numDone = 0;\n         var onDone = () => {\n            numDone++;\n            if (numDone >= listRules.length) {\n               resolve();\n            }\n         };\n\n         listRules.forEach((rule) => {\n            rule\n               .process(options)\n               .then(function () {\n                  onDone();\n               })\n               .catch((err) => {\n                  reject(err);\n               });\n         });\n\n         if (listRules.length == 0) {\n            resolve();\n         }\n      });\n   }\n\n   /**\n    * @method toSettings\n    * create a settings object to be persisted with the application.\n    * @return {array} of rule settings.\n    */\n   toSettings() {\n      var settings = [];\n      this.listRules.forEach((r) => {\n         settings.push(r.toSettings());\n      });\n      return settings;\n   }\n\n   getRule() {\n      console.error(\n         \"!!! ABViewRuleList.getRule() should be overridded by a child object.\"\n      );\n      return null;\n   }\n\n   formLoad(form) {\n      this.currentForm = form;\n      this.App = this.App || form.App;\n   }\n\n   /**\n    * @method isReady()\n    * returns a promise that gets resolved once our action is ready to work.\n    * @return {Promise}\n    */\n   rulesReady() {\n      // This base class should be overwritten by any subclass that needs\n      // to prepare:\n      return Promise.resolve();\n   }\n\n   // NOTE: Querybuilder v5.2 has a bug where it won't display the [and/or]\n   // choosers properly if it hasn't been shown before the .setValue() call.\n   // so this work around allows us to refresh the display after the .show()\n   // on the popup.\n   // When they've fixed the bug, we'll remove this workaround:\n   qbFixAfterShow() {\n      this.listRules.forEach((r) => {\n         r.qbFixAfterShow();\n      });\n   }\n};\n","//\n// ABViewRuleListFormRecordRules\n//\n// A component that is responsible for displaying the specific list of Record\n// Rules for a form.\n//\nconst ABViewRuleList = require(\"./ABViewRuleList\");\nconst ABViewRule = require(\"./ABViewRule\");\n\nconst RoleUpdateExisting = require(\"./ruleActions/ABViewRuleActionFormRecordRuleUpdate\");\nconst RoleInsertConnected = require(\"./ruleActions/ABViewRuleActionFormRecordRuleInsertConnected\");\nconst RoleUpdateConnected = require(\"./ruleActions/ABViewRuleActionFormRecordRuleUpdateConnected\");\nconst RoleRemoveConnected = require(\"./ruleActions/ABViewRuleActionFormRecordRuleRemoveConnected\");\n\nmodule.exports = class ABViewRuleListFormRecordRules extends ABViewRuleList {\n   /**\n    * @param {object} App\n    *      ?what is this?\n    * @param {string} idBase\n    *      Identifier for this component\n    */\n   constructor() {\n      var settings = {\n         labels: {\n            header: \"ab.components.form.recordRules\",\n            headerDefault: \"*Record Rules\",\n         },\n      };\n      super(settings);\n   }\n\n   // must return the actual Rule object.\n   getRule() {\n      var listActions = [\n         new RoleUpdateExisting(\n            this.App,\n            `${this.idBase}_ruleActionUpdate`,\n            this.currentForm\n         ),\n         new RoleInsertConnected(\n            this.App,\n            `${this.idBase}_ruleActionInsert`,\n            this.currentForm\n         ),\n         new RoleUpdateConnected(\n            this.App,\n            `${this.idBase}_ruleActionUpdateConnected`,\n            this.currentForm\n         ),\n         new RoleRemoveConnected(\n            this.App,\n            `${this.idBase}_ruleActionRemoveConnected`,\n            this.currentForm\n         ),\n      ];\n\n      var Rule = new ABViewRule(listActions);\n      if (this.currentObject) {\n         Rule.objectLoad(this.currentObject);\n      }\n      return Rule;\n   }\n\n   /**\n    * @method isReady()\n    * returns a promise that gets resolved once our list of Rules is\n    * ready to work.\n    * @return {Promise}\n    */\n   async rulesReady() {\n      var allReady = (this.listRules || []).map((r) => r.isReady());\n      await Promise.all(allReady);\n   }\n};\n","//\n// ABViewRuleListFormSubmitRules\n//\n// A component that is responsible for displaying the specific list of Submit\n// Rules for a form.\n//\nconst ABViewRuleList = require(\"./ABViewRuleList\");\nconst ABViewRule = require(\"./ABViewRule\");\n\nconst RoleConfirmMessage = require(\"./ruleActions/ABViewRuleActionFormSubmitRuleConfirmMessage\");\nconst RuleExistPage = require(\"./ruleActions/ABViewRuleActionFormSubmitRuleExistPage\");\nconst RuleParentPage = require(\"./ruleActions/ABViewRuleActionFormSubmitRuleParentPage\");\nconst RuleClosePopup = require(\"./ruleActions/ABViewRuleActionFormSubmitRuleClosePopup\");\nconst RuleWebsite = require(\"./ruleActions/ABViewRuleActionFormSubmitRuleWebsite\");\nconst RuleEmail = require(\"./ruleActions/ABViewRuleActionFormSubmitRuleEmail\");\n\nmodule.exports = class ABViewRuleListFormSubmitRules extends ABViewRuleList {\n   /**\n    * @param {object} App\n    *      ?what is this?\n    * @param {string} idBase\n    *      Identifier for this component\n    */\n   constructor() {\n      var settings = {\n         labels: {\n            header: \"ab.component.form.submitRule\",\n            headerDefault: \"*Submit Rules\",\n         },\n      };\n      super(settings);\n   }\n\n   // must return the actual Rule object.\n   getRule() {\n      var listActions = [\n         new RoleConfirmMessage(\n            this.App,\n            `${this.idBase}_ruleActionConfirmMessage`\n         ),\n         new RuleExistPage(this.App, `${this.idBase}_ruleActionExistPage`),\n         new RuleParentPage(this.App, `${this.idBase}_ruleActionParentPage`),\n         new RuleClosePopup(this.App, `${this.idBase}_ruleActionClosePopup`),\n         new RuleWebsite(this.App, `${this.idBase}_ruleActionWebsite`),\n         new RuleEmail(this.App, `${this.idBase}_ruleActionEmail`),\n      ];\n\n      var Rule = new ABViewRule(listActions);\n      Rule.objectLoad(this.currentObject);\n      Rule.formLoad(this.currentForm);\n      return Rule;\n   }\n};\n","//\n// ABViewRuleActionFormRecordRuleInsertConnected\n//\n// An action that allows you to insert a connected object.\n//\n// NOTE: this is very similar to the Update Connected Rule, so we subclass that one and\n// modify it to only Insert data.\n//\n//\nconst UpdateConnected = require(\"./ABViewRuleActionFormRecordRuleUpdateConnected\");\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABViewRuleActionFormRecordRuleInsertConnected extends (\n   UpdateConnected\n) {\n   /**\n    * @param {object} App\n    *      The shared App object that is created in OP.Component\n    * @param {string} idBase\n    *      Identifier for this component\n    */\n   constructor(App, idBase, currentForm) {\n      super(App, idBase, currentForm);\n\n      this.key = \"ABViewRuleActionFormRecordRuleInsertConnected\";\n      this.label = L(\"Insert Connected Object\");\n   }\n\n   /**\n    * valueDisplayChooser\n    * Our Values Display is a Select Box with a choice of connected fields.\n    * Once a field is chosen, then we display the Updater form.\n    * @param {string}  idBase  a unique webix id to base our sub components on.\n    */\n   valueDisplayChooser(idBase) {\n      var Component = super.valueDisplayChooser(idBase);\n\n      // in our case, there are no additional QB conditions:\n      // so overwrite the .showQBIfNeeded() routine to not show anything:\n      Component._logic.showQBIfNeeded = function () {};\n\n      return Component;\n   }\n\n   /**\n    * queryBuilderDisplay\n    * override our parent .queryBuilderDisplay to not create a new .objectQB\n    * @return {null}\n    */\n   queryBuilderDisplay() {\n      return null;\n   }\n\n   /**\n    * process\n    * gets called when a form is submitted and the data passes the Query Builder Rules.\n    * @param {obj} options\n    *\t\t\t\toptions.data : {obj} the key=>value of the data just entered by the form\n    *\t\t\t\toptions.form : {ABViewForm} the Form object that is processing this rule\n    * @return {Promise}\n    */\n   process(options) {\n      // get connected object\n      var connObj = this.connectedObject();\n      var model = connObj.model();\n\n      var connectionField = this.selectedField();\n\n      // var condition = null; // our lookup condition\n\n      // we are going to create a new instance of the connected object\n      // and make sure our .id is in the connected object's connectionField\n      // the server side will take care of making the proper relationship.\n\n      // first, create a new set of values:\n      var newObjectValues = {};\n\n      // update them according to our rules\n      this.processUpdateObject({}, newObjectValues);\n\n      if (newObjectValues.newRecords) {\n         // now add our .id to the proper field in newObjectValues\n         let connectedObjectField = connObj.fieldByID(\n            connectionField.settings.linkColumn\n         );\n\n         if (!connectedObjectField)\n            return Promise.reject(\"No connected object field\");\n\n         newObjectValues.newRecords.forEach((r) => {\n            r[connectedObjectField.columnName] = options.data.id;\n            // perform the update/insert\n            return model.create(r);\n         });\n      } else {\n         // now add our .id to the proper field in newObjectValues\n         let connectedObjectField = connObj.fieldByID(\n            connectionField.settings.linkColumn\n         );\n\n         if (!connectedObjectField)\n            return Promise.reject(\"No connected object field\");\n\n         newObjectValues[connectedObjectField.columnName] = options.data.id;\n\n         // perform the update/insert\n         return model.create(newObjectValues);\n      }\n   }\n\n   /**\n    * toSettings\n    * return an object that represents the current state of this Action\n    * @return {obj}\n    */\n   toSettings() {\n      // settings: {\n      // \tselectedFieldID: 'guid',\n      //\tvalueRules:{}\t\t// from ABViewRuleActionObjectUpdater\n      // }\n\n      // let our parent store our QB settings\n      var settings = super.toSettings();\n\n      // we don't use .qpCondition\n      delete settings.qbCondition;\n\n      return settings;\n   }\n};\n","//\n// ABViewRuleActionFormRecordRuleRemoveConnected\n//\n// An action that allows you to update fields on an object that is connected to\n// the current object we just Added/Updated\n//\n//\nconst ABViewRuleActionFormRecordRuleUpdateConnected = require(\"./ABViewRuleActionFormRecordRuleUpdateConnected\");\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABViewRuleActionFormRecordRuleRemoveConnected extends (\n   ABViewRuleActionFormRecordRuleUpdateConnected\n) {\n   constructor(App, idBase, currentForm) {\n      super(App, idBase, currentForm);\n\n      this.key = \"ABViewRuleActionFormRecordRuleRemoveConnected\";\n      this.label = L(\"Remove Connected Record\");\n\n      this.isUpdateValueDisabled = true; // disable update data of each fields\n   }\n\n   /**\n    * process\n    * gets called when a form is submitted and the data passes the Query Builder Rules.\n    * @param {obj} options\n    *\t\t\t\toptions.data : {obj} the key=>value of the data just entered by the form\n    *\t\t\t\toptions.form : {ABViewForm} the Form object that is processing this rule\n    * @return {Promise}\n    */\n   process(options) {\n      let selectedField = this.selectedField();\n      this._formData = options.data;\n\n      return new Promise((resolve, reject) => {\n         // get the model from the provided Form Obj:\n         let dc = options.form.datacollection;\n         if (!dc) return resolve();\n\n         let model = dc.model;\n         if (!model) return resolve();\n\n         let updatedVals = {};\n         updatedVals[selectedField.columnName] = \"\";\n\n         model\n            .update(options.data.id, updatedVals)\n            .then(resolve)\n            .catch((err) => {\n               this.AB.notify.developer(err, {\n                  message:\n                     \"!!! ABViewRuleActionFormRecordRuleUpdate.process(): update error:\",\n                  data: options.data,\n               });\n               reject(err);\n            });\n      });\n   }\n};\n","//\n// ABViewRuleActionFormRecordRuleUpdate\n//\n// An action that allows you to update fields on an object that was currently\n// Added/Updated.\n//\n//\nconst ABViewRuleActionObjectUpdater = require(\"./ABViewRuleActionObjectUpdater\");\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABViewRuleActionFormRecordRuleUpdate extends (\n   ABViewRuleActionObjectUpdater\n) {\n   /**\n    * @param {object} App\n    *      The shared App object that is created in OP.Component\n    * @param {string} idBase\n    *      Identifier for this component\n    */\n   constructor(App, idBase, currentForm) {\n      super(App, idBase, currentForm);\n\n      this.key = \"ABViewRuleActionFormRecordRuleUpdate\";\n      this.label = L(\"Update Record\");\n   }\n\n   get isPreProcess() {\n      return true;\n   }\n};\n","//\n// ABViewRuleActionFormRecordRuleUpdateConnected\n//\n// An action that allows you to update fields on an object that is connected to\n// the current object we just Added/Updated\n//\n//\nconst ABViewRuleActionObjectUpdater = require(\"./ABViewRuleActionObjectUpdater\");\nconst ABFieldConnect = require(\"../../platform/dataFields/ABFieldConnect\");\nconst ObjectQueryBuilder = require(\"../ABViewQueryBuilderObjectFieldConditions\");\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABViewRuleActionFormRecordRuleUpdateConnected extends (\n   ABViewRuleActionObjectUpdater\n) {\n   constructor(App, idBase, currentForm) {\n      super(App, idBase, currentForm);\n\n      this.key = \"ABViewRuleActionFormRecordRuleUpdateConnected\";\n      this.label = L(\"Update Connected Record\");\n\n      this.baseObject = null; // the object the current form is working with.\n      // Use this to find our connected fields.\n\n      this.selectedFieldID = null; // the selected field ID in the .baseObject that is\n      // used for updating.  This should be one of the connection Fields.\n\n      this.fieldDropList = []; // the list of fields to offer based upon the current .baseObject.\n\n      this.objectQB = null; // the QueryBuilder used for offering conditions based upon our connected Object.\n      this.qbCondition = null; // the QB condition entered for selecting which remote object.\n   }\n\n   // field\n\n   /**\n    * objectLoad\n    * save the current object this Action is associated with.\n    * in the case of the UpdateConnected Action, assigning us\n    * this object only impacts the queryObject.\n    *\n    * The Updater form will use another object we select in\n    * the form dropdown.\n    *\n    * @param {object} object\n    *\n    */\n   objectLoad(object) {\n      this.queryObjectLoad(object);\n      this.baseObject = object;\n\n      // now build our fieldDropList for the select\n      var connectionFields = this.connectedFieldList();\n      connectionFields.forEach((cf) => {\n         this.fieldDropList.push({\n            id: cf.id,\n            value: cf.label,\n         });\n      });\n   }\n\n   /**\n    * connectedFieldList\n    * return the fields in our .baseObject that are connections to other objects.\n    * @return {array} of {ABField}\n    */\n   connectedFieldList() {\n      var connectKey = ABFieldConnect.defaults().key;\n      if (this.baseObject && this.baseObject.fields) {\n         return this.baseObject.fields((f) => {\n            return f.key == connectKey;\n         });\n      } else {\n         return [];\n      }\n   }\n\n   /**\n    * connectedObject\n    * return the ABObject associated with the selected connection field.\n    * @return {ABObject}\n    */\n   connectedObject() {\n      if (this.selectedFieldID) {\n         var selectedField = this.selectedField();\n         if (selectedField) {\n            return selectedField.datasourceLink;\n         }\n      }\n\n      return null;\n   }\n\n   /**\n    * selectedField\n    * return the selected {ABField} object.\n    * @return {ABField}\n    */\n   selectedField() {\n      return this.connectedFieldList().filter((f) => {\n         return f.id == this.selectedFieldID;\n      })[0];\n   }\n\n   /**\n    * valueDisplayComponent\n    * Return an ABView to display our values form.\n    * @param {string}  idBase  a unique webix id to base our sub components on.\n    */\n   valueDisplayComponent(idBase) {\n      if (this._uiChooser == null) {\n         this._uiChooser = this.valueDisplayChooser(idBase);\n      }\n\n      return this._uiChooser;\n   }\n\n   /**\n    * valueDisplayChooser\n    * Our Values Display is a Select Box with a choice of connected fields.\n    * Once a field is chosen, then we display the Updater form.\n    * @param {string}  idBase  a unique webix id to base our sub components on.\n    */\n   valueDisplayChooser(idBase) {\n      var uniqueInstanceID = webix.uid();\n      var myUnique = (key) => {\n         // return idBase + '_' + key  + '_' + uniqueInstanceID;\n         return key + \"_\" + uniqueInstanceID;\n      };\n\n      var ids = {\n         component: myUnique(\"updateConnectedValues\"),\n         updateForm: myUnique(\"updateChooser\"),\n         selectConnectedField: myUnique(\"updateSelect\"),\n         updateFieldsForm: myUnique(\"updateForm\"),\n      };\n\n      var _ui = {\n         id: ids.component,\n         view: \"layout\",\n         css: \"ab-component-form-rule\",\n         rows: [\n            {\n               id: ids.selectConnectedField,\n               view: \"richselect\",\n               label: L(\"Select which connected object to update.\"),\n               labelWidth: 300,\n               value: this.selectedField,\n               options: this.fieldDropList,\n               on: {\n                  onChange: (newVal, oldVal) => {\n                     _logic.selectAction(newVal, oldVal);\n                  },\n               },\n            },\n         ],\n      };\n\n      var init = (valueRules) => {\n         valueRules = valueRules || this.valueRules;\n\n         // make sure our currently selected field is selected.\n         if (this.selectedFieldID) {\n            var select = $$(ids.selectConnectedField);\n            if (select) {\n               select.setValue(this.selectedFieldID);\n            }\n         }\n      };\n\n      var _logic = (this._logic = {\n         addDisplay: (view) => {\n            $$(ids.component).addView(view);\n         },\n\n         // removePreviousDisplays\n         // remove the previous components that reflected the conditions and\n         // update values of the previously selected field.\n         removePreviousDisplays: () => {\n            var allViews = $$(ids.component).getChildViews();\n            var cloneAllViews = [];\n            allViews.forEach((v) => {\n               cloneAllViews.push(v);\n            });\n            cloneAllViews.forEach((v) => {\n               // don't remove the field picker\n               if (v.config.id != ids.selectConnectedField) {\n                  $$(ids.component).removeView(v);\n               }\n            });\n         },\n\n         selectAction: (newVal, oldVal) => {\n            _logic.removePreviousDisplays(); // of the Query Builder and Update form for old selection:\n\n            this.selectedFieldID = newVal;\n            var connectedObject = this.connectedObject();\n\n            if (connectedObject) {\n               // it is the remote object that we are allowed to Update fields on.\n               this.updateObjectLoad(connectedObject);\n               ///// NOTE: important to call super.valueDisplayComponent()\n               this.updateComponent = super.valueDisplayComponent(\n                  ids.updateFieldsForm\n               ); // parent obj\n\n               _logic.showQBIfNeeded();\n\n               // create a new blank update form\n               _logic.addDisplay(this.updateComponent.ui);\n               this.updateComponent.init();\n\n               if (this.isUpdateValueDisabled) {\n                  let $updateForm = $$(this.updateComponent.ui.id);\n                  if ($updateForm) {\n                     $updateForm.disable();\n                     $updateForm.hide();\n                  }\n               }\n            } else {\n               this.AB.notify.builder(new Error(\"No connectedObject found.\"), {\n                  fieldID: this.selectedFieldID,\n               });\n            }\n         },\n\n         showQBIfNeeded: () => {\n            //// NOTE: we decided to go ahead and display the QB in ALL situations to give\n            //// the user the ability to set a condition on the update even if the field\n            //// is only a one to one.\n            //// If we want to remove the filter in case of a \"one\" linkType, then put\n            //// these conditions back in:\n\n            // var field = this.selectedField();\n\n            // // we don't need the QB if the destination object link type if 'one'.\n            // // there will only be one to get back, so no conditions needed.\n            // if (field.settings.linkType != 'one') {\n\n            var qbComponent = this.queryBuilderDisplay();\n\n            qbComponent.component(this.App, this.idBase);\n            _logic.addDisplay(qbComponent.ui);\n            qbComponent.init({});\n\n            // }\n         },\n\n         fromSettings: (settings) => {\n            // // first time through, be sure to set the connectedObject first\n            // this.selectedFieldID = settings.selectedFieldID;\n            // var connectedObject = this.connectedObject();\n\n            // this triggers the update of the display, creation of QB,\n            $$(ids.selectConnectedField).setValue(settings.selectedFieldID);\n\n            if (this.objectQB) {\n               this.objectQB.setValue(this.qbCondition);\n            }\n\n            if (this.updateComponent) {\n               this.updateComponent.fromSettings(settings);\n            }\n         },\n\n         toSettings: () => {\n            // valueRules = {\n            //\tfieldOperations:[\n            //\t\t{ fieldID:xxx, value:yyyy, type:zzz, op:aaa }\n            //\t]\n            // }\n            var settings = { fieldOperations: [] };\n\n            // for each of our formRows, decode the propery {}\n            this.formRows.forEach((fr) => {\n               var rowSettings = fr.toSettings();\n               if (rowSettings) {\n                  settings.fieldOperations.push(rowSettings);\n               }\n            });\n\n            return settings;\n         },\n      });\n\n      return {\n         ui: _ui,\n         init: init,\n         fromSettings: (settings) => {\n            _logic.fromSettings(settings);\n         },\n         toSettings: () => {\n            return _logic.toSettings();\n         },\n         _logic: _logic,\n      };\n   }\n\n   /**\n    * queryBuilderDisplay\n    * returns our Query Builder object used in our display.\n    * It is called by the .showQBIfNeeded() method.\n    * @return {ABViewQueryBuilderObjectFieldConditions}\n    */\n   queryBuilderDisplay() {\n      if (!this.objectQB) {\n         this.objectQB = new ObjectQueryBuilder(\n            L(\"How to choose which object:\")\n         );\n\n         var connObj = this.connectedObject();\n         if (connObj) this.objectQB.objectLoad(connObj);\n      }\n      return this.objectQB;\n   }\n\n   /**\n    * process\n    * gets called when a form is submitted and the data passes the Query Builder Rules.\n    * @param {obj} options\n    *\t\t\t\toptions.data : {obj} the key=>value of the data just entered by the form\n    *\t\t\t\toptions.form : {ABViewForm} the Form object that is processing this rule\n    * @return {Promise}\n    */\n   process(options) {\n      this._formData = options.data;\n\n      // get connected object\n      var connObj = this.connectedObject();\n      var model = connObj.model();\n\n      var connectionField = this.selectedField();\n\n      var condition = null; // our lookup condition\n\n      // modifyCondition\n      // async fn() to fill out what the condition should be for limiting the remote\n      // objects to values in use by the current object.\n      // @param {fn} cb  the callback to use when we are finished:\n      //\t\t\t\t\tcb(err, )\n      var modifyCondition = (cb) => {\n         // So, let's get a copy of our current data, with all it's connected items\n         // attached.\n         var thisModel = this.baseObject.model();\n         thisModel\n            .findConnected(connectionField.columnName, options.data)\n            .then((items) => {\n               // if we didn't get any results, then simply return\n               // NOTE: this will leave condition == null and cancel this update.\n               if (!items || items.length == 0) {\n                  cb();\n                  return;\n               }\n\n               // then use these to limit the connected data of our Action:\n\n               // get all the ids\n               var ids = items.map((i) => {\n                  return i.id;\n               });\n\n               // resulting condition: { id in [listIDs]} AND { QB Condition }\n               condition = {\n                  glue: \"and\",\n                  rules: [\n                     {\n                        key: connObj.PK(),\n                        rule: \"in\",\n                        value: ids,\n                     },\n                  ],\n               };\n\n               // check to make sure qbCondition actually has a condition before adding it\n               // to our condition:\n               if (Object.keys(this.qbCondition).length > 0) {\n                  condition.rules.push(this.qbCondition);\n               }\n\n               cb();\n            })\n            .catch(cb);\n      };\n\n      // .process() returns a Promise\n      return new Promise((resolve, reject) => {\n         // upateIt()\n         // updates a given item with our changes.\n         // @param {obj} item  the item to update\n         // @param {fn}  cb    a callback function when update is complete.\n         var updateIt = (item, cb) => {\n            let isUpdated = this.processUpdateObject({}, item);\n            if (!isUpdated) {\n               cb();\n            } else {\n               model\n                  .update(item.id, item)\n                  .then(() => {\n                     cb();\n                  })\n                  .catch((err) => {\n                     this.AB.notify.developer(err, {\n                        message:\n                           \"!!! ABViewRuleActionFormRecordRuleUpdateConnected.process(): update error:\",\n                        data: options.data,\n                     });\n                     cb(err);\n                  });\n            }\n         };\n\n         // now figure out which elements belong to this object\n         // done in modifyCondition()\n         modifyCondition((err) => {\n            if (err) {\n               reject(err);\n               return;\n            }\n\n            if (condition === null) {\n               // this is the case where we didn't have the proper data to complete our\n               // update.  So let's just fail gracefully, and continue on.\n\n               // QUESTION: is this the right way to handle it?\n               resolve();\n            } else {\n               // get all the entries that match our condition:\n               model\n                  .findAll({ where: condition })\n                  .then((list) => {\n                     var done = 0;\n\n                     // list : {data: Array(4), total_count: 4, pos: null, offset: null, limit: null}\n                     if (list && list.data) {\n                        list = list.data;\n                     }\n\n                     // for each entry, update it with our values:\n                     list.forEach((item) => {\n                        updateIt(item, (err) => {\n                           if (err) {\n                              return reject(err);\n                           }\n                           done++;\n                           if (done >= list.length) {\n                              // now they are all updated, so continue.\n                              resolve();\n                           }\n                        });\n                     });\n\n                     // if there were no entries to update -> continue\n                     if (list.length == 0) {\n                        resolve();\n                     }\n                  })\n                  .catch(reject);\n            }\n         }); // end modifyCondition()\n      }); // end Promise()\n   }\n\n   /**\n    * fromSettings\n    * initialize this Action = require(a given set of setting values.\n    * @param {obj} settings  the settings {} returned = require(toSettings()\n    */\n   fromSettings(settings) {\n      settings = settings || {};\n\n      this.selectedFieldID = settings.selectedFieldID || null;\n      this.qbCondition = settings.qbCondition || {};\n\n      super.fromSettings(settings);\n\n      // if we have a display component, then populate it:\n      if (this._uiChooser) {\n         this._logic.fromSettings(settings);\n      }\n   }\n\n   /**\n    * toSettings\n    * return an object that represents the current state of this Action\n    * @return {obj}\n    */\n   toSettings() {\n      // settings: {\n      // \tselectedFieldID: 'guid',\n      //  qbCondition: [],\n      //\tvalueRules:{}\t\t// = require(ABViewRuleActionObjectUpdater\n      // }\n\n      // let our parent store our QB settings\n      var settings = super.toSettings();\n\n      settings.selectedFieldID = this.selectedFieldID;\n\n      var qbCond = null;\n      if (this.objectQB) {\n         qbCond = this.objectQB.getValue();\n         if (Array.isArray(qbCond)) {\n            qbCond = qbCond[0];\n         }\n\n         // FIX: make sure qbCond root element has a 'glue'\n         if (qbCond) {\n            qbCond.glue = qbCond.glue || \"and\";\n         }\n      }\n      settings.qbCondition = qbCond;\n\n      // if we have a display component, then request our details = require(it:\n      if (this._uiChooser) {\n         settings.valueRules = this._logic.toSettings();\n      }\n\n      return settings;\n   }\n\n   // NOTE: Querybuilder v5.2 has a bug where it won't display the [and/or]\n   // choosers properly if it hasn't been shown before the .setValue() call.\n   // so this work around allows us to refresh the display after the .show()\n   // on the popup.\n   // When they've fixed the bug, we'll remove this workaround:\n   qbFixAfterShow() {\n      if (this.objectQB) {\n         this.objectQB.setValue(this.qbCondition);\n      }\n   }\n};\n","//\n// ABViewRuleActionFormSubmitRuleClosePopup\n//\n//\n//\nconst ABViewRuleAction = require(\"../ABViewRuleAction\");\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABViewRuleActionFormSubmitRuleClosePopup extends (\n   ABViewRuleAction\n) {\n   /**\n    * @param {object} App\n    *      The shared App object that is created in OP.Component\n    * @param {string} idBase\n    *      Identifier for this component\n    */\n   constructor(App, idBase) {\n      super();\n\n      this.App = App;\n      this.key = \"ABViewRuleActionFormSubmitRuleClosePopup\";\n      this.label = L(\"Close the current popup\");\n\n      this.currentObject = null; // the object this Action is tied to.\n\n      this.formRows = []; // keep track of the Value Components being set\n      // [\n      //\t\t{ fieldId: xxx, value:yyy, type:key['string', 'number', 'date',...]}\n      // ]\n   }\n\n   // conditionFields() {\n   //    var fieldTypes = [\"string\", \"number\", \"date\", \"formula\", \"calculate\"];\n\n   //    var currFields = [];\n\n   //    if (this.currentObject) {\n   //       this.currentObject.fields().forEach((f) => {\n   //          if (fieldTypes.indexOf(f.key) != -1) {\n   //             // NOTE: the .id value must match the obj[.id]  in the data set\n   //             // so if your object data looks like:\n   //             // \t{\n   //             //\t\tname_first:'Neo',\n   //             //\t\tname_last: 'The One'\n   //             //  },\n   //             // then the ids should be:\n   //             // { id:'name_first', value:'xxx', type:'string' }\n   //             currFields.push({\n   //                id: f.columnName,\n   //                value: f.label,\n   //                type: f.key\n   //             });\n   //          }\n   //       });\n   //    }\n\n   //    return currFields;\n   // }\n\n   // valueDisplayComponent\n   // Return an ABView to display our values form.\n   //\n   valueDisplayComponent(idBase) {\n      this._ui = {\n         ui: {\n            view: \"layout\",\n            rows: [],\n         },\n\n         init: () => {},\n      };\n\n      return this._ui;\n   }\n\n   // process\n   // gets called when a form is submitted and the data passes the Query Builder Rules.\n   // @param {obj} options\n   process(options) {\n      return new Promise((resolve, reject) => {\n         let form = options.form;\n         if (!form) return;\n\n         let popup = form.pageParent((p) => p.settings.type == \"popup\");\n         if (!popup) return;\n\n         // get the dom id of page. it is dom id that is generated in ABLiveTool.js\n         // let pageDomId = [\"ab_live_page\", popup.application.id, popup.id].join(\n         //    \"_\"\n         // );\n\n         // close current popup\n         let $popup = $$(popup.id);\n         if ($popup) $popup.hide();\n\n         // this clears the UI's record of the current form.\n         options.form.changePage(null);\n\n         resolve();\n      });\n   }\n};\n","//\n// ABViewRuleActionFormSubmitRuleConfirmMessage\n//\n//\n//\nconst ABViewRuleAction = require(\"../ABViewRuleAction\");\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABViewRuleActionFormSubmitRuleConfirmMessage extends (\n   ABViewRuleAction\n) {\n   /**\n    * @param {object} App\n    *      The shared App object that is created in OP.Component\n    * @param {string} idBase\n    *      Identifier for this component\n    */\n   constructor(App, idBase) {\n      super();\n\n      this.App = App;\n      this.key = \"ABViewRuleActionFormSubmitRuleConfirmMessage\";\n      this.label = L(\"Show a confirmation message\");\n\n      this.currentObject = null; // the object this Action is tied to.\n\n      this.formRows = []; // keep track of the Value Components being set\n      // [\n      //\t\t{ fieldId: xxx, value:yyy, type:key['string', 'number', 'date',...]}\n      // ]\n   }\n\n   // conditionFields() {\n   //    var fieldTypes = [\"string\", \"number\", \"date\", \"formula\", \"calculate\"];\n\n   //    var currFields = [];\n\n   //    if (this.currentObject) {\n   //       this.currentObject.fields().forEach((f) => {\n   //          if (fieldTypes.indexOf(f.key) != -1) {\n   //             // NOTE: the .id value must match the obj[.id]  in the data set\n   //             // so if your object data looks like:\n   //             // \t{\n   //             //\t\tname_first:'Neo',\n   //             //\t\tname_last: 'The One'\n   //             //  },\n   //             // then the ids should be:\n   //             // { id:'name_first', value:'xxx', type:'string' }\n   //             currFields.push({\n   //                id: f.columnName,\n   //                value: f.label,\n   //                type: f.key\n   //             });\n   //          }\n   //       });\n   //    }\n\n   //    return currFields;\n   // }\n\n   // valueDisplayComponent\n   // Return an ABView to display our values form.\n   //\n   valueDisplayComponent(idBase) {\n      var ids = {\n         message: `${idBase}_message`,\n      };\n\n      this._ui = {\n         ui: {\n            id: ids.message,\n            view: \"textarea\",\n            // label: this.labels.component.message,\n            // labelWidth: this.AB.UISettings.config().labelWidthLarge,\n            height: 130,\n         },\n\n         init: () => {},\n\n         _logic: _logic,\n\n         fromSettings: (valueRules) => {\n            _logic.fromSettings(valueRules);\n         },\n         toSettings: () => {\n            return _logic.toSettings();\n         },\n      };\n\n      var _logic = {\n         fromSettings: (valueRules) => {\n            valueRules = valueRules || {};\n\n            $$(ids.message).setValue(valueRules.message || \"\");\n         },\n\n         toSettings: () => {\n            // return the confirm message\n            return {\n               message: $$(ids.message).getValue() || \"\",\n            };\n         },\n      };\n\n      return this._ui;\n   }\n\n   // process\n   // gets called when a form is submitted and the data passes the Query Builder Rules.\n   // @param {obj} options\n   process(options) {\n      return new Promise((resolve, reject) => {\n         var confirmMessage = this.valueRules.message || \"\";\n\n         webix.message({\n            text: confirmMessage,\n            type: \"info\",\n         });\n\n         resolve();\n      });\n   }\n\n   // fromSettings\n   // initialize this Action from a given set of setting values.\n   // @param {obj}  settings\n   fromSettings(settings) {\n      settings = settings || {};\n      super.fromSettings(settings); // let the parent handle the QB\n\n      // if we have a display component, then populate it:\n      if (this._ui) {\n         // now we handle our valueRules:{} object settings.\n         // pass the settings off to our DisplayList component:\n         this._ui.fromSettings(settings.valueRules);\n      }\n   }\n\n   // toSettings\n   // return an object that represents the current state of this Action\n   // @return {obj}\n   toSettings() {\n      // settings: {\n      //\tmessage:''\n      // }\n\n      // let our parent store our QB settings\n      var settings = super.toSettings();\n\n      settings.valueRules = this._ui.toSettings();\n\n      return settings;\n   }\n};\n","//\n// ABViewRuleActionFormSubmitRuleWebsite\n//\n//\n//\nconst ABViewRuleAction = require(\"../ABViewRuleAction\");\nconst ABFieldConnect = require(\"../../platform/dataFields/ABFieldConnect\");\nconst ABFieldEmail = require(\"../../platform/dataFields/ABFieldEmail\");\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABViewRuleActionFormSubmitRuleEmail extends (\n   ABViewRuleAction\n) {\n   /**\n    * @param {object} App\n    *      The shared App object that is created in OP.Component\n    * @param {string} idBase\n    *      Identifier for this component\n    */\n   constructor(App, idBase) {\n      super();\n\n      this.App = App;\n      this.key = \"ABViewRuleActionFormSubmitRuleEmail\";\n      this.label = L(\"Send a custom email\");\n\n      this.queryObject = null; // the object this Action is tied to.\n\n      this.formRows = []; // keep track of the Value Components being set\n      // [\n      //\t\t{ fieldId: xxx, value:yyy, type:key['string', 'number', 'date',...]}\n      // ]\n   }\n\n   // conditionFields() {\n   //    var fieldTypes = [\"string\", \"number\", \"date\", \"formula\", \"calculate\"];\n\n   //    var currFields = [];\n\n   //    if (this.queryObject) {\n   //       this.queryObject.fields().forEach((f) => {\n   //          if (fieldTypes.indexOf(f.key) != -1) {\n   //             // NOTE: the .id value must match the obj[.id]  in the data set\n   //             // so if your object data looks like:\n   //             // \t{\n   //             //\t\tname_first:'Neo',\n   //             //\t\tname_last: 'The One'\n   //             //  },\n   //             // then the ids should be:\n   //             // { id:'name_first', value:'xxx', type:'string' }\n   //             currFields.push({\n   //                id: f.columnName,\n   //                value: f.label,\n   //                type: f.key\n   //             });\n   //          }\n   //       });\n   //    }\n\n   //    return currFields;\n   // }\n\n   // valueDisplayComponent\n   // Return an ABView to display our values form.\n   //\n   valueDisplayComponent(idBase) {\n      var ids = {\n         form: `${idBase}_form`,\n         popup: `${idBase}_popup`,\n         list: `${idBase}_fieldList`,\n         toEmailsContainer: `${idBase}_toEmailsContainer`,\n         toEmails: `${idBase}_toEmails`,\n         message: `${idBase}_message`,\n      };\n\n      this._ui = {\n         ui: {\n            id: ids.form,\n            view: \"form\",\n            width: 450,\n            elementsConfig: {\n               labelPosition: \"top\",\n               labelWidth: 100,\n            },\n            cols: [\n               // email form\n               {\n                  width: 330,\n                  rows: [\n                     {\n                        view: \"text\",\n                        name: \"fromName\",\n                        label: L(\"From Name\"),\n                     },\n                     {\n                        view: \"text\",\n                        name: \"fromEmail\",\n                        label: L(\"From Email\"),\n                        validate: webix.rules.isEmail,\n                        on: {\n                           onChange: function (newVal, oldVal) {\n                              if (this.getValue() && !this.validate()) {\n                                 $$(ids.form).markInvalid(\n                                    \"fromEmail\",\n                                    \"Email is invalid\"\n                                 );\n                              } else {\n                                 $$(ids.form).markInvalid(\"fromEmail\", false);\n                              }\n                           },\n                        },\n                     },\n                     {\n                        id: ids.toEmailsContainer,\n                        view: \"forminput\",\n                        name: \"toEmails\",\n                        label: L(\"Send\"),\n                        css: \"ab-rich-text\",\n                        width: 320,\n                        body: {\n                           width: 320,\n                           rows: [\n                              {\n                                 height: 25,\n                              },\n                              {\n                                 id: ids.toEmails,\n                                 width: 320,\n                                 view: \"layout\",\n                                 rows: [],\n                              },\n                              {\n                                 view: \"button\",\n                                 css: \"webix_primary\",\n                                 type: \"icon\",\n                                 icon: \"fa fa-plus\",\n                                 label: L(\"Add a recipient\"),\n                                 width: 150,\n                                 click: () => {\n                                    _logic.toEmailAdd();\n                                 },\n                              },\n                           ],\n                        },\n                     },\n                     {\n                        view: \"text\",\n                        name: \"subject\",\n                        label: L(\"Subject\"),\n                     },\n                     {\n                        view: \"textarea\",\n                        id: ids.message,\n                        name: \"message\",\n                        label: L(\"Message\"),\n                        width: 320,\n                        height: 400,\n                     },\n                     // {\n                     // \tview: 'label',\n                     // \tlabel: 'Message',\n                     // \tcss: { 'font-weight': 'bold' }\n                     // },\n                     // {\n                     // \tview: 'forminput',\n                     // \tid: ids.message,\n                     // \tname: 'message',\n                     // \tlabel: 'Message',\n                     // \tcss: \"ab-rich-text\",\n                     // \twidth: 320,\n                     // \theight: 400,\n                     // \tbody: {\n                     // \t\tview: 'tinymce-editor'\n                     // \t}\n                     // }\n                  ],\n               },\n               // field list\n               {\n                  rows: [\n                     {\n                        view: \"template\",\n                        type: \"header\",\n                        template: \"Fields\",\n                     },\n                     {\n                        id: ids.list,\n                        view: \"list\",\n                        width: 120,\n                        css: { \"background-color\": \"#fff !important;\" },\n                        template: function (obj, common) {\n                           return _logic.fieldTemplate(obj, common);\n                        },\n                        on: {\n                           onItemClick: function (id, e, node) {\n                              var component = this.getItem(id);\n\n                              _logic.enterField(component);\n                           },\n                        },\n                     },\n                  ],\n               },\n            ],\n         },\n\n         init: () => {\n            if (this.queryObject) {\n               $$(ids.list).parse(\n                  this.queryObject.fields((f) => f.fieldUseAsLabel())\n               );\n               $$(ids.list).refresh();\n            }\n\n            _logic.refreshUI();\n         },\n\n         _logic: _logic,\n\n         fromSettings: (valueRules) => {\n            _logic.fromSettings(valueRules);\n         },\n         toSettings: () => {\n            return _logic.toSettings();\n         },\n      };\n\n      var _logic = {\n         fromSettings: (valueRules) => {\n            valueRules = valueRules || {};\n\n            $$(ids.form).setValues(valueRules);\n\n            // Populate recipients\n            var recipients = valueRules.toEmails || [];\n            recipients.forEach((r) => {\n               _logic.toEmailAdd({\n                  type: r.type, // 'to', 'cc' or 'bcc'\n                  emailType: r.emailType, // 'email' or 'field'\n                  value: r.value,\n               });\n            });\n\n            _logic.refreshUI();\n         },\n\n         toSettings: () => {\n            var formVals = $$(ids.form).getValues() || {};\n\n            // Get recipients\n            var recipients = [];\n            $$(ids.toEmails)\n               .getChildViews()\n               .forEach((e) => {\n                  // var type = e.queryView({ name: 'type' }).getValue();\n                  var type = \"to\"; // TODO\n                  var emailType = e.queryView({ name: \"emailType\" }).getValue();\n                  var value = e.queryView({ name: emailType }).getValue();\n\n                  recipients.push({\n                     type: type,\n                     emailType: emailType,\n                     value: value,\n                  });\n               });\n\n            // return the confirm message\n            return {\n               fromName: formVals[\"fromName\"],\n               fromEmail: formVals[\"fromEmail\"],\n               toEmails: recipients,\n               subject: formVals[\"subject\"],\n               message: formVals[\"message\"],\n            };\n         },\n\n         /**\n          * @method toEmailTemplate\n          *\n          * @param settings - {\n          * \t\t\ttype: string, // 'to', 'cc' or 'bcc'\n          * \t\t\temailType: string, // 'email' or 'field'\n          * \t\t\tvalue: string\n          * }\n          */\n         toEmailTemplate: (settings) => {\n            settings = settings || {};\n\n            return {\n               width: 320,\n               cols: [\n                  // {\n                  // \tview: 'richselect',\n                  // \tname: 'type',\n                  // \tvalue: settings.type || 'to',\n                  // \twidth: 80,\n                  // \toptions: [\n                  // \t\t{ id: 'to', value: \"To:\" },\n                  // \t\t// EmailNotification does not support cc, bcc and reply.\n                  // \t\t// { id: 'cc', value: \"Cc:\" },\n                  // \t\t// { id: 'bcc', value: \"Bcc:\" },\n                  // \t\t// { id: 'reply', value: \"Reply-To:\" }\n                  // \t]\n                  // },\n                  {\n                     view: \"richselect\",\n                     name: \"emailType\",\n                     value: settings.emailType || \"email\",\n                     width: 150,\n                     options: [\n                        {\n                           id: \"email\",\n                           value: L(\"A custom email address\"),\n                        },\n                        { id: \"field\", value: L(\"An email field\") },\n                        { id: \"query\", value: L(\"From query\") },\n                     ],\n                     on: {\n                        onChange: function (newVal, oldVal) {\n                           _logic.emailTypeChange(newVal, this);\n                        },\n                     },\n                  },\n                  {\n                     width: 150,\n                     name: \"emailValue\",\n                     visibleBatch: settings.emailType || \"email\",\n                     cols: [\n                        {\n                           view: \"text\",\n                           name: \"email\",\n                           batch: \"email\",\n                           value:\n                              settings.emailType == \"email\"\n                                 ? settings.value\n                                 : \"\",\n                           validate: webix.rules.isEmail,\n                           width: 150,\n                           on: {\n                              onChange: function (newVal, oldVal) {\n                                 _logic.toEmailValidate();\n                              },\n                           },\n                        },\n                        {\n                           view: \"richselect\",\n                           name: \"field\",\n                           batch: \"field\",\n                           value:\n                              settings.emailType == \"field\"\n                                 ? settings.value\n                                 : \"\",\n                           width: 150,\n                           suggest: {\n                              on: {\n                                 onBeforeShow: function () {\n                                    this.define(\"width\", 300);\n                                    this.resize();\n                                 },\n                              },\n                              data: _logic.emailFieldOptions(),\n                           },\n                        },\n                        {\n                           view: \"richselect\",\n                           name: \"query\",\n                           batch: \"query\",\n                           value:\n                              settings.emailType == \"query\"\n                                 ? settings.value\n                                 : \"\",\n                           width: 150,\n                           suggest: {\n                              on: {\n                                 onBeforeShow: function () {\n                                    this.define(\"width\", 300);\n                                    this.resize();\n                                 },\n                              },\n                              data: _logic.queryOptions(),\n                           },\n                        },\n                     ],\n                  },\n                  {\n                     view: \"button\",\n                     css: \"webix_danger\",\n                     type: \"icon\",\n                     icon: \"fa fa-trash-o\",\n                     width: 32,\n                     click: function () {\n                        var $toView = this.getParentView();\n\n                        _logic.toEmailRemove($toView);\n                     },\n                  },\n               ],\n            };\n         },\n\n         toEmailAdd: (settings) => {\n            var count = $$(ids.toEmails).getChildViews().length;\n\n            $$(ids.toEmails).addView(_logic.toEmailTemplate(settings), count);\n\n            _logic.refreshUI();\n         },\n\n         emailTypeChange: (type, $select) => {\n            var $recipient = $select.getParentView();\n            var $emailValue = $recipient.queryView({ name: \"emailValue\" });\n\n            switch (type) {\n               case \"field\":\n                  $emailValue.showBatch(\"field\");\n                  break;\n               case \"query\":\n                  $emailValue.showBatch(\"query\");\n                  break;\n               default:\n                  $emailValue.showBatch(\"email\");\n                  break;\n            }\n\n            $$(ids.toEmailsContainer).adjust();\n         },\n\n         toEmailRemove: ($toView) => {\n            $$(ids.toEmails).removeView($toView);\n\n            _logic.refreshUI();\n         },\n\n         toEmailValidate: () => {\n            var isAllValid = true;\n\n            $$(ids.toEmails)\n               .getChildViews()\n               .forEach((v) => {\n                  let emailText = v.queryView({ name: \"email\" });\n                  if (emailText.getValue() && !emailText.validate()) {\n                     isAllValid = false;\n                  }\n               });\n\n            if (isAllValid) $$(ids.form).markInvalid(\"toEmails\", false);\n            else $$(ids.form).markInvalid(\"toEmails\", \"Email is invalid\");\n         },\n\n         fieldTemplate: (field, common) => {\n            return `<i class='fa fa-${field.icon} webix_icon_btn' aria-hidden='true'></i> ${field.label}`;\n         },\n\n         emailFieldOptions: () => {\n            var existsFieldIds = [];\n            var options = [];\n\n            var fnAddOptions = (currObj, fLink) => {\n               var emailFields = currObj\n                  .fields((f) => f instanceof ABFieldEmail)\n                  .map((f) => {\n                     var optId = \"\",\n                        optLabel = \"\";\n\n                     if (fLink) {\n                        optId = `${fLink.id}|${f.urlPointer()}`;\n                        optLabel = `${currObj.label}.${f.label} (${fLink.label})`;\n                     } else {\n                        optId = `|${f.urlPointer()}`;\n                        optLabel = `${currObj.label}.${f.label}`;\n                     }\n\n                     return {\n                        id: optId, // linkFieldId|fieldUrl\n                        value: optLabel,\n                     };\n                  });\n\n               // TODO: prevent duplicate\n\n               options = options.concat(emailFields);\n            };\n\n            fnAddOptions(this.queryObject);\n\n            this.queryObject.connectFields().forEach((f) => {\n               // prevent looping\n               if (\n                  // - prevent include connect objects of the base object\n                  // f.datasourceLink.id == this.queryObject.id ||\n                  // - check duplicate include objects\n                  existsFieldIds.indexOf(f.id) > -1\n               )\n                  return;\n\n               // store\n               existsFieldIds.push(f.id);\n\n               // add email fields of link object\n               fnAddOptions(f.datasourceLink, f);\n            });\n\n            return options;\n         },\n\n         queryOptions: () => {\n            var options = [];\n\n            // get data collections who is query and contains email field\n            let dcQueries = this.currentForm.AB.datacollections((dc) => {\n               let obj = dc.datasource;\n               return (\n                  dc.settings.isQuery &&\n                  obj &&\n                  obj.fields((f) => f.key == \"email\").length > 0\n               );\n            });\n\n            dcQueries.forEach((dv) => {\n               if (dv.datasource) {\n                  dv.datasource\n                     .fields((f) => f.key == \"email\")\n                     .forEach((f) => {\n                        options.push({\n                           id: `${dv.id}|${f.id}`, // ABDatacollectionID|fieldID\n                           value: `${dv.label}.${f.label}`,\n                        });\n                     });\n               }\n            });\n\n            return options;\n         },\n\n         enterField: (field) => {\n            var focusElem = webix.UIManager.getFocus();\n            var val = \"\";\n\n            if (\n               focusElem.config.view != \"text\" ||\n               focusElem.config.view != \"textarea\"\n            ) {\n               if (focusElem.getValue) val = focusElem.getValue();\n\n               if (focusElem.setValue)\n                  focusElem.setValue(`${val}${field.label}`);\n\n               webix.UIManager.setFocus(focusElem);\n            }\n         },\n\n         refreshUI: () => {\n            $$(ids.toEmailsContainer).adjust();\n            $$(ids.message).adjust();\n         },\n      };\n\n      return this._ui;\n   }\n\n   // process\n   // gets called when a form is submitted and the data passes the Query Builder Rules.\n   // @param {obj} options - {\n   //\t\t\t\t\t\t\tdata: {obj} rowData,\n   //\t\t\t\t\t\t\tform: {ABViewForm}\n   //\t\t\t\t\t\t}\n   process(options) {\n      // validate sender's email is invalid\n      if (!webix.rules.isEmail(this.valueRules.fromEmail)) {\n         return Promise.resolve();\n      }\n\n      var recipients = [];\n\n      return Promise.resolve()\n         .then(() => {\n            // Pull recipients data\n            return new Promise((resolve, reject) => {\n               var tasks = [];\n\n               this.valueRules.toEmails.forEach((rec) => {\n                  tasks.push(\n                     new Promise((next, err) => {\n                        // TODO: Cc, Bcc\n\n                        // field\n                        if (rec.emailType == \"field\") {\n                           var emailFieldUrl = rec.value.split(\"|\")[1]; // linkFieldId|emailFieldUrl\n                           var emailField = this.queryObject.application.urlResolve(\n                              emailFieldUrl\n                           );\n                           if (emailField) {\n                              // Pull email source object\n                              if (emailField.object.id == this.queryObject.id) {\n                                 var emailData =\n                                    options.data[emailField.columnName];\n                                 if (emailData)\n                                    recipients = recipients.concat(emailData);\n                              }\n                              // Pull emails from link object\n                              else {\n                                 let linkFieldId = rec.value.split(\"|\")[0];\n                                 let linkFields = this.queryObject.fields(\n                                    (f) =>\n                                       f instanceof ABFieldConnect &&\n                                       f.id == linkFieldId\n                                 );\n                                 linkFields.forEach((f) => {\n                                    var linkedData =\n                                       options.data[f.relationName()] || [];\n\n                                    // convert to an array\n                                    if (\n                                       linkedData &&\n                                       !Array.isArray(linkedData)\n                                    )\n                                       linkedData = [linkedData];\n\n                                    // pull email address\n                                    linkedData.forEach((d) => {\n                                       var email = d[emailField.columnName];\n                                       if (email)\n                                          recipients = recipients.concat(email);\n                                    });\n                                 });\n                              }\n\n                              next();\n                           } else {\n                              next();\n                           }\n                        }\n\n                        // query\n                        else if (rec.emailType == \"query\") {\n                           var dvIdAndFieldId = rec.value; // ABDatacollectionId|fieldId\n                           if (!dvIdAndFieldId) return next();\n\n                           var dcId = dvIdAndFieldId.split(\"|\")[0];\n                           var fieldId = dvIdAndFieldId.split(\"|\")[1];\n\n                           var dcQuery = this.currentForm.AB.datacollectionByID(\n                              dcId\n                           );\n                           if (!dcQuery) return next();\n\n                           var field = dcQuery.datasource.fieldByID(fieldId);\n                           if (!field) return next();\n\n                           // get data of data collection\n                           dcQuery.getData().forEach((data) => {\n                              var emailAddr = data[field.columnName];\n                              if (emailAddr) recipients.push(emailAddr);\n                           });\n\n                           next();\n                        }\n\n                        // email\n                        else {\n                           recipients.push(rec.value);\n                           next();\n                        }\n                     })\n                  );\n               });\n\n               Promise.all(tasks).catch(reject).then(resolve);\n            });\n         })\n         .then(() => {\n            // send out\n            return new Promise((resolve, reject) => {\n               recipients = this.AB.uniq(recipients).filter((r) => r);\n\n               if (!recipients || recipients.length < 1) return resolve();\n\n               // replace form value to template\n               var fromName = this.valueRules.fromName,\n                  subject = this.valueRules.subject,\n                  message = this.valueRules.message;\n\n               this.queryObject\n                  .fields((f) => f.fieldUseAsLabel())\n                  .forEach((f) => {\n                     var template = new RegExp(`{${f.label}}`, \"g\"),\n                        data = f.format(options.data);\n\n                     fromName = fromName.replace(template, data);\n                     subject = subject.replace(template, data);\n                     message = message.replace(template, data);\n                  });\n\n               // send a email\n               this.AB.Network.post({\n                  url: \"/app_builder/email\",\n                  params: {\n                     fromName: fromName,\n                     fromEmail: this.valueRules.fromEmail,\n                     subject: subject,\n                     message: message,\n                     recipients: this.AB.uniq(recipients),\n                  },\n               })\n                  .then(() => {\n                     resolve();\n                  })\n                  .catch(reject);\n            });\n         });\n   }\n\n   // fromSettings\n   // initialize this Action from a given set of setting values.\n   // @param {obj}  settings\n   fromSettings(settings) {\n      settings = settings || {};\n      super.fromSettings(settings); // let the parent handle the QB\n\n      // if we have a display component, then populate it:\n      if (this._ui) {\n         // now we handle our valueRules:{} object settings.\n         // pass the settings off to our DisplayList component:\n         this._ui.fromSettings(settings.valueRules);\n      }\n   }\n\n   // toSettings\n   // return an object that represents the current state of this Action\n   // @return {obj}\n   toSettings() {\n      // settings: {\n      //\tmessage:''\n      // }\n\n      // let our parent store our QB settings\n      var settings = super.toSettings();\n\n      settings.valueRules = this._ui.toSettings();\n\n      return settings;\n   }\n};\n","//\n// ABViewRuleActionFormSubmitRuleExistPage\n//\n//\n//\nconst ABViewRuleAction = require(\"../ABViewRuleAction\");\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABViewRuleActionFormSubmitRuleExistPage extends (\n   ABViewRuleAction\n) {\n   /**\n    * @param {object} App\n    *      The shared App object that is created in OP.Component\n    * @param {string} idBase\n    *      Identifier for this component\n    */\n   constructor(App, idBase) {\n      super();\n\n      this.App = App;\n      this.key = \"ABViewRuleActionFormSubmitRuleExistPage\";\n      this.label = L(\"Redirect to an existing page\");\n\n      this.currentObject = null; // the object this Action is tied to.\n\n      this.formRows = []; // keep track of the Value Components being set\n      // [\n      //\t\t{ fieldId: xxx, value:yyy, type:key['string', 'number', 'date',...]}\n      // ]\n   }\n\n   // conditionFields() {\n   //    var fieldTypes = [\"string\", \"number\", \"date\", \"formula\", \"calculate\"];\n\n   //    var currFields = [];\n\n   //    if (this.currentObject) {\n   //       this.currentObject.fields().forEach((f) => {\n   //          if (fieldTypes.indexOf(f.key) != -1) {\n   //             // NOTE: the .id value must match the obj[.id]  in the data set\n   //             // so if your object data looks like:\n   //             // \t{\n   //             //\t\tname_first:'Neo',\n   //             //\t\tname_last: 'The One'\n   //             //  },\n   //             // then the ids should be:\n   //             // { id:'name_first', value:'xxx', type:'string' }\n   //             currFields.push({\n   //                id: f.columnName,\n   //                value: f.label,\n   //                type: f.key\n   //             });\n   //          }\n   //       });\n   //    }\n\n   //    return currFields;\n   // }\n\n   // valueDisplayComponent\n   // Return an ABView to display our values form.\n   //\n   valueDisplayComponent(idBase) {\n      var ids = {\n         pagesAndTabs: `${idBase}_PagesAndTabs`,\n      };\n\n      this._ui = {\n         ui: { id: ids.pagesAndTabs, view: \"richselect\", options: [] },\n\n         init: () => {\n            _logic.populateOptions();\n         },\n\n         _logic: _logic,\n\n         fromSettings: (valueRules) => {\n            _logic.fromSettings(valueRules);\n         },\n         toSettings: () => {\n            return _logic.toSettings();\n         },\n      };\n\n      var _logic = {\n         populateOptions: () => {\n            // Pull page list to \"Redirect to an existing page\"\n            var _pageOptions = [];\n\n            /**\n             * @param pageOrTab\t{Object}\t- ABViewPage or ABViewTab\n             * @param indent\t{integer}\n             * @param type\t\t{string}\t- 'page' or 'tab'\n             * @param pageId\t{uuid}\t\t- the id of page (only tab)\n             */\n            var addPage = (pageOrTab, indent, type, pageId) => {\n               indent = indent || \"\";\n\n               let icon = \"fa fa-file-o\";\n               if (type == \"tab\") icon = \"fa fa-window-maximize\";\n\n               let pageParent = pageOrTab.pageParent();\n\n               _pageOptions.push({\n                  id: pageOrTab.id,\n                  value: indent + pageOrTab.label,\n                  type: type,\n                  pageId: pageParent ? pageParent.id : null,\n\n                  icon: icon,\n               });\n\n               if (type == \"page\" || type == \"tab\") {\n                  if (pageOrTab.pages) {\n                     pageOrTab.pages().forEach(function (p) {\n                        addPage(p, indent + \"-\", \"page\");\n                     });\n                  }\n\n                  // add 'tab' options\n                  if (pageOrTab.views) {\n                     pageOrTab\n                        .views((v) => v.key == \"tab\")\n                        .forEach((tab) => {\n                           // add 'tab view' to options\n                           tab.views().forEach((tabView) => {\n                              addPage(\n                                 tabView,\n                                 indent + \"-\",\n                                 \"tab\",\n                                 pageOrTab.id\n                              );\n                           });\n                        });\n                  }\n               }\n            };\n\n            addPage(this.currentForm.pageRoot(), \"\", \"page\");\n\n            $$(ids.pagesAndTabs).define(\"options\", _pageOptions);\n            $$(ids.pagesAndTabs).refresh();\n         },\n\n         fromSettings: (valueRules) => {\n            valueRules = valueRules || {};\n\n            $$(ids.pagesAndTabs).setValue(\n               valueRules.tabId || valueRules.pageId || \"\"\n            );\n         },\n\n         toSettings: () => {\n            var result = {};\n\n            var selectedId = $$(ids.pagesAndTabs).getValue();\n            var selectedItem = $$(ids.pagesAndTabs)\n               .getPopup()\n               .getList()\n               .config.data.filter((opt) => opt.id == selectedId)[0];\n            if (selectedItem) {\n               if (selectedItem.type == \"tab\") {\n                  // store page id and tab id\n                  result = {\n                     pageId: selectedItem.pageId,\n                     tabId: selectedId,\n                  };\n               } else {\n                  // store only page id\n                  result = {\n                     pageId: selectedId,\n                  };\n               }\n            }\n\n            // return the confirm message\n            return result;\n         },\n      };\n\n      return this._ui;\n   }\n\n   // process\n   // gets called when a form is submitted and the data passes the Query Builder Rules.\n   // @param {obj} options\n   process(options) {\n      return new Promise((resolve, reject) => {\n         // redirect page\n         if (this.valueRules.pageId) {\n            options.form.changePage(this.valueRules.pageId);\n\n            if (this.valueRules.tabId) {\n               var curPage = options.form.application.pages(\n                  (p) => p.id == this.valueRules.pageId,\n                  true\n               )[0];\n               if (!curPage) return resolve();\n\n               // switch tab\n               var tabView = curPage.views(\n                  (v) => v.id == this.valueRules.tabId,\n                  true\n               )[0];\n               if (!tabView) return resolve();\n\n               var tab = tabView.parent;\n               if (!tab) return resolve();\n\n               var toggleParent = (element) => {\n                  if (!element.parent) return false;\n                  var parentElem = element.parent;\n                  if (!parentElem.parent) return false;\n                  parentElem.parent.emit(\"changeTab\", parentElem.id);\n                  toggleParent(parentElem.parent);\n               };\n\n               toggleParent(tab);\n               let showIt = setInterval(function () {\n                  if ($$(tabView.id) && $$(tabView.id).isVisible()) {\n                     clearInterval(showIt);\n                     return;\n                  }\n                  tab.emit(\"changeTab\", tabView.id);\n               }, 100);\n            }\n         }\n\n         resolve();\n      });\n   }\n\n   // fromSettings\n   // initialize this Action from a given set of setting values.\n   // @param {obj}  settings\n   fromSettings(settings) {\n      settings = settings || {};\n      super.fromSettings(settings); // let the parent handle the QB\n\n      // if we have a display component, then populate it:\n      if (this._ui) {\n         // now we handle our valueRules:{} object settings.\n         // pass the settings off to our DisplayList component:\n         this._ui.fromSettings(settings.valueRules);\n      }\n   }\n\n   // toSettings\n   // return an object that represents the current state of this Action\n   // @return {obj}\n   toSettings() {\n      // settings: {\n      //\tmessage:''\n      // }\n\n      // let our parent store our QB settings\n      var settings = super.toSettings();\n\n      settings.valueRules = this._ui.toSettings();\n\n      return settings;\n   }\n};\n","//\n// ABViewRuleActionFormSubmitRuleParentPage\n//\n//\n//\nconst ABViewRuleAction = require(\"../ABViewRuleAction\");\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABViewRuleActionFormSubmitRuleParentPage extends (\n   ABViewRuleAction\n) {\n   /**\n    * @param {object} App\n    *      The shared App object that is created in OP.Component\n    * @param {string} idBase\n    *      Identifier for this component\n    */\n   constructor(App, idBase) {\n      super();\n\n      this.App = App;\n      this.key = \"ABViewRuleActionFormSubmitRuleParentPage\";\n      this.label = L(\"Redirect to the parent page\");\n\n      this.currentObject = null; // the object this Action is tied to.\n\n      this.formRows = []; // keep track of the Value Components being set\n      // [\n      //\t\t{ fieldId: xxx, value:yyy, type:key['string', 'number', 'date',...]}\n      // ]\n   }\n\n   // conditionFields() {\n   //    var fieldTypes = [\"string\", \"number\", \"date\", \"formula\", \"calculate\"];\n\n   //    var currFields = [];\n\n   //    if (this.currentObject) {\n   //       this.currentObject.fields().forEach((f) => {\n   //          if (fieldTypes.indexOf(f.key) != -1) {\n   //             // NOTE: the .id value must match the obj[.id]  in the data set\n   //             // so if your object data looks like:\n   //             // \t{\n   //             //\t\tname_first:'Neo',\n   //             //\t\tname_last: 'The One'\n   //             //  },\n   //             // then the ids should be:\n   //             // { id:'name_first', value:'xxx', type:'string' }\n   //             currFields.push({\n   //                id: f.columnName,\n   //                value: f.label,\n   //                type: f.key\n   //             });\n   //          }\n   //       });\n   //    }\n\n   //    return currFields;\n   // }\n\n   // valueDisplayComponent\n   // Return an ABView to display our values form.\n   //\n   valueDisplayComponent(idBase) {\n      this._ui = {\n         ui: {\n            view: \"label\",\n            label: this.label,\n         },\n\n         init: () => {},\n\n         _logic: _logic,\n      };\n\n      var _logic = {};\n\n      return this._ui;\n   }\n\n   // process\n   // gets called when a form is submitted and the data passes the Query Builder Rules.\n   // @param {obj} options\n   process(options) {\n      return new Promise((resolve, reject) => {\n         var pageCurrent = options.form.pageParent();\n         var pageParent = pageCurrent.pageParent();\n\n         // redirect page\n         options.form.changePage(pageParent.id);\n\n         resolve();\n      });\n   }\n};\n","//\n// ABViewRuleActionFormSubmitRuleWebsite\n//\n//\n//\nconst ABViewRuleAction = require(\"../ABViewRuleAction\");\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nmodule.exports = class ABViewRuleActionFormSubmitRuleWebsite extends (\n   ABViewRuleAction\n) {\n   /**\n    * @param {object} App\n    *      The shared App object that is created in OP.Component\n    * @param {string} idBase\n    *      Identifier for this component\n    */\n   constructor(App, idBase) {\n      super();\n\n      this.App = App;\n      this.key = \"ABViewRuleActionFormSubmitRuleWebsite\";\n      this.label = L(\"Redirect to another website URL\");\n\n      this.currentObject = null; // the object this Action is tied to.\n\n      this.formRows = []; // keep track of the Value Components being set\n      // [\n      //\t\t{ fieldId: xxx, value:yyy, type:key['string', 'number', 'date',...]}\n      // ]\n   }\n\n   // conditionFields() {\n   //    var fieldTypes = [\"string\", \"number\", \"date\", \"formula\", \"calculate\"];\n\n   //    var currFields = [];\n\n   //    if (this.currentObject) {\n   //       this.currentObject.fields().forEach((f) => {\n   //          if (fieldTypes.indexOf(f.key) != -1) {\n   //             // NOTE: the .id value must match the obj[.id]  in the data set\n   //             // so if your object data looks like:\n   //             // \t{\n   //             //\t\tname_first:'Neo',\n   //             //\t\tname_last: 'The One'\n   //             //  },\n   //             // then the ids should be:\n   //             // { id:'name_first', value:'xxx', type:'string' }\n   //             currFields.push({\n   //                id: f.columnName,\n   //                value: f.label,\n   //                type: f.key\n   //             });\n   //          }\n   //       });\n   //    }\n\n   //    return currFields;\n   // }\n\n   // valueDisplayComponent\n   // Return an ABView to display our values form.\n   //\n   valueDisplayComponent(idBase) {\n      var ids = {\n         website: `${idBase}_website`,\n      };\n\n      this._ui = {\n         ui: {\n            id: ids.website,\n            view: \"text\",\n         },\n\n         init: () => {},\n\n         _logic: _logic,\n\n         fromSettings: (valueRules) => {\n            _logic.fromSettings(valueRules);\n         },\n         toSettings: () => {\n            return _logic.toSettings();\n         },\n      };\n\n      var _logic = {\n         fromSettings: (valueRules) => {\n            valueRules = valueRules || {};\n\n            $$(ids.website).setValue(valueRules.website || \"\");\n         },\n\n         toSettings: () => {\n            // return the confirm message\n            return {\n               website: $$(ids.website).getValue() || \"\",\n            };\n         },\n      };\n\n      return this._ui;\n   }\n\n   // process\n   // gets called when a form is submitted and the data passes the Query Builder Rules.\n   // @param {obj} options\n   process(options) {\n      return new Promise((resolve, reject) => {\n         // redirect to website\n         if (this.valueRules.website)\n            window.open(\n               `http://${this.valueRules.website.replace(\"http://\", \"\")}`,\n               \"_blank\"\n            );\n\n         resolve();\n      });\n   }\n\n   // fromSettings\n   // initialize this Action from a given set of setting values.\n   // @param {obj}  settings\n   fromSettings(settings) {\n      settings = settings || {};\n      super.fromSettings(settings); // let the parent handle the QB\n\n      // if we have a display component, then populate it:\n      if (this._ui) {\n         // now we handle our valueRules:{} object settings.\n         // pass the settings off to our DisplayList component:\n         this._ui.fromSettings(settings.valueRules);\n      }\n   }\n\n   // toSettings\n   // return an object that represents the current state of this Action\n   // @return {obj}\n   toSettings() {\n      // settings: {\n      //\tmessage:''\n      // }\n\n      // let our parent store our QB settings\n      var settings = super.toSettings();\n\n      settings.valueRules = this._ui.toSettings();\n\n      return settings;\n   }\n};\n","// ABViewRuleActionObjectUpdater\n//\n// An action that allows you to update fields on an object.\n//\n//\nconst ABViewRuleAction = require(\"../ABViewRuleAction\");\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nvar ABViewRuleActionObjectUpdaterDefaults = {\n   filterConditions: {\n      // array of filters to apply to the data table\n      glue: \"and\",\n      rules: [],\n   },\n};\n\nmodule.exports = class ABViewRuleActionObjectUpdater extends ABViewRuleAction {\n   /**\n    * @param {object} App\n    *      The shared App object that is created in OP.Component\n    * @param {string} idBase\n    *      Identifier for this component\n    */\n   constructor(App, idBase, currentForm) {\n      super(App, idBase, currentForm);\n\n      this.key = \"ABViewRuleActionFormRecordRuleUpdate\";\n      this.label = L(\"Update Record\");\n\n      this.updateObject = null; // the object this Action will Update.\n\n      this.formRows = []; // keep track of the Value Components being set\n      // [\n      //\t\t{ fieldId: xxx, value:yyy, type:key['string', 'number', 'date',...]}\n      // ]\n\n      this.stashRules = {}; // keep track of rule settings among our selected objects.\n   }\n\n   // valueDisplayComponent\n   // Return an ABView to display our values form.\n   //\n   valueDisplayComponent(idBase) {\n      if (this._uiUpdater == null) {\n         this._uiUpdater = this.valueDisplayList(idBase);\n      }\n\n      return this._uiUpdater;\n   }\n\n   // Our Values Display is a List of ValueRows\n   // Each ValueRow will display an additional set of [add] [delete] buttons.\n\n   valueDisplayList(idBase) {\n      var uniqueInstanceID = webix.uid();\n      var myUnique = (key) => {\n         // return idBase + '_' + key  + '_' + uniqueInstanceID;\n         return `${idBase}_${key}_${uniqueInstanceID}`;\n      };\n      var ids = {\n         updateForm: myUnique(\"updateForm\"),\n      };\n\n      var _ui = {\n         view: \"form\",\n         id: ids.updateForm,\n         elements: [],\n      };\n\n      var init = (valueRules) => {\n         valueRules = valueRules || this.valueRules;\n         _logic.setValues(valueRules);\n      };\n\n      var _logic = {\n         removeAddRow: () => {\n            // get our Form\n            var UpdateForm = _logic.formGet();\n            if (!UpdateForm) return;\n\n            // check row that's unselect a field\n            var rows = UpdateForm.getChildViews();\n\n            var addRow = rows.filter((r) => {\n               return r.queryView(function (view) {\n                  return view.config.name == \"field\" && !view.getValue();\n               });\n            })[0];\n            if (!addRow) return;\n\n            UpdateForm.removeView(addRow);\n         },\n\n         // addRow\n         // add a new data entry to this form.\n         // @param {obj} data  (optional) initial values for this row.\n         addRow: (data) => {\n            // get our Form\n            var UpdateForm = _logic.formGet();\n            if (!UpdateForm) return;\n\n            // check row that's unselect a field\n            var rows = UpdateForm.getChildViews();\n            if (\n               data == null &&\n               rows.filter((r) => {\n                  return r.queryView(function (view) {\n                     return view.config.name == \"field\" && !view.getValue();\n                  });\n               }).length > 0\n            )\n               return;\n\n            // get a new Row Component\n            var row = this.valueDisplayRow(idBase);\n\n            // add row to Form\n            UpdateForm.addView(row.ui);\n\n            // initialize row with any provided data:\n            row.init({\n               onAdd: () => {\n                  // add a new Row\n                  _logic.addRow();\n               },\n               onDelete: (rowId) => {\n                  // remove a row\n                  _logic.delRow(rowId);\n               },\n               data: data,\n            });\n\n            // store this row\n            this.formRows.push(row);\n         },\n\n         delRow: (rowId) => {\n            // store this row\n            this.formRows.forEach((r, index) => {\n               if (r.ui.id == rowId) this.formRows.splice(index, 0);\n            });\n\n            // get our Form\n            var UpdateForm = _logic.formGet();\n            if (!UpdateForm) return;\n\n            // remove UI\n            UpdateForm.removeView($$(rowId));\n         },\n\n         formClear: () => {\n            var UpdateForm = _logic.formGet();\n            if (!UpdateForm) return;\n\n            var children = UpdateForm.getChildViews();\n\n            // NOTE: need to clone this array, because it is connected with the UpdatForm's\n            // internal array of items.  Once we start .removeView() the element actually\n            // is removed from the internal array, which then upset's the .forEach() from\n            // properly iterating through the structure.  It results in missed items from\n            // being sent to the .forEach().\n            // So Clone it and use that for .forEach()\n            var cloneChildren = [];\n            children.forEach((c) => {\n               cloneChildren.push(c);\n            });\n            cloneChildren.forEach((c) => {\n               UpdateForm.removeView(c);\n            });\n\n            // clear our stored .formRows\n            this.formRows = [];\n         },\n\n         formGet: () => {\n            var UpdateForm = $$(ids.updateForm);\n            if (!UpdateForm) {\n               // this is a problem!\n               this.currentForm.AB.notify.developer(\n                  new Error(\"no webix form\"),\n                  {\n                     context:\n                        \"ABViewRuleActionObjectUpdater:formGet  could not find webix form\",\n                     id: ids.updateForm,\n                  }\n               );\n               return null;\n            }\n\n            return UpdateForm;\n         },\n\n         setValues: (valueRules) => {\n            // valueRules = {\n            //\tfieldOperations:[\n            //\t\t{ fieldID:xxx, value:yyyy, type:zzz, op:aaa }\n            //\t]\n            // }\n\n            valueRules = valueRules || {};\n            valueRules.fieldOperations = valueRules.fieldOperations || [];\n\n            // find the form\n            var UpdateForm = _logic.formGet();\n            if (!UpdateForm) return;\n\n            // clear form:\n            _logic.formClear();\n\n            // if there are values to\n            if (valueRules.fieldOperations.length > 0) {\n               valueRules.fieldOperations.forEach((r) => {\n                  _logic.addRow(r);\n               });\n            }\n\n            // our default operation will cause an empty row to\n            // appear after our first value entry.\n            // let's remove that one, and then add a new one\n            // at the end:\n            _logic.removeAddRow();\n\n            // display an empty row\n            _logic.addRow();\n         },\n\n         fromSettings: (settings) => {\n            // Note: we just want the { valueRules:[] } here:\n            var mySettings = settings.valueRules || settings;\n\n            _logic.setValues(mySettings);\n         },\n\n         toSettings: () => {\n            // valueRules = {\n            //\tfieldOperations:[\n            //\t\t{ fieldID:xxx, value:yyyy, type:zzz, op:aaa }\n            //\t]\n            // }\n            var settings = { fieldOperations: [] };\n\n            // for each of our formRows, decode the propery {}\n            this.formRows.forEach((fr) => {\n               var rowSettings = fr.toSettings();\n               if (rowSettings) {\n                  settings.fieldOperations.push(fr.toSettings());\n               }\n            });\n\n            return settings;\n         },\n      };\n\n      return {\n         ui: _ui,\n         init: init,\n         fromSettings: (settings) => {\n            _logic.fromSettings(settings);\n         },\n         toSettings: () => {\n            return _logic.toSettings();\n         },\n         _logic: _logic,\n      };\n   }\n\n   valueDisplayRow(idBase) {\n      var uniqueInstanceID = webix.uid();\n      var myUnique = (key) => {\n         // return idBase + '_' + key  + '_' + uniqueInstanceID;\n         return key + \"_\" + uniqueInstanceID;\n      };\n\n      var ids = {\n         row: myUnique(\"row\"),\n         updateForm: myUnique(\"updateFormRow\"),\n         field: myUnique(\"field\"),\n         value: myUnique(\"value\"),\n         selectDc: myUnique(\"selectDc\"),\n         selectBy: myUnique(\"selectBy\"),\n         queryField: myUnique(\"queryField\"),\n         multiview: myUnique(\"multiview\"),\n         buttonAdd: myUnique(\"add\"),\n         buttonDelete: myUnique(\"delete\"),\n      };\n\n      var FilterComponent;\n\n      var _logic = {\n         callbacks: {\n            onAdd: () => {},\n            onDelete: () => {},\n         },\n\n         buttonsToggle: () => {\n            $$(ids.row).getChildViews()[0].getChildViews()[4].hide();\n            $$(ids.row).getChildViews()[0].getChildViews()[5].show();\n         },\n\n         getFieldList: (shouldFilter) => {\n            var options = [];\n            if (this.updateObject) {\n               options = (this.updateObject.fields() || []).map((f) => {\n                  return {\n                     id: f.id,\n                     value: f.label,\n                  };\n               });\n\n               // options = (this.updateObject.fields() || [])\n               // .filter(f => {\n               //\n               // \tif (f.key != 'connectObject') {\n               // \t\treturn true;\n               // \t} else {\n               // \t\t// if this is a connection field, only return\n               // \t\t// fields that are 1:x  where this field is the\n               // \t\t// source:\n               // \t\t// return ((f.linkType() == 'one') && (f.isSource()))\n               //\n               // \t\t// 6-14-2018 Changing from only 1:x to support many\n               // \t\t// if this is a connected field, only return\n               // \t\t// fields that this is the source\n               // \t\treturn (f.isSource())\n               // \t}\n               // })\n               // .map(f => {\n               // \treturn {\n               // \t\tid: f.id,\n               // \t\tvalue: f.label\n               // \t};\n               // });\n\n               // Remove fields who are selected\n               if (shouldFilter) {\n                  // store this row\n                  var usedHash = {};\n                  this.formRows.forEach((row) => {\n                     var rowView = $$(row.ui.id);\n                     if (rowView) {\n                        var field = rowView\n                           .getChildViews()[0]\n                           .getChildViews()[1];\n                        usedHash[field.getValue()] = true;\n                     }\n                  });\n                  options = options.filter((o) => {\n                     return !usedHash[o.id];\n                  });\n               }\n            }\n            return options;\n         },\n\n         isValid: () => {\n            var validator = this.currentForm.AB.Validation.validator();\n            var valueField = $$(ids.row).getChildViews()[0].getChildViews()[3];\n            var FormView = valueField.getParentView().getParentView();\n\n            var field = this.getUpdateObjectField($$(ids.field).getValue());\n            if (field) {\n               var value = field.getValue(valueField, {});\n\n               // // if a standard component that supports .getValue()\n               // if (valueField.getValue) {\n               // \tvalue = valueField.getValue();\n               // } else {\n               // \t// else use for field.getValue();\n               // \tvalue = field.getValue(valueField, {});\n               // }\n\n               // our .isValidData() wants value in an object:\n               var obj = {};\n               obj[field.columnName] = value;\n\n               field.isValidData(obj, validator);\n\n               // if value is empty, this is also an error:\n               if (\n                  value == \"\" ||\n                  value == null ||\n                  (Array.isArray(value) && value.length == 0)\n               ) {\n                  validator.addError(\n                     field.columnName,\n                     L(\"A value is required\")\n                  );\n               }\n\n               // field.getParentView()  ->  row\n               // row.getParentView()  -> Form\n               FormView.clearValidation();\n               validator.updateForm(FormView);\n\n               return validator.pass();\n            } else {\n               // if we didn't find an associated field ... then this isn't good\n               // data.\n\n               //// TODO: display error for our field picker.  Note, it doesn't have a unique .name\n               // field.\n               var fieldField = $$(ids.row)\n                  .getChildViews()[0]\n                  .getChildViews()[1];\n               fieldField.define(\"invalidMessage\", L(\"A value is required\"));\n               fieldField.define(\"invalid\", true);\n               fieldField.refresh();\n               // fieldField.markInvalid(this.labels.component.errorRequired);\n               return false;\n            }\n         },\n\n         selectField: (columnID) => {\n            var field = this.getUpdateObjectField(columnID);\n            if (!field) return;\n\n            var fieldComponent = field.formComponent(),\n               abView = fieldComponent.newInstance(field.object.application),\n               formFieldComponent = abView.component(this.App),\n               $componentView = formFieldComponent.ui,\n               $inputView;\n\n            $componentView.id = ids.value; // set our expected id\n\n            // find all the DataSources\n            var datasources = this.currentForm.AB.datacollections(\n               (dc) => dc.datasource\n            );\n\n            // create a droplist with those dataSources\n            var optionsDataSources = [];\n            datasources.forEach((dc) => {\n               optionsDataSources.push({ id: dc.id, value: dc.label });\n            });\n\n            // create a droplist with select options\n            var optionsSelectBy = [\n               { id: \"select-one\", value: L(\"Current selection\") },\n               {\n                  id: \"filter-select-one\",\n                  value: L(\"Select first after filter by...\"),\n               },\n            ];\n\n            var $optionUpdateExsits = {\n               type: \"clean\",\n               rows: [\n                  {\n                     cols: [\n                        {\n                           id: ids.selectDc,\n                           view: \"combo\",\n                           options: optionsDataSources,\n                           placeholder: L(\"Choose a data source\"),\n                           on: {\n                              onChange: (newv, oldv) => {\n                                 var selectedDC = this.currentForm.AB.datacollectionByID(\n                                    newv\n                                 );\n                                 if (\n                                    selectedDC &&\n                                    (selectedDC.sourceType == \"query\" ||\n                                       !field.isConnection)\n                                 ) {\n                                    var queryFieldOptions = [];\n                                    selectedDC.datasource\n                                       .fields()\n                                       .forEach((f) => {\n                                          queryFieldOptions.push({\n                                             id: f.id,\n                                             value: f.label,\n                                          });\n                                       });\n                                    $$(ids.queryField).define(\n                                       \"options\",\n                                       queryFieldOptions\n                                    );\n                                    $$(ids.queryField).refresh();\n                                    $$(ids.queryField).show();\n                                 } else {\n                                    $$(ids.queryField).hide();\n                                 }\n                              },\n                           },\n                        },\n                        // we will place a list of query fields if you choose a datasource that has a query source type\n                        {\n                           id: ids.queryField,\n                           view: \"combo\",\n                           hidden: true,\n                           placeholder: L(\"Choose value from...\"),\n                           options: [{ id: 1, value: \"figure this out\" }],\n                        },\n                     ],\n                  },\n                  {\n                     id: ids.selectBy,\n                     view: \"combo\",\n                     options: optionsSelectBy,\n                     placeholder: L(\"Choose select option\"),\n                     on: {\n                        onChange: (newv, oldv) => {\n                           var $row = $$(ids.row);\n                           $row.removeView($row.getChildViews()[1]);\n                           if (newv == \"select-one\") {\n                              $row.addView({}, 1);\n                           } else {\n                              var options = this.currentForm.datacollection.datasource\n                                 .fields()\n                                 .map(function (f) {\n                                    return {\n                                       id: f.id,\n                                       value: f.label,\n                                    };\n                                 });\n\n                              FilterComponent = this.AB.filterComplexNew(\n                                 `${idBase}_filter`\n                              );\n                              // FilterComponent.applicationLoad(\n                              //    this.currentForm.application\n                              // );\n                              FilterComponent.init({\n                                 isRecordRule: true,\n                                 fieldOptions: options,\n                              });\n                              FilterComponent.on(\"change\", (val) => {\n                                 _logic.onFilterChange(val);\n                              });\n\n                              $row.addView(FilterComponent.ui, 1);\n\n                              var dcId = $$(ids.selectDc).getValue();\n                              var dataCollection = this.currentForm.AB.datacollectionByID(\n                                 dcId\n                              );\n                              if (dataCollection) {\n                                 _logic.populateFilters(dataCollection);\n                              }\n                           }\n                        },\n                     },\n                  },\n               ],\n            };\n\n            // WORKAROUND: add '[Current User]' option to the user data field\n            if (field.key == \"user\") {\n               $componentView.options = $componentView.options || [];\n               $componentView.options.unshift({\n                  id: \"ab-current-user\",\n                  value: L(\"[Current User]\"),\n               });\n            }\n\n            // UPDATE: ok, in practice we have not had any use cases where\n            // we want individual values on connectedObject fields, but\n            // instead we want to insert the current selected element from\n            // a relevant data view.  So, replace the fieldComponet\n            // from a connectedObject field with a list of data views that\n            // are based upon the same object we are connected to:\n            if (field.isConnection) {\n               // find the ABObject this field connects to\n               var connectedObject = field.datasourceLink;\n\n               // find all the DataSources that are based upon this ABObject\n               // to do this, we find the root Page we are on, then ask that Page for datasources:\n               datasources = datasources.filter((dc) => {\n                  return dc.datasource.id == connectedObject.id;\n               });\n\n               var dcQueries = this.currentForm.AB.datacollections((dc) => {\n                  return (\n                     dc.sourceType == \"query\" &&\n                     dc.datasource &&\n                     dc.datasource.canFilterObject(connectedObject)\n                  );\n                  // return dc.datasource.id == connectedObject.id;\n               });\n\n               datasources = datasources.concat(dcQueries);\n\n               // refresh a droplist with those dataSources\n               optionsDataSources = [];\n               datasources.forEach((dc) => {\n                  optionsDataSources.push({ id: dc.id, value: dc.label });\n               });\n\n               // add select an array value option\n               optionsSelectBy.push({\n                  id: \"filter-select-all\",\n                  value: L(\"Select all after filter by...\"),\n               });\n\n               $inputView = $optionUpdateExsits;\n\n               // and the upcoming formFieldComponent.init()\n               // doesn't need to do anything:\n               formFieldComponent = {\n                  init: function () {},\n               };\n\n               // and we reset field so it's customDisplay isn't called:\n               // field = {};\n            } else {\n               $inputView = {\n                  id: ids.multiview,\n                  view: \"multiview\",\n                  cells: [\n                     {\n                        batch: \"custom\",\n                        rows: [\n                           $componentView,\n                           {\n                              view: \"label\",\n                              label: `<a>${L(\"Or exists value\")}</a>`,\n                              on: {\n                                 onItemClick: function () {\n                                    var $container = this.getParentView(),\n                                       $multiview = $container.getParentView();\n\n                                    $multiview.showBatch(\"exist\");\n                                 },\n                              },\n                           },\n                        ],\n                     },\n                     {\n                        // Update value from exists object\n                        batch: \"exist\",\n                        rows: [\n                           $optionUpdateExsits,\n                           {\n                              view: \"label\",\n                              label: `<a>${L(\"Or custom value\")}</a>`,\n                              on: {\n                                 onItemClick: function () {\n                                    var $container = this.getParentView(),\n                                       $multiview = $container.getParentView();\n\n                                    // clear filter view\n                                    $$(ids.selectBy).setValue(\"select-one\");\n\n                                    $multiview.showBatch(\"custom\");\n                                 },\n                              },\n                           },\n                        ],\n                     },\n                  ],\n               };\n            }\n\n            // Change component to display this field's form input\n            var $row = $$(ids.row).getChildViews()[0];\n            $row.removeView($row.getChildViews()[3]);\n            $row.addView($inputView, 3);\n\n            formFieldComponent.init();\n\n            // Show custom display of data field\n            if (!field.isConnection && field.customDisplay) {\n               // field.customDisplay(field, this.App, $row.getChildViews()[3].$view, {\n\n               var compNodeView = $$($componentView.id).$view;\n\n               // wait until render UI complete\n               setTimeout(() => {\n                  field.customDisplay(field, this.App, compNodeView, {\n                     editable: true,\n\n                     // tree\n                     isForm: true,\n                  });\n               }, 50);\n            }\n\n            // Show the remove button\n            var $buttonRemove = $row.getChildViews()[4];\n            $buttonRemove.show();\n\n            // Add a new row\n            if (columnID) _logic.callbacks.onAdd();\n         },\n\n         setValue: (data) => {\n            $$(ids.field).setValue(data.fieldID);\n            // note: this triggers our _logic.selectField() fn.\n            var field = this.getUpdateObjectField(data.fieldID);\n            if (field) {\n               var setValueFn = () => {\n                  $$(ids.selectDc).setValue(data.value);\n                  if (data.queryField) {\n                     $$(ids.queryField).setValue(data.queryField);\n                  }\n                  var selectBy = data.selectBy || \"select-one\";\n                  $$(ids.selectBy).setValue(selectBy);\n\n                  if (selectBy != \"select-one\") {\n                     var collectionId = data.value;\n                     var dataCollection = this.currentForm.AB.datacollectionByID(\n                        collectionId\n                     );\n                     if (dataCollection && data.filterConditions) {\n                        _logic.populateFilters(\n                           dataCollection,\n                           data.filterConditions\n                        );\n                     }\n                  }\n               };\n\n               // now handle our special connectedObject case:\n               if (field.isConnection) {\n                  setValueFn();\n               } else {\n                  if (data.valueType == \"exist\") {\n                     $$(ids.multiview).showBatch(\"exist\");\n\n                     setValueFn();\n                  } else {\n                     $$(ids.multiview).showBatch(\"custom\");\n\n                     // wait until render UI complete\n                     setTimeout(function () {\n                        // set value to custom field\n                        var rowData = {};\n                        rowData[field.columnName] = data.value;\n                        field.setValue($$(ids.value), rowData);\n                     }, 50);\n                  }\n               }\n            }\n         },\n\n         populateFilters: (dataView, filterConditions) => {\n            filterConditions =\n               filterConditions ||\n               ABViewRuleActionObjectUpdaterDefaults.filterConditions;\n\n            // Populate data to popups\n            // FilterComponent.objectLoad(objectCopy);\n            FilterComponent.fieldsLoad(\n               dataView.datasource ? dataView.datasource.fields() : []\n            );\n            FilterComponent.setValue(filterConditions);\n         },\n\n         toSettings: () => {\n            // if this isn't the last entry row\n            // * a row with valid data has the [delete] button showing.\n            var buttonDelete = $$(ids.buttonDelete);\n            if (buttonDelete && buttonDelete.isVisible()) {\n               var data = {};\n               data.fieldID = $$(ids.field).getValue();\n\n               var $valueField = $$(ids.value);\n               var field = this.getUpdateObjectField(data.fieldID);\n\n               var getValueFn = () => {\n                  data.value = $$(ids.selectDc).getValue();\n                  data.queryField = $$(ids.queryField).getValue();\n                  data.op = \"set\"; // possible to create other types of operations.\n                  data.type = field.key;\n                  data.selectBy = $$(ids.selectBy).getValue();\n                  data.valueType = \"exist\";\n                  if (FilterComponent) {\n                     data.filterConditions = FilterComponent.getValue();\n                  }\n               };\n\n               // now handle our special connectedObject case:\n               if (field.isConnection) {\n                  getValueFn();\n               } else {\n                  if ($$(ids.multiview).config.visibleBatch == \"exist\") {\n                     getValueFn();\n                  } else {\n                     data.value = field.getValue($valueField, {});\n                     data.op = \"set\"; // possible to create other types of operations.\n                     data.type = field.key;\n                     data.valueType = \"custom\";\n                  }\n               }\n\n               return data;\n            } else {\n               return null;\n            }\n         },\n      };\n\n      var _ui = {\n         id: ids.row,\n         view: \"layout\",\n         rows: [\n            {\n               cols: [\n                  {\n                     // Label\n                     view: \"label\",\n                     width: this.currentForm.AB.Config.labelWidthSmall,\n                     label: L(\"Set\"),\n                  },\n                  {\n                     // Field list\n                     view: \"combo\",\n                     name: \"field\",\n                     placeholder: L(\"Choose a field\"),\n                     id: ids.field,\n                     height: 32,\n                     options: _logic.getFieldList(true),\n                     on: {\n                        onChange: function (columnId) {\n                           _logic.selectField(columnId);\n                        },\n                     },\n                  },\n                  {\n                     // Label\n                     view: \"label\",\n                     width: this.currentForm.AB.Config.labelWidthSmall,\n                     label: L(\"To\"),\n                  },\n\n                  // Field value\n                  // NOTE: this view gets replaced each time a field is selected.\n                  // We replace it with a component associated with the Field\n                  {},\n\n                  {\n                     // \"Remove\" button\n                     view: \"button\",\n                     css: \"webix_danger\",\n                     id: ids.buttonDelete,\n                     icon: \"fa fa-trash\",\n                     type: \"icon\",\n                     width: 30,\n                     hidden: true,\n                     click: function () {\n                        _logic.callbacks.onDelete(ids.row);\n                     },\n                  },\n               ],\n            },\n            {}, // we will add filters here if we need them\n         ],\n      };\n\n      var init = (options) => {\n         for (var c in _logic.callbacks) {\n            _logic.callbacks[c] = options[c] || _logic.callbacks[c];\n         }\n\n         if (options.data) {\n            // options.data = { formID:xxx, value:yyy,  type:zzzz }\n            _logic.setValue(options.data);\n\n            // _logic.buttonsToggle();\n         }\n      };\n\n      return {\n         ui: _ui,\n         init: init,\n         toSettings: () => {\n            return _logic.toSettings();\n         },\n         _logic: _logic,\n      };\n   }\n\n   getUpdateObjectField(fieldID) {\n      return this.updateObject ? this.updateObject.fieldByID(fieldID) : null;\n   }\n\n   /**\n    * @method processUpdateObject\n    * Perform the specified update actions on the provided objectToUpdate\n    * @param {obj} options  Additional information required to make updates.\n    * @param {obj} objectToUpdate  The object to make the updates on.\n    * @return {boolean}   true if an update took place, false if no updates.\n    */\n   processUpdateObject(options, objectToUpdate) {\n      this._formData = objectToUpdate;\n      // return new Promise((resolve, reject) => {\n      var isUpdated = false;\n\n      this.valueRules = this.valueRules || {};\n      this.valueRules.fieldOperations = this.valueRules.fieldOperations || [];\n\n      // var allPromises = [];\n\n      // for each of our operations\n      this.valueRules.fieldOperations.forEach((op) => {\n         // op = {\n         // \tfieldID:'zzzzz',\n         //\tvalue: 'xxx',\n         //\top: 'set',\n         //  type:'',\n         //  queryField: '', // id of ABField\n         //  selectBy:'',   ['select-one', 'filter-select-one', 'filter-select-all']\n         //  valueType: \"\", ['custom', 'exist']\n         // \tfilterConditions: { // array of filters to apply to the data table\n         //\t\tglue: 'and',\n         // \t\trules: []\n         //  }\n         // }\n\n         var field = this.getUpdateObjectField(op.fieldID);\n         if (!field) return;\n\n         var value = op.value;\n\n         if (value == \"ab-current-user\") {\n            value = this.currentForm.AB.Account.username();\n\n         // in the case of a connected Field, we use op.value to get the\n         // datacollection, and find it's currently selected value:\n         } else if (field.isConnection || op.valueType == \"exist\") {\n            // NOTE: 30 May 2018 :current decision from Ric is to limit this\n            // to only handle 1:x connections where we update the current obj\n            // with the PK of the value from the DC.\n            //\n            // In the future, if we want to handle the other options,\n            // we need to modify this to handle the M:x connections where\n            // we insert our PK into the value from the DC.\n\n            // op.value is the ABDatacollection.id we need to find\n            var dataCollection = this.currentForm.AB.datacollectionByID(\n               op.value\n            );\n\n            // we don't want to mess with the dataView directly since it might\n            // be used by other parts of the system and this refresh might reset\n            // it's cursor.\n            // var clonedDataCollection = dataView.filteredClone(op.filterConditions);\n\n            // loop through rules to find \"same-as-field\" or \"not-same-as-field\"\n            // adjust operator and switch key value to actual value when found\n            var filterConditions = this.currentForm.AB.cloneDeep(\n               op.filterConditions\n            );\n            if (filterConditions && filterConditions.rules) {\n               filterConditions.rules\n                  .filter((r) => {\n                     return (\n                        r.rule == \"same_as_field\" ||\n                        r.rule == \"not_same_as_field\"\n                     );\n                  })\n                  .forEach((item) => {\n                     var valueField = this.currentForm.datacollection.datasource.fieldByID(\n                        item.value\n                     );\n                     if (valueField.isConnection) {\n                        item.value = valueField.format(this._formData);\n                     } else {\n                        item.value = this._formData[valueField.columnName];\n                     }\n\n                     if (item.rule == \"not_same_as_field\") {\n                        item.rule = \"not equals\";\n                     } else {\n                        item.rule = \"equals\";\n                     }\n                  });\n            }\n\n            let clonedDataCollection = dataCollection.filteredClone(\n               filterConditions\n            );\n\n            switch (op.selectBy) {\n               // the 'select-one' is getting the currently set cursor on this data collection\n               // and using that value.\n               // TODO: rename to 'select-cursor'\n               case \"select-one\":\n               default:\n                  value = clonedDataCollection.getCursor(); // dataView.getItem(dataView.getCursor());\n\n                  if (value) {\n                     // NOTE: webix documentation issue: .getCursor() is supposed to return\n                     // the .id of the item.  However it seems to be returning the {obj}\n\n                     if (op.valueType == \"exist\") {\n                        var fieldWithValue = clonedDataCollection.datasource.fieldByID(\n                           op.queryField\n                        );\n\n                        if (fieldWithValue)\n                           value = value[fieldWithValue.columnName];\n                     } else if (value.id) {\n                        value = value.id;\n                     }\n                  }\n\n                  // QUESTION: if value returns undefined should we do something else?\n                  switch (op.op) {\n                     case \"set\":\n                        if (!value) break;\n\n                        if (field.isConnection) {\n                           // if we are setting a connection we do not want to pass the full object because\n                           // batch creates payload gets too large\n                           objectToUpdate[field.columnName] = {};\n                           objectToUpdate[field.columnName].id =\n                              value[field.datasourceLink.PK()];\n                           objectToUpdate[field.columnName][\n                              field.datasourceLink.PK()\n                           ] = value[field.datasourceLink.PK()];\n\n                           // If the connect field use the custom FK, then it requires to pass value of the custom FK.\n                           if (field.settings.isCustomFK) {\n                              if (field.indexField) {\n                                 objectToUpdate[field.columnName][\n                                    field.indexField.columnName\n                                 ] = value[field.indexField.columnName];\n                              }\n                              if (field.indexField2) {\n                                 objectToUpdate[field.columnName][\n                                    field.indexField2.columnName\n                                 ] = value[field.indexField2.columnName];\n                              }\n                           }\n\n                           field.datasourceLink\n                              .fields(\n                                 (f) =>\n                                    f.key == \"combined\" || f.key == \"AutoIndex\"\n                              )\n                              .forEach((f) => {\n                                 objectToUpdate[field.columnName][\n                                    f.columnName\n                                 ] = value[f.columnName];\n                              });\n                        } else {\n                           objectToUpdate[field.columnName] = value;\n                        }\n\n                        break;\n                  }\n                  break;\n\n               // attempt to filter this data collection by the given filterConditions\n               case \"filter-select-all\":\n                  var newValues = [];\n\n                  var currRow = clonedDataCollection.getFirstRecord();\n                  while (currRow) {\n                     // do something there\n\n                     switch (clonedDataCollection.sourceType) {\n                        // case: datacollection is an object\n                        // we want to set our field to this values\n                        case \"object\":\n                           newValues.push(currRow.id);\n                           break;\n\n                        // case: datacollection is a query\n                        // our field is a pointer to an object. we want to pull out that object\n                        // from the query data.\n                        case \"query\":\n                           var fieldWithValue = clonedDataCollection.datasource.fieldByID(\n                              op.queryField\n                           );\n\n                           var newValue = currRow[fieldWithValue.columnName];\n\n                           if (typeof newValue == \"undefined\") {\n                              newValue = currRow[fieldWithValue.relationName()];\n\n                              if (Array.isArray(newValue)) {\n                                 newValue = newValue.map((v) => {\n                                    return v.id ? v.id : v;\n                                 });\n                              } else if (newValue.id) {\n                                 newValue = newValue.id;\n                              }\n                           }\n\n                           newValues = this.currentForm.AB.uniq(\n                              newValues.concat(newValue)\n                           );\n\n                           break;\n                     }\n\n                     currRow = clonedDataCollection.getNextRecord(currRow);\n                  }\n\n                  // QUESTION: if value returns undefined should we do something else?\n                  switch (op.op) {\n                     case \"set\":\n                        if (field.linkType() == \"one\") {\n                           var updates = [];\n                           newValues.forEach((v) => {\n                              var objectToUpdateClone = this.currentForm.AB.cloneDeep(\n                                 objectToUpdate\n                              );\n                              objectToUpdateClone[field.columnName] = v;\n                              updates.push(objectToUpdateClone);\n                           });\n                           objectToUpdate.newRecords = updates;\n                        } else {\n                           objectToUpdate[field.columnName] = newValues;\n                        }\n                        break;\n                  }\n                  break;\n\n               case \"filter-select-one\":\n                  newValues = [];\n\n                  value = clonedDataCollection.getFirstRecord();\n\n                  if (value) {\n                     // case: datacollection is a query\n                     // our field is a pointer to an object. we want to pull out that object\n                     // from the query data.\n                     if (\n                        clonedDataCollection.sourceType == \"query\" ||\n                        (op.valueType == \"exist\" && op.queryField)\n                     ) {\n                        fieldWithValue = clonedDataCollection.datasource.fieldByID(\n                           op.queryField\n                        );\n\n                        newValue = value[fieldWithValue.columnName];\n\n                        if (typeof newValue == \"undefined\") {\n                           newValue = value[fieldWithValue.relationName()];\n                           if (Array.isArray(newValue)) {\n                              newValue = newValue[0];\n                           }\n                           if (newValue.id) newValue = newValue.id;\n                        }\n\n                        value = newValue;\n                     }\n                     // case: datacollection is an object\n                     // we want to set our field to this values\n                     else if (clonedDataCollection.sourceType == \"object\") {\n                        // NOTE: webix documentation issue: .getCursor() is supposed to return\n                        // the .id of the item.  However it seems to be returning the {obj}\n\n                        // we need to use the objects indexField(2) if there is one\n                        // otherwise default to the id\n                        var lookup;\n                        if (field.indexField) {\n                           lookup = field.indexField.columnName;\n                        } else if (field.indexField2) {\n                           lookup = field.indexField2.columnName;\n                        }\n                        if (lookup && value[lookup]) {\n                           value = value[lookup];\n                        } else if (value.id) {\n                           value = value.id;\n                        }\n                     }\n                  }\n\n                  // QUESTION: if value returns undefined should we do something else?\n                  switch (op.op) {\n                     case \"set\":\n                        objectToUpdate[field.columnName] = value;\n                        break;\n                  }\n                  break;\n            }\n\n            isUpdated = true;\n\n            // allPromises.push(connectedPromise);\n         } else {\n            // var setPromise = new Promise((resolve, reject) => {\n            switch (op.op) {\n               case \"set\":\n                  objectToUpdate[field.columnName] = value;\n                  break;\n            }\n\n            isUpdated = true;\n\n            //    resolve(isUpdated);\n            // });\n\n            // allPromises.push(setPromise);\n\n            // console.log(\"finished\");\n         }\n      });\n\n      return isUpdated;\n      // Promise.all(allPromises).then(() => {\n      //    resolve(isUpdated);\n      // });\n      // });\n   }\n\n   // process\n   // gets called when a form is submitted and the data passes the Query Builder Rules.\n   // @param {obj} options\n   // @return {Promise}\n   process(options) {\n      this._formData = options.data;\n\n      return new Promise((resolve, reject) => {\n         let isUpdated = this.processUpdateObject({}, options.data);\n         if (!isUpdated) {\n            resolve();\n         } else {\n            // get the model from the provided Form Obj:\n            var dv = options.form.datacollection;\n            if (!dv) return resolve();\n\n            var model = dv.model;\n            model\n               .update(options.data.id, options.data)\n               .then(resolve)\n               .catch((err) => {\n                  this.currentForm.AB.notify.developer(err, {\n                     context:\n                        \"ABViewRuleActionObjectUpdater:process  update error\",\n                     id: options.data.id,\n                     data: options.data,\n                  });\n                  reject(err);\n               });\n         }\n      });\n   }\n\n   // objectLoad\n   // save the current object this Action is associated with.\n   objectLoad(object) {\n      super.objectLoad(object);\n      this.updateObjectLoad(object);\n   }\n\n   // updateObjectLoad\n   // save the given object as the object we will update.\n   updateObjectLoad(object) {\n      // stash rules for old object\n      if (this.updateObject) {\n         this.stashRules[this.updateObject.id] = this.valueRules;\n      }\n\n      this.updateObject = object;\n\n      // with a new updateObject, then reset our UI\n      this._uiUpdater = null;\n\n      // reload any stashed rules, or set to {}\n      this.valueRules = this.stashRules[this.updateObject.id] || {};\n   }\n\n   // fromSettings\n   // initialize this Action from a given set of setting values.\n   // @param {obj}  settings\n   fromSettings(settings) {\n      settings = settings || {};\n\n      super.fromSettings(settings); // let the parent handle the QB\n\n      // make sure UI is updated:\n      // set our updateObject\n      if (settings.updateObjectURL) {\n         var updateObject = this.currentForm.application.urlResolve(\n            settings.updateObjectURL\n         );\n         this.updateObject = updateObject;\n      }\n\n      // if we have a display component, then populate it:\n      if (this._uiUpdater) {\n         // now we handle our valueRules:{} object settings.\n         // pass the settings off to our DisplayList component:\n         this._uiUpdater.fromSettings(settings);\n      }\n   }\n\n   // toSettings\n   // return an object that represents the current state of this Action\n   // @return {obj}\n   toSettings() {\n      // settings: {\n      //\tvalueRules:{}\n      // }\n\n      // let our parent store our QB settings\n      var settings = super.toSettings();\n\n      settings.valueRules = this._uiUpdater.toSettings();\n      settings.updateObjectURL = this.updateObject.urlPointer();\n\n      return settings;\n   }\n\n   /**\n    * @method isReady()\n    * returns a promise that gets resolved once our action is ready to work.\n    * Here we need to scan each of our field operations, and verify all\n    * related data collections are initialized before we can continue.\n    * @return {Promise}\n    */\n   isReady() {\n      var allReady = [];\n      let fieldOps = this.valueRules?.fieldOperations ?? [];\n      fieldOps.forEach((op) => {\n         let field = this.getUpdateObjectField(op.fieldID);\n         if (!field) return;\n         if (!field.isConnection && op.valueType !== \"exist\") return;\n\n         // this references a DC\n         let DC = this.currentForm.AB.datacollectionByID(op.value);\n         if (DC?.dataStatus === DC?.dataStatusFlag.initialized) return;\n\n         // not ready yet, so wait until the 'initializedData' event\n         allReady.push(\n            new Promise((resolve /*, reject */) => {\n               DC.on(\"initializedData\", () => {\n                  resolve();\n               });\n            })\n         );\n      });\n      return Promise.all(allReady);\n   }\n};\n","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.ImageModule=f()}})(function(){var define,module,exports;return function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}({1:[function(require,module,exports){\"use strict\";var DocUtils=require(\"docxtemplater\").DocUtils;DocUtils.convertPixelsToEmus=function(pixel){return Math.round(pixel*9525)};module.exports=DocUtils},{docxtemplater:5}],2:[function(require,module,exports){\"use strict\";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\")}}var DocUtils=require(\"./docUtils\");var extensionRegex=/[^.]+\\.([^.]+)/;var rels={getPrefix:function getPrefix(fileType){return fileType===\"docx\"?\"word\":\"ppt\"},getFileTypeName:function getFileTypeName(fileType){return fileType===\"docx\"?\"document\":\"presentation\"},getRelsFileName:function getRelsFileName(fileName){return fileName.replace(/^.*?([a-zA-Z0-9]+)\\.xml$/,\"$1\")+\".xml.rels\"},getRelsFilePath:function getRelsFilePath(fileName,fileType){var relsFileName=rels.getRelsFileName(fileName);var prefix=fileType===\"pptx\"?\"ppt/slides\":\"word\";return prefix+\"/_rels/\"+relsFileName}};module.exports=function(){function ImgManager(zip,fileName,xmlDocuments,fileType){_classCallCheck(this,ImgManager);this.fileName=fileName;this.prefix=rels.getPrefix(fileType);this.zip=zip;this.xmlDocuments=xmlDocuments;this.fileTypeName=rels.getFileTypeName(fileType);this.mediaPrefix=fileType===\"pptx\"?\"../media\":\"media\";var relsFilePath=rels.getRelsFilePath(fileName,fileType);this.relsDoc=xmlDocuments[relsFilePath]||this.createEmptyRelsDoc(xmlDocuments,relsFilePath)}_createClass(ImgManager,[{key:\"createEmptyRelsDoc\",value:function createEmptyRelsDoc(xmlDocuments,relsFileName){var mainRels=this.prefix+\"/_rels/\"+this.fileTypeName+\".xml.rels\";var doc=xmlDocuments[mainRels];if(!doc){var err=new Error(\"Could not copy from empty relsdoc\");err.properties={mainRels:mainRels,relsFileName:relsFileName,files:Object.keys(this.zip.files)};throw err}var relsDoc=DocUtils.str2xml(DocUtils.xml2str(doc));var relationships=relsDoc.getElementsByTagName(\"Relationships\")[0];var relationshipChilds=relationships.getElementsByTagName(\"Relationship\");for(var i=0,l=relationshipChilds.length;i<l;i++){relationships.removeChild(relationshipChilds[i])}xmlDocuments[relsFileName]=relsDoc;return relsDoc}},{key:\"loadImageRels\",value:function loadImageRels(){var iterable=this.relsDoc.getElementsByTagName(\"Relationship\");return Array.prototype.reduce.call(iterable,function(max,relationship){var id=relationship.getAttribute(\"Id\");if(/^rId[0-9]+$/.test(id)){return Math.max(max,parseInt(id.substr(3),10))}return max},0)}},{key:\"addExtensionRels\",value:function addExtensionRels(contentType,extension){var contentTypeDoc=this.xmlDocuments[\"[Content_Types].xml\"];var defaultTags=contentTypeDoc.getElementsByTagName(\"Default\");var extensionRegistered=Array.prototype.some.call(defaultTags,function(tag){return tag.getAttribute(\"Extension\")===extension});if(extensionRegistered){return}var types=contentTypeDoc.getElementsByTagName(\"Types\")[0];var newTag=contentTypeDoc.createElement(\"Default\");newTag.namespaceURI=null;newTag.setAttribute(\"ContentType\",contentType);newTag.setAttribute(\"Extension\",extension);types.appendChild(newTag)}},{key:\"addImageRels\",value:function addImageRels(imageName,imageData,i){if(i==null){i=0}var realImageName=i===0?imageName:imageName+(\"(\"+i+\")\");var imagePath=this.prefix+\"/media/\"+realImageName;if(this.zip.files[imagePath]!=null){return this.addImageRels(imageName,imageData,i+1)}var image={name:imagePath,data:imageData,options:{binary:true}};this.zip.file(image.name,image.data,image.options);var extension=realImageName.replace(extensionRegex,\"$1\");this.addExtensionRels(\"image/\"+extension,extension);var relationships=this.relsDoc.getElementsByTagName(\"Relationships\")[0];var newTag=this.relsDoc.createElement(\"Relationship\");newTag.namespaceURI=null;var maxRid=this.loadImageRels()+1;newTag.setAttribute(\"Id\",\"rId\"+maxRid);newTag.setAttribute(\"Type\",\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\");newTag.setAttribute(\"Target\",this.mediaPrefix+\"/\"+realImageName);relationships.appendChild(newTag);return maxRid}}]);return ImgManager}()},{\"./docUtils\":1}],3:[function(require,module,exports){\"use strict\";module.exports={getImageXml:function getImageXml(rId,size){return('<w:drawing>\\n\\t\\t<wp:inline distT=\"0\" distB=\"0\" distL=\"0\" distR=\"0\">\\n\\t\\t\\t<wp:extent cx=\"'+size[0]+'\" cy=\"'+size[1]+'\"/>\\n\\t\\t\\t<wp:effectExtent l=\"0\" t=\"0\" r=\"0\" b=\"0\"/>\\n\\t\\t\\t<wp:docPr id=\"2\" name=\"Image 2\" descr=\"image\"/>\\n\\t\\t\\t<wp:cNvGraphicFramePr>\\n\\t\\t\\t\\t<a:graphicFrameLocks xmlns:a=\"http://schemas.openxmlformats.org/drawingml/2006/main\" noChangeAspect=\"1\"/>\\n\\t\\t\\t</wp:cNvGraphicFramePr>\\n\\t\\t\\t<a:graphic xmlns:a=\"http://schemas.openxmlformats.org/drawingml/2006/main\">\\n\\t\\t\\t\\t<a:graphicData uri=\"http://schemas.openxmlformats.org/drawingml/2006/picture\">\\n\\t\\t\\t\\t\\t<pic:pic xmlns:pic=\"http://schemas.openxmlformats.org/drawingml/2006/picture\">\\n\\t\\t\\t\\t\\t\\t<pic:nvPicPr>\\n\\t\\t\\t\\t\\t\\t\\t<pic:cNvPr id=\"0\" name=\"Picture 1\" descr=\"image\"/>\\n\\t\\t\\t\\t\\t\\t\\t<pic:cNvPicPr>\\n\\t\\t\\t\\t\\t\\t\\t\\t<a:picLocks noChangeAspect=\"1\" noChangeArrowheads=\"1\"/>\\n\\t\\t\\t\\t\\t\\t\\t</pic:cNvPicPr>\\n\\t\\t\\t\\t\\t\\t</pic:nvPicPr>\\n\\t\\t\\t\\t\\t\\t<pic:blipFill>\\n\\t\\t\\t\\t\\t\\t\\t<a:blip r:embed=\"rId'+rId+'\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<a:extLst>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<a:ext uri=\"{28A0092B-C50C-407E-A947-70E740481C1C}\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<a14:useLocalDpi xmlns:a14=\"http://schemas.microsoft.com/office/drawing/2010/main\" val=\"0\"/>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</a:ext>\\n\\t\\t\\t\\t\\t\\t\\t\\t</a:extLst>\\n\\t\\t\\t\\t\\t\\t\\t</a:blip>\\n\\t\\t\\t\\t\\t\\t\\t<a:srcRect/>\\n\\t\\t\\t\\t\\t\\t\\t<a:stretch>\\n\\t\\t\\t\\t\\t\\t\\t\\t<a:fillRect/>\\n\\t\\t\\t\\t\\t\\t\\t</a:stretch>\\n\\t\\t\\t\\t\\t\\t</pic:blipFill>\\n\\t\\t\\t\\t\\t\\t<pic:spPr bwMode=\"auto\">\\n\\t\\t\\t\\t\\t\\t\\t<a:xfrm>\\n\\t\\t\\t\\t\\t\\t\\t\\t<a:off x=\"0\" y=\"0\"/>\\n\\t\\t\\t\\t\\t\\t\\t\\t<a:ext cx=\"'+size[0]+'\" cy=\"'+size[1]+'\"/>\\n\\t\\t\\t\\t\\t\\t\\t</a:xfrm>\\n\\t\\t\\t\\t\\t\\t\\t<a:prstGeom prst=\"rect\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<a:avLst/>\\n\\t\\t\\t\\t\\t\\t\\t</a:prstGeom>\\n\\t\\t\\t\\t\\t\\t\\t<a:noFill/>\\n\\t\\t\\t\\t\\t\\t\\t<a:ln>\\n\\t\\t\\t\\t\\t\\t\\t\\t<a:noFill/>\\n\\t\\t\\t\\t\\t\\t\\t</a:ln>\\n\\t\\t\\t\\t\\t\\t</pic:spPr>\\n\\t\\t\\t\\t\\t</pic:pic>\\n\\t\\t\\t\\t</a:graphicData>\\n\\t\\t\\t</a:graphic>\\n\\t\\t</wp:inline>\\n\\t</w:drawing>\\n\\t\\t').replace(/\\t|\\n/g,\"\")},getImageXmlCentered:function getImageXmlCentered(rId,size){return('<w:p>\\n\\t\\t\\t<w:pPr>\\n\\t\\t\\t\\t<w:jc w:val=\"center\"/>\\n\\t\\t\\t</w:pPr>\\n\\t\\t\\t<w:r>\\n\\t\\t\\t\\t<w:rPr/>\\n\\t\\t\\t\\t<w:drawing>\\n\\t\\t\\t\\t\\t<wp:inline distT=\"0\" distB=\"0\" distL=\"0\" distR=\"0\">\\n\\t\\t\\t\\t\\t<wp:extent cx=\"'+size[0]+'\" cy=\"'+size[1]+'\"/>\\n\\t\\t\\t\\t\\t<wp:docPr id=\"0\" name=\"Picture\" descr=\"\"/>\\n\\t\\t\\t\\t\\t<a:graphic xmlns:a=\"http://schemas.openxmlformats.org/drawingml/2006/main\">\\n\\t\\t\\t\\t\\t\\t<a:graphicData uri=\"http://schemas.openxmlformats.org/drawingml/2006/picture\">\\n\\t\\t\\t\\t\\t\\t<pic:pic xmlns:pic=\"http://schemas.openxmlformats.org/drawingml/2006/picture\">\\n\\t\\t\\t\\t\\t\\t\\t<pic:nvPicPr>\\n\\t\\t\\t\\t\\t\\t\\t<pic:cNvPr id=\"0\" name=\"Picture\" descr=\"\"/>\\n\\t\\t\\t\\t\\t\\t\\t<pic:cNvPicPr>\\n\\t\\t\\t\\t\\t\\t\\t\\t<a:picLocks noChangeAspect=\"1\" noChangeArrowheads=\"1\"/>\\n\\t\\t\\t\\t\\t\\t\\t</pic:cNvPicPr>\\n\\t\\t\\t\\t\\t\\t\\t</pic:nvPicPr>\\n\\t\\t\\t\\t\\t\\t\\t<pic:blipFill>\\n\\t\\t\\t\\t\\t\\t\\t<a:blip r:embed=\"rId'+rId+'\"/>\\n\\t\\t\\t\\t\\t\\t\\t<a:stretch>\\n\\t\\t\\t\\t\\t\\t\\t\\t<a:fillRect/>\\n\\t\\t\\t\\t\\t\\t\\t</a:stretch>\\n\\t\\t\\t\\t\\t\\t\\t</pic:blipFill>\\n\\t\\t\\t\\t\\t\\t\\t<pic:spPr bwMode=\"auto\">\\n\\t\\t\\t\\t\\t\\t\\t<a:xfrm>\\n\\t\\t\\t\\t\\t\\t\\t\\t<a:off x=\"0\" y=\"0\"/>\\n\\t\\t\\t\\t\\t\\t\\t\\t<a:ext cx=\"'+size[0]+'\" cy=\"'+size[1]+'\"/>\\n\\t\\t\\t\\t\\t\\t\\t</a:xfrm>\\n\\t\\t\\t\\t\\t\\t\\t<a:prstGeom prst=\"rect\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<a:avLst/>\\n\\t\\t\\t\\t\\t\\t\\t</a:prstGeom>\\n\\t\\t\\t\\t\\t\\t\\t<a:noFill/>\\n\\t\\t\\t\\t\\t\\t\\t<a:ln w=\"9525\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<a:noFill/>\\n\\t\\t\\t\\t\\t\\t\\t\\t<a:miter lim=\"800000\"/>\\n\\t\\t\\t\\t\\t\\t\\t\\t<a:headEnd/>\\n\\t\\t\\t\\t\\t\\t\\t\\t<a:tailEnd/>\\n\\t\\t\\t\\t\\t\\t\\t</a:ln>\\n\\t\\t\\t\\t\\t\\t\\t</pic:spPr>\\n\\t\\t\\t\\t\\t\\t</pic:pic>\\n\\t\\t\\t\\t\\t\\t</a:graphicData>\\n\\t\\t\\t\\t\\t</a:graphic>\\n\\t\\t\\t\\t\\t</wp:inline>\\n\\t\\t\\t\\t</w:drawing>\\n\\t\\t\\t</w:r>\\n\\t\\t</w:p>\\n\\t\\t').replace(/\\t|\\n/g,\"\")},getPptxImageXml:function getPptxImageXml(rId,size,offset){return('<p:pic>\\n\\t\\t\\t<p:nvPicPr>\\n\\t\\t\\t\\t<p:cNvPr id=\"6\" name=\"Picture 2\"/>\\n\\t\\t\\t\\t<p:cNvPicPr>\\n\\t\\t\\t\\t\\t<a:picLocks noChangeAspect=\"1\" noChangeArrowheads=\"1\"/>\\n\\t\\t\\t\\t</p:cNvPicPr>\\n\\t\\t\\t\\t<p:nvPr/>\\n\\t\\t\\t</p:nvPicPr>\\n\\t\\t\\t<p:blipFill>\\n\\t\\t\\t\\t<a:blip r:embed=\"rId'+rId+'\" cstate=\"print\">\\n\\t\\t\\t\\t\\t<a:extLst>\\n\\t\\t\\t\\t\\t\\t<a:ext uri=\"{28A0092B-C50C-407E-A947-70E740481C1C}\">\\n\\t\\t\\t\\t\\t\\t\\t<a14:useLocalDpi xmlns:a14=\"http://schemas.microsoft.com/office/drawing/2010/main\" val=\"0\"/>\\n\\t\\t\\t\\t\\t\\t</a:ext>\\n\\t\\t\\t\\t\\t</a:extLst>\\n\\t\\t\\t\\t</a:blip>\\n\\t\\t\\t\\t<a:srcRect/>\\n\\t\\t\\t\\t<a:stretch>\\n\\t\\t\\t\\t\\t<a:fillRect/>\\n\\t\\t\\t\\t</a:stretch>\\n\\t\\t\\t</p:blipFill>\\n\\t\\t\\t<p:spPr bwMode=\"auto\">\\n\\t\\t\\t\\t<a:xfrm>\\n\\t\\t\\t\\t\\t<a:off x=\"'+offset.x+'\" y=\"'+offset.y+'\"/>\\n\\t\\t\\t\\t\\t<a:ext cx=\"'+size[0]+'\" cy=\"'+size[1]+'\"/>\\n\\t\\t\\t\\t</a:xfrm>\\n\\t\\t\\t\\t<a:prstGeom prst=\"rect\">\\n\\t\\t\\t\\t\\t<a:avLst/>\\n\\t\\t\\t\\t</a:prstGeom>\\n\\t\\t\\t\\t<a:noFill/>\\n\\t\\t\\t\\t<a:ln>\\n\\t\\t\\t\\t\\t<a:noFill/>\\n\\t\\t\\t\\t</a:ln>\\n\\t\\t\\t\\t<a:effectLst/>\\n\\t\\t\\t\\t<a:extLst>\\n\\t\\t\\t\\t\\t<a:ext uri=\"{909E8E84-426E-40DD-AFC4-6F175D3DCCD1}\">\\n\\t\\t\\t\\t\\t\\t<a14:hiddenFill xmlns:a14=\"http://schemas.microsoft.com/office/drawing/2010/main\">\\n\\t\\t\\t\\t\\t\\t\\t<a:solidFill>\\n\\t\\t\\t\\t\\t\\t\\t\\t<a:schemeClr val=\"accent1\"/>\\n\\t\\t\\t\\t\\t\\t\\t</a:solidFill>\\n\\t\\t\\t\\t\\t\\t</a14:hiddenFill>\\n\\t\\t\\t\\t\\t</a:ext>\\n\\t\\t\\t\\t\\t<a:ext uri=\"{91240B29-F687-4F45-9708-019B960494DF}\">\\n\\t\\t\\t\\t\\t\\t<a14:hiddenLine xmlns:a14=\"http://schemas.microsoft.com/office/drawing/2010/main\" w=\"9525\">\\n\\t\\t\\t\\t\\t\\t\\t<a:solidFill>\\n\\t\\t\\t\\t\\t\\t\\t\\t<a:schemeClr val=\"tx1\"/>\\n\\t\\t\\t\\t\\t\\t\\t</a:solidFill>\\n\\t\\t\\t\\t\\t\\t\\t<a:miter lim=\"800000\"/>\\n\\t\\t\\t\\t\\t\\t\\t<a:headEnd/>\\n\\t\\t\\t\\t\\t\\t\\t<a:tailEnd/>\\n\\t\\t\\t\\t\\t\\t</a14:hiddenLine>\\n\\t\\t\\t\\t\\t</a:ext>\\n\\t\\t\\t\\t\\t<a:ext uri=\"{AF507438-7753-43E0-B8FC-AC1667EBCBE1}\">\\n\\t\\t\\t\\t\\t\\t<a14:hiddenEffects xmlns:a14=\"http://schemas.microsoft.com/office/drawing/2010/main\">\\n\\t\\t\\t\\t\\t\\t\\t<a:effectLst>\\n\\t\\t\\t\\t\\t\\t\\t\\t<a:outerShdw dist=\"35921\" dir=\"2700000\" algn=\"ctr\" rotWithShape=\"0\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<a:schemeClr val=\"bg2\"/>\\n\\t\\t\\t\\t\\t\\t\\t\\t</a:outerShdw>\\n\\t\\t\\t\\t\\t\\t\\t</a:effectLst>\\n\\t\\t\\t\\t\\t\\t</a14:hiddenEffects>\\n\\t\\t\\t\\t\\t</a:ext>\\n\\t\\t\\t\\t</a:extLst>\\n\\t\\t\\t</p:spPr>\\n\\t\\t</p:pic>\\n\\t\\t').replace(/\\t|\\n/g,\"\")}}},{}],4:[function(require,module,exports){\"use strict\";function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true})}else{obj[key]=value}return obj}var memoize=require(\"./memoize\");var DOMParser=require(\"xmldom\").DOMParser;var XMLSerializer=require(\"xmldom\").XMLSerializer;var Errors=require(\"./errors\");var DocUtils={};function parser(tag){return _defineProperty({},\"get\",function get(scope){if(tag===\".\"){return scope}return scope[tag]})}DocUtils.defaults={nullGetter:function nullGetter(part){if(!part.module){return\"undefined\"}if(part.module===\"rawxml\"){return\"\"}return\"\"},parser:memoize(parser),fileType:\"docx\",delimiters:{start:\"{\",end:\"}\"}};DocUtils.mergeObjects=function(){var resObj={};var obj=void 0,keys=void 0;for(var i=0;i<arguments.length;i+=1){obj=arguments[i];keys=Object.keys(obj);for(var j=0;j<keys.length;j+=1){resObj[keys[j]]=obj[keys[j]]}}return resObj};DocUtils.xml2str=function(xmlNode){var a=new XMLSerializer;return a.serializeToString(xmlNode)};DocUtils.decodeUtf8=function(s){try{if(s===undefined){return undefined}return decodeURIComponent(escape(DocUtils.convertSpaces(s)))}catch(e){var err=new Error(\"End\");err.properties.data=s;err.properties.explanation=\"Could not decode string to UTF8\";throw err}};DocUtils.encodeUtf8=function(s){return unescape(encodeURIComponent(s))};DocUtils.str2xml=function(str,errorHandler){var parser=new DOMParser({errorHandler:errorHandler});return parser.parseFromString(str,\"text/xml\")};DocUtils.charMap={\"&\":\"&amp;\",\"'\":\"&apos;\",\"<\":\"&lt;\",\">\":\"&gt;\"};var regexStripRegexp=/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g;DocUtils.escapeRegExp=function(str){return str.replace(regexStripRegexp,\"\\\\$&\")};DocUtils.charMapRegexes=Object.keys(DocUtils.charMap).map(function(endChar){var startChar=DocUtils.charMap[endChar];return{rstart:new RegExp(DocUtils.escapeRegExp(startChar),\"g\"),rend:new RegExp(DocUtils.escapeRegExp(endChar),\"g\"),start:startChar,end:endChar}});DocUtils.wordToUtf8=function(string){var r=void 0;for(var i=0,l=DocUtils.charMapRegexes.length;i<l;i++){r=DocUtils.charMapRegexes[i];string=string.replace(r.rstart,r.end)}return string};DocUtils.utf8ToWord=function(string){if(typeof string!==\"string\"){string=string.toString()}var r=void 0;for(var i=0,l=DocUtils.charMapRegexes.length;i<l;i++){r=DocUtils.charMapRegexes[i];string=string.replace(r.rend,r.start)}return string};DocUtils.cloneDeep=function(obj){return JSON.parse(JSON.stringify(obj))};DocUtils.concatArrays=function(arrays){return arrays.reduce(function(result,array){Array.prototype.push.apply(result,array);return result},[])};var spaceRegexp=new RegExp(String.fromCharCode(160),\"g\");DocUtils.convertSpaces=function(s){return s.replace(spaceRegexp,\" \")};DocUtils.pregMatchAll=function(regex,content){var matchArray=[];var match=void 0;while((match=regex.exec(content))!=null){matchArray.push({array:match,offset:match.index})}return matchArray};DocUtils.sizeOfObject=function(obj){return Object.keys(obj).length};function throwXmlTagNotFound(options){var err=new Errors.XTTemplateError(\"No tag '\"+options.element+\"' was found at the \"+options.position);err.properties={id:\"no_xml_tag_found_at_\"+options.position,explanation:\"No tag '\"+options.element+\"' was found at the \"+options.position,parsed:options.parsed,index:options.index,element:options.element};throw err}DocUtils.getRight=function(parsed,element,index){for(var i=index,l=parsed.length;i<l;i++){var part=parsed[i];if(part.value===\"</\"+element+\">\"){return i}}throwXmlTagNotFound({position:\"right\",element:element,parsed:parsed,index:index})};DocUtils.getLeft=function(parsed,element,index){var parts=parsed.slice(0,index);for(var i=parts.length-1;i>=0;i--){var part=parts[i];if(part.value.indexOf(\"<\"+element)===0&&[\">\",\" \"].indexOf(part.value[element.length+1])!==-1){return i}}throwXmlTagNotFound({position:\"left\",element:element,parsed:parsed,index:index})};module.exports=DocUtils;DocUtils.traits=require(\"./traits\");DocUtils.moduleWrapper=require(\"./module-wrapper\")},{\"./errors\":6,\"./memoize\":9,\"./module-wrapper\":11,\"./traits\":20,xmldom:23}],5:[function(require,module,exports){\"use strict\";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\")}}var DocUtils=require(\"./doc-utils\");var wrapper=DocUtils.moduleWrapper;var Docxtemplater=function(){function Docxtemplater(){_classCallCheck(this,Docxtemplater);if(arguments.length>0){throw new Error(\"The constructor with parameters have been removed in docxtemplater 3.0, please check the upgrade guide.\")}this.compiled={};this.modules=[];this.setOptions({})}_createClass(Docxtemplater,[{key:\"attachModule\",value:function attachModule(module){this.modules.push(wrapper(module));return this}},{key:\"setOptions\",value:function setOptions(options){var _this=this;this.options=options;Object.keys(DocUtils.defaults).forEach(function(key){var defaultValue=DocUtils.defaults[key];_this[key]=_this.options[key]!=null?_this.options[key]:defaultValue});if(this.fileType===\"docx\"||this.fileType===\"pptx\"){this.fileTypeConfig=Docxtemplater.FileTypeConfig[this.fileType]}this.fileTypeConfig=this.options.fileTypeConfig||this.fileTypeConfig;this.options.xmlFileNames=[];return this}},{key:\"loadZip\",value:function loadZip(zip){if(zip.loadAsync){throw new Error(\"Docxtemplater doesn't handle JSZip version >=3, see changelog\")}this.zip=zip;return this}},{key:\"compileFile\",value:function compileFile(fileName){var currentFile=this.createTemplateClass(fileName);currentFile.parse();this.compiled[fileName]=currentFile}},{key:\"compile\",value:function compile(){this.templatedFiles=this.fileTypeConfig.getTemplatedFiles(this.zip)}},{key:\"render\",value:function render(){var _this2=this;this.modules=this.fileTypeConfig.baseModules.map(function(moduleFunction){return moduleFunction()}).concat(this.modules);this.options=this.modules.reduce(function(options,module){return module.optionsTransformer(options,_this2)},this.options);this.xmlDocuments=this.options.xmlFileNames.reduce(function(xmlDocuments,fileName){var content=_this2.zip.files[fileName].asText();xmlDocuments[fileName]=DocUtils.str2xml(content);return xmlDocuments},{});this.modules.forEach(function(module){module.set({zip:_this2.zip,xmlDocuments:_this2.xmlDocuments,data:_this2.data})});this.compile();this.modules.forEach(function(module){module.set({compiled:_this2.compiled})});this.templatedFiles.forEach(function(fileName){if(_this2.zip.files[fileName]!=null){_this2.compileFile(fileName)}});this.mapper=this.modules.reduce(function(value,module){return module.getRenderedMap(value)},{});Object.keys(this.mapper).forEach(function(to){var mapped=_this2.mapper[to];var from=mapped.from;var currentFile=_this2.compiled[from];currentFile.setTags(mapped.data);currentFile.render();_this2.zip.file(to,currentFile.content)});Object.keys(this.xmlDocuments).forEach(function(fileName){_this2.zip.remove(fileName);var content=DocUtils.encodeUtf8(DocUtils.xml2str(_this2.xmlDocuments[fileName]));return _this2.zip.file(fileName,content,{})});return this}},{key:\"setData\",value:function setData(data){this.data=data;return this}},{key:\"getZip\",value:function getZip(){return this.zip}},{key:\"createTemplateClass\",value:function createTemplateClass(path){var usedData=this.zip.files[path].asText();return this.createTemplateClassFromContent(usedData,path)}},{key:\"createTemplateClassFromContent\",value:function createTemplateClassFromContent(content,filePath){var _this3=this;var xmltOptions={filePath:filePath};Object.keys(DocUtils.defaults).forEach(function(key){xmltOptions[key]=_this3[key]});xmltOptions.fileTypeConfig=this.fileTypeConfig;xmltOptions.modules=this.modules;return new Docxtemplater.XmlTemplater(content,xmltOptions)}},{key:\"getFullText\",value:function getFullText(path){return this.createTemplateClass(path||this.fileTypeConfig.textPath).getFullText()}},{key:\"getTemplatedFiles\",value:function getTemplatedFiles(){this.compile();return this.templatedFiles}}]);return Docxtemplater}();Docxtemplater.DocUtils=require(\"./doc-utils\");Docxtemplater.Errors=require(\"./errors\");Docxtemplater.XmlTemplater=require(\"./xml-templater\");Docxtemplater.FileTypeConfig=require(\"./file-type-config\");Docxtemplater.XmlMatcher=require(\"./xml-matcher\");module.exports=Docxtemplater},{\"./doc-utils\":4,\"./errors\":6,\"./file-type-config\":7,\"./xml-matcher\":21,\"./xml-templater\":22}],6:[function(require,module,exports){\"use strict\";function XTError(message){this.name=\"GenericError\";this.message=message;this.stack=new Error(message).stack}XTError.prototype=Error.prototype;function XTTemplateError(message){this.name=\"TemplateError\";this.message=message;this.stack=new Error(message).stack}XTTemplateError.prototype=new XTError;function XTScopeParserError(message){this.name=\"ScopeParserError\";this.message=message;this.stack=new Error(message).stack}XTScopeParserError.prototype=new XTError;function XTInternalError(message){this.name=\"InternalError\";this.properties={explanation:\"InternalError\"};this.message=message;this.stack=new Error(message).stack}XTInternalError.prototype=new XTError;module.exports={XTError:XTError,XTTemplateError:XTTemplateError,XTInternalError:XTInternalError,XTScopeParserError:XTScopeParserError}},{}],7:[function(require,module,exports){\"use strict\";var loopModule=require(\"./modules/loop\");var spacePreserveModule=require(\"./modules/space-preserve\");var rawXmlModule=require(\"./modules/rawxml\");var expandPairTrait=require(\"./modules/expand-pair-trait\");var render=require(\"./modules/render\");var PptXFileTypeConfig={getTemplatedFiles:function getTemplatedFiles(zip){var slideTemplates=zip.file(/ppt\\/(slides|slideMasters)\\/(slide|slideMaster)\\d+\\.xml/).map(function(file){return file.name});return slideTemplates.concat([\"ppt/presentation.xml\"])},textPath:\"ppt/slides/slide1.xml\",tagsXmlTextArray:[\"a:t\",\"m:t\"],tagsXmlLexedArray:[\"p:sp\",\"a:tc\",\"a:tr\",\"a:table\",\"a:p\",\"a:r\"],tagRawXml:\"p:sp\",tagTextXml:\"a:t\",baseModules:[render,expandPairTrait,rawXmlModule,loopModule]};var DocXFileTypeConfig={getTemplatedFiles:function getTemplatedFiles(zip){var slideTemplates=zip.file(/word\\/(header|footer)\\d+\\.xml/).map(function(file){return file.name});return slideTemplates.concat([\"word/document.xml\"])},textPath:\"word/document.xml\",tagsXmlTextArray:[\"w:t\",\"m:t\"],tagsXmlLexedArray:[\"w:tc\",\"w:tr\",\"w:table\",\"w:p\",\"w:r\"],tagRawXml:\"w:p\",tagTextXml:\"w:t\",baseModules:[render,spacePreserveModule,expandPairTrait,rawXmlModule,loopModule]};module.exports={docx:DocXFileTypeConfig,pptx:PptXFileTypeConfig}},{\"./modules/expand-pair-trait\":12,\"./modules/loop\":13,\"./modules/rawxml\":14,\"./modules/render\":15,\"./modules/space-preserve\":16}],8:[function(require,module,exports){\"use strict\";var Errors=require(\"./errors\");var DocUtils=require(\"./doc-utils\");function inRange(range,match){return range[0]<=match.offset&&match.offset<range[1]}function updateInTextTag(part,inTextTag){if(part.type===\"tag\"&&part.position===\"start\"&&part.text){if(inTextTag){throw new Error(\"Malformed xml : Already in text tag\")}return true}if(part.type===\"tag\"&&part.position===\"end\"&&part.text){if(!inTextTag){throw new Error(\"Malformed xml : Already not in text tag\")}return false}return inTextTag}function offsetSort(a,b){return a.offset-b.offset}function getTag(tag){var start=1;if(tag[1]===\"/\"){start=2}var index=tag.indexOf(\" \");var end=index===-1?tag.length-1:index;return{tag:tag.slice(start,end),position:start===1?\"start\":\"end\"}}function tagMatcher(content,textMatchArray,othersMatchArray){var cursor=0;var contentLength=content.length;var allMatches=DocUtils.concatArrays([textMatchArray.map(function(tag){return{tag:tag,text:true}}),othersMatchArray.map(function(tag){return{tag:tag,text:false}})]).reduce(function(allMatches,t){allMatches[t.tag]=t.text;return allMatches},{});var totalMatches=[];while(cursor<contentLength){cursor=content.indexOf(\"<\",cursor);if(cursor===-1){break}var offset=cursor;cursor=content.indexOf(\">\",cursor);var tagText=content.slice(offset,cursor+1);var _getTag=getTag(tagText),tag=_getTag.tag,position=_getTag.position;var text=allMatches[tag];if(text==null){continue}totalMatches.push({type:\"tag\",position:position,text:text,offset:offset,value:tagText})}return totalMatches}function throwUnopenedTagException(options){var err=new Errors.XTTemplateError(\"Unopened tag\");err.properties={xtag:options.xtag.split(\" \")[0],id:\"unopened_tag\",context:options.xtag,explanation:\"The tag beginning with '\"+options.xtag.substr(0,10)+\"' is unclosed\"};throw err}function throwUnclosedTagException(options){var err=new Errors.XTTemplateError(\"Unclosed tag\");err.properties={xtag:options.xtag.split(\" \")[0].substr(1),id:\"unclosed_tag\",context:options.xtag,explanation:\"The tag beginning with '\"+options.xtag.substr(0,10)+\"' is unclosed\"};throw err}function assertDelimiterOrdered(delimiterMatches,fullText){var inDelimiter=false;var lastDelimiterMatch={offset:0};var xtag=void 0;delimiterMatches.forEach(function(delimiterMatch){xtag=fullText.substr(lastDelimiterMatch.offset,delimiterMatch.offset-lastDelimiterMatch.offset);if(delimiterMatch.position===\"start\"&&inDelimiter||delimiterMatch.position===\"end\"&&!inDelimiter){if(delimiterMatch.position===\"start\"){throwUnclosedTagException({xtag:xtag})}else{throwUnopenedTagException({xtag:xtag})}}inDelimiter=!inDelimiter;lastDelimiterMatch=delimiterMatch});var delimiterMatch={offset:fullText.length};xtag=fullText.substr(lastDelimiterMatch.offset,delimiterMatch.offset-lastDelimiterMatch.offset);if(inDelimiter){throwUnclosedTagException({xtag:xtag})}}function getAllIndexes(arr,val,position){var indexes=[];var offset=-1;do{offset=arr.indexOf(val,offset+1);if(offset!==-1){indexes.push({offset:offset,position:position})}}while(offset!==-1);return indexes}function Reader(innerContentParts){var _this=this;this.innerContentParts=innerContentParts;this.full=\"\";this.parseDelimiters=function(delimiters){_this.full=_this.innerContentParts.join(\"\");var offset=0;_this.ranges=_this.innerContentParts.map(function(part){offset+=part.length;return offset-part.length});var delimiterMatches=DocUtils.concatArrays([getAllIndexes(_this.full,delimiters.start,\"start\"),getAllIndexes(_this.full,delimiters.end,\"end\")]).sort(offsetSort);assertDelimiterOrdered(delimiterMatches,_this.full);var delimiterLength={start:delimiters.start.length,end:delimiters.end.length};var cutNext=0;var delimiterIndex=0;_this.parsed=_this.ranges.map(function(offset,i){var range=[offset,offset+this.innerContentParts[i].length];var partContent=this.innerContentParts[i];var delimitersInOffset=[];while(delimiterIndex<delimiterMatches.length&&inRange(range,delimiterMatches[delimiterIndex])){delimitersInOffset.push(delimiterMatches[delimiterIndex]);delimiterIndex++}var parts=[];var cursor=0;if(cutNext>0){cursor=cutNext;cutNext=0}delimitersInOffset.forEach(function(delimiterInOffset){var value=partContent.substr(cursor,delimiterInOffset.offset-offset-cursor);if(value.length>0){parts.push({type:\"content\",value:value})}parts.push({type:\"delimiter\",position:delimiterInOffset.position});cursor=delimiterInOffset.offset-offset+delimiterLength[delimiterInOffset.position]});cutNext=cursor-partContent.length;var value=partContent.substr(cursor);if(value.length>0){parts.push({type:\"content\",value:value})}return parts},_this)}}module.exports={parse:function parse(xmlparsed,delimiters){var inTextTag=false;var innerContentParts=[];xmlparsed.forEach(function(part){inTextTag=updateInTextTag(part,inTextTag);if(inTextTag&&part.type===\"content\"){innerContentParts.push(part.value)}});var reader=new Reader(innerContentParts);reader.parseDelimiters(delimiters);var newArray=[];var index=0;xmlparsed.forEach(function(part){inTextTag=updateInTextTag(part,inTextTag);if(part.type===\"content\"){part.position=inTextTag?\"insidetag\":\"outsidetag\"}if(inTextTag&&part.type===\"content\"){Array.prototype.push.apply(newArray,reader.parsed[index].map(function(p){if(p.type===\"content\"){p.position=\"insidetag\"}return p}));index++}else{newArray.push(part)}});return newArray},xmlparse:function xmlparse(content,xmltags){var matches=tagMatcher(content,xmltags.text,xmltags.other);var cursor=0;var parsed=matches.reduce(function(parsed,match){var value=content.substr(cursor,match.offset-cursor);if(value.length>0){parsed.push({type:\"content\",value:value})}cursor=match.offset+match.value.length;delete match.offset;if(match.value.length>0){parsed.push(match)}return parsed},[]);var value=content.substr(cursor);if(value.length>0){parsed.push({type:\"content\",value:value})}return parsed}}},{\"./doc-utils\":4,\"./errors\":6}],9:[function(require,module,exports){\"use strict\";function memoize(func){var stringifyJson=JSON.stringify,cache={};function cachedfun(){var hash=stringifyJson(arguments);return hash in cache?cache[hash]:cache[hash]=func.apply(this,arguments)}return cachedfun}module.exports=memoize},{}],10:[function(require,module,exports){\"use strict\";function getMinFromArrays(arrays,state){var minIndex=-1;for(var i=0,l=arrays.length;i<l;i++){if(state[i]>=arrays[i].length){continue}if(minIndex===-1||arrays[i][state[i]].offset<arrays[minIndex][state[minIndex]].offset){minIndex=i}}if(minIndex===-1){throw new Error(\"minIndex negative\")}return minIndex}module.exports=function(arrays){var totalLength=arrays.reduce(function(sum,array){return sum+array.length},0);arrays=arrays.filter(function(array){return array.length>0});var resultArray=new Array(totalLength);var state=arrays.map(function(){return 0});var i=0;while(i<=totalLength-1){var arrayIndex=getMinFromArrays(arrays,state);resultArray[i]=arrays[arrayIndex][state[arrayIndex]];state[arrayIndex]++;i++}return resultArray}},{}],11:[function(require,module,exports){\"use strict\";function emptyFun(){}function identity(i){return i}module.exports=function(module){var defaults={set:emptyFun,parse:emptyFun,render:emptyFun,getTraits:emptyFun,optionsTransformer:identity,getRenderedMap:identity,postparse:identity};if(Object.keys(defaults).every(function(key){return!module[key]})){throw new Error(\"This module cannot be wrapped, because it doesn't define any of the necessary functions\")}Object.keys(defaults).forEach(function(key){module[key]=module[key]||defaults[key]});return module}},{}],12:[function(require,module,exports){\"use strict\";var traitName=\"expandPair\";var mergeSort=require(\"../mergesort\");var DocUtils=require(\"../doc-utils\");var wrapper=require(\"../module-wrapper\");var _require=require(\"../traits\"),getExpandToDefault=_require.getExpandToDefault;var Errors=require(\"../errors\");function throwUnmatchedLoopException(options){var location=options.location;var t=location===\"start\"?\"unclosed\":\"unopened\";var T=location===\"start\"?\"Unclosed\":\"Unopened\";var err=new Errors.XTTemplateError(T+\" loop\");var tag=options.part.value;err.properties={id:t+\"_loop\",explanation:\"The loop with tag \"+tag+\" is \"+t,xtag:tag};throw err}function throwClosingTagNotMatchOpeningTag(options){var tags=options.tags;var err=new Errors.XTTemplateError(\"Closing tag does not match opening tag\");err.properties={id:\"closing_tag_does_not_match_opening_tag\",explanation:'The tag \"'+tags[0].value+'\" is closed by the tag \"'+tags[1].value+'\"',openingtag:tags[0].value,closingtag:tags[1].value};throw err}function getOpenCountChange(part){switch(part.location){case\"start\":return 1;case\"end\":return-1;default:throw new Error(\"Location should be one of 'start' or 'end' (given : \"+part.location+\")\")}}function getPairs(traits){if(traits.length===0){return[]}var countOpen=1;var firstTrait=traits[0];for(var i=1;i<traits.length;i++){var currentTrait=traits[i];countOpen+=getOpenCountChange(currentTrait.part);if(countOpen===0){if(currentTrait.part.value!==firstTrait.part.value&&currentTrait.part.value!==\"\"){throwClosingTagNotMatchOpeningTag({tags:[firstTrait.part,currentTrait.part]})}var outer=getPairs(traits.slice(i+1));\nreturn[[firstTrait,currentTrait]].concat(outer)}}var part=firstTrait.part;throwUnmatchedLoopException({part:part,location:part.location})}var expandPairTrait={name:\"ExpandPairTrait\",postparse:function postparse(parsed,_ref){var getTraits=_ref.getTraits,_postparse=_ref.postparse;var traits=getTraits(traitName,parsed);traits=traits.map(function(trait){return trait||[]});traits=mergeSort(traits);var pairs=getPairs(traits);var expandedPairs=pairs.map(function(pair){var expandTo=pair[0].part.expandTo;if(expandTo===\"auto\"){expandTo=getExpandToDefault(parsed.slice(pair[0].offset,pair[1].offset))}if(!expandTo){return[pair[0].offset,pair[1].offset]}var left=DocUtils.getLeft(parsed,expandTo,pair[0].offset);var right=DocUtils.getRight(parsed,expandTo,pair[1].offset);return[left,right]});var currentPairIndex=0;var innerParts=void 0;return parsed.reduce(function(newParsed,part,i){var inPair=currentPairIndex<pairs.length&&expandedPairs[currentPairIndex][0]<=i;var pair=pairs[currentPairIndex];var expandedPair=expandedPairs[currentPairIndex];if(!inPair){newParsed.push(part);return newParsed}if(expandedPair[0]===i){innerParts=[]}if(pair[0].offset!==i&&pair[1].offset!==i){innerParts.push(part)}if(expandedPair[1]===i){var basePart=parsed[pair[0].offset];delete basePart.location;delete basePart.expandTo;basePart.subparsed=_postparse(innerParts);newParsed.push(basePart);currentPairIndex++}return newParsed},[])}};module.exports=function(){return wrapper(expandPairTrait)}},{\"../doc-utils\":4,\"../errors\":6,\"../mergesort\":10,\"../module-wrapper\":11,\"../traits\":20}],13:[function(require,module,exports){\"use strict\";var DocUtils=require(\"../doc-utils\");var dashInnerRegex=/^-([^\\s]+)\\s(.+)$/;var wrapper=require(\"../module-wrapper\");var moduleName=\"loop\";var loopModule={name:\"LoopModule\",parse:function parse(placeHolderContent){var module=moduleName;var type=\"placeholder\";if(placeHolderContent[0]===\"#\"){return{type:type,value:placeHolderContent.substr(1),expandTo:\"auto\",module:module,location:\"start\",inverted:false}}if(placeHolderContent[0]===\"^\"){return{type:type,value:placeHolderContent.substr(1),expandTo:\"auto\",module:module,location:\"start\",inverted:true}}if(placeHolderContent[0]===\"/\"){return{type:type,value:placeHolderContent.substr(1),module:module,location:\"end\"}}if(placeHolderContent[0]===\"-\"){var value=placeHolderContent.replace(dashInnerRegex,\"$2\");var expandTo=placeHolderContent.replace(dashInnerRegex,\"$1\");return{type:type,value:value,expandTo:expandTo,module:module,location:\"start\",inverted:false}}return null},getTraits:function getTraits(traitName,parsed){if(traitName!==\"expandPair\"){return}return parsed.reduce(function(tags,part,offset){if(part.type===\"placeholder\"&&part.module===moduleName){tags.push({part:part,offset:offset})}return tags},[])},render:function render(part,options){if(!part.type===\"placeholder\"||part.module!==moduleName){return null}var totalValue=[];function loopOver(scope){var scopeManager=options.scopeManager.createSubScopeManager(scope,part.value);totalValue.push(options.render(DocUtils.mergeObjects({},options,{compiled:part.subparsed,tags:{},scopeManager:scopeManager})))}options.scopeManager.loopOver(part.value,loopOver,part.inverted);return{value:totalValue.join(\"\")}}};module.exports=function(){return wrapper(loopModule)}},{\"../doc-utils\":4,\"../module-wrapper\":11}],14:[function(require,module,exports){\"use strict\";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\")}}var DocUtils=require(\"../doc-utils\");var Errors=require(\"../errors\");var moduleName=\"rawxml\";var wrapper=require(\"../module-wrapper\");function throwRawTagShouldBeOnlyTextInParagraph(options){var err=new Errors.XTTemplateError(\"Raw tag should be the only text in paragraph\");var tag=options.part.value;err.properties={id:\"raw_xml_tag_should_be_only_text_in_paragraph\",explanation:\"The tag \"+tag,xtag:options.part.value,paragraphParts:options.paragraphParts};throw err}function getInner(_ref){var part=_ref.part,left=_ref.left,right=_ref.right,postparsed=_ref.postparsed,index=_ref.index;var paragraphParts=postparsed.slice(left+1,right);paragraphParts.forEach(function(p,i){if(i===index-left-1){return}if(p.type===\"placeholder\"||p.type===\"content\"&&p.position===\"insidetag\"){throwRawTagShouldBeOnlyTextInParagraph({paragraphParts:paragraphParts,part:part})}});return part}var RawXmlModule=function(){function RawXmlModule(){_classCallCheck(this,RawXmlModule);this.name=\"RawXmlModule\"}_createClass(RawXmlModule,[{key:\"optionsTransformer\",value:function optionsTransformer(options,docxtemplater){this.fileTypeConfig=docxtemplater.fileTypeConfig;return options}},{key:\"parse\",value:function parse(placeHolderContent){var type=\"placeholder\";if(placeHolderContent[0]!==\"@\"){return null}return{type:type,value:placeHolderContent.substr(1),module:moduleName}}},{key:\"postparse\",value:function postparse(parsed){return DocUtils.traits.expandToOne(parsed,{moduleName:moduleName,getInner:getInner,expandTo:this.fileTypeConfig.tagRawXml})}},{key:\"render\",value:function render(part,options){if(part.module!==moduleName){return null}var value=options.scopeManager.getValue(part.value);if(value==null){value=options.nullGetter(part)}return{value:value}}}]);return RawXmlModule}();module.exports=function(){return wrapper(new RawXmlModule)}},{\"../doc-utils\":4,\"../errors\":6,\"../module-wrapper\":11}],15:[function(require,module,exports){\"use strict\";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\")}}var wrapper=require(\"../module-wrapper\");var Render=function(){function Render(){_classCallCheck(this,Render);this.name=\"Render\"}_createClass(Render,[{key:\"set\",value:function set(obj){if(obj.compiled){this.compiled=obj.compiled}if(obj.data!=null){this.data=obj.data}}},{key:\"getRenderedMap\",value:function getRenderedMap(mapper){var _this=this;return Object.keys(this.compiled).reduce(function(mapper,from){mapper[from]={from:from,data:_this.data};return mapper},mapper)}}]);return Render}();module.exports=function(){return wrapper(new Render)}},{\"../module-wrapper\":11}],16:[function(require,module,exports){\"use strict\";var wrapper=require(\"../module-wrapper\");var spacePreserve={name:\"SpacePreserveModule\",postparse:function postparse(parsed){var chunk=[];var inChunk=false;var result=parsed.reduce(function(parsed,part){if(part.type===\"tag\"&&part.position===\"start\"&&part.text&&part.value===\"<w:t>\"){inChunk=true}if(inChunk){if(part.type===\"placeholder\"&&!part.module){chunk[0].value='<w:t xml:space=\"preserve\">'}chunk.push(part)}else{parsed.push(part)}if(part.type===\"tag\"&&part.position===\"end\"&&part.text&&part.value===\"</w:t>\"){Array.prototype.push.apply(parsed,chunk);inChunk=false;chunk=[]}return parsed},[]);Array.prototype.push.apply(result,chunk);return result}};module.exports=function(){return wrapper(spacePreserve)}},{\"../module-wrapper\":11}],17:[function(require,module,exports){\"use strict\";var DocUtils=require(\"./doc-utils\");var parser={postparse:function postparse(parsed,modules){function getTraits(traitName,parsed){return modules.map(function(module){return module.getTraits(traitName,parsed)})}function postparse(parsed){return modules.reduce(function(parsed,module){return module.postparse(parsed,{postparse:postparse,getTraits:getTraits})},parsed)}return postparse(parsed)},parse:function parse(lexed,modules){function moduleParse(placeHolderContent,parsed){var moduleParsed=void 0;for(var i=0,l=modules.length;i<l;i++){var _module=modules[i];moduleParsed=_module.parse(placeHolderContent);if(moduleParsed){parsed.push(moduleParsed);return moduleParsed}}return null}var inPlaceHolder=false;var placeHolderContent=void 0;var tailParts=[];return lexed.reduce(function(parsed,token){if(token.type===\"delimiter\"){inPlaceHolder=token.position===\"start\";if(token.position===\"end\"){placeHolderContent=DocUtils.wordToUtf8(placeHolderContent);if(!moduleParse(placeHolderContent,parsed)){parsed.push({type:\"placeholder\",value:placeHolderContent})}Array.prototype.push.apply(parsed,tailParts);tailParts=[];return parsed}placeHolderContent=\"\";return parsed}if(inPlaceHolder){if(token.type===\"content\"&&token.position===\"insidetag\"){placeHolderContent+=token.value}else{tailParts.push(token)}return parsed}parsed.push(token);return parsed},[])}};module.exports=parser},{\"./doc-utils\":4}],18:[function(require,module,exports){\"use strict\";var ScopeManager=require(\"./scope-manager\");var DocUtils=require(\"./doc-utils\");function moduleRender(part,options){var moduleRendered=void 0;for(var i=0,l=options.modules.length;i<l;i++){var _module=options.modules[i];moduleRendered=_module.render(part,options);if(moduleRendered){return moduleRendered}}return false}function render(options){options.render=render;options.modules=options.modules;if(!options.scopeManager){options.scopeManager=ScopeManager.createBaseScopeManager(options)}return options.compiled.map(function(part){var moduleRendered=moduleRender(part,options);if(moduleRendered){return moduleRendered.value}if(part.type===\"placeholder\"){var value=options.scopeManager.getValue(part.value);if(value==null){value=options.nullGetter(part)}return DocUtils.utf8ToWord(value)}if(part.type===\"content\"||part.type===\"tag\"){return part.value}throw new Error('Unimplemented tag type \"'+part.type+'\"')}).join(\"\")}module.exports=render},{\"./doc-utils\":4,\"./scope-manager\":19}],19:[function(require,module,exports){\"use strict\";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\")}}var Errors=require(\"./errors\");var ScopeManager=function(){function ScopeManager(options){_classCallCheck(this,ScopeManager);this.scopePath=options.scopePath;this.scopeList=options.scopeList;this.parser=options.parser}_createClass(ScopeManager,[{key:\"loopOver\",value:function loopOver(tag,callback,inverted){inverted=inverted||false;return this.loopOverValue(this.getValue(tag),callback,inverted)}},{key:\"functorIfInverted\",value:function functorIfInverted(inverted,functor,value){if(inverted){functor(value)}}},{key:\"isValueFalsy\",value:function isValueFalsy(value,type){return value==null||!value||type===\"[object Array]\"&&value.length===0}},{key:\"loopOverValue\",value:function loopOverValue(value,functor,inverted){var type=Object.prototype.toString.call(value);var currentValue=this.scopeList[this.num];if(this.isValueFalsy(value,type)){return this.functorIfInverted(inverted,functor,currentValue)}if(type===\"[object Array]\"){for(var i=0,scope;i<value.length;i++){scope=value[i];this.functorIfInverted(!inverted,functor,scope)}return}if(type===\"[object Object]\"){return this.functorIfInverted(!inverted,functor,value)}if(value===true){return this.functorIfInverted(!inverted,functor,currentValue)}}},{key:\"getValue\",value:function getValue(tag,num){this.num=num==null?this.scopeList.length-1:num;var err=void 0;var parser=void 0;var result=void 0;var scope=this.scopeList[this.num];try{parser=this.parser(tag)}catch(error){err=new Errors.XTScopeParserError(\"Scope parser compilation failed\");err.properties={id:\"scopeparser_compilation_failed\",tag:tag,explanation:\"The scope parser for the tag \"+tag+\" failed to compile\",rootError:error};throw err}try{result=parser.get(scope,{num:this.num,scopeList:this.scopeList})}catch(error){err=new Errors.XTScopeParserError(\"Scope parser execution failed\");err.properties={id:\"scopeparser_execution_failed\",explanation:\"The scope parser for the tag \"+tag+\" failed to execute\",scope:scope,tag:tag,rootError:error};throw err}if(result==null&&this.num>0){return this.getValue(tag,this.num-1)}return result}},{key:\"createSubScopeManager\",value:function createSubScopeManager(scope,tag){var options={scopePath:this.scopePath.slice(0),scopeList:this.scopeList.slice(0)};options.parser=this.parser;options.scopeList=this.scopeList.concat(scope);options.scopePath=this.scopePath.concat(tag);return new ScopeManager(options)}}]);return ScopeManager}();ScopeManager.createBaseScopeManager=function(_ref){var parser=_ref.parser,tags=_ref.tags;var options={parser:parser,tags:tags};options.scopePath=[];options.scopeList=[tags];return new ScopeManager(options)};module.exports=ScopeManager},{\"./errors\":6}],20:[function(require,module,exports){\"use strict\";var DocUtils=require(\"./doc-utils\");var Errors=require(\"./errors\");function throwRawTagNotInParagraph(options){var err=new Errors.XTTemplateError(\"Raw tag not in paragraph\");var tag=options.part.value;err.properties={id:\"raw_tag_outerxml_invalid\",explanation:'The tag \"'+tag+'\"',rootError:options.rootError,xtag:tag};throw err}function lastTagIsOpenTag(array,tag){if(array.length===0){return false}var lastTag=array[array.length-1];var innerLastTag=lastTag.tag.substr(1);var innerCurrentTag=tag.substr(2,tag.length-3);return innerLastTag.indexOf(innerCurrentTag)===0}function addTag(array,tag){array.push({tag:tag});return array}function getListXmlElements(parts){var tags=parts.filter(function(part){return part.type===\"tag\"}).map(function(part){return part.value});var result=[];for(var i=0,tag;i<tags.length;i++){tag=tags[i];if(tag[1]===\"/\"){if(lastTagIsOpenTag(result,tag)){result.pop()}else{result=addTag(result,tag)}}else if(tag[tag.length-1]!==\"/\"){result=addTag(result,tag)}}return result}function getExpandToDefault(parts){var xmlElements=getListXmlElements(parts);for(var i=0;i<xmlElements.length;i++){var xmlElement=xmlElements[i];if(xmlElement.tag.indexOf(\"<w:tc\")===0){return\"w:tr\"}}return false}function expandOne(part,postparsed,options){var expandTo=part.expandTo||options.expandTo;var index=postparsed.indexOf(part);if(!expandTo){return postparsed}var right=void 0,left=void 0;try{right=DocUtils.getRight(postparsed,expandTo,index);left=DocUtils.getLeft(postparsed,expandTo,index)}catch(rootError){throwRawTagNotInParagraph({part:part,rootError:rootError})}var leftParts=postparsed.slice(left,index);var rightParts=postparsed.slice(index+1,right+1);var inner=options.getInner({index:index,part:part,leftParts:leftParts,rightParts:rightParts,left:left,right:right,postparsed:postparsed});var type=Object.prototype.toString.call(inner);if(type===\"[object Array]\"){inner=DocUtils.concatArrays(inner)}return DocUtils.concatArrays([postparsed.slice(0,left),[inner],postparsed.slice(right+1)])}function expandToOne(postparsed,options){var expandToElements=postparsed.reduce(function(elements,part){if(part.type===\"placeholder\"&&part.module===options.moduleName){elements.push(part)}return elements},[]);expandToElements.forEach(function(part){postparsed=expandOne(part,postparsed,options)});return postparsed}module.exports={expandToOne:expandToOne,getExpandToDefault:getExpandToDefault}},{\"./doc-utils\":4,\"./errors\":6}],21:[function(require,module,exports){\"use strict\";var DocUtils=require(\"./doc-utils\");var memoize=require(\"./memoize\");function handleRecursiveCase(res){function replacerUnshift(){var pn={array:Array.prototype.slice.call(arguments)};pn.array.shift();var match=pn.array[0]+pn.array[1];pn.array.unshift(match);pn.array.pop();var offset=pn.array.pop();pn.offset=offset;pn.first=true;res.matches.unshift(pn);res.charactersAdded.unshift(0);return res.charactersAddedCumulative.unshift(0)}if(res.content.indexOf(\"<\")===-1&&res.content.indexOf(\">\")===-1){res.content.replace(/^()([^<>]*)$/,replacerUnshift)}var r=new RegExp(\"^()([^<]+)</(?:\"+res.tagsXmlArrayJoined+\")>\");res.content.replace(r,replacerUnshift);function replacerPush(){var pn={array:Array.prototype.slice.call(arguments)};pn.array.pop();var offset=pn.array.pop();pn.offset=offset;pn.last=true;res.matches.push(pn);res.charactersAdded.push(0);return res.charactersAddedCumulative.push(0)}r=new RegExp(\"(<(?:\"+res.tagsXmlArrayJoined+\")[^>]*>)([^>]+)$\");res.content.replace(r,replacerPush);return res}function xmlMatcher(content,tagsXmlArray){var res={};res.content=content;res.tagsXmlArray=tagsXmlArray;res.tagsXmlArrayJoined=res.tagsXmlArray.join(\"|\");var regexp=new RegExp(\"(<(?:\"+res.tagsXmlArrayJoined+\")[^>]*>)([^<>]*)</(?:\"+res.tagsXmlArrayJoined+\")>\",\"g\");res.matches=DocUtils.pregMatchAll(regexp,res.content);res.charactersAddedCumulative=res.matches.map(function(){return 0});res.charactersAdded=res.matches.map(function(){return 0});return handleRecursiveCase(res)}var memoized=memoize(xmlMatcher);module.exports=function(content,tagsXmlArray){return DocUtils.cloneDeep(memoized(content,tagsXmlArray))}},{\"./doc-utils\":4,\"./memoize\":9}],22:[function(require,module,exports){\"use strict\";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\")}}var DocUtils=require(\"./doc-utils\");var ScopeManager=require(\"./scope-manager\");var xmlMatcher=require(\"./xml-matcher\");var Errors=require(\"./errors\");var Lexer=require(\"./lexer\");var Parser=require(\"./parser.js\");var _render=require(\"./render.js\");function _getFullText(content,tagsXmlArray){var matcher=xmlMatcher(content,tagsXmlArray);var result=matcher.matches.map(function(match){return match.array[2]});return DocUtils.wordToUtf8(DocUtils.convertSpaces(result.join(\"\")))}module.exports=function(){function XmlTemplater(content,options){_classCallCheck(this,XmlTemplater);this.fromJson(options);this.setModules({inspect:{filePath:this.filePath}});this.load(content)}_createClass(XmlTemplater,[{key:\"load\",value:function load(content){if(typeof content!==\"string\"){var err=new Errors.XTInternalError(\"Content must be a string\");err.properties.id=\"xmltemplater_content_must_be_string\";throw err}this.content=content}},{key:\"setTags\",value:function setTags(tags){this.tags=tags!=null?tags:{};this.scopeManager=ScopeManager.createBaseScopeManager({tags:this.tags,parser:this.parser});return this}},{key:\"fromJson\",value:function fromJson(options){this.filePath=options.filePath;this.modules=options.modules;this.fileTypeConfig=options.fileTypeConfig;Object.keys(DocUtils.defaults).map(function(key){this[key]=options[key]!=null?options[key]:DocUtils.defaults[key]},this)}},{key:\"getFullText\",value:function getFullText(){return _getFullText(this.content,this.fileTypeConfig.tagsXmlTextArray)}},{key:\"setModules\",value:function setModules(obj){this.modules.forEach(function(module){module.set(obj)})}},{key:\"parse\",value:function parse(){this.xmllexed=Lexer.xmlparse(this.content,{text:this.fileTypeConfig.tagsXmlTextArray,other:this.fileTypeConfig.tagsXmlLexedArray});this.setModules({inspect:{xmllexed:this.xmllexed}});this.lexed=Lexer.parse(this.xmllexed,this.delimiters);this.setModules({inspect:{lexed:this.lexed}});this.parsed=Parser.parse(this.lexed,this.modules);this.setModules({inspect:{parsed:this.parsed}});this.postparsed=Parser.postparse(this.parsed,this.modules);return this}},{key:\"render\",value:function render(){this.setModules({inspect:{postparsed:this.postparsed}});this.content=_render({compiled:this.postparsed,tags:this.tags,modules:this.modules,parser:this.parser,nullGetter:this.nullGetter,filePath:this.filePath});this.setModules({inspect:{content:this.content}});return this}}]);return XmlTemplater}()},{\"./doc-utils\":4,\"./errors\":6,\"./lexer\":8,\"./parser.js\":17,\"./render.js\":18,\"./scope-manager\":19,\"./xml-matcher\":21}],23:[function(require,module,exports){function DOMParser(options){this.options=options||{locator:{}}}DOMParser.prototype.parseFromString=function(source,mimeType){var options=this.options;var sax=new XMLReader;var domBuilder=options.domBuilder||new DOMHandler;var errorHandler=options.errorHandler;var locator=options.locator;var defaultNSMap=options.xmlns||{};var entityMap={lt:\"<\",gt:\">\",amp:\"&\",quot:'\"',apos:\"'\"};if(locator){domBuilder.setDocumentLocator(locator)}sax.errorHandler=buildErrorHandler(errorHandler,domBuilder,locator);sax.domBuilder=options.domBuilder||domBuilder;if(/\\/x?html?$/.test(mimeType)){entityMap.nbsp=\" \";entityMap.copy=\"©\";defaultNSMap[\"\"]=\"http://www.w3.org/1999/xhtml\"}defaultNSMap.xml=defaultNSMap.xml||\"http://www.w3.org/XML/1998/namespace\";if(source){sax.parse(source,defaultNSMap,entityMap)}else{sax.errorHandler.error(\"invalid doc source\")}return domBuilder.doc};function buildErrorHandler(errorImpl,domBuilder,locator){if(!errorImpl){if(domBuilder instanceof DOMHandler){return domBuilder}errorImpl=domBuilder}var errorHandler={};var isCallback=errorImpl instanceof Function;locator=locator||{};function build(key){var fn=errorImpl[key];if(!fn&&isCallback){fn=errorImpl.length==2?function(msg){errorImpl(key,msg)}:errorImpl}errorHandler[key]=fn&&function(msg){fn(\"[xmldom \"+key+\"]\\t\"+msg+_locator(locator))}||function(){}}build(\"warning\");build(\"error\");build(\"fatalError\");return errorHandler}function DOMHandler(){this.cdata=false}function position(locator,node){node.lineNumber=locator.lineNumber;node.columnNumber=locator.columnNumber}DOMHandler.prototype={startDocument:function(){this.doc=(new DOMImplementation).createDocument(null,null,null);if(this.locator){this.doc.documentURI=this.locator.systemId}},startElement:function(namespaceURI,localName,qName,attrs){var doc=this.doc;var el=doc.createElementNS(namespaceURI,qName||localName);var len=attrs.length;appendElement(this,el);this.currentElement=el;this.locator&&position(this.locator,el);for(var i=0;i<len;i++){var namespaceURI=attrs.getURI(i);var value=attrs.getValue(i);var qName=attrs.getQName(i);var attr=doc.createAttributeNS(namespaceURI,qName);this.locator&&position(attrs.getLocator(i),attr);attr.value=attr.nodeValue=value;el.setAttributeNode(attr)}},endElement:function(namespaceURI,localName,qName){var current=this.currentElement;var tagName=current.tagName;this.currentElement=current.parentNode},startPrefixMapping:function(prefix,uri){},endPrefixMapping:function(prefix){},processingInstruction:function(target,data){var ins=this.doc.createProcessingInstruction(target,data);this.locator&&position(this.locator,ins);appendElement(this,ins)},ignorableWhitespace:function(ch,start,length){},characters:function(chars,start,length){chars=_toString.apply(this,arguments);if(chars){if(this.cdata){var charNode=this.doc.createCDATASection(chars)}else{var charNode=this.doc.createTextNode(chars)}if(this.currentElement){this.currentElement.appendChild(charNode)}else if(/^\\s*$/.test(chars)){this.doc.appendChild(charNode)}this.locator&&position(this.locator,charNode)}},skippedEntity:function(name){},endDocument:function(){this.doc.normalize()},setDocumentLocator:function(locator){if(this.locator=locator){locator.lineNumber=0}},comment:function(chars,start,length){chars=_toString.apply(this,arguments);var comm=this.doc.createComment(chars);this.locator&&position(this.locator,comm);appendElement(this,comm)},startCDATA:function(){this.cdata=true},endCDATA:function(){this.cdata=false},startDTD:function(name,publicId,systemId){var impl=this.doc.implementation;if(impl&&impl.createDocumentType){var dt=impl.createDocumentType(name,publicId,systemId);this.locator&&position(this.locator,dt);appendElement(this,dt)}},warning:function(error){console.warn(\"[xmldom warning]\\t\"+error,_locator(this.locator))},error:function(error){console.error(\"[xmldom error]\\t\"+error,_locator(this.locator))},fatalError:function(error){console.error(\"[xmldom fatalError]\\t\"+error,_locator(this.locator));throw error}};function _locator(l){if(l){return\"\\n@\"+(l.systemId||\"\")+\"#[line:\"+l.lineNumber+\",col:\"+l.columnNumber+\"]\"}}function _toString(chars,start,length){if(typeof chars==\"string\"){return chars.substr(start,length)}else{if(chars.length>=start+length||start){return new java.lang.String(chars,start,length)+\"\"}return chars}}\"endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl\".replace(/\\w+/g,function(key){DOMHandler.prototype[key]=function(){return null}});function appendElement(hander,node){if(!hander.currentElement){hander.doc.appendChild(node)}else{hander.currentElement.appendChild(node)}}var XMLReader=require(\"./sax\").XMLReader;var DOMImplementation=exports.DOMImplementation=require(\"./dom\").DOMImplementation;exports.XMLSerializer=require(\"./dom\").XMLSerializer;exports.DOMParser=DOMParser},{\"./dom\":24,\"./sax\":25}],24:[function(require,module,exports){function copy(src,dest){for(var p in src){dest[p]=src[p]}}function _extends(Class,Super){var pt=Class.prototype;if(Object.create){var ppt=Object.create(Super.prototype);pt.__proto__=ppt}if(!(pt instanceof Super)){function t(){}t.prototype=Super.prototype;t=new t;copy(pt,t);Class.prototype=pt=t}if(pt.constructor!=Class){if(typeof Class!=\"function\"){console.error(\"unknow Class:\"+Class)}pt.constructor=Class}}var htmlns=\"http://www.w3.org/1999/xhtml\";var NodeType={};var ELEMENT_NODE=NodeType.ELEMENT_NODE=1;var ATTRIBUTE_NODE=NodeType.ATTRIBUTE_NODE=2;var TEXT_NODE=NodeType.TEXT_NODE=3;var CDATA_SECTION_NODE=NodeType.CDATA_SECTION_NODE=4;var ENTITY_REFERENCE_NODE=NodeType.ENTITY_REFERENCE_NODE=5;var ENTITY_NODE=NodeType.ENTITY_NODE=6;var PROCESSING_INSTRUCTION_NODE=NodeType.PROCESSING_INSTRUCTION_NODE=7;var COMMENT_NODE=NodeType.COMMENT_NODE=8;var DOCUMENT_NODE=NodeType.DOCUMENT_NODE=9;var DOCUMENT_TYPE_NODE=NodeType.DOCUMENT_TYPE_NODE=10;var DOCUMENT_FRAGMENT_NODE=NodeType.DOCUMENT_FRAGMENT_NODE=11;var NOTATION_NODE=NodeType.NOTATION_NODE=12;var ExceptionCode={};var ExceptionMessage={};var INDEX_SIZE_ERR=ExceptionCode.INDEX_SIZE_ERR=(ExceptionMessage[1]=\"Index size error\",1);var DOMSTRING_SIZE_ERR=ExceptionCode.DOMSTRING_SIZE_ERR=(ExceptionMessage[2]=\"DOMString size error\",2);var HIERARCHY_REQUEST_ERR=ExceptionCode.HIERARCHY_REQUEST_ERR=(ExceptionMessage[3]=\"Hierarchy request error\",3);var WRONG_DOCUMENT_ERR=ExceptionCode.WRONG_DOCUMENT_ERR=(ExceptionMessage[4]=\"Wrong document\",4);var INVALID_CHARACTER_ERR=ExceptionCode.INVALID_CHARACTER_ERR=(ExceptionMessage[5]=\"Invalid character\",5);var NO_DATA_ALLOWED_ERR=ExceptionCode.NO_DATA_ALLOWED_ERR=(ExceptionMessage[6]=\"No data allowed\",6);var NO_MODIFICATION_ALLOWED_ERR=ExceptionCode.NO_MODIFICATION_ALLOWED_ERR=(ExceptionMessage[7]=\"No modification allowed\",7);var NOT_FOUND_ERR=ExceptionCode.NOT_FOUND_ERR=(ExceptionMessage[8]=\"Not found\",8);var NOT_SUPPORTED_ERR=ExceptionCode.NOT_SUPPORTED_ERR=(ExceptionMessage[9]=\"Not supported\",9);var INUSE_ATTRIBUTE_ERR=ExceptionCode.INUSE_ATTRIBUTE_ERR=(ExceptionMessage[10]=\"Attribute in use\",10);var INVALID_STATE_ERR=ExceptionCode.INVALID_STATE_ERR=(ExceptionMessage[11]=\"Invalid state\",11);var SYNTAX_ERR=ExceptionCode.SYNTAX_ERR=(ExceptionMessage[12]=\"Syntax error\",12);var INVALID_MODIFICATION_ERR=ExceptionCode.INVALID_MODIFICATION_ERR=(ExceptionMessage[13]=\"Invalid modification\",13);var NAMESPACE_ERR=ExceptionCode.NAMESPACE_ERR=(ExceptionMessage[14]=\"Invalid namespace\",14);var INVALID_ACCESS_ERR=ExceptionCode.INVALID_ACCESS_ERR=(ExceptionMessage[15]=\"Invalid access\",15);function DOMException(code,message){if(message instanceof Error){var error=message}else{error=this;Error.call(this,ExceptionMessage[code]);this.message=ExceptionMessage[code];if(Error.captureStackTrace)Error.captureStackTrace(this,DOMException)}error.code=code;if(message)this.message=this.message+\": \"+message;return error}DOMException.prototype=Error.prototype;copy(ExceptionCode,DOMException);function NodeList(){}NodeList.prototype={length:0,item:function(index){return this[index]||null},toString:function(isHTML,nodeFilter){for(var buf=[],i=0;i<this.length;i++){serializeToString(this[i],buf,isHTML,nodeFilter)}return buf.join(\"\")}};function LiveNodeList(node,refresh){this._node=node;this._refresh=refresh;_updateLiveList(this)}function _updateLiveList(list){var inc=list._node._inc||list._node.ownerDocument._inc;if(list._inc!=inc){var ls=list._refresh(list._node);__set__(list,\"length\",ls.length);copy(ls,list);list._inc=inc}}LiveNodeList.prototype.item=function(i){_updateLiveList(this);return this[i]};_extends(LiveNodeList,NodeList);function NamedNodeMap(){}function _findNodeIndex(list,node){var i=list.length;while(i--){if(list[i]===node){return i}}}function _addNamedNode(el,list,newAttr,oldAttr){if(oldAttr){list[_findNodeIndex(list,oldAttr)]=newAttr}else{list[list.length++]=newAttr}if(el){newAttr.ownerElement=el;var doc=el.ownerDocument;if(doc){oldAttr&&_onRemoveAttribute(doc,el,oldAttr);_onAddAttribute(doc,el,newAttr)}}}function _removeNamedNode(el,list,attr){var i=_findNodeIndex(list,attr);if(i>=0){var lastIndex=list.length-1;while(i<lastIndex){list[i]=list[++i]}list.length=lastIndex;if(el){var doc=el.ownerDocument;if(doc){_onRemoveAttribute(doc,el,attr);attr.ownerElement=null}}}else{throw DOMException(NOT_FOUND_ERR,new Error(el.tagName+\"@\"+attr))}}NamedNodeMap.prototype={length:0,item:NodeList.prototype.item,getNamedItem:function(key){var i=this.length;while(i--){var attr=this[i];if(attr.nodeName==key){return attr}}},setNamedItem:function(attr){var el=attr.ownerElement;if(el&&el!=this._ownerElement){throw new DOMException(INUSE_ATTRIBUTE_ERR)}var oldAttr=this.getNamedItem(attr.nodeName);_addNamedNode(this._ownerElement,this,attr,oldAttr);return oldAttr},setNamedItemNS:function(attr){var el=attr.ownerElement,oldAttr;if(el&&el!=this._ownerElement){throw new DOMException(INUSE_ATTRIBUTE_ERR)}oldAttr=this.getNamedItemNS(attr.namespaceURI,attr.localName);_addNamedNode(this._ownerElement,this,attr,oldAttr);return oldAttr},removeNamedItem:function(key){var attr=this.getNamedItem(key);_removeNamedNode(this._ownerElement,this,attr);return attr},removeNamedItemNS:function(namespaceURI,localName){var attr=this.getNamedItemNS(namespaceURI,localName);_removeNamedNode(this._ownerElement,this,attr);return attr},getNamedItemNS:function(namespaceURI,localName){var i=this.length;while(i--){var node=this[i];if(node.localName==localName&&node.namespaceURI==namespaceURI){return node}}return null}};function DOMImplementation(features){this._features={};if(features){for(var feature in features){this._features=features[feature]}}}DOMImplementation.prototype={hasFeature:function(feature,version){var versions=this._features[feature.toLowerCase()];if(versions&&(!version||version in versions)){\nreturn true}else{return false}},createDocument:function(namespaceURI,qualifiedName,doctype){var doc=new Document;doc.implementation=this;doc.childNodes=new NodeList;doc.doctype=doctype;if(doctype){doc.appendChild(doctype)}if(qualifiedName){var root=doc.createElementNS(namespaceURI,qualifiedName);doc.appendChild(root)}return doc},createDocumentType:function(qualifiedName,publicId,systemId){var node=new DocumentType;node.name=qualifiedName;node.nodeName=qualifiedName;node.publicId=publicId;node.systemId=systemId;return node}};function Node(){}Node.prototype={firstChild:null,lastChild:null,previousSibling:null,nextSibling:null,attributes:null,parentNode:null,childNodes:null,ownerDocument:null,nodeValue:null,namespaceURI:null,prefix:null,localName:null,insertBefore:function(newChild,refChild){return _insertBefore(this,newChild,refChild)},replaceChild:function(newChild,oldChild){this.insertBefore(newChild,oldChild);if(oldChild){this.removeChild(oldChild)}},removeChild:function(oldChild){return _removeChild(this,oldChild)},appendChild:function(newChild){return this.insertBefore(newChild,null)},hasChildNodes:function(){return this.firstChild!=null},cloneNode:function(deep){return cloneNode(this.ownerDocument||this,this,deep)},normalize:function(){var child=this.firstChild;while(child){var next=child.nextSibling;if(next&&next.nodeType==TEXT_NODE&&child.nodeType==TEXT_NODE){this.removeChild(next);child.appendData(next.data)}else{child.normalize();child=next}}},isSupported:function(feature,version){return this.ownerDocument.implementation.hasFeature(feature,version)},hasAttributes:function(){return this.attributes.length>0},lookupPrefix:function(namespaceURI){var el=this;while(el){var map=el._nsMap;if(map){for(var n in map){if(map[n]==namespaceURI){return n}}}el=el.nodeType==ATTRIBUTE_NODE?el.ownerDocument:el.parentNode}return null},lookupNamespaceURI:function(prefix){var el=this;while(el){var map=el._nsMap;if(map){if(prefix in map){return map[prefix]}}el=el.nodeType==ATTRIBUTE_NODE?el.ownerDocument:el.parentNode}return null},isDefaultNamespace:function(namespaceURI){var prefix=this.lookupPrefix(namespaceURI);return prefix==null}};function _xmlEncoder(c){return c==\"<\"&&\"&lt;\"||c==\">\"&&\"&gt;\"||c==\"&\"&&\"&amp;\"||c=='\"'&&\"&quot;\"||\"&#\"+c.charCodeAt()+\";\"}copy(NodeType,Node);copy(NodeType,Node.prototype);function _visitNode(node,callback){if(callback(node)){return true}if(node=node.firstChild){do{if(_visitNode(node,callback)){return true}}while(node=node.nextSibling)}}function Document(){}function _onAddAttribute(doc,el,newAttr){doc&&doc._inc++;var ns=newAttr.namespaceURI;if(ns==\"http://www.w3.org/2000/xmlns/\"){el._nsMap[newAttr.prefix?newAttr.localName:\"\"]=newAttr.value}}function _onRemoveAttribute(doc,el,newAttr,remove){doc&&doc._inc++;var ns=newAttr.namespaceURI;if(ns==\"http://www.w3.org/2000/xmlns/\"){delete el._nsMap[newAttr.prefix?newAttr.localName:\"\"]}}function _onUpdateChild(doc,el,newChild){if(doc&&doc._inc){doc._inc++;var cs=el.childNodes;if(newChild){cs[cs.length++]=newChild}else{var child=el.firstChild;var i=0;while(child){cs[i++]=child;child=child.nextSibling}cs.length=i}}}function _removeChild(parentNode,child){var previous=child.previousSibling;var next=child.nextSibling;if(previous){previous.nextSibling=next}else{parentNode.firstChild=next}if(next){next.previousSibling=previous}else{parentNode.lastChild=previous}_onUpdateChild(parentNode.ownerDocument,parentNode);return child}function _insertBefore(parentNode,newChild,nextChild){var cp=newChild.parentNode;if(cp){cp.removeChild(newChild)}if(newChild.nodeType===DOCUMENT_FRAGMENT_NODE){var newFirst=newChild.firstChild;if(newFirst==null){return newChild}var newLast=newChild.lastChild}else{newFirst=newLast=newChild}var pre=nextChild?nextChild.previousSibling:parentNode.lastChild;newFirst.previousSibling=pre;newLast.nextSibling=nextChild;if(pre){pre.nextSibling=newFirst}else{parentNode.firstChild=newFirst}if(nextChild==null){parentNode.lastChild=newLast}else{nextChild.previousSibling=newLast}do{newFirst.parentNode=parentNode}while(newFirst!==newLast&&(newFirst=newFirst.nextSibling));_onUpdateChild(parentNode.ownerDocument||parentNode,parentNode);if(newChild.nodeType==DOCUMENT_FRAGMENT_NODE){newChild.firstChild=newChild.lastChild=null}return newChild}function _appendSingleChild(parentNode,newChild){var cp=newChild.parentNode;if(cp){var pre=parentNode.lastChild;cp.removeChild(newChild);var pre=parentNode.lastChild}var pre=parentNode.lastChild;newChild.parentNode=parentNode;newChild.previousSibling=pre;newChild.nextSibling=null;if(pre){pre.nextSibling=newChild}else{parentNode.firstChild=newChild}parentNode.lastChild=newChild;_onUpdateChild(parentNode.ownerDocument,parentNode,newChild);return newChild}Document.prototype={nodeName:\"#document\",nodeType:DOCUMENT_NODE,doctype:null,documentElement:null,_inc:1,insertBefore:function(newChild,refChild){if(newChild.nodeType==DOCUMENT_FRAGMENT_NODE){var child=newChild.firstChild;while(child){var next=child.nextSibling;this.insertBefore(child,refChild);child=next}return newChild}if(this.documentElement==null&&newChild.nodeType==ELEMENT_NODE){this.documentElement=newChild}return _insertBefore(this,newChild,refChild),newChild.ownerDocument=this,newChild},removeChild:function(oldChild){if(this.documentElement==oldChild){this.documentElement=null}return _removeChild(this,oldChild)},importNode:function(importedNode,deep){return importNode(this,importedNode,deep)},getElementById:function(id){var rtv=null;_visitNode(this.documentElement,function(node){if(node.nodeType==ELEMENT_NODE){if(node.getAttribute(\"id\")==id){rtv=node;return true}}});return rtv},createElement:function(tagName){var node=new Element;node.ownerDocument=this;node.nodeName=tagName;node.tagName=tagName;node.childNodes=new NodeList;var attrs=node.attributes=new NamedNodeMap;attrs._ownerElement=node;return node},createDocumentFragment:function(){var node=new DocumentFragment;node.ownerDocument=this;node.childNodes=new NodeList;return node},createTextNode:function(data){var node=new Text;node.ownerDocument=this;node.appendData(data);return node},createComment:function(data){var node=new Comment;node.ownerDocument=this;node.appendData(data);return node},createCDATASection:function(data){var node=new CDATASection;node.ownerDocument=this;node.appendData(data);return node},createProcessingInstruction:function(target,data){var node=new ProcessingInstruction;node.ownerDocument=this;node.tagName=node.target=target;node.nodeValue=node.data=data;return node},createAttribute:function(name){var node=new Attr;node.ownerDocument=this;node.name=name;node.nodeName=name;node.localName=name;node.specified=true;return node},createEntityReference:function(name){var node=new EntityReference;node.ownerDocument=this;node.nodeName=name;return node},createElementNS:function(namespaceURI,qualifiedName){var node=new Element;var pl=qualifiedName.split(\":\");var attrs=node.attributes=new NamedNodeMap;node.childNodes=new NodeList;node.ownerDocument=this;node.nodeName=qualifiedName;node.tagName=qualifiedName;node.namespaceURI=namespaceURI;if(pl.length==2){node.prefix=pl[0];node.localName=pl[1]}else{node.localName=qualifiedName}attrs._ownerElement=node;return node},createAttributeNS:function(namespaceURI,qualifiedName){var node=new Attr;var pl=qualifiedName.split(\":\");node.ownerDocument=this;node.nodeName=qualifiedName;node.name=qualifiedName;node.namespaceURI=namespaceURI;node.specified=true;if(pl.length==2){node.prefix=pl[0];node.localName=pl[1]}else{node.localName=qualifiedName}return node}};_extends(Document,Node);function Element(){this._nsMap={}}Element.prototype={nodeType:ELEMENT_NODE,hasAttribute:function(name){return this.getAttributeNode(name)!=null},getAttribute:function(name){var attr=this.getAttributeNode(name);return attr&&attr.value||\"\"},getAttributeNode:function(name){return this.attributes.getNamedItem(name)},setAttribute:function(name,value){var attr=this.ownerDocument.createAttribute(name);attr.value=attr.nodeValue=\"\"+value;this.setAttributeNode(attr)},removeAttribute:function(name){var attr=this.getAttributeNode(name);attr&&this.removeAttributeNode(attr)},appendChild:function(newChild){if(newChild.nodeType===DOCUMENT_FRAGMENT_NODE){return this.insertBefore(newChild,null)}else{return _appendSingleChild(this,newChild)}},setAttributeNode:function(newAttr){return this.attributes.setNamedItem(newAttr)},setAttributeNodeNS:function(newAttr){return this.attributes.setNamedItemNS(newAttr)},removeAttributeNode:function(oldAttr){return this.attributes.removeNamedItem(oldAttr.nodeName)},removeAttributeNS:function(namespaceURI,localName){var old=this.getAttributeNodeNS(namespaceURI,localName);old&&this.removeAttributeNode(old)},hasAttributeNS:function(namespaceURI,localName){return this.getAttributeNodeNS(namespaceURI,localName)!=null},getAttributeNS:function(namespaceURI,localName){var attr=this.getAttributeNodeNS(namespaceURI,localName);return attr&&attr.value||\"\"},setAttributeNS:function(namespaceURI,qualifiedName,value){var attr=this.ownerDocument.createAttributeNS(namespaceURI,qualifiedName);attr.value=attr.nodeValue=\"\"+value;this.setAttributeNode(attr)},getAttributeNodeNS:function(namespaceURI,localName){return this.attributes.getNamedItemNS(namespaceURI,localName)},getElementsByTagName:function(tagName){return new LiveNodeList(this,function(base){var ls=[];_visitNode(base,function(node){if(node!==base&&node.nodeType==ELEMENT_NODE&&(tagName===\"*\"||node.tagName==tagName)){ls.push(node)}});return ls})},getElementsByTagNameNS:function(namespaceURI,localName){return new LiveNodeList(this,function(base){var ls=[];_visitNode(base,function(node){if(node!==base&&node.nodeType===ELEMENT_NODE&&(namespaceURI===\"*\"||node.namespaceURI===namespaceURI)&&(localName===\"*\"||node.localName==localName)){ls.push(node)}});return ls})}};Document.prototype.getElementsByTagName=Element.prototype.getElementsByTagName;Document.prototype.getElementsByTagNameNS=Element.prototype.getElementsByTagNameNS;_extends(Element,Node);function Attr(){}Attr.prototype.nodeType=ATTRIBUTE_NODE;_extends(Attr,Node);function CharacterData(){}CharacterData.prototype={data:\"\",substringData:function(offset,count){return this.data.substring(offset,offset+count)},appendData:function(text){text=this.data+text;this.nodeValue=this.data=text;this.length=text.length},insertData:function(offset,text){this.replaceData(offset,0,text)},appendChild:function(newChild){throw new Error(ExceptionMessage[HIERARCHY_REQUEST_ERR])},deleteData:function(offset,count){this.replaceData(offset,count,\"\")},replaceData:function(offset,count,text){var start=this.data.substring(0,offset);var end=this.data.substring(offset+count);text=start+text+end;this.nodeValue=this.data=text;this.length=text.length}};_extends(CharacterData,Node);function Text(){}Text.prototype={nodeName:\"#text\",nodeType:TEXT_NODE,splitText:function(offset){var text=this.data;var newText=text.substring(offset);text=text.substring(0,offset);this.data=this.nodeValue=text;this.length=text.length;var newNode=this.ownerDocument.createTextNode(newText);if(this.parentNode){this.parentNode.insertBefore(newNode,this.nextSibling)}return newNode}};_extends(Text,CharacterData);function Comment(){}Comment.prototype={nodeName:\"#comment\",nodeType:COMMENT_NODE};_extends(Comment,CharacterData);function CDATASection(){}CDATASection.prototype={nodeName:\"#cdata-section\",nodeType:CDATA_SECTION_NODE};_extends(CDATASection,CharacterData);function DocumentType(){}DocumentType.prototype.nodeType=DOCUMENT_TYPE_NODE;_extends(DocumentType,Node);function Notation(){}Notation.prototype.nodeType=NOTATION_NODE;_extends(Notation,Node);function Entity(){}Entity.prototype.nodeType=ENTITY_NODE;_extends(Entity,Node);function EntityReference(){}EntityReference.prototype.nodeType=ENTITY_REFERENCE_NODE;_extends(EntityReference,Node);function DocumentFragment(){}DocumentFragment.prototype.nodeName=\"#document-fragment\";DocumentFragment.prototype.nodeType=DOCUMENT_FRAGMENT_NODE;_extends(DocumentFragment,Node);function ProcessingInstruction(){}ProcessingInstruction.prototype.nodeType=PROCESSING_INSTRUCTION_NODE;_extends(ProcessingInstruction,Node);function XMLSerializer(){}XMLSerializer.prototype.serializeToString=function(node,isHtml,nodeFilter){return nodeSerializeToString.call(node,isHtml,nodeFilter)};Node.prototype.toString=nodeSerializeToString;function nodeSerializeToString(isHtml,nodeFilter){var buf=[];var refNode=this.nodeType==9?this.documentElement:this;var prefix=refNode.prefix;var uri=refNode.namespaceURI;if(uri&&prefix==null){var prefix=refNode.lookupPrefix(uri);if(prefix==null){var visibleNamespaces=[{namespace:uri,prefix:null}]}}serializeToString(this,buf,isHtml,nodeFilter,visibleNamespaces);return buf.join(\"\")}function needNamespaceDefine(node,isHTML,visibleNamespaces){var prefix=node.prefix||\"\";var uri=node.namespaceURI;if(!prefix&&!uri){return false}if(prefix===\"xml\"&&uri===\"http://www.w3.org/XML/1998/namespace\"||uri==\"http://www.w3.org/2000/xmlns/\"){return false}var i=visibleNamespaces.length;while(i--){var ns=visibleNamespaces[i];if(ns.prefix==prefix){return ns.namespace!=uri}}return true}function serializeToString(node,buf,isHTML,nodeFilter,visibleNamespaces){if(nodeFilter){node=nodeFilter(node);if(node){if(typeof node==\"string\"){buf.push(node);return}}else{return}}switch(node.nodeType){case ELEMENT_NODE:if(!visibleNamespaces)visibleNamespaces=[];var startVisibleNamespaces=visibleNamespaces.length;var attrs=node.attributes;var len=attrs.length;var child=node.firstChild;var nodeName=node.tagName;isHTML=htmlns===node.namespaceURI||isHTML;buf.push(\"<\",nodeName);for(var i=0;i<len;i++){var attr=attrs.item(i);if(attr.prefix==\"xmlns\"){visibleNamespaces.push({prefix:attr.localName,namespace:attr.value})}else if(attr.nodeName==\"xmlns\"){visibleNamespaces.push({prefix:\"\",namespace:attr.value})}}for(var i=0;i<len;i++){var attr=attrs.item(i);if(needNamespaceDefine(attr,isHTML,visibleNamespaces)){var prefix=attr.prefix||\"\";var uri=attr.namespaceURI;var ns=prefix?\" xmlns:\"+prefix:\" xmlns\";buf.push(ns,'=\"',uri,'\"');visibleNamespaces.push({prefix:prefix,namespace:uri})}serializeToString(attr,buf,isHTML,nodeFilter,visibleNamespaces)}if(needNamespaceDefine(node,isHTML,visibleNamespaces)){var prefix=node.prefix||\"\";var uri=node.namespaceURI;var ns=prefix?\" xmlns:\"+prefix:\" xmlns\";buf.push(ns,'=\"',uri,'\"');visibleNamespaces.push({prefix:prefix,namespace:uri})}if(child||isHTML&&!/^(?:meta|link|img|br|hr|input)$/i.test(nodeName)){buf.push(\">\");if(isHTML&&/^script$/i.test(nodeName)){while(child){if(child.data){buf.push(child.data)}else{serializeToString(child,buf,isHTML,nodeFilter,visibleNamespaces)}child=child.nextSibling}}else{while(child){serializeToString(child,buf,isHTML,nodeFilter,visibleNamespaces);child=child.nextSibling}}buf.push(\"</\",nodeName,\">\")}else{buf.push(\"/>\")}return;case DOCUMENT_NODE:case DOCUMENT_FRAGMENT_NODE:var child=node.firstChild;while(child){serializeToString(child,buf,isHTML,nodeFilter,visibleNamespaces);child=child.nextSibling}return;case ATTRIBUTE_NODE:return buf.push(\" \",node.name,'=\"',node.value.replace(/[<&\"]/g,_xmlEncoder),'\"');case TEXT_NODE:return buf.push(node.data.replace(/[<&]/g,_xmlEncoder));case CDATA_SECTION_NODE:return buf.push(\"<![CDATA[\",node.data,\"]]>\");case COMMENT_NODE:return buf.push(\"<!--\",node.data,\"-->\");case DOCUMENT_TYPE_NODE:var pubid=node.publicId;var sysid=node.systemId;buf.push(\"<!DOCTYPE \",node.name);if(pubid){buf.push(' PUBLIC \"',pubid);if(sysid&&sysid!=\".\"){buf.push('\" \"',sysid)}buf.push('\">')}else if(sysid&&sysid!=\".\"){buf.push(' SYSTEM \"',sysid,'\">')}else{var sub=node.internalSubset;if(sub){buf.push(\" [\",sub,\"]\")}buf.push(\">\")}return;case PROCESSING_INSTRUCTION_NODE:return buf.push(\"<?\",node.target,\" \",node.data,\"?>\");case ENTITY_REFERENCE_NODE:return buf.push(\"&\",node.nodeName,\";\");default:buf.push(\"??\",node.nodeName)}}function importNode(doc,node,deep){var node2;switch(node.nodeType){case ELEMENT_NODE:node2=node.cloneNode(false);node2.ownerDocument=doc;case DOCUMENT_FRAGMENT_NODE:break;case ATTRIBUTE_NODE:deep=true;break}if(!node2){node2=node.cloneNode(false)}node2.ownerDocument=doc;node2.parentNode=null;if(deep){var child=node.firstChild;while(child){node2.appendChild(importNode(doc,child,deep));child=child.nextSibling}}return node2}function cloneNode(doc,node,deep){var node2=new node.constructor;for(var n in node){var v=node[n];if(typeof v!=\"object\"){if(v!=node2[n]){node2[n]=v}}}if(node.childNodes){node2.childNodes=new NodeList}node2.ownerDocument=doc;switch(node2.nodeType){case ELEMENT_NODE:var attrs=node.attributes;var attrs2=node2.attributes=new NamedNodeMap;var len=attrs.length;attrs2._ownerElement=node2;for(var i=0;i<len;i++){node2.setAttributeNode(cloneNode(doc,attrs.item(i),true))}break;case ATTRIBUTE_NODE:deep=true}if(deep){var child=node.firstChild;while(child){node2.appendChild(cloneNode(doc,child,deep));child=child.nextSibling}}return node2}function __set__(object,key,value){object[key]=value}try{if(Object.defineProperty){Object.defineProperty(LiveNodeList.prototype,\"length\",{get:function(){_updateLiveList(this);return this.$$length}});Object.defineProperty(Node.prototype,\"textContent\",{get:function(){return getTextContent(this)},set:function(data){switch(this.nodeType){case ELEMENT_NODE:case DOCUMENT_FRAGMENT_NODE:while(this.firstChild){this.removeChild(this.firstChild)}if(data||String(data)){this.appendChild(this.ownerDocument.createTextNode(data))}break;default:this.data=data;this.value=data;this.nodeValue=data}}});function getTextContent(node){switch(node.nodeType){case ELEMENT_NODE:case DOCUMENT_FRAGMENT_NODE:var buf=[];node=node.firstChild;while(node){if(node.nodeType!==7&&node.nodeType!==8){buf.push(getTextContent(node))}node=node.nextSibling}return buf.join(\"\");default:return node.nodeValue}}__set__=function(object,key,value){object[\"$$\"+key]=value}}}catch(e){}exports.DOMImplementation=DOMImplementation;exports.XMLSerializer=XMLSerializer},{}],25:[function(require,module,exports){var nameStartChar=/[A-Z_a-z\\xC0-\\xD6\\xD8-\\xF6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/;var nameChar=new RegExp(\"[\\\\-\\\\.0-9\"+nameStartChar.source.slice(1,-1)+\"\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040]\");var tagNamePattern=new RegExp(\"^\"+nameStartChar.source+nameChar.source+\"*(?::\"+nameStartChar.source+nameChar.source+\"*)?$\");var S_TAG=0;var S_ATTR=1;var S_ATTR_SPACE=2;var S_EQ=3;var S_ATTR_NOQUOT_VALUE=4;var S_ATTR_END=5;var S_TAG_SPACE=6;var S_TAG_CLOSE=7;function XMLReader(){}XMLReader.prototype={parse:function(source,defaultNSMap,entityMap){var domBuilder=this.domBuilder;domBuilder.startDocument();_copy(defaultNSMap,defaultNSMap={});parse(source,defaultNSMap,entityMap,domBuilder,this.errorHandler);domBuilder.endDocument()}};function parse(source,defaultNSMapCopy,entityMap,domBuilder,errorHandler){function fixedFromCharCode(code){if(code>65535){code-=65536;var surrogate1=55296+(code>>10),surrogate2=56320+(code&1023);return String.fromCharCode(surrogate1,surrogate2)}else{return String.fromCharCode(code)}}function entityReplacer(a){var k=a.slice(1,-1);if(k in entityMap){return entityMap[k]}else if(k.charAt(0)===\"#\"){return fixedFromCharCode(parseInt(k.substr(1).replace(\"x\",\"0x\")))}else{errorHandler.error(\"entity not found:\"+a);return a}}function appendText(end){if(end>start){var xt=source.substring(start,end).replace(/&#?\\w+;/g,entityReplacer);locator&&position(start);domBuilder.characters(xt,0,end-start);start=end}}function position(p,m){while(p>=lineEnd&&(m=linePattern.exec(source))){lineStart=m.index;lineEnd=lineStart+m[0].length;locator.lineNumber++}locator.columnNumber=p-lineStart+1}var lineStart=0;var lineEnd=0;var linePattern=/.*(?:\\r\\n?|\\n)|.*$/g;var locator=domBuilder.locator;var parseStack=[{currentNSMap:defaultNSMapCopy}];var closeMap={};var start=0;while(true){try{var tagStart=source.indexOf(\"<\",start);if(tagStart<0){if(!source.substr(start).match(/^\\s*$/)){var doc=domBuilder.doc;var text=doc.createTextNode(source.substr(start));doc.appendChild(text);domBuilder.currentElement=text}return}if(tagStart>start){appendText(tagStart)}switch(source.charAt(tagStart+1)){case\"/\":var end=source.indexOf(\">\",tagStart+3);var tagName=source.substring(tagStart+2,end);var config=parseStack.pop();if(end<0){tagName=source.substring(tagStart+2).replace(/[\\s<].*/,\"\");errorHandler.error(\"end tag name: \"+tagName+\" is not complete:\"+config.tagName);end=tagStart+1+tagName.length}else if(tagName.match(/\\s</)){tagName=tagName.replace(/[\\s<].*/,\"\");errorHandler.error(\"end tag name: \"+tagName+\" maybe not complete\");end=tagStart+1+tagName.length}var localNSMap=config.localNSMap;var endMatch=config.tagName==tagName;var endIgnoreCaseMach=endMatch||config.tagName&&config.tagName.toLowerCase()==tagName.toLowerCase();if(endIgnoreCaseMach){domBuilder.endElement(config.uri,config.localName,tagName);if(localNSMap){for(var prefix in localNSMap){domBuilder.endPrefixMapping(prefix)}}if(!endMatch){errorHandler.fatalError(\"end tag name: \"+tagName+\" is not match the current start tagName:\"+config.tagName)}}else{parseStack.push(config)}end++;break;case\"?\":locator&&position(tagStart);end=parseInstruction(source,tagStart,domBuilder);break;case\"!\":locator&&position(tagStart);end=parseDCC(source,tagStart,domBuilder,errorHandler);break;default:locator&&position(tagStart);var el=new ElementAttributes;var currentNSMap=parseStack[parseStack.length-1].currentNSMap;var end=parseElementStartPart(source,tagStart,el,currentNSMap,entityReplacer,errorHandler);var len=el.length;if(!el.closed&&fixSelfClosed(source,end,el.tagName,closeMap)){el.closed=true;if(!entityMap.nbsp){errorHandler.warning(\"unclosed xml attribute\")}}if(locator&&len){var locator2=copyLocator(locator,{});for(var i=0;i<len;i++){var a=el[i];position(a.offset);a.locator=copyLocator(locator,{})}domBuilder.locator=locator2;if(appendElement(el,domBuilder,currentNSMap)){parseStack.push(el)}domBuilder.locator=locator}else{if(appendElement(el,domBuilder,currentNSMap)){parseStack.push(el)}}if(el.uri===\"http://www.w3.org/1999/xhtml\"&&!el.closed){end=parseHtmlSpecialContent(source,end,el.tagName,entityReplacer,domBuilder)}else{end++}}}catch(e){errorHandler.error(\"element parse error: \"+e);end=-1}if(end>start){start=end}else{appendText(Math.max(tagStart,start)+1)}}}function copyLocator(f,t){t.lineNumber=f.lineNumber;t.columnNumber=f.columnNumber;return t}function parseElementStartPart(source,start,el,currentNSMap,entityReplacer,errorHandler){var attrName;var value;var p=++start;var s=S_TAG;while(true){var c=source.charAt(p);switch(c){case\"=\":if(s===S_ATTR){attrName=source.slice(start,p);s=S_EQ}else if(s===S_ATTR_SPACE){s=S_EQ}else{throw new Error(\"attribute equal must after attrName\")}break;case\"'\":case'\"':if(s===S_EQ||s===S_ATTR){if(s===S_ATTR){errorHandler.warning('attribute value must after \"=\"');attrName=source.slice(start,p)}start=p+1;p=source.indexOf(c,start);if(p>0){value=source.slice(start,p).replace(/&#?\\w+;/g,entityReplacer);el.add(attrName,value,start-1);s=S_ATTR_END}else{throw new Error(\"attribute value no end '\"+c+\"' match\")}}else if(s==S_ATTR_NOQUOT_VALUE){value=source.slice(start,p).replace(/&#?\\w+;/g,entityReplacer);el.add(attrName,value,start);errorHandler.warning('attribute \"'+attrName+'\" missed start quot('+c+\")!!\");start=p+1;s=S_ATTR_END}else{throw new Error('attribute value must after \"=\"')}break;case\"/\":switch(s){case S_TAG:el.setTagName(source.slice(start,p));case S_ATTR_END:case S_TAG_SPACE:case S_TAG_CLOSE:s=S_TAG_CLOSE;el.closed=true;case S_ATTR_NOQUOT_VALUE:case S_ATTR:case S_ATTR_SPACE:break;default:throw new Error(\"attribute invalid close char('/')\")}break;case\"\":errorHandler.error(\"unexpected end of input\");if(s==S_TAG){el.setTagName(source.slice(start,p))}return p;case\">\":switch(s){case S_TAG:el.setTagName(source.slice(start,p));case S_ATTR_END:case S_TAG_SPACE:case S_TAG_CLOSE:break;case S_ATTR_NOQUOT_VALUE:case S_ATTR:value=source.slice(start,p);if(value.slice(-1)===\"/\"){el.closed=true;value=value.slice(0,-1)}case S_ATTR_SPACE:if(s===S_ATTR_SPACE){value=attrName}if(s==S_ATTR_NOQUOT_VALUE){errorHandler.warning('attribute \"'+value+'\" missed quot(\")!!');el.add(attrName,value.replace(/&#?\\w+;/g,entityReplacer),start)}else{if(currentNSMap[\"\"]!==\"http://www.w3.org/1999/xhtml\"||!value.match(/^(?:disabled|checked|selected)$/i)){errorHandler.warning('attribute \"'+value+'\" missed value!! \"'+value+'\" instead!!')}el.add(value,value,start)}break;case S_EQ:throw new Error(\"attribute value missed!!\")}return p;case\"\":c=\" \";default:if(c<=\" \"){switch(s){case S_TAG:el.setTagName(source.slice(start,p));s=S_TAG_SPACE;break;case S_ATTR:attrName=source.slice(start,p);s=S_ATTR_SPACE;break;case S_ATTR_NOQUOT_VALUE:var value=source.slice(start,p).replace(/&#?\\w+;/g,entityReplacer);errorHandler.warning('attribute \"'+value+'\" missed quot(\")!!');el.add(attrName,value,start);case S_ATTR_END:s=S_TAG_SPACE;break}}else{switch(s){case S_ATTR_SPACE:var tagName=el.tagName;if(currentNSMap[\"\"]!==\"http://www.w3.org/1999/xhtml\"||!attrName.match(/^(?:disabled|checked|selected)$/i)){errorHandler.warning('attribute \"'+attrName+'\" missed value!! \"'+attrName+'\" instead2!!')}el.add(attrName,attrName,start);start=p;s=S_ATTR;break;case S_ATTR_END:errorHandler.warning('attribute space is required\"'+attrName+'\"!!');case S_TAG_SPACE:s=S_ATTR;start=p;break;case S_EQ:s=S_ATTR_NOQUOT_VALUE;start=p;break;case S_TAG_CLOSE:throw new Error(\"elements closed character '/' and '>' must be connected to\")}}}p++}}function appendElement(el,domBuilder,currentNSMap){var tagName=el.tagName;var localNSMap=null;var i=el.length;while(i--){var a=el[i];var qName=a.qName;var value=a.value;var nsp=qName.indexOf(\":\");if(nsp>0){var prefix=a.prefix=qName.slice(0,nsp);var localName=qName.slice(nsp+1);var nsPrefix=prefix===\"xmlns\"&&localName}else{localName=qName;prefix=null;nsPrefix=qName===\"xmlns\"&&\"\"}a.localName=localName;if(nsPrefix!==false){if(localNSMap==null){localNSMap={};_copy(currentNSMap,currentNSMap={})}currentNSMap[nsPrefix]=localNSMap[nsPrefix]=value;a.uri=\"http://www.w3.org/2000/xmlns/\";domBuilder.startPrefixMapping(nsPrefix,value)}}var i=el.length;while(i--){a=el[i];var prefix=a.prefix;if(prefix){if(prefix===\"xml\"){a.uri=\"http://www.w3.org/XML/1998/namespace\"}if(prefix!==\"xmlns\"){a.uri=currentNSMap[prefix||\"\"]}}}var nsp=tagName.indexOf(\":\");if(nsp>0){prefix=el.prefix=tagName.slice(0,nsp);localName=el.localName=tagName.slice(nsp+1)}else{prefix=null;localName=el.localName=tagName}var ns=el.uri=currentNSMap[prefix||\"\"];domBuilder.startElement(ns,localName,tagName,el);if(el.closed){domBuilder.endElement(ns,localName,tagName);if(localNSMap){for(prefix in localNSMap){domBuilder.endPrefixMapping(prefix)}}}else{el.currentNSMap=currentNSMap;el.localNSMap=localNSMap;return true}}function parseHtmlSpecialContent(source,elStartEnd,tagName,entityReplacer,domBuilder){if(/^(?:script|textarea)$/i.test(tagName)){var elEndStart=source.indexOf(\"</\"+tagName+\">\",elStartEnd);var text=source.substring(elStartEnd+1,elEndStart);if(/[&<]/.test(text)){if(/^script$/i.test(tagName)){domBuilder.characters(text,0,text.length);return elEndStart}text=text.replace(/&#?\\w+;/g,entityReplacer);domBuilder.characters(text,0,text.length);return elEndStart}}return elStartEnd+1}function fixSelfClosed(source,elStartEnd,tagName,closeMap){var pos=closeMap[tagName];if(pos==null){pos=source.lastIndexOf(\"</\"+tagName+\">\");if(pos<elStartEnd){pos=source.lastIndexOf(\"</\"+tagName)}closeMap[tagName]=pos}return pos<elStartEnd}function _copy(source,target){for(var n in source){target[n]=source[n]}}function parseDCC(source,start,domBuilder,errorHandler){var next=source.charAt(start+2);switch(next){case\"-\":if(source.charAt(start+3)===\"-\"){var end=source.indexOf(\"-->\",start+4);if(end>start){domBuilder.comment(source,start+4,end-start-4);return end+3}else{errorHandler.error(\"Unclosed comment\");return-1}}else{return-1}default:if(source.substr(start+3,6)==\"CDATA[\"){var end=source.indexOf(\"]]>\",start+9);domBuilder.startCDATA();domBuilder.characters(source,start+9,end-start-9);domBuilder.endCDATA();return end+3}var matchs=split(source,start);var len=matchs.length;if(len>1&&/!doctype/i.test(matchs[0][0])){var name=matchs[1][0];var pubid=len>3&&/^public$/i.test(matchs[2][0])&&matchs[3][0];var sysid=len>4&&matchs[4][0];var lastMatch=matchs[len-1];domBuilder.startDTD(name,pubid&&pubid.replace(/^(['\"])(.*?)\\1$/,\"$2\"),sysid&&sysid.replace(/^(['\"])(.*?)\\1$/,\"$2\"));domBuilder.endDTD();return lastMatch.index+lastMatch[0].length}}return-1}function parseInstruction(source,start,domBuilder){var end=source.indexOf(\"?>\",start);if(end){var match=source.substring(start,end).match(/^<\\?(\\S*)\\s*([\\s\\S]*?)\\s*$/);if(match){var len=match[0].length;domBuilder.processingInstruction(match[1],match[2]);return end+2}else{return-1}}return-1}function ElementAttributes(source){}ElementAttributes.prototype={setTagName:function(tagName){if(!tagNamePattern.test(tagName)){throw new Error(\"invalid tagName:\"+tagName)}this.tagName=tagName},add:function(qName,value,offset){if(!tagNamePattern.test(qName)){throw new Error(\"invalid attribute:\"+qName)}this[this.length++]={qName:qName,value:value,offset:offset}},length:0,getLocalName:function(i){return this[i].localName},getLocator:function(i){return this[i].locator},getQName:function(i){return this[i].qName},getURI:function(i){return this[i].uri},getValue:function(i){return this[i].value}};function _set_proto_(thiz,parent){thiz.__proto__=parent;return thiz}if(!(_set_proto_({},_set_proto_.prototype)instanceof _set_proto_)){_set_proto_=function(thiz,parent){function p(){}p.prototype=parent;p=new p;for(parent in thiz){p[parent]=thiz[parent]}return p}}function split(source,start){var match;var buf=[];var reg=/'[^']+'|\"[^\"]+\"|[^\\s<>\\/=]+=?|(\\/?\\s*>|<)/g;reg.lastIndex=start;reg.exec(source);while(match=reg.exec(source)){buf.push(match);if(match[1])return buf}}exports.XMLReader=XMLReader},{}],\"/src/js/index.js\":[function(require,module,exports){\"use strict\";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\")}}var templates=require(\"./templates\");var DocUtils=require(\"docxtemplater\").DocUtils;var DOMParser=require(\"xmldom\").DOMParser;function isNaN(number){return!(number===number)}var ImgManager=require(\"./imgManager\");var moduleName=\"open-xml-templating/docxtemplater-image-module\";function getInnerDocx(_ref){var part=_ref.part;return part}function getInnerPptx(_ref2){var part=_ref2.part,left=_ref2.left,right=_ref2.right,postparsed=_ref2.postparsed;var xmlString=postparsed.slice(left+1,right).reduce(function(concat,item){return concat+item.value},\"\");var xmlDoc=(new DOMParser).parseFromString(\"<xml>\"+xmlString+\"</xml>\");var offset=xmlDoc.getElementsByTagName(\"a:off\");var ext=xmlDoc.getElementsByTagName(\"a:ext\");part.ext={cx:parseInt(ext[0].getAttribute(\"cx\"),10),cy:parseInt(ext[0].getAttribute(\"cy\"),10)};part.offset={x:parseInt(offset[0].getAttribute(\"x\"),10),y:parseInt(offset[0].getAttribute(\"y\"),10)};return part}var ImageModule=function(){function ImageModule(options){_classCallCheck(this,ImageModule);this.name=\"ImageModule\";this.options=options||{};this.imgManagers={};if(this.options.centered==null){this.options.centered=false}if(this.options.getImage==null){throw new Error(\"You should pass getImage\")}if(this.options.getSize==null){throw new Error(\"You should pass getSize\")}this.imageNumber=1}_createClass(ImageModule,[{key:\"optionsTransformer\",value:function optionsTransformer(options,docxtemplater){\nvar relsFiles=docxtemplater.zip.file(/\\.xml\\.rels/).concat(docxtemplater.zip.file(/\\[Content_Types\\].xml/)).map(function(file){return file.name});this.fileTypeConfig=docxtemplater.fileTypeConfig;this.fileType=docxtemplater.fileType;this.zip=docxtemplater.zip;options.xmlFileNames=options.xmlFileNames.concat(relsFiles);return options}},{key:\"set\",value:function set(options){if(options.zip){this.zip=options.zip}if(options.xmlDocuments){this.xmlDocuments=options.xmlDocuments}}},{key:\"parse\",value:function parse(placeHolderContent){var module=moduleName;var type=\"placeholder\";if(placeHolderContent.substring(0,2)===\"%%\"){return{type:type,value:placeHolderContent.substr(2),module:module,centered:true}}if(placeHolderContent.substring(0,1)===\"%\"){return{type:type,value:placeHolderContent.substr(1),module:module,centered:false}}return null}},{key:\"postparse\",value:function postparse(parsed){var expandTo=void 0;var getInner=void 0;if(this.fileType===\"pptx\"){expandTo=\"p:sp\";getInner=getInnerPptx}else{expandTo=this.options.centered?\"w:p\":\"w:t\";getInner=getInnerDocx}return DocUtils.traits.expandToOne(parsed,{moduleName:moduleName,getInner:getInner,expandTo:expandTo})}},{key:\"render\",value:function render(part,options){this.imgManagers[options.filePath]=this.imgManagers[options.filePath]||new ImgManager(this.zip,options.filePath,this.xmlDocuments,this.fileType);var imgManager=this.imgManagers[options.filePath];if(!part.type===\"placeholder\"||part.module!==moduleName){return null}try{var tagValue=options.scopeManager.getValue(part.value);if(!tagValue){throw new Error(\"tagValue is empty\")}var imgBuffer=this.options.getImage(tagValue,part.value);var rId=imgManager.addImageRels(this.getNextImageName(),imgBuffer);var sizePixel=this.options.getSize(imgBuffer,tagValue,part.value);return this.getRenderedPart(part,rId,sizePixel)}catch(e){return{value:this.fileTypeConfig.tagTextXml}}}},{key:\"getRenderedPart\",value:function getRenderedPart(part,rId,sizePixel){if(isNaN(rId)){throw new Error(\"rId is NaN, aborting\")}var size=[DocUtils.convertPixelsToEmus(sizePixel[0]),DocUtils.convertPixelsToEmus(sizePixel[1])];var centered=this.options.centered||part.centered;var newText=void 0;if(this.fileType===\"pptx\"){newText=this.getRenderedPartPptx(part,rId,size,centered)}else{newText=this.getRenderedPartDocx(rId,size,centered)}return{value:newText}}},{key:\"getRenderedPartPptx\",value:function getRenderedPartPptx(part,rId,size,centered){var offset={x:part.offset.x,y:part.offset.y};var cellCX=part.ext.cx;var cellCY=part.ext.cy;var imgW=size[0];var imgH=size[1];if(centered){offset.x+=cellCX/2-imgW/2;offset.y+=cellCY/2-imgH/2}return templates.getPptxImageXml(rId,[imgW,imgH],offset)}},{key:\"getRenderedPartDocx\",value:function getRenderedPartDocx(rId,size,centered){return centered?templates.getImageXmlCentered(rId,size):templates.getImageXml(rId,size)}},{key:\"getNextImageName\",value:function getNextImageName(){var name=\"image_generated_\"+this.imageNumber+\".png\";this.imageNumber++;return name}}]);return ImageModule}();module.exports=ImageModule},{\"./imgManager\":2,\"./templates\":3,docxtemplater:5,xmldom:23}]},{},[])(\"/src/js/index.js\")});","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.Docxtemplater=f()}})(function(){var define,module,exports;return function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}({1:[function(require,module,exports){\"use strict\";function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true})}else{obj[key]=value}return obj}var memoize=require(\"./memoize\");var DOMParser=require(\"xmldom\").DOMParser;var XMLSerializer=require(\"xmldom\").XMLSerializer;var Errors=require(\"./errors\");var DocUtils={};function parser(tag){return _defineProperty({},\"get\",function get(scope){if(tag===\".\"){return scope}return scope[tag]})}DocUtils.defaults={nullGetter:function nullGetter(part){if(!part.module){return\"undefined\"}if(part.module===\"rawxml\"){return\"\"}return\"\"},parser:memoize(parser),delimiters:{start:\"{\",end:\"}\"}};DocUtils.mergeObjects=function(){var resObj={};var obj=void 0,keys=void 0;for(var i=0;i<arguments.length;i+=1){obj=arguments[i];keys=Object.keys(obj);for(var j=0;j<keys.length;j+=1){resObj[keys[j]]=obj[keys[j]]}}return resObj};DocUtils.xml2str=function(xmlNode){var a=new XMLSerializer;return a.serializeToString(xmlNode)};DocUtils.decodeUtf8=function(s){try{if(s===undefined){return undefined}return decodeURIComponent(escape(DocUtils.convertSpaces(s)))}catch(e){var err=new Error(\"End\");err.properties.data=s;err.properties.explanation=\"Could not decode string to UTF8\";throw err}};DocUtils.encodeUtf8=function(s){return unescape(encodeURIComponent(s))};DocUtils.str2xml=function(str,errorHandler){var parser=new DOMParser({errorHandler:errorHandler});return parser.parseFromString(str,\"text/xml\")};DocUtils.charMap={\"&\":\"&amp;\",\"'\":\"&apos;\",\"<\":\"&lt;\",\">\":\"&gt;\"};var regexStripRegexp=/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g;DocUtils.escapeRegExp=function(str){return str.replace(regexStripRegexp,\"\\\\$&\")};DocUtils.charMapRegexes=Object.keys(DocUtils.charMap).map(function(endChar){var startChar=DocUtils.charMap[endChar];return{rstart:new RegExp(DocUtils.escapeRegExp(startChar),\"g\"),rend:new RegExp(DocUtils.escapeRegExp(endChar),\"g\"),start:startChar,end:endChar}});DocUtils.wordToUtf8=function(string){var r=void 0;for(var i=0,l=DocUtils.charMapRegexes.length;i<l;i++){r=DocUtils.charMapRegexes[i];string=string.replace(r.rstart,r.end)}return string};DocUtils.utf8ToWord=function(string){if(typeof string!==\"string\"){string=string.toString()}var r=void 0;for(var i=0,l=DocUtils.charMapRegexes.length;i<l;i++){r=DocUtils.charMapRegexes[i];string=string.replace(r.rend,r.start)}return string};DocUtils.cloneDeep=function(obj){return JSON.parse(JSON.stringify(obj))};DocUtils.concatArrays=function(arrays){return arrays.reduce(function(result,array){Array.prototype.push.apply(result,array);return result},[])};var spaceRegexp=new RegExp(String.fromCharCode(160),\"g\");DocUtils.convertSpaces=function(s){return s.replace(spaceRegexp,\" \")};DocUtils.pregMatchAll=function(regex,content){var matchArray=[];var match=void 0;while((match=regex.exec(content))!=null){matchArray.push({array:match,offset:match.index})}return matchArray};DocUtils.sizeOfObject=function(obj){return Object.keys(obj).length};function throwXmlTagNotFound(options){var err=new Errors.XTTemplateError(\"No tag '\"+options.element+\"' was found at the \"+options.position);err.properties={id:\"no_xml_tag_found_at_\"+options.position,explanation:\"No tag '\"+options.element+\"' was found at the \"+options.position,parsed:options.parsed,index:options.index,element:options.element};throw err}DocUtils.getRight=function(parsed,element,index){for(var i=index,l=parsed.length;i<l;i++){var part=parsed[i];if(part.value===\"</\"+element+\">\"){return i}}throwXmlTagNotFound({position:\"right\",element:element,parsed:parsed,index:index})};DocUtils.getLeft=function(parsed,element,index){for(var i=index;i>=0;i--){var part=parsed[i];if(part.value.indexOf(\"<\"+element)===0&&[\">\",\" \"].indexOf(part.value[element.length+1])!==-1){return i}}throwXmlTagNotFound({position:\"left\",element:element,parsed:parsed,index:index})};module.exports=DocUtils},{\"./errors\":2,\"./memoize\":5,xmldom:19}],2:[function(require,module,exports){\"use strict\";function XTError(message){this.name=\"GenericError\";this.message=message;this.stack=new Error(message).stack}XTError.prototype=Error.prototype;function XTTemplateError(message){this.name=\"TemplateError\";this.message=message;this.stack=new Error(message).stack}XTTemplateError.prototype=new XTError;function XTScopeParserError(message){this.name=\"ScopeParserError\";this.message=message;this.stack=new Error(message).stack}XTScopeParserError.prototype=new XTError;function XTInternalError(message){this.name=\"InternalError\";this.properties={explanation:\"InternalError\"};this.message=message;this.stack=new Error(message).stack}XTInternalError.prototype=new XTError;module.exports={XTError:XTError,XTTemplateError:XTTemplateError,XTInternalError:XTInternalError,XTScopeParserError:XTScopeParserError}},{}],3:[function(require,module,exports){\"use strict\";var loopModule=require(\"./modules/loop\");var spacePreserveModule=require(\"./modules/space-preserve\");var rawXmlModule=require(\"./modules/rawxml\");var expandPairTrait=require(\"./modules/expand-pair-trait\");var render=require(\"./modules/render\");var PptXFileTypeConfig={getTemplatedFiles:function getTemplatedFiles(zip){var slideTemplates=zip.file(/ppt\\/(slides|slideMasters)\\/(slide|slideMaster)\\d+\\.xml/).map(function(file){return file.name});return slideTemplates.concat([\"ppt/presentation.xml\"])},textPath:\"ppt/slides/slide1.xml\",tagsXmlTextArray:[\"a:t\",\"m:t\"],tagsXmlLexedArray:[\"p:sp\",\"a:tc\",\"a:tr\",\"a:table\",\"a:p\",\"a:r\"],tagRawXml:\"p:sp\",tagTextXml:\"a:t\",baseModules:[render,expandPairTrait,rawXmlModule,loopModule]};var DocXFileTypeConfig={getTemplatedFiles:function getTemplatedFiles(zip){var slideTemplates=zip.file(/word\\/(header|footer)\\d+\\.xml/).map(function(file){return file.name});return slideTemplates.concat([\"word/document.xml\"])},textPath:\"word/document.xml\",tagsXmlTextArray:[\"w:t\",\"m:t\"],tagsXmlLexedArray:[\"w:tc\",\"w:tr\",\"w:table\",\"w:p\",\"w:r\"],tagRawXml:\"w:p\",tagTextXml:\"w:t\",baseModules:[render,spacePreserveModule,expandPairTrait,rawXmlModule,loopModule]};module.exports={docx:DocXFileTypeConfig,pptx:PptXFileTypeConfig}},{\"./modules/expand-pair-trait\":8,\"./modules/loop\":9,\"./modules/rawxml\":10,\"./modules/render\":11,\"./modules/space-preserve\":12}],4:[function(require,module,exports){\"use strict\";var Errors=require(\"./errors\");var DocUtils=require(\"./doc-utils\");function inRange(range,match){return range[0]<=match.offset&&match.offset<range[1]}function updateInTextTag(part,inTextTag){if(part.type===\"tag\"&&part.position===\"start\"&&part.text){if(inTextTag){throw new Error(\"Malformed xml : Already in text tag\")}return true}if(part.type===\"tag\"&&part.position===\"end\"&&part.text){if(!inTextTag){throw new Error(\"Malformed xml : Already not in text tag\")}return false}return inTextTag}function offsetSort(a,b){return a.offset-b.offset}function getTag(tag){var start=1;if(tag[1]===\"/\"){start=2}var index=tag.indexOf(\" \");var end=index===-1?tag.length-1:index;return{tag:tag.slice(start,end),position:start===1?\"start\":\"end\"}}function tagMatcher(content,textMatchArray,othersMatchArray){var cursor=0;var contentLength=content.length;var allMatches=DocUtils.concatArrays([textMatchArray.map(function(tag){return{tag:tag,text:true}}),othersMatchArray.map(function(tag){return{tag:tag,text:false}})]).reduce(function(allMatches,t){allMatches[t.tag]=t.text;return allMatches},{});var totalMatches=[];while(cursor<contentLength){cursor=content.indexOf(\"<\",cursor);if(cursor===-1){break}var offset=cursor;cursor=content.indexOf(\">\",cursor);var tagText=content.slice(offset,cursor+1);var _getTag=getTag(tagText),tag=_getTag.tag,position=_getTag.position;var text=allMatches[tag];if(text==null){continue}totalMatches.push({type:\"tag\",position:position,text:text,offset:offset,value:tagText})}return totalMatches}function throwUnopenedTagException(options){var err=new Errors.XTTemplateError(\"Unopened tag\");err.properties={xtag:options.xtag.split(\" \")[0],id:\"unopened_tag\",context:options.xtag,explanation:\"The tag beginning with '\"+options.xtag.substr(0,10)+\"' is unclosed\"};throw err}function throwUnclosedTagException(options){var err=new Errors.XTTemplateError(\"Unclosed tag\");err.properties={xtag:options.xtag.split(\" \")[0].substr(1),id:\"unclosed_tag\",context:options.xtag,explanation:\"The tag beginning with '\"+options.xtag.substr(0,10)+\"' is unclosed\"};throw err}function assertDelimiterOrdered(delimiterMatches,fullText){var inDelimiter=false;var lastDelimiterMatch={offset:0};var xtag=void 0;delimiterMatches.forEach(function(delimiterMatch){xtag=fullText.substr(lastDelimiterMatch.offset,delimiterMatch.offset-lastDelimiterMatch.offset);if(delimiterMatch.position===\"start\"&&inDelimiter||delimiterMatch.position===\"end\"&&!inDelimiter){if(delimiterMatch.position===\"start\"){throwUnclosedTagException({xtag:xtag})}else{throwUnopenedTagException({xtag:xtag})}}inDelimiter=!inDelimiter;lastDelimiterMatch=delimiterMatch});var delimiterMatch={offset:fullText.length};xtag=fullText.substr(lastDelimiterMatch.offset,delimiterMatch.offset-lastDelimiterMatch.offset);if(inDelimiter){throwUnclosedTagException({xtag:xtag})}}function getAllIndexes(arr,val,position){var indexes=[];var offset=-1;do{offset=arr.indexOf(val,offset+1);if(offset!==-1){indexes.push({offset:offset,position:position})}}while(offset!==-1);return indexes}function Reader(innerContentParts){var _this=this;this.innerContentParts=innerContentParts;this.full=\"\";this.parseDelimiters=function(delimiters){_this.full=_this.innerContentParts.join(\"\");var offset=0;_this.ranges=_this.innerContentParts.map(function(part){offset+=part.length;return offset-part.length});var delimiterMatches=DocUtils.concatArrays([getAllIndexes(_this.full,delimiters.start,\"start\"),getAllIndexes(_this.full,delimiters.end,\"end\")]).sort(offsetSort);assertDelimiterOrdered(delimiterMatches,_this.full);var delimiterLength={start:delimiters.start.length,end:delimiters.end.length};var cutNext=0;var delimiterIndex=0;_this.parsed=_this.ranges.map(function(offset,i){var range=[offset,offset+this.innerContentParts[i].length];var partContent=this.innerContentParts[i];var delimitersInOffset=[];while(delimiterIndex<delimiterMatches.length&&inRange(range,delimiterMatches[delimiterIndex])){delimitersInOffset.push(delimiterMatches[delimiterIndex]);delimiterIndex++}var parts=[];var cursor=0;if(cutNext>0){cursor=cutNext;cutNext=0}delimitersInOffset.forEach(function(delimiterInOffset){var value=partContent.substr(cursor,delimiterInOffset.offset-offset-cursor);if(value.length>0){parts.push({type:\"content\",value:value})}parts.push({type:\"delimiter\",position:delimiterInOffset.position});cursor=delimiterInOffset.offset-offset+delimiterLength[delimiterInOffset.position]});cutNext=cursor-partContent.length;var value=partContent.substr(cursor);if(value.length>0){parts.push({type:\"content\",value:value})}return parts},_this)}}module.exports={parse:function parse(xmlparsed,delimiters){var inTextTag=false;var innerContentParts=[];xmlparsed.forEach(function(part){inTextTag=updateInTextTag(part,inTextTag);if(inTextTag&&part.type===\"content\"){innerContentParts.push(part.value)}});var reader=new Reader(innerContentParts);reader.parseDelimiters(delimiters);var newArray=[];var index=0;xmlparsed.forEach(function(part){inTextTag=updateInTextTag(part,inTextTag);if(part.type===\"content\"){part.position=inTextTag?\"insidetag\":\"outsidetag\"}if(inTextTag&&part.type===\"content\"){Array.prototype.push.apply(newArray,reader.parsed[index].map(function(p){if(p.type===\"content\"){p.position=\"insidetag\"}return p}));index++}else{newArray.push(part)}});return newArray},xmlparse:function xmlparse(content,xmltags){var matches=tagMatcher(content,xmltags.text,xmltags.other);var cursor=0;var parsed=matches.reduce(function(parsed,match){var value=content.substr(cursor,match.offset-cursor);if(value.length>0){parsed.push({type:\"content\",value:value})}cursor=match.offset+match.value.length;delete match.offset;if(match.value.length>0){parsed.push(match)}return parsed},[]);var value=content.substr(cursor);if(value.length>0){parsed.push({type:\"content\",value:value})}return parsed}}},{\"./doc-utils\":1,\"./errors\":2}],5:[function(require,module,exports){\"use strict\";function memoize(func){var stringifyJson=JSON.stringify,cache={};function cachedfun(){var hash=stringifyJson(arguments);return hash in cache?cache[hash]:cache[hash]=func.apply(this,arguments)}return cachedfun}module.exports=memoize},{}],6:[function(require,module,exports){\"use strict\";function getMinFromArrays(arrays,state){var minIndex=-1;for(var i=0,l=arrays.length;i<l;i++){if(state[i]>=arrays[i].length){continue}if(minIndex===-1||arrays[i][state[i]].offset<arrays[minIndex][state[minIndex]].offset){minIndex=i}}if(minIndex===-1){throw new Error(\"minIndex negative\")}return minIndex}module.exports=function(arrays){var totalLength=arrays.reduce(function(sum,array){return sum+array.length},0);arrays=arrays.filter(function(array){return array.length>0});var resultArray=new Array(totalLength);var state=arrays.map(function(){return 0});var i=0;while(i<=totalLength-1){var arrayIndex=getMinFromArrays(arrays,state);resultArray[i]=arrays[arrayIndex][state[arrayIndex]];state[arrayIndex]++;i++}return resultArray}},{}],7:[function(require,module,exports){\"use strict\";function emptyFun(){}function identity(i){return i}module.exports=function(module){var defaults={set:emptyFun,parse:emptyFun,render:emptyFun,getTraits:emptyFun,optionsTransformer:identity,getRenderedMap:identity,postparse:identity};if(Object.keys(defaults).every(function(key){return!module[key]})){throw new Error(\"This module cannot be wrapped, because it doesn't define any of the necessary functions\")}Object.keys(defaults).forEach(function(key){module[key]=module[key]||defaults[key]});return module}},{}],8:[function(require,module,exports){\"use strict\";var traitName=\"expandPair\";var mergeSort=require(\"../mergesort\");var DocUtils=require(\"../doc-utils\");var wrapper=require(\"../module-wrapper\");var _require=require(\"../traits\"),getExpandToDefault=_require.getExpandToDefault;var Errors=require(\"../errors\");function throwUnmatchedLoopException(options){var location=options.location;var t=location===\"start\"?\"unclosed\":\"unopened\";var T=location===\"start\"?\"Unclosed\":\"Unopened\";var err=new Errors.XTTemplateError(T+\" loop\");var tag=options.part.value;err.properties={id:t+\"_loop\",explanation:\"The loop with tag \"+tag+\" is \"+t,xtag:tag};throw err}function throwClosingTagNotMatchOpeningTag(options){var tags=options.tags;var err=new Errors.XTTemplateError(\"Closing tag does not match opening tag\");err.properties={id:\"closing_tag_does_not_match_opening_tag\",explanation:'The tag \"'+tags[0].value+'\" is closed by the tag \"'+tags[1].value+'\"',openingtag:tags[0].value,closingtag:tags[1].value};throw err}function getOpenCountChange(part){switch(part.location){case\"start\":return 1;case\"end\":return-1;default:throw new Error(\"Location should be one of 'start' or 'end' (given : \"+part.location+\")\")}}function getPairs(traits){if(traits.length===0){return[]}var countOpen=1;var firstTrait=traits[0];for(var i=1;i<traits.length;i++){var currentTrait=traits[i];countOpen+=getOpenCountChange(currentTrait.part);if(countOpen===0){if(currentTrait.part.value!==firstTrait.part.value&&currentTrait.part.value!==\"\"){throwClosingTagNotMatchOpeningTag({tags:[firstTrait.part,currentTrait.part]})}var outer=getPairs(traits.slice(i+1));return[[firstTrait,currentTrait]].concat(outer)}}var part=firstTrait.part;throwUnmatchedLoopException({part:part,location:part.location})}var expandPairTrait={name:\"ExpandPairTrait\",postparse:function postparse(parsed,_ref){var getTraits=_ref.getTraits,_postparse=_ref.postparse;var traits=getTraits(traitName,parsed);traits=traits.map(function(trait){return trait||[]});traits=mergeSort(traits);var pairs=getPairs(traits);var expandedPairs=pairs.map(function(pair){var expandTo=pair[0].part.expandTo;if(expandTo===\"auto\"){expandTo=getExpandToDefault(parsed.slice(pair[0].offset,pair[1].offset))}if(!expandTo){return[pair[0].offset,pair[1].offset]}var left=DocUtils.getLeft(parsed,expandTo,pair[0].offset);var right=DocUtils.getRight(parsed,expandTo,pair[1].offset);return[left,right]});var currentPairIndex=0;var innerParts=void 0;return parsed.reduce(function(newParsed,part,i){var inPair=currentPairIndex<pairs.length&&expandedPairs[currentPairIndex][0]<=i;var pair=pairs[currentPairIndex];var expandedPair=expandedPairs[currentPairIndex];if(!inPair){newParsed.push(part);return newParsed}if(expandedPair[0]===i){innerParts=[]}if(pair[0].offset!==i&&pair[1].offset!==i){innerParts.push(part)}if(expandedPair[1]===i){var basePart=parsed[pair[0].offset];delete basePart.location;delete basePart.expandTo;basePart.subparsed=_postparse(innerParts);newParsed.push(basePart);currentPairIndex++}return newParsed},[])}};module.exports=function(){return wrapper(expandPairTrait)}},{\"../doc-utils\":1,\"../errors\":2,\"../mergesort\":6,\"../module-wrapper\":7,\"../traits\":16}],9:[function(require,module,exports){\"use strict\";var DocUtils=require(\"../doc-utils\");var dashInnerRegex=/^-([^\\s]+)\\s(.+)$/;var wrapper=require(\"../module-wrapper\");var moduleName=\"loop\";var loopModule={name:\"LoopModule\",parse:function parse(placeHolderContent){var module=moduleName;var type=\"placeholder\";if(placeHolderContent[0]===\"#\"){return{type:type,value:placeHolderContent.substr(1),expandTo:\"auto\",module:module,location:\"start\",inverted:false}}if(placeHolderContent[0]===\"^\"){return{type:type,value:placeHolderContent.substr(1),expandTo:\"auto\",module:module,location:\"start\",inverted:true}}if(placeHolderContent[0]===\"/\"){return{type:type,value:placeHolderContent.substr(1),module:module,location:\"end\"}}if(placeHolderContent[0]===\"-\"){var value=placeHolderContent.replace(dashInnerRegex,\"$2\");var expandTo=placeHolderContent.replace(dashInnerRegex,\"$1\");return{type:type,value:value,expandTo:expandTo,module:module,location:\"start\",inverted:false}}return null},getTraits:function getTraits(traitName,parsed){if(traitName!==\"expandPair\"){return}return parsed.reduce(function(tags,part,offset){if(part.type===\"placeholder\"&&part.module===moduleName){tags.push({part:part,offset:offset})}return tags},[])},render:function render(part,options){if(!part.type===\"placeholder\"||part.module!==moduleName){return null}var totalValue=[];function loopOver(scope){var scopeManager=options.scopeManager.createSubScopeManager(scope,part.value);totalValue.push(options.render(DocUtils.mergeObjects({},options,{compiled:part.subparsed,tags:{},scopeManager:scopeManager})))}options.scopeManager.loopOver(part.value,loopOver,part.inverted);return{value:totalValue.join(\"\")}}};module.exports=function(){return wrapper(loopModule)}},{\"../doc-utils\":1,\"../module-wrapper\":7}],10:[function(require,module,exports){\"use strict\";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\")}}var DocUtils=require(\"../doc-utils\");var Errors=require(\"../errors\");var moduleName=\"rawxml\";var wrapper=require(\"../module-wrapper\");function throwRawTagShouldBeOnlyTextInParagraph(options){var err=new Errors.XTTemplateError(\"Raw tag should be the only text in paragraph\");var tag=options.part.value;err.properties={id:\"raw_xml_tag_should_be_only_text_in_paragraph\",explanation:\"The tag \"+tag,xtag:options.part.value,paragraphParts:options.paragraphParts};throw err}function getInner(_ref){var part=_ref.part,left=_ref.left,right=_ref.right,postparsed=_ref.postparsed,index=_ref.index;var paragraphParts=postparsed.slice(left+1,right);paragraphParts.forEach(function(p,i){if(i===index-left-1){return}if(p.type===\"placeholder\"||p.type===\"content\"&&p.position===\"insidetag\"){throwRawTagShouldBeOnlyTextInParagraph({paragraphParts:paragraphParts,part:part})}});return part}var RawXmlModule=function(){function RawXmlModule(){_classCallCheck(this,RawXmlModule);this.name=\"RawXmlModule\"}_createClass(RawXmlModule,[{key:\"optionsTransformer\",value:function optionsTransformer(options,docxtemplater){this.fileTypeConfig=docxtemplater.fileTypeConfig;return options}},{key:\"parse\",value:function parse(placeHolderContent){var type=\"placeholder\";if(placeHolderContent[0]!==\"@\"){return null}return{type:type,value:placeHolderContent.substr(1),module:moduleName}}},{key:\"postparse\",value:function postparse(parsed){return DocUtils.traits.expandToOne(parsed,{moduleName:moduleName,getInner:getInner,expandTo:this.fileTypeConfig.tagRawXml})}},{key:\"render\",value:function render(part,options){if(part.module!==moduleName){return null}var value=options.scopeManager.getValue(part.value);if(value==null){value=options.nullGetter(part)}return{value:value}}}]);return RawXmlModule}();module.exports=function(){return wrapper(new RawXmlModule)}},{\"../doc-utils\":1,\"../errors\":2,\"../module-wrapper\":7}],11:[function(require,module,exports){\"use strict\";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\")}}var wrapper=require(\"../module-wrapper\");var Render=function(){function Render(){_classCallCheck(this,Render);this.name=\"Render\"}_createClass(Render,[{key:\"set\",value:function set(obj){if(obj.compiled){this.compiled=obj.compiled}if(obj.data!=null){this.data=obj.data}}},{key:\"getRenderedMap\",value:function getRenderedMap(mapper){var _this=this;return Object.keys(this.compiled).reduce(function(mapper,from){mapper[from]={from:from,data:_this.data};return mapper},mapper)}}]);return Render}();module.exports=function(){return wrapper(new Render)}},{\"../module-wrapper\":7}],12:[function(require,module,exports){\"use strict\";var wrapper=require(\"../module-wrapper\");var spacePreserve={name:\"SpacePreserveModule\",postparse:function postparse(parsed){var chunk=[];var inChunk=false;var result=parsed.reduce(function(parsed,part){if(part.type===\"tag\"&&part.position===\"start\"&&part.text&&part.value===\"<w:t>\"){inChunk=true}if(inChunk){if(part.type===\"placeholder\"&&!part.module){chunk[0].value='<w:t xml:space=\"preserve\">'}chunk.push(part)}else{parsed.push(part)}if(part.type===\"tag\"&&part.position===\"end\"&&part.text&&part.value===\"</w:t>\"){Array.prototype.push.apply(parsed,chunk);inChunk=false;chunk=[]}return parsed},[]);Array.prototype.push.apply(result,chunk);return result}};module.exports=function(){return wrapper(spacePreserve)}},{\"../module-wrapper\":7}],13:[function(require,module,exports){\"use strict\";var DocUtils=require(\"./doc-utils\");var parser={postparse:function postparse(parsed,modules){function getTraits(traitName,parsed){return modules.map(function(module){return module.getTraits(traitName,parsed)})}function postparse(parsed){return modules.reduce(function(parsed,module){return module.postparse(parsed,{postparse:postparse,getTraits:getTraits})},parsed)}return postparse(parsed)},parse:function parse(lexed,modules){function moduleParse(placeHolderContent,parsed){var moduleParsed=void 0;for(var i=0,l=modules.length;i<l;i++){var _module=modules[i];moduleParsed=_module.parse(placeHolderContent);if(moduleParsed){parsed.push(moduleParsed);return moduleParsed}}return null}var inPlaceHolder=false;var placeHolderContent=void 0;var tailParts=[];return lexed.reduce(function(parsed,token){if(token.type===\"delimiter\"){inPlaceHolder=token.position===\"start\";if(token.position===\"end\"){placeHolderContent=DocUtils.wordToUtf8(placeHolderContent);if(!moduleParse(placeHolderContent,parsed)){parsed.push({type:\"placeholder\",value:placeHolderContent})}Array.prototype.push.apply(parsed,tailParts);tailParts=[];return parsed}placeHolderContent=\"\";return parsed}if(inPlaceHolder){if(token.type===\"content\"&&token.position===\"insidetag\"){placeHolderContent+=token.value}else{tailParts.push(token)}return parsed}parsed.push(token);return parsed},[])}};module.exports=parser},{\"./doc-utils\":1}],14:[function(require,module,exports){\"use strict\";var ScopeManager=require(\"./scope-manager\");var DocUtils=require(\"./doc-utils\");function moduleRender(part,options){var moduleRendered=void 0;for(var i=0,l=options.modules.length;i<l;i++){var _module=options.modules[i];moduleRendered=_module.render(part,options);if(moduleRendered){return moduleRendered}}return false}function render(options){options.render=render;options.modules=options.modules;if(!options.scopeManager){options.scopeManager=ScopeManager.createBaseScopeManager(options)}return options.compiled.map(function(part){var moduleRendered=moduleRender(part,options);if(moduleRendered){return moduleRendered.value}if(part.type===\"placeholder\"){var value=options.scopeManager.getValue(part.value);if(value==null){value=options.nullGetter(part)}return DocUtils.utf8ToWord(value)}if(part.type===\"content\"||part.type===\"tag\"){return part.value}throw new Error('Unimplemented tag type \"'+part.type+'\"')}).join(\"\")}module.exports=render},{\"./doc-utils\":1,\"./scope-manager\":15}],15:[function(require,module,exports){\"use strict\";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\")}}var Errors=require(\"./errors\");var ScopeManager=function(){function ScopeManager(options){_classCallCheck(this,ScopeManager);this.scopePath=options.scopePath;this.scopeList=options.scopeList;this.parser=options.parser}_createClass(ScopeManager,[{key:\"loopOver\",value:function loopOver(tag,callback,inverted){inverted=inverted||false;return this.loopOverValue(this.getValue(tag),callback,inverted)}},{key:\"functorIfInverted\",value:function functorIfInverted(inverted,functor,value){if(inverted){functor(value)}}},{key:\"isValueFalsy\",value:function isValueFalsy(value,type){return value==null||!value||type===\"[object Array]\"&&value.length===0}},{key:\"loopOverValue\",value:function loopOverValue(value,functor,inverted){var type=Object.prototype.toString.call(value);var currentValue=this.scopeList[this.num];if(this.isValueFalsy(value,type)){return this.functorIfInverted(inverted,functor,currentValue)}if(type===\"[object Array]\"){for(var i=0,scope;i<value.length;i++){scope=value[i];this.functorIfInverted(!inverted,functor,scope)}return}if(type===\"[object Object]\"){return this.functorIfInverted(!inverted,functor,value)}if(value===true){return this.functorIfInverted(!inverted,functor,currentValue)}}},{key:\"getValue\",value:function getValue(tag,num){this.num=num==null?this.scopeList.length-1:num;var err=void 0;var parser=void 0;var result=void 0;var scope=this.scopeList[this.num];try{parser=this.parser(tag)}catch(error){err=new Errors.XTScopeParserError(\"Scope parser compilation failed\");err.properties={id:\"scopeparser_compilation_failed\",tag:tag,explanation:\"The scope parser for the tag \"+tag+\" failed to compile\",rootError:error};throw err}try{result=parser.get(scope,{num:this.num,scopeList:this.scopeList})}catch(error){err=new Errors.XTScopeParserError(\"Scope parser execution failed\");err.properties={id:\"scopeparser_execution_failed\",explanation:\"The scope parser for the tag \"+tag+\" failed to execute\",scope:scope,tag:tag,rootError:error};throw err}if(result==null&&this.num>0){return this.getValue(tag,this.num-1)}return result}},{key:\"createSubScopeManager\",value:function createSubScopeManager(scope,tag){var options={scopePath:this.scopePath.slice(0),scopeList:this.scopeList.slice(0)};options.parser=this.parser;options.scopeList=this.scopeList.concat(scope);options.scopePath=this.scopePath.concat(tag);return new ScopeManager(options)}}]);return ScopeManager}();ScopeManager.createBaseScopeManager=function(_ref){var parser=_ref.parser,tags=_ref.tags;var options={parser:parser,tags:tags};options.scopePath=[];options.scopeList=[tags];return new ScopeManager(options)};module.exports=ScopeManager},{\"./errors\":2}],16:[function(require,module,exports){\"use strict\";var DocUtils=require(\"./doc-utils\");var Errors=require(\"./errors\");function throwRawTagNotInParagraph(options){var err=new Errors.XTTemplateError(\"Raw tag not in paragraph\");var tag=options.part.value;err.properties={id:\"raw_tag_outerxml_invalid\",explanation:'The tag \"'+tag+'\"',rootError:options.rootError,xtag:tag,postparsed:options.postparsed,expandTo:options.expandTo,index:options.index};throw err}function lastTagIsOpenTag(array,tag){if(array.length===0){return false}var lastTag=array[array.length-1];var innerLastTag=lastTag.tag.substr(1);var innerCurrentTag=tag.substr(2,tag.length-3);return innerLastTag.indexOf(innerCurrentTag)===0}function addTag(array,tag){array.push({tag:tag});return array}function getListXmlElements(parts){var tags=parts.filter(function(part){return part.type===\"tag\"}).map(function(part){return part.value});var result=[];for(var i=0,tag;i<tags.length;i++){tag=tags[i];if(tag[1]===\"/\"){if(lastTagIsOpenTag(result,tag)){result.pop()}else{result=addTag(result,tag)}}else if(tag[tag.length-1]!==\"/\"){result=addTag(result,tag)}}return result}function getExpandToDefault(parts){var xmlElements=getListXmlElements(parts);for(var i=0;i<xmlElements.length;i++){var xmlElement=xmlElements[i];if(xmlElement.tag.indexOf(\"<w:tc\")===0){return\"w:tr\"}if(xmlElement.tag.indexOf(\"<a:tc\")===0){return\"a:tr\"}}return false}function expandOne(part,postparsed,options){var expandTo=part.expandTo||options.expandTo;var index=postparsed.indexOf(part);if(!expandTo){return postparsed}var right=void 0,left=void 0;try{right=DocUtils.getRight(postparsed,expandTo,index);left=DocUtils.getLeft(postparsed,expandTo,index)}catch(rootError){if(rootError instanceof Errors.XTTemplateError){throwRawTagNotInParagraph({part:part,rootError:rootError,postparsed:postparsed,expandTo:expandTo,index:index})}throw rootError}var leftParts=postparsed.slice(left,index);var rightParts=postparsed.slice(index+1,right+1);var inner=options.getInner({index:index,part:part,leftParts:leftParts,rightParts:rightParts,left:left,right:right,postparsed:postparsed});if(!inner.length){inner.expanded=[leftParts,rightParts];inner=[inner]}return DocUtils.concatArrays([postparsed.slice(0,left),inner,postparsed.slice(right+1)])}function expandToOne(postparsed,options){var expandToElements=postparsed.reduce(function(elements,part){if(part.type===\"placeholder\"&&part.module===options.moduleName){elements.push(part)}return elements},[]);expandToElements.forEach(function(part){postparsed=expandOne(part,postparsed,options)});return postparsed}module.exports={expandToOne:expandToOne,getExpandToDefault:getExpandToDefault}},{\"./doc-utils\":1,\"./errors\":2}],17:[function(require,module,exports){\"use strict\";var DocUtils=require(\"./doc-utils\");var memoize=require(\"./memoize\");function handleRecursiveCase(res){function replacerUnshift(){var pn={array:Array.prototype.slice.call(arguments)};pn.array.shift();var match=pn.array[0]+pn.array[1];pn.array.unshift(match);pn.array.pop();var offset=pn.array.pop();pn.offset=offset;pn.first=true;res.matches.unshift(pn);res.charactersAdded.unshift(0);return res.charactersAddedCumulative.unshift(0)}if(res.content.indexOf(\"<\")===-1&&res.content.indexOf(\">\")===-1){res.content.replace(/^()([^<>]*)$/,replacerUnshift)}var r=new RegExp(\"^()([^<]+)</(?:\"+res.tagsXmlArrayJoined+\")>\");res.content.replace(r,replacerUnshift);function replacerPush(){var pn={array:Array.prototype.slice.call(arguments)};pn.array.pop();var offset=pn.array.pop();pn.offset=offset;pn.last=true;res.matches.push(pn);res.charactersAdded.push(0);return res.charactersAddedCumulative.push(0)}r=new RegExp(\"(<(?:\"+res.tagsXmlArrayJoined+\")[^>]*>)([^>]+)$\");res.content.replace(r,replacerPush);return res}function xmlMatcher(content,tagsXmlArray){var res={};res.content=content;res.tagsXmlArray=tagsXmlArray;res.tagsXmlArrayJoined=res.tagsXmlArray.join(\"|\");var regexp=new RegExp(\"(<(?:\"+res.tagsXmlArrayJoined+\")[^>]*>)([^<>]*)</(?:\"+res.tagsXmlArrayJoined+\")>\",\"g\");res.matches=DocUtils.pregMatchAll(regexp,res.content);res.charactersAddedCumulative=res.matches.map(function(){return 0});res.charactersAdded=res.matches.map(function(){return 0});return handleRecursiveCase(res)}var memoized=memoize(xmlMatcher);module.exports=function(content,tagsXmlArray){return DocUtils.cloneDeep(memoized(content,tagsXmlArray))}},{\"./doc-utils\":1,\"./memoize\":5}],18:[function(require,module,exports){\"use strict\";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\")}}var DocUtils=require(\"./doc-utils\");var ScopeManager=require(\"./scope-manager\");var xmlMatcher=require(\"./xml-matcher\");var Errors=require(\"./errors\");var Lexer=require(\"./lexer\");var Parser=require(\"./parser.js\");var _render=require(\"./render.js\");function _getFullText(content,tagsXmlArray){var matcher=xmlMatcher(content,tagsXmlArray);var result=matcher.matches.map(function(match){return match.array[2]});return DocUtils.wordToUtf8(DocUtils.convertSpaces(result.join(\"\")))}module.exports=function(){function XmlTemplater(content,options){_classCallCheck(this,XmlTemplater);this.fromJson(options);this.setModules({inspect:{filePath:this.filePath}});this.load(content)}_createClass(XmlTemplater,[{key:\"load\",value:function load(content){if(typeof content!==\"string\"){var err=new Errors.XTInternalError(\"Content must be a string\");err.properties.id=\"xmltemplater_content_must_be_string\";throw err}this.content=content}},{key:\"setTags\",value:function setTags(tags){this.tags=tags!=null?tags:{};this.scopeManager=ScopeManager.createBaseScopeManager({tags:this.tags,parser:this.parser});return this}},{key:\"fromJson\",value:function fromJson(options){this.filePath=options.filePath;this.modules=options.modules;this.fileTypeConfig=options.fileTypeConfig;Object.keys(DocUtils.defaults).map(function(key){this[key]=options[key]!=null?options[key]:DocUtils.defaults[key]},this)}},{key:\"getFullText\",value:function getFullText(){return _getFullText(this.content,this.fileTypeConfig.tagsXmlTextArray)}},{key:\"setModules\",value:function setModules(obj){this.modules.forEach(function(module){module.set(obj)})}},{key:\"parse\",value:function parse(){this.xmllexed=Lexer.xmlparse(this.content,{text:this.fileTypeConfig.tagsXmlTextArray,other:this.fileTypeConfig.tagsXmlLexedArray});this.setModules({inspect:{xmllexed:this.xmllexed}});this.lexed=Lexer.parse(this.xmllexed,this.delimiters);this.setModules({inspect:{lexed:this.lexed}});this.parsed=Parser.parse(this.lexed,this.modules);this.setModules({inspect:{parsed:this.parsed}});this.postparsed=Parser.postparse(this.parsed,this.modules);return this}},{key:\"render\",value:function render(to){this.filePath=to;this.setModules({inspect:{postparsed:this.postparsed}});this.content=_render({compiled:this.postparsed,tags:this.tags,modules:this.modules,parser:this.parser,nullGetter:this.nullGetter,filePath:this.filePath});this.setModules({inspect:{content:this.content}});return this}}]);return XmlTemplater}()},{\"./doc-utils\":1,\"./errors\":2,\"./lexer\":4,\"./parser.js\":13,\"./render.js\":14,\"./scope-manager\":15,\"./xml-matcher\":17}],19:[function(require,module,exports){function DOMParser(options){this.options=options||{locator:{}}}DOMParser.prototype.parseFromString=function(source,mimeType){var options=this.options;var sax=new XMLReader;var domBuilder=options.domBuilder||new DOMHandler;var errorHandler=options.errorHandler;var locator=options.locator;var defaultNSMap=options.xmlns||{};var entityMap={lt:\"<\",gt:\">\",amp:\"&\",quot:'\"',apos:\"'\"};if(locator){domBuilder.setDocumentLocator(locator)}sax.errorHandler=buildErrorHandler(errorHandler,domBuilder,locator);sax.domBuilder=options.domBuilder||domBuilder;if(/\\/x?html?$/.test(mimeType)){entityMap.nbsp=\" \";entityMap.copy=\"©\";defaultNSMap[\"\"]=\"http://www.w3.org/1999/xhtml\"}defaultNSMap.xml=defaultNSMap.xml||\"http://www.w3.org/XML/1998/namespace\";if(source){sax.parse(source,defaultNSMap,entityMap)}else{sax.errorHandler.error(\"invalid doc source\")}return domBuilder.doc};function buildErrorHandler(errorImpl,domBuilder,locator){if(!errorImpl){if(domBuilder instanceof DOMHandler){return domBuilder}errorImpl=domBuilder}var errorHandler={};var isCallback=errorImpl instanceof Function;locator=locator||{};function build(key){var fn=errorImpl[key];if(!fn&&isCallback){fn=errorImpl.length==2?function(msg){errorImpl(key,msg)}:errorImpl}errorHandler[key]=fn&&function(msg){fn(\"[xmldom \"+key+\"]\\t\"+msg+_locator(locator))}||function(){}}build(\"warning\");build(\"error\");build(\"fatalError\");return errorHandler}function DOMHandler(){this.cdata=false}function position(locator,node){node.lineNumber=locator.lineNumber;node.columnNumber=locator.columnNumber}DOMHandler.prototype={startDocument:function(){this.doc=(new DOMImplementation).createDocument(null,null,null);if(this.locator){this.doc.documentURI=this.locator.systemId}},startElement:function(namespaceURI,localName,qName,attrs){var doc=this.doc;var el=doc.createElementNS(namespaceURI,qName||localName);var len=attrs.length;appendElement(this,el);this.currentElement=el;this.locator&&position(this.locator,el);for(var i=0;i<len;i++){var namespaceURI=attrs.getURI(i);var value=attrs.getValue(i);var qName=attrs.getQName(i);var attr=doc.createAttributeNS(namespaceURI,qName);this.locator&&position(attrs.getLocator(i),attr);attr.value=attr.nodeValue=value;el.setAttributeNode(attr)}},endElement:function(namespaceURI,localName,qName){var current=this.currentElement;var tagName=current.tagName;this.currentElement=current.parentNode},startPrefixMapping:function(prefix,uri){},endPrefixMapping:function(prefix){},processingInstruction:function(target,data){var ins=this.doc.createProcessingInstruction(target,data);this.locator&&position(this.locator,ins);appendElement(this,ins)},ignorableWhitespace:function(ch,start,length){},characters:function(chars,start,length){chars=_toString.apply(this,arguments);if(chars){if(this.cdata){var charNode=this.doc.createCDATASection(chars)}else{var charNode=this.doc.createTextNode(chars)}if(this.currentElement){this.currentElement.appendChild(charNode)}else if(/^\\s*$/.test(chars)){this.doc.appendChild(charNode)}this.locator&&position(this.locator,charNode)}},skippedEntity:function(name){},endDocument:function(){this.doc.normalize()},setDocumentLocator:function(locator){if(this.locator=locator){locator.lineNumber=0}},comment:function(chars,start,length){chars=_toString.apply(this,arguments);var comm=this.doc.createComment(chars);this.locator&&position(this.locator,comm);appendElement(this,comm)},startCDATA:function(){this.cdata=true},endCDATA:function(){this.cdata=false},startDTD:function(name,publicId,systemId){var impl=this.doc.implementation;if(impl&&impl.createDocumentType){var dt=impl.createDocumentType(name,publicId,systemId);this.locator&&position(this.locator,dt);appendElement(this,dt)}},warning:function(error){console.warn(\"[xmldom warning]\\t\"+error,_locator(this.locator))},error:function(error){console.error(\"[xmldom error]\\t\"+error,_locator(this.locator))},fatalError:function(error){console.error(\"[xmldom fatalError]\\t\"+error,_locator(this.locator));throw error}};function _locator(l){if(l){return\"\\n@\"+(l.systemId||\"\")+\"#[line:\"+l.lineNumber+\",col:\"+l.columnNumber+\"]\"}}function _toString(chars,start,length){if(typeof chars==\"string\"){return chars.substr(start,length)}else{if(chars.length>=start+length||start){return new java.lang.String(chars,start,length)+\"\"}return chars}}\"endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl\".replace(/\\w+/g,function(key){DOMHandler.prototype[key]=function(){return null}});function appendElement(hander,node){if(!hander.currentElement){hander.doc.appendChild(node)}else{hander.currentElement.appendChild(node)}}var XMLReader=require(\"./sax\").XMLReader;var DOMImplementation=exports.DOMImplementation=require(\"./dom\").DOMImplementation;exports.XMLSerializer=require(\"./dom\").XMLSerializer;exports.DOMParser=DOMParser},{\"./dom\":20,\"./sax\":21}],20:[function(require,module,exports){function copy(src,dest){for(var p in src){dest[p]=src[p]}}function _extends(Class,Super){var pt=Class.prototype;if(Object.create){var ppt=Object.create(Super.prototype);pt.__proto__=ppt}if(!(pt instanceof Super)){function t(){}t.prototype=Super.prototype;t=new t;copy(pt,t);Class.prototype=pt=t}if(pt.constructor!=Class){if(typeof Class!=\"function\"){console.error(\"unknow Class:\"+Class)}pt.constructor=Class}}var htmlns=\"http://www.w3.org/1999/xhtml\";var NodeType={};var ELEMENT_NODE=NodeType.ELEMENT_NODE=1;var ATTRIBUTE_NODE=NodeType.ATTRIBUTE_NODE=2;var TEXT_NODE=NodeType.TEXT_NODE=3;var CDATA_SECTION_NODE=NodeType.CDATA_SECTION_NODE=4;var ENTITY_REFERENCE_NODE=NodeType.ENTITY_REFERENCE_NODE=5;var ENTITY_NODE=NodeType.ENTITY_NODE=6;var PROCESSING_INSTRUCTION_NODE=NodeType.PROCESSING_INSTRUCTION_NODE=7;var COMMENT_NODE=NodeType.COMMENT_NODE=8;var DOCUMENT_NODE=NodeType.DOCUMENT_NODE=9;var DOCUMENT_TYPE_NODE=NodeType.DOCUMENT_TYPE_NODE=10;var DOCUMENT_FRAGMENT_NODE=NodeType.DOCUMENT_FRAGMENT_NODE=11;var NOTATION_NODE=NodeType.NOTATION_NODE=12;var ExceptionCode={};var ExceptionMessage={};var INDEX_SIZE_ERR=ExceptionCode.INDEX_SIZE_ERR=(ExceptionMessage[1]=\"Index size error\",1);var DOMSTRING_SIZE_ERR=ExceptionCode.DOMSTRING_SIZE_ERR=(ExceptionMessage[2]=\"DOMString size error\",2);var HIERARCHY_REQUEST_ERR=ExceptionCode.HIERARCHY_REQUEST_ERR=(ExceptionMessage[3]=\"Hierarchy request error\",3);var WRONG_DOCUMENT_ERR=ExceptionCode.WRONG_DOCUMENT_ERR=(ExceptionMessage[4]=\"Wrong document\",4);var INVALID_CHARACTER_ERR=ExceptionCode.INVALID_CHARACTER_ERR=(ExceptionMessage[5]=\"Invalid character\",5);var NO_DATA_ALLOWED_ERR=ExceptionCode.NO_DATA_ALLOWED_ERR=(ExceptionMessage[6]=\"No data allowed\",6);var NO_MODIFICATION_ALLOWED_ERR=ExceptionCode.NO_MODIFICATION_ALLOWED_ERR=(ExceptionMessage[7]=\"No modification allowed\",7);var NOT_FOUND_ERR=ExceptionCode.NOT_FOUND_ERR=(ExceptionMessage[8]=\"Not found\",8);var NOT_SUPPORTED_ERR=ExceptionCode.NOT_SUPPORTED_ERR=(ExceptionMessage[9]=\"Not supported\",9);var INUSE_ATTRIBUTE_ERR=ExceptionCode.INUSE_ATTRIBUTE_ERR=(ExceptionMessage[10]=\"Attribute in use\",10);var INVALID_STATE_ERR=ExceptionCode.INVALID_STATE_ERR=(ExceptionMessage[11]=\"Invalid state\",11);var SYNTAX_ERR=ExceptionCode.SYNTAX_ERR=(ExceptionMessage[12]=\"Syntax error\",12);var INVALID_MODIFICATION_ERR=ExceptionCode.INVALID_MODIFICATION_ERR=(ExceptionMessage[13]=\"Invalid modification\",13);var NAMESPACE_ERR=ExceptionCode.NAMESPACE_ERR=(ExceptionMessage[14]=\"Invalid namespace\",14);var INVALID_ACCESS_ERR=ExceptionCode.INVALID_ACCESS_ERR=(ExceptionMessage[15]=\"Invalid access\",15);function DOMException(code,message){if(message instanceof Error){var error=message}else{error=this;Error.call(this,ExceptionMessage[code]);this.message=ExceptionMessage[code];if(Error.captureStackTrace)Error.captureStackTrace(this,DOMException)}error.code=code;if(message)this.message=this.message+\": \"+message;return error}DOMException.prototype=Error.prototype;copy(ExceptionCode,DOMException);function NodeList(){}NodeList.prototype={length:0,item:function(index){return this[index]||null},toString:function(isHTML,nodeFilter){for(var buf=[],i=0;i<this.length;i++){serializeToString(this[i],buf,isHTML,nodeFilter)}return buf.join(\"\")}};function LiveNodeList(node,refresh){this._node=node;this._refresh=refresh;_updateLiveList(this)}function _updateLiveList(list){var inc=list._node._inc||list._node.ownerDocument._inc;if(list._inc!=inc){var ls=list._refresh(list._node);__set__(list,\"length\",ls.length);copy(ls,list);list._inc=inc}}LiveNodeList.prototype.item=function(i){_updateLiveList(this);return this[i]};_extends(LiveNodeList,NodeList);function NamedNodeMap(){}function _findNodeIndex(list,node){var i=list.length;while(i--){if(list[i]===node){return i}}}function _addNamedNode(el,list,newAttr,oldAttr){if(oldAttr){list[_findNodeIndex(list,oldAttr)]=newAttr}else{list[list.length++]=newAttr}if(el){newAttr.ownerElement=el;var doc=el.ownerDocument;if(doc){oldAttr&&_onRemoveAttribute(doc,el,oldAttr);_onAddAttribute(doc,el,newAttr)}}}function _removeNamedNode(el,list,attr){var i=_findNodeIndex(list,attr);if(i>=0){var lastIndex=list.length-1;while(i<lastIndex){list[i]=list[++i]}list.length=lastIndex;if(el){var doc=el.ownerDocument;if(doc){_onRemoveAttribute(doc,el,attr);attr.ownerElement=null}}}else{throw DOMException(NOT_FOUND_ERR,new Error(el.tagName+\"@\"+attr))}}NamedNodeMap.prototype={length:0,item:NodeList.prototype.item,getNamedItem:function(key){var i=this.length;while(i--){var attr=this[i];if(attr.nodeName==key){return attr}}},setNamedItem:function(attr){var el=attr.ownerElement;if(el&&el!=this._ownerElement){throw new DOMException(INUSE_ATTRIBUTE_ERR)}var oldAttr=this.getNamedItem(attr.nodeName);_addNamedNode(this._ownerElement,this,attr,oldAttr);return oldAttr},setNamedItemNS:function(attr){var el=attr.ownerElement,oldAttr;if(el&&el!=this._ownerElement){throw new DOMException(INUSE_ATTRIBUTE_ERR)}oldAttr=this.getNamedItemNS(attr.namespaceURI,attr.localName);_addNamedNode(this._ownerElement,this,attr,oldAttr);return oldAttr},removeNamedItem:function(key){var attr=this.getNamedItem(key);_removeNamedNode(this._ownerElement,this,attr);return attr},removeNamedItemNS:function(namespaceURI,localName){var attr=this.getNamedItemNS(namespaceURI,localName);_removeNamedNode(this._ownerElement,this,attr);return attr},getNamedItemNS:function(namespaceURI,localName){var i=this.length;while(i--){var node=this[i];if(node.localName==localName&&node.namespaceURI==namespaceURI){return node}}return null}};function DOMImplementation(features){this._features={};if(features){for(var feature in features){this._features=features[feature]}}}DOMImplementation.prototype={hasFeature:function(feature,version){var versions=this._features[feature.toLowerCase()];if(versions&&(!version||version in versions)){return true}else{return false}},createDocument:function(namespaceURI,qualifiedName,doctype){var doc=new Document;doc.implementation=this;doc.childNodes=new NodeList;doc.doctype=doctype;if(doctype){doc.appendChild(doctype)}if(qualifiedName){var root=doc.createElementNS(namespaceURI,qualifiedName);doc.appendChild(root)}return doc},createDocumentType:function(qualifiedName,publicId,systemId){var node=new DocumentType;node.name=qualifiedName;node.nodeName=qualifiedName;node.publicId=publicId;node.systemId=systemId;return node}};function Node(){}Node.prototype={firstChild:null,lastChild:null,previousSibling:null,nextSibling:null,attributes:null,parentNode:null,childNodes:null,ownerDocument:null,nodeValue:null,namespaceURI:null,prefix:null,localName:null,insertBefore:function(newChild,refChild){return _insertBefore(this,newChild,refChild)},replaceChild:function(newChild,oldChild){this.insertBefore(newChild,oldChild);if(oldChild){this.removeChild(oldChild)}},removeChild:function(oldChild){return _removeChild(this,oldChild)},appendChild:function(newChild){return this.insertBefore(newChild,null)},hasChildNodes:function(){return this.firstChild!=null},cloneNode:function(deep){return cloneNode(this.ownerDocument||this,this,deep)},normalize:function(){var child=this.firstChild;while(child){var next=child.nextSibling;if(next&&next.nodeType==TEXT_NODE&&child.nodeType==TEXT_NODE){this.removeChild(next);child.appendData(next.data)}else{child.normalize();child=next}}},isSupported:function(feature,version){return this.ownerDocument.implementation.hasFeature(feature,version)},hasAttributes:function(){return this.attributes.length>0},lookupPrefix:function(namespaceURI){var el=this;while(el){var map=el._nsMap;if(map){for(var n in map){if(map[n]==namespaceURI){return n}}}el=el.nodeType==ATTRIBUTE_NODE?el.ownerDocument:el.parentNode}return null},lookupNamespaceURI:function(prefix){var el=this;while(el){var map=el._nsMap;if(map){if(prefix in map){return map[prefix]}}el=el.nodeType==ATTRIBUTE_NODE?el.ownerDocument:el.parentNode}return null},isDefaultNamespace:function(namespaceURI){var prefix=this.lookupPrefix(namespaceURI);return prefix==null}};function _xmlEncoder(c){return c==\"<\"&&\"&lt;\"||c==\">\"&&\"&gt;\"||c==\"&\"&&\"&amp;\"||c=='\"'&&\"&quot;\"||\"&#\"+c.charCodeAt()+\";\"}copy(NodeType,Node);copy(NodeType,Node.prototype);function _visitNode(node,callback){if(callback(node)){return true}if(node=node.firstChild){do{if(_visitNode(node,callback)){return true}}while(node=node.nextSibling)}}function Document(){}function _onAddAttribute(doc,el,newAttr){doc&&doc._inc++;var ns=newAttr.namespaceURI;if(ns==\"http://www.w3.org/2000/xmlns/\"){el._nsMap[newAttr.prefix?newAttr.localName:\"\"]=newAttr.value}}function _onRemoveAttribute(doc,el,newAttr,remove){doc&&doc._inc++;var ns=newAttr.namespaceURI;if(ns==\"http://www.w3.org/2000/xmlns/\"){delete el._nsMap[newAttr.prefix?newAttr.localName:\"\"]}}function _onUpdateChild(doc,el,newChild){if(doc&&doc._inc){doc._inc++;var cs=el.childNodes;if(newChild){cs[cs.length++]=newChild}else{var child=el.firstChild;var i=0;while(child){cs[i++]=child;child=child.nextSibling}cs.length=i}}}function _removeChild(parentNode,child){var previous=child.previousSibling;var next=child.nextSibling;if(previous){previous.nextSibling=next}else{parentNode.firstChild=next}if(next){next.previousSibling=previous}else{parentNode.lastChild=previous}_onUpdateChild(parentNode.ownerDocument,parentNode);return child}function _insertBefore(parentNode,newChild,nextChild){var cp=newChild.parentNode;if(cp){cp.removeChild(newChild)}if(newChild.nodeType===DOCUMENT_FRAGMENT_NODE){var newFirst=newChild.firstChild;if(newFirst==null){return newChild}var newLast=newChild.lastChild}else{newFirst=newLast=newChild}var pre=nextChild?nextChild.previousSibling:parentNode.lastChild;newFirst.previousSibling=pre;newLast.nextSibling=nextChild;if(pre){pre.nextSibling=newFirst}else{parentNode.firstChild=newFirst}if(nextChild==null){parentNode.lastChild=newLast}else{nextChild.previousSibling=newLast}do{newFirst.parentNode=parentNode}while(newFirst!==newLast&&(newFirst=newFirst.nextSibling));_onUpdateChild(parentNode.ownerDocument||parentNode,parentNode);if(newChild.nodeType==DOCUMENT_FRAGMENT_NODE){newChild.firstChild=newChild.lastChild=null}return newChild}function _appendSingleChild(parentNode,newChild){var cp=newChild.parentNode;if(cp){var pre=parentNode.lastChild;cp.removeChild(newChild);var pre=parentNode.lastChild}var pre=parentNode.lastChild;newChild.parentNode=parentNode;newChild.previousSibling=pre;newChild.nextSibling=null;if(pre){pre.nextSibling=newChild}else{parentNode.firstChild=newChild}parentNode.lastChild=newChild;_onUpdateChild(parentNode.ownerDocument,parentNode,newChild);return newChild}Document.prototype={nodeName:\"#document\",nodeType:DOCUMENT_NODE,doctype:null,documentElement:null,_inc:1,insertBefore:function(newChild,refChild){if(newChild.nodeType==DOCUMENT_FRAGMENT_NODE){var child=newChild.firstChild;while(child){var next=child.nextSibling;this.insertBefore(child,refChild);child=next}return newChild}if(this.documentElement==null&&newChild.nodeType==ELEMENT_NODE){this.documentElement=newChild}return _insertBefore(this,newChild,refChild),newChild.ownerDocument=this,newChild},removeChild:function(oldChild){if(this.documentElement==oldChild){this.documentElement=null}return _removeChild(this,oldChild)},importNode:function(importedNode,deep){return importNode(this,importedNode,deep)},getElementById:function(id){var rtv=null;_visitNode(this.documentElement,function(node){if(node.nodeType==ELEMENT_NODE){if(node.getAttribute(\"id\")==id){rtv=node;return true}}});return rtv},createElement:function(tagName){var node=new Element;node.ownerDocument=this;node.nodeName=tagName;node.tagName=tagName;node.childNodes=new NodeList;var attrs=node.attributes=new NamedNodeMap;attrs._ownerElement=node;return node},createDocumentFragment:function(){var node=new DocumentFragment;node.ownerDocument=this;node.childNodes=new NodeList;return node},createTextNode:function(data){var node=new Text;node.ownerDocument=this;node.appendData(data);return node},createComment:function(data){var node=new Comment;node.ownerDocument=this;node.appendData(data);return node},createCDATASection:function(data){var node=new CDATASection;node.ownerDocument=this;node.appendData(data);return node},createProcessingInstruction:function(target,data){var node=new ProcessingInstruction;node.ownerDocument=this;node.tagName=node.target=target;node.nodeValue=node.data=data;return node},createAttribute:function(name){var node=new Attr;node.ownerDocument=this;node.name=name;node.nodeName=name;node.localName=name;node.specified=true;return node},createEntityReference:function(name){var node=new EntityReference;node.ownerDocument=this;node.nodeName=name;return node},createElementNS:function(namespaceURI,qualifiedName){var node=new Element;var pl=qualifiedName.split(\":\");var attrs=node.attributes=new NamedNodeMap;node.childNodes=new NodeList;node.ownerDocument=this;node.nodeName=qualifiedName;node.tagName=qualifiedName;node.namespaceURI=namespaceURI;if(pl.length==2){node.prefix=pl[0];node.localName=pl[1]}else{node.localName=qualifiedName}attrs._ownerElement=node;return node},createAttributeNS:function(namespaceURI,qualifiedName){var node=new Attr;var pl=qualifiedName.split(\":\");node.ownerDocument=this;node.nodeName=qualifiedName;node.name=qualifiedName;node.namespaceURI=namespaceURI;node.specified=true;if(pl.length==2){node.prefix=pl[0];node.localName=pl[1]}else{node.localName=qualifiedName}return node}};_extends(Document,Node);function Element(){this._nsMap={}}Element.prototype={nodeType:ELEMENT_NODE,hasAttribute:function(name){return this.getAttributeNode(name)!=null},getAttribute:function(name){var attr=this.getAttributeNode(name);return attr&&attr.value||\"\"},getAttributeNode:function(name){return this.attributes.getNamedItem(name)},setAttribute:function(name,value){var attr=this.ownerDocument.createAttribute(name);attr.value=attr.nodeValue=\"\"+value;this.setAttributeNode(attr)},removeAttribute:function(name){var attr=this.getAttributeNode(name);attr&&this.removeAttributeNode(attr)},appendChild:function(newChild){if(newChild.nodeType===DOCUMENT_FRAGMENT_NODE){return this.insertBefore(newChild,null)}else{return _appendSingleChild(this,newChild)}},setAttributeNode:function(newAttr){return this.attributes.setNamedItem(newAttr)},setAttributeNodeNS:function(newAttr){return this.attributes.setNamedItemNS(newAttr)},removeAttributeNode:function(oldAttr){return this.attributes.removeNamedItem(oldAttr.nodeName)},removeAttributeNS:function(namespaceURI,localName){var old=this.getAttributeNodeNS(namespaceURI,localName);old&&this.removeAttributeNode(old)},hasAttributeNS:function(namespaceURI,localName){return this.getAttributeNodeNS(namespaceURI,localName)!=null},getAttributeNS:function(namespaceURI,localName){var attr=this.getAttributeNodeNS(namespaceURI,localName);return attr&&attr.value||\"\"},setAttributeNS:function(namespaceURI,qualifiedName,value){var attr=this.ownerDocument.createAttributeNS(namespaceURI,qualifiedName);attr.value=attr.nodeValue=\"\"+value;this.setAttributeNode(attr)},getAttributeNodeNS:function(namespaceURI,localName){return this.attributes.getNamedItemNS(namespaceURI,localName)},getElementsByTagName:function(tagName){return new LiveNodeList(this,function(base){var ls=[];_visitNode(base,function(node){if(node!==base&&node.nodeType==ELEMENT_NODE&&(tagName===\"*\"||node.tagName==tagName)){ls.push(node)}});return ls})},getElementsByTagNameNS:function(namespaceURI,localName){return new LiveNodeList(this,function(base){var ls=[];_visitNode(base,function(node){if(node!==base&&node.nodeType===ELEMENT_NODE&&(namespaceURI===\"*\"||node.namespaceURI===namespaceURI)&&(localName===\"*\"||node.localName==localName)){ls.push(node)}});return ls})}};Document.prototype.getElementsByTagName=Element.prototype.getElementsByTagName;Document.prototype.getElementsByTagNameNS=Element.prototype.getElementsByTagNameNS;_extends(Element,Node);function Attr(){}Attr.prototype.nodeType=ATTRIBUTE_NODE;_extends(Attr,Node);function CharacterData(){}CharacterData.prototype={data:\"\",substringData:function(offset,count){return this.data.substring(offset,offset+count)},appendData:function(text){text=this.data+text;this.nodeValue=this.data=text;this.length=text.length},insertData:function(offset,text){this.replaceData(offset,0,text)},appendChild:function(newChild){throw new Error(ExceptionMessage[HIERARCHY_REQUEST_ERR])},deleteData:function(offset,count){this.replaceData(offset,count,\"\")},replaceData:function(offset,count,text){var start=this.data.substring(0,offset);var end=this.data.substring(offset+count);text=start+text+end;this.nodeValue=this.data=text;this.length=text.length}};_extends(CharacterData,Node);function Text(){}Text.prototype={nodeName:\"#text\",nodeType:TEXT_NODE,splitText:function(offset){var text=this.data;var newText=text.substring(offset);text=text.substring(0,offset);this.data=this.nodeValue=text;this.length=text.length;var newNode=this.ownerDocument.createTextNode(newText);if(this.parentNode){this.parentNode.insertBefore(newNode,this.nextSibling)}return newNode}};_extends(Text,CharacterData);function Comment(){}Comment.prototype={nodeName:\"#comment\",nodeType:COMMENT_NODE};_extends(Comment,CharacterData);function CDATASection(){}CDATASection.prototype={nodeName:\"#cdata-section\",nodeType:CDATA_SECTION_NODE};_extends(CDATASection,CharacterData);function DocumentType(){}DocumentType.prototype.nodeType=DOCUMENT_TYPE_NODE;_extends(DocumentType,Node);function Notation(){}Notation.prototype.nodeType=NOTATION_NODE;_extends(Notation,Node);function Entity(){}Entity.prototype.nodeType=ENTITY_NODE;_extends(Entity,Node);function EntityReference(){}EntityReference.prototype.nodeType=ENTITY_REFERENCE_NODE;_extends(EntityReference,Node);function DocumentFragment(){}DocumentFragment.prototype.nodeName=\"#document-fragment\";DocumentFragment.prototype.nodeType=DOCUMENT_FRAGMENT_NODE;_extends(DocumentFragment,Node);function ProcessingInstruction(){}ProcessingInstruction.prototype.nodeType=PROCESSING_INSTRUCTION_NODE;_extends(ProcessingInstruction,Node);function XMLSerializer(){}XMLSerializer.prototype.serializeToString=function(node,isHtml,nodeFilter){return nodeSerializeToString.call(node,isHtml,nodeFilter)};Node.prototype.toString=nodeSerializeToString;function nodeSerializeToString(isHtml,nodeFilter){var buf=[];var refNode=this.nodeType==9?this.documentElement:this;var prefix=refNode.prefix;var uri=refNode.namespaceURI;if(uri&&prefix==null){var prefix=refNode.lookupPrefix(uri);if(prefix==null){var visibleNamespaces=[{namespace:uri,prefix:null}]}}serializeToString(this,buf,isHtml,nodeFilter,visibleNamespaces);return buf.join(\"\")}function needNamespaceDefine(node,isHTML,visibleNamespaces){var prefix=node.prefix||\"\";var uri=node.namespaceURI;if(!prefix&&!uri){return false}if(prefix===\"xml\"&&uri===\"http://www.w3.org/XML/1998/namespace\"||uri==\"http://www.w3.org/2000/xmlns/\"){return false}var i=visibleNamespaces.length;while(i--){var ns=visibleNamespaces[i];if(ns.prefix==prefix){return ns.namespace!=uri}}return true}function serializeToString(node,buf,isHTML,nodeFilter,visibleNamespaces){if(nodeFilter){node=nodeFilter(node);if(node){if(typeof node==\"string\"){buf.push(node);return}}else{return}}switch(node.nodeType){case ELEMENT_NODE:if(!visibleNamespaces)visibleNamespaces=[];var startVisibleNamespaces=visibleNamespaces.length;var attrs=node.attributes;var len=attrs.length;var child=node.firstChild;var nodeName=node.tagName;isHTML=htmlns===node.namespaceURI||isHTML;buf.push(\"<\",nodeName);for(var i=0;i<len;i++){var attr=attrs.item(i);if(attr.prefix==\"xmlns\"){visibleNamespaces.push({prefix:attr.localName,namespace:attr.value})}else if(attr.nodeName==\"xmlns\"){visibleNamespaces.push({prefix:\"\",namespace:attr.value})}}for(var i=0;i<len;i++){var attr=attrs.item(i);if(needNamespaceDefine(attr,isHTML,visibleNamespaces)){var prefix=attr.prefix||\"\";var uri=attr.namespaceURI;var ns=prefix?\" xmlns:\"+prefix:\" xmlns\";buf.push(ns,'=\"',uri,'\"');visibleNamespaces.push({prefix:prefix,namespace:uri})}serializeToString(attr,buf,isHTML,nodeFilter,visibleNamespaces)}if(needNamespaceDefine(node,isHTML,visibleNamespaces)){var prefix=node.prefix||\"\";var uri=node.namespaceURI;var ns=prefix?\" xmlns:\"+prefix:\" xmlns\";buf.push(ns,'=\"',uri,'\"');visibleNamespaces.push({prefix:prefix,namespace:uri})}if(child||isHTML&&!/^(?:meta|link|img|br|hr|input)$/i.test(nodeName)){buf.push(\">\");if(isHTML&&/^script$/i.test(nodeName)){while(child){if(child.data){buf.push(child.data)}else{serializeToString(child,buf,isHTML,nodeFilter,visibleNamespaces)}child=child.nextSibling}}else{while(child){serializeToString(child,buf,isHTML,nodeFilter,visibleNamespaces);child=child.nextSibling}}buf.push(\"</\",nodeName,\">\")}else{buf.push(\"/>\")}return;case DOCUMENT_NODE:case DOCUMENT_FRAGMENT_NODE:var child=node.firstChild;while(child){serializeToString(child,buf,isHTML,nodeFilter,visibleNamespaces);child=child.nextSibling}return;case ATTRIBUTE_NODE:return buf.push(\" \",node.name,'=\"',node.value.replace(/[<&\"]/g,_xmlEncoder),'\"');case TEXT_NODE:return buf.push(node.data.replace(/[<&]/g,_xmlEncoder));case CDATA_SECTION_NODE:return buf.push(\"<![CDATA[\",node.data,\"]]>\");case COMMENT_NODE:return buf.push(\"\\x3c!--\",node.data,\"--\\x3e\");case DOCUMENT_TYPE_NODE:var pubid=node.publicId;var sysid=node.systemId;buf.push(\"<!DOCTYPE \",node.name);if(pubid){buf.push(' PUBLIC \"',pubid);if(sysid&&sysid!=\".\"){buf.push('\" \"',sysid)}buf.push('\">')}else if(sysid&&sysid!=\".\"){buf.push(' SYSTEM \"',sysid,'\">')}else{var sub=node.internalSubset;if(sub){buf.push(\" [\",sub,\"]\")}buf.push(\">\")}return;case PROCESSING_INSTRUCTION_NODE:return buf.push(\"<?\",node.target,\" \",node.data,\"?>\");case ENTITY_REFERENCE_NODE:return buf.push(\"&\",node.nodeName,\";\");default:buf.push(\"??\",node.nodeName)}}function importNode(doc,node,deep){var node2;switch(node.nodeType){case ELEMENT_NODE:node2=node.cloneNode(false);node2.ownerDocument=doc;case DOCUMENT_FRAGMENT_NODE:break;case ATTRIBUTE_NODE:deep=true;break}if(!node2){node2=node.cloneNode(false)}node2.ownerDocument=doc;node2.parentNode=null;if(deep){var child=node.firstChild;while(child){node2.appendChild(importNode(doc,child,deep));child=child.nextSibling}}return node2}function cloneNode(doc,node,deep){var node2=new node.constructor;for(var n in node){var v=node[n];if(typeof v!=\"object\"){if(v!=node2[n]){node2[n]=v}}}if(node.childNodes){node2.childNodes=new NodeList}node2.ownerDocument=doc;switch(node2.nodeType){case ELEMENT_NODE:var attrs=node.attributes;var attrs2=node2.attributes=new NamedNodeMap;var len=attrs.length;attrs2._ownerElement=node2;for(var i=0;i<len;i++){node2.setAttributeNode(cloneNode(doc,attrs.item(i),true))}break;case ATTRIBUTE_NODE:deep=true}if(deep){var child=node.firstChild;while(child){node2.appendChild(cloneNode(doc,child,deep));child=child.nextSibling}}return node2}function __set__(object,key,value){object[key]=value}try{if(Object.defineProperty){Object.defineProperty(LiveNodeList.prototype,\"length\",{get:function(){_updateLiveList(this);return this.$$length}});Object.defineProperty(Node.prototype,\"textContent\",{get:function(){return getTextContent(this)},set:function(data){switch(this.nodeType){case ELEMENT_NODE:case DOCUMENT_FRAGMENT_NODE:while(this.firstChild){this.removeChild(this.firstChild)}if(data||String(data)){this.appendChild(this.ownerDocument.createTextNode(data))}break;default:this.data=data;this.value=data;this.nodeValue=data}}});function getTextContent(node){switch(node.nodeType){case ELEMENT_NODE:case DOCUMENT_FRAGMENT_NODE:var buf=[];node=node.firstChild;while(node){if(node.nodeType!==7&&node.nodeType!==8){buf.push(getTextContent(node))}node=node.nextSibling}return buf.join(\"\");default:return node.nodeValue}}__set__=function(object,key,value){object[\"$$\"+key]=value}}}catch(e){}exports.DOMImplementation=DOMImplementation;exports.XMLSerializer=XMLSerializer},{}],21:[function(require,module,exports){var nameStartChar=/[A-Z_a-z\\xC0-\\xD6\\xD8-\\xF6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/;var nameChar=new RegExp(\"[\\\\-\\\\.0-9\"+nameStartChar.source.slice(1,-1)+\"\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040]\");var tagNamePattern=new RegExp(\"^\"+nameStartChar.source+nameChar.source+\"*(?::\"+nameStartChar.source+nameChar.source+\"*)?$\");var S_TAG=0;var S_ATTR=1;var S_ATTR_SPACE=2;var S_EQ=3;var S_ATTR_NOQUOT_VALUE=4;var S_ATTR_END=5;var S_TAG_SPACE=6;var S_TAG_CLOSE=7;function XMLReader(){}XMLReader.prototype={parse:function(source,defaultNSMap,entityMap){var domBuilder=this.domBuilder;domBuilder.startDocument();_copy(defaultNSMap,defaultNSMap={});parse(source,defaultNSMap,entityMap,domBuilder,this.errorHandler);domBuilder.endDocument()}};function parse(source,defaultNSMapCopy,entityMap,domBuilder,errorHandler){function fixedFromCharCode(code){if(code>65535){code-=65536;var surrogate1=55296+(code>>10),surrogate2=56320+(code&1023);return String.fromCharCode(surrogate1,surrogate2)}else{return String.fromCharCode(code)}}function entityReplacer(a){var k=a.slice(1,-1);if(k in entityMap){return entityMap[k]}else if(k.charAt(0)===\"#\"){return fixedFromCharCode(parseInt(k.substr(1).replace(\"x\",\"0x\")))}else{errorHandler.error(\"entity not found:\"+a);return a}}function appendText(end){if(end>start){var xt=source.substring(start,end).replace(/&#?\\w+;/g,entityReplacer);locator&&position(start);domBuilder.characters(xt,0,end-start);start=end}}function position(p,m){while(p>=lineEnd&&(m=linePattern.exec(source))){lineStart=m.index;lineEnd=lineStart+m[0].length;locator.lineNumber++}locator.columnNumber=p-lineStart+1}var lineStart=0;var lineEnd=0;var linePattern=/.*(?:\\r\\n?|\\n)|.*$/g;var locator=domBuilder.locator;var parseStack=[{currentNSMap:defaultNSMapCopy}];var closeMap={};var start=0;while(true){try{var tagStart=source.indexOf(\"<\",start);if(tagStart<0){if(!source.substr(start).match(/^\\s*$/)){var doc=domBuilder.doc;var text=doc.createTextNode(source.substr(start));doc.appendChild(text);domBuilder.currentElement=text}return}if(tagStart>start){appendText(tagStart)}switch(source.charAt(tagStart+1)){case\"/\":var end=source.indexOf(\">\",tagStart+3);var tagName=source.substring(tagStart+2,end);var config=parseStack.pop();if(end<0){tagName=source.substring(tagStart+2).replace(/[\\s<].*/,\"\");errorHandler.error(\"end tag name: \"+tagName+\" is not complete:\"+config.tagName);end=tagStart+1+tagName.length}else if(tagName.match(/\\s</)){tagName=tagName.replace(/[\\s<].*/,\"\");errorHandler.error(\"end tag name: \"+tagName+\" maybe not complete\");end=tagStart+1+tagName.length}var localNSMap=config.localNSMap;var endMatch=config.tagName==tagName;var endIgnoreCaseMach=endMatch||config.tagName&&config.tagName.toLowerCase()==tagName.toLowerCase();if(endIgnoreCaseMach){domBuilder.endElement(config.uri,config.localName,tagName);if(localNSMap){for(var prefix in localNSMap){domBuilder.endPrefixMapping(prefix)}}if(!endMatch){errorHandler.fatalError(\"end tag name: \"+tagName+\" is not match the current start tagName:\"+config.tagName)}}else{parseStack.push(config)}end++;break;case\"?\":locator&&position(tagStart);end=parseInstruction(source,tagStart,domBuilder);break;case\"!\":locator&&position(tagStart);end=parseDCC(source,tagStart,domBuilder,errorHandler);break;default:locator&&position(tagStart);var el=new ElementAttributes;var currentNSMap=parseStack[parseStack.length-1].currentNSMap;var end=parseElementStartPart(source,tagStart,el,currentNSMap,entityReplacer,errorHandler);var len=el.length;if(!el.closed&&fixSelfClosed(source,end,el.tagName,closeMap)){el.closed=true;if(!entityMap.nbsp){errorHandler.warning(\"unclosed xml attribute\")}}if(locator&&len){var locator2=copyLocator(locator,{});for(var i=0;i<len;i++){var a=el[i];position(a.offset);a.locator=copyLocator(locator,{})}domBuilder.locator=locator2;if(appendElement(el,domBuilder,currentNSMap)){parseStack.push(el)}domBuilder.locator=locator}else{if(appendElement(el,domBuilder,currentNSMap)){parseStack.push(el)}}if(el.uri===\"http://www.w3.org/1999/xhtml\"&&!el.closed){end=parseHtmlSpecialContent(source,end,el.tagName,entityReplacer,domBuilder)}else{end++}}}catch(e){errorHandler.error(\"element parse error: \"+e);end=-1}if(end>start){start=end}else{appendText(Math.max(tagStart,start)+1)}}}function copyLocator(f,t){t.lineNumber=f.lineNumber;t.columnNumber=f.columnNumber;return t}function parseElementStartPart(source,start,el,currentNSMap,entityReplacer,errorHandler){var attrName;var value;var p=++start;var s=S_TAG;while(true){var c=source.charAt(p);switch(c){case\"=\":if(s===S_ATTR){attrName=source.slice(start,p);s=S_EQ}else if(s===S_ATTR_SPACE){s=S_EQ}else{throw new Error(\"attribute equal must after attrName\")}break;case\"'\":case'\"':if(s===S_EQ||s===S_ATTR){if(s===S_ATTR){errorHandler.warning('attribute value must after \"=\"');attrName=source.slice(start,p)}start=p+1;p=source.indexOf(c,start);if(p>0){value=source.slice(start,p).replace(/&#?\\w+;/g,entityReplacer);el.add(attrName,value,start-1);s=S_ATTR_END}else{throw new Error(\"attribute value no end '\"+c+\"' match\")}}else if(s==S_ATTR_NOQUOT_VALUE){value=source.slice(start,p).replace(/&#?\\w+;/g,entityReplacer);el.add(attrName,value,start);errorHandler.warning('attribute \"'+attrName+'\" missed start quot('+c+\")!!\");start=p+1;s=S_ATTR_END}else{throw new Error('attribute value must after \"=\"')}break;case\"/\":switch(s){case S_TAG:el.setTagName(source.slice(start,p));case S_ATTR_END:case S_TAG_SPACE:case S_TAG_CLOSE:s=S_TAG_CLOSE;el.closed=true;case S_ATTR_NOQUOT_VALUE:case S_ATTR:case S_ATTR_SPACE:break;default:throw new Error(\"attribute invalid close char('/')\")}break;case\"\":errorHandler.error(\"unexpected end of input\");if(s==S_TAG){el.setTagName(source.slice(start,p))}return p;case\">\":switch(s){case S_TAG:el.setTagName(source.slice(start,p));case S_ATTR_END:case S_TAG_SPACE:case S_TAG_CLOSE:break;case S_ATTR_NOQUOT_VALUE:case S_ATTR:value=source.slice(start,p);if(value.slice(-1)===\"/\"){el.closed=true;value=value.slice(0,-1)}case S_ATTR_SPACE:if(s===S_ATTR_SPACE){value=attrName}if(s==S_ATTR_NOQUOT_VALUE){errorHandler.warning('attribute \"'+value+'\" missed quot(\")!!');el.add(attrName,value.replace(/&#?\\w+;/g,entityReplacer),start)}else{if(currentNSMap[\"\"]!==\"http://www.w3.org/1999/xhtml\"||!value.match(/^(?:disabled|checked|selected)$/i)){errorHandler.warning('attribute \"'+value+'\" missed value!! \"'+value+'\" instead!!')}el.add(value,value,start)}break;case S_EQ:throw new Error(\"attribute value missed!!\")}return p;case\"\":c=\" \";default:if(c<=\" \"){switch(s){case S_TAG:el.setTagName(source.slice(start,p));s=S_TAG_SPACE;break;case S_ATTR:attrName=source.slice(start,p);s=S_ATTR_SPACE;break;case S_ATTR_NOQUOT_VALUE:var value=source.slice(start,p).replace(/&#?\\w+;/g,entityReplacer);errorHandler.warning('attribute \"'+value+'\" missed quot(\")!!');el.add(attrName,value,start);case S_ATTR_END:s=S_TAG_SPACE;break}}else{switch(s){case S_ATTR_SPACE:var tagName=el.tagName;if(currentNSMap[\"\"]!==\"http://www.w3.org/1999/xhtml\"||!attrName.match(/^(?:disabled|checked|selected)$/i)){errorHandler.warning('attribute \"'+attrName+'\" missed value!! \"'+attrName+'\" instead2!!')}el.add(attrName,attrName,start);start=p;s=S_ATTR;break;case S_ATTR_END:errorHandler.warning('attribute space is required\"'+attrName+'\"!!');case S_TAG_SPACE:s=S_ATTR;start=p;break;case S_EQ:s=S_ATTR_NOQUOT_VALUE;start=p;break;case S_TAG_CLOSE:throw new Error(\"elements closed character '/' and '>' must be connected to\")}}}p++}}function appendElement(el,domBuilder,currentNSMap){var tagName=el.tagName;var localNSMap=null;var i=el.length;while(i--){var a=el[i];var qName=a.qName;var value=a.value;var nsp=qName.indexOf(\":\");if(nsp>0){var prefix=a.prefix=qName.slice(0,nsp);var localName=qName.slice(nsp+1);var nsPrefix=prefix===\"xmlns\"&&localName}else{localName=qName;prefix=null;nsPrefix=qName===\"xmlns\"&&\"\"}a.localName=localName;if(nsPrefix!==false){if(localNSMap==null){localNSMap={};_copy(currentNSMap,currentNSMap={})}currentNSMap[nsPrefix]=localNSMap[nsPrefix]=value;a.uri=\"http://www.w3.org/2000/xmlns/\";domBuilder.startPrefixMapping(nsPrefix,value)}}var i=el.length;while(i--){a=el[i];var prefix=a.prefix;if(prefix){if(prefix===\"xml\"){a.uri=\"http://www.w3.org/XML/1998/namespace\"}if(prefix!==\"xmlns\"){a.uri=currentNSMap[prefix||\"\"]}}}var nsp=tagName.indexOf(\":\");if(nsp>0){prefix=el.prefix=tagName.slice(0,nsp);localName=el.localName=tagName.slice(nsp+1)}else{prefix=null;localName=el.localName=tagName}var ns=el.uri=currentNSMap[prefix||\"\"];domBuilder.startElement(ns,localName,tagName,el);if(el.closed){domBuilder.endElement(ns,localName,tagName);if(localNSMap){for(prefix in localNSMap){domBuilder.endPrefixMapping(prefix)}}}else{el.currentNSMap=currentNSMap;el.localNSMap=localNSMap;return true}}function parseHtmlSpecialContent(source,elStartEnd,tagName,entityReplacer,domBuilder){if(/^(?:script|textarea)$/i.test(tagName)){var elEndStart=source.indexOf(\"</\"+tagName+\">\",elStartEnd);var text=source.substring(elStartEnd+1,elEndStart);if(/[&<]/.test(text)){if(/^script$/i.test(tagName)){domBuilder.characters(text,0,text.length);return elEndStart}text=text.replace(/&#?\\w+;/g,entityReplacer);domBuilder.characters(text,0,text.length);return elEndStart}}return elStartEnd+1}function fixSelfClosed(source,elStartEnd,tagName,closeMap){var pos=closeMap[tagName];if(pos==null){pos=source.lastIndexOf(\"</\"+tagName+\">\");if(pos<elStartEnd){pos=source.lastIndexOf(\"</\"+tagName)}closeMap[tagName]=pos}return pos<elStartEnd}function _copy(source,target){for(var n in source){target[n]=source[n]}}function parseDCC(source,start,domBuilder,errorHandler){var next=source.charAt(start+2);switch(next){case\"-\":if(source.charAt(start+3)===\"-\"){var end=source.indexOf(\"--\\x3e\",start+4);if(end>start){domBuilder.comment(source,start+4,end-start-4);return end+3}else{errorHandler.error(\"Unclosed comment\");return-1}}else{return-1}default:if(source.substr(start+3,6)==\"CDATA[\"){var end=source.indexOf(\"]]>\",start+9);domBuilder.startCDATA();domBuilder.characters(source,start+9,end-start-9);domBuilder.endCDATA();return end+3}var matchs=split(source,start);var len=matchs.length;if(len>1&&/!doctype/i.test(matchs[0][0])){var name=matchs[1][0];var pubid=len>3&&/^public$/i.test(matchs[2][0])&&matchs[3][0];var sysid=len>4&&matchs[4][0];var lastMatch=matchs[len-1];domBuilder.startDTD(name,pubid&&pubid.replace(/^(['\"])(.*?)\\1$/,\"$2\"),sysid&&sysid.replace(/^(['\"])(.*?)\\1$/,\"$2\"));domBuilder.endDTD();return lastMatch.index+lastMatch[0].length}}return-1}function parseInstruction(source,start,domBuilder){var end=source.indexOf(\"?>\",start);if(end){var match=source.substring(start,end).match(/^<\\?(\\S*)\\s*([\\s\\S]*?)\\s*$/);if(match){var len=match[0].length;domBuilder.processingInstruction(match[1],match[2]);return end+2}else{return-1}}return-1}function ElementAttributes(source){}ElementAttributes.prototype={setTagName:function(tagName){if(!tagNamePattern.test(tagName)){throw new Error(\"invalid tagName:\"+tagName)}this.tagName=tagName},add:function(qName,value,offset){if(!tagNamePattern.test(qName)){throw new Error(\"invalid attribute:\"+qName)}this[this.length++]={qName:qName,value:value,offset:offset}},length:0,getLocalName:function(i){return this[i].localName},getLocator:function(i){return this[i].locator},getQName:function(i){return this[i].qName},getURI:function(i){return this[i].uri},getValue:function(i){return this[i].value}};function _set_proto_(thiz,parent){thiz.__proto__=parent;return thiz}if(!(_set_proto_({},_set_proto_.prototype)instanceof _set_proto_)){_set_proto_=function(thiz,parent){function p(){}p.prototype=parent;p=new p;for(parent in thiz){p[parent]=thiz[parent]}return p}}function split(source,start){var match;var buf=[];var reg=/'[^']+'|\"[^\"]+\"|[^\\s<>\\/=]+=?|(\\/?\\s*>|<)/g;reg.lastIndex=start;reg.exec(source);while(match=reg.exec(source)){buf.push(match);if(match[1])return buf}}exports.XMLReader=XMLReader},{}],\"/src/js/docxtemplater.js\":[function(require,module,exports){\"use strict\";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\")}}var DocUtils=require(\"./doc-utils\");DocUtils.traits=require(\"./traits\");DocUtils.moduleWrapper=require(\"./module-wrapper\");var wrapper=DocUtils.moduleWrapper;var Docxtemplater=function(){function Docxtemplater(){_classCallCheck(this,Docxtemplater);if(arguments.length>0){throw new Error(\"The constructor with parameters have been removed in docxtemplater 3.0, please check the upgrade guide.\")}this.compiled={};this.modules=[];this.setOptions({})}_createClass(Docxtemplater,[{key:\"attachModule\",value:function attachModule(module){this.modules.push(wrapper(module));return this}},{key:\"setOptions\",value:function setOptions(options){var _this=this;this.options=options;Object.keys(DocUtils.defaults).forEach(function(key){var defaultValue=DocUtils.defaults[key];_this[key]=_this.options[key]!=null?_this.options[key]:defaultValue});if(this.zip){this.updateFileTypeConfig()}return this}},{key:\"loadZip\",value:function loadZip(zip){if(zip.loadAsync){throw new Error(\"Docxtemplater doesn't handle JSZip version >=3, see changelog\")}this.zip=zip;this.updateFileTypeConfig();return this}},{key:\"compileFile\",value:function compileFile(fileName){var currentFile=this.createTemplateClass(fileName);currentFile.parse();this.compiled[fileName]=currentFile}},{key:\"compile\",value:function compile(){this.templatedFiles=this.fileTypeConfig.getTemplatedFiles(this.zip);return this}},{key:\"updateFileTypeConfig\",value:function updateFileTypeConfig(){this.fileType=this.zip.files[\"word/document.xml\"]?\"docx\":\"pptx\";this.fileTypeConfig=this.options.fileTypeConfig||Docxtemplater.FileTypeConfig[this.fileType];return this}},{key:\"render\",value:function render(){var _this2=this;this.options.xmlFileNames=[];this.modules=this.fileTypeConfig.baseModules.map(function(moduleFunction){return moduleFunction()}).concat(this.modules);this.options=this.modules.reduce(function(options,module){return module.optionsTransformer(options,_this2)},this.options);this.xmlDocuments=this.options.xmlFileNames.reduce(function(xmlDocuments,fileName){var content=_this2.zip.files[fileName].asText();xmlDocuments[fileName]=DocUtils.str2xml(content);return xmlDocuments},{});this.modules.forEach(function(module){module.set({zip:_this2.zip,xmlDocuments:_this2.xmlDocuments,data:_this2.data})});this.compile();this.modules.forEach(function(module){module.set({compiled:_this2.compiled})});this.templatedFiles.forEach(function(fileName){if(_this2.zip.files[fileName]!=null){_this2.compileFile(fileName)}});this.mapper=this.modules.reduce(function(value,module){return module.getRenderedMap(value)},{});Object.keys(this.mapper).forEach(function(to){var mapped=_this2.mapper[to];var from=mapped.from;var currentFile=_this2.compiled[from];currentFile.setTags(mapped.data);currentFile.render(to);_this2.zip.file(to,currentFile.content)});Object.keys(this.xmlDocuments).forEach(function(fileName){_this2.zip.remove(fileName);var content=DocUtils.xml2str(_this2.xmlDocuments[fileName]);return _this2.zip.file(fileName,content,{})});return this}},{key:\"setData\",value:function setData(data){this.data=data;return this}},{key:\"getZip\",value:function getZip(){return this.zip}},{key:\"createTemplateClass\",value:function createTemplateClass(path){var usedData=this.zip.files[path].asText();return this.createTemplateClassFromContent(usedData,path)}},{key:\"createTemplateClassFromContent\",value:function createTemplateClassFromContent(content,filePath){var _this3=this;var xmltOptions={filePath:filePath};Object.keys(DocUtils.defaults).forEach(function(key){xmltOptions[key]=_this3[key]});xmltOptions.fileTypeConfig=this.fileTypeConfig;xmltOptions.modules=this.modules;return new Docxtemplater.XmlTemplater(content,xmltOptions)}},{key:\"getFullText\",value:function getFullText(path){return this.createTemplateClass(path||this.fileTypeConfig.textPath).getFullText()}},{key:\"getTemplatedFiles\",value:function getTemplatedFiles(){this.compile();return this.templatedFiles}}]);return Docxtemplater}();Docxtemplater.DocUtils=require(\"./doc-utils\");Docxtemplater.Errors=require(\"./errors\");Docxtemplater.XmlTemplater=require(\"./xml-templater\");Docxtemplater.FileTypeConfig=require(\"./file-type-config\");Docxtemplater.XmlMatcher=require(\"./xml-matcher\");module.exports=Docxtemplater},{\"./doc-utils\":1,\"./errors\":2,\"./file-type-config\":3,\"./module-wrapper\":7,\"./traits\":16,\"./xml-matcher\":17,\"./xml-templater\":18}]},{},[])(\"/src/js/docxtemplater.js\")});","/*!\n\nJSZip - A Javascript class for generating and reading zip files\n<http://stuartk.com/jszip>\n\n(c) 2009-2014 Stuart Knightley <stuart [at] stuartk.com>\nDual licenced under the MIT license or GPLv3. See https://raw.github.com/Stuk/jszip/master/LICENSE.markdown.\n\nJSZip uses the library pako released under the MIT license :\nhttps://github.com/nodeca/pako/blob/master/LICENSE\n*/\n!function(a){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=a();else if(\"function\"==typeof define&&define.amd)define([],a);else{var b;b=\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:this,b.JSZip=a()}}(function(){return function a(b,c,d){function e(g,h){if(!c[g]){if(!b[g]){var i=\"function\"==typeof require&&require;if(!h&&i)return i(g,!0);if(f)return f(g,!0);var j=new Error(\"Cannot find module '\"+g+\"'\");throw j.code=\"MODULE_NOT_FOUND\",j}var k=c[g]={exports:{}};b[g][0].call(k.exports,function(a){var c=b[g][1][a];return e(c?c:a)},k,k.exports,a,b,c,d)}return c[g].exports}for(var f=\"function\"==typeof require&&require,g=0;g<d.length;g++)e(d[g]);return e}({1:[function(a,b,c){\"use strict\";function d(a){if(a){this.data=a,this.length=this.data.length,this.index=0,this.zero=0;for(var b=0;b<this.data.length;b++)a[b]=255&a[b]}}var e=a(\"./dataReader\");d.prototype=new e,d.prototype.byteAt=function(a){return this.data[this.zero+a]},d.prototype.lastIndexOfSignature=function(a){for(var b=a.charCodeAt(0),c=a.charCodeAt(1),d=a.charCodeAt(2),e=a.charCodeAt(3),f=this.length-4;f>=0;--f)if(this.data[f]===b&&this.data[f+1]===c&&this.data[f+2]===d&&this.data[f+3]===e)return f-this.zero;return-1},d.prototype.readData=function(a){if(this.checkOffset(a),0===a)return[];var b=this.data.slice(this.zero+this.index,this.zero+this.index+a);return this.index+=a,b},b.exports=d},{\"./dataReader\":6}],2:[function(a,b,c){\"use strict\";var d=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";c.encode=function(a,b){for(var c,e,f,g,h,i,j,k=\"\",l=0;l<a.length;)c=a.charCodeAt(l++),e=a.charCodeAt(l++),f=a.charCodeAt(l++),g=c>>2,h=(3&c)<<4|e>>4,i=(15&e)<<2|f>>6,j=63&f,isNaN(e)?i=j=64:isNaN(f)&&(j=64),k=k+d.charAt(g)+d.charAt(h)+d.charAt(i)+d.charAt(j);return k},c.decode=function(a,b){var c,e,f,g,h,i,j,k=\"\",l=0;for(a=a.replace(/[^A-Za-z0-9\\+\\/\\=]/g,\"\");l<a.length;)g=d.indexOf(a.charAt(l++)),h=d.indexOf(a.charAt(l++)),i=d.indexOf(a.charAt(l++)),j=d.indexOf(a.charAt(l++)),c=g<<2|h>>4,e=(15&h)<<4|i>>2,f=(3&i)<<6|j,k+=String.fromCharCode(c),64!=i&&(k+=String.fromCharCode(e)),64!=j&&(k+=String.fromCharCode(f));return k}},{}],3:[function(a,b,c){\"use strict\";function d(){this.compressedSize=0,this.uncompressedSize=0,this.crc32=0,this.compressionMethod=null,this.compressedContent=null}d.prototype={getContent:function(){return null},getCompressedContent:function(){return null}},b.exports=d},{}],4:[function(a,b,c){\"use strict\";c.STORE={magic:\"\\0\\0\",compress:function(a,b){return a},uncompress:function(a){return a},compressInputType:null,uncompressInputType:null},c.DEFLATE=a(\"./flate\")},{\"./flate\":9}],5:[function(a,b,c){\"use strict\";var d=a(\"./utils\"),e=[0,1996959894,3993919788,2567524794,124634137,1886057615,3915621685,2657392035,249268274,2044508324,3772115230,2547177864,162941995,2125561021,3887607047,2428444049,498536548,1789927666,4089016648,2227061214,450548861,1843258603,4107580753,2211677639,325883990,1684777152,4251122042,2321926636,335633487,1661365465,4195302755,2366115317,997073096,1281953886,3579855332,2724688242,1006888145,1258607687,3524101629,2768942443,901097722,1119000684,3686517206,2898065728,853044451,1172266101,3705015759,2882616665,651767980,1373503546,3369554304,3218104598,565507253,1454621731,3485111705,3099436303,671266974,1594198024,3322730930,2970347812,795835527,1483230225,3244367275,3060149565,1994146192,31158534,2563907772,4023717930,1907459465,112637215,2680153253,3904427059,2013776290,251722036,2517215374,3775830040,2137656763,141376813,2439277719,3865271297,1802195444,476864866,2238001368,4066508878,1812370925,453092731,2181625025,4111451223,1706088902,314042704,2344532202,4240017532,1658658271,366619977,2362670323,4224994405,1303535960,984961486,2747007092,3569037538,1256170817,1037604311,2765210733,3554079995,1131014506,879679996,2909243462,3663771856,1141124467,855842277,2852801631,3708648649,1342533948,654459306,3188396048,3373015174,1466479909,544179635,3110523913,3462522015,1591671054,702138776,2966460450,3352799412,1504918807,783551873,3082640443,3233442989,3988292384,2596254646,62317068,1957810842,3939845945,2647816111,81470997,1943803523,3814918930,2489596804,225274430,2053790376,3826175755,2466906013,167816743,2097651377,4027552580,2265490386,503444072,1762050814,4150417245,2154129355,426522225,1852507879,4275313526,2312317920,282753626,1742555852,4189708143,2394877945,397917763,1622183637,3604390888,2714866558,953729732,1340076626,3518719985,2797360999,1068828381,1219638859,3624741850,2936675148,906185462,1090812512,3747672003,2825379669,829329135,1181335161,3412177804,3160834842,628085408,1382605366,3423369109,3138078467,570562233,1426400815,3317316542,2998733608,733239954,1555261956,3268935591,3050360625,752459403,1541320221,2607071920,3965973030,1969922972,40735498,2617837225,3943577151,1913087877,83908371,2512341634,3803740692,2075208622,213261112,2463272603,3855990285,2094854071,198958881,2262029012,4057260610,1759359992,534414190,2176718541,4139329115,1873836001,414664567,2282248934,4279200368,1711684554,285281116,2405801727,4167216745,1634467795,376229701,2685067896,3608007406,1308918612,956543938,2808555105,3495958263,1231636301,1047427035,2932959818,3654703836,1088359270,936918e3,2847714899,3736837829,1202900863,817233897,3183342108,3401237130,1404277552,615818150,3134207493,3453421203,1423857449,601450431,3009837614,3294710456,1567103746,711928724,3020668471,3272380065,1510334235,755167117];b.exports=function(a,b){if(\"undefined\"==typeof a||!a.length)return 0;var c=\"string\"!==d.getTypeOf(a);\"undefined\"==typeof b&&(b=0);var f=0,g=0,h=0;b^=-1;for(var i=0,j=a.length;i<j;i++)h=c?a[i]:a.charCodeAt(i),g=255&(b^h),f=e[g],b=b>>>8^f;return b^-1}},{\"./utils\":22}],6:[function(a,b,c){\"use strict\";function d(a){this.data=null,this.length=0,this.index=0,this.zero=0}var e=a(\"./utils\");d.prototype={checkOffset:function(a){this.checkIndex(this.index+a)},checkIndex:function(a){if(this.length<this.zero+a||a<0)throw new Error(\"End of data reached (data length = \"+this.length+\", asked index = \"+a+\"). Corrupted zip ?\")},setIndex:function(a){this.checkIndex(a),this.index=a},skip:function(a){this.setIndex(this.index+a)},byteAt:function(a){},readInt:function(a){var b,c=0;for(this.checkOffset(a),b=this.index+a-1;b>=this.index;b--)c=(c<<8)+this.byteAt(b);return this.index+=a,c},readString:function(a){return e.transformTo(\"string\",this.readData(a))},readData:function(a){},lastIndexOfSignature:function(a){},readDate:function(){var a=this.readInt(4);return new Date((a>>25&127)+1980,(a>>21&15)-1,a>>16&31,a>>11&31,a>>5&63,(31&a)<<1)}},b.exports=d},{\"./utils\":22}],7:[function(a,b,c){\"use strict\";c.base64=!1,c.binary=!1,c.dir=!1,c.createFolders=!1,c.date=null,c.compression=null,c.compressionOptions=null,c.comment=null,c.unixPermissions=null,c.dosPermissions=null},{}],8:[function(a,b,c){\"use strict\";var d=a(\"./utils\");c.string2binary=function(a){return d.string2binary(a)},c.string2Uint8Array=function(a){return d.transformTo(\"uint8array\",a)},c.uint8Array2String=function(a){return d.transformTo(\"string\",a)},c.string2Blob=function(a){var b=d.transformTo(\"arraybuffer\",a);return d.arrayBuffer2Blob(b)},c.arrayBuffer2Blob=function(a){return d.arrayBuffer2Blob(a)},c.transformTo=function(a,b){return d.transformTo(a,b)},c.getTypeOf=function(a){return d.getTypeOf(a)},c.checkSupport=function(a){return d.checkSupport(a)},c.MAX_VALUE_16BITS=d.MAX_VALUE_16BITS,c.MAX_VALUE_32BITS=d.MAX_VALUE_32BITS,c.pretty=function(a){return d.pretty(a)},c.findCompression=function(a){return d.findCompression(a)},c.isRegExp=function(a){return d.isRegExp(a)}},{\"./utils\":22}],9:[function(a,b,c){\"use strict\";var d=\"undefined\"!=typeof Uint8Array&&\"undefined\"!=typeof Uint16Array&&\"undefined\"!=typeof Uint32Array,e=a(\"pako\");c.uncompressInputType=d?\"uint8array\":\"array\",c.compressInputType=d?\"uint8array\":\"array\",c.magic=\"\\b\\0\",c.compress=function(a,b){return e.deflateRaw(a,{level:b.level||-1})},c.uncompress=function(a){return e.inflateRaw(a)}},{pako:25}],10:[function(a,b,c){\"use strict\";function d(a,b){return this instanceof d?(this.files={},this.comment=null,this.root=\"\",a&&this.load(a,b),void(this.clone=function(){var a=new d;for(var b in this)\"function\"!=typeof this[b]&&(a[b]=this[b]);return a})):new d(a,b)}var e=a(\"./base64\");d.prototype=a(\"./object\"),d.prototype.load=a(\"./load\"),d.support=a(\"./support\"),d.defaults=a(\"./defaults\"),d.utils=a(\"./deprecatedPublicUtils\"),d.base64={encode:function(a){return e.encode(a)},decode:function(a){return e.decode(a)}},d.compressions=a(\"./compressions\"),b.exports=d},{\"./base64\":2,\"./compressions\":4,\"./defaults\":7,\"./deprecatedPublicUtils\":8,\"./load\":11,\"./object\":14,\"./support\":18}],11:[function(a,b,c){\"use strict\";var d=a(\"./base64\"),e=a(\"./utf8\"),f=a(\"./utils\"),g=a(\"./zipEntries\");b.exports=function(a,b){var c,h,i,j;for(b=f.extend(b||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:e.utf8decode}),b.base64&&(a=d.decode(a)),h=new g(a,b),c=h.files,i=0;i<c.length;i++)j=c[i],this.file(j.fileNameStr,j.decompressed,{binary:!0,optimizedBinaryString:!0,date:j.date,dir:j.dir,comment:j.fileCommentStr.length?j.fileCommentStr:null,unixPermissions:j.unixPermissions,dosPermissions:j.dosPermissions,createFolders:b.createFolders});return h.zipComment.length&&(this.comment=h.zipComment),this}},{\"./base64\":2,\"./utf8\":21,\"./utils\":22,\"./zipEntries\":23}],12:[function(a,b,c){(function(a){\"use strict\";b.exports=function(b,c){return new a(b,c)},b.exports.test=function(b){return a.isBuffer(b)}}).call(this,\"undefined\"!=typeof Buffer?Buffer:void 0)},{}],13:[function(a,b,c){\"use strict\";function d(a){this.data=a,this.length=this.data.length,this.index=0,this.zero=0}var e=a(\"./uint8ArrayReader\");d.prototype=new e,d.prototype.readData=function(a){this.checkOffset(a);var b=this.data.slice(this.zero+this.index,this.zero+this.index+a);return this.index+=a,b},b.exports=d},{\"./uint8ArrayReader\":19}],14:[function(a,b,c){\"use strict\";var d=a(\"./support\"),e=a(\"./utils\"),f=a(\"./crc32\"),g=a(\"./signature\"),h=a(\"./defaults\"),i=a(\"./base64\"),j=a(\"./compressions\"),k=a(\"./compressedObject\"),l=a(\"./nodeBuffer\"),m=a(\"./utf8\"),n=a(\"./stringWriter\"),o=a(\"./uint8ArrayWriter\"),p=function(a){if(a._data instanceof k&&(a._data=a._data.getContent(),a.options.binary=!0,a.options.base64=!1,\"uint8array\"===e.getTypeOf(a._data))){var b=a._data;a._data=new Uint8Array(b.length),0!==b.length&&a._data.set(b,0)}return a._data},q=function(a){var b=p(a),c=e.getTypeOf(b);return\"string\"===c?!a.options.binary&&d.nodebuffer?l(b,\"utf-8\"):a.asBinary():b},r=function(a){var b=p(this);return null===b||\"undefined\"==typeof b?\"\":(this.options.base64&&(b=i.decode(b)),b=a&&this.options.binary?D.utf8decode(b):e.transformTo(\"string\",b),a||this.options.binary||(b=e.transformTo(\"string\",D.utf8encode(b))),b)},s=function(a,b,c){this.name=a,this.dir=c.dir,this.date=c.date,this.comment=c.comment,this.unixPermissions=c.unixPermissions,this.dosPermissions=c.dosPermissions,this._data=b,this.options=c,this._initialMetadata={dir:c.dir,date:c.date}};s.prototype={asText:function(){return r.call(this,!0)},asBinary:function(){return r.call(this,!1)},asNodeBuffer:function(){var a=q(this);return e.transformTo(\"nodebuffer\",a)},asUint8Array:function(){var a=q(this);return e.transformTo(\"uint8array\",a)},asArrayBuffer:function(){return this.asUint8Array().buffer}};var t=function(a,b){var c,d=\"\";for(c=0;c<b;c++)d+=String.fromCharCode(255&a),a>>>=8;return d},u=function(a){return a=a||{},a.base64!==!0||null!==a.binary&&void 0!==a.binary||(a.binary=!0),a=e.extend(a,h),a.date=a.date||new Date,null!==a.compression&&(a.compression=a.compression.toUpperCase()),a},v=function(a,b,c){var d,f=e.getTypeOf(b);if(c=u(c),\"string\"==typeof c.unixPermissions&&(c.unixPermissions=parseInt(c.unixPermissions,8)),c.unixPermissions&&16384&c.unixPermissions&&(c.dir=!0),c.dosPermissions&&16&c.dosPermissions&&(c.dir=!0),c.dir&&(a=x(a)),c.createFolders&&(d=w(a))&&y.call(this,d,!0),c.dir||null===b||\"undefined\"==typeof b)c.base64=!1,c.binary=!1,b=null,f=null;else if(\"string\"===f)c.binary&&!c.base64&&c.optimizedBinaryString!==!0&&(b=e.string2binary(b));else{if(c.base64=!1,c.binary=!0,!(f||b instanceof k))throw new Error(\"The data of '\"+a+\"' is in an unsupported format !\");\"arraybuffer\"===f&&(b=e.transformTo(\"uint8array\",b))}var g=new s(a,b,c);return this.files[a]=g,g},w=function(a){\"/\"==a.slice(-1)&&(a=a.substring(0,a.length-1));var b=a.lastIndexOf(\"/\");return b>0?a.substring(0,b):\"\"},x=function(a){return\"/\"!=a.slice(-1)&&(a+=\"/\"),a},y=function(a,b){return b=\"undefined\"!=typeof b&&b,a=x(a),this.files[a]||v.call(this,a,null,{dir:!0,createFolders:b}),this.files[a]},z=function(a,b,c){var d,g=new k;return a._data instanceof k?(g.uncompressedSize=a._data.uncompressedSize,g.crc32=a._data.crc32,0===g.uncompressedSize||a.dir?(b=j.STORE,g.compressedContent=\"\",g.crc32=0):a._data.compressionMethod===b.magic?g.compressedContent=a._data.getCompressedContent():(d=a._data.getContent(),g.compressedContent=b.compress(e.transformTo(b.compressInputType,d),c))):(d=q(a),d&&0!==d.length&&!a.dir||(b=j.STORE,d=\"\"),g.uncompressedSize=d.length,g.crc32=f(d),g.compressedContent=b.compress(e.transformTo(b.compressInputType,d),c)),g.compressedSize=g.compressedContent.length,g.compressionMethod=b.magic,g},A=function(a,b){var c=a;return a||(c=b?16893:33204),(65535&c)<<16},B=function(a,b){return 63&(a||0)},C=function(a,b,c,d,h,i){var j,k,l,n,o=(c.compressedContent,i!==m.utf8encode),p=e.transformTo(\"string\",i(b.name)),q=e.transformTo(\"string\",m.utf8encode(b.name)),r=b.comment||\"\",s=e.transformTo(\"string\",i(r)),u=e.transformTo(\"string\",m.utf8encode(r)),v=q.length!==b.name.length,w=u.length!==r.length,x=b.options,y=\"\",z=\"\",C=\"\";l=b._initialMetadata.dir!==b.dir?b.dir:x.dir,n=b._initialMetadata.date!==b.date?b.date:x.date;var D=0,E=0;l&&(D|=16),\"UNIX\"===h?(E=798,D|=A(b.unixPermissions,l)):(E=20,D|=B(b.dosPermissions,l)),j=n.getHours(),j<<=6,j|=n.getMinutes(),j<<=5,j|=n.getSeconds()/2,k=n.getFullYear()-1980,k<<=4,k|=n.getMonth()+1,k<<=5,k|=n.getDate(),v&&(z=t(1,1)+t(f(p),4)+q,y+=\"up\"+t(z.length,2)+z),w&&(C=t(1,1)+t(this.crc32(s),4)+u,y+=\"uc\"+t(C.length,2)+C);var F=\"\";F+=\"\\n\\0\",F+=o||!v&&!w?\"\\0\\0\":\"\\0\\b\",F+=c.compressionMethod,F+=t(j,2),F+=t(k,2),F+=t(c.crc32,4),F+=t(c.compressedSize,4),F+=t(c.uncompressedSize,4),F+=t(p.length,2),F+=t(y.length,2);var G=g.LOCAL_FILE_HEADER+F+p+y,H=g.CENTRAL_FILE_HEADER+t(E,2)+F+t(s.length,2)+\"\\0\\0\\0\\0\"+t(D,4)+t(d,4)+p+y+s;return{fileRecord:G,dirRecord:H,compressedObject:c}},D={load:function(a,b){throw new Error(\"Load method is not defined. Is the file jszip-load.js included ?\")},filter:function(a){var b,c,d,f,g=[];for(b in this.files)this.files.hasOwnProperty(b)&&(d=this.files[b],f=new s(d.name,d._data,e.extend(d.options)),c=b.slice(this.root.length,b.length),b.slice(0,this.root.length)===this.root&&a(c,f)&&g.push(f));return g},file:function(a,b,c){if(1===arguments.length){if(e.isRegExp(a)){var d=a;return this.filter(function(a,b){return!b.dir&&d.test(a)})}return this.filter(function(b,c){return!c.dir&&b===a})[0]||null}return a=this.root+a,v.call(this,a,b,c),this},folder:function(a){if(!a)return this;if(e.isRegExp(a))return this.filter(function(b,c){return c.dir&&a.test(b)});var b=this.root+a,c=y.call(this,b),d=this.clone();return d.root=c.name,d},remove:function(a){a=this.root+a;var b=this.files[a];if(b||(\"/\"!=a.slice(-1)&&(a+=\"/\"),b=this.files[a]),b&&!b.dir)delete this.files[a];else for(var c=this.filter(function(b,c){return c.name.slice(0,a.length)===a}),d=0;d<c.length;d++)delete this.files[c[d].name];return this},generate:function(a){a=e.extend(a||{},{base64:!0,compression:\"STORE\",compressionOptions:null,type:\"base64\",platform:\"DOS\",comment:null,mimeType:\"application/zip\",encodeFileName:m.utf8encode}),e.checkSupport(a.type),\"darwin\"!==a.platform&&\"freebsd\"!==a.platform&&\"linux\"!==a.platform&&\"sunos\"!==a.platform||(a.platform=\"UNIX\"),\"win32\"===a.platform&&(a.platform=\"DOS\");var b,c,d=[],f=0,h=0,k=e.transformTo(\"string\",a.encodeFileName(a.comment||this.comment||\"\"));for(var l in this.files)if(this.files.hasOwnProperty(l)){var p=this.files[l],q=p.options.compression||a.compression.toUpperCase(),r=j[q];if(!r)throw new Error(q+\" is not a valid compression method !\");var s=p.options.compressionOptions||a.compressionOptions||{},u=z.call(this,p,r,s),v=C.call(this,l,p,u,f,a.platform,a.encodeFileName);f+=v.fileRecord.length+u.compressedSize,h+=v.dirRecord.length,d.push(v)}var w=\"\";w=g.CENTRAL_DIRECTORY_END+\"\\0\\0\\0\\0\"+t(d.length,2)+t(d.length,2)+t(h,4)+t(f,4)+t(k.length,2)+k;var x=a.type.toLowerCase();for(b=\"uint8array\"===x||\"arraybuffer\"===x||\"blob\"===x||\"nodebuffer\"===x?new o(f+h+w.length):new n(f+h+w.length),c=0;c<d.length;c++)b.append(d[c].fileRecord),b.append(d[c].compressedObject.compressedContent);for(c=0;c<d.length;c++)b.append(d[c].dirRecord);b.append(w);var y=b.finalize();switch(a.type.toLowerCase()){case\"uint8array\":case\"arraybuffer\":case\"nodebuffer\":return e.transformTo(a.type.toLowerCase(),y);case\"blob\":return e.arrayBuffer2Blob(e.transformTo(\"arraybuffer\",y),a.mimeType);case\"base64\":return a.base64?i.encode(y):y;default:return y}},crc32:function(a,b){return f(a,b)},utf8encode:function(a){return e.transformTo(\"string\",m.utf8encode(a))},utf8decode:function(a){return m.utf8decode(a)}};b.exports=D},{\"./base64\":2,\"./compressedObject\":3,\"./compressions\":4,\"./crc32\":5,\"./defaults\":7,\"./nodeBuffer\":12,\"./signature\":15,\"./stringWriter\":17,\"./support\":18,\"./uint8ArrayWriter\":20,\"./utf8\":21,\"./utils\":22}],15:[function(a,b,c){\"use strict\";c.LOCAL_FILE_HEADER=\"PK\u0003\u0004\",c.CENTRAL_FILE_HEADER=\"PK\u0001\u0002\",c.CENTRAL_DIRECTORY_END=\"PK\u0005\u0006\",c.ZIP64_CENTRAL_DIRECTORY_LOCATOR=\"PK\u0006\u0007\",c.ZIP64_CENTRAL_DIRECTORY_END=\"PK\u0006\u0006\",c.DATA_DESCRIPTOR=\"PK\u0007\\b\"},{}],16:[function(a,b,c){\"use strict\";function d(a,b){this.data=a,b||(this.data=f.string2binary(this.data)),this.length=this.data.length,this.index=0,this.zero=0}var e=a(\"./dataReader\"),f=a(\"./utils\");d.prototype=new e,d.prototype.byteAt=function(a){return this.data.charCodeAt(this.zero+a)},d.prototype.lastIndexOfSignature=function(a){return this.data.lastIndexOf(a)-this.zero},d.prototype.readData=function(a){this.checkOffset(a);var b=this.data.slice(this.zero+this.index,this.zero+this.index+a);return this.index+=a,b},b.exports=d},{\"./dataReader\":6,\"./utils\":22}],17:[function(a,b,c){\"use strict\";var d=a(\"./utils\"),e=function(){this.data=[]};e.prototype={append:function(a){a=d.transformTo(\"string\",a),this.data.push(a)},finalize:function(){return this.data.join(\"\")}},b.exports=e},{\"./utils\":22}],18:[function(a,b,c){(function(a){\"use strict\";if(c.base64=!0,c.array=!0,c.string=!0,c.arraybuffer=\"undefined\"!=typeof ArrayBuffer&&\"undefined\"!=typeof Uint8Array,c.nodebuffer=\"undefined\"!=typeof a,c.uint8array=\"undefined\"!=typeof Uint8Array,\"undefined\"==typeof ArrayBuffer)c.blob=!1;else{var b=new ArrayBuffer(0);try{c.blob=0===new Blob([b],{type:\"application/zip\"}).size}catch(d){try{var e=window.BlobBuilder||window.WebKitBlobBuilder||window.MozBlobBuilder||window.MSBlobBuilder,f=new e;f.append(b),c.blob=0===f.getBlob(\"application/zip\").size}catch(d){c.blob=!1}}}}).call(this,\"undefined\"!=typeof Buffer?Buffer:void 0)},{}],19:[function(a,b,c){\"use strict\";function d(a){a&&(this.data=a,this.length=this.data.length,this.index=0,this.zero=0)}var e=a(\"./arrayReader\");d.prototype=new e,d.prototype.readData=function(a){if(this.checkOffset(a),0===a)return new Uint8Array(0);var b=this.data.subarray(this.zero+this.index,this.zero+this.index+a);return this.index+=a,b},b.exports=d},{\"./arrayReader\":1}],20:[function(a,b,c){\"use strict\";var d=a(\"./utils\"),e=function(a){this.data=new Uint8Array(a),this.index=0};e.prototype={append:function(a){0!==a.length&&(a=d.transformTo(\"uint8array\",a),this.data.set(a,this.index),this.index+=a.length)},finalize:function(){return this.data}},b.exports=e},{\"./utils\":22}],21:[function(a,b,c){\"use strict\";for(var d=a(\"./utils\"),e=a(\"./support\"),f=a(\"./nodeBuffer\"),g=new Array(256),h=0;h<256;h++)g[h]=h>=252?6:h>=248?5:h>=240?4:h>=224?3:h>=192?2:1;g[254]=g[254]=1;var i=function(a){var b,c,d,f,g,h=a.length,i=0;for(f=0;f<h;f++)c=a.charCodeAt(f),55296===(64512&c)&&f+1<h&&(d=a.charCodeAt(f+1),56320===(64512&d)&&(c=65536+(c-55296<<10)+(d-56320),f++)),i+=c<128?1:c<2048?2:c<65536?3:4;for(b=e.uint8array?new Uint8Array(i):new Array(i),g=0,f=0;g<i;f++)c=a.charCodeAt(f),55296===(64512&c)&&f+1<h&&(d=a.charCodeAt(f+1),56320===(64512&d)&&(c=65536+(c-55296<<10)+(d-56320),f++)),c<128?b[g++]=c:c<2048?(b[g++]=192|c>>>6,b[g++]=128|63&c):c<65536?(b[g++]=224|c>>>12,b[g++]=128|c>>>6&63,b[g++]=128|63&c):(b[g++]=240|c>>>18,b[g++]=128|c>>>12&63,b[g++]=128|c>>>6&63,b[g++]=128|63&c);return b},j=function(a,b){var c;for(b=b||a.length,b>a.length&&(b=a.length),c=b-1;c>=0&&128===(192&a[c]);)c--;return c<0?b:0===c?b:c+g[a[c]]>b?c:b},k=function(a){var b,c,e,f,h=a.length,i=new Array(2*h);for(c=0,b=0;b<h;)if(e=a[b++],e<128)i[c++]=e;else if(f=g[e],f>4)i[c++]=65533,b+=f-1;else{for(e&=2===f?31:3===f?15:7;f>1&&b<h;)e=e<<6|63&a[b++],f--;f>1?i[c++]=65533:e<65536?i[c++]=e:(e-=65536,i[c++]=55296|e>>10&1023,i[c++]=56320|1023&e)}return i.length!==c&&(i.subarray?i=i.subarray(0,c):i.length=c),d.applyFromCharCode(i)};c.utf8encode=function(a){return e.nodebuffer?f(a,\"utf-8\"):i(a)},c.utf8decode=function(a){if(e.nodebuffer)return d.transformTo(\"nodebuffer\",a).toString(\"utf-8\");a=d.transformTo(e.uint8array?\"uint8array\":\"array\",a);for(var b=[],c=0,f=a.length,g=65536;c<f;){var h=j(a,Math.min(c+g,f));e.uint8array?b.push(k(a.subarray(c,h))):b.push(k(a.slice(c,h))),c=h}return b.join(\"\")}},{\"./nodeBuffer\":12,\"./support\":18,\"./utils\":22}],22:[function(a,b,c){\"use strict\";function d(a){return a}function e(a,b){for(var c=0;c<a.length;++c)b[c]=255&a.charCodeAt(c);return b}function f(a){var b=65536,d=[],e=a.length,f=c.getTypeOf(a),g=0,h=!0;try{switch(f){case\"uint8array\":String.fromCharCode.apply(null,new Uint8Array(0));break;case\"nodebuffer\":String.fromCharCode.apply(null,j(0))}}catch(i){h=!1}if(!h){for(var k=\"\",l=0;l<a.length;l++)k+=String.fromCharCode(a[l]);return k}for(;g<e&&b>1;)try{\"array\"===f||\"nodebuffer\"===f?d.push(String.fromCharCode.apply(null,a.slice(g,Math.min(g+b,e)))):d.push(String.fromCharCode.apply(null,a.subarray(g,Math.min(g+b,e)))),g+=b}catch(i){b=Math.floor(b/2)}return d.join(\"\")}function g(a,b){for(var c=0;c<a.length;c++)b[c]=a[c];return b}var h=a(\"./support\"),i=a(\"./compressions\"),j=a(\"./nodeBuffer\");c.string2binary=function(a){for(var b=\"\",c=0;c<a.length;c++)b+=String.fromCharCode(255&a.charCodeAt(c));return b},c.arrayBuffer2Blob=function(a,b){c.checkSupport(\"blob\"),b=b||\"application/zip\";try{return new Blob([a],{type:b})}catch(d){try{var e=window.BlobBuilder||window.WebKitBlobBuilder||window.MozBlobBuilder||window.MSBlobBuilder,f=new e;return f.append(a),f.getBlob(b)}catch(d){throw new Error(\"Bug : can't construct the Blob.\")}}},c.applyFromCharCode=f;var k={};k.string={string:d,array:function(a){return e(a,new Array(a.length))},arraybuffer:function(a){return k.string.uint8array(a).buffer},uint8array:function(a){return e(a,new Uint8Array(a.length))},nodebuffer:function(a){return e(a,j(a.length))}},k.array={string:f,array:d,arraybuffer:function(a){return new Uint8Array(a).buffer},uint8array:function(a){return new Uint8Array(a)},nodebuffer:function(a){return j(a)}},k.arraybuffer={string:function(a){return f(new Uint8Array(a))},array:function(a){return g(new Uint8Array(a),new Array(a.byteLength))},arraybuffer:d,uint8array:function(a){return new Uint8Array(a)},nodebuffer:function(a){return j(new Uint8Array(a))}},k.uint8array={string:f,array:function(a){return g(a,new Array(a.length))},arraybuffer:function(a){return a.buffer},uint8array:d,nodebuffer:function(a){return j(a)}},k.nodebuffer={string:f,array:function(a){return g(a,new Array(a.length))},arraybuffer:function(a){return k.nodebuffer.uint8array(a).buffer},uint8array:function(a){return g(a,new Uint8Array(a.length))},nodebuffer:d},c.transformTo=function(a,b){if(b||(b=\"\"),!a)return b;c.checkSupport(a);var d=c.getTypeOf(b),e=k[d][a](b);return e},c.getTypeOf=function(a){return\"string\"==typeof a?\"string\":\"[object Array]\"===Object.prototype.toString.call(a)?\"array\":h.nodebuffer&&j.test(a)?\"nodebuffer\":h.uint8array&&a instanceof Uint8Array?\"uint8array\":h.arraybuffer&&a instanceof ArrayBuffer?\"arraybuffer\":void 0},c.checkSupport=function(a){var b=h[a.toLowerCase()];if(!b)throw new Error(a+\" is not supported by this browser\")},c.MAX_VALUE_16BITS=65535,c.MAX_VALUE_32BITS=-1,c.pretty=function(a){var b,c,d=\"\";for(c=0;c<(a||\"\").length;c++)b=a.charCodeAt(c),d+=\"\\\\x\"+(b<16?\"0\":\"\")+b.toString(16).toUpperCase();return d},c.findCompression=function(a){for(var b in i)if(i.hasOwnProperty(b)&&i[b].magic===a)return i[b];return null},c.isRegExp=function(a){return\"[object RegExp]\"===Object.prototype.toString.call(a)},c.extend=function(){var a,b,c={};for(a=0;a<arguments.length;a++)for(b in arguments[a])arguments[a].hasOwnProperty(b)&&\"undefined\"==typeof c[b]&&(c[b]=arguments[a][b]);return c}},{\"./compressions\":4,\"./nodeBuffer\":12,\"./support\":18}],23:[function(a,b,c){\"use strict\";function d(a,b){this.files=[],this.loadOptions=b,a&&this.load(a)}var e=a(\"./stringReader\"),f=a(\"./nodeBufferReader\"),g=a(\"./uint8ArrayReader\"),h=a(\"./arrayReader\"),i=a(\"./utils\"),j=a(\"./signature\"),k=a(\"./zipEntry\"),l=a(\"./support\");a(\"./object\");d.prototype={checkSignature:function(a){var b=this.reader.readString(4);if(b!==a)throw new Error(\"Corrupted zip or bug : unexpected signature (\"+i.pretty(b)+\", expected \"+i.pretty(a)+\")\")},isSignature:function(a,b){var c=this.reader.index;this.reader.setIndex(a);var d=this.reader.readString(4),e=d===b;return this.reader.setIndex(c),e},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var a=this.reader.readData(this.zipCommentLength),b=l.uint8array?\"uint8array\":\"array\",c=i.transformTo(b,a);this.zipComment=this.loadOptions.decodeFileName(c)},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.versionMadeBy=this.reader.readString(2),this.versionNeeded=this.reader.readInt(2),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var a,b,c,d=this.zip64EndOfCentralSize-44,e=0;e<d;)a=this.reader.readInt(2),b=this.reader.readInt(4),c=this.reader.readString(b),this.zip64ExtensibleData[a]={id:a,length:b,value:c}},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),this.disksCount>1)throw new Error(\"Multi-volumes zip are not supported\")},readLocalFiles:function(){var a,b;for(a=0;a<this.files.length;a++)b=this.files[a],this.reader.setIndex(b.localHeaderOffset),this.checkSignature(j.LOCAL_FILE_HEADER),b.readLocalPart(this.reader),b.handleUTF8(),b.processAttributes()},readCentralDir:function(){var a;for(this.reader.setIndex(this.centralDirOffset);this.reader.readString(4)===j.CENTRAL_FILE_HEADER;)a=new k({zip64:this.zip64},this.loadOptions),a.readCentralPart(this.reader),this.files.push(a);if(this.centralDirRecords!==this.files.length&&0!==this.centralDirRecords&&0===this.files.length)throw new Error(\"Corrupted zip or bug: expected \"+this.centralDirRecords+\" records in central dir, got \"+this.files.length)},readEndOfCentral:function(){var a=this.reader.lastIndexOfSignature(j.CENTRAL_DIRECTORY_END);if(a<0){var b=!this.isSignature(0,j.LOCAL_FILE_HEADER);throw b?new Error(\"Can't find end of central directory : is this a zip file ? If it is, see http://stuk.github.io/jszip/documentation/howto/read_zip.html\"):new Error(\"Corrupted zip : can't find end of central directory\")}this.reader.setIndex(a);var c=a;if(this.checkSignature(j.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===i.MAX_VALUE_16BITS||this.diskWithCentralDirStart===i.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===i.MAX_VALUE_16BITS||this.centralDirRecords===i.MAX_VALUE_16BITS||this.centralDirSize===i.MAX_VALUE_32BITS||this.centralDirOffset===i.MAX_VALUE_32BITS){if(this.zip64=!0,a=this.reader.lastIndexOfSignature(j.ZIP64_CENTRAL_DIRECTORY_LOCATOR),a<0)throw new Error(\"Corrupted zip : can't find the ZIP64 end of central directory locator\");if(this.reader.setIndex(a),this.checkSignature(j.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,j.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(j.ZIP64_CENTRAL_DIRECTORY_END),this.relativeOffsetEndOfZip64CentralDir<0))throw new Error(\"Corrupted zip : can't find the ZIP64 end of central directory\");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(j.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral()}var d=this.centralDirOffset+this.centralDirSize;this.zip64&&(d+=20,d+=12+this.zip64EndOfCentralSize);var e=c-d;if(e>0)this.isSignature(c,j.CENTRAL_FILE_HEADER)||(this.reader.zero=e);else if(e<0)throw new Error(\"Corrupted zip: missing \"+Math.abs(e)+\" bytes.\")},prepareReader:function(a){var b=i.getTypeOf(a);if(i.checkSupport(b),\"string\"!==b||l.uint8array)if(\"nodebuffer\"===b)this.reader=new f(a);else if(l.uint8array)this.reader=new g(i.transformTo(\"uint8array\",a));else{if(!l.array)throw new Error(\"Unexpected error: unsupported type '\"+b+\"'\");this.reader=new h(i.transformTo(\"array\",a))}else this.reader=new e(a,this.loadOptions.optimizedBinaryString)},load:function(a){this.prepareReader(a),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles()}},b.exports=d},{\"./arrayReader\":1,\"./nodeBufferReader\":13,\"./object\":14,\"./signature\":15,\"./stringReader\":16,\"./support\":18,\"./uint8ArrayReader\":19,\"./utils\":22,\"./zipEntry\":24}],24:[function(a,b,c){\"use strict\";function d(a,b){this.options=a,this.loadOptions=b}var e=a(\"./stringReader\"),f=a(\"./utils\"),g=a(\"./compressedObject\"),h=a(\"./object\"),i=a(\"./support\"),j=0,k=3;d.prototype={isEncrypted:function(){return 1===(1&this.bitFlag)},useUTF8:function(){return 2048===(2048&this.bitFlag)},prepareCompressedContent:function(a,b,c){return function(){var d=a.index;a.setIndex(b);var e=a.readData(c);return a.setIndex(d),e}},prepareContent:function(a,b,c,d,e){return function(){var a=f.transformTo(d.uncompressInputType,this.getCompressedContent()),b=d.uncompress(a);if(b.length!==e)throw new Error(\"Bug : uncompressed data size mismatch\");return b}},readLocalPart:function(a){var b,c;if(a.skip(22),this.fileNameLength=a.readInt(2),c=a.readInt(2),this.fileName=a.readData(this.fileNameLength),a.skip(c),this.compressedSize==-1||this.uncompressedSize==-1)throw new Error(\"Bug or corrupted zip : didn't get enough informations from the central directory (compressedSize == -1 || uncompressedSize == -1)\");if(b=f.findCompression(this.compressionMethod),null===b)throw new Error(\"Corrupted zip : compression \"+f.pretty(this.compressionMethod)+\" unknown (inner file : \"+f.transformTo(\"string\",this.fileName)+\")\");if(this.decompressed=new g,this.decompressed.compressedSize=this.compressedSize,this.decompressed.uncompressedSize=this.uncompressedSize,this.decompressed.crc32=this.crc32,this.decompressed.compressionMethod=this.compressionMethod,this.decompressed.getCompressedContent=this.prepareCompressedContent(a,a.index,this.compressedSize,b),this.decompressed.getContent=this.prepareContent(a,a.index,this.compressedSize,b,this.uncompressedSize),this.loadOptions.checkCRC32&&(this.decompressed=f.transformTo(\"string\",this.decompressed.getContent()),h.crc32(this.decompressed)!==this.crc32))throw new Error(\"Corrupted zip : CRC32 mismatch\");\n},readCentralPart:function(a){if(this.versionMadeBy=a.readInt(2),this.versionNeeded=a.readInt(2),this.bitFlag=a.readInt(2),this.compressionMethod=a.readString(2),this.date=a.readDate(),this.crc32=a.readInt(4),this.compressedSize=a.readInt(4),this.uncompressedSize=a.readInt(4),this.fileNameLength=a.readInt(2),this.extraFieldsLength=a.readInt(2),this.fileCommentLength=a.readInt(2),this.diskNumberStart=a.readInt(2),this.internalFileAttributes=a.readInt(2),this.externalFileAttributes=a.readInt(4),this.localHeaderOffset=a.readInt(4),this.isEncrypted())throw new Error(\"Encrypted zip are not supported\");this.fileName=a.readData(this.fileNameLength),this.readExtraFields(a),this.parseZIP64ExtraField(a),this.fileComment=a.readData(this.fileCommentLength)},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var a=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),a===j&&(this.dosPermissions=63&this.externalFileAttributes),a===k&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||\"/\"!==this.fileNameStr.slice(-1)||(this.dir=!0)},parseZIP64ExtraField:function(a){if(this.extraFields[1]){var b=new e(this.extraFields[1].value);this.uncompressedSize===f.MAX_VALUE_32BITS&&(this.uncompressedSize=b.readInt(8)),this.compressedSize===f.MAX_VALUE_32BITS&&(this.compressedSize=b.readInt(8)),this.localHeaderOffset===f.MAX_VALUE_32BITS&&(this.localHeaderOffset=b.readInt(8)),this.diskNumberStart===f.MAX_VALUE_32BITS&&(this.diskNumberStart=b.readInt(4))}},readExtraFields:function(a){var b,c,d,e=a.index;for(this.extraFields=this.extraFields||{};a.index<e+this.extraFieldsLength;)b=a.readInt(2),c=a.readInt(2),d=a.readString(c),this.extraFields[b]={id:b,length:c,value:d}},handleUTF8:function(){var a=i.uint8array?\"uint8array\":\"array\";if(this.useUTF8())this.fileNameStr=h.utf8decode(this.fileName),this.fileCommentStr=h.utf8decode(this.fileComment);else{var b=this.findExtraFieldUnicodePath();if(null!==b)this.fileNameStr=b;else{var c=f.transformTo(a,this.fileName);this.fileNameStr=this.loadOptions.decodeFileName(c)}var d=this.findExtraFieldUnicodeComment();if(null!==d)this.fileCommentStr=d;else{var e=f.transformTo(a,this.fileComment);this.fileCommentStr=this.loadOptions.decodeFileName(e)}}},findExtraFieldUnicodePath:function(){var a=this.extraFields[28789];if(a){var b=new e(a.value);return 1!==b.readInt(1)?null:h.crc32(this.fileName)!==b.readInt(4)?null:h.utf8decode(b.readString(a.length-5))}return null},findExtraFieldUnicodeComment:function(){var a=this.extraFields[25461];if(a){var b=new e(a.value);return 1!==b.readInt(1)?null:h.crc32(this.fileComment)!==b.readInt(4)?null:h.utf8decode(b.readString(a.length-5))}return null}},b.exports=d},{\"./compressedObject\":3,\"./object\":14,\"./stringReader\":16,\"./support\":18,\"./utils\":22}],25:[function(a,b,c){\"use strict\";var d=a(\"./lib/utils/common\").assign,e=a(\"./lib/deflate\"),f=a(\"./lib/inflate\"),g=a(\"./lib/zlib/constants\"),h={};d(h,e,f,g),b.exports=h},{\"./lib/deflate\":26,\"./lib/inflate\":27,\"./lib/utils/common\":28,\"./lib/zlib/constants\":31}],26:[function(a,b,c){\"use strict\";function d(a){if(!(this instanceof d))return new d(a);this.options=i.assign({level:s,method:u,chunkSize:16384,windowBits:15,memLevel:8,strategy:t,to:\"\"},a||{});var b=this.options;b.raw&&b.windowBits>0?b.windowBits=-b.windowBits:b.gzip&&b.windowBits>0&&b.windowBits<16&&(b.windowBits+=16),this.err=0,this.msg=\"\",this.ended=!1,this.chunks=[],this.strm=new l,this.strm.avail_out=0;var c=h.deflateInit2(this.strm,b.level,b.method,b.windowBits,b.memLevel,b.strategy);if(c!==p)throw new Error(k[c]);if(b.header&&h.deflateSetHeader(this.strm,b.header),b.dictionary){var e;if(e=\"string\"==typeof b.dictionary?j.string2buf(b.dictionary):\"[object ArrayBuffer]\"===m.call(b.dictionary)?new Uint8Array(b.dictionary):b.dictionary,c=h.deflateSetDictionary(this.strm,e),c!==p)throw new Error(k[c]);this._dict_set=!0}}function e(a,b){var c=new d(b);if(c.push(a,!0),c.err)throw c.msg;return c.result}function f(a,b){return b=b||{},b.raw=!0,e(a,b)}function g(a,b){return b=b||{},b.gzip=!0,e(a,b)}var h=a(\"./zlib/deflate\"),i=a(\"./utils/common\"),j=a(\"./utils/strings\"),k=a(\"./zlib/messages\"),l=a(\"./zlib/zstream\"),m=Object.prototype.toString,n=0,o=4,p=0,q=1,r=2,s=-1,t=0,u=8;d.prototype.push=function(a,b){var c,d,e=this.strm,f=this.options.chunkSize;if(this.ended)return!1;d=b===~~b?b:b===!0?o:n,\"string\"==typeof a?e.input=j.string2buf(a):\"[object ArrayBuffer]\"===m.call(a)?e.input=new Uint8Array(a):e.input=a,e.next_in=0,e.avail_in=e.input.length;do{if(0===e.avail_out&&(e.output=new i.Buf8(f),e.next_out=0,e.avail_out=f),c=h.deflate(e,d),c!==q&&c!==p)return this.onEnd(c),this.ended=!0,!1;0!==e.avail_out&&(0!==e.avail_in||d!==o&&d!==r)||(\"string\"===this.options.to?this.onData(j.buf2binstring(i.shrinkBuf(e.output,e.next_out))):this.onData(i.shrinkBuf(e.output,e.next_out)))}while((e.avail_in>0||0===e.avail_out)&&c!==q);return d===o?(c=h.deflateEnd(this.strm),this.onEnd(c),this.ended=!0,c===p):d!==r||(this.onEnd(p),e.avail_out=0,!0)},d.prototype.onData=function(a){this.chunks.push(a)},d.prototype.onEnd=function(a){a===p&&(\"string\"===this.options.to?this.result=this.chunks.join(\"\"):this.result=i.flattenChunks(this.chunks)),this.chunks=[],this.err=a,this.msg=this.strm.msg},c.Deflate=d,c.deflate=e,c.deflateRaw=f,c.gzip=g},{\"./utils/common\":28,\"./utils/strings\":29,\"./zlib/deflate\":33,\"./zlib/messages\":38,\"./zlib/zstream\":40}],27:[function(a,b,c){\"use strict\";function d(a){if(!(this instanceof d))return new d(a);this.options=h.assign({chunkSize:16384,windowBits:0,to:\"\"},a||{});var b=this.options;b.raw&&b.windowBits>=0&&b.windowBits<16&&(b.windowBits=-b.windowBits,0===b.windowBits&&(b.windowBits=-15)),!(b.windowBits>=0&&b.windowBits<16)||a&&a.windowBits||(b.windowBits+=32),b.windowBits>15&&b.windowBits<48&&0===(15&b.windowBits)&&(b.windowBits|=15),this.err=0,this.msg=\"\",this.ended=!1,this.chunks=[],this.strm=new l,this.strm.avail_out=0;var c=g.inflateInit2(this.strm,b.windowBits);if(c!==j.Z_OK)throw new Error(k[c]);this.header=new m,g.inflateGetHeader(this.strm,this.header)}function e(a,b){var c=new d(b);if(c.push(a,!0),c.err)throw c.msg;return c.result}function f(a,b){return b=b||{},b.raw=!0,e(a,b)}var g=a(\"./zlib/inflate\"),h=a(\"./utils/common\"),i=a(\"./utils/strings\"),j=a(\"./zlib/constants\"),k=a(\"./zlib/messages\"),l=a(\"./zlib/zstream\"),m=a(\"./zlib/gzheader\"),n=Object.prototype.toString;d.prototype.push=function(a,b){var c,d,e,f,k,l,m=this.strm,o=this.options.chunkSize,p=this.options.dictionary,q=!1;if(this.ended)return!1;d=b===~~b?b:b===!0?j.Z_FINISH:j.Z_NO_FLUSH,\"string\"==typeof a?m.input=i.binstring2buf(a):\"[object ArrayBuffer]\"===n.call(a)?m.input=new Uint8Array(a):m.input=a,m.next_in=0,m.avail_in=m.input.length;do{if(0===m.avail_out&&(m.output=new h.Buf8(o),m.next_out=0,m.avail_out=o),c=g.inflate(m,j.Z_NO_FLUSH),c===j.Z_NEED_DICT&&p&&(l=\"string\"==typeof p?i.string2buf(p):\"[object ArrayBuffer]\"===n.call(p)?new Uint8Array(p):p,c=g.inflateSetDictionary(this.strm,l)),c===j.Z_BUF_ERROR&&q===!0&&(c=j.Z_OK,q=!1),c!==j.Z_STREAM_END&&c!==j.Z_OK)return this.onEnd(c),this.ended=!0,!1;m.next_out&&(0!==m.avail_out&&c!==j.Z_STREAM_END&&(0!==m.avail_in||d!==j.Z_FINISH&&d!==j.Z_SYNC_FLUSH)||(\"string\"===this.options.to?(e=i.utf8border(m.output,m.next_out),f=m.next_out-e,k=i.buf2string(m.output,e),m.next_out=f,m.avail_out=o-f,f&&h.arraySet(m.output,m.output,e,f,0),this.onData(k)):this.onData(h.shrinkBuf(m.output,m.next_out)))),0===m.avail_in&&0===m.avail_out&&(q=!0)}while((m.avail_in>0||0===m.avail_out)&&c!==j.Z_STREAM_END);return c===j.Z_STREAM_END&&(d=j.Z_FINISH),d===j.Z_FINISH?(c=g.inflateEnd(this.strm),this.onEnd(c),this.ended=!0,c===j.Z_OK):d!==j.Z_SYNC_FLUSH||(this.onEnd(j.Z_OK),m.avail_out=0,!0)},d.prototype.onData=function(a){this.chunks.push(a)},d.prototype.onEnd=function(a){a===j.Z_OK&&(\"string\"===this.options.to?this.result=this.chunks.join(\"\"):this.result=h.flattenChunks(this.chunks)),this.chunks=[],this.err=a,this.msg=this.strm.msg},c.Inflate=d,c.inflate=e,c.inflateRaw=f,c.ungzip=e},{\"./utils/common\":28,\"./utils/strings\":29,\"./zlib/constants\":31,\"./zlib/gzheader\":34,\"./zlib/inflate\":36,\"./zlib/messages\":38,\"./zlib/zstream\":40}],28:[function(a,b,c){\"use strict\";var d=\"undefined\"!=typeof Uint8Array&&\"undefined\"!=typeof Uint16Array&&\"undefined\"!=typeof Int32Array;c.assign=function(a){for(var b=Array.prototype.slice.call(arguments,1);b.length;){var c=b.shift();if(c){if(\"object\"!=typeof c)throw new TypeError(c+\"must be non-object\");for(var d in c)c.hasOwnProperty(d)&&(a[d]=c[d])}}return a},c.shrinkBuf=function(a,b){return a.length===b?a:a.subarray?a.subarray(0,b):(a.length=b,a)};var e={arraySet:function(a,b,c,d,e){if(b.subarray&&a.subarray)return void a.set(b.subarray(c,c+d),e);for(var f=0;f<d;f++)a[e+f]=b[c+f]},flattenChunks:function(a){var b,c,d,e,f,g;for(d=0,b=0,c=a.length;b<c;b++)d+=a[b].length;for(g=new Uint8Array(d),e=0,b=0,c=a.length;b<c;b++)f=a[b],g.set(f,e),e+=f.length;return g}},f={arraySet:function(a,b,c,d,e){for(var f=0;f<d;f++)a[e+f]=b[c+f]},flattenChunks:function(a){return[].concat.apply([],a)}};c.setTyped=function(a){a?(c.Buf8=Uint8Array,c.Buf16=Uint16Array,c.Buf32=Int32Array,c.assign(c,e)):(c.Buf8=Array,c.Buf16=Array,c.Buf32=Array,c.assign(c,f))},c.setTyped(d)},{}],29:[function(a,b,c){\"use strict\";function d(a,b){if(b<65537&&(a.subarray&&g||!a.subarray&&f))return String.fromCharCode.apply(null,e.shrinkBuf(a,b));for(var c=\"\",d=0;d<b;d++)c+=String.fromCharCode(a[d]);return c}var e=a(\"./common\"),f=!0,g=!0;try{String.fromCharCode.apply(null,[0])}catch(h){f=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(h){g=!1}for(var i=new e.Buf8(256),j=0;j<256;j++)i[j]=j>=252?6:j>=248?5:j>=240?4:j>=224?3:j>=192?2:1;i[254]=i[254]=1,c.string2buf=function(a){var b,c,d,f,g,h=a.length,i=0;for(f=0;f<h;f++)c=a.charCodeAt(f),55296===(64512&c)&&f+1<h&&(d=a.charCodeAt(f+1),56320===(64512&d)&&(c=65536+(c-55296<<10)+(d-56320),f++)),i+=c<128?1:c<2048?2:c<65536?3:4;for(b=new e.Buf8(i),g=0,f=0;g<i;f++)c=a.charCodeAt(f),55296===(64512&c)&&f+1<h&&(d=a.charCodeAt(f+1),56320===(64512&d)&&(c=65536+(c-55296<<10)+(d-56320),f++)),c<128?b[g++]=c:c<2048?(b[g++]=192|c>>>6,b[g++]=128|63&c):c<65536?(b[g++]=224|c>>>12,b[g++]=128|c>>>6&63,b[g++]=128|63&c):(b[g++]=240|c>>>18,b[g++]=128|c>>>12&63,b[g++]=128|c>>>6&63,b[g++]=128|63&c);return b},c.buf2binstring=function(a){return d(a,a.length)},c.binstring2buf=function(a){for(var b=new e.Buf8(a.length),c=0,d=b.length;c<d;c++)b[c]=a.charCodeAt(c);return b},c.buf2string=function(a,b){var c,e,f,g,h=b||a.length,j=new Array(2*h);for(e=0,c=0;c<h;)if(f=a[c++],f<128)j[e++]=f;else if(g=i[f],g>4)j[e++]=65533,c+=g-1;else{for(f&=2===g?31:3===g?15:7;g>1&&c<h;)f=f<<6|63&a[c++],g--;g>1?j[e++]=65533:f<65536?j[e++]=f:(f-=65536,j[e++]=55296|f>>10&1023,j[e++]=56320|1023&f)}return d(j,e)},c.utf8border=function(a,b){var c;for(b=b||a.length,b>a.length&&(b=a.length),c=b-1;c>=0&&128===(192&a[c]);)c--;return c<0?b:0===c?b:c+i[a[c]]>b?c:b}},{\"./common\":28}],30:[function(a,b,c){\"use strict\";function d(a,b,c,d){for(var e=65535&a|0,f=a>>>16&65535|0,g=0;0!==c;){g=c>2e3?2e3:c,c-=g;do e=e+b[d++]|0,f=f+e|0;while(--g);e%=65521,f%=65521}return e|f<<16|0}b.exports=d},{}],31:[function(a,b,c){\"use strict\";b.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],32:[function(a,b,c){\"use strict\";function d(){for(var a,b=[],c=0;c<256;c++){a=c;for(var d=0;d<8;d++)a=1&a?3988292384^a>>>1:a>>>1;b[c]=a}return b}function e(a,b,c,d){var e=f,g=d+c;a^=-1;for(var h=d;h<g;h++)a=a>>>8^e[255&(a^b[h])];return a^-1}var f=d();b.exports=e},{}],33:[function(a,b,c){\"use strict\";function d(a,b){return a.msg=I[b],b}function e(a){return(a<<1)-(a>4?9:0)}function f(a){for(var b=a.length;--b>=0;)a[b]=0}function g(a){var b=a.state,c=b.pending;c>a.avail_out&&(c=a.avail_out),0!==c&&(E.arraySet(a.output,b.pending_buf,b.pending_out,c,a.next_out),a.next_out+=c,b.pending_out+=c,a.total_out+=c,a.avail_out-=c,b.pending-=c,0===b.pending&&(b.pending_out=0))}function h(a,b){F._tr_flush_block(a,a.block_start>=0?a.block_start:-1,a.strstart-a.block_start,b),a.block_start=a.strstart,g(a.strm)}function i(a,b){a.pending_buf[a.pending++]=b}function j(a,b){a.pending_buf[a.pending++]=b>>>8&255,a.pending_buf[a.pending++]=255&b}function k(a,b,c,d){var e=a.avail_in;return e>d&&(e=d),0===e?0:(a.avail_in-=e,E.arraySet(b,a.input,a.next_in,e,c),1===a.state.wrap?a.adler=G(a.adler,b,e,c):2===a.state.wrap&&(a.adler=H(a.adler,b,e,c)),a.next_in+=e,a.total_in+=e,e)}function l(a,b){var c,d,e=a.max_chain_length,f=a.strstart,g=a.prev_length,h=a.nice_match,i=a.strstart>a.w_size-la?a.strstart-(a.w_size-la):0,j=a.window,k=a.w_mask,l=a.prev,m=a.strstart+ka,n=j[f+g-1],o=j[f+g];a.prev_length>=a.good_match&&(e>>=2),h>a.lookahead&&(h=a.lookahead);do if(c=b,j[c+g]===o&&j[c+g-1]===n&&j[c]===j[f]&&j[++c]===j[f+1]){f+=2,c++;do;while(j[++f]===j[++c]&&j[++f]===j[++c]&&j[++f]===j[++c]&&j[++f]===j[++c]&&j[++f]===j[++c]&&j[++f]===j[++c]&&j[++f]===j[++c]&&j[++f]===j[++c]&&f<m);if(d=ka-(m-f),f=m-ka,d>g){if(a.match_start=b,g=d,d>=h)break;n=j[f+g-1],o=j[f+g]}}while((b=l[b&k])>i&&0!==--e);return g<=a.lookahead?g:a.lookahead}function m(a){var b,c,d,e,f,g=a.w_size;do{if(e=a.window_size-a.lookahead-a.strstart,a.strstart>=g+(g-la)){E.arraySet(a.window,a.window,g,g,0),a.match_start-=g,a.strstart-=g,a.block_start-=g,c=a.hash_size,b=c;do d=a.head[--b],a.head[b]=d>=g?d-g:0;while(--c);c=g,b=c;do d=a.prev[--b],a.prev[b]=d>=g?d-g:0;while(--c);e+=g}if(0===a.strm.avail_in)break;if(c=k(a.strm,a.window,a.strstart+a.lookahead,e),a.lookahead+=c,a.lookahead+a.insert>=ja)for(f=a.strstart-a.insert,a.ins_h=a.window[f],a.ins_h=(a.ins_h<<a.hash_shift^a.window[f+1])&a.hash_mask;a.insert&&(a.ins_h=(a.ins_h<<a.hash_shift^a.window[f+ja-1])&a.hash_mask,a.prev[f&a.w_mask]=a.head[a.ins_h],a.head[a.ins_h]=f,f++,a.insert--,!(a.lookahead+a.insert<ja)););}while(a.lookahead<la&&0!==a.strm.avail_in)}function n(a,b){var c=65535;for(c>a.pending_buf_size-5&&(c=a.pending_buf_size-5);;){if(a.lookahead<=1){if(m(a),0===a.lookahead&&b===J)return ua;if(0===a.lookahead)break}a.strstart+=a.lookahead,a.lookahead=0;var d=a.block_start+c;if((0===a.strstart||a.strstart>=d)&&(a.lookahead=a.strstart-d,a.strstart=d,h(a,!1),0===a.strm.avail_out))return ua;if(a.strstart-a.block_start>=a.w_size-la&&(h(a,!1),0===a.strm.avail_out))return ua}return a.insert=0,b===M?(h(a,!0),0===a.strm.avail_out?wa:xa):a.strstart>a.block_start&&(h(a,!1),0===a.strm.avail_out)?ua:ua}function o(a,b){for(var c,d;;){if(a.lookahead<la){if(m(a),a.lookahead<la&&b===J)return ua;if(0===a.lookahead)break}if(c=0,a.lookahead>=ja&&(a.ins_h=(a.ins_h<<a.hash_shift^a.window[a.strstart+ja-1])&a.hash_mask,c=a.prev[a.strstart&a.w_mask]=a.head[a.ins_h],a.head[a.ins_h]=a.strstart),0!==c&&a.strstart-c<=a.w_size-la&&(a.match_length=l(a,c)),a.match_length>=ja)if(d=F._tr_tally(a,a.strstart-a.match_start,a.match_length-ja),a.lookahead-=a.match_length,a.match_length<=a.max_lazy_match&&a.lookahead>=ja){a.match_length--;do a.strstart++,a.ins_h=(a.ins_h<<a.hash_shift^a.window[a.strstart+ja-1])&a.hash_mask,c=a.prev[a.strstart&a.w_mask]=a.head[a.ins_h],a.head[a.ins_h]=a.strstart;while(0!==--a.match_length);a.strstart++}else a.strstart+=a.match_length,a.match_length=0,a.ins_h=a.window[a.strstart],a.ins_h=(a.ins_h<<a.hash_shift^a.window[a.strstart+1])&a.hash_mask;else d=F._tr_tally(a,0,a.window[a.strstart]),a.lookahead--,a.strstart++;if(d&&(h(a,!1),0===a.strm.avail_out))return ua}return a.insert=a.strstart<ja-1?a.strstart:ja-1,b===M?(h(a,!0),0===a.strm.avail_out?wa:xa):a.last_lit&&(h(a,!1),0===a.strm.avail_out)?ua:va}function p(a,b){for(var c,d,e;;){if(a.lookahead<la){if(m(a),a.lookahead<la&&b===J)return ua;if(0===a.lookahead)break}if(c=0,a.lookahead>=ja&&(a.ins_h=(a.ins_h<<a.hash_shift^a.window[a.strstart+ja-1])&a.hash_mask,c=a.prev[a.strstart&a.w_mask]=a.head[a.ins_h],a.head[a.ins_h]=a.strstart),a.prev_length=a.match_length,a.prev_match=a.match_start,a.match_length=ja-1,0!==c&&a.prev_length<a.max_lazy_match&&a.strstart-c<=a.w_size-la&&(a.match_length=l(a,c),a.match_length<=5&&(a.strategy===U||a.match_length===ja&&a.strstart-a.match_start>4096)&&(a.match_length=ja-1)),a.prev_length>=ja&&a.match_length<=a.prev_length){e=a.strstart+a.lookahead-ja,d=F._tr_tally(a,a.strstart-1-a.prev_match,a.prev_length-ja),a.lookahead-=a.prev_length-1,a.prev_length-=2;do++a.strstart<=e&&(a.ins_h=(a.ins_h<<a.hash_shift^a.window[a.strstart+ja-1])&a.hash_mask,c=a.prev[a.strstart&a.w_mask]=a.head[a.ins_h],a.head[a.ins_h]=a.strstart);while(0!==--a.prev_length);if(a.match_available=0,a.match_length=ja-1,a.strstart++,d&&(h(a,!1),0===a.strm.avail_out))return ua}else if(a.match_available){if(d=F._tr_tally(a,0,a.window[a.strstart-1]),d&&h(a,!1),a.strstart++,a.lookahead--,0===a.strm.avail_out)return ua}else a.match_available=1,a.strstart++,a.lookahead--}return a.match_available&&(d=F._tr_tally(a,0,a.window[a.strstart-1]),a.match_available=0),a.insert=a.strstart<ja-1?a.strstart:ja-1,b===M?(h(a,!0),0===a.strm.avail_out?wa:xa):a.last_lit&&(h(a,!1),0===a.strm.avail_out)?ua:va}function q(a,b){for(var c,d,e,f,g=a.window;;){if(a.lookahead<=ka){if(m(a),a.lookahead<=ka&&b===J)return ua;if(0===a.lookahead)break}if(a.match_length=0,a.lookahead>=ja&&a.strstart>0&&(e=a.strstart-1,d=g[e],d===g[++e]&&d===g[++e]&&d===g[++e])){f=a.strstart+ka;do;while(d===g[++e]&&d===g[++e]&&d===g[++e]&&d===g[++e]&&d===g[++e]&&d===g[++e]&&d===g[++e]&&d===g[++e]&&e<f);a.match_length=ka-(f-e),a.match_length>a.lookahead&&(a.match_length=a.lookahead)}if(a.match_length>=ja?(c=F._tr_tally(a,1,a.match_length-ja),a.lookahead-=a.match_length,a.strstart+=a.match_length,a.match_length=0):(c=F._tr_tally(a,0,a.window[a.strstart]),a.lookahead--,a.strstart++),c&&(h(a,!1),0===a.strm.avail_out))return ua}return a.insert=0,b===M?(h(a,!0),0===a.strm.avail_out?wa:xa):a.last_lit&&(h(a,!1),0===a.strm.avail_out)?ua:va}function r(a,b){for(var c;;){if(0===a.lookahead&&(m(a),0===a.lookahead)){if(b===J)return ua;break}if(a.match_length=0,c=F._tr_tally(a,0,a.window[a.strstart]),a.lookahead--,a.strstart++,c&&(h(a,!1),0===a.strm.avail_out))return ua}return a.insert=0,b===M?(h(a,!0),0===a.strm.avail_out?wa:xa):a.last_lit&&(h(a,!1),0===a.strm.avail_out)?ua:va}function s(a,b,c,d,e){this.good_length=a,this.max_lazy=b,this.nice_length=c,this.max_chain=d,this.func=e}function t(a){a.window_size=2*a.w_size,f(a.head),a.max_lazy_match=D[a.level].max_lazy,a.good_match=D[a.level].good_length,a.nice_match=D[a.level].nice_length,a.max_chain_length=D[a.level].max_chain,a.strstart=0,a.block_start=0,a.lookahead=0,a.insert=0,a.match_length=a.prev_length=ja-1,a.match_available=0,a.ins_h=0}function u(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=$,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new E.Buf16(2*ha),this.dyn_dtree=new E.Buf16(2*(2*fa+1)),this.bl_tree=new E.Buf16(2*(2*ga+1)),f(this.dyn_ltree),f(this.dyn_dtree),f(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new E.Buf16(ia+1),this.heap=new E.Buf16(2*ea+1),f(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new E.Buf16(2*ea+1),f(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function v(a){var b;return a&&a.state?(a.total_in=a.total_out=0,a.data_type=Z,b=a.state,b.pending=0,b.pending_out=0,b.wrap<0&&(b.wrap=-b.wrap),b.status=b.wrap?na:sa,a.adler=2===b.wrap?0:1,b.last_flush=J,F._tr_init(b),O):d(a,Q)}function w(a){var b=v(a);return b===O&&t(a.state),b}function x(a,b){return a&&a.state?2!==a.state.wrap?Q:(a.state.gzhead=b,O):Q}function y(a,b,c,e,f,g){if(!a)return Q;var h=1;if(b===T&&(b=6),e<0?(h=0,e=-e):e>15&&(h=2,e-=16),f<1||f>_||c!==$||e<8||e>15||b<0||b>9||g<0||g>X)return d(a,Q);8===e&&(e=9);var i=new u;return a.state=i,i.strm=a,i.wrap=h,i.gzhead=null,i.w_bits=e,i.w_size=1<<i.w_bits,i.w_mask=i.w_size-1,i.hash_bits=f+7,i.hash_size=1<<i.hash_bits,i.hash_mask=i.hash_size-1,i.hash_shift=~~((i.hash_bits+ja-1)/ja),i.window=new E.Buf8(2*i.w_size),i.head=new E.Buf16(i.hash_size),i.prev=new E.Buf16(i.w_size),i.lit_bufsize=1<<f+6,i.pending_buf_size=4*i.lit_bufsize,i.pending_buf=new E.Buf8(i.pending_buf_size),i.d_buf=1*i.lit_bufsize,i.l_buf=3*i.lit_bufsize,i.level=b,i.strategy=g,i.method=c,w(a)}function z(a,b){return y(a,b,$,aa,ba,Y)}function A(a,b){var c,h,k,l;if(!a||!a.state||b>N||b<0)return a?d(a,Q):Q;if(h=a.state,!a.output||!a.input&&0!==a.avail_in||h.status===ta&&b!==M)return d(a,0===a.avail_out?S:Q);if(h.strm=a,c=h.last_flush,h.last_flush=b,h.status===na)if(2===h.wrap)a.adler=0,i(h,31),i(h,139),i(h,8),h.gzhead?(i(h,(h.gzhead.text?1:0)+(h.gzhead.hcrc?2:0)+(h.gzhead.extra?4:0)+(h.gzhead.name?8:0)+(h.gzhead.comment?16:0)),i(h,255&h.gzhead.time),i(h,h.gzhead.time>>8&255),i(h,h.gzhead.time>>16&255),i(h,h.gzhead.time>>24&255),i(h,9===h.level?2:h.strategy>=V||h.level<2?4:0),i(h,255&h.gzhead.os),h.gzhead.extra&&h.gzhead.extra.length&&(i(h,255&h.gzhead.extra.length),i(h,h.gzhead.extra.length>>8&255)),h.gzhead.hcrc&&(a.adler=H(a.adler,h.pending_buf,h.pending,0)),h.gzindex=0,h.status=oa):(i(h,0),i(h,0),i(h,0),i(h,0),i(h,0),i(h,9===h.level?2:h.strategy>=V||h.level<2?4:0),i(h,ya),h.status=sa);else{var m=$+(h.w_bits-8<<4)<<8,n=-1;n=h.strategy>=V||h.level<2?0:h.level<6?1:6===h.level?2:3,m|=n<<6,0!==h.strstart&&(m|=ma),m+=31-m%31,h.status=sa,j(h,m),0!==h.strstart&&(j(h,a.adler>>>16),j(h,65535&a.adler)),a.adler=1}if(h.status===oa)if(h.gzhead.extra){for(k=h.pending;h.gzindex<(65535&h.gzhead.extra.length)&&(h.pending!==h.pending_buf_size||(h.gzhead.hcrc&&h.pending>k&&(a.adler=H(a.adler,h.pending_buf,h.pending-k,k)),g(a),k=h.pending,h.pending!==h.pending_buf_size));)i(h,255&h.gzhead.extra[h.gzindex]),h.gzindex++;h.gzhead.hcrc&&h.pending>k&&(a.adler=H(a.adler,h.pending_buf,h.pending-k,k)),h.gzindex===h.gzhead.extra.length&&(h.gzindex=0,h.status=pa)}else h.status=pa;if(h.status===pa)if(h.gzhead.name){k=h.pending;do{if(h.pending===h.pending_buf_size&&(h.gzhead.hcrc&&h.pending>k&&(a.adler=H(a.adler,h.pending_buf,h.pending-k,k)),g(a),k=h.pending,h.pending===h.pending_buf_size)){l=1;break}l=h.gzindex<h.gzhead.name.length?255&h.gzhead.name.charCodeAt(h.gzindex++):0,i(h,l)}while(0!==l);h.gzhead.hcrc&&h.pending>k&&(a.adler=H(a.adler,h.pending_buf,h.pending-k,k)),0===l&&(h.gzindex=0,h.status=qa)}else h.status=qa;if(h.status===qa)if(h.gzhead.comment){k=h.pending;do{if(h.pending===h.pending_buf_size&&(h.gzhead.hcrc&&h.pending>k&&(a.adler=H(a.adler,h.pending_buf,h.pending-k,k)),g(a),k=h.pending,h.pending===h.pending_buf_size)){l=1;break}l=h.gzindex<h.gzhead.comment.length?255&h.gzhead.comment.charCodeAt(h.gzindex++):0,i(h,l)}while(0!==l);h.gzhead.hcrc&&h.pending>k&&(a.adler=H(a.adler,h.pending_buf,h.pending-k,k)),0===l&&(h.status=ra)}else h.status=ra;if(h.status===ra&&(h.gzhead.hcrc?(h.pending+2>h.pending_buf_size&&g(a),h.pending+2<=h.pending_buf_size&&(i(h,255&a.adler),i(h,a.adler>>8&255),a.adler=0,h.status=sa)):h.status=sa),0!==h.pending){if(g(a),0===a.avail_out)return h.last_flush=-1,O}else if(0===a.avail_in&&e(b)<=e(c)&&b!==M)return d(a,S);if(h.status===ta&&0!==a.avail_in)return d(a,S);if(0!==a.avail_in||0!==h.lookahead||b!==J&&h.status!==ta){var o=h.strategy===V?r(h,b):h.strategy===W?q(h,b):D[h.level].func(h,b);if(o!==wa&&o!==xa||(h.status=ta),o===ua||o===wa)return 0===a.avail_out&&(h.last_flush=-1),O;if(o===va&&(b===K?F._tr_align(h):b!==N&&(F._tr_stored_block(h,0,0,!1),b===L&&(f(h.head),0===h.lookahead&&(h.strstart=0,h.block_start=0,h.insert=0))),g(a),0===a.avail_out))return h.last_flush=-1,O}return b!==M?O:h.wrap<=0?P:(2===h.wrap?(i(h,255&a.adler),i(h,a.adler>>8&255),i(h,a.adler>>16&255),i(h,a.adler>>24&255),i(h,255&a.total_in),i(h,a.total_in>>8&255),i(h,a.total_in>>16&255),i(h,a.total_in>>24&255)):(j(h,a.adler>>>16),j(h,65535&a.adler)),g(a),h.wrap>0&&(h.wrap=-h.wrap),0!==h.pending?O:P)}function B(a){var b;return a&&a.state?(b=a.state.status,b!==na&&b!==oa&&b!==pa&&b!==qa&&b!==ra&&b!==sa&&b!==ta?d(a,Q):(a.state=null,b===sa?d(a,R):O)):Q}function C(a,b){var c,d,e,g,h,i,j,k,l=b.length;if(!a||!a.state)return Q;if(c=a.state,g=c.wrap,2===g||1===g&&c.status!==na||c.lookahead)return Q;for(1===g&&(a.adler=G(a.adler,b,l,0)),c.wrap=0,l>=c.w_size&&(0===g&&(f(c.head),c.strstart=0,c.block_start=0,c.insert=0),k=new E.Buf8(c.w_size),E.arraySet(k,b,l-c.w_size,c.w_size,0),b=k,l=c.w_size),h=a.avail_in,i=a.next_in,j=a.input,a.avail_in=l,a.next_in=0,a.input=b,m(c);c.lookahead>=ja;){d=c.strstart,e=c.lookahead-(ja-1);do c.ins_h=(c.ins_h<<c.hash_shift^c.window[d+ja-1])&c.hash_mask,c.prev[d&c.w_mask]=c.head[c.ins_h],c.head[c.ins_h]=d,d++;while(--e);c.strstart=d,c.lookahead=ja-1,m(c)}return c.strstart+=c.lookahead,c.block_start=c.strstart,c.insert=c.lookahead,c.lookahead=0,c.match_length=c.prev_length=ja-1,c.match_available=0,a.next_in=i,a.input=j,a.avail_in=h,c.wrap=g,O}var D,E=a(\"../utils/common\"),F=a(\"./trees\"),G=a(\"./adler32\"),H=a(\"./crc32\"),I=a(\"./messages\"),J=0,K=1,L=3,M=4,N=5,O=0,P=1,Q=-2,R=-3,S=-5,T=-1,U=1,V=2,W=3,X=4,Y=0,Z=2,$=8,_=9,aa=15,ba=8,ca=29,da=256,ea=da+1+ca,fa=30,ga=19,ha=2*ea+1,ia=15,ja=3,ka=258,la=ka+ja+1,ma=32,na=42,oa=69,pa=73,qa=91,ra=103,sa=113,ta=666,ua=1,va=2,wa=3,xa=4,ya=3;D=[new s(0,0,0,0,n),new s(4,4,8,4,o),new s(4,5,16,8,o),new s(4,6,32,32,o),new s(4,4,16,16,p),new s(8,16,32,32,p),new s(8,16,128,128,p),new s(8,32,128,256,p),new s(32,128,258,1024,p),new s(32,258,258,4096,p)],c.deflateInit=z,c.deflateInit2=y,c.deflateReset=w,c.deflateResetKeep=v,c.deflateSetHeader=x,c.deflate=A,c.deflateEnd=B,c.deflateSetDictionary=C,c.deflateInfo=\"pako deflate (from Nodeca project)\"},{\"../utils/common\":28,\"./adler32\":30,\"./crc32\":32,\"./messages\":38,\"./trees\":39}],34:[function(a,b,c){\"use strict\";function d(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name=\"\",this.comment=\"\",this.hcrc=0,this.done=!1}b.exports=d},{}],35:[function(a,b,c){\"use strict\";var d=30,e=12;b.exports=function(a,b){var c,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C;c=a.state,f=a.next_in,B=a.input,g=f+(a.avail_in-5),h=a.next_out,C=a.output,i=h-(b-a.avail_out),j=h+(a.avail_out-257),k=c.dmax,l=c.wsize,m=c.whave,n=c.wnext,o=c.window,p=c.hold,q=c.bits,r=c.lencode,s=c.distcode,t=(1<<c.lenbits)-1,u=(1<<c.distbits)-1;a:do{q<15&&(p+=B[f++]<<q,q+=8,p+=B[f++]<<q,q+=8),v=r[p&t];b:for(;;){if(w=v>>>24,p>>>=w,q-=w,w=v>>>16&255,0===w)C[h++]=65535&v;else{if(!(16&w)){if(0===(64&w)){v=r[(65535&v)+(p&(1<<w)-1)];continue b}if(32&w){c.mode=e;break a}a.msg=\"invalid literal/length code\",c.mode=d;break a}x=65535&v,w&=15,w&&(q<w&&(p+=B[f++]<<q,q+=8),x+=p&(1<<w)-1,p>>>=w,q-=w),q<15&&(p+=B[f++]<<q,q+=8,p+=B[f++]<<q,q+=8),v=s[p&u];c:for(;;){if(w=v>>>24,p>>>=w,q-=w,w=v>>>16&255,!(16&w)){if(0===(64&w)){v=s[(65535&v)+(p&(1<<w)-1)];continue c}a.msg=\"invalid distance code\",c.mode=d;break a}if(y=65535&v,w&=15,q<w&&(p+=B[f++]<<q,q+=8,q<w&&(p+=B[f++]<<q,q+=8)),y+=p&(1<<w)-1,y>k){a.msg=\"invalid distance too far back\",c.mode=d;break a}if(p>>>=w,q-=w,w=h-i,y>w){if(w=y-w,w>m&&c.sane){a.msg=\"invalid distance too far back\",c.mode=d;break a}if(z=0,A=o,0===n){if(z+=l-w,w<x){x-=w;do C[h++]=o[z++];while(--w);z=h-y,A=C}}else if(n<w){if(z+=l+n-w,w-=n,w<x){x-=w;do C[h++]=o[z++];while(--w);if(z=0,n<x){w=n,x-=w;do C[h++]=o[z++];while(--w);z=h-y,A=C}}}else if(z+=n-w,w<x){x-=w;do C[h++]=o[z++];while(--w);z=h-y,A=C}for(;x>2;)C[h++]=A[z++],C[h++]=A[z++],C[h++]=A[z++],x-=3;x&&(C[h++]=A[z++],x>1&&(C[h++]=A[z++]))}else{z=h-y;do C[h++]=C[z++],C[h++]=C[z++],C[h++]=C[z++],x-=3;while(x>2);x&&(C[h++]=C[z++],x>1&&(C[h++]=C[z++]))}break}}break}}while(f<g&&h<j);x=q>>3,f-=x,q-=x<<3,p&=(1<<q)-1,a.next_in=f,a.next_out=h,a.avail_in=f<g?5+(g-f):5-(f-g),a.avail_out=h<j?257+(j-h):257-(h-j),c.hold=p,c.bits=q}},{}],36:[function(a,b,c){\"use strict\";function d(a){return(a>>>24&255)+(a>>>8&65280)+((65280&a)<<8)+((255&a)<<24)}function e(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new s.Buf16(320),this.work=new s.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function f(a){var b;return a&&a.state?(b=a.state,a.total_in=a.total_out=b.total=0,a.msg=\"\",b.wrap&&(a.adler=1&b.wrap),b.mode=L,b.last=0,b.havedict=0,b.dmax=32768,b.head=null,b.hold=0,b.bits=0,b.lencode=b.lendyn=new s.Buf32(pa),b.distcode=b.distdyn=new s.Buf32(qa),b.sane=1,b.back=-1,D):G}function g(a){var b;return a&&a.state?(b=a.state,b.wsize=0,b.whave=0,b.wnext=0,f(a)):G}function h(a,b){var c,d;return a&&a.state?(d=a.state,b<0?(c=0,b=-b):(c=(b>>4)+1,b<48&&(b&=15)),b&&(b<8||b>15)?G:(null!==d.window&&d.wbits!==b&&(d.window=null),d.wrap=c,d.wbits=b,g(a))):G}function i(a,b){var c,d;return a?(d=new e,a.state=d,d.window=null,c=h(a,b),c!==D&&(a.state=null),c):G}function j(a){return i(a,sa)}function k(a){if(ta){var b;for(q=new s.Buf32(512),r=new s.Buf32(32),b=0;b<144;)a.lens[b++]=8;for(;b<256;)a.lens[b++]=9;for(;b<280;)a.lens[b++]=7;for(;b<288;)a.lens[b++]=8;for(w(y,a.lens,0,288,q,0,a.work,{bits:9}),b=0;b<32;)a.lens[b++]=5;w(z,a.lens,0,32,r,0,a.work,{bits:5}),ta=!1}a.lencode=q,a.lenbits=9,a.distcode=r,a.distbits=5}function l(a,b,c,d){var e,f=a.state;return null===f.window&&(f.wsize=1<<f.wbits,f.wnext=0,f.whave=0,f.window=new s.Buf8(f.wsize)),d>=f.wsize?(s.arraySet(f.window,b,c-f.wsize,f.wsize,0),f.wnext=0,f.whave=f.wsize):(e=f.wsize-f.wnext,e>d&&(e=d),s.arraySet(f.window,b,c-d,e,f.wnext),d-=e,d?(s.arraySet(f.window,b,c-d,d,0),f.wnext=d,f.whave=f.wsize):(f.wnext+=e,f.wnext===f.wsize&&(f.wnext=0),f.whave<f.wsize&&(f.whave+=e))),0}function m(a,b){var c,e,f,g,h,i,j,m,n,o,p,q,r,pa,qa,ra,sa,ta,ua,va,wa,xa,ya,za,Aa=0,Ba=new s.Buf8(4),Ca=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!a||!a.state||!a.output||!a.input&&0!==a.avail_in)return G;c=a.state,c.mode===W&&(c.mode=X),h=a.next_out,f=a.output,j=a.avail_out,g=a.next_in,e=a.input,i=a.avail_in,m=c.hold,n=c.bits,o=i,p=j,xa=D;a:for(;;)switch(c.mode){case L:if(0===c.wrap){c.mode=X;break}for(;n<16;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if(2&c.wrap&&35615===m){c.check=0,Ba[0]=255&m,Ba[1]=m>>>8&255,c.check=u(c.check,Ba,2,0),m=0,n=0,c.mode=M;break}if(c.flags=0,c.head&&(c.head.done=!1),!(1&c.wrap)||(((255&m)<<8)+(m>>8))%31){a.msg=\"incorrect header check\",c.mode=ma;break}if((15&m)!==K){a.msg=\"unknown compression method\",c.mode=ma;break}if(m>>>=4,n-=4,wa=(15&m)+8,0===c.wbits)c.wbits=wa;else if(wa>c.wbits){a.msg=\"invalid window size\",c.mode=ma;break}c.dmax=1<<wa,a.adler=c.check=1,c.mode=512&m?U:W,m=0,n=0;break;case M:for(;n<16;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if(c.flags=m,(255&c.flags)!==K){a.msg=\"unknown compression method\",c.mode=ma;break}if(57344&c.flags){a.msg=\"unknown header flags set\",c.mode=ma;break}c.head&&(c.head.text=m>>8&1),512&c.flags&&(Ba[0]=255&m,Ba[1]=m>>>8&255,c.check=u(c.check,Ba,2,0)),m=0,n=0,c.mode=N;case N:for(;n<32;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}c.head&&(c.head.time=m),512&c.flags&&(Ba[0]=255&m,Ba[1]=m>>>8&255,Ba[2]=m>>>16&255,Ba[3]=m>>>24&255,c.check=u(c.check,Ba,4,0)),m=0,n=0,c.mode=O;case O:for(;n<16;){if(0===i)break a;i--,m+=e[g++]<<n,\nn+=8}c.head&&(c.head.xflags=255&m,c.head.os=m>>8),512&c.flags&&(Ba[0]=255&m,Ba[1]=m>>>8&255,c.check=u(c.check,Ba,2,0)),m=0,n=0,c.mode=P;case P:if(1024&c.flags){for(;n<16;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}c.length=m,c.head&&(c.head.extra_len=m),512&c.flags&&(Ba[0]=255&m,Ba[1]=m>>>8&255,c.check=u(c.check,Ba,2,0)),m=0,n=0}else c.head&&(c.head.extra=null);c.mode=Q;case Q:if(1024&c.flags&&(q=c.length,q>i&&(q=i),q&&(c.head&&(wa=c.head.extra_len-c.length,c.head.extra||(c.head.extra=new Array(c.head.extra_len)),s.arraySet(c.head.extra,e,g,q,wa)),512&c.flags&&(c.check=u(c.check,e,q,g)),i-=q,g+=q,c.length-=q),c.length))break a;c.length=0,c.mode=R;case R:if(2048&c.flags){if(0===i)break a;q=0;do wa=e[g+q++],c.head&&wa&&c.length<65536&&(c.head.name+=String.fromCharCode(wa));while(wa&&q<i);if(512&c.flags&&(c.check=u(c.check,e,q,g)),i-=q,g+=q,wa)break a}else c.head&&(c.head.name=null);c.length=0,c.mode=S;case S:if(4096&c.flags){if(0===i)break a;q=0;do wa=e[g+q++],c.head&&wa&&c.length<65536&&(c.head.comment+=String.fromCharCode(wa));while(wa&&q<i);if(512&c.flags&&(c.check=u(c.check,e,q,g)),i-=q,g+=q,wa)break a}else c.head&&(c.head.comment=null);c.mode=T;case T:if(512&c.flags){for(;n<16;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if(m!==(65535&c.check)){a.msg=\"header crc mismatch\",c.mode=ma;break}m=0,n=0}c.head&&(c.head.hcrc=c.flags>>9&1,c.head.done=!0),a.adler=c.check=0,c.mode=W;break;case U:for(;n<32;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}a.adler=c.check=d(m),m=0,n=0,c.mode=V;case V:if(0===c.havedict)return a.next_out=h,a.avail_out=j,a.next_in=g,a.avail_in=i,c.hold=m,c.bits=n,F;a.adler=c.check=1,c.mode=W;case W:if(b===B||b===C)break a;case X:if(c.last){m>>>=7&n,n-=7&n,c.mode=ja;break}for(;n<3;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}switch(c.last=1&m,m>>>=1,n-=1,3&m){case 0:c.mode=Y;break;case 1:if(k(c),c.mode=ca,b===C){m>>>=2,n-=2;break a}break;case 2:c.mode=_;break;case 3:a.msg=\"invalid block type\",c.mode=ma}m>>>=2,n-=2;break;case Y:for(m>>>=7&n,n-=7&n;n<32;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if((65535&m)!==(m>>>16^65535)){a.msg=\"invalid stored block lengths\",c.mode=ma;break}if(c.length=65535&m,m=0,n=0,c.mode=Z,b===C)break a;case Z:c.mode=$;case $:if(q=c.length){if(q>i&&(q=i),q>j&&(q=j),0===q)break a;s.arraySet(f,e,g,q,h),i-=q,g+=q,j-=q,h+=q,c.length-=q;break}c.mode=W;break;case _:for(;n<14;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if(c.nlen=(31&m)+257,m>>>=5,n-=5,c.ndist=(31&m)+1,m>>>=5,n-=5,c.ncode=(15&m)+4,m>>>=4,n-=4,c.nlen>286||c.ndist>30){a.msg=\"too many length or distance symbols\",c.mode=ma;break}c.have=0,c.mode=aa;case aa:for(;c.have<c.ncode;){for(;n<3;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}c.lens[Ca[c.have++]]=7&m,m>>>=3,n-=3}for(;c.have<19;)c.lens[Ca[c.have++]]=0;if(c.lencode=c.lendyn,c.lenbits=7,ya={bits:c.lenbits},xa=w(x,c.lens,0,19,c.lencode,0,c.work,ya),c.lenbits=ya.bits,xa){a.msg=\"invalid code lengths set\",c.mode=ma;break}c.have=0,c.mode=ba;case ba:for(;c.have<c.nlen+c.ndist;){for(;Aa=c.lencode[m&(1<<c.lenbits)-1],qa=Aa>>>24,ra=Aa>>>16&255,sa=65535&Aa,!(qa<=n);){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if(sa<16)m>>>=qa,n-=qa,c.lens[c.have++]=sa;else{if(16===sa){for(za=qa+2;n<za;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if(m>>>=qa,n-=qa,0===c.have){a.msg=\"invalid bit length repeat\",c.mode=ma;break}wa=c.lens[c.have-1],q=3+(3&m),m>>>=2,n-=2}else if(17===sa){for(za=qa+3;n<za;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}m>>>=qa,n-=qa,wa=0,q=3+(7&m),m>>>=3,n-=3}else{for(za=qa+7;n<za;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}m>>>=qa,n-=qa,wa=0,q=11+(127&m),m>>>=7,n-=7}if(c.have+q>c.nlen+c.ndist){a.msg=\"invalid bit length repeat\",c.mode=ma;break}for(;q--;)c.lens[c.have++]=wa}}if(c.mode===ma)break;if(0===c.lens[256]){a.msg=\"invalid code -- missing end-of-block\",c.mode=ma;break}if(c.lenbits=9,ya={bits:c.lenbits},xa=w(y,c.lens,0,c.nlen,c.lencode,0,c.work,ya),c.lenbits=ya.bits,xa){a.msg=\"invalid literal/lengths set\",c.mode=ma;break}if(c.distbits=6,c.distcode=c.distdyn,ya={bits:c.distbits},xa=w(z,c.lens,c.nlen,c.ndist,c.distcode,0,c.work,ya),c.distbits=ya.bits,xa){a.msg=\"invalid distances set\",c.mode=ma;break}if(c.mode=ca,b===C)break a;case ca:c.mode=da;case da:if(i>=6&&j>=258){a.next_out=h,a.avail_out=j,a.next_in=g,a.avail_in=i,c.hold=m,c.bits=n,v(a,p),h=a.next_out,f=a.output,j=a.avail_out,g=a.next_in,e=a.input,i=a.avail_in,m=c.hold,n=c.bits,c.mode===W&&(c.back=-1);break}for(c.back=0;Aa=c.lencode[m&(1<<c.lenbits)-1],qa=Aa>>>24,ra=Aa>>>16&255,sa=65535&Aa,!(qa<=n);){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if(ra&&0===(240&ra)){for(ta=qa,ua=ra,va=sa;Aa=c.lencode[va+((m&(1<<ta+ua)-1)>>ta)],qa=Aa>>>24,ra=Aa>>>16&255,sa=65535&Aa,!(ta+qa<=n);){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}m>>>=ta,n-=ta,c.back+=ta}if(m>>>=qa,n-=qa,c.back+=qa,c.length=sa,0===ra){c.mode=ia;break}if(32&ra){c.back=-1,c.mode=W;break}if(64&ra){a.msg=\"invalid literal/length code\",c.mode=ma;break}c.extra=15&ra,c.mode=ea;case ea:if(c.extra){for(za=c.extra;n<za;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}c.length+=m&(1<<c.extra)-1,m>>>=c.extra,n-=c.extra,c.back+=c.extra}c.was=c.length,c.mode=fa;case fa:for(;Aa=c.distcode[m&(1<<c.distbits)-1],qa=Aa>>>24,ra=Aa>>>16&255,sa=65535&Aa,!(qa<=n);){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if(0===(240&ra)){for(ta=qa,ua=ra,va=sa;Aa=c.distcode[va+((m&(1<<ta+ua)-1)>>ta)],qa=Aa>>>24,ra=Aa>>>16&255,sa=65535&Aa,!(ta+qa<=n);){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}m>>>=ta,n-=ta,c.back+=ta}if(m>>>=qa,n-=qa,c.back+=qa,64&ra){a.msg=\"invalid distance code\",c.mode=ma;break}c.offset=sa,c.extra=15&ra,c.mode=ga;case ga:if(c.extra){for(za=c.extra;n<za;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}c.offset+=m&(1<<c.extra)-1,m>>>=c.extra,n-=c.extra,c.back+=c.extra}if(c.offset>c.dmax){a.msg=\"invalid distance too far back\",c.mode=ma;break}c.mode=ha;case ha:if(0===j)break a;if(q=p-j,c.offset>q){if(q=c.offset-q,q>c.whave&&c.sane){a.msg=\"invalid distance too far back\",c.mode=ma;break}q>c.wnext?(q-=c.wnext,r=c.wsize-q):r=c.wnext-q,q>c.length&&(q=c.length),pa=c.window}else pa=f,r=h-c.offset,q=c.length;q>j&&(q=j),j-=q,c.length-=q;do f[h++]=pa[r++];while(--q);0===c.length&&(c.mode=da);break;case ia:if(0===j)break a;f[h++]=c.length,j--,c.mode=da;break;case ja:if(c.wrap){for(;n<32;){if(0===i)break a;i--,m|=e[g++]<<n,n+=8}if(p-=j,a.total_out+=p,c.total+=p,p&&(a.adler=c.check=c.flags?u(c.check,f,p,h-p):t(c.check,f,p,h-p)),p=j,(c.flags?m:d(m))!==c.check){a.msg=\"incorrect data check\",c.mode=ma;break}m=0,n=0}c.mode=ka;case ka:if(c.wrap&&c.flags){for(;n<32;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if(m!==(4294967295&c.total)){a.msg=\"incorrect length check\",c.mode=ma;break}m=0,n=0}c.mode=la;case la:xa=E;break a;case ma:xa=H;break a;case na:return I;case oa:default:return G}return a.next_out=h,a.avail_out=j,a.next_in=g,a.avail_in=i,c.hold=m,c.bits=n,(c.wsize||p!==a.avail_out&&c.mode<ma&&(c.mode<ja||b!==A))&&l(a,a.output,a.next_out,p-a.avail_out)?(c.mode=na,I):(o-=a.avail_in,p-=a.avail_out,a.total_in+=o,a.total_out+=p,c.total+=p,c.wrap&&p&&(a.adler=c.check=c.flags?u(c.check,f,p,a.next_out-p):t(c.check,f,p,a.next_out-p)),a.data_type=c.bits+(c.last?64:0)+(c.mode===W?128:0)+(c.mode===ca||c.mode===Z?256:0),(0===o&&0===p||b===A)&&xa===D&&(xa=J),xa)}function n(a){if(!a||!a.state)return G;var b=a.state;return b.window&&(b.window=null),a.state=null,D}function o(a,b){var c;return a&&a.state?(c=a.state,0===(2&c.wrap)?G:(c.head=b,b.done=!1,D)):G}function p(a,b){var c,d,e,f=b.length;return a&&a.state?(c=a.state,0!==c.wrap&&c.mode!==V?G:c.mode===V&&(d=1,d=t(d,b,f,0),d!==c.check)?H:(e=l(a,b,f,f))?(c.mode=na,I):(c.havedict=1,D)):G}var q,r,s=a(\"../utils/common\"),t=a(\"./adler32\"),u=a(\"./crc32\"),v=a(\"./inffast\"),w=a(\"./inftrees\"),x=0,y=1,z=2,A=4,B=5,C=6,D=0,E=1,F=2,G=-2,H=-3,I=-4,J=-5,K=8,L=1,M=2,N=3,O=4,P=5,Q=6,R=7,S=8,T=9,U=10,V=11,W=12,X=13,Y=14,Z=15,$=16,_=17,aa=18,ba=19,ca=20,da=21,ea=22,fa=23,ga=24,ha=25,ia=26,ja=27,ka=28,la=29,ma=30,na=31,oa=32,pa=852,qa=592,ra=15,sa=ra,ta=!0;c.inflateReset=g,c.inflateReset2=h,c.inflateResetKeep=f,c.inflateInit=j,c.inflateInit2=i,c.inflate=m,c.inflateEnd=n,c.inflateGetHeader=o,c.inflateSetDictionary=p,c.inflateInfo=\"pako inflate (from Nodeca project)\"},{\"../utils/common\":28,\"./adler32\":30,\"./crc32\":32,\"./inffast\":35,\"./inftrees\":37}],37:[function(a,b,c){\"use strict\";var d=a(\"../utils/common\"),e=15,f=852,g=592,h=0,i=1,j=2,k=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],l=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],m=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],n=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];b.exports=function(a,b,c,o,p,q,r,s){var t,u,v,w,x,y,z,A,B,C=s.bits,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=null,O=0,P=new d.Buf16(e+1),Q=new d.Buf16(e+1),R=null,S=0;for(D=0;D<=e;D++)P[D]=0;for(E=0;E<o;E++)P[b[c+E]]++;for(H=C,G=e;G>=1&&0===P[G];G--);if(H>G&&(H=G),0===G)return p[q++]=20971520,p[q++]=20971520,s.bits=1,0;for(F=1;F<G&&0===P[F];F++);for(H<F&&(H=F),K=1,D=1;D<=e;D++)if(K<<=1,K-=P[D],K<0)return-1;if(K>0&&(a===h||1!==G))return-1;for(Q[1]=0,D=1;D<e;D++)Q[D+1]=Q[D]+P[D];for(E=0;E<o;E++)0!==b[c+E]&&(r[Q[b[c+E]]++]=E);if(a===h?(N=R=r,y=19):a===i?(N=k,O-=257,R=l,S-=257,y=256):(N=m,R=n,y=-1),M=0,E=0,D=F,x=q,I=H,J=0,v=-1,L=1<<H,w=L-1,a===i&&L>f||a===j&&L>g)return 1;for(var T=0;;){T++,z=D-J,r[E]<y?(A=0,B=r[E]):r[E]>y?(A=R[S+r[E]],B=N[O+r[E]]):(A=96,B=0),t=1<<D-J,u=1<<I,F=u;do u-=t,p[x+(M>>J)+u]=z<<24|A<<16|B|0;while(0!==u);for(t=1<<D-1;M&t;)t>>=1;if(0!==t?(M&=t-1,M+=t):M=0,E++,0===--P[D]){if(D===G)break;D=b[c+r[E]]}if(D>H&&(M&w)!==v){for(0===J&&(J=H),x+=F,I=D-J,K=1<<I;I+J<G&&(K-=P[I+J],!(K<=0));)I++,K<<=1;if(L+=1<<I,a===i&&L>f||a===j&&L>g)return 1;v=M&w,p[v]=H<<24|I<<16|x-q|0}}return 0!==M&&(p[x+M]=D-J<<24|64<<16|0),s.bits=H,0}},{\"../utils/common\":28}],38:[function(a,b,c){\"use strict\";b.exports={2:\"need dictionary\",1:\"stream end\",0:\"\",\"-1\":\"file error\",\"-2\":\"stream error\",\"-3\":\"data error\",\"-4\":\"insufficient memory\",\"-5\":\"buffer error\",\"-6\":\"incompatible version\"}},{}],39:[function(a,b,c){\"use strict\";function d(a){for(var b=a.length;--b>=0;)a[b]=0}function e(a,b,c,d,e){this.static_tree=a,this.extra_bits=b,this.extra_base=c,this.elems=d,this.max_length=e,this.has_stree=a&&a.length}function f(a,b){this.dyn_tree=a,this.max_code=0,this.stat_desc=b}function g(a){return a<256?ia[a]:ia[256+(a>>>7)]}function h(a,b){a.pending_buf[a.pending++]=255&b,a.pending_buf[a.pending++]=b>>>8&255}function i(a,b,c){a.bi_valid>X-c?(a.bi_buf|=b<<a.bi_valid&65535,h(a,a.bi_buf),a.bi_buf=b>>X-a.bi_valid,a.bi_valid+=c-X):(a.bi_buf|=b<<a.bi_valid&65535,a.bi_valid+=c)}function j(a,b,c){i(a,c[2*b],c[2*b+1])}function k(a,b){var c=0;do c|=1&a,a>>>=1,c<<=1;while(--b>0);return c>>>1}function l(a){16===a.bi_valid?(h(a,a.bi_buf),a.bi_buf=0,a.bi_valid=0):a.bi_valid>=8&&(a.pending_buf[a.pending++]=255&a.bi_buf,a.bi_buf>>=8,a.bi_valid-=8)}function m(a,b){var c,d,e,f,g,h,i=b.dyn_tree,j=b.max_code,k=b.stat_desc.static_tree,l=b.stat_desc.has_stree,m=b.stat_desc.extra_bits,n=b.stat_desc.extra_base,o=b.stat_desc.max_length,p=0;for(f=0;f<=W;f++)a.bl_count[f]=0;for(i[2*a.heap[a.heap_max]+1]=0,c=a.heap_max+1;c<V;c++)d=a.heap[c],f=i[2*i[2*d+1]+1]+1,f>o&&(f=o,p++),i[2*d+1]=f,d>j||(a.bl_count[f]++,g=0,d>=n&&(g=m[d-n]),h=i[2*d],a.opt_len+=h*(f+g),l&&(a.static_len+=h*(k[2*d+1]+g)));if(0!==p){do{for(f=o-1;0===a.bl_count[f];)f--;a.bl_count[f]--,a.bl_count[f+1]+=2,a.bl_count[o]--,p-=2}while(p>0);for(f=o;0!==f;f--)for(d=a.bl_count[f];0!==d;)e=a.heap[--c],e>j||(i[2*e+1]!==f&&(a.opt_len+=(f-i[2*e+1])*i[2*e],i[2*e+1]=f),d--)}}function n(a,b,c){var d,e,f=new Array(W+1),g=0;for(d=1;d<=W;d++)f[d]=g=g+c[d-1]<<1;for(e=0;e<=b;e++){var h=a[2*e+1];0!==h&&(a[2*e]=k(f[h]++,h))}}function o(){var a,b,c,d,f,g=new Array(W+1);for(c=0,d=0;d<Q-1;d++)for(ka[d]=c,a=0;a<1<<ba[d];a++)ja[c++]=d;for(ja[c-1]=d,f=0,d=0;d<16;d++)for(la[d]=f,a=0;a<1<<ca[d];a++)ia[f++]=d;for(f>>=7;d<T;d++)for(la[d]=f<<7,a=0;a<1<<ca[d]-7;a++)ia[256+f++]=d;for(b=0;b<=W;b++)g[b]=0;for(a=0;a<=143;)ga[2*a+1]=8,a++,g[8]++;for(;a<=255;)ga[2*a+1]=9,a++,g[9]++;for(;a<=279;)ga[2*a+1]=7,a++,g[7]++;for(;a<=287;)ga[2*a+1]=8,a++,g[8]++;for(n(ga,S+1,g),a=0;a<T;a++)ha[2*a+1]=5,ha[2*a]=k(a,5);ma=new e(ga,ba,R+1,S,W),na=new e(ha,ca,0,T,W),oa=new e(new Array(0),da,0,U,Y)}function p(a){var b;for(b=0;b<S;b++)a.dyn_ltree[2*b]=0;for(b=0;b<T;b++)a.dyn_dtree[2*b]=0;for(b=0;b<U;b++)a.bl_tree[2*b]=0;a.dyn_ltree[2*Z]=1,a.opt_len=a.static_len=0,a.last_lit=a.matches=0}function q(a){a.bi_valid>8?h(a,a.bi_buf):a.bi_valid>0&&(a.pending_buf[a.pending++]=a.bi_buf),a.bi_buf=0,a.bi_valid=0}function r(a,b,c,d){q(a),d&&(h(a,c),h(a,~c)),G.arraySet(a.pending_buf,a.window,b,c,a.pending),a.pending+=c}function s(a,b,c,d){var e=2*b,f=2*c;return a[e]<a[f]||a[e]===a[f]&&d[b]<=d[c]}function t(a,b,c){for(var d=a.heap[c],e=c<<1;e<=a.heap_len&&(e<a.heap_len&&s(b,a.heap[e+1],a.heap[e],a.depth)&&e++,!s(b,d,a.heap[e],a.depth));)a.heap[c]=a.heap[e],c=e,e<<=1;a.heap[c]=d}function u(a,b,c){var d,e,f,h,k=0;if(0!==a.last_lit)do d=a.pending_buf[a.d_buf+2*k]<<8|a.pending_buf[a.d_buf+2*k+1],e=a.pending_buf[a.l_buf+k],k++,0===d?j(a,e,b):(f=ja[e],j(a,f+R+1,b),h=ba[f],0!==h&&(e-=ka[f],i(a,e,h)),d--,f=g(d),j(a,f,c),h=ca[f],0!==h&&(d-=la[f],i(a,d,h)));while(k<a.last_lit);j(a,Z,b)}function v(a,b){var c,d,e,f=b.dyn_tree,g=b.stat_desc.static_tree,h=b.stat_desc.has_stree,i=b.stat_desc.elems,j=-1;for(a.heap_len=0,a.heap_max=V,c=0;c<i;c++)0!==f[2*c]?(a.heap[++a.heap_len]=j=c,a.depth[c]=0):f[2*c+1]=0;for(;a.heap_len<2;)e=a.heap[++a.heap_len]=j<2?++j:0,f[2*e]=1,a.depth[e]=0,a.opt_len--,h&&(a.static_len-=g[2*e+1]);for(b.max_code=j,c=a.heap_len>>1;c>=1;c--)t(a,f,c);e=i;do c=a.heap[1],a.heap[1]=a.heap[a.heap_len--],t(a,f,1),d=a.heap[1],a.heap[--a.heap_max]=c,a.heap[--a.heap_max]=d,f[2*e]=f[2*c]+f[2*d],a.depth[e]=(a.depth[c]>=a.depth[d]?a.depth[c]:a.depth[d])+1,f[2*c+1]=f[2*d+1]=e,a.heap[1]=e++,t(a,f,1);while(a.heap_len>=2);a.heap[--a.heap_max]=a.heap[1],m(a,b),n(f,j,a.bl_count)}function w(a,b,c){var d,e,f=-1,g=b[1],h=0,i=7,j=4;for(0===g&&(i=138,j=3),b[2*(c+1)+1]=65535,d=0;d<=c;d++)e=g,g=b[2*(d+1)+1],++h<i&&e===g||(h<j?a.bl_tree[2*e]+=h:0!==e?(e!==f&&a.bl_tree[2*e]++,a.bl_tree[2*$]++):h<=10?a.bl_tree[2*_]++:a.bl_tree[2*aa]++,h=0,f=e,0===g?(i=138,j=3):e===g?(i=6,j=3):(i=7,j=4))}function x(a,b,c){var d,e,f=-1,g=b[1],h=0,k=7,l=4;for(0===g&&(k=138,l=3),d=0;d<=c;d++)if(e=g,g=b[2*(d+1)+1],!(++h<k&&e===g)){if(h<l){do j(a,e,a.bl_tree);while(0!==--h)}else 0!==e?(e!==f&&(j(a,e,a.bl_tree),h--),j(a,$,a.bl_tree),i(a,h-3,2)):h<=10?(j(a,_,a.bl_tree),i(a,h-3,3)):(j(a,aa,a.bl_tree),i(a,h-11,7));h=0,f=e,0===g?(k=138,l=3):e===g?(k=6,l=3):(k=7,l=4)}}function y(a){var b;for(w(a,a.dyn_ltree,a.l_desc.max_code),w(a,a.dyn_dtree,a.d_desc.max_code),v(a,a.bl_desc),b=U-1;b>=3&&0===a.bl_tree[2*ea[b]+1];b--);return a.opt_len+=3*(b+1)+5+5+4,b}function z(a,b,c,d){var e;for(i(a,b-257,5),i(a,c-1,5),i(a,d-4,4),e=0;e<d;e++)i(a,a.bl_tree[2*ea[e]+1],3);x(a,a.dyn_ltree,b-1),x(a,a.dyn_dtree,c-1)}function A(a){var b,c=4093624447;for(b=0;b<=31;b++,c>>>=1)if(1&c&&0!==a.dyn_ltree[2*b])return I;if(0!==a.dyn_ltree[18]||0!==a.dyn_ltree[20]||0!==a.dyn_ltree[26])return J;for(b=32;b<R;b++)if(0!==a.dyn_ltree[2*b])return J;return I}function B(a){pa||(o(),pa=!0),a.l_desc=new f(a.dyn_ltree,ma),a.d_desc=new f(a.dyn_dtree,na),a.bl_desc=new f(a.bl_tree,oa),a.bi_buf=0,a.bi_valid=0,p(a)}function C(a,b,c,d){i(a,(L<<1)+(d?1:0),3),r(a,b,c,!0)}function D(a){i(a,M<<1,3),j(a,Z,ga),l(a)}function E(a,b,c,d){var e,f,g=0;a.level>0?(a.strm.data_type===K&&(a.strm.data_type=A(a)),v(a,a.l_desc),v(a,a.d_desc),g=y(a),e=a.opt_len+3+7>>>3,f=a.static_len+3+7>>>3,f<=e&&(e=f)):e=f=c+5,c+4<=e&&b!==-1?C(a,b,c,d):a.strategy===H||f===e?(i(a,(M<<1)+(d?1:0),3),u(a,ga,ha)):(i(a,(N<<1)+(d?1:0),3),z(a,a.l_desc.max_code+1,a.d_desc.max_code+1,g+1),u(a,a.dyn_ltree,a.dyn_dtree)),p(a),d&&q(a)}function F(a,b,c){return a.pending_buf[a.d_buf+2*a.last_lit]=b>>>8&255,a.pending_buf[a.d_buf+2*a.last_lit+1]=255&b,a.pending_buf[a.l_buf+a.last_lit]=255&c,a.last_lit++,0===b?a.dyn_ltree[2*c]++:(a.matches++,b--,a.dyn_ltree[2*(ja[c]+R+1)]++,a.dyn_dtree[2*g(b)]++),a.last_lit===a.lit_bufsize-1}var G=a(\"../utils/common\"),H=4,I=0,J=1,K=2,L=0,M=1,N=2,O=3,P=258,Q=29,R=256,S=R+1+Q,T=30,U=19,V=2*S+1,W=15,X=16,Y=7,Z=256,$=16,_=17,aa=18,ba=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],ca=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],da=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],ea=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],fa=512,ga=new Array(2*(S+2));d(ga);var ha=new Array(2*T);d(ha);var ia=new Array(fa);d(ia);var ja=new Array(P-O+1);d(ja);var ka=new Array(Q);d(ka);var la=new Array(T);d(la);var ma,na,oa,pa=!1;c._tr_init=B,c._tr_stored_block=C,c._tr_flush_block=E,c._tr_tally=F,c._tr_align=D},{\"../utils/common\":28}],40:[function(a,b,c){\"use strict\";function d(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg=\"\",this.state=null,this.data_type=2,this.adler=0}b.exports=d},{}]},{},[10])(10)});\n","var map = {\n\t\"./af\": 2786,\n\t\"./af.js\": 2786,\n\t\"./ar\": 867,\n\t\"./ar-dz\": 4130,\n\t\"./ar-dz.js\": 4130,\n\t\"./ar-kw\": 6135,\n\t\"./ar-kw.js\": 6135,\n\t\"./ar-ly\": 6440,\n\t\"./ar-ly.js\": 6440,\n\t\"./ar-ma\": 7702,\n\t\"./ar-ma.js\": 7702,\n\t\"./ar-sa\": 6040,\n\t\"./ar-sa.js\": 6040,\n\t\"./ar-tn\": 7100,\n\t\"./ar-tn.js\": 7100,\n\t\"./ar.js\": 867,\n\t\"./az\": 1083,\n\t\"./az.js\": 1083,\n\t\"./be\": 9808,\n\t\"./be.js\": 9808,\n\t\"./bg\": 8338,\n\t\"./bg.js\": 8338,\n\t\"./bm\": 7438,\n\t\"./bm.js\": 7438,\n\t\"./bn\": 8905,\n\t\"./bn-bd\": 6225,\n\t\"./bn-bd.js\": 6225,\n\t\"./bn.js\": 8905,\n\t\"./bo\": 1560,\n\t\"./bo.js\": 1560,\n\t\"./br\": 1278,\n\t\"./br.js\": 1278,\n\t\"./bs\": 622,\n\t\"./bs.js\": 622,\n\t\"./ca\": 2468,\n\t\"./ca.js\": 2468,\n\t\"./cs\": 5822,\n\t\"./cs.js\": 5822,\n\t\"./cv\": 877,\n\t\"./cv.js\": 877,\n\t\"./cy\": 7373,\n\t\"./cy.js\": 7373,\n\t\"./da\": 4780,\n\t\"./da.js\": 4780,\n\t\"./de\": 9740,\n\t\"./de-at\": 217,\n\t\"./de-at.js\": 217,\n\t\"./de-ch\": 894,\n\t\"./de-ch.js\": 894,\n\t\"./de.js\": 9740,\n\t\"./dv\": 5300,\n\t\"./dv.js\": 5300,\n\t\"./el\": 837,\n\t\"./el.js\": 837,\n\t\"./en-au\": 8348,\n\t\"./en-au.js\": 8348,\n\t\"./en-ca\": 7925,\n\t\"./en-ca.js\": 7925,\n\t\"./en-gb\": 2243,\n\t\"./en-gb.js\": 2243,\n\t\"./en-ie\": 6436,\n\t\"./en-ie.js\": 6436,\n\t\"./en-il\": 7207,\n\t\"./en-il.js\": 7207,\n\t\"./en-in\": 4175,\n\t\"./en-in.js\": 4175,\n\t\"./en-nz\": 6319,\n\t\"./en-nz.js\": 6319,\n\t\"./en-sg\": 1662,\n\t\"./en-sg.js\": 1662,\n\t\"./eo\": 2915,\n\t\"./eo.js\": 2915,\n\t\"./es\": 5655,\n\t\"./es-do\": 5251,\n\t\"./es-do.js\": 5251,\n\t\"./es-mx\": 6112,\n\t\"./es-mx.js\": 6112,\n\t\"./es-us\": 1146,\n\t\"./es-us.js\": 1146,\n\t\"./es.js\": 5655,\n\t\"./et\": 5603,\n\t\"./et.js\": 5603,\n\t\"./eu\": 7763,\n\t\"./eu.js\": 7763,\n\t\"./fa\": 6959,\n\t\"./fa.js\": 6959,\n\t\"./fi\": 1897,\n\t\"./fi.js\": 1897,\n\t\"./fil\": 2549,\n\t\"./fil.js\": 2549,\n\t\"./fo\": 4694,\n\t\"./fo.js\": 4694,\n\t\"./fr\": 4470,\n\t\"./fr-ca\": 3049,\n\t\"./fr-ca.js\": 3049,\n\t\"./fr-ch\": 2330,\n\t\"./fr-ch.js\": 2330,\n\t\"./fr.js\": 4470,\n\t\"./fy\": 5044,\n\t\"./fy.js\": 5044,\n\t\"./ga\": 9295,\n\t\"./ga.js\": 9295,\n\t\"./gd\": 2101,\n\t\"./gd.js\": 2101,\n\t\"./gl\": 8794,\n\t\"./gl.js\": 8794,\n\t\"./gom-deva\": 7884,\n\t\"./gom-deva.js\": 7884,\n\t\"./gom-latn\": 3168,\n\t\"./gom-latn.js\": 3168,\n\t\"./gu\": 5349,\n\t\"./gu.js\": 5349,\n\t\"./he\": 4206,\n\t\"./he.js\": 4206,\n\t\"./hi\": 94,\n\t\"./hi.js\": 94,\n\t\"./hr\": 316,\n\t\"./hr.js\": 316,\n\t\"./hu\": 2138,\n\t\"./hu.js\": 2138,\n\t\"./hy-am\": 1423,\n\t\"./hy-am.js\": 1423,\n\t\"./id\": 9218,\n\t\"./id.js\": 9218,\n\t\"./is\": 135,\n\t\"./is.js\": 135,\n\t\"./it\": 626,\n\t\"./it-ch\": 150,\n\t\"./it-ch.js\": 150,\n\t\"./it.js\": 626,\n\t\"./ja\": 9183,\n\t\"./ja.js\": 9183,\n\t\"./jv\": 4286,\n\t\"./jv.js\": 4286,\n\t\"./ka\": 2105,\n\t\"./ka.js\": 2105,\n\t\"./kk\": 7772,\n\t\"./kk.js\": 7772,\n\t\"./km\": 8758,\n\t\"./km.js\": 8758,\n\t\"./kn\": 9282,\n\t\"./kn.js\": 9282,\n\t\"./ko\": 3730,\n\t\"./ko.js\": 3730,\n\t\"./ku\": 1408,\n\t\"./ku.js\": 1408,\n\t\"./ky\": 3291,\n\t\"./ky.js\": 3291,\n\t\"./lb\": 6841,\n\t\"./lb.js\": 6841,\n\t\"./lo\": 5466,\n\t\"./lo.js\": 5466,\n\t\"./lt\": 7010,\n\t\"./lt.js\": 7010,\n\t\"./lv\": 7595,\n\t\"./lv.js\": 7595,\n\t\"./me\": 9861,\n\t\"./me.js\": 9861,\n\t\"./mi\": 5493,\n\t\"./mi.js\": 5493,\n\t\"./mk\": 5966,\n\t\"./mk.js\": 5966,\n\t\"./ml\": 7341,\n\t\"./ml.js\": 7341,\n\t\"./mn\": 5115,\n\t\"./mn.js\": 5115,\n\t\"./mr\": 370,\n\t\"./mr.js\": 370,\n\t\"./ms\": 9847,\n\t\"./ms-my\": 1237,\n\t\"./ms-my.js\": 1237,\n\t\"./ms.js\": 9847,\n\t\"./mt\": 2126,\n\t\"./mt.js\": 2126,\n\t\"./my\": 6165,\n\t\"./my.js\": 6165,\n\t\"./nb\": 4924,\n\t\"./nb.js\": 4924,\n\t\"./ne\": 6744,\n\t\"./ne.js\": 6744,\n\t\"./nl\": 3901,\n\t\"./nl-be\": 9814,\n\t\"./nl-be.js\": 9814,\n\t\"./nl.js\": 3901,\n\t\"./nn\": 3877,\n\t\"./nn.js\": 3877,\n\t\"./oc-lnc\": 2135,\n\t\"./oc-lnc.js\": 2135,\n\t\"./pa-in\": 5858,\n\t\"./pa-in.js\": 5858,\n\t\"./pl\": 4495,\n\t\"./pl.js\": 4495,\n\t\"./pt\": 9520,\n\t\"./pt-br\": 7971,\n\t\"./pt-br.js\": 7971,\n\t\"./pt.js\": 9520,\n\t\"./ro\": 6459,\n\t\"./ro.js\": 6459,\n\t\"./ru\": 1793,\n\t\"./ru.js\": 1793,\n\t\"./sd\": 950,\n\t\"./sd.js\": 950,\n\t\"./se\": 490,\n\t\"./se.js\": 490,\n\t\"./si\": 124,\n\t\"./si.js\": 124,\n\t\"./sk\": 4249,\n\t\"./sk.js\": 4249,\n\t\"./sl\": 4985,\n\t\"./sl.js\": 4985,\n\t\"./sq\": 1104,\n\t\"./sq.js\": 1104,\n\t\"./sr\": 9131,\n\t\"./sr-cyrl\": 9915,\n\t\"./sr-cyrl.js\": 9915,\n\t\"./sr.js\": 9131,\n\t\"./ss\": 5893,\n\t\"./ss.js\": 5893,\n\t\"./sv\": 8760,\n\t\"./sv.js\": 8760,\n\t\"./sw\": 1172,\n\t\"./sw.js\": 1172,\n\t\"./ta\": 7333,\n\t\"./ta.js\": 7333,\n\t\"./te\": 3110,\n\t\"./te.js\": 3110,\n\t\"./tet\": 2095,\n\t\"./tet.js\": 2095,\n\t\"./tg\": 7321,\n\t\"./tg.js\": 7321,\n\t\"./th\": 9041,\n\t\"./th.js\": 9041,\n\t\"./tk\": 9005,\n\t\"./tk.js\": 9005,\n\t\"./tl-ph\": 5768,\n\t\"./tl-ph.js\": 5768,\n\t\"./tlh\": 9444,\n\t\"./tlh.js\": 9444,\n\t\"./tr\": 2397,\n\t\"./tr.js\": 2397,\n\t\"./tzl\": 8254,\n\t\"./tzl.js\": 8254,\n\t\"./tzm\": 1106,\n\t\"./tzm-latn\": 699,\n\t\"./tzm-latn.js\": 699,\n\t\"./tzm.js\": 1106,\n\t\"./ug-cn\": 9288,\n\t\"./ug-cn.js\": 9288,\n\t\"./uk\": 7691,\n\t\"./uk.js\": 7691,\n\t\"./ur\": 3795,\n\t\"./ur.js\": 3795,\n\t\"./uz\": 6791,\n\t\"./uz-latn\": 588,\n\t\"./uz-latn.js\": 588,\n\t\"./uz.js\": 6791,\n\t\"./vi\": 5666,\n\t\"./vi.js\": 5666,\n\t\"./x-pseudo\": 4378,\n\t\"./x-pseudo.js\": 4378,\n\t\"./yo\": 5805,\n\t\"./yo.js\": 5805,\n\t\"./zh-cn\": 3839,\n\t\"./zh-cn.js\": 3839,\n\t\"./zh-hk\": 5726,\n\t\"./zh-hk.js\": 5726,\n\t\"./zh-mo\": 9807,\n\t\"./zh-mo.js\": 9807,\n\t\"./zh-tw\": 4152,\n\t\"./zh-tw.js\": 4152\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 6700;","/*\n * custom_activelist\n *\n * Create a custom webix component.\n *\n */\n\nmodule.exports = class ABCustomActiveList {\n   get key() {\n      return \"activelist\";\n   }\n\n   constructor(App, key) {\n      // App \t{obj}\tour application instance object.\n      // key {string}\tthe destination key in App.custom[componentKey] for the instance of this component:\n\n      // super(App, key);\n\n      var L = App.Label;\n\n      var labels = {\n         common: App.labels,\n\n         component: {}\n      };\n\n      // internal list of Webix IDs to reference our UI components.\n      var ids = {\n         component: App.unique(this.key)\n      };\n\n      // Our webix UI definition:\n      var _ui = {\n         name: this.key\n      };\n      this.view = this.key;\n\n      // our internal business logic\n      var _logic = {};\n      this._logic = _logic;\n\n      // Tell Webix to create an INSTANCE of our custom component:\n      webix.protoUI(_ui, webix.ui.list, webix.ActiveContent);\n   }\n};\n","/*\n * countfooter\n *\n * Add the count footer to the webix's datatable.\n *\n */\n\nmodule.exports = class ABCountFooter {\n   get key() {\n      return \"countfooter\";\n   }\n\n   constructor(App, key) {\n      // App \t{obj}\tour application instance object.\n      // key {string}\tthe destination key in App.custom[componentKey] for the instance of this component:\n\n      // super(App, key);\n\n      var L = App.Label;\n\n      var labels = {};\n\n      // internal list of Webix IDs to reference our UI components.\n      var ids = {};\n\n      // Our webix UI definition:\n      var _ui = {};\n      this.view = this.key;\n\n      // our internal business logic\n      var _logic = {};\n      this._logic = _logic;\n\n      // Tell Webix :\n      webix.ui.datafilter.countColumn = webix.extend(\n         {\n            refresh: function (datatable, node, info) {\n               var result = 0;\n\n               var rowData = datatable.find({}) || [];\n               rowData.forEach((row) => {\n                  if (row == null) return;\n\n                  var data =\n                     row[info.columnId] || row[info.columnId + \"__relation\"];\n\n                  // array\n                  if (data && Array.isArray(data)) {\n                     result += data.length;\n                  } else if (\n                     data != null &&\n                     data != \"\" &&\n                     data != false &&\n                     data != \"false\" &&\n                     data != \"0\"\n                  ) {\n                     result += 1;\n                  }\n               });\n\n               node.innerHTML = result;\n            },\n         },\n         webix.ui.datafilter.summColumn\n      );\n   }\n};\n","/*\n * Custom Component Manager\n * Make sure our {ABComponent}s are initialized with our custom\n * Webix Components.\n */\n\n// Import our Custom Components here:\nvar componentList = [\n   require(\"./activelist\"),\n   require(\"./countfooter\"),\n   require(\"./datetimepicker\"),\n   require(\"./editlist\"),\n   require(\"./edittree\"),\n   require(\"./editunitlist\"),\n   require(\"./focusableTemplate\"),\n   require(\"./formioBuilder\"),\n   require(\"./formioPreview\"),\n   require(\"./numbertext\"),\n   require(\"./timepicker\"),\n   require(\"./totalfooter\"),\n   require(\"./treesuggest\"),\n   // require('./savablelayout')\n];\n\nmodule.exports = class ABCustomComponentManager {\n   constructor() {}\n\n   initComponents(App) {\n      App.custom = App.custom || {};\n\n      componentList.forEach((Component) => {\n         var component = new Component(App);\n         App.custom[component.key] = component;\n      });\n\n      // Transition to v2:\n      App.AB.custom = App.custom;\n   }\n};\n","/*\n * custom_datetimepicker\n *\n * Create a custom webix component.\n *\n */\n\nmodule.exports = class ABCustomDateTimePicker {\n   //.extend(ComponentKey, function(App, componentKey ) {\n\n   get key() {\n      return \"datetimepicker\";\n   }\n\n   constructor(App) {\n      // App \t{obj}\tour application instance object.\n      // componentKey {string}\tthe destination key in App.custom[componentKey] for the instance of this component:\n\n      // super(App, key);\n\n      var L = App.Label;\n\n      var labels = {\n         common: App.labels,\n\n         component: {}\n      };\n\n      // internal list of Webix IDs to reference our UI components.\n      var ids = {\n         component: App.unique(this.key)\n      };\n\n      // Our webix UI definition:\n      var _ui = {\n         name: App.unique(\"custom_datetimepicker\") // keep this unique for this App instance.\n      };\n      this.view = this.key;\n\n      // our internal business logic\n      var _logic = {};\n      this._logic = _logic;\n\n      // Tell Webix to create an INSTANCE of our custom component:\n      webix.editors.$popup.datetime = {\n         view: \"popup\",\n         width: 250,\n         height: 250,\n         padding: 0,\n         body: {\n            view: \"calendar\",\n            icons: true,\n            borderless: true,\n            timepicker: true\n         }\n      };\n\n      webix.editors.datetime = webix.extend(\n         {\n            popupType: \"datetime\"\n         },\n         webix.editors.date\n      );\n   }\n};\n","/*\n * custom_editlist\n *\n * Create a custom webix component.\n *\n */\n\nmodule.exports = class ABCustomEditList {\n   // .extend(ComponentKey, function(App, componentKey ) {\n\n   get key() {\n      return \"editlist\";\n   }\n\n   constructor(App) {\n      // App \t{obj}\tour application instance object.\n      // key {string}\tthe destination key in App.custom[componentKey] for the instance of this component:\n\n      // super(App, key);\n\n      var L = App.Label;\n\n      var labels = {\n         common: App.labels,\n\n         component: {}\n      };\n\n      // internal list of Webix IDs to reference our UI components.\n      var ids = {\n         component: App.unique(this.key)\n      };\n\n      // Our webix UI definition:\n      var _ui = {\n         name: this.key\n      };\n      this.view = this.key;\n\n      // our internal business logic\n      var _logic = {};\n      this._logic = _logic;\n\n      // Tell Webix to create an INSTANCE of our custom component:\n      webix.protoUI(_ui, webix.EditAbility, webix.ui.list);\n   }\n};\n","/*\n * custom_edittree\n *\n * Create a custom webix component.\n *\n */\n\nmodule.exports = class ABCustomEditTree {\n   // .extend(ComponentKey, function(App, componentKey ) {\n\n   get key() {\n      return \"edittree\";\n   }\n\n   constructor(App) {\n      // App \t{obj}\tour application instance object.\n      // key {string}\tthe destination key in App.custom[componentKey] for the instance of this component:\n\n      // super(App, key);\n\n      var L = App.Label;\n\n      var labels = {\n         common: App.labels,\n\n         component: {}\n      };\n\n      // internal list of Webix IDs to reference our UI components.\n      var ids = {\n         component: App.unique(this.key)\n      };\n\n      // Our webix UI definition:\n      var _ui = {\n         name: this.key\n      };\n      this.view = this.key;\n\n      // our internal business logic\n      var _logic = {};\n      this._logic = _logic;\n\n      // Tell Webix to create an INSTANCE of our custom component:\n      webix.protoUI(_ui, webix.EditAbility, webix.ui.tree);\n   }\n};\n","/*\n * custom_editunitlist\n *\n * Create a custom webix component.\n *\n */\n\nmodule.exports = class ABCustomEditUnitList {\n   // .extend(ComponentKey, function(App, componentKey ) {\n\n   get key() {\n      return \"editunitlist\";\n   }\n\n   constructor(App) {\n      // App \t{obj}\tour application instance object.\n      // key {string}\tthe destination key in App.custom[componentKey] for the instance of this component:\n\n      // super(App, key);\n      /*\n      var L = App.Label;\n\n      var labels = {\n         common: App.labels,\n\n         component: {},\n      };\n\n      // internal list of Webix IDs to reference our UI components.\n      var ids = {\n         component: App.unique(this.key),\n      };\n*/\n      // Our webix UI definition:\n      var _ui = {\n         name: this.key,\n      };\n      this.view = this.key;\n\n      // our internal business logic\n      var _logic = {};\n      this._logic = _logic;\n\n      // Tell Webix to create an INSTANCE of our custom component:\n      webix.protoUI(_ui, webix.EditAbility, webix.ui.unitlist);\n   }\n};\n","/*\n * custom_activelist\n *\n * Create a custom webix component.\n *\n */\n\nmodule.exports = class ABCustomFocusableTemplate {\n   get key() {\n      return \"focusabletemplate\";\n   }\n\n   constructor(App) {\n      // App \t{obj}\tour application instance object.\n      // key {string}\tthe destination key in App.custom[componentKey] for the instance of this component:\n\n      // super(App, key);\n\n      var L = App.Label;\n\n      var labels = {\n         common: App.labels,\n\n         component: {}\n      };\n\n      // internal list of Webix IDs to reference our UI components.\n      var ids = {\n         component: App.unique(this.key)\n      };\n\n      // Our webix UI definition:\n      var _ui = {\n         name: this.key,\n         focus: function() {\n            return false;\n         }\n      };\n      this.view = this.key;\n\n      // our internal business logic\n      var _logic = {};\n      this._logic = _logic;\n\n      // Tell Webix to create an INSTANCE of our custom component:\n      webix.protoUI(_ui, webix.ui.template, webix.UIManager);\n   }\n};\n","/*\n * formioBuilder\n *\n * Create a custom webix component.\n *\n */\n\nmodule.exports = class ABCustomFormIOBuilder {\n   get key() {\n      return \"formiobuilder\";\n   }\n\n   constructor(App) {\n      // App \t{obj}\tour application instance object.\n      // key {string}\tthe destination key in App.custom[componentKey] for the instance of this component:\n\n      // super(App, key);\n\n      var L = App.Label;\n\n      var labels = {\n         common: App.labels,\n\n         component: {},\n      };\n\n      // internal list of Webix IDs to reference our UI components.\n      var ids = {\n         component: App.unique(this.key),\n      };\n\n      // We need to reference this on the save so lets put it in a global var\n      var formBuilder;\n\n      // Our webix UI definition:\n      var _ui = {\n         name: this.key,\n         defaults: {\n            css: \"scrolly forceOpen\",\n            hidden: false,\n            autofit: true,\n         },\n         $init: function (config) {\n            var comp = _logic.parseDataFields(config.dataFields);\n            var formComponents = config.formComponents\n               ? config.formComponents\n               : {};\n            Formio.builder(this.$view, formComponents, {\n               builder: {\n                  basic: false,\n                  advanced: false,\n                  // data: false,\n                  customBasic: false,\n                  premium: false,\n                  custom: {\n                     title: \"Fields\",\n                     weight: 0,\n                     default: true,\n                     components: comp,\n                  },\n                  layout: {\n                     components: {\n                        table: true,\n                     },\n                  },\n               },\n            }).then(function (builder) {\n               // now that it is set up we can push it into the global var\n               // builder.submission = {\n               //     data: {\n               //         Name: \"James\",\n               //         \"Number Field\": 3\n               //     }\n               // };\n               formBuilder = builder;\n            });\n         },\n         // set up a function that can be called to request the form schema\n         getFormData: () => {\n            return formBuilder.schema;\n         },\n      };\n      this.view = this.key;\n\n      // our internal business logic\n      var _logic = {\n         /**\n          * @method parseDataObjects\n          *\n          * @param store {webix.TreeCollection}\n          * @param elem {Object} the webix element\n          * @param parentId {integer - nullable} id of parent id\n          */\n         parseDataFields: (fields) => {\n            var components = {};\n            // objects.forEach((obj) => {\n            //     var fields = obj.fields();\n            //     console.log(fields);\n            fields.forEach((entry) => {\n               if (!entry.field) return;\n               switch (entry.field.key) {\n                  case \"boolean\":\n                     components[entry.key] = {\n                        title: entry.label,\n                        key: entry.key,\n                        icon: entry.field.icon,\n                        schema: {\n                           abFieldID: entry.field.id,\n                           label: entry.field.label,\n                           type: \"checkbox\",\n                           disabled: true,\n                           key: entry.key,\n                           _key: entry.key,\n                           input: true,\n                        },\n                     };\n                     break;\n                  case \"calculate\":\n                     components[entry.key] = {\n                        title: entry.label,\n                        key: entry.key,\n                        icon: entry.field.icon,\n                        schema: {\n                           abFieldID: entry.field.id,\n                           label: entry.field.label,\n                           type: \"textfield\",\n                           key: entry.key,\n                           _key: entry.key,\n                           input: true,\n                           inputType: \"text\",\n                           disabled: true,\n                           calculateValue:\n                              \"value = \" +\n                              entry.field.settings.formula\n                                 .replace(/{/g, \"data['\")\n                                 .replace(/}/g, \"']\"),\n                        },\n                     };\n                     break;\n                  case \"connectObject\":\n                     components[entry.key] = {\n                        title: entry.label,\n                        key: entry.key,\n                        icon: entry.field.icon,\n                        schema: {\n                           abFieldID: entry.field.id,\n                           label: entry.field.label,\n                           type: \"textfield\",\n                           key: entry.key,\n                           _key: entry.key,\n                           input: true,\n                           inputType: \"text\",\n                           disabled: true,\n                           calculateValue: `value = data['${entry.key}.format']`,\n                           // ,calculateValue: `value = '${entry.field.settings.textFormula}'`\n                        },\n                     };\n                     break;\n\n                  case \"date\":\n                     components[entry.key] = {\n                        title: entry.label,\n                        key: entry.key,\n                        icon: entry.field.icon,\n                        schema: {\n                           abFieldID: entry.field.id,\n                           label: entry.field.label,\n                           type: \"datetime\",\n                           disabled: true,\n                           key: entry.key,\n                           _key: entry.key,\n                           input: true,\n                           format:\n                              entry.field.settings.timeFormat == 1\n                                 ? \"MMMM d, yyyy\"\n                                 : \"MMMM d, yyyy h:mm a\",\n                        },\n                     };\n                     break;\n                  case \"email\":\n                     components[entry.key] = {\n                        title: entry.label,\n                        key: entry.key,\n                        icon: entry.field.icon,\n                        schema: {\n                           abFieldID: entry.field.id,\n                           label: entry.field.label,\n                           disabled: true,\n                           type: \"email\",\n                           key: entry.key,\n                           _key: entry.key,\n                           input: true,\n                        },\n                     };\n                     break;\n                  case \"file\":\n                     components[entry.key] = {\n                        title: entry.label,\n                        key: entry.key,\n                        icon: entry.field.icon,\n                        schema: {\n                           abFieldID: entry.field.id,\n                           label: entry.field.label,\n                           type: \"htmlelement\",\n                           tag: \"a\",\n                           className: \"btn btn-primary btn-block\",\n                           content:\n                              \"<i class='fa fa-paperclip'></i>  \" +\n                              \"{{JSON.parse(data['\" +\n                              entry.key +\n                              \"']).filename}}\",\n                           attrs: [\n                              {\n                                 attr: \"href\",\n                                 value:\n                                    \"/opsportal/file/\" +\n                                    entry.field.object.application.name +\n                                    \"/\" +\n                                    \"{{JSON.parse(data['\" +\n                                    entry.key +\n                                    \"']).uuid}}\",\n                              },\n                              {\n                                 attr: \"target\",\n                                 value: \"_blank\",\n                              },\n                           ],\n                           refreshOnChange: true,\n                           key: entry.key,\n                           _key: entry.key,\n                           disabled: true,\n                           input: false,\n                        },\n                     };\n                     break;\n                  case \"image\":\n                     components[entry.key] = {\n                        title: entry.label,\n                        key: entry.key,\n                        icon: entry.field.icon,\n                        schema: {\n                           abFieldID: entry.field.id,\n                           label: entry.field.label,\n                           type: \"htmlelement\",\n                           tag: \"img\",\n                           className: \"img-thumbnail max100\",\n                           content: \"\",\n                           attrs: [\n                              {\n                                 attr: \"src\",\n                                 value:\n                                    \"/opsportal/image/\" +\n                                    entry.field.object.application.name +\n                                    \"/\" +\n                                    \"{{data['\" +\n                                    entry.key +\n                                    \"']}}\",\n                              },\n                           ],\n                           refreshOnChange: true,\n                           key: entry.key,\n                           _key: entry.key,\n                           input: false,\n                        },\n                     };\n                     break;\n                  case \"list\":\n                     var vals = [];\n                     entry.field.settings.options.forEach((opt) => {\n                        vals.push({\n                           label: opt.text,\n                           value: opt.id,\n                        });\n                     });\n                     components[entry.key] = {\n                        title: entry.label,\n                        key: entry.key,\n                        icon: entry.field.icon,\n                        schema: {\n                           abFieldID: entry.field.id,\n                           label: entry.field.label,\n                           type: \"select\",\n                           key: entry.key,\n                           _key: entry.key,\n                           disabled: true,\n                           input: true,\n                           data: {\n                              values: vals,\n                           },\n                           multiple: entry.field.settings.isMultiple,\n                        },\n                     };\n                     break;\n                  case \"LongText\":\n                     components[entry.key] = {\n                        title: entry.label,\n                        key: entry.key,\n                        icon: entry.field.icon,\n                        schema: {\n                           abFieldID: entry.field.id,\n                           label: entry.field.label,\n                           type: \"textarea\",\n                           disabled: true,\n                           key: entry.key,\n                           _key: entry.key,\n                           input: true,\n                        },\n                     };\n                     break;\n                  case \"number\":\n                     components[entry.key] = {\n                        title: entry.label,\n                        key: entry.key,\n                        icon: entry.field.icon,\n                        schema: {\n                           abFieldID: entry.field.id,\n                           label: entry.field.label,\n                           disabled: true,\n                           type: \"number\",\n                           key: entry.key,\n                           _key: entry.key,\n                           input: true,\n                        },\n                     };\n                     break;\n                  case \"TextFormula\":\n                     components[entry.key] = {\n                        title: entry.label,\n                        key: entry.key,\n                        icon: entry.field.icon,\n                        schema: {\n                           abFieldID: entry.field.id,\n                           label: entry.field.label,\n                           type: \"textfield\",\n                           key: entry.key,\n                           _key: entry.key,\n                           input: true,\n                           inputType: \"text\",\n                           disabled: true,\n                           calculateValue:\n                              \"value = '\" +\n                              entry.field.settings.textFormula +\n                              \"'\",\n                        },\n                     };\n                     break;\n                  default:\n                     components[entry.key] = {\n                        title: entry.label,\n                        key: entry.key,\n                        icon: entry.field.icon,\n                        schema: {\n                           abFieldID: entry.field.id,\n                           label: entry.field.label,\n                           type: \"textfield\",\n                           disabled: true,\n                           key: entry.key,\n                           _key: entry.key,\n                           input: true,\n                        },\n                     };\n                     break;\n               }\n            });\n            // });\n            components[\"approveButton\"] = {\n               title: \"Approve Button\",\n               key: \"approve\",\n               icon: \"check-square\",\n               schema: {\n                  label: \"Approve\",\n                  type: \"button\",\n                  key: \"approve\",\n                  event: \"approve\",\n                  block: true,\n                  size: \"lg\",\n                  input: false,\n                  leftIcon: \"fa fa-thumbs-up\",\n                  action: \"event\",\n                  theme: \"success\",\n               },\n            };\n            components[\"denyButton\"] = {\n               title: \"Deny Button\",\n               key: \"deny\",\n               icon: \"ban\",\n               schema: {\n                  label: \"Deny\",\n                  type: \"button\",\n                  key: \"deny\",\n                  event: \"deny\",\n                  block: true,\n                  size: \"lg\",\n                  input: false,\n                  leftIcon: \"fa fa-thumbs-down\",\n                  action: \"event\",\n                  theme: \"danger\",\n               },\n            };\n            components[\"customButton\"] = {\n               title: \"Custom Action Button\",\n               key: \"custom\",\n               icon: \"cog\",\n               schema: {\n                  label: \"Custom Name\",\n                  type: \"button\",\n                  key: \"custom\",\n                  event: \"yourEvent\",\n                  block: true,\n                  size: \"lg\",\n                  input: false,\n                  leftIcon: \"fa fa-cog\",\n                  action: \"event\",\n                  theme: \"primary\",\n               },\n            };\n            return components;\n         },\n      };\n      this._logic = _logic;\n\n      // Tell Webix to create an INSTANCE of our custom component:\n      webix.protoUI(_ui, webix.ui.popup);\n   }\n};\n","/*\n * formioBuilder\n *\n * Create a custom webix component.\n *\n */\nvar ABEmitter = require(\"../AppBuilder/platform/ABEmitter.js\");\nmodule.exports = class ABCustomFormIOPreview extends ABEmitter {\n   get key() {\n      return \"formiopreview\";\n   }\n\n   constructor(App) {\n      super();\n\n      // App \t{obj}\tour application instance object.\n      // key {string}\tthe destination key in App.custom[componentKey] for the instance of this component:\n\n      // super(App, key);\n\n      var _this = this;\n      var L = App.Label;\n\n      var labels = {\n         common: App.labels,\n\n         component: {},\n      };\n\n      // internal list of Webix IDs to reference our UI components.\n      var ids = {\n         component: App.unique(this.key),\n      };\n\n      // Our webix UI definition:\n      var _ui = {\n         name: this.key,\n         defaults: {\n            css: \"scrolly\",\n            borderless: true,\n         },\n         $init: function (config) {\n            var formComponents = config.formComponents\n               ? config.formComponents\n               : {};\n            var formData = config.formData ? config.formData : {};\n            // we need to find out when we are passing an array of objects and reduce it down to an array of IDs\n            for (var data in formData) {\n               if (\n                  Array.isArray(formData[data]) &&\n                  typeof formData[data][0] == \"object\"\n               ) {\n                  var newD = [];\n                  formData[data].forEach((item) => {\n                     if (item.id) newD.push(item.id);\n                  });\n                  formData[data] = newD;\n               }\n            }\n\n            Formio.createForm(this.$view, formComponents, {\n               // readOnly: true\n               // sanitizeConfig: {\n               //     addTags: [\"a\", \"label\", \"img\", \"i\"],\n               //     addAttr: [\"src\", \"href\", \"class\", \"target\"]\n               // }\n            }).then(function (form) {\n               // now that it is set up we can push it into the global var\n               // formBuilder = builder;\n               // Provide a default submission.\n               form.submission = {\n                  data: formData,\n               };\n               (formComponents.components || []).forEach((comp) => {\n                  if (\n                     comp.type == \"button\" &&\n                     comp.action == \"event\" &&\n                     comp.event\n                  ) {\n                     form.once(comp.event, function (click) {\n                        config.onButton ? config.onButton(comp.event) : null;\n                        // _this.emit(\"button\", comp.event);\n                     });\n                  }\n               });\n               // form.submission = {\n               //     data: {\n               //         Name: \"Item #5\",\n               //         Image: \"4f2be24f-6ad0-4687-abbb-1a87ce7bc1d6\",\n               //         \"Long text\": \"This is a long text field.\",\n               //         \"Number Field\": 3,\n               //         \"Date Field\": \"2020-02-03\",\n               //         \"Date and Time\": \"2020-02-19 00:00:00\",\n               //         \"Checkbox field\": 1,\n               //         \"Items to select\": 1580782610224,\n               //         \"Multiple Items\": [1580786381276, 1580786381494],\n               //         \"Email Field\": \"james@digiserve.org\",\n               //         \"Image Field\":\n               //             \"d5063af3-06b0-44d0-ae9d-c88a74b81e21\",\n               //         \"File Attachment\":\n               //             '{\"uuid\":\"2d3708eb-d567-483b-9b1e-7cbd6d654866\",\"filename\":\"2018-01-12 09-44 copy.pdf\"}',\n               //         \"User Field\": \"James\"\n               //     }\n               // };\n            });\n         },\n      };\n      this.view = this.key;\n\n      // our internal business logic\n      var _logic = {};\n      this._logic = _logic;\n\n      // Tell Webix to create an INSTANCE of our custom component:\n      webix.protoUI(_ui, webix.ui.view);\n   }\n};\n","/*\n * numbertext\n *\n * Create a custom webix component.\n *\n */\n\nmodule.exports = class ABCustomNumberText {\n   get key() {\n      return \"numbertext\";\n   }\n\n   constructor(App) {\n      // App \t{obj}\tour application instance object.\n      // key {string}\tthe destination key in App.custom[componentKey] for the instance of this component:\n\n      // super(App, key);\n\n      var L = App.Label;\n\n      var labels = {\n         common: App.labels,\n\n         component: {}\n      };\n\n      // internal list of Webix IDs to reference our UI components.\n      var ids = {\n         component: App.unique(this.key)\n      };\n\n      // Our webix UI definition:\n      var _ui = {\n         name: this.key,\n\n         defaults: {\n            css: \"webix_el_text\"\n         },\n\n         // override this function to return number value type\n         $getValue: function() {\n            var val = this.getInputNode().value;\n            if (val) return JSON.parse(val);\n            // Convert to number\n            else return \"\";\n         }\n      };\n      this.view = this.key;\n\n      // our internal business logic\n      var _logic = {};\n      this._logic = _logic;\n\n      // Tell Webix to create an INSTANCE of our custom component:\n      webix.protoUI(_ui, webix.ui.text);\n   }\n};\n","/*\n * custom_timepicker\n *\n * Create a custom webix component.\n *\n */\n\nmodule.exports = class ABCustomTimePicker {\n   //.extend(ComponentKey, function(App, componentKey ) {\n\n   get key() {\n      return \"timepicker\";\n   }\n\n   constructor(App) {\n      // App \t{obj}\tour application instance object.\n      // componentKey {string}\tthe destination key in App.custom[componentKey] for the instance of this component:\n\n      // super(App, key);\n\n      var L = App.Label;\n\n      var labels = {\n         common: App.labels,\n\n         component: {}\n      };\n\n      // internal list of Webix IDs to reference our UI components.\n      var ids = {\n         component: App.unique(this.key)\n      };\n\n      // Our webix UI definition:\n      var _ui = {\n         name: App.unique(\"custom_timepicker\") // keep this unique for this App instance.\n      };\n      this.view = this.key;\n\n      // our internal business logic\n      var _logic = {};\n      this._logic = _logic;\n\n      // Tell Webix to create an INSTANCE of our custom component:\n      webix.editors.$popup.time = {\n         view: \"popup\",\n         body: {\n            view: \"calendar\",\n            width: 220,\n            height: 200,\n            type: \"time\"\n         }\n      };\n\n      webix.editors.time = webix.extend(\n         {\n            popupType: \"time\"\n         },\n         webix.editors.date\n      );\n   }\n};\n","/*\n * totalfooter\n *\n * Add the contents of records to show in footer of the webix's datatable.\n *\n */\n\nmodule.exports = class ABTotalFooter {\n   get key() {\n      return \"totalfooter\";\n   }\n\n   constructor(App, key) {\n      // App \t{obj}\tour application instance object.\n      // key {string}\tthe destination key in App.custom[componentKey] for the instance of this component:\n\n      // super(App, key);\n\n      var L = App.Label;\n\n      var labels = {};\n\n      // internal list of Webix IDs to reference our UI components.\n      var ids = {};\n\n      // Our webix UI definition:\n      var _ui = {};\n      this.view = this.key;\n\n      // our internal business logic\n      var _logic = {};\n      this._logic = _logic;\n\n      // Tell Webix :\n      webix.ui.datafilter.totalColumn = webix.extend(\n         {\n            refresh: function (datatable, node, info) {\n               var result = 0;\n\n               datatable.eachRow(function (row) {\n                  var record = datatable.getItem(row);\n\n                  var data = info.field.format(record);\n\n                  // array\n                  if (data) {\n                     result += parseFloat(data); // we need to use parseFloat because numbers could be decimals\n                  }\n               });\n\n               node.innerHTML = result;\n            },\n         },\n         webix.ui.datafilter.summColumn\n      );\n   }\n};\n","/*\n * custom_editlist\n *\n * Create a custom webix component.\n *\n */\n\nmodule.exports = class ABCustomEditList {\n   // .extend(ComponentKey, function(App, componentKey ) {\n\n   get key() {\n      return \"treesuggest\";\n   }\n\n   constructor(App) {\n      // App \t{obj}\tour application instance object.\n      // key {string}\tthe destination key in App.custom[componentKey] for the instance of this component:\n\n      // super(App, key);\n\n      var L = App.Label;\n\n      var labels = {\n         common: App.labels,\n\n         component: {}\n      };\n\n      // internal list of Webix IDs to reference our UI components.\n      var ids = {\n         component: App.unique(this.key)\n      };\n\n      // Our webix UI definition:\n      var _ui = {\n         name: this.key,\n         defaults: {\n            type: \"tree\",\n            width: 0,\n            body: {\n               borderless: true,\n               select: true,\n               template: function(obj, common) {\n                  return (\n                     \"<span>\" +\n                     (obj.$count ? \"<b>\" + obj.value + \"</b>\" : obj.value) +\n                     \"</span>\"\n                  );\n               },\n               ready: function() {\n                  this.openAll();\n               },\n               on: {\n                  onAfterSelect: function(id, e) {\n                     if (this.getItem(id).$count) {\n                        this.getParentView().setMasterValue(\"\");\n                        this.show(\n                           $$(this.getParentView().config.master).getInputNode()\n                        );\n                     }\n                  }\n               }\n            }\n         }\n      };\n      this.view = this.key;\n\n      // our internal business logic\n      var _logic = {};\n      this._logic = _logic;\n\n      // Tell Webix to create an INSTANCE of our custom component:\n      webix.protoUI(_ui, webix.ui.suggest);\n   }\n};\n"],"names":["ABComponent","ABFieldManager","module","exports","constructor","App","idBase","super","L","this","Label","ids","component","unique","types","editDefinitions","buttonSave","buttonCancel","ui","view","position","id","resize","modal","height","width","head","css","cols","label","align","autowidth","click","_logic","body","scroll","borderless","type","rows","labelWidth","AB","UISettings","config","labelWidthLarge","options","on","onChange","ev","node","padding","cells","fillspace","value","onHide","resetState","_objectHash","_componentHash","_componentsByType","_currentEditor","_currentObject","defaultEditorComponent","submenus","_editField","init","c","callbacks","webix","extend","$$","ProgressBar","Fields","allFields","newEditorList","animate","forEach","F","menuName","defaults","key","push","editorComponent","propertiesComponent","define","refresh","hide","show","setValue","applicationLoad","application","objectLoad","object","clear","async","disable","showProgress","editor","isValid","linkCol","vals","cloneDeep","values","field","oldData","toObj","updateValues","keySetting","fromValues","fieldNew","length","settings","showIcon","rand","Math","floor","random","isSource","linkObject","datasourceLink","linkColumnName","columnName","fields","f","linkType","linkViaType","name","isCustomFK","indexField","indexField2","validator","fail","updateForm","enable","hideProgress","save","finishUpdateField","onSave","refreshModels","model","linkColumn","migrateCreate","err","notify","developer","Error","onCancel","console","warn","modeAdd","allowFieldKey","isImported","connectField","filter","connectMenuName","modeEdit","populate","elements","disableElem","elem","disallowEdit","childElems","childElem","blur","enableElem","fieldKey","typeClick","subMenuId","data","submenu","getSubMenu","actions","list","form","formUI","onItemClick","e","clickAddNewSort","triggerOnChange","onShow","CurrentObject","fieldId","dir","sort_form","viewIndex","getChildViews","listFields","getFieldList","addView","uid","columnId","onChangeCombo","newv","oldv","icon","removeView","getParentView","refreshFieldList","excludeSelected","fieldIsSortable","childViews","cView","index","selectedValue","getValue","removeIndex","splice","setSettings","_settings","getSettings","sortFields","el","columnConfig","sortDir","sorts","s","ignoreRemoveViews","selectedFields","removeChildViews","fieldObj","selectedFieldsExcludeCurField","x","Array","isArray","indexOf","enableFields","_blockOnChange","blockOnChange","unblockOnChange","$view","sort","a","b","result","fieldByID","by","aValue","bValue","map","item","text","join","EventEmitter","isAuthenticated","_config","_listRoles","_listScopes","_listUsers","UserConfig","Config","userConfig","MetaConfig","metaConfig","roles","scopes","users","Network","context","error","emit","Promise","resolve","isSystemDesigner","r","uuid","email","language","languageCode","logout","post","url","tenantUrl","Tenant","setting","fn","rolesAll","username","userList","imageID","image_id","sendEmailNotifications","Alert","opts","alert","title","Multilingual","message","ok","Confirm","labelYes","labelNo","cancel","confirm","callback","fnYes","fnNo","ConfirmDelete","Message","timeout","expire","MLClass","_missingLabelID","_missingLabels","_pluginLabelsMissing","labels","labelConfig","pluginLabels","currentLanguage","Account","altText","postMissing","arguments","replace","newKey","slice","postMissingLabel","v","i","sub","replaceAll","labelPlugin","plugin","languages","pluginLoadLabels","pluginLabelReport","JSON","stringify","clearTimeout","sendBatch","batchLabels","missingLabels","Object","keys","k","l","shift","then","setTimeout","destroy","toDefinition","Atomic","parent","wildcard","newListener","maxListeners","baseURL","numRetries","_network","isRealTime","siteConfig","appbuilder","urlCoreServer","networkNumRetries","get","params","jobResponse","useThese","search","val","encodeURIComponent","_request","put","delete","isNetworkConnected","salSend","packet","_retry","code","publishResponse","reject","headers","authToken","Authorization","tenantID","method","catch","statusText","Analytics","log","_err","status","responseText","parse","response","queue","resend","listSocketEvents","io","socket","obj","objectByID","objectId","normalizeData","isConnected","toLowerCase","request","jwres","statusCode","errStr","toString","Stringify","setMaxListeners","queueLock","_queueCount","Lock","networkType","queueFlush","idConnectionCheck","window","addEventListener","_connectionCheck","networkStatus","navigator","connection","Connection","onLine","NONE","refQueue","queueCount","acquire","Storage","set","release","logError","processRequest","cb","entry","job","res","rej","reset","getTokens","tenantStorage","Webix","storage","prefix","local","remove","clearAll","_storage","encrypted","textClickToEnter","String","appListRowHeight","buttonWidthLarge","buttonWidthMedium","buttonWidthSmall","buttonWidthExtraSmall","tabWidthLarge","tabWidthMedium","tabWidthSmall","tabWidthExtraSmall","columnWidthXLarge","columnWidthLarge","columnWidthMedium","columnWidthSmall","columnWidthExtraSmall","xSmallSpacer","smallSpacer","mediumSpacer","largeSpacer","xLargeSpacer","xxLargeSpacer","xxxLargeSpacer","appListSpacerRowHeight","appListSpacerColMinWidth","appListSpacerColMaxWidth","objectWorkspaceColWidth","labelWidthSmall","labelWidthMedium","labelWidthXLarge","labelWidthXXLarge","labelWidthXXXLarge","labelWidthCheckbox","hideMobile","innerWidth","icons","ABValidator","errors","addError","pass","toValidationObject","invalidAttributes","attr","vObj","Validation","isFormValidationError","updateGrid","rowID","grid","isGridValidationError","ABFactory","definitions","Class","FilterComplex","Dialog","ClassUI","ABViewManager","errorSailsCleanup","raw","hasFocused","attrs","wasForm","msg","markInvalid","focus","row","Grid","wasGrid","addCellCss","clearSelection","Definitions","_plugins","_pendingNetworkRequests","fullDef","pending","pkt","newDef","definitionNew","serverDef","definitionCreate","_definitions","allInits","all","_localSettings","json","definitionSync","def","domain","info","plugins","pluginLoad","p","rest","emitData","jobID","localSettings","isUUID","RegExp","test","merge","orderBy","uniq","kebabCase","sumBy","meanBy","maxBy","minBy","toDate","dateText","ignoreTime","format","Date","toDateFormat","date","momentObj","localeCode","locale","subtractDate","number","unit","subtract","addDate","add","isString","ABMLClass","attributes","isSystemObject","roleAccess","isAccessManaged","accessManagers","isTranslationManaged","translationManagers","objectIDs","queryIDs","datacollectionIDs","newPages","pageIDs","definitionByID","pageNew","appID","pageID","_pages","newProcesses","removePIDs","processIDs","pID","processByID","processID","pr","_processes","objectListSettings","isOpen","searchText","sortDirection","isGroup","translations","isAccessibleForRoles","foundRole","parseInt","useRole","role","pages","mobileApps","_mobileApps","datacollectionsExcluded","datacollections","o","datacollectionsIncluded","objectsExcluded","objects","objectsIncluded","connectedObjects","connectedFields","connectFields","connectedObj","linkedObjects","currObjID","linkedObjectID","linkedFields","deep","subPages","processes","hasProcess","process","views","_views","subViews","lookDeep","pageViews","concat","viewAll","allViews","queriesExcluded","queries","q","queriesIncluded","urlResolve","pointer","parts","split","parseStep","steps","urlPointer","acrossApp","urlObject","urlPage","urlQuery","objectlistIsOpen","objectlistSearchText","objectlistSortDirection","objectlistIsGroup","newView","pageByID","viewNew","DefaultValues","query","datasourceID","linkDatacollectionID","linkFieldID","objectWorkspace","filterConditions","glue","rules","loadAll","preventPopulate","isQuery","fixSelect","syncType","QueuedOperations","_queueTimer","runQueue","op","queueOperation","__dataCollection","_dataCollectionNew","refreshFilterConditions","__bindComponentIds","__flexComponentIds","_dataStatus","dataStatusFlag","notInitial","__filterCond","static","__datasource","queryByID","__treeCollection","_treeCollectionNew","__isGroup","removeFromApplications","next","applications","apps","allRemoves","app","datacollectionRemove","$dc","datasource","datacollection","sourceType","datacollectionLink","datacollectionByID","fieldLink","initializing","initialized","dataStatus","setCursor","itemId","setCursorTree","currTreeId","getCursor","currTreeItem","getItem","_itemId","dc","exists","tc","find","treeItem","$parent","treeCursor","currId","currItem","currItemAndChilds","serialize","refreshLinkCursor","getFirstRecord","getFirstId","getNextRecord","record","getNextId","linkCursor","dvLink","filterData","rowData","isParentFilterValid","setStaticCursor","currentUserUsername","userFields","found","currRowId","rowId","filterCondition","cond","___AD","onAfterCursorChange","attachEvent","currData","isRelated","relateData","PK","needAdd","updatedVals","bad","ABObjectQuery","objList","where","newDataId","alias","objectAlias","rule","findAll","newQueryData","updatedV","isValidData","__reloadWheres","bcids","pos","DC","event","reloadData","parseTreeCollection","d","updateItemData","updateRelateVal","relationName","rowRelateVal","valIsRelated","updateItem","needUpdate","isExists","updatedIds","updatedTreeIds","_queryUpdateData","ABObject","count","staleRefresh","deleteId","needDelete","deletedIds","deletedTreeIds","delId","updateRelateVals","relateVal","linkDv","eventAdd","emitter","eventName","listener","waitForDataCollectionToInitialize","loadData","start","limit","wheres","skip","linkDc","dcFilters","dv","_pendingLoadDataResolve","platformFind","processIncomingData","__totalCount","total_count","load","reloadTimer","reloadPromise","reloadPromise__resolve","reloadPromise__reject","reloadWheres","getData","linkVal","totalCount","bind","unbind","removeComponent","comId","__filterDatasource","filterComplexNew","fieldsLoad","__filterDatacollection","__filterScope","scopeList","userScopes","allowAll","objectIds","scopeRules","sRules","scopeWhere","syncTypeFlag","server","client","oItem","tran","updatedTran","tranKey","clone","clonedDatacollection","parseMe","cursorID","filteredClone","filters","evt","__events","eventClear","removeListener","builder","definitionDestroy","definitionUpdate","ABApplication","ABDefinition","ABIndex","ABObjectExternal","ABObjectImport","ABDataCollection","ABProcess","ABProcessParticipant","ABProcessLane","ABProcessTaskManager","ABViewFormComponent","RowFilter","hash","_allApplications","_allObjects","_allProcesses","_allQueries","_allDatacollections","nameFilter","toApplicationNameFormat","toFieldRelationFormat","colName","toJunctionTableFK","objectName","fkName","substring","toJunctionTableNameFormat","appName","sourceTableName","targetTableName","toObjectNameFormat","definitionClean","allDefinitions","keyList","keyFn","objectKeysByDef","isRaw","definitionsParse","defs","curr","applicationByID","ID","applicationNew","datacollectionNew","newField","indexNew","objectNew","isExternal","objectFile","objectLanguage","objectProcessForm","objectProcessInstance","objectRole","objectScope","objectToken","objectUser","processNew","processElementNew","taskDef","newTask","processElementNewForModelDefinition","element","newElement","defaultDef","definitionForElement","fromElement","queryNew","rowfilterNew","_App","viewNewDetatched","_mockApp","_notifyInfo","moreInfo","objectID","fieldID","fieldName","datacollectionID","datacollectionName","ds","datacollectionDSID","datacollectionDSName","processName","req","_tenantID","user","_user","taskID","taskName","applicationID","applicationName","viewID","viewName","viewKey","FIELD","fieldIDs","fId","attributeFieldIDs","indexName","dbTableName","uniqueName","ABEmitter","fieldList","mlFields","translate","defaultTranslations","language_code","languageDefault","unTranslate","currLanguage","first","t","foundOne","trans","_where","_sort","_skip","_limit","staleRefreshInProcess","staleRefreshMap","staleRefreshPending","staleRefreshTimerID","responseContext","contextKey","contextValues","prepareMultilingualData","multilingualFields","shouldTranslate","urlParamsCreate","urlRest","urlParamsDelete","urlRestItem","urlParamsFind","urlParamsUpdate","urlRestCount","numberOfRows","currID","Err","staleRefreshProcess","currentEntries","responseHash","allKeys","findConnected","includeRelativeData","results","myObj","returnData","upsert","dateFields","calculatedFields","objectLink","subData","relatedMlFields","calField","ABModel","ABObjectCore","connName","undefined","labelFormat","labelSettings","isNoLabelDisplay","tableName","primaryColumnName","transColumnName","urlPath","createdInAppID","frozenColumnID","hiddenFields","importedFieldIDs","_fields","importIndexes","indexIDs","indexes","_indexes","objectLinks","isConnection","fieldImport","fieldRemove","origLen","fid","fieldReorder","sourceId","targetId","itemMoved","oPos","j","fieldSave","fieldAdd","imageFields","isMultilingual","indexByID","indexRemove","idx","indexSave","urlRestBatch","urlRestLog","urlRestRefresh","workspaceSortFields","workspaceViews","currView","getCurrentView","workspaceFilterConditions","workspaceFrozenColumnID","workspaceHiddenFields","isReadOnly","defaultValues","defaultValue","urlField","remoteCreate","cloneOne","prop","displayData","labelData","defaultField","fieldUseAsLabel","trim","noLabelText","colIds","match","colId","colIdNoBracket","ABModelQuery","alias2Obj","importJoins","joins","importFields","_objectWorkspaceViews","objectWorkspaceViews","grouping","hidePrefix","exportJoins","exportFields","fieldSettings","newFields","fieldInfo","objectByAlias","_objects","canFilterField","isNew","clonedField","currFields","_joins","objectBase","objID","links","_links","uniqueObjectIDs","newLinks","storeObject","storeLinks","link","processJoin","baseObject","linkField","rootObject","canFilterObject","linkedObject","isDisabled","disabled","_concat","xmlDefinition","_elements","elementIDs","eID","ele","_connections","connections","modelDefinition","modelNew","modelUpdate","xml","connectionForDiagramID","dID","connectionsIncoming","to","connectionsOutgoing","from","connectionRemove","connectionSimplyElement","bo","businessObject","sourceRef","targetRef","connectionUpsert","simpleConn","elementAdd","diagramID","elementForDiagramID","elementRemove","isTriggeredBy","taskForTriggerKey","connectionPreviousTask","currElement","processData","tasksToAsk","queryPreviousTasks","processDataFields","processDataObjects","triggerKey","param","responses","processedIDs","task","apply","AllViews","Views","default","common","V","getFieldVal","condition","_QueryFields","_Fields","removeHtmlTags","div","document","createElement","innerHTML","textContent","innerText","showObjectName","condResult","ruleFieldType","connectedVal","fieldVal","getConnectFieldValue","textValid","dateValid","numberValid","listValid","booleanValid","userValid","connectFieldValid","thisObjectValid","compareValue","compareArray","queryFieldValid","Number","queryId","qIdBase","inQueryFieldFilter","inQueryValid","inQueryFilter","dataCollectionValid","compareValueLowercase","_Object","newRowData","processFieldsLoad","processFields","_ProcessFields","uiInit","fieldIsFilterable","thisObjOption","unshift","fieldsToQB","conditions","fieldsAddFiltersBoolean","fieldsAddFiltersQueryField","fieldsAddFiltersQuery","fieldsAddFiltersDate","fieldsAddFiltersNumber","fieldsAddFiltersString","fieldsAddFiltersList","fieldsAddFiltersUser","fieldsAddFiltersThisObject","_isRecordRule","fieldsAddFiltersRecordRule","processField","processFieldId","pop","fieldsAddFiltersContext","dateConditions","less","beforeCondition","greater","afterCondition","less_or_equal","onOrBeforeCondition","greater_or_equal","onOrAfterCondition","less_current","beforeCurrentCondition","greater_current","afterCurrentCondition","less_or_equal_current","onOrBeforeCurrentCondition","greater_or_equal_current","onOrAfterCurrentCondition","last_days","onLastDaysCondition","next_days","onNextDaysCondition","condKey","batch","handler","stringConditions","contains","containsCondition","not_contains","notContainsCondition","equals","isCondition","not_equal","isNotCondition","is_empty","isEmpty","is_not_empty","isNotEmpty","numberConditions","equalCondition","notEqualCondition","lessThanCondition","moreThanCondition","lessThanOrEqualCondition","moreThanOrEqualCondition","listConditions","equalListCondition","notEqualListCondition","booleanConditions","userConditions","is_current_user","isCurrentUserCondition","is_not_current_user","isNotCurrentUserCondition","contain_current_user","containsCurrentUserCondition","not_contain_current_user","notContainsCurrentUserCondition","connectConditions","in_query","inQuery","not_in_query","notInQuery","same_as_user","sameAsUser","not_same_as_user","notSameAsUser","in_data_collection","inDataCollection","not_in_data_collection","notInDataCollection","queryFieldConditions","in_query_field","inQueryField","not_in_query_field","notInQueryField","thisObjectConditions","recordRuleConditions","same_as_field","sameAsField","not_same_as_field","notSameAsField","contextConditions","context_equals","equalsProcessValue","context_not_equal","notEqualsProcessValueCondition","context_in","inProcessValueCondition","context_not_in","notInProcessValueCondition","queriesLoad","_Queries","isComplete","noValueRules","isCompleteRules","returnSingular","config_settings","queryValid","ABField","ABFieldAutoIndexDefaults","description","isFilterable","isSortable","supportRequire","supportUnique","useAsLabel","compatibleOrmTypes","compatibleMysqlTypes","delimiter","displayLength","previewText","delimiterItem","delimiterList","sign","displayNumber","getDelimiterSign","setValueToIndex","ABFieldBooleanDefaults","AGE","dateString","dataDate","diffYears","round","YEAR","getFullYear","MONTH","getMonth","DAY","getDate","DATE","getTime","HOUR","MINUTE","MINUTE_TO_HOUR","mins","hours","rhours","minutes","rminutes","parseFloat","ABFieldCalculateDefaults","formula","includes","decimalSign","decimalPlaces","ABFieldCalculateCore","place","numberVal","calVal","dateVal","booleanVal","eval","toFixed","convertToJs","ABFieldCombinedDefaults","combinedFields","warnings","_warnings","ABFieldConnectDefaults","fieldDefaults","names","linkObj","configError","pullRelationValues","selectedData","dataValue","propName","getRelationValue","forUpdate","reservedNames","fieldOrmTypes","fieldMysqlTypes","fieldIcon","fieldMenuName","fieldDescription","fieldSupportRequire","fieldSupportQuery","supportQuery","defaultCheck","defaultVal","returnVal","required","myDef","ABFieldDateDefaults","dateFormat","defaultDate","defaultDateValue","validateCondition","validateRangeUnit","validateRangeBefore","validateRangeAfter","validateStartDate","validateEndDate","dateResult","prototype","call","isFinite","startDate","endDate","startDateDisplay","getDateDisplay","endDateDisplay","minDate","maxDate","exportValue","dateObj","getFormat","dateFormatString","dateData","dateToString","RegEx","ABFieldDateCore","timeFormat","defaultTime","defaultTimeValue","baseDefault","assign","currDate","setHours","getHours","setMinutes","getMinutes","setSeconds","getSeconds","setMilliseconds","getMilliseconds","toISOString","getTimeFormat","datetimeFormat","dateToStr","ABFieldEmailDefaults","defaultCheckbox","Reg","ABFieldFileDefaults","removeExistingData","fileSize","fileType","limitFileSize","limitFileType","filename","requestParam","allParameters","myParameter","ABFieldFormulaDefaults","reCalculate","reformat","numData","rowDataFormat","fieldBase","filterHelper","numberList","decimalSize","getDecimalSize","multiplier","pow","sum","max","min","_rowFilter","ABFieldImageDefaults","useWidth","imageWidth","useHeight","imageHeight","useDefaultImage","defaultImageUrl","ABFieldJsonDefaults","ABFieldListDefaults","isMultiple","hasColors","multipleDefault","pendingDeletions","opt","defaultVals","hex","optTran","ABFieldLongTextDefaults","MAX_CHAR_LENGTH","supportMultilingual","ABFieldNumberDefaults","typeFormat","typeDecimals","typeDecimalPlaces","typeRounding","typeThousands","validation","validateMinimum","validateMaximum","iL","places","n","isNaN","errMessage","formatSign","formatList","thousandsSign","postfix","digit","formatNumber","groupDelimiter","groupSize","decimalDelimiter","negativeSign","dataStr","abs","integerStr","decimalStr","integerValue","step","substr","ABFieldStringDefaults","ABFieldTextFormulaDefaults","textFormula","setValueToFormula","formulaString","fieldRegExp","matches_field_array","autoIndexVal","setBuildinValueToFormula","matches_buildin_array","buildinList","getBuildInFunction","formula_array","isBracketInBracket","functionName","parameters_array","isMatch","resultParameters","parameter_size","getLeft","getRight","getMid","getTrim","getTrimLeft","getTrimRight","getLength","getRegExpReplace","trimLeft","getExtractRegex","getReplace","getLower","getUpper","getCapitalize","getRandom","getNumberToWords","getDateDayOfWeekName","getDateMonthOfYearName","getFormatDate","string","endPosition","endposition","reverseStr","reverseString","reverse","startPosition","trimRight","regexp","replaceString","extractResult","searchValue","replaceValue","toUpperCase","charAt","units","tens","scales","end","chunks","chunksLen","chunk","ints","word","words","resultFormula","ABFieldSelectivity","ABFieldTreeDefaults","ABFieldConnect","ABFieldUserDefaults","USERNAME_FIELD_ID","editable","isCurrentUser","isShowProfileImage","isShowUsername","ABProcessLaneDefaults","ABProcessParticipantDefaults","laneIDs","stashed","useAccount","account","useField","Tasks","DEFINITIONTYPES","AllProcessElements","ELEMENT","category","DiagramReplace","target","eventDefinitionType","allTasks","tasks","DiagramReplaceDefinitionsForType","StartEvents","Gateways","EndEvents","eventDefinitions","$type","state","laneDiagramID","errorConfig","instance","initState","instanceValues","taskState","allArgs","myLane","myState","nextTasks","myDiagramObj","hashDiagramObjects","onError","exitFlows","tasksFromFlow","flow","flowObj","targetIDs","tid","targetTask","hashProcessDataValues","listDataFields","currentProcessValues","_prevState","stateCompleted","stateUpdate","wantToDoSomething","startElements","previousElements","objectOfStartElement","startElem","objectOfPrevElement","prevElem","qlObj","ABProcessElement","ABProcessTaskEndDefaults","actionName","className","triggered","ABProcessGatewayExclusiveDefaults","ABProcessTaskEmailDefaults","myDefaults","subject","AccountingBatchProcessingDefaults","AccountingFPCloseDefaults","AccountingFPYearCloseDefaults","AccountingJEArchiveDefaults","CalculateDefaults","ABProcessTaskServiceDefaults","ABProcessTaskGetResetPasswordUrlDefaults","InsertRecordDefaults","isRepeat","startElement","previousElement","fieldRepeat","repeatColumn","ABQLManager","ABProcessTaskServiceQueryDefaults","_datasources","fromAttributes","registerDatasource","processDataField","SubProcessDefaults","isExpanded","isEnable","connectionAttrs","parameterId","dataFieldOpt","previousFields","startsWith","stateData","returnField","ABFieldList","ABProcessTaskApprovalDefaults","fixBoolean","formBuilder","preProcessFormIOComponents","components","abFieldID","path","pluck","comp","action","myID","listField","ABProcessTaskUserDefaults","ABProcessTaskUserExternalDefaults","who","toUsers","ABProcessTriggerDefaults","ABProcessTrigger","ABProcessTaskTriggerLifecycleDefaults","lifecycleKey","repeatEvery","repeatTime","repeatDaily","repeatWeekly","repeatMonthly","isEnabled","timeVals","setUTCHours","setUTCMinutes","getUTCHours","getCronExpression","day","month","dayWeek","minute","hour","parameterDefinitions","prevOP","objectOut","initObject","objectLookup","nextOP","NextQLOps","OP","qlOP","quotedLabel","availableProcessDataFieldsHash","availableProcessDataFields","hashFieldIDs","paramChanged","pDef","ABQL","ParameterDefinitions","ABQLFindCore","ABQLManagerCore","matchingOPs","QLOps","Op","ABQLObjectCore","objNameDef","QLUpdate","QLSave","QLPluck","ABQLValue","ABQLSetPluck","ABQLRowPluckCore","nextQLOps","ABQLRowUpdateCore","ABQLRow","ABQLSetFirstCore","ABQLSetPluckCore","objectOutID","ABQLSetSaveCore","taskParam","registered","task_param","ABQLSetSave","ABQLValueSaveCore","ABViewWidget","ABViewCSVExporterDefaults","labelKey","ABViewCSVExporterPropertyComponentDefaults","dataviewID","buttonLabel","hasHeader","ABRecordRule","ABViewCSVImporterDefaults","ABViewCSVImporterPropertyComponentDefaults","availableFieldIds","recordRules","RecordRule","_recordRule","formLoad","fromSettings","doRecordRulesPre","rowDatas","processPre","doRecordRules","ABViewCarouselPropertyComponentDefaults","showLabel","hideItem","hideButton","navigationType","filterByCursor","detailsPage","detailsTab","editPage","editTab","ABViewDefaults","componentList","imageField","ABViewChartComponent","ABViewChartAreaPropertyComponentDefaults","areaType","isLegend","chartHeight","labelFontSize","stepValue","maxValue","ABViewChartBarPropertyComponentDefaults","barType","barPreset","ABViewContainer","ABViewChartPropertyComponentDefaults","columnValue","columnLabel","columnValue2","isPercentage","labelPosition","multipleSeries","ABViewChartDefaults","viewsToAllow","labelField","valueField","valueField2","ABViewChartLinePropertyComponentDefaults","lineType","linePreset","ABViewChartPiePropertyComponentDefaults","pieType","innerFontSize","ABViewCommentPropertyComponentDefaults","columnUser","columnComment","columnDate","getUserField","getCommentField","getDateField","getUserData","userObject","getUsers","imageURL","image","ABViewPropertyDefaults","ifPanel","removable","elsePanel","ABViewConnectDataFilterPropertyComponentDefaults","ABView","ABPropertyComponentDefaults","columns","gravity","movable","viewsSortByPosition","y","tabicon","ABViewPropertyComponentDefaults","warningsSilent","viewIcon","tabIcon","accessLevels","viewIDs","isRoot","dx","dy","allParents","parents","curView","accessibleRoles","getUserAccess","accessLevel","isAccessManager","currentRole","parentFormComponent","parentDetailComponent","detail","pageParent","filterFn","parentPage","pageRoot","rootPage","urlView","errNoDCID","errNoDC","updateAccessLevels","roleId","viewDestroy","viewRemove","viewInsert","viewReorder","viewId","toPosition","findIndex","allViewDeletes","lookUpIds","copyUpdateProperyList","ignoreSubPages","copiedSubPage","ignoreSubViews","copiedView","copy","newName","allSaves","p2","vi","ABViewDetail","ABViewDataviewPropertyComponentDefaults","xCount","ABViewDataviewDefaults","ABViewDetailComponent","ABViewDetailCheckboxPropertyComponentDefaults","ABViewDetailCheckboxDefaults","detailComponent","detailView","getCurrentData","detailCom","ABViewDetailPropertyComponentDefaults","formView","ABViewDetailDefaults","ABViewDetailCustomPropertyComponentDefaults","ABViewDetailCustomDefaults","ABViewDetailImagePropertyComponentDefaults","ABViewDetailImageDefaults","ABViewDetailTextPropertyComponentDefaults","ABViewDetailTextDefaults","ABViewDetailTreeDefaults","ABViewDocxBuilderPropertyComponentDefaults","buttonlabel","filelabel","toolbarBackground","buttonPosition","uploadUrl","downloadUrl","dvList","ABViewFormButtonPropertyComponentDefaults","includeSave","saveLabel","includeCancel","cancelLabel","includeReset","resetLabel","afterCancel","alignment","isDefault","ABViewFormButtonDefaults","ABViewFormCheckboxPropertyComponentDefaults","ABViewFormCheckboxDefaults","ABViewFormFieldPropertyComponentDefaults","ABViewFormConnectPropertyComponentDefaults","popupWidth","popupHeight","ABViewFormConnectDefaults","ABSubmitRule","ABViewFormDefaults","ABViewFormPropertyComponentDefaults","clearOnLoad","clearOnSave","displayRules","editForm","submitRules","fieldComponents","flattenComponents","addFieldToForm","yPosition","fieldComponent","formComponent","newInstance","doSubmitRules","SubmitRules","ABViewFormCustomPropertyComponentDefaults","ABViewFormCustomDefaults","ABViewFormDatepickerPropertyComponentDefaults","timepicker","ABViewFormDatepickerDefaults","ABViewFormNumberPropertyComponentDefaults","isStepper","ABViewFormNumberDefaults","ABViewFormCustom","ABViewFormReadonlyPropertyComponentDefaults","ABViewFormReadonlyDefaults","ABViewFormSelectMultiplePropertyComponentDefaults","ABSelectMultipleDefaults","ABViewFormSelectSinglePropertyComponentDefaults","ABSelectSingleDefaults","ABViewFormTextboxPropertyComponentDefaults","ABViewFormTextboxDefaults","ABViewFormTreePropertyComponentDefaults","ABTreeDefaults","ABViewGanttPropertyComponentDefaults","titleFieldID","startDateFieldID","endDateFieldID","durationFieldID","progressFieldID","notesFieldID","ABViewGridPropertyComponentDefaults","showToolbar","isEditable","massUpdate","allowDelete","isExportable","trackView","summaryColumns","countColumns","gridFilter","filterOption","userFilterPosition","isGlobalToolbar","hideHeader","labelAsField","hideButtons","groupBy","saveLocal","settingsDefault","base","settingsDefaultJSON","owFields","removeField","shouldSave","ABViewImagePropertyComponentDefaults","ABViewKanbanPropertyComponentDefaults","editFields","verticalGroupingField","horizontalGroupingField","ownerField","template","textTemplate","TextTemplate","ABViewLabelPropertyComponentDefaults","formatNormal","formatTitle","formatDescription","PropertyComponentDefaults","numColumns","addColumn","isEdited","ABViewListPropertyComponentDefaults","ABViewMenuPropertyComponentDefaults","orientation","buttonStyle","menuAlignment","menuInToolbar","menuPadding","menuTheme","menuPosition","menuTextLeft","menuTextRight","menuTextCenter","order","ABMenuDefaults","page","isChecked","pageId","ClearPagesInView","AddPagesToView","displayPage","existsPage","tabId","existsTab","getAliasname","menuItem","getMenuItem","pageInfo","lang","translation","aliasname","getParentPageId","tabView","currentView","pageWidth","fixedPageWidth","pageBackground","myAppID","allPageDeletes","allPages","pageRemove","pageInsert","updateIcon","mapNewIdFn","ABViewPivotPropertyComponentDefaults","removeMissed","totalColumn","separateLabel","structure","ABViewReportManagerPropertyComponentDefaults","moduleList","queryList","ABViewTabPropertyComponentDefaults","minWidth","stackTabs","darkTheme","sidebarWidth","sidebarPos","iconOnTop","ABViewTabDefaults","addTab","tabName","ABViewTextPropertyComponentDefaults","_object","displayText","componentID","clearTemplateValue","fData","urlImage","columnSpan","rowSpan","ABApplicationCore","ABViewPage","_handler_page_updated","definition","currPage","refreshInstance","errDepreciated","areaKey","newObj","entity","begLen","datacollectionInsert","_listInsert","_listRemove","objectInsert","objectRemove","processInsert","processRemove","queryInsert","queryRemove","exportIDs","parseView","pid","pdef","vid","vdef","warningsEval","checks","allRoles","warningsAll","CustomComponentManager","custom","create","edit","export","formName","import","rename","yes","no","none","close","defaultPlaceholder","invalidMessage","createErrorMessage","createSuccessMessage","updateErrorMessage","updateSucessMessage","deleteErrorMessage","deleteSuccessMessage","renameErrorMessage","renameSuccessMessage","dataFieldHeaderLabel","dataFieldHeaderLabelPlaceholder","dataFieldLabel","dataFieldLabelPlaceholder","dataFieldColumnName","dataFieldColumnNamePlaceholder","dataFieldShowIcon","componentDropZone","initComponents","_actions","ABDataCollectionCore","datacollectionId","bindParentDc","dataCollectionLink","hideProgressOfComponents","attachFlexlayout","sync","onDataRequestEvent","loadNext","unsync","detachEvent","onDcLoadData","off","DataCollection","_extendCollection","treeStore","TreeCollection","dataStore","SelectionModel","onAfterLoadEvent","addCss","removeCss","render","onAfterLoad","addRowToTree","parentAlias","dataId","parentItemIds","parentId","_alias","_dataId","treeNode","parentItemId","boundComp","allWarnings","datacollectionById","ABDefinitionCore","ABIndexCore","migrateDrop","ABMLClassCore","ABModelCore","errorPopup","handler_create","handler_common","handler_delete","handler_findAll","handler_logs","handler_update","no_socket_trigger","batchCreate","once","loadInto","DT","logs","update","batchUpdate","rowIds","ABObjectWorkspaceViewCollection","_handler_object_migrate","fromObj","hasOwnProperty","disableRelatedQueries","fieldDrops","isAdd","columnResize","newWidth","columnHeaders","isObjectWorkspace","hiddenFieldNames","header","columnHeader","validationRules","adjust","footer","content","customDisplays","DataTable","eachColumn","getItemNode","column","customDisplay","isUuid","ABObjectQueryCore","conditionScan","fieldEntry","oldWidth","h","originTemplate","_conditionCheck","isConditionComplete","ABProcessCore","allElements","allDestroy","appsWithProcess","_new","elementNewForModelDefinition","ABViewManagerCore","getSeparateItems","validateFile","fileInfo","file","extensionType","getDataRows","separatedBy","reader","FileReader","onload","dataCols","dCol","readAsText","getGuessDataType","dataRows","colIndex","line","str","FilterComplexCore","_toInternal","_toExternal","_options","_initComplete","observing","and","or","thisObject","inQueryFieldQueryPlaceholder","inQueryFieldFieldPlaceholder","checkedCondition","notCheckedCondition","ContextDefaultOption","EqualsProcessValue","NotEqualsProcessValueCondition","InProcessValueCondition","popup","querybuilder","_recordRuleFieldOptions","hidden","isSaveHidden","myPopup","isRecordRule","fieldOptions","__blockOnChange","getState","$observe","_cond","helper","$query","getFilterFunction","qbSettings","toShortHand","uiQueryCustomValue","$el","$app","require","CreateFilter","inputs","uiValue","localId","mode","parser","i18n","dateFormatStr","margin","fieldColumnName","uiQueryValue","uiDataCollectionValue","uiCustomValue","uiContextValue","uiBooleanValue","uiUserValue","uiNoneValue","uiListValue","LinkType","uiTextValue","uiQueryFieldValue","uiRecordRuleValue","onAfterRender","queryView","style","zIndex","isQueryField","u","linkObjectId","placeholder","processFieldKey","pField","_customOptions","popUp","addCustomOption","RowFilterCore","filterForm","addNewFilter","inputValue","queryCombo","queryFieldCombo","queryFieldComboQuery","queryFieldComboField","fieldMatch","dataCollection","listOptions","datePicker","batchName","queryFieldOptions","recordRuleOptions","recordRuleFieldOptions","getFilterUI","isolate","newVal","oldVal","selectCombineCondition","suggest","onBeforeShow","$viewCond","selectField","oldValue","onChangeRule","onChangeQueryFieldCombo","validate","isNumber","onTimedKeyPress","indexView","getFormView","removeNewFilter","getAddButtonUI","$viewForm","toggleAddNewButton","ignoreNotify","showBatch","Queries","ruleViewId","getActiveId","$viewComparer","getList","defaultOpt","dcOptions","_Application","Query","$fieldElem","selectedOpt","getPopup","valueViewId","$viewConditionValue","dateField","logic","col","blockEvent","unblockEvent","_completeConditions","ABViewForm","RowUpdater","addNew","_mockFormWidget","uiItem","self","$viewItem","maxWidth","_extendedOptions","toggleCustomProcessOption","removeItem","addItem","$form","toggleForm","$viewContainer","$customValueElem","$processValueElem","isVisible","isProcessValue","formFieldComponent","inputView","getOptions","labelRight","layout","setExtendedOptions","showProcessOption","$customOption","$processOption","ABFieldCore","_CurrentField","filterViews","filterComplex","addValidation","numberOfNull","Field","labelOnChange","requiredOnChange","getNumberOfNullValue","isRequired","messageTemplate","color","Filter","fnMigrate","migrateUpdate","customEdit","formKey","ABFieldAutoIndexCore","$group","detailComponentSetting","ABFieldBooleanCore","checkbox","ABFieldCombineCore","ABFieldConnectCore","multiselect","editFormat","editParse","openOptions","button","$suggest","$list","getAndPopulateOptions","term","haveResolved","respond","linkedObj","linkedCol","linkedModel","storageID","storedOptions","itemObj","getItemFromVal","returnVals","theEditor","combineFilters","filterByConnectValues","parseFilterByConnectValues","depth","valuesByDepth","ef","$parentField","filterValue","parentValue","filterColumn","dataFieldId","handlerOptionData","populateOptions","addCy","populateOptionsDataCy","each","option","querySelector","setAttribute","pullRecordRelationValues","formComponentSetting","webixLocale","longDateFormatStr","ABFieldDateTimeCore","timeToStr","ABFieldEmailCore","ABFieldFileCore","fileTemplate","typesList","maximumSize","parentContainer","webixContainer","container","domNode","display","urlUpload","uploader","apiOnly","upload","inputName","multiple","onBeforeFileAdd","classList","acceptableTypes","acceptableSizes","size","delay","onFileUpload","onFileUploadError","addDropZone","dataset","deleteFile","uploaderId","fileDialog","rowid","iconDisplay","fileDisplay","fileURL","fileLink","getAttribute","fileicon","fileDeleteIcon","removeAttribute","href","isWebix","ABFieldFormulaCore","ABFieldImageCore","idCustomContainer","formId","containerHeight","imageSrcHeight","heightVal","imageTemplate","imgHeight","imgWidth","showImage","dataTable","deleteImage","removeDefaultImage","imageDisplay","isRemoveDefaultImage","html","backgroundImage","imageIcon","imageDeleteIcon","toBase64","img","Image","crossOrigin","onerror","canvas","getContext","drawImage","imageData","toDataURL","src","ABFieldJsonCore","ABFieldListCore","numDone","numToDo","remainingFields","_getSelectedOptions","hasCustomColor","optionHex","selectedObj","clearButton","stopPropagation","getSelectedOptions","ABFieldLongTextCore","ind","ABFieldNumberCore","INIT_EDITOR","editors","defaultSettings","allowClear","removeOnly","readOnly","showDropdown","ABFieldSelectivityDefaults","selectivityRender","cypress","dataCy","items","prepareData","selectivity","setOptions","selectivityInput","isUsers","templates","multipleSelectedItem","highlighted","additionalText","isLabelHidden","Selectivity","Inputs","Multiple","selectivitySetBadge","singleSelectedItem","Single","trigerEditPageEvent","editMenus","querySelectorAll","eMenu","__hasClickEvent","preventDefault","parentElm","parentElement","thisField","caretElems","getElementsByClassName","caretElm","parentNode","removeChild","selectivitySettings","selectivityGet","selectivitySet","setData","selectivityDestroy","clientHeight","badge","anchor","textnode","createTextNode","appendChild","ABFieldStringCore","max_length","ABFieldTextFormulaCore","ABFieldTreeCore","formClass","placeHolder","isForm","branches","selectOptions","rootid","getParentId","par","nodeHTML","myHex","setBadge","idPopup","idTree","parentComponent","firstRender","populateTree","getValues","uncheckAll","openAll","checkItem","onItemCheck","dom","tree","uncheckItem","eachSubItem","getChecked","scrollHeight","setValues","ABFieldUserCore","SiteUser","Defaults","newLinkDef","setDisplayOptions","ABProcessLaneCore","transferParticipantWhereToMe","myParticipant","swap","children","child","lanes","objChild","setLane","defElement","ABProcessParticipantCore","diagramProperties","propertiesShow","propertyIDs","userUI","selectUsersUi","__Roles","__Users","labelAlign","stringResult","propertiesStash","userDef","stashUsersUi","ABProcessElementCore","findLane","Lane","currObj","property","switchTo","propertiesID","ABProcessEndCore","ABProcessGatewayExclusiveCore","abFields","myOutgoingConnections","__dfLookup","conn","connectedElement","DF","connUI","properties","ABProcessTaskEmailCore","fromUser","toUser","toCustom","fromCustom","toUserUI","fromUserUI","fromUsers","paddingY","minHeight","toolbar","init_instance_callback","ABProcessTaskServiceCore","AccountingBatchProcessingCore","processBatchValue","objectBatch","fieldBatchEntries","fieldBatchFinancialPeriod","objectJE","fieldJEAccount","fieldJERC","fieldJEStatus","fieldJEStatusComplete","objectBR","fieldBRFinancialPeriod","fieldBRAccount","fieldBRRC","fieldBREntries","processValues","objectList","blankField","defaultFields","updateFields","fieldPickers","fieldValues","fp","picker","batchFields","fieldPickersBatch","jeFields","fieldPickersJE","compileStatusValues","statusField","onStatusComplete","wbxComplete","jeEntryID","jeEntry","jeFieldStatusValues","brFields","fieldPickersBR","AccountingFPCloseCore","processFPValue","objectFP","objectGL","objectAcc","fieldFPStart","fieldFPOpen","fieldFPStatus","fieldFPActive","fieldGLStarting","fieldGLRunning","fieldGLAccount","fieldGLRc","fieldGLDebit","fieldGLCredit","fieldAccType","fieldAccAsset","fieldAccExpense","fieldAccLiabilities","fieldAccEquity","fieldAccIncome","getFieldOptions","getStatusFieldOptions","statusFieldId","fpObject","fpStatusField","getListOptions","fpFields","glFields","accFields","fpStatusFields","accTypeOptions","elementsConfig","fieldGLElem","updateFPFields","updateGLFields","updateAccFields","fpStatusOptions","updateAccTypeOptions","AccountingFPYearCloseCore","processFPYearValue","objectFPYear","objectFPMonth","objectAccount","valueFundBalances","valueNetIncome","fieldFPYearStart","fieldFPYearEnd","fieldFPYearStatus","fieldFPYearActive","fieldFPMonthStart","fieldFPMonthEnd","fieldGLStartBalance","fieldGLRunningBalance","fieldGLrc","fieldAccNumber","fieldAccTypeIncome","fieldAccTypeExpense","fieldAccTypeEquity","fpYearDateFields","fpYearStatusFields","fpYearStatusOptions","fpMonthDateFields","glNumberFields","glRcFields","accNumberFields","accTypeFields","fpYearDateOptions","updateFPYearStatusOptions","fpMonthDateOpts","glRcOptions","glNumberOptions","updateAccNumberFields","updateFPYearActiveOptions","AccountingJEArchiveCore","objectBalance","objectJEArchive","fieldBatchFiscalMonth","fieldJeAccount","fieldJeRC","fieldJeArchiveBalance","fieldBrFiscalMonth","fieldBrAccount","fieldBrRC","fieldsMatch","getConnectFieldOptions","refreshFieldsMatch","$fieldsMatch","JEObj","JEArchiveObj","fJe","fieldBatchList","fieldBalanceList","fieldJeList","fieldJeArchiveList","refreshBatchFields","refreshBRFields","refreshJeFields","refreshJeArchiveFields","CalculateTaskCore","formulaText","variablePopup","operatorPopup","highlight","insertFormula","symbol","ABProcessTaskServiceGetResetPasswordUrlCore","InsertRecordTaskCore","ABProcessTaskServiceQueryCore","SubProcessCore","parameterOptions","bpmnModeler","props","loopCharacteristics","isSequential","loopType","ABProcessTaskUserCore","ABProcessTaskUserApprovalCore","ABProcessTaskUserExternalCore","ABProcessTriggerCore","ABProcessTriggerLifecycleCore","lifecycleList","allObjects","listObj","ABProcessTriggerTimerCore","ABProcessTriggerTimer","repeatOnPanel","dayOptions","LABEL_WIDTH","vertical","ABQLCore","parseRow","uiID","toIDs","objectname","uiCondition","select","shorthand","uiAddParamForDef","paramUI","uiParamUI","uiAddNext","uiRow","uiNextRow","uiAddParams","uiIndentNext","newValue","resetValue","newOP","thisRow","thisQuery","addOP","viewAddParams","viewAddNext","allRows","ir","allCols","ic","foundFields","shortHand","elCondition","initialCond","displayLabel","initialValue","Updater","sh","_myPopup","topView","rowView","toInsert","ABQLFind","root","rootOP","topEntry","thisView","operation","parseCurrent","selector","currOP","nextRow","ABQLRootObjectCore","ABQLObject","ABQLRowPluck","uiNextRowSelectorRefresh","ABQLRowSave","ABQLRowUpdate","ABQLSetFirst","ABQLValueSave","ABViewCore","_ui","viewsToIgnore","changePage","ABViewCSVExporterCore","PropertyFilter","ObjectDefaults","commonUI","propertyEditorDefaultElements","showFilterPopup","filter_popup","onFilterChange","currentEditObject","filterValues","allComplete","propertyEditorSave","initPopupEditors","selectSource","dcId","oldDcId","propertyEditorValues","skipAutoSave","propertyEditorPopulate","$DcSelector","propertyBadgeNumber","filterMenuButton","buttonFilter","popupFilter","ClientFilter","downloadCsvFile","qsWhere","open","$buttonFilter","ABViewCSVImporterCore","CSVImporter","PopupRecordRule","ABViewCSVImporterComponent","viewCSVImporter","uploadFileList","headerOnFirstLine","columnList","datatable","statusMessage","progressBar","importButton","csvImporter","_dataRows","CurrentObjectID","_csvFileInfo","validationError","showPopup","uiConfig","accept","autosend","loadCsvFile","autoheight","onClick","webix_remove_upload","removeCsvFile","populateColumnList","uiRecordsView","keyPressTimeout","resizeColumn","editaction","tooltip","_errorMsg","onValidationError","details","complexValidations","$dt","_status","onValidationSuccess","onCheck","selected","_included","labelImport","overLimitAlert","uiPopup","selectedDv","formClear","clearValidation","$datatable","matchFields","getMatchFields","columnIndex","statusTemplate","fileId","firstLine","csvColumnList","formComp","formConfig","uiColumns","selectedCsvCols","selectVal","matchCol","columnOptUI","abName","toggleLinkFields","loadDataToGrid","dateSeparatorOptions","dayFormatOptions","monthFormatOptions","yearFormatOptions","dateOrderOptions","linkFieldOptions","fld","$columnOption","$linkFieldOption","fieldValidations","rulePops","validationUI","popUpId","getFilterHelper","getSelectedItem","rowValue","destructor","parsedData","refreshColumns","refreshRemainingTimeText","startUpdateTime","total","remainTime","days","seconds","$selector","fieldData","$dateFormatSelectors","separator","year","$linkDataSelector","searchField","linkValues","objModel","selectedRows","_currProgress","increaseProgressing","itemFailed","addRowCss","itemInvalid","errorMsg","uiCleanUp","dcLink","linkConnectFields","allValid","validRows","linkColName","removeRowCss","itemValid","hashLookups","allLookups","connectObject","connectModel","linkIdKey","createRecord","newRowsData","rowIndex","sqlMessage","itemPass","throttledSaves","performThrottledSaves","currentRecords","remainingRecords","importer","nextRecords","propertyUpdateRules","propertyAvailableFields","selectAll","listTemplate","componentKey","markCheckbox","check","recordRuleShow","qbFixAfterShow","recordRuleSave","populateBadgeNumber","propertyDatacollections","availableFldOptions","updateEventIds","addListener","availableFields","buttonRecordRules","v1App","newComponent","ABViewCarouselCore","ABFieldImage","PopupCarouselFilterMenu","ABViewCarousel","linkPageComponent","filter_property_popup","filterMenuShow","filterSave","filterCancel","gridFilterMenuButton","objectOptions","viewLoad","linkSettings","filterUI","linkPage","linkPageHelper","spacer","navigation","buttons","activeIndex","getActiveIndex","switchImage","myTemplate","busy","Carousel","ready","current_position","_imageCount","_rowCount","fnFilter","getFilter","cursor","images","imgFile","imgData","onclick","getNode","fullscreen","exit","onFilterData","carousel","firstElementChild","__filterHelper","__linkPageHelper","ABViewChartCore","ABViewChart","cellHeight","enableMultipleSeries","populateFieldOptions2","populateDataview","populateFieldOptions","dataview","refreshData","numFields","convertOption","columnLabelOptions","columnValueOptions","defaultOption","currentComponent","getReportData","dcChart","labelCol","valueCol","valueCol2","numberColName","numberColName2","colorList","dInfo","sumData","sumNumber","sumNumber2","countNumber","objLink","numberVal2","num","relateValues","value2","val2","ABViewChartAreaCore","componentId","baseComp","viewComponents","yAxis","xAxis","legend","series","alpha","ABViewChartBarCore","preset","_onShow","_isShow","reportData","_componentId","ABViewChartLineCore","ABViewChartPieCore","pieInnerText","shadow","ABViewCommentCore","CommentView","propertyUpdateUserFieldOptions","propertyUpdateCommentFieldOptions","propertyUpdateDateFieldOptions","propertyUpdateDatacollectionOptions","dataSource","userId","getCurrentUserId","currentUser","onBeforeAdd","addComment","onAfterDelete","deleteComment","getCommentData","userCol","commentCol","dateCol","userColName","commentColName","dateColName","dataObject","dataList","user_id","default_date","refreshComment","__refreshTimeout","$comment","$commentList","commentData","scrollTo","MAX_SAFE_INTEGER","commentText","dateTime","saveData","updateComment","commentField","__dvEvents","onStoreUpdated","operate","currentUserId","comment","userField","ABViewComponent","CurrentDatacollectionID","CurrentDatacollection","datacollectionLoad","eventsClear","ABViewConditionalContainerCore","FilterComponent","__filterComponent","populateFilterComponent","changeDatacollection","dvId","populatePopupEditors","SourceSelector","ifComp","elseComp","displayView","ABViewConnectDataFilterComponent","idbase","applyConnectFilter","resetConnectFilter","connectId","filterRule","ABViewConnectDataFilter","ABViewContainerCore","subComponents","gridColumns","viewDelete","trg","deletedView","Dashboard","deletedElem","showEmptyPlaceholder","viewEdit","populateInterfaceWorkspace","onReorder","viewState","allViewUpdates","vs","showOverlay","validatePosition","curPosition","minPosition","maxPosition","OverlayBox","_onChangeId","addColumnGravity","removeColumnGravity","counter","idPrefix","getElements","curRowIndex","rowNew","colNumber","grav","curRow","newPos","getGrav","rowViews","parentAccessLevel","ABViewDataviewCore","ABViewPropertyLinkPage","propertyComponent","com","scrollview","dataFlexView","paddingX","onAfterScroll","getScrollState","dataView","emptyView","renderData","Layout","Scroll","toggleTab","parentTab","wb","tab","getTopParentView","tabbar","nextTab","$height","loadMoreTimer","setYPos","getYPos","flexlayout","background","records","$width","recordWidth","currentLength","_startPos","stopPos","clicked","ABViewDetailCore","propertyUpdateFieldOptions","fieldSaves","fieldView","addFieldToView","myVal","needRecalculate","vComponent","newRow","createdRow","currCursor","updatedRow","clearFieldComponents","reduce","promiseChain","currTask","ABViewDetailCheckboxCore","checkboxElem","ABViewDetailComponentCore","fieldLabel","ABViewDetailConnectCore","ABViewPropertyAddPage","addPageTool","addPageProperty","addPageComponent","__addPageTool","ABViewDetailCustomCore","textElem","templateLabel","ABViewDetailImageCore","imageUrl","ABViewDetailTextCore","ABViewDetailTreeCore","getDomTree","domTree","divTree","ABViewDocxBuilderCore","Docxtemplater","ImageModule","JSZipUtils","JSZip","letUserDownload","blob","URL","createObjectURL","download","revokeObjectURL","ABViewDocxBuilder","validateType","docxFile","uploadedFile","docxDownload","downloadFile","fetch","langOptions","language_label","selectedDvId","baseCom","noFile","buttonWidth","leftSpacer","rightSpacer","buttonPos","buttonLabelText","renderFile","_init","DownloadButton","NoFileLabel","reportValues","summaries","isDcLabelAdded","dcValues","dcCursor","setReportValues","baseData","targetData","fieldLabels","transFields","childItem","resultData","objTran","fieldTran","objectLabel","datacollectionData","addDownloadTask","fieldImage","imageVal","imgUrl","getBinaryContent","zip","doc","imageModule","centered","getImage","tagValue","tagName","getSize","imgBuffer","tagNames","dcs","attachModule","loadZip","tag","scope","varName","propSource","propFilter","indexColName","connectedField","sourceVals","getVal","comparer","getZip","generate","mimeType","blobFile","ABViewFormCore","ABViewFormButton","ABViewFormConnect","ABViewFormSelectMultiple","ABViewFormTextbox","PopupSubmitRule","viewsToRemove","saveTasks","newFieldView","defaultButton","refreshDefaultButton","doneFn","displayRuleShow","displayRuleSave","submitRuleShow","submitRuleSave","formCom","existsFields","buttonSubmitRules","buttonDisplayRules","uniqueInstanceID","myUnique","fieldValidationsHolder","abid","timerId","onBeforeSaveData","onSaveData","customFields","_showed","defaultRowData","inputId","displayParentData","relationField","relationFieldCom","relationFieldView","relationElem","formData","Form","formField","nval","oval","fieldValidating","newData","actionSettings","valueRules","fieldOperations","valueType","pullDataDC","parentData","focusOnFirst","yList","posY","getFormValues","visibleFields","allVals","formVals","formFieldCom","fComp","cursorFormVals","validateData","requiredFields","$forminput","domInvalidMessage","marginLeft","saveButton","rulesReady","recordRulesReady","formReady","newFormVals","formError","invalidAttrs","topPosition","topPositionId","childComponent","ABViewFormButtonCore","pagesList","AddPagesToList","parentFormUniqueID","getInputNode","onClear","onSaveClick","onCancelClick","cancelButton","pageCurr","resetButton","rootPageId","ABViewFormCheckboxCore","ABViewFormComponentCore","ABViewFormConnectCore","ABViewPropertyEditPage","ABPopupSort","SortComponent","compId","$node","getFilterByConnectValues","filterByConnectValue","$ui","linkedField","parentFields","$filterValueConfig","parentField","viewLocation","templateElem","editPageTool","showSortPopup","$button","onSortChange","editPageProperty","filterConnectedOptions","fieldDefs","definitionForID","objectDefs","fieldsDefs","connectedObjs","formElementsDefs","connObj","fieldToCheck","fdefs","customFK","settingsAddPage","settingsEditPage","filterConnectedValue","buttonSort","editpopup","editPageComponent","optionsParam","callbackSaveData","callbackCancel","callbackClearOnLoad","currentVals","formBusy","goToEditPage","$elem","__editFormDcEvent","selectedValues","recordObj","$$component","prepedVals","customField","__editPageTool","ABViewFormCustomCore","requiredClass","DEFAULT_HEIGHT","focusabletemplate","ABViewFormDatepickerCore","datepickerElem","ABViewFormNumberCore","numberElem","viewType","numbertext","ABViewFormReadonlyCore","readonly","setHTML","ABViewFormSelectMultipleCore","selectlist","tagMode","tagTemplate","selectedOptions","ABViewFormSelectSingleCore","ABViewFormTextboxCore","textView","textUi","cdn","menubar","getEditor","contentAreaContainer","ABViewFormTreeCore","ABViewGanttCore","DAY_SCALE","WEEK_SCALE","wstart","weekStart","wend","MONTH_SCALE","YEAR_SCALE","ABViewGanttComponent","viewGantt","menu","gantt","_tempDC","TitleField","StartDateField","EndDateField","DurationField","ProgressField","NotesField","originalStartDate","originalEndDate","pendingAdds","ganttElement","isExistsTask","taskId","localService","getService","tasksData","removeTask","opsService","_this","setScale","override","Map","services","Backend","indx","convertFormat","taskAdd","taskUpdate","taskRemove","$menu","showItem","convertValues","patch","initData","ganttElem","dataService","dcTasks","gantt_data","currScale","getScales","scale","ganttData","newScales","setScales","precise","cellWidth","$batch","top","left","taskData","updatedTask","ABViewGantt","ABWorkObjectPopupExport","popupExport","_dataCollection","_grid","_filename","_hiddenFields","dataCollectionLoad","setHiddenFields","setFilename","setGridComponent","$grid","fnExport","noCheckedRow","appbuilder_select_item","filterRow","csv","toCSV","toExcel","filterHTML","toPDF","toPNG","exportType","fileName","ABViewGridPopupMassUpdate","ABViewGridComponent","submit","GridComponent","rowUpdater","update_button","update_items","getDataTable","updatedRowIds","AB_Work_Object_Workspace_PopupSortFields","uiForm","chosenField","ABViewGridCore","KEY_STORAGE_SETTINGS","GridSettings","viewGrid","buttonDeleteSelected","buttonMassUpdate","buttonExport","globalSearchToolbar","filterRules","callbackFilterData","columnSplitLeft","columnSplitRight","PopupExport","PopupMassUpdateComponent","PopupSortDataTableComponent","sortOptions","callbackSortData","skippableColumns","handler_select","selectRow","getColumnIndex","uiDatatable","isTreeDatable","selectType","resizeRow","prerender","fixedRowHeight","dragColumn","onBeforeSelect","preserve","cellNode","onAfterSelect","onBeforeEditStart","toggleUpdateDelete","onAfterEditStop","checked","onBeforeEditStop","ignoreUpdate","onColumnResize","user_action","setColumnWidth","getLastColumn","onRowResize","onBeforeColumnDrag","onBeforeColumnDrop","onAfterColumnDrop","onHeaderClick","uiFilter","uiToolbar","toolbarMassUpdate","toolbarDeleteSelected","toolbarFilter","toolbarSort","toolbarExport","externalSearchText","tableUI","inputWidth","codebase","throttleCustomDisplay","scrollStarted","displayRecords","verticalScrollState","rowHeight","startRecIndex","endRecIndex","getVisibleCount","CYPRESS_REF","clearValue","numRows","globalFilterPosition","refreshHeader","$ButtonFilter","sortRules","gridElem","rowItem","oldDC","$DataTable","__handler_dc_busy","__handler_dc_ready","__handler_dc_loadData","disableUpdateDelete","enableUpdateDelete","freezeDeleteColumn","lastColumn","getColumnConfig","$treetable","baseGroupMap","listData","valRelation","groupBys","g","gIndex","groupMap","byValue","gColName","group","localSettingsSave","old","removeCellCss","editCell","requireRefresh","EditField","ignoreLocal","objColumnHeaders","objColumnHeaderIDs","origCol","groupField","treetable","addedColumns","contentId","lastCol","savedLocalSettings","settingsID","unselect","checkedItems","deleteTasks","toolTip","imageFieldColNames","tip","relationData","toolTipOnBeforeRender","visibility","toolTipOnAfterRender","firstChild","nodeName","imgBottom","imgRight","innerHeight","imgOffsetY","newTop","imgOffsetX","newLeft","ABViewGrid","propertyGroupByList","colNames","groupByList","ABViewImageCore","actionKey","imgTag","ABViewKanbanCore","ABFormSidePanel","ABFieldUser","ABViewKanBanComponent","viewKanBan","kanban","resizer","FormSide","CurrentVerticalField","CurrentHorizontalField","CurrentOwnerField","_updatingOwnerRowId","fieldByKey","onSelectChange","getSelectedId","updateOwner","tags","onListAfterSelect","onAfterStatusChange","updateStatus","onAvatarClick","$kb","newVals","updateVals","_kb","kanbanListTemplate","removeCard","templateAvatar","templateBody","horizontalOptions","verticalOptions","horizontalVals","statusOps","reconstruct","$menuUser","getUserList","needRefresh","eachList","addCard","setFields","verticalGrouping","horizontalGrouping","ABViewKanban","Kanban","comKanBan","refreshForm","$formView","formAttrs","ABViewLabelCore","uiFormatting","ABViewLayoutCore","templateButton","LayoutView","ABViewListCore","ABViewList","ListView","autoHeight","ABViewMenuCore","ABViewTab","menuIndex","Menu","updateTreeDnD","curPage","treeDnD","reorderPages","isBranch","newPageOrder","thisPage","getBranchIndex","editValue","drag","onBeforeDrop","onAfterDrop","native_event","onDataUpdate","pageTree","addPage","localpage","childPage","childIndex","tabIndex","tabViewIndex","tIndex","importData","pagesFieldset","pageOrderFieldset","currentPageId","getIdByIndex","currentItem","datatype","onMenuItemClick","redirectPage","toggleParent","showIt","setInterval","clearInterval","viewInfo","subsign","elems","menuIncluded","parentElem","ABViewPageCore","permissionClick","isRetry","List","permissions","action_key","role_id","_view","popupSettings","pageSettings","pagePermissionPanel","propertyUpdatePermissionsOptions","getPageActionKey","getPermissions","selected_role_ids","app_roles","selectedRoles","ABViewPivotCore","ABFieldCalculate","ABFieldFormula","ABFieldNumber","componentBase","onBeforeApply","$pivotComp","customLabels","populateData","dataMapped","setStructure","ABViewReportsManagerCore","compInstance","reports","getModules","saveModule","indexOfModule","m","deleteModule","getModels","reportModels","reportFields","getReportFields","refs","getQueries","saveQuery","indexOfQuery","deleteQuery","pullDataTasks","dcIds","dcData","sid","dataCol","sourceDc","sourceObj","targetDc","targetObj","sourceLinkField","sf","targetLinkField","tf","sourceData","sData","tData","sVal","tVal","matchedVal","updateRows","queryVal","filterElem","tempDc","as","mod","groupProp","_","groupedData","groupedResult","agg","rawCol","getFieldData","table","GetColumnConfig","meta","columnFormat","ref","abField","reportRow","rField","ABViewTabCore","tabElem","currIndex","popupShow","sidebarItem","tabEdit","nodeId","tabRemove","getMultiview","editedTab","getHead","popupClose","popupBusy","popupReady","_viewComponents","sidebar","expandMenu","collapseMenu","baseType","menuItems","selectedItem","toggle","collapseNode","expandNode","multiview","keepViews","onViewChange","prevId","nextId","tabUi","changeTab","tabViewId","defaultViewIsSet","setState","collapsed","ABViewTextCore","__onChangeFn","tinymce","activeEditor","execCommand","dvOptions","ABViewWidgetCore","ABViewProperty","toSettings","editForms","pagesHasForm","onClearOnLoad","_application","openFormPopup","pageClone","popUpComp","popupTemplate","setDefaultValue","linkedData","fView","rawData","formEdit","ABViewPropertyFilterData","filterPanel","globalFilterFormContainer","globalFilterForm","filterMenutoolbar","resetFilterButton","__externalSearchText","rowFilter","rowFilterForm","triggerCallback","callEvent","resetFilter","$filterMenutoolbar","queryRules","qr","filterRuleButton","ruleName","selectFilter","rowFilterRules","searchRules","externalText","terms","allTerms","fieldTerms","__currentFilter","queryRule","hiddenQB","QBHelper","closeFilterPopup","closePopup","uiSettings","widgetKey","pagesHasDetail","detailsVals","editVals","defaultLabel","isDefaultView","ABObjectWorkspaceViewGrid","ABObjectWorkspaceViewKanban","ABObjectWorkspaceViewGantt","hashViews","defaultAttributes","currentViewID","gridAttributes","defaultGrid","importViews","exportViews","viewSettings","setCurrentView","indexToRemove","updateView","viewToUpdate","ABObjectWorkspaceView","ABObjectWorkspaceViewComponent","ABPopupNewDataField","ABFieldDate","ABFieldString","ABFieldLongText","duration","progress","notes","refreshOptions","numberFields","decimalFields","stringFields","PopupNewDataFieldComponent","titleField","startDateField","endDateField","durationField","progressField","notesField","vGroupInput","hGroupInput","ownerInput","initSelect","$option","attribute","vGroupValue","getHorizontalGroupingField","getVerticalGroupingField","getOwnerField","cleanRules","processCondition","queryBuilder","queryBuilderContainer","queryBuilderLayout","showQBButton","conditionFields","QB","currentObject","fieldTypes","onDone","listRules","showQueryBuilderContainer","ObjectQueryBuilder","listActions","actionDropList","selectedAction","objectQB","currentForm","selectAction","valueDisplay","_generateUI","Action","currentAction","replaceValueDisplay","onDelete","$ValueDisplay","cloneChildren","prevAction","getAction","stashCondition","currAction","hidddatasourceen","for","processUpdateObject","isReady","QBCondition","convertToNumber","isPreProcess","queryObject","conditionRules","queryObjectLoad","webixID","valueDisplayComponent","childSettings","headerDefault","rulesScrollview","when","addRule","Rule","getRule","RulesUI","deletedRule","ruleSettings","ABViewRuleList","ABViewRule","RoleUpdateExisting","RoleInsertConnected","RoleUpdateConnected","RoleRemoveConnected","allReady","RoleConfirmMessage","RuleExistPage","RuleParentPage","RuleClosePopup","RuleWebsite","RuleEmail","UpdateConnected","valueDisplayChooser","Component","showQBIfNeeded","queryBuilderDisplay","connectedObject","connectionField","selectedField","newObjectValues","newRecords","connectedObjectField","qbCondition","ABViewRuleActionFormRecordRuleUpdateConnected","isUpdateValueDisabled","_formData","ABViewRuleActionObjectUpdater","selectedFieldID","fieldDropList","connectedFieldList","cf","connectKey","_uiChooser","selectConnectedField","updateFieldsForm","addDisplay","removePreviousDisplays","cloneAllViews","updateObjectLoad","updateComponent","$updateForm","qbComponent","formRows","fr","rowSettings","modifyCondition","updateIt","done","qbCond","ABViewRuleAction","$popup","confirmMessage","ABFieldEmail","toEmailsContainer","toEmails","isEmail","toEmailAdd","fieldTemplate","enterField","refreshUI","emailType","recipients","fromName","fromEmail","toEmailTemplate","emailTypeChange","visibleBatch","toEmailValidate","emailFieldOptions","queryOptions","$toView","toEmailRemove","$select","$emailValue","isAllValid","emailText","existsFieldIds","fnAddOptions","fLink","emailFields","optId","optLabel","focusElem","UIManager","getFocus","setFocus","rec","emailFieldUrl","emailField","emailData","linkFieldId","dvIdAndFieldId","dcQuery","emailAddr","pagesAndTabs","_pageOptions","pageOrTab","indent","selectedId","website","ABViewRuleActionObjectUpdaterDefaults","updateObject","stashRules","_uiUpdater","valueDisplayList","removeAddRow","UpdateForm","formGet","addRow","valueDisplayRow","onAdd","delRow","mySettings","selectDc","selectBy","queryField","buttonAdd","buttonDelete","buttonsToggle","shouldFilter","usedHash","FormView","getUpdateObjectField","fieldField","columnID","$inputView","$componentView","datasources","optionsDataSources","optionsSelectBy","$optionUpdateExsits","selectedDC","$row","populateFilters","dcQueries","$multiview","compNodeView","setValueFn","collectionId","$valueField","objectToUpdate","isUpdated","clonedDataCollection","fieldWithValue","newValues","currRow","updates","objectToUpdateClone","lookup","updateObjectURL","DocUtils","convertPixelsToEmus","pixel","docxtemplater","_createClass","defineProperties","descriptor","enumerable","configurable","writable","defineProperty","Constructor","protoProps","staticProps","extensionRegex","rels","getPrefix","getFileTypeName","getRelsFileName","getRelsFilePath","ImgManager","xmlDocuments","TypeError","_classCallCheck","fileTypeName","mediaPrefix","relsFilePath","relsDoc","createEmptyRelsDoc","relsFileName","mainRels","files","str2xml","xml2str","relationships","getElementsByTagName","relationshipChilds","iterable","relationship","contentType","extension","contentTypeDoc","defaultTags","some","newTag","namespaceURI","imageName","realImageName","imagePath","addImageRels","binary","addExtensionRels","maxRid","loadImageRels","getImageXml","rId","getImageXmlCentered","getPptxImageXml","offset","memoize","DOMParser","XMLSerializer","Errors","nullGetter","part","delimiters","mergeObjects","resObj","xmlNode","serializeToString","decodeUtf8","decodeURIComponent","escape","convertSpaces","explanation","encodeUtf8","unescape","errorHandler","parseFromString","charMap","regexStripRegexp","escapeRegExp","charMapRegexes","endChar","startChar","rstart","rend","wordToUtf8","utf8ToWord","concatArrays","arrays","array","spaceRegexp","fromCharCode","throwXmlTagNotFound","XTTemplateError","parsed","pregMatchAll","regex","matchArray","exec","sizeOfObject","traits","moduleWrapper","xmldom","wrapper","compiled","modules","fileTypeConfig","FileTypeConfig","xmlFileNames","loadAsync","currentFile","createTemplateClass","templatedFiles","getTemplatedFiles","_this2","baseModules","moduleFunction","optionsTransformer","asText","compile","compileFile","mapper","getRenderedMap","mapped","setTags","usedData","createTemplateClassFromContent","filePath","_this3","xmltOptions","XmlTemplater","textPath","getFullText","XmlMatcher","XTError","stack","XTScopeParserError","XTInternalError","loopModule","spacePreserveModule","rawXmlModule","expandPairTrait","PptXFileTypeConfig","tagsXmlTextArray","tagsXmlLexedArray","tagRawXml","tagTextXml","DocXFileTypeConfig","docx","pptx","inRange","range","updateInTextTag","inTextTag","offsetSort","getTag","throwUnclosedTagException","xtag","assertDelimiterOrdered","delimiterMatches","fullText","inDelimiter","lastDelimiterMatch","delimiterMatch","throwUnopenedTagException","getAllIndexes","arr","Reader","innerContentParts","full","parseDelimiters","ranges","delimiterLength","cutNext","delimiterIndex","partContent","delimitersInOffset","delimiterInOffset","xmlparsed","newArray","xmlparse","xmltags","matches","textMatchArray","othersMatchArray","contentLength","allMatches","totalMatches","tagText","_getTag","tagMatcher","other","func","stringifyJson","cache","getMinFromArrays","minIndex","totalLength","resultArray","arrayIndex","emptyFun","identity","getTraits","postparse","every","mergeSort","getExpandToDefault","throwClosingTagNotMatchOpeningTag","openingtag","closingtag","getOpenCountChange","location","getPairs","countOpen","firstTrait","currentTrait","outer","T","throwUnmatchedLoopException","_ref","_postparse","trait","pairs","expandedPairs","pair","expandTo","currentPairIndex","innerParts","newParsed","inPair","expandedPair","basePart","subparsed","dashInnerRegex","moduleName","placeHolderContent","inverted","traitName","totalValue","scopeManager","loopOver","createSubScopeManager","getInner","right","postparsed","paragraphParts","throwRawTagShouldBeOnlyTextInParagraph","RawXmlModule","expandToOne","Render","spacePreserve","inChunk","lexed","inPlaceHolder","tailParts","token","moduleParsed","moduleParse","ScopeManager","createBaseScopeManager","moduleRendered","moduleRender","scopePath","loopOverValue","functor","currentValue","isValueFalsy","functorIfInverted","rootError","lastTagIsOpenTag","innerLastTag","innerCurrentTag","addTag","expandOne","throwRawTagNotInParagraph","leftParts","rightParts","inner","xmlElements","getListXmlElements","memoized","tagsXmlArray","tagsXmlArrayJoined","charactersAddedCumulative","charactersAdded","replacerUnshift","pn","last","handleRecursiveCase","xmlMatcher","Lexer","Parser","_render","fromJson","setModules","inspect","xmllexed","locator","DOMHandler","cdata","lineNumber","columnNumber","_locator","systemId","_toString","chars","java","appendElement","hander","currentElement","source","sax","XMLReader","domBuilder","defaultNSMap","xmlns","entityMap","lt","gt","amp","quot","apos","setDocumentLocator","errorImpl","isCallback","Function","build","buildErrorHandler","nbsp","startDocument","DOMImplementation","createDocument","documentURI","localName","qName","createElementNS","len","getURI","getQName","createAttributeNS","getLocator","nodeValue","setAttributeNode","endElement","current","startPrefixMapping","uri","endPrefixMapping","processingInstruction","ins","createProcessingInstruction","ignorableWhitespace","ch","characters","charNode","createCDATASection","skippedEntity","endDocument","normalize","comm","createComment","startCDATA","endCDATA","startDTD","publicId","impl","implementation","createDocumentType","dt","warning","fatalError","dest","_extends","Super","pt","ppt","__proto__","NodeType","ELEMENT_NODE","ATTRIBUTE_NODE","TEXT_NODE","CDATA_SECTION_NODE","ENTITY_REFERENCE_NODE","ENTITY_NODE","PROCESSING_INSTRUCTION_NODE","COMMENT_NODE","DOCUMENT_NODE","DOCUMENT_TYPE_NODE","DOCUMENT_FRAGMENT_NODE","NOTATION_NODE","ExceptionCode","ExceptionMessage","HIERARCHY_REQUEST_ERR","INDEX_SIZE_ERR","DOMSTRING_SIZE_ERR","NOT_FOUND_ERR","WRONG_DOCUMENT_ERR","INVALID_CHARACTER_ERR","NO_DATA_ALLOWED_ERR","NO_MODIFICATION_ALLOWED_ERR","INUSE_ATTRIBUTE_ERR","NOT_SUPPORTED_ERR","DOMException","captureStackTrace","NodeList","LiveNodeList","_node","_refresh","_updateLiveList","inc","_inc","ownerDocument","ls","__set__","NamedNodeMap","_findNodeIndex","_addNamedNode","newAttr","oldAttr","ownerElement","_onRemoveAttribute","_nsMap","_onAddAttribute","_removeNamedNode","lastIndex","features","_features","feature","Node","_xmlEncoder","charCodeAt","_visitNode","nextSibling","Document","_onUpdateChild","newChild","cs","childNodes","_removeChild","previous","previousSibling","lastChild","_insertBefore","nextChild","cp","nodeType","newFirst","newLast","pre","Element","Attr","CharacterData","Text","Comment","CDATASection","DocumentType","Notation","Entity","EntityReference","DocumentFragment","ProcessingInstruction","nodeSerializeToString","isHtml","nodeFilter","buf","refNode","documentElement","lookupPrefix","visibleNamespaces","namespace","needNamespaceDefine","isHTML","ns","pubid","sysid","internalSubset","importNode","node2","cloneNode","attrs2","_ownerElement","INVALID_STATE_ERR","SYNTAX_ERR","INVALID_MODIFICATION_ERR","NAMESPACE_ERR","INVALID_ACCESS_ERR","getNamedItem","setNamedItem","setNamedItemNS","getNamedItemNS","removeNamedItem","removeNamedItemNS","hasFeature","version","versions","qualifiedName","doctype","insertBefore","refChild","replaceChild","oldChild","hasChildNodes","appendData","isSupported","hasAttributes","lookupNamespaceURI","isDefaultNamespace","importedNode","getElementById","rtv","createDocumentFragment","createAttribute","specified","createEntityReference","pl","hasAttribute","getAttributeNode","removeAttributeNode","_appendSingleChild","setAttributeNodeNS","removeAttributeNS","getAttributeNodeNS","hasAttributeNS","getAttributeNS","setAttributeNS","getElementsByTagNameNS","substringData","insertData","replaceData","deleteData","splitText","newText","newNode","getTextContent","$$length","nameStartChar","nameChar","tagNamePattern","defaultNSMapCopy","entityReplacer","surrogate1","surrogate2","fixedFromCharCode","appendText","xt","lineEnd","linePattern","lineStart","parseStack","currentNSMap","closeMap","tagStart","localNSMap","endMatch","parseInstruction","parseDCC","ElementAttributes","parseElementStartPart","closed","fixSelfClosed","locator2","copyLocator","parseHtmlSpecialContent","attrName","setTagName","nsp","nsPrefix","_copy","elStartEnd","elEndStart","lastIndexOf","matchs","reg","lastMatch","endDTD","_set_proto_","thiz","getLocalName","getInnerDocx","getInnerPptx","_ref2","xmlString","xmlDoc","ext","cx","cy","imgManagers","imageNumber","relsFiles","imgManager","getNextImageName","sizePixel","getRenderedPart","getRenderedPartPptx","getRenderedPartDocx","cellCX","cellCY","imgW","imgH","expanded","xmlElement","updateFileTypeConfig","zero","byteAt","lastIndexOfSignature","readData","checkOffset","encode","decode","compressedSize","uncompressedSize","crc32","compressionMethod","compressedContent","getContent","getCompressedContent","STORE","magic","compress","uncompress","compressInputType","uncompressInputType","DEFLATE","getTypeOf","checkIndex","setIndex","readInt","readString","transformTo","readDate","base64","createFolders","compression","compressionOptions","unixPermissions","dosPermissions","string2binary","string2Uint8Array","uint8Array2String","string2Blob","arrayBuffer2Blob","checkSupport","MAX_VALUE_16BITS","MAX_VALUE_32BITS","pretty","findCompression","isRegExp","Uint8Array","Uint16Array","Uint32Array","deflateRaw","level","inflateRaw","pako","support","utils","compressions","checkCRC32","optimizedBinaryString","decodeFileName","utf8decode","fileNameStr","decompressed","fileCommentStr","zipComment","isBuffer","Buffer","_data","nodebuffer","asBinary","D","utf8encode","_initialMetadata","asNodeBuffer","asUint8Array","asArrayBuffer","buffer","w","z","C","E","A","B","fileRecord","LOCAL_FILE_HEADER","dirRecord","CENTRAL_FILE_HEADER","compressedObject","folder","platform","encodeFileName","CENTRAL_DIRECTORY_END","append","finalize","ZIP64_CENTRAL_DIRECTORY_LOCATOR","ZIP64_CENTRAL_DIRECTORY_END","DATA_DESCRIPTOR","arraybuffer","ArrayBuffer","uint8array","Blob","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","getBlob","subarray","applyFromCharCode","byteLength","loadOptions","checkSignature","isSignature","readBlockEndOfCentral","diskNumber","diskWithCentralDirStart","centralDirRecordsOnThisDisk","centralDirRecords","centralDirSize","centralDirOffset","zipCommentLength","readBlockZip64EndOfCentral","zip64EndOfCentralSize","versionMadeBy","versionNeeded","zip64ExtensibleData","readBlockZip64EndOfCentralLocator","diskWithZip64CentralDirStart","relativeOffsetEndOfZip64CentralDir","disksCount","readLocalFiles","localHeaderOffset","readLocalPart","handleUTF8","processAttributes","readCentralDir","zip64","readCentralPart","readEndOfCentral","prepareReader","isEncrypted","bitFlag","useUTF8","prepareCompressedContent","prepareContent","fileNameLength","extraFieldsLength","fileCommentLength","diskNumberStart","internalFileAttributes","externalFileAttributes","readExtraFields","parseZIP64ExtraField","fileComment","extraFields","findExtraFieldUnicodePath","findExtraFieldUnicodeComment","chunkSize","windowBits","memLevel","strategy","gzip","ended","strm","avail_out","deflateInit2","deflateSetHeader","dictionary","string2buf","deflateSetDictionary","_dict_set","input","next_in","avail_in","output","Buf8","next_out","deflate","onEnd","onData","buf2binstring","shrinkBuf","deflateEnd","flattenChunks","Deflate","inflateInit2","Z_OK","inflateGetHeader","Z_FINISH","Z_NO_FLUSH","binstring2buf","inflate","Z_NEED_DICT","inflateSetDictionary","Z_BUF_ERROR","Z_STREAM_END","Z_SYNC_FLUSH","utf8border","buf2string","arraySet","inflateEnd","Inflate","ungzip","Int32Array","setTyped","Buf16","Buf32","Z_PARTIAL_FLUSH","Z_FULL_FLUSH","Z_BLOCK","Z_TREES","Z_ERRNO","Z_STREAM_ERROR","Z_DATA_ERROR","Z_NO_COMPRESSION","Z_BEST_SPEED","Z_BEST_COMPRESSION","Z_DEFAULT_COMPRESSION","Z_FILTERED","Z_HUFFMAN_ONLY","Z_RLE","Z_FIXED","Z_DEFAULT_STRATEGY","Z_BINARY","Z_TEXT","Z_UNKNOWN","Z_DEFLATED","I","pending_buf","pending_out","total_out","_tr_flush_block","block_start","strstart","wrap","adler","G","H","total_in","max_chain_length","prev_length","nice_match","w_size","la","w_mask","prev","ka","good_match","lookahead","match_start","window_size","hash_size","insert","ja","ins_h","hash_shift","hash_mask","J","ua","match_length","_tr_tally","max_lazy_match","M","wa","xa","last_lit","va","prev_match","U","match_available","good_length","max_lazy","nice_length","max_chain","pending_buf_size","gzhead","gzindex","$","last_flush","w_bits","hash_bits","dyn_ltree","ha","dyn_dtree","fa","bl_tree","ga","l_desc","d_desc","bl_desc","bl_count","ia","heap","ea","heap_len","heap_max","l_buf","lit_bufsize","d_buf","opt_len","static_len","bi_buf","bi_valid","data_type","Z","na","sa","_tr_init","O","Q","X","K","N","P","R","S","W","Y","aa","ba","da","ma","oa","pa","qa","ra","ta","ya","deflateInit","deflateReset","deflateResetKeep","hcrc","extra","time","os","_tr_align","_tr_stored_block","deflateInfo","xflags","extra_len","dmax","wsize","whave","wnext","hold","bits","lencode","distcode","lenbits","distbits","sane","havedict","flags","wbits","ncode","nlen","ndist","have","lens","work","lendyn","distdyn","back","was","ca","inflateReset","inflateReset2","inflateResetKeep","inflateInit","za","Aa","Ba","Ca","inflateInfo","static_tree","extra_bits","extra_base","has_stree","dyn_tree","max_code","stat_desc","webpackContext","webpackContextResolve","__webpack_require__","protoUI","ActiveContent","datafilter","countColumn","summColumn","datetime","popupType","EditAbility","unitlist","autofit","$init","parseDataFields","dataFields","formComponents","Formio","basic","advanced","customBasic","premium","weight","getFormData","schema","_key","inputType","calculateValue","refreshOnChange","block","leftIcon","theme","newD","createForm","submission","onButton","$getValue","eachRow","$count","setMasterValue","master"],"sourceRoot":""}