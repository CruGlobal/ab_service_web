{"version":3,"file":"AppBuilder_ABFactory_js-node_modules_moment_locale_sync_recursive_.bc40b3fbd78bb50082a9.js","mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mBAAO,CAAC,8CAAoC;AAChE,uBAAuB,mBAAO,CAAC,8CAAmC;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,OAAO;AAC1C,+BAA+B,OAAO;AACtC,yCAAyC,OAAO;AAChD;AACA,oCAAoC,OAAO;AAC3C,sCAAsC,OAAO;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB;AACA,UAAU;AACV;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,oCAAoC;AAC9D;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB,mBAAmB;AACnB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,mBAAmB;AACnB,oBAAoB,YAAY;AAChC;AACA;AACA,0BAA0B,iBAAiB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB;AACA,mBAAmB;AACnB;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA,4BAA4B;AAC5B,+BAA+B;AAC/B,kCAAkC;AAClC;AACA;AACA;AACA;AACA,yCAAyC;AACzC,kCAAkC;AAClC,yBAAyB;AACzB;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,+BAA+B;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxeAAe,EAAE,KAAK;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,oBAAoB,EAAE,KAAK;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF,mDAAmD;AACrI;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,4HAA4H,WAAW;AACvI;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,gBAAgB;AAChB;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,oBAAoB,SAAS;AAC7B;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qDAAqD,IAAI,QAAQ;AACjE,2CAA2C,IAAI,QAAQ;AACvD,+BAA+B,IAAI,QAAQ;AAC3C;AACA;;;;;;;;;;;ACvsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mBAAO,CAAC,8CAAoC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,OAAO;AAC1C,8BAA8B,OAAO;AACrC,8BAA8B,OAAO;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB,sBAAsB;AACtB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,oBAAoB,UAAU;AAC9B;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,+BAA+B;AACtD,uBAAuB,gCAAgC;AACvD;AACA;AACA;AACA;AACA,uBAAuB,wCAAwC;AAC/D,uBAAuB,yCAAyC;AAChE;AACA;AACA;AACA;AACA,uBAAuB,+BAA+B;AACtD,uBAAuB,gCAAgC;AACvD;AACA;AACA;AACA;AACA,uBAAuB,+BAA+B;AACtD,uBAAuB,gCAAgC;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,oBAAoB,UAAU;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,wBAAwB;AAC7F;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,wBAAwB;AAC7F;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,2EAA2E,8BAA8B;AACzG,iBAAiB;AACjB;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,oBAAoB,KAAK;AACzB,oBAAoB,MAAM;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9jBiD;AACjD;AACuB;AACK;AACI;AACI;AACpC;AACqD;AACrD;AACA;AACA;AACA;AACyC;AACzC;AACA;AAC8C;AAC9C;AACA;AACuC;AACvC;AACgD;AAChD;AACA;AACwD;AACxD;AACA;AAC8C;AAC9C;AACA;AAC8C;AAC9C;AACA;AACqD;AACrD;AAC4C;AAC5C;AACA;AACgD;AAChD;AACA;AACyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,8BAA8B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,4DAAa;AACrC;AACA;AACA;AACA;AACA,oBAAoB,yDAAM;AAC1B;AACA,iCAAiC,gEAAa;AAC9C;AACA;AACA;AACA;AACA,qBAAqB,6DAAO;AAC5B,oBAAoB,gEAAM;AAC1B,0BAA0B,kEAAY;AACtC,qBAAqB,6DAAO;AAC5B,qBAAqB,6DAAO;AAC5B,oBAAoB,6DAAM;AAC1B,mBAAmB,4DAAK;AACxB;AACA;AACA,qBAAqB,uDAAO;AAC5B;AACA;AACA,iCAAiC,iEAAa;AAC9C;AACA;AACA;AACA,sBAAsB;AACtB,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,8DAAU;AAClC;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,yBAAyB;AAC5F;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,oBAAoB,KAAK;AACzB;AACA,oBAAoB,KAAK;AACzB;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,yBAAyB;AAC5F;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA,oBAAoB,SAAS;AAC7B;AACA,oBAAoB,iBAAiB;AACrC;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,gCAAgC,iBAAiB;AACjD;AACA;AACA,UAAU,KAAK;AACf;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,UAAU,OAAO;AACjB;AACA;AACA,UAAU,QAAQ,QAAQ;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA,eAAe;AACf,kCAAkC,cAAc;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,mCAAmC,GAAG;AACtC,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,KAAK;AACnB;AACA,eAAe;AACf,kCAAkC,cAAc;AAChD;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,mCAAmC,GAAG;AACtC;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,sBAAsB;AACpC;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,OAAO;AACrB;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,gEAAW;AACjB;AACA;AACA;AACA,aAAa,uDAAW;AACxB;AACA;AACA;AACA;AACA,+BAA+B,iBAAiB,IAAI,mBAAmB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,aAAa,+CAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA,oBAAoB,EAAE,UAAU,EAAE,eAAe,EAAE,gBAAgB,EAAE,UAAU,GAAG;AAClF;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,mDAAO;AACpB;AACA;AACA;AACA,aAAa,qDAAS;AACtB;AACA;AACA;AACA,aAAa,kDAAM;AACnB;AACA;AACA;AACA,aAAa,uDAAW;AACxB;AACA;AACA;AACA,aAAa,mDAAO;AACpB;AACA;AACA;AACA,aAAa,oDAAQ;AACrB;AACA;AACA;AACA,aAAa,mDAAO;AACpB;AACA;AACA;AACA,aAAa,mDAAO;AACpB;AACA;AACA;AACA,aAAa,iDAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB;AACA;AACA;AACA,eAAe;AACf;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA,WAAW,6CAAM;AACjB,WAAW,6CAAM;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,6CAAM;AAC1D,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,MAAM;AACpB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,sBAAsB,6CAAM;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,MAAM;AACpB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB;AACA,eAAe;AACf;AACA;AACA,aAAa,6CAAM;AACnB;AACA;AACA;AACA;AACA;AACA,cAAc,MAAM;AACpB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB;AACA,eAAe;AACf;AACA;AACA,aAAa,6CAAM;AACnB;AACA;AACA;AACA,aAAa,sDAAU;AACvB;AACA;AACA;AACA,iEAAe,SAAS,EAAC;;;;;;;;;;;;;;;;ACx8BzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,IAAI;AACJ,CAAC,EAAC;;;;;;;;;;;ACzIF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,mBAAO,CAAC,sCAA2B;AACzD,gBAAgB,mBAAO,CAAC,kCAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,QAAQ;AAClB;AACA;AACA,UAAU,QAAQ;AAClB;AACA;AACA;AACA;AACA,UAAU,KAAK;AACf;AACA;AACA;AACA,UAAU,QAAQ;AAClB;AACA;AACA;AACA;AACA;AACA,UAAU,QAAQ;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,MAAM;AAChB;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,cAAc,cAAc;AAC5B;AACA;AACA;AACA,UAAU,MAAM;AAChB;AACA;AACA,UAAU,MAAM;AAChB;AACA,UAAU,MAAM;AAChB;AACA;AACA;AACA;AACA;AACA,UAAU,IAAI;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,OAAO;AACjB,kBAAkB,aAAa;AAC/B;AACA,0BAA0B,SAAS;AACnC;AACA;AACA,UAAU,OAAO;AACjB,kBAAkB,kBAAkB;AACpC;AACA,0BAA0B,gBAAgB;AAC1C;AACA;AACA;AACA,UAAU,OAAO;AACjB,kBAAkB,qBAAqB;AACvC;AACA,0BAA0B,iBAAiB;AAC3C;AACA;AACA,yBAAyB,WAAW;AACpC;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,sBAAsB,QAAQ,oCAAoC,GAAG;AACrE;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,QAAQ,oCAAoC,GAAG;AACxE;AACA;AACA,OAAO;AACP;AACA,UAAU,OAAO;AACjB,8BAA8B,aAAa;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,OAAO;AACjB;AACA;AACA;AACA,UAAU,OAAO;AACjB,8BAA8B,aAAa;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,eAAe;AAC7B,0BAA0B,QAAQ;AAClC,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,IAAI;AAClB;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,eAAe,SAAS;AACxB,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,QAAQ;AACtB;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,kCAAkC;AAC/D,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,IAAI;AAClB;AACA;AACA,cAAc,SAAS;AACvB;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,IAAI;AAClB;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,IAAI;AAClB;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,WAAW;AAC3C,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,IAAI;AAClB;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,IAAI;AAClB;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,IAAI;AAClB;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,cAAc,QAAQ;AACtB;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACp5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,mBAAO,CAAC,kCAAuB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,IAAI,OAAO;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,aAAa;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,iEAAiE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA,UAAU,QAAQ;AAClB;AACA;AACA;AACA,UAAU,QAAQ;AAClB;AACA;AACA;AACA,UAAU,QAAQ;AAClB;AACA;AACA;AACA;AACA,UAAU,KAAK;AACf;AACA;AACA;AACA;AACA;AACA,UAAU,QAAQ;AAClB;AACA;AACA;AACA;AACA;AACA,UAAU,QAAQ;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,KAAK;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,MAAM;AAChB;AACA;AACA;AACA;AACA;AACA,UAAU,MAAM;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,MAAM;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,KAAK;AACf;AACA;AACA;AACA;AACA,UAAU,KAAK;AACf;AACA;AACA;AACA;AACA;AACA,UAAU,QAAQ;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,mCAAmC,UAAU,IAAI,QAAQ,+BAA+B,2BAA2B;AACnH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,sBAAsB,MAAM;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,UAAU,IAAI,QAAQ;AACvD;AACA,6CAA6C,8BAA8B;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,wBAAwB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,eAAe;AAC7B;AACA;AACA;AACA;AACA;AACA,oCAAoC,YAAY;AAChD;AACA;AACA;AACA;AACA;AACA,qCAAqC,6BAA6B;AACloBAAoB;AACpB;AACA;AACA,gBAAgB;AAChB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,OAAO;AAC5D;AACA;AACA;AACA,mCAAmC,iCAAiC,GAAG,OAAO;AAC9E;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,SAAS;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA,uCAAuC,SAAS;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC,qCAAqC;AACrC;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,OAAO;AACP;AACA;AACA,aAAa,MAAM;AACnB;AACA,2BAA2B,QAAQ;AACnC,uBAAuB,MAAM;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA,mCAAmC,GAAG,OAAO;AAC7C;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA,sCAAsC,GAAG,OAAO;AAChD;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,QAAQ,GAAG,OAAO;AAC5D,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,QAAQ,GAAG,OAAO;AAC/D,4BAA4B;AAC5B;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,sBAAsB;AACpC;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA,uBAAuB,aAAa,GAAG,aAAa;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA,cAAc,KAAK;AACnB;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,UAAU;AACV;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,mBAAmB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA,+BAA+B,MAAM,kBAAkB,MAAM;AAC7D;AACA;AACA;AACA;AACA,iCAAiC,YAAY,kBAAkB,YAAY;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA,qCAAqC,MAAM;AAC3C;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,cAAc;AAClD;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,MAAM,GAAG,IAAI;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,MAAM,GAAG,QAAQ;AAC1D,mBAAmB;AACnB;AACA;AACA,gBAAgB;AAChB;AACA,UAAU;AACV,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACv3EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,yBAAyB,MAAM;AAC/B;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;;;;;;;;;;ACzFA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA,sBAAsB,mBAAO,CAAC,sCAA2B;AACzD,qBAAqB,mBAAO,CAAC,qCAA0B;AACvD;AACA,oBAAoB,mBAAO,CAAC,mCAAyB;AACrD;AACA,uBAAuB,mBAAO,CAAC,6BAAkB;AACjD;AACA,gBAAgB,mBAAO,CAAC,+BAAqB;AAC7C,iBAAiB,mBAAO,CAAC,iCAAsB;AAC/C,yBAAyB,mBAAO,CAAC,yCAA8B;AAC/D,uBAAuB,mBAAO,CAAC,uCAA4B;AAC3D,yBAAyB,mBAAO,CAAC,yCAA8B;AAC/D,sBAAsB,mBAAO,CAAC,sCAA2B;AACzD;AACA,kBAAkB,mBAAO,CAAC,kCAAuB;AACjD;AACA,6BAA6B,mBAAO,CAAC,qDAA0C;AAC/E,sBAAsB,mBAAO,CAAC,8CAAmC;AACjE,6BAA6B,mBAAO,CAAC,2CAAgC;AACrE;AACA,4BAA4B,mBAAO,CAAC,kDAAuC;AAC3E;AACA;AACA;AACA;AACA;AACA,kBAAkB,mBAAO,CAAC,kCAAuB;AACjD,sBAAsB,mBAAO,CAAC,sCAA2B;AACzD;AACA,kBAAkB,mBAAO,CAAC,kCAAuB;AACjD;AACA,qBAAqB,mBAAO,CAAC,kCAAuB;AACpD;AACA;AACA;AACA;AACA,iBAAiB,MAAM;AACvB,kBAAkB,mBAAmB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,SAAS,mBAAmB;AACtC,yCAAyC,MAAM;AAC/C;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,OAAO;AACjB;AACA;AACA,UAAU,OAAO;AACjB;AACA;AACA,UAAU,OAAO;AACjB;AACA;AACA,UAAU,OAAO;AACjB;AACA;AACA,UAAU,OAAO;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B,qBAAqB;AACrB;AACA;AACA;AACA,0BAA0B,EAAE,UAAU,EAAE,eAAe,EAAE,gBAAgB,EAAE,UAAU,GAAG;AACxF;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA,oBAAoB,QAAQ;AAC5B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA,oBAAoB,QAAQ;AAC5B;AACA,oBAAoB,QAAQ;AAC5B;AACA,oBAAoB,QAAQ;AAC5B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,QAAQ,EAAE,WAAW,EAAE,WAAW,EAAE,QAAQ;AACjE,0BAA0B,QAAQ;AAClC,0BAA0B,WAAW;AACrC,0BAA0B,WAAW;AACrC,0BAA0B,QAAQ;AAClC,UAAU;AACV;AACA;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B,wBAAwB,SAAS;AACjC,qBAAqB;AACrB;AACA;AACA,yBAAyB,4BAA4B;AACrD,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,cAAc;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,qDAAqD,KAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,OAAO;AACjB;AACA,uDAAuD;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA,gBAAgB;AAChB,uBAAuB,SAAS;AAChC;AACA,qBAAqB,QAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,sBAAsB;AACpC;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA,cAAc,MAAM;AACpB;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA,YAAY,iBAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,IAAI;AAClB;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA,eAAe;AACf;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,IAAI;AAClB;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA,eAAe;AACf;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,yBAAyB,MAAM,OAAO,GAAG;AACzC,cAAc,UAAU;AACxB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,GAAG;AAC7B;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,wBAAwB,EAAE,GAAG;AAC7B;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,IAAI;AAClB;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,IAAI;AAClB;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,WAAW;AACzB;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,cAAc;AAC5B;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,IAAI;AAClB;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,OAAO;AACrB;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,MAAM;AACpB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACz8BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,mBAAO,CAAC,iDAAsC;AACjD,GAAG,mBAAO,CAAC,mDAAwC;AACnD,GAAG,mBAAO,CAAC,iDAAsC;AACjD,GAAG,mBAAO,CAAC,+CAAoC;AAC/C,GAAG,mBAAO,CAAC,mDAAwC;AACnD,GAAG,mBAAO,CAAC,kDAAuC;AAClD,GAAG,mBAAO,CAAC,+CAAoC;AAC/C,GAAG,mBAAO,CAAC,+CAAoC;AAC/C,GAAG,mBAAO,CAAC,gDAAqC;AAChD,GAAG,mBAAO,CAAC,+CAAoC;AAC/C,GAAG,mBAAO,CAAC,gDAAqC;AAChD,GAAG,mBAAO,CAAC,+CAAoC;AAC/C,GAAG,mBAAO,CAAC,kDAAuC;AAClD,GAAG,mBAAO,CAAC,oDAAyC;AACpD,GAAG,mBAAO,CAAC,sDAA2C;AACtD,GAAG,mBAAO,CAAC,kDAAuC;AAClD,GAAG,mBAAO,CAAC,oDAAyC;AACpD,GAAG,mBAAO,CAAC,+CAAoC;AAC/C,GAAG,mBAAO,CAAC,kDAAuC;AAClD,GAAG,mBAAO,CAAC,sDAA2C;AACtD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,YAAY,IAAI,WAAW,eAAe,YAAY;AACnH;AACA;AACA;AACA;AACA;;;;;;;;;;;AC7FA,kBAAkB,mBAAO,CAAC,kCAAuB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,UAAU,IAAI,QAAQ,oCAAoC,EAAE;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,qBAAqB,UAAU,IAAI,QAAQ;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,UAAU,GAAG,UAAU;AACvC;AACA;AACA;AACA;AACA;AACA,gBAAgB,UAAU;AAC1B;AACA;;;;;;;;;;;AC7GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,kCAAuB;AAC/C;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,MAAM;AACpB,kEAAkE,WAAW;AAC7E;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,gBAAgB;AAChB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,aAAa,GAAG,SAAS;AACxD,iCAAiC;AACjC,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,MAAM;AACpB,kEAAkE,WAAW;AAC7E;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACnPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,0GAA0G,4BAA4B;AACtI;AACA;AACA;AACA,4GAA4G,4BAA4B;AACxI;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,iGAAiG,4BAA4B;AAC7H;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe;AACf;AACA;AACA,0BAA0B,QAAQ,UAAU;AAC5C;AACA;AACA,6BAA6B,2BAA2B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,MAAM;AACzB;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,cAAc;AAC7C,mBAAmB;AACnB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,UAAU;AAChC;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,KAAK;AAC7C;AACA,wBAAwB,KAAK,GAAG,KAAK,OAAO,KAAK;AACjD,WAAW;AACX;AACA;AACA,kDAAkD,MAAM;AACxD;AACA;AACA;AACA,4BAA4B,KAAK,GAAG,KAAK,OAAO,KAAK;AACrD,4BAA4B,KAAK,GAAG,KAAK,OAAO,KAAK;AACrD;AACA,WAAW;AACX;AACA;AACA,gCAAgC,MAAM;AACtC;AACA;AACA;AACA,yCAAyC,KAAK,GAAG,KAAK,OAAO,KAAK;AAClE,yCAAyC,KAAK,GAAG,KAAK,OAAO,KAAK;AAClE;AACA,yCAAyC,KAAK,GAAG,KAAK,OAAO,KAAK;AAClE;AACA,WAAW;AACX;AACA,eAAe,cAAc;AAC7B,eAAe,KAAK;AACpB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wCAAwC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,cAAc;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,0BAA0B;AAC1B,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,cAAc;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B,kBAAkB,SAAS;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B,kBAAkB,SAAS;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,cAAc,MAAM;AACpB,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,MAAM;AACpB,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP;AACA;;;;;;;;;;;AChzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,mBAAO,CAAC,gCAAqB;AAC3C,gBAAgB,mBAAO,CAAC,kCAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,UAAU,QAAQ;AAClB;AACA;AACA;AACA,UAAU,QAAQ;AAClB;AACA;AACA,wDAAwD;AACxD,UAAU,QAAQ;AAClB;AACA,sBAAsB,UAAU;AAChC;AACA;AACA,UAAU,QAAQ;AAClB;AACA;AACA;AACA;AACA,UAAU,QAAQ;AAClB;AACA;AACA;AACA;AACA,UAAU,QAAQ;AAClB;AACA;AACA;AACA;AACA,UAAU,MAAM;AAChB;AACA;AACA,UAAU;AACV,UAAU,MAAM;AAChB;AACA;AACA;AACA;AACA,UAAU,MAAM;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD,UAAU,QAAQ;AAClB,eAAe,SAAS,EAAE,UAAU;AACpC;AACA;AACA;AACA;AACA;AACA,mEAAmE;AACnE,UAAU,QAAQ;AAClB;AACA;AACA;AACA;AACA,+DAA+D;AAC/D,UAAU,QAAQ;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,MAAM;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,QAAQ;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,KAAK;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,QAAQ;AAClB;AACA;AACA;AACA;AACA;AACA,UAAU,OAAO;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,oBAAoB,UAAU,wCAAwC,GAAG;AACzE;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,oBAAoB,UAAU,wCAAwC,GAAG;AACzE;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,IAAI;AAClB,6CAA6C,MAAM;AACnD,8BAA8B,OAAO;AACrC,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD,cAAc,QAAQ;AACtB;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,IAAI;AAClB,6CAA6C,MAAM;AACnD,8BAA8B,OAAO;AACrC,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,oBAAoB,UAAU,qCAAqC,GAAG;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,sBAAsB,yBAAyB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,yBAAyB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,IAAI;AAClB,6CAA6C,MAAM;AACnD,8BAA8B,OAAO;AACrC,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD,cAAc,QAAQ;AACtB;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,aAAa;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,mCAAmC,QAAQ;AAC3C;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,yCAAyC,QAAQ;AACjD;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,mCAAmC,QAAQ,GAAG,GAAG;AACjD;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,oCAAoC,QAAQ;AAC5C;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,iDAAiD,QAAQ;AACzD;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,yCAAyC,QAAQ;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,wBAAwB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,mBAAmB,EAAE,WAAW;AAChC;AACA;AACA;AACA;AACA;AACA,4BAA4B,OAAO;AACnC,YAAY,OAAO,UAAU,OAAO;AACpC,sCAAsC,GAAG,IAAI;AAC7C;AACA;AACA;AACA,iDAAiD,iBAAiB;AAClE;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,2BAA2B,+CAA+C;AAC1E;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC77BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,mBAAO,CAAC,iCAAsB;AAC7C,mBAAmB,mBAAO,CAAC,qCAA0B;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,WAAW;AACX;AACA;AACA;AACA;AACA,UAAU,QAAQ;AAClB;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,UAAU,OAAO,IAAI,aAAa,IAAI;AACtC;AACA;AACA,sBAAsB,QAAQ;AAC9B;AACA,sBAAsB,YAAY;AAClC;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qBAAqB,0BAA0B;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,UAAU;AAClD;AACA,gBAAgB,qBAAqB,0BAA0B;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS,+BAA+B;AAChE;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,+BAA+B;AAC/C;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,4BAA4B,SAAS;AACrC,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,UAAU,OAAO;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,aAAa,GAAG;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,UAAU;AACxB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,UAAU;AACxB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACrqBA;AACA;AACA,gBAAgB,mBAAO,CAAC,kCAAuB;AAC/C,gBAAgB,mBAAO,CAAC,0BAAe;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,6XAA6X,QAAQ;AACrY;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,IAAI;AAClB;AACA,gBAAgB,oBAAoB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,cAAc,gBAAgB;AAC9B,kBAAkB,SAAS;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,gBAAgB;AAC9B,kBAAkB,SAAS;AAC3B,eAAe;AACf,oBAAoB,QAAQ;AAC5B,sBAAsB,QAAQ;AAC9B,sBAAsB,QAAQ;AAC9B,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,gBAAgB;AAC9B,kBAAkB,SAAS;AAC3B;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,IAAI;AAClB;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,kBAAkB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,cAAc,sBAAsB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,kBAAkB;AAChC,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,kBAAkB;AAChC;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,kBAAkB;AAChC;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,kBAAkB;AAChC;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB,kBAAkB;AAClB;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC3eA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,mBAAO,CAAC,qCAA0B;AACrC,GAAG,mBAAO,CAAC,6CAAkC;AAC7C,GAAG,mBAAO,CAAC,0CAA+B;AAC1C,GAAG,mBAAO,CAAC,8CAAmC;AAC9C,GAAG,mBAAO,CAAC,6CAAkC;AAC7C,GAAG,mBAAO,CAAC,8CAAmC;AAC9C,GAAG,mBAAO,CAAC,6CAAkC;AAC7C,GAAG,mBAAO,CAAC,2CAAiC;AAC5C,GAAG,mBAAO,CAAC,yDAA8C;AACzD,GAAG,mBAAO,CAAC,sDAA2C;AACtD,GAAG,mBAAO,CAAC,8CAAmC;AAC9C,GAAG,mBAAO,CAAC,+CAAqC;AAChD,GAAG,mBAAO,CAAC,gDAAqC;AAChD,GAAG,mBAAO,CAAC,6CAAkC;AAC7C,GAAG,mBAAO,CAAC,+CAAqC;AAChD,GAAG,mBAAO,CAAC,yCAA8B;AACzC,GAAG,mBAAO,CAAC,0CAA+B;AAC1C,GAAG,mBAAO,CAAC,0CAA+B;AAC1C,GAAG,mBAAO,CAAC,0CAAgC;AAC3C,GAAG,mBAAO,CAAC,yCAA8B;AACzC,GAAG,mBAAO,CAAC,yCAA8B;AACzC,GAAG,mBAAO,CAAC,yCAA8B;AACzC,GAAG,mBAAO,CAAC,0CAA+B;AAC1C,GAAG,mBAAO,CAAC,wCAA6B;AACxC,GAAG,mBAAO,CAAC,wCAA8B;AACzC;AACA;AACA;AACA;AACA,GAAG,mBAAO,CAAC,0CAA+B;AAC1C,GAAG,mBAAO,CAAC,2CAAgC;AAC3C,GAAG,mBAAO,CAAC,mDAAwC;AACnD;AACA;AACA;AACA;AACA,GAAG,mBAAO,CAAC,2CAAgC;AAC3C,GAAG,mBAAO,CAAC,kDAAwC;AACnD,GAAG,mBAAO,CAAC,kDAAuC;AAClD,GAAG,mBAAO,CAAC,iDAAsC;AACjD,GAAG,mBAAO,CAAC,gDAAqC;AAChD;AACA,GAAG,mBAAO,CAAC,+CAAoC;AAC/C,GAAG,mBAAO,CAAC,+CAAoC;AAC/C;AACA;AACA;AACA;AACA,GAAG,mBAAO,CAAC,yCAA8B;AACzC,GAAG,mBAAO,CAAC,+CAAoC;AAC/C,GAAG,mBAAO,CAAC,iDAAsC;AACjD,GAAG,mBAAO,CAAC,gDAAqC;AAChD,GAAG,mBAAO,CAAC,+CAAoC;AAC/C,GAAG,mBAAO,CAAC,mDAAwC;AACnD,GAAG,mBAAO,CAAC,+CAAoC;AAC/C,GAAG,mBAAO,CAAC,iDAAsC;AACjD,GAAG,mBAAO,CAAC,uDAA4C;AACvD,GAAG,mBAAO,CAAC,qDAA0C;AACrD,GAAG,mBAAO,CAAC,gDAAqC;AAChD,GAAG,mBAAO,CAAC,6CAAkC;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,kDAAkD,WAAW;AAC7D,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,IAAI;AAC5C;AACA;AACA;;;;;;;;;;;AC9IA,oBAAoB,mBAAO,CAAC,mCAAyB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,QAAQ;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACbsBAAsB,OAAO,cAAc,GAAG;AAC9C,uBAAuB,OAAO;AAC9B,uBAAuB,GAAG;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,OAAO,QAAQ,GAAG;AACxC,uBAAuB,OAAO;AAC9B,uBAAuB,GAAG;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,MAAM,GAAG,IAAI;AAC1C,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,qBAAqB,UAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,eAAe,GAAG,QAAQ;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,wBAAwB,QAAQ;AAChC;AACA;AACA;AACA,kBAAkB;AAClB,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,eAAe,GAAG,QAAQ;AACjD;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,wBAAwB,QAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,aAAa;AACbqBAAqB;AACrB;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACjuCA,oBAAoB,mBAAO,CAAC,mCAAyB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B,UAAU;AACV;AACA;AACA;AACA;AACA,qBAAqB,MAAM;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,OAAO,cAAc,GAAG;AACpD,6BAA6B,OAAO;AACpC,6BAA6B,GAAG;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,OAAO,QAAQ,GAAG;AAC9C,6BAA6B,OAAO;AACpC,6BAA6B,GAAG;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,MAAM,GAAG,IAAI;AAChD,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,UAAU;AACV,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,QAAQ;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA,cAAc,UAAU;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,IAAI;AAClB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACryBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,8CAAmC;AAC3D;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA;AACA,YAAY,IAAI;AAChB;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA,YAAY,IAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,wCAAwC;AACnD,WAAW,4CAA4C;AACvD,WAAW,2CAA2C;AACtD,WAAW,2CAA2C;AACtD,WAAW,yCAAyC;AACpD,WAAW,2CAA2C;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;;;;;;;;;;ACxJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,8CAAmC;AAC3D;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA;AACA,YAAY,IAAI;AAChB;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA,YAAY,IAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACjHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,8CAAmC;AAC3D;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,OAAO,GAAG,SAAS;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,OAAO,MAAM,GAAG;AAChB;AACA;AACA,YAAY,IAAI;AAChB;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA,YAAY,IAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,UAAU;AACxB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,SAAS;AACvB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,gBAAgB;AAC/C;AACA;AACA,uBAAuB,sBAAsB,GAAG,aAAa;AAC7D;AACA;AACA;AACA;AACA,kCAAkC,UAAU,IAAI;AAChD;AACA,4BAA4B,gBAAgB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,OAAO;AAChC;AACA;AACA,4BAA4B,gBAAgB;AAC5C;AACA;AACA;AACA;AACA;AACA,gCAAgC,WAAW,IAAI;AAC/C;AACA,4BAA4B,gBAAgB;AAC5C;AACA;AACA;AACA;AACA;AACA,mCAAmC,UAAU,IAAI;AACjD;AACA,4BAA4B,gBAAgB;AAC5C;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;;;;;;;;;;AC3UA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,8CAAmC;AAC3D;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA;AACA,YAAY,IAAI;AAChB;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA,YAAY,IAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,QAAQ;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;;;;;;;;;;AC7HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,mBAAO,CAAC,8CAAmC;AACzD;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA;AACA,YAAY,IAAI;AAChB;AACA;AACA;AACA,0BAA0B,0BAA0B,GAAG,6BAA6B;AACpF;AACA,IAAI;AACJ,OAAO,MAAM,GAAG;AAChB;AACA,YAAY,IAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM;AACb;AACA;AACA;AACA;AACA,OAAO,SAAS;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,UAAU;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,WAAW,IAAI,QAAQ,mCAAmC,yBAAyB;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,WAAW,IAAI,QAAQ,oCAAoC,yBAAyB;AAChH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,aAAa;AAC3B,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,WAAW,EAAE;AAC9C;AACA;AACA,mBAAmB,SAAS,GAAG,8CAA8C;AAC7E,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,4BAA4B,WAAW,IAAI,QAAQ,8BAA8B,yBAAyB;AAC1G;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,cAAc;AAC7B;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA,4BAA4B,WAAW,IAAI,QAAQ,8BAA8B,yBAAyB;AAC1G;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,GAAG;AACjB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,iBAAiB,GAAG,oBAAoB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB;AACA;AACA,eAAe;AACf;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC3fA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,mBAAO,CAAC,qCAA0B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACfeAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,+BAA+B,GAAG,gBAAgB;AAC5E;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,iBAAiB,IAAI,WAAW;AACzD;AACA;AACA;AACA;;;;;;;;;;;ACnWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,8CAAmC;AAC3D;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA;AACA,YAAY,IAAI;AAChB;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA,YAAY,IAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE,OAAO,EAAE,OAAO,EAAE;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,aAAa;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,GAAG,KAAK,EAAE;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,GAAG,KAAK,EAAE;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,GAAG,KAAK,EAAE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,EAAE;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,EAAE;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,EAAE;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,EAAE;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,WAAW,EAAE,OAAO,EAAE,OAAO,EAAE;;;;;;;;;;;AC9ZnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAO,CAAC,8BAAmB;AACnD;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA;AACA,YAAY,IAAI;AAChB;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA,YAAY,IAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE,OAAO,EAAE,OAAO,GAAG,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY,EAAE,WAAW;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,MAAM;AACpB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,WAAW,EAAE,OAAO,EAAE,OAAO,GAAG,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE;;;;;;;;;;;AC1N1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,8CAAmC;AAC3D;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA;AACA,YAAY,IAAI;AAChB;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA,YAAY,IAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,aAAa;AAC3B,eAAe;AACf;AACA;AACA;AACA,uCAAuC,wBAAwB,6BAA6B,IAAI,QAAQ,IAAI,QAAQ,IAAI,QAAQ,IAAI,iCAAiC,GAAG;AACxK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACvIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,8CAAmC;AAC3D;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA;AACA,YAAY,IAAI;AAChB;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA,YAAY,IAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB,oBAAoB,QAAQ;AAC5B;AACA;AACA,cAAc,KAAK;AACnB,eAAe,OAAO,gBAAgB,QAAQ;AAC9C;AACA;AACA,0BAA0B,+BAA+B,GAAG,gBAAgB;AAC5E;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB,oBAAoB,QAAQ;AAC5B;AACA,8DAA8D;AAC9D,cAAc,KAAK;AACnB;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACrLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,8CAAmC;AAC3D;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA;AACA,YAAY,IAAI;AAChB;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA,YAAY,IAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,QAAQ;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC7RA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,8CAAmC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA;AACA,YAAY,IAAI;AAChB;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA,YAAY,IAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,aAAa;AAC3B,eAAe;AACf;AACA;AACA;AACA;AACA;;;;;;;;;;;AC/IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,8CAAmC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA;AACA,YAAY,IAAI;AAChB;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA,YAAY,IAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,8CAAmC;AAC3D;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,IAAI;AACJ,OAAO,MAAM,GAAG;AAChB;AACA;AACA,YAAY,IAAI;AAChB;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,IAAI;AACJ,OAAO,MAAM,GAAG;AAChB;AACA,YAAY,IAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA,UAAU,6BAA6B;AACvC,cAAc,QAAQ;AACtB,gBAAgB,QAAQ;AACxB,eAAe,QAAQ;AACvB,wBAAwB,KAAK;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,aAAa;AAC3B,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,UAAU;AACtC,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;;;;;;;;;;AC5QA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,8CAAmC;AAC3D;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA;AACA,YAAY,IAAI;AAChB;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA,YAAY,IAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,aAAa;AAC3B,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,iBAAiB;AAC1D;AACA;AACA;AACA;;;;;;;;;;;ACzMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,8CAAmC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA;AACA,YAAY,IAAI;AAChB;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA,YAAY,IAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,8BAA8B;AACzC;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,WAAW,8BAA8B;AACzC;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,aAAa;AAC3B,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,EAAE;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,EAAE;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,gBAAgB,QAAQ,EAAE,QAAQ,EAAE,QAAQ;AAC5C;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,MAAM;AACpC;AACA,aAAa;AACb,WAAW;AACX,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,aAAa,EAAE,aAAa;AACjD;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,qBAAqB,aAAa,EAAE,aAAa;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;;;;;;;;;;AC7YA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,8CAAmC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA;AACA,YAAY,IAAI;AAChB;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA,YAAY,IAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,KAAK;AACrD;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,aAAa;AAC3B,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,GAAG;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;;;;;;;;;;;AC3MA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,8CAAmC;AAC3D;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA;AACA,YAAY,IAAI;AAChB;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA,YAAY,IAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,QAAQ;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA,yBAAyB,IAAI,GAAG;AAChC;AACA;AACA,2CAA2C,EAAE;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,kCAAkC,2BAA2B;AAC7D;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,wBAAwB;AACjiBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA,OAAO;AACP;AACA;AACA,wBAAwB,YAAY;AACpC;AACA;AACA,OAAO;AACP;AACA;AACA,sBAAsB,YAAY;AAClC;AACA;AACA,OAAO;AACP;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA,OAAO;AACP;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA,OAAO;AACP;AACA;AACA,4BAA4B,YAAY;AACxC;AACA;AACA,OAAO;AACP;AACA;AACA,yBAAyB,YAAY;AACrC;AACA;AACA,OAAO;AACP;AACA;AACA,+BAA+B,YAAY;AAC3C;AACA;AACA,OAAO;AACP;AACA;AACA,+BAA+B,YAAY;AAC3C;AACA;AACA,OAAO;AACP;AACA;AACA,0BAA0B,YAAY;AACtC;AACA;AACA,OAAO;AACP;AACA;AACA,wBAAwB,YAAY;AACpC;AACA;AACA,OAAO;AACP;AACA;AACA,wBAAwB,YAAY;AACpC;AACA;AACA,OAAO;AACP;AACA;AACA,6BAA6B,YAAY;AACzC;AACA;AACA,OAAO;AACP,QAAQ,uEAAuE;AAC/E;AACA;AACA,gCAAgC,eAAe;AAC/C;AACA;AACA,OAAO;AACP;AACA;AACA,uCAAuC,YAAY;AACnD;AACA;AACA,OAAO;AACP;AACA;AACA,yCAAyC,YAAY;AACrD;AACA;AACA,OAAO;AACP;AACA;AACA,6BAA6B,YAAY;AACzC;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAecAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,aAAa;AAC3B,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,8BAA8B,IAAI;AAClC,mCAAmC,IAAI;AACvC,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACztBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,mBAAO,CAAC,yDAA8C;AACjF;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA;AACA,YAAY,IAAI;AAChB;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA,YAAY,IAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,aAAa;AAC3B,eAAe;AACf;AACA;AACA;AACA;AACA;;;;;;;;;;;AC1JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mBAAO,CAAC,qDAA0C;AACzE;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA;AACA,YAAY,IAAI;AAChB;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,IAAI;AACJ,OAAO,MAAM,GAAG;AAChB;AACA,YAAY,IAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO,MAAM,GAAG;AAChB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO,QAAQ;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AChIA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,mBAAO,CAAC,wDAA6C;AAClF;AACA;AACA;AACA,OAAO,QAAQ;AACf;AACA;AACA;AACA,OAAO,QAAQ;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,KAAK;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;;;;;;;;;;AC1EA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,mBAAO,CAAC,qCAA0B;AACpD;AACA;AACA;AACA,OAAO,QAAQ;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,KAAK;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;;;;;;;;;;AC5IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,mBAAO,CAAC,sDAA2C;AACtD,GAAG,mBAAO,CAAC,mEAAwD;AACnE,GAAG,mBAAO,CAAC,4DAAiD;AAC5D,GAAG,mBAAO,CAAC,8DAAmD;AAC9D,GAAG,mBAAO,CAAC,uFAA4E;AACvF,GAAG,mBAAO,CAAC,+EAAoE;AAC/E,GAAG,mBAAO,CAAC,mFAAwE;AACnF,GAAG,mBAAO,CAAC,iFAAsE;AACjF,GAAG,mBAAO,CAAC,uEAA4D;AACvE,GAAG,mBAAO,CAAC,0EAA+D;AAC1E,GAAG,mBAAO,CAAC,mEAAwD;AACnE,GAAG,mBAAO,CAAC,iFAAsE;AACjF,GAAG,mBAAO,CAAC,iEAAsD;AACjE,GAAG,mBAAO,CAAC,2DAAgD;AAC3D,GAAG,mBAAO,CAAC,mEAAwD;AACnE,GAAG,mBAAO,CAAC,mEAAwD;AACnE,GAAG,mBAAO,CAAC,0DAA+C;AAC1D,GAAG,mBAAO,CAAC,mEAAwD;AACnE,GAAG,mBAAO,CAAC,+DAAoD;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,IAAI;AACJ;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;;;;;;;;;;;ACtIA,gBAAgB,mBAAO,CAAC,wCAA6B;AACrD;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC,UAAU,KAAK;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,WAAW;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,KAAK;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,sBAAsB,cAAc;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,eAAe;AAC7B;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,+BAA+B,UAAU,IAAI,IAAI;AACjD,mBAAmB;AACnB;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA,cAAc,KAAK;AACnB;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,KAAK;AACnB;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA,QAAQ,IAAI,kBAAkB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,QAAQ,yBAAyB,MAAM;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,eAAe;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,iCAAiC;AAClE,6BAA6B,mBAAmB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E,eAAe;AAC3F;AACA,yCAAyC,YAAY;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,gFAAgF,IAAI;AACpF;AACA,+CAA+C,YAAY;AAC3D;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,OAAO;AACrB;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACheA,yBAAyB,mBAAO,CAAC,gEAAqD;AACtF;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC9FA,yBAAyB,mBAAO,CAAC,gEAAqD;AACtF;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,KAAK;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,QAAQ;AAChC,0BAA0B,WAAW;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACvJA;AACA,qDAAqD;AACrD,yBAAyB,mBAAO,CAAC,gEAAqD;AACtF;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,KAAK;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACtIA,yBAAyB,mBAAO,CAAC,gEAAqD;AACtF;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,KAAK;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,QAAQ;AAChC,0BAA0B,WAAW;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AChKA,yBAAyB,mBAAO,CAAC,gEAAqD;AACtF;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,KAAK;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,QAAQ;AAChC,0BAA0B,WAAW;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACtKA,yBAAyB,mBAAO,CAAC,gEAAqD;AACtF;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,KAAK;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,QAAQ;AAChC,0BAA0B,WAAW;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACvKA,yBAAyB,mBAAO,CAAC,gEAAqD;AACtF;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,KAAK;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,QAAQ;AAChC,0BAA0B,WAAW;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AChKA,yBAAyB,mBAAO,CAAC,gEAAqD;AACtF;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB,mBAAmB,WAAW;AAC9B;AACA;AACA;;;;;;;;;;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,mBAAO,CAAC,gEAAqD;AACtF;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,KAAK;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,QAAQ;AAChC,0BAA0B,WAAW;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AClKA;AACA,qDAAqD;AACrD,yBAAyB,mBAAO,CAAC,gEAAqD;AACtF;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB,mBAAmB,WAAW;AAC9B;AACA;AACA;;;;;;;;;;;ACjEA,yBAAyB,mBAAO,CAAC,gEAAqD;AACtF;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,KAAK;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,QAAQ;AACjC,2BAA2B,WAAW;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACrMA,yBAAyB,mBAAO,CAAC,gEAAqD;AACtF;AACA,oBAAoB,mBAAO,CAAC,gDAAqC;AACjE;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC3IA,yBAAyB,mBAAO,CAAC,gEAAqD;AACtF;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,kBAAkB;AAChC;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B,sBAAsB,WAAW;AACjC;AACA,UAAU;AACV;AACA;AACA;AACA,uBAAuB,QAAQ,GAAG,KAAK;AACvC,yBAAyB,WAAW,gBAAgB,QAAQ;AAC5D;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,oBAAoB,QAAQ,GAAG,sBAAsB;AACrD,oBAAoB,QAAQ;AAC5B,sBAAsB,WAAW;AACjC;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,kBAAkB;AAChC;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,IAAI;AAClB;AACA,gBAAgB,oBAAoB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,gBAAgB;AAC9B,kBAAkB,SAAS;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,gBAAgB;AAC9B,kBAAkB,SAAS;AAC3B,eAAe;AACf,oBAAoB,QAAQ;AAC5B,sBAAsB,QAAQ;AAC9B,sBAAsB,QAAQ;AAC9B,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,gBAAgB;AAC9B,kBAAkB,SAAS;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,kBAAkB;AAChC,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,IAAI;AAClB;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,kBAAkB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,sBAAsB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACtXA,yBAAyB,mBAAO,CAAC,gEAAqD;AACtF;AACA,oBAAoB,mBAAO,CAAC,wDAA6C;AACzE;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,KAAK;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB;AACA;AACA;AACA,gBAAgB;AAChB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,+BAA+B;AAC/B;AACA;AACA;AACA,sBAAsB;AACtB;AACA,gBAAgB;AAChB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA,mBAAmB,KAAK;AACxB,sBAAsB,WAAW;AACjC,2BAA2B,KAAK;AAChC;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,oBAAoB,KAAK;AACzB,sBAAsB,WAAW;AACjC;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACzPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,mBAAO,CAAC,gEAAqD;AACtF;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACzGA;AACA,qDAAqD;AACrD,yBAAyB,mBAAO,CAAC,gEAAqD;AACtF;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B,sBAAsB,WAAW;AACjC,UAAU;AACV;AACA;AACA;;;;;;;;;;;ACjFA,yBAAyB,mBAAO,CAAC,gEAAqD;AACtF;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,QAAQ;AAC9B;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC3EA;AACA,qDAAqD;AACrD,yBAAyB,mBAAO,CAAC,gEAAqD;AACtF;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA,sBAAsB,QAAQ;AAC9B;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,KAAK,GAAG,SAAS;AAC3C,4BAA4B,WAAW,IAAI,aAAa,IAAI,YAAY;AACxE;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA,uBAAuB,KAAK;AAC5B,yBAAyB,WAAW,IAAI,aAAa;AACrD;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA,2EAA2E,QAAQ,6CAA6C,cAAc;AAC9I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AChMA,yBAAyB,mBAAO,CAAC,gEAAqD;AACtF;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA,sBAAsB,QAAQ;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,oBAAoB,GAAG,sBAAsB;AAC3E,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,8BAA8B,GAAG,6BAA6B;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,SAAS,EAAE,KAAK;AAC5E;AACA;AACA;;;;;;;;;;;ACrKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,sBAAsB,UAAU;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,KAAK;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E,cAAc;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,UAAU;AACnC;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA,+BAA+B,QAAQ;AACvC;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,iBAAiB,gBAAgB,mBAAmB;AACpD;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC/KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,mBAAO,CAAC,sCAA2B;AAChD,kBAAkB,mBAAO,CAAC,yBAAc;AACxC,IAAI,OAAO,IAAI,SAAS;AACxB;AACA,iDAAiD,SAAS;AAC1D,WAAW,SAAS,0BAA0B,OAAO;AACrD;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,mBAAO,CAAC,gDAAqC;AAC9D;AACA;AACA;AACA;AACA;AACA,iBAAiB,MAAM;AACvB;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,kBAAkB;AAChC;AACA,cAAc,WAAW;AACzB;AACA,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,mBAAO,CAAC,sCAA2B;AAChD;AACA;AACA;AACA;AACA,eAAe,mBAAO,CAAC,0CAA+B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,mBAAO,CAAC,6CAAoC;AAC7D,eAAe,mBAAO,CAAC,0CAA+B;AACtD,gBAAgB,mBAAO,CAAC,2CAAgC;AACxD;AACA;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,mBAAO,CAAC,2BAAgB;AAC1C;AACA,qBAAqB,mBAAO,CAAC,6CAAmC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,mBAAO,CAAC,yBAAc;AACrD;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;;;;;;;;;;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,mBAAO,CAAC,sCAA2B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,mBAAO,CAAC,8CAAmC;AAC9C,GAAG,mBAAO,CAAC,6CAAmC;AAC9C,GAAG,mBAAO,CAAC,6CAAkC;AAC7C;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,mBAAO,CAAC,sCAA2B;AAChD,gBAAgB,mBAAO,CAAC,yBAAc;AACtC,IAAI,OAAO,IAAI,SAAS;AACxB;AACA,qDAAqD,SAAS;AAC9D,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,mBAAO,CAAC,sCAA2B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,mBAAO,CAAC,sCAA2B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,GAAG,GAAG,yCAAyC;AAChE,mBAAmB,MAAM,IAAI,yCAAyC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,mBAAO,CAAC,+CAAoC;;;;;;;;;;;ACR9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mBAAO,CAAC,6CAAkC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC9BA,qBAAqB,mBAAO,CAAC,8CAAmC;AAChE;AACA;AACA;AACA;AACA,iCAAiC,QAAQ;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC9DA,qBAAqB,mBAAO,CAAC,8CAAmC;AAChE;AACA,qBAAqB,mBAAO,CAAC,sDAA2C;AACxE;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO,QAAQ,GAAG,WAAW;AAC7B;AACA;AACA;AACA;AACA,kBAAkB,OAAO;AACzB;AACA;AACA,yBAAyB,KAAK;AAC9B,0BAA0B,OAAO;AACjC,uBAAuB;AACvB;AACA;AACA;AACA;AACA,yBAAyB,KAAK;AAC9B,uBAAuB;AACvB;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,mCAAmC;AAC1E,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,mCAAmC;AACzE;AACA,OAAO;AACP;AACA;AACA;AACA;;;;;;;;;;;ACtJA,qBAAqB,mBAAO,CAAC,8CAAmC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,QAAQ;AAChC,sBAAsB,QAAQ;AAC9B,6BAA6B,QAAQ;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC/GA,6BAA6B,mBAAO,CAAC,sDAA2C;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B,2BAA2B,QAAQ;AACnC,6CAA6C,QAAQ;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC9EA,6BAA6B,mBAAO,CAAC,sDAA2C;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B,0BAA0B,QAAQ;AAClC,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC9EA,wBAAwB,mBAAO,CAAC,iDAAsC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,QAAQ;AAC7B,0BAA0B,QAAQ;AAClC,0BAA0B,QAAQ;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC3HA,6BAA6B,mBAAO,CAAC,sDAA2C;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B,2BAA2B,QAAQ;AACnC,6CAA6C,QAAQ;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC/EA,6BAA6B,mBAAO,CAAC,sDAA2C;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B,0BAA0B,QAAQ;AAClC,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACxEA,qBAAqB,mBAAO,CAAC,8CAAmC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B,yBAAyB,QAAQ;AACjC,4BAA4B,QAAQ;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;;;;;;;;;;;ACvHA,wBAAwB,mBAAO,CAAC,iDAAsC;AACtE;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA,0CAA0C,QAAQ;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC1DA,qBAAqB,mBAAO,CAAC,8CAAmC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,QAAQ;AAC3C,uBAAuB,QAAQ;AAC/B,0CAA0C,QAAQ;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,mBAAO,CAAC,wCAA6B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,QAAQ;AACrC,wBAAwB,QAAQ;AAChC,8BAA8B,QAAQ;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,eAAe;AAC7B,cAAc,QAAQ;AACtB,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,wEAAwE;AACxE,QAAQ;AACR;AACA;AACA;AACA;AACA,oEAAoE;AACpE,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,qCAA0B;AAClD;AACA;AACA,oBAAoB,QAAQ;AAC5B,gCAAgC,QAAQ;AACxC,uCAAuC,QAAQ;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,eAAe;AAC7B,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,eAAe;AAC7B,cAAc,sBAAsB;AACpC,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,WAAW,wBAAwB;AACnC;AACA;AACA,SAAS,2BAA2B,wBAAwB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA,2BAA2B;AAC3B,UAAU,QAAQ;AAClB;AACA;AACA;AACA,UAAU,QAAQ;AAClB;AACA;AACA;AACA,UAAU,QAAQ;AAClB;AACA;AACA;AACA;AACA,UAAU,QAAQ;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,QAAQ;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,KAAK;AACf;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,KAAK;AACf,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,8BAA8B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,iCAAiC,sBAAsB,IAAI,oBAAoB,SAAS,UAAU,IAAI,QAAQ,4BAA4B,GAAG;AAC7I;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,eAAe;AAC7B,0BAA0B,QAAQ;AAClC,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,SAAS;AACjE;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA,2EAA2E,SAAS;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,WAAW,IAAI,QAAQ;AAC3C;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,QAAQ;AACtB;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,IAAI;AAClB;AACA,cAAc,SAAS;AACvB;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,kBAAkB,MAAM;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,kBAAkB,gBAAgB;AAClC;AACA,cAAc,SAAS;AACvB;AACA;AACA,cAAc,KAAK;AACnB;AACA,qCAAqC;AACrC;AACA,eAAe;AACf;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,kBAAkB,gBAAgB;AAClC;AACA,cAAc,SAAS;AACvB;AACA;AACA,cAAc,KAAK;AACnB;AACA,qCAAqC;AACrC;AACA,8BAA8B;AAC9B;AACA,eAAe;AACf;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY,UAAU,2BAA2B;AAChE;AACA,+CAA+C,cAAc;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,qBAAqB;AACzE;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,KAAK;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,gBAAgB;AAChB;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,gBAAgB;AAChB;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;;;;;;;;;;;AC18BA,qBAAqB,mBAAO,CAAC,8CAAmC;AAChE;AACA;AACA,kBAAkB,KAAK;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,QAAQ;AAChC,mBAAmB,QAAQ;AAC3B,8BAA8B,QAAQ;AACtC;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,eAAe;AAC7B,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACpEA,8BAA8B,mBAAO,CAAC,uDAA4C;AAClF;AACA;AACA;AACA;AACA,8BAA8B,QAAQ;AACtC,+BAA+B,QAAQ;AACvC,kDAAkD,QAAQ;AAC1D;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,eAAe;AAC7B,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACxCA,qBAAqB,mBAAO,CAAC,8CAAmC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC9DA;AACA,8BAA8B,mBAAO,CAAC,uDAA4C;AAClF;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,QAAQ;AACrC,wBAAwB,QAAQ;AAChC,iDAAiD,QAAQ;AACzD;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,eAAe;AAC7B,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC9BA,wBAAwB,mBAAO,CAAC,iDAAsC;AACtE;AACA;AACA,sBAAsB,QAAQ;AAC9B,4BAA4B,QAAQ;AACpC,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,eAAe;AAC7B,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;;;;;;;;;;AC5EA,8BAA8B,mBAAO,CAAC,uDAA4C;AAClF;AACA;AACA;AACA;AACA,4BAA4B,QAAQ;AACpC,6BAA6B,QAAQ;AACrC,gDAAgD,QAAQ;AACxD;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,eAAe;AAC7B,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACxCA,8BAA8B,mBAAO,CAAC,uDAA4C;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,QAAQ;AACnC,sBAAsB,QAAQ;AAC9B,+CAA+C,QAAQ;AACvD;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,eAAe;AAC7B,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AClEA,8BAA8B,mBAAO,CAAC,uDAA4C;AAClF;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,QAAQ;AAClC,qBAAqB,QAAQ;AAC7B,8CAA8C,QAAQ;AACtD;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,eAAe;AAC7B,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC9DA,8BAA8B,mBAAO,CAAC,uDAA4C;AAClF;AACA;AACA;AACA;AACA,0BAA0B,QAAQ;AAClC,wBAAwB,QAAQ;AAChC,8CAA8C,QAAQ;AACtD;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,eAAe;AAC7B,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACxCA,qBAAqB,mBAAO,CAAC,8CAAmC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,QAAQ;AACnC,4BAA4B,QAAQ;AACpC,iCAAiC,QAAQ;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,QAAQ,OAAO,QAAQ;AACxD;AACA;AACA;AACA,sBAAsB,uBAAuB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC1GA,eAAe,mBAAO,CAAC,wCAA6B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,QAAQ;AACf;AACA;AACA,OAAO,QAAQ;AACf;AACA;AACA,OAAO,QAAQ;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACxGA,4BAA4B,mBAAO,CAAC,qDAA0C;AAC9E;AACA;AACA;AACA;AACA,wBAAwB,QAAQ;AAChC,+BAA+B,QAAQ;AACvC,2CAA2C,QAAQ;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACnCA,eAAe,mBAAO,CAAC,wCAA6B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC1CA,4BAA4B,mBAAO,CAAC,qDAA0C;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B,wBAAwB,QAAQ;AAChC,4BAA4B,QAAQ;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACtEA,wBAAwB,mBAAO,CAAC,iDAAsC;AACtE,4BAA4B,mBAAO,CAAC,qDAA0C;AAC9E;AACA,qBAAqB,mBAAO,CAAC,sDAA2C;AACxE,qBAAqB,mBAAO,CAAC,sDAA2C;AACxE;AACA;AACA;AACA;AACA,yBAAyB,QAAQ;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA,mBAAmB,KAAK;AACxB,oBAAoB,OAAO;AAC3B,iBAAiB;AACjB;AACA;AACA;AACA;AACA,mBAAmB,KAAK;AACxB,iBAAiB;AACjB;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA,mBAAmB,KAAK;AACxB,oBAAoB,OAAO;AAC3B,iBAAiB;AACjB;AACA;AACA,eAAe;AACf,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,IAAI;AAClB;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,2BAA2B;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,kBAAkB;AAC1E;AACA;AACA;AACA;AACA,uCAAuC,2BAA2B;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,2BAA2B;AAC9D;AACA;;;;;;;;;;;AC7OA,4BAA4B,mBAAO,CAAC,qDAA0C;AAC9E;AACA;AACA;AACA;AACA;AACA,OAAO,QAAQ;AACf;AACA,OAAO,QAAQ;AACf;AACA,OAAO,QAAQ;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACtCA,4BAA4B,mBAAO,CAAC,qDAA0C;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,QAAQ;AAClC,yBAAyB,QAAQ;AACjC,6CAA6C,QAAQ;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACzCA,4BAA4B,mBAAO,CAAC,qDAA0C;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,QAAQ;AACjC,wBAAwB,QAAQ;AAChC,yCAAyC,QAAQ;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC3EA,yBAAyB,mBAAO,CAAC,kDAAuC;AACxE;AACA;AACA;AACA;AACA,6BAA6B,QAAQ;AACrC,2BAA2B,QAAQ;AACnC,2CAA2C,QAAQ;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACnCA,4BAA4B,mBAAO,CAAC,qDAA0C;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,QAAQ;AACtC,wBAAwB,QAAQ;AAChC,iDAAiD,QAAQ;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACrCA,4BAA4B,mBAAO,CAAC,qDAA0C;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,QAAQ;AACpC,wBAAwB,QAAQ;AAChC,+CAA+C,QAAQ;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACrCA,4BAA4B,mBAAO,CAAC,qDAA0C;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B,yBAAyB,QAAQ;AACjC,0CAA0C,QAAQ;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACrCA,yBAAyB,mBAAO,CAAC,kDAAuC;AACxE;AACA;AACA;AACA;AACA,wBAAwB,QAAQ;AAChC,wBAAwB,QAAQ;AAChC,uCAAuC,QAAQ;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC9BA,qBAAqB,mBAAO,CAAC,8CAAmC;AAChE;AACA;AACA;AACA,OAAO;AACP,OAAO,qBAAqB;AAC5B;AACA;AACA;AACA,OAAO;AACP,OAAO,eAAe;AACtB;AACA;AACA;AACA,OAAO;AACP,OAAO,gBAAgB;AACvB;AACA;AACA,OAAO;AACP,OAAO,gBAAgB;AACvB;AACA;AACA,OAAO;AACP,OAAO,kBAAkB;AACzB;AACA;AACA,OAAO;AACP,OAAO,kBAAkB;AACzB;AACA;AACA,OAAO;AACP,OAAO,eAAe;AACtB;AACA;AACA;AACA;AACA,qBAAqB,QAAQ;AAC7B,sBAAsB,QAAQ;AAC9B,0BAA0B,QAAQ;AAClC;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,eAAe;AAC7B,cAAc,cAAc;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACjFA,qBAAqB,mBAAO,CAAC,8CAAmC;AAChE;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO,QAAQ;AACf;AACA;AACA;AACA,OAAO,QAAQ;AACf;AACA;AACA;AACA,OAAO,QAAQ;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,OAAO,GAAG,aAAa,GAAG,cAAc;AAC/C;AACA;AACA;AACA,UAAU;AACV;AACA,cAAc,QAAQ;AACtB,mBAAmB,QAAQ;AAC3B,iBAAiB;AACjB,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B,sBAAsB,QAAQ;AAC9B,yBAAyB,QAAQ;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,eAAe;AAC7B,cAAc,cAAc;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC5XA,qBAAqB,mBAAO,CAAC,8CAAmC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,QAAQ;AAC7B,0BAA0B,QAAQ;AAClC,0BAA0B,QAAQ;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AChDA,qBAAqB,mBAAO,CAAC,8CAAmC;AAChE;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP,mBAAmB,YAAY;AAC/B;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP,WAAW,YAAY;AACvB;AACA;AACA,8DAA8D;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,OAAO,QAAQ;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACpFA,qBAAqB,mBAAO,CAAC,8CAAmC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,QAAQ;AAC7B,qBAAqB,QAAQ;AAC7B,wCAAwC,QAAQ;AAChD;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,eAAe;AAC7B,cAAc,cAAc;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACjHA,wBAAwB,mBAAO,CAAC,iDAAsC;AACtE,qBAAqB,mBAAO,CAAC,8CAAmC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,QAAQ;AAC9B,wBAAwB,QAAQ;AAChC,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,eAAe;AAC7B,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,MAAM;AACpB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;;;;;;;;;;;ACvEA,qBAAqB,mBAAO,CAAC,8CAAmC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B,wBAAwB,QAAQ;AAChC,yBAAyB,QAAQ;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACpCA,qBAAqB,mBAAO,CAAC,8CAAmC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B,yBAAyB,QAAQ;AACjC,yBAAyB,QAAQ;AACjC;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,eAAe;AAC7B,cAAc,cAAc;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gCAAgC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,GAAG;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP;AACA;;;;;;;;;;;ACxSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAO,CAAC,iDAAsC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,WAAW;AACX;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,UAAU,KAAK;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,sBAAsB,sBAAsB,IAAI,oBAAoB,UAAU,UAAU,IAAI,QAAQ,+BAA+B,GAAG;AACtI;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,mBAAmB;AACnB;AACA,cAAc;AACd,0BAA0B;AAC1B;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,yBAAyB,MAAM;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,IAAI;AAClB;AACA,cAAc,SAAS;AACvB;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,YAAY;AAC1B,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,YAAY;AAC1B,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,kBAAkB,gBAAgB;AAClC;AACA,cAAc,SAAS;AACvB;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,+BAA+B,gBAAgB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,kBAAkB,gBAAgB;AAClC;AACA,cAAc,SAAS;AACvB;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,+BAA+B,gBAAgB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACxcA,qBAAqB,mBAAO,CAAC,8CAAmC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,QAAQ;AAC7B,qBAAqB,QAAQ;AAC7B,wCAAwC,QAAQ;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACpGA,qBAAqB,mBAAO,CAAC,8CAAmC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,QAAQ;AACtC,wBAAwB,QAAQ;AAChC,gDAAgD,QAAQ;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACxEA,qBAAqB,mBAAO,CAAC,8CAAmC;AAChE,wBAAwB,mBAAO,CAAC,iDAAsC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B,gCAAgC,QAAQ;AACxC,wBAAwB,QAAQ;AAChC;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,eAAe;AAC7B,cAAc,cAAc;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACjFA,qBAAqB,mBAAO,CAAC,8CAAmC;AAChE;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP,WAAW,qBAAqB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,MAAM;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,cAAc;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E;AAC5E;AACA,4BAA4B,EAAE;AAC9B;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E;AAC5E;AACA,4BAA4B,EAAE;AAC9B;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,kBAAkB,MAAM;AACxB,gCAAgC,GAAG;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACrNA,eAAe,mBAAO,CAAC,wCAA6B;AACpD;AACA;AACA,0BAA0B,QAAQ;AAClC,gCAAgC,QAAQ;AACxC,yCAAyC,QAAQ;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,eAAe;AAC7B,cAAc,QAAQ;AACtB,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACjDA,UAAU,mBAAO,CAAC,mBAAQ;AAC1B;AACA;AACA,0BAA0B,mBAAO,CAAC,yCAA8B;AAChE;AACA,mBAAmB,mBAAO,CAAC,+BAAoB;AAC/C,sBAAsB,mBAAO,CAAC,4BAAiB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,UAAU;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,QAAQ;AACtB;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,kBAAkB;AAChC,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,kBAAkB;AAChC,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,UAAU;AACxB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,UAAU;AACxB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,WAAW;AACzB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,WAAW;AACzB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,eAAe;AAC7B,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,eAAe;AAC7B,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,YAAY;AAC1B;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,YAAY;AAC1B,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,UAAU;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,EAAE;AAC3C,iBAAiB;AACjB;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;;;;;;;;;;;AC/YA,kBAAkB,mBAAO,CAAC,wBAAa;AACvC;AACA,+BAA+B,mBAAO,CAAC,iEAAsD;AAC7F;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,WAAW;AACxB;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,uBAAuB,WAAW;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,qEAAqE,EAAE;AACvE,+CAA+C,EAAE;AACjD;AACA,qEAAqE,EAAE;AACvE,8CAA8C,EAAE;AAChD;AACA,qEAAqE,EAAE;AACvE,+CAA+C,EAAE;AACjD;AACA,qEAAqE,EAAE;AACvE,+CAA+C,EAAE;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,0BAA0B,QAAQ;AAClC,2BAA2B;AAC3B;AACA;AACA,4BAA4B,IAAI,EAAE,UAAU;AAC5C,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,YAAY,GAAG,IAAI;AACnD;AACA;;;;;;;;;;;ACnLA,sBAAsB,mBAAO,CAAC,4BAAiB;AAC/C,6BAA6B,mBAAO,CAAC,wCAA8B;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,mBAAmB,MAAM;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,sCAAsC,EAAE;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA,uBAAuB,aAAa,GAAG,aAAa;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,cAAc;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,4CAA4C;AAC5C;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,cAAc;AAClE;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA,gCAAgC,MAAM,kBAAkB,MAAM;AAC9D;AACA;AACA;AACA;AACA;AACA,sBAAsB,YAAY,kBAAkB,YAAY;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA,uCAAuC,MAAM;AAC7C;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,cAAc;AACnD;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,WAAW,IAAI,QAAQ;AAC9D,oBAAoB;AACpB,UAAU;AACV,QAAQ;AACR;AACA;AACA;AACA;AACA,0CAA0C,WAAW,IAAI,QAAQ,uCAAuC,0BAA0B;AAClI,uBAAuB;AACvB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACzmBA,uBAAuB,mBAAO,CAAC,qCAA0B;AACzD;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,uDAA8B;AACjD;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC;AACA;;;;;;;;;;;ACbA,oBAAoB,mBAAO,CAAC,gCAAqB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,eAAe,SAAS,QAAQ;AAC5E;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,4CAA4C,eAAe,SAAS,QAAQ;AAC5E,OAAO;AACP;AACA;;;;;;;;;;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mBAAO,CAAC,kCAAuB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,+BAA+B,eAAe;AAC9C,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,UAAU,IAAI,WAAW;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,WAAW;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,OAAO;AAC9E;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,OAAO;AAC7C,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACtGA,oBAAoB,mBAAO,CAAC,gCAAqB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA,WAAW,QAAQ;AACnB;AACA,WAAW,MAAM;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,QAAQ;AAC1B;AACA,uBAAuB,KAAK;AAC5B;AACA,kBAAkB,OAAO;AACzB,mBAAmB,KAAK;AACxB,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,0BAA0B,iBAAiB;AAC3C;AACA;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,cAAc,cAAc;AAC5B,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,0BAA0B,iBAAiB;AAC3C;AACA;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,QAAQ,sBAAsB;AAClF;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,0BAA0B,iBAAiB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,aAAa;AACb,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,cAAc;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,cAAc;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA,qBAAqB,QAAQ;AAC7B,yBAAyB,QAAQ;AACjC,wBAAwB,QAAQ;AAChC,yBAAyB,MAAM;AAC/B,uBAAuB,MAAM;AAC7B,qBAAqB,SAAS;AAC9B,qBAAqB,SAAS;AAC9B,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,0BAA0B,iBAAiB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,UAAU;AACV,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,cAAc,uBAAuB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,gBAAgB;AAChB;AACA;AACA;AACA,aAAa;AACb,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb,cAAc;AACd;AACA;AACA;AACA,gBAAgB;AAChB;AACA,OAAO;AACP;AACA;;;;;;;;;;;ACrjBA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,sBAAW;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,cAAc;AAC5B,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACpEA,qBAAqB,mBAAO,CAAC,iCAAsB;AACnD,wCAAwC,mBAAO,CAAC,6DAAkD;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,UAAU;AACV,OAAO;AACP;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU,QAAQ,QAAQ;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,6CAA6C,EAAE;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,aAAa,MAAM,OAAO,GAAG;AAC7B,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,mBAAmB;AACnB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,sBAAsB,MAAM;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA,kDAAkD,QAAQ;AAC1D,aAAa;AACb;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA,kDAAkD,QAAQ;AAC1D,aAAa;AACb;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,cAAc,KAAK;AACnB,cAAc,KAAK;AACnB,eAAe;AACf;AACA;AACA;AACA,sBAAsB,yBAAyB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,cAAc;AACd,iCAAiC;AACjC;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA,wDAAwD;AACxD,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,iBAAiB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB;AACA,UAAU;AACV,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,EAAE,iBAAiB;AAC5D;AACA,2BAA2B,yCAAyC;AACpE;AACA,aAAa,GAAG;AAChB;AACA;AACA,4BAA4B,OAAO;AACnC,YAAY,OAAO,UAAU,OAAO;AACpC,sCAAsC,GAAG,IAAI;AAC7C;AACA;AACA;AACA,iDAAiD,iBAAiB;AAClE;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,2BAA2B,yCAAyC;AACpE;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,4BAA4B,uCAAuC;AACnE;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACjvBA,iBAAiB,mBAAO,CAAC,uBAAY;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACPA,iBAAiB,mBAAO,CAAC,uBAAY;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,mBAAO,CAAC,sCAA2B;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,EAAE;AACF;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,sBAAsB,MAAM;AAC5B;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,UAAU,EAAE;AAC7C;AACA,0CAA0C,iBAAiB,GAAG,4BAA4B;AAC1F,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,cAAc,KAAK;AACnB,cAAc,KAAK;AACnB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,iCAAiC,UAAU,EAAE;AAC7C;AACA,mBAAmB,MAAM,GAAG,iBAAiB;AAC7C;AACA;AACA;AACA,0BAA0B,kBAAkB;AAC5C,WAAW;AACX,0BAA0B,yBAAyB,GAAG,kBAAkB;AACxE;AACA;AACA;AACA;AACA,wDAAwD,kBAAkB;AAC1E;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA,aAAa,eAAe;AAC5B;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,wBAAwB,QAAQ;AAChC,qBAAqB,KAAK;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC3SA,sBAAsB,mBAAO,CAAC,kCAAuB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,sBAAsB;AACtB;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB,UAAU;AACV,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,sBAAsB,MAAM;AAC5B;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,aAAa;AACb,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,8CAA8C,EAAE;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,cAAc;AAC5B;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACnJA,0BAA0B,mBAAO,CAAC,sCAA2B;AAC7D;AACA;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA,UAAU,wBAAwB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ,GAAG,WAAW;AACrC;AACA;AACA;AACA,WAAW,gCAAgC;AAC3C,WAAW,+BAA+B,MAAM,MAAM,MAAM,MAAM,MAAM,KAAK;AAC7E,WAAW,MAAM,yBAAyB,KAAK;AAC/C,WAAW,gCAAgC;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,GAAG;AACjB;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,SAAS;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB,eAAe;AACf;AACA;AACA;AACA,aAAa,SAAS;AACtB;AACA,UAAU,SAAS;AACnB;AACA;AACA,sBAAsB,gBAAgB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AChKA,0BAA0B,mBAAO,CAAC,sCAA2B;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,8BAA8B;AAC7D,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB;AACA;AACA;AACA;AACA,8CAA8C,8BAA8B;AAC5E,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP;AACA;AACA;AACA,+BAA+B,OAAO;AACtC,sCAAsC,OAAO;AAC7C,8BAA8B,OAAO;AACrC,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,QAAQ;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA,sCAAsC,uBAAuB;AAC7D;AACA;AACA;AACA,6CAA6C;AAC7C,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,SAAS,EAAE,OAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACbsBAAsB;AACtB;AACA,gBAAgB;AAChB,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,qCAAqC,EAAE;AACvC,gBAAgB;AAChB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,aAAa;AAC3B,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;;;;;;;;;;;AClxBA,sBAAsB,mBAAO,CAAC,kCAAuB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,OAAO;AAC1C,oCAAoC,OAAO;AAC3C,sCAAsC,OAAO;AAC7C;AACA,8BAA8B,OAAO;AACrC,+BAA+B,OAAO;AACtC,8BAA8B,OAAO;AACrC,oCAAoC,OAAO;AAC3C;AACA,oCAAoC,OAAO;AAC3C,yCAAyC,OAAO;AAChD;AACA,eAAe,OAAO;AACtB;AACA;AACA,eAAe,OAAO;AACtB;AACA,oCAAoC,OAAO;AAC3C;AACA,wCAAwC,OAAO;AAC/C;AACA,qCAAqC,OAAO;AAC5C;AACA,oCAAoC,OAAO;AAC3C,OAAO;AACP;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,sBAAsB;AACtB,mBAAmB;AACnB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA,sBAAsB;AACtB,mBAAmB;AACnB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB,sBAAsB;AACtB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,+BAA+B;AAC/B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,4BAA4B;AAC5B;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB,sBAAsB;AACtB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,gBAAgB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,MAAM;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,gBAAgB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,iBAAiB;AACnD;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,gBAAgB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,iBAAiB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,eAAe,mBAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AClwCA;AACuC;AACvC,mBAAmB,mBAAO,CAAC,yCAA8B;AACzD;AACA;AACA;AACe,yBAAyB,mDAAO;AAC/C;AACA;AACA,kBAAkB,OAAO;AACzB,oBAAoB,OAAO;AAC3B,mBAAmB,OAAO;AAC1B,OAAO;AACP;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,kCAAkC;AAC5D,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,oBAAoB;AACpB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA;AACA,eAAe,OAAO,IAAI,WAAW;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,8BAA8B;AAC9B,qCAAqC,SAAS;AAC9C,4BAA4B;AAC5B,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,UAAU;AACxB;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA,cAAc,YAAY;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,YAAY;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,SAAS;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA,6BAA6B;AAC7B,2BAA2B;AAC3B,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,mBAAmB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;;;;;;;;;;ACthBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mBAAO,CAAC,8CAAmC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA,iCAAiC,GAAG;AACpC;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,EAAE,UAAU,EAAE,YAAY,EAAE,yBAAyB,EAAE;AAC9G,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA,sBAAsB,eAAe;AACrC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,0BAA0B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,kDAAkD,GAAG;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,sBAAsB,MAAM;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,eAAe,SAAS,QAAQ;AAC5E,OAAO;AACP;AACA;AACA;AACA;AACA,4CAA4C,eAAe,SAAS,QAAQ;AAC5E,OAAO;AACP;AACA;AACA;AACA;AACA,4CAA4C,eAAe,SAAS,QAAQ;AAC5E,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,6BAA6B,KAAK;AAClC,iBAAiB,IAAI;AACrB,kBAAkB,IAAI;AACtB,oBAAoB;AACpB;AACA,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,iBAAiB;AAC3E;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,qBAAqB,aAAa;AAClC,cAAc,KAAK;AACnB;AACA;AACA,cAAc,SAAS;AACvB;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ,YAAY,aAAa;AAC/C,cAAc,KAAK;AACnB;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,UAAU;AACV;AACA;AACA;;;;;;;;;;;ACztBA,6BAA6B,mBAAO,CAAC,uDAA4C;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACjEA,2BAA2B,mBAAO,CAAC,qDAA0C;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC/EA,6BAA6B,mBAAO,CAAC,uDAA4C;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC9DA,2BAA2B,mBAAO,CAAC,qDAA0C;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACjEA,2BAA2B,mBAAO,CAAC,qDAA0C;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,GAAG;AACjB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,UAAU,8BAA8B,OAAO;AAC9G;AACA,aAAa;AACb;AACA;AACA,gEAAgE,oBAAoB;AACpF;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,sDAAsD,MAAM,sBAAsB,mBAAmB;AACrG;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB,IAAI;AAC7B;AACA,qBAAqB,IAAI;AACzB,iCAAiC,IAAI;AACrC;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ,YAAY,aAAa;AAC/C,cAAc,KAAK;AACnB;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,8BAA8B,QAAQ,GAAG,sBAAsB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA,aAAa;AACb,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,UAAU;AACV,QAAQ;AACR;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,WAAW,UAAU,WAAW,EAAE,UAAU,EAAE,QAAQ;AACxE;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,oBAAoB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,QAAQ;AACR;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,GAAG;AACjB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC/oBA,wBAAwB,mBAAO,CAAC,kDAAuC;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,KAAK;AACtB;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;;;;;;;;;;AChIA,4BAA4B,mBAAO,CAAC,qDAA2C;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,KAAK;AACtB;AACA;AACA;AACA;AACA,mBAAmB,uCAAuC,EAAE;AAC5D;AACA,WAAW;AACX,QAAQ;AACR,mBAAmB,mCAAmC,EAAE,mBAAmB;AAC3E;AACA;AACA;;;;;;;;;;;AChIA,yBAAyB,mBAAO,CAAC,kDAAwC;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACtEA,wBAAwB,mBAAO,CAAC,kDAAuC;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,EAAE;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb,UAAU;AACV,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ,YAAY,aAAa;AAC/C,cAAc,KAAK;AACnB;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,EAAE;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,EAAE;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,gBAAgB;AAChB,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ,YAAY,aAAa;AAC/C,cAAc,KAAK;AACnB;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,eAAe;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA,uEAAuE,iBAAiB,qBAAqB,wBAAwB,yBAAyB,kBAAkB,qBAAqB,iBAAiB,mBAAmB,iBAAiB,EAAE,YAAY,mDAAmD,iBAAiB,iBAAiB,mBAAmB;AAChX,+BAA+B,iCAAiC;AAChE,UAAU;AACV,gEAAgE,aAAa,mBAAmB,6BAA6B,QAAQ;AACrI;AACA,UAAU;AACV;AACA,8BAA8B,YAAY,mDAAmD;AAC7F;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA,eAAe;AACf;AACA;AACA,6BAA6B,eAAe,GAAG,QAAQ,GAAG,oBAAoB;AAC9E;AACA;;;;;;;;;;;ACncA,2BAA2B,mBAAO,CAAC,qDAA0C;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC/DA,yBAAyB,mBAAO,CAAC,mDAAwC;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,EAAE;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,gBAAgB;AAChB,aAAa;AACb,WAAW;AACX,uBAAuB;AACvB;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mCAAmC,GAAG,OAAO;AAChE,QAAQ;AACR,mBAAmB,mCAAmC,GAAG,OAAO;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,YAAY;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,UAAU;AACxC,oBAAoB,iCAAiC;AACrD;AACA;AACA;AACA;AACA,0BAA0B,YAAY;AACtC;AACA;AACA;AACA;AACA,6BAA6B,eAAe;AAC5C,QAAQ;AACR;AACA,oBAAoB,qBAAqB;AACzC;AACA,0BAA0B,YAAY;AACtC;AACA,6BAA6B,eAAe;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,gBAAgB;AAC9C;AACA,0BAA0B,YAAY;AACtC;AACA,6BAA6B,eAAe;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,QAAQ,UAAU,gBAAgB;AACxE;AACA,sCAAsC,QAAQ,UAAU,YAAY;AACpE;AACA;AACA,kEAAkE,EAAE,WAAW;AAC/E,8DAA8D,WAAW;AACzE;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ,YAAY,aAAa;AAC/C,cAAc,KAAK;AACnB;AACA,cAAc,SAAS;AACvB,cAAc,QAAQ;AACtB,kBAAkB,QAAQ;AAC1B,gBAAgB,UAAU;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,EAAE;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,gBAAgB;AAChB,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ,YAAY,aAAa;AAC/C,cAAc,KAAK;AACnB;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,aAAa;AACb,UAAU;AACV,QAAQ;AACR;AACA;AACA;AACA;AACA,kCAAkC,eAAe;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA,6CAA6C,qBAAqB,GAAG;AACrE,QAAQ;AACR;AACA,wCAAwC;AACxC;AACA,gDAAgD;AAChD;AACA,cAAc,GAAG;AACjB;AACA;AACA;AACA;AACA,sDAAsD,YAAY;AAClE,0DAA0D,cAAc,QAAQ,gBAAgB,SAAS,iBAAiB,EAAE,SAAS;AACrI;AACA;AACA;AACA;AACA;AACA,sBAAsB,iCAAiC;AACvD;AACA;AACA;AACA;AACA;AACA,2BAA2B,aAAa,mDAAmD;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,oBAAoB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,mBAAmB;AACrE;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,eAAe;AACf;AACA;AACA,sBAAsB,GAAG;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA,eAAe;AACf;AACA;AACA,6BAA6B,eAAe,GAAG,QAAQ,GAAG,oBAAoB;AAC9E;AACA;;;;;;;;;;;ACpmBA,wBAAwB,mBAAO,CAAC,kDAAuC;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACnDA,wBAAwB,mBAAO,CAAC,kDAAuC;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,sBAAsB;AACtB;AACA,gBAAgB;AAChB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,UAAU;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB;AACA;AACA;AACA,sBAAsB;AACtB;AACA,gBAAgB;AAChB;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,eAAe,IAAI;AACrE;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,SAAS;AACtD;AACA;AACA;AACA,oCAAoC,UAAU,kCAAkC,eAAe,UAAU,SAAS,8BAA8B,OAAO;AACvJ;AACA;AACA,aAAa;AACb;AACA;AACA,gEAAgE,oBAAoB;AACpF;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,iBAAiB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,UAAU,kCAAkC,eAAe,IAAI,MAAM,sBAAsB,iBAAiB;AAC7I;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ,YAAY,aAAa;AAC/C,cAAc,KAAK;AACnB;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ,YAAY,aAAa;AAC/C,cAAc,KAAK;AACnB;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,UAAU;AACV,QAAQ;AACR;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;;;;;;;;;;AC9bA,4BAA4B,mBAAO,CAAC,sDAA2C;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA,8DAA8D;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;;;;;;;;;;;ACjGA,0BAA0B,mBAAO,CAAC,oDAAyC;AAC3E;AACA;AACA,IAAI,MAAM;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC3EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,sBAAW;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,kDAAkD,wBAAwB,mCAAmC;AAC7G,wBAAwB,aAAa,mBAAmB,eAAe;AACvE,kDAAkD,aAAa;AAC/D;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,0GAA0G;AAC1G;AACA;AACA;AACA,gBAAgB;AAChB;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,mBAAmB;AACnB,mCAAmC,aAAa,WAAW;AAC3D,wBAAwB,aAAa,mBAAmB,eAAe;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,gBAAgB,mBAAmB,eAAe;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,sBAAsB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,yBAAyB,uBAAuB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACpWA,0BAA0B,mBAAO,CAAC,oDAAyC;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjE,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,KAAK;AACrD;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,aAAa;AAC3B,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,GAAG;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;;;;;;;;;;;AC/IA,+BAA+B,mBAAO,CAAC,yDAA8C;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ,YAAY,aAAa;AAC/C,cAAc,KAAK;AACnB;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC5EA,wBAAwB,mBAAO,CAAC,kDAAuC;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,eAAe;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ,YAAY,aAAa;AAC/C,cAAc,KAAK;AACnB;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mFAAmF,eAAe;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ,YAAY,aAAa;AAC/C,cAAc,KAAK;AACnB;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA,yBAAyB,OAAO;AAChC,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA,0BAA0B;AAC1B,8CAA8C;AAC9C;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;;;;;;;;;;AC5cA,2BAA2B,mBAAO,CAAC,qDAA0C;AAC7E,wBAAwB,mBAAO,CAAC,kDAAuC;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB,GAAG,WAAW;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ,YAAY,aAAa;AAC/C,cAAc,KAAK;AACnB;AACA,cAAc,SAAS;AACvB;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,aAAa,6BAA6B,mBAAmB,sBAAsB;AAChJ,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;;;;;;;;;;AC7LA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAO,CAAC,iDAAsC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AChJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,mBAAO,CAAC,wDAA6C;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,qBAAqB,GAAG;AACxB,qBAAqB,GAAG;AACxB,qBAAqB,GAAG;AACxB,wBAAwB,GAAG;AAC3B,2BAA2B,GAAG;AAC9B,wBAAwB,GAAG;AAC3B;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,yBAAyB,WAAW,IAAI;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,uBAAuB,2CAA2C;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B,+BAA+B;AAC/B;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,WAAW;AACzB,cAAc,QAAQ;AACtB;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qCAAqC;AAC7D,wBAAwB,qCAAqC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,gBAAgB;AAChB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,WAAW;AACzB,cAAc,QAAQ;AACtB;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,UAAU;AACV;AACA,qBAAqB;AACrB,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,eAAe;AACtE;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;;;;;;;;;;AC9aA,6BAA6B,mBAAO,CAAC,gEAAqD;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,qDAAqD,UAAU;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,gBAAgB;AAC9B;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACvPA,yBAAyB,mBAAO,CAAC,4DAAiD;AAClF;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;;;;;;;;;;;ACtBA,sCAAsC,mBAAO,CAAC,yEAA8D;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,GAAG;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,yBAAyB,MAAM,KAAK,mBAAmB,cAAc,IAAI;AACzE;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,GAAG,GAAG,QAAQ;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;AACA,uCAAuC,EAAE;AACzC;AACA;AACA;AACA;AACA,4BAA4B,GAAG,GAAG,QAAQ;AAC1C;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG,GAAG,QAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV,OAAO;AACP;AACA;AACA;;;;;;;;;;;AChKA;AACA,qDAAqD;AACrD,+BAA+B,mBAAO,CAAC,kEAAuD;AAC9F,6BAA6B,mBAAO,CAAC,uCAA4B;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,GAAG;AACrB,gBAAgB,GAAG;AACnB,kBAAkB,GAAG;AACrB,qBAAqB,GAAG;AACxB,sBAAsB,GAAG;AACzB,oBAAoB,GAAG;AACvB,qBAAqB,GAAG;AACxB,sBAAsB,GAAG;AACzB,wBAAwB,GAAG;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,sBAAsB;AACtB,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AClQA,iCAAiC,mBAAO,CAAC,oEAAyD;AAClG;AACA;;;;;;;;;;;ACFA,sCAAsC,mBAAO,CAAC,4FAAkF;AAChI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,GAAG;AACrB,+BAA+B,GAAG;AAClC,yBAAyB,GAAG;AAC5B,+BAA+B,GAAG;AAClC,uCAAuC,GAAG;AAC1C,sBAAsB,GAAG;AACzB,4BAA4B,GAAG;AAC/B,uBAAuB,GAAG;AAC1B,2BAA2B,GAAG;AAC9B,mCAAmC,GAAG;AACtC,sBAAsB,GAAG;AACzB,oCAAoC,GAAG;AACvC,4BAA4B,GAAG;AAC/B,uBAAuB,GAAG;AAC1B,4BAA4B,GAAG;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA,6BAA6B,2CAA2C;AACxE;AACA;AACA,8BAA8B,+BAA+B;AAC7D,OAAO;AACP;AACA;AACA,kBAAkB;AAClB,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,oCAAoC;AACpE,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,8CAA8C;AACvE;AACA;AACA,6BAA6B,yBAAyB;AACtD,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;;;;;;;;;;AC5XA,8BAA8B,mBAAO,CAAC,qFAA0E;AAChH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,GAAG;AACrB,4BAA4B,GAAG;AAC/B,sBAAsB,GAAG;AACzB,sBAAsB,GAAG;AACzB,uBAAuB,GAAG;AAC1B,0BAA0B,GAAG;AAC7B,yBAAyB,GAAG;AAC5B,2BAA2B,GAAG;AAC9B,2BAA2B,GAAG;AAC9B,6BAA6B,GAAG;AAChC,4BAA4B,GAAG;AAC/B,4BAA4B,GAAG;AAC/B,uBAAuB,GAAG;AAC1B,0BAA0B,GAAG;AAC7B,2BAA2B,GAAG;AAC9B,0BAA0B,GAAG;AAC7B,2BAA2B,GAAG;AAC9B,6BAA6B,GAAG;AAChC,iCAAiC,GAAG;AACpC,4BAA4B,GAAG;AAC/B,4BAA4B,GAAG;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA,6BAA6B,2CAA2C;AACxE;AACA;AACA,8BAA8B,+BAA+B;AAC7D,OAAO;AACP;AACA;AACA,kBAAkB;AAClB,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,oCAAoC;AACpE,gBAAgB;AAChaAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;;;;;;;;;;ACnaA,kCAAkC,mBAAO,CAAC,yFAA8E;AACxH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,GAAG;AACrB,gCAAgC,GAAG;AACnC,0BAA0B,GAAG;AAC7B,2BAA2B,GAAG;AAC9B,sBAAsB,GAAG;AACzB,2BAA2B,GAAG;AAC9B,+BAA+B,GAAG;AAClC,4BAA4B,GAAG;AAC/B,8BAA8B,GAAG;AACjC,4BAA4B,GAAG;AAC/B,+BAA+B,GAAG;AAClC,+BAA+B,GAAG;AAClC,+BAA+B,GAAG;AAClC,6BAA6B,GAAG;AAChC,iCAAiC,GAAG;AACpC,mCAAmC,GAAG;AACtC,uBAAuB,GAAG;AAC1B,4BAA4B,GAAG;AAC/B,0BAA0B,GAAG;AAC7B,gCAAgC,GAAG;AACnC,iCAAiC,GAAG;AACpC,gCAAgC,GAAG;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA,6BAA6B,2CAA2C;AACxE;AACA;AACA,8BAA8B,+BAA+B;AAC7D,OAAO;AACP;AACA;AACA,kBAAkB;AAClB,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,oCAAoC;AACvE,mBAAmB;AACnaAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;;;;;;;;;;AC7bA,gCAAgC,mBAAO,CAAC,uFAA4E;AACpH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,GAAG;AACrB,+BAA+B,GAAG;AAClC,yBAAyB,GAAG;AAC5B,2BAA2B,GAAG;AAC9B,sBAAsB,GAAG;AACzB,6BAA6B,GAAG;AAChC;AACA,mCAAmC,GAAG;AACtC,4BAA4B,GAAG;AAC/B,uBAAuB,GAAG;AAC1B,mCAAmC,GAAG;AACtC,gCAAgC,GAAG;AACnC,4BAA4B,GAAG;AAC/B,uBAAuB,GAAG;AAC1B;AACA,yBAAyB,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA,6BAA6B,2CAA2C;AACxE;AACA;AACA,8BAA8B,+BAA+B;AAC7D,OAAO;AACP;AACA;AACA,kBAAkB;AAClB,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,OAAO;AACP;AACA;;;;;;;;;;;ACrVA,0BAA0B,mBAAO,CAAC,6EAAkE;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,GAAG;AACrB,yBAAyB,GAAG;AAC5B;AACA,2BAA2B,GAAG;AAC9B,2BAA2B,GAAG;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,EAAE,YAAY;AACnD,2DAA2D,cAAc,GAAG,EAAE,YAAY;AAC1F;AACA,mBAAmB;AACnB;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,mBAAmB;AACnB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,qCAAqC,EAAE,iBAAiB;AACxD;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,UAAU;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,yCAAyC,QAAQ,EAAE,SAAS;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC/MA;AACA,qDAAqD;AACrD,oDAAoD,mBAAO,CAAC,uFAA4E;AACxI;AACA;AACA;AACA;;;;;;;;;;;ACNA,6BAA6B,mBAAO,CAAC,gFAAqE;AAC1G;AACA;;;;;;;;;;;ACFA,sCAAsC,mBAAO,CAAC,yEAA8D;AAC5G;AACA,oBAAoB,mBAAO,CAAC,oCAAyB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACdA,uBAAuB,mBAAO,CAAC,uEAA4D;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,GAAG;AACrB,sBAAsB,GAAG;AACzB,yBAAyB,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,sBAAsB,MAAM;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,cAAc;AAC5B;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACnLA,8BAA8B,mBAAO,CAAC,iEAAsD;AAC5F;AACA;;;;;;;;;;;ACFA,sCAAsC,mBAAO,CAAC,yEAA8D;AAC5G;AACA;AACA;AACA;;;;;;;;;;;ACJA;AACA,qDAAqD;AACrD,sCAAsC,mBAAO,CAAC,yEAA8D;AAC5G;AACA;AACA;AACA;;;;;;;;;;;ACNA;AACA,qDAAqD;AACrD,6BAA6B,mBAAO,CAAC,gEAAqD;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,GAAG;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AClDA;AACA,qDAAqD;AACrD,sCAAsC,mBAAO,CAAC,yEAA8D;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,GAAG;AACrB,qBAAqB,GAAG;AACxB,2BAA2B,GAAG;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,8BAA8B;AACtD,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,oCAAoC;AACxD,oBAAoB,yCAAyC;AAC7D,oBAAoB,yCAAyC;AAC7D;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,cAAc,GAAG,kBAAkB;AAC9D;AACA;;;;;;;;;;;AClFA,kCAAkC,mBAAO,CAAC,qEAA0D;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,GAAG;AACrB,yBAAyB,GAAG;AAC5B,wBAAwB,GAAG;AAC3B,2BAA2B,GAAG;AAC9B,yBAAyB,GAAG;AAC5B,0BAA0B,GAAG;AAC7B,2BAA2B,GAAG;AAC9B,uBAAuB,GAAG;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,WAAW;AACnC;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,gCAAgC;AACpD;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,4BAA4B;AACtD,0BAA0B,oCAAoC;AAC9D;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,mBAAmB;AACnB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,0BAA0B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;;;;;;;;;;;AC9NA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,mBAAO,CAAC,sCAA2B;AACpD,mBAAmB,mBAAO,CAAC,6BAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA,uBAAuB,KAAK;AAC5B,wBAAwB,KAAK;AAC7B,mBAAmB,KAAK;AACxB,oBAAoB,KAAK;AACzB,uBAAuB,KAAK;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,oBAAoB;AAChD;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA,mBAAmB,qBAAqB,GAAG,qBAAqB;AAChE,QAAQ;AACR,mBAAmB,GAAG,GAAG,qBAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,IAAI;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,eAAe;AACf;AACA;AACA;AACA,kBAAkB;AAClB,OAAO;AACP,wBAAwB,0CAA0C;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,4DAA4D;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB,uBAAuB;AACvB;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA,cAAc,QAAQ;AACtB;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,OAAO;AAChC,2BAA2B,OAAO;AAClC,0BAA0B,cAAc;AACxC,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA,gDAAgD,mBAAmB;AACnE;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA,gDAAgD,mBAAmB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,GAAG;AACnB;AACA;AACA;AACA;AACA;AACA,0BAA0B,KAAK;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA,gBAAgB;AAChB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,iBAAiB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,oCAAoC,8BAA8B,EAAE,kBAAkB;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,sBAAsB,yCAAyC;AAC/D;AACA,aAAa,EAAE,yCAAyC;AACxD,UAAU;AACV,sBAAsB,yCAAyC;AAC/D;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA,iCAAiC,YAAY;AAC7C;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,GAAG;AACzC;AACA,iCAAiC,YAAY;AAC7C,iCAAiC,YAAY;AAC7C,kCAAkC,SAAS,GAAG;AAC9C,kCAAkC,SAAS,GAAG;AAC9C,kCAAkC,YAAY;AAC9C;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,kBAAkB,8BAA8B,EAAE,iBAAiB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,QAAQ;AAC1D;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,iDAAiD,QAAQ;AACzD,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,8CAA8C,SAAS;AACvD,iCAAiC;AACjC;AACA,6CAA6C,2BAA2B;AACxE,8CAA8C,uBAAuB;AACrE;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA,iCAAiC;AACjC;AACA,iDAAiD,SAAS,yBAAyB;AACnF,8CAA8C,SAAS,cAAc;AACrE;AACA;AACA,qCAAqC;AACrC;AACA;AACA,qCAAqC;AACrC,6CAA6C,uBAAuB;AACpE;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,KAAK;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,QAAQ;AACtD;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,gCAAgC,eAAe;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC3qCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,mBAAO,CAAC,0CAA+B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAO,CAAC,6CAAkC;AAClE;AACA;AACA;AACA;AACA,iBAAiB,MAAM;AACvB;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,kBAAkB;AAChC;AACA,cAAc,WAAW;AACzB,sBAAsB,WAAW;AACjC,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,eAAe;AACf;AACA;AACA;AACA,kBAAkB,GAAG;AACrB,oBAAoB,GAAG;AACvB,qBAAqB,GAAG;AACxB;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,kBAAkB;AAChC;AACA,cAAc,WAAW;AACzB,cAAc,WAAW;AACzB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,gCAAgC;AAC7D;AACA,8BAA8B,6BAA6B;AAC3D,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA,wCAAwC;AACxC,qCAAqC;AACrC,mCAAmC;AACnC;AACA,mCAAmC;AACnC,+BAA+B;AAC/B,4BAA4B;AAC5B,yBAAyB;AACzB;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,+BAA+B;AAC/B;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,kBAAkB;AAChC;AACA,cAAc,WAAW;AACzB,cAAc,WAAW;AACzB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,iCAAiC;AACjC,cAAc;AACd,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;;;;;;;;;;;ACzPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,mBAAO,CAAC,gDAAqC;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACxEA,yBAAyB,mBAAO,CAAC,8CAAmC;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAO,CAAC,6CAAkC;AAClE;AACA;AACA;AACA;AACA;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,mBAAO,CAAC,+CAAoC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,mBAAO,CAAC,8CAAmC;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,UAAU,GAAG,SAAS;AAC1C,EAAE;AACF;AACA;AACA;AACA,mBAAmB,IAAI,GAAG,WAAW;AACrC,EAAE;AACF;AACA;AACA;AACA,mBAAmB,IAAI,GAAG,QAAQ;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,IAAI;AACP,GAAG,QAAQ;AACX,GAAG;AACH;AACA;AACA;AACA;AACA,yBAAyB,mBAAO,CAAC,8CAAmC;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACnIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAO,CAAC,6CAAkC;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,mBAAO,CAAC,8CAAoC;AACtE;AACA;AACA;AACA;AACA;;;;;;;;;;;ACbA,mBAAmB,mBAAO,CAAC,2CAAgC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA,+BAA+B;AAC/B,4BAA4B;AAC5B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA,mBAAmB;AACnB;AACA;AACA;AACA,6CAA6C,kBAAkB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,KAAK;AAC5B,uBAAuB,KAAK;AAC5B;AACA;AACA;AACA;AACA,qCAAqC,YAAY;AACjD,sBAAsB,YAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,uBAAuB,KAAK;AAC5B,uBAAuB,SAAS;AAChC,uBAAuB,KAAK;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,EAAE;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,YAAY;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,mCAAmC;AACnC;AACA,4BAA4B;AAC5B;AACA,mBAAmB;AACnB,gBAAgB;AAChB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,uBAAuB,KAAK;AAC5B,uBAAuB,SAAS;AAChC,uBAAuB,KAAK;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,yBAAyB,KAAK;AAC9B;AACA;AACA,wBAAwB,KAAK;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,uBAAuB,KAAK;AAC5B;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,gBAAgB;AAChB,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,iBAAiB,MAAM;AACvB;AACA;AACA,kBAAkB;AAClB,oBAAoB,2BAA2B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,MAAM;AACpB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,gBAAgB;AAChB,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACvlBA,8BAA8B,mBAAO,CAAC,mDAAwC;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,YAAY;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB;AACA,mBAAmB;AACnB;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,KAAK;AACjE;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,OAAO;AAC1D;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,OAAO;AACtC,qCAAqC,OAAO;AAC5C,oCAAoC,OAAO;AAC3C;AACA;AACA,qDAAqD,OAAO;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb,cAAc,iBAAiB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,gDAAgD,QAAQ;AACxD;AACA;AACA;AACA;AACA;AACA,wBAAwB,IAAI,SAAS,QAAQ;AAC7C;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACrYA,8BAA8B,mBAAO,CAAC,mDAAwC;AAC9E;AACA,gBAAgB,kEAAsC;AACtD;AACA,oBAAoB,mBAAO,CAAC,2BAAgB;AAC5C,qBAAqB,mBAAO,CAAC,sDAA2C;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,mBAAmB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,4BAA4B;AAC5B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,4BAA4B;AAC5B,yBAAyB;AACzB;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB;AACA,mBAAmB;AACnB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,UAAU;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB,mBAAmB;AACnB,oBAAoB,UAAU;AAC9B;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,4CAA4C,IAAI;AAChD;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,mBAAmB;AACnB;AACA,4CAA4C,IAAI;AAChD;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,mBAAmB;AACnB;AACA,6DAA6D,iBAAiB;AAC9E;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,gBAAgB;AAChB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,WAAW;AAClC;AACA,uBAAuB,UAAU;AACjC;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,gBAAgB;AAChB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,cAAc;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,QAAQ;AACR,yBAAyB,sBAAsB;AAC/C;AACA;AACA,iCAAiC,EAAE;AACnC;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8BAA8B;AAC/C,iBAAiB,gCAAgC;AACjD;AACA;AACA,iBAAiB,8BAA8B;AAC/C,iBAAiB,gCAAgC;AACjD;AACA;AACA,iBAAiB,gCAAgC;AACjD,iBAAiB,sCAAsC;AACvD;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,mBAAmB;AAC5C,kDAAkD,OAAO,YAAY,QAAQ;AAC7E,gBAAgB;AAChB;AACA;AACA,UAAU;AACV,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,0BAA0B;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,GAAG;AACxE;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,cAAc;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,mBAAmB,2BAA2B;AAC9C,qBAAqB,kBAAkB;AACvC;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,WAAW,GAAG,YAAY;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD,aAAa;AACb;AACA;AACA,UAAU;AACV,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,gBAAgB;AAChB;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,kBAAkB;AACzE;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,cAAc;AACd,+CAA+C;AAC/C;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,GAAG;AACvC,mCAAmC,SAAS;AAC5C;AACA,UAAU;AACV;AACA,6CAA6C,GAAG;AAChD;AACA;AACA,4CAA4C,cAAc;AAC1D;AACA,oCAAoC,GAAG;AACvC;AACA,oCAAoC,GAAG;AACvC,sCAAsC,GAAG;AACzC;AACA;AACA;AACA,QAAQ;AACR,oDAAoD,iBAAiB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA,4CAA4C,OAAO;AACnD,sCAAsC,QAAQ;AAC9C,4CAA4C,SAAS;AACrD,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,uBAAuB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,4BAA4B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,0BAA0B;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,GAAG;AAC3B;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,cAAc;AAChD;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,iBAAiB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,iBAAiB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,6BAA6B,+BAA+B;AAC5D,WAAW;AACX;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,MAAM,MAAM,oBAAoB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA,sBAAsB;AACtB;AACA,aAAa;AACb;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,+BAA+B;AAC5E;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,qCAAqC;AACrC,+BAA+B;AAC/B;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,kCAAkC;AAClC;AACA,4BAA4B;AAC5B,sBAAsB;AACtB;AACA;AACA;AACA,sBAAsB;AACtB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,+BAA+B,+BAA+B;AAC9D,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,iBAAiB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,aAAa;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA,WAAW;AACX;AACA,UAAU;AACV;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA,sBAAsB;AACtB,mBAAmB;AACnB;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB;AACA,mBAAmB;AACnB;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,KAAK;AAC5D;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,gBAAgB;AACzD;AACA;AACA,OAAO;AACP;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACjkEA;AACA,2BAA2B,mBAAO,CAAC,gDAAqC;AACxE;AACA;AACA;AACA;AACiF;AACJ;AAC7E;AACA,qBAAqB,mBAAO,CAAC,uCAA4B;AACzD;AACA;AACA;AACA;AACA;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,kGAA0C;AAC1E;AACA;AACA;AACA,+BAA+B,gGAAwC;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,UAAU;AACV;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,gCAAgC;AAChC;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,kCAAkC;AAC5D,0BAA0B,8BAA8B;AACxD;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB;AACA,mBAAmB;AACnB;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB,mBAAmB;AACnB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,6CAA6C,UAAU,EAAE,QAAQ;AACjE;AACA;AACA;AACA,0CAA0C,UAAU,kBAAkB,QAAQ;AAC9E;AACA;AACA;AACA,0CAA0C,UAAU,cAAc,QAAQ;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,QAAQ;AACvC;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,2CAA2C,OAAO;AAClD;AACA;AACA,2CAA2C,OAAO;AAClD;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,cAAc;AAC7E,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,QAAQ;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,+BAA+B;AAClE;AACA,mBAAmB;AACnB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,kBAAkB,wBAAwB,oBAAoB,gDAAgD,+BAA+B,4BAA4B,sBAAsB;AACvP,sBAAsB;AACtB;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,+BAA+B;AAC/B;AACA,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,QAAQ;AACvC;AACA;AACA;AACA;AACA,mCAAmC,gFAAwB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,8EAAsB;AAC3D;AACA;AACA;AACA;;;;;;;;;;;ACtvBA,wBAAwB,mBAAO,CAAC,6CAAkC;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACbyBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,EAAE,SAAS;AACtD;AACA;AACA;AACA,4CAA4C,wBAAwB,IAAI;AACxE;AACA,wCAAwC,EAAE,SAAS;AACnD;AACA;AACA;AACA;AACA;AACA,yCAAyC,oBAAoB;AAC7D;AACA,wCAAwC,EAAE,SAAS;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,IAAI;AAC7B;AACA,wCAAwC,EAAE,SAAS;AACnD;AACA;AACA;AACA;AACA;AACA,6CAA6C,wBAAwB,IAAI;AACzE;AACA,wCAAwC,EAAE,SAAS;AACnD;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC9pBA,4BAA4B,mBAAO,CAAC,iDAAsC;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACxPA,2BAA2B,mBAAO,CAAC,gDAAqC;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACxTA,qBAAqB,mBAAO,CAAC,2BAAgB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA,6DAA6D,cAAc;AAC3E,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC3EA,4BAA4B,mBAAO,CAAC,iDAAsC;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC7QA,2BAA2B,mBAAO,CAAC,gDAAqC;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,4BAA4B,GAAG;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,4BAA4B,GAAG;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC3NA,0BAA0B,mBAAO,CAAC,+CAAoC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACbaAAa;AACb;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,cAAc;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,cAAc;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA,kDAAkD;AAClD;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,oDAAoD,cAAc;AAClE;AACA;AACA;AACA;AACA;AACA,2CAA2C,cAAc;AACzD,UAAU;AACV;AACA;AACA;AACA;AACA,oDAAoD,cAAc;AAClE;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACjhBA;AACA;AACA;AACA;AAC0C;AAC1C;AACe,8BAA8B,mDAAO;AACpD;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,uBAAuB,cAAc;AACrC,uBAAuB,QAAQ;AAC/B,uBAAuB,IAAI;AAC3B;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA,4BAA4B,cAAc;AAC1C,4BAA4B,QAAQ;AACpC,6BAA6B,IAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACtHA,uCAAuC,mBAAO,CAAC,4DAAiD;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,YAAY;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,oDAAoD,OAAO;AAC3D;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB;AACA,mBAAmB;AACnB;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mFAAmF;AACnF;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC9UuF;AACvC;AAChD;AACA;AACA;AACA,+CAA+C,wDAAe;AAC9D;AACA,iDAAiD,QAAQ;AACzD;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,oBAAoB,OAAO,YAAY;AACzE;AACA;AACA,uBAAuB,yBAAyB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA,4EAA4E;AAC5E,aAAa;AACb,UAAU;AACV,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,YAAY,gBAAgB,EAAE,YAAY;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,wBAAwB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,kCAAkC;AAC9E;AACA;AACA;AACA;AACA;AACe,sCAAsC,gFAA2B;AAChF;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;;;;;;;;;;AC7IA,4BAA4B,mBAAO,CAAC,iDAAsC;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA,kCAAkC,OAAO;AACzC;AACA;AACA,8BAA8B,KAAK;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,qCAAqC;AACrC,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,KAAK;AACzB,oBAAoB,KAAK;AACzB;AACA;AACA;AACA,iCAAiC,YAAY,uBAAuB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,oBAAoB,KAAK;AACzB,oBAAoB,SAAS;AAC7B,oBAAoB,KAAK;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,EAAE;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,UAAU;AACvE;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,gCAAgC;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,UAAU;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,oBAAoB,KAAK;AACzB,oBAAoB,SAAS;AAC7B,oBAAoB,KAAK;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,cAAc;AACzD;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,GAAG;AACvC;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,mBAAmB;AACnB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,gBAAgB;AAChB,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,wBAAwB;AAC9C;AACA;AACA,yBAAyB,oCAAoC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,GAAG;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,mBAAmB;AACnB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,KAAK;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,wBAAwB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,QAAQ;AACtB;AACA,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA,kCAAkC,OAAO;AACzC;AACA;AACA,uDAAuD,KAAK;AAC5D;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,eAAe;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACjqBA,2BAA2B,mBAAO,CAAC,gDAAqC;AACxE,+BAA+B,sFACpB;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,MAAM;AACpB,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,OAAO;AAC1C,kCAAkC,OAAO;AACzC,qCAAqC,OAAO;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,cAAc;AAChD,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,wDAAwD,eAAe;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,oBAAoB;AACjE;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,qBAAqB,QAAQ;AAC7B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kCAAkC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,aAAa;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,aAAa;AACtD;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,MAAM,EAAE,QAAQ;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,MAAM,EAAE,MAAM,EAAE,QAAQ;AAC3D;AACA;AACA;AACA;AACA;AACA,0CAA0C,MAAM,EAAE,MAAM,EAAE,QAAQ;AAClE;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACtfA,yBAAyB,mBAAO,CAAC,8CAAmC;AACpE,8BAA8B,mBAAO,CAAC,oCAAyB;AAC/D,sBAAsB,mBAAO,CAAC,6BAAkB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B,EAAE,YAAY;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,MAAM;AACpB,cAAc,QAAQ;AACtB;AACA,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,6EAA6E,eAAe,6BAA6B,OAAO,WAAW,UAAU,MAAM;AAC3J;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,WAAW;AACvE;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,wEAAwE,eAAe,WAAW,UAAU,cAAc,SAAS,UAAU,MAAM;AACnJ;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,qCAAqC,yBAAyB,EAAE,QAAQ;AACxE;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;;;;;;;;;;ACzgBA,iCAAiC,mBAAO,CAAC,sDAA2C;AACpF;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,eAAe;AAC7B,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,QAAQ;AACtB;AACA,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,mBAAmB,EAAE,WAAW,EAAE,WAAW;AAC3F;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;;;;;;;;;;;AC3HA,kCAAkC,mBAAO,CAAC,uDAA4C;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,QAAQ;AACtB;AACA,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,iBAAiB;AAC9D;AACA;AACA,gDAAgD,uBAAuB,aAAa,kBAAkB,uFAAuF;AAC7L;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,aAAa;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD,iBAAiB;AACjB;AACA;AACA,2CAA2C,cAAc;AACzD;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC3HA,gCAAgC,mBAAO,CAAC,qDAA0C;AAClF,8BAA8B,qFACnB;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,QAAQ;AACtB;AACA,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,kDAAkD,YAAY,EAAE,uBAAuB,EAAE,WAAW;AACpG;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,YAAY;AAC5E;AACA,mBAAmB;AACnB,iBAAiB;AACjB;AACA,6DAA6D,SAAS;AACtE;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AChLA,+BAA+B,mBAAO,CAAC,oDAAyC;AAChF;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,eAAe;AAC7B,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,QAAQ;AACtB;AACA,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,iBAAiB;AAC9D;AACA;AACA,gDAAgD,uBAAuB,aAAa,kBAAkB;AACtG;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,mBAAmB,EAAE,WAAW,EAAE,WAAW;AACzF;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE;AAChE;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AChKA,8BAA8B,mBAAO,CAAC,mDAAwC;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,eAAe;AAC7B,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,QAAQ;AACtB;AACA,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA,wCAAwC,eAAe,EAAE,QAAQ;AACjE;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,mBAAmB,EAAE,WAAW,EAAE,WAAW;AACxF;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,0BAA0B;AACpD;AACA;AACA;AACA,0BAA0B,2BAA2B;AACrD;AACA;AACA,qDAAqD,qBAAqB;AAC1E;AACA,mDAAmD,oBAAoB;AACvE;AACA;AACA;AACA,4CAA4C,wBAAwB,oCAAoC,wBAAwB,SAAS,KAAK,SAAS,QAAQ,UAAU,SAAS,kBAAkB;AACpM,8BAA8B,SAAS;AACvC;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC7KA,6BAA6B,mBAAO,CAAC,kDAAuC;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,eAAe;AAC7B,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,QAAQ;AACtB;AACA,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,mBAAmB,EAAE,WAAW,EAAE,WAAW;AACvF;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;;;;;;;;;;;ACrIA,2BAA2B,mBAAO,CAAC,iDAAuC;AAC1E;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,eAAe;AAC7B,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,QAAQ;AACtB;AACA,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,eAAe,EAAE,QAAQ;AAChE;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,UAAU;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACtLA,8BAA8B,mBAAO,CAAC,mDAAwC;AAC9E;AACA,uBAAuB,mBAAO,CAAC,yCAA8B;AAC7D,qBAAqB,mBAAO,CAAC,uCAA4B;AACzD,sBAAsB,mBAAO,CAAC,6BAAkB;AAChD;AACA,sBAAsB,mBAAO,CAAC,qDAA0C;AACxE,oBAAoB,mBAAO,CAAC,iEAAsD;AAClF,mBAAmB,mBAAO,CAAC,gDAAqC;AAChE,cAAc,mBAAO,CAAC,qCAA0B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,uEAAuE;AACvE,4BAA4B;AAC5B,yBAAyB;AACzB;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,mBAAmB;AACnB;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA,mBAAmB;AACnB;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,OAAO;AACtC,+BAA+B,OAAO;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,qDAAqD,MAAM,EAAE,QAAQ;AACrE;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,KAAK;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,iBAAiB;AACvD,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,QAAQ;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,aAAa;AAC5D;AACA;AACA;AACA;AACA,2CAA2C;AAC3C,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,YAAY,GAAG,WAAW;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,uBAAuB;AACvB,mBAAmB;AACnB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E,uBAAuB,sBAAsB,GAAG,SAAS;AACtI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,mBAAmB;AACnB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE;AACvE;AACA;AACA,6CAA6C;AAC7C;AACA;AACA,8DAA8D;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA,gCAAgC;AAChC;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,EAAE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,aAAa;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA,yCAAyC;AACzC;AACA;AACA,qCAAqC;AACrC;AACA,+BAA+B;AAC/B,4BAA4B;AAC5B,sCAAsC;AACtC,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,GAAG;AACzB;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACtmCA,uBAAuB,mBAAO,CAAC,4CAAiC;AAChE,yBAAyB,mBAAO,CAAC,+BAAoB;AACrD,yBAAyB,mBAAO,CAAC,+BAAoB;AACrD,0BAA0B,mBAAO,CAAC,gCAAqB;AACvD,4BAA4B,mBAAO,CAAC,kCAAuB;AAC3D,iCAAiC,mBAAO,CAAC,uCAA4B;AACrE,0BAA0B,mBAAO,CAAC,gCAAqB;AACvD;AACA,qBAAqB,mBAAO,CAAC,sDAA2C;AACxE,qBAAqB,mBAAO,CAAC,sDAA2C;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,OAAO,eAAe;AAC9D;AACA;AACA,wCAAwC,OAAO;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA,WAAW;AACX;AACA,UAAU;AACV;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA,sBAAsB;AACtB,mBAAmB;AACnB;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB;AACA,mBAAmB;AACnB;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,KAAK;AAC5D;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,YAAY;AAC1B,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,OAAO,GAAG,IAAI,GAAG,sBAAsB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,aAAa,GAAG,YAAY;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,cAAc;AAC9E;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,iBAAiB,KAAK;AAC3E;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,8CAA8C;AAC9C;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,YAAY;AAC1B,cAAc,UAAU;AACxB,cAAc,kBAAkB;AAChC,cAAc,kBAAkB;AAChC;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,YAAY;AAC1B,cAAc,UAAU;AACxB,cAAc,QAAQ;AACtB;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,cAAc;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,gBAAgB;AAChB,cAAc;AACd;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACzhDA,6BAA6B,mBAAO,CAAC,kDAAuC;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,KAAK;AACpB;AACA;AACA,+DAA+D,QAAQ;AACvE;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB,UAAU;AACV,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC7aA,+BAA+B,mBAAO,CAAC,oDAAyC;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA,iEAAiE,QAAQ;AACzE;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACjEA,gCAAgC,mBAAO,CAAC,qDAA0C;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,WAAW,UAAU,WAAW,EAAE,UAAU,EAAE,QAAQ;AACjF;AACA,mBAAmB;AACnB;AACA;AACA;AACA,qBAAqB,WAAW,EAAE,kBAAkB,EAAE,UAAU,EAAE,QAAQ;AAC1E;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACvLA,8BAA8B,mBAAO,CAAC,mDAAwC;AAC9E,8BAA8B,qFACnB;AACX,+BAA+B,sFACpB;AACX;AACA;AACA;AACA,oBAAoB,mBAAO,CAAC,yEAA8D;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,mCAAmC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,sDAAsD,EAAE;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC,oCAAoC,EAAE,GAAG;AACzC,+BAA+B;AAC/B;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,eAAe;AAC7B,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,UAAU;AACV;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,YAAY;AAC3D;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP;AACA;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,mBAAmB;AACnB;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,+BAA+B;AAC/B;AACA,yBAAyB;AACzB;AACA,mBAAmB;AACnB;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,mBAAmB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,SAAS,GAAG,oBAAoB;AAC7E;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA,0CAA0C,SAAS;AACnD;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA,iFAAiF;AACjF;AACA,+BAA+B,sBAAsB,GAAG,aAAa;AACrE;AACA,sBAAsB;AACtB;AACA;AACA,aAAa;AACb;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,KAAK;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,OAAO;AAC3D;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,mDAAmD,OAAO;AAC1D;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,SAAS,EAAE,OAAO;AACpD,8BAA8B,SAAS,EAAE,OAAO;AAChD;AACA,eAAe,SAAS,EAAE,OAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,cAAc;AACvE,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,WAAW,EAAE,kBAAkB,EAAE,UAAU,EAAE,eAAe;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC5gCA,6BAA6B,mBAAO,CAAC,kDAAuC;AAC5E;AACA,qBAAqB,mBAAO,CAAC,uCAA4B;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,QAAQ;AACvE;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,kBAAkB,WAAW,yBAAyB,wBAAwB,iBAAiB,mBAAmB;AAC/J;AACA;AACA;AACA;AACA,gDAAgD,uBAAuB,mBAAmB,aAAa,WAAW,yBAAyB,wBAAwB,iBAAiB,mBAAmB;AACvM;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,uBAAuB,IAAI,cAAc;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,2BAA2B,UAAU,EAAE,WAAW,EAAE,kBAAkB,EAAE,SAAS,EAAE,eAAe;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;;;;;;;;;;AClNA,iCAAiC,mBAAO,CAAC,sDAA2C;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,QAAQ;AACzC;AACA;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACjGA,6BAA6B,mBAAO,CAAC,kDAAuC;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA,+DAA+D,QAAQ;AACvE;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACvHA,+BAA+B,mBAAO,CAAC,oDAAyC;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,OAAO;AACzC,iCAAiC,OAAO;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,kBAAkB,WAAW,yBAAyB,wBAAwB,iBAAiB,mBAAmB,gCAAgC,YAAY;AAC9N;AACA,0DAA0D,oBAAoB,IAAI,uBAAuB,mBAAmB,aAAa,WAAW,yBAAyB,wBAAwB,iBAAiB,mBAAmB,IAAI,YAAY;AACzP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,cAAc;AACvE;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;;;;;;;;;;AChLA,qCAAqC,mBAAO,CAAC,0DAA+C;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA,kCAAkC,OAAO;AACzC,gCAAgC,OAAO;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,QAAQ;AAC7C;AACA;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,SAAS;AACtD;AACA;AACA;AACA,yDAAyD,eAAe,WAAW,UAAU,cAAc,OAAO,UAAU,KAAK;AACjI;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;;;;;;;;;;AC1LA,mCAAmC,mBAAO,CAAC,wDAA6C;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA,kCAAkC,OAAO;AACzC,gCAAgC,OAAO;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,QAAQ;AAC3C;AACA;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,WAAW;AAC3D;AACA;AACA,4DAA4D,eAAe,WAAW,UAAU,cAAc,SAAS,UAAU,YAAY;AAC7I;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACtLA,8BAA8B,mBAAO,CAAC,mDAAwC;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA,gEAAgE,QAAQ;AACxE;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,UAAU,OAAO,mBAAmB,EAAE,SAAS,EAAE,eAAe;AACjG;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACvKA,2BAA2B,mBAAO,CAAC,gDAAqC;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA,kCAAkC,OAAO;AACzC,gCAAgC,OAAO;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,QAAQ;AACrE;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,kBAAkB,WAAW,yBAAyB,wBAAwB,iBAAiB,mBAAmB;AAC/J;AACA;AACA;AACA;AACA,gDAAgD,uBAAuB,mBAAmB,aAAa,WAAW,yBAAyB,wBAAwB,iBAAiB,mBAAmB;AACvM;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACzLA,wBAAwB,mBAAO,CAAC,6CAAkC;AAClB;AAChD;AACA;AACA;AACA,oBAAoB,2BAA2B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,IAAI;AACJ,mBAAmB,6BAA6B;AAChD,kBAAkB;AAClB;AACA,mCAAmC,wDAAe;AAClD;AACA,0CAA0C,aAAa;AACvD;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,UAAU,SAAS,SAAS;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,iBAAiB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB,mBAAmB;AACnB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA,cAAc,KAAK;AACnB;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,UAAU;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,kBAAkB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,iBAAiB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AC3lBA,uBAAuB,mBAAO,CAAC,4CAAiC;AAChB;AAChD;AACoD;AACa;AACN;AACc;AACzE;AACA,GAAG,sFAA0D;AAC7D;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,IAAI,QAAQ,aAAa,aAAa,GAAG,cAAc;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,wDAAe;AACjD;AACA,yCAAyC,YAAY;AACrD;AACA;AACA,0BAA0B,KAAK;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,yDAAyD;AACzD,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,YAAY,KAAK;AACjB;AACA,UAAU;AACV;AACA;AACA,6BAA6B,8DAAa;AAC1C;AACA,UAAU;AACV;AACA;AACA,0CAA0C,kEAAsB;AAChE;AACA;AACA;AACA;AACA;AACA,6CAA6C,kEAAgB;AAC7D;AACA;AACA;AACA,OAAO;AACP,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,IAAI;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,UAAU;AACnC,sBAAsB,UAAU;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA,mBAAmB,UAAU;AAC7B;AACA,mBAAmB,MAAM;AACzB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,cAAc;AACdgBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,cAAc;AAC1D;AACA;AACA;AACA;AACA;AACA,cAAc,IAAI;AAClB;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,oBAAoB;AACpB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,cAAc,kBAAkB;AAChC;AACA,cAAc,KAAK;AACnB,mBAAmB,eAAe,UAAU;AAC5C,cAAc,iBAAiB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,kBAAkB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,qBAAqB;AAC7D,+BAA+B,kBAAkB,IAAI,QAAQ;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,sBAAsB,yBAAyB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,yBAAyB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,cAAc,MAAM;AACpB,gBAAgB;AAChB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB;AACnB,oBAAoB,wEAAwE;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA,mBAAmB;AACnB,WAAW;AACX;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,cAAc,KAAK;AACnB,cAAc,KAAK;AACnB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,EAAE;AACzE;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,cAAc;AACd,4BAA4B;AAC5B;AACA;AACA;AACA;AACA,yBAAyB;AACzB,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,iBAAiB,KAAK;AAClE;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA,UAAU,OAAO;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,sBAAsB;AACtB,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,6CAA6C;AACnE;AACA,kDAAkD,kBAAkB;AACpE,mBAAmB,wBAAwB;AAC3C,UAAU;AACV;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,mBAAmB,wBAAwB;AAC3C,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,2CAA2C;AAC9D,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,kBAAkB;AAC5D,mBAAmB,wBAAwB;AAC3C,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,mBAAmB;AAC9D,mBAAmB,wBAAwB;AAC3C,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,QAAQ;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,gBAAgB,QAAQ,GAAG,uCAAuC;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,WAAW;AACzB,cAAc,YAAY;AAC1B;AACA;AACA;AACA,kDAAkD,eAAe;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,oBAAoB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,QAAQ;AACR;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,WAAW;AACX;AACA,iDAAiD,kBAAkB,eAAe,gBAAgB;AAClG;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,UAAU;AACV,QAAQ;AACR;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,QAAQ;AACR;AACA;AACA;AACA;AACA;AACe;AACf;AACA,cAAc,KAAK;AACnB,cAAc,eAAe;AAC7B,cAAc,cAAc;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,aAAa;AACb;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,YAAY;AAC9D;AACA;AACA;AACA,sDAAsD,YAAY;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,YAAY;AACnE;AACA;AACA;AACA,qDAAqD,YAAY;AACjsBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB,sBAAsB;AACtB;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,OAAO;AACzE;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB,sBAAsB;AACtB;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,4BAA4B;AAC5B;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,4BAA4B;AAC5B;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,4BAA4B;AAC5B;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,4BAA4B;AAC5B;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,4BAA4B;AAC5B;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,gBAAgB;AAChB,aAAa;AACb,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,KAAK;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChcAAc,KAAK;AACnB,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,uEAAuE;AACvE,mBAAmB;AACnB,gBAAgB;AAChB;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,eAAe;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,oBAAoB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA,0BAA0B;AAC1B;AACA;AACA,0BAA0B;AAC1B;AACA,0BAA0B;AAC1B;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,4BAA4B;AAC5B,yBAAyB;AACzB;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,+BAA+B;AAC/B,yBAAyB;AACzB,uBAAuB;AACvB;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,mBAAmB;AACnB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA,6BAA6B;AAC7B;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,sBAAsB;AACtB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA,4BAA4B;AAC5B;AACA,sBAAsB;AACtB,mBAAmB;AACnB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,gFAAgB;AACnD;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC7wHA;AACA;AACA;AACA;AACA;AACA;AAC0C;AAC1C;AACe,sCAAsC,mDAAO;AAC5D;AACA;AACA;AACA;AACA,yBAAyB,OAAO;AAChC,kBAAkB,OAAO;AACzB,OAAO;AACP;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,mCAAmC;AACpD,iBAAiB,qCAAqC;AACtD,iBAAiB,iCAAiC;AAClD,iBAAiB,mCAAmC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,kBAAkB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,UAAU;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,YAAY;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,iFAAiF,KAAK;AACtF;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACnOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC0C;AACH;AACvC;AACA;AACA;AACe,wCAAwC,mDAAO;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B,oBAAoB,OAAO;AAC3B,OAAO;AACP;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA,4BAA4B,mDAAU;AACtC,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB;AACA,gBAAgB;AAChB;AACA,UAAU;AACV;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,UAAU;AACxB;AACA,cAAc,iBAAiB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,cAAc;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB,iBAAiB;AACjB;AACA;AACA,aAAa;AACb,UAAU;AACV,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACvOA;AACA;AACA;AACA;AACA;AACA;AACA;AAC0C;AAC1C;AACA;AACA;AACe,uDAAuD,mDAAO;AAC7E;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B,kBAAkB,OAAO;AACzB,kBAAkB,OAAO;AACzB,OAAO;AACP;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,mBAAmB;AACnB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,mBAAmB;AACnB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,mBAAmB;AACnB,gBAAgB;AAChB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA,eAAe,OAAO,IAAI,YAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,UAAU;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,aAAa;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,wCAAwC;AACzD,iBAAiB,yCAAyC;AAC1D;AACA;AACA;AACA;AACA,iBAAiB,+BAA+B;AAChD,iBAAiB,gCAAgC;AACjD;AACA;AACA;AACA;AACA;AACA,iBAAiB,+BAA+B;AAChD,iBAAiB,gCAAgC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,wBAAwB;AACvF;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,wBAAwB;AACvF;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA,cAAc,MAAM;AACpB;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;;;;;;;;;;AC3gBA,wBAAwB,mBAAO,CAAC,6CAAkC;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,0CAA0C;AAC1C;AACA;AACA,cAAc;AACd,sCAAsC,0BAA0B,GAAG,UAAU;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,sBAAsB;AACtB;AACA,8DAA8D;AAC9D,mBAAmB;AACnB,gBAAgB;AAChB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,KAAK;AACpB;AACA;AACA,kCAAkC,QAAQ;AAC1C;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,uBAAuB,YAAY,qBAAqB,WAAW,oBAAoB;AACnI;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACnMA,yBAAyB,mBAAO,CAAC,8CAAmC;AACpB;AAChD;AACA,+BAA+B,sFACpB;AACX;AACA,wBAAwB,mBAAO,CAAC,wCAA6B;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,wDAAe;AACnD;AACA,2CAA2C,cAAc;AACzD;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,mBAAmB;AACnB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,gDAAgD,uBAAuB,iCAAiC;AACzH;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,4DAA4D,UAAU;AACtE;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,cAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,cAAc;AACd;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,UAAU;AACV,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,SAAS;AAC3C,kCAAkC,SAAS;AAC3C,kCAAkC,SAAS;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC/lBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gEAAoC;AAC5D,mBAAmB,mBAAO,CAAC,yBAAc;AACzC,yBAAyB,mBAAO,CAAC,+BAAoB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,aAAa;AACzC;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV,sBAAsB,YAAY;AAClC;AACA;AACA,+CAA+C;AAC/C,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,mBAAmB;AACnB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,QAAQ,GAAG,MAAM,GAAG,MAAM;AAC5D;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,cAAc;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,cAAc;AAChE,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,kDAAkD,cAAc;AAChE,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,cAAc;AAChE,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,kDAAkD,cAAc;AAChE,sBAAsB;AACtB;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACtQA,wBAAwB,mBAAO,CAAC,6CAAkC;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA,mBAAmB;AACnB;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA,mBAAmB;AACnB;AACA,aAAa;AACb,UAAU;AACV,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,kCAAkC,QAAQ;AAC1C;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACjPA,wBAAwB,mBAAO,CAAC,iDAAsC;AACtE,yBAAyB,mBAAO,CAAC,8CAAmC;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA,kCAAkC,OAAO;AACzC,6BAA6B,OAAO;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,UAAU,uBAAuB;AAClE;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,kDAAkD,EAAE;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,gBAAgB;AAChB,aAAa;AACb;AACA,UAAU;AACV;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,sBAAsB;AACtB,mBAAmB;AACnB,gBAAgB;AAChB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,QAAQ;AACtB;AACA,eAAe,KAAK;AACpB;AACA;AACA,mCAAmC,eAAe,EAAE,QAAQ;AAC5D;AACA,kCAAkC,OAAO;AACzC;AACA;AACA,uDAAuD,KAAK;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC3PA,uBAAuB,mBAAO,CAAC,4CAAiC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,YAAY;AAC1B,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACvMA,uBAAuB,mBAAO,CAAC,4CAAiC;AAChE,kBAAkB,mBAAO,CAAC,wBAAa;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA,kCAAkC,OAAO;AACzC,8BAA8B,OAAO;AACrC,6BAA6B,OAAO;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,mBAAmB,EAAE;AAClD;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,yBAAyB;AACzB,6BAA6B,WAAW;AACxC,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB,mBAAmB;AACnB;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,eAAe;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA,4DAA4D;AAC5D,+CAA+C;AAC/C,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB,mBAAmB;AACnB;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB,iBAAiB,SAAS;AAC1B,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,UAAU;AACV,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,8EAA8E;AAC9E;AACA,+CAA+C;AAC/C;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,gCAAgC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,KAAK;AACpB;AACA;AACA,kCAAkC,QAAQ;AAC1C;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,gBAAgB,EAAE,SAAS,EAAE,QAAQ;AACvE;AACA,gBAAgB;AAChB,aAAa;AACb,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,yBAAyB;AACzB,WAAW;AACX;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACh9BA,uBAAuB,mBAAO,CAAC,4CAAiC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,cAAc;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,gBAAgB;AAChB,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8BAA8B;AAC/C,iBAAiB,gCAAgC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA,sBAAsB;AACtB,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB,6BAA6B;AAC7B;AACA,mBAAmB;AACnB;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,uBAAuB;AACxD;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB,mBAAmB;AACnB;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,cAAc;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACxaA,wBAAwB,mBAAO,CAAC,6CAAkC;AAClE,yBAAyB,mBAAO,CAAC,2CAAgC;AACjE,uBAAuB,mBAAO,CAAC,yCAA8B;AAC7D,sBAAsB,mBAAO,CAAC,wCAA6B;AAC3D,sBAAsB,mBAAO,CAAC,6BAAkB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA,kCAAkC,OAAO;AACzcAAc,KAAK;AACnB,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA,kCAAkC,QAAQ;AAC1C;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC1RA,iCAAiC,mBAAO,CAAC,sDAA2C;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA,0CAA0C,QAAQ;AAClD;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,QAAQ;AAChD,4BAA4B;AAC5B,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,QAAQ;AAChD,4BAA4B;AAC5B,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,+BAA+B;AAC/B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,QAAQ;AAChD,4BAA4B;AAC5B,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,QAAQ;AAChD,4BAA4B;AAC5B,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,4BAA4B;AAC5B;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,KAAK,GAAG,KAAK,GAAG;AACxD;AACA,4BAA4B;AAC5B;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,MAAM,GAAG,2BAA2B;AAC/F,2DAA2D,MAAM;AACjE;AACA;AACA;AACA;AACA;AACA,2DAA2D,MAAM,GAAG,2BAA2B;AAC/F,2DAA2D,MAAM;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,MAAM;AACpE;AACA,kEAAkE,MAAM;AACxE;AACA,8DAA8D,MAAM;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C,wCAAwC;AACxC,qCAAqC;AACrC;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,QAAQ;AAC7D,2CAA2C;AAC3C,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,yBAAyB;AACrD,4BAA4B,yBAAyB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA,4BAA4B;AAC5B;AACA,uBAAuB;AACvB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,mBAAmB;AACnB;AACA,aAAa;AACb;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C,wCAAwC,kBAAkB;AAC1D;AACA;AACA;AACA,2CAA2C,kBAAkB,GAAG,WAAW;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,IAAI;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,iDAAiD,IAAI;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA,yBAAyB;AACzB;AACA;AACA,sBAAsB;AACtB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC7yBA,sBAAsB,mBAAO,CAAC,2CAAgC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA,kCAAkC,OAAO;AACzC,6BAA6B,OAAO;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,EAAE;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB,mBAAmB;AACnB;AACA;AACA;AACA,0BAA0B,iBAAiB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB;AACA,mBAAmB;AACnB;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8BAA8B;AAC/C,iBAAiB,gCAAgC;AACjD;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,OAAO;AACP;AACA;AACA;AACA,kCAAkC,OAAO;AACzC,gCAAgC,OAAO;AACvC,mCAAmC,OAAO;AAC1C,qCAAqC,OAAO;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,OAAO;AAC3C;AACA;AACA,4BAA4B;AAC5B,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,OAAO;AAC3C;AACA;AACA,4BAA4B;AAC5B,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,4CAA4C,iBAAiB;AAC7D;AACA;AACA;AACA;AACA,kDAAkD,iBAAiB;AACnE;AACA;AACA;AACA,4CAA4C,eAAe;AAC3D;AACA;AACA;AACA;AACA,gDAAgD,eAAe;AAC/D;AACA;AACA;AACA;AACA,+CAA+C,QAAQ;AACvD;AACA;AACA;AACA;AACA,qCAAqC,4BAA4B,GAAG,QAAQ;AAC5E;AACA,+BAA+B;AAC/B;AACA,yBAAyB;AACzB,sBAAsB;AACtB,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,sBAAsB;AACtB,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,+BAA+B;AAC/B,4BAA4B;AAC5B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,4BAA4B;AAC5B,yBAAyB;AACzB;AACA,sBAAsB;AACtB;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,cAAc;AACd;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,gCAAgC,OAAO;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,cAAc;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACvkCA,uBAAuB,mBAAO,CAAC,4CAAiC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qCAAqC;AAC7D,wBAAwB,0EAA0E;AAClG,0BAA0B;AAC1B,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,EAAE,aAAa;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,YAAY;AAC1B,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA,iCAAiC,yBAAyB,EAAE,QAAQ;AACpE;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC3QA,yBAAyB,mBAAO,CAAC,8CAAmC;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AClF6C;AAC7C;AACe,6BAA6B,mDAAO;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,QAAQ;AACtB;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACnG8C;AAC9C;AACA;AACA;AACe,oCAAoC,uDAAc;AACjE;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,OAAO;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,OAAO;AACrC;AACA,+BAA+B,OAAO;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,wBAAwB,EAAE,UAAU;AACjF,0DAA0D,wDAAwD,OAAO;AACzH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,yBAAyB;AACzB,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,sBAAsB;AAC9E,2DAA2D;AAC3D,mEAAmE;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D,yCAAyC;AACzC,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AClV4D;AAC5D;AACA;AACA;AACe,qCAAqC,8DAAqB;AACzE;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,OAAO;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,SAAS,IAAI,QAAQ;AACvD,sBAAsB;AACtB;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,OAAO;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACrJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B;AACA,sBAAsB,OAAO;AAC7B;AACA;AACA;AACA;AACA;AACA;AAC8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,uCAAuC,uDAAc;AACpE;AACA;AACA,yBAAyB,OAAO;AAChC,uCAAuC,OAAO;AAC9C,8BAA8B,OAAO;AACrC,+BAA+B,OAAO;AACtC,+BAA+B,OAAO;AACtC,uBAAuB,OAAO;AAC9B,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,mDAAmD,mBAAmB;AACtE,UAAU;AACV;AACA;AACA;AACA;AACA,YAAY,mBAAmB;AAC/B;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,2CAA2C;AAClE,uBAAuB,qCAAqC;AAC5D,uBAAuB,mCAAmC;AAC1D,uBAAuB,2CAA2C;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,mBAAmB;AACnB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,8CAA8C;AACrE,uBAAuB,4CAA4C;AACnE;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,iCAAiC;AAC9D,6BAA6B,2BAA2B;AACxD;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,uBAAuB;AACvB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,sBAAsB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,4BAA4B;AAC5B;AACA;AACA;AACA,qCAAqC,cAAc;AACnD;AACA;AACA,4BAA4B;AAC5B,6BAA6B,iBAAiB;AAC9C;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB;AACA,gBAAgB;AAChB;AACA,yBAAyB,4BAA4B;AACrD;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB,uBAAuB,iBAAiB;AACxC;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,aAAa;AACb;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,uBAAuB,KAAK;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,UAAU;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,mBAAmB;AACnB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,mBAAmB;AACnB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA,sBAAsB;AACtB;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,oBAAoB;AAChD,+BAA+B,iBAAiB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,YAAY;AAC3D;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,OAAO;AAC1D,uDAAuD,OAAO;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,OAAO;AAC3C;AACA,eAAe,OAAO;AACtB;AACA,yCAAyC,OAAO;AAChD,0CAA0C,OAAO;AACjD,0CAA0C,OAAO;AACjD,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,mBAAmB;AACnB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,mBAAmB;AACnB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,mBAAmB;AACnB,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,mBAAmB;AACnB,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,UAAU;AACjC;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,kDAAkD;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,sDAAsD,YAAY;AAClE,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,oBAAoB;AACvD,oCAAoC,iBAAiB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AClvC8C;AAC9C;AACA;AACA;AACe,qCAAqC,uDAAc;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,gCAAgC;AACvE,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB,wBAAwB,OAAO;AAC/B,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACvQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,wCAAwC,MAAM;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACrEA;AACA;AACA;AACA;AACA,kCAAkC,mBAAO,CAAC,wCAA6B;AACvE,oCAAoC,mBAAO,CAAC,0CAA+B;AAC3E,mCAAmC,mBAAO,CAAC,yCAA8B;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACxKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA,8BAA8B,mBAAO,CAAC,oCAAyB;AAC/D,uCAAuC,mBAAO,CAAC,6CAAkC;AACjF;AACA,4BAA4B,mBAAO,CAAC,2EAAgE;AACpG;AACA,oBAAoB,mBAAO,CAAC,sCAA2B;AACvD,sBAAsB,mBAAO,CAAC,wCAA6B;AAC3D,sBAAsB,mBAAO,CAAC,wCAA6B;AAC3D,wBAAwB,mBAAO,CAAC,0CAA+B;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,OAAO;AACrC,kCAAkC,OAAO;AACzC,gCAAgC,OAAO;AACvC,iCAAiC,OAAO;AACxC,iCAAiC,OAAO;AACxC,8BAA8B,OAAO;AACrC;AACA;AACA;AACA;AACA;AACA,oBAAoB,WAAW,QAAQ,kBAAkB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,WAAW,QAAQ,kBAAkB;AACzD;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,oBAAoB,WAAW,QAAQ,kBAAkB;AACzD;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,WAAW,QAAQ,kBAAkB;AACzD;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qFAAqF;AACrF;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,qFAAqF;AACrF;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,qFAAqF;AACrF;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,oFAAoF;AACpF;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,oFAAoF;AACpF;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,wFAAwF;AACxF;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB;AACA,mBAAmB;AACnB;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,kBAAkB;AAClB,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,MAAM;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACneA;AACA;AACA;AACA;AACA,8BAA8B,mBAAO,CAAC,oCAAyB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,MAAM;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC7EA;AACA;AACA;AACA;AACA,8BAA8B,mBAAO,CAAC,oCAAyB;AAC/D,uCAAuC,mBAAO,CAAC,6CAAkC;AACjF;AACA,4BAA4B,mBAAO,CAAC,2EAAgE;AACpG;AACA,uBAAuB,mBAAO,CAAC,yCAA8B;AAC7D,oBAAoB,mBAAO,CAAC,sCAA2B;AACvD,oBAAoB,mBAAO,CAAC,sCAA2B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,OAAO;AAChC,yBAAyB,OAAO;AAChC,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,WAAW,QAAQ,kBAAkB;AAC5D;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oFAAoF;AACpF;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,4BAA4B;AAC5B;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA,iFAAiF;AACjF;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,+BAA+B;AAC/B,4BAA4B;AAC5B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA,wFAAwF;AACxF;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB;AACA,mBAAmB;AACnB;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,MAAM;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC/WA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK,YAAY,OAAO;AACtC,cAAc,OAAO;AACrB,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,cAAc;AACd;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO,GAAG,IAAI,GAAG,iBAAiB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,iBAAiB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,mBAAmB;AACnB,oBAAoB,iBAAiB;AACrC;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,oBAAoB,KAAK,YAAY,OAAO;AAC5C,oBAAoB,OAAO;AAC3B,oBAAoB,MAAM;AAC1B;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA,cAAc,iDAAiD;AAC/D,gBAAgB,iDAAiD;AACjE,gBAAgB,iDAAiD;AACjE,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB,UAAU;AACV;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,KAAK;AACtB;AACA;AACA,aAAa,eAAe;AAC5B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,kBAAkB,OAAO;AACzB;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;;;;;;;;;;AC7WA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,mBAAO,CAAC,sDAA2C;AAC9E;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA,4CAA4C;AAC5C;AACA,gCAAgC;AAChC;AACA,oCAAoC,2BAA2B;AAC/D,OAAO;AACP;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,iCAAiC;AACjC;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO,GAAG,IAAI,GAAG,iBAAiB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,yBAAyB;AACzB;AACA,mBAAmB;AACnB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC3cA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,YAAY;AAC1B;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA,4BAA4B;AAC5B,kDAAkD;AAClD;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,OAAO,GAAG,IAAI;AAC5C;AACA;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB,GAAG,YAAY;AAC5D,OAAO;AACP;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,UAAU;AACV,OAAO;AACP;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA,YAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA,cAAc,iDAAiD;AAC/D,gBAAgB,iDAAiD;AACjE,gBAAgB,iDAAiD;AACjE,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP;AACA;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACtQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjE,2BAA2B,cAAc;AACzC,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,kBAAkB,4BAA4B;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B,mBAAmB,OAAO;AAC1B,6BAA6B,OAAO;AACpC;AACA,oBAAoB,OAAO;AAC3B,kBAAkB,OAAO;AACzB;AACA,oBAAoB,OAAO;AAC3B,iBAAiB,OAAO;AACxB,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB;AACA,0BAA0B,4BAA4B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,sBAAsB;AACtB;AACA,mBAAmB;AACnB;AACA,yBAAyB,4BAA4B;AACrD;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB,uBAAuB,iBAAiB;AACxC;AACA,gBAAgB;AAChB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA,YAAY,eAAe;AAC3B,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,UAAU;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB,UAAU;AACV;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;;;;;;;;;;ACpZA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mBAAO,CAAC,6BAAkB;AACjD,mBAAmB,mBAAO,CAAC,yBAAc;AACzC;AACA,2BAA2B,mBAAO,CAAC,8DAAoD;AACvF,4BAA4B,mBAAO,CAAC,wEAA6D;AACjG,4BAA4B,mBAAO,CAAC,wEAA6D;AACjG,4BAA4B,mBAAO,CAAC,uEAA6D;AACjG;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mBAAO,CAAC,6BAAkB;AACjD,mBAAmB,mBAAO,CAAC,yBAAc;AACzC;AACA,2BAA2B,mBAAO,CAAC,uEAA4D;AAC/F,sBAAsB,mBAAO,CAAC,kEAAuD;AACrF,uBAAuB,mBAAO,CAAC,mEAAwD;AACvF,uBAAuB,mBAAO,CAAC,mEAAwD;AACvF,oBAAoB,mBAAO,CAAC,gEAAqD;AACjF,kBAAkB,mBAAO,CAAC,6DAAmD;AAC7E;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B;AACA,wCAAwC,YAAY;AACpD,yCAAyC,YAAY;AACrD,yCAAyC,YAAY;AACrD,sCAAsC,YAAY;AAClD,oCAAoC,YAAY;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAO,CAAC,4DAAiD;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,yBAAyB,KAAK;AAC9B,yBAAyB,YAAY;AACrC,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AClIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,mBAAO,CAAC,4DAAiD;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,yBAAyB,KAAK;AAC9B,yBAAyB,YAAY;AACrC,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,aAAa;AACb,OAAO;AACP;AACA;;;;;;;;;;;AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,mBAAO,CAAC,4CAAiC;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,mBAAO,CAAC,4CAAiC;AAC/E,uBAAuB,mBAAO,CAAC,qDAA0C;AACzE,2BAA2B,mBAAO,CAAC,uDAA4C;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA,mCAAmC;AACnC;AACA;AACA,+BAA+B;AAC/B;AACA,4BAA4B;AAC5B,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO,IAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,SAAS;AACpC,eAAe;AACf;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,gBAAgB;AAChB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,UAAU;AACV,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,yBAAyB,KAAK;AAC9B,yBAAyB,YAAY;AACrC,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,yCAAyC,iBAAiB,MAAM;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,KAAK;AACzB,oBAAoB,KAAK;AACzB;AACA,uDAAuD;AACvD;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,6BAA6B,kBAAkB;AAC/C;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,UAAU,GAAG;AACb,OAAO,GAAG;AACV;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK,0BAA0B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACnhBA;AACA;AACA;AACA;AACA;AACA,yBAAyB,mBAAO,CAAC,gCAAqB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,0BAA0B;AAC1B;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;;;;;;;;;;ACvGA;AACA;AACA;AACA;AACA;AACA,yBAAyB,mBAAO,CAAC,gCAAqB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,0BAA0B;AAC1B;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC1JA;AACA;AACA;AACA;AACA;AACA,yBAAyB,mBAAO,CAAC,gCAAqB;AACtD,uBAAuB,mBAAO,CAAC,qDAA0C;AACzE,qBAAqB,mBAAO,CAAC,mDAAwC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,0BAA0B;AAC1B;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,OAAO;AACzB,mBAAmB,OAAO;AAC1B,kBAAkB,OAAO;AACzB,+BAA+B,OAAO;AACtC,sBAAsB,OAAO;AAC7B,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,+BAA+B;AAC/B;AACA,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,gCAAgC;AAChC,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,+BAA+B,qCAAqC,GAAG;AACvE;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB,sBAAsB;AACtB;AACA,gBAAgB;AAChB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,mCAAmC;AACnC,gDAAgD,mBAAmB;AACnE,4CAA4C,iBAAiB;AAC7D;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,wBAAwB;AACjD;AACA,4BAA4B,wBAAwB;AACpD,4BAA4B,0BAA0B;AACtD,4BAA4B;AAC5B;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,0BAA0B,yCAAyC;AACnE,0BAA0B,qCAAqC;AAC/D;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,4BAA4B;AAC5B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,+BAA+B;AAC/B;AACA,4BAA4B;AAC5B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,+BAA+B;AAC/B;AACA,4BAA4B;AAC5B,yBAAyB;AACzB;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,mBAAmB;AACnB;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,qDAAqD,oBAAoB;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,eAAe;AAC/D;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,sCAAsC,YAAY,0CAA0C,YAAY;AACxG,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,SAAS,GAAG,eAAe;AAC9D,sCAAsC,cAAc,GAAG,SAAS,GAAG,YAAY;AAC/E,uBAAuB;AACvB,oCAAoC,eAAe;AACnD,sCAAsC,cAAc,GAAG,QAAQ;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,MAAM,GAAG,KAAK;AAChD,qCAAqC,SAAS,GAAG,QAAQ;AACzD,yBAAyB;AACzB,sBAAsB;AACtB;AACA,aAAa;AACb;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,IAAI,EAAE,YAAY;AAC1D;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,mBAAmB,KAAK;AACxB,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC,kCAAkC;AAClC;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,gBAAgB;AAChB;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,EAAE,SAAS;AAC5D;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB;AACA;AACA,mBAAmB;AACnB;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACvuBA;AACA;AACA;AACA;AACA;AACA,yBAAyB,mBAAO,CAAC,gCAAqB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,0BAA0B;AAC1B;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,OAAO;AACjC;AACA;AACA;AACA,eAAe,uDAAuD;AACtE;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,QAAQ;AACzC,8BAA8B;AAC9B,6BAA6B,QAAQ;AACrC,8BAA8B,OAAO;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACxQA;AACA;AACA;AACA;AACA;AACA,yBAAyB,mBAAO,CAAC,gCAAqB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,0BAA0B;AAC1B;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;;;;;;;;;;AC/FA;AACA;AACA;AACA;AACA;AACA,yBAAyB,mBAAO,CAAC,gCAAqB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,0BAA0B;AAC1B;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA,yBAAyB,+CAA+C;AACxE;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACvJA;AACA;AACA;AACA;AACA;AACA,yBAAyB,mBAAO,CAAC,gCAAqB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA,0BAA0B;AAC1B;AACA,YAAY;AACZ;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO,GAAG,IAAI,GAAG,iBAAiB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,oBAAoB,KAAK;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA,aAAa;AACb;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,wCAAwC,gBAAgB;AACxD;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,8BAA8B;AAC9B,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,4BAA4B;AACrE,aAAa;AACb;AACA;AACA;AACA,iBAAiB,iDAAiD;AAClE;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA,+BAA+B;AAC/B,4BAA4B;AAC5B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,iCAAiC;AACxE,yBAAyB;AACzB;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA,oCAAoC,OAAO;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,4BAA4B;AACxE,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,qBAAqB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,+BAA+B;AAC/B,4BAA4B;AAC5B;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,qBAAqB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,+BAA+B;AAC/B,4BAA4B;AAC5B;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,oBAAoB;AACpB,gEAAgE;AAChE,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,mBAAmB;AACnB;AACA,aAAa;AACb,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,KAAK;AACnB,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA,oFAAoF;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uFAAuF;AACvF;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,UAAU;AACV,UAAU;AACV;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe;AACf;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,gBAAgB;AAChB;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA,OAAO;AACP;AACA;AACA;;;;;;;;;;;;;;;;;;;AClzCA;AACA;AACA;AACA;AACA;AACA;AAC4C;AACF;AACd;AAC5B;AACA,iEAAe;AACf;AACA;AACA;AACA,gBAAgB,qDAAY;AAC5B;AACA,aAAa,sDAAa;AAC1B,IAAI;AACJ,UAAU,oDAAW;AACrB,CAAC,EAAC;;;;;;;;;;;;;;;;ACnBF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;;ACtDF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;;ACpDF,iEAAe;AACfrxBF,aAAa,GAAG,IAAsD,EAAE,mBAAmB,KAAK,UAAkO,CAAC,aAAa,0BAA0B,yBAAyB,gBAAgB,UAAU,UAAU,MAAM,SAAmC,CAAC,gBAAgB,OAAC,OAAO,oBAAoB,8CAA8C,kCAAkC,YAAY,YAAY,mCAAmC,iBAAiB,gBAAgB,sBAAsB,oBAAoB,MAAM,SAAmC,CAAC,YAAY,WAAW,YAAY,SAAS,EAAE,oCAAoC,aAAa,+CAA+C,6CAA6C,+BAA+B,wBAAwB,EAAE,gBAAgB,sCAAsC,aAAa,4BAA4B,wCAAwC,YAAY,eAAe,KAAK,wBAAwB,mDAAmD,6BAA6B,iDAAiD,yDAAyD,oDAAoD,iEAAiE,yDAAyD,oBAAoB,GAAG,+CAA+C,uCAAuC,0DAA0D,mCAAmC,oCAAoC,UAAU,uCAAuC,sCAAsC,oDAAoD,mDAAmD,oDAAoD,qEAAqE,6DAA6D,gDAAgD,iDAAiD,uCAAuC,0BAA0B,wDAAwD,iCAAiC,uBAAuB,qCAAqC,aAAa,+BAA+B,iDAAiD,sDAAsD,yDAAyD,4FAA4F,0BAA0B,sFAAsF,iEAAiE,+BAA+B,SAAS,uDAAuD,gBAAgB,+EAA+E,UAAU,oDAAoD,mEAAmE,0EAA0E,wCAAwC,IAAI,KAAK,iDAAiD,mCAAmC,gBAAgB,EAAE,mDAAmD,+DAA+D,uEAAuE,uCAAuC,2BAA2B,+CAA+C,WAAW,KAAK,EAAE,8EAA8E,4DAA4D,+DAA+D,4EAA4E,iDAAiD,EAAE,wBAAwB,OAAO,0DAA0D,mDAAmD,yBAAyB,+CAA+C,2CAA2C,2BAA2B,EAAE,sEAAsE,YAAY,IAAI,wDAAwD,kDAAkD,oCAAoC,kDAAkD,WAAW,uCAAuC,cAAc,mDAAmD,yDAAyD,oDAAoD,wEAAwE,sDAAsD,yBAAyB,kCAAkC,uCAAuC,wGAAwG,iEAAiE,kCAAkC,eAAe,GAAG,kBAAkB,GAAG,EAAE,eAAe,sCAAsC,aAAa,gBAAgB,2CAA2C,qiCAAqiC,qCAAqC,i3BAAi3B,4DAA4D,yrDAAyrD,2DAA2D,gWAAgW,qCAAqC,6qBAA6qB,qCAAqC,uRAAuR,qCAAqC,2XAA2X,qCAAqC,4cAA4c,GAAG,sCAAsC,aAAa,wCAAwC,eAAe,+BAA+B,4DAA4D,EAAE,KAAK,eAAe,WAAW,iCAAiC,0CAA0C,kDAAkD,+BAA+B,gBAAgB,qBAAqB,yBAAyB,2BAA2B,cAAc,aAAa,kBAAkB,EAAE,mBAAmB,qCAAqC,iBAAiB,kBAAkB,2BAA2B,SAAS,SAAS,oDAAoD,QAAQ,QAAQ,IAAI,iCAAiC,cAAc,2BAA2B,YAAY,mBAAmB,MAAM,iBAAiB,sBAAsB,YAAY,cAAc,MAAM,8BAA8B,eAAe,mCAAmC,wBAAwB,qCAAqC,gCAAgC,IAAI,kBAAkB,iBAAiB,6DAA6D,SAAS,yBAAyB,sBAAsB,6DAA6D,YAAY,gCAAgC,wCAAwC,4CAA4C,0BAA0B,0BAA0B,EAAE,+CAA+C,kBAAkB,UAAU,aAAa,WAAW,WAAW,GAAG,iCAAiC,EAAE,wBAAwB,oCAAoC,6CAA6C,4EAA4E,wCAAwC,OAAO,yIAAyI,EAAE,qCAAqC,aAAa,6CAA6C,IAAI,KAAK,6BAA6B,sCAAsC,eAAe,qCAAqC,6BAA6B,yBAAyB,aAAa,6CAA6C,IAAI,KAAK,6BAA6B,sCAAsC,eAAe,iCAAiC,wCAAwC,uCAAuC,4CAA4C,yCAAyC,cAAc,MAAM,yDAAyD,mCAAmC,mCAAmC,8CAA8C,kBAAkB,iBAAiB,yCAAyC,iBAAiB,+BAA+B,EAAE,mBAAmB,oCAAoC,gCAAgC,sCAAsC,sGAAsG,gBAAgB,4LAA4L,UAAU,iDAAiD,gCAAgC,IAAI,KAAK,mBAAmB,kCAAkC,UAAU,qBAAqB,2DAA2D,GAAG,gDAAgD,gCAAgC,yBAAyB,KAAK,KAAK,kBAAkB,8FAA8F,UAAU,qBAAqB,0DAA0D,GAAG,wBAAwB,oCAAoC,mDAAmD,EAAE,yEAAyE,sCAAsC,aAAa,4BAA4B,wCAAwC,YAAY,eAAe,KAAK,wBAAwB,mDAAmD,6BAA6B,iDAAiD,yDAAyD,oDAAoD,iEAAiE,yDAAyD,oBAAoB,GAAG,+CAA+C,uCAAuC,0DAA0D,oCAAoC,mCAAmC,6BAA6B,yBAAyB,oCAAoC,uBAAuB,2HAA2H,iBAAiB,gBAAgB,kBAAkB,EAAE,6BAA6B,uDAAuD,mCAAmC,aAAa,EAAE,oDAAoD,eAAe,qBAAqB,qDAAqD,wCAAwC,oEAAoE,EAAE,mDAAmD,gEAAgE,qEAAqE,6BAA6B,aAAa,EAAE,0CAA0C,kBAAkB,iFAAiF,aAAa,aAAa,EAAE,uDAAuD,mDAAmD,oBAAoB,qCAAqC,EAAE,uCAAuC,qEAAqE,EAAE,qCAAqC,gBAAgB,0EAA0E,wBAAwB,uBAAuB,0DAA0D,iDAAiD,eAAe,mFAAmF,gDAAgD,iDAAiD,oBAAoB,GAAG,EAAE,sCAAsC,YAAY,iEAAiE,EAAE,EAAE,eAAe,sCAAsC,YAAY,yBAAyB,EAAE,EAAE,+CAA+C,qCAAqC,8BAA8B,EAAE,uDAAuD,oCAAoC,GAAG,EAAE,8CAA8C,6BAA6B,qBAAqB,sCAAsC,iCAAiC,qBAAqB,wCAAwC,EAAE,0DAA0D,4BAA4B,iFAAiF,0CAA0C,EAAE,EAAE,aAAa,EAAE,2CAA2C,eAAe,aAAa,EAAE,qCAAqC,iBAAiB,EAAE,mEAAmE,2CAA2C,2DAA2D,EAAE,qGAAqG,gBAAgB,iBAAiB,mBAAmB,qDAAqD,6BAA6B,EAAE,+CAA+C,iCAAiC,4DAA4D,EAAE,mDAAmD,mFAAmF,EAAE,2DAA2D,eAAe,4BAA4B,GAAG,qBAAqB,GAAG,8CAA8C,yCAAyC,sDAAsD,2DAA2D,kDAAkD,6BAA6B,EAAE,4FAA4F,sCAAsC,aAAa,0BAA0B,yBAAyB,qBAAqB,oCAAoC,kCAAkC,kCAAkC,0BAA0B,qBAAqB,oCAAoC,sCAAsC,qCAAqC,6BAA6B,qBAAqB,oCAAoC,yCAAyC,kCAAkC,0BAA0B,iBAAiB,6BAA6B,qBAAqB,oCAAoC,sCAAsC,gBAAgB,uHAAuH,GAAG,sCAAsC,aAAa,yCAAyC,4DAA4D,6CAA6C,2DAA2D,uCAAuC,wBAAwB,kDAAkD,0GAA0G,iBAAiB,EAAE,uDAAuD,gOAAgO,wBAAwB,kDAAkD,gFAAgF,iBAAiB,EAAE,oDAAoD,wOAAwO,gBAAgB,iDAAiD,EAAE,+HAA+H,sCAAsC,aAAa,+BAA+B,oCAAoC,8BAA8B,qDAAqD,yCAAyC,0DAA0D,cAAc,uDAAuD,YAAY,wDAAwD,eAAe,2DAA2D,aAAa,iBAAiB,yBAAyB,yBAAyB,qBAAqB,YAAY,iBAAiB,QAAQ,2BAA2B,sCAAsC,OAAO,2DAA2D,6DAA6D,aAAa,iCAAiC,uEAAuE,OAAO,mBAAmB,qCAAqC,OAAO,oBAAoB,kCAAkC,yBAAyB,kBAAkB,GAAG,EAAE,oBAAoB,4BAA4B,mCAAmC,gBAAgB,MAAM,kBAAkB,mCAAmC,2CAA2C,sEAAsE,yBAAyB,eAAe,SAAS,mBAAmB,mEAAmE,EAAE,oBAAoB,4CAA4C,mDAAmD,gBAAgB,yJAAyJ,UAAU,4CAA4C,mDAAmD,gBAAgB,mKAAmK,UAAU,2DAA2D,sBAAsB,wBAAwB,UAAU,gBAAgB,kDAAkD,gGAAgG,kGAAkG,sCAAsC,2BAA2B,UAAU,EAAE,KAAK,2BAA2B,UAAU,GAAG,yBAAyB,kCAAkC,EAAE,oBAAoB,wBAAwB,gGAAgG,gBAAgB,2BAA2B,UAAU,GAAG,yCAAyC,eAAe,cAAc,GAAG,iCAAiC,gBAAgB,cAAc,gCAAgC,GAAG,mBAAmB,eAAe,mCAAmC,eAAe,yCAAyC,aAAa,0CAA0C,4CAA4C,aAAa,wDAAwD,oBAAoB,0BAA0B,EAAE,iKAAiK,oDAAoD,qBAAqB,yDAAyD,cAAc,qBAAqB,iDAAiD,2DAA2D,0CAA0C,0BAA0B,+FAA+F,0DAA0D,iBAAiB,aAAa,aAAa,cAAc,eAAe,UAAU,uDAAuD,4EAA4E,mBAAmB,YAAY,2BAA2B,EAAE,YAAY,qDAAqD,EAAE,mFAAmF,EAAE,kCAAkC,qCAAqC,mBAAmB,YAAY,2BAA2B,EAAE,aAAa,SAAS,gBAAgB,2CAA2C,oBAAoB,yBAAyB,iCAAiC,0CAA0C,qCAAqC,oCAAoC,EAAE,yCAAyC,mCAAmC,gBAAgB,YAAY,iCAAiC,0CAA0C,0BAA0B,iDAAiD,qCAAqC,yEAAyE,uBAAuB,uBAAuB,SAAS,GAAG,QAAQ,KAAK,qBAAqB,EAAE,gBAAgB,6CAA6C,2DAA2D,aAAa,iDAAiD,qDAAqD,mBAAmB,aAAa,2BAA2B,EAAE,uCAAuC,oBAAoB,yBAAyB,mBAAmB,cAAc,KAAK,iCAAiC,mBAAmB,aAAa,2BAA2B,EAAE,gBAAgB,EAAE,6BAA6B,sCAAsC,aAAa,uBAAuB,0CAA0C,qBAAqB,kCAAkC,wEAAwE,iBAAiB,uBAAuB,GAAG,uCAAuC,aAAa,wCAAwC,gBAAgB,4BAA4B,IAAI,KAAK,+BAA+B,SAAS,uFAAuF,YAAY,kBAAkB,qCAAqC,gBAAgB,gCAAgC,kDAAkD,wBAAwB,IAAI,qCAAqC,sBAAsB,EAAE,uCAAuC,gCAAgC,SAAS,EAAE,QAAQ,wBAAwB,8CAA8C,qDAAqD,oBAAoB,IAAI,oBAAoB,GAAG,uCAAuC,aAAa,qBAAqB,qBAAqB,SAAS,gCAAgC,cAAc,uIAAuI,6CAA6C,mBAAmB,GAAG,2GAA2G,4CAA4C,uCAAuC,EAAE,eAAe,GAAG,uCAAuC,aAAa,2BAA2B,sCAAsC,qCAAqC,yCAAyC,iFAAiF,gCAAgC,8CAA8C,8BAA8B,+CAA+C,+CAA+C,8CAA8C,2BAA2B,gBAAgB,qEAAqE,UAAU,oDAAoD,sBAAsB,6EAA6E,gBAAgB,kLAAkL,UAAU,kCAAkC,sBAAsB,qBAAqB,mBAAmB,mGAAmG,0BAA0B,sBAAsB,SAAS,gBAAgB,yBAAyB,YAAY,gBAAgB,KAAK,2BAA2B,iDAAiD,kBAAkB,kFAAkF,mCAAmC,yCAAyC,EAAE;AAC5t+B,iDAAiD,yBAAyB,6BAA6B,iCAAiC,EAAE,qBAAqB,iEAAiE,uDAAuD,uCAAuC,kCAAkC,iBAAiB,EAAE,yBAAyB,2BAA2B,2CAA2C,mCAAmC,sBAAsB,yEAAyE,cAAc,sCAAsC,0DAA0D,4DAA4D,mBAAmB,EAAE,uBAAuB,sBAAsB,gDAAgD,gFAAgF,iCAAiC,iDAAiD,YAAY,qBAAqB,iBAAiB,wBAAwB,cAAc,2CAA2C,sBAAsB,wBAAwB,oCAAoC,yBAAyB,yBAAyB,0CAA0C,yBAAyB,mBAAmB,iBAAiB,OAAO,0BAA0B,iCAAiC,EAAE,uFAAuF,uCAAuC,aAAa,qCAAqC,uCAAuC,yCAAyC,sBAAsB,gBAAgB,2DAA2D,sBAAsB,uBAAuB,gCAAgC,OAAO,4GAA4G,gCAAgC,OAAO,2GAA2G,gCAAgC,OAAO,2EAA2E,gCAAgC,0DAA0D,6DAA6D,OAAO,uFAAuF,YAAY,gDAAgD,6BAA6B,OAAO,gDAAgD,wDAAwD,WAAW,wBAAwB,EAAE,YAAY,KAAK,sCAAsC,yDAAyD,YAAY,kBAAkB,yBAAyB,8EAA8E,uDAAuD,UAAU,+BAA+B,2BAA2B,IAAI,iEAAiE,OAAO,6BAA6B,0BAA0B,4BAA4B,EAAE,wCAAwC,uCAAuC,aAAa,4BAA4B,wCAAwC,YAAY,eAAe,KAAK,wBAAwB,mDAAmD,6BAA6B,iDAAiD,yDAAyD,oDAAoD,iEAAiE,yDAAyD,oBAAoB,GAAG,+CAA+C,uCAAuC,0DAA0D,qCAAqC,gCAAgC,wBAAwB,yCAAyC,yDAAyD,mFAAmF,2BAA2B,gBAAgB,4IAA4I,UAAU,wBAAwB,+FAA+F,kDAAkD,qCAAqC,qBAAqB,OAAO,yEAAyE,wCAAwC,wCAAwC,GAAG,EAAE,YAAY,4BAA4B,wBAAwB,mCAAmC,yBAAyB,4BAA4B,kFAAkF,iDAAiD,gBAAgB,EAAE,qDAAqD,uBAAuB,gCAAgC,YAAY,OAAO,iEAAiE,EAAE,iDAAiD,2CAA2C,+EAA+E,GAAG,EAAE,iDAAiD,6BAA6B,YAAY,oDAAoD,gBAAgB,+BAA+B,OAAO,cAAc,GAAG,oBAAoB,GAAG,0BAA0B,kCAAkC,EAAE,sDAAsD,uCAAuC,aAAa,4BAA4B,wCAAwC,YAAY,eAAe,KAAK,wBAAwB,mDAAmD,6BAA6B,iDAAiD,yDAAyD,oDAAoD,iEAAiE,yDAAyD,oBAAoB,GAAG,+CAA+C,uCAAuC,0DAA0D,yCAAyC,sBAAsB,kBAAkB,6BAA6B,mBAAmB,sBAAsB,kCAAkC,iBAAiB,2BAA2B,mBAAmB,qBAAqB,EAAE,2DAA2D,eAAe,+DAA+D,cAAc,2BAA2B,cAAc,UAAU,GAAG,cAAc,GAAG,0BAA0B,4BAA4B,EAAE,uBAAuB,uCAAuC,aAAa,yCAAyC,mBAAmB,gEAAgE,aAAa,kBAAkB,+CAA+C,gFAAgF,aAAa,YAAY,4CAA4C,4CAA4C,iBAAiB,KAAK,kBAAkB,+EAA+E,yCAAyC,cAAc,SAAS,cAAc,KAAK,yCAAyC,gBAAgB,0BAA0B,+BAA+B,EAAE,uBAAuB,uCAAuC,aAAa,oCAAoC,YAAY,6CAA6C,qCAAqC,oCAAoC,0CAA0C,EAAE,2BAA2B,8CAA8C,gCAAgC,wCAAwC,EAAE,SAAS,yBAAyB,qCAAqC,gDAAgD,wBAAwB,6BAA6B,IAAI,KAAK,uBAAuB,+CAA+C,iBAAiB,0BAA0B,qBAAqB,YAAY,wBAAwB,8BAA8B,iBAAiB,2CAA2C,6BAA6B,uCAAuC,2BAA2B,2DAA2D,4CAA4C,aAAa,4CAA4C,EAAE,6CAA6C,aAAa,cAAc,sBAAsB,cAAc,kBAAkB,yDAAyD,gCAAgC,KAAK,sBAAsB,cAAc,mBAAmB,cAAc,OAAO,sBAAsB,EAAE,gBAAgB,uCAAuC,aAAa,4CAA4C,oCAAoC,oCAAoC,0BAA0B,qCAAqC,IAAI,KAAK,+BAA+B,4CAA4C,mBAAmB,uBAAuB,aAAa,yBAAyB,sBAAsB,gCAAgC,0BAA0B,kEAAkE,2CAA2C,8CAA8C,mBAAmB,4BAA4B,8BAA8B,oDAAoD,gBAAgB,+BAA+B,kCAAkC,6CAA6C,kBAAkB,0DAA0D,WAAW,sBAAsB,EAAE,qCAAqC,uCAAuC,aAAa,4BAA4B,wCAAwC,YAAY,eAAe,KAAK,wBAAwB,mDAAmD,6BAA6B,iDAAiD,yDAAyD,oDAAoD,iEAAiE,yDAAyD,oBAAoB,GAAG,+CAA+C,uCAAuC,0DAA0D,+BAA+B,4BAA4B,+BAA+B,mCAAmC,iCAAiC,iCAAiC,2BAA2B,4BAA4B,8DAA8D,yBAAyB,iEAAiE,EAAE,iFAAiF,aAAa,iBAAiB,EAAE,2DAA2D,uEAAuE,EAAE,yEAAyE,+CAA+C,0CAA0C,kCAAkC,6DAA6D,4BAA4B,kBAAkB,eAAe,KAAK,eAAe,gDAAgD,OAAO,6BAA6B,uDAAuD,iBAAiB,gEAAgE,EAAE,gDAAgD,+CAA+C,eAAe,kBAAkB,kBAAkB,mCAAmC,IAAI,wBAAwB,aAAa,qEAAqE,gBAAgB,kIAAkI,UAAU,IAAI,yBAAyB,sCAAsC,EAAE,aAAa,mEAAmE,gBAAgB,4IAA4I,UAAU,6BAA6B,qCAAqC,eAAe,EAAE,4EAA4E,aAAa,qEAAqE,2BAA2B,+CAA+C,6CAA6C,kCAAkC,GAAG,oBAAoB,GAAG,mDAAmD,sCAAsC,aAAa,yBAAyB,qBAAqB,yBAAyB,kCAAkC,4BAA4B,EAAE,aAAa,uCAAuC,aAAa,oCAAoC,+BAA+B,4CAA4C,+DAA+D,2BAA2B,gBAAgB,oGAAoG,UAAU,qCAAqC,qBAAqB,aAAa,kCAAkC,uCAAuC,+CAA+C,iDAAiD,2BAA2B,YAAY,QAAQ,EAAE,aAAa,mCAAmC,qCAAqC,yBAAyB,qBAAqB,kBAAkB,EAAE,cAAc,gBAAgB,cAAc,KAAK,YAAY,iBAAiB,iCAAiC,aAAa,KAAK,2BAA2B,iCAAiC,2BAA2B,cAAc,mCAAmC,0CAA0C,YAAY,qBAAqB,KAAK,8BAA8B,wCAAwC,cAAc,aAAa,4CAA4C,6CAA6C,mCAAmC,cAAc,kBAAkB,6BAA6B,IAAI,mDAAmD,iDAAiD,iBAAiB,2BAA2B,8BAA8B,EAAE,2CAA2C,iDAAiD,4BAA4B,4GAA4G,EAAE,+CAA+C,4BAA4B,mCAAmC,2FAA2F,yCAAyC,+DAA+D,gEAAgE,oBAAoB,gBAAgB,KAAK,wCAAwC,8CAA8C,EAAE,kBAAkB,gBAAgB,+DAA+D,EAAE,6BAA6B,uCAAuC,aAAa,oCAAoC,iCAAiC,kCAAkC,2BAA2B,QAAQ,6CAA6C,iBAAiB,kCAAkC,wBAAwB,eAAe,0BAA0B,iBAAiB,cAAc,wBAAwB,+BAA+B,gDAAgD,iEAAiE,oDAAoD,gEAAgE,uCAAuC,wBAAwB,QAAQ,6CAA6C,eAAe,0BAA0B,iBAAiB,aAAa,qBAAqB,4BAA4B,6CAA6C,gEAAgE,oCAAoC,WAAW,0CAA0C,WAAW,oBAAoB,8BAA8B,kDAAkD,8GAA8G,sDAAsD,yDAAyD,SAAS,EAAE,+CAA+C,SAAS,EAAE,gCAAgC,iCAAiC,8CAA8C,2DAA2D,EAAE,8BAA8B,uCAAuC,aAAa,4BAA4B,wCAAwC,YAAY,eAAe,KAAK,wBAAwB,mDAAmD,6BAA6B,iDAAiD,yDAAyD,oDAAoD,iEAAiE,yDAAyD,oBAAoB,GAAG,+CAA+C,uCAAuC,0DAA0D,oCAAoC,4CAA4C,wCAAwC,+BAA+B,6BAA6B,kCAAkC,mCAAmC,4CAA4C,6CAA6C,+CAA+C,sBAAsB,EAAE,oEAAoE,0BAA0B,uCAAuC,mCAAmC,uBAAuB,iBAAiB,SAAS,wBAAwB,EAAE,mBAAmB,4BAA4B,wCAAwC,8BAA8B,+DAA+D,wDAAwD,UAAU,sBAAsB,EAAE,2CAA2C,6BAA6B,uDAAuD,kCAAkC,EAAE,aAAa,EAAE,gDAAgD,+BAA+B,6BAA6B,2CAA2C,iDAAiD,iEAAiE,QAAQ,EAAE,+CAA+C,wEAAwE,EAAE,gDAAgD,sCAAsC,gBAAgB,GAAG,EAAE,mCAAmC,2CAA2C,sFAAsF,EAAE,iBAAiB,SAAS,wBAAwB,EAAE,sDAAsD,iBAAiB,SAAS,kBAAkB,EAAE,kDAAkD,iBAAiB,SAAS,oBAAoB,EAAE,2DAA2D,aAAa,EAAE,qCAAqC,iBAAiB,SAAS,4BAA4B,EAAE,sBAAsB,kIAAkI,EAAE,iBAAiB,SAAS,sBAAsB,EAAE,aAAa,GAAG,oBAAoB,GAAG,EAAE,mHAAmH,uCAAuC,4BAA4B,uBAAuB,YAAY,8DAA8D,yBAAyB,sBAAsB,kDAAkD,sCAAsC,4BAA4B,mCAAmC,eAAe,yCAAyC,YAAY,uCAAuC,oEAAoE,8CAA8C,gCAAgC,mBAAmB,mBAAmB,gDAAgD,0EAA0E,WAAW,yCAAyC,KAAK,6CAA6C,uBAAuB,yDAAyD,eAAe,qCAAqC,kBAAkB,qBAAqB,oBAAoB,6CAA6C,oBAAoB,oBAAoB,sBAAsB,oBAAoB,qCAAqC,mBAAmB,WAAW,oCAAoC,+CAA+C,eAAe,iBAAiB,eAAe,oBAAoB,oBAAoB,sBAAsB,iBAAiB,gCAAgC,mCAAmC,uCAAuC,sBAAsB,yBAAyB,gEAAgE,iBAAiB,4CAA4C,2DAA2D,iBAAiB,0DAA0D,qBAAqB,uBAAuB,uBAAuB,wCAAwC,YAAY,MAAM,KAAK,iCAAiC,4BAA4B,4BAA4B,mDAAmD,iDAAiD,gCAAgC,2BAA2B,mDAAmD,gCAAgC,4BAA4B,uCAAuC,0CAA0C,oCAAoC,6CAA6C,0DAA0D,yCAAyC,wBAAwB,gDAAgD,yCAAyC,sCAAsC,UAAU,eAAe,gDAAgD,KAAK,4CAA4C,wBAAwB,0CAA0C,6BAA6B,+BAA+B,+CAA+C,+BAA+B,wBAAwB,qBAAqB,sCAAsC,yBAAyB,sBAAsB,sCAAsC,sCAAsC,uCAAuC,0CAA0C,yBAAyB,uBAAuB,gBAAgB,qBAAqB,iBAAiB,2CAA2C,iCAAiC,kCAAkC,uDAAuD,wCAAwC,wBAAwB,yBAAyB,gEAAgE,uBAAuB,+DAA+D,4BAA4B,oEAAoE,cAAc,qBAAqB,MAAM,gFAAgF,uCAAuC,2BAA2B,kCAAkC,KAAK,sCAAsC,mDAAmD,cAAc,4LAA4L,qCAAqC,aAAa,EAAE,oCAAoC,2BAA2B,6BAA6B,KAAK,yCAAyC,yCAAyC,mFAAmF,qDAAqD,4BAA4B,EAAE,sBAAsB,uCAAuC,wBAAwB,kBAAkB,gBAAgB,+BAA+B,uBAAuB,kBAAkB,uCAAuC,iBAAiB,2BAA2B,cAAc,4BAA4B,QAAQ,WAAW,qBAAqB,0BAA0B,6BAA6B,qCAAqC,sBAAsB,0CAA0C,gBAAgB,yCAAyC,6CAA6C,mCAAmC,qDAAqD,2DAA2D,uCAAuC,uEAAuE,yCAAyC,2CAA2C,sDAAsD,8DAA8D,4CAA4C,qBAAqB,wBAAwB,2FAA2F,uGAAuG,gHAAgH,iGAAiG,0GAA0G,oGAAoG,4HAA4H,kFAAkF,8FAA8F,uGAAuG,gGAAgG,iFAAiF,qHAAqH,4FAA4F,mGAAmG,oCAAoC,6BAA6B,kBAAkB,KAAK,WAAW,wCAAwC,oCAAoC,sEAAsE,gBAAgB,kDAAkD,aAAa,uCAAuC,iCAAiC,qBAAqB,oBAAoB,8BAA8B,yBAAyB,sCAAsC,mBAAmB,cAAc,KAAK,iDAAiD,sBAAsB,oCAAoC,gBAAgB,sBAAsB,sBAAsB,+BAA+B,uDAAuD,mBAAmB,iCAAiC,iCAAiC,cAAc,eAAe,wCAAwC,sBAAsB,gBAAgB,gCAAgC,yBAAyB,mCAAmC,kBAAkB,WAAW,mBAAmB,WAAW,gDAAgD,YAAY,2CAA2C,KAAK,4BAA4B,OAAO,wBAAwB,yBAAyB,QAAQ,4CAA4C,kCAAkC,wCAAwC,gCAAgC,SAAS,4BAA4B,mBAAmB,kBAAkB,sBAAsB,OAAO,yBAAyB,QAAQ,gCAAgC,yBAAyB,KAAK,kEAAkE,wBAAwB,iEAAiE,kBAAkB,WAAW,iBAAiB,uBAAuB,cAAc,6BAA6B,yBAAyB,+BAA+B,4CAA4C,6CAA6C,oDAAoD,eAAe,+BAA+B,iCAAiC,+BAA+B,4CAA4C,8DAA8D,oDAAoD,eAAe,+BAA+B,gCAAgC,+CAA+C,YAAY,oDAAoD,qDAAqD,+CAA+C,YAAY,iDAAiD,kBAAkB,WAAW,iBAAiB,+DAA+D,aAAa,cAAc,qCAAqC,kBAAkB,aAAa,6BAA6B,mCAAmC,6BAA6B,qCAAqC,mDAAmD;AAC3u+B,YAAY,KAAK,cAAc,6DAA6D,qBAAqB,wBAAwB,4BAA4B,oBAAoB,YAAY,yBAAyB,kBAAkB,yDAAyD,sBAAsB,WAAW,8DAA8D,0BAA0B,wBAAwB,4BAA4B,uBAAuB,uBAAuB,cAAc,iBAAiB,gBAAgB,6OAA6O,6CAA6C,0CAA0C,qCAAqC,aAAa,4BAA4B,gCAAgC,mCAAmC,gCAAgC,wCAAwC,0BAA0B,6BAA6B,0BAA0B,qDAAqD,sBAAsB,0BAA0B,aAAa,2BAA2B,8DAA8D,uBAAuB,4BAA4B,KAAK,kBAAkB,aAAa,uCAAuC,qEAAqE,0BAA0B,gCAAgC,qCAAqC,YAAY,UAAU,kBAAkB,QAAQ,kBAAkB,yBAAyB,WAAW,8DAA8D,YAAY,qCAAqC,YAAY,UAAU,kBAAkB,QAAQ,kBAAkB,oBAAoB,8DAA8D,YAAY,2CAA2C,2CAA2C,sBAAsB,wBAAwB,oBAAoB,gBAAgB,iBAAiB,kBAAkB,yBAAyB,EAAE,oBAAoB,8BAA8B,mCAAmC,mBAAmB,YAAY,yBAAyB,GAAG,8BAA8B,aAAa,8BAA8B,qBAAqB,yCAAyC,gBAAgB,4BAA4B,wCAAwC,8DAA8D,mDAAmD,gBAAgB,4BAA4B,wCAAwC,uDAAuD,yCAAyC,kBAAkB,WAAW,qBAAqB,aAAa,yBAAyB,KAAK,wBAAwB,QAAQ,aAAa,cAAc,wBAAwB,cAAc,wCAAwC,mCAAmC,2BAA2B,aAAa,0BAA0B,KAAK,2BAA2B,SAAS,8BAA8B,KAAK,8BAA8B,oDAAoD,aAAa,sDAAsD,2BAA2B,OAAO,yBAAyB,+CAA+C,iCAAiC,mBAAmB,gBAAgB,+BAA+B,KAAK,0BAA0B,iEAAiE,6BAA6B,8BAA8B,QAAQ,yBAAyB,KAAK,+BAA+B,oBAAoB,6BAA6B,KAAK,kCAAkC,GAAG,+BAA+B,2DAA2D,gEAAgE,8CAA8C,4CAA4C,gBAAgB,iDAAiD,2BAA2B,OAAO,6BAA6B,yBAAyB,6BAA6B,6BAA6B,+BAA+B,6BAA6B,0BAA0B,QAAQ,yBAAyB,KAAK,+BAA+B,8BAA8B,6DAA6D,gBAAgB,oBAAoB,8HAA8H,8CAA8C,8BAA8B,aAAa,2BAA2B,kCAAkC,WAAW,gBAAgB,gEAAgE,8BAA8B,kFAAkF,gCAAgC,mCAAmC,0BAA0B,mCAAmC,wCAAwC,0CAA0C,6BAA6B,aAAa,+CAA+C,gCAAgC,gCAAgC,SAAS,cAAc,EAAE,WAAW,iCAAiC,qBAAqB,wBAAwB,sBAAsB,qBAAqB,6BAA6B,2CAA2C,yBAAyB,YAAY,mCAAmC,8BAA8B,wBAAwB,6BAA6B,YAAY,+BAA+B,kBAAkB,wBAAwB,sBAAsB,YAAY,8BAA8B,qBAAqB,wBAAwB,sBAAsB,YAAY,mCAAmC,0BAA0B,wBAAwB,sBAAsB,YAAY,mDAAmD,mCAAmC,wBAAwB,gCAAgC,8BAA8B,YAAY,gCAAgC,kBAAkB,wBAAwB,eAAe,mBAAmB,oBAAoB,oBAAoB,YAAY,sCAAsC,6BAA6B,wBAAwB,mBAAmB,YAAY,sDAAsD,qBAAqB,gCAAgC,2CAA2C,6BAA6B,wBAAwB,4BAA4B,2BAA2B,+BAA+B,iBAAiB,kBAAkB,qBAAqB,KAAK,6BAA6B,yBAAyB,YAAY,wDAAwD,kBAAkB,gCAAgC,wBAAwB,4BAA4B,wBAAwB,+BAA+B,oBAAoB,iBAAiB,kBAAkB,qBAAqB,KAAK,6BAA6B,cAAc,wBAAwB,mBAAmB,eAAe,mBAAmB,kDAAkD,yCAAyC,6BAA6B,qCAAqC,4BAA4B,iCAAiC,0CAA0C,mCAAmC,kDAAkD,mCAAmC,4BAA4B,gCAAgC,qCAAqC,qCAAqC,gCAAgC,+CAA+C,wCAAwC,KAAK,0CAA0C,oCAAoC,6CAA6C,sCAAsC,+CAA+C,uCAAuC,yDAAyD,oDAAoD,wDAAwD,mCAAmC,iDAAiD,6DAA6D,iDAAiD,yDAAyD,4BAA4B,2DAA2D,0EAA0E,mCAAmC,4BAA4B,qDAAqD,8DAA8D,wCAAwC,4CAA4C,UAAU,+BAA+B,qFAAqF,eAAe,EAAE,UAAU,EAAE,yDAAyD,4CAA4C,UAAU,+BAA+B,oJAAoJ,eAAe,EAAE,UAAU,IAAI,+EAA+E,mFAAmF,uBAAuB,iBAAiB,uCAAuC,oBAAoB,0BAA0B,yBAAyB,6CAA6C,gDAAgD,2BAA2B,oBAAoB,8BAA8B,wBAAwB,kCAAkC,gCAAgC,gCAAgC,yDAAyD,mCAAmC,kCAAkC,yCAAyC,wCAAwC,0CAA0C,oBAAoB,8BAA8B,0BAA0B,6BAA6B,iBAAiB,gBAAgB,+DAA+D,mBAAmB,mCAAmC,8BAA8B,8BAA8B,wBAAwB,uDAAuD,oBAAoB,uDAAuD,iBAAiB,6BAA6B,oBAAoB,mBAAmB,2CAA2C,gCAAgC,yBAAyB,wBAAwB,uDAAuD,qCAAqC,yBAAyB,mDAAmD,4BAA4B,qBAAqB,0CAA0C,wBAAwB,mBAAmB,sCAAsC,sBAAsB,4BAA4B,yDAAyD,+BAA+B,6BAA6B,yDAAyD,2DAA2D,gCAAgC,kCAAkC,qEAAqE,qCAAqC,0BAA0B,2EAA2E,2DAA2D,8CAA8C,kDAAkD,WAAW,uDAAuD,0BAA0B,6BAA6B,sBAAsB,qCAAqC,iBAAiB,wBAAwB,0BAA0B,GAAG,gEAAgE,oBAAoB,4DAA4D,2BAA2B,0BAA0B,kBAAkB,aAAa,uGAAuG,aAAa,+BAA+B,WAAW,4BAA4B,sBAAsB,0BAA0B,YAAY,yEAAyE,eAAe,sBAAsB,SAAS,0BAA0B,eAAe,QAAQ,KAAK,QAAQ,sBAAsB,6DAA6D,oDAAoD,0BAA0B,qBAAqB,0BAA0B,0BAA0B,0CAA0C,uBAAuB,YAAY,MAAM,KAAK,uBAAuB,yBAAyB,wBAAwB,2CAA2C,EAAE,gCAAgC,wBAAwB,+BAA+B,GAAG,YAAY,MAAM,KAAK,uBAAuB,uDAAuD,2BAA2B,0BAA0B,wCAAwC,0BAA0B,wBAAwB,4BAA4B,EAAE,gEAAgE,uDAAuD,2BAA2B,0BAA0B,wCAAwC,0BAA0B,wBAAwB,4BAA4B,EAAE,sEAAsE,cAAc,uCAAuC,aAAa,eAAe,qBAAqB,KAAK,iEAAiE,yBAAyB,KAAK,aAAa,iEAAiE,yBAAyB,4BAA4B,KAAK,eAAe,OAAO,yEAAyE,aAAa,iEAAiE,wBAAwB,OAAO,qGAAqG,uEAAuE,qEAAqE,0DAA0D,gDAAgD,wBAAwB,iCAAiC,UAAU,4BAA4B,sBAAsB,sBAAsB,eAAe,2BAA2B,iCAAiC,KAAK,4BAA4B,QAAQ,uBAAuB,cAAc,OAAO,sFAAsF,+DAA+D,GAAG,sCAAsC,mCAAmC,UAAU,sBAAsB,8CAA8C,wBAAwB,kCAAkC,8BAA8B,MAAM,WAAW,4BAA4B,wBAAwB,sBAAsB,SAAS,0BAA0B,aAAa,8CAA8C,yBAAyB,aAAa,kCAAkC,+BAA+B,mBAAmB,cAAc,uBAAuB,gBAAgB,aAAa,oBAAoB,8BAA8B,wBAAwB,uBAAuB,4CAA4C,6CAA6C,qBAAqB,2BAA2B,YAAY,MAAM,KAAK,0DAA0D,MAAM,8BAA8B,SAAS,0BAA0B,aAAa,6CAA6C,yBAAyB,aAAa,mCAAmC,kBAAkB,IAAI,0BAA0B,uDAAuD,eAAe,sBAAsB,sBAAsB,EAAE,oDAAoD,eAAe,4BAA4B,oBAAoB,sBAAsB,qEAAqE,kCAAkC,uBAAuB,0DAA0D,MAAM,uBAAuB,gBAAgB,sBAAsB,EAAE,8BAA8B,sBAAsB,yDAAyD,qBAAqB,YAAY,yCAAyC,+BAA+B,sBAAsB,oBAAoB,+BAA+B,mCAAmC,yBAAyB,UAAU,4CAA4C,oCAAoC,GAAG,uCAAuC,qKAAqK,gHAAgH,4HAA4H,YAAY,aAAa,mBAAmB,WAAW,0BAA0B,iBAAiB,kBAAkB,kBAAkB,sBAAsB,qBAAqB,8CAA8C,+BAA+B,2BAA2B,kCAAkC,EAAE,kEAAkE,2BAA2B,0EAA0E,iCAAiC,eAAe,YAAY,6DAA6D,kDAAkD,KAAK,kCAAkC,2BAA2B,oBAAoB,mBAAmB,oBAAoB,2BAA2B,kEAAkE,KAAK,0CAA0C,UAAU,yBAAyB,cAAc,mDAAmD,mBAAmB,yBAAyB,sCAAsC,WAAW,uBAAuB,gDAAgD,kBAAkB,8BAA8B,qBAAqB,mCAAmC,gBAAgB,cAAc,sCAAsC,+BAA+B,iBAAiB,8BAA8B,EAAE,gBAAgB,YAAY,YAAY,IAAI,uCAAuC,eAAe,yCAAyC,uBAAuB,kDAAkD,sBAAsB,+BAA+B,OAAO,mBAAmB,qBAAqB,kCAAkC,+CAA+C,6CAA6C,4BAA4B,UAAU,2DAA2D,gFAAgF,8BAA8B,8BAA8B,sCAAsC,mEAAmE,8BAA8B,iCAAiC,qCAAqC,oGAAoG,sBAAsB,2DAA2D,eAAe,8BAA8B,qCAAqC,cAAc,6GAA6G,KAAK,wBAAwB,MAAM,MAAM,oCAAoC,iDAAiD,MAAM,oCAAoC,sDAAsD,MAAM,oCAAoC,6BAA6B,8DAA8D,2FAA2F,kBAAkB,8DAA8D,eAAe,oBAAoB,gDAAgD,iBAAiB,mCAAmC,EAAE,YAAY,MAAM,KAAK,YAAY,mBAAmB,gCAAgC,EAAE,4BAA4B,8CAA8C,oBAAoB,2BAA2B,KAAK,8CAA8C,qBAAqB,wDAAwD,6EAA6E,KAAK,QAAQ,SAAS,8CAA8C,OAAO,cAAc,UAAU,KAAK,yCAAyC,0BAA0B,0BAA0B,8BAA8B,SAAS,yFAAyF,aAAa,UAAU,cAAc,YAAY,YAAY,uBAAuB,UAAU,uBAAuB,+BAA+B,OAAO,0BAA0B,OAAO,KAAK,uDAAuD,MAAM,yCAAyC,eAAe,uDAAuD,+BAA+B,UAAU,0BAA0B,QAAQ,4CAA4C,mBAAmB,+BAA+B,aAAa,KAAK,yDAAyD,gCAAgC,4CAA4C,mBAAmB,6BAA6B,4EAA4E,UAAU,aAAa,KAAK,kDAAkD,MAAM,kBAAkB,gDAAgD,gEAAgE,eAAe,6DAA6D,6DAA6D,MAAM,qDAAqD,aAAa,qCAAqC,SAAS,kBAAkB,gDAAgD,wDAAwD,iEAAiE,0BAA0B,eAAe,wBAAwB,uCAAuC,eAAe,2BAA2B,+DAA+D,sCAAsC,0BAA0B,KAAK,wGAAwG,mFAAmF,0BAA0B,MAAM,sDAAsD,SAAS,cAAc,mBAAmB,UAAU,gDAAgD,cAAc,MAAM,2CAA2C,eAAe,MAAM,yEAAyE,mBAAmB,+DAA+D,6BAA6B,8BAA8B,OAAO,KAAK,UAAU,yCAAyC,2GAA2G,0FAA0F,gCAAgC,QAAQ,SAAS,MAAM,oFAAoF,0BAA0B,QAAQ,MAAM,gCAAgC,QAAQ,MAAM,iGAAiG,KAAK,mDAAmD,uBAAuB,oBAAoB,gBAAgB,WAAW,YAAY,kBAAkB,kBAAkB,2BAA2B,UAAU,uCAAuC,iCAAiC,yCAAyC,KAAK,gBAAgB,YAAY,6BAA6B,sBAAsB,qBAAqB,qBAAqB,cAAc,kCAAkC,EAAE,kDAAkD,sCAAsC,+CAA+C,gBAAgB,WAAW,QAAQ,oBAAoB,WAAW,mBAAmB,6CAA6C,qBAAqB,iCAAiC,6BAA6B,UAAU,sCAAsC,4CAA4C,KAAK,YAAY,+BAA+B,uCAAuC,iDAAiD,cAAc,4CAA4C,eAAe,0BAA0B,sCAAsC,KAAK,6BAA6B,yBAAyB,aAAa,sFAAsF,2CAA2C,2DAA2D,mDAAmD,sBAAsB,8BAA8B,0CAA0C,kBAAkB,0BAA0B,mBAAmB,0CAA0C,mBAAmB,oBAAoB,2DAA2D,0BAA0B,cAAc,yCAAyC,mBAAmB,qCAAqC,sBAAsB,sBAAsB,8BAA8B,qBAAqB,qBAAqB,wDAAwD,gCAAgC,aAAa,yCAAyC,sCAAsC,cAAc,+CAA+C,aAAa,KAAK,uCAAuC,UAAU,KAAK,SAAS,+CAA+C,sCAAsC,wBAAwB,kDAAkD,sBAAsB,aAAa,+BAA+B,sBAAsB,0CAA0C,sBAAsB,8DAA8D,8BAA8B,4BAA4B,oHAAoH,oBAAoB,4CAA4C,SAAS,mDAAmD,mCAAmC,QAAQ,0EAA0E,UAAU,wBAAwB,oDAAoD,aAAa,KAAK,UAAU,SAAS,oCAAoC,6BAA6B,6BAA6B,kCAAkC,4CAA4C,qBAAqB,kCAAkC,gCAAgC,4CAA4C,qBAAqB,uCAAuC,mCAAmC,yBAAyB,wBAAwB,uBAAuB,sBAAsB,qBAAqB,oBAAoB,mBAAmB,sBAAsB,uBAAuB,kCAAkC,sBAAsB,YAAY,mBAAmB,gDAAgD,kCAAkC,cAAc,mBAAmB,QAAQ,oBAAoB,uBAAuB,UAAU,6BAA6B,UAAU,WAAW,qDAAqD,oBAAoB,iBAAiB,8BAA8B,gBAAgB,wBAAwB,4BAA4B,GAAG,uDAAuD,aAAa,4BAA4B,wCAAwC,YAAY,eAAe,KAAK,wBAAwB,mDAAmD,6BAA6B,iDAAiD,yDAAyD,oDAAoD,iEAAiE,yDAAyD,oBAAoB,GAAG,+CAA+C,uCAAuC,0DAA0D,qCAAqC,+CAA+C,0CAA0C,uBAAuB,yBAAyB,uCAAuC,gEAAgE,4BAA4B,mBAAmB,YAAY,6BAA6B,kFAAkF,0EAA0E,yBAAyB,KAAK,uEAAuE,gDAAgD,6CAA6C,UAAU,qFAAqF,aAAa,uFAAuF,YAAY,2BAA2B,8BAA8B,kCAAkC,wBAAwB,yBAAyB,oBAAoB,gCAAgC,4BAA4B,gCAAgC,4CAA4C,+BAA+B,2CAA2C,mBAAmB,2BAA2B;AACns+B,+HAA+H,iBAAiB,EAAE,iDAAiD,qCAAqC,2BAA2B,4DAA4D,gBAAgB,EAAE,sCAAsC,gBAAgB,qBAAqB,yBAAyB,yCAAyC,EAAE,qDAAqD,sBAAsB,uBAAuB,6CAA6C,OAAO,0EAA0E,4CAA4C,OAAO,2EAA2E,aAAa,EAAE,iDAAiD,oBAAoB,oBAAoB,2BAA2B,gBAAgB,sBAAsB,KAAK,2CAA2C,sBAAsB,2CAA2C,0DAA0D,GAAG,EAAE,iDAAiD,iJAAiJ,kDAAkD,yDAAyD,YAAY,IAAI,uDAAuD,cAAc,qCAAqC,yDAAyD,mEAAmE,kEAAkE,gDAAgD,SAAS,OAAO,wCAAwC,EAAE,yEAAyE,eAAe,wCAAwC,iGAAiG,kDAAkD,mBAAmB,2BAA2B,yDAAyD,KAAK,oDAAoD,OAAO,gBAAgB,EAAE,qFAAqF,YAAY,iCAAiC,uBAAuB,uBAAuB,iBAAiB,iBAAiB,aAAa,0BAA0B,0BAA0B,0DAA0D,EAAE,gFAAgF,yFAAyF,EAAE,yDAAyD,oDAAoD,mBAAmB,aAAa,GAAG,mBAAmB,GAAG,2BAA2B,EAAE,2DAA2D,EAAE,GAAG,yBAAyB;;;;;;;;;;ACHxkG,aAAa,GAAG,IAAsD,EAAE,mBAAmB,KAAK,UAAoO,CAAC,aAAa,0BAA0B,yBAAyB,gBAAgB,UAAU,UAAU,MAAM,SAAmC,CAAC,gBAAgB,OAAC,OAAO,oBAAoB,8CAA8C,kCAAkC,YAAY,YAAY,mCAAmC,iBAAiB,gBAAgB,sBAAsB,oBAAoB,MAAM,SAAmC,CAAC,YAAY,WAAW,YAAY,SAAS,EAAE,oCAAoC,aAAa,wCAAwC,eAAe,+BAA+B,4DAA4D,EAAE,KAAK,eAAe,WAAW,iCAAiC,0CAA0C,kDAAkD,+BAA+B,gBAAgB,qBAAqB,yBAAyB,2BAA2B,cAAc,aAAa,kBAAkB,EAAE,mBAAmB,qCAAqC,iBAAiB,kBAAkB,2BAA2B,SAAS,SAAS,oCAAoC,QAAQ,QAAQ,IAAI,iCAAiC,cAAc,2BAA2B,YAAY,mBAAmB,MAAM,iBAAiB,sBAAsB,YAAY,cAAc,MAAM,8BAA8B,eAAe,mCAAmC,wBAAwB,qCAAqC,gCAAgC,IAAI,kBAAkB,iBAAiB,6DAA6D,SAAS,yBAAyB,sBAAsB,6DAA6D,YAAY,gCAAgC,wCAAwC,4CAA4C,0BAA0B,0BAA0B,EAAE,+CAA+C,kBAAkB,UAAU,aAAa,WAAW,WAAW,GAAG,iCAAiC,EAAE,wBAAwB,oCAAoC,6CAA6C,4EAA4E,wCAAwC,OAAO,yIAAyI,EAAE,qCAAqC,aAAa,6CAA6C,IAAI,KAAK,6BAA6B,sCAAsC,eAAe,qCAAqC,6BAA6B,yBAAyB,aAAa,6CAA6C,IAAI,KAAK,6BAA6B,sCAAsC,eAAe,iCAAiC,wCAAwC,uCAAuC,4CAA4C,yCAAyC,cAAc,MAAM,yDAAyD,mCAAmC,mCAAmC,8CAA8C,kBAAkB,iBAAiB,yCAAyC,iBAAiB,+BAA+B,EAAE,mBAAmB,oCAAoC,gCAAgC,sCAAsC,sGAAsG,gBAAgB,4LAA4L,UAAU,iDAAiD,gCAAgC,IAAI,KAAK,mBAAmB,kCAAkC,UAAU,qBAAqB,2DAA2D,GAAG,gDAAgD,gBAAgB,KAAK,KAAK,mBAAmB,8FAA8F,UAAU,qBAAqB,0DAA0D,GAAG,wBAAwB,EAAE,qCAAqC,sCAAsC,aAAa,0BAA0B,yBAAyB,qBAAqB,oCAAoC,kCAAkC,kCAAkC,0BAA0B,qBAAqB,oCAAoC,sCAAsC,qCAAqC,6BAA6B,qBAAqB,oCAAoC,yCAAyC,kCAAkC,0BAA0B,iBAAiB,6BAA6B,qBAAqB,oCAAoC,sCAAsC,gBAAgB,uHAAuH,GAAG,sCAAsC,aAAa,yCAAyC,4DAA4D,6CAA6C,2DAA2D,uCAAuC,wBAAwB,kDAAkD,0GAA0G,iBAAiB,EAAE,uDAAuD,gOAAgO,wBAAwB,kDAAkD,gFAAgF,iBAAiB,EAAE,oDAAoD,wOAAwO,gBAAgB,iDAAiD,EAAE,6HAA6H,sCAAsC,aAAa,+BAA+B,oCAAoC,8BAA8B,qDAAqD,yCAAyC,0DAA0D,cAAc,uDAAuD,YAAY,wDAAwD,eAAe,2DAA2D,aAAa,iBAAiB,yBAAyB,yBAAyB,qBAAqB,YAAY,iBAAiB,QAAQ,2BAA2B,sCAAsC,OAAO,2DAA2D,6DAA6D,aAAa,iCAAiC,uEAAuE,OAAO,mBAAmB,qCAAqC,OAAO,oBAAoB,kCAAkC,yBAAyB,kBAAkB,GAAG,EAAE,oBAAoB,4BAA4B,mCAAmC,gBAAgB,MAAM,kBAAkB,mCAAmC,2CAA2C,sEAAsE,yBAAyB,eAAe,SAAS,mBAAmB,mEAAmE,EAAE,oBAAoB,4CAA4C,mDAAmD,gBAAgB,yJAAyJ,UAAU,4CAA4C,mDAAmD,gBAAgB,mKAAmK,UAAU,2DAA2D,sBAAsB,wBAAwB,UAAU,gBAAgB,kDAAkD,gGAAgG,kGAAkG,sCAAsC,2BAA2B,UAAU,EAAE,KAAK,2BAA2B,UAAU,GAAG,yBAAyB,kCAAkC,EAAE,oBAAoB,wBAAwB,gGAAgG,gBAAgB,2BAA2B,UAAU,GAAG,yCAAyC,eAAe,cAAc,GAAG,iCAAiC,gBAAgB,cAAc,gCAAgC,GAAG,mBAAmB,eAAe,mCAAmC,eAAe,yCAAyC,aAAa,0CAA0C,4CAA4C,aAAa,wDAAwD,oBAAoB,0BAA0B,EAAE,iKAAiK,oDAAoD,qBAAqB,yDAAyD,cAAc,qBAAqB,iDAAiD,2DAA2D,0CAA0C,0BAA0B,+FAA+F,0DAA0D,iBAAiB,aAAa,aAAa,cAAc,eAAe,UAAU,uDAAuD,4EAA4E,mBAAmB,YAAY,2BAA2B,EAAE,YAAY,qDAAqD,EAAE,mFAAmF,EAAE,kCAAkC,qCAAqC,mBAAmB,YAAY,2BAA2B,EAAE,aAAa,SAAS,gBAAgB,2CAA2C,oBAAoB,yBAAyB,iCAAiC,0CAA0C,qCAAqC,oCAAoC,EAAE,yCAAyC,mCAAmC,gBAAgB,YAAY,iCAAiC,0CAA0C,0BAA0B,iDAAiD,qCAAqC,yEAAyE,uBAAuB,uBAAuB,SAAS,GAAG,QAAQ,KAAK,qBAAqB,EAAE,gBAAgB,6CAA6C,2DAA2D,aAAa,iDAAiD,qDAAqD,mBAAmB,aAAa,2BAA2B,EAAE,uCAAuC,oBAAoB,yBAAyB,mBAAmB,cAAc,KAAK,iCAAiC,mBAAmB,aAAa,2BAA2B,EAAE,gBAAgB,EAAE,6BAA6B,sCAAsC,aAAa,uBAAuB,0CAA0C,qBAAqB,kCAAkC,wEAAwE,iBAAiB,uBAAuB,GAAG,sCAAsC,aAAa,wCAAwC,gBAAgB,4BAA4B,IAAI,KAAK,+BAA+B,SAAS,uFAAuF,YAAY,kBAAkB,qCAAqC,gBAAgB,gCAAgC,kDAAkD,wBAAwB,IAAI,qCAAqC,sBAAsB,EAAE,uCAAuC,gCAAgC,SAAS,EAAE,QAAQ,wBAAwB,8CAA8C,qDAAqD,oBAAoB,IAAI,oBAAoB,GAAG,sCAAsC,aAAa,qBAAqB,qBAAqB,SAAS,gCAAgC,cAAc,uIAAuI,6CAA6C,mBAAmB,GAAG,2GAA2G,4CAA4C,uCAAuC,EAAE,eAAe,GAAG,sCAAsC,aAAa,2BAA2B,sCAAsC,qCAAqC,yCAAyC,iFAAiF,gCAAgC,8CAA8C,8BAA8B,+CAA+C,+CAA+C,8CAA8C,2BAA2B,gBAAgB,qEAAqE,UAAU,oDAAoD,sBAAsB,6EAA6E,gBAAgB,kLAAkL,UAAU,kCAAkC,sBAAsB,qBAAqB,mBAAmB,mGAAmG,0BAA0B,sBAAsB,SAAS,gBAAgB,yBAAyB,YAAY,gBAAgB,KAAK,2BAA2B,iDAAiD,kBAAkB,kFAAkF,mCAAmC,yCAAyC,EAAE,sCAAsC,iDAAiD,yBAAyB,6BAA6B,iCAAiC,EAAE,qBAAqB,iEAAiE,uDAAuD,uCAAuC,kCAAkC,iBAAiB,EAAE,yBAAyB,2BAA2B,2CAA2C,mCAAmC,sBAAsB,yEAAyE,cAAc,sCAAsC,0DAA0D,4DAA4D,mBAAmB,EAAE,uBAAuB,sBAAsB,gDAAgD,gFAAgF,iCAAiC,iDAAiD,YAAY,qBAAqB,iBAAiB,wBAAwB,cAAc,2CAA2C,sBAAsB,wBAAwB,oCAAoC,yBAAyB,yBAAyB,0CAA0C,yBAAyB,mBAAmB,iBAAiB,OAAO,0BAA0B,iCAAiC,EAAE,qFAAqF,sCAAsC,aAAa,qCAAqC,uCAAuC,yCAAyC,sBAAsB,gBAAgB,2DAA2D,sBAAsB,uBAAuB,gCAAgC,OAAO,4GAA4G,gCAAgC,OAAO,2GAA2G,gCAAgC,OAAO,2EAA2E,gCAAgC,0DAA0D,6DAA6D,OAAO,uFAAuF,YAAY,gDAAgD,6BAA6B,OAAO,gDAAgD,wDAAwD,WAAW,wBAAwB,EAAE,YAAY,KAAK,sCAAsC,yDAAyD,YAAY,kBAAkB,yBAAyB,8EAA8E,uDAAuD,UAAU,+BAA+B,2BAA2B,IAAI,iEAAiE,OAAO,6BAA6B,0BAA0B,4BAA4B,EAAE,uCAAuC,uCAAuC,aAAa,4BAA4B,wCAAwC,YAAY,eAAe,KAAK,wBAAwB,mDAAmD,6BAA6B,iDAAiD,yDAAyD,oDAAoD,iEAAiE,yDAAyD,oBAAoB,GAAG,+CAA+C,uCAAuC,0DAA0D,qCAAqC,gCAAgC,wBAAwB,yCAAyC,yDAAyD,mFAAmF,2BAA2B,gBAAgB,4IAA4I,UAAU,wBAAwB,+FAA+F,kDAAkD,qCAAqC,qBAAqB,OAAO,yEAAyE,wCAAwC,wCAAwC,GAAG,EAAE,YAAY,4BAA4B,wBAAwB,mCAAmC,yBAAyB,4BAA4B,kFAAkF,iDAAiD,gBAAgB,EAAE,qDAAqD,uBAAuB,gCAAgC,YAAY,OAAO,iEAAiE,EAAE,iDAAiD,2CAA2C,+EAA+E,GAAG,EAAE,iDAAiD,6BAA6B,YAAY,oDAAoD,gBAAgB,+BAA+B,OAAO,cAAc,GAAG,oBAAoB,GAAG,0BAA0B,kCAAkC,EAAE,qDAAqD,uCAAuC,aAAa,4BAA4B,wCAAwC,YAAY,eAAe,KAAK,wBAAwB,mDAAmD,6BAA6B,iDAAiD,yDAAyD,oDAAoD,iEAAiE,yDAAyD,oBAAoB,GAAG,+CAA+C,uCAAuC,0DAA0D,yCAAyC,sBAAsB,kBAAkB,6BAA6B,mBAAmB,sBAAsB,kCAAkC,iBAAiB,2BAA2B,mBAAmB,qBAAqB,EAAE,2DAA2D,eAAe,+DAA+D,cAAc,2BAA2B,cAAc,UAAU,GAAG,cAAc,GAAG,0BAA0B,4BAA4B,EAAE,sBAAsB,uCAAuC,aAAa,yCAAyC,mBAAmB,gEAAgE,aAAa,kBAAkB,+CAA+C,gFAAgF,aAAa,YAAY,4CAA4C,4CAA4C,iBAAiB,KAAK,kBAAkB,+EAA+E,yCAAyC,cAAc,SAAS,cAAc,KAAK,yCAAyC,gBAAgB,0BAA0B,+BAA+B,EAAE,sBAAsB,uCAAuC,aAAa,oCAAoC,YAAY,6CAA6C,qCAAqC,oCAAoC,0CAA0C,EAAE,2BAA2B,8CAA8C,gCAAgC,wCAAwC,EAAE,SAAS,yBAAyB,qCAAqC,gDAAgD,wBAAwB,6BAA6B,IAAI,KAAK,uBAAuB,+CAA+C,iBAAiB,0BAA0B,qBAAqB,YAAY,wBAAwB,8BAA8B,iBAAiB,2CAA2C,6BAA6B,uCAAuC,2BAA2B,2DAA2D,4CAA4C,aAAa,4CAA4C,EAAE,6CAA6C,aAAa,cAAc,sBAAsB,cAAc,kBAAkB,yDAAyD,gCAAgC,KAAK,sBAAsB,cAAc,mBAAmB,cAAc,OAAO,sBAAsB,EAAE,gBAAgB,uCAAuC,aAAa,4CAA4C,oCAAoC,oCAAoC,0BAA0B,qCAAqC,IAAI,KAAK,+BAA+B,4CAA4C,mBAAmB,uBAAuB,aAAa,yBAAyB,sBAAsB,gCAAgC,0BAA0B,kEAAkE,2CAA2C,8CAA8C,mBAAmB,4BAA4B,8BAA8B,oDAAoD,gBAAgB,+BAA+B,kCAAkC,6CAA6C,kBAAkB,0DAA0D,WAAW,sBAAsB,EAAE,qCAAqC,uCAAuC,aAAa,4BAA4B,wCAAwC,YAAY,eAAe,KAAK,wBAAwB,mDAAmD,6BAA6B,iDAAiD,yDAAyD,oDAAoD,iEAAiE,yDAAyD,oBAAoB,GAAG,+CAA+C,uCAAuC,0DAA0D,+BAA+B,4BAA4B,+BAA+B,mCAAmC,iCAAiC,iCAAiC,2BAA2B,4BAA4B,8DAA8D,yBAAyB,iEAAiE,EAAE,iFAAiF,aAAa,iBAAiB,EAAE,2DAA2D,uEAAuE,EAAE,yEAAyE,+CAA+C,0CAA0C,kCAAkC,6DAA6D,4BAA4B,kBAAkB,eAAe,KAAK,eAAe,gDAAgD,OAAO,6BAA6B,uDAAuD,iBAAiB,gEAAgE,EAAE,gDAAgD,+CAA+C,eAAe,kBAAkB,kBAAkB,mCAAmC,IAAI,wBAAwB,aAAa,qEAAqE,gBAAgB,kIAAkI,UAAU,IAAI,yBAAyB,sCAAsC,EAAE,aAAa,mEAAmE,gBAAgB,4IAA4I,UAAU,6BAA6B,qCAAqC,eAAe,EAAE,4EAA4E,aAAa,qEAAqE,2BAA2B,+CAA+C,6CAA6C,kCAAkC,GAAG,oBAAoB,GAAG,mDAAmD,sCAAsC,aAAa,yBAAyB,qBAAqB,yBAAyB,kCAAkC,4BAA4B,EAAE,aAAa,uCAAuC,aAAa,oCAAoC,+BAA+B,4CAA4C,+DAA+D,2BAA2B,gBAAgB,gLAAgL,UAAU,qCAAqC,qBAAqB,aAAa,kCAAkC,uCAAuC,+CAA+C,iDAAiD,2BAA2B,YAAY,QAAQ,EAAE,aAAa,mCAAmC,qCAAqC,yBAAyB,qBAAqB,kBAAkB,EAAE,cAAc,gBAAgB,cAAc,KAAK,YAAY,iBAAiB,iCAAiC,aAAa,KAAK,2BAA2B,iCAAiC,2BAA2B,cAAc,mCAAmC,0CAA0C,YAAY,qBAAqB,KAAK,8BAA8B,wCAAwC,aAAa,wCAAwC,cAAc,aAAa,4CAA4C,6CAA6C,mCAAmC,cAAc,kBAAkB,6BAA6B,IAAI,mDAAmD,iDAAiD,iBAAiB,gDAAgD,2BAA2B,kFAAkF,EAAE,gBAAgB,2CAA2C,iDAAiD,4BAA4B,4GAA4G,EAAE,kBAAkB,sCAAsC,cAAc,yFAAyF,yCAAyC,+DAA+D,gEAAgE,oBAAoB,gBAAgB,KAAK,wCAAwC,8CAA8C,EAAE,kBAAkB,gBAAgB,+DAA+D,EAAE,6BAA6B,uCAAuC,aAAa,oCAAoC,iCAAiC,kCAAkC,2BAA2B,QAAQ,6CAA6C,iBAAiB,kCAAkC,wBAAwB,eAAe,0BAA0B,iBAAiB,cAAc,wBAAwB,+BAA+B,gDAAgD,iEAAiE,oDAAoD,gEAAgE,uCAAuC,wBAAwB,QAAQ,6CAA6C,eAAe,0BAA0B,iBAAiB,aAAa,qBAAqB,4BAA4B,6CAA6C,gEAAgE,oCAAoC,WAAW,0CAA0C,WAAW,oBAAoB,8BAA8B,kDAAkD,8GAA8G,sDAAsD,yDAAyD,SAAS,EAAE,+CAA+C,SAAS,EAAE,gCAAgC,iCAAiC,8CAA8C,2DAA2D,EAAE,8BAA8B,uCAAuC,aAAa,4BAA4B,wCAAwC,YAAY,eAAe,KAAK,wBAAwB,mDAAmD,6BAA6B,iDAAiD,yDAAyD,oDAAoD,iEAAiE,yDAAyD,oBAAoB,GAAG,+CAA+C,uCAAuC,0DAA0D,oCAAoC,4CAA4C,wCAAwC,+BAA+B,6BAA6B,kCAAkC,mCAAmC,4CAA4C,6CAA6C,+CAA+C,sBAAsB,EAAE,oEAAoE,0BAA0B,uCAAuC,mCAAmC,uBAAuB,iBAAiB,SAAS,wBAAwB,EAAE,mBAAmB,4BAA4B,wCAAwC,8BAA8B,+DAA+D,wDAAwD,UAAU,sBAAsB,EAAE,2CAA2C,6BAA6B,uDAAuD,kCAAkC,EAAE,aAAa,EAAE,gDAAgD,+BAA+B,6BAA6B,2CAA2C,iDAAiD,iEAAiE,QAAQ,EAAE,+CAA+C,wEAAwE,EAAE,gDAAgD,sCAAsC,gBAAgB,GAAG,EAAE,mCAAmC,2CAA2C,sFAAsF,EAAE,iBAAiB,SAAS,wBAAwB,EAAE,sDAAsD,iBAAiB,SAAS,kBAAkB,EAAE,kDAAkD,iBAAiB,SAAS,oBAAoB,EAAE,2DAA2D,aAAa,EAAE,uCAAuC,iBAAiB,iBAAiB,SAAS,4BAA4B,EAAE,sBAAsB,kIAAkI,EAAE,iBAAiB,SAAS,sBAAsB,EAAE,aAAa,GAAG,oBAAoB,GAAG,EAAE,mHAAmH,uCAAuC,4BAA4B,uBAAuB,YAAY,8DAA8D,yBAAyB,sBAAsB,kDAAkD,sCAAsC,4BAA4B,mCAAmC,eAAe,yCAAyC,YAAY,uCAAuC,oEAAoE,8CAA8C,gCAAgC,mBAAmB,mBAAmB,gDAAgD,0EAA0E,WAAW,yCAAyC,KAAK,6CAA6C,uBAAuB,yDAAyD,eAAe,qCAAqC,kBAAkB,qBAAqB,oBAAoB,6CAA6C,oBAAoB,oBAAoB,sBAAsB,oBAAoB,qCAAqC,mBAAmB,WAAW,oCAAoC,+CAA+C,eAAe,iBAAiB,eAAe,oBAAoB,oBAAoB,sBAAsB,iBAAiB,gCAAgC,mCAAmC,uCAAuC,sBAAsB,yBAAyB,gEAAgE,iBAAiB,4CAA4C,2DAA2D,iBAAiB,0DAA0D,qBAAqB,uBAAuB,uBAAuB,wCAAwC,YAAY,MAAM,KAAK,iCAAiC,4BAA4B,4BAA4B,mDAAmD,iDAAiD,gCAAgC,2BAA2B,mDAAmD,gCAAgC,4BAA4B,uCAAuC,0CAA0C,oCAAoC,6CAA6C,0DAA0D,yCAAyC,wBAAwB,gDAAgD,yCAAyC,sCAAsC,UAAU,eAAe,gDAAgD,KAAK,4CAA4C,wBAAwB,0CAA0C,6BAA6B,+BAA+B,+CAA+C,+BAA+B,wBAAwB,qBAAqB,sCAAsC,yBAAyB,sBAAsB,sCAAsC,sCAAsC,uCAAuC,0CAA0C,yBAAyB,uBAAuB,gBAAgB,qBAAqB,iBAAiB,2CAA2C,iCAAiC,kCAAkC,uDAAuD,wCAAwC,wBAAwB,yBAAyB,gEAAgE,uBAAuB,+DAA+D,4BAA4B,oEAAoE,cAAc,qBAAqB,MAAM,gFAAgF,uCAAuC,2BAA2B,kCAAkC,KAAK,sCAAsC,mDAAmD,cAAc,4LAA4L,qCAAqC,aAAa,EAAE,oCAAoC,2BAA2B,6BAA6B,KAAK,yCAAyC,yCAAyC,mFAAmF,qDAAqD,4BAA4B,EAAE,sBAAsB,uCAAuC,wBAAwB,kBAAkB,gBAAgB,+BAA+B,uBAAuB,kBAAkB,uCAAuC,iBAAiB,2BAA2B,cAAc,4BAA4B,QAAQ,WAAW,qBAAqB,0BAA0B,6BAA6B,qCAAqC,sBAAsB,0CAA0C,gBAAgB,yCAAyC,6CAA6C,mCAAmC,qDAAqD,2DAA2D,uCAAuC,uEAAuE,yCAAyC,2CAA2C,sDAAsD,8DAA8D,4CAA4C,qBAAqB,wBAAwB,2FAA2F,uGAAuG,gHAAgH,iGAAiG,0GAA0G,oGAAoG,4HAA4H,kFAAkF,8FAA8F,uGAAuG,gGAAgG,iFAAiF,qHAAqH,4FAA4F,mGAAmG,oCAAoC,6BAA6B,kBAAkB,KAAK,WAAW,wCAAwC,oCAAoC,sEAAsE,gBAAgB,kDAAkD,aAAa,uCAAuC,iCAAiC,qBAAqB,oBAAoB,8BAA8B,yBAAyB,sCAAsC,mBAAmB,cAAc,KAAK,iDAAiD,sBAAsB,oCAAoC,gBAAgB,sBAAsB,sBAAsB,+BAA+B,uDAAuD,mBAAmB,iCAAiC,iCAAiC,cAAc,eAAe,wCAAwC,sBAAsB,gBAAgB,gCAAgC,yBAAyB,mCAAmC,kBAAkB,WAAW,mBAAmB,WAAW,gDAAgD,YAAY,2CAA2C,KAAK,4BAA4B,OAAO,wBAAwB,yBAAyB,QAAQ,4CAA4C,kCAAkC,wCAAwC,gCAAgC,SAAS,4BAA4B,mBAAmB,kBAAkB,sBAAsB,OAAO,yBAAyB,QAAQ,gCAAgC,yBAAyB,KAAK,kEAAkE,wBAAwB,iEAAiE,kBAAkB,WAAW,iBAAiB,uBAAuB,cAAc,6BAA6B,yBAAyB,+BAA+B,4CAA4C,6CAA6C,oDAAoD,eAAe,+BAA+B,iCAAiC,+BAA+B,4CAA4C,8DAA8D,oDAAoD,eAAe,+BAA+B,gCAAgC,+CAA+C,YAAY,oDAAoD,qDAAqD,+CAA+C,YAAY,iDAAiD,kBAAkB,WAAW,iBAAiB,+DAA+D,aAAa,cAAc,qCAAqC,kBAAkB,aAAa,6BAA6B,mCAAmC,6BAA6B,qCAAqC,mDAAmD,8CAA8C,YAAY,KAAK,cAAc,6DAA6D,qBAAqB,wBAAwB,4BAA4B,oBAAoB,YAAY,yBAAyB,kBAAkB,yDAAyD,sBAAsB,WAAW,8DAA8D,0BAA0B,wBAAwB,4BAA4B,uBAAuB,uBAAuB,cAAc,iBAAiB,gBAAgB,6OAA6O,6CAA6C,0CAA0C,qCAAqC,aAAa,4BAA4B,gCAAgC,mCAAmC,gCAAgC,wCAAwC,0BAA0B,6BAA6B,0BAA0B,qDAAqD,sBAAsB,0BAA0B,aAAa,2BAA2B,8DAA8D,uBAAuB,4BAA4B,KAAK,kBAAkB,aAAa,uCAAuC,qEAAqE,0BAA0B,gCAAgC,qCAAqC,YAAY,UAAU,kBAAkB,QAAQ,kBAAkB,yBAAyB,WAAW,8DAA8D,YAAY,qCAAqC,YAAY,UAAU,kBAAkB,QAAQ,kBAAkB,oBAAoB,8DAA8D,YAAY,2CAA2C,2CAA2C,sBAAsB,wBAAwB,oBAAoB,gBAAgB,iBAAiB,kBAAkB,yBAAyB,EAAE,oBAAoB,8BAA8B,mCAAmC,mBAAmB,YAAY,yBAAyB,GAAG,8BAA8B,aAAa,8BAA8B,qBAAqB,yCAAyC,gBAAgB,4BAA4B,wCAAwC,8DAA8D,mDAAmD,gBAAgB,4BAA4B,wCAAwC,uDAAuD,yCAAyC,kBAAkB,WAAW,qBAAqB,aAAa,yBAAyB,KAAK,wBAAwB,QAAQ,aAAa,cAAc,wBAAwB,cAAc,wCAAwC,mCAAmC,2BAA2B,aAAa,0BAA0B,KAAK,2BAA2B,SAAS,8BAA8B,KAAK,8BAA8B,oDAAoD,aAAa,sDAAsD,2BAA2B,OAAO,yBAAyB,+CAA+C,iCAAiC,mBAAmB,gBAAgB,+BAA+B,KAAK,0BAA0B,iEAAiE,6BAA6B,8BAA8B,QAAQ,yBAAyB,KAAK,+BAA+B,oBAAoB,6BAA6B,KAAK,kCAAkC,GAAG,+BAA+B,2DAA2D,gEAAgE,8CAA8C,4CAA4C,gBAAgB,iDAAiD,2BAA2B,OAAO,6BAA6B,yBAAyB,6BAA6B,6BAA6B,+BAA+B,6BAA6B,0BAA0B,QAAQ,yBAAyB,KAAK,+BAA+B,8BAA8B,6DAA6D,gBAAgB,oBAAoB,8HAA8H,8CAA8C,8BAA8B,aAAa,2BAA2B,kCAAkC,WAAW,gBAAgB,gEAAgE,8BAA8B,kFAAkF,gCAAgC,mCAAmC,0BAA0B,mCAAmC,wCAAwC,0CAA0C,6BAA6B,aAAa,+CAA+C,gCAAgC,gCAAgC,SAAS,cAAc,EAAE,WAAW,iCAAiC,qBAAqB,wBAAwB,sBAAsB,qBAAqB,6BAA6B,2CAA2C,yBAAyB,YAAY,mCAAmC,8BAA8B,wBAAwB,6BAA6B,YAAY,+BAA+B,kBAAkB,wBAAwB,sBAAsB,YAAY,8BAA8B,qBAAqB,wBAAwB,sBAAsB,YAAY,mCAAmC,0BAA0B,wBAAwB,sBAAsB,YAAY,mDAAmD,mCAAmC,wBAAwB,gCAAgC,8BAA8B,YAAY,gCAAgC,kBAAkB,wBAAwB,eAAe,mBAAmB,oBAAoB,oBAAoB,YAAY,sCAAsC,6BAA6B,wBAAwB,mBAAmB,YAAY,sDAAsD,qBAAqB,gCAAgC,2CAA2C,6BAA6B,wBAAwB,4BAA4B,2BAA2B,+BAA+B,iBAAiB,kBAAkB,qBAAqB,KAAK,6BAA6B,yBAAyB,YAAY,wDAAwD,kBAAkB,gCAAgC,wBAAwB,4BAA4B,wBAAwB,+BAA+B,oBAAoB,iBAAiB,kBAAkB,qBAAqB,KAAK,6BAA6B,cAAc,wBAAwB,mBAAmB,eAAe,mBAAmB,kDAAkD,yCAAyC,6BAA6B,qCAAqC,4BAA4B,iCAAiC,0CAA0C,mCAAmC,kDAAkD,mCAAmC,4BAA4B,gCAAgC,qCAAqC,qCAAqC,gCAAgC,+CAA+C,wCAAwC,KAAK,0CAA0C,oCAAoC,6CAA6C,sCAAsC,+CAA+C,uCAAuC,yDAAyD,oDAAoD,wDAAwD,mCAAmC,iDAAiD,6DAA6D,iDAAiD,yDAAyD,4BAA4B,2DAA2D,0EAA0E,mCAAmC,4BAA4B,qDAAqD,8DAA8D,wCAAwC,4CAA4C,UAAU,+BAA+B,qFAAqF,eAAe,EAAE,UAAU,EAAE,yDAAyD,4CAA4C,UAAU,+BAA+B,oJAAoJ,eAAe,EAAE,UAAU,IAAI,+EAA+E,mFAAmF,uBAAuB,iBAAiB,uCAAuC,oBAAoB,0BAA0B,yBAAyB,6CAA6C,gDAAgD,2BAA2B,oBAAoB,8BAA8B,wBAAwB,kCAAkC,gCAAgC,gCAAgC,yDAAyD,mCAAmC,kCAAkC,yCAAyC,wCAAwC,0CAA0C,oBAAoB,8BAA8B,0BAA0B,6BAA6B,iBAAiB,gBAAgB,+DAA+D,mBAAmB,mCAAmC,8BAA8B,8BAA8B,wBAAwB,uDAAuD,oBAAoB,uDAAuD,iBAAiB,6BAA6B,oBAAoB,mBAAmB,2CAA2C,gCAAgC,yBAAyB,wBAAwB,uDAAuD,qCAAqC,yBAAyB,mDAAmD,4BAA4B,qBAAqB,0CAA0C,wBAAwB,mBAAmB,sCAAsC,sBAAsB,4BAA4B,yDAAyD,+BAA+B,6BAA6B,yDAAyD,2DAA2D,gCAAgC,kCAAkC,qEAAqE,qCAAqC,0BAA0B,2EAA2E,2DAA2D,8CAA8C,kDAAkD,WAAW,uDAAuD,0BAA0B,6BAA6B,sBAAsB,qCAAqC,iBAAiB,wBAAwB,0BAA0B,GAAG,gEAAgE,oBAAoB,4DAA4D,2BAA2B,0BAA0B,kBAAkB,aAAa,uGAAuG,aAAa,+BAA+B,WAAW,4BAA4B,sBAAsB,0BAA0B,YAAY,yEAAyE,eAAe,sBAAsB,SAAS,0BAA0B,eAAe,QAAQ,KAAK,QAAQ,sBAAsB,6DAA6D,oDAAoD,0BAA0B,qBAAqB,0BAA0B,0BAA0B,0CAA0C,uBAAuB,YAAY,MAAM,KAAK,uBAAuB,yBAAyB,wBAAwB,2CAA2C,EAAE,gCAAgC,wBAAwB,+BAA+B,GAAG,YAAY,MAAM,KAAK,uBAAuB,uDAAuD,2BAA2B,0BAA0B,wCAAwC,0BAA0B,wBAAwB,4BAA4B,EAAE,gEAAgE,uDAAuD,2BAA2B,0BAA0B,wCAAwC,0BAA0B,wBAAwB,4BAA4B,EAAE,sEAAsE,cAAc,uCAAuC,aAAa,eAAe,qBAAqB,KAAK,iEAAiE,yBAAyB,KAAK,aAAa,iEAAiE,yBAAyB,4BAA4B,KAAK,eAAe,OAAO,yEAAyE,aAAa,iEAAiE,wBAAwB,OAAO,qGAAqG,uEAAuE,qEAAqE,gEAAgE,gDAAgD,wBAAwB,iCAAiC,UAAU,4BAA4B,sBAAsB,sBAAsB,eAAe,2BAA2B,iCAAiC,KAAK,4BAA4B,QAAQ,uBAAuB,cAAc,OAAO,sFAAsF,+DAA+D,GAAG,sCAAsC,mCAAmC,UAAU,sBAAsB,8CAA8C,wBAAwB,kCAAkC,8BAA8B,MAAM,WAAW,4BAA4B,wBAAwB,sBAAsB,SAAS,0BAA0B,aAAa,8CAA8C,yBAAyB,aAAa,kCAAkC,+BAA+B,mBAAmB,cAAc,uBAAuB,gBAAgB,aAAa,oBAAoB,8BAA8B,wBAAwB,uBAAuB,4CAA4C,6CAA6C,qBAAqB,2BAA2B,YAAY,MAAM,KAAK,0DAA0D,MAAM,8BAA8B,SAAS,0BAA0B,aAAa,6CAA6C,yBAAyB,aAAa,mCAAmC,kBAAkB,IAAI,0BAA0B,uDAAuD,eAAe,sBAAsB,sBAAsB,EAAE,oDAAoD,eAAe,4BAA4B,oBAAoB,sBAAsB,qEAAqE,kCAAkC,uBAAuB,0DAA0D,MAAM,uBAAuB,gBAAgB,sBAAsB,EAAE,8BAA8B,sBAAsB,yDAAyD,qBAAqB,YAAY,yCAAyC,+BAA+B,sBAAsB,oBAAoB,+BAA+B,mCAAmC,yBAAyB,UAAU,4CAA4C,oCAAoC,GAAG,uCAAuC,qKAAqK,gHAAgH,4HAA4H,YAAY,aAAa,mBAAmB,WAAW,0BAA0B,iBAAiB,kBAAkB,kBAAkB,sBAAsB,qBAAqB,8CAA8C,+BAA+B,2BAA2B,kCAAkC,EAAE,kEAAkE,2BAA2B,0EAA0E,iCAAiC,eAAe,YAAY,6DAA6D,kDAAkD,KAAK,kCAAkC,2BAA2B,oBAAoB,mBAAmB,oBAAoB,2BAA2B,kEAAkE,KAAK,0CAA0C,UAAU,yBAAyB,cAAc,mDAAmD,mBAAmB,yBAAyB,sCAAsC,WAAW,uBAAuB,gDAAgD,kBAAkB,8BAA8B,qBAAqB,mCAAmC,gBAAgB,cAAc,sCAAsC,+BAA+B,iBAAiB,8BAA8B,EAAE,gBAAgB,YAAY,YAAY,IAAI,uCAAuC,eAAe,yCAAyC,uBAAuB,kDAAkD,sBAAsB,+BAA+B,OAAO,mBAAmB,qBAAqB,kCAAkC,+CAA+C,6CAA6C,4BAA4B,UAAU,2DAA2D,gFAAgF,8BAA8B,8BAA8B,sCAAsC,mEAAmE,8BAA8B,iCAAiC,qCAAqC,oGAAoG,sBAAsB,2DAA2D,eAAe,8BAA8B,qCAAqC,cAAc,6GAA6G,KAAK,wBAAwB,MAAM,MAAM,oCAAoC,iDAAiD,MAAM,oCAAoC,sDAAsD,MAAM,oCAAoC,6BAA6B,8DAA8D,2FAA2F,kBAAkB,8DAA8D,eAAe,oBAAoB,gDAAgD,iBAAiB,mCAAmC,EAAE,YAAY,MAAM,KAAK,YAAY,mBAAmB,gCAAgC,EAAE,4BAA4B,8CAA8C,oBAAoB,2BAA2B,KAAK,8CAA8C,qBAAqB,wDAAwD,6EAA6E,KAAK,QAAQ,SAAS,8CAA8C,OAAO,cAAc,UAAU,KAAK,yCAAyC,0BAA0B,0BAA0B,8BAA8B,SAAS,yFAAyF,aAAa,UAAU,cAAc,YAAY,YAAY,uBAAuB,UAAU,uBAAuB,+BAA+B,OAAO,0BAA0B,OAAO,KAAK,uDAAuD,MAAM,yCAAyC,eAAe,uDAAuD,+BAA+B,UAAU,0BAA0B,QAAQ,4CAA4C,mBAAmB,+BAA+B,aAAa,KAAK,yDAAyD,gCAAgC,4CAA4C,mBAAmB,6BAA6B,4EAA4E,UAAU,aAAa,KAAK,kDAAkD,MAAM,kBAAkB,gDAAgD,gEAAgE,eAAe,6DAA6D,6DAA6D,MAAM,qDAAqD,aAAa,qCAAqC,SAAS,kBAAkB,gDAAgD,wDAAwD,iEAAiE,0BAA0B,eAAe,wBAAwB,uCAAuC,eAAe,2BAA2B,+DAA+D,sCAAsC,0BAA0B,KAAK,wGAAwG,mFAAmF,0BAA0B,MAAM,sDAAsD,SAAS,cAAc,mBAAmB,UAAU,gDAAgD,cAAc,MAAM,2CAA2C,eAAe,MAAM,yEAAyE,mBAAmB,+DAA+D,6BAA6B,8BAA8B,OAAO,KAAK,UAAU,yCAAyC,2GAA2G,0FAA0F,gCAAgC,QAAQ,SAAS,MAAM,oFAAoF,0BAA0B,QAAQ,MAAM,gCAAgC,QAAQ,MAAM,iGAAiG,KAAK,mDAAmD,uBAAuB,oBAAoB,gBAAgB,WAAW,YAAY,kBAAkB,kBAAkB,2BAA2B,UAAU,uCAAuC,iCAAiC,yCAAyC,KAAK,gBAAgB,YAAY,6BAA6B,sBAAsB,qBAAqB,qBAAqB,cAAc,kCAAkC,EAAE,kDAAkD,sCAAsC,+CAA+C,gBAAgB,WAAW,QAAQ,oBAAoB,WAAW,mBAAmB,6CAA6C,qBAAqB,iCAAiC,6BAA6B,UAAU,sCAAsC,4CAA4C,KAAK,YAAY,+BAA+B,uCAAuC,iDAAiD,cAAc,4CAA4C,eAAe,0BAA0B,sCAAsC,KAAK,6BAA6B,yBAAyB,aAAa,sFAAsF,2CAA2C,2DAA2D,mDAAmD,sBAAsB,8BAA8B,0CAA0C,kBAAkB,0BAA0B,mBAAmB,0CAA0C,mBAAmB,oBAAoB,2DAA2D,0BAA0B,cAAc,yCAAyC,mBAAmB,qCAAqC,sBAAsB,sBAAsB,8BAA8B,qBAAqB,qBAAqB,wDAAwD,gCAAgC,aAAa,yCAAyC,yCAAyC,cAAc,+CAA+C,aAAa,KAAK,uCAAuC,UAAU,KAAK,SAAS,+CAA+C,sCAAsC,wBAAwB,kDAAkD,sBAAsB,aAAa,+BAA+B,sBAAsB,0CAA0C,sBAAsB,8DAA8D,8BAA8B,4BAA4B,oHAAoH,oBAAoB,4CAA4C,SAAS,mDAAmD,mCAAmC,QAAQ,0EAA0E,UAAU,wBAAwB,oDAAoD,aAAa,KAAK,UAAU,SAAS,oCAAoC,6BAA6B,6BAA6B,kCAAkC,4CAA4C,qBAAqB,kCAAkC,gCAAgC,4CAA4C,qBAAqB,uCAAuC,mCAAmC,yBAAyB,wBAAwB,uBAAuB,sBAAsB,qBAAqB,oBAAoB,mBAAmB,sBAAsB,uBAAuB,kCAAkC,sBAAsB,YAAY,mBAAmB,gDAAgD,kCAAkC,cAAc,mBAAmB,QAAQ,oBAAoB,uBAAuB,UAAU,6BAA6B,UAAU,WAAW,qDAAqD,oBAAoB,iBAAiB,8BAA8B,gBAAgB,wBAAwB,4BAA4B,GAAG,+DAA+D,aAAa,4BAA4B,wCAAwC,YAAY,eAAe,KAAK,wBAAwB,mDAAmD,6BAA6B,iDAAiD,yDAAyD,oDAAoD,iEAAiE,yDAAyD,oBAAoB,GAAG,+CAA+C,uCAAuC,0DAA0D,oCAAoC,oCAAoC,mDAAmD,mCAAmC,6BAA6B,yBAAyB,oCAAoC,uBAAuB,2HAA2H,iBAAiB,gBAAgB,kBAAkB,EAAE,6BAA6B,uDAAuD,mCAAmC,aAAa,EAAE,oDAAoD,eAAe,qBAAqB,qDAAqD,wCAAwC,oEAAoE,EAAE,aAAa,4BAA4B,aAAa,EAAE,0CAA0C,kBAAkB,iFAAiF,aAAa,4BAA4B,aAAa,EAAE,uDAAuD,mDAAmD,oBAAoB,qCAAqC,EAAE,uCAAuC,oEAAoE,aAAa,EAAE,iEAAiE,gEAAgE,6FAA6F,aAAa,EAAE,qCAAqC,gBAAgB,6BAA6B,0EAA0E,wBAAwB,uBAAuB,0DAA0D,iDAAiD,eAAe,mFAAmF,gDAAgD,iDAAiD,oBAAoB,GAAG,EAAE,sCAAsC,YAAY,iEAAiE,EAAE,EAAE,eAAe,sCAAsC,YAAY,yBAAyB,EAAE,EAAE,+CAA+C,qCAAqC,8BAA8B,EAAE,uDAAuD,oCAAoC,GAAG,EAAE,8CAA8C,6BAA6B,qBAAqB,sCAAsC,iCAAiC,uBAAuB,wCAAwC,EAAE,0DAA0D,4BAA4B,4DAA4D,0CAA0C,EAAE,EAAE,aAAa,EAAE,2CAA2C,eAAe,aAAa,EAAE,qCAAqC,iBAAiB,EAAE,mEAAmE,2CAA2C,2DAA2D,EAAE,qGAAqG,gBAAgB,iBAAiB,mBAAmB,qDAAqD,6BAA6B,EAAE,+CAA+C,iCAAiC,4DAA4D,EAAE,mDAAmD,mFAAmF,EAAE,2DAA2D,eAAe,4BAA4B,GAAG,qBAAqB,GAAG,8CAA8C,yCAAyC,sDAAsD,2DAA2D,kDAAkD,6BAA6B,EAAE,+HAA+H,EAAE,GAAG,iCAAiC;;;;;;;;;;ACAt9iF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,GAAG,IAAoD,oBAAoB,KAAK,UAAsL,CAAC,YAAY,yBAAyB,gBAAgB,UAAU,UAAU,MAAM,SAAmC,CAAC,gBAAgB,OAAC,OAAO,oBAAoB,8CAA8C,kCAAkC,YAAY,YAAY,mCAAmC,iBAAiB,gBAAgB,sBAAsB,oBAAoB,UAAU,SAAmC,KAAK,WAAW,YAAY,SAAS,EAAE,mBAAmB,aAAa,cAAc,MAAM,kEAAkE,YAAY,mBAAmB,mBAAmB,wBAAwB,iDAAiD,8BAA8B,8CAA8C,gGAAgG,KAAK,uGAAuG,SAAS,kCAAkC,sCAAsC,mEAAmE,uBAAuB,aAAa,EAAE,iBAAiB,qBAAqB,aAAa,0EAA0E,uBAAuB,+BAA+B,WAAW,iMAAiM,SAAS,wBAAwB,2BAA2B,0CAA0C,WAAW,uPAAuP,UAAU,GAAG,qBAAqB,aAAa,aAAa,mHAAmH,aAAa,sBAAsB,YAAY,iCAAiC,aAAa,aAAa,GAAG,qBAAqB,aAAa,SAAS,oCAAoC,SAAS,wBAAwB,SAAS,iDAAiD,wBAAwB,EAAE,YAAY,qBAAqB,aAAa,6sFAA6sF,wBAAwB,6CAA6C,gCAAgC,6BAA6B,gBAAgB,MAAM,uBAAuB,IAAI,0DAA0D,aAAa,EAAE,aAAa,qBAAqB,aAAa,cAAc,sDAAsD,mBAAmB,aAAa,wBAAwB,8BAA8B,wBAAwB,6IAA6I,sBAAsB,gCAAgC,kBAAkB,4BAA4B,qBAAqB,qBAAqB,UAAU,yCAAyC,cAAc,4BAA4B,uBAAuB,wBAAwB,gDAAgD,uBAAuB,mCAAmC,qBAAqB,sBAAsB,oFAAoF,aAAa,EAAE,aAAa,qBAAqB,aAAa,yKAAyK,GAAG,qBAAqB,aAAa,mBAAmB,4BAA4B,0BAA0B,iCAAiC,qCAAqC,iCAAiC,iCAAiC,2BAA2B,qCAAqC,6BAA6B,gCAAgC,6BAA6B,6BAA6B,0BAA0B,yBAAyB,sBAAsB,4BAA4B,yBAAyB,kGAAkG,mBAAmB,+BAA+B,4BAA4B,wBAAwB,sBAAsB,EAAE,aAAa,qBAAqB,aAAa,mHAAmH,gIAAgI,uBAAuB,kBAAkB,EAAE,0BAA0B,wBAAwB,EAAE,QAAQ,sBAAsB,aAAa,gBAAgB,uCAAuC,6EAA6E,YAAY,6DAA6D,SAAS,cAAc,oBAAoB,0JAA0J,mBAAmB,mBAAmB,oBAAoB,oBAAoB,gDAAgD,EAAE,oHAAoH,sBAAsB,aAAa,qEAAqE,wBAAwB,YAAY,oBAAoB,EAAE,8FAA8F,uDAAuD,WAAW,mDAAmD,+MAA+M,EAAE,8DAA8D,EAAE,wDAAwD,sBAAsB,aAAa,aAAa,wBAAwB,kBAAkB,4BAA4B,sBAAsB,sDAAsD,GAAG,sBAAsB,aAAa,cAAc,kEAAkE,8BAA8B,mDAAmD,oBAAoB,mEAAmE,uBAAuB,aAAa,EAAE,wBAAwB,sBAAsB,aAAa,wPAAwP,qIAAqI,cAAc,gEAAgE,eAAe,eAAe,4BAA4B,+EAA+E,eAAe,cAAc,0NAA0N,mBAAmB,kMAAkM,wBAAwB,aAAa,kBAAkB,uBAAuB,qBAAqB,uBAAuB,yBAAyB,cAAc,qCAAqC,yBAAyB,cAAc,qCAAqC,0BAA0B,oCAAoC,oBAAoB,WAAW,QAAQ,IAAI,yCAAyC,SAAS,eAAe,cAAc,8KAA8K,mBAAmB,uBAAuB,mVAAmV,+FAA+F,KAAK,qHAAqH,qDAAqD,mBAAmB,yBAAyB,eAAe,gDAAgD,yBAAyB,+BAA+B,eAAe,mCAAmC,iBAAiB,4EAA4E,uBAAuB,gBAAgB,mBAAmB,cAAc,+kBAA+kB,iBAAiB,QAAQ,0CAA0C,iBAAiB,iBAAiB,yBAAyB,6SAA6S,8FAA8F,YAAY,0UAA0U,SAAS,sLAAsL,8GAA8G,OAAO,6CAA6C,IAAI,mBAAmB,oFAAoF,oBAAoB,iBAAiB,gNAAgN,SAAS,sBAAsB,yBAAyB,kBAAkB,QAAQ,iCAAiC,wBAAwB,EAAE,iCAAiC,oBAAoB,WAAW,6CAA6C,oBAAoB,kBAAkB,kDAAkD,wBAAwB,EAAE,kDAAkD,uBAAuB,oBAAoB,cAAc,oBAAoB,kFAAkF,yCAAyC,oCAAoC,MAAM,WAAW,iCAAiC,YAAY,sBAAsB,gBAAgB,EAAE,uJAAuJ,iLAAiL,6FAA6F,yDAAyD,gFAAgF,gEAAgE,4DAA4D,yEAAyE,wEAAwE,SAAS,+FAA+F,2BAA2B,oHAAoH,WAAW,gFAAgF,QAAQ,WAAW,6BAA6B,YAAY,mBAAmB,6BAA6B,iGAAiG,gFAAgF,2CAA2C,kBAAkB,qBAAqB,cAAc,wBAAwB,+CAA+C,wBAAwB,yBAAyB,YAAY,EAAE,yMAAyM,sBAAsB,aAAa,+LAA+L,GAAG,sBAAsB,aAAa,gBAAgB,4GAA4G,uCAAuC,iDAAiD,yCAAyC,8CAA8C,0CAA0C,kCAAkC,oBAAoB,mEAAmE,uBAAuB,aAAa,EAAE,8BAA8B,sBAAsB,aAAa,gCAAgC,cAAc,aAAa,mBAAmB,8CAA8C,qBAAqB,2BAA2B,aAAa,EAAE,aAAa,sBAAsB,aAAa,aAAa,6OAA6O,KAAK,yBAAyB,IAAI,yBAAyB,uBAAuB,OAAO,SAAS,IAAI,wGAAwG,yDAAyD,SAAS,aAAa,sDAAsD,GAAG,sBAAsB,aAAa,cAAc,uEAAuE,yBAAyB,mDAAmD,sDAAsD,sEAAsE,uBAAuB,aAAa,EAAE,kBAAkB,sBAAsB,aAAa,iCAAiC,0CAA0C,aAAa,mBAAmB,iGAAiG,qBAAqB,kBAAkB,aAAa,EAAE,aAAa,sBAAsB,aAAa,iFAAiF,MAAM,wDAAwD,gBAAgB,kBAAkB,6BAA6B,QAAQ,IAAI,+JAA+J,0DAA0D,IAAI,qUAAqU,SAAS,iBAAiB,MAAM,iDAAiD,uBAAuB,KAAK,qCAAqC,eAAe,wCAAwC,YAAY,IAAI,4BAA4B,uCAAuC,KAAK,2BAA2B,SAAS,sBAAsB,yFAAyF,uFAAuF,yBAAyB,sCAAsC,0BAA0B,uEAAuE,qDAAqD,oCAAoC,IAAI,EAAE,2BAA2B,oEAAoE,mBAAmB,EAAE,8CAA8C,sBAAsB,aAAa,cAAc,SAAS,gBAAgB,YAAY,WAAW,6BAA6B,SAAS,cAAc,sDAAsD,IAAI,UAAU,mEAAmE,MAAM,uDAAuD,SAAS,KAAK,OAAO,iBAAiB,WAAW,iCAAiC,SAAS,KAAK,SAAS,KAAK,4KAA4K,SAAS,kBAAkB,kBAAkB,gBAAgB,YAAY,WAAW,cAAc,SAAS,+DAA+D,4BAA4B,iBAAiB,WAAW,gDAAgD,SAAS,kCAAkC,8CAA8C,IAAI,qBAAqB,OAAO,EAAE,SAAS,IAAI,wGAAwG,gCAAgC,SAAS,qDAAqD,uBAAuB,SAAS,UAAU,2BAA2B,gCAAgC,yBAAyB,qCAAqC,wBAAwB,qCAAqC,wBAAwB,yBAAyB,UAAU,yCAAyC,gCAAgC,wBAAwB,yBAAyB,wBAAwB,aAAa,gBAAgB,mBAAmB,4BAA4B,mBAAmB,oDAAoD,sCAAsC,yBAAyB,wBAAwB,6BAA6B,eAAe,2BAA2B,gCAAgC,yBAAyB,gBAAgB,qCAAqC,aAAa,eAAe,2BAA2B,gCAAgC,yBAAyB,yCAAyC,wBAAwB,qCAAqC,cAAc,6BAA6B,yBAAyB,kBAAkB,kCAAkC,SAAS,yBAAyB,oPAAoP,4BAA4B,yBAAyB,6DAA6D,qEAAqE,aAAa,QAAQ,iBAAiB,0EAA0E,SAAS,+BAA+B,kEAAkE,YAAY,wBAAwB,4DAA4D,qBAAqB,aAAa,QAAQ,mBAAmB,2GAA2G,UAAU,EAAE,oDAAoD,sBAAsB,aAAa,gBAAgB,iDAAiD,wKAAwK,cAAc,aAAa,2BAA2B,gCAAgC,oHAAoH,2BAA2B,wBAAwB,wBAAwB,wCAAwC,iCAAiC,kCAAkC,sUAAsU,2GAA2G,mDAAmD,uCAAuC,8bAA8b,kDAAkD,IAAI,4GAA4G,uBAAuB,8CAA8C,2OAA2O,2BAA2B,QAAQ,QAAQ,oBAAoB,yKAAyK,2BAA2B,MAAM,gDAAgD,kDAAkD,UAAU,iBAAiB,qEAAqE,6NAA6N,6BAA6B,gEAAgE,QAAQ,+CAA+C,6NAA6N,wBAAwB,QAAQ,gWAAgW,oLAAoL,0bAA0b,mJAAmJ,gDAAgD,qDAAqD,UAAU,uEAAuE,6EAA6E,2BAA2B,qBAAqB,yFAAyF,sEAAsE,KAAK,0EAA0E,4CAA4C,iEAAiE,kBAAkB,2FAA2F,aAAa,EAAE,iKAAiK,sBAAsB,aAAa,gBAAgB,kCAAkC,4GAA4G,aAAa,uBAAuB,4BAA4B,oBAAoB,kCAAkC,0CAA0C,kBAAkB,cAAc,cAAc,oBAAoB,wBAAwB,oCAAoC,kBAAkB,yFAAyF,yEAAyE,UAAU,2BAA2B,QAAQ,8TAA8T,6MAA6M;AACvs9B,CAAC,6BAA6B,8jBAA8jB,uJAAuJ,8BAA8B,mDAAmD,4BAA4B,sOAAsO,kCAAkC,wBAAwB,uCAAuC,iUAAiU,6BAA6B,oBAAoB,0CAA0C,iCAAiC,sEAAsE,uBAAuB,uBAAuB,wCAAwC,kHAAkH,KAAK,uCAAuC,+BAA+B,KAAK,qCAAqC,oDAAoD,0CAA0C,kCAAkC,KAAK,wCAAwC,yDAAyD,sCAAsC,8BAA8B,MAAM,qBAAqB,+GAA+G,YAAY,yCAAyC,8BAA8B,MAAM,qBAAqB,kHAAkH,aAAa,aAAa,EAAE,qFAAqF,sBAAsB,aAAa,gHAAgH,uBAAuB,EAAE,wFAAwF,sBAAsB,aAAa,cAAc,wCAAwC,uBAAuB,2EAA2E,MAAM,EAAE,mBAAmB,uMAAuM,oFAAoF,+BAA+B,kEAAkE,MAAM,wNAAwN,mBAAmB,gBAAgB,eAAe,kCAAkC,gBAAgB,gBAAgB,cAAc,iBAAiB,gBAAgB,cAAc,kBAAkB,iLAAiL,+BAA+B,6CAA6C,uBAAuB,+KAA+K,GAAG,4IAA4I,2LAA2L,8CAA8C,mHAAmH,gCAAgC,oBAAoB,+BAA+B,+JAA+J,iDAAiD,EAAE,sGAAsG,sBAAsB,aAAa,cAAc,wCAAwC,uBAAuB,mCAAmC,MAAM,EAAE,mBAAmB,0VAA0V,6CAA6C,oCAAoC,4DAA4D,gBAAgB,eAAe,kCAAkC,gBAAgB,gBAAgB,cAAc,iBAAiB,+LAA+L,+BAA+B,oFAAoF,uBAAuB,sMAAsM,GAAG,8WAA8W,+XAA+X,2DAA2D,sLAAsL,gCAAgC,oBAAoB,+BAA+B,oKAAoK,mDAAmD,EAAE,iJAAiJ,sBAAsB,aAAa,sGAAsG,qBAAqB,kDAAkD,SAAS,EAAE,gBAAgB,MAAM,kEAAkE,iDAAiD,SAAS,2BAA2B,iEAAiE,OAAO,6BAA6B,iEAAiE,YAAY,IAAI,kBAAkB,2BAA2B,gBAAgB,uBAAuB,IAAI,mBAAmB,2CAA2C,IAAI,kCAAkC,UAAU,IAAI,6BAA6B,YAAY,IAAI,kBAAkB,2BAA2B,8BAA8B,uBAAuB,oIAAoI,eAAe,GAAG,sBAAsB,aAAa,gBAAgB,oGAAoG,iBAAiB,IAAI,iCAAiC,SAAS,8BAA8B,IAAI,oCAAoC,SAAS,KAAK,IAAI,kDAAkD,SAAS,KAAK,8BAA8B,MAAM,wDAAwD,yCAAyC,6BAA6B,QAAQ,IAAI,+JAA+J,4BAA4B,IAAI,qUAAqU,SAAS,6BAA6B,qBAAqB,6BAA6B,8CAA8C,IAAI,yBAAyB,SAAS,4BAA4B,2CAA2C,YAAY,IAAI,4BAA4B,uCAAuC,KAAK,2BAA2B,SAAS,sBAAsB,yFAAyF,cAAc,4BAA4B,MAAM,iDAAiD,uBAAuB,KAAK,sCAAsC,EAAE,cAAc,sBAAsB,aAAa,oBAAoB,yCAAyC,MAAM,EAAE,mBAAmB,wBAAwB,WAAW,kBAAkB,iBAAiB,YAAY,GAAG,sBAAsB,aAAa,WAAW,+XAA+X,GAAG,sBAAsB,aAAa,aAAa,mBAAmB,MAAM,KAAK,IAAI,YAAY,IAAI,iCAAiC,OAAO,SAAS,oBAAoB,cAAc,MAAM,YAAY,IAAI,4BAA4B,YAAY,UAAU,YAAY,GAAG,sBAAsB,aAAa,gBAAgB,oBAAoB,cAAc,uBAAuB,cAAc,mBAAmB,OAAO,QAAQ,cAAc,0BAA0B,iNAAiN,gBAAgB,qHAAqH,gBAAgB,6BAA6B,gBAAgB,sEAAsE,oBAAoB,iBAAiB,kMAAkM,gBAAgB,gMAAgM,oEAAoE,kEAAkE,SAAS,GAAG,mJAAmJ,0BAA0B,kCAAkC,qBAAqB,6BAA6B,oCAAoC,cAAc,yBAAyB,GAAG,gEAAgE,sGAAsG,sCAAsC,WAAW,QAAQ,sCAAsC,WAAW,KAAK,6BAA6B,iMAAiM,wKAAwK,GAAG,2CAA2C,gBAAgB,YAAY,sDAAsD,EAAE,mBAAmB,yCAAyC,yBAAyB,sCAAsC,sBAAsB,mHAAmH,mFAAmF,4HAA4H,gBAAgB,aAAa,EAAE,mBAAmB,wCAAwC,yBAAyB,oYAAoY,iBAAiB,+JAA+J,4BAA4B,aAAa,iJAAiJ,wEAAwE,+CAA+C,4IAA4I,gBAAgB,eAAe,EAAE,mBAAmB,wCAAwC,yBAAyB,gfAAgf,sIAAsI,oKAAoK,2BAA2B,oGAAoG,2BAA2B,kHAAkH,oDAAoD,+NAA+N,gBAAgB,4BAA4B,EAAE,oBAAoB,yCAAyC,yBAAyB,+GAA+G,gBAAgB,GAAG,2GAA2G,iFAAiF,sPAAsP,8GAA8G,gBAAgB,WAAW,EAAE,4CAA4C,mBAAmB,MAAM,mIAAmI,8GAA8G,sBAAsB,mFAAmF,cAAc,8SAA8S,aAAa,ooCAAooC,cAAc,MAAM,+MAA+M,cAAc,WAAW,2BAA2B,gBAAgB,4DAA4D,wBAAwB,eAAe,QAAQ,8GAA8G,aAAa,YAAY,0eAA0e,gBAAgB,wBAAwB,gBAAgB,YAAY,4CAA4C,uGAAuG,srBAAsrB,KAAK,gCAAgC,wLAAwL,oCAAoC,gBAAgB,0MAA0M,gDAAgD,0IAA0I,iBAAiB,mCAAmC,YAAY,GAAG,mKAAmK,IAAI,MAAM,oFAAoF,aAAa,8GAA8G,iBAAiB,sCAAsC,YAAY,GAAG,mKAAmK,IAAI,MAAM,0FAA0F,aAAa,kGAAkG,iBAAiB,kMAAkM,iDAAiD,wDAAwD,+CAA+C,0DAA0D,uEAAuE,4FAA4F,oMAAoM,6SAA6S,cAAc,MAAM,oIAAoI,gBAAgB,+BAA+B,yBAAyB,wEAAwE,gRAAgR,gBAAgB,EAAE,kCAAkC,yHAAyH,WAAW,mCAAmC,+LAA+L,gVAAgV,mZAAmZ,EAAE,8EAA8E,sBAAsB,aAAa,aAAa,uIAAuI,YAAY,GAAG,sBAAsB,aAAa,cAAc,wBAAwB,sDAAsD,yPAAyP,KAAK,qDAAqD,QAAQ,EAAE,0DAA0D,KAAK,YAAY,eAAe,4BAA4B,WAAW,SAAS,SAAS,QAAQ,6CAA6C,QAAQ,6HAA6H,QAAQ,EAAE,8CAA8C,eAAe,4BAA4B,WAAW,uCAAuC,QAAQ,wFAAwF,+CAA+C,QAAQ,0BAA0B,sBAAsB,+CAA+C,QAAQ,kBAAkB,eAAe,KAAK,iBAAiB,WAAW,WAAW,aAAa,sBAAsB,KAAK,iBAAiB,WAAW,YAAY,SAAS,iBAAiB,WAAW,YAAY,oBAAoB,KAAK,iBAAiB,WAAW,UAAU,KAAK,IAAI,gDAAgD,wCAAwC,KAAK,MAAM,kDAAkD,WAAW,wCAAwC,OAAO,OAAO,gBAAgB,+IAA+I,GAAG,sBAAsB,aAAa,cAAc,8DAA8D,aAAa,+fAA+f,cAAc,MAAM,4QAA4Q,cAAc,MAAM,mEAAmE,gBAAgB,QAAQ,mKAAmK,gBAAgB,QAAQ,8EAA8E,cAAc,eAAe,cAAc,OAAO,MAAM,6CAA6C,MAAM,eAAe,KAAK,MAAM,eAAe,KAAK,MAAM,eAAe,KAAK,MAAM,eAAe,iCAAiC,OAAO,MAAM,KAAK,eAAe,4BAA4B,OAAO,QAAQ,kDAAkD,oBAAoB,gBAAgB,kYAAkY,gBAAgB,yIAAyI,8DAA8D,yIAAyI,QAAQ,gBAAgB,sBAAsB,SAAS,MAAM,KAAK,KAAK,EAAE,iBAAiB,sBAAsB,wBAAwB,iFAAiF,MAAM,6EAA6E,yCAAyC,MAAM,eAAe,6CAA6C,MAAM,kDAAkD,oBAAoB,sCAAsC,MAAM,wDAAwD,MAAM,YAAY,KAAK,EAAE,iBAAiB,sBAAsB,gCAAgC,6CAA6C,MAAM,kBAAkB,2CAA2C,MAAM,mHAAmH,YAAY,KAAK,EAAE,iBAAiB,sBAAsB,gJAAgJ,YAAY,KAAK,EAAE,iBAAiB;AAC1v+B,KAAK,mIAAmI,wBAAwB,KAAK,KAAK,EAAE,iBAAiB,sBAAsB,qHAAqH,iCAAiC,SAAS,sQAAsQ,oBAAoB,wBAAwB,iBAAiB,IAAI,kFAAkF,eAAe,gEAAgE,gCAAgC,oBAAoB,wBAAwB,iBAAiB,IAAI,qFAAqF,eAAe,gEAAgE,mCAAmC,SAAS,uBAAuB,KAAK,KAAK,EAAE,iBAAiB,sBAAsB,wBAAwB,sCAAsC,MAAM,QAAQ,6EAA6E,MAAM,YAAY,KAAK,EAAE,iBAAiB,sBAAsB,sCAAsC,wGAAwG,2BAA2B,+BAA+B,kBAAkB,0BAA0B,MAAM,KAAK,IAAI,EAAE,iBAAiB,sBAAsB,mCAAmC,gBAAgB,MAAM,gCAAgC,YAAY,QAAQ,MAAM,gBAAgB,MAAM,4CAA4C,YAAY,MAAM,2BAA2B,KAAK,EAAE,iBAAiB,sBAAsB,+BAA+B,+CAA+C,MAAM,mDAAmD,gBAAgB,sBAAsB,uCAAuC,sDAAsD,MAAM,SAAS,MAAM,YAAY,KAAK,EAAE,iBAAiB,sBAAsB,mHAAmH,sDAAsD,MAAM,mBAAmB,aAAa,eAAe,EAAE,KAAK,IAAI,EAAE,iBAAiB,sBAAsB,qCAAqC,KAAK,UAAU,wBAAwB,sCAAsC,eAAe,iEAAiE,2CAA2C,MAAM,mBAAmB,aAAa,sBAAsB,EAAE,KAAK,gFAAgF,EAAE,iBAAiB,sBAAsB,2CAA2C,KAAK,YAAY,YAAY,KAAK,EAAE,iBAAiB,sBAAsB,6BAA6B,4CAA4C,MAAM,0CAA0C,iBAAiB,YAAY,KAAK,EAAE,iBAAiB,sBAAsB,yCAAyC,KAAK,YAAY,KAAK,EAAE,iBAAiB,sBAAsB,4CAA4C,4BAA4B,4CAA4C,MAAM,KAAK,IAAI,sBAAsB,qBAAqB,oBAAoB,uDAAuD,MAAM,mBAAmB,eAAe,qEAAqE,8CAA8C,MAAM,yCAAyC,gBAAgB,6EAA6E,wCAAwC,MAAM,2BAA2B,kBAAkB,yBAAyB,gMAAgM,MAAM,aAAa,gFAAgF,EAAE,iBAAiB,sBAAsB,qBAAqB,sBAAsB,0FAA0F,EAAE,iBAAiB,sBAAsB,yBAAyB,gDAAgD,UAAU,MAAM,UAAU,mBAAmB,MAAM,UAAU,8CAA8C,MAAM,wBAAwB,oBAAoB,eAAe,KAAK,EAAE,iBAAiB,sBAAsB,mEAAmE,yBAAyB,aAAa,kFAAkF,EAAE,iBAAiB,sBAAsB,iBAAiB,sBAAsB,2FAA2F,EAAE,iBAAiB,sBAAsB,yBAAyB,mCAAmC,wCAAwC,MAAM,oCAAoC,oBAAoB,eAAe,KAAK,EAAE,iBAAiB,sBAAsB,mEAAmE,oBAAoB,gDAAgD,MAAM,UAAU,yBAAyB,qBAAqB,mCAAmC,gDAAgD,MAAM,oFAAoF,kCAAkC,4BAA4B,kBAAkB,WAAW,0BAA0B,MAAM,yBAAyB,8BAA8B,MAAM,mBAAmB,KAAK,KAAK,EAAE,iBAAiB,sBAAsB,qIAAqI,uCAAuC,MAAM,QAAQ,UAAU,4BAA4B,KAAK,KAAK,EAAE,iBAAiB,sBAAsB,6BAA6B,yCAAyC,MAAM,QAAQ,UAAU,aAAa,QAAQ,aAAa,QAAQ,iBAAiB,yBAAyB,8dAA8d,cAAc,yBAAyB,cAAc,gDAAgD,gBAAgB,MAAM,wEAAwE,gBAAgB,qBAAqB,oJAAoJ,oWAAoW,qNAAqN,EAAE,gFAAgF,sBAAsB,aAAa,mdAAmd,oCAAoC,mIAAmI,QAAQ,KAAK,WAAW,QAAQ,IAAI,gBAAgB,YAAY,eAAe,KAAK,sEAAsE,QAAQ,cAAc,KAAK,uBAAuB,KAAK,kCAAkC,gCAAgC,eAAe,IAAI,qBAAqB,QAAQ,IAAI,mCAAmC,mJAAmJ,aAAa,EAAE,8FAA8F,sCAAsC,aAAa,aAAa,IAAI,OAAO,2CAA2C,eAAe,YAAY,mBAAmB,mCAAmC,2BAA2B,WAAW,2CAA2C,8BAA8B,oDAAoD,EAAE,qBAAqB,sBAAsB,aAAa,WAAW,4KAA4K,GAAG,sBAAsB,aAAa,cAAc,mBAAmB,OAAO,QAAQ,sBAAsB,iHAAiH,gBAAgB,iDAAiD,cAAc,mCAAmC,gBAAgB,sEAAsE,kBAAkB,oJAAoJ,kBAAkB,qBAAqB,gBAAgB,QAAQ,uBAAuB,aAAa,aAAa,cAAc,4IAA4I,gBAAgB,2KAA2K,QAAQ,KAAK,oBAAoB,+CAA+C,IAAI,wKAAwK,UAAU,GAAG,UAAU,kBAAkB,KAAK,wDAAwD,WAAW,QAAQ,MAAM,wBAAwB,MAAM,qFAAqF,kBAAkB,6BAA6B,QAAQ,KAAK,uBAAuB,QAAQ,KAAK,KAAK,eAAe,6BAA6B,aAAa,+BAA+B,YAAY,MAAM,oBAAoB,WAAW,cAAc,sBAAsB,KAAK,oBAAoB,WAAW,cAAc,UAAU,IAAI,uBAAuB,aAAa,kBAAkB,QAAQ,KAAK,WAAW,QAAQ,OAAO,wBAAwB,KAAK,OAAO,wBAAwB,KAAK,OAAO,wBAAwB,KAAK,OAAO,wBAAwB,oBAAoB,IAAI,+BAA+B,8EAA8E,cAAc,MAAM,QAAQ,IAAI,uBAAuB,QAAQ,IAAI,uBAAuB,QAAQ,IAAI,qBAAqB,mEAAmE,cAAc,uGAAuG,oBAAoB,uFAAuF,oBAAoB,gBAAgB,0CAA0C,kBAAkB,2BAA2B,iGAAiG,+BAA+B,YAAY,kBAAkB,gBAAgB,iPAAiP,oBAAoB,SAAS,gBAAgB,kGAAkG,kCAAkC,IAAI,kEAAkE,KAAK,aAAa,gGAAgG,iCAAiC,KAAK,aAAa,IAAI,6OAA6O,qBAAqB,wDAAwD,kBAAkB,gCAAgC,8CAA8C,KAAK,2MAA2M,kBAAkB,gCAAgC,2BAA2B,KAAK,2CAA2C,QAAQ,oBAAoB,eAAe,2IAA2I,qDAAqD,cAAc,MAAM,+FAA+F,+BAA+B,KAAK,kCAAkC,oBAAoB,MAAM,2CAA2C,IAAI,gCAAgC,0CAA0C,cAAc,mBAAmB,QAAQ,MAAM,iDAAiD,0EAA0E,SAAS,IAAI,qCAAqC,SAAS,cAAc,yIAAyI,oBAAoB,kCAAkC,cAAc,2BAA2B,oBAAoB,YAAY,kWAAkW,kBAAkB,iRAAiR,8YAA8Y,MAAM,sBAAsB,MAAM,qBAAqB,MAAM,wBAAwB,MAAM,oBAAoB,MAAM,oBAAoB,MAAM,mBAAmB,kFAAkF,EAAE,qBAAqB,sBAAsB,aAAa,aAAa,4LAA4L,YAAY,GAAG,EAAE,GAAG,WAAW;;;;;;;;;;;ACb3ohnSA,mBAAmB,uDAA8B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU,WAAW;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,0CAA0C;AAC9D,UAAU;AACV;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,aAAa,EAAC;;;;;;;;;;;;;;;;AC9G7B;AACA;AACA;AACA;AACA;AACA,cAAc,mBAAO,CAAC,6CAAkC;AACxD;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,WAAW;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,EAAE;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE,GAAG;AAC1B;AACA,OAAO;AACP,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE,GAAG;AAC1B;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,4BAA4B,kBAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,qCAAqC;AACzD,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,OAAO;AACP;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,kBAAkB,EAAC;;;;;;;;;;;;;;;;;;ACvLlC;AACA;AACA;AACA;AACA,mBAAmB,uDAA8B;AACT;AACY;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,MAAM;AAChB;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU,KAAK;AACf;AACA;AACA;AACA;AACA;AACA,UAAU,WAAW;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,0DAAiB;AACpD;AACA;AACA;AACA;AACA,mCAAmC,oDAAW;AAC9C;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA,cAAc,KAAK;AACnB;AACA;AACA,iCAAiC;AACjC;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA,cAAc,KAAK;AACnB;AACA;AACA,iCAAiC;AACjC;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA,cAAc,KAAK;AACnB;AACA;AACA,iCAAiC;AACjC;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA,cAAc,KAAK;AACnB;AACA;AACA,iCAAiC;AACjC;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA,QAAQ;AACR;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,KAAK;AACnB,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,gBAAgB,KAAK;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,4BAA4B,mBAAmB;AAC/C;AACA,0BAA0B,cAAc;AACxC;AACA,oBAAoB;AACpB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,aAAa;AACb,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb,OAAO;AACP;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,aAAa,EAAC;;;;;;;;;;;;;;;;ACnd7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,uDAA8B;AACjD;AACA;AACA,YAAY,UAAU;AACtB;AACA,YAAY,eAAe;AAC3B;AACA;AACA;AACA;AACA;AACA,eAAe,mBAAO,CAAC,wCAA6B;AACpD;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,UAAU,SAAS;AACnB;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,UAAU,QAAQ;AAClB;AACA;AACA;AACA,UAAU,KAAK;AACf;AACA;AACA;AACA,UAAU,SAAS;AACnB;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,cAAc,WAAW;AACzB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA,cAAc,KAAK;AACnB;AACA;AACA,iCAAiC;AACjC;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA,cAAc,KAAK;AACnB;AACA;AACA,iCAAiC;AACjC;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA,cAAc,KAAK;AACnB;AACA;AACA,iCAAiC;AACjC;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA,cAAc,KAAK;AACnB;AACA;AACA,iCAAiC;AACjC;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,MAAM;AACnB;AACA,aAAa,OAAO,EAAE;AACtB,4CAA4C,sBAAsB;AAClE;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,KAAK;AACnB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,gBAAgB,QAAQ,WAAW;AACpE;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,mCAAmC;AACnC,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,4BAA4B;AAC5B;AACA,yBAAyB;AACzB;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,2BAA2B,YAAY,EAAE,8BAA8B;AACvE;AACA,0BAA0B,EAAE,WAAW;AACvC;AACA;AACA;AACA;AACA,oCAAoC,eAAe,EAAE,WAAW;AAChE;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,kBAAkB;AAC9C,gBAAgB;AAChB;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,KAAK;AACnB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,WAAW,EAAC;;;;;;;;;;;;;;;;;AC5X3B;AACA;AACA;AACA;AACA;AACA;AACwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,gCAAgC,oDAAW;AAC3C;AACA,UAAU,SAAS;AACnB;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,MAAM;AACtB;AACA,gBAAgB,MAAM;AACtB;AACA,mBAAmB,MAAM;AACzB,mBAAmB,MAAM;AACzB,mBAAmB,MAAM;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,OAAO;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP;AACA;AACA;AACA,iEAAe,iBAAiB,EAAC;;;;;;;;;;;;;;;;;AClIjC,mBAAmB,uDAA8B;AACjD;AAC6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,WAAW;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,wDAAY;AACxC,WAAW;AACX,4BAA4B,wDAAY;AACxC;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,aAAa,EAAC;;;;;;;;;;;;;;;;ACpD7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,uDAA8B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,eAAe;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,WAAW;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA,OAAO;AACP;AACA;AACA,4BAA4B;AAC5B;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,iEAAe,kBAAkB,EAAC;;;;;;;;;;;;;;;;;ACrElC,mBAAmB,uDAA8B;AACjD;AACyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,sEAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,YAAY,EAAC;;;;;;;;;;;ACpD5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;;;;;;;;;;;AClEA;AACA;AACA,kBAAkB,YAAY;AAC9B;AACA;AACA;AACA;AACA;AACA,GAAG,mBAAO,CAAC,yBAAc;AACzB,GAAG,mBAAO,CAAC,0BAAe;AAC1B,GAAG,mBAAO,CAAC,6BAAkB;AAC7B,GAAG,mBAAO,CAAC,uBAAY;AACvB,GAAG,mBAAO,CAAC,uBAAY;AACvB,GAAG,mBAAO,CAAC,2BAAgB;AAC3B,GAAG,mBAAO,CAAC,gCAAqB;AAChC,GAAG,mBAAO,CAAC,4BAAiB;AAC5B,GAAG,mBAAO,CAAC,4BAAiB;AAC5B,GAAG,mBAAO,CAAC,yBAAc;AACzB,GAAG,mBAAO,CAAC,yBAAc;AACzB,GAAG,mBAAO,CAAC,0BAAe;AAC1B,GAAG,mBAAO,CAAC,0BAAe;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;;;;;;;;;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,sBAAsB;AACtB,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,yBAAyB,QAAQ;AACjC,6BAA6B,oBAAoB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C,4CAA4C;AAC5C,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,UAAU;AACtE,2DAA2D,iCAAiC;AAC5F,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA,+CAA+C;AAC/C,+BAA+B;AAC/B;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA,yCAAyC;AACzC,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,aAAa;AACb,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACxaA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,gDAAqC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,qFAAqF;AACrH;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACpHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;;;;;;;;;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA,gBAAgB;AAChB;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;;;;;;;;;;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://ab_platform_web/./ABDesigner/ab_work_object_workspace_popupNewDataField.js","webpack://ab_platform_web/./ABDesigner/ab_work_object_workspace_popupSortFields.js","webpack://ab_platform_web/./AppBuilder/ABFactory.js","webpack://ab_platform_web/./AppBuilder/_factory_utils/Dialog.js","webpack://ab_platform_web/./AppBuilder/core/ABApplicationCore.js","webpack://ab_platform_web/./AppBuilder/core/ABDataCollectionCore.js","webpack://ab_platform_web/./AppBuilder/core/ABDefinitionCore.js","webpack://ab_platform_web/./AppBuilder/core/ABFactoryCore.js","webpack://ab_platform_web/./AppBuilder/core/ABFieldManager.js","webpack://ab_platform_web/./AppBuilder/core/ABIndexCore.js","webpack://ab_platform_web/./AppBuilder/core/ABMLClassCore.js","webpack://ab_platform_web/./AppBuilder/core/ABModelCore.js","webpack://ab_platform_web/./AppBuilder/core/ABObjectCore.js","webpack://ab_platform_web/./AppBuilder/core/ABObjectQueryCore.js","webpack://ab_platform_web/./AppBuilder/core/ABProcessCore.js","webpack://ab_platform_web/./AppBuilder/core/ABViewManagerCore.js","webpack://ab_platform_web/./AppBuilder/core/FilterComplexCore.js","webpack://ab_platform_web/./AppBuilder/core/RowFilterCore.js","webpack://ab_platform_web/./AppBuilder/core/dataFields/ABFieldAutoIndexCore.js","webpack://ab_platform_web/./AppBuilder/core/dataFields/ABFieldBooleanCore.js","webpack://ab_platform_web/./AppBuilder/core/dataFields/ABFieldCalculateCore.js","webpack://ab_platform_web/./AppBuilder/core/dataFields/ABFieldCombineCore.js","webpack://ab_platform_web/./AppBuilder/core/dataFields/ABFieldConnectCore.js","webpack://ab_platform_web/./AppBuilder/core/dataFields/ABFieldCore.js","webpack://ab_platform_web/./AppBuilder/core/dataFields/ABFieldDateCore.js","webpack://ab_platform_web/./AppBuilder/core/dataFields/ABFieldDateTimeCore.js","webpack://ab_platform_web/./AppBuilder/core/dataFields/ABFieldEmailCore.js","webpack://ab_platform_web/./AppBuilder/core/dataFields/ABFieldFileCore.js","webpack://ab_platform_web/./AppBuilder/core/dataFields/ABFieldFormulaCore.js","webpack://ab_platform_web/./AppBuilder/core/dataFields/ABFieldImageCore.js","webpack://ab_platform_web/./AppBuilder/core/dataFields/ABFieldJsonCore.js","webpack://ab_platform_web/./AppBuilder/core/dataFields/ABFieldListCore.js","webpack://ab_platform_web/./AppBuilder/core/dataFields/ABFieldLongTextCore.js","webpack://ab_platform_web/./AppBuilder/core/dataFields/ABFieldNumberCore.js","webpack://ab_platform_web/./AppBuilder/core/dataFields/ABFieldStringCore.js","webpack://ab_platform_web/./AppBuilder/core/dataFields/ABFieldTextFormulaCore.js","webpack://ab_platform_web/./AppBuilder/core/dataFields/ABFieldTreeCore.js","webpack://ab_platform_web/./AppBuilder/core/dataFields/ABFieldUserCore.js","webpack://ab_platform_web/./AppBuilder/core/process/ABProcessLaneCore.js","webpack://ab_platform_web/./AppBuilder/core/process/ABProcessParticipantCore.js","webpack://ab_platform_web/./AppBuilder/core/process/ABProcessTaskManager.js","webpack://ab_platform_web/./AppBuilder/core/process/tasks/ABProcessElementCore.js","webpack://ab_platform_web/./AppBuilder/core/process/tasks/ABProcessEndCore.js","webpack://ab_platform_web/./AppBuilder/core/process/tasks/ABProcessGatewayExclusiveCore.js","webpack://ab_platform_web/./AppBuilder/core/process/tasks/ABProcessTaskEmailCore.js","webpack://ab_platform_web/./AppBuilder/core/process/tasks/ABProcessTaskServiceAccountingBatchProcessingCore.js","webpack://ab_platform_web/./AppBuilder/core/process/tasks/ABProcessTaskServiceAccountingFPCloseCore.js","webpack://ab_platform_web/./AppBuilder/core/process/tasks/ABProcessTaskServiceAccountingFPYearCloseCore.js","webpack://ab_platform_web/./AppBuilder/core/process/tasks/ABProcessTaskServiceAccountingJEArchiveCore.js","webpack://ab_platform_web/./AppBuilder/core/process/tasks/ABProcessTaskServiceCalculateCore.js","webpack://ab_platform_web/./AppBuilder/core/process/tasks/ABProcessTaskServiceCore.js","webpack://ab_platform_web/./AppBuilder/core/process/tasks/ABProcessTaskServiceGetResetPasswordUrlCore.js","webpack://ab_platform_web/./AppBuilder/core/process/tasks/ABProcessTaskServiceInsertRecordCore.js","webpack://ab_platform_web/./AppBuilder/core/process/tasks/ABProcessTaskServiceQueryCore.js","webpack://ab_platform_web/./AppBuilder/core/process/tasks/ABProcessTaskSubProcessCore.js","webpack://ab_platform_web/./AppBuilder/core/process/tasks/ABProcessTaskUserApprovalCore.js","webpack://ab_platform_web/./AppBuilder/core/process/tasks/ABProcessTaskUserCore.js","webpack://ab_platform_web/./AppBuilder/core/process/tasks/ABProcessTaskUserExternalCore.js","webpack://ab_platform_web/./AppBuilder/core/process/tasks/ABProcessTriggerCore.js","webpack://ab_platform_web/./AppBuilder/core/process/tasks/ABProcessTriggerLifecycleCore.js","webpack://ab_platform_web/./AppBuilder/core/process/tasks/ABProcessTriggerTimerCore.js","webpack://ab_platform_web/./AppBuilder/core/ql/ABQLCore.js","webpack://ab_platform_web/./AppBuilder/core/ql/ABQLFindCore.js","webpack://ab_platform_web/./AppBuilder/core/ql/ABQLManagerCore.js","webpack://ab_platform_web/./AppBuilder/core/ql/ABQLRootObjectCore.js","webpack://ab_platform_web/./AppBuilder/core/ql/ABQLRow.js","webpack://ab_platform_web/./AppBuilder/core/ql/ABQLRowPluckCore.js","webpack://ab_platform_web/./AppBuilder/core/ql/ABQLRowUpdateCore.js","webpack://ab_platform_web/./AppBuilder/core/ql/ABQLSet.js","webpack://ab_platform_web/./AppBuilder/core/ql/ABQLSetFirstCore.js","webpack://ab_platform_web/./AppBuilder/core/ql/ABQLSetPluckCore.js","webpack://ab_platform_web/./AppBuilder/core/ql/ABQLSetSaveCore.js","webpack://ab_platform_web/./AppBuilder/core/ql/ABQLValue.js","webpack://ab_platform_web/./AppBuilder/core/ql/ABQLValueSaveCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewCSVExporterCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewCSVImporterCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewCarouselCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewChartAreaCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewChartBarCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewChartCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewChartLineCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewChartPieCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewCommentCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewConditionalContainerCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewConnectDataFilterCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewContainerCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewDataviewCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewDetailCheckboxCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewDetailComponentCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewDetailConnectCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewDetailCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewDetailCustomCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewDetailImageCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewDetailTextCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewDetailTreeCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewDocxBuilderCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewFormButtonCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewFormCheckboxCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewFormComponentCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewFormConnectCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewFormCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewFormCustomCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewFormDatepickerCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewFormNumberCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewFormReadonlyCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewFormSelectMultipleCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewFormSelectSingleCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewFormTextboxCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewFormTreeCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewGanttCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewGridCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewImageCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewKanbanCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewLabelCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewLayoutCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewListCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewMenuCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewPageCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewPivotCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewReportsManagerCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewTabCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewTextCore.js","webpack://ab_platform_web/./AppBuilder/core/views/ABViewWidgetCore.js","webpack://ab_platform_web/./AppBuilder/platform/ABApplication.js","webpack://ab_platform_web/./AppBuilder/platform/ABComponent.js","webpack://ab_platform_web/./AppBuilder/platform/ABDataCollection.js","webpack://ab_platform_web/./AppBuilder/platform/ABDefinition.js","webpack://ab_platform_web/./AppBuilder/platform/ABEmitter.js","webpack://ab_platform_web/./AppBuilder/platform/ABIndex.js","webpack://ab_platform_web/./AppBuilder/platform/ABMLClass.js","webpack://ab_platform_web/./AppBuilder/platform/ABModel.js","webpack://ab_platform_web/./AppBuilder/platform/ABModelQuery.js","webpack://ab_platform_web/./AppBuilder/platform/ABObject.js","webpack://ab_platform_web/./AppBuilder/platform/ABObjectExternal.js","webpack://ab_platform_web/./AppBuilder/platform/ABObjectImport.js","webpack://ab_platform_web/./AppBuilder/platform/ABObjectQuery.js","webpack://ab_platform_web/./AppBuilder/platform/ABProcess.js","webpack://ab_platform_web/./AppBuilder/platform/ABViewManager.js","webpack://ab_platform_web/./AppBuilder/platform/CSVImporter.js","webpack://ab_platform_web/./AppBuilder/platform/FilterComplex.js","webpack://ab_platform_web/./AppBuilder/platform/RowFilter.js","webpack://ab_platform_web/./AppBuilder/platform/RowUpdater.js","webpack://ab_platform_web/./AppBuilder/platform/dataFields/ABField.js","webpack://ab_platform_web/./AppBuilder/platform/dataFields/ABFieldAutoIndex.js","webpack://ab_platform_web/./AppBuilder/platform/dataFields/ABFieldBoolean.js","webpack://ab_platform_web/./AppBuilder/platform/dataFields/ABFieldCalculate.js","webpack://ab_platform_web/./AppBuilder/platform/dataFields/ABFieldCombine.js","webpack://ab_platform_web/./AppBuilder/platform/dataFields/ABFieldConnect.js","webpack://ab_platform_web/./AppBuilder/platform/dataFields/ABFieldDate.js","webpack://ab_platform_web/./AppBuilder/platform/dataFields/ABFieldDateTime.js","webpack://ab_platform_web/./AppBuilder/platform/dataFields/ABFieldEmail.js","webpack://ab_platform_web/./AppBuilder/platform/dataFields/ABFieldFile.js","webpack://ab_platform_web/./AppBuilder/platform/dataFields/ABFieldFormula.js","webpack://ab_platform_web/./AppBuilder/platform/dataFields/ABFieldImage.js","webpack://ab_platform_web/./AppBuilder/platform/dataFields/ABFieldJson.js","webpack://ab_platform_web/./AppBuilder/platform/dataFields/ABFieldList.js","webpack://ab_platform_web/./AppBuilder/platform/dataFields/ABFieldLongText.js","webpack://ab_platform_web/./AppBuilder/platform/dataFields/ABFieldNumber.js","webpack://ab_platform_web/./AppBuilder/platform/dataFields/ABFieldSelectivity.js","webpack://ab_platform_web/./AppBuilder/platform/dataFields/ABFieldString.js","webpack://ab_platform_web/./AppBuilder/platform/dataFields/ABFieldTextFormula.js","webpack://ab_platform_web/./AppBuilder/platform/dataFields/ABFieldTree.js","webpack://ab_platform_web/./AppBuilder/platform/dataFields/ABFieldUser.js","webpack://ab_platform_web/./AppBuilder/platform/process/ABProcessLane.js","webpack://ab_platform_web/./AppBuilder/platform/process/ABProcessParticipant.js","webpack://ab_platform_web/./AppBuilder/platform/process/tasks/ABProcessElement.js","webpack://ab_platform_web/./AppBuilder/platform/process/tasks/ABProcessEnd.js","webpack://ab_platform_web/./AppBuilder/platform/process/tasks/ABProcessGatewayExclusive.js","webpack://ab_platform_web/./AppBuilder/platform/process/tasks/ABProcessTaskEmail.js","webpack://ab_platform_web/./AppBuilder/platform/process/tasks/ABProcessTaskService.js","webpack://ab_platform_web/./AppBuilder/platform/process/tasks/ABProcessTaskServiceAccountingBatchProcessing.js","webpack://ab_platform_web/./AppBuilder/platform/process/tasks/ABProcessTaskServiceAccountingFPClose.js","webpack://ab_platform_web/./AppBuilder/platform/process/tasks/ABProcessTaskServiceAccountingFPYearClose.js","webpack://ab_platform_web/./AppBuilder/platform/process/tasks/ABProcessTaskServiceAccountingJEArchive.js","webpack://ab_platform_web/./AppBuilder/platform/process/tasks/ABProcessTaskServiceCalculate.js","webpack://ab_platform_web/./AppBuilder/platform/process/tasks/ABProcessTaskServiceGetResetPasswordUrl.js","webpack://ab_platform_web/./AppBuilder/platform/process/tasks/ABProcessTaskServiceInsertRecord.js","webpack://ab_platform_web/./AppBuilder/platform/process/tasks/ABProcessTaskServiceQuery.js","webpack://ab_platform_web/./AppBuilder/platform/process/tasks/ABProcessTaskSubProcess.js","webpack://ab_platform_web/./AppBuilder/platform/process/tasks/ABProcessTaskUser.js","webpack://ab_platform_web/./AppBuilder/platform/process/tasks/ABProcessTaskUserApproval.js","webpack://ab_platform_web/./AppBuilder/platform/process/tasks/ABProcessTaskUserExternal.js","webpack://ab_platform_web/./AppBuilder/platform/process/tasks/ABProcessTrigger.js","webpack://ab_platform_web/./AppBuilder/platform/process/tasks/ABProcessTriggerLifecycle.js","webpack://ab_platform_web/./AppBuilder/platform/process/tasks/ABProcessTriggerTimer.js","webpack://ab_platform_web/./AppBuilder/platform/ql/ABQL.js","webpack://ab_platform_web/./AppBuilder/platform/ql/ABQLFind.js","webpack://ab_platform_web/./AppBuilder/platform/ql/ABQLManager.js","webpack://ab_platform_web/./AppBuilder/platform/ql/ABQLRootObject.js","webpack://ab_platform_web/./AppBuilder/platform/ql/ABQLRowPluck.js","webpack://ab_platform_web/./AppBuilder/platform/ql/ABQLRowSave.js","webpack://ab_platform_web/./AppBuilder/platform/ql/ABQLRowUpdate.js","webpack://ab_platform_web/./AppBuilder/platform/ql/ABQLSetFirst.js","webpack://ab_platform_web/./AppBuilder/platform/ql/ABQLSetPluck.js","webpack://ab_platform_web/./AppBuilder/platform/ql/ABQLSetSave.js","webpack://ab_platform_web/./AppBuilder/platform/ql/ABQLValueSave.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABView.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewCSVExporter.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewCSVImporter.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewCarousel.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewChart.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewChartArea.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewChartBar.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewChartComponent.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewChartLine.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewChartPie.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewComment.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewComponent.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewConditionalContainer.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewConnectDataFilter.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewContainer.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewDataview.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewDetail.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewDetailCheckbox.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewDetailComponent.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewDetailConnect.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewDetailCustom.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewDetailImage.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewDetailText.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewDetailTree.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewDocxBuilder.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewForm.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewFormButton.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewFormCheckbox.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewFormComponent.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewFormConnect.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewFormCustom.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewFormDatepicker.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewFormNumber.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewFormReadonly.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewFormSelectMultiple.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewFormSelectSingle.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewFormTextbox.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewFormTree.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewGantt.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewGrid.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewGridPopupExport.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewGridPopupMassUpdate.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewGridPopupSortFields.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewImage.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewKanban.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewKanbanFormSidePanel.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewLabel.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewLayout.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewList.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewMenu.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewPage.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewPivot.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewReportsManager.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewTab.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewText.js","webpack://ab_platform_web/./AppBuilder/platform/views/ABViewWidget.js","webpack://ab_platform_web/./AppBuilder/platform/views/viewProperties/ABViewProperty.js","webpack://ab_platform_web/./AppBuilder/platform/views/viewProperties/ABViewPropertyAddPage.js","webpack://ab_platform_web/./AppBuilder/platform/views/viewProperties/ABViewPropertyEditPage.js","webpack://ab_platform_web/./AppBuilder/platform/views/viewProperties/ABViewPropertyFilterData.js","webpack://ab_platform_web/./AppBuilder/platform/views/viewProperties/ABViewPropertyLinkPage.js","webpack://ab_platform_web/./AppBuilder/platform/workspaceViews/ABObjectWorkspaceView.js","webpack://ab_platform_web/./AppBuilder/platform/workspaceViews/ABObjectWorkspaceViewCollection.js","webpack://ab_platform_web/./AppBuilder/platform/workspaceViews/ABObjectWorkspaceViewComponent.js","webpack://ab_platform_web/./AppBuilder/platform/workspaceViews/ABObjectWorkspaceViewGantt.js","webpack://ab_platform_web/./AppBuilder/platform/workspaceViews/ABObjectWorkspaceViewGrid.js","webpack://ab_platform_web/./AppBuilder/platform/workspaceViews/ABObjectWorkspaceViewKanban.js","webpack://ab_platform_web/./AppBuilder/rules/ABViewQueryBuilderObjectFieldConditions.js","webpack://ab_platform_web/./AppBuilder/rules/ABViewRule.js","webpack://ab_platform_web/./AppBuilder/rules/ABViewRuleAction.js","webpack://ab_platform_web/./AppBuilder/rules/ABViewRuleList.js","webpack://ab_platform_web/./AppBuilder/rules/ABViewRuleListFormRecordRules.js","webpack://ab_platform_web/./AppBuilder/rules/ABViewRuleListFormSubmitRules.js","webpack://ab_platform_web/./AppBuilder/rules/ruleActions/ABViewRuleActionFormRecordRuleInsertConnected.js","webpack://ab_platform_web/./AppBuilder/rules/ruleActions/ABViewRuleActionFormRecordRuleRemoveConnected.js","webpack://ab_platform_web/./AppBuilder/rules/ruleActions/ABViewRuleActionFormRecordRuleUpdate.js","webpack://ab_platform_web/./AppBuilder/rules/ruleActions/ABViewRuleActionFormRecordRuleUpdateConnected.js","webpack://ab_platform_web/./AppBuilder/rules/ruleActions/ABViewRuleActionFormSubmitRuleClosePopup.js","webpack://ab_platform_web/./AppBuilder/rules/ruleActions/ABViewRuleActionFormSubmitRuleConfirmMessage.js","webpack://ab_platform_web/./AppBuilder/rules/ruleActions/ABViewRuleActionFormSubmitRuleEmail.js","webpack://ab_platform_web/./AppBuilder/rules/ruleActions/ABViewRuleActionFormSubmitRuleExistPage.js","webpack://ab_platform_web/./AppBuilder/rules/ruleActions/ABViewRuleActionFormSubmitRuleParentPage.js","webpack://ab_platform_web/./AppBuilder/rules/ruleActions/ABViewRuleActionFormSubmitRuleWebsite.js","webpack://ab_platform_web/./AppBuilder/rules/ruleActions/ABViewRuleActionObjectUpdater.js","webpack://ab_platform_web/./AppBuilder/uiSettings/config.js","webpack://ab_platform_web/./AppBuilder/uiSettings/configDesktop.js","webpack://ab_platform_web/./AppBuilder/uiSettings/configMobile.js","webpack://ab_platform_web/./AppBuilder/uiSettings/icons.js","webpack://ab_platform_web/./js/docxtemplater-image-module.v3.0.2.min.js","webpack://ab_platform_web/./js/docxtemplater.v3.0.12.min.js","webpack://ab_platform_web/./js/jszip.min.js","webpack://ab_platform_web/./node_modules/moment/locale/ sync ^\\.\\/.*$","webpack://ab_platform_web/./resources/Account.js","webpack://ab_platform_web/./resources/Multilingual.js","webpack://ab_platform_web/./resources/Network.js","webpack://ab_platform_web/./resources/NetworkRest.js","webpack://ab_platform_web/./resources/NetworkRestSocket.js","webpack://ab_platform_web/./resources/Storage.js","webpack://ab_platform_web/./resources/StorageLocal.js","webpack://ab_platform_web/./resources/Tenant.js","webpack://ab_platform_web/./webix_custom_components/activelist.js","webpack://ab_platform_web/./webix_custom_components/countfooter.js","webpack://ab_platform_web/./webix_custom_components/customComponentManager.js","webpack://ab_platform_web/./webix_custom_components/datetimepicker.js","webpack://ab_platform_web/./webix_custom_components/editlist.js","webpack://ab_platform_web/./webix_custom_components/edittree.js","webpack://ab_platform_web/./webix_custom_components/editunitlist.js","webpack://ab_platform_web/./webix_custom_components/focusableTemplate.js","webpack://ab_platform_web/./webix_custom_components/formioBuilder.js","webpack://ab_platform_web/./webix_custom_components/formioPreview.js","webpack://ab_platform_web/./webix_custom_components/numbertext.js","webpack://ab_platform_web/./webix_custom_components/timepicker.js","webpack://ab_platform_web/./webix_custom_components/totalfooter.js","webpack://ab_platform_web/./webix_custom_components/treesuggest.js"],"sourcesContent":["/*\r\n * ab_work_object_workspace_popupNewDataField\r\n *\r\n * Manage the Add New Data Field popup.\r\n *\r\n */\r\n\r\nconst ABComponent = require(\"../AppBuilder/platform/ABComponent\");\r\nconst ABFieldManager = require(\"../AppBuilder/core/ABFieldManager\");\r\n\r\nmodule.exports = class AB_Work_Object_Workspace_PopupNewDataField extends (\r\n   ABComponent\r\n) {\r\n   //.extend(idBase, function(App) {\r\n\r\n   constructor(App, idBase) {\r\n      idBase = idBase || \"ab_work_object_workspace_popupNewDataField\";\r\n\r\n      super(App, idBase);\r\n      var L = this.Label();\r\n\r\n      // internal list of Webix IDs to reference our UI components.\r\n      var ids = {\r\n         component: this.unique(`${idBase}_popNewField`),\r\n         types: this.unique(`${idBase}_popNewField_types`),\r\n         editDefinitions: this.unique(`${idBase}_popNewField_editDefinitions`),\r\n\r\n         buttonSave: this.unique(`${idBase}_popNewField_buttonSave`),\r\n         buttonCancel: this.unique(`${idBase}_popNewField_buttonCancel`),\r\n      };\r\n\r\n      // Our webix UI definition:\r\n      this.ui = {\r\n         view: \"window\",\r\n         position: \"center\",\r\n         id: ids.component,\r\n         resize: true,\r\n         modal: true,\r\n         height: 500,\r\n         width: 700,\r\n         head: {\r\n            view: \"toolbar\",\r\n            css: \"webix_dark\",\r\n            cols: [\r\n               {\r\n                  view: \"label\",\r\n                  label: L(\"Add new field\"),\r\n                  css: \"modal_title\",\r\n                  align: \"center\",\r\n               },\r\n               {\r\n                  view: \"button\",\r\n                  label: L(\"Close\"),\r\n                  autowidth: true,\r\n                  align: \"center\",\r\n                  click: function () {\r\n                     _logic.buttonCancel();\r\n                  },\r\n               },\r\n            ],\r\n         },\r\n         // ready: function () {\r\n         //  console.error('ready() called!!!')\r\n         //  _logic.resetState();\r\n         // },\r\n\r\n         body: {\r\n            view: \"scrollview\",\r\n            scroll: \"y\",\r\n            css: \"ab-add-fields-popup\",\r\n            borderless: true,\r\n            body: {\r\n               type: \"form\",\r\n               rows: [\r\n                  {\r\n                     view: \"richselect\",\r\n                     id: ids.types,\r\n                     label: L(\"Field type\"),\r\n                     labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n                     options: [\r\n                        //We will add these later\r\n                        { id: \"temporary\", view: \"temporary\" },\r\n                     ],\r\n                     on: {\r\n                        onChange: function (id, ev, node) {\r\n                           _logic.onChange(id);\r\n                        },\r\n                     },\r\n                  },\r\n                  {\r\n                     height: 10,\r\n                     type: \"line\",\r\n                  },\r\n                  {\r\n                     view: \"multiview\",\r\n                     id: ids.editDefinitions,\r\n                     padding: 0,\r\n                     // NOTE: can't leave this an empty []. We redefine this value later.\r\n                     cells: [\r\n                        {\r\n                           id: \"del_me\",\r\n                           view: \"label\",\r\n                           label: L(\"edit definition here\"),\r\n                        },\r\n                     ],\r\n                  },\r\n                  { height: 10 },\r\n                  {\r\n                     cols: [\r\n                        { fillspace: true },\r\n                        {\r\n                           view: \"button\",\r\n                           value: L(\"Cancel\"),\r\n                           css: \"ab-cancel-button\",\r\n                           autowidth: true,\r\n                           click: function () {\r\n                              _logic.buttonCancel();\r\n                           },\r\n                        },\r\n                        {\r\n                           view: \"button\",\r\n                           css: \"webix_primary\",\r\n                           id: ids.buttonSave,\r\n                           label: L(\"Add Column\"),\r\n                           autowidth: true,\r\n                           type: \"form\",\r\n                           click: function () {\r\n                              _logic.buttonSave();\r\n                           },\r\n                        },\r\n                     ],\r\n                  },\r\n               ],\r\n            },\r\n         },\r\n         on: {\r\n            //onBeforeShow: function () {\r\n            //  _logic.resetState();\r\n            //},\r\n            onHide: function () {\r\n               _logic.resetState();\r\n            },\r\n         },\r\n      };\r\n\r\n      var _objectHash = {}; // 'name' => ABFieldXXX object\r\n      var _componentHash = {}; // 'name' => ABFieldXXX ui component\r\n      var _componentsByType = {}; // 'type' => ABFieldXXX ui component\r\n      var _currentEditor = null;\r\n      var _currentApplication = null;\r\n      var _currentObject = null;\r\n\r\n      var defaultEditorComponent = null; // the default editor.\r\n      var defaultEditorID = null; // the default editor id.\r\n      var submenus = []; // Create the submenus for our Data Fields:\r\n\r\n      var _editField = null; // field instance being edited\r\n\r\n      // Our init() function for setting up our UI\r\n      this.init = (options) => {\r\n         // register our callbacks:\r\n         for (let c in _logic.callbacks) {\r\n            _logic.callbacks[c] = options[c] || _logic.callbacks[c];\r\n         }\r\n\r\n         // initialize our components\r\n         webix.ui(this.ui);\r\n         webix.extend($$(ids.component), webix.ProgressBar);\r\n\r\n         var Fields = ABFieldManager.allFields();\r\n\r\n         //// we need to load a submenu entry and an editor definition for each\r\n         //// of our Fields\r\n\r\n         var newEditorList = {\r\n            view: \"multiview\",\r\n            id: ids.editDefinitions,\r\n            animate: false,\r\n            rows: [],\r\n         };\r\n\r\n         Fields.forEach(function (F) {\r\n            var menuName = F.defaults().menuName;\r\n            var key = F.defaults().key;\r\n\r\n            // add a submenu for the fields multilingual key\r\n            submenus.push({ id: menuName, value: menuName });\r\n\r\n            // Add the Field's definition editor here:\r\n            var editorComponent = F.propertiesComponent(App, idBase);\r\n            if (!defaultEditorComponent) {\r\n               defaultEditorComponent = editorComponent;\r\n               defaultEditorID = menuName;\r\n            }\r\n            newEditorList.rows.push(editorComponent.ui);\r\n\r\n            _objectHash[menuName] = F;\r\n            _componentHash[menuName] = editorComponent;\r\n            _componentsByType[key] = editorComponent;\r\n         });\r\n\r\n         // the submenu button has a placeholder we need to remove and update\r\n         // with one that has all our submenus in it.\r\n         // var firstID = $$(ids.types).getFirstId();\r\n         // $$(ids.types).updateItem(firstID, {\r\n         //  value: labels.component.chooseType,\r\n         //  submenu: submenus\r\n         // })\r\n         $$(ids.types).define(\"options\", submenus);\r\n         $$(ids.types).refresh();\r\n\r\n         // now remove the 'del_me' definition editor placeholder.\r\n         webix.ui(newEditorList, $$(ids.editDefinitions));\r\n\r\n         // init & hide all the unused editors:\r\n         for (let c in _componentHash) {\r\n            _componentHash[c].init();\r\n\r\n            _componentHash[c].hide();\r\n         }\r\n\r\n         defaultEditorComponent.show(); // show the default editor\r\n         _currentEditor = defaultEditorComponent;\r\n\r\n         // set the richselect to the first option by default.\r\n         $$(ids.types).setValue(submenus[0].id);\r\n\r\n         // $$(ids.editDefinitions).show();\r\n\r\n         // $$(ids.editDefinitions).cells() // define the edit Definitions here.\r\n      };\r\n\r\n      // our internal business logic\r\n      var _logic = (this._logic = {\r\n         applicationLoad: (application) => {\r\n            _currentApplication = application;\r\n\r\n            // TODO : should load ABApplication to data field popup here ?\r\n            for (var menuName in _componentHash) {\r\n               if (\r\n                  _componentHash[menuName] &&\r\n                  _componentHash[menuName]._logic.applicationLoad\r\n               ) {\r\n                  _componentHash[menuName]._logic.applicationLoad(application);\r\n               }\r\n            }\r\n         },\r\n\r\n         objectLoad: (object) => {\r\n            _currentObject = object;\r\n\r\n            // TODO : should load current object to data field popup here ?\r\n            for (var menuName in _componentHash) {\r\n               if (\r\n                  _componentHash[menuName] &&\r\n                  _componentHash[menuName]._logic.objectLoad\r\n               ) {\r\n                  _componentHash[menuName]._logic.objectLoad(_currentObject);\r\n               }\r\n            }\r\n         },\r\n\r\n         buttonCancel: function () {\r\n            _logic.resetState();\r\n\r\n            // clear all editors:\r\n            for (var c in _componentHash) {\r\n               _componentHash[c].clear();\r\n            }\r\n\r\n            // hide this popup.\r\n            $$(ids.component).hide();\r\n         },\r\n\r\n         buttonSave: async function () {\r\n            $$(ids.buttonSave).disable();\r\n            // show progress\r\n            $$(ids.component).showProgress();\r\n\r\n            var editor = _currentEditor;\r\n            if (editor) {\r\n               // the editor can define some basic form validations.\r\n               if (editor.isValid()) {\r\n                  var vals = this.AB.cloneDeep(editor.values());\r\n\r\n                  var field = null;\r\n                  var oldData = null;\r\n\r\n                  var linkCol;\r\n\r\n                  // if this is an ADD operation, (_editField will be undefined)\r\n                  if (!_editField) {\r\n                     // get a new instance of a field:\r\n                     field = _currentObject.fieldNew(vals);\r\n\r\n                     // Provide a default width based on the column label\r\n                     var width = 20 + field.label.length * 10;\r\n                     if (field.settings.showIcon) {\r\n                        width = width + 20;\r\n                     }\r\n                     if (width < 100) {\r\n                        width = 100;\r\n                     }\r\n\r\n                     field.settings.width = width;\r\n\r\n                     // TODO workaround : where should I add a new link field to link object\r\n                     if (field.key == \"connectObject\") {\r\n                        let rand = Math.floor(Math.random() * 1000);\r\n                        field.settings.isSource = 1;\r\n\r\n                        var linkObject = field.datasourceLink;\r\n\r\n                        // 1:1, 1:M, M:1 should have same column name\r\n                        let linkColumnName = field.columnName;\r\n\r\n                        // check duplicate column\r\n                        if (\r\n                           linkObject.fields(\r\n                              (f) => f.columnName == linkColumnName\r\n                           ).length\r\n                        ) {\r\n                           linkColumnName = `${linkColumnName}${rand}`;\r\n                        }\r\n\r\n                        // M:N should have different column name into the join table\r\n                        if (\r\n                           field.settings.linkType == \"many\" &&\r\n                           field.settings.linkViaType == \"many\"\r\n                        ) {\r\n                           // NOTE : include random number to prevent duplicate column names\r\n                           linkColumnName = `${_currentObject.name}${rand}`;\r\n                        }\r\n\r\n                        linkCol = linkObject.fieldNew({\r\n                           // id: OP.Util.uuid(),\r\n\r\n                           key: field.key,\r\n\r\n                           columnName: linkColumnName,\r\n                           label: _currentObject.label,\r\n\r\n                           settings: {\r\n                              showIcon: field.settings.showIcon,\r\n\r\n                              linkObject: field.object.id,\r\n                              linkType: field.settings.linkViaType,\r\n                              linkViaType: field.settings.linkType,\r\n                              isCustomFK: field.settings.isCustomFK,\r\n                              indexField: field.settings.indexField,\r\n                              indexField2: field.settings.indexField2,\r\n                              isSource: 0,\r\n                              width: width,\r\n                           },\r\n                        });\r\n\r\n                        // Update link column id to source column\r\n                        // field.settings.linkColumn = linkCol.id;\r\n                     }\r\n                  } else {\r\n                     // NOTE: update label before .toObj for .unTranslate to .translations\r\n                     if (vals.label) _editField.label = vals.label;\r\n\r\n                     // use our _editField, backup our oldData\r\n                     oldData = _editField.toObj();\r\n\r\n                     // update changed values to old data\r\n                     var updateValues = this.AB.cloneDeep(oldData);\r\n                     for (let key in vals) {\r\n                        // update each values of .settings\r\n                        if (\r\n                           key == \"settings\" &&\r\n                           vals[\"settings\"] &&\r\n                           typeof vals[\"settings\"] == \"object\"\r\n                        ) {\r\n                           updateValues[\"settings\"] =\r\n                              updateValues[\"settings\"] || {};\r\n\r\n                           for (let keySetting in vals[\"settings\"]) {\r\n                              updateValues[\"settings\"][keySetting] =\r\n                                 vals[\"settings\"][keySetting];\r\n                           }\r\n                        } else {\r\n                           updateValues[key] = vals[key];\r\n                        }\r\n                     }\r\n\r\n                     _editField.fromValues(updateValues);\r\n\r\n                     field = _editField;\r\n                  }\r\n\r\n                  var validator = field.isValid();\r\n                  if (validator.fail()) {\r\n                     validator.updateForm($$(editor.ui.id));\r\n                     // OP.Form.isValidationError(errors, $$(editor.ui.id));\r\n\r\n                     // keep our old data\r\n                     if (oldData) {\r\n                        field.fromValues(oldData);\r\n                     }\r\n\r\n                     $$(ids.buttonSave).enable();\r\n                     $$(ids.component).hideProgress();\r\n                  } else {\r\n                     try {\r\n                        await field.save();\r\n\r\n                        let finishUpdateField = () => {\r\n                           $$(ids.buttonSave).enable();\r\n                           $$(ids.component).hideProgress();\r\n                           _currentEditor.clear();\r\n                           _logic.hide();\r\n                           _logic.callbacks.onSave(field);\r\n                        };\r\n\r\n                        let refreshModels = () => {\r\n                           // refresh linked object model\r\n                           linkCol.object.model().refresh();\r\n\r\n                           // refresh source object model\r\n                           // NOTE: M:1 relation has to refresh model after linked object's refreshed\r\n                           field.object.model().refresh();\r\n                        };\r\n\r\n                        // TODO workaround : update link column id\r\n                        if (linkCol != null) {\r\n                           linkCol.settings.linkColumn = field.id;\r\n                           await linkCol.save();\r\n\r\n                           // now linkCol has an .id, so update our field:\r\n                           field.settings.linkColumn = linkCol.id;\r\n                           await field.save();\r\n\r\n                           // when add new link fields, then run create migrate fields here\r\n                           if (!_editField) {\r\n                              await field.migrateCreate();\r\n                              await linkCol.migrateCreate();\r\n                           }\r\n\r\n                           refreshModels();\r\n                           finishUpdateField();\r\n                        } else {\r\n                           finishUpdateField();\r\n                        }\r\n                     } catch (err) {\r\n                        // if (\r\n                        //    OP.Validation.isFormValidationError(\r\n                        //       err,\r\n                        //       $$(editor.ui.id)\r\n                        //    )\r\n                        // ) {\r\n                        //    // for validation errors, keep things in place\r\n                        //    // and let the user fix the data:\r\n                        //    $$(ids.buttonSave).enable();\r\n                        //    $$(ids.component).hideProgress();\r\n                        // } else {\r\n                        //    var errMsg = err.toString();\r\n                        //    if (err.message) {\r\n                        //       errMsg = err.message;\r\n                        //    }\r\n                        //    webix.alert({\r\n                        //       title: \"Error saving fields.\",\r\n                        //       ok: \"tell appdev\",\r\n                        //       text: errMsg,\r\n                        //       type: \"alert-error\",\r\n                        //    });\r\n                        //    // Q: if not validation error, do we\r\n                        //    // then field.destroy() ? and let them try again?\r\n                        //    // $$(ids.buttonSave).enable();\r\n                        //    // $$(ids.component).hideProgress();\r\n                        // }\r\n                     }\r\n                  }\r\n               } else {\r\n                  $$(ids.buttonSave).enable();\r\n                  $$(ids.component).hideProgress();\r\n               }\r\n            } else {\r\n               this.AB.notify.developer(\r\n                  new Error(\"Could not find the current editor.\"),\r\n                  {}\r\n               );\r\n\r\n               $$(ids.buttonSave).enable();\r\n               $$(ids.component).hideProgress();\r\n            }\r\n\r\n            // if (!inputValidator.validateFormat(fieldInfo.name)) {\r\n            //  self.enable();\r\n            //  return;\r\n            // }\r\n\r\n            // // Validate duplicate field name\r\n            // var existsColumn = $.grep(dataTable.config.columns, function (c) { return c.id == fieldInfo.name.replace(/ /g, '_'); });\r\n            // if (existsColumn && existsColumn.length > 0 && !data.editFieldId) {\r\n            //  webix.alert({\r\n            //      title: labels.add_fields.duplicateFieldTitle,\r\n            //      text: labels.add_fields.duplicateFieldDescription,\r\n            //      ok: labels.common.ok\r\n            //  });\r\n            //  this.enable();\r\n            //  return;\r\n            // }\r\n\r\n            // if (fieldInfo.weight == null)\r\n            //  fieldInfo.weight = dataTable.config.columns.length;\r\n\r\n            // // Call callback function\r\n            // if (base.saveFieldCallback && base.fieldName) {\r\n            //  base.saveFieldCallback(base.fieldName, fieldInfo)\r\n            //      .then(function () {\r\n            //          self.enable();\r\n            //          base.resetState();\r\n            //          base.hide();\r\n            //      });\r\n            // }\r\n         },\r\n\r\n         callbacks: {\r\n            onCancel: function () {\r\n               console.warn(\"NO onCancel()!\");\r\n            },\r\n            onSave: function (field) {\r\n               console.warn(\"NO onSave()!\");\r\n            },\r\n         },\r\n\r\n         hide: function () {\r\n            $$(ids.component).hide();\r\n         },\r\n\r\n         modeAdd: function (allowFieldKey) {\r\n            // show default editor:\r\n            defaultEditorComponent.show(false, false);\r\n            _currentEditor = defaultEditorComponent;\r\n\r\n            // allow add the connect field only to import object\r\n            if (_currentObject.isImported) allowFieldKey = \"connectObject\";\r\n\r\n            if (allowFieldKey) {\r\n               var connectField = ABFieldManager.allFields().filter(\r\n                  (f) => f.defaults().key == allowFieldKey\r\n               )[0];\r\n               if (!connectField) return;\r\n               var connectMenuName = connectField.defaults().menuName;\r\n               $$(ids.types).setValue(connectMenuName);\r\n               $$(ids.types).disable();\r\n            }\r\n            // show the ability to switch data types\r\n            else {\r\n               $$(ids.types).enable();\r\n            }\r\n\r\n            $$(ids.types).show();\r\n\r\n            // change button text to 'add'\r\n            $$(ids.buttonSave).define(\"label\", L(\"Add Column\"));\r\n            $$(ids.buttonSave).refresh();\r\n         },\r\n\r\n         modeEdit: function (field) {\r\n            if (_currentEditor) _currentEditor.hide();\r\n\r\n            // switch to this field's editor:\r\n            // hide the rest\r\n            for (var c in _componentsByType) {\r\n               if (c == field.key) {\r\n                  _componentsByType[c].show(false, false);\r\n                  _componentsByType[c].populate(field);\r\n                  _currentEditor = _componentsByType[c];\r\n               } else {\r\n                  _componentsByType[c].hide();\r\n               }\r\n            }\r\n\r\n            // disable elements that disallow to edit\r\n            if (\r\n               _currentEditor &&\r\n               _currentEditor.ui &&\r\n               _currentEditor.ui.elements\r\n            ) {\r\n               var disableElem = (elem) => {\r\n                  if (elem.disallowEdit && $$(elem.id) && $$(elem.id).disable) {\r\n                     $$(elem.id).disable();\r\n                  }\r\n               };\r\n\r\n               _currentEditor.ui.elements.forEach((elem) => {\r\n                  disableElem(elem);\r\n\r\n                  // disable elements are in rows/cols\r\n                  var childElems = elem.cols || elem.rows;\r\n                  if (childElems && childElems.forEach) {\r\n                     childElems.forEach((childElem) => {\r\n                        disableElem(childElem);\r\n                     });\r\n                  }\r\n               });\r\n            }\r\n\r\n            // hide the ability to switch data types\r\n            $$(ids.types).hide();\r\n\r\n            // change button text to 'save'\r\n            $$(ids.buttonSave).define(\"label\", L(\"Save\"));\r\n            $$(ids.buttonSave).refresh();\r\n         },\r\n\r\n         /**\r\n          * @function onChange\r\n          * swap the editor view to match the data field selected in the menu.\r\n          *\r\n          * @param {string} name  the menuName() of the submenu that was selected.\r\n          */\r\n         onChange: function (name) {\r\n            // note, the submenu returns the Field.menuName() values.\r\n            // we use that to lookup the Field here:\r\n            var editor = _componentHash[name];\r\n            if (editor) {\r\n               editor.show();\r\n               _currentEditor = editor;\r\n               $$(ids.types).blur();\r\n            } else {\r\n               // most likely they clicked on the menu button itself.\r\n               // do nothing.\r\n               // OP.Error.log(\"App Builder:Workspace:Object:NewDataField: could not find editor for submenu item:\"+name, { name:name });\r\n            }\r\n         },\r\n\r\n         resetState: function () {\r\n            // enable elements that disallow to edit\r\n            if (\r\n               _currentEditor &&\r\n               _currentEditor.ui &&\r\n               _currentEditor.ui.elements\r\n            ) {\r\n               var enableElem = (elem) => {\r\n                  if (elem.disallowEdit && $$(elem.id) && $$(elem.id).enable) {\r\n                     $$(elem.id).enable();\r\n                  }\r\n               };\r\n\r\n               _currentEditor.ui.elements.forEach((elem) => {\r\n                  enableElem(elem);\r\n\r\n                  // enable elements are in rows/cols\r\n                  var childElems = elem.cols || elem.rows;\r\n                  if (childElems && childElems.forEach) {\r\n                     childElems.forEach((childElem) => {\r\n                        enableElem(childElem);\r\n                     });\r\n                  }\r\n               });\r\n            }\r\n\r\n            defaultEditorComponent.show(); // show the default editor\r\n            _currentEditor = defaultEditorComponent;\r\n\r\n            // set the richselect to the first option by default.\r\n            $$(ids.types).setValue(submenus[0].id);\r\n         },\r\n\r\n         /**\r\n          * @function show()\r\n          *\r\n          * Show this component.\r\n          * @param {ABField} field    the ABField to edit.  If not provided, then\r\n          *                           this is an ADD operation.\r\n          * @param {string} fieldKey  allow only this field type\r\n          */\r\n         show: function (field, fieldKey) {\r\n            _editField = field;\r\n\r\n            if (_editField) {\r\n               _logic.modeEdit(field);\r\n            } else {\r\n               _logic.modeAdd(fieldKey);\r\n            }\r\n\r\n            $$(ids.component).show();\r\n         },\r\n\r\n         typeClick: function () {\r\n            // NOTE: for functional testing we need a way to display the submenu\r\n            // (functional tests don't do .hover very well)\r\n            // so this routine is to enable .click() to show the submenu.\r\n\r\n            var subMenuId = $$(ids.types).config.data[0].submenu;\r\n\r\n            // #HACK Sub-menu popup does not render on initial\r\n            // Force it to render popup by use .getSubMenu()\r\n            if (typeof subMenuId != \"string\") {\r\n               $$(ids.types).getSubMenu($$(ids.types).config.data[0].id);\r\n               subMenuId = $$(ids.types).config.data[0].submenu;\r\n            }\r\n\r\n            if ($$(subMenuId)) $$(subMenuId).show();\r\n         },\r\n      });\r\n\r\n      // Expose any globally accessible Actions:\r\n      this.actions({});\r\n\r\n      //\r\n      // Define our external interface methods:\r\n      //\r\n      this.applicationLoad = _logic.applicationLoad; // {fn}     fn(ABApplication)\r\n      this.objectLoad = _logic.objectLoad; // {fn}     fn(ABObject)\r\n      this.show = _logic.show; // {fn}     fn(node, ABField)\r\n   }\r\n};\r\n","/*\r\n * ab_work_object_workspace_popupSortFields\r\n *\r\n * Manage the Sort Fields popup.\r\n *\r\n */\r\n\r\nconst ABComponent = require(\"../AppBuilder/platform/ABComponent\");\r\n\r\nmodule.exports = class AB_Work_Object_Workspace_PopupSortFields extends ABComponent {\r\n   //.extend(idBase, function(App) {\r\n\r\n   constructor(App, idBase) {\r\n      idBase = idBase || \"ab_work_object_workspace_popupSortFields\";\r\n\r\n      super(App, idBase);\r\n      var L = this.Label();\r\n\r\n      // internal list of Webix IDs to reference our UI components\r\n      var ids = {\r\n         component: this.unique(`${idBase}_popupSort`),\r\n         list: this.unique(`${idBase}_popupSort_list`),\r\n         form: this.unique(`${idBase}_popupSort_form`),\r\n      };\r\n\r\n      // Our webix UI definition:\r\n      var formUI = {\r\n         view: \"form\",\r\n         id: ids.form,\r\n         // autoheight: true,\r\n         borderless: true,\r\n         elements: [\r\n            {\r\n               view: \"button\",\r\n               type: \"form\",\r\n               css: \"webix_primary\",\r\n               value: L(\"Add new sort\"),\r\n               on: {\r\n                  onItemClick: function (id, e, node) {\r\n                     _logic.clickAddNewSort();\r\n                     _logic.triggerOnChange();\r\n                  },\r\n               },\r\n            },\r\n         ],\r\n      };\r\n\r\n      this.ui = {\r\n         view: \"popup\",\r\n         id: ids.component,\r\n         // autoheight:true,\r\n         width: 600,\r\n         body: formUI,\r\n         on: {\r\n            onShow: function () {\r\n               _logic.onShow();\r\n            },\r\n         },\r\n      };\r\n\r\n      // Our init() function for setting up our UI\r\n      this.init = (options) => {\r\n         // register our callbacks:\r\n         for (var c in _logic.callbacks) {\r\n            _logic.callbacks[c] = options[c] || _logic.callbacks[c];\r\n         }\r\n\r\n         webix.ui(this.ui);\r\n      };\r\n\r\n      let CurrentObject = null;\r\n\r\n      // our internal business logic\r\n      var _logic = (this._logic = {\r\n         callbacks: {\r\n            /**\r\n             * @function onChange\r\n             * called when we have made changes to the hidden field settings\r\n             * of our Current Object.\r\n             *\r\n             * this is meant to alert our parent component to respond to the\r\n             * change.\r\n             */\r\n            onChange: function () {},\r\n         },\r\n\r\n         /**\r\n          * @function clickAddNewSort\r\n          * the user clicked the add new sort buttton. I don't know what it does...will update later\r\n          */\r\n         // clickAddNewSort: function(by, dir, isMulti, id) {\r\n         clickAddNewSort: function (fieldId, dir) {\r\n            var sort_form = $$(ids.form);\r\n\r\n            var viewIndex = sort_form.getChildViews().length - 1;\r\n            var listFields = _logic.getFieldList(true);\r\n            sort_form.addView(\r\n               {\r\n                  id: \"sort\" + webix.uid(),\r\n                  cols: [\r\n                     {\r\n                        view: \"combo\",\r\n                        width: 220,\r\n                        options: listFields,\r\n                        on: {\r\n                           onChange: function (columnId) {\r\n                              var el = this;\r\n                              _logic.onChangeCombo(columnId, el);\r\n                           },\r\n                        },\r\n                     },\r\n                     {\r\n                        view: \"segmented\",\r\n                        width: 200,\r\n                        options: [\r\n                           {\r\n                              id: \"\",\r\n                              value: L(\"Please select field\"),\r\n                           },\r\n                        ],\r\n                        on: {\r\n                           onChange: function (newv, oldv) {\r\n                              // 'asc' or 'desc' values\r\n                              _logic.triggerOnChange();\r\n                           },\r\n                        },\r\n                     },\r\n                     {\r\n                        view: \"button\",\r\n                        css: \"webix_danger\",\r\n                        icon: \"fa fa-trash\",\r\n                        type: \"icon\",\r\n                        width: 30,\r\n                        on: {\r\n                           onItemClick: function () {\r\n                              sort_form.removeView(this.getParentView());\r\n                              _logic.refreshFieldList(true);\r\n                              _logic.triggerOnChange();\r\n                           },\r\n                        },\r\n                     },\r\n                  ],\r\n               },\r\n               viewIndex\r\n            );\r\n\r\n            // Select field\r\n            if (fieldId) {\r\n               var fieldsCombo = sort_form\r\n                  .getChildViews()\r\n                  [viewIndex].getChildViews()[0];\r\n               fieldsCombo.setValue(fieldId);\r\n            }\r\n            if (dir) {\r\n               var segmentButton = sort_form\r\n                  .getChildViews()\r\n                  [viewIndex].getChildViews()[1];\r\n               segmentButton.setValue(dir);\r\n            }\r\n            // if (isMulti) {\r\n            // \tvar isMultilingualField = sort_form.getChildViews()[viewIndex].getChildViews()[2];\r\n            // \tisMultilingualField.setValue(isMulti);\r\n            // }\r\n         },\r\n\r\n         /**\r\n          * @function getFieldList\r\n          * return field list so we can present a custom UI for view\r\n          */\r\n         getFieldList: function (excludeSelected) {\r\n            var sort_popup = $$(ids.component),\r\n               sort_form = $$(ids.form),\r\n               listFields = [];\r\n\r\n            if (!CurrentObject.fields()) return listFields;\r\n\r\n            // Get all fields include hidden fields\r\n            var allFields = CurrentObject.fields();\r\n            allFields.forEach((f) => {\r\n               if (f.fieldIsSortable()) {\r\n                  listFields.push({\r\n                     id: f.id,\r\n                     value: f.label,\r\n                  });\r\n               }\r\n            });\r\n\r\n            // Remove selected field\r\n            if (excludeSelected) {\r\n               var childViews = sort_form.getChildViews();\r\n               if (childViews.length > 1) {\r\n                  // Ignore 'Add new sort' button\r\n                  childViews.forEach(function (cView, index) {\r\n                     if (childViews.length - 1 <= index) return false;\r\n\r\n                     var selectedValue = cView.getChildViews()[0].getValue();\r\n                     if (selectedValue) {\r\n                        var removeIndex = null;\r\n                        var removeItem = listFields.filter(function (f, index) {\r\n                           if (f.id == selectedValue) {\r\n                              removeIndex = index;\r\n                              return true;\r\n                           } else {\r\n                              return false;\r\n                           }\r\n                        });\r\n                        // var removeItem = $.grep(listFields, function (f, index) {\r\n                        // \tif (f.id == selectedValue) {\r\n                        // \t\tremoveIndex = index;\r\n                        // \t\treturn true;\r\n                        // \t}\r\n                        // \telse {\r\n                        // \t\treturn false;\r\n                        // \t}\r\n                        // });\r\n                        listFields.splice(removeIndex, 1);\r\n                     }\r\n                  });\r\n               }\r\n            }\r\n            return listFields;\r\n         },\r\n\r\n         /**\r\n          * @function objectLoad\r\n          * Ready the Popup according to the current object\r\n          * @param {ABObject} object  the currently selected object.\r\n          */\r\n         objectLoad: function (object) {\r\n            CurrentObject = object;\r\n         },\r\n\r\n         /**\r\n          * @method setSettings\r\n          *\r\n          * @param {Array} settings - [\r\n          * \t\t\t\t\t\t\t\t{\r\n          * \t\t\t\t\t\t\t\t\tkey: uuid,\t\t// id of ABField\r\n          *\t \t\t\t\t\t\t\t\tdir: string,\t// 'asc' or 'desc'\r\n          * \t\t\t\t\t\t\t\t}\r\n          * \t\t\t\t\t\t\t]\r\n          */\r\n         setSettings: (settings) => {\r\n            this._settings = this.AB.cloneDeep(settings);\r\n         },\r\n\r\n         /**\r\n          * @function getSettings\r\n          *\r\n          * @return {Array} - [\r\n          * \t\t\t\t\t\t{\r\n          * \t\t\t\t\t\t\tkey: uuid,\t\t// id of ABField\r\n          * \t\t\t\t\t\t\tdir: string,\t// 'asc' or 'desc'\r\n          * \t\t\t\t\t\t}\r\n          * \t\t\t\t\t]\r\n          */\r\n         getSettings: function () {\r\n            var sort_form = $$(ids.form),\r\n               sortFields = [];\r\n\r\n            var childViews = sort_form.getChildViews();\r\n            if (childViews.length > 1) {\r\n               // Ignore 'Add new sort' button\r\n               childViews.forEach(function (cView, index) {\r\n                  if (childViews.length - 1 <= index) return false;\r\n\r\n                  var fieldId = cView.getChildViews()[0].getValue();\r\n                  var dir = cView.getChildViews()[1].getValue();\r\n                  sortFields.push({\r\n                     // \"by\":by,\r\n                     key: fieldId,\r\n                     dir: dir,\r\n                     // \"isMulti\":isMultiLingual\r\n                  });\r\n               });\r\n            }\r\n\r\n            return sortFields;\r\n         },\r\n\r\n         onChangeCombo: function (columnId, el) {\r\n            var allFields = CurrentObject.fields();\r\n            var columnConfig = \"\",\r\n               sortDir = el.getParentView().getChildViews()[1],\r\n               // isMultiLingual = el.getParentView().getChildViews()[2],\r\n               // isMulti = 0,\r\n               options = null;\r\n\r\n            allFields.forEach((f) => {\r\n               if (f.id == columnId) {\r\n                  columnConfig = f;\r\n               }\r\n            });\r\n\r\n            if (!columnConfig) return;\r\n\r\n            switch (columnConfig.key) {\r\n               case \"string\":\r\n                  options = [\r\n                     { id: \"asc\", value: L(\"A -> Z\") },\r\n                     { id: \"desc\", value: L(\"Z -> A\") },\r\n                  ];\r\n                  break;\r\n               case \"date\":\r\n                  options = [\r\n                     { id: \"asc\", value: L(\"Before -> After\") },\r\n                     { id: \"desc\", value: L(\"After -> Before\") },\r\n                  ];\r\n                  break;\r\n               case \"number\":\r\n                  options = [\r\n                     { id: \"asc\", value: L(\"1 -> 9\") },\r\n                     { id: \"desc\", value: L(\"9 -> 1\") },\r\n                  ];\r\n                  break;\r\n               default:\r\n                  options = [\r\n                     { id: \"asc\", value: L(\"A -> Z\") },\r\n                     { id: \"desc\", value: L(\"Z -> A\") },\r\n                  ];\r\n                  break;\r\n            }\r\n\r\n            sortDir.define(\"options\", options);\r\n            sortDir.refresh();\r\n\r\n            // if (columnConfig.settings.supportMultilingual)\r\n            // \tisMulti = columnConfig.settings.supportMultilingual;\r\n\r\n            // isMultiLingual.setValue(isMulti);\r\n\r\n            _logic.refreshFieldList();\r\n\r\n            _logic.triggerOnChange();\r\n         },\r\n\r\n         /**\r\n          * @function objectLoad\r\n          * Ready the Popup according to the current object\r\n          * @param {ABObject} object  the currently selected object.\r\n          */\r\n         onShow: () => {\r\n            var sort_form = $$(ids.form);\r\n\r\n            // clear field options in the form\r\n            webix.ui(formUI, sort_form);\r\n            // var childViews = sort_form.getChildViews();\r\n            // childViews.forEach(function(i, idx, array){\r\n            // \tif (idx !== array.length - 1){\r\n            // \t\tsort_form.removeView(i);\r\n            // \t}\r\n            // });\r\n\r\n            var sorts = this._settings;\r\n            if (sorts && sorts.forEach) {\r\n               sorts.forEach((s) => {\r\n                  _logic.clickAddNewSort(s.key, s.dir);\r\n               });\r\n            }\r\n\r\n            if (sorts == null || sorts.length == 0) {\r\n               _logic.clickAddNewSort();\r\n            }\r\n         },\r\n\r\n         /**\r\n          * @function refreshFieldList\r\n          * return an updated field list so you cannot duplicate a sort\r\n          */\r\n         refreshFieldList: function (ignoreRemoveViews) {\r\n            var sort_form = $$(ids.form),\r\n               listFields = _logic.getFieldList(false),\r\n               selectedFields = [],\r\n               removeChildViews = [];\r\n\r\n            var childViews = sort_form.getChildViews();\r\n            if (childViews.length > 1) {\r\n               // Ignore 'Add new sort' button\r\n               childViews.forEach(function (cView, index) {\r\n                  if (childViews.length - 1 <= index) return false;\r\n\r\n                  var fieldId = cView.getChildViews()[0].getValue(),\r\n                     // fieldObj = $.grep(listFields, function (f) { return f.id == fieldId });\r\n                     fieldObj = listFields.filter(function (f) {\r\n                        return f.id == fieldId;\r\n                     });\r\n\r\n                  if (fieldObj.length > 0) {\r\n                     // Add selected field to list\r\n                     selectedFields.push(fieldObj[0]);\r\n                  } else {\r\n                     // Add condition to remove\r\n                     removeChildViews.push(cView);\r\n                  }\r\n               });\r\n            }\r\n\r\n            // Remove filter conditions when column is deleted\r\n            if (!ignoreRemoveViews) {\r\n               removeChildViews.forEach(function (cView, index) {\r\n                  sort_form.removeView(cView);\r\n               });\r\n            }\r\n\r\n            // Field list should not duplicate field items\r\n            childViews = sort_form.getChildViews();\r\n            if (childViews.length > 1) {\r\n               // Ignore 'Add new sort' button\r\n               childViews.forEach(function (cView, index) {\r\n                  if (childViews.length - 1 <= index) return false;\r\n\r\n                  var fieldId = cView.getChildViews()[0].getValue(),\r\n                     // fieldObj = $.grep(listFields, function (f) { return f.id == fieldId }),\r\n                     fieldObj = listFields.filter(function (f) {\r\n                        return f.id == fieldId;\r\n                     });\r\n\r\n                  // var selectedFieldsExcludeCurField = $(selectedFields).not(fieldObj);\r\n                  var selectedFieldsExcludeCurField = selectedFields.filter(\r\n                     function (x) {\r\n                        if (\r\n                           Array.isArray(fieldObj) &&\r\n                           fieldObj.indexOf(x) !== -1\r\n                        ) {\r\n                           return false;\r\n                        }\r\n                        return true;\r\n                     }\r\n                  );\r\n\r\n                  // var enableFields = $(listFields).not(selectedFieldsExcludeCurField).get();\r\n                  var enableFields = listFields.filter(function (x) {\r\n                     if (\r\n                        Array.isArray(selectedFieldsExcludeCurField) &&\r\n                        selectedFieldsExcludeCurField.indexOf(x) !== -1\r\n                     ) {\r\n                        return false;\r\n                     }\r\n                     return true;\r\n                  });\r\n\r\n                  // Update field list\r\n                  cView.getChildViews()[0].define(\"options\", enableFields);\r\n                  cView.getChildViews()[0].refresh();\r\n               });\r\n            }\r\n         },\r\n\r\n         /**\r\n          * @function triggerOnChange\r\n          * This parses the sort form to build in order the sorts then saves to the application object workspace\r\n          */\r\n         triggerOnChange: () => {\r\n            // block .onChange callback\r\n            if (this._blockOnChange) return;\r\n\r\n            this._settings = _logic.getSettings();\r\n\r\n            _logic.callbacks.onChange(this._settings);\r\n\r\n            // if (CurrentView != null) {\r\n            // \tCurrentView.settings = CurrentView.settings || {};\r\n            // \tCurrentView.settings.objectWorkspace = CurrentView.settings.objectWorkspace || {};\r\n            // \tCurrentView.settings.objectWorkspace.sortFields = sortFields;\r\n            // \t_logic.callbacks.onChange(CurrentView.settings.objectWorkspace);\r\n            // } else {\r\n            // \tCurrentObject.workspaceSortFields = sortFields;\r\n            // \tCurrentObject.save()\r\n            // \t.then(function(){\r\n            // \t\t_logic.callbacks.onChange();\r\n            // \t})\r\n            // \t.catch(function(err){\r\n            // \t\tOP.Error.log('Error trying to save workspaceSortFields', {error:err, fields:sortFields });\r\n            // \t});\r\n            // }\r\n         },\r\n\r\n         blockOnChange: () => {\r\n            this._blockOnChange = true;\r\n         },\r\n\r\n         unblockOnChange: () => {\r\n            this._blockOnChange = false;\r\n         },\r\n\r\n         /**\r\n          * @function show()\r\n          *\r\n          * Show this component.\r\n          * @param {obj} $view  the webix.$view to hover the popup around.\r\n          * @param {uuid} fieldId the fieldId we want to prefill the sort with\r\n          */\r\n         show: ($view, fieldId, options) => {\r\n            _logic.blockOnChange();\r\n\r\n            $$(ids.component).show($view, options || null);\r\n\r\n            if (fieldId) {\r\n               _logic.clickAddNewSort(fieldId);\r\n            }\r\n\r\n            _logic.unblockOnChange();\r\n         },\r\n\r\n         /**\r\n          * @function sort()\r\n          * client sort data in list\r\n          *\r\n          * @param {Object} a\r\n          * @param {Object} b\r\n          */\r\n         sort: function (a, b) {\r\n            var result = 0;\r\n\r\n            var childViews = $$(ids.form).getChildViews();\r\n            if (childViews.length > 1) {\r\n               // Ignore 'Add new sort' button\r\n               childViews.forEach(function (cView, index) {\r\n                  if (childViews.length - 1 <= index || result != 0) return;\r\n\r\n                  var fieldId = cView.getChildViews()[0].getValue();\r\n                  var dir = cView.getChildViews()[1].getValue();\r\n\r\n                  var field = CurrentObject.fieldByID(fieldId);\r\n                  if (!field) return;\r\n\r\n                  var by = field.columnName; // column name\r\n\r\n                  var aValue = a[by],\r\n                     bValue = b[by];\r\n\r\n                  if (Array.isArray(aValue)) {\r\n                     aValue = (aValue || [])\r\n                        .map(function (item) {\r\n                           return item.text || item;\r\n                        })\r\n                        .join(\" \");\r\n                  }\r\n\r\n                  if (Array.isArray(bValue)) {\r\n                     bValue = (bValue || [])\r\n                        .map(function (item) {\r\n                           return item.text || item;\r\n                        })\r\n                        .join(\" \");\r\n                  }\r\n\r\n                  if (aValue != bValue) {\r\n                     if (dir == \"asc\") {\r\n                        result = aValue > bValue ? 1 : -1;\r\n                     } else {\r\n                        result = aValue < bValue ? 1 : -1;\r\n                     }\r\n                  }\r\n               });\r\n            }\r\n\r\n            return result;\r\n         },\r\n      });\r\n\r\n      // Expose any globally accessible Actions:\r\n      this.actions({});\r\n\r\n      //\r\n      // Define our external interface methods:\r\n      //\r\n      this.objectLoad = _logic.objectLoad;\r\n      this.show = _logic.show;\r\n      this.sort = _logic.sort;\r\n\r\n      this.setValue = _logic.setSettings;\r\n      this.getValue = _logic.getSettings;\r\n   }\r\n};\r\n","import ABFactoryCore from \"./core/ABFactoryCore\";\r\n\r\nimport _ from \"lodash\";\r\nimport moment from \"moment\";\r\nimport { nanoid } from \"nanoid\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nimport FilterComplex from \"./platform/FilterComplex\";\r\n\r\n//\r\n// Our Common Resources\r\n//\r\nimport Config from \"../config/Config.js\";\r\n// Config : responsible for all the configuration/settings of our instance.\r\n\r\nimport Account from \"../resources/Account.js\";\r\n// Account : manages the current Logged in User and Account information.\r\n\r\nimport ClassUI from \"../ui/ClassUI.js\";\r\n\r\nimport Dialog from \"./_factory_utils/Dialog.js\";\r\n// Dialog : common UI dialogs.\r\n\r\nimport Multilingual from \"../resources/Multilingual.js\";\r\n// Multilingual: our interface Labels and language options\r\n\r\nimport Network from \"../resources/Network.js\";\r\n// Network: our interface for communicating to our server\r\n\r\nimport Storage from \"../resources/Storage.js\";\r\n// Storage: manages our interface for local storage\r\n\r\nimport ABViewManager from \"./core/ABViewManagerCore\";\r\n\r\nimport Tenant from \"../resources/Tenant.js\";\r\n// Tenant: manages the Tenant information of the current instance\r\n\r\nimport UISettings from \"./uiSettings/config.js\";\r\n// UISettings: detailed settings for our common UI elements\r\n\r\nimport Webix from \"../js/webix/webix.js\";\r\n// NOTE: moved to require() because using import with webix_debug.js\r\n// really messed things up!\r\n// var Webix = require(\"../js/webix/webix-debug.js\");\r\n\r\nclass ABValidator {\r\n   constructor(AB) {\r\n      this.AB = AB;\r\n      this.errors = [];\r\n   }\r\n\r\n   addError(name, message) {\r\n      this.errors.push({ name: name, message: message });\r\n   }\r\n\r\n   pass() {\r\n      return this.errors.length == 0;\r\n   }\r\n\r\n   fail() {\r\n      return this.errors.length > 0;\r\n   }\r\n\r\n   toValidationObject() {\r\n      var obj = {\r\n         error: \"E_VALIDATION\",\r\n         invalidAttributes: {},\r\n      };\r\n\r\n      var attr = obj.invalidAttributes;\r\n\r\n      this.errors.forEach((e) => {\r\n         attr[e.name] = attr[e.name] || [];\r\n         attr[e.name].push(e);\r\n      });\r\n\r\n      return obj;\r\n   }\r\n\r\n   updateForm(form) {\r\n      var vObj = this.toValidationObject();\r\n      this.AB.Validation.isFormValidationError(vObj, form);\r\n   }\r\n\r\n   updateGrid(rowID, grid) {\r\n      var vObj = this.toValidationObject();\r\n      this.AB.Validation.isGridValidationError(vObj, rowID, grid);\r\n   }\r\n}\r\n\r\n//\r\n// AppBuilder Objects\r\n//\r\n\r\nclass ABFactory extends ABFactoryCore {\r\n   constructor(definitions) {\r\n      super(definitions);\r\n\r\n      // Common Reference to Configuration Values\r\n      this.Config = Config;\r\n\r\n      this.Class.FilterComplex = FilterComplex;\r\n\r\n      //\r\n      // Resources\r\n      //\r\n      this.Account = Account;\r\n      this.Dialog = Dialog;\r\n      this.Multilingual = Multilingual;\r\n      this.Network = Network;\r\n      this.Storage = Storage;\r\n      this.Tenant = Tenant;\r\n      this.Webix = Webix;\r\n\r\n      // Plugin Classes\r\n      this.ClassUI = ClassUI;\r\n\r\n      // additional Class definitions\r\n      this.Class.ABViewManager = ABViewManager;\r\n\r\n      // Temp placeholders until Resources are implemented:\r\n      this.Analytics = {\r\n         log: () => {},\r\n         logError: () => {},\r\n      };\r\n      this.Lock = class Lock {\r\n         constructor() {}\r\n\r\n         acquire() {\r\n            return Promise.resolve();\r\n         }\r\n         release() {\r\n            return Promise.resolve();\r\n         }\r\n      };\r\n\r\n      this.UISettings = UISettings;\r\n\r\n      this.Validation = {\r\n         validator: () => {\r\n            return new ABValidator(this);\r\n         },\r\n\r\n         errorSailsCleanup: function (error) {\r\n            if (error) {\r\n               //// if the error obj is provided by Sails response,\r\n               //// do some clean up on the error object:\r\n\r\n               // dig down to sails provided error object:\r\n               if (\r\n                  error.error &&\r\n                  error.error == \"E_UNKNOWN\" &&\r\n                  error.raw &&\r\n                  error.raw.length > 0\r\n               ) {\r\n                  error = error.raw[0];\r\n               }\r\n\r\n               // drill down to the embedded .err object if it exists\r\n               if (error.err) {\r\n                  error = error.err;\r\n               }\r\n\r\n               // if this is from our server response:\r\n               if (\r\n                  error.data &&\r\n                  error.data.error &&\r\n                  error.data.error == \"E_VALIDATION\"\r\n               ) {\r\n                  error = error.data;\r\n               }\r\n            }\r\n\r\n            return error;\r\n         },\r\n\r\n         /**\r\n          * @function AB.Validation.isFormValidationError\r\n          *\r\n          * scans the given error to see if it is a sails' response about an invalid\r\n          * value from one of the form elements.\r\n          *\r\n          * @codestart\r\n          * var form = $$('formID');\r\n          * var values = form.getValues();\r\n          * model.attr(values);\r\n          * model.save()\r\n          * .fail(function(err){\r\n          *     if (!OP.Form.isFormValidationError(err, form)) {\r\n          *         OP.error.log('Error saving current model ()', {error:err, values:values});\r\n          *     }\r\n          * })\r\n          * .then(function(newData){\r\n          *\r\n          * });\r\n          * @codeend\r\n          *\r\n          * @param {obj} error\r\n          *        the error response object\r\n          * @param {obj} form\r\n          *        the webix form instance (or reference)\r\n          * @return {bool}\r\n          *         true if error was about a form element.\r\n          *         false otherwise.\r\n          */\r\n         isFormValidationError: function (error, form) {\r\n            var hasFocused = false;\r\n            // {bool} have we set focus to form component?\r\n\r\n            // if we have an error object:\r\n            if (error) {\r\n               //// if the error obj is provided by Sails response,\r\n               //// do some clean up on the error object:\r\n\r\n               error = this.errorSailsCleanup(error);\r\n\r\n               //// Now process the error object\r\n               ////\r\n               if (\r\n                  (error.error && error.error == \"E_VALIDATION\") ||\r\n                  (error.code && error.code == \"E_VALIDATION\")\r\n               ) {\r\n                  var attrs = error.invalidAttributes;\r\n                  if (attrs) {\r\n                     var wasForm = false;\r\n                     for (var attr in attrs) {\r\n                        // if this is a field in the form:\r\n                        if (form.elements[attr]) {\r\n                           var errors = attrs[attr];\r\n                           var msg = [];\r\n                           errors.forEach(function (err) {\r\n                              msg.push(err.message);\r\n                           });\r\n\r\n                           // set the invalid error message\r\n                           form.markInvalid(attr, msg.join(\", \"));\r\n\r\n                           // set focus to the 1st form element we mark:\r\n                           if (!hasFocused) {\r\n                              form.elements[attr].focus();\r\n                              hasFocused = true;\r\n                           }\r\n\r\n                           wasForm = true;\r\n                        }\r\n                     }\r\n\r\n                     if (wasForm) {\r\n                        return true;\r\n                     }\r\n                  }\r\n               }\r\n            }\r\n\r\n            // if we missed updating our form with an error\r\n            // this was not a validation error so return false\r\n            return false;\r\n         },\r\n\r\n         /**\r\n          * @method AB.Validation.isGridValidationError\r\n          *\r\n          * scans the given error to see if it is a sails' response about an invalid\r\n          * value from one of our grid columns.\r\n          *\r\n          * @codestart\r\n          * var grid = $$('myGrid');\r\n          * model.attr(values);\r\n          * model.save()\r\n          * .fail(function(err){\r\n          *     if (!OP.Validation.isGridValidationError(err, editor, grid)) {\r\n          *         OP.error.log('Error saving current model ()', {error:err, values:values});\r\n          *     }\r\n          * })\r\n          * .then(function(newData){\r\n          *\r\n          * });\r\n          * @codeend\r\n          *\r\n          * @param {Error} error\r\n          *        the error response object\r\n          * @param {integer} row\r\n          *        the row id of the Grid to update.\r\n          * @param {webix.datatable} Grid\r\n          *        the webix grid instance (or reference)\r\n          * @return {bool}\r\n          *         true if error was about a grid column.\r\n          *         false otherwise.\r\n          */\r\n         isGridValidationError: function (error, row, Grid) {\r\n            // if we have an error object:\r\n            if (error) {\r\n               //// if the error obj is provided by Sails response,\r\n               //// do some clean up on the error object:\r\n\r\n               error = this.errorSailsCleanup(error);\r\n\r\n               //// Now process the error object\r\n               ////\r\n               if (\r\n                  (error.error && error.error == \"E_VALIDATION\") ||\r\n                  (error.code && error.code == \"E_VALIDATION\")\r\n               ) {\r\n                  var attrs = error.invalidAttributes;\r\n                  if (attrs) {\r\n                     var wasGrid = false;\r\n                     for (var attr in attrs) {\r\n                        Grid.addCellCss(row, attr, \"webix_invalid\");\r\n                        Grid.addCellCss(row, attr, \"webix_invalid_cell\");\r\n\r\n                        var msg = [];\r\n                        attrs[attr].forEach((e) => {\r\n                           msg.push(e.message);\r\n                        });\r\n\r\n                        webix.alert({\r\n                           text: attr + \": \" + msg.join(\", \"),\r\n                        });\r\n\r\n                        wasGrid = true;\r\n                     }\r\n\r\n                     Grid.refresh(row);\r\n                     Grid.clearSelection();\r\n\r\n                     if (wasGrid) {\r\n                        return true;\r\n                     }\r\n                  }\r\n               }\r\n            }\r\n\r\n            // if we missed updating our Grid with an error\r\n            // this was not a validation error so return false\r\n            return false;\r\n         },\r\n      };\r\n\r\n      // TODO: make sure \"error\" s are handled and sent to logs\r\n      // this.on(\"error\", ()=>{ Analytics.error })\r\n\r\n      this.Definitions = {};\r\n      // {obj} the provided interface for working with the ABDefinition table.\r\n      // NOTE: on the web client, we simply perform web API calls to perform\r\n      // the actions.  These are defined below.\r\n\r\n      this.on(\"error\", (err) => {\r\n         // this simply prevents thrown errors if there are no listeners.\r\n         console.error(err);\r\n      });\r\n\r\n      this._plugins = [];\r\n      // {array} of loaded Plugin.applications.\r\n\r\n      this._pendingNetworkRequests = {};\r\n      // {hash}   uuid : {Promise}\r\n      // convert our definitionsXXXX() operations to be Relay/offline compatible.\r\n      // if a queued operation is sent after a web browser refresh, then\r\n      // we will NOT have a pending promise to .resolve()/.reject()\r\n\r\n      this.Network.on(\"definition.create\", (context, err, fullDef) => {\r\n         var pending = this._pendingNetworkRequests[context.uuid];\r\n         if (err) {\r\n            // this.error(err);\r\n            pending?.reject(err);\r\n            return;\r\n         }\r\n\r\n         // for immediate feedback to our UI:\r\n         // simulate the RT update from our sockets:\r\n         var pkt = {\r\n            id: fullDef.id,\r\n            data: fullDef,\r\n         };\r\n         this.emit(\"ab.abdefinition.create\", pkt);\r\n\r\n         let newDef = this.definitionNew(fullDef);\r\n         pending?.resolve(newDef);\r\n      });\r\n\r\n      this.Network.on(\"definition.update\", (context, err, serverDef) => {\r\n         var pending = this._pendingNetworkRequests[context.uuid];\r\n         if (err) {\r\n            if (err.toString().indexOf(\"Not Found\") > -1) {\r\n               return this.definitionCreate(context.values)\r\n                  .then(pending?.resolve)\r\n                  .catch(pending?.reject);\r\n            }\r\n            // log the error\r\n            // this.error(err);\r\n            pending?.reject(err);\r\n            return;\r\n         }\r\n\r\n         this._definitions[context.id] = serverDef;\r\n\r\n         // for immediate feedback to our UI:\r\n         // simulate the RT update from our sockets:\r\n         var pkt = {\r\n            id: serverDef.id,\r\n            data: serverDef,\r\n         };\r\n         this.emit(\"ab.abdefinition.update\", pkt);\r\n\r\n         pending?.resolve(serverDef);\r\n      });\r\n\r\n      this.Network.on(\"definition.delete\", (context, err, serverDef) => {\r\n         var pending = this._pendingNetworkRequests[context.uuid];\r\n         if (err) {\r\n            // log the error\r\n            // this.error(err);\r\n            pending?.reject(err);\r\n            return;\r\n         }\r\n\r\n         delete this._definitions[context.id];\r\n\r\n         // for immediate feedback to our UI:\r\n         // simulate the RT update from our sockets:\r\n         var pkt = {\r\n            id: context.id,\r\n            data: serverDef,\r\n         };\r\n         this.emit(\"ab.abdefinition.delete\", pkt);\r\n\r\n         pending?.resolve();\r\n      });\r\n   }\r\n\r\n   /**\r\n    * init()\r\n    * prepare the ABFactory for operation. This includes parsing the\r\n    * definitions into useable objects, preparing the System Resources, etc.\r\n    * @return {Promise}\r\n    */\r\n   async init() {\r\n      //\r\n      // Prepare our Resources First\r\n      //\r\n      var allInits = [];\r\n\r\n      allInits.push(this.Account.init(this));\r\n      allInits.push(this.Multilingual.init(this));\r\n      allInits.push(this.Network.init(this));\r\n      allInits.push(this.Tenant.init(this));\r\n\r\n      await Promise.all(allInits);\r\n      await this.Storage.init(this);\r\n      var data = await this.Storage.get(\"local_settings\");\r\n      this._localSettings = data || {};\r\n\r\n      //\r\n      // Real Time Update Handlers\r\n      //\r\n\r\n      // new ABDefinition created:\r\n      this.on(\"ab.abdefinition.create\", (pkt) => {\r\n         // pkt.id : definition.id\r\n         // pkt.data : definition\r\n\r\n         if (typeof pkt.data.json == \"string\") {\r\n            try {\r\n               pkt.data.json = JSON.parse(pkt.data.json);\r\n            } catch (e) {\r\n               console.log(e);\r\n            }\r\n         }\r\n         this._definitions[pkt.id] = pkt.data;\r\n         this.definitionSync(\"created\", pkt.id, pkt.data);\r\n      });\r\n\r\n      // ABDefinition updated:\r\n      this.on(\"ab.abdefinition.update\", (pkt) => {\r\n         // pkt.id : definition.id\r\n         // pkt.data : definition\r\n         if (typeof pkt.data.json == \"string\") {\r\n            try {\r\n               pkt.data.json = JSON.parse(pkt.data.json);\r\n            } catch (e) {\r\n               console.log(e);\r\n            }\r\n         }\r\n         this._definitions[pkt.id] = pkt.data;\r\n         this.definitionSync(\"updated\", pkt.id, pkt.data);\r\n      });\r\n\r\n      // ABDefinition delete:\r\n      this.on(\"ab.abdefinition.delete\", (pkt) => {\r\n         // pkt.id : definition.id\r\n         // pkt.data : definition\r\n         if (typeof pkt.data.json == \"string\") {\r\n            try {\r\n               pkt.data.json = JSON.parse(pkt.data.json);\r\n            } catch (e) {\r\n               console.log(e);\r\n            }\r\n         }\r\n         delete this._definitions[pkt.id];\r\n         this.definitionSync(\"destroyed\", pkt.id, pkt.data);\r\n      });\r\n\r\n      return super.init();\r\n\r\n      // return Promise.all(allInits)\r\n      //    .then(() => {\r\n      //       // some Resources depend on the above to be .init() before they can\r\n      //       // .init() themselves.\r\n      //       return this.Storage.init(this).then(() => {\r\n      //          return this.Storage.get(\"local_settings\").then((data) => {\r\n      //             this._localSettings = data || {};\r\n      //          });\r\n      //       });\r\n      //    })\r\n      //    .then(() => {\r\n      //       //\r\n      //       // RealTime Updates of our ABDefinitions\r\n      //       //\r\n\r\n      //       // new ABDefinition created:\r\n      //       this.on(\"ab.abdefinition.create\", (pkt) => {\r\n      //          // pkt.id : definition.id\r\n      //          // pkt.data : definition\r\n\r\n      //          if (typeof pkt.data.json == \"string\") {\r\n      //             try {\r\n      //                pkt.data.json = JSON.parse(pkt.data.json);\r\n      //             } catch (e) {\r\n      //                console.log(e);\r\n      //             }\r\n      //          }\r\n      //          this._definitions[pkt.id] = pkt.data;\r\n      //          this.definitionSync(\"created\", pkt.id, pkt.data);\r\n      //       });\r\n\r\n      //       // ABDefinition updated:\r\n      //       this.on(\"ab.abdefinition.update\", (pkt) => {\r\n      //          // pkt.id : definition.id\r\n      //          // pkt.data : definition\r\n      //          if (typeof pkt.data.json == \"string\") {\r\n      //             try {\r\n      //                pkt.data.json = JSON.parse(pkt.data.json);\r\n      //             } catch (e) {\r\n      //                console.log(e);\r\n      //             }\r\n      //          }\r\n      //          this._definitions[pkt.id] = pkt.data;\r\n      //          this.definitionSync(\"updated\", pkt.id, pkt.data);\r\n      //       });\r\n\r\n      //       // ABDefinition delete:\r\n      //       this.on(\"ab.abdefinition.delete\", (pkt) => {\r\n      //          // pkt.id : definition.id\r\n      //          // pkt.data : definition\r\n      //          if (typeof pkt.data.json == \"string\") {\r\n      //             try {\r\n      //                pkt.data.json = JSON.parse(pkt.data.json);\r\n      //             } catch (e) {\r\n      //                console.log(e);\r\n      //             }\r\n      //          }\r\n      //          delete this._definitions[pkt.id];\r\n      //          this.definitionSync(\"destroyed\", pkt.id, pkt.data);\r\n      //       });\r\n\r\n      //       return super.init();\r\n      //    });\r\n   }\r\n\r\n   /**\r\n    * definiitonCreate(def)\r\n    * create a new ABDefinition\r\n    * @param {obj} def\r\n    *        the value hash of the new definition entry\r\n    * @return {Promise}\r\n    *        resolved with a new {ABDefinition} for the entry.\r\n    */\r\n   async definitionCreate(def) {\r\n      // we will set our uuid\r\n      if (typeof def.id == \"undefined\") {\r\n         def.id = this.uuid();\r\n         def.json.id = def.id;\r\n      }\r\n\r\n      return new Promise((resolve, reject) => {\r\n         var uuid = this.uuid();\r\n         this._pendingNetworkRequests[uuid] = { resolve, reject };\r\n         var jobResponse = {\r\n            key: \"definition.create\",\r\n            context: {\r\n               uuid,\r\n            },\r\n         };\r\n         this.Network.post(\r\n            {\r\n               url: `/definition/create`,\r\n               data: def,\r\n            },\r\n            jobResponse\r\n         ).catch((err) => {\r\n            var message = \"Error attempting to CREATE definitions\";\r\n            if (err.code == \"E_NOPERM\") {\r\n               message = \"User Doesn't have permission to CREATE definitions\";\r\n            }\r\n            this.notify.developer(err, {\r\n               context: \"ABFactory.definitionCreate()\",\r\n               message,\r\n               def,\r\n            });\r\n\r\n            // NOTE: when using jobResponse type calls, expect that\r\n            // handler to be handling the errors.\r\n            // don't keep propagating them here.\r\n         });\r\n      });\r\n   }\r\n\r\n   /**\r\n    * definitionDestroy(id)\r\n    * delete an ABDefinition\r\n    * @param {string} id\r\n    *        the uuid of the ABDefinition to delete\r\n    * @return {Promise}\r\n    */\r\n   async definitionDestroy(id) {\r\n      return new Promise((resolve, reject) => {\r\n         var uuid = this.uuid();\r\n         this._pendingNetworkRequests[uuid] = { resolve, reject };\r\n         var jobResponse = {\r\n            key: \"definition.delete\",\r\n            context: {\r\n               id,\r\n               uuid,\r\n            },\r\n         };\r\n         this.Network.delete(\r\n            {\r\n               url: `/definition/${id}`,\r\n            },\r\n            jobResponse\r\n         ).catch((err) => {\r\n            var message = \"Error attempting to DESTROY definitions\";\r\n            if (err.code == \"E_NOPERM\") {\r\n               message = \"User Doesn't have permission to DELETE definitions\";\r\n            }\r\n            this.notify.developer(err, {\r\n               context: \"ABFactory.definitionDestroy()\",\r\n               message,\r\n               id,\r\n            });\r\n\r\n            // NOTE: when using jobResponse type calls, expect that\r\n            // handler to be handling the errors.\r\n            // don't keep propagating them here.\r\n         });\r\n      });\r\n   }\r\n\r\n   /**\r\n    * definitionUpdate(id, def)\r\n    * update an existing ABDefinition\r\n    * @param {string} id\r\n    *        the uuid of the ABDefinition to update.\r\n    * @param {obj} values\r\n    *        the value hash of the new definition values\r\n    * @return {Promise}\r\n    *        resolved with a new {ABDefinition} for the entry.\r\n    */\r\n   async definitionUpdate(id, values) {\r\n      return new Promise((resolve, reject) => {\r\n         var uuid = this.uuid();\r\n         this._pendingNetworkRequests[uuid] = { resolve, reject };\r\n         var jobResponse = {\r\n            key: \"definition.update\",\r\n            context: {\r\n               id,\r\n               uuid,\r\n               values,\r\n            },\r\n         };\r\n         this.Network.put(\r\n            {\r\n               url: `/definition/${id}`,\r\n               data: values,\r\n            },\r\n            jobResponse\r\n         ).catch((err) => {\r\n            var message = \"Error attempting to UPDATE definitions\";\r\n            if (err.code == \"E_NOPERM\") {\r\n               message = \"User Doesn't have permission to UPDATE definitions\";\r\n            }\r\n            this.notify.developer(err, {\r\n               context: \"ABFactory.definitionUpdate()\",\r\n               message,\r\n            });\r\n\r\n            // NOTE: when using jobResponse type calls, expect that\r\n            // handler to be handling the errors.\r\n            // don't keep propagating them here.\r\n         });\r\n      });\r\n   }\r\n\r\n   /**\r\n    * definitionsParse()\r\n    * include the incoming definitions into our ABFactory. These new\r\n    * definitions will replace any existing ones with the same .id.\r\n    * @param {array[ABDefinitioin]} defs\r\n    *     the incoming array of ABDefinitions to parse.\r\n    * @return {Promise}\r\n    */\r\n   // definitionsParse(defs = []) {\r\n   //    if (!Array.isArray(defs)) {\r\n   //       defs = [defs];\r\n   //    }\r\n\r\n   //    // store/replace the incoming definitions\r\n   //    // 1st: insert ALL our definitions internally\r\n   //    defs.forEach((d) => {\r\n   //       this._definitions[d.id] = d;\r\n   //    });\r\n   //    // 2nd: Now we can then go through and signal the \"updates\"\r\n   //    // and the related objects can find their dependent definitions.\r\n   //    defs.forEach((d) => {\r\n   //       this.definitionSync(\"updated\", d.id, d);\r\n   //    });\r\n\r\n   //    return Promise.resolve();\r\n   // }\r\n\r\n   /**\r\n    * notify()\r\n    * will send alerts to a group of people. These alerts are usually about\r\n    * configuration errors, or software problems.\r\n    * @param {string} domain\r\n    *     which group of people we are sending a notification to.\r\n    * @param {Error} error\r\n    *     An error object generated at the point of issue.\r\n    * @param {json} info\r\n    *     Additional related information concerning the issue.\r\n    */\r\n   notify(domain, error, info) {\r\n      console.error(\"TODO: ABFactory.notify(): pass error off to analytics\");\r\n      console.error(error);\r\n      console.error(info);\r\n   }\r\n\r\n   plugins() {\r\n      return this._plugins;\r\n   }\r\n   pluginLoad(p) {\r\n      this._plugins.push(p);\r\n   }\r\n\r\n   //\r\n   // Utilities\r\n   //\r\n   alert(options) {\r\n      Webix.alert(options);\r\n   }\r\n\r\n   cloneDeep(value) {\r\n      return _.cloneDeep(value);\r\n   }\r\n\r\n   error(message, ...rest) {\r\n      var emitData = {\r\n         message: `ABFactory[${this.Tenant.id()}]:${message.toString()}`,\r\n      };\r\n\r\n      console.error(emitData.message);\r\n      if (message instanceof Error) {\r\n         emitData.error = message;\r\n         // this dumps the error.stack\r\n         console.error(message);\r\n      }\r\n\r\n      if (rest && rest.length > 0) {\r\n         rest.forEach((r) => {\r\n            if (r instanceof Error) {\r\n               emitData.error = r;\r\n               // this dumps the error.stack\r\n               console.error(r);\r\n            }\r\n\r\n            if (typeof r == \"object\") {\r\n               for (var k in r) {\r\n                  emitData[k] = r[k];\r\n                  console.error(k, r[k]);\r\n               }\r\n            }\r\n         });\r\n      }\r\n      this.emit(\"error\", emitData);\r\n   }\r\n\r\n   jobID() {\r\n      return nanoid();\r\n   }\r\n\r\n   Label() {\r\n      return (...params) => {\r\n         return this.Multilingual.label(...params);\r\n      };\r\n   }\r\n\r\n   localSettings(key, value) {\r\n      if (typeof value == \"undefined\") {\r\n         // this is a getter:\r\n         return this._localSettings[key];\r\n      } else {\r\n         // setting a value:\r\n         this._localSettings[key] = value;\r\n         return this.Storage.set(`local_settings`, this._localSettings);\r\n      }\r\n   }\r\n\r\n   log(message, ...rest) {\r\n      console.log(message);\r\n      rest.forEach((r) => {\r\n         console.log(r);\r\n      });\r\n   }\r\n\r\n   /**\r\n    * @method rules.isUUID\r\n    * evaluate a given value to see if it matches the format of a uuid\r\n    * @param {string} key\r\n    * @return {boolean}\r\n    */\r\n   isUUID(key) {\r\n      var checker = RegExp(\r\n         \"^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\",\r\n         \"i\"\r\n      );\r\n      return checker.test(key);\r\n   }\r\n\r\n   merge(...params) {\r\n      return _.merge(...params);\r\n   }\r\n\r\n   orderBy(...params) {\r\n      return _.orderBy(...params);\r\n   }\r\n\r\n   uniq(...params) {\r\n      return _.uniq(...params);\r\n   }\r\n\r\n   kebabCase(...params) {\r\n      return _.kebabCase(...params);\r\n   }\r\n\r\n   sumBy(...params) {\r\n      return _.sumBy(...params);\r\n   }\r\n\r\n   meanBy(...params) {\r\n      return _.meanBy(...params);\r\n   }\r\n\r\n   maxBy(...params) {\r\n      return _.maxBy(...params);\r\n   }\r\n\r\n   minBy(...params) {\r\n      return _.minBy(...params);\r\n   }\r\n\r\n   uuid() {\r\n      return uuidv4();\r\n   }\r\n\r\n   warn(message, ...rest) {\r\n      console.warn(message);\r\n      rest.forEach((r) => {\r\n         console.warn(r);\r\n      });\r\n   }\r\n\r\n   /**\r\n    * @method toDate\r\n    *\r\n    * @param {string} dateText\r\n    * @param {Object} options - {\r\n    *                               format: \"string\",\r\n    *                               ignoreTime: boolean\r\n    *                            }\r\n    * @return {Date}\r\n    */\r\n   toDate(dateText = \"\", options = {}) {\r\n      if (!dateText) return;\r\n\r\n      if (options.ignoreTime) dateText = dateText.replace(/T.*/, \"\");\r\n\r\n      let result = options.format\r\n         ? moment(dateText, options.format)\r\n         : moment(dateText);\r\n\r\n      let supportFormats = [\r\n         \"YYYY-MM-DD\",\r\n         \"YYYY/MM/DD\",\r\n         \"DD/MM/YYYY\",\r\n         \"MM/DD/YYYY\",\r\n         \"DD-MM-YYYY\",\r\n         \"MM-DD-YYYY\",\r\n      ];\r\n\r\n      supportFormats.forEach((format) => {\r\n         if (!result || !result.isValid()) result = moment(dateText, format);\r\n      });\r\n\r\n      return new Date(result);\r\n   }\r\n\r\n   /**\r\n    * @method toDateFormat\r\n    *\r\n    * @param {Date} date\r\n    * @param {Object} options - {\r\n    *           format: \"string\",\r\n    *           localeCode: \"string\"\r\n    *         }\r\n    *\r\n    * @return {string}\r\n    */\r\n   toDateFormat(date, options) {\r\n      if (!date) return \"\";\r\n\r\n      let momentObj = moment(date);\r\n\r\n      if (options.localeCode) momentObj.locale(options.localeCode);\r\n\r\n      return momentObj.format(options.format);\r\n   }\r\n\r\n   /**\r\n    * @method subtractDate\r\n    *\r\n    * @param {Date} date\r\n    * @param {number} number\r\n    * @param {string} unit\r\n    *\r\n    * @return {Date}\r\n    */\r\n   subtractDate(date, number, unit) {\r\n      return moment(date).subtract(number, unit).toDate();\r\n   }\r\n\r\n   /**\r\n    * @method addDate\r\n    *\r\n    * @param {Date} date\r\n    * @param {number} number\r\n    * @param {string} unit\r\n    *\r\n    * @return {Date}\r\n    */\r\n   addDate(date, number, unit) {\r\n      return moment(date).add(number, unit).toDate();\r\n   }\r\n\r\n   isString(...params) {\r\n      return _.isString(params);\r\n   }\r\n}\r\n\r\nexport default ABFactory;\r\n","//\r\n// Dialog\r\n// A common set of UI dialogs to show the User.\r\n//\r\n// NOTE: IN TRANSITION: this is our previous method of handling\r\n// dialogs.  In future, refactor to use webix directly in code.\r\n//\r\n\r\nexport default {\r\n   // Instance properties\r\n\r\n   // Alert\r\n   // A dialogue that popup with a message, and requires an [ok] button press\r\n   Alert: function (opts) {\r\n      webix.alert({\r\n         title:\r\n            opts.title ||\r\n            AB.Multilingual.label(\"opp.dialog.alert.title\", \"*Alert\"),\r\n         text:\r\n            opts.text ||\r\n            opts.message ||\r\n            AB.Multilingual.label(\r\n               \"opp.dialog.alert.text\",\r\n               \"*Something is wrong.\"\r\n            ),\r\n         ok: opts.ok || AB.Multilingual.label(\"opp.dialog.alert.ok\", \"*OK\"),\r\n      });\r\n   },\r\n\r\n   // Confirm\r\n   // A [Yes] [No] dialogue that pops up with a message\r\n   Confirm: function (opts) {\r\n      var title =\r\n         opts.title ||\r\n         AB.Multilingual.label(\"opp.dialog.confirm.confirmTitle\", \"* Confirm\");\r\n      var message =\r\n         opts.text ||\r\n         opts.message ||\r\n         AB.Multilingual.label(\r\n            \"opp.dialog.confirm.confirmMsg\",\r\n            \"* Are you sure you want to do this?\"\r\n         );\r\n\r\n      var labelYes =\r\n         opts.labelYes ||\r\n         opts.ok ||\r\n         AB.Multilingual.label(\"opp.common.yes\", \"* yes\");\r\n      var labelNo =\r\n         opts.labelNo ||\r\n         opts.cancel ||\r\n         AB.Multilingual.label(\"opp.common.no\", \"* no\");\r\n\r\n      // var fnYes = opts.fnYes || function () { };\r\n      // var fnNo = opts.fnNo || function () { };\r\n\r\n      webix.confirm({\r\n         title: title,\r\n         text: message,\r\n\r\n         ok: labelYes,\r\n         cancel: labelNo,\r\n\r\n         callback: function (result) {\r\n            if (result) {\r\n               if (opts.fnYes) opts.fnYes();\r\n            } else {\r\n               if (opts.fnNo) opts.fnNo();\r\n            }\r\n\r\n            if (opts.callback) opts.callback(result);\r\n         },\r\n      });\r\n\r\n      // bootbox.dialog({\r\n      //     title: title,\r\n      //     message: message,\r\n      //     buttons: {\r\n      //         yes: {\r\n      //             label: labelYes,\r\n      //             className: 'btn-primary',\r\n      //             callback: fnYes\r\n      //         },\r\n      //         no: {\r\n      //             label: labelNo,\r\n      //             className: 'btn-default',\r\n      //             callback: fnNo\r\n      //         }\r\n      //     }\r\n      // });\r\n   },\r\n\r\n   // ConfirmDelete\r\n   // A Confirm dialogue geared towards deleting items.\r\n   // [delete] [cancel]\r\n   ConfirmDelete: function (opts) {\r\n      this.Confirm({\r\n         title:\r\n            opts.title ||\r\n            AB.Multilingual.label(\r\n               \"opp.dialog.confirm.deleteTitle\",\r\n               \"* Confirm Delete\"\r\n            ),\r\n         ok: opts.ok || AB.Multilingual.label(\"opp.common.delete\", \"* Delete\"),\r\n         cancel:\r\n            opts.cancel ||\r\n            AB.Multilingual.label(\"opp.common.cancel\", \"* Cancel\"),\r\n         text:\r\n            opts.text ||\r\n            opts.message ||\r\n            AB.Multilingual.label(\r\n               \"opp.dialog.confirm.deleteMsg\",\r\n               \"* Are you sure you want to delete this?\",\r\n               [\"this\"]\r\n            ),\r\n         callback: function (result) {\r\n            if (result) {\r\n               if (opts.fnYes) opts.fnYes();\r\n            } else {\r\n               if (opts.fnNo) opts.fnNo();\r\n            }\r\n\r\n            if (opts.callback) opts.callback(result);\r\n         },\r\n      });\r\n   },\r\n\r\n   // Message\r\n   // A simple message displayed to the user.  Can time out\r\n   Message: function (opts) {\r\n      var message = opts.text || opts.message;\r\n      var timeout = opts.timeout || 2000;\r\n\r\n      webix.message({\r\n         text: message,\r\n         expire: timeout,\r\n      });\r\n   },\r\n};\r\n","/**\r\n * ABApplicationCore\r\n *\r\n * This is the core ABApplication class that manages the common operations\r\n * of an ABApplication across platforms.\r\n *\r\n * It's primary responsibility is to decode a given set of attributes into\r\n * a working instance of an ABApplication that can return instances of\r\n * it's defined sub objects.\r\n *\r\n * Platform Specific versions of those objects should be defined in a peer\r\n * directory named platform. These versions of the objects should override\r\n * these Core objects with platform specific methods of operation (like\r\n * .save()).\r\n *\r\n * Initially your target application should load your platform/ABApplication.js\r\n * file, which will include this file and sub class it.\r\n *\r\n * However, this file will include the remaining files from your platform/*\r\n * versions.\r\n */\r\n\r\n// webpack can handle 'require()' statements, but node can't handle import\r\n// so let's use require():\r\nconst ABViewManager = require(\"../platform/ABViewManager\");\r\nvar ABMLClass = require(\"../platform/ABMLClass\");\r\n\r\nfunction toBool(val) {\r\n   if (typeof val == \"undefined\") {\r\n      return false;\r\n   }\r\n\r\n   if (val === \"\" || val === \"false\" || val === \"0\") {\r\n      return false;\r\n   }\r\n\r\n   if (val === \"true\" || val === \"1\") {\r\n      return true;\r\n   }\r\n\r\n   return val;\r\n}\r\n\r\nmodule.exports = class ABApplicationCore extends ABMLClass {\r\n   constructor(attributes, AB) {\r\n      super([\"label\", \"description\"], AB);\r\n\r\n      // attributes should be in format:\r\n      // {\r\n      //    id:##,\r\n      //    json:{},\r\n      //    name:\"XYZ\"\r\n      // }\r\n      attributes.json = attributes.json || {};\r\n\r\n      // ABApplication Attributes\r\n      this.id = attributes.id;\r\n      // {string} uuid\r\n\r\n      this.type = attributes.type || \"application\";\r\n      // {string} .type\r\n      // the ABDefinition.type of this object.\r\n\r\n      this.json = attributes.json;\r\n      if (typeof this.json == \"string\") this.json = JSON.parse(this.json);\r\n      // {obj} .json\r\n      // the full settings of this ABApplication\r\n\r\n      this.name = attributes.name || this.json.name || \"\";\r\n      // {string} .name\r\n      // the hard coded name of this ABDefinition Object, not to be confused\r\n      // with the .label.  The .name is created at design time and is a text\r\n      // reference for this object.\r\n\r\n      this.icon = attributes.icon || \"fa-rocket\";\r\n      // {string} .icon\r\n      // this is a reference to a font awesome icon including the `fa-`\r\n      // example `fa-child` should be stored for the `child` icon to be used\r\n      // if user wants to get creative they can add more to this field following\r\n      // these examples https://fontawesome.com/v4/examples/\r\n\r\n      this.isSystemObject = toBool(attributes.isSystemObject);\r\n      // {bool} .isSystemObject\r\n      // is this one of the integrated System Objects used by our framework?\r\n      // Some ABApplications and ABObjects are central to the running of the\r\n      // AppBuilder site.  They are marked with .isSystemObject = true;  It\r\n      // requires the role \"System Designer\" in order to edit/modify them.\r\n\r\n      this.roleAccess = attributes.roleAccess || [];\r\n      if (!Array.isArray(this.roleAccess)) {\r\n         this.roleAccess = [this.roleAccess];\r\n      }\r\n      this.roleAccess = this.roleAccess.filter((r) => r);\r\n      // {array}\r\n      // the {ABSiteRole.id}s of the roles allowed to work with this\r\n      // ABApplication. (see .isAccessManaged for more info)\r\n\r\n      this.isAccessManaged = JSON.parse(attributes.isAccessManaged || false);\r\n      // {bool} .isAccessManaged\r\n      // does this Application imploy the more sophisticated  Access\r\n      // permissions, or the simpler Role access permissions.\r\n      // {true} : allows an administrator to set which role can View|Edit|Delete\r\n      //          elements of an application.\r\n      // {false}: indicates users having one of the .roleAccess values can have\r\n      //          full access to this application\r\n\r\n      this.accessManagers = attributes.accessManagers;\r\n      if (typeof this.accessManagers == \"string\")\r\n         this.accessManagers = JSON.parse(this.accessManagers);\r\n      // {??} .accessManagers\r\n      // if .isAccessManaged == true, then .accessManagers contain the definitions\r\n      // of the detailed access permissions.\r\n\r\n      this.isTranslationManaged = JSON.parse(\r\n         attributes.isTranslationManaged || false\r\n      );\r\n      this.translationManagers = attributes.translationManagers;\r\n      if (typeof this.translationManagers == \"string\")\r\n         this.translationManagers = JSON.parse(this.translationManagers);\r\n\r\n      this.objectIDs = attributes.json.objectIDs || [];\r\n      // {array} .objectIDs\r\n      // All the {ABObject.id} values that have been pulled into this\r\n      // ABApplication for use in it's design environment.  This is how we\r\n      // determine which {ABObject}s are included or excluded from this app.\r\n\r\n      this.queryIDs = attributes.json.queryIDs || [];\r\n      // {array} .queryIDs\r\n      // All the {ABObjectQuery.id} values that have been pulled into this\r\n      // ABApplication for use in it's design environment.  This is how we\r\n      // determine which {ABObjectQueries}s are included or excluded from\r\n      // this app.\r\n\r\n      this.datacollectionIDs = attributes.json.datacollectionIDs || [];\r\n      // {array} .datacollectionIDs\r\n      // All the {ABDataCollection.id} values that have been pulled into this\r\n      // ABApplication for use in it's design environment.  This is how we\r\n      // determine which {ABDataCollection}s are included or excluded from\r\n      // this app.\r\n\r\n      // import all our {ABViewPage}s\r\n      let newPages = [];\r\n      (attributes.json.pageIDs || []).forEach((id) => {\r\n         var def = this.AB.definitionByID(id);\r\n         if (def) {\r\n            newPages.push(this.pageNew(def));\r\n         } else {\r\n            this.emit(\r\n               \"warning\",\r\n               `App[${this.id}] is referenceing an unknown Page[${id}]`,\r\n               {\r\n                  appID: this.id,\r\n                  pageID: id,\r\n               }\r\n            );\r\n            // console.error(\r\n            //    `App[${this.id}] is referenceing an unknown Page[${id}]`\r\n            // );\r\n         }\r\n      });\r\n      this._pages = newPages;\r\n      // {array} ._pages\r\n      // an array of all the {ABViewPages} this ABApplication offers as\r\n      // interfaces for working with our Data.\r\n      // ABViewPages operate within the confines of an ABApplication so\r\n      // they are created/stored/accessed from within an ABApplication\r\n\r\n      var newProcesses = [];\r\n      var removePIDs = [];\r\n      (attributes.json.processIDs || []).forEach((pID) => {\r\n         var p = this.AB.processByID(pID);\r\n         if (p) {\r\n            newProcesses.push(p);\r\n         } else {\r\n            this.emit(\r\n               \"warning\",\r\n               `Application is referencing an unknown process.`,\r\n               { appID: this.id, processID: pID }\r\n            );\r\n            //    removePIDs.push(pID);\r\n         }\r\n      });\r\n      if (attributes.json.processIDs) {\r\n         // remove those missing pIDs.\r\n         attributes.json.processIDs = attributes.json.processIDs.filter(\r\n            (pr) => {\r\n               return removePIDs.indexOf(pr) == -1;\r\n            }\r\n         );\r\n      }\r\n\r\n      this._processes = newProcesses;\r\n      // {array} ._processes\r\n      // the ABProcess instances created by this ABApplication.\r\n\r\n      this.processIDs = attributes.json.processIDs || [];\r\n      // {array} .processIDs\r\n      // an array of all the {ABProcess.id}s referenced by this Application.\r\n\r\n      // Object List Settings\r\n      attributes.json.objectListSettings =\r\n         attributes.json.objectListSettings || {};\r\n      this.objectListSettings = this.objectListSettings || {};\r\n      this.objectListSettings.isOpen = JSON.parse(\r\n         attributes.json.objectListSettings.isOpen || false\r\n      );\r\n      this.objectListSettings.searchText =\r\n         attributes.json.objectListSettings.searchText || \"\";\r\n      this.objectListSettings.sortDirection =\r\n         attributes.json.objectListSettings.sortDirection || \"asc\";\r\n      this.objectListSettings.isGroup = JSON.parse(\r\n         attributes.json.objectListSettings.isGroup || false\r\n      );\r\n\r\n      // let the MLClass now process the translations:\r\n      // transition issues:\r\n      attributes.translations =\r\n         attributes.translations || attributes.json.translations;\r\n\r\n      super.fromValues(attributes);\r\n   }\r\n\r\n   ///\r\n   /// Static Methods\r\n   ///\r\n   /// Available to the Class level object.  These methods are not dependent\r\n   /// on the instance values of the Application.\r\n   ///\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /// ABApplication data methods\r\n   /**\r\n    * @method isAccessibleForRoles()\r\n    * return true/false if this ABApplication is accessible for one of the\r\n    * passed in ABRoles.\r\n    * @param {array[ABRole]} roles\r\n    *        an array of {ABRole} instances.\r\n    * @return {bool}\r\n    */\r\n   isAccessibleForRoles(roles) {\r\n      var foundRole = false;\r\n\r\n      // if we are on the basic Role assignments:\r\n      if (!this.isAccessManaged) {\r\n         (roles || []).forEach((r) => {\r\n            if (this.roleAccess.indexOf(r.uuid || r) > -1) {\r\n               foundRole = true;\r\n            }\r\n         });\r\n         return foundRole;\r\n      }\r\n\r\n      // isAccessManaged has been set, so 2 kinds of ppl can\r\n      // see this App\r\n      // 1) an AccessManager\r\n      if (parseInt(this.accessManagers.useRole)) {\r\n         (roles || []).forEach((r) => {\r\n            if (this.accessManagers.role.indexOf(r.uuid || r) > -1) {\r\n               foundRole = true;\r\n            }\r\n         });\r\n      }\r\n\r\n      // stop here if found.\r\n      if (foundRole) return foundRole;\r\n\r\n      // 2) someone who has a role that can see one of it's pages.\r\n      // scan each Page of this Application\r\n      (this.pages() || []).forEach((p) => {\r\n         // check to see if that page.isAccessibleForRoles()\r\n         if (p.isAccessibleForRoles(roles)) {\r\n            foundRole = true;\r\n         }\r\n      });\r\n      return foundRole;\r\n   }\r\n\r\n   /**\r\n    * @method toObj()\r\n    *\r\n    * properly compile the current state of this ABApplication instance\r\n    * into the values needed for saving to the DB.\r\n    *\r\n    * Most of the instance data is stored in .json field, so be sure to\r\n    * update that from all the current values of our child fields.\r\n    *\r\n    * @return {json}\r\n    */\r\n   toObj() {\r\n      // MLClass translation\r\n      this.json = super.toObj();\r\n\r\n      this.json.name = this.name;\r\n\r\n      this.json.objectIDs = this.objectIDs;\r\n\r\n      this.json.objectListSettings = this.objectListSettings;\r\n\r\n      this.json.queryIDs = this.queryIDs;\r\n\r\n      this.json.datacollectionIDs = this.datacollectionIDs;\r\n\r\n      this.json.pageIDs = (this._pages || []).map((p) => p.id);\r\n\r\n      this.json.processIDs = (this._processes || []).map((p) => {\r\n         return p.id;\r\n      });\r\n\r\n      // // for each MobileApp: compile to json\r\n      // var currApps = [];\r\n      // this._mobileApps.forEach((app) => {\r\n      //    currApps.push(app.toObj())\r\n      // })\r\n      // this.json.mobileApps = currApps;\r\n\r\n      return {\r\n         id: this.id,\r\n         type: this.type || \"application\",\r\n         name: this.name,\r\n         icon: this.icon,\r\n         isSystemObject: this.isSystemObject,\r\n         json: this.json,\r\n         roleAccess: this.roleAccess,\r\n         translations: this.json.translations,\r\n         isAccessManaged: this.isAccessManaged,\r\n         isTranslationManaged: this.isTranslationManaged,\r\n         accessManagers: this.accessManagers,\r\n         translationManagers: this.translationManagers,\r\n      };\r\n   }\r\n\r\n   ///\r\n   /// Mobile Apps\r\n   ///\r\n\r\n   /**\r\n    * @method mobileApps()\r\n    *\r\n    * return an array of all the ABObjectQueries for this ABApplication.\r\n    *\r\n    * @param {fn} filter   a filter fn to return a set of ABObjectQueries that\r\n    *                this fn returns true for.\r\n    * @return {array}   array of ABObjectQueries\r\n    */\r\n   mobileApps(filter = () => true) {\r\n      return (this._mobileApps || []).filter(filter);\r\n   }\r\n\r\n   ///\r\n   /// Datacollections\r\n   ///\r\n\r\n   ///\r\n   /// Data collections\r\n   ///\r\n\r\n   // datacollectionNew(values) {\r\n   //    return new ABDataCollectionCore(values, this);\r\n   // }\r\n\r\n   datacollectionsExcluded(filter = () => true) {\r\n      return this.AB.datacollections((o) => {\r\n         return this.datacollectionIDs.indexOf(o.id) == -1;\r\n      }).filter(filter);\r\n   }\r\n\r\n   datacollectionsIncluded(filter = () => true) {\r\n      return this.AB.datacollections((o) => {\r\n         return this.datacollectionIDs.indexOf(o.id) > -1;\r\n      }).filter(filter);\r\n   }\r\n\r\n   ///\r\n   /// Objects\r\n   ///\r\n\r\n   objectsExcluded(filter = () => true) {\r\n      return this.AB.objects((o) => {\r\n         return this.objectIDs.indexOf(o.id) == -1;\r\n      }).filter(filter);\r\n   }\r\n\r\n   objectsIncluded(filter = () => true) {\r\n      return this.AB.objects((o) => {\r\n         return this.objectIDs.indexOf(o.id) > -1;\r\n      }).filter(filter);\r\n   }\r\n\r\n   /**\r\n    * @method connectedObjects()\r\n    *\r\n    * return an array of all the connected ABObjects for a given ABObject.\r\n    *\r\n    * @param {string} id\r\n    *        an ID of an ABObject\r\n    * @return {array}   array of options for webix select\r\n    *         [ {id, value}, ... ]\r\n    */\r\n   connectedObjects(id) {\r\n      console.error(\r\n         \"ABApplicationCore.connectedObjects(): who is calling this?\"\r\n      );\r\n\r\n      if (id == \"\") return [];\r\n\r\n      // Determine the object from the ID\r\n      var myObj = this.AB.objectByID(id);\r\n\r\n      // Get all the connected Fields for that object\r\n      var connectedFields = myObj.connectFields();\r\n      // Store the related fields associatively inside their related Objects ID\r\n      var connectedObj = {};\r\n      connectedFields.forEach((f) => {\r\n         connectedObj[f.settings.linkObject] = this.AB.objectByID(\r\n            f.settings.linkObject\r\n         );\r\n      });\r\n      // Look up the objects by their ID and push them in an options array\r\n      var linkedObjects = [];\r\n      Object.keys(connectedObj).forEach(function (key /*, index */) {\r\n         linkedObjects.push({\r\n            id: this[key].id,\r\n            value: this[key].label,\r\n         });\r\n      }, connectedObj /* = this. inside fn */);\r\n\r\n      return linkedObjects;\r\n   }\r\n\r\n   /**\r\n    * @method connectedFields()\r\n    * return an array of all the connected ABFields for a given ABObject\r\n    * @param {string} currObjID\r\n    *        an ID of the current ABObject\r\n    * @param {string} linkedObjectID\r\n    *        an ID of the linked ABObject\r\n    * @return {array}\r\n    *        array of options for webix select\r\n    */\r\n   connectedFields(currObjID, linkedObjectID) {\r\n      console.error(\"!!! Who is calling this?\");\r\n\r\n      // Determine the object from the currObjID\r\n      var myObj = this.AB.objectByID(currObjID);\r\n\r\n      // Get all the connected Fields for our object that match the linkedObjectID\r\n      var connectedFields = myObj.connectFields(\r\n         (f) => f.settings.linkObject == linkedObjectID\r\n      );\r\n      // Build an arry of options for the webix select\r\n      var linkedFields = [];\r\n      connectedFields.forEach((f) => {\r\n         linkedFields.push({ id: f.columnName, value: f.label });\r\n      });\r\n\r\n      return linkedFields;\r\n   }\r\n\r\n   ///\r\n   /// Pages\r\n   ///\r\n\r\n   /**\r\n    * @method pages()\r\n    * return an array of all the ABViewPages for this ABApplication.\r\n    * @param {fn} filter\r\n    *        a filter fn to return a set of ABViewPages that this fn\r\n    *        returns true for.\r\n    * @param {boolean} deep\r\n    *        flag to search in sub pages\r\n    * @return {array}\r\n    *        array of ABViewPages\r\n    */\r\n   pages(filter = () => true, deep = false) {\r\n      var result = [];\r\n\r\n      if (!this._pages || this._pages.length < 1) return result;\r\n\r\n      // find into sub-pages recursively\r\n      if (filter && deep) {\r\n         result = this._pages.filter(filter);\r\n\r\n         if (result.length < 1) {\r\n            this._pages.forEach((p) => {\r\n               var subPages = p.pages(filter, deep);\r\n               if (subPages && subPages.length > 0) {\r\n                  result = subPages;\r\n               }\r\n            });\r\n         }\r\n      }\r\n      // find root pages\r\n      else {\r\n         result = (this._pages || []).filter(filter);\r\n      }\r\n\r\n      return result;\r\n   }\r\n\r\n   ///\r\n   /// Processes\r\n   ///\r\n\r\n   /**\r\n    * @method processes()\r\n    * return an array of all the ABProcesses for this ABApplication.\r\n    * @param {fn} filter\r\n    *        a filter fn to return a set of ABProcesses that\r\n    *        this fn returns true for.\r\n    * @return {array}\r\n    *        array of ABProcesses\r\n    */\r\n   processes(filter = () => true) {\r\n      return this._processes.filter(filter);\r\n   }\r\n\r\n   hasProcess(process) {\r\n      if (process && process.id) {\r\n         return this.processIDs.indexOf(process.id) > -1;\r\n      } else {\r\n         return false;\r\n      }\r\n   }\r\n\r\n   ///\r\n   /// Views\r\n   ///\r\n\r\n   /**\r\n    * @method views()\r\n    * return an array of all the Views for this ABApplication.\r\n    * @param {fn} filter\r\n    *        a filter fn to return a set of Views that this fn\r\n    *        returns true for.\r\n    * @return {array}\r\n    *        array of Views\r\n    */\r\n   views(filter) {\r\n      var result = [];\r\n      var views = [];\r\n      var pages = [];\r\n\r\n      if (\r\n         (!this._pages || this._pages.length < 1) &&\r\n         (!this._views || this._views.length < 1)\r\n      )\r\n         return result;\r\n\r\n      function lookDeep(view) {\r\n         if (view._pages && view._pages.length) {\r\n            view._pages.forEach((p) => {\r\n               // check the page views recusively\r\n               var pageViews = p.views(filter, true);\r\n               // if there was a match store it\r\n               if (pageViews && pageViews.length > 0) {\r\n                  result = pageViews;\r\n               }\r\n               // if no match move on to the subpages\r\n               if (result.length < 1) {\r\n                  // loop through each subpage recursively\r\n                  var subPages = p.pages(filter, true);\r\n                  // if there was a match store it\r\n                  if (subPages && subPages.length > 0) {\r\n                     result = subPages;\r\n                  }\r\n                  if (result.length < 1) {\r\n                     lookDeep(p);\r\n                  }\r\n               }\r\n            });\r\n         }\r\n      }\r\n\r\n      // look at views recursively\r\n      if (filter) {\r\n         // look at views recursively (views can have subviews and so on)\r\n         if (this._views) {\r\n            views = this._views.filter(filter);\r\n\r\n            if (views.length < 1) {\r\n               this._views.forEach((v) => {\r\n                  var subViews = v.views(filter, true);\r\n                  if (subViews && subViews.length > 0) {\r\n                     views = subViews;\r\n                  }\r\n               });\r\n            }\r\n         }\r\n\r\n         // if no views of the root page match now look at the sub pages and their views\r\n         if (views.length) {\r\n            result = views;\r\n         } else {\r\n            // check the first level subpages\r\n            result = this._pages.filter(filter);\r\n\r\n            // if no match check each pages views and subpages\r\n            if (result.length < 1) {\r\n               // looping through pages\r\n               lookDeep(this);\r\n            }\r\n         }\r\n      }\r\n      // find all views\r\n      else {\r\n         // recusively gather all views on this view\r\n         if (this._views) {\r\n            views = this._views;\r\n            if (views.length) {\r\n               views.forEach((v) => {\r\n                  var subViews = v.views(() => true, true);\r\n                  if (subViews && subViews.length) {\r\n                     views = views.concat(subViews);\r\n                  }\r\n               });\r\n            }\r\n         }\r\n\r\n         // recursively gather all pages and their views\r\n         if (this._pages) {\r\n            pages = this._pages;\r\n            if (pages.length) {\r\n               pages.forEach((p) => {\r\n                  // grab all views on this page\r\n                  var pageViews = p.views(() => true, true);\r\n                  if (pageViews && pageViews.length) {\r\n                     views = views.concat(pageViews);\r\n                  }\r\n                  // grab all subpages on this page\r\n                  var subPages = p.pages(() => true, true);\r\n                  if (subPages && subPages.length) {\r\n                     pages = pages.concat(subPages);\r\n                     subPages.forEach((sub) => {\r\n                        var subViews = sub.views(() => true, true);\r\n                        if (subViews && subViews.length) {\r\n                           views = views.concat(subViews);\r\n                        }\r\n                     });\r\n                  }\r\n               });\r\n            }\r\n         }\r\n\r\n         result = result.concat(pages, views);\r\n      }\r\n\r\n      return result;\r\n   }\r\n\r\n   /**\r\n    * @method viewAll()\r\n    * return a list of all the {ABViewxxx} classes available.\r\n    * @return {array} of ABView objects\r\n    */\r\n   viewAll(fn = () => true) {\r\n      return ABViewManager.allViews(fn);\r\n   }\r\n\r\n   ///\r\n   /// Queries\r\n   ///\r\n\r\n   /**\r\n    * queriesExcluded()\r\n    * return a list of ABObjectQuery(s) that are not included in this\r\n    * ABApplication.\r\n    * @param {fn} filter\r\n    *        a filter fn to further reduce which queries to return.\r\n    * @return {array}\r\n    */\r\n   queriesExcluded(filter = () => true) {\r\n      return this.AB.queries((q) => {\r\n         return this.queryIDs.indexOf(q.id) == -1;\r\n      }).filter(filter);\r\n   }\r\n\r\n   /**\r\n    * queriesIncluded()\r\n    * return a list of ABObjectQuery(s) that are included in this\r\n    * ABApplication.\r\n    * @param {fn} filter\r\n    *        a filter fn to further reduce which queries to return.\r\n    * @return {array}\r\n    */\r\n   queriesIncluded(filter = () => true) {\r\n      return this.AB.queries((q) => {\r\n         return this.queryIDs.indexOf(q.id) > -1;\r\n      }).filter(filter);\r\n   }\r\n\r\n   ///\r\n   /// Roles\r\n   ///\r\n\r\n   /**\r\n    * @method roles()\r\n    * return an array of all the ABRole for this ABApplication.\r\n    * @param {fn} filter\r\n    *        a filter fn to further reduce which roles to return.\r\n    * @return {array}   array of ABRole\r\n    */\r\n   // roles(filter = () => true) {\r\n   //    return (this.role || []).filter(filter);\r\n   // }\r\n\r\n   /**\r\n    * @method urlResolve()\r\n    * given an object pointer, return the specific object referenced.\r\n    * pointer must start with a '#', use '/' as delimiters, and either\r\n    * reference an object's .id, or an object's .property.\r\n    * for example:\r\n    * #/_objects   : resolves to the array of ._objects pointed to by this\r\n    *               application.\r\n    * #/_objects/[object.id] : reolved to a specific object\r\n    * #/_objects/[object.id]/_fields/[field.id] : resolves to a specific data field\r\n    *               refereced by object.id.\r\n    *\r\n    * @param {string} pointer : the string url referencing the object you want\r\n    *                       to retrieve.\r\n    * @return {obj}\r\n    */\r\n   urlResolve(pointer) {\r\n      var parts = pointer.split(\"/\");\r\n\r\n      var parseStep = (obj, steps) => {\r\n         // we're done.  obj is what we are looking for:\r\n         if (steps.length == 0) {\r\n            return obj;\r\n         }\r\n\r\n         // pull the next step key:\r\n         var key = steps.shift();\r\n\r\n         // special case, \"#\" makes sure we are talking about the\r\n         // Application object\r\n         if (key == \"#\") {\r\n            return parseStep(this, steps);\r\n         }\r\n\r\n         // if obj is an [], then key should be an .id reference to\r\n         // lookup:\r\n         if (Array.isArray(obj)) {\r\n            obj = obj.filter(function (o) {\r\n               return o.id == key;\r\n            })[0];\r\n            return parseStep(obj, steps);\r\n         }\r\n\r\n         // otherwise obj should be an {} and key a property:\r\n         if (obj && obj[key]) {\r\n            return parseStep(obj[key], steps);\r\n         }\r\n\r\n         if (key == \"_objects\") {\r\n            console.error(new Error(\"REFACTOR: old objectBy url reference:\"));\r\n\r\n            // This can be gotten from our AB\r\n            var id = steps.shift();\r\n            return parseStep(this.AB.objectByID(id), steps);\r\n         }\r\n\r\n         // if we got here, there is an error!\r\n         // console.error('!!! failed to lookup url:'+pointer);\r\n         console.error(\"!!! failed to lookup url:\" + pointer);\r\n         return null;\r\n      };\r\n\r\n      return parseStep(this, parts);\r\n   }\r\n\r\n   /**\r\n    * @method urlPointer()\r\n    * return the url pointer for this application.\r\n    *\r\n    * @param {boolean} acrossApp - flag to include application id to url\r\n    *\r\n    * @return {string}\r\n    */\r\n   urlPointer(acrossApp) {\r\n      // NOTE: if we need to expand this to search across\r\n      // applications, then add in this application.id here:\r\n      if (acrossApp) return \"#/\" + this.id + \"/\";\r\n      else return \"#/\";\r\n   }\r\n\r\n   /**\r\n    * @method urlObject()\r\n    * return the url pointer for objects in this application.\r\n    *\r\n    * @param {boolean} acrossApp - flag to include application id to url\r\n    *\r\n    * @return {string}\r\n    */\r\n   urlObject(acrossApp) {\r\n      return this.urlPointer(acrossApp) + \"_objects/\";\r\n   }\r\n\r\n   /**\r\n    * @method urlView()\r\n    * return the url pointer for pages in this application.\r\n    *\r\n    * @param {boolean} acrossApp - flag to include application id to url\r\n    *\r\n    * @return {string}\r\n    */\r\n   urlPage(acrossApp) {\r\n      return this.urlPointer(acrossApp) + \"_pages/\";\r\n   }\r\n\r\n   /**\r\n    * @method urlQuery()\r\n    * return the url pointer for queries in this application.\r\n    *\r\n    * @param {boolean} acrossApp - flag to include application id to url\r\n    *\r\n    * @return {string}\r\n    */\r\n   urlQuery(acrossApp) {\r\n      return this.urlPointer(acrossApp) + \"_queries/\";\r\n   }\r\n\r\n   ///\r\n   ///   Object List Settings\r\n   ///\r\n   get objectlistIsOpen() {\r\n      return this.objectListSettings.isOpen;\r\n   }\r\n\r\n   set objectlistIsOpen(isOpen) {\r\n      this.objectListSettings.isOpen = isOpen;\r\n   }\r\n\r\n   get objectlistSearchText() {\r\n      return this.objectListSettings.searchText;\r\n   }\r\n\r\n   set objectlistSearchText(searchText) {\r\n      this.objectListSettings.searchText = searchText;\r\n   }\r\n\r\n   get objectlistSortDirection() {\r\n      return this.objectListSettings.sortDirection;\r\n   }\r\n\r\n   set objectlistSortDirection(sortDirection) {\r\n      this.objectListSettings.sortDirection = sortDirection;\r\n   }\r\n\r\n   get objectlistIsGroup() {\r\n      return this.objectListSettings.isGroup;\r\n   }\r\n\r\n   set objectlistIsGroup(isGroup) {\r\n      this.objectListSettings.isGroup = isGroup;\r\n   }\r\n\r\n   ///\r\n   /// Instance generators\r\n   ///\r\n\r\n   /**\r\n    * @method pageNew()\r\n    *\r\n    * return an instance of a new (unsaved) ABViewPage that is tied to this\r\n    * ABApplication.\r\n    *\r\n    * NOTE: this new page is not included in our this.pages until a .save()\r\n    * is performed on the page.\r\n    *\r\n    * @return {ABViewPage}\r\n    */\r\n   pageNew(values) {\r\n      // make sure this is an ABViewPage description\r\n      // values.key = ABViewPageCore.common().key;\r\n      values.key = \"page\";\r\n\r\n      return ABViewManager.newView(values, this, null);\r\n   }\r\n\r\n   /**\r\n    * @method pageByID()\r\n    * return pages from the given {id}\r\n    * @param {string} id\r\n    *        the uuid of the page to return.\r\n    * @return {ABViewPage}\r\n    */\r\n   pageByID(id) {\r\n      return this.pages((f) => f.id == id)[0];\r\n   }\r\n\r\n   /**\r\n    * @method viewNew()\r\n    *\r\n    * return an instance of a new (unsaved) ABView.\r\n    *\r\n    * @return {ABView}\r\n    */\r\n   viewNew(values, application, parent) {\r\n      return ABViewManager.newView(values, application, parent);\r\n   }\r\n\r\n   ///\r\n   /// Utilities\r\n   ///\r\n\r\n   cloneDeep(/* object */) {\r\n      var errorDepreciated = new Error(\r\n         \"ABApplicationCore.cloneDeep(): Depreciated!  Use AB.cloneDeep() instead.\"\r\n      );\r\n      throw errorDepreciated;\r\n\r\n      // return JSON.parse(JSON.stringify(object));\r\n   }\r\n};\r\n","/*\r\n * ABDataCollection\r\n * Defines a set of data that other parts of the Application can work with.\r\n * it can point to either an ABObject, or ABObjectQuery, and can have an\r\n * filter, and sorts defined.\r\n *\r\n *\r\n *\r\n */\r\n// const ABEmitter = require(\"../platform/ABEmitter\");\r\nconst ABMLClass = require(\"../platform/ABMLClass\");\r\n\r\n// const ABObject = require(\"../platform/ABObject\");\r\n// const ABObjectQuery = require(\"../platform/ABObjectQuery\");\r\n// const RowFilter = require(\"../platform/RowFilter\");\r\n\r\nvar DefaultValues = {\r\n   id: \"uuid\",\r\n   label: \"\", // label\r\n   object: {}, // json of ABObject\r\n   query: {}, // json of ABObjectQuery\r\n   settings: {\r\n      datasourceID: \"\", // id of ABObject or ABObjectQuery\r\n      linkDatacollectionID: \"\", // id of ABDatacollection\r\n      linkFieldID: \"\", // id of ABField\r\n      objectWorkspace: {\r\n         filterConditions: {\r\n            // array of filters to apply to the data table\r\n            glue: \"and\",\r\n            rules: [],\r\n         },\r\n         sortFields: [], // array of columns with their sort configurations\r\n      },\r\n      loadAll: false,\r\n      preventPopulate: false,\r\n      isQuery: false, // if true it is a query, otherwise it is a object.\r\n\r\n      fixSelect: \"\", // _CurrentUser, _FirstRecord, _FirstRecordDefault or row id\r\n\r\n      syncType: 1, // 1 (Server), 2 (Client)\r\n   },\r\n};\r\n\r\nconst QueuedOperations = [];\r\n// {array} of operations that we want to perform but allow some space\r\n// between operations.\r\nvar _queueTimer = null;\r\n\r\nfunction runQueue() {\r\n   // if (!_queueTimer) {\r\n   //    _queueTimer = setInterval(() => {\r\n   //       runQueue();\r\n   //    }, 20);\r\n   // }\r\n   if (QueuedOperations.length == 0) {\r\n      // stop\r\n      // clearInterval(_queueTimer);\r\n      _queueTimer = null;\r\n      return;\r\n   }\r\n   var op = QueuedOperations.shift();\r\n   op.fn();\r\n   _queueTimer = setTimeout(runQueue, op.timeout);\r\n}\r\nfunction queueOperation(fn, timeout = 20) {\r\n   QueuedOperations.push({ fn, timeout });\r\n   if (!_queueTimer) {\r\n      runQueue();\r\n   }\r\n}\r\n\r\nmodule.exports = class ABDataCollectionCore extends ABMLClass {\r\n   constructor(attributes, AB) {\r\n      super([\"label\"], AB);\r\n\r\n      attributes = attributes || {};\r\n\r\n      // this.application = application;\r\n\r\n      this.fromValues(attributes);\r\n\r\n      this.__dataCollection = this._dataCollectionNew([]);\r\n      // {DataCollection}\r\n      // This is a working instance of a DataCollection, not an {ABDatacCollection}\r\n      // On web/mobile this is a webix component.  So keep the creation as part of\r\n      // the platform/ABDataCollection implementation.\r\n\r\n      // Set filter value\r\n      this.refreshFilterConditions();\r\n\r\n      this.__bindComponentIds = [];\r\n      this.__flexComponentIds = [];\r\n\r\n      // refresh a data collection\r\n      // this.init();\r\n\r\n      // mark data status does not be initialized\r\n      this._dataStatus = this.dataStatusFlag.notInitial;\r\n\r\n      this.__filterCond = null;\r\n      // {QueryCondition}\r\n      // A passed in Query Condition for filtering our DataCollection.\r\n      // This value is ANDed with our normal filter conditions.\r\n   }\r\n\r\n   /**\r\n    * contextKey()\r\n    *\r\n    * return a unique key that represents data from/for this type of object.\r\n    *\r\n    * used when creating Network jobs and needing to be notified when a job\r\n    * is complete.  We send a contextKey() to the Network job and then listen\r\n    * for it to know when it is complete.\r\n    * @return {string}\r\n    */\r\n   static contextKey() {\r\n      return \"datacollection\";\r\n   }\r\n\r\n   /**\r\n    * @method fromValues()\r\n    *\r\n    * initialze this object with the given set of values.\r\n    * @param {obj} values\r\n    */\r\n   fromValues(values) {\r\n      this.id = values.id;\r\n      // {string} .id\r\n      // the uuid of this ABDataCollection Definition.\r\n\r\n      this.name = values.name || null;\r\n      // {string} .name\r\n      // the unchanging name of this ABDataCollection\r\n\r\n      this.type = values.type || \"datacollection\";\r\n      // {string} .type\r\n      // the type of ABDefinition this is.\r\n\r\n      values.settings = values.settings || {};\r\n      this.settings = this.settings || {};\r\n      // {obj} .settings\r\n      // the specific operation values for this ABDataCollection\r\n\r\n      this.settings.linkDatacollectionID =\r\n         values.settings.linkDatacollectionID ||\r\n         DefaultValues.settings.linkDatacollectionID;\r\n      // {string} .settings.linkDaacollectionID\r\n      // the uuid of another ABDataCollection that provides the link/trigger\r\n      // for filtering the values of this ABDataCollection.\r\n\r\n      this.settings.linkFieldID =\r\n         values.settings.linkFieldID || DefaultValues.settings.linkFieldID;\r\n      // {string} .settings.linkFieldID\r\n      // the uuid of the ABDataField of the .linkDatacollection ABObject\r\n      // whose value is the trigger value for this ABDataCollection\r\n\r\n      this.settings.objectWorkspace = values.settings.objectWorkspace || {\r\n         filterConditions:\r\n            DefaultValues.settings.objectWorkspace.filterConditions,\r\n         sortFields: DefaultValues.settings.objectWorkspace.sortFields,\r\n      };\r\n      // {obj} .settings.objectWorkspace\r\n      // the default settings for what is shown in the AppBuilder's\r\n      // DataCollection workspace\r\n\r\n      this.settings.fixSelect = values.settings.fixSelect;\r\n\r\n      // Convert to boolean\r\n      this.settings.loadAll = JSON.parse(\r\n         values.settings.loadAll || DefaultValues.settings.loadAll\r\n      );\r\n      // {bool} .settings.loadAll\r\n      // do we load all the data at one time? false == load by pages.\r\n\r\n      this.settings.isQuery = JSON.parse(\r\n         values.settings.isQuery || DefaultValues.settings.isQuery\r\n      );\r\n      // {bool} .settings.isQuery\r\n      // is the data source for this ABDataCollection based upon an\r\n      // ABObjectQuery?\r\n\r\n      this.settings.preventPopulate = JSON.parse(\r\n         values.settings.preventPopulate ||\r\n            DefaultValues.settings.preventPopulate\r\n      );\r\n      // {bool} preventPopulate\r\n      // option to not populate the data this Datacollection requests from the\r\n      // server.  Usually to speed up the process.\r\n\r\n      // Convert to number\r\n      this.settings.syncType = parseInt(\r\n         values.settings.syncType || DefaultValues.settings.syncType\r\n      );\r\n      // {int} .settings.syncType\r\n      // how is the data between this ABDataCollection and it's\r\n      // .datasource synced?\r\n\r\n      this.__datasource = null;\r\n      // {obj} .__datasource\r\n      // the reference to the ABObject/ABObjectQuery that this ABDataCollection\r\n      // is based off of.\r\n\r\n      this.settings.datasourceID =\r\n         values.settings.datasourceID || DefaultValues.settings.datasourceID;\r\n      // {string} .settings.datasourceID\r\n      // the uuid of the .__datasource object to use\r\n\r\n      // now lookup and reference the proper datasource\r\n      if (this.settings.datasourceID) {\r\n         // check for an ABObject\r\n         var obj = this.AB.objectByID(this.settings.datasourceID);\r\n         if (!obj) {\r\n            // this must be an ABObjectQuery then ...\r\n            obj = this.AB.queryByID(this.settings.datasourceID);\r\n         }\r\n\r\n         if (obj) {\r\n            this.__datasource = obj;\r\n            this.settings.isQuery = obj.type === \"query\";\r\n            if (this.settings.isQuery) {\r\n               if (this.__datasource.isGroup) {\r\n                  if (!this.__treeCollection)\r\n                     this.__treeCollection = this._treeCollectionNew();\r\n                  // {TreeCollection}\r\n                  // This is a webix TreeCollection (or similar)\r\n                  // keep it's implementation as part of the platform\r\n\r\n                  this.__isGroup = true;\r\n               }\r\n            }\r\n         } else {\r\n            console.error(\r\n               `ABDataCollection[${this.name}][${this.id}] unable to find datasource [${this.settings.datasourceID}]`\r\n            );\r\n         }\r\n      }\r\n\r\n      // // Populate data source: ABObject or ABObjectQuery\r\n      // if (values.query && values.query[0]) {\r\n      //    this.__datasource = new ABObjectQuery(\r\n      //       values.query[0],\r\n      //       this.application\r\n      //    );\r\n      //    this.settings.isQuery = true;\r\n\r\n      //    if (this.__datasource.isGroup) {\r\n      //       if (!this.__treeCollection)\r\n      //          this.__treeCollection = this._treeCollectionNew();\r\n\r\n      //       this.__isGroup = true;\r\n      //    }\r\n      // } else if (values.object && values.object[0]) {\r\n      //    this.__datasource = new ABObject(values.object[0], this.application);\r\n      //    this.settings.isQuery = false;\r\n      // }\r\n\r\n      // let the MLClass now process the translations:\r\n      super.fromValues(values);\r\n   }\r\n\r\n   /**\r\n    * @method toObj()\r\n    *\r\n    * properly compile the current state of this ABApplication instance\r\n    * into the values needed for saving to the DB.\r\n    *\r\n    * Most of the instance data is stored in .json field, so be sure to\r\n    * update that from all the current values of our child fields.\r\n    *\r\n    * @return {json}\r\n    */\r\n   toObj() {\r\n      var obj = super.toObj(); // untranslate the object\r\n\r\n      return {\r\n         id: this.id,\r\n         name: this.name || this.label,\r\n         type: this.type || \"datacollection\",\r\n         settings: this.AB.cloneDeep(this.settings || {}),\r\n         translations: obj.translations,\r\n      };\r\n   }\r\n\r\n   /**\r\n    * @method save()\r\n    *\r\n    * persist this instance of ABDatacollection with it's parent\r\n    *\r\n    *\r\n    * @return {Promise}\r\n    *      .resolve( {this} )\r\n    */\r\n   async save() {\r\n      if (!this.id) {\r\n         this.label = this.label || this.name;\r\n      }\r\n      await super.save();\r\n      return this;\r\n   }\r\n\r\n   /**\r\n    * @method destroy()\r\n    *\r\n    * destroy the current instance of ABDatacollection\r\n    *\r\n    * also remove it from our parent application\r\n    *\r\n    * @return {Promise}\r\n    */\r\n   destroy() {\r\n      var removeFromApplications = () => {\r\n         return new Promise((next, err) => {\r\n            this.AB.applications().then((apps) => {\r\n               // NOTE: apps is a webix datacollection\r\n\r\n               var allRemoves = [];\r\n\r\n               var appsWithObject = apps.filter((a) => {\r\n                  return a.datacollectionsIncluded((o) => o.id == this.id);\r\n               });\r\n               appsWithObject.forEach((app) => {\r\n                  allRemoves.push(app.datacollectionRemove(this));\r\n               });\r\n\r\n               return Promise.all(allRemoves).then(next).catch(err);\r\n            });\r\n         });\r\n      };\r\n\r\n      return Promise.resolve()\r\n         .then(() => {\r\n            return removeFromApplications();\r\n         })\r\n         .then(() => {\r\n            return super.destroy();\r\n         })\r\n         .then(() => {\r\n            this.emit(\"destroyed\");\r\n         });\r\n   }\r\n\r\n   /**\r\n    * @property $dc\r\n    * return the underlying webix datacollection\r\n    * @return {webix.datacollection}\r\n    */\r\n   get $dc() {\r\n      return this.__dataCollection;\r\n   }\r\n\r\n   /**\r\n    * @property datasource\r\n    * return a object of this component.\r\n    *\r\n    * @return {ABObject|ABObjectQuery}\r\n    */\r\n   get datasource() {\r\n      if (!this.__datasource) {\r\n         if (this.id && this.name) {\r\n            // occassionally we have blank DCs (without .id or .name)\r\n            // and I don't want to see errors for those\r\n            var err = new Error(\r\n               `DataCollection[${this.name}][${this.id}] missing reference datasource`\r\n            );\r\n            this.AB.notify(\"builder\", err, { datacollection: this.toObj() });\r\n         }\r\n         return null;\r\n      }\r\n      var obj = this.AB.objectByID(this.__datasource.id);\r\n      if (!obj) {\r\n         obj = this.AB.queryByID(this.__datasource.id);\r\n      }\r\n      return obj;\r\n   }\r\n\r\n   /**\r\n    * @property datasource\r\n    * set a object to data collection\r\n    *\r\n    * @param {ABObject|ABObjectQuery} object\r\n    */\r\n   set datasource(object) {\r\n      this.__datasource = object;\r\n\r\n      this.refreshFilterConditions();\r\n   }\r\n\r\n   /**\r\n    * @property sourceType\r\n    * return type of source.\r\n    *\r\n    * @return {string} - 'object' or 'query'\r\n    */\r\n   get sourceType() {\r\n      return this.settings.isQuery ? \"query\" : \"object\";\r\n   }\r\n\r\n   /**\r\n    * @method datacollectionLink\r\n    * return a ABDatacollection that link of this.\r\n    *\r\n    * @return {ABDatacollection}\r\n    */\r\n   get datacollectionLink() {\r\n      if (!this.AB) return null;\r\n\r\n      return this.AB.datacollectionByID(this.settings.linkDatacollectionID);\r\n   }\r\n\r\n   /**\r\n    * @property fieldLink\r\n    * return a ABFieldConnect field that link of this.\r\n    *\r\n    * @return {ABFieldConnect}\r\n    */\r\n   get fieldLink() {\r\n      let object = this.datasource;\r\n      if (!object) return null;\r\n\r\n      return object.fieldByID(this.settings.linkFieldID);\r\n   }\r\n\r\n   /**\r\n    * @property model\r\n    * return a source model\r\n    *\r\n    * @return ABModel\r\n    */\r\n   get model() {\r\n      let object = this.datasource; // already notified\r\n\r\n      return object ? object.model() : null;\r\n   }\r\n\r\n   get dataStatusFlag() {\r\n      return {\r\n         notInitial: 0,\r\n         initializing: 1,\r\n         initialized: 2,\r\n      };\r\n   }\r\n\r\n   get dataStatus() {\r\n      return this._dataStatus;\r\n   }\r\n\r\n   ///\r\n   /// Cursor\r\n   ///\r\n\r\n   setCursor(itemId) {\r\n      // If the static cursor is set, then this DC could not set cursor to other rows\r\n      if (\r\n         this.settings.fixSelect &&\r\n         (this.settings.fixSelect != \"_FirstRecordDefault\" ||\r\n            this.settings.fixSelect == itemId)\r\n      )\r\n         return;\r\n\r\n      if (this.__treeCollection) {\r\n         // set cursor of tree collection\r\n         this.setCursorTree(itemId);\r\n\r\n         // pull current row id\r\n         let currTreeId = this.__treeCollection.getCursor();\r\n         if (currTreeId) {\r\n            let currTreeItem = this.__treeCollection.getItem(currTreeId);\r\n            if (currTreeItem) itemId = currTreeItem._itemId;\r\n         }\r\n      }\r\n\r\n      let dc = this.__dataCollection;\r\n      if (dc) {\r\n         // clear cursor\r\n         if (itemId == null) {\r\n            dc.setCursor(null);\r\n         }\r\n         // If set rowId equal current cursor, it will not trigger .onAfterCursorChange event\r\n         else if (dc.getCursor() == itemId) {\r\n            this.emit(\"changeCursor\", this.getCursor());\r\n         }\r\n         // set new cursor\r\n         else if (dc.exists(itemId)) {\r\n            dc.setCursor(itemId);\r\n         }\r\n      }\r\n   }\r\n\r\n   /**\r\n    *\r\n    * @param {string|number} itemId - Id of item or Id of row data\r\n    */\r\n   setCursorTree(itemId) {\r\n      let tc = this.__treeCollection;\r\n      if (tc && tc.getCursor() != itemId) {\r\n         // If it is id of tree collection, then find row id of data\r\n         let treeCursor = tc.find({ id: itemId }, true);\r\n         if (treeCursor) {\r\n            tc.setCursor(itemId);\r\n         }\r\n         // If it is not id of tree collection, then find/set root of data\r\n         else {\r\n            let treeItem = tc.find({ _itemId: itemId, $parent: 0 }, true);\r\n            if (treeItem) tc.setCursor(treeItem.id);\r\n            else tc.setCursor(null);\r\n         }\r\n      }\r\n   }\r\n\r\n   getCursor(treeCursor = false) {\r\n      // Cursor of tree collection\r\n      if (treeCursor && this.__treeCollection) {\r\n         let currId = this.__treeCollection.getCursor();\r\n         if (currId) {\r\n            let currItem = this.__treeCollection.getItem(currId);\r\n\r\n            // filter current id for serialize\r\n            this.__treeCollection.filter(\r\n               (item) => item._itemId == currItem._itemId\r\n            );\r\n\r\n            // pull item with child items\r\n            let currItemAndChilds =\r\n               this.__treeCollection.serialize()[0] || null;\r\n\r\n            // refresh filter\r\n            this.refreshLinkCursor();\r\n\r\n            return currItemAndChilds;\r\n         }\r\n      }\r\n\r\n      let dc = this.__dataCollection;\r\n      if (dc == null) return null;\r\n\r\n      let currId = dc.getCursor();\r\n      let currItem = dc.getItem(currId);\r\n\r\n      return currItem;\r\n   }\r\n\r\n   getFirstRecord() {\r\n      var dc = this.__dataCollection;\r\n      if (dc == null) return null;\r\n\r\n      var currId = dc.getFirstId();\r\n      var currItem = dc.getItem(currId);\r\n\r\n      return currItem;\r\n   }\r\n\r\n   getNextRecord(record) {\r\n      var dc = this.__dataCollection;\r\n      if (dc == null) return null;\r\n\r\n      var currId = dc.getNextId(record.id);\r\n      var currItem = dc.getItem(currId);\r\n\r\n      return currItem;\r\n   }\r\n\r\n   /**\r\n    * @method refreshLinkCursor\r\n    *    If the data collection is bound to another and it is the child connection\r\n    *    it finds it's parents current set cursor and then filters its data\r\n    *    based off of the cursor.\r\n    */\r\n   refreshLinkCursor() {\r\n      // do not set the filter unless this dc is initialized \"dataStatusFlag==2\"\r\n      // if (this.dataStatus != this.dataStatusFlag.initialized) return;\r\n\r\n      // filter the data in the data collection\r\n      // using its parents current cursor because all the data in this child\r\n      // data collection has been loaded and the frontend can decide what is\r\n      // seen or not seen\r\n      let linkCursor;\r\n      let dvLink = this.datacollectionLink;\r\n      if (dvLink) {\r\n         linkCursor = dvLink.getCursor();\r\n      }\r\n\r\n      let filterData = (rowData) => {\r\n         // if link dc cursor is null, then show all data\r\n         if (linkCursor == null) return true;\r\n         else return this.isParentFilterValid(rowData);\r\n      };\r\n\r\n      if (this.__dataCollection) this.__dataCollection.filter(filterData);\r\n      if (this.__treeCollection) this.__treeCollection.filter(filterData);\r\n   }\r\n\r\n   setStaticCursor() {\r\n      if (this.settings.fixSelect) {\r\n         // set cursor to the current user\r\n         if (this.settings.fixSelect == \"_CurrentUser\") {\r\n            var username = this.currentUserUsername();\r\n            var userFields = this.datasource.fields((f) => f.key == \"user\");\r\n\r\n            // find a row that contains the current user\r\n            var row = this.__dataCollection.find((r) => {\r\n               var found = false;\r\n\r\n               userFields.forEach((f) => {\r\n                  if (found || r[f.columnName] == null) return;\r\n\r\n                  if (r[f.columnName].filter) {\r\n                     // Array - isMultiple\r\n                     found =\r\n                        r[f.columnName].filter((data) => data.id == username)\r\n                           .length > 0;\r\n                  } else if (r[f.columnName] == username) {\r\n                     found = true;\r\n                  }\r\n               });\r\n\r\n               return found;\r\n            }, true);\r\n\r\n            // set a first row of current user to cursor\r\n            if (row) {\r\n               this.__dataCollection.setCursor(row.id);\r\n\r\n               this.setCursorTree(row.id);\r\n            }\r\n         } else if (\r\n            this.settings.fixSelect == \"_FirstRecord\" ||\r\n            this.settings.fixSelect == \"_FirstRecordDefault\"\r\n         ) {\r\n            // // find a row that contains the current user\r\n            // var row = this.__dataCollection.find((r) => {\r\n\r\n            //  var found = false;\r\n            //  if (!found) {\r\n            //    found = true;\r\n            //    return true; // just give us the first record\r\n            //  }\r\n\r\n            // }, true);\r\n\r\n            // // set a first row of current user to cursor\r\n            // if (row)\r\n            //  this.__dataCollection.setCursor(row.id);\r\n\r\n            let currRowId = this.__dataCollection.getCursor();\r\n            if (\r\n               !currRowId ||\r\n               (currRowId && !this.__dataCollection.exists(currRowId))\r\n            ) {\r\n               // If current cursor is filtered by parent DC, then select new cursor\r\n\r\n               // set a first row to cursor\r\n               let rowId = this.__dataCollection.getFirstId();\r\n               // if (rowId) {\r\n               this.__dataCollection.setCursor(rowId || null);\r\n\r\n               this.setCursorTree(rowId);\r\n               // }\r\n            }\r\n         } else {\r\n            this.__dataCollection.setCursor(this.settings.fixSelect);\r\n\r\n            this.setCursorTree(this.settings.fixSelect);\r\n         }\r\n      }\r\n   }\r\n\r\n   ///\r\n   /// Data\r\n   ///\r\n\r\n   /**\r\n    * @method filterCondition()\r\n    * Provide a temporary filter condition to modify the data we are returning.\r\n    * Used by User search criterias.\r\n    * @param {json} cond\r\n    *        A valid QueryCondition to filter the response.\r\n    */\r\n   filterCondition(cond = null) {\r\n      this.__filterCond = cond;\r\n   }\r\n\r\n   init() {\r\n      // prevent initialize many times\r\n      if (this.initialized) return;\r\n      this.initialized = true;\r\n\r\n      if (!this.__dataCollection.___AD.onAfterCursorChange) {\r\n         this.__dataCollection.___AD.onAfterCursorChange = this.__dataCollection.attachEvent(\r\n            \"onAfterCursorChange\",\r\n            () => {\r\n               // debugger;\r\n               var currData = this.getCursor();\r\n\r\n               this.emit(\"changeCursor\", currData);\r\n            }\r\n         );\r\n      }\r\n\r\n      // relate data functions\r\n      let isRelated = (relateData, rowId, PK = \"id\") => {\r\n         if (Array.isArray(relateData)) {\r\n            return relateData.filter((v) => (v[PK] || v) == rowId).length > 0;\r\n         } else {\r\n            return relateData && (relateData[PK] || relateData) == rowId;\r\n         }\r\n      };\r\n\r\n      // events\r\n      this.on(\"ab.datacollection.create\", (data) => {\r\n         // debugger;\r\n         let obj = this.datasource;\r\n         if (!obj) return;\r\n\r\n         if (!data || !data.data) return;\r\n\r\n         let needAdd = false;\r\n         let updatedVals = [];\r\n\r\n         Promise.resolve()\r\n            .then(() => {\r\n               return new Promise((next, bad) => {\r\n                  // Query\r\n                  if (obj instanceof this.AB.Class.ABObjectQuery) {\r\n                     let objList =\r\n                        obj.objects((o) => o.id == data.objectId) || [];\r\n\r\n                     needAdd = objList.length > 0;\r\n\r\n                     if (!needAdd) return next();\r\n\r\n                     let where = {\r\n                        glue: \"or\",\r\n                        rules: [],\r\n                     };\r\n\r\n                     objList.forEach((o) => {\r\n                        let newDataId = data.data[`${o.PK()}`];\r\n                        if (!newDataId) return;\r\n\r\n                        where.rules.push({\r\n                           key: `${o.alias || obj.objectAlias(o.id)}.${o.PK()}`,\r\n                           rule: \"equals\",\r\n                           value: newDataId,\r\n                        });\r\n                     });\r\n\r\n                     obj.model()\r\n                        .findAll({\r\n                           where: where,\r\n                        })\r\n                        .then((newQueryData) => {\r\n                           updatedVals = newQueryData.data || [];\r\n                           updatedVals.forEach((v) => {\r\n                              delete v.id;\r\n                           });\r\n\r\n                           next();\r\n                        })\r\n                        .catch(bad);\r\n                  }\r\n                  // Object\r\n                  else {\r\n                     needAdd = obj.id == data.objectId;\r\n                     updatedVals = [data.data];\r\n                     next();\r\n                  }\r\n               });\r\n            })\r\n            .then(() => {\r\n               if (needAdd) {\r\n                  // normalize data before add to data collection\r\n                  var model = obj.model();\r\n                  model.normalizeData(updatedVals);\r\n\r\n                  (updatedVals || []).forEach((updatedV) => {\r\n                     // filter condition before add\r\n                     if (!this.isValidData(updatedV)) return;\r\n\r\n                     // check to see if item already exisits in data collection\r\n                     // and check to see that we are not loading the data serverside from cursor\r\n                     if (\r\n                        !this.__dataCollection.exists(\r\n                           updatedV[`${obj.PK()}`]\r\n                        ) &&\r\n                        !this.__reloadWheres\r\n                     ) {\r\n                        this.__dataCollection.add(updatedV, 0);\r\n                        this.emit(\"create\", updatedV);\r\n                        // this.__dataCollection.setCursor(rowData.id);\r\n                     } else if (\r\n                        !this.__dataCollection.exists(\r\n                           updatedV[`${obj.PK()}`]\r\n                        ) &&\r\n                        this.__reloadWheres\r\n                     ) {\r\n                        // debugger;\r\n                        if (this.isParentFilterValid(updatedV)) {\r\n                           // we track bound components and flexlayout components\r\n                           var attachedComponents = this.__bindComponentIds.concat(\r\n                              this.__flexComponentIds\r\n                           );\r\n                           attachedComponents.forEach((bcids) => {\r\n                              // if the reload button already exisits move on\r\n                              if ($$(bcids + \"_reloadView\")) {\r\n                                 return false;\r\n                              }\r\n\r\n                              // find the position of the data view\r\n                              var pos = 0;\r\n                              var parent = $$(bcids).getParentView();\r\n                              if ($$(bcids).getParentView().index) {\r\n                                 pos = $$(bcids)\r\n                                    .getParentView()\r\n                                    .index($$(bcids));\r\n                              } else if (\r\n                                 $$(bcids).getParentView().getParentView().index\r\n                              ) {\r\n                                 // this is a data view and it is inside a\r\n                                 // scroll view that is inside an accodion\r\n                                 // so we need to go deeper to add the button\r\n                                 parent = $$(bcids)\r\n                                    .getParentView()\r\n                                    .getParentView();\r\n                                 pos = $$(bcids)\r\n                                    .getParentView()\r\n                                    .getParentView()\r\n                                    .index($$(bcids).getParentView());\r\n                              }\r\n\r\n                              // store the datacollection so we can pass it to the button later\r\n                              var DC = this;\r\n                              // add a button that reloads the view when clicked\r\n                              if (parent.addView) {\r\n                                 var L = this.AB.Label();\r\n                                 parent.addView(\r\n                                    {\r\n                                       id: bcids + \"_reloadView\",\r\n                                       view: \"button\",\r\n                                       value: L(\r\n                                          \"New data available. Click to reload.\"\r\n                                       ),\r\n                                       css: \"webix_primary webix_warn\",\r\n                                       click: function (id, event) {\r\n                                          DC.reloadData();\r\n                                          $$(id).getParentView().removeView(id);\r\n                                       },\r\n                                    },\r\n                                    pos\r\n                                 );\r\n                              }\r\n                           });\r\n                           // this.emit(\"create\", updatedV);\r\n                        }\r\n                     }\r\n                  });\r\n\r\n                  if (\r\n                     this.__treeCollection // && this.__treeCollection.exists(updatedVals.id)\r\n                  ) {\r\n                     this.parseTreeCollection({\r\n                        data: updatedVals,\r\n                     });\r\n                  }\r\n               }\r\n\r\n               // ABObject only\r\n               if (!(obj instanceof this.AB.Class.ABObjectQuery)) {\r\n                  // if it is a linked object\r\n                  let connectedFields = this.datasource.connectFields(\r\n                     (f) =>\r\n                        f.datasourceLink && f.datasourceLink.id == data.objectId\r\n                  );\r\n\r\n                  // It should always be only one item for ABObject\r\n                  updatedVals = updatedVals[0];\r\n\r\n                  // update relation data\r\n                  if (\r\n                     updatedVals &&\r\n                     connectedFields &&\r\n                     connectedFields.length > 0\r\n                  ) {\r\n                     // various PK name\r\n                     let PK = connectedFields[0].object.PK();\r\n                     if (!updatedVals.id && PK != \"id\")\r\n                        updatedVals.id = updatedVals[PK];\r\n\r\n                     this.__dataCollection.find({}).forEach((d) => {\r\n                        let updateItemData = {};\r\n\r\n                        connectedFields.forEach((f) => {\r\n                           var updateRelateVal = {};\r\n                           if (f && f.fieldLink) {\r\n                              updateRelateVal =\r\n                                 updatedVals[f.fieldLink.relationName()] || {};\r\n                           }\r\n\r\n                           let rowRelateVal = d[f.relationName()] || {};\r\n\r\n                           let valIsRelated = isRelated(\r\n                              updateRelateVal,\r\n                              d.id,\r\n                              PK\r\n                           );\r\n\r\n                           // Relate data\r\n                           if (\r\n                              Array.isArray(rowRelateVal) &&\r\n                              rowRelateVal.filter(\r\n                                 (v) =>\r\n                                    v == updatedVals.id ||\r\n                                    v.id == updatedVals.id ||\r\n                                    v[PK] == updatedVals.id\r\n                              ).length < 1 &&\r\n                              valIsRelated\r\n                           ) {\r\n                              rowRelateVal.push(updatedVals);\r\n\r\n                              updateItemData[f.relationName()] = rowRelateVal;\r\n                              updateItemData[f.columnName] = updateItemData[\r\n                                 f.relationName()\r\n                              ].map((v) => v.id || v[PK] || v);\r\n                           } else if (\r\n                              !Array.isArray(rowRelateVal) &&\r\n                              (rowRelateVal != updatedVals.id ||\r\n                                 rowRelateVal.id != updatedVals.id ||\r\n                                 rowRelateVal[PK] != updatedVals.id) &&\r\n                              valIsRelated\r\n                           ) {\r\n                              updateItemData[f.relationName()] = updatedVals;\r\n                              updateItemData[f.columnName] =\r\n                                 updatedVals.id || updatedVals;\r\n                           }\r\n                        });\r\n\r\n                        // If this item needs to update\r\n                        if (Object.keys(updateItemData).length > 0) {\r\n                           // normalize data before add to data collection\r\n                           var model = obj.model();\r\n                           model.normalizeData(updateItemData);\r\n\r\n                           this.__dataCollection.updateItem(\r\n                              d.id,\r\n                              updateItemData\r\n                           );\r\n\r\n                           if (this.__treeCollection)\r\n                              this.__treeCollection.updateItem(\r\n                                 d.id,\r\n                                 updateItemData\r\n                              );\r\n\r\n                           this.emit(\r\n                              \"update\",\r\n                              this.__dataCollection.getItem(d.id)\r\n                           );\r\n                        }\r\n                     });\r\n                  }\r\n               }\r\n\r\n               // filter link data collection's cursor\r\n               this.refreshLinkCursor();\r\n               this.setStaticCursor();\r\n            });\r\n      });\r\n\r\n      this.on(\"ab.datacollection.update\", (data) => {\r\n         // {json} data\r\n         // incoming socket payload:\r\n         // data.objectId {string} uuid of the ABObject's row that was updated\r\n         // data.data {json} the new updated value of that row entry.\r\n\r\n         // debugger;\r\n         let obj = this.datasource;\r\n         if (!obj) return;\r\n\r\n         // updated values\r\n         let values = data.data;\r\n         if (!values) return;\r\n\r\n         let needUpdate = false;\r\n         let isExists = false;\r\n         let updatedIds = [];\r\n         // {array}\r\n         // an array of the row indexs in our DataCollection that have values\r\n         // that need to be updated.\r\n\r\n         let updatedTreeIds = [];\r\n         let updatedVals = {};\r\n\r\n         // Query\r\n         if (obj instanceof this.AB.Class.ABObjectQuery) {\r\n            let objList = obj.objects((o) => o.id == data.objectId) || [];\r\n            needUpdate = objList.length > 0;\r\n            if (needUpdate) {\r\n               (objList || []).forEach((o) => {\r\n                  updatedIds = updatedIds.concat(\r\n                     this.__dataCollection\r\n                        .find((item) => {\r\n                           return (\r\n                              item[\r\n                                 `${this.datasource.objectAlias(\r\n                                    o.id\r\n                                 )}.${o.PK()}`\r\n                              ] == (values[o.PK()] || values.id)\r\n                           );\r\n                        })\r\n                        .map((o) => o.id) || []\r\n                  );\r\n\r\n                  // grouped queries\r\n                  if (this.__treeCollection) {\r\n                     updatedTreeIds = updatedTreeIds.concat(\r\n                        this.__treeCollection\r\n                           .find((item) => {\r\n                              return (\r\n                                 item[\r\n                                    `${this.datasource.objectAlias(\r\n                                       o.id\r\n                                    )}.${o.PK()}`\r\n                                 ] == (values[o.PK()] || values.id)\r\n                              );\r\n                           })\r\n                           .map((o) => o.id) || []\r\n                     );\r\n                  }\r\n               });\r\n\r\n               isExists = updatedIds.length > 0;\r\n\r\n               updatedVals = this._queryUpdateData(objList, values);\r\n            }\r\n         }\r\n         // Object\r\n         else {\r\n            needUpdate = obj.id == data.objectId;\r\n            if (needUpdate) {\r\n               // various PK name\r\n               if (!values.id && obj.PK() != \"id\") values.id = values[obj.PK()];\r\n\r\n               updatedIds.push(values.id);\r\n\r\n               isExists = this.__dataCollection.exists(values.id);\r\n               updatedVals = values;\r\n            }\r\n         }\r\n\r\n         // if it is the source object\r\n         if (needUpdate) {\r\n            if (isExists) {\r\n               if (this.isValidData(updatedVals)) {\r\n                  // NOTE: this is now done in NetworkRestSocket before\r\n                  // we start the update events.\r\n                  // normalize data before update data collection\r\n                  // var model = obj.model();\r\n                  // model.normalizeData(updatedVals);\r\n\r\n                  if (this.__dataCollection) {\r\n                     updatedIds = this.AB.uniq(updatedIds);\r\n                     updatedIds.forEach((itemId) => {\r\n                        this.__dataCollection.updateItem(itemId, updatedVals);\r\n                     });\r\n                  }\r\n\r\n                  if (this.__treeCollection) {\r\n                     // update data in tree\r\n                     updatedTreeIds = this.AB.uniq(updatedTreeIds);\r\n                     updatedTreeIds.forEach((itemId) => {\r\n                        this.__treeCollection.updateItem(itemId, updatedVals);\r\n                     });\r\n                  }\r\n\r\n                  this.emit(\"update\", updatedVals);\r\n\r\n                  // If the update item is current cursor, then should tell components to update.\r\n                  let currData = this.getCursor();\r\n                  if (currData && currData.id == updatedVals.id) {\r\n                     this.emit(\"changeCursor\", currData);\r\n                  }\r\n               } else {\r\n                  // Johnny: Here we are simply removing the DataCollection Entries that are\r\n                  // no longer valid.\r\n                  // Just cycle through the collected updatedIds and remove them.\r\n                  updatedIds.forEach((id) => {\r\n                     // If the item is current cursor, then the current cursor should be cleared.\r\n                     let currData = this.getCursor();\r\n                     if (currData && currData.id == id)\r\n                        this.emit(\"changeCursor\", null);\r\n\r\n                     this.__dataCollection.remove(id);\r\n\r\n                     // TODO: update tree list\r\n                     // if (this.__treeCollection) {\r\n                     //  this.__treeCollection.remove(id);\r\n                     // }\r\n\r\n                     this.emit(\"delete\", id);\r\n                  });\r\n               }\r\n            }\r\n            // filter before add new record\r\n            else if (this.isValidData(updatedVals)) {\r\n               // this means the updated record was not loaded yet so we are adding it to the top of the grid\r\n               // the placement will probably change on the next load of the data\r\n               this.__dataCollection.add(updatedVals, 0);\r\n\r\n               if (this.__treeCollection)\r\n                  this.parseTreeCollection({\r\n                     data: [updatedVals],\r\n                  });\r\n\r\n               this.emit(\"create\", updatedVals);\r\n            }\r\n         }\r\n\r\n         // if it is a linked object\r\n         let connectedFields = obj.connectFields(\r\n            (f) => f.datasourceLink && f.datasourceLink.id == data.objectId\r\n         );\r\n\r\n         // update relation data\r\n         if (\r\n            obj instanceof this.AB.Class.ABObject &&\r\n            connectedFields &&\r\n            connectedFields.length > 0\r\n         ) {\r\n            // various PK name\r\n            let PK = connectedFields[0].object.PK();\r\n            if (!values.id && PK != \"id\") values.id = values[PK];\r\n\r\n            if (this.__dataCollection.count() > 0) {\r\n               this.__dataCollection.find({}).forEach((d) => {\r\n                  let updateItemData = {};\r\n\r\n                  connectedFields.forEach((f) => {\r\n                     if (!f) return;\r\n\r\n                     let updateRelateVal = {};\r\n                     let rowRelateVal = d[f.relationName()] || {};\r\n\r\n                     if (f.fieldLink)\r\n                        updateRelateVal =\r\n                           values[f.fieldLink.relationName()] || {};\r\n\r\n                     let valIsRelated = isRelated(updateRelateVal, d.id, PK);\r\n\r\n                     // Unrelate data\r\n                     if (\r\n                        Array.isArray(rowRelateVal) &&\r\n                        rowRelateVal.filter(\r\n                           (v) =>\r\n                              v == values.id ||\r\n                              v.id == values.id ||\r\n                              v[PK] == values.id\r\n                        ).length > 0 &&\r\n                        !valIsRelated\r\n                     ) {\r\n                        updateItemData[f.relationName()] = rowRelateVal.filter(\r\n                           (v) => (v.id || v[PK] || v) != values.id\r\n                        );\r\n                        updateItemData[f.columnName] = updateItemData[\r\n                           f.relationName()\r\n                        ].map((v) => v.id || v[PK] || v);\r\n                     } else if (\r\n                        !Array.isArray(rowRelateVal) &&\r\n                        (rowRelateVal == values.id ||\r\n                           rowRelateVal.id == values.id ||\r\n                           rowRelateVal[PK] == values.id) &&\r\n                        !valIsRelated\r\n                     ) {\r\n                        updateItemData[f.relationName()] = null;\r\n                        updateItemData[f.columnName] = null;\r\n                     }\r\n\r\n                     // Relate data or Update\r\n                     if (Array.isArray(rowRelateVal) && valIsRelated) {\r\n                        // update relate data\r\n                        if (\r\n                           rowRelateVal.filter(\r\n                              (v) =>\r\n                                 v == values.id ||\r\n                                 v.id == values.id ||\r\n                                 v[PK] == values.id\r\n                           ).length > 0\r\n                        ) {\r\n                           rowRelateVal.forEach((v, index) => {\r\n                              if (\r\n                                 v == values.id ||\r\n                                 v.id == values.id ||\r\n                                 v[PK] == values.id\r\n                              )\r\n                                 rowRelateVal[index] = values;\r\n                           });\r\n                        }\r\n                        // add new relate\r\n                        else {\r\n                           rowRelateVal.push(values);\r\n                        }\r\n\r\n                        updateItemData[f.relationName()] = rowRelateVal;\r\n                        updateItemData[f.columnName] = updateItemData[\r\n                           f.relationName()\r\n                        ].map((v) => v.id || v[PK] || v);\r\n                     } else if (\r\n                        !Array.isArray(rowRelateVal) &&\r\n                        (rowRelateVal != values.id ||\r\n                           rowRelateVal.id != values.id ||\r\n                           rowRelateVal[PK] != values.id) &&\r\n                        valIsRelated\r\n                     ) {\r\n                        updateItemData[f.relationName()] = values;\r\n                        updateItemData[f.columnName] = values.id || values;\r\n                     }\r\n                  });\r\n\r\n                  // If this item needs to update\r\n                  if (Object.keys(updateItemData).length > 0) {\r\n                     // normalize data before add to data collection\r\n                     var model = obj.model();\r\n                     model.normalizeData(updateItemData);\r\n                     if (\r\n                        this.__treeCollection &&\r\n                        this.__treeCollection.exists(d.id)\r\n                     )\r\n                        this.__treeCollection.updateItem(d.id, updateItemData);\r\n\r\n                     if (\r\n                        this.__dataCollection &&\r\n                        this.__dataCollection.exists(d.id)\r\n                     ) {\r\n                        this.__dataCollection.updateItem(d.id, updateItemData);\r\n                        this.emit(\r\n                           \"update\",\r\n                           this.__dataCollection.getItem(d.id)\r\n                        );\r\n                     }\r\n                  }\r\n               });\r\n            }\r\n         }\r\n\r\n         this.refreshLinkCursor();\r\n         this.setStaticCursor();\r\n      });\r\n\r\n      // We are subscribing to notifications from the server that an item may be stale and needs updating\r\n      // We will improve this later and verify that it needs updating before attempting the update on the client side\r\n      this.on(\"ab.datacollection.stale\", (data) => {\r\n         // debugger;\r\n         // if we don't have a datasource or model, there is nothing we can do here:\r\n         // Verify the datasource has the object we are listening for if not just stop here\r\n         if (\r\n            !this.datasource ||\r\n            !this.model ||\r\n            this.datasource.id != data.objectId\r\n         ) {\r\n            return;\r\n         }\r\n\r\n         // updated values\r\n         var values = data.data;\r\n\r\n         if (!values) return;\r\n\r\n         // use the Object's defined Primary Key:\r\n         var PK = this.model.object.PK();\r\n         if (!values[PK]) {\r\n            PK = \"id\";\r\n         }\r\n\r\n         if (values) {\r\n            if (this.__dataCollection.exists(values[PK])) {\r\n               var cond = { where: {} };\r\n               cond.where[PK] = values[PK];\r\n               // this data collection has the record so we need to query the server to find out what it's latest data is so we can update all instances\r\n               this.model.staleRefresh(cond).then((res) => {\r\n                  // check to make sure there is data to work with\r\n                  if (Array.isArray(res.data) && res.data.length) {\r\n                     // debugger;\r\n                     let obj = this.datasource;\r\n                     if (!obj) return;\r\n                     // normalize data before add to data collection\r\n                     var model = obj.model();\r\n                     model.normalizeData(res.data[0]);\r\n                     // tell the webix data collection to update using their API with the row id (values.id) and content (res.data[0])\r\n                     if (this.__dataCollection.exists(values[PK])) {\r\n                        this.__dataCollection.updateItem(\r\n                           values[PK],\r\n                           res.data[0]\r\n                        );\r\n                     }\r\n\r\n                     // If the update item is current cursor, then should tell components to update.\r\n                     var currData = this.getCursor();\r\n                     if (currData && currData[PK] == values[PK]) {\r\n                        this.emit(\"changeCursor\", currData);\r\n                     }\r\n                  } else {\r\n                     // If there is no data in the object then it was deleted...lets clean things up\r\n                     // If the deleted item is current cursor, then the current cursor should be cleared.\r\n                     var currId = this.getCursor();\r\n                     if (currId == values[PK]) this.emit(\"changeCursor\", null);\r\n\r\n                     this.__dataCollection.remove(values[PK]);\r\n                     this.emit(\"delete\", values[PK]);\r\n                  }\r\n               });\r\n            }\r\n         }\r\n\r\n         // filter link data collection's cursor\r\n         this.refreshLinkCursor();\r\n         this.setStaticCursor();\r\n      });\r\n\r\n      this.on(\"ab.datacollection.delete\", (data) => {\r\n         // debugger;\r\n         let obj = this.datasource;\r\n         if (!obj) return;\r\n\r\n         let deleteId = data.data;\r\n         let needDelete = false;\r\n         let deletedIds = [];\r\n         let deletedTreeIds = [];\r\n\r\n         // Query\r\n         if (obj instanceof this.AB.Class.ABObjectQuery) {\r\n            let objList = obj.objects((o) => o.id == data.objectId) || [];\r\n            needDelete = objList.length > 0;\r\n            if (needDelete) {\r\n               (objList || []).forEach((o) => {\r\n                  deletedIds =\r\n                     this.__dataCollection\r\n                        .find((item) => {\r\n                           return item[`${o.alias}.${o.PK()}`] == deleteId;\r\n                        })\r\n                        .map((o) => o.id) || [];\r\n\r\n                  // grouped queries\r\n                  if (this.__treeCollection) {\r\n                     deletedTreeIds =\r\n                        this.__treeCollection\r\n                           .find((item) => {\r\n                              return item[`${o.alias}.${o.PK()}`] == deleteId;\r\n                           })\r\n                           .map((o) => o.id) || [];\r\n                  }\r\n               });\r\n            }\r\n         }\r\n         // Object\r\n         else {\r\n            needDelete = obj.id == data.objectId;\r\n            if (needDelete) {\r\n               deletedIds.push(deleteId);\r\n            }\r\n         }\r\n\r\n         // if it is the source object\r\n         if (needDelete) {\r\n            // If the deleted item is current cursor, then the current cursor should be cleared.\r\n            var currData = this.getCursor();\r\n\r\n            deletedIds.forEach((delId) => {\r\n               if (currData && currData[obj.PK()] == delId)\r\n                  this.emit(\"changeCursor\", null);\r\n\r\n               if (this.__dataCollection.exists(delId))\r\n                  this.__dataCollection.remove(delId);\r\n            });\r\n\r\n            if (this.__treeCollection) {\r\n               deletedTreeIds.forEach((delId) => {\r\n                  if (this.__treeCollection.exists(delId))\r\n                     this.__treeCollection.remove(delId);\r\n               });\r\n            }\r\n\r\n            if (deletedIds[0]) this.emit(\"delete\", deletedIds[0]);\r\n         }\r\n\r\n         // if it is a linked object\r\n         let connectedFields = obj.connectFields(\r\n            (f) => f.datasourceLink && f.datasourceLink.id == data.objectId\r\n         );\r\n\r\n         // update relation data\r\n         if (\r\n            obj instanceof this.AB.Class.ABObject &&\r\n            connectedFields &&\r\n            connectedFields.length > 0\r\n         ) {\r\n            // various PK name\r\n            let PK = connectedFields[0].object.PK();\r\n\r\n            this.__dataCollection.find({}).forEach((d) => {\r\n               let updateRelateVals = {};\r\n\r\n               connectedFields.forEach((f) => {\r\n                  let relateVal = d[f.relationName()];\r\n                  if (relateVal == null) return;\r\n\r\n                  if (\r\n                     Array.isArray(relateVal) &&\r\n                     relateVal.filter(\r\n                        (v) =>\r\n                           v == deleteId ||\r\n                           v.id == deleteId ||\r\n                           v[PK] == deleteId\r\n                     ).length > 0\r\n                  ) {\r\n                     updateRelateVals[f.relationName()] = relateVal.filter(\r\n                        (v) => (v.id || v[PK] || v) != deleteId\r\n                     );\r\n                     updateRelateVals[f.columnName] = updateRelateVals[\r\n                        f.relationName()\r\n                     ].map((v) => v.id || v[PK] || v);\r\n                  } else if (\r\n                     relateVal == deleteId ||\r\n                     relateVal.id == deleteId ||\r\n                     relateVal[PK] == deleteId\r\n                  ) {\r\n                     updateRelateVals[f.relationName()] = null;\r\n                     updateRelateVals[f.columnName] = null;\r\n                  }\r\n               });\r\n\r\n               // If this item needs to update\r\n               if (Object.keys(updateRelateVals).length > 0) {\r\n                  // normalize data before add to data collection\r\n                  var model = obj.model();\r\n                  model.normalizeData(updateRelateVals);\r\n\r\n                  this.__dataCollection.updateItem(d.id, updateRelateVals);\r\n\r\n                  if (this.__treeCollection)\r\n                     this.__treeCollection.updateItem(d.id, updateRelateVals);\r\n\r\n                  this.emit(\"update\", this.__dataCollection.getItem(d.id));\r\n               }\r\n            });\r\n         }\r\n      });\r\n\r\n      // add listeners when cursor of link data collection is changed\r\n      let linkDv = this.datacollectionLink;\r\n      if (linkDv && this.settings.loadAll) {\r\n         this.eventAdd({\r\n            emitter: linkDv,\r\n            eventName: \"changeCursor\",\r\n            listener: () => {\r\n               this.refreshLinkCursor();\r\n               this.setStaticCursor();\r\n            },\r\n         });\r\n      }\r\n   }\r\n\r\n   /*\r\n    * waitForDataCollectionToInitialize()\r\n    * there are certain situations where this datacollection shouldn't\r\n    * load until another one has loaded.  In those cases, the fn()\r\n    * will wait for the required datacollection to emit \"initializedData\"\r\n    * before continuing on.\r\n    * @param {ABViewDataCollection} DC\r\n    *      the DC this datacollection depends on.\r\n    * @returns {Promise}\r\n    */\r\n   waitForDataCollectionToInitialize(DC, msg) {\r\n      return new Promise((resolve, reject) => {\r\n         switch (DC.dataStatus) {\r\n            // if that DC hasn't started initializing yet, start it!\r\n            case DC.dataStatusFlag.notInitial:\r\n               DC.loadData().catch(reject);\r\n            // no break;\r\n\r\n            // once in the process of initializing\r\n            /* eslint-disable no-fallthrough*/\r\n            case DC.dataStatusFlag.initializing:\r\n               /* eslint-enable no-fallthrough*/\r\n               // listen for \"initializedData\" event from the DC\r\n               // then we can continue.\r\n               this.eventAdd({\r\n                  emitter: DC,\r\n                  eventName: \"initializedData\",\r\n                  listener: () => {\r\n                     // go next\r\n                     resolve();\r\n                  },\r\n               });\r\n               break;\r\n\r\n            // if it is already initialized, we can continue:\r\n            case DC.dataStatusFlag.initialized:\r\n               resolve();\r\n               break;\r\n\r\n            // just in case, if the status is not known, just continue\r\n            default:\r\n               resolve();\r\n               break;\r\n         }\r\n      });\r\n   }\r\n\r\n   loadData(start, limit) {\r\n      // mark data status is initializing\r\n      if (this._dataStatus == this.dataStatusFlag.notInitial) {\r\n         this._dataStatus = this.dataStatusFlag.initializing;\r\n         this.emit(\"initializingData\", {});\r\n      }\r\n\r\n      var obj = this.datasource;\r\n      if (obj == null) {\r\n         this._dataStatus = this.dataStatusFlag.initialized;\r\n         return Promise.resolve([]);\r\n      }\r\n\r\n      var model = obj.model();\r\n      if (model == null) {\r\n         this._dataStatus = this.dataStatusFlag.initialized;\r\n         return Promise.resolve([]);\r\n      }\r\n\r\n      // pull the defined sort values\r\n      var sorts = this.settings.objectWorkspace.sortFields || [];\r\n\r\n      // pull filter conditions\r\n      var wheres = this.settings.objectWorkspace.filterConditions || null;\r\n      // if we pass new wheres with a reload use them instead\r\n      if (this.__reloadWheres) {\r\n         wheres = this.__reloadWheres;\r\n      }\r\n\r\n      if (this.__filterCond) {\r\n         if (wheres.rules.length) {\r\n            // combine them together:\r\n            wheres = {\r\n               glue: \"and\",\r\n               rules: [wheres, this.__filterCond],\r\n            };\r\n         } else {\r\n            // simplify to just use filterCond\r\n            wheres = this.__filterCond;\r\n         }\r\n      }\r\n\r\n      // set query condition\r\n      var cond = {\r\n         where: wheres || {},\r\n         // limit: limit || 20,\r\n         skip: start || 0,\r\n         sort: sorts,\r\n         populate: this.settings.preventPopulate ? false : true,\r\n      };\r\n\r\n      //// NOTE: we no longer set a default limit on loadData() but\r\n      //// require the platform.loadData() to pass in a default limit.\r\n      if (limit) {\r\n         cond.limit = limit;\r\n      }\r\n\r\n      // if settings specify loadAll, then remove the limit\r\n      if (this.settings.loadAll) {\r\n         delete cond.limit;\r\n      }\r\n\r\n      return (\r\n         Promise.resolve()\r\n            //\r\n            // Step 1: make sure any DataCollections we are linked to are\r\n            // initialized first.  Then proceed with our initialization.\r\n            //\r\n            .then(() => {\r\n               // If we are linked to another datacollection then wait for it\r\n               let linkDc = this.datacollectionLink;\r\n               if (!linkDc) return Promise.resolve(); // TODO: refactor in v2\r\n\r\n               return this.waitForDataCollectionToInitialize(linkDc);\r\n            })\r\n            //\r\n            // Step 2: if we have any filter rules that depend on other DataCollections,\r\n            // then wait for them to be initialized first.\r\n            // eg: \"(not_)in_data_collection\" rule filters\r\n            .then(() => {\r\n               return new Promise((resolve, reject) => {\r\n                  if (\r\n                     wheres == null ||\r\n                     wheres.rules == null ||\r\n                     !wheres.rules.length\r\n                  )\r\n                     return resolve();\r\n\r\n                  var dcFilters = [];\r\n\r\n                  wheres.rules.forEach((rule) => {\r\n                     // if this collection is filtered by data collections we need to load them in case we need to validate from them later\r\n                     if (\r\n                        rule.rule == \"in_data_collection\" ||\r\n                        rule.rule == \"not_in_data_collection\"\r\n                     ) {\r\n                        var dv = this.AB.datacollectionByID(rule.value);\r\n                        if (dv) {\r\n                           dcFilters.push(\r\n                              this.waitForDataCollectionToInitialize(dv)\r\n                           );\r\n                        }\r\n                     }\r\n                  });\r\n\r\n                  Promise.all(dcFilters)\r\n                     .then(() => {\r\n                        resolve();\r\n                     })\r\n                     .catch(reject);\r\n               });\r\n            })\r\n\r\n            // pull data to data collection\r\n            .then(() => {\r\n               return new Promise((resolve, reject) => {\r\n                  // we will keep track of the resolve, reject for this\r\n                  // operation.\r\n                  // the actual resolve() should happen in the\r\n                  // .processIncomingData() after the  data is processed.\r\n                  this._pendingLoadDataResolve = {\r\n                     resolve: resolve,\r\n                     reject: reject,\r\n                  };\r\n\r\n                  this.platformFind(model, cond).catch((err) => {\r\n                     reject(err);\r\n                  });\r\n               });\r\n            })\r\n      );\r\n   }\r\n\r\n   platformFind(model, cond) {\r\n      //// Core Migration Note:\r\n      //// the ABViewDataCollectionCore now manages data in a different way:\r\n      //// local data  vs  Remote Data\r\n      //// this will need to be updated to reflect that management:\r\n      //// (and also explains why we refactored things into .processIncomingData())\r\n      return model.findAll(cond).then((data) => {\r\n         return this.processIncomingData(data);\r\n      });\r\n   }\r\n\r\n   /**\r\n    * processIncomingData()\r\n    * is called from loadData() once the data is returned.  This method\r\n    * allows the platform to make adjustments to the data based upon any\r\n    * platform defined criteria.\r\n    * @param {obj} data  the data as it was returned from the Server\r\n    *        which should be in following format:\r\n    *        {\r\n    *          status: \"success\", // or \"error\"\r\n    *          data:[ {ABObjectData}, {ABObjectData}, ...]\r\n    *        }\r\n    */\r\n   processIncomingData(data) {\r\n      return Promise.resolve().then(() => {\r\n         // store total count\r\n         this.__totalCount = data.total_count;\r\n         // In order to get the total_count updated I had to use .load()\r\n         queueOperation(() => {\r\n            this.__dataCollection.load(() => {\r\n               // If this dc loads all, then it has to filter data by the parent dc\r\n               if (this.settings.loadAll) {\r\n                  setTimeout(() => {\r\n                     this.refreshLinkCursor();\r\n                  }, 250);\r\n               }\r\n\r\n               return data;\r\n            });\r\n         }, 5);\r\n\r\n         // In order to keep detail and graphs loading properly I had to keep .parse()\r\n         queueOperation(() => {\r\n            this.__dataCollection.parse(data);\r\n         }, 50);\r\n\r\n         // this does nothing???\r\n         this.parseTreeCollection(data);\r\n\r\n         queueOperation(() => {\r\n            // if we are linked, then refresh our cursor\r\n            var linkDv = this.datacollectionLink;\r\n            if (linkDv) {\r\n               // filter data by match link data collection\r\n               this.refreshLinkCursor();\r\n               this.setStaticCursor();\r\n            } else {\r\n               // set static cursor\r\n               this.setStaticCursor();\r\n            }\r\n         }, 5);\r\n         queueOperation(() => {\r\n            // mark initialized data\r\n            if (this._dataStatus != this.dataStatusFlag.initialized) {\r\n               this._dataStatus = this.dataStatusFlag.initialized;\r\n               this.emit(\"initializedData\", {});\r\n            }\r\n         }, 20);\r\n         queueOperation(() => {\r\n            // If dc set load all, then it will not trigger .loadData in dc at\r\n            // .onAfterLoad event\r\n            if (this.settings.loadAll) {\r\n               this.emit(\"loadData\", {});\r\n            }\r\n         }, 10);\r\n         queueOperation(() => {\r\n            // now we close out our .loadData() promise.resolve() :\r\n            if (this._pendingLoadDataResolve) {\r\n               this._pendingLoadDataResolve.resolve();\r\n\r\n               // after we call .resolve() stop tracking this:\r\n               this._pendingLoadDataResolve = null;\r\n            }\r\n         }, 5);\r\n      });\r\n   }\r\n\r\n   /**\r\n    * @method reloadData()\r\n    * Trigger the DataCollection to reload its data from the server.\r\n    * @param {int} start\r\n    *        Start position of where we want the data to load.\r\n    * @param {int} limit\r\n    *        How many entries to load at a time.\r\n    * @return {Promise}\r\n    */\r\n   reloadData(start, limit) {\r\n      // var waitForDataCollectionToInitialize = (DC) => {\r\n      //    return new Promise((resolve, reject) => {\r\n      //       switch (DC.dataStatus) {\r\n      //          // if that DC hasn't started initializing yet, start it!\r\n      //          case DC.dataStatusFlag.notInitial:\r\n      //             DC.loadData().catch(reject);\r\n      //          // no break;\r\n\r\n      //          // once in the process of initializing\r\n      //          /* eslint-disable no-fallthrough*/\r\n      //          case DC.dataStatusFlag.initializing:\r\n      //             /* eslint-enable no-fallthrough*/\r\n      //             // listen for \"initializedData\" event from the DC\r\n      //             // then we can continue.\r\n      //             this.eventAdd({\r\n      //                emitter: DC,\r\n      //                eventName: \"initializedData\",\r\n      //                listener: () => {\r\n      //                   // go next\r\n      //                   resolve();\r\n      //                },\r\n      //             });\r\n      //             break;\r\n\r\n      //          // if it is already initialized, we can continue:\r\n      //          case DC.dataStatusFlag.initialized:\r\n      //             resolve();\r\n      //             break;\r\n\r\n      //          // just in case, if the status is not known, just continue\r\n      //          default:\r\n      //             resolve();\r\n      //             break;\r\n      //       }\r\n      //    });\r\n      // };\r\n\r\n      return Promise.resolve().then(() => {\r\n         // check if we are currently waiting for more data requests on this datacollection before continuing\r\n         if (this.reloadTimer) {\r\n            // if we are already waiting delete the current timer\r\n            clearTimeout(this.reloadTimer);\r\n            delete this.reloadTimer;\r\n         }\r\n\r\n         // return a promise\r\n         if (!this.reloadPromise) {\r\n            this.reloadPromise = new Promise((resolve, reject) => {\r\n               this.reloadPromise__resolve = resolve;\r\n               this.reloadPromise__reject = reject;\r\n            });\r\n         }\r\n\r\n         // then create a new timeout to delete current timeout, clear data\r\n         // and load new\r\n         this.reloadTimer = setTimeout(() => {\r\n            // clear the data from the dataCollection,\r\n            this.clearAll();\r\n            // then loads new data from the server\r\n            return this.loadData(start, limit)\r\n               .then(() => {\r\n                  if (this.reloadPromise) {\r\n                     this.reloadPromise__resolve();\r\n                     delete this.reloadPromise;\r\n                     delete this.reloadPromise__resolve;\r\n                     delete this.reloadPromise__reject;\r\n                  }\r\n\r\n                  // delete the current setTimeout\r\n                  clearTimeout(this.reloadTimer);\r\n                  delete this.reloadTimer;\r\n               })\r\n               .catch((err) => {\r\n                  if (this.reloadPromise) {\r\n                     this.reloadPromise__reject(err);\r\n                     delete this.reloadPromise;\r\n                     delete this.reloadPromise__resolve;\r\n                     delete this.reloadPromise__reject;\r\n                  }\r\n                  // delete the current setTimeout\r\n                  clearTimeout(this.reloadTimer);\r\n                  delete this.reloadTimer;\r\n               });\r\n         }, 50);\r\n         // setting to 50ms because right now we do not see many\r\n         // concurrent calls,  we need to increase this if we begin to\r\n\r\n         return this.reloadPromise;\r\n      });\r\n   }\r\n\r\n   /**\r\n    * reloadWheres()\r\n    * stores the child data collections filters for subsequent loads.\r\n    * It is called from bindParentDc() when child data collections that are not\r\n    * marked to load all data are initializing. To do this we use webix\r\n    * server side binding by setting the param of \"dataFeed\".\r\n    * @param {obj} wheres  the new filters for the data collection\r\n    *        This is a combination of any exisiting filters the data collection\r\n    *        alreay had as well as the filter for the current cursor set by the\r\n    *        master data collection. We store this in __reloadWheres for when\r\n    *        the data needs to be updated.\r\n    *        The format of the wheres is our Query Builder Format\r\n    *        ex: {\r\n    *              \"glue\": \"and\",\r\n    *              \"rules\": [{\r\n    *                \"key\": \"33ba8957-6b9c-4ddb-9533-c46b13878ae1\",\r\n    *                \"rule\": \"contains\",\r\n    *                \"value\": \"1594176994894\"\r\n    *              }]\r\n    *            }\r\n    */\r\n   reloadWheres(wheres) {\r\n      this.__reloadWheres = wheres;\r\n   }\r\n\r\n   getData(filter) {\r\n      var dc = this.__dataCollection;\r\n      if (dc) {\r\n         return dc.find((row) => {\r\n            let isValid = true;\r\n\r\n            // data collection filter\r\n            // isValid = this.isValidData(row);\r\n\r\n            // NOTE: data are filtered from the server side (webix.dataFeed)\r\n            // parent dc filter\r\n            let linkDv = this.datacollectionLink;\r\n            if (linkDv && this.settings.loadAll && isValid) {\r\n               isValid = this.isParentFilterValid(row);\r\n            }\r\n\r\n            // addition filter\r\n            if (isValid && filter) {\r\n               isValid = filter(row);\r\n            }\r\n\r\n            return isValid;\r\n         });\r\n      } else {\r\n         return [];\r\n      }\r\n   }\r\n\r\n   isParentFilterValid(rowData) {\r\n      // data is empty\r\n      if (rowData == null) return null;\r\n\r\n      var linkDv = this.datacollectionLink;\r\n      if (linkDv == null) return true;\r\n\r\n      var fieldLink = this.fieldLink;\r\n      if (fieldLink == null) return true;\r\n\r\n      // if the parent's cursor is not set we have not filted this collection\r\n      // yet so the data that comes back should be valid\r\n      var linkCursor = linkDv.getCursor();\r\n      if (linkCursor == null) {\r\n         return true;\r\n      }\r\n\r\n      var linkVal = rowData[fieldLink.relationName()];\r\n      if (linkVal == null) {\r\n         // try to get relation value(id) again\r\n         if (rowData[fieldLink.columnName]) {\r\n            linkVal = rowData[fieldLink.columnName];\r\n         } else {\r\n            return false;\r\n         }\r\n      }\r\n\r\n      let PK = fieldLink.object.PK();\r\n\r\n      // array - 1:M , M:N\r\n      if (linkVal.filter) {\r\n         return (\r\n            linkVal.filter((val) => (val.id || val[PK] || val) == linkCursor.id)\r\n               .length > 0\r\n         );\r\n      } else {\r\n         return (linkVal.id || linkVal[PK] || linkVal) == linkCursor.id;\r\n      }\r\n   }\r\n\r\n   clearAll() {\r\n      if (this.__dataCollection) this.__dataCollection.clearAll();\r\n\r\n      if (this.__treeCollection) this.__treeCollection.clearAll();\r\n\r\n      this._dataStatus = this.dataStatusFlag.notInitial;\r\n   }\r\n\r\n   get totalCount() {\r\n      return this.__totalCount || 0;\r\n   }\r\n\r\n   ///\r\n   /// Components\r\n   ///\r\n\r\n   /**\r\n    * @method bind\r\n    * @param {Object} component - a webix element instance\r\n    */\r\n   bind(/* component */) {\r\n      console.error(\"Platform.ABDataCollection.bind() Not implemented\");\r\n   }\r\n\r\n   unbind(/* component */) {\r\n      console.error(\"Platform.ABDataCollection.unbind() Not implemented\");\r\n   }\r\n\r\n   removeComponent(comId) {\r\n      // get index\r\n      let index = this.__bindComponentIds.indexOf(comId);\r\n\r\n      // delete\r\n      this.__bindComponentIds.splice(index, 1);\r\n   }\r\n\r\n   /**\r\n    * @method refreshFilterConditions()\r\n    * This is called in two primary cases:\r\n    *    - on initialization of a DC to setup our filters.\r\n    *    - in the operation of the ABDesigner when using a DC to display data\r\n    *      in the Work_object_grid and the datacollection_work(?)\r\n    * In the case of the ABDesigner, new temporary where conditions are provided\r\n    * from the possible filters we can set, and those need to effect the data\r\n    * we display.\r\n    * @param {ABRowFilter.where} wheres\r\n    *        The filter condition from the ABRowFilter values we are storing.\r\n    */\r\n   refreshFilterConditions(wheres = null) {\r\n      // There are 3 Filters that help us know if our data is Valid:\r\n      // 1) A filter for any ABObjectQuery we are managing.\r\n      // 2) A filter for our own filter condition\r\n      // 3) A filter that represents what our scopes allows\r\n\r\n      // Set filter of ABObject\r\n      if (this.__filterDatasource == null)\r\n         this.__filterDatasource = this.AB.filterComplexNew(\r\n            `${this.id}_filterDatasource`\r\n         );\r\n\r\n      if (this.datasource) {\r\n         // this.__filterDatasource.applicationLoad(this.datasource.application);\r\n         this.__filterDatasource.fieldsLoad(this.datasource.fields());\r\n\r\n         let filterConditions;\r\n\r\n         // Query\r\n         if (this.datasource instanceof this.AB.Class.ABObjectQuery) {\r\n            filterConditions = this.datasource.where;\r\n         }\r\n         // Apr 29, 2021 Removed this because we do not want Object filters to\r\n         // effect validation of DataCollections\r\n         // Object\r\n\r\n         // else if (this.datasource instanceof ABObject) {\r\n         //    let currentView = this.datasource.currentView();\r\n         //    if (currentView && currentView.filterConditions)\r\n         //       filterConditions = currentView.filterConditions;\r\n         // }\r\n\r\n         if (filterConditions)\r\n            this.__filterDatasource.setValue(filterConditions);\r\n         else this.__filterDatasource.setValue({});\r\n      } else {\r\n         this.__filterDatasource.fieldsLoad([]);\r\n         this.__filterDatasource.setValue(\r\n            DefaultValues.settings.objectWorkspace.filterConditions\r\n         );\r\n      }\r\n\r\n      // Set filter of data view\r\n      // Apr 29, 2021 Added this code back to validate with DataCollection Filters\r\n      if (this.__filterDatacollection == null)\r\n         this.__filterDatacollection = this.AB.filterComplexNew(\r\n            `${this.id}_filterDatacollection`\r\n         );\r\n\r\n      // this.__filterDatacollection.applicationLoad(\r\n      //    this.datasource ? this.datasource.application : null\r\n      // );\r\n      this.__filterDatacollection.fieldsLoad(\r\n         this.datasource ? this.datasource.fields() : []\r\n      );\r\n\r\n      if (wheres) this.settings.objectWorkspace.filterConditions = wheres;\r\n\r\n      if (\r\n         this.settings &&\r\n         this.settings.objectWorkspace &&\r\n         this.settings.objectWorkspace.filterConditions\r\n      ) {\r\n         this.__filterDatacollection.setValue(\r\n            this.settings.objectWorkspace.filterConditions\r\n         );\r\n      } else {\r\n         this.__filterDatacollection.setValue(\r\n            DefaultValues.settings.objectWorkspace.filterConditions\r\n         );\r\n      }\r\n\r\n      // Set filter of user's scope\r\n      if (this.__filterScope == null)\r\n         this.__filterScope = this.AB.filterComplexNew(\r\n            `${this.id}_filterScope`\r\n         );\r\n\r\n      if (this.datasource) {\r\n         let scopeList = (this.userScopes || []).filter(\r\n            (s) =>\r\n               !s.allowAll &&\r\n               (s.objectIds || []).indexOf(this.datasource.id) > -1\r\n         );\r\n         if (scopeList && scopeList.length > 0) {\r\n            // this.__filterScope.applicationLoad(this.datasource.application);\r\n            this.__filterScope.fieldsLoad(this.datasource.fields() || []);\r\n\r\n            // concat all rules of scopes\r\n            let scopeRules = [];\r\n            scopeList\r\n               .filter(\r\n                  (s) => s.filter && s.filter.rules && s.filter.rules.length\r\n               )\r\n               .forEach((s) => {\r\n                  let sRules = (s.filter.rules || []).filter(\r\n                     (r) =>\r\n                        this.datasource.fields((f) => f.id == r.key).length > 0\r\n                  );\r\n\r\n                  scopeRules = scopeRules.concat(sRules);\r\n               });\r\n\r\n            let scopeWhere = {\r\n               glue: \"or\",\r\n               rules: scopeRules,\r\n            };\r\n            this.__filterScope.setValue(scopeWhere);\r\n         }\r\n      }\r\n   }\r\n\r\n   get isGroup() {\r\n      return this.__isGroup || false;\r\n   }\r\n\r\n   ///\r\n   /// Sync type\r\n   ///\r\n\r\n   get syncTypeFlag() {\r\n      return {\r\n         server: 1,\r\n         client: 2,\r\n      };\r\n   }\r\n\r\n   get syncType() {\r\n      return this.settings.syncType || DefaultValues.syncType;\r\n   }\r\n\r\n   /** Private methods */\r\n\r\n   /**\r\n    * @method _dataCollectionNew\r\n    * Get webix.DataCollection\r\n    *\r\n    * @return {webix.DataCollection}\r\n    *\r\n    * @param {Array} data - initial data\r\n    */\r\n   _dataCollectionNew(/*data*/) {\r\n      var error = new Error(\r\n         \"the platform.ABDataCollection._dataCollectionNew() is expected to return a proper DataCollection!\"\r\n      );\r\n      console.error(error);\r\n      return null;\r\n   }\r\n\r\n   /**\r\n    * @method _treeCollectionNew\r\n    * Get webix.TreeCollection\r\n    *\r\n    * @return {webix.TreeCollection}\r\n    *\r\n    */\r\n   _treeCollectionNew() {\r\n      console.error(\r\n         \"the platform.ABDataCollection._treeCollectionNew() is expected to return a proper TreeCollection!\"\r\n      );\r\n      return null;\r\n   }\r\n\r\n   parseTreeCollection(data = {}) {\r\n      // TODO all this does is log \"is missing?\"\r\n      if (data === {}) {\r\n         console.log(\r\n            \"Platform.ABDataCollection.parseTreeCollection() missing!\"\r\n         );\r\n      }\r\n   }\r\n   // parseTreeCollection(data = {}) {\r\n\r\n   //  if (!(this.__datasource instanceof ABObjectQuery) ||\r\n   //    !this.__datasource.isGroup ||\r\n   //    !this.__treeCollection)\r\n   //    return;\r\n\r\n   //  let addRowToTree = (join = {}, parentAlias = null) => {\r\n\r\n   //    let alias = join.alias;\r\n\r\n   //    (data.data || []).forEach(row => {\r\n\r\n   //      let dataId = row[`${alias}.uuid`] || row[`${alias}.id`];\r\n   //      if (!dataId) return;\r\n\r\n   //      // find parent nodes\r\n   //      let parentItemIds = [];\r\n   //      let parentId = row[`${parentAlias}.uuid`] || row[`${parentAlias}.id`];\r\n   //      if (parentId) {\r\n   //        parentItemIds = this.__treeCollection\r\n   //          .find(item => item._alias == parentAlias && item._dataId == parentId)\r\n   //          .map(item => item.id);\r\n   //      }\r\n\r\n   //      // check exists\r\n   //      let exists = this.__treeCollection.find(item => {\r\n   //        return item._alias == alias &&\r\n   //          item._dataId == dataId &&\r\n   //          (parentItemIds.length == 0 || parentItemIds.indexOf(item.$parent) > -1);\r\n   //      }, true);\r\n   //      if (exists) return;\r\n\r\n   //      let treeNode = {};\r\n   //      treeNode._alias = alias;\r\n   //      treeNode._dataId = dataId;\r\n   //      treeNode._itemId = row.id; // Keep row id for set cursor to data collection\r\n\r\n   //      Object.keys(row).forEach(propName => {\r\n\r\n   //        // Pull value from alias\r\n   //        if (propName.indexOf(`${alias}.`) == 0) {\r\n   //          treeNode[propName] = row[propName];\r\n   //        }\r\n\r\n   //      });\r\n\r\n   //      if (row.translations)\r\n   //        treeNode.translations = row.translations;\r\n\r\n   //      // child nodes\r\n   //      if (parentItemIds.length > 0)\r\n   //        parentItemIds.forEach(parentItemId => {\r\n   //          this.__treeCollection.add(treeNode, null, parentItemId);\r\n   //        });\r\n   //      // root node\r\n   //      else\r\n   //        this.__treeCollection.add(treeNode, null);\r\n\r\n   //    });\r\n\r\n   //    // Sub-joins\r\n   //    (join.links || []).forEach(link => {\r\n   //      addRowToTree(link, alias);\r\n   //    });\r\n\r\n   //  };\r\n\r\n   //  // Show loading cursor\r\n   //  (this.__bindComponentIds || []).forEach(comId => {\r\n\r\n   //    let boundComp = $$(comId);\r\n   //    if (boundComp &&\r\n   //      boundComp.showProgress)\r\n   //      boundComp.showProgress({ type: \"icon\" });\r\n\r\n   //  });\r\n\r\n   //  addRowToTree(this.__datasource.joins());\r\n\r\n   //  // Hide loading cursor\r\n   //  (this.__bindComponentIds || []).forEach(comId => {\r\n\r\n   //    let boundComp = $$(comId);\r\n   //    if (boundComp &&\r\n   //      boundComp.hideProgress)\r\n   //      boundComp.hideProgress();\r\n\r\n   //  })\r\n   // }\r\n\r\n   /**\r\n    * @method _queryUpdateData\r\n    *\r\n    * @param {Array} objList - List of ABObject\r\n    * @param {Object} values\r\n    */\r\n   _queryUpdateData(objList, values) {\r\n      let updatedVals = {};\r\n\r\n      // Add alias to properties of update data\r\n      Object.keys(values).forEach((key) => {\r\n         objList.forEach((oItem) => {\r\n            let alias = this.datasource.objectAlias(oItem.id);\r\n\r\n            updatedVals[`${alias}.${key}`] = values[key];\r\n\r\n            // Add alias to properties of .translations\r\n            if (\r\n               key == \"translations\" &&\r\n               values[\"translations\"] &&\r\n               values[\"translations\"].length\r\n            ) {\r\n               updatedVals.translations = [];\r\n\r\n               values[\"translations\"].forEach((tran) => {\r\n                  let updatedTran = {};\r\n\r\n                  Object.keys(tran).forEach((tranKey) => {\r\n                     if (tranKey == \"language_code\")\r\n                        updatedTran[\"language_code\"] = tran[\"language_code\"];\r\n                     else updatedTran[`${alias}.${tranKey}`] = tran[tranKey];\r\n                  });\r\n\r\n                  updatedVals.translations.push(updatedTran);\r\n               });\r\n            }\r\n         });\r\n      });\r\n\r\n      return updatedVals;\r\n   }\r\n\r\n   isValidData(rowData) {\r\n      let result = true;\r\n\r\n      // NOTE: should we use filter of the current view of object to filter\r\n      //        if yes, update .wheres condition in .loadData too\r\n      if (this.__filterDatasource)\r\n         result = result && this.__filterDatasource.isValid(rowData);\r\n\r\n      if (this.__filterDatacollection)\r\n         result = result && this.__filterDatacollection.isValid(rowData);\r\n\r\n      if (result && this.__filterScope)\r\n         result = result && this.__filterScope.isValid(rowData);\r\n\r\n      return result;\r\n   }\r\n\r\n   // Clone\r\n\r\n   clone(settings) {\r\n      settings = settings || this.toObj();\r\n      var clonedDatacollection = new this.constructor(settings, this.AB);\r\n      clonedDatacollection.__datasource = this.__datasource;\r\n      clonedDatacollection._dataStatus = this._dataStatus;\r\n\r\n      // clonedDatacollection.__dataCollection = this.__dataCollection.copy();\r\n      clonedDatacollection.__filterDatacollection.setValue(\r\n         settings.settings.objectWorkspace.filterConditions\r\n      );\r\n\r\n      var parseMe = () => {\r\n         if (clonedDatacollection.__dataCollection) {\r\n            clonedDatacollection.__dataCollection.parse(\r\n               this.__dataCollection\r\n                  .find({})\r\n                  .filter((row) =>\r\n                     clonedDatacollection.__filterDatacollection.isValid(row)\r\n                  )\r\n            );\r\n         }\r\n         if (clonedDatacollection.__treeCollection) {\r\n            clonedDatacollection.__treeCollection.parse(\r\n               this.__treeCollection\r\n                  .find({})\r\n                  .filter((row) =>\r\n                     clonedDatacollection.__filterDatacollection.isValid(row)\r\n                  )\r\n            );\r\n         }\r\n      };\r\n\r\n      parseMe();\r\n\r\n      // return new Promise((resolve, reject) => {\r\n      //    // load the data\r\n      //    clonedDatacollection\r\n      //       .loadData()\r\n      //       .then(() => {\r\n\r\n      // set the cursor\r\n      clonedDatacollection.setStaticCursor();\r\n\r\n      var cursorID = this.getCursor();\r\n      if (cursorID) {\r\n         // NOTE: webix documentation issue: .getCursor() is supposed to return\r\n         // the .id of the item.  However it seems to be returning the {obj}\r\n         if (cursorID.id) cursorID = cursorID.id;\r\n\r\n         clonedDatacollection.setCursor(cursorID);\r\n      }\r\n\r\n      return clonedDatacollection;\r\n\r\n      // resolve(clonedDatacollection);\r\n      //       })\r\n      //       .catch(reject);\r\n      // });\r\n   }\r\n\r\n   filteredClone(filters) {\r\n      var obj = this.toObj();\r\n\r\n      // check to see that filters are set (this is sometimes helpful to select the first record without doing so at the data collection level)\r\n      if (filters?.rules?.length) {\r\n         if (obj.settings.objectWorkspace.filterConditions?.rules?.length) {\r\n            obj.settings.objectWorkspace.filterConditions.rules = obj.settings.objectWorkspace.filterConditions.rules.concat(\r\n               filters.rules\r\n            );\r\n         } else {\r\n            obj.settings.objectWorkspace.filterConditions = filters;\r\n         }\r\n      }\r\n      let clonedDC = this.clone(obj);\r\n      return clonedDC; // new ABViewDataCollection(settings, this.application, this.parent);\r\n   }\r\n\r\n   //\r\n   // Event handles\r\n   //\r\n\r\n   /**\r\n    * @method eventAdd()\r\n    *\r\n    *\r\n    *\r\n    * @param {object} evt - {\r\n    *              emitter: object,\r\n    *              eventName: string,\r\n    *              listener: function\r\n    *            }\r\n    */\r\n   eventAdd(evt) {\r\n      if (!evt || !evt.emitter || !evt.listener) return;\r\n\r\n      this.__events = this.__events || [];\r\n\r\n      let exists = this.__events.find((e) => {\r\n         return e.emitter == evt.emitter && e.eventName == evt.eventName;\r\n         // && e.listener == evt.listener;\r\n      });\r\n\r\n      if (!exists || exists.length < 1) {\r\n         // add to array\r\n         this.__events.push({\r\n            emitter: evt.emitter,\r\n            eventName: evt.eventName,\r\n            listener: evt.listener,\r\n         });\r\n\r\n         // listening this event\r\n         evt.emitter.on(evt.eventName, evt.listener);\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method eventClear()\r\n    * unsubscribe all events.\r\n    * should do it before destroy a component\r\n    *\r\n    */\r\n   eventClear() {\r\n      if (this.__events && this.__events.length > 0) {\r\n         this.__events.forEach((e) => {\r\n            e.emitter.removeListener(e.eventName, e.listener);\r\n         });\r\n      }\r\n   }\r\n\r\n   get userScopes() {\r\n      return [];\r\n   }\r\n};\r\n","// import ABApplication from \"./ABApplication\"\r\n\r\nmodule.exports = class ABDefinitionCore {\r\n   constructor(attributes, AB) {\r\n      this.AB = AB;\r\n      this.fromValues(attributes);\r\n   }\r\n\r\n   ///\r\n   /// Static Methods\r\n   ///\r\n   /// Available to the Class level object.  These methods are not dependent\r\n   /// on the instance values of the Application.\r\n   ///\r\n\r\n   fromValues(attributes) {\r\n      /*\r\n\t\t{\r\n\t\t\tid: uuid(),\r\n\t\t\tname: 'name',\r\n\t\t\ttype: 'xxxxx',\r\n\t\t\tjson: \"{json}\"\r\n\t\t}\r\n\t\t*/\r\n      if (attributes.id) {\r\n         this.id = attributes.id;\r\n      }\r\n      this.name =\r\n         attributes?.name ||\r\n         attributes?.json?.name ||\r\n         attributes?.json?.label ||\r\n         attributes?.json?.translations?.[0]?.label ||\r\n         \"\";\r\n      if (!this.name) {\r\n         this.AB.notify.builder(\r\n            new Error(\"Attributes for definition had no 'name'\"),\r\n            {\r\n               context: \"ABDefinitionCore.fromValues()\",\r\n               attributes,\r\n            }\r\n         );\r\n      }\r\n      this.type = attributes.type || attributes?.json?.type || \"\";\r\n      this.json = attributes.json || null;\r\n   }\r\n\r\n   /**\r\n    * @method toObj()\r\n    *\r\n    * properly compile the current state of this ABApplication instance\r\n    * into the values needed for saving to the DB.\r\n    *\r\n    * Most of the instance data is stored in .json field, so be sure to\r\n    * update that from all the current values of our child fields.\r\n    *\r\n    * @return {json}\r\n    */\r\n   toObj() {\r\n      return {\r\n         id: this.id,\r\n         name: this.name,\r\n         type: this.type,\r\n         json: this.json,\r\n      };\r\n   }\r\n\r\n   /**\r\n    * @method destroy()\r\n    * destroy the current instance of ABDefinition\r\n    * Also remove it from our parent application\r\n    * @return {Promise}\r\n    */\r\n   destroy() {\r\n      return this.AB.definitionDestroy(this.id);\r\n   }\r\n\r\n   /**\r\n    * @method save()\r\n    * persist this instance of ABObject with it's parent ABApplication\r\n    * @return {Promise}\r\n    *         .resolve( {this} )\r\n    */\r\n   async save() {\r\n      if (this.id) {\r\n         return this.AB.definitionUpdate(this.id, this.toObj());\r\n      } else {\r\n         return this.AB.definitionCreate(this.toObj());\r\n      }\r\n   }\r\n};\r\n","/*\r\n * ABFactoryCore\r\n * an object that contains the definitions and references for a single tenant.\r\n * It is expected that an instance of this should be returned from an\r\n * ABBootstrap.init(req).then((AB)=>{}) call.\r\n */\r\n\r\n// const _ = require(\"lodash\");\r\n// const uuidv4 = require(\"uuid\");\r\n\r\nconst ABApplication = require(\"../platform/ABApplication\");\r\nconst ABDefinition = require(\"../platform/ABDefinition\");\r\n\r\nconst ABComponent = require(\"../platform/ABComponent\");\r\n\r\nconst ABFieldManager = require(\"./ABFieldManager\");\r\n\r\nconst ABIndex = require(\"../platform/ABIndex\");\r\nconst ABObject = require(\"../platform/ABObject\");\r\nconst ABObjectExternal = require(\"../platform/ABObjectExternal\");\r\nconst ABObjectImport = require(\"../platform/ABObjectImport\");\r\nconst ABDataCollection = require(\"../platform/ABDataCollection\");\r\nconst ABObjectQuery = require(\"../platform/ABObjectQuery\");\r\n\r\nconst ABProcess = require(\"../platform/ABProcess\");\r\n\r\nconst ABProcessParticipant = require(\"../platform/process/ABProcessParticipant\");\r\nconst ABProcessLane = require(\"../platform/process/ABProcessLane\");\r\nconst ABProcessTaskManager = require(\"./process/ABProcessTaskManager\");\r\n\r\nconst ABViewFormComponent = require(\"../platform/views/ABViewFormComponent\");\r\n\r\n// const ABObjectWorkspaceViewGrid = require(\"../platform/workspaceViews/ABObjectWorkspaceViewGrid\");\r\n// const ABObjectWorkspaceViewKanban = require(\"../platform/workspaceViews/ABObjectWorkspaceViewKanban\");\r\n// const ABObjectWorkspaceViewGantt = require(\"../platform/workspaceViews/ABObjectWorkspaceViewGantt\");\r\n\r\nconst RowFilter = require(\"../platform/RowFilter\");\r\nconst FilterComplex = require(\"../platform/FilterComplex\");\r\n\r\nconst ABMLClass = require(\"../platform/ABMLClass\");\r\n\r\nconst EventEmitter = require(\"../platform/ABEmitter\");\r\n\r\nclass ABFactory extends EventEmitter {\r\n   constructor(definitions) {\r\n      /**\r\n       * @param {hash} definitions\r\n       *        { ABDefinition.id : {ABDefinition} }\r\n       *        of all the definitions defined for the current Tenant\r\n       */\r\n\r\n      super();\r\n      this.setMaxListeners(0);\r\n\r\n      this._definitions = definitions || {};\r\n      // {hash}  { ABDefinition.id : {ABDefinition} }\r\n      // ensure ._definitions is a HASH{ ID : {ABDefinition}}\r\n      if (Array.isArray(definitions)) {\r\n         var hash = {};\r\n         definitions.forEach((d) => {\r\n            hash[d.id] = d;\r\n         });\r\n         this._definitions = hash;\r\n      }\r\n\r\n      //\r\n      //\r\n      // Manage our working objects\r\n      //\r\n\r\n      this._allApplications = [];\r\n      // {array} of all the ABApplication(s) in our site.\r\n\r\n      this._allObjects = [];\r\n      // {array} of all the ABObject(s) in our site.\r\n\r\n      this._allProcesses = [];\r\n      // {array} of all the ABProcess(s) in our site.\r\n\r\n      this._allQueries = [];\r\n      // {array} of all the ABObjectQuery(s) in our site.\r\n\r\n      this._allDatacollections = [];\r\n      // {array} of all the ABDataCollection(s) in our site.\r\n\r\n      //\r\n      // Class References\r\n      //\r\n      this.Class = {\r\n         ABApplication,\r\n         ABComponent,\r\n         ABDefinition,\r\n         ABFieldManager,\r\n         ABIndex,\r\n         ABMLClass,\r\n         ABObject,\r\n         ABObjectExternal,\r\n         ABObjectImport,\r\n         ABObjectQuery,\r\n         ABProcessParticipant,\r\n         // ABRole      // Do we need this anymore?\r\n\r\n         // ABObjectWorkspaceViewGrid,\r\n         // ABObjectWorkspaceViewKanban,\r\n         // ABObjectWorkspaceViewGantt,\r\n\r\n         ABProcessTaskManager,\r\n\r\n         ABViewFormComponent,\r\n      };\r\n\r\n      //\r\n      // Rules\r\n      // These are a common set of \"rules\" for all platforms.\r\n      //\r\n      this.rules = {\r\n         /**\r\n          * @method AB.rules.isUUID\r\n          * evaluate a given value to see if it matches the format of a uuid\r\n          * @param {string} key\r\n          * @return {boolean}\r\n          */\r\n         isUUID: function (key) {\r\n            var checker = RegExp(\r\n               \"^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\",\r\n               \"i\"\r\n            );\r\n            return checker.test(key);\r\n         },\r\n\r\n         /**\r\n          * @method AB.rules.nameFilter()\r\n          * return a properly formatted name for an AppBuilder object.\r\n          * @param {string} name\r\n          *        The name of the object we are conditioning.\r\n          * @return {string}\r\n          */\r\n         nameFilter: function (name) {\r\n            return String(name).replace(/[^a-z0-9_.]/gi, \"\");\r\n         },\r\n\r\n         /**\r\n          * @method AB.rules.toApplicationNameFormat()\r\n          * return a properly formatted Application Name\r\n          * @param {string} name\r\n          *        The name of the Application we are conditioning.\r\n          * @return {string}\r\n          */\r\n         toApplicationNameFormat: function (name) {\r\n            return \"AB_\" + this.nameFilter(name);\r\n         },\r\n\r\n         /**\r\n          * @method AB.rules.toFieldRelationFormat()\r\n          * This function uses for define relation name of Knex Objection\r\n          * return a relation name of column\r\n          * @param {string} colName\r\n          *        The name of the Column\r\n          * @return {string}\r\n          */\r\n         toFieldRelationFormat: function (colName) {\r\n            return this.nameFilter(colName) + \"__relation\";\r\n         },\r\n\r\n         /**\r\n          * @method AB.rules.toJunctionTableFK()\r\n          * return foriegnkey (FK) column name for a junction table name\r\n          * @param {string} objectName\r\n          *        The name of the Object with a connection\r\n          * @param {string} columnName\r\n          *        The name of the connection columnName.\r\n          * @return {string}\r\n          */\r\n         toJunctionTableFK: function (objectName, columnName) {\r\n            var fkName = objectName + \"_\" + columnName;\r\n\r\n            if (fkName.length > 64) fkName = fkName.substring(0, 64);\r\n\r\n            return fkName;\r\n         },\r\n\r\n         /**\r\n          * @method AB.rules.toJunctionTableNameFormat()\r\n          * return many-to-many junction table name\r\n          * @param {string} appName\r\n          *        The name of the Application for this object\r\n          * @param {string} sourceTableName\r\n          *        The name of the source object we are conditioning.\r\n          * @param {string} targetTableName\r\n          *        The name of the target object we are conditioning.\r\n          * @param {string} colName\r\n          * @return {string}\r\n          */\r\n         toJunctionTableNameFormat: function (\r\n            appName,\r\n            sourceTableName,\r\n            targetTableName,\r\n            colName\r\n         ) {\r\n            // The maximum length of a table name in MySql is 64 characters\r\n            appName = this.toApplicationNameFormat(appName);\r\n            if (appName.length > 17) appName = appName.substring(0, 17);\r\n\r\n            if (sourceTableName.length > 15)\r\n               sourceTableName = sourceTableName.substring(0, 15);\r\n\r\n            if (targetTableName.length > 15)\r\n               targetTableName = targetTableName.substring(0, 15);\r\n\r\n            colName = this.nameFilter(colName);\r\n            if (colName.length > 14) colName = colName.substring(0, 14);\r\n\r\n            return \"{appName}_{sourceName}_{targetName}_{colName}\"\r\n               .replace(\"{appName}\", appName)\r\n               .replace(\"{sourceName}\", sourceTableName)\r\n               .replace(\"{targetName}\", targetTableName)\r\n               .replace(\"{colName}\", colName);\r\n         },\r\n\r\n         /**\r\n          * @method AB.rules.toObjectNameFormat\r\n          * return a properly formatted Object/Table Name\r\n          * @param {string} objectName\r\n          *        The {ABObject}.name of the Object we are conditioning.\r\n          * @return {string}\r\n          */\r\n         toObjectNameFormat: function (objectName) {\r\n            return `AB_${this.nameFilter(objectName)}`;\r\n         },\r\n      };\r\n\r\n      // Notify Helpers\r\n      this.notify.builder = (...params) => {\r\n         this.notify(\"builder\", ...params);\r\n      };\r\n\r\n      this.notify.developer = (...params) => {\r\n         this.notify(\"developer\", ...params);\r\n      };\r\n   }\r\n\r\n   /**\r\n    * @method definitionClean()\r\n    * make sure the provided ABDefinition values are properly formatted\r\n    * @param {ABDefinition} d\r\n    *        The json settings of an ABDefinition object.\r\n    */\r\n   definitionClean(d) {\r\n      if (typeof d.json == \"string\") {\r\n         try {\r\n            d.json = JSON.parse(d.json);\r\n         } catch (e) {\r\n            console.log(e);\r\n            console.error(` Error on definition id[${d.id}]`);\r\n         }\r\n      }\r\n   }\r\n\r\n   init() {\r\n      let allDefinitions = Object.keys(this._definitions).map(\r\n         (k) => this._definitions[k]\r\n      );\r\n      // {array} all our definitions in an Array format.\r\n\r\n      // make sure our definitions.json field is an {} and not string\r\n      allDefinitions.forEach((d) => {\r\n         this.definitionClean(d);\r\n      });\r\n\r\n      // perform these in order:\r\n      [\"object\", \"query\", \"datacollection\", \"process\", \"application\"].forEach(\r\n         (type) => {\r\n            var objTypes = allDefinitions.filter((d) => d.type == type);\r\n            objTypes.forEach((def) => {\r\n               let { keyList, keyFn } = this.objectKeysByDef(def);\r\n               if (keyList) {\r\n                  this[keyList].push(this[keyFn](def.json));\r\n               }\r\n            });\r\n         }\r\n      );\r\n\r\n      this.emit(\"init.objects_ready\");\r\n      return Promise.resolve();\r\n   }\r\n\r\n   /**\r\n    * @method objectKeysByDef()\r\n    * Analyze the provided ABDefinition json and return which set of list and\r\n    * functions are used to create a new instance of this definition.\r\n    * @param {json} def\r\n    *        the ABDefinition json of the definition we are evaluating\r\n    * @return { keyList, keyFn }\r\n    *        keyList: {string}  which of our internal lists to store this new\r\n    *                 object.\r\n    *        keyFn: {string} which of our methods to call with the def.json\r\n    *               as the param that will create the new object.\r\n    *\r\n    *        ex:  this[keyList].push( this[keyFn](def.json));\r\n    *\r\n    *        if this def is not one of the types we track,\r\n    *        keyList = keyFn = null;\r\n    */\r\n   objectKeysByDef(def) {\r\n      switch (def.type) {\r\n         case \"application\":\r\n            return { keyList: \"_allApplications\", keyFn: \"applicationNew\" };\r\n\r\n         case \"datacollection\":\r\n            return {\r\n               keyList: \"_allDatacollections\",\r\n               keyFn: \"datacollectionNew\",\r\n            };\r\n\r\n         case \"object\":\r\n            return { keyList: \"_allObjects\", keyFn: \"objectNew\" };\r\n\r\n         case \"process\":\r\n            return { keyList: \"_allProcesses\", keyFn: \"processNew\" };\r\n\r\n         case \"query\":\r\n            return { keyList: \"_allQueries\", keyFn: \"queryNew\" };\r\n\r\n         default:\r\n            // we don't manage any other\r\n            return { keyList: null, keyFn: null };\r\n      }\r\n   }\r\n\r\n   //\r\n   // Definitions\r\n   //\r\n\r\n   /**\r\n    * definitionByID(id)\r\n    * return an ABDefinition.json value ready for our objects to use.\r\n    * @param {string} id\r\n    *        the uuid of the ABDefinition to delete\r\n    * @param {bool} isRaw\r\n    *        indicates if we want the full ABDefinition, or the .json param\r\n    *        true : returns full ABDefinition value.\r\n    *        false: returns the .json parameter used by most ABObjects.\r\n    * @return {Promise}\r\n    */\r\n   definitionByID(id, isRaw = false) {\r\n      if (this._definitions[id]) {\r\n         if (isRaw) {\r\n            return this._definitions[id];\r\n         } else {\r\n            return this._definitions[id].json;\r\n         }\r\n      }\r\n      return null;\r\n   }\r\n\r\n   /**\r\n    * definitionNew(values)\r\n    * return an ABDefinition object tied to this Tenant.\r\n    * @param {obj} values\r\n    *        The value hash of the ABDefinition object to create.\r\n    * @return {ABDefinition}\r\n    */\r\n   definitionNew(values) {\r\n      return new ABDefinition(values, this);\r\n   }\r\n\r\n   /**\r\n    * definitionsParse()\r\n    * include the incoming definitions into our ABFactory. These new\r\n    * definitions will replace any existing ones with the same .id.\r\n    * @param {array[ABDefinitioin]} defs\r\n    *     the incoming array of ABDefinitions to parse.\r\n    * @return {Promise}\r\n    */\r\n   definitionsParse(defs = []) {\r\n      if (!Array.isArray(defs)) {\r\n         defs = [defs];\r\n      }\r\n\r\n      // store/replace the incoming definitions\r\n      // 1st: insert ALL our definitions internally\r\n      defs.forEach((d) => {\r\n         this.definitionClean(d);\r\n         this._definitions[d.id] = d;\r\n      });\r\n      // 2nd: Now we can then go through and signal the \"updates\"\r\n      // and the related objects can find their dependent definitions.\r\n      defs.forEach((d) => {\r\n         this.definitionSync(\"updated\", d.id, d);\r\n      });\r\n\r\n      return Promise.resolve();\r\n   }\r\n\r\n   /**\r\n    * definitionSync()\r\n    * Synchronize an individual definition into our repository of definitions.\r\n    * @param {string} op\r\n    *        the type of synchronization this is\r\n    *        [ \"created\", \"updated\", \"destroyed\"]\r\n    * @param {uuid} id\r\n    *        the definition.id of the definition we are synchronizing\r\n    * @param {json} def\r\n    *        the ABDefinition attributes we are storing.\r\n    */\r\n   definitionSync(op, id, def) {\r\n      var { keyList, keyFn } = this.objectKeysByDef(def);\r\n      if (keyList) {\r\n         var curr;\r\n         switch (op) {\r\n            case \"created\":\r\n               this[keyList].push(this[keyFn](def.json));\r\n               this.emit(\"definition.created\", def.json);\r\n               break;\r\n\r\n            case \"updated\":\r\n               // get the current object\r\n               curr = this[keyList].find((d) => d.id == id);\r\n\r\n               // remove from list\r\n               this[keyList] = this[keyList].filter((d) => d.id != id);\r\n               // add new one:\r\n               this[keyList].push(this[keyFn](def.json));\r\n\r\n               // signal this object needs to be updated:\r\n               // NOTE: if this is one of the objects we are tracking,\r\n               // we don't need to this.emit() the message.\r\n               if (curr) {\r\n                  curr.emit(\"definition.updated\", def.json);\r\n               } else {\r\n                  this.emit(\"definition.updated\", def.json);\r\n               }\r\n               break;\r\n\r\n            case \"destroyed\":\r\n               // get the current object\r\n               curr = this[keyList].find((d) => d.id == id);\r\n               if (curr) {\r\n                  // remove from list\r\n                  this[keyList] = this[keyList].filter((d) => d.id != id);\r\n\r\n                  // signal this object needs to be updated:\r\n                  curr.emit(\"definition.deleted\", def.json);\r\n\r\n                  this.emit(\"definition.deleted\", def.json);\r\n               }\r\n               break;\r\n         }\r\n      }\r\n   }\r\n\r\n   //\r\n   // ABObjects\r\n   //\r\n   /**\r\n    * @method applications()\r\n    * return all the ABApplications that match the provided filter.\r\n    * @param {fn} fn\r\n    *        A filter function to select specific ABApplications.\r\n    *        Must return true to include the entry.\r\n    * @return {array}\r\n    */\r\n   applications(fn = () => true) {\r\n      return (this._allApplications || []).filter(fn);\r\n   }\r\n\r\n   /**\r\n    * @method applicationByID()\r\n    * returns a single ABApplication that matches the given ID.\r\n    * @param {string} ID\r\n    *        the .id/.name/.label of the ABApplication we are searching\r\n    *        for.\r\n    * @return {ABApplication}\r\n    *        the matching ABApplication object if found\r\n    *        {null} if not found.\r\n    */\r\n   applicationByID(ID) {\r\n      return this.applications((a) => a.id == ID)[0];\r\n   }\r\n\r\n   /**\r\n    * @method applicationNew()\r\n    * Return a new instance of an ABApplication object.\r\n    * @param {json} values\r\n    *        the ABDefinition.json of the ABApplication object we are\r\n    *        creating.\r\n    * @return {ABApplication}\r\n    */\r\n   applicationNew(values) {\r\n      return new ABApplication(values, this);\r\n   }\r\n\r\n   /**\r\n    * @method datacollections()\r\n    * return an array of all the ABDataCollection for this ABApplication.\r\n    * @param {fn} filter\r\n    *        a filter fn to return a set of ABDataCollection that\r\n    *        this fn returns true for.\r\n    * @return {array}\r\n    *        array of ABDataCollection\r\n    */\r\n   datacollections(filter = () => true) {\r\n      return (this._allDatacollections || []).filter(filter);\r\n   }\r\n\r\n   /**\r\n    * @method datacollectionByID()\r\n    * returns a single ABDatacollection that matches the given ID.\r\n    * @param {string} ID\r\n    *        the .id/.name/.label of the ABDatacollection we are searching\r\n    *        for.\r\n    * @return {ABDatacollection}\r\n    *        the matching ABDatacollection object if found\r\n    *        {null} if not found.\r\n    */\r\n   datacollectionByID(ID) {\r\n      // an undefined or null ID should not match any DC.\r\n      if (!ID) return null;\r\n\r\n      return this.datacollections((dc) => {\r\n         return dc.id == ID || dc.name == ID || dc.label == ID;\r\n      })[0];\r\n   }\r\n\r\n   /**\r\n    * @method datacollectionNew()\r\n    * create a new instance of ABDataCollection\r\n    * @param {obj} values\r\n    *        the initial values for the DC\r\n    * @return {ABDatacollection}\r\n    */\r\n   datacollectionNew(values) {\r\n      var dc = new ABDataCollection(values, this);\r\n      dc.on(\"destroyed\", () => {\r\n         // make sure it is no longer in our internal list\r\n         this._allDatacollections = this._allDatacollections.filter(\r\n            (d) => d.id != dc.id\r\n         );\r\n      });\r\n      return dc;\r\n   }\r\n\r\n   /**\r\n    * @method fieldNew()\r\n    * return an instance of a new (unsaved) ABField that is tied to a given\r\n    * ABObject.\r\n    * NOTE: this new field is not included in our this.fields until a .save()\r\n    * is performed on the field.\r\n    * @param {obj} values  the initial values for this field.\r\n    *                - { key:'{string}'} is required\r\n    * @param {ABObject} object  the parent object this field belongs to.\r\n    * @return {ABField}\r\n    */\r\n   fieldNew(values, object) {\r\n      // NOTE: ABFieldManager returns the proper ABFieldXXXX instance.\r\n      return ABFieldManager.newField(values, object);\r\n   }\r\n\r\n   /**\r\n    * @method indexNew()\r\n    * return an instance of a new (unsaved) ABIndex.\r\n    * @return {ABIndex}\r\n    */\r\n   indexNew(values, object) {\r\n      return new ABIndex(values, object);\r\n   }\r\n\r\n   /**\r\n    * @method Label()\r\n    * a simple label factory.\r\n    * It is expected to be called like this:\r\n    * @codestart\r\n    *    var L = AB.Label();\r\n    *    var outputText = L(\"Hello World\");\r\n    *    var o2 = L(\"I'm {0} years old\", [5]);\r\n    * @codeend\r\n    * @return {fn}\r\n    */\r\n   Label() {\r\n      return (key, altText, values = []) => {\r\n         var label = key;\r\n         if (altText) {\r\n            if (Array.isArray(altText)) {\r\n               values = altText;\r\n            } else {\r\n               label = altText;\r\n            }\r\n         }\r\n\r\n         values.forEach((v, i) => {\r\n            var sub = `{${i}}`;\r\n            label = label.replaceAll(sub, v);\r\n         });\r\n\r\n         return label;\r\n      };\r\n   }\r\n\r\n   /**\r\n    * @method objects()\r\n    * return an array of all the ABObjects for this ABApplication.\r\n    * @param {fn} filter\r\n    *        a filter fn to return a set of ABObjects that this fn\r\n    *        returns true for.\r\n    * @return {array}\r\n    *        array of ABObject\r\n    */\r\n   objects(filter = () => true) {\r\n      return (this._allObjects || []).filter(filter);\r\n   }\r\n\r\n   /**\r\n    * @method objectByID()\r\n    * return the specific object requested by the provided id.\r\n    * @param {string} ID\r\n    * @return {obj}\r\n    */\r\n   objectByID(ID) {\r\n      return this.objects((o) => {\r\n         return o.id == ID || o.name == ID || o.label == ID;\r\n      })[0];\r\n   }\r\n\r\n   /**\r\n    * @method objectNew()\r\n    * return an instance of a new (unsaved) ABObject that is tied to this\r\n    * ABApplication.\r\n    * NOTE: this new object is not included in our this.objects until a .save()\r\n    * is performed on the object.\r\n    * @return {ABObject}\r\n    */\r\n   objectNew(values) {\r\n      var newObj = null;\r\n\r\n      if (values.isExternal == true)\r\n         newObj = new ABObjectExternal(values, this);\r\n      else if (values.isImported == true)\r\n         newObj = new ABObjectImport(values, this);\r\n      else newObj = new ABObject(values, this);\r\n\r\n      /*\r\n      // IS THIS CORRECT?\r\n      newObj.on(\"destroyed\", () => {\r\n         // make sure it is no longer in our internal list\r\n         this._allObjects = this._allObjects.filter((o) => o.id != newObj.id);\r\n      });\r\n      */\r\n\r\n      return newObj;\r\n   }\r\n\r\n   objectFile() {\r\n      return this.objectByID(\"4a9d89c9-f4eb-41af-91e4-909eff389f3e\");\r\n   }\r\n\r\n   objectProcessForm() {\r\n      return this.objectByID(\"d36ae4c8-edef-48d8-bd9c-79a0edcaa067\");\r\n   }\r\n\r\n   objectProcessInstance() {\r\n      return this.objectByID(\"2ba85be0-78db-4eda-ba43-c2c4e3831849\");\r\n   }\r\n\r\n   objectRole() {\r\n      return this.objectByID(\"c33692f3-26b7-4af3-a02e-139fb519296d\");\r\n   }\r\n\r\n   objectScope() {\r\n      return this.objectByID(\"af10e37c-9b3a-4dc6-a52a-85d52320b659\");\r\n   }\r\n\r\n   objectToken() {\r\n      return this.objectByID(\"08826ac7-4b33-4745-a3d7-f7831ca4ff59\");\r\n   }\r\n\r\n   objectUser() {\r\n      return this.objectByID(\"228e3d91-5e42-49ec-b37c-59323ae433a1\");\r\n   }\r\n\r\n   //\r\n   // Processes\r\n   //\r\n   /**\r\n    * @method processes()\r\n    * return all the ABProcess that match the provided filter.\r\n    * @param {fn} fn\r\n    *        A filter function to select specific ABProcess.\r\n    *        Must return true to include the entry.\r\n    * @return {array}\r\n    */\r\n   processes(filter = () => true) {\r\n      return (this._allProcesses || []).filter(filter);\r\n   }\r\n\r\n   /**\r\n    * @method processByID()\r\n    * return the specific process requested by the provided id.\r\n    * @param {string} ID\r\n    * @return {obj}\r\n    */\r\n   processByID(ID) {\r\n      return this.processes((p) => {\r\n         return p.id == ID || p.name == ID || p.label == ID;\r\n      })[0];\r\n   }\r\n\r\n   /**\r\n    * @method processNew()\r\n    * Return a new instance of an ABProcess object.\r\n    * @param {json} values\r\n    *        the ABDefinition.json of the ABProcess object we are\r\n    *        creating.\r\n    * @return {ABProcess}\r\n    */\r\n   processNew(values) {\r\n      return new ABProcess(values, this);\r\n   }\r\n\r\n   /**\r\n    * @method processElementNew(id)\r\n    * return an instance of a new ABProcessOBJ that is tied to a given\r\n    * ABProcess.\r\n    * @param {string} id\r\n    *        the ABDefinition.id of the element we are creating\r\n    * @param {ABProcess} process\r\n    *        the process this task is a part of.\r\n    * @return {ABProcessTask}\r\n    */\r\n   processElementNew(id, process) {\r\n      var taskDef = this.definitionByID(id);\r\n      if (taskDef) {\r\n         switch (taskDef.type) {\r\n            case ABProcessParticipant.defaults().type:\r\n               return new ABProcessParticipant(taskDef, process, this);\r\n            // break;\r\n\r\n            case ABProcessLane.defaults().type:\r\n               return new ABProcessLane(taskDef, process, this);\r\n            // break;\r\n\r\n            default:\r\n               // default to a Task\r\n               return ABProcessTaskManager.newTask(taskDef, process, this);\r\n            // break;\r\n         }\r\n      }\r\n      return null;\r\n   }\r\n\r\n   /**\r\n    * @method processElementNewForModelDefinition(def)\r\n    *\r\n    * return an instance of a new ABProcess[OBJ] that is tied to the given\r\n    * BPMI:Element definition.\r\n    *\r\n    * @param {BPMI:Element} element the element definition from our BPMI\r\n    *              modler.\r\n    * @return {ABProcess[OBJ]}\r\n    */\r\n   processElementNewForModelDefinition(element, process) {\r\n      var newElement = null;\r\n\r\n      switch (element.type) {\r\n         case \"bpmn:Participant\":\r\n            newElement = new ABProcessParticipant({}, process, this);\r\n            break;\r\n\r\n         case \"bpmn:Lane\":\r\n            newElement = new ABProcessLane({}, process, this);\r\n            break;\r\n\r\n         default:\r\n            var defaultDef = ABProcessTaskManager.definitionForElement(element);\r\n            if (defaultDef) {\r\n               newElement = ABProcessTaskManager.newTask(\r\n                  defaultDef,\r\n                  process,\r\n                  this\r\n               );\r\n            }\r\n            break;\r\n      }\r\n\r\n      // now make sure this new Obj pulls any relevant info from the\r\n      // diagram element\r\n      if (newElement) {\r\n         newElement.fromElement(element);\r\n      }\r\n      return newElement;\r\n   }\r\n\r\n   /**\r\n    * @method queries()\r\n    * return an array of all the ABObjectQuery(s).\r\n    * @param {fn} filter\r\n    *        a filter fn to return a set of ABObjectQuery(s) that this fn\r\n    *        returns true for.\r\n    * @return {array}\r\n    *        array of ABObjectQuery\r\n    */\r\n   queries(filter = () => true) {\r\n      return (this._allQueries || []).filter(filter);\r\n   }\r\n   // queriesAll() {\r\n   //    console.error(\r\n   //       \"ABFactory.queriesAll() Depreciated! Use .queries() instead. \"\r\n   //    );\r\n   //    return this.queries();\r\n   // }\r\n\r\n   /**\r\n    * @method queryByID()\r\n    * return the specific query requested by the provided id.\r\n    * NOTE: this method has been extended to allow .name and .label\r\n    * as possible lookup values.\r\n    * @param {string} ID\r\n    * @return {ABObjectQuery}\r\n    */\r\n   queryByID(ID) {\r\n      return this.queries((q) => {\r\n         return q.id == ID || q.name == ID || q.label == ID;\r\n      })[0];\r\n   }\r\n\r\n   /**\r\n    * @method queryNew()\r\n    * return an instance of a new (unsaved) ABObjectQuery that is tied to this\r\n    * ABFactory.\r\n    * @return {ABObjectQuery}\r\n    */\r\n   queryNew(values) {\r\n      return new ABObjectQuery(values, this);\r\n   }\r\n\r\n   /**\r\n    * @method rowfilterNew()\r\n    * return an instance of a new RowFilter that is tied to this\r\n    * ABFactory.\r\n    * @return {RowFilter}\r\n    */\r\n   rowfilterNew(App, idBase) {\r\n      if (App) {\r\n         console.error(\"!! Who is calling this with an App?\");\r\n      }\r\n      return new RowFilter(App || this._App, idBase, this);\r\n   }\r\n\r\n   /**\r\n    * @method filterComplexNew()\r\n    * return an instance of a new FilterComplex that is tied to this\r\n    * ABFactory.\r\n    * @return {FilterComplex}\r\n    */\r\n   filterComplexNew(idBase) {\r\n      return new FilterComplex(idBase, this);\r\n   }\r\n\r\n   /**\r\n    * @method viewNewDetatched()\r\n    * Return an instance of a View that is NOT attached to an ABApplication.\r\n    * @return {ABViewXXX}\r\n    */\r\n   viewNewDetatched(values) {\r\n      if (!this._mockApp) {\r\n         this._mockApp = this.applicationNew({});\r\n      }\r\n      return this._mockApp.viewNew(values, this._mockApp);\r\n   }\r\n\r\n   //\r\n   // Utilities\r\n   //\r\n\r\n   /**\r\n    * notify()\r\n    * will send alerts to a group of people. These alerts are usually about\r\n    * configuration errors, or software problems.\r\n    * @param {string} domain\r\n    *     which group of people we are sending a notification to.\r\n    * @param {Error} error\r\n    *     An error object generated at the point of issue.\r\n    * @param {json} info\r\n    *     Additional related information concerning the issue.\r\n    */\r\n   notify(/* ...params */) {\r\n      console.error(\r\n         \"ABFactory.notify() is expected to be overwritten by the platform!\"\r\n      );\r\n   }\r\n\r\n   /**\r\n    * notifyInfo()\r\n    * a common routine to parse the info parameter provided to .notify() into\r\n    * a more detailed set of data.\r\n    * @param {json} info\r\n    * @return {json}\r\n    */\r\n   _notifyInfo(info) {\r\n      var moreInfo = {};\r\n\r\n      if (info) {\r\n         Object.keys(info).forEach((k) => {\r\n            switch (k) {\r\n               case \"field\":\r\n                  moreInfo.objectID = info[k].object.id;\r\n                  moreInfo.objectName = info[k].object.name;\r\n                  moreInfo.fieldID = info[k].id;\r\n                  moreInfo.fieldName = info[k].label || info[k].name;\r\n                  break;\r\n\r\n               case \"object\":\r\n                  moreInfo.objectID = info[k].id;\r\n                  moreInfo.objectName = info[k].name;\r\n                  break;\r\n\r\n               case \"datacollection\":\r\n                  moreInfo.datacollectionID = info[k].id;\r\n                  moreInfo.datacollectionName = info[k].label || info[k].name;\r\n                  var ds = info[k].datasource;\r\n                  if (ds) {\r\n                     moreInfo.datacollectionDSID = ds.id;\r\n                     moreInfo.datacollectionDSName = ds.name;\r\n                  }\r\n                  break;\r\n\r\n               case \"process\":\r\n                  moreInfo.processID = info[k].id;\r\n                  moreInfo.processName = info[k].label || info[k].name;\r\n                  break;\r\n\r\n               case \"req\":\r\n                  moreInfo.req = {\r\n                     jobID: info[k].jobID,\r\n                     tenantID: info[k]._tenantID,\r\n                     user: info[k]._user,\r\n                  };\r\n                  break;\r\n\r\n               case \"task\":\r\n                  if (info[k].process) {\r\n                     moreInfo.processID = info[k].process.id;\r\n                     moreInfo.processName =\r\n                        info[k].process.label || info[k].process.name;\r\n                  }\r\n                  moreInfo.taskID = info[k].id;\r\n                  moreInfo.taskName = info[k].label || info[k].name;\r\n                  break;\r\n\r\n               case \"view\":\r\n                  if (info[k].application) {\r\n                     moreInfo.applicationID = info[k].application.id;\r\n                     moreInfo.applicationName =\r\n                        info[k].application.label || info[k].application.name;\r\n                  }\r\n                  moreInfo.viewID = info[k].id;\r\n                  moreInfo.viewName = info[k].label || info[k].name;\r\n                  moreInfo.viewKey = info[k].key;\r\n                  break;\r\n               default:\r\n                  moreInfo[k] = info[k];\r\n                  break;\r\n            }\r\n         });\r\n      }\r\n\r\n      return moreInfo;\r\n   }\r\n}\r\n\r\nmodule.exports = ABFactory;\r\n","/*\r\n * ABFieldManager\r\n *\r\n * An interface for managing the different ABFields available in our AppBuilder.\r\n *\r\n */\r\n\r\n/*\r\n * Fields\r\n * A name => ABField  hash of the different ABFields available.\r\n */\r\nvar Fields = {};\r\n\r\nvar AllFieldClasses = [\r\n   require(\"../platform/dataFields/ABFieldString\"),\r\n   require(\"../platform/dataFields/ABFieldLongText\"),\r\n   require(\"../platform/dataFields/ABFieldNumber\"),\r\n   require(\"../platform/dataFields/ABFieldDate\"),\r\n   require(\"../platform/dataFields/ABFieldDateTime\"),\r\n   require(\"../platform/dataFields/ABFieldBoolean\"),\r\n   require(\"../platform/dataFields/ABFieldList\"),\r\n   require(\"../platform/dataFields/ABFieldTree\"),\r\n   require(\"../platform/dataFields/ABFieldEmail\"),\r\n   require(\"../platform/dataFields/ABFieldFile\"),\r\n   require(\"../platform/dataFields/ABFieldImage\"),\r\n   require(\"../platform/dataFields/ABFieldUser\"),\r\n   require(\"../platform/dataFields/ABFieldConnect\"),\r\n   require(\"../platform/dataFields/ABFieldCalculate\"),\r\n   require(\"../platform/dataFields/ABFieldTextFormula\"),\r\n   require(\"../platform/dataFields/ABFieldFormula\"),\r\n   require(\"../platform/dataFields/ABFieldAutoIndex\"),\r\n   require(\"../platform/dataFields/ABFieldJson\"),\r\n   require(\"../platform/dataFields/ABFieldCombine\"),\r\n   require(\"../platform/dataFields/ABFieldSelectivity\"),\r\n];\r\n\r\nAllFieldClasses.forEach((FIELD) => {\r\n   Fields[FIELD.defaults().key] = FIELD;\r\n});\r\n\r\nmodule.exports = class ABFieldManager {\r\n   /*\r\n    * @function allFields\r\n    * return all the currently defined ABFields in an array.\r\n    * @return [{ABField},...]\r\n    */\r\n   static allFields() {\r\n      var fields = [];\r\n      for (var f in Fields) {\r\n         fields.push(Fields[f]);\r\n      }\r\n      return fields;\r\n   }\r\n\r\n   /**\r\n    * @function fieldByKey()\r\n    * Return a specific ABField that matches the given key\r\n    * @param {string} key\r\n    *        The ABField.key value we are looking for.\r\n    * @return {ABFieldXXX || undefined}\r\n    */\r\n   static fieldByKey(key) {\r\n      return Fields[key];\r\n   }\r\n\r\n   /*\r\n    * @function newField\r\n    * return an instance of an ABField based upon the values.key value.\r\n    * @return {ABField}\r\n    */\r\n   static newField(values, object) {\r\n      if (values.key) {\r\n         try {\r\n            return new Fields[values.key](values, object);\r\n         } catch (err) {\r\n            console.log(\"Error\", err);\r\n            console.log(\"Available fields\", Fields);\r\n            console.log(\"Requested field\", values.key);\r\n         }\r\n      } else {\r\n         console.log(\"-------\");\r\n         console.log(\"values:\");\r\n         console.error(values);\r\n         console.log();\r\n         console.error(\"object:\");\r\n         console.error(object);\r\n         console.log(\"-------\");\r\n         throw new Error(\r\n            `ABFieldManager.newField(): Unknown Field Key [${values.name}][${values.key}] for object[${object.name}]`\r\n         );\r\n         //// TODO: what to do here?\r\n      }\r\n   }\r\n};\r\n","const ABMLClass = require(\"../platform/ABMLClass\");\r\n\r\nmodule.exports = class ABIndexCore extends ABMLClass {\r\n   constructor(attributes, object) {\r\n      super([\"label\"], object.AB);\r\n      this.object = object;\r\n\r\n      this.fromValues(attributes);\r\n   }\r\n\r\n   fromValues(attributes) {\r\n      /*\r\n      {\r\n        id: uuid(),\r\n        name: 'name',\r\n        fields:[\r\n            {ABDataField.id}\r\n        ],\r\n        unique: {boolean}\r\n      }\r\n      */\r\n      this.id = attributes.id;\r\n      this.type = \"index\";\r\n      this.name = attributes.name;\r\n      this.unique = JSON.parse(attributes.unique || false);\r\n\r\n      // Convert to an array\r\n      if (attributes.fieldIDs && !Array.isArray(attributes.fieldIDs)) {\r\n         attributes.fieldIDs = [attributes.fieldIDs];\r\n      }\r\n\r\n      this.fields = (attributes.fieldIDs || [])\r\n         .map((f) => {\r\n            let field = this.object.fieldByID(f);\r\n            if (!field) {\r\n               this.emit(\r\n                  \"warning\",\r\n                  `Index[${this.name}][${this.id}] is referencing an unknown field[${f}]`,\r\n                  {\r\n                     index: this.id,\r\n                     field: f,\r\n                  }\r\n               );\r\n            }\r\n            return field;\r\n         })\r\n         .filter((fId) => fId);\r\n\r\n      if (this.fields.length == 0) {\r\n         this.emit(\r\n            \"warning\",\r\n            `Index[${this.name}][${this.id}] is not referencing any fields`,\r\n            {\r\n               index: this.id,\r\n               attributeFieldIDs: attributes.fieldIDs || [],\r\n            }\r\n         );\r\n      }\r\n\r\n      // let the MLClass process the Translations\r\n      super.fromValues(attributes);\r\n   }\r\n\r\n   /**\r\n    * @method toObj()\r\n    *\r\n    * properly compile the current state of this ABApplication instance\r\n    * into the values needed for saving to the DB.\r\n    *\r\n    * Most of the instance data is stored in .json field, so be sure to\r\n    * update that from all the current values of our child fields.\r\n    *\r\n    * @return {json}\r\n    */\r\n   toObj() {\r\n      let result = super.toObj();\r\n\r\n      result.id = this.id;\r\n      result.type = \"index\";\r\n      result.name = this.name;\r\n      result.unique = this.unique;\r\n\r\n      // Convert to an array\r\n      if (this.fields && !Array.isArray(this.fields)) {\r\n         this.fields = [this.fields];\r\n      }\r\n\r\n      result.fieldIDs = (this.fields || [])\r\n         .map((f) => {\r\n            // Convert to the id of field\r\n            return f.id || f;\r\n         })\r\n         .filter((fId) => fId);\r\n\r\n      return result;\r\n   }\r\n\r\n   get indexName() {\r\n      let tableName = this.object.dbTableName();\r\n\r\n      // Maximum 64 characters long\r\n      return `${tableName}_${this.name}`.replace(/ /g, \"\").substring(0, 64);\r\n   }\r\n\r\n   get uniqueName() {\r\n      let indexName = this.indexName.substring(0, 57);\r\n\r\n      return `${indexName}_unique`;\r\n   }\r\n};\r\n","/**\r\n * ABMLClassCore\r\n * manage the multilingual information of an instance of a AB Defined Class.\r\n *\r\n * these classes have certain fields (\"label\", \"description\"), that can be\r\n * represented in different language options as defined by our platform.\r\n *\r\n * This core ABMLClass will internally track the multilingual fields\r\n * (this.mlFields) and auto\r\n */\r\nvar ABEmitter = require(\"../platform/ABEmitter\");\r\nmodule.exports = class ABMLClassCore extends ABEmitter {\r\n   constructor(fieldList, AB) {\r\n      super();\r\n      this.mlFields = fieldList || [\"label\"];\r\n      // {array}\r\n      // field names of values that are multilingual\r\n\r\n      this.AB = AB;\r\n      // {ABFactory}\r\n      // our common source of references for other AB objects\r\n   }\r\n\r\n   ///\r\n   /// Static Methods\r\n   ///\r\n   /// Available to the Class level object.  These methods are not dependent\r\n   /// on the instance values of the Application.\r\n   ///\r\n\r\n   /**\r\n    * @method fromValues\r\n    * called during the .fromValues() work chain.  Should be called\r\n    * AFTER all the current data is already populated.\r\n    */\r\n   fromValues(attributes) {\r\n      this.translations = attributes.translations;\r\n\r\n      // if translations were provided\r\n      if (this.translations) {\r\n         // multilingual fields: label, description\r\n         this.translate();\r\n      } else {\r\n         // maybe this came from a form that has ML values in the attributes, but\r\n         // no .translations[] yet:\r\n         // check for mlFields in attributes and record them here:\r\n         (this.mlFields || []).forEach((field) => {\r\n            if (attributes[field]) {\r\n               this[field] = attributes[field];\r\n            }\r\n         });\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @function defaultTranslations()\r\n    * return an initial .translations entry to initialize the\r\n    * translations values of a given translateable object.\r\n    * @param {array} fields  the multilingual fields this obj manages.\r\n    * @param {json}  values  a default set of values for this object.\r\n    * @return {array}  of translation entries.\r\n    */\r\n   defaultTranslations(fields, values) {\r\n      values = values || {};\r\n\r\n      var entry = {\r\n         // Question: should this be this.AB.Multilingual.currentLanguage() || \"en\"\r\n         // currently since the defaults are sent in programattically, we are\r\n         // expecting the labels to be in \"en\"\r\n         language_code: \"en\",\r\n      };\r\n\r\n      fields.forEach((f) => {\r\n         entry[f] = values[f] || f;\r\n      });\r\n\r\n      return [entry];\r\n   }\r\n\r\n   /**\r\n    * @method languageDefault\r\n    * return a default language code.\r\n    * @return {string}\r\n    */\r\n   languageDefault() {\r\n      return \"en\";\r\n   }\r\n\r\n   /**\r\n    * @method toObj()\r\n    * called during the .toObj() work chain.  Should be called\r\n    * BEFORE the current data is populated.\r\n    */\r\n   toObj() {\r\n      this.unTranslate();\r\n\r\n      return {\r\n         translations: this.translations,\r\n      };\r\n   }\r\n\r\n   /**\r\n    * @method toDefinition()\r\n    * convert this instance into an ABDefinition object.\r\n    * @return {ABDefinition}\r\n    */\r\n   toDefinition() {\r\n      return this.AB.definitionNew({\r\n         id: this.id,\r\n         name: this.name,\r\n         type: this.type,\r\n         json: this.toObj(),\r\n      });\r\n   }\r\n\r\n   /**\r\n    * @method translate\r\n    * Given a set of json data, pull out any multilingual translations\r\n    * and flatten those values to the base object.\r\n    * @param {obj} obj  The instance of the object being translated\r\n    * @param {json} json The json data being used for translation.\r\n    *                      There should be json.translations = [ {transEntry}, ...]\r\n    *                      where transEntry = {\r\n    *                          language_code:'en',\r\n    *                          field1:'value',\r\n    *                          ...\r\n    *                      }\r\n    * @param {array} fields an Array of multilingual fields to pull to\r\n    *                       the obj[field] value.\r\n    */\r\n   translate(obj, json, fields, languageCode = null) {\r\n      if (!obj) obj = this;\r\n      if (!json) json = this;\r\n      if (!fields) fields = this.mlFields || [];\r\n\r\n      if (!json.translations) {\r\n         json.translations = [];\r\n      }\r\n\r\n      if (typeof json.translations == \"string\") {\r\n         json.translations = JSON.parse(json.translations);\r\n      }\r\n\r\n      var currLanguage = languageCode || this.languageDefault();\r\n\r\n      if (fields && fields.length > 0) {\r\n         // [fix] if no matching translation is in our json.translations\r\n         //       object, then just use the 1st one.\r\n         var first = null; // the first translation entry encountered\r\n         var found = false; // did we find a matching translation?\r\n\r\n         json.translations.forEach(function (t) {\r\n            if (!first) first = t;\r\n\r\n            // find the translation for the current language code\r\n            if (t.language_code == currLanguage) {\r\n               found = true;\r\n\r\n               // copy each field to the root object\r\n               fields.forEach(function (f) {\r\n                  if (t[f] != null) obj[f] = t[f];\r\n\r\n                  obj[f] = t[f] || \"\"; // default to '' if not found.\r\n               });\r\n            }\r\n         });\r\n\r\n         // if !found, then use the 1st entry we did find.  prepend desired\r\n         // [language_code] to each of the fields.\r\n         if (!found && first) {\r\n            // copy each field to the root object\r\n            fields.forEach(function (f) {\r\n               if (first[f] != null && first[f] != \"\")\r\n                  obj[f] = `[${currLanguage}]${first[f]}`;\r\n               else obj[f] = \"\"; // default to '' if not found.\r\n            });\r\n         }\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method unTranslate\r\n    * Take the multilingual information in the base obj, and push that\r\n    * down into the json.translations data.\r\n    * @param {obj} obj  The instance of the object with the translation\r\n    * @param {json} json The json data being used for translation.\r\n    *                      There should be json.translations = [ {transEntry}, ...]\r\n    *                      where transEntry = {\r\n    *                          language_code:'en',\r\n    *                          field1:'value',\r\n    *                          ...\r\n    *                      }\r\n    * @param {array} fields an Array of multilingual fields to pull from\r\n    *                       the obj[field] value.\r\n    */\r\n   unTranslate(obj, json, fields) {\r\n      if (!obj) obj = this;\r\n      if (!json) json = this;\r\n      if (!fields) fields = this.mlFields || [];\r\n\r\n      if (!json.translations) {\r\n         json.translations = [];\r\n      }\r\n\r\n      var currLanguage = this.languageDefault();\r\n\r\n      if (fields && fields.length > 0) {\r\n         var foundOne = false;\r\n\r\n         json.translations.forEach(function (t) {\r\n            // find the translation for the current language code\r\n            if (t.language_code == currLanguage) {\r\n               // copy each field to the root object\r\n               fields.forEach(function (f) {\r\n                  // verify obj[f] is defined\r\n                  // --> DONT erase the existing translation\r\n                  if (obj[f] != null) {\r\n                     t[f] = obj[f];\r\n                  }\r\n               });\r\n\r\n               foundOne = true;\r\n            }\r\n         });\r\n\r\n         // if we didn't update an existing translation\r\n         if (!foundOne) {\r\n            // create a translation entry:\r\n            var trans = {};\r\n\r\n            // assume current languageCode:\r\n            trans.language_code = currLanguage;\r\n\r\n            fields.forEach(function (field) {\r\n               if (obj[field] != null) {\r\n                  trans[field] = obj[field];\r\n               }\r\n            });\r\n\r\n            json.translations.push(trans);\r\n         }\r\n      }\r\n   }\r\n};\r\n","//\r\n// ABModelCore\r\n//\r\n// Represents the Data interface for an ABObject data.\r\n//\r\n// to use an ABModel to load a DataTable:\r\n// Method 1:\r\n//  gather all the data externally and send to the DataTable\r\n//    Model.findAll()\r\n//    .then((data)=>{\r\n//      DataTable.parse(data);\r\n//    })\r\n//\r\n\r\nmodule.exports = class ABModelCore {\r\n   constructor(object) {\r\n      // link me to my ABObject\r\n      this.object = object;\r\n      this.AB = object.AB;\r\n\r\n      this._where = null;\r\n      this._sort = null;\r\n      this._skip = null;\r\n      this._limit = null;\r\n\r\n      this.staleRefreshInProcess = false;\r\n      this.staleRefreshMap = {\r\n         /* id : Promise */\r\n      };\r\n      this.staleRefreshPending = [];\r\n      this.staleRefreshTimerID = null;\r\n\r\n      // include this\r\n      this.responseContext = { key: \"--\", context: {} };\r\n   }\r\n\r\n   ///\r\n   /// Static Methods\r\n   ///\r\n   /// Available to the Class level object.  These methods are not dependent\r\n   /// on the instance values of the Application.\r\n   ///\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   contextKey(key) {\r\n      this.responseContext.key = key || \"--\";\r\n   }\r\n\r\n   contextValues(values) {\r\n      this.responseContext.context = values || {};\r\n   }\r\n\r\n   // Prepare multilingual fields to be untranslated\r\n   // Before untranslating we need to ensure that values.translations is set.\r\n   prepareMultilingualData(values) {\r\n      // if this object has some multilingual fields, translate the data:\r\n      var mlFields = this.object.multilingualFields();\r\n      // if mlFields are inside of the values saved we want to translate otherwise do not because it will reset the translation field and you may loose unchanged translations\r\n      var shouldTranslate = false;\r\n      if (mlFields.length) {\r\n         mlFields.forEach(function (field) {\r\n            if (values[field] != null) {\r\n               shouldTranslate = true;\r\n            }\r\n         });\r\n      }\r\n      if (shouldTranslate) {\r\n         if (\r\n            values.translations == null ||\r\n            typeof values.translations == \"undefined\" ||\r\n            values.translations == \"\"\r\n         ) {\r\n            values.translations = [];\r\n         }\r\n         this.object.unTranslate(values, values, mlFields);\r\n      }\r\n   }\r\n\r\n   request(method, params) {\r\n      console.error(\r\n         \"!!! ABModelCore.request() should be overridden by platform.\"\r\n      );\r\n      return Promise.resolve();\r\n   }\r\n\r\n   // /**\r\n   //  * @method create\r\n   //  * update model values on the server.\r\n   //  */\r\n   // create(values) {\r\n\r\n   //   this.prepareMultilingualData(values);\r\n\r\n   //   var params = {\r\n   //     url: this.object.urlRest(),\r\n   //     params: values\r\n   //   }\r\n   //   return this.request('post', params)\r\n   //     .then((data) => {\r\n\r\n   //       this.normalizeData(data);\r\n\r\n   //       return data;\r\n\r\n   //       // FIX: now with sockets, the triggers are fired from socket updates.\r\n   //       // trigger a create event\r\n   //       // triggerEvent('create', this.object, data);\r\n\r\n   //     })\r\n   //     .catch(reject);\r\n\r\n   // }\r\n\r\n   /**\r\n    * @method delete\r\n    * remove this model instance from the server\r\n    * @param {integer} id  the .id of the instance to remove.\r\n    * @return {Promise}\r\n    */\r\n   // delete(id) {\r\n\r\n   //   var params = {\r\n   //     url: this.object.urlRestItem(id)\r\n   //   }\r\n   //   return this.request('delete', params)\r\n   //     .then((data) => {\r\n\r\n   //       return data;\r\n\r\n   //       // FIX: now with sockets, the triggers are fired from socket updates.\r\n   //       // trigger a delete event\r\n   //       // triggerEvent('delete', this.object, id);\r\n\r\n   //     })\r\n   // }\r\n\r\n   /**\r\n    * @method findAll\r\n    * performs a data find with the provided condition.\r\n    */\r\n   //   findAll(cond) {\r\n\r\n   //     cond = cond || {};\r\n\r\n   //     var params = {\r\n   //       url: this.object.urlRest(),\r\n   //       params: cond\r\n   //     }\r\n   //     return this.request('get', params)\r\n   //       .then((data) => {\r\n\r\n   //         this.normalizeData(data.data);\r\n\r\n   //         resolve(data);\r\n   //       })\r\n   //       .catch((err) => {\r\n   // /// TODO: this should be done in platform/ABModel:\r\n   //         // if (err && err.code) {\r\n   //         //  switch(err.code) {\r\n   //         //    case \"ER_PARSE_ERROR\":\r\n   //         //      OP.Error.log('AppBuilder:ABModel:findAll(): Parse Error with provided condition', { error: err, condition:cond })\r\n   //         //      break;\r\n\r\n   //         //    default:\r\n   //         //      OP.Error.log('AppBuilder:ABModel:findAll(): Unknown Error with provided condition', { error: err, condition:cond })\r\n   //         //      break;\r\n   //         //  }\r\n\r\n   //         // }\r\n   // console.error(err);\r\n   //       })\r\n\r\n   //   }\r\n\r\n   urlParamsCreate(values) {\r\n      return {\r\n         url: this.object.urlRest(),\r\n         params: values,\r\n      };\r\n   }\r\n\r\n   urlParamsDelete(id) {\r\n      return {\r\n         url: this.object.urlRestItem(id),\r\n      };\r\n   }\r\n\r\n   urlParamsFind(cond) {\r\n      return {\r\n         url: this.object.urlRest(),\r\n         params: cond || {},\r\n      };\r\n   }\r\n\r\n   urlParamsUpdate(id, values) {\r\n      return {\r\n         url: this.object.urlRestItem(id),\r\n         params: values,\r\n      };\r\n   }\r\n\r\n   /**\r\n    * @method count\r\n    * count a data find with the provided condition.\r\n    */\r\n   count(cond) {\r\n      cond = cond || {};\r\n\r\n      var params = {\r\n         url: this.object.urlRestCount(),\r\n         params: cond,\r\n      };\r\n      return this.request(\"get\", params)\r\n         .then((numberOfRows) => {\r\n            resolve(numberOfRows);\r\n         })\r\n         .catch((err) => {\r\n            // TODO: this should be done in platform/ABModel\r\n\r\n            // OP.Error.log('AppBuilder:ABModel:count(): Parse Error with provided condition', { error: err, condition:cond })\r\n\r\n            // reject(err);\r\n            console.error(err);\r\n         });\r\n   }\r\n\r\n   /**\r\n    * @method staleRefresh\r\n    * Process a request to refresh the data for a given entry.\r\n    * This method is called from a ABDataview when it receives\r\n    * a 'ab.datacollection.stale' message.\r\n    * This method will try to queue similar reqeusts and then issue 1 large\r\n    * request, rather than numerous individual ones.\r\n    * @param {obj} cond  the condition of the entry we are requesting.\r\n    * @return {Promise}\r\n    */\r\n   staleRefresh(cond) {\r\n      // cond should be { where:{ id: X } } format.\r\n      var PK = this.object.PK();\r\n\r\n      var currID = cond[PK]; // just in case we get a { id: X }\r\n      if (cond.where) {\r\n         currID = cond.where[PK];\r\n      }\r\n\r\n      return new Promise((resolve, reject) => {\r\n         if (!currID) {\r\n            var Err = new Error(\r\n               \"Model.staleRefresh(): could not resolve .\" + PK\r\n            );\r\n            Err.cond = cond;\r\n            reject(Err);\r\n            return;\r\n         }\r\n\r\n         // convert to PK : Promise object:\r\n         var entry = {\r\n            resolve: resolve,\r\n            reject: reject,\r\n         };\r\n         entry[PK] = currID;\r\n\r\n         // queue up refresh condition\r\n         this.staleRefreshPending.push(entry);\r\n\r\n         // if ! staleRefreshInProcess\r\n         if (!this.staleRefreshInProcess) {\r\n            // set timeout to another 200ms wait after LAST staleRefresh()\r\n            if (this.staleRefreshTimerID) {\r\n               clearTimeout(this.staleRefreshTimerID);\r\n            }\r\n            this.staleRefreshTimerID = setTimeout(() => {\r\n               this.staleRefreshProcess();\r\n            }, 200);\r\n         }\r\n      });\r\n   }\r\n\r\n   /**\r\n    * @method staleRefreshProcess\r\n    * Actually process the current pending requests.\r\n    */\r\n   staleRefreshProcess() {\r\n      this.staleRefreshInProcess = true;\r\n      var currentEntries = this.staleRefreshPending;\r\n      this.staleRefreshPending = [];\r\n      var PK = this.object.PK();\r\n\r\n      var responseHash = {\r\n         /* id : [{entry}] */\r\n      };\r\n      var cond = { where: {} };\r\n      cond.where[PK] = [];\r\n\r\n      console.log(\r\n         \"Model.staleRefreshProcess(): buffered \" +\r\n            currentEntries.length +\r\n            \" requests\"\r\n      );\r\n      currentEntries.forEach((e) => {\r\n         responseHash[e[PK]] = responseHash[e[PK]] || [];\r\n         responseHash[e[PK]].push(e);\r\n      });\r\n\r\n      cond.where[PK] = Object.keys(responseHash);\r\n\r\n      this.findAll(cond).then((res) => {\r\n         // for each entry we got back\r\n         if (Array.isArray(res.data) && res.data.length) {\r\n            res.data.forEach((data) => {\r\n               // find it's matching request:\r\n               if (responseHash[data[PK]]) {\r\n                  // respond to the pending promise\r\n                  // and remove these entries from responseHash\r\n                  var entries = responseHash[data[PK]];\r\n                  entries.forEach((entry) => {\r\n                     var resolve = entry.resolve;\r\n                     resolve({ data: [data] });\r\n                  });\r\n\r\n                  delete responseHash[data[PK]];\r\n               } else {\r\n                  console.error(\r\n                     \"Model.staleRefreshProcess(): returned entry was not in our responseHash:\",\r\n                     data,\r\n                     responseHash\r\n                  );\r\n               }\r\n            });\r\n         }\r\n\r\n         // now if there are any entries left in responseHash,\r\n         // respond with an empty entry:\r\n         var allKeys = Object.keys(responseHash);\r\n         if (allKeys.length > 0) {\r\n            console.warn(\r\n               \"Model.staleRefreshProcess(): \" +\r\n                  allKeys.length +\r\n                  \" entries with no responses. \"\r\n            );\r\n         }\r\n         allKeys.forEach((key) => {\r\n            var resolve = responseHash[key].resolve;\r\n            resolve({ data: [] });\r\n            delete responseHash[key];\r\n         });\r\n\r\n         // now check to see if there are any more pending requests:\r\n         if (this.staleRefreshPending.length > 0) {\r\n            // process them:\r\n            this.staleRefreshProcess();\r\n         } else {\r\n            // mark we are no longer processing stale requests.\r\n            this.staleRefreshInProcess = false;\r\n         }\r\n      });\r\n   }\r\n\r\n   /**\r\n     * @method findConnected\r\n     * return the connected data associated with an instance of this model.\r\n     *\r\n     * to limit the result to only a single connected column:\r\n     *    model.findConnected( 'col1', {data})\r\n     *    then ((data) => {\r\n     *      // data = [{obj1}, {obj2}, ... {objN}]\r\n     *    })\r\n     *\r\n     * To find >1 connected field data:\r\n     *    model.findConnected( ['col1', 'col2'], {data} )\r\n     *    .then((data) =>{\r\n     *    \r\n     *      // data = {\r\n     *      //     col1 : [{obj1}, {obj2}, ... {objN}],\r\n     *      //     col2 : [{obj1}, {obj2}, ... {objN}]\r\n     *      // }\r\n     *    })\r\n     *\r\n     * To find all connected field data:\r\n     *    model.findConnected( {data} )\r\n     *    .then((data) =>{\r\n     *    \r\n     *      // data = {\r\n     *      //     connectedColName1 : [{obj1}, {obj2}, ... {objN}],\r\n     *      //     connectedColName2 : [{obj1}, {obj2}, ... {objN}],\r\n     *      //    ...\r\n     *      //     connectedColNameN : [{obj1}, {obj2}, ... {objN}]\r\n     *      // }\r\n     *    })\r\n\r\n     * @param {string/array} fields  [optional] an array of connected fields you want to return.\r\n     * @param {obj} data  the current object instance (data) to lookup\r\n     * @return {Promise}\r\n     */\r\n   findConnected(fields, data) {\r\n      if (typeof data == \"undefined\") {\r\n         if (!Array.isArray(fields) && typeof fields == \"object\") {\r\n            data = fields;\r\n            fields = []; // return all fields\r\n         }\r\n      }\r\n\r\n      if (typeof fields == \"string\") {\r\n         fields = [fields]; // convert to an array of values\r\n      }\r\n\r\n      return new Promise((resolve, reject) => {\r\n         // sanity checking:\r\n         if (!data.id) {\r\n            // I can't find any connected items, if I can't find this one:\r\n            resolve(null);\r\n            return;\r\n         }\r\n\r\n         let cond = {};\r\n         cond[this.object.PK()] = data.id;\r\n         this.findAll({ where: cond, includeRelativeData: true })\r\n            .then((results) => {\r\n               if (\r\n                  !results.data ||\r\n                  !Array.isArray(results.data) ||\r\n                  results.data.length == 0\r\n               ) {\r\n                  resolve([]); // no data to return.\r\n                  return;\r\n               }\r\n\r\n               // work with the first object.\r\n               var myObj = results.data[0];\r\n\r\n               // if only 1 field requested, then return that\r\n               if (fields.length == 1) {\r\n                  let data =\r\n                     myObj[\r\n                        fields[0].replace(/[^a-z0-9\\.]/gi, \"\") + \"__relation\"\r\n                     ];\r\n                  if (!data) return resolve([]);\r\n\r\n                  if (!Array.isArray(data)) data = [data];\r\n\r\n                  resolve(data);\r\n                  return;\r\n               }\r\n\r\n               // if no fields requested, return them all:\r\n               if (fields.length == 0) {\r\n                  var allFields = this.object.fields((f) => {\r\n                     return f.settings.linkType;\r\n                  });\r\n                  allFields.forEach((f) => {\r\n                     fields.push(f.columnName);\r\n                  });\r\n               }\r\n\r\n               var returnData = {};\r\n               fields.forEach((colName) => {\r\n                  returnData[colName] =\r\n                     myObj[colName.replace(/[^a-z0-9\\.]/gi, \"\") + \"__relation\"];\r\n               });\r\n\r\n               resolve(returnData);\r\n            })\r\n            .catch((err) => {\r\n               console.error(\"!!! error with findConnected() attempt:\", err);\r\n               reject(err);\r\n            });\r\n      });\r\n   }\r\n\r\n   // /**\r\n   //  * @method loadInto\r\n   //  * loads the current values into the provided Webix DataTable\r\n   //  * @param {DataTable} DT  A Webix component that can dynamically load data.\r\n   //  */\r\n   // loadInto(DT) {\r\n\r\n   //   // if a limit was applied, then this component should be loading dynamically\r\n   //   if (this._limit) {\r\n\r\n   //     DT.define('datafetch', this._limit);\r\n   //     DT.define('datathrottle', 250);  // 250ms???\r\n\r\n   //     // catch the event where data is requested:\r\n   //     // here we will do our own findAll() so we can persist\r\n   //     // the provided .where condition.\r\n\r\n   //     // oh yeah, and make sure to remove any existing event handler when we\r\n   //     // perform a new .loadInto()\r\n   //     DT.___AD = DT.___AD || {};\r\n   //     if (DT.___AD.onDataRequestEvent) {\r\n   //       DT.detachEvent(DT.___AD.onDataRequestEvent);\r\n   //     }\r\n   //     DT.___AD.onDataRequestEvent = DT.attachEvent(\"onDataRequest\", (start, count) => {\r\n\r\n   //       var cond = {\r\n   //         where: this._where,\r\n   //         sort: this._sort,\r\n   //         limit: count,\r\n   //         skip: start\r\n   //       }\r\n\r\n   //       if (DT.showProgress)\r\n   //         DT.showProgress({ type: \"icon\" });\r\n\r\n   //       this.findAll(cond)\r\n   //         .then((data) => {\r\n   //           data.data.forEach((item) => {\r\n   //             if (item.properties != null && item.properties.height != \"undefined\" && parseInt(item.properties.height) > 0) {\r\n   //               item.$height = parseInt(item.properties.height);\r\n   //             } else if (parseInt(this._where.height) > 0) {\r\n   //               item.$height = parseInt(this._where.height)\r\n   //             }\r\n   //           });\r\n   //           DT.parse(data);\r\n\r\n   //           if (DT.hideProgress)\r\n   //             DT.hideProgress();\r\n\r\n   //         })\r\n\r\n   //       return false; // <-- prevent the default \"onDataRequest\"\r\n   //     });\r\n\r\n   //     DT.refresh();\r\n   //   }\r\n\r\n   //   // else just load it all at once:\r\n   //   var cond = {};\r\n   //   if (this._where) cond.where = this._where;\r\n   //   if (this._sort) cond.sort = this._sort;\r\n   //   if (this._limit != null) cond.limit = this._limit;\r\n   //   if (this._skip != null) cond.skip = this._skip;\r\n\r\n   //   if (DT.showProgress)\r\n   //     DT.showProgress({ type: \"icon\" });\r\n\r\n   //   this.findAll(cond)\r\n   //     .then((data) => {\r\n   //       data.data.forEach((item) => {\r\n   //         if (item.properties != null && item.properties.height != \"undefined\" && parseInt(item.properties.height) > 0) {\r\n   //           item.$height = parseInt(item.properties.height);\r\n   //         } else if (parseInt(this._where.height) > 0) {\r\n   //           item.$height = parseInt(this._where.height)\r\n   //         }\r\n   //       });\r\n   //       DT.parse(data);\r\n\r\n   //       if (DT.hideProgress)\r\n   //         DT.hideProgress();\r\n\r\n   //     })\r\n   //     .catch((err) => {\r\n   //       console.error('!!!!!', err);\r\n   //     })\r\n\r\n   // }\r\n\r\n   // /**\r\n   //  * @method limit\r\n   //  * set the limit value for this set of data\r\n   //  * @param {integer} limit  the number or elements to return in this call\r\n   //  * @return {ABModel} this object that is chainable.\r\n   //  */\r\n   // limit(limit) {\r\n   //   this._limit = limit;\r\n   //   return this;\r\n   // }\r\n\r\n   // /**\r\n   //  * @method skip\r\n   //  * set the skip value for this set of data\r\n   //  * @param {integer} skip  the number or elements to skip\r\n   //  * @return {ABModel} this object that is chainable.\r\n   //  */\r\n   // skip(skip) {\r\n   //   this._skip = skip;\r\n   //   return this;\r\n   // }\r\n\r\n   //   /**\r\n   //    * @method update\r\n   //    * update model values on the server.\r\n   //    */\r\n   //   update(id, values) {\r\n\r\n   //     this.prepareMultilingualData(values);\r\n\r\n   //     // remove empty properties\r\n   //     for (var key in values) {\r\n   //       if (values[key] == null)\r\n   //         delete values[key];\r\n   //     }\r\n\r\n   //     var params = {\r\n   //       url: this.object.urlRestItem(id),\r\n   //       params: values\r\n   //     }\r\n   //     return this.request('put', params)\r\n   //       .then((data) => {\r\n\r\n   //         // .data is an empty object ??\r\n\r\n   //         this.normalizeData(data);\r\n\r\n   //         return data;\r\n\r\n   //         // FIX: now with sockets, the triggers are fired from socket updates.\r\n   //         // trigger a update event\r\n   //         // triggerEvent('update', this.object, data);\r\n\r\n   //       })\r\n   //       .catch((err)=>{\r\n   // console.error(err);\r\n   //       });\r\n\r\n   //   }\r\n\r\n   /**\r\n    * @method upsert\r\n    * upsert model values on the server.\r\n    */\r\n   upsert(values) {\r\n      this.prepareMultilingualData(values);\r\n\r\n      // remove empty properties\r\n      for (var key in values) {\r\n         if (values[key] == null) delete values[key];\r\n      }\r\n\r\n      var params = {\r\n         url: this.object.urlRest(),\r\n         params: values,\r\n      };\r\n      return this.request(\"put\", params)\r\n         .then((data) => {\r\n            // .data is an empty object ??\r\n\r\n            this.normalizeData(data);\r\n\r\n            return data;\r\n\r\n            // FIX: now with sockets, the triggers are fired from socket updates.\r\n            // trigger a update event\r\n            // triggerEvent('update', this.object, data);\r\n         })\r\n         .catch((err) => {\r\n            console.error(err);\r\n         });\r\n   }\r\n\r\n   /**\r\n    * @method where\r\n    * set the where condition for the data being loaded.\r\n    * @param {json} cond  the json condition statement.\r\n    * @return {ABModel} this object that is chainable.\r\n    */\r\n   where(cond) {\r\n      this._where = cond;\r\n      return this;\r\n   }\r\n\r\n   /**\r\n    * @method where\r\n    * set the sort condition for the data being loaded.\r\n    * @param {json} cond  the json condition statement.\r\n    * @return {ABModel} this object that is chainable.\r\n    */\r\n   sort(cond) {\r\n      this._sort = cond;\r\n      return this;\r\n   }\r\n\r\n   /**\r\n    * @method refresh\r\n    * refresh model definition on the server.\r\n    */\r\n   refresh() {\r\n      console.error(\"!!! Depreciated: where is this being called from?\");\r\n      return Promise.resolve();\r\n\r\n      // var params = {\r\n      //    url: this.object.urlRestRefresh(),\r\n      // };\r\n      // return this.request(\"put\", params);\r\n   }\r\n\r\n   normalizeData(data) {\r\n      // convert to array\r\n      if (!(data instanceof Array)) data = [data];\r\n\r\n      // find all connected fields\r\n      var connectedFields = this.object.connectFields();\r\n\r\n      // if this object has some multilingual fields, translate the data:\r\n      var mlFields = this.object.multilingualFields();\r\n\r\n      // if this object has some date fields, convert the data to date object:\r\n      var dateFields =\r\n         this.object.fields(function (f) {\r\n            return f.key == \"date\" || f.key == \"datetime\";\r\n         }) || [];\r\n\r\n      // calculate fields\r\n      var calculatedFields = this.object.fields((f) => f.key == \"calculate\");\r\n\r\n      data.forEach((d) => {\r\n         if (d == null) return;\r\n\r\n         // various PK name\r\n         if (!d.id && this.object.PK() != \"id\") d.id = d[this.object.PK()];\r\n\r\n         // loop through data's connected fields\r\n         connectedFields.forEach((c) => {\r\n            // get the relation name so we can change the original object\r\n            var relationName = c.relationName();\r\n\r\n            // if (d[c.columnName] == null)\r\n            //  d[c.columnName] = '';\r\n\r\n            // if there is no data we can exit now\r\n            if (d[relationName] == null) return;\r\n\r\n            // if relation data is still a string and isn't empty\r\n            if (\r\n               typeof d[relationName] == \"string\" &&\r\n               d[relationName].length > 0\r\n            ) {\r\n               // parse the string into an object\r\n               d[relationName] = JSON.parse(d[relationName]);\r\n            }\r\n\r\n            // if the data is an array we need to loop through it\r\n            if (Array.isArray(d[relationName])) {\r\n               d[relationName].forEach((r) => {\r\n                  // if translations are present and they are still a string\r\n                  if (r.translations && typeof r.translations == \"string\") {\r\n                     // parse the string into an object\r\n                     r.translations = JSON.parse(r.translations);\r\n                  }\r\n               });\r\n               // if the data is not an array it is a single item...check that has translations and it is a string\r\n            } else if (\r\n               d[relationName].translations &&\r\n               typeof d[relationName].translations == \"string\"\r\n            ) {\r\n               // if so parse the string into an object\r\n               d[relationName].translations = JSON.parse(\r\n                  d[relationName].translations\r\n               );\r\n            }\r\n\r\n            // set .id to relation columns\r\n            let objectLink = c.datasourceLink;\r\n            if (\r\n               objectLink &&\r\n               objectLink.PK() != \"id\" &&\r\n               d[relationName] &&\r\n               !d[relationName].id\r\n            ) {\r\n               // is array\r\n               if (d[relationName].forEach) {\r\n                  d[relationName].forEach((subData) => {\r\n                     if (subData[objectLink.PK()])\r\n                        subData.id = subData[objectLink.PK()];\r\n                  });\r\n               } else if (d[relationName][objectLink.PK()]) {\r\n                  d[relationName].id = d[relationName][objectLink.PK()];\r\n               }\r\n            }\r\n\r\n            var relatedMlFields = objectLink.multilingualFields();\r\n            if (relatedMlFields.length) {\r\n               objectLink.translate(\r\n                  d[relationName],\r\n                  d[relationName],\r\n                  relatedMlFields\r\n               );\r\n            }\r\n\r\n            // Change property name of connected field\r\n            if (!d[c.columnName]) d[c.columnName] = d[relationName];\r\n         });\r\n\r\n         if (mlFields.length) {\r\n            this.object.translate(d, d, mlFields);\r\n         }\r\n\r\n         // convert the data to date object\r\n         dateFields.forEach((date) => {\r\n            if (d && d[date.columnName] != null) {\r\n               // check to see if data has already been converted to a date object\r\n               if (typeof d[date.columnName] == \"string\") {\r\n                  if (date.key == \"date\") {\r\n                     // if we are ignoring the time it means we ignore timezone as well\r\n                     // so lets trim that off when creating the date so it can be a simple date\r\n                     d[date.columnName] = this.AB.toDate(d[date.columnName], {\r\n                        format: \"MM/DD/YYYY\",\r\n                        ignoreTime: true,\r\n                     });\r\n                  } else {\r\n                     // Convert UTC to Date\r\n                     d[date.columnName] = this.AB.toDate(d[date.columnName]);\r\n                     // d[date.columnName] = new Date(moment(d[date.columnName]));\r\n                  }\r\n               }\r\n            }\r\n         });\r\n\r\n         calculatedFields.forEach((calField) => {\r\n            d[calField.columnName] = calField.format(d);\r\n         });\r\n      });\r\n   }\r\n};\r\n","/**\r\n * ABObjectCore\r\n *\r\n * Manage the loading of specific ABObject data into useable objects\r\n * that can instantiate themselves and provide field and model resources.\r\n */\r\n\r\nvar ABModel = require(\"../platform/ABModel\");\r\nvar ABMLClass = require(\"../platform/ABMLClass\");\r\n\r\nconst L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABObjectCore extends ABMLClass {\r\n   constructor(attributes, AB) {\r\n      super([\"label\"], AB);\r\n\r\n      /*\r\n{\r\n\tid: uuid(),\r\n\tconnName: 'string', // Sails DB connection name: 'appdev_default', 'legacy_hris', etc. Default is 'appBuilder'.\r\n\tname: 'name',\r\n\tlabelFormat: 'xxxxx',\r\n\tlabelSettings: Object,\r\n\tisImported: 1/0,\r\n\tisExternal: 1/0,\r\n\ttableName:'string',  // NOTE: store table name of import object to ignore async\r\n\tprimaryColumnName: 'string', // NOTE: store column name of PK\r\n\ttransColumnName: 'string', // NOTE: store column name of translations table\r\n\turlPath:'string',\r\n\timportFromObject: 'string', // JSON Schema style reference:  '#[ABApplication.id]/objects/[ABObject.id]'\r\n\t\t\t\t\t\t\t\t// to get other object:\t ABApplication.objectFromRef(obj.importFromObject);\r\n\ttranslations:[\r\n\t\t{}\r\n\t],\r\n\tfields:[\r\n\t\t{ABDataField}\r\n   ],\r\n   indexes: [\r\n      {ABIndex}\r\n   ]\r\n}\r\n*/\r\n\r\n      this.fromValues(attributes);\r\n   }\r\n\r\n   ///\r\n   /// Static Methods\r\n   ///\r\n   /// Available to the Class level object. These methods are not dependent\r\n   /// on the instance values of the Application.\r\n   ///\r\n\r\n   static contextKey() {\r\n      return \"object\";\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   fromValues(attributes) {\r\n      /*\r\n        {\r\n            id: uuid(),\r\n            connName: 'string', // Sails DB connection name: 'appdev_default', 'legacy_hris', etc. Default is 'appBuilder'.\r\n            name: 'name',\r\n            labelFormat: 'xxxxx',\r\n            labelSettings: Object,\r\n            isImported: 1/0,\r\n            isExternal: 1/0,\r\n            tableName:'string',  // NOTE: store table name of import object to ignore async\r\n            primaryColumnName: 'string', // NOTE: store column name of PK\r\n            transColumnName: 'string', // NOTE: store column name of translations table\r\n            urlPath:'string',\r\n            importFromObject: 'string', // JSON Schema style reference:  '#[ABApplication.id]/objects/[ABObject.id]'\r\n                                        // to get other object:  ABApplication.objectFromRef(obj.importFromObject);\r\n            translations:[\r\n                {}\r\n            ],\r\n            fields:[\r\n                {ABDataField}\r\n            ],\r\n            indexes: [\r\n               {ABIndex}\r\n            ]\r\n        }\r\n        */\r\n\r\n      this.id = attributes.id;\r\n      // {string} .id\r\n      // the uuid of this ABObject Definition.\r\n\r\n      this.type = attributes.type || \"object\";\r\n      // {string} .type\r\n      // the type of ABDefinition this is.\r\n\r\n      this.connName = attributes.connName || undefined; // undefined == 'appBuilder'\r\n      // {string} .connName\r\n      // the sails.config.connections[connName] configuration reference.\r\n      // if not set ({undefined}), then our default \"appBuilder\" config is used\r\n\r\n      this.name = attributes.name || \"\";\r\n      // {string} .name\r\n      // A name reference for this ABObject. This is a reference that isn't\r\n      // translateable and will be used for lookups across languages.\r\n\r\n      this.labelFormat = attributes.labelFormat || \"\";\r\n      // {string} .labelFormat\r\n      // A string template for how to display an entry for this ABObject in\r\n      // common UI elements like grids, lists, etc...\r\n\r\n      this.labelSettings = attributes.labelSettings || {};\r\n      // {Object} .labelSettings\r\n\r\n      this.labelSettings.isNoLabelDisplay = parseInt(\r\n         this.labelSettings.isNoLabelDisplay || 0\r\n      );\r\n      // {bool} .isNoLabelDisplay\r\n\r\n      this.isImported = parseInt(attributes.isImported || 0);\r\n      // {depreciated}\r\n      // {bool} .isImported\r\n      // previously used to mark ABObjects that were created in other\r\n      // ABApplicaitons.  No longer relevant with Global ABObjects\r\n\r\n      this.isExternal = parseInt(attributes.isExternal || 0);\r\n      // {bool} .isExternal\r\n      // Marks this ABObject as referencing a pre-existing table in the DB that\r\n      // we are treating as an ABObject.\r\n      // These objects are not allowed to create/update/destroy the db table\r\n      // nor can we add/remove fields.\r\n      // However we are able to customize the Field definitions to change the\r\n      // column names, hidden attributes, Object label, etc...\r\n      // We can update our Defintion attributes, but not any actual DB changes.\r\n\r\n      this.tableName = attributes.tableName || \"\"; // NOTE: store table name of import object to ignore async\r\n      // {string} .tableName\r\n      // the `{database}.{tableName}` of the db table that this ABObject's data\r\n      // is stored in.\r\n      // knex does not like .(dot) in table and column names\r\n      // https://github.com/knex/knex/issues/2762\r\n      this.tableName = this.tableName.replace(/[^a-zA-Z0-9_ ]/gi, \"\");\r\n\r\n      this.primaryColumnName = attributes.primaryColumnName || \"\"; // NOTE: store column name of PK\r\n      // {string} .primaryColumnName\r\n      // is the col_name of which key is the primary key.  By default it is\r\n      // \"uuid\", but in some external objects this might be something else\r\n      // (\"id\", \"ren_id\", etc...).\r\n\r\n      this.transColumnName = attributes.transColumnName || \"\"; // NOTE: store column name of translations table\r\n      // {string} .transColumnName\r\n      // this is a workaround to include hris_ren_data and hris_ren_trans data\r\n\r\n      this.urlPath = attributes.urlPath || \"\";\r\n\r\n      // this.importFromObject = attributes.importFromObject || \"\";\r\n\r\n      this.isSystemObject = attributes.isSystemObject;\r\n      // {bool} .isSystemObject\r\n      // We are now storing some of our System Required Data as ABObjects as well.\r\n      // These Objects should not be allowed to be modified by typical AppBuilder\r\n      // designer.  However we can enable a mode for AB Designer to then expand these\r\n      // ABObjects, and eventually we can use the AppBuilder to Create the AppBuilder.\r\n      if (\r\n         typeof this.isSystemObject == \"undefined\" ||\r\n         this.isSystemObject == \"false\"\r\n      ) {\r\n         this.isSystemObject = false;\r\n      }\r\n\r\n      this.createdInAppID = attributes.createdInAppID;\r\n      // {string} .createdInAppID\r\n      // the .id of the ABApplication that originally created this ABObject.\r\n\r\n      // if attributes.objectWorkspace DOES exist, make sure it is fully\r\n      // populated.\r\n      if (typeof attributes.objectWorkspace != \"undefined\") {\r\n         if (typeof attributes.objectWorkspace.sortFields == \"undefined\")\r\n            attributes.objectWorkspace.sortFields = [];\r\n         if (typeof attributes.objectWorkspace.filterConditions == \"undefined\")\r\n            attributes.objectWorkspace.filterConditions = [];\r\n         if (typeof attributes.objectWorkspace.frozenColumnID == \"undefined\")\r\n            attributes.objectWorkspace.frozenColumnID = \"\";\r\n         if (typeof attributes.objectWorkspace.hiddenFields == \"undefined\")\r\n            attributes.objectWorkspace.hiddenFields = [];\r\n      }\r\n      this.objectWorkspace = attributes.objectWorkspace || {\r\n         sortFields: [], // array of columns with their sort configurations\r\n         filterConditions: [], // array of filters to apply to the data table\r\n         frozenColumnID: \"\", // id of column you want to stop freezing\r\n         hiddenFields: [], // array of [ids] to add hidden:true to\r\n      };\r\n      // {obj} .objectWorkspace\r\n      // When in the ABObject editor in the AppBuilder Designer, different\r\n      // views of the information can be created.  These views are stored here\r\n      // and are avaiable to other users in the Designer.\r\n\r\n      // pull in field definitions:\r\n      var fields = [];\r\n      this.fieldIDs = attributes.fieldIDs || [];\r\n      // {array}  [ ABField.id, ... ]\r\n      // this is a collection of ALL the ABFields this object references.\r\n      // This will include ABFields that were directly created for this object\r\n      // and will include ABFields that were imported.\r\n\r\n      this.importedFieldIDs = attributes.importedFieldIDs || [];\r\n      // {array} [ ABField.id, ... ]\r\n      // this is a collection of the ABFields in our .fieldIDs that were\r\n      // IMPORTED.\r\n\r\n      this.fieldIDs.forEach((id) => {\r\n         if (!id) return;\r\n\r\n         var def = this.AB.definitionByID(id);\r\n         if (def) {\r\n            fields.push(this.AB.fieldNew(def, this));\r\n         } else {\r\n            this.emit(\r\n               \"warning\",\r\n               `O[${this.name}] is referenceing an unknown field id[${id}]`,\r\n               {\r\n                  obj: this.id,\r\n                  field: id,\r\n               }\r\n            );\r\n         }\r\n      });\r\n      this._fields = fields;\r\n\r\n      // pull in index definitions:\r\n      this.importIndexes(attributes.indexIDs);\r\n\r\n      // let the MLClass now process the translations:\r\n      super.fromValues(attributes);\r\n   }\r\n\r\n   /**\r\n    * @method importIndexes\r\n    * instantiate a set of indexes from the given ids.\r\n    * @param {array} indexIDs The different ABDefinition IDs for each index\r\n    *        [ \"uuid11\", \"uuid2\", ... \"uuidN\" ]\r\n    */\r\n   importIndexes(indexIDs) {\r\n      var indexes = [];\r\n      (indexIDs || []).forEach((id) => {\r\n         var def = this.AB.definitionByID(id);\r\n         if (def) {\r\n            indexes.push(this.AB.indexNew(def, this));\r\n         } else {\r\n            this.emit(\r\n               \"warning\",\r\n               `O[${this.name}] is referenceing an unknown index id[${id}]`,\r\n               {\r\n                  obj: this.id,\r\n                  index: id,\r\n               }\r\n            );\r\n         }\r\n      });\r\n      this._indexes = indexes;\r\n   }\r\n\r\n   /**\r\n    * @method exportFields\r\n    * convert our array of fields into a settings object for saving to disk.\r\n    * @return {array}\r\n    */\r\n   // exportFields() {\r\n   //     var currFields = [];\r\n   //     this._fields.forEach((obj) => {\r\n   //         currFields.push(obj.toObj());\r\n   //     });\r\n   //     return currFields;\r\n   // }\r\n\r\n   // /**\r\n   //  * @method exportFields\r\n   //  * convert our array of fields into a settings object for saving to disk.\r\n   //  * @return {array}\r\n   //  */\r\n   // exportIndexes() {\r\n   //    var currIndexes = [];\r\n   //    this._indexes.forEach((idx) => {\r\n   //       currIndexes.push(idx.toObj());\r\n   //    });\r\n   //    return currIndexes;\r\n   // }\r\n\r\n   /**\r\n    * @method toObj()\r\n    *\r\n    * properly compile the current state of this ABApplication instance\r\n    * into the values needed for saving to the DB.\r\n    *\r\n    * Most of the instance data is stored in .json field, so be sure to\r\n    * update that from all the current values of our child fields.\r\n    *\r\n    * @return {json}\r\n    */\r\n   toObj() {\r\n      // MLClass translation\r\n      var obj = super.toObj();\r\n\r\n      // track the field .ids of our fields\r\n      var fieldIDs = this.fields().map((f) => f.id);\r\n\r\n      // track the index .ids of our indexes\r\n      var indexIDs = this.indexes().map((f) => f.id);\r\n\r\n      return {\r\n         id: this.id,\r\n         type: this.type || \"object\",\r\n         connName: this.connName,\r\n         name: this.name,\r\n         labelFormat: this.labelFormat,\r\n         labelSettings: this.labelSettings || {},\r\n         isImported: this.isImported,\r\n         isExternal: this.isExternal,\r\n         tableName: this.tableName,\r\n         // NOTE: store table name of import object to ignore async\r\n         primaryColumnName: this.primaryColumnName,\r\n         // NOTE: store column name of PK\r\n         transColumnName: this.transColumnName,\r\n         // NOTE: store column name of translations table\r\n         urlPath: this.urlPath,\r\n         // importFromObject: this.importFromObject,\r\n         objectWorkspace: this.objectWorkspace,\r\n         isSystemObject: this.isSystemObject,\r\n\r\n         translations: obj.translations,\r\n         fieldIDs: fieldIDs,\r\n         importedFieldIDs: this.importedFieldIDs,\r\n         indexIDs: indexIDs,\r\n         createdInAppID: this.createdInAppID,\r\n      };\r\n   }\r\n\r\n   ///\r\n   /// Objects\r\n   ///\r\n\r\n   /**\r\n    * @method objectLinks()\r\n    *\r\n    *  return an array of ABObject that's connected.\r\n    *\r\n    * @param {object} filter\r\n    * @return {array} - An array of ABObject\r\n    */\r\n   objectLinks(/* filter */) {\r\n      var connectFields = this.connectFields();\r\n\r\n      return connectFields.map((f) => f.datasourceLink);\r\n   }\r\n\r\n   ///\r\n   /// Fields\r\n   ///\r\n\r\n   /**\r\n    * @method fields()\r\n    * return an array of all the ABFields for this ABObject.\r\n    * @param {fn} fn\r\n    *        a filter function that returns {true} if a value should\r\n    *        be included, or {false} otherwise.\r\n    * @return {array[ABFieldxxx]}\r\n    */\r\n   fields(fn = () => true) {\r\n      return this._fields.filter(fn);\r\n   }\r\n\r\n   /**\r\n    * @method fieldByID()\r\n    * return the object's field from the given {ABField.id}\r\n    * @param {string} id\r\n    *        the uuid of the field to return.\r\n    * @return {ABFieldxxx}\r\n    */\r\n   fieldByID(id) {\r\n      return this.fields((f) => f?.id == id)[0];\r\n   }\r\n\r\n   /**\r\n    * @method connectFields()\r\n    *\r\n    * return an array of the ABFieldConnect that is connect object fields.\r\n    * @param {fn} fn\r\n    *        a filter function that returns {true} if a value should\r\n    *        be included, or {false} otherwise.\r\n    * @return {array}\r\n    */\r\n   connectFields(fn = () => true) {\r\n      return this.fields((f) => f && f.isConnection).filter(fn);\r\n   }\r\n\r\n   /**\r\n    * @method fieldImport\r\n    * register the given ABField.id as an imported field for this ABObject.\r\n    * The ABField definition should be available before making this call.\r\n    * After this call, the ABField is included in the ABObject, but the ABObject\r\n    * has NOT been saved.\r\n    * @param {ABField} fieldID The ABDefinition.id for a field that is imported\r\n    *        into this object.\r\n    */\r\n   fieldImport(id) {\r\n      if (!id) return;\r\n\r\n      if (this.importedFieldIDs.indexOf(id) == -1) {\r\n         this.importedFieldIDs.push(id);\r\n      }\r\n\r\n      // just to be safe:\r\n      var isThere = this._fields.find((f) => f.id == id);\r\n      if (!isThere) {\r\n         var def = this.AB.definitionByID(id);\r\n         if (def) {\r\n            this._fields.push(this.AB.fieldNew(def, this));\r\n         } else {\r\n            this.emit(\r\n               \"warning\",\r\n               `O[${this.name}] is importing an unknown field id[${id}]`,\r\n               {\r\n                  obj: this.id,\r\n                  field: id,\r\n               }\r\n            );\r\n         }\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method fieldNew()\r\n    *\r\n    * return an instance of a new (unsaved) ABField that is tied to this\r\n    * ABObject.\r\n    *\r\n    * NOTE: this new field is not included in our this.fields until a .save()\r\n    * is performed on the field.\r\n    *\r\n    * @return {ABField}\r\n    */\r\n   fieldNew(values) {\r\n      return this.AB.fieldNew(values, this);\r\n   }\r\n\r\n   /**\r\n    * @method fieldRemove()\r\n    *\r\n    * remove the given ABField from our ._fields array and persist the current\r\n    * values.\r\n    *\r\n    * @param {ABField} field The instance of the field to remove.\r\n    * @return {Promise}\r\n    */\r\n   fieldRemove(field) {\r\n      var origLen = this._fields.length;\r\n      this._fields = this.fields(function (o) {\r\n         return o.id != field.id;\r\n      });\r\n\r\n      // be sure to remove this from our imported ids if it was\r\n      // listed there.\r\n      this.importedFieldIDs = this.importedFieldIDs.filter(\r\n         (fid) => fid != field.id\r\n      );\r\n\r\n      if (this._fields.length < origLen) {\r\n         return this.save();\r\n      }\r\n\r\n      // if we get here, then nothing changed so nothing to do.\r\n      return Promise.resolve();\r\n   }\r\n\r\n   /**\r\n    * @method fieldReorder()\r\n    *\r\n    * reorder the fields in our object\r\n    *\r\n    * @param {ABField} field The instance of the field to remove.\r\n    * @return {Promise}\r\n    */\r\n   fieldReorder(sourceId, targetId) {\r\n      // We know what was moved and what item it has replaced/pushed forward\r\n      // so first we want to splice the item moved out of the array of fields\r\n      // and store it so we can put it somewhere else\r\n      let itemMoved = null;\r\n      let oPos = 0; // original position\r\n      for (var i = 0; i < this._fields.length; i++) {\r\n         if (this._fields[i].columnName == sourceId) {\r\n            itemMoved = this._fields[i];\r\n            this._fields.splice(i, 1);\r\n            oPos = i;\r\n            break;\r\n         }\r\n      }\r\n      // once we have removed/stored it we can find where its new position\r\n      // will be by looping back through the array and finding the item it\r\n      // is going to push forward\r\n      for (var j = 0; j < this._fields.length; j++) {\r\n         if (this._fields[j].columnName == targetId) {\r\n            // if the original position was before the new position we will\r\n            // follow webix's logic that the drop should go after the item\r\n            // it was placed on\r\n            if (oPos <= j) {\r\n               j++;\r\n            }\r\n            this._fields.splice(j, 0, itemMoved);\r\n            break;\r\n         }\r\n      }\r\n\r\n      return this.save();\r\n   }\r\n\r\n   /**\r\n    * @method fieldSave()\r\n    *\r\n    * save the given ABField in our ._fields array and persist the current\r\n    * values.\r\n    *\r\n    * @param {ABField} field The instance of the field to save.\r\n    * @return {Promise}\r\n    */\r\n   fieldSave(field) {\r\n      var isIncluded = this.fieldByID(field.id);\r\n      if (!isIncluded) {\r\n         this._fields.push(field);\r\n         return this.save();\r\n      }\r\n\r\n      return Promise.resolve();\r\n   }\r\n\r\n   /**\r\n    * @method fieldAdd()\r\n    *\r\n    * save the given ABField in our ._fields array and persist the current\r\n    * values if they changed.\r\n    *\r\n    * @param {ABField} field The instance of the field to save.\r\n    * @return {Promise}\r\n    */\r\n   fieldAdd(field) {\r\n      var isIncluded = this.fieldByID(field.id);\r\n      if (!isIncluded) {\r\n         // if not already included, then add and save the Obj definition:\r\n         this._fields.push(field);\r\n         return this.save();\r\n      }\r\n\r\n      // Nothing was required so return\r\n      return Promise.resolve();\r\n   }\r\n\r\n   /**\r\n    * @method imageFields()\r\n    *\r\n    * return an array of the ABFieldImage fields this object has.\r\n    * @param {fn} fn\r\n    *        a filter function that returns {true} if a value should\r\n    *        be included, or {false} otherwise.\r\n    * @return {array}\r\n    */\r\n   imageFields(fn = () => true) {\r\n      return this.fields((f) => f && f.key == \"image\").filter(fn);\r\n   }\r\n\r\n   /**\r\n    * @method multilingualFields()\r\n    *\r\n    * return an array of columnnames that are multilingual.\r\n    *\r\n    * @return {array}\r\n    */\r\n   multilingualFields() {\r\n      return this.fields((f) => f && f.isMultilingual).map((f) => f.columnName);\r\n   }\r\n\r\n   /**\r\n    * @method indexes()\r\n    *\r\n    * return an array of all the ABIndex for this ABObject.\r\n    *\r\n    * @param filter {Object}\r\n    *\r\n    * @return {array}\r\n    */\r\n   indexes(filter = () => true) {\r\n      return this._indexes.filter(filter);\r\n   }\r\n\r\n   /**\r\n    * @method indexByID()\r\n    * return the object's index from the given {ABIndex.id}\r\n    * @param {string} id\r\n    *        the id of the ABIndex to return.\r\n    * @return {ABIndex}\r\n    */\r\n   indexByID(id) {\r\n      return this.indexes((f) => f.id == id)[0];\r\n   }\r\n\r\n   /**\r\n    * @method indexRemove()\r\n    * remove the given ABIndex from our ._indexes array and persist the current\r\n    * values.\r\n    * @param {ABIndex} index\r\n    * @return {Promise}\r\n    */\r\n   indexRemove(index) {\r\n      var origLen = this._indexes.length;\r\n      this._indexes = this.indexes(function (idx) {\r\n         return idx.id != index.id;\r\n      });\r\n\r\n      // persist our changes if something changed.\r\n      if (origLen != this._indexes.length) {\r\n         return this.save();\r\n      }\r\n\r\n      // nothing was removed, so continue on.\r\n      return Promise.resolve();\r\n   }\r\n\r\n   /**\r\n    * @method indexSave()\r\n    * save the given ABIndex in our ._indexes array and persist the current\r\n    * values.\r\n    * @param {ABIndex} index\r\n    * @return {Promise}\r\n    */\r\n   indexSave(index) {\r\n      var isIncluded = this.indexByID(index.id);\r\n      if (!isIncluded) {\r\n         this._indexes.push(index);\r\n         return this.save();\r\n      }\r\n\r\n      return Promise.resolve();\r\n   }\r\n\r\n   ///\r\n   /// Working with data from server\r\n   ///\r\n\r\n   /**\r\n    * @method model\r\n    * return a Model object that will allow you to interact with the data for\r\n    * this ABObject.\r\n    */\r\n   model() {\r\n      var model = new ABModel(this);\r\n\r\n      // default the context of this model's operations to this object\r\n      model.contextKey(ABObjectCore.contextKey());\r\n      model.contextValues({ id: this.id });\r\n\r\n      return model;\r\n   }\r\n\r\n   ///\r\n   /// URL\r\n   ///\r\n\r\n   /**\r\n    * @method urlRest\r\n    * return the url to access the data for this object.\r\n    * @return {string}\r\n    */\r\n   urlRest() {\r\n      return `/app_builder/model/${this.id}`;\r\n   }\r\n\r\n   /**\r\n    * @method urlRestBatch\r\n    * return the url to use for batch creates for this object\r\n    * @return {string}\r\n    */\r\n   urlRestBatch() {\r\n      return `/app_builder/batch/model/${this.id}`;\r\n   }\r\n\r\n   /**\r\n    * @method urlRestItem\r\n    * return the url to access the data for an instance of this object.\r\n    * @return {string}\r\n    */\r\n   urlRestItem(id) {\r\n      return `/app_builder/model/${this.id}/${id}`;\r\n   }\r\n\r\n   /**\r\n    * @method urlRestLog\r\n    * return the url to access the logs for this ABObject.\r\n    * @return {string}\r\n    */\r\n   urlRestLog() {\r\n      return `/app_builder/object/${this.id}/track`;\r\n   }\r\n\r\n   /**\r\n    * @method urlRestRefresh\r\n    * return the url to signal a refresh for this object.\r\n    * @return {string}\r\n    */\r\n   urlRestRefresh() {\r\n      return `/app_builder/model/refreshobject/${this.id}`;\r\n   }\r\n\r\n   /**\r\n    * @method urlCount\r\n    * return the url to count of data for this object.\r\n    * @return {string}\r\n    */\r\n   urlRestCount() {\r\n      return `/app_builder/model/count/${this.id}`;\r\n   }\r\n\r\n   ///\r\n   ///\tObject Workspace Settings\r\n   ///\r\n   get workspaceSortFields() {\r\n      // new version\r\n      if (this.workspaceViews) {\r\n         let currView = this.workspaceViews.getCurrentView();\r\n         if (currView) return currView.sortFields;\r\n         else return null;\r\n      }\r\n      // old version\r\n      else {\r\n         return this.objectWorkspace.sortFields;\r\n      }\r\n   }\r\n\r\n   set workspaceSortFields(fields) {\r\n      // new version\r\n      if (this.workspaceViews) {\r\n         let currView = this.workspaceViews.getCurrentView();\r\n         if (currView) currView.sortFields = fields;\r\n      }\r\n      // old version\r\n      else {\r\n         this.objectWorkspace.sortFields = fields;\r\n      }\r\n   }\r\n\r\n   get workspaceFilterConditions() {\r\n      // new version\r\n      if (this.workspaceViews) {\r\n         let currView = this.workspaceViews.getCurrentView();\r\n         if (currView) return currView.filterConditions;\r\n         else return null;\r\n      }\r\n      // old version\r\n      else {\r\n         return this.objectWorkspace.filterConditions;\r\n      }\r\n   }\r\n\r\n   set workspaceFilterConditions(filterConditions) {\r\n      // new version\r\n      if (this.workspaceViews) {\r\n         let currView = this.workspaceViews.getCurrentView();\r\n         if (currView) currView.filterConditions = filterConditions;\r\n      }\r\n      // old version\r\n      else {\r\n         this.objectWorkspace.filterConditions = filterConditions;\r\n      }\r\n   }\r\n\r\n   get workspaceFrozenColumnID() {\r\n      return this.objectWorkspace.frozenColumnID;\r\n   }\r\n\r\n   set workspaceFrozenColumnID(id) {\r\n      this.objectWorkspace.frozenColumnID = id;\r\n   }\r\n\r\n   get workspaceHiddenFields() {\r\n      return this.objectWorkspace.hiddenFields || [];\r\n   }\r\n\r\n   set workspaceHiddenFields(fields) {\r\n      this.objectWorkspace.hiddenFields = fields;\r\n   }\r\n\r\n   /**\r\n    * @method isReadOnly\r\n    *\r\n    * @return {boolean}\r\n    */\r\n   get isReadOnly() {\r\n      return this.isImported || this.isExternal;\r\n   }\r\n\r\n   /**\r\n    * @method defaultValues\r\n    * Collect a hash of key=>value pairs that represent the default values\r\n    * from each of our fields.\r\n    * @param {obj} data a key=>value hash of the inputs to parse.\r\n    * @return {array}\r\n    */\r\n   defaultValues() {\r\n      var values = {};\r\n      this.fields().forEach((f) => {\r\n         f.defaultValue(values);\r\n      });\r\n\r\n      return values;\r\n   }\r\n\r\n   /**\r\n    * @method isValidData\r\n    * Parse through the given data and return an array of any invalid\r\n    * value errors.\r\n    * @param {obj} data a key=>value hash of the inputs to parse.\r\n    * @return {array}\r\n    */\r\n   isValidData(/* data */) {\r\n      // NOTE: the platform needs to define a way to verify the data\r\n      console.warn(\"Platform.ABObject.isValidData() missing\");\r\n      return true;\r\n   }\r\n\r\n   /**\r\n    * @method urlPointer()\r\n    * return the url pointer that references this object. This url pointer\r\n    * should be able to be used by this.application.urlResolve() to return\r\n    * this object.\r\n    *\r\n    * @param {boolean} acrossApp - flag to include application id to url\r\n    *\r\n    * @return {string}\r\n    */\r\n   urlPointer(acrossApp) {\r\n      console.error(\"Who is calling this?\");\r\n\r\n      if (this.application == null) return null;\r\n\r\n      return this.application.urlObject(acrossApp) + this.id;\r\n   }\r\n\r\n   /**\r\n    * @method urlField\r\n    * return a string pointer to this object's fields\r\n    *\r\n    * @param {boolean} acrossApp - flag to include application id to url\r\n    *\r\n    * @return {string}\r\n    */\r\n   urlField(acrossApp) {\r\n      console.error(\"Who is calling this?\");\r\n\r\n      return this.urlPointer(acrossApp) + \"/_fields/\";\r\n   }\r\n\r\n   /**\r\n    * @method PK\r\n    * return a string of the primary column name\r\n    *\r\n    * @return {string}\r\n    */\r\n   PK() {\r\n      return this.primaryColumnName || \"uuid\";\r\n   }\r\n\r\n   remoteCreate(data) {\r\n      console.log(\r\n         \"object[\" + this.name + \"] received a remoteCreate() with data:\",\r\n         data\r\n      );\r\n   }\r\n\r\n   /**\r\n    * @method clone\r\n    * return a clone of ABObject\r\n    *\r\n    * @return {ABObjectBase}\r\n    */\r\n   clone() {\r\n      // ignore properties who're spend much performance\r\n      // NOTE: do not clone them. Just copy reference\r\n      let ignoreProps = [\"application\", \"_fields\"];\r\n\r\n      let cloneOne = JSON.parse(JSON.stringify(this));\r\n\r\n      ignoreProps.forEach((prop) => {\r\n         cloneOne[prop] = this[prop];\r\n      });\r\n\r\n      return cloneOne;\r\n   }\r\n\r\n   // Display data with label format of object\r\n   displayData(rowData) {\r\n      if (rowData == null) return \"\";\r\n\r\n      // translate multilingual\r\n      //// TODO: isn't this a MLObject??  use this.translate()\r\n      var mlFields = this.multilingualFields();\r\n      this.translate(rowData, rowData, mlFields);\r\n\r\n      var labelData = this.labelFormat || \"\";\r\n\r\n      // default label\r\n      if (!labelData && this.fields().length > 0) {\r\n         var defaultField = this.fields((f) => f.fieldUseAsLabel())[0];\r\n         if (defaultField) labelData = \"{\" + defaultField.id + \"}\";\r\n         else {\r\n            // if label is empty, then show .id\r\n            if (!labelData.trim()) {\r\n               let labelSettings = this.labelSettings || {};\r\n               if (labelSettings && labelSettings.isNoLabelDisplay) {\r\n                  labelData = L(labelSettings.noLabelText || \"[No Label]\");\r\n               } else {\r\n                  // show id of row\r\n                  labelData = `${\r\n                     this.AB.rules.isUUID(rowData.id) ? \"ID: \" : \"\"\r\n                  }${rowData.id}`;\r\n               }\r\n            }\r\n         }\r\n      }\r\n\r\n      // get column ids in {colId} template\r\n      // ['{colId1}', ..., '{colIdN}']\r\n      var colIds = labelData.match(/\\{[^}]+\\}/g);\r\n\r\n      if (colIds && colIds.forEach) {\r\n         colIds.forEach((colId) => {\r\n            var colIdNoBracket = colId.replace(\"{\", \"\").replace(\"}\", \"\");\r\n\r\n            var field = this.fieldByID(colIdNoBracket);\r\n            if (field == null) return;\r\n\r\n            labelData = labelData.replace(colId, field.format(rowData) || \"\");\r\n         });\r\n      }\r\n\r\n      // if label is empty, then show .id\r\n      if (!labelData.trim()) {\r\n         let labelSettings = this.labelSettings || {};\r\n         if (labelSettings && labelSettings.isNoLabelDisplay) {\r\n            labelData = L(labelSettings.noLabelText || \"[No Label]\");\r\n         } else {\r\n            // show id of row\r\n            labelData = `${this.AB.rules.isUUID(rowData.id) ? \"ID: \" : \"\"}${\r\n               rowData.id\r\n            }`;\r\n         }\r\n      }\r\n\r\n      return labelData;\r\n   }\r\n};\r\n","//\r\n// ABObjectQuery\r\n//\r\n// A type of Object in our system that is based upon a complex relationship of multiple\r\n// existing Objects.\r\n//\r\n// In the QueryBuilder section of App Builder, a new Query Object can be created.\r\n// An initial Object can be chosen from our current list of Objects. After that, additional Objects\r\n// and a specified join type can be specified.\r\n//\r\n// A list of fields from each specified Object can also be included as the data to be returned.\r\n//\r\n// A where statement is also part of the definition.\r\n//\r\n\r\nvar ABObject = require(\"../platform/ABObject\");\r\nvar ABModelQuery = require(\"../platform/ABModelQuery\");\r\n\r\nmodule.exports = class ABObjectQueryCore extends ABObject {\r\n   constructor(attributes, AB) {\r\n      super(attributes, AB);\r\n      /*\r\n{\r\n\tid: uuid(),\r\n\tname: 'name',\r\n\tlabelFormat: 'xxxxx',\r\n\tisImported: 1/0,\r\n\turlPath:'string',\r\n\timportFromObject: 'string', // JSON Schema style reference:  '#[ABApplication.id]/objects/[ABObject.id]'\r\n\t\t\t\t\t\t\t\t// to get other object:  ABApplication.objectFromRef(obj.importFromObject);\r\n\ttranslations:[\r\n\t\t{}\r\n\t],\r\n\r\n\r\n\r\n\t// ABOBjectQuery Specific Changes\r\n\t// we store a list of fields by their urls:\r\n\tfields:[\r\n\t\t{\r\n\t\t\talias: \"\",\r\n\t\t\tfieldURL:'#/url/to/field',\r\n\t\t}\r\n\t],\r\n\r\n\r\n\t// we store a list of joins:\r\n\tjoins:{\r\n\t\talias: \"\",\t\t\t\t\t\t\t// the alias name of table - use in SQL command\r\n\t\tobjectURL:\"#/...\",\t\t\t\t\t// the base object of the join\r\n\t\tlinks: [\r\n\t\t\t{\r\n\t\t\t\talias: \"\",\t\t\t\t\t\t\t// the alias name of table - use in SQL command\r\n\t\t\t\tfieldID: \"uuid\",\t\t\t\t\t// the connection field of the object we are joining with.\r\n\t\t\t\ttype:[left, right, inner, outer]\t// join type: these should match the names of the knex methods\r\n\t\t\t\t\t\t=> innerJoin, leftJoin, leftOuterJoin, rightJoin, rightOuterJoin, fullOuterJoin\r\n\t\t\t\tlinks: [\r\n\t\t\t\t\t...\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t]\r\n\r\n\t},\r\n\r\n\r\n\twhere: { QBWhere }\r\n}\r\n*/\r\n      this.isQuery = true;\r\n      // {bool}\r\n      // a property to mark the difference between an ABObject and ABObjectQuery.\r\n\r\n      // this.fromValues(attributes);\r\n   }\r\n\r\n   ///\r\n   /// Static Methods\r\n   ///\r\n   /// Available to the Class level object.  These methods are not dependent\r\n   /// on the instance values of the Application.\r\n   ///\r\n\r\n   /**\r\n    * contextKey()\r\n    * returns a unique key that represents a query in\r\n    * our networking job resolutions.\r\n    * @return {string}\r\n    */\r\n   static contextKey() {\r\n      return \"query\";\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /// ABApplication data methods\r\n\r\n   fromValues(attributes) {\r\n      super.fromValues(attributes);\r\n\r\n      this.type = \"query\";\r\n\r\n      // populate connection objects\r\n      // this._objects = {};\r\n      // this.obj2Alias = attributes.obj2Alias || {};\r\n\r\n      this.alias2Obj = {}; // this gets built in the .importJoins()\r\n      // { \"alias\" : object.id }\r\n      // this is a lookup hash of a referenced alias to the Object it\r\n      // references.\r\n\r\n      this.objectIDs = [];\r\n      // {array}  of ABObject.id s that are referenced by this query.\r\n      // this is how we limit our searches on objects.\r\n      // this gets built in the .importJoins();\r\n\r\n      this.viewName = attributes.viewName || \"\";\r\n      // {string}\r\n      // this is the SQL tablename of where our Query will store it's\r\n      // view data.\r\n\r\n      // import all our ABObjects\r\n      this.importJoins(attributes.joins || {});\r\n\r\n      // import fields after joins are imported\r\n      this._fields = null;\r\n      this.importFields(attributes.fields || []);\r\n      // {array} [ { alias, field}, {},... ]\r\n      // an array of field definition structures that mark what fields this\r\n      // query is interested in pulling data from.\r\n      //    .alias : {string} matches the alias of the ABObject that the field\r\n      //             is from\r\n      //    .field : {ABFieldXXX} the link to the actual ABField instance\r\n\r\n      // Import our Where condition\r\n      this.where = attributes.where || {}; // .workspaceFilterConditions\r\n      // Fix default where.glue value\r\n      if (\r\n         this.where &&\r\n         !this.where.glue &&\r\n         this.where.rules &&\r\n         this.where.rules.length > 0\r\n      )\r\n         this.where.glue = \"and\";\r\n\r\n      this._objectWorkspaceViews = attributes.objectWorkspaceViews || {};\r\n\r\n      this.settings = this.settings || {};\r\n\r\n      if (attributes && attributes.settings) {\r\n         // convert from \"0\" => true/false\r\n         this.settings.grouping = JSON.parse(\r\n            attributes.settings.grouping || false\r\n         );\r\n         this.settings.hidePrefix = JSON.parse(\r\n            attributes.settings.hidePrefix || false\r\n         );\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method toObj()\r\n    *\r\n    * properly compile the current state of this ABObjectQuery instance\r\n    * into the values needed for saving to the DB.\r\n    *\r\n    * @return {json}\r\n    */\r\n   toObj() {\r\n      var result = super.toObj();\r\n\r\n      result.viewName = this.viewName;\r\n\r\n      result.joins = this.exportJoins();\r\n      result.fields = this.exportFields();\r\n      result.where = this.where; // .workspaceFilterConditions\r\n\r\n      result.settings = this.settings;\r\n\r\n      return result;\r\n   }\r\n\r\n   ///\r\n   /// Fields\r\n   ///\r\n\r\n   /**\r\n    * @method importFields\r\n    * instantiate a set of fields from the given attributes.\r\n    * Our attributes are a set of field URLs That should already be created in their respective\r\n    * ABObjects.\r\n    * @param {array} fieldSettings The different field urls for each field\r\n    *\t\t\t\t\t{ }\r\n    */\r\n   importFields(fieldSettings) {\r\n      var newFields = [];\r\n      (fieldSettings || []).forEach((fieldInfo) => {\r\n         if (fieldInfo == null) return;\r\n\r\n         // pull object by alias name\r\n         let object = this.objectByAlias(fieldInfo.alias);\r\n\r\n         // Pull object from .AB\r\n         if (!object && this.AB) {\r\n            object = this.AB.objectByID(fieldInfo.objectID);\r\n\r\n            // keep\r\n            if (object) {\r\n               this._objects = this._objects || {};\r\n               this._objects[fieldInfo.alias] = object;\r\n            }\r\n         }\r\n\r\n         if (!object) {\r\n            this.emit(\r\n               \"warning\",\r\n               `IMPORT FIELDS: could not resolve object[${\r\n                  fieldInfo.objectID\r\n               }] for fieldSetting ${JSON.stringify(fieldInfo)}`,\r\n               {\r\n                  fieldInfo,\r\n               }\r\n            );\r\n            return;\r\n         }\r\n\r\n         let field = object.fieldByID(fieldInfo.fieldID);\r\n         if (!field) {\r\n            this.emit(\r\n               \"warning\",\r\n               `IMPORT FIELDS: Object[${object.id}] could not find field[${\r\n                  fieldInfo.fieldID\r\n               }] for fieldSetting ${JSON.stringify(fieldInfo)}`,\r\n               {\r\n                  object: object.toObj(),\r\n                  fieldInfo,\r\n               }\r\n            );\r\n            return;\r\n         }\r\n\r\n         if (!this.canFilterField(field)) {\r\n            this.emit(\r\n               \"warning\",\r\n               `Field[${field.id}] referenced in fieldSetting[${JSON.stringify(\r\n                  fieldInfo\r\n               )}] did not pass .canFilterField`,\r\n               {\r\n                  field: field.toObj(),\r\n                  fieldInfo,\r\n               }\r\n            );\r\n         }\r\n\r\n         // check duplicate\r\n         let isNew =\r\n            newFields.filter(\r\n               (f) =>\r\n                  f.alias == fieldInfo.alias && f.field.id == fieldInfo.fieldID\r\n            ).length < 1;\r\n\r\n         if (!isNew) {\r\n            this.emit(\r\n               \"warning\",\r\n               `Field[${\r\n                  fieldInfo.fieldID\r\n               }] referenced in fieldSetting[${JSON.stringify(\r\n                  fieldInfo\r\n               )}] is a duplicate`,\r\n               {\r\n                  field: field.toObj(),\r\n                  fieldInfo,\r\n               }\r\n            );\r\n         }\r\n\r\n         // should be a field of base/join objects\r\n         if (field && this.canFilterField(field) && isNew) {\r\n            // add alias to field\r\n            // create new instance of this field:\r\n            var def = field.toObj();\r\n            let clonedField = new field.constructor(def, field.object);\r\n\r\n            clonedField.alias = fieldInfo.alias;\r\n\r\n            let alias = fieldInfo.alias;\r\n            if (Array.isArray(this.joins())) {\r\n               // NOTE: query v1\r\n               alias = field.object.name;\r\n            }\r\n\r\n            newFields.push({\r\n               alias: alias,\r\n               field: clonedField,\r\n            });\r\n         }\r\n      });\r\n      this._fields = newFields;\r\n   }\r\n\r\n   /**\r\n    * @method exportFields\r\n    * convert our array of fields into a settings object for saving to disk.\r\n    * @return {array}\r\n    */\r\n   exportFields() {\r\n      var currFields = [];\r\n      this._fields.forEach((fieldInfo) => {\r\n         currFields.push({\r\n            alias: fieldInfo.alias,\r\n            objectID: fieldInfo.field.object.id,\r\n            fieldID: fieldInfo.field.id,\r\n         });\r\n      });\r\n      return currFields;\r\n   }\r\n\r\n   /**\r\n    * @method fields()\r\n    *\r\n    * Support the ABObject api by returning a list of fields relevant\r\n    * to this ABObjectQuery.\r\n    *\r\n    * @return {array}\r\n    */\r\n   fields(fn = () => true) {\r\n      if (!fn) fn = () => true;\r\n      return this._fields.map((f) => f.field).filter(fn);\r\n   }\r\n\r\n   ///\r\n   /// Joins & Objects\r\n   ///\r\n\r\n   /**\r\n    * @method joins()\r\n    *\r\n    * return an object of joins for this Query.\r\n    *\r\n    * @return {Object}\r\n    */\r\n   joins() {\r\n      return this._joins || {};\r\n   }\r\n\r\n   /**\r\n    * @method objects()\r\n    *\r\n    * return an array of all the relevant ABObjects for this Query.\r\n    *\r\n    * @return {array}\r\n    */\r\n   objects(fn = () => true) {\r\n      // FOR proper expected operation, this fn must only return object\r\n      // matches for which this ABQuery is managing objects:\r\n\r\n      return this.AB.objects((o) => this.objectIDs.indexOf(o.id) > -1).filter(\r\n         fn\r\n      );\r\n   }\r\n\r\n   /**\r\n    * @method objectAlias()\r\n    *\r\n    * return alias of of ABObjects.\r\n    *\r\n    * @return {string}\r\n    */\r\n   objectAlias(objectId) {\r\n      let result = null;\r\n\r\n      Object.keys(this.alias2Obj || {}).forEach((alias) => {\r\n         if (!result && this.alias2Obj[alias] == objectId) {\r\n            result = alias;\r\n         }\r\n      });\r\n\r\n      return result;\r\n   }\r\n\r\n   /**\r\n    * @method objectBase\r\n    * return the origin object\r\n    *\r\n    * @return {ABObject}\r\n    */\r\n   objectBase() {\r\n      if (!this._joins.objectID) return null;\r\n\r\n      return this.AB.objectByID(this._joins.objectID) || null;\r\n   }\r\n\r\n   /**\r\n    * @method objectByAlias()\r\n    * return ABObject search by alias name\r\n    *\r\n    * @param {string} - alias name\r\n    * @return {ABClassObject}\r\n    */\r\n   objectByAlias(alias) {\r\n      var objID = this.alias2Obj[alias];\r\n      if (objID) {\r\n         return this.objects((o) => o.id == objID)[0];\r\n      }\r\n      return null;\r\n   }\r\n\r\n   /**\r\n    * @method objectByID()\r\n    * return ABObject search by ID\r\n    * @param {string} objID\r\n    *        The requested {ABObject}.id of the object to return.\r\n    * @return {ABObject} | null\r\n    */\r\n   objectByID(objID) {\r\n      if (objID) {\r\n         return this.objects((o) => o.id == objID)[0];\r\n      }\r\n      return null;\r\n   }\r\n\r\n   /**\r\n    * @method links()\r\n    *\r\n    * return an array of links for this Query.\r\n    *\r\n    * @return {array}\r\n    */\r\n   links(filter = () => true) {\r\n      return (this._links || []).filter(filter);\r\n   }\r\n\r\n   /**\r\n    * @method importJoins\r\n    * instantiate a set of joins from the given attributes.\r\n    * Our joins contain a set of ABObject URLs that should already be created in our Application.\r\n    * @param {Object} settings The different field urls for each field\r\n    *\t\t\t\t\t{ }\r\n    */\r\n   importJoins(settings) {\r\n      // copy join settings\r\n      this._joins = this.AB.cloneDeep(settings);\r\n\r\n      var uniqueObjectIDs = {};\r\n      // { obj.id : obj.id }\r\n      // a hash of object.ids for all the relevant ABObjects necessary for this\r\n      // ABObjectQuery\r\n\r\n      var newLinks = [];\r\n      // {array} of link definitions\r\n      // build the operating values for this._links\r\n\r\n      let storeObject = (object, alias) => {\r\n         if (!object) return;\r\n\r\n         // var inThere = newObjects.filter(obj => obj.id == object.id && obj.alias == alias ).length > 0;\r\n         // if (!inThere) {\r\n         // newObjects[alias] = object;\r\n         // this.obj2Alias[object.id] = alias;\r\n         this.alias2Obj[alias] = object.id;\r\n         uniqueObjectIDs[object.id] = object.id;\r\n         // newObjects.push({\r\n         // \talias: alias,\r\n         // \tobject: object\r\n         // });\r\n         // }\r\n      };\r\n\r\n      let storeLinks = (links) => {\r\n         (links || []).forEach((link) => {\r\n            // var inThere = newLinks.filter(l => l.fieldID == link.fieldID).length > 0;\r\n            // if (!inThere) {\r\n            newLinks.push(link);\r\n            // }\r\n         });\r\n      };\r\n\r\n      let processJoin = (baseObject, joins) => {\r\n         if (!baseObject) return;\r\n\r\n         (joins || []).forEach((link) => {\r\n            // Convert our saved settings:\r\n            //\t{\r\n            //\t\talias: \"\",\t\t\t\t\t\t\t// the alias name of table - use in SQL command\r\n            //\t\tobjectID: \"uuid\",\t\t\t\t\t// id of the connection object\r\n            //\t\tlinks: [\r\n            //\t\t\t{\r\n            //\t\t\t\talias: \"\",\t\t\t\t\t\t\t// the alias name of table - use in SQL command\r\n            //\t\t\t\tfieldID: \"uuid\",\t\t\t\t\t// uhe connection field of the object we are joining with.\r\n            //\t\t\t\ttype:[left, right, inner, outer]\t// join type: these should match the names of the knex methods\r\n            //\t\t\t\t\t\t=> innerJoin, leftJoin, leftOuterJoin, rightJoin, rightOuterJoin, fullOuterJoin\r\n            //\t\t\t\tlinks: [\r\n            //\t\t\t\t\t...\r\n            //\t\t\t\t]\r\n            //\t\t\t}\r\n            //\t\t]\r\n            //\t},\r\n\r\n            var linkField = baseObject.fieldByID(link.fieldID);\r\n            if (!linkField) {\r\n               this.emit(\"warning\", \"could not resolve our linkField\", {\r\n                  link,\r\n               });\r\n               return;\r\n            }\r\n\r\n            // track our linked object\r\n            var linkObject = this.AB.objectByID(linkField.settings.linkObject);\r\n            if (!linkObject) {\r\n               this.emit(\r\n                  \"warning\",\r\n                  \"could not resolve our linked field -> linkObject\",\r\n                  {\r\n                     link,\r\n                  }\r\n               );\r\n               return;\r\n            }\r\n\r\n            storeObject(linkObject, link.alias);\r\n\r\n            storeLinks(link.links);\r\n\r\n            processJoin(linkObject, link.links);\r\n         });\r\n      };\r\n\r\n      // if (!this._joins.objectURL)\r\n      // \t// TODO: this is old query version\r\n      // \treturn;\r\n\r\n      // store the root object\r\n      var rootObject = this.objectBase();\r\n      if (!rootObject) {\r\n         // this._objects = newObjects;\r\n         this.emit(\"warning\", \"could not resolve our base object\", {\r\n            objectID: this._joins?.objectID,\r\n         });\r\n         return;\r\n      }\r\n\r\n      storeObject(rootObject, \"BASE_OBJECT\");\r\n\r\n      storeLinks(settings.links);\r\n\r\n      processJoin(rootObject, settings.links);\r\n\r\n      // this._objects = newObjects;\r\n      this._links = newLinks;\r\n      this.objectIDs = Object.keys(uniqueObjectIDs);\r\n   }\r\n\r\n   /**\r\n    * @method exportJoins\r\n    * save our list of objects into our format for persisting on the server\r\n    * @param {array} settings\r\n    */\r\n   exportJoins() {\r\n      return this.AB.cloneDeep(this._joins || {});\r\n   }\r\n\r\n   ///\r\n   /// Working with Client Components:\r\n   ///\r\n\r\n   /**\r\n    * @method model\r\n    * return a Model object that will allow you to interact with the data for\r\n    * this ABObjectQuery.\r\n    */\r\n   model() {\r\n      var model = new ABModelQuery(this);\r\n\r\n      // default the context of this model's operations to this object\r\n      model.contextKey(this.constructor.contextKey());\r\n      model.contextValues({ id: this.id }); // the datacollection.id\r\n\r\n      return model;\r\n   }\r\n\r\n   /**\r\n    * @method canFilterObject\r\n    * evaluate the provided object to see if it can directly be filtered by this\r\n    * query.\r\n    * @param {ABObject} object\r\n    * @return {bool}\r\n    */\r\n   canFilterObject(object) {\r\n      if (!object) return false;\r\n\r\n      // I can filter this object if it is one of the objects in my joins\r\n      return (\r\n         this.objects((obj) => {\r\n            return obj.id == object.id;\r\n         }).length > 0\r\n      );\r\n   }\r\n\r\n   /**\r\n    * @method canFilterField\r\n    * evaluate the provided field to see if it can be filtered by this\r\n    * query.\r\n    * @param {ABObject} object\r\n    * @return {bool}\r\n    */\r\n   canFilterField(field) {\r\n      if (!field) return false;\r\n\r\n      // I can filter a field if it's object OR the object it links to can be filtered:\r\n      let object = field.object;\r\n      // Transition:\r\n      // let linkedObject = this.objects(\r\n      //    (obj) => obj.id == field.settings.linkObject\r\n      // )[0];\r\n      var linkedObject = field.datasourceLink;\r\n\r\n      return this.canFilterObject(object) || this.canFilterObject(linkedObject);\r\n   }\r\n\r\n   /**\r\n    * @method urlPointer()\r\n    * return the url pointer that references this object. This url pointer\r\n    * should be able to be used by this.AB.urlResolve() to return\r\n    * this object.\r\n    *\r\n    * @param {boolean} acrossApp - flag to include application id to url\r\n    *\r\n    * @return {string}\r\n    */\r\n   urlPointer(acrossApp) {\r\n      console.error(\r\n         \"ABQueryCore.urlPointer(): Depreciated: Where is this being called?\"\r\n      );\r\n      return this.application.urlQuery(acrossApp) + this.id;\r\n   }\r\n\r\n   /**\r\n    * @method isGroup\r\n    *\r\n    * @return {boolean}\r\n    */\r\n   get isGroup() {\r\n      return this.settings.grouping || false;\r\n   }\r\n\r\n   /**\r\n    * @method isReadOnly\r\n    *\r\n    * @return {boolean}\r\n    */\r\n   get isReadOnly() {\r\n      return true;\r\n   }\r\n\r\n   /**\r\n    * @method isDisabled()\r\n    * check this contains removed objects or fields\r\n    *\r\n    * @return {boolean}\r\n    */\r\n   isDisabled() {\r\n      return this.disabled || false;\r\n   }\r\n\r\n   get workspaceFilterConditions() {\r\n      let filterConditions = super.workspaceFilterConditions;\r\n      if (\r\n         filterConditions == null ||\r\n         filterConditions.rules == null ||\r\n         !filterConditions.rules.length\r\n      ) {\r\n         filterConditions = this.where;\r\n      }\r\n\r\n      return filterConditions;\r\n   }\r\n};\r\n","// import ABApplication from \"./ABApplication\"\r\n\r\nvar ABMLClass = require(\"../platform/ABMLClass\");\r\nconst _concat = require(\"lodash/concat\");\r\n\r\nmodule.exports = class ABProcessCore extends ABMLClass {\r\n   constructor(attributes, AB) {\r\n      super([\"label\"], AB);\r\n\r\n      this.fromValues(attributes);\r\n   }\r\n\r\n   ///\r\n   /// Static Methods\r\n   ///\r\n   /// Available to the Class level object.  These methods are not dependent\r\n   /// on the instance values of the Application.\r\n   ///\r\n\r\n   fromValues(attributes) {\r\n      /*\r\n    {\r\n      id: uuid(),\r\n      name: 'name',\r\n      type: 'xxxxx',\r\n      json: \"{json}\"\r\n    }\r\n    */\r\n      this.id = attributes.id;\r\n      this.name = attributes.name || \"\";\r\n      this.type = attributes.type || \"process\";\r\n      this.xmlDefinition = attributes.xmlDefinition || null;\r\n\r\n      // this.json = attributes.json || null;\r\n      this._elements = {};\r\n      (attributes.elementIDs || []).forEach((eID) => {\r\n         var ele = this.AB.processElementNew(eID, this);\r\n         if (ele) {\r\n            this._elements[eID] = ele;\r\n         }\r\n      });\r\n\r\n      this._connections = attributes.connections || {};\r\n\r\n      super.fromValues(attributes); // perform translation on this object.\r\n      // NOTE: keep this at the end of .fromValues();\r\n\r\n      if (!this.label) {\r\n         this.label = this.name;\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method toObj()\r\n    * properly compile the current state of this ABProcess instance\r\n    * into the values needed for saving to the DB.\r\n    * @return {json}\r\n    */\r\n   toObj() {\r\n      // default label value\r\n      if (!this.label) {\r\n         this.label = this.name;\r\n      }\r\n\r\n      // OP.Multilingual.unTranslate(this, this, [\"label\"]);\r\n      var data = super.toObj();\r\n\r\n      var fieldsToSave = [\"id\", \"name\", \"xmlDefinition\"];\r\n      fieldsToSave.forEach((f) => {\r\n         data[f] = this[f];\r\n      });\r\n\r\n      data.elementIDs = [];\r\n      for (var e in this._elements) {\r\n         data.elementIDs.push(this._elements[e].id);\r\n      }\r\n\r\n      data.connections = this._connections;\r\n\r\n      // data.participantIDs = [];\r\n      // for (var p in this._participants) {\r\n      //     data.participantIDs.push(this._participants[p].id);\r\n      // }\r\n\r\n      return data;\r\n   }\r\n\r\n   //\r\n   // XML Model\r\n   //\r\n\r\n   /**\r\n    * modelDefinition()\r\n    * return the current xml definition for this process\r\n    * @return {string}\r\n    */\r\n   modelDefinition() {\r\n      return this.xmlDefinition;\r\n   }\r\n\r\n   /**\r\n    * modelNew()\r\n    * initialze our xml definition to a new state.\r\n    * @return {string}\r\n    */\r\n   modelNew() {\r\n      this.xmlDefinition = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<bpmn2:definitions xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:bpmn2=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\" xsi:schemaLocation=\"http://www.omg.org/spec/BPMN/20100524/MODEL BPMN20.xsd\" id=\"process-def-${this.id}\" targetNamespace=\"http://bpmn.io/schema/bpmn\">\r\n  <bpmn2:process id=\"Process_1\" isExecutable=\"true\">\r\n    <bpmn2:startEvent id=\"StartEvent_1\"/>\r\n  </bpmn2:process>\r\n  <bpmndi:BPMNDiagram id=\"BPMNDiagram_1\">\r\n    <bpmndi:BPMNPlane id=\"BPMNPlane_1\" bpmnElement=\"Process_1\">\r\n      <bpmndi:BPMNShape id=\"_BPMNShape_StartEvent_2\" bpmnElement=\"StartEvent_1\">\r\n        <dc:Bounds height=\"36.0\" width=\"36.0\" x=\"412.0\" y=\"240.0\"/>\r\n      </bpmndi:BPMNShape>\r\n    </bpmndi:BPMNPlane>\r\n  </bpmndi:BPMNDiagram>\r\n</bpmn2:definitions>`;\r\n\r\n      //// TODO: create a default Start Task here??\r\n   }\r\n\r\n   /**\r\n    * modelUpdate()\r\n    * update our xml definition from the provided description.\r\n    * @param {string} xml  bpmn2 xml definition from our modeler.\r\n    * @return {string}\r\n    */\r\n   modelUpdate(xml) {\r\n      this.xmlDefinition = xml;\r\n   }\r\n\r\n   //\r\n   // Diagram Elements\r\n   //\r\n\r\n   /**\r\n    * connections()\r\n    * return an array of connections that describe the relationships between\r\n    * our process elements.\r\n    * @param {fn} fn an iterator that returns true if the provided element\r\n    *                should be returned.\r\n    * @return [{SimpleConnectionObj}]\r\n    */\r\n   connections(fn) {\r\n      if (!fn)\r\n         fn = () => {\r\n            return true;\r\n         };\r\n      var allConnections = Object.keys(this._connections).map((e) => {\r\n         return this._connections[e];\r\n      });\r\n      return allConnections.filter(fn);\r\n   }\r\n\r\n   /**\r\n    * connectionForDiagramID()\r\n    * return the connection for the given diagram id\r\n    * @param {string} dID\r\n    *        the bpmn:Element diagram id\r\n    */\r\n   connectionForDiagramID(dID) {\r\n      return this.connections((t) => {\r\n         return t.id == dID;\r\n      })[0];\r\n   }\r\n\r\n   /**\r\n    * connectionsIncoming()\r\n    * return the connections that are entering this Element\r\n    * @param {string} dID\r\n    *        the bpmn:Element diagram id\r\n    */\r\n   connectionsIncoming(dID) {\r\n      return this.connections((c) => {\r\n         return c.to == dID;\r\n      });\r\n   }\r\n\r\n   /**\r\n    * connectionsOutgoing()\r\n    * return the connections that are leaving this Element\r\n    * @param {string} dID\r\n    *        the bpmn:Element diagram id\r\n    */\r\n   connectionsOutgoing(dID) {\r\n      return this.connections((c) => {\r\n         return c.from == dID;\r\n      });\r\n   }\r\n\r\n   /**\r\n    * connectionRemove()\r\n    * remove the connection info for the given bpmn:element\r\n    * @param {BMPNDiagramOBJ} element\r\n    *        the {element} returned from the BPMN.io modeling library event.\r\n    */\r\n   connectionRemove(element) {\r\n      delete this._connections[element.id];\r\n   }\r\n\r\n   /**\r\n    * connectionSimplyElement()\r\n    * given a BPMN diagram element, return a simplified object that describes\r\n    * the connection between two elements.\r\n    * @param {BMPNDiagramOBJ} element\r\n    *        the {element} returned from the BPMN.io modeling library event.\r\n    * @return {SimpleConnectionObj}\r\n    *        .id : {string} diagram id of the connection element\r\n    *        .type : {string} the type of connection\r\n    *        .from : {string} the diagram id of the source element\r\n    *        .to : {string} the diagram id of the dest element\r\n    */\r\n   connectionSimplyElement(element) {\r\n      var bo = element.businessObject;\r\n      var from = null;\r\n      if (bo.sourceRef) {\r\n         from = bo.sourceRef.id;\r\n      }\r\n\r\n      var to = null;\r\n      if (bo.targetRef) {\r\n         to = bo.targetRef.id;\r\n      }\r\n\r\n      var connection = {\r\n         id: element.id,\r\n         type: element.type,\r\n         from: from,\r\n         to: to,\r\n      };\r\n      return connection;\r\n   }\r\n\r\n   /**\r\n    * connectionUpsert()\r\n    * add or update the connection information for the given bpmn:element\r\n    * @param {BMPNDiagramOBJ} element\r\n    *        the {element} returned from the BPMN.io modeling library event.\r\n    */\r\n   connectionUpsert(element) {\r\n      var simpleConn = this.connectionSimplyElement(element);\r\n      if (simpleConn.from && simpleConn.to) {\r\n         this._connections[simpleConn.id] = simpleConn;\r\n      } else {\r\n         // this connection is no longer connecting anything thing.\r\n         // it is being removed.\r\n         this.connectionRemove(element);\r\n      }\r\n   }\r\n\r\n   /**\r\n    * elements()\r\n    * return an array of elements that match the given filter (or all elements\r\n    * if no filter is provided).\r\n    * @param {fn} fn an iterator that returns true if the provided element\r\n    *                should be returned.\r\n    * @return {[ABProcessTask, ABProcessParticipant, etc...]}\r\n    */\r\n   elements(fn = () => true) {\r\n      var allElements = Object.keys(this._elements).map((e) => {\r\n         return this._elements[e];\r\n      });\r\n      return allElements.filter(fn);\r\n   }\r\n\r\n   /**\r\n    * elementAdd()\r\n    * insert an element to be tracked by this process.\r\n    * @param {ABProcessElement} element\r\n    *        the full instance of an ABProcessElement to track.\r\n    */\r\n   elementAdd(element) {\r\n      this._elements[element.id || element.diagramID] = element;\r\n   }\r\n\r\n   /**\r\n    * elementForDiagramID()\r\n    * return the object that is tied to the given xml diagram ID.\r\n    * @param {string} dID the diagram ID\r\n    * @return {ABProcess[OBJ]}\r\n    */\r\n   elementForDiagramID(dID) {\r\n      return this.elements((t) => {\r\n         return t.diagramID == dID;\r\n      })[0];\r\n   }\r\n\r\n   /**\r\n    * elementRemove()\r\n    * remove an element from being tracked by this process.\r\n    * @param {obj|ABProcessElement} def\r\n    *        a definition of, or full Object instance of the ABProcessElement\r\n    *        to remove.\r\n    */\r\n   elementRemove(def) {\r\n      delete this._elements[def.id || def.diagramID];\r\n   }\r\n\r\n   /**\r\n    * isTriggeredBy()\r\n    * scan our tasks and see if we have a \"trigger\" task that responds to\r\n    * the provided key.\r\n    * @param {string} key the trigger key\r\n    * @return {bool}\r\n    */\r\n   isTriggeredBy(key) {\r\n      return this.taskForTriggerKey(key) != null;\r\n   }\r\n\r\n   /**\r\n    * connectionPreviousTask()\r\n    * return the ABProcessElement(s) that was a previous Element\r\n    * (eg connects to) this element.\r\n    * @param {ABProcessElement} currElement\r\n    * @return {array}\r\n    */\r\n   connectionPreviousTask(currElement) {\r\n      var elements = [];\r\n      var prevConnections = this.connections((c) => {\r\n         return c.to == currElement.diagramID;\r\n      });\r\n      prevConnections.forEach((c) => {\r\n         var element = this.elements((e) => {\r\n            return e.diagramID == c.from;\r\n         })[0];\r\n         if (element) {\r\n            elements.push(element);\r\n         }\r\n      });\r\n      return elements;\r\n   }\r\n\r\n   /**\r\n    * processData()\r\n    * return an array of avaiable ABObjects that are represented\r\n    * by the data previous ProcessElements are working with.\r\n    * @param {ABProcessElement} currElement\r\n    *        the ABProcessElement that is requesting the data.\r\n    * @return {array} | null\r\n    */\r\n   processData(currElement, params) {\r\n      var tasksToAsk = this.connectionPreviousTask(currElement);\r\n      var values = queryPreviousTasks(tasksToAsk, \"processData\", params, this);\r\n      return values.length > 0\r\n         ? values.length > 1\r\n            ? values\r\n            : values[0]\r\n         : null;\r\n   }\r\n\r\n   /**\r\n    * processDataFields()\r\n    * return an array of avaiable data fields that this element\r\n    * can request from other ProcessElements.\r\n    * Different Process Elements can make data available to other\r\n    * process Elements.\r\n    * @param {ABProcessElement} currElement\r\n    *        the ABProcessElement that is requesting the data.\r\n    * @return {array} | null\r\n    */\r\n   processDataFields(currElement) {\r\n      var tasksToAsk = this.connectionPreviousTask(currElement);\r\n      var fields = queryPreviousTasks(\r\n         tasksToAsk,\r\n         \"processDataFields\",\r\n         null,\r\n         this\r\n      );\r\n      return fields.length > 0 ? fields : null;\r\n   }\r\n\r\n   /**\r\n    * processDataObjects()\r\n    * return an array of avaiable ABObjects that are represented\r\n    * by the data previous ProcessElements are working with.\r\n    * @param {ABProcessElement} currElement\r\n    *        the ABProcessElement that is requesting the data.\r\n    * @return {array} | null\r\n    */\r\n   processDataObjects(currElement) {\r\n      var tasksToAsk = this.connectionPreviousTask(currElement);\r\n      var fields = queryPreviousTasks(\r\n         tasksToAsk,\r\n         \"processDataObjects\",\r\n         null,\r\n         this\r\n      );\r\n      return fields.length > 0 ? fields : null;\r\n   }\r\n\r\n   /**\r\n    * taskForTriggerKey()\r\n    * return one or more tasks that respond to the given trigger key\r\n    * @param {string} key a trigger key\r\n    * @return {[ABProcessTask,...]}\r\n    */\r\n   taskForTriggerKey(key) {\r\n      var trigger = this.elements((t) => {\r\n         return t.triggerKey == key;\r\n      })[0];\r\n      if (trigger) {\r\n         return trigger;\r\n      } else {\r\n         return null;\r\n      }\r\n   }\r\n\r\n   //\r\n   // Participants\r\n   //\r\n\r\n   // /**\r\n   //  * participants()\r\n   //  * return an array of participants that match the given filter (or all tasks\r\n   //  * if no filter is provided).\r\n   //  * @param {fn} fn an iterator that returns true if the provided participants\r\n   //  *                should be returned.\r\n   //  * @return {[ABProcessParticipant,...]}\r\n   //  */\r\n   // participants(fn) {\r\n   //     if (!fn)\r\n   //         fn = () => {\r\n   //             return true;\r\n   //         };\r\n   //     var all = Object.keys(this._participants).map((p) => {\r\n   //         return this._participants[p];\r\n   //     });\r\n   //     return all.filter(fn);\r\n   // }\r\n\r\n   // /**\r\n   //  * participantsForDiagramID()\r\n   //  * return the participant(s) that are tied to the given xml diagram ID.\r\n   //  * @param {string} dID the diagram ID\r\n   //  * @return {[ABProcessParticipant,...]}\r\n   //  */\r\n   // participantsForDiagramID(dID) {\r\n   //     return this.participants((p) => {\r\n   //         return p.diagramID == dID;\r\n   //     });\r\n   // }\r\n};\r\n\r\nvar queryPreviousTasks = (\r\n   list,\r\n   method,\r\n   param,\r\n   process,\r\n   responses,\r\n   processedIDs\r\n) => {\r\n   // recursive fn() to step through our graph and compile\r\n   // results.\r\n   if (typeof responses == \"undefined\") {\r\n      responses = [];\r\n   }\r\n   if (typeof processedIDs == \"undefined\") {\r\n      processedIDs = [];\r\n   }\r\n   if (list.length == 0) {\r\n      return responses;\r\n   } else {\r\n      // get next task\r\n      var task = list.shift();\r\n\r\n      // if we haven't already done task:\r\n      if (processedIDs.indexOf(task.diagramID) == -1) {\r\n         // mark this task as having been processed\r\n         processedIDs.push(task.diagramID);\r\n\r\n         // get any field's it provides\r\n         var value = task[method].apply(task, param);\r\n         if (value === null) value = [];\r\n         responses = _concat(responses, value);\r\n\r\n         // add any previous tasks to our list\r\n         list = _concat(list, process.connectionPreviousTask(task));\r\n      }\r\n\r\n      // process next Task\r\n      return queryPreviousTasks(\r\n         list,\r\n         method,\r\n         param,\r\n         process,\r\n         responses,\r\n         processedIDs\r\n      );\r\n   }\r\n};\r\n","/*\r\n * ABViewManager\r\n *\r\n * An interface for managing the different ABViews available in our AppBuilder.\r\n *\r\n */\r\n\r\nvar AllViews = [\r\n   require(\"../platform/views/ABView\"),\r\n   require(\"../platform/views/ABViewCarousel\"),\r\n   require(\"../platform/views/ABViewChart\"),\r\n   require(\"../platform/views/ABViewChartArea\"),\r\n   require(\"../platform/views/ABViewChartBar\"),\r\n   require(\"../platform/views/ABViewChartLine\"),\r\n   require(\"../platform/views/ABViewChartPie\"),\r\n   require(\"../platform/views/ABViewComment\"),\r\n   require(\"../platform/views/ABViewConditionalContainer\"),\r\n   require(\"../platform/views/ABViewConnectDataFilter\"),\r\n   require(\"../platform/views/ABViewContainer\"),\r\n   require(\"../platform/views/ABViewCSVExporter\"),\r\n   require(\"../platform/views/ABViewCSVImporter\"),\r\n   require(\"../platform/views/ABViewDataview\"),\r\n   require(\"../platform/views/ABViewDocxBuilder\"),\r\n   require(\"../platform/views/ABViewGrid\"),\r\n   require(\"../platform/views/ABViewImage\"),\r\n   require(\"../platform/views/ABViewLabel\"),\r\n   require(\"../platform/views/ABViewLayout\"),\r\n   require(\"../platform/views/ABViewList\"),\r\n   require(\"../platform/views/ABViewMenu\"),\r\n   require(\"../platform/views/ABViewPage\"),\r\n   require(\"../platform/views/ABViewPivot\"),\r\n   require(\"../platform/views/ABViewTab\"),\r\n   require(\"../platform/views/ABViewText\"),\r\n\r\n   //\r\n   // Special Editors\r\n   //\r\n   require(\"../platform/views/ABViewGantt\"),\r\n   require(\"../platform/views/ABViewKanban\"),\r\n   require(\"../platform/views/ABViewReportsManager\"),\r\n\r\n   //\r\n   // Detail Components\r\n   //\r\n   require(\"../platform/views/ABViewDetail\"),\r\n   require(\"../platform/views/ABViewDetailCheckbox\"),\r\n   require(\"../platform/views/ABViewDetailConnect\"),\r\n   require(\"../platform/views/ABViewDetailCustom\"),\r\n   require(\"../platform/views/ABViewDetailImage\"),\r\n   // require(\"../platform/views/ABViewDetailSelectivity\"),\r\n   require(\"../platform/views/ABViewDetailText\"),\r\n   require(\"../platform/views/ABViewDetailTree\"),\r\n\r\n   //\r\n   // Form Components\r\n   //\r\n   require(\"../platform/views/ABViewForm\"),\r\n   require(\"../platform/views/ABViewFormButton\"),\r\n   require(\"../platform/views/ABViewFormCheckbox\"),\r\n   require(\"../platform/views/ABViewFormConnect\"),\r\n   require(\"../platform/views/ABViewFormCustom\"),\r\n   require(\"../platform/views/ABViewFormDatepicker\"),\r\n   require(\"../platform/views/ABViewFormNumber\"),\r\n   require(\"../platform/views/ABViewFormReadonly\"),\r\n   require(\"../platform/views/ABViewFormSelectMultiple\"),\r\n   require(\"../platform/views/ABViewFormSelectSingle\"),\r\n   require(\"../platform/views/ABViewFormTextbox\"),\r\n   require(\"../platform/views/ABViewFormTree\"),\r\n];\r\n\r\n/*\r\n * Views\r\n * A name => ABView  hash of the different ABViews available.\r\n */\r\nvar Views = {};\r\nAllViews.forEach((v) => {\r\n   if (v.default?.common) {\r\n      v = v.default;\r\n   }\r\n   Views[v.common().key] = v;\r\n});\r\n\r\nmodule.exports = class ABViewManagerCore {\r\n   /**\r\n    * @function allViews\r\n    * return all the currently defined ABViews in an array.\r\n    * @return [{ABView},...]\r\n    */\r\n   static allViews(fn = () => true) {\r\n      var views = [];\r\n      for (var v in Views) {\r\n         var V = Views[v];\r\n         if (fn(V)) {\r\n            views.push(V);\r\n         }\r\n      }\r\n      return views;\r\n   }\r\n\r\n   /**\r\n    * @function newView\r\n    * return an instance of an ABView based upon the values.key value.\r\n    * @return {ABView}\r\n    */\r\n   static newView(values, application, parent) {\r\n      parent = parent || null;\r\n\r\n      if (values.key == \"detailselectivity\") {\r\n         values.key = \"detailconnect\";\r\n      }\r\n\r\n      //\t\tif ((values.key) && (Views[values.key])) {\r\n      if (values.key) {\r\n         if (!Views[values.key]) {\r\n            console.error(\r\n               \"!! View[\" +\r\n                  values.key +\r\n                  \"] not yet defined.  Have an ABView instead:\"\r\n            );\r\n            return new Views[\"view\"](values, application, parent);\r\n         }\r\n\r\n         return new Views[values.key](values, application, parent);\r\n      } else {\r\n         var err = new Error(`Unknown view key [${values.key}]`);\r\n         console.error(err); // show the stack.\r\n         console.error({\r\n            error: err,\r\n            values: values,\r\n            application: application,\r\n         });\r\n         return null;\r\n      }\r\n   }\r\n\r\n   static viewClass(key) {\r\n      if (Views[key]) {\r\n         return Views[key];\r\n      }\r\n      console.error(`Unknown View Key[${key}]`);\r\n      return;\r\n   }\r\n};\r\n","const ABComponent = require(\"../platform/ABComponent\");\r\n// const ABObjectQuery = require(\"../platform/ABObjectQuery\");\r\n\r\n/**\r\n *  support get data from objects and queries\r\n */\r\nfunction getFieldVal(rowData, field) {\r\n   if (!field) return null;\r\n   if (!field.columnName) return null;\r\n   var columnName = field.columnName;\r\n\r\n   var value = null;\r\n   if (columnName.indexOf(\".\") > -1) {\r\n      let colName = columnName.split(\".\")[1];\r\n      value = rowData[columnName] || rowData[colName];\r\n   } else {\r\n      value = rowData[columnName];\r\n   }\r\n\r\n   if (typeof value != \"undefined\") {\r\n      return value;\r\n   }\r\n\r\n   // otherwise, this might be a process check where the rowData keys have\r\n   // '[diagramID].[field.id]'\r\n   for (var k in rowData) {\r\n      var key = k.split(\".\")[1];\r\n      if (key && key == field.id) {\r\n         value = rowData[k];\r\n      }\r\n   }\r\n   return value;\r\n}\r\n\r\nfunction getConnectFieldValue(rowData, field) {\r\n   let connectedVal = \"\";\r\n\r\n   if (rowData) {\r\n      let relationName = field.relationName();\r\n      if (rowData[relationName]) {\r\n         connectedVal =\r\n            (field.indexField\r\n               ? rowData[relationName][field.indexField.columnName]\r\n               : null) ?? // custom index\r\n            (field.indexField2\r\n               ? rowData[relationName][field.indexField2.columnName]\r\n               : null) ?? // custom index 2\r\n            rowData[relationName].id ??\r\n            rowData[relationName];\r\n      } else {\r\n         let fieldVal = getFieldVal(rowData, field);\r\n         if (fieldVal != null) {\r\n            connectedVal = fieldVal;\r\n         }\r\n      }\r\n   }\r\n   return connectedVal;\r\n}\r\n\r\nmodule.exports = class FilterComplexCore extends ABComponent {\r\n   constructor(idBase, AB) {\r\n      idBase = idBase || \"ab_filter_complex\";\r\n\r\n      if (typeof AB === \"undefined\") {\r\n         console.error(\"FilterComplexCore(): being called without an AB!\");\r\n      }\r\n\r\n      super(null, idBase, AB);\r\n\r\n      this.Account = { username: \"??\" };\r\n      this._settings = {};\r\n      this.condition = {};\r\n      // var batchName; // we need to revert to this default when switching away from a in/by query field\r\n\r\n      this._QueryFields = [];\r\n      this._Fields;\r\n\r\n      // internal business logic\r\n      var _logic = (this._logic = {\r\n         callbacks: {\r\n            onChange: () => {},\r\n         },\r\n\r\n         removeHtmlTags: function (text) {\r\n            var div = document.createElement(\"div\");\r\n            div.innerHTML = text;\r\n\r\n            return div.textContent || div.innerText || \"\";\r\n         },\r\n      });\r\n\r\n      // Interface methods for parent component:\r\n      // this.objectLoad = _logic.objectLoad;\r\n      // this.viewLoad = _logic.viewLoad;\r\n      // this.setValue = _logic.setValue;\r\n      // this.isValid = _logic.isValid;\r\n   }\r\n\r\n   init(options) {\r\n      if (options?.showObjectName) {\r\n         this._settings.showObjectName = options.showObjectName;\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method isValid\r\n    * validate the row data is valid filter condition\r\n    *\r\n    * @param rowData {Object} - data row\r\n    */\r\n   isValid(rowData) {\r\n      var condition = this.condition;\r\n      var _logic = this._logic;\r\n\r\n      // If no conditions, then return true\r\n      if (\r\n         condition == null ||\r\n         condition.rules == null ||\r\n         condition.rules.length == 0\r\n      )\r\n         return true;\r\n\r\n      if (rowData == null) return false;\r\n\r\n      var result = condition.glue === \"and\" ? true : false;\r\n\r\n      condition.rules.forEach((filter) => {\r\n         if (!filter.key || !filter.rule) return;\r\n\r\n         var fieldInfo = (this._Fields || []).filter(\r\n            (f) => f.id == filter.key\r\n         )[0];\r\n         if (!fieldInfo) return;\r\n\r\n         var condResult;\r\n\r\n         // Filters that have \"this_object\" don't have a fieldInfo.key, so in that case,\r\n         // define a special .key == \"this_object\"\r\n         var ruleFieldType = fieldInfo.key;\r\n         if (typeof fieldInfo.key == \"undefined\") {\r\n            if (fieldInfo.id != \"this_object\") {\r\n               fieldInfo.key = \"connectField\"; // if you are looking at the parent object it won't have a key to analyze\r\n               ruleFieldType = fieldInfo.key;\r\n            } else ruleFieldType = \"this_object\";\r\n         }\r\n         let value;\r\n\r\n         if (fieldInfo.relationName) {\r\n            value = getConnectFieldValue(rowData, fieldInfo);\r\n         } else {\r\n            value = getFieldVal(rowData, fieldInfo);\r\n         }\r\n\r\n         switch (ruleFieldType) {\r\n            case \"string\":\r\n            case \"LongText\":\r\n            case \"email\":\r\n               if (value == null) value = \"\";\r\n\r\n               condResult = this.textValid(value, filter.rule, filter.value);\r\n               break;\r\n            case \"date\":\r\n            case \"datetime\":\r\n               condResult = this.dateValid(value, filter.rule, filter.value);\r\n               break;\r\n            case \"number\":\r\n               condResult = this.numberValid(value, filter.rule, filter.value);\r\n               break;\r\n            case \"list\":\r\n               condResult = this.listValid(value, filter.rule, filter.value);\r\n               break;\r\n            case \"boolean\":\r\n               condResult = this.booleanValid(value, filter.rule, filter.value);\r\n               break;\r\n            case \"user\":\r\n               condResult = this.userValid(value, filter.rule, filter.value);\r\n               break;\r\n            case \"connectField\":\r\n            case \"connectObject\":\r\n               condResult = this.connectFieldValid(\r\n                  rowData,\r\n                  fieldInfo,\r\n                  filter.rule,\r\n                  filter.value\r\n               );\r\n               break;\r\n            case \"this_object\":\r\n               condResult = _logic.thisObjectValid(\r\n                  rowData,\r\n                  filter.rule,\r\n                  filter.value\r\n               );\r\n               break;\r\n         }\r\n\r\n         if (condition.glue === \"and\") {\r\n            result = result && condResult;\r\n         } else {\r\n            result = result || condResult;\r\n         }\r\n      });\r\n\r\n      return result;\r\n   }\r\n\r\n   textValid(value, rule, compareValue) {\r\n      var result = false;\r\n\r\n      value = value.trim().toLowerCase();\r\n      value = this._logic.removeHtmlTags(value); // remove html tags - rich text editor\r\n\r\n      compareValue = compareValue.trim().toLowerCase().replace(/  +/g, \" \");\r\n\r\n      // support \"john smith\" => \"john\" OR/AND \"smith\"\r\n      var compareArray = compareValue.split(\" \");\r\n\r\n      switch (rule) {\r\n         case \"contains\":\r\n            compareArray.forEach((val) => {\r\n               if (result == false)\r\n                  // OR\r\n                  result = value.indexOf(val) > -1;\r\n            });\r\n            break;\r\n         case \"not_contains\":\r\n            result = true;\r\n            compareArray.forEach((val) => {\r\n               if (result == true)\r\n                  // AND\r\n                  result = value.indexOf(val) < 0;\r\n            });\r\n            break;\r\n         case \"equals\":\r\n            compareArray.forEach((val) => {\r\n               if (result == false)\r\n                  // OR\r\n                  result = value == val;\r\n            });\r\n            break;\r\n         case \"not_equal\":\r\n            result = true;\r\n            compareArray.forEach((val) => {\r\n               if (result == true)\r\n                  // AND\r\n                  result = value != val;\r\n            });\r\n            break;\r\n         case \"is_empty\":\r\n            result = value == \"\" || value == null;\r\n            break;\r\n         case \"is_not_empty\":\r\n            result = value != \"\" && value != null;\r\n            break;\r\n         default:\r\n            result = this.queryFieldValid(value, rule, compareValue);\r\n            break;\r\n      }\r\n\r\n      return result;\r\n   }\r\n\r\n   dateValid(value, rule, compareValue) {\r\n      var result = false;\r\n\r\n      if (!(value instanceof Date)) value = new Date(value);\r\n\r\n      if (!(compareValue instanceof Date))\r\n         compareValue = new Date(compareValue);\r\n\r\n      switch (rule) {\r\n         case \"less\":\r\n            result = value < compareValue;\r\n            break;\r\n         case \"greater\":\r\n            result = value > compareValue;\r\n            break;\r\n         case \"less_or_equal\":\r\n            result = value <= compareValue;\r\n            break;\r\n         case \"greater_or_equal\":\r\n            result = value >= compareValue;\r\n            break;\r\n         default:\r\n            result = this.queryFieldValid(value, rule, compareValue);\r\n            break;\r\n      }\r\n\r\n      return result;\r\n   }\r\n\r\n   numberValid(value, rule, compareValue) {\r\n      var result = false;\r\n\r\n      value = Number(value);\r\n      compareValue = Number(compareValue);\r\n\r\n      switch (rule) {\r\n         case \"equals\":\r\n            result = value == compareValue;\r\n            break;\r\n         case \"not_equal\":\r\n            result = value != compareValue;\r\n            break;\r\n         case \"less\":\r\n            result = value < compareValue;\r\n            break;\r\n         case \"greater\":\r\n            result = value > compareValue;\r\n            break;\r\n         case \"less_or_equal\":\r\n            result = value <= compareValue;\r\n            break;\r\n         case \"greater_or_equal\":\r\n            result = value >= compareValue;\r\n            break;\r\n         default:\r\n            result = this.queryFieldValid(value, rule, compareValue);\r\n            break;\r\n      }\r\n\r\n      return result;\r\n   }\r\n\r\n   listValid(value, rule, compareValue) {\r\n      var result = false;\r\n\r\n      // compareValue = compareValue.toLowerCase();\r\n\r\n      if (!Array.isArray(compareValue)) compareValue = [compareValue];\r\n\r\n      switch (rule) {\r\n         case \"equals\":\r\n            if (value) result = compareValue.indexOf(value) > -1;\r\n            break;\r\n         case \"not_equal\":\r\n            if (value) result = compareValue.indexOf(value) < 0;\r\n            else result = true;\r\n            break;\r\n         default:\r\n            result = this.queryFieldValid(value, rule, compareValue);\r\n            break;\r\n      }\r\n\r\n      return result;\r\n   }\r\n\r\n   booleanValid(value, rule, compareValue) {\r\n      var result = false;\r\n\r\n      switch (rule) {\r\n         case \"equals\":\r\n            result = value == compareValue;\r\n            break;\r\n         default:\r\n            result = this.queryFieldValid(value, rule, compareValue);\r\n            break;\r\n      }\r\n\r\n      return result;\r\n   }\r\n\r\n   userValid(value, rule, compareValue) {\r\n      if (!value) return false;\r\n      var result = false;\r\n\r\n      // if (Array.isArray(value)) value = [value];\r\n\r\n      switch (rule) {\r\n         case \"is_current_user\":\r\n            result = value == this.Account.username;\r\n            break;\r\n         case \"is_not_current_user\":\r\n            result = value != this.Account.username;\r\n            break;\r\n         case \"contain_current_user\":\r\n            if (!Array.isArray(value)) value = [value];\r\n\r\n            result =\r\n               value.filter((v) => (v.username || v) == this.Account.username)\r\n                  .length > 0;\r\n            break;\r\n         case \"not_contain_current_user\":\r\n            if (!Array.isArray(value)) value = [value];\r\n\r\n            result =\r\n               value.filter((v) => (v.username || v) == this.Account.username)\r\n                  .length < 1;\r\n            break;\r\n         case \"equals\":\r\n            result = value.indexOf(compareValue) > -1;\r\n            break;\r\n         case \"not_equal\":\r\n            result = value.indexOf(compareValue) < 0;\r\n            break;\r\n         default:\r\n            result = this.queryFieldValid(value, rule, compareValue);\r\n            break;\r\n      }\r\n\r\n      return result;\r\n   }\r\n\r\n   queryFieldValid(rowData, rule, compareValue) {\r\n      var result = false;\r\n\r\n      if (!compareValue) return result;\r\n\r\n      // queryId:fieldId\r\n      var queryId = compareValue.split(\":\")[0],\r\n         fieldId = compareValue.split(\":\")[1];\r\n\r\n      // if no query\r\n      var query = this.AB.queries((q) => q.id == queryId)[0];\r\n      if (!query) return result;\r\n\r\n      // if no field\r\n      var field = query.fields((f) => f.id == fieldId)[0];\r\n      if (!field) return result;\r\n\r\n      let qIdBase = \"{idBase}-query-field-{id}\"\r\n            .replace(\"{idBase}\", this.idBase)\r\n            .replace(\"{id}\", query.id),\r\n         inQueryFieldFilter = new this.constructor(qIdBase, this.AB);\r\n      inQueryFieldFilter.Account = this.Account;\r\n      inQueryFieldFilter.fieldsLoad(query.fields());\r\n      inQueryFieldFilter.setValue(query.workspaceFilterConditions);\r\n\r\n      switch (rule) {\r\n         case \"in_query_field\":\r\n            result = inQueryFieldFilter.isValid(rowData);\r\n            break;\r\n         case \"not_in_query_field\":\r\n            result = !inQueryFieldFilter.isValid(rowData);\r\n            break;\r\n      }\r\n\r\n      return result;\r\n   }\r\n\r\n   inQueryValid(rowData, rule, compareValue) {\r\n      let result = false;\r\n\r\n      if (!compareValue || !this.AB) return result;\r\n\r\n      // if no query\r\n      let query = this.AB.queries((q) => q.id == compareValue)[0];\r\n      if (!query) return result;\r\n\r\n      let qIdBase = \"{idBase}-query-{id}\"\r\n            .replace(\"{idBase}\", this.idBase)\r\n            .replace(\"{id}\", query.id),\r\n         inQueryFilter = new this.constructor(qIdBase, this.AB);\r\n      inQueryFilter.Account = this.Account;\r\n      inQueryFilter.fieldsLoad(query.fields());\r\n      inQueryFilter.setValue(query.workspaceFilterConditions);\r\n\r\n      switch (rule) {\r\n         case \"in_query\":\r\n            result = inQueryFilter.isValid(rowData);\r\n            break;\r\n         case \"not_in_query\":\r\n            result = !inQueryFilter.isValid(rowData);\r\n            break;\r\n      }\r\n\r\n      return result;\r\n   }\r\n\r\n   dataCollectionValid(value, rule, compareValue) {\r\n      var result = false;\r\n\r\n      if (!compareValue) return result;\r\n\r\n      let dc = this.AB.datacollections((d) => d.id == compareValue)[0];\r\n\r\n      switch (rule) {\r\n         case \"in_data_collection\":\r\n            if (!dc) return false;\r\n\r\n            result = dc.getData((d) => d.id == value.id).length > 0;\r\n            break;\r\n         case \"not_in_data_collection\":\r\n            if (!dc) return true;\r\n\r\n            result = dc.getData((d) => d.id == value.id).length < 1;\r\n            break;\r\n      }\r\n\r\n      return result;\r\n   }\r\n\r\n   connectFieldValid(rowData, field, rule, compareValue) {\r\n      let relationName = field.relationName();\r\n\r\n      let connectedVal = \"\";\r\n\r\n      if (rowData) {\r\n         if (rowData[relationName]) {\r\n            connectedVal = (\r\n               (field.indexField\r\n                  ? rowData[relationName][field.indexField.columnName]\r\n                  : null) ?? // custom index\r\n               (field.indexField2\r\n                  ? rowData[relationName][field.indexField2.columnName]\r\n                  : null) ?? // custom index 2\r\n               rowData[relationName].id ??\r\n               rowData[relationName]\r\n            )\r\n               .toString()\r\n               .toLowerCase();\r\n         } else {\r\n            let fieldVal = getFieldVal(rowData, field);\r\n            if (fieldVal != null) {\r\n               connectedVal = fieldVal;\r\n            }\r\n         }\r\n      }\r\n\r\n      let compareValueLowercase = (compareValue || \"\").toLowerCase();\r\n\r\n      switch (rule) {\r\n         case \"contains\":\r\n            return connectedVal.toString().indexOf(compareValueLowercase) > -1;\r\n         case \"not_contains\":\r\n            return connectedVal.toString().indexOf(compareValueLowercase) == -1;\r\n         case \"equals\":\r\n            return connectedVal == compareValueLowercase;\r\n         case \"not_equal\":\r\n            return connectedVal != compareValueLowercase;\r\n         case \"in_query\":\r\n         case \"not_in_query\":\r\n            return this.inQueryValid(rowData[relationName], rule, compareValue);\r\n         case \"is_current_user\":\r\n         case \"is_not_current_user\":\r\n         case \"contain_current_user\":\r\n         case \"not_contain_current_user\":\r\n            return this.userValid(connectedVal, rule, compareValue);\r\n         case \"is_empty\":\r\n            return (\r\n               rowData[relationName] == null ||\r\n               rowData[relationName].length < 1 ||\r\n               rowData[relationName] == \"\"\r\n            );\r\n         case \"is_not_empty\":\r\n            return (\r\n               rowData[relationName] != null &&\r\n               ((Array.isArray(rowData[relationName]) &&\r\n                  rowData[relationName].length > 0) ||\r\n                  rowData[relationName] != \"\")\r\n            );\r\n         case \"in_data_collection\":\r\n         case \"not_in_data_collection\":\r\n            return this.dataCollectionValid(connectedVal, rule, compareValue);\r\n      }\r\n   }\r\n\r\n   thisObjectValid(rowData, rule, compareValue) {\r\n      let result = false;\r\n\r\n      switch (rule) {\r\n         // if in_query condition\r\n         case \"in_query\":\r\n         case \"not_in_query\":\r\n            if (!this._Object) return result;\r\n\r\n            // if > 1 copy of this object in query ==> Error!\r\n            let query = this.AB.queries((q) => q.id == compareValue)[0];\r\n            if (!query) return result;\r\n\r\n            var listThisObjects = query.objects((o) => {\r\n               return o.id == this._Object.id;\r\n            });\r\n            if (listThisObjects.length > 1) {\r\n               // Alternative: choose the 1st instance of this object in the query, and make the compare on that.\r\n               // Be sure to warn the developer of the limitiations of an \"this_object\" \"in_query\"  when query has > 1 copy of\r\n               // this object as part of the query.\r\n\r\n               console.error(\r\n                  \"HEY!  Can't compare this_object to a query that has > 1 copy of that object!\"\r\n               );\r\n               return true;\r\n            }\r\n\r\n            // get this object's alias from the query\r\n            var alias = query.objectAlias(this._Object.id);\r\n\r\n            // make sure all my columns in rowData are prefixed by \"alias\".columnName\r\n            var newRowData = {};\r\n            Object.keys(rowData).forEach((key) => {\r\n               newRowData[`${alias}.${key}`] = rowData[key];\r\n            });\r\n\r\n            // then pass this on to the _logic.queryValid();\r\n            return this.inQueryValid(newRowData, rule, compareValue);\r\n\r\n         // if in_datacollection condition\r\n         case \"in_data_collection\":\r\n         case \"not_in_data_collection\":\r\n            // send rowData, null to datacollectionValid()\r\n            return this.dataCollectionValid(rowData, rule, compareValue);\r\n      }\r\n   }\r\n\r\n   processFieldsLoad(processFields = []) {\r\n      if (processFields && !Array.isArray(processFields)) {\r\n         processFields = [processFields];\r\n      }\r\n      this._ProcessFields = processFields;\r\n\r\n      this.uiInit();\r\n   }\r\n\r\n   /**\r\n    * @method fieldsLoad\r\n    * set fields\r\n    *\r\n    * @param array {ABField}\r\n    * @param object {ABObject} [optional]\r\n    */\r\n   fieldsLoad(fields = [], object = null) {\r\n      this._Fields = fields.filter(\r\n         (f) => f && f.fieldIsFilterable && f.fieldIsFilterable()\r\n      );\r\n      this._QueryFields = this._Fields\r\n         ? this._Fields.filter((f) => f && f.isConnection && f.key != \"user\")\r\n         : [];\r\n\r\n      // insert our 'this object' entry if an Object was given.\r\n      if (object) {\r\n         this._Object = object;\r\n\r\n         // insert our uuid in addition to the rest of our fields\r\n         let thisObjOption = {\r\n            id: \"this_object\",\r\n            label: object.label,\r\n            key: \"uuid\",\r\n         };\r\n\r\n         // If object is query ,then should define default alias: \"BASE_OBJECT\"\r\n         // NOTE: Could not reference ABObjectQuery because recursive looping reference\r\n         // if (object instanceof ABObjectQuery) {\r\n         if (object.viewName) {\r\n            thisObjOption.alias = \"BASE_OBJECT\";\r\n         }\r\n\r\n         this._Fields.unshift(thisObjOption);\r\n      } else {\r\n         delete this._Object;\r\n      }\r\n   }\r\n\r\n   fieldsToQB() {\r\n      /*\r\n      let mapTypes = {\r\n         LongText: \"string\",\r\n         email: \"string\",\r\n         datetime: \"date\",\r\n         connectField: \"connectObject\"\r\n      };\r\n\r\n      var fields = this._Fields.map((f) => {\r\n         // Label\r\n         let label = f.label;\r\n         if (this._settings.showObjectName && f.object && f.object.label)\r\n            label = `${f.object.label}.${f.label}`;\r\n\r\n         // Type\r\n         let type = f.key || f.type;\r\n         if (mapTypes[type]) type = mapTypes[type];\r\n\r\n         // the format for webix querybuilder:\r\n         // { id  value:\"label\" type }\r\n         //      type: {string} the type of value it is.\r\n         //            since we want to tailor value selectors per field,\r\n         //            we will make a unique type for each field. and then\r\n         //            add value selectors for that specific .type\r\n         return { id: f.columnName, value: label, type: type };\r\n      });\r\n      return fields;\r\n      */\r\n\r\n      let fields = (this._Fields || []).map((f) => {\r\n         let label = f.label;\r\n         if (this._settings.showObjectName && f.object && f.object.label)\r\n            label = `${f.object.label}.${f.label}`;\r\n\r\n         let type = \"text\"; // \"text\", \"number\", \"date\"\r\n         let conditions = [];\r\n         switch (f.key) {\r\n            case \"boolean\":\r\n               conditions = conditions\r\n                  .concat(this.fieldsAddFiltersBoolean(f))\r\n                  .concat(this.fieldsAddFiltersQueryField(f));\r\n               break;\r\n            case \"connectObject\":\r\n               conditions = this.fieldsAddFiltersQuery(f);\r\n               break;\r\n            case \"date\":\r\n            case \"datetime\":\r\n               type = \"date\";\r\n               conditions = conditions\r\n                  .concat(this.fieldsAddFiltersDate(f))\r\n                  .concat(this.fieldsAddFiltersQueryField(f));\r\n               break;\r\n            case \"calculate\":\r\n            case \"formula\":\r\n            case \"number\":\r\n               type = \"number\";\r\n               conditions = conditions\r\n                  .concat(this.fieldsAddFiltersNumber(f))\r\n                  .concat(this.fieldsAddFiltersQueryField(f));\r\n               break;\r\n            case \"string\":\r\n            case \"LongText\":\r\n            case \"email\":\r\n            case \"AutoIndex\":\r\n               conditions = conditions\r\n                  .concat(this.fieldsAddFiltersString(f))\r\n                  .concat(this.fieldsAddFiltersQueryField(f));\r\n               break;\r\n            case \"list\":\r\n               conditions = conditions\r\n                  .concat(this.fieldsAddFiltersList(f))\r\n                  .concat(this.fieldsAddFiltersQueryField(f));\r\n               break;\r\n            case \"user\":\r\n               conditions = conditions\r\n                  .concat(this.fieldsAddFiltersUser(f))\r\n                  .concat(this.fieldsAddFiltersQueryField(f));\r\n               break;\r\n            case \"uuid\":\r\n               conditions = conditions.concat(\r\n                  this.fieldsAddFiltersThisObject(f)\r\n               );\r\n               break;\r\n            default:\r\n               type = \"text\";\r\n               break;\r\n         }\r\n\r\n         if (this._isRecordRule) {\r\n            conditions = conditions.concat(this.fieldsAddFiltersRecordRule(f));\r\n         }\r\n\r\n         let isProcessField =\r\n            (this._ProcessFields || []).filter((processField) => {\r\n               if (!processField) return false;\r\n\r\n               if (processField.field) {\r\n                  return processField.field.id == f.id;\r\n               } else if (processField.key) {\r\n                  // uuid\r\n                  let processFieldId = processField.key.split(\".\").pop();\r\n                  return processFieldId == f.id || processFieldId == f.key;\r\n               }\r\n            }).length > 0;\r\n\r\n         if (isProcessField) {\r\n            conditions = conditions.concat(this.fieldsAddFiltersContext(f));\r\n         }\r\n\r\n         // let type = f.id; // the default unique identifier for our filter types\r\n         // if (f.id == \"this_object\") {\r\n         //    // if this happens to be our special \"this_object\" field, then our\r\n         //    // type needs to be the \"uuid\" type in the definition:\r\n         //    type = f.type;\r\n         // }\r\n\r\n         // the format for webix querybuilder:\r\n         // { id  value:\"label\" type }\r\n         //      type: {string} the type of value it is.\r\n         //            since we want to tailor value selectors per field,\r\n         //            we will make a unique type for each field. and then\r\n         //            add value selectors for that specific .type\r\n         return {\r\n            id: f.columnName || f.id,\r\n            value: label,\r\n            type: type,\r\n            conditions: conditions,\r\n            // format: () => {},\r\n         };\r\n      });\r\n\r\n      // !!! Process Fields of ABProcess\r\n      // https://github.com/digi-serve/appbuilder_class_core/blob/master/FilterComplexCore.js#L636\r\n      // https://github.com/digi-serve/appbuilder_class_core/blob/master/FilterComplexCore.js#L564\r\n      // (this._ProcessFields || [])\r\n      //    // if there is no .field, it is probably an embedded special field\r\n      //    .filter((pField) => pField.field == null)\r\n      //    .forEach((pField) => {\r\n      //       // like: .uuid\r\n      //       let key = pField.key.split(\".\").pop();\r\n      //       if (key == \"uuid\" && this._Object) {\r\n      //          fields.unshift({\r\n      //             id: pField.key,\r\n      //             value: this._Object.label,\r\n      //             type: \"text\",\r\n      //             conditions: this.fieldsAddFiltersContext(),\r\n      //          });\r\n      //       }\r\n      //    });\r\n\r\n      return fields;\r\n   }\r\n\r\n   fieldsAddFiltersDate(field) {\r\n      let dateConditions = {\r\n         less: this.labels.component.beforeCondition,\r\n         greater: this.labels.component.afterCondition,\r\n         less_or_equal: this.labels.component.onOrBeforeCondition,\r\n         greater_or_equal: this.labels.component.onOrAfterCondition,\r\n         less_current: this.labels.component.beforeCurrentCondition,\r\n         greater_current: this.labels.component.afterCurrentCondition,\r\n         less_or_equal_current:\r\n            this.labels.component.onOrBeforeCurrentCondition,\r\n         greater_or_equal_current:\r\n            this.labels.component.onOrAfterCurrentCondition,\r\n         last_days: this.labels.component.onLastDaysCondition,\r\n         next_days: this.labels.component.onNextDaysCondition,\r\n      };\r\n\r\n      let result = [];\r\n\r\n      for (let condKey in dateConditions) {\r\n         result.push({\r\n            id: condKey,\r\n            value: dateConditions[condKey],\r\n            batch: \"date\",\r\n            handler: (a, b) => this.dateValid(a, condKey, b),\r\n         });\r\n      }\r\n\r\n      return result;\r\n   }\r\n\r\n   fieldsAddFiltersString(field) {\r\n      let stringConditions = {\r\n         contains: {\r\n            batch: \"text\",\r\n            label: this.labels.component.containsCondition,\r\n         },\r\n         not_contains: {\r\n            batch: \"text\",\r\n            label: this.labels.component.notContainsCondition,\r\n         },\r\n         equals: {\r\n            batch: \"text\",\r\n            label: this.labels.component.isCondition,\r\n         },\r\n         not_equal: {\r\n            batch: \"text\",\r\n            label: this.labels.component.isNotCondition,\r\n         },\r\n         is_empty: {\r\n            batch: \"none\",\r\n            label: this.labels.component.isEmpty,\r\n         },\r\n         is_not_empty: {\r\n            batch: \"none\",\r\n            label: this.labels.component.isNotEmpty,\r\n         },\r\n      };\r\n\r\n      let result = [];\r\n\r\n      for (let condKey in stringConditions) {\r\n         result.push({\r\n            id: condKey,\r\n            value: stringConditions[condKey].label,\r\n            batch: stringConditions[condKey].batch,\r\n            handler: (a, b) => this.textValid(a, condKey, b),\r\n         });\r\n      }\r\n\r\n      return result;\r\n   }\r\n\r\n   fieldsAddFiltersNumber(field) {\r\n      let numberConditions = {\r\n         equals: this.labels.component.equalCondition,\r\n         not_equal: this.labels.component.notEqualCondition,\r\n         less: this.labels.component.lessThanCondition,\r\n         greater: this.labels.component.moreThanCondition,\r\n         less_or_equal: this.labels.component.lessThanOrEqualCondition,\r\n         greater_or_equal: this.labels.component.moreThanOrEqualCondition,\r\n      };\r\n\r\n      let result = [];\r\n\r\n      for (let condKey in numberConditions) {\r\n         result.push({\r\n            id: condKey,\r\n            value: numberConditions[condKey],\r\n            batch: \"text\",\r\n            handler: (a, b) => this.numberValid(a, condKey, b),\r\n         });\r\n      }\r\n\r\n      return result;\r\n   }\r\n\r\n   fieldsAddFiltersList(field) {\r\n      let listConditions = {\r\n         equals: this.labels.component.equalListCondition,\r\n         not_equal: this.labels.component.notEqualListCondition,\r\n      };\r\n\r\n      let result = [];\r\n\r\n      for (let condKey in listConditions) {\r\n         result.push({\r\n            id: condKey,\r\n            value: listConditions[condKey],\r\n            batch: \"list\",\r\n            handler: (a, b) => this.listValid(a, condKey, b),\r\n         });\r\n      }\r\n\r\n      return result;\r\n   }\r\n\r\n   fieldsAddFiltersBoolean(field) {\r\n      let booleanConditions = {\r\n         equals: this.labels.component.equalListCondition,\r\n      };\r\n\r\n      let result = [];\r\n\r\n      for (let condKey in booleanConditions) {\r\n         result.push({\r\n            id: condKey,\r\n            value: booleanConditions[condKey],\r\n            batch: \"boolean\",\r\n            handler: (a, b) => this.booleanValid(a, condKey, b),\r\n         });\r\n      }\r\n\r\n      return result;\r\n   }\r\n\r\n   fieldsAddFiltersUser(field) {\r\n      let userConditions = {\r\n         is_current_user: {\r\n            batch: \"none\",\r\n            label: this.labels.component.isCurrentUserCondition,\r\n         },\r\n         is_not_current_user: {\r\n            batch: \"none\",\r\n            label: this.labels.component.isNotCurrentUserCondition,\r\n         },\r\n         contain_current_user: {\r\n            batch: \"none\",\r\n            label: this.labels.component.containsCurrentUserCondition,\r\n         },\r\n         not_contain_current_user: {\r\n            batch: \"none\",\r\n            label: this.labels.component.notContainsCurrentUserCondition,\r\n         },\r\n         equals: {\r\n            batch: \"user\",\r\n            label: this.labels.component.equalListCondition,\r\n         },\r\n         not_equal: {\r\n            batch: \"user\",\r\n            label: this.labels.component.notEqualListCondition,\r\n         },\r\n      };\r\n\r\n      let result = [];\r\n\r\n      for (let condKey in userConditions) {\r\n         result.push({\r\n            id: condKey,\r\n            value: userConditions[condKey].label,\r\n            batch: userConditions[condKey].batch,\r\n            handler: (a, b) => this.userValid(a, condKey, b),\r\n         });\r\n      }\r\n\r\n      return result;\r\n   }\r\n\r\n   fieldsAddFiltersQuery(field) {\r\n      let connectConditions = {\r\n         in_query: {\r\n            batch: \"query\",\r\n            label: this.labels.component.inQuery,\r\n            handler: (a, b) => this.inQueryValid(a, \"in_query\", b),\r\n         },\r\n         not_in_query: {\r\n            batch: \"query\",\r\n            label: this.labels.component.notInQuery,\r\n            handler: (a, b) => this.inQueryValid(a, \"not_in_query\", b),\r\n         },\r\n         same_as_user: {\r\n            batch: \"user\",\r\n            label: this.labels.component.sameAsUser,\r\n            handler: (a, b) => this.userValid(a, \"same_as_user\", b),\r\n         },\r\n         not_same_as_user: {\r\n            batch: \"user\",\r\n            label: this.labels.component.notSameAsUser,\r\n            handler: (a, b) => this.userValid(a, \"not_same_as_user\", b),\r\n         },\r\n         in_data_collection: {\r\n            batch: \"datacollection\",\r\n            label: this.labels.component.inDataCollection,\r\n            handler: (a, b) =>\r\n               this.dataCollectionValid(a, \"in_data_collection\", b),\r\n         },\r\n         not_in_data_collection: {\r\n            batch: \"datacollection\",\r\n            label: this.labels.component.notInDataCollection,\r\n            handler: (a, b) =>\r\n               this.dataCollectionValid(a, \"not_in_data_collection\", b),\r\n         },\r\n         // TODO\r\n         // contains: this.labels.component.containsCondition,\r\n         // not_contains: this.labels.component.notContainCondition,\r\n         // equals: this.labels.component.isCondition,\r\n         // not_equal: this.labels.component.isNotCondition\r\n      };\r\n\r\n      let result = [];\r\n\r\n      for (let condKey in connectConditions) {\r\n         result.push({\r\n            id: condKey,\r\n            value: connectConditions[condKey].label,\r\n            batch: connectConditions[condKey].batch,\r\n            handler: connectConditions[condKey].handler,\r\n         });\r\n      }\r\n\r\n      // Add filter options to Custom index\r\n      if (\r\n         field.settings.isCustomFK &&\r\n         // 1:M\r\n         ((field.settings.linkType == \"one\" &&\r\n            field.settings.linkViaType == \"many\") ||\r\n            // 1:1 isSource = true\r\n            (field.settings.linkType == \"one\" &&\r\n               field.settings.linkViaType == \"one\" &&\r\n               field.settings.isSource))\r\n      ) {\r\n         const stringResults = this.fieldsAddFiltersString(field);\r\n         result = stringResults.concat(result);\r\n      }\r\n\r\n      return result;\r\n   }\r\n\r\n   fieldsAddFiltersQueryField(field) {\r\n      let queryFieldConditions = {\r\n         in_query_field: this.labels.component.inQueryField,\r\n         not_in_query_field: this.labels.component.notInQueryField,\r\n      };\r\n\r\n      let result = [];\r\n\r\n      for (let condKey in queryFieldConditions) {\r\n         result.push({\r\n            id: condKey,\r\n            value: queryFieldConditions[condKey],\r\n            batch: \"queryField\",\r\n            handler: (a, b) => this.queryFieldValid(a, condKey, b),\r\n         });\r\n      }\r\n\r\n      return result;\r\n   }\r\n\r\n   fieldsAddFiltersThisObject(field) {\r\n      let thisObjectConditions = {\r\n         in_query: {\r\n            batch: \"query\",\r\n            label: this.labels.component.inQuery,\r\n         },\r\n         not_in_query: {\r\n            batch: \"query\",\r\n            label: this.labels.component.notInQuery,\r\n         },\r\n         in_data_collection: {\r\n            batch: \"datacollection\",\r\n            label: this.labels.component.inDataCollection,\r\n         },\r\n         not_in_data_collection: {\r\n            batch: \"datacollection\",\r\n            label: this.labels.component.notInDataCollection,\r\n         },\r\n      };\r\n\r\n      let result = [];\r\n\r\n      for (let condKey in thisObjectConditions) {\r\n         result.push({\r\n            id: condKey,\r\n            value: thisObjectConditions[condKey].label,\r\n            batch: thisObjectConditions[condKey].batch,\r\n            handler: (a, b) => this.thisObjectValid(a, condKey, b),\r\n         });\r\n      }\r\n\r\n      return result;\r\n   }\r\n\r\n   fieldsAddFiltersRecordRule(field) {\r\n      let recordRuleConditions = {\r\n         same_as_field: this.labels.component.sameAsField,\r\n         not_same_as_field: this.labels.component.notSameAsField,\r\n      };\r\n\r\n      let result = [];\r\n\r\n      for (let condKey in recordRuleConditions) {\r\n         result.push({\r\n            id: condKey,\r\n            value: recordRuleConditions[condKey],\r\n            batch: \"recordRule\",\r\n            handler: (a, b) => true, // TODO: record rule validation\r\n         });\r\n      }\r\n\r\n      return result;\r\n   }\r\n\r\n   fieldsAddFiltersContext(field) {\r\n      let contextConditions = {\r\n         context_equals: {\r\n            batch: \"context\",\r\n            label: this.labels.component.equalsProcessValue,\r\n            handler: (a, b) => a == b,\r\n         },\r\n         context_not_equal: {\r\n            batch: \"context\",\r\n            label: this.labels.component.notEqualsProcessValueCondition,\r\n            handler: (a, b) => a != b,\r\n         },\r\n         context_in: {\r\n            batch: \"context\",\r\n            label: this.labels.component.inProcessValueCondition,\r\n            handler: (a, b) => a.indexOf(b) > -1,\r\n         },\r\n         context_not_in: {\r\n            batch: \"context\",\r\n            label: this.labels.component.notInProcessValueCondition,\r\n            handler: (a, b) => a.indexOf(b) == -1,\r\n         },\r\n      };\r\n\r\n      let result = [];\r\n\r\n      for (let condKey in contextConditions) {\r\n         result.push({\r\n            id: condKey,\r\n            value: contextConditions[condKey].label,\r\n            batch: contextConditions[condKey].batch,\r\n            handler: contextConditions[condKey].handler,\r\n         });\r\n      }\r\n\r\n      return result;\r\n   }\r\n\r\n   queriesLoad(queries = []) {\r\n      this._Queries = queries;\r\n   }\r\n\r\n   /**\r\n    * @method queries()\r\n    *\r\n    * return an array of all the ABObjectQuery.\r\n    *\r\n    * @param filter {Object}\r\n    *\r\n    * @return {array}\r\n    */\r\n   queries(filter = () => true) {\r\n      const queryList = this._Queries ?? this.AB?.queries?.() ?? [];\r\n\r\n      return queryList.filter((q) => filter(q));\r\n   }\r\n\r\n   setValue(settings) {\r\n      this.condition = settings || {};\r\n\r\n      this.condition.rules = this.condition.rules || [];\r\n   }\r\n\r\n   /**\r\n    * @method getValue\r\n    * return the current condition of the filter.\r\n    * @return {JSON} -\r\n    * {\r\n    * \tglue: '', // 'and', 'or'\r\n    *\t\trules: [\r\n    *\t\t\t{\r\n    *\t\t\t\tkey:\t'uuid',\r\n    *\t\t\t\trule:\t'rule',\r\n    *\t\t\t\tvalue:\t'value'\r\n    *\t\t\t}\r\n    *\t\t]\r\n    * }\r\n    */\r\n   getValue() {\r\n      // When asked for a value before a condition is set, default the\r\n      // unset glue to \"and\";\r\n      if (typeof this.condition.glue == \"undefined\") {\r\n         this.condition.glue = \"and\";\r\n      }\r\n      return this.condition;\r\n   }\r\n\r\n   isComplete() {\r\n      let result = true;\r\n\r\n      const noValueRules = [\r\n         \"is_current_user\",\r\n         \"is_not_current_user\",\r\n         \"contain_current_user\",\r\n         \"not_contain_current_user\",\r\n         \"same_as_user\",\r\n         \"not_same_as_user\",\r\n      ];\r\n\r\n      const isCompleteRules = (rules = []) => {\r\n         if (result == false) return;\r\n\r\n         rules.forEach((r) => {\r\n            if (r?.rules && Array.isArray(r?.rules)) {\r\n               isCompleteRules(r?.rules);\r\n            } else {\r\n               result =\r\n                  result &&\r\n                  r?.key != null &&\r\n                  r?.key != \"\" &&\r\n                  r?.rule != null &&\r\n                  r?.rule != \"\" &&\r\n                  ((r?.value != null && r?.value != \"\") ||\r\n                     noValueRules.indexOf(r?.rule) > -1);\r\n            }\r\n         });\r\n      };\r\n\r\n      isCompleteRules(this.condition?.rules);\r\n\r\n      return result;\r\n   }\r\n};\r\n\r\n","const ABComponent = require(\"../platform/ABComponent\");\r\n\r\n/**\r\n *  support get data from objects and queries\r\n */\r\nfunction getFieldVal(rowData, field, returnSingular = true) {\r\n   if (!field) return null;\r\n   if (!field.columnName) return null;\r\n   // if rowData is an array, then pull the first element to get value\r\n   if (rowData && rowData[0]) rowData = rowData[0];\r\n\r\n   let columnId = field.id;\r\n   let columnName = field.columnName;\r\n\r\n   let value = null;\r\n   if (columnName.indexOf(\".\") > -1) {\r\n      let colName = columnName.split(\".\")[1];\r\n      value = rowData[columnName] || rowData[colName] || rowData[columnId];\r\n   } else {\r\n      value = rowData[columnName] || rowData[columnId];\r\n   }\r\n\r\n   if (value) {\r\n      return value;\r\n   }\r\n\r\n   // otherwise, this might be a process check where the rowData keys have\r\n   // '[diagramID].[field.id]'\r\n   for (var k in rowData) {\r\n      var key = k.split(\".\")[1];\r\n      if (key && (key == columnId || key == columnName)) {\r\n         value = rowData[k];\r\n      }\r\n   }\r\n\r\n   // if value is an array, filter empty item\r\n   if (value && Array.isArray(value)) {\r\n      value = value.filter((v) => v != null);\r\n      if (returnSingular) value = value[0];\r\n   }\r\n\r\n   return value;\r\n}\r\n\r\nmodule.exports = class RowFilterCore extends ABComponent {\r\n   constructor(App, idBase, AB) {\r\n      idBase = idBase || \"ab_row_filter\";\r\n\r\n      super(App, idBase, AB);\r\n\r\n      this.Account = { username: \"??\" };\r\n      this._settings = {};\r\n      this.config_settings = {};\r\n      // var batchName; // we need to revert to this default when switching away from a in/by query field\r\n\r\n      this._QueryFields = [];\r\n      this._Fields;\r\n\r\n      // internal business logic\r\n      var _logic = (this._logic = {\r\n         callbacks: {\r\n            onChange: () => {},\r\n         },\r\n\r\n         /**\r\n          * @method getValue\r\n          *\r\n          * @return {JSON} -\r\n          * {\r\n          * \t\tglue: '', // 'and', 'or'\r\n          *\t\trules: [\r\n          *\t\t\t{\r\n          *\t\t\t\tkey:\t'column name',\r\n          *\t\t\t\trule:\t'rule',\r\n          *\t\t\t\tvalue:\t'value'\r\n          *\t\t\t}\r\n          *\t\t]\r\n          * }\r\n          */\r\n         getValue: () => {\r\n            return this.config_settings;\r\n         },\r\n\r\n         removeHtmlTags: function (text) {\r\n            let result = \"\";\r\n            try {\r\n               let div = document.createElement(\"div\");\r\n               div.innerHTML = text;\r\n\r\n               result = div.textContent || div.innerText || \"\";\r\n            } catch (err) {\r\n               result = (text || \"\").replace(/(<([^>]+)>)/gi, \"\");\r\n            }\r\n\r\n            return result;\r\n         },\r\n\r\n         textValid: function (rowData, field, rule, compareValue) {\r\n            var result = false;\r\n\r\n            var value = getFieldVal(rowData, field);\r\n            if (value == null) value = \"\";\r\n\r\n            value = value.toString().trim().toLowerCase();\r\n            value = _logic.removeHtmlTags(value); // remove html tags - rich text editor\r\n\r\n            compareValue = compareValue\r\n               .toString()\r\n               .trim()\r\n               .toLowerCase()\r\n               .replace(/  +/g, \" \");\r\n\r\n            // support \"john smith\" => \"john\" OR/AND \"smith\"\r\n            var compareArray = compareValue.split(\" \");\r\n\r\n            switch (rule) {\r\n               case \"contains\":\r\n                  compareArray.forEach((val) => {\r\n                     if (result == false)\r\n                        // OR\r\n                        result = value.indexOf(val) > -1;\r\n                  });\r\n                  break;\r\n               case \"not_contains\":\r\n                  result = true;\r\n                  compareArray.forEach((val) => {\r\n                     if (result == true)\r\n                        // AND\r\n                        result = value.indexOf(val) < 0;\r\n                  });\r\n                  break;\r\n               case \"equals\":\r\n                  compareArray.forEach((val) => {\r\n                     if (result == false)\r\n                        // OR\r\n                        result = value == val;\r\n                  });\r\n                  break;\r\n               case \"not_equal\":\r\n                  result = true;\r\n                  compareArray.forEach((val) => {\r\n                     if (result == true)\r\n                        // AND\r\n                        result = value != val;\r\n                  });\r\n                  break;\r\n               case \"is_empty\":\r\n                  result = value == null || value == \"\";\r\n                  break;\r\n               case \"is_not_empty\":\r\n                  result = value != null && value != \"\";\r\n                  break;\r\n               default:\r\n                  result = _logic.queryValid(rowData, rule, compareValue);\r\n                  break;\r\n            }\r\n\r\n            return result;\r\n         },\r\n\r\n         dateValid: function (rowData, field, rule, compareValue) {\r\n            var result = false;\r\n\r\n            var value = getFieldVal(rowData, field);\r\n            if (!(value instanceof Date)) value = new Date(value);\r\n\r\n            if (!(compareValue instanceof Date))\r\n               compareValue = new Date(compareValue);\r\n\r\n            switch (rule) {\r\n               case \"equals\":\r\n                  result = value == compareValue;\r\n                  break;\r\n               case \"not_equal\":\r\n                  result = value != compareValue;\r\n                  break;\r\n               case \"less\":\r\n                  result = value < compareValue;\r\n                  break;\r\n               case \"greater\":\r\n                  result = value > compareValue;\r\n                  break;\r\n               case \"less_or_equal\":\r\n                  result = value <= compareValue;\r\n                  break;\r\n               case \"greater_or_equal\":\r\n                  result = value >= compareValue;\r\n                  break;\r\n               default:\r\n                  result = _logic.queryValid(rowData, rule, compareValue);\r\n                  break;\r\n            }\r\n\r\n            return result;\r\n         },\r\n\r\n         numberValid: function (rowData, field, rule, compareValue) {\r\n            var result = false;\r\n\r\n            var value = getFieldVal(rowData, field);\r\n            value = Number(value);\r\n            compareValue = Number(compareValue);\r\n\r\n            switch (rule) {\r\n               case \"equals\":\r\n                  result = value == compareValue;\r\n                  break;\r\n               case \"not_equal\":\r\n                  result = value != compareValue;\r\n                  break;\r\n               case \"less\":\r\n                  result = value < compareValue;\r\n                  break;\r\n               case \"greater\":\r\n                  result = value > compareValue;\r\n                  break;\r\n               case \"less_or_equal\":\r\n                  result = value <= compareValue;\r\n                  break;\r\n               case \"greater_or_equal\":\r\n                  result = value >= compareValue;\r\n                  break;\r\n               default:\r\n                  result = _logic.queryValid(rowData, rule, compareValue);\r\n                  break;\r\n            }\r\n\r\n            return result;\r\n         },\r\n\r\n         listValid: function (rowData, field, rule, compareValue) {\r\n            var result = false;\r\n\r\n            var value = getFieldVal(rowData, field);\r\n            if (value && value.toLowerCase) value = value.toLowerCase();\r\n\r\n            compareValue = compareValue.toLowerCase();\r\n\r\n            if (!Array.isArray(compareValue)) compareValue = [compareValue];\r\n\r\n            switch (rule) {\r\n               case \"equals\":\r\n                  if (value) result = compareValue.indexOf(value) > -1;\r\n                  break;\r\n               case \"not_equal\":\r\n                  if (value) result = compareValue.indexOf(value) < 0;\r\n                  else result = true;\r\n                  break;\r\n               default:\r\n                  result = _logic.queryValid(rowData, rule, compareValue);\r\n                  break;\r\n            }\r\n\r\n            return result;\r\n         },\r\n\r\n         booleanValid: function (rowData, field, rule, compareValue) {\r\n            var result = false;\r\n\r\n            var value = getFieldVal(rowData, field);\r\n\r\n            // default value should be false\r\n            if (value == null) value = false;\r\n\r\n            switch (rule) {\r\n               case \"equals\":\r\n                  result = value == compareValue;\r\n                  break;\r\n               case \"not_equal\":\r\n                  result = value != compareValue;\r\n                  break;\r\n               default:\r\n                  result = _logic.queryValid(rowData, rule, compareValue);\r\n                  break;\r\n            }\r\n\r\n            return result;\r\n         },\r\n\r\n         userValid: (rowData, field, rule, compareValue) => {\r\n            var result = false;\r\n\r\n            var value = getFieldVal(rowData, field);\r\n\r\n            // if (Array.isArray(value)) value = [value];\r\n\r\n            switch (rule) {\r\n               case \"is_current_user\":\r\n                  result = value == this.Account.username;\r\n                  break;\r\n               case \"is_not_current_user\":\r\n                  result = value != this.Account.username;\r\n                  break;\r\n               case \"contain_current_user\":\r\n                  if (!value) {\r\n                     result = false;\r\n                     break;\r\n                  }\r\n                  if (!Array.isArray(value)) value = [value];\r\n\r\n                  result =\r\n                     (value || []).filter((v) => {\r\n                        if (v) {\r\n                           return (\r\n                              (v.username || v.id || v.text || v) ==\r\n                              this.Account.username\r\n                           );\r\n                        } else {\r\n                           return false;\r\n                        }\r\n                     }).length > 0;\r\n                  break;\r\n               case \"not_contain_current_user\":\r\n                  if (!value) {\r\n                     result = false;\r\n                     break;\r\n                  }\r\n                  if (!Array.isArray(value)) value = [value];\r\n\r\n                  result =\r\n                     (value || []).filter((v) => {\r\n                        if (v) {\r\n                           return (\r\n                              (v.username || v.id || v.text || v) ==\r\n                              this.Account.username\r\n                           );\r\n                        } else {\r\n                           return false;\r\n                        }\r\n                     }).length == 0;\r\n                  break;\r\n               case \"equals\":\r\n                  result = value.indexOf(compareValue) > -1;\r\n                  break;\r\n               case \"not_equal\":\r\n                  result = value.indexOf(compareValue) < 0;\r\n                  break;\r\n               default:\r\n                  result = _logic.queryValid(rowData, rule, compareValue);\r\n                  break;\r\n            }\r\n\r\n            return result;\r\n         },\r\n\r\n         queryValid: (rowData, rule, compareValue) => {\r\n            var result = false;\r\n\r\n            if (!this.AB || !compareValue) return result;\r\n\r\n            // queryId:fieldId\r\n            var queryId = compareValue.split(\":\")[0],\r\n               fieldId = compareValue.split(\":\")[1];\r\n\r\n            // if no query\r\n            var query = this.queries((q) => q.id == queryId)[0];\r\n            if (!query) return result;\r\n\r\n            // if no field\r\n            var field = query.fields((f) => f.id == fieldId)[0];\r\n            if (!field) return result;\r\n\r\n            let qIdBase = \"{idBase}-query-field-{id}\"\r\n                  .replace(\"{idBase}\", idBase)\r\n                  .replace(\"{id}\", query.id),\r\n               inQueryFieldFilter = new this.constructor(this.App, qIdBase);\r\n            inQueryFieldFilter.Account = this.Account;\r\n            // inQueryFieldFilter.applicationLoad(this._Application);\r\n            inQueryFieldFilter.fieldsLoad(query.fields());\r\n            inQueryFieldFilter.setValue(query.workspaceFilterConditions);\r\n\r\n            switch (rule) {\r\n               case \"in_query_field\":\r\n                  result = inQueryFieldFilter.isValid(rowData);\r\n                  break;\r\n               case \"not_in_query_field\":\r\n                  result = !inQueryFieldFilter.isValid(rowData);\r\n                  break;\r\n            }\r\n\r\n            return result;\r\n         },\r\n\r\n         inQueryValid: (rowData, columnName, rule, compareValue) => {\r\n            let result = false;\r\n\r\n            if (columnName) {\r\n               rowData = rowData[columnName] || {};\r\n            }\r\n\r\n            if (!compareValue || !this.AB) return result;\r\n\r\n            // if no query\r\n            let query = this.queries((q) => q.id == compareValue)[0];\r\n            if (!query) return result;\r\n\r\n            let qIdBase = \"{idBase}-query-{id}\"\r\n                  .replace(\"{idBase}\", idBase)\r\n                  .replace(\"{id}\", query.id),\r\n               inQueryFilter = new this.constructor(this.App, qIdBase);\r\n            inQueryFilter.Account = this.Account;\r\n            // inQueryFilter.applicationLoad(this._Application);\r\n            inQueryFilter.fieldsLoad(query.fields());\r\n            inQueryFilter.setValue(query.workspaceFilterConditions);\r\n\r\n            switch (rule) {\r\n               case \"in_query\":\r\n                  result = inQueryFilter.isValid(rowData);\r\n                  break;\r\n               case \"not_in_query\":\r\n                  result = !inQueryFilter.isValid(rowData);\r\n                  break;\r\n            }\r\n\r\n            return result;\r\n         },\r\n\r\n         dataCollectionValid: (rowData, columnName, rule, compareValue) => {\r\n            var result = false;\r\n\r\n            if (!compareValue || !this.AB) return result;\r\n\r\n            if (columnName) {\r\n               rowData = rowData[columnName] || {};\r\n            }\r\n\r\n            let dc = this.AB.datacollectionByID(compareValue);\r\n\r\n            switch (rule) {\r\n               case \"in_data_collection\":\r\n                  if (!dc) return false;\r\n\r\n                  result =\r\n                     dc.getData(\r\n                        (d) => (d.id || d.uuid) == (rowData.id || rowData.uuid)\r\n                     ).length > 0;\r\n                  break;\r\n               case \"not_in_data_collection\":\r\n                  if (!dc) return true;\r\n\r\n                  result =\r\n                     dc.getData(\r\n                        (d) => (d.id || d.uuid) == (rowData.id || rowData.uuid)\r\n                     ).length < 1;\r\n                  break;\r\n            }\r\n\r\n            return result;\r\n         },\r\n\r\n         connectFieldValid: function (rowData, field, rule, compareValue) {\r\n            let relationName = field.relationName();\r\n            let columnName = field.columnName;\r\n\r\n            let connectedVal = \"\";\r\n\r\n            if (rowData) {\r\n               if (rowData[relationName]) {\r\n                  connectedVal = (\r\n                     (field.indexField\r\n                        ? rowData[relationName][field.indexField.columnName]\r\n                        : false) || // custom index\r\n                     (field.indexField2\r\n                        ? rowData[relationName][field.indexField2.columnName]\r\n                        : false) || // custom index 2\r\n                     rowData[relationName].id ||\r\n                     rowData[relationName]\r\n                  )\r\n                     .toString()\r\n                     .toLowerCase();\r\n               } else {\r\n                  let fieldVal = getFieldVal(rowData, field);\r\n                  if (fieldVal != null) {\r\n                     connectedVal = fieldVal;\r\n                  }\r\n               }\r\n            }\r\n\r\n            let compareValueLowercase = (compareValue || \"\").toLowerCase();\r\n\r\n            switch (rule) {\r\n               case \"contains\":\r\n                  return (\r\n                     connectedVal.toString().indexOf(compareValueLowercase) > -1\r\n                  );\r\n               case \"not_contains\":\r\n                  return (\r\n                     connectedVal.toString().indexOf(compareValueLowercase) ==\r\n                     -1\r\n                  );\r\n               case \"equals\":\r\n                  return connectedVal == compareValueLowercase;\r\n               case \"not_equal\":\r\n                  return connectedVal != compareValueLowercase;\r\n               case \"in_query\":\r\n               case \"not_in_query\":\r\n                  return _logic.inQueryValid(\r\n                     rowData,\r\n                     relationName,\r\n                     rule,\r\n                     compareValue\r\n                  );\r\n               case \"is_current_user\":\r\n               case \"is_not_current_user\":\r\n               case \"contain_current_user\":\r\n               case \"not_contain_current_user\":\r\n                  return _logic.userValid(rowData, field, rule, compareValue);\r\n               case \"is_empty\":\r\n                  return (\r\n                     rowData[relationName] == null ||\r\n                     rowData[relationName].length < 1 ||\r\n                     rowData[relationName] == \"\"\r\n                  );\r\n               case \"is_not_empty\":\r\n                  return (\r\n                     rowData[relationName] != null &&\r\n                     ((Array.isArray(rowData[relationName]) &&\r\n                        rowData[relationName].length > 0) ||\r\n                        rowData[relationName] != \"\")\r\n                  );\r\n               case \"in_data_collection\":\r\n               case \"not_in_data_collection\":\r\n                  return _logic.dataCollectionValid(\r\n                     rowData,\r\n                     relationName,\r\n                     rule,\r\n                     compareValue\r\n                  );\r\n            }\r\n         },\r\n\r\n         thisObjectValid: (rowData, rule, compareValue) => {\r\n            let result = false;\r\n\r\n            switch (rule) {\r\n               // if in_query condition\r\n               case \"in_query\":\r\n               case \"not_in_query\":\r\n                  if (!this.AB || !this._Object) return result;\r\n\r\n                  // if > 1 copy of this object in query ==> Error!\r\n                  var query = this.queries((q) => q.id == compareValue)[0];\r\n                  if (!query) return result;\r\n\r\n                  var listThisObjects = query.objects((o) => {\r\n                     return o.id == this._Object.id;\r\n                  });\r\n                  if (listThisObjects.length > 1) {\r\n                     // Alternative: choose the 1st instance of this object in the query, and make the compare on that.\r\n                     // Be sure to warn the developer of the limitiations of an \"this_object\" \"in_query\"  when query has > 1 copy of\r\n                     // this object as part of the query.\r\n\r\n                     console.error(\r\n                        \"HEY!  Can't compare this_object to a query that has > 1 copy of that object!\"\r\n                     );\r\n                     return true;\r\n                  }\r\n\r\n                  // get this object's alias from the query\r\n                  var alias = query.objectAlias(this._Object.id);\r\n\r\n                  // make sure all my columns in rowData are prefixed by \"alias\".columnName\r\n                  var newRowData = {};\r\n                  Object.keys(rowData).forEach((key) => {\r\n                     newRowData[`${alias}.${key}`] = rowData[key];\r\n                  });\r\n\r\n                  // then pass this on to the _logic.queryValid();\r\n                  return _logic.inQueryValid(\r\n                     newRowData,\r\n                     null,\r\n                     rule,\r\n                     compareValue\r\n                  );\r\n               // break; /* eslint no-unreachable */\r\n\r\n               // if in_datacollection condition\r\n               case \"in_data_collection\":\r\n               case \"not_in_data_collection\":\r\n                  // send rowData, null to datacollectionValid()\r\n                  return _logic.dataCollectionValid(\r\n                     rowData,\r\n                     null,\r\n                     rule,\r\n                     compareValue\r\n                  );\r\n               // break; /* eslint no-unreachable */\r\n            }\r\n         },\r\n      });\r\n\r\n      // Interface methods for parent component:\r\n      // this.objectLoad = _logic.objectLoad;\r\n      // this.viewLoad = _logic.viewLoad;\r\n      this.getValue = _logic.getValue;\r\n      // this.setValue = _logic.setValue;\r\n      // this.isValid = _logic.isValid;\r\n   }\r\n\r\n   init(options) {\r\n      if (options.showObjectName) {\r\n         this._settings.showObjectName = options.showObjectName;\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method isValid\r\n    * validate the row data is valid filter condition\r\n    *\r\n    * @param rowData {Object} - data row\r\n    */\r\n   isValid(rowData) {\r\n      var config_settings = this.config_settings;\r\n      var _logic = this._logic;\r\n\r\n      // If no conditions, then return true\r\n      if (\r\n         config_settings == null ||\r\n         config_settings.rules == null ||\r\n         config_settings.rules.length == 0\r\n      )\r\n         return true;\r\n\r\n      if (rowData == null) return false;\r\n\r\n      var result = config_settings.glue === \"and\" ? true : false;\r\n\r\n      config_settings.rules.forEach((filter) => {\r\n         if (!filter.key || !filter.rule) return;\r\n\r\n         var fieldInfo = this._Fields.filter((f) => f.id == filter.key)[0];\r\n         if (!fieldInfo) return;\r\n\r\n         var condResult;\r\n\r\n         // Filters that have \"this_object\" don't have a fieldInfo.key, so in that case,\r\n         // define a special .key == \"this_object\"\r\n         var ruleFieldType = fieldInfo.key;\r\n         if (typeof fieldInfo.key == \"undefined\") {\r\n            if (fieldInfo.id != \"this_object\") {\r\n               fieldInfo.key = \"connectField\"; // if you are looking at the parent object it won't have a key to analyze\r\n               ruleFieldType = fieldInfo.key;\r\n            } else ruleFieldType = \"this_object\";\r\n         }\r\n\r\n         switch (ruleFieldType) {\r\n            case \"string\":\r\n            case \"LongText\":\r\n            case \"email\":\r\n               condResult = _logic.textValid(\r\n                  rowData,\r\n                  fieldInfo,\r\n                  filter.rule,\r\n                  filter.value\r\n               );\r\n               break;\r\n            case \"date\":\r\n            case \"datetime\":\r\n               condResult = _logic.dateValid(\r\n                  rowData,\r\n                  fieldInfo,\r\n                  filter.rule,\r\n                  filter.value\r\n               );\r\n               break;\r\n            case \"number\":\r\n               condResult = _logic.numberValid(\r\n                  rowData,\r\n                  fieldInfo,\r\n                  filter.rule,\r\n                  filter.value\r\n               );\r\n               break;\r\n            case \"list\":\r\n               condResult = _logic.listValid(\r\n                  rowData,\r\n                  fieldInfo,\r\n                  filter.rule,\r\n                  filter.value\r\n               );\r\n               break;\r\n            case \"boolean\":\r\n               condResult = _logic.booleanValid(\r\n                  rowData,\r\n                  fieldInfo,\r\n                  filter.rule,\r\n                  filter.value\r\n               );\r\n               break;\r\n            case \"user\":\r\n               condResult = _logic.userValid(\r\n                  rowData,\r\n                  fieldInfo,\r\n                  filter.rule,\r\n                  filter.value\r\n               );\r\n               break;\r\n            case \"connectField\":\r\n            case \"connectObject\":\r\n               condResult = _logic.connectFieldValid(\r\n                  rowData,\r\n                  fieldInfo,\r\n                  filter.rule,\r\n                  filter.value\r\n               );\r\n               break;\r\n            case \"this_object\":\r\n               condResult = _logic.thisObjectValid(\r\n                  rowData,\r\n                  filter.rule,\r\n                  filter.value\r\n               );\r\n               break;\r\n         }\r\n\r\n         if (config_settings.glue === \"and\") {\r\n            result = result && condResult;\r\n         } else {\r\n            result = result || condResult;\r\n         }\r\n      });\r\n\r\n      return result;\r\n   }\r\n\r\n   /**\r\n    * @method applicationLoad\r\n    * set application\r\n    *\r\n    * @param application {ABApplication}\r\n    */\r\n   // applicationLoad(application) {\r\n   //    this._Application = application;\r\n   // }\r\n\r\n   /**\r\n    * @method fieldsLoad\r\n    * set fields\r\n    *\r\n    * @param {array} fields\r\n    *        an array of fields used in this Query\r\n    * @param {ABObject} object [optional]\r\n    *        (optional) ABObject reference if this Filter should support\r\n    *        the \"this object\" conditions.\r\n    */\r\n   fieldsLoad(fields = [], object = null) {\r\n      this._Fields = fields.filter((f) => f && f.fieldIsFilterable());\r\n      // NOTE: User fields are now Connections, but we want to treat them\r\n      // differently.\r\n      this._QueryFields = this._Fields\r\n         ? this._Fields.filter((f) => f && f.isConnection && f.key != \"user\")\r\n         : [];\r\n\r\n      // insert our 'this object' entry if an Object was given.\r\n      if (object) {\r\n         this._Object = object;\r\n\r\n         let thisObjOption = {\r\n            id: \"this_object\",\r\n            label: object.label,\r\n         };\r\n\r\n         // If object is query ,then should define default alias: \"BASE_OBJECT\"\r\n         if (object.viewName) {\r\n            thisObjOption.alias = \"BASE_OBJECT\";\r\n         }\r\n\r\n         this._Fields.unshift(thisObjOption);\r\n      } else {\r\n         delete this._Object;\r\n      }\r\n   }\r\n\r\n   queriesLoad(queries = []) {\r\n      this._Queries = queries;\r\n   }\r\n\r\n   /**\r\n    * @method queries()\r\n    * return an array of all the ABObjectQuery.\r\n    * @param {fn} filter\r\n    * @return {array}\r\n    */\r\n   queries(filter = () => true) {\r\n      let result = [];\r\n\r\n      if (this.AB) {\r\n         result = result.concat(this.AB.queries(filter));\r\n      }\r\n\r\n      if (this._Queries) {\r\n         result = result.concat(\r\n            (this._Queries || []).filter(\r\n               (q) => filter(q) && result.filter((r) => r.id == q.id).length < 1\r\n            )\r\n         );\r\n      }\r\n\r\n      return result;\r\n   }\r\n\r\n   setValue(settings) {\r\n      this.config_settings = settings || {};\r\n      this.config_settings.rules = this.config_settings.rules || [];\r\n   }\r\n};\r\n","/*\r\n * ABFieldAutoIndex\r\n *\r\n * An ABFieldAutoIndex defines a AutoIndex field type.\r\n *\r\n */\r\n\r\nconst ABField = require(\"../../platform/dataFields/ABField\");\r\n\r\nfunction L(key, altText) {\r\n   // TODO:\r\n   return altText; // AD.lang.label.getLabel(key) || altText;\r\n}\r\n\r\nconst ABFieldAutoIndexDefaults = {\r\n   key: \"AutoIndex\",\r\n   // unique key to reference this specific DataField\r\n\r\n   description: \"Auto Increment Value\",\r\n   // description: what gets displayed in the Editor description.\r\n   // NOTE: this will be displayed using a Label: L(description)\r\n\r\n   icon: \"key\",\r\n   // font-awesome icon reference.  (without the 'fa-').  so 'key'  to\r\n   // reference 'fa-key'\r\n\r\n   isFilterable: true,\r\n   // {bool} / {fn}\r\n   // determines if the current ABField can be used to filter (FilterComplex\r\n   // or Query) data.\r\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\r\n   //  (field) => field.setting.something == true\r\n\r\n   isSortable: true,\r\n   // {bool} / {fn}\r\n   // determines if the current ABField can be used to Sort data.\r\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\r\n   //  (field) => true/false\r\n\r\n   menuName: \"Auto Index\",\r\n   // menuName: what gets displayed in the Editor drop list\r\n   // NOTE: this will be displayed using a Label: L(menuName)\r\n\r\n   supportRequire: false,\r\n   // {bool}\r\n   // does this ABField support the Required setting?\r\n\r\n   supportUnique: false,\r\n   // {bool}\r\n   // does this ABField support the Unique setting?\r\n\r\n   useAsLabel: true,\r\n   // {bool} / {fn}\r\n   // determines if this ABField can be used in the display of an ABObject's\r\n   // label.\r\n\r\n   compatibleOrmTypes: [\"number\"],\r\n   // {array}\r\n   // what types of Sails ORM attributes can be imported into this data type?\r\n   // http://sailsjs.org/documentation/concepts/models-and-orm/attributes#?attribute-options\r\n\r\n   compatibleMysqlTypes: [\"tinyint\", \"smallint\", \"mediumint\", \"int\", \"integer\"],\r\n   // {array}\r\n   // what types of MySql column types can be imported into this data type?\r\n   // https://www.techonthenet.com/mysql/datatypes.php\r\n};\r\n\r\n// defaultValues: the keys must match a .name of your elements to set it's default value.\r\nconst defaultValues = {\r\n   prefix: \"\",\r\n   delimiter: \"none\",\r\n   displayLength: 4,\r\n   previewText: \"0000\",\r\n};\r\n\r\nmodule.exports = class ABFieldAutoIndexCore extends ABField {\r\n   constructor(values, object) {\r\n      super(values, object, ABFieldAutoIndexDefaults);\r\n   }\r\n\r\n   // return the default values for this DataField\r\n   static defaults() {\r\n      return ABFieldAutoIndexDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return defaultValues;\r\n   }\r\n\r\n   static getDelimiterSign(text) {\r\n      const delimiterItem = this.delimiterList().filter((item) => {\r\n         return item.id == text;\r\n      })[0];\r\n\r\n      return delimiterItem ? delimiterItem.sign : \"\";\r\n   }\r\n\r\n   static delimiterList() {\r\n      return [\r\n         { id: \"none\", value: L(\"None\"), sign: \"\" },\r\n         { id: \"comma\", value: L(\"Comma\"), sign: \", \" },\r\n         { id: \"slash\", value: L(\"Slash\"), sign: \"/\" },\r\n         { id: \"space\", value: L(\"Space\"), sign: \" \" },\r\n         { id: \"dash\", value: L(\"Dash\"), sign: \"-\" },\r\n         { id: \"colon\", value: L(\"Colon\"), sign: \":\" },\r\n      ];\r\n   }\r\n\r\n   static setValueToIndex(prefix, delimiter, displayLength, displayNumber) {\r\n      const resultIndex =\r\n         prefix +\r\n         this.getDelimiterSign(delimiter) +\r\n         (\"0000000000\" + displayNumber).slice(-parseInt(displayLength));\r\n\r\n      return resultIndex;\r\n   }\r\n\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n\r\n      // text to Int:\r\n      this.settings.displayLength = parseInt(this.settings.displayLength);\r\n   }\r\n\r\n   /**\r\n    * @method defaultValue\r\n    * insert a key=>value pair that represent the default value\r\n    * for this field.\r\n    * @param {obj} values a key=>value hash of the current values.\r\n    */\r\n   defaultValue(values) {\r\n      // Remove every values, then we will use AUTO_INCREMENT of MySQL\r\n      delete values[this.columnName];\r\n   }\r\n\r\n   format(rowData) {\r\n      if (!rowData[this.columnName]) return \"\";\r\n\r\n      try {\r\n         const resultAutoIndex = this.constructor.setValueToIndex(\r\n            this.settings.prefix,\r\n            this.settings.delimiter,\r\n            this.settings.displayLength,\r\n            rowData[this.columnName]\r\n         );\r\n\r\n         return resultAutoIndex;\r\n      } catch (err) {\r\n         return \"\";\r\n      }\r\n   }\r\n};\r\n\r\n","/*\r\n * ABFieldBoolean\r\n *\r\n * An ABFieldBoolean defines a boolean field type.\r\n *\r\n */\r\n\r\nconst ABField = require(\"../../platform/dataFields/ABField\");\r\n\r\nfunction L(key, altText) {\r\n   // TODO:\r\n   return altText; // AD.lang.label.getLabel(key) || altText;\r\n}\r\n\r\nconst ABFieldBooleanDefaults = {\r\n   key: \"boolean\",\r\n   // unique key to reference this specific DataField\r\n\r\n   description: \"A single checkbox that can be checked or unchecked.\",\r\n   // description: what gets displayed in the Editor description.\r\n   // NOTE: this will be displayed using a Label: L(description)\r\n\r\n   icon: \"check-square-o\",\r\n   // font-awesome icon reference.  (without the 'fa-').  so 'check-square-o'  to\r\n   // reference 'fa-check-square-o'\r\n\r\n   isFilterable: true,\r\n   // {bool} / {fn}\r\n   // determines if the current ABField can be used to filter (FilterComplex\r\n   // or Query) data.\r\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\r\n   //  (field) => field.setting.something == true\r\n\r\n   isSortable: false,\r\n   // {bool} / {fn}\r\n   // determines if the current ABField can be used to Sort data.\r\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\r\n   //  (field) => true/false\r\n\r\n   menuName: \"Checkbox\",\r\n   // menuName: what gets displayed in the Editor drop list\r\n   // NOTE: this will be displayed using a Label: L(menuName)\r\n\r\n   supportRequire: true,\r\n   // {bool}\r\n   // does this ABField support the Required setting?\r\n\r\n   supportUnique: false,\r\n   // {bool}\r\n   // does this ABField support the Unique setting?\r\n\r\n   useAsLabel: true,\r\n   // {bool} / {fn}\r\n   // determines if this ABField can be used in the display of an ABObject's\r\n   // label.\r\n\r\n   compatibleOrmTypes: [\"boolean\"],\r\n   // {array}\r\n   // what types of Sails ORM attributes can be imported into this data type?\r\n   // http://sailsjs.org/documentation/concepts/models-and-orm/attributes#?attribute-options\r\n\r\n   compatibleMysqlTypes: [\"bool\", \"boolean\"],\r\n   // {array}\r\n   // what types of MySql column types can be imported into this data type?\r\n   // https://www.techonthenet.com/mysql/datatypes.php\r\n};\r\n\r\nconst defaultValues = {\r\n   default: 0,\r\n};\r\n\r\nmodule.exports = class ABFieldBooleanCore extends ABField {\r\n   constructor(values, object) {\r\n      super(values, object, ABFieldBooleanDefaults);\r\n   }\r\n\r\n   // return the default values for this DataField\r\n   static defaults() {\r\n      return ABFieldBooleanDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return defaultValues;\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /**\r\n    * @method fromValues()\r\n    *\r\n    * initialze this object with the given set of values.\r\n    * @param {obj} values\r\n    */\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n\r\n      if (this.settings.default != null)\r\n         this.settings.default = parseInt(this.settings.default);\r\n   }\r\n\r\n   /**\r\n    * @method defaultValue\r\n    * insert a key=>value pair that represent the default value\r\n    * for this field.\r\n    * @param {obj} values a key=>value hash of the current values.\r\n    */\r\n   defaultValue(values) {\r\n      if (values[this.columnName] == null && this.settings.default != null) {\r\n         values[this.columnName] = this.settings.default;\r\n      }\r\n   }\r\n};\r\n","/*\r\n * ABFieldCalculate\r\n *\r\n * An ABFieldCalculate defines a calculate field type.\r\n *\r\n */\r\n\r\nconst ABField = require(\"../../platform/dataFields/ABField\");\r\n\r\nfunction L(key, altText) {\r\n   // TODO:\r\n   return altText; // AD.lang.label.getLabel(key) || altText;\r\n}\r\n\r\n/** Private methods */\r\nfunction AGE(dateString) {\r\n   // validate\r\n   if (!dateString) return 0;\r\n   const dataDate = new Date(dateString);\r\n   if (!dataDate) return 0;\r\n\r\n   const today = new Date();\r\n   const oneYear = 31536000000; // (24 * 60 * 60 * 1000) * 365;\r\n   const diffYears = (today - dataDate) / oneYear;\r\n\r\n   if (diffYears < 1) return Math.round(diffYears * 10) / 10;\r\n   // float 2 digits\r\n   else return Math.floor(diffYears); // no float digit\r\n\r\n   // const today = new Date();\r\n   // const age = today.getFullYear() - dataDate.getFullYear();\r\n   // if (age < 1) {\r\n   // \tconst m = today.getMonth() - dataDate.getMonth();\r\n\r\n   // \tage = parseFloat(\"0.\" + m);\r\n\r\n   // \t// if (m < 0 || (m === 0 && today.getDate() < dataDate.getDate())) {\r\n   // \t// \tage--;\r\n   // \t// }\r\n   // }\r\n   // return age;\r\n}\r\n\r\nfunction YEAR(dateString) {\r\n   // validate\r\n   if (!dateString) return 0;\r\n   const dataDate = new Date(dateString);\r\n   if (!dataDate) return 0;\r\n\r\n   return dataDate.getFullYear();\r\n}\r\n\r\nfunction MONTH(dateString) {\r\n   // validate\r\n   if (!dateString) return 0;\r\n   const dataDate = new Date(dateString);\r\n   if (!dataDate) return 0;\r\n\r\n   // Start at 0\r\n   return dataDate.getMonth();\r\n}\r\n\r\nfunction DAY(dateString) {\r\n   // validate\r\n   if (!dateString) return 0;\r\n   const dataDate = new Date(dateString);\r\n   if (!dataDate) return 0;\r\n\r\n   return dataDate.getDate();\r\n}\r\n\r\nfunction DATE(dateString) {\r\n   // validate\r\n   if (!dateString) return 0;\r\n   const dataDate = new Date(dateString);\r\n   if (!dataDate) return 0;\r\n\r\n   // number of miliseconds in one day\r\n   const oneDay = 86400000; // 1000 * 60 * 60 * 24\r\n\r\n   // Convert back to days and return\r\n   return Math.round(dataDate.getTime() / oneDay);\r\n}\r\n\r\nfunction HOUR(dateString) {\r\n   // validate\r\n   if (!dateString) return 0;\r\n   const dataDate = new Date(dateString);\r\n   if (!dataDate) return 0;\r\n\r\n   // number of miliseconds in one hour\r\n   const oneHour = 3600000; // 1000 * 60 * 60\r\n\r\n   // Convert back to days and return\r\n   return Math.round(dataDate.getTime() / oneHour);\r\n}\r\n\r\nfunction MINUTE(dateString) {\r\n   // validate\r\n   if (!dateString) return 0;\r\n   const dataDate = new Date(dateString);\r\n   if (!dataDate) return 0;\r\n\r\n   // number of miliseconds in one hour\r\n   const oneMinute = 60000; // 1000 * 60\r\n\r\n   // Convert back to days and return\r\n   return Math.round(dataDate.getTime() / oneMinute);\r\n}\r\n\r\nfunction MINUTE_TO_HOUR(mins) {\r\n   const hours = mins / 60;\r\n   const rhours = Math.floor(hours);\r\n   const minutes = (hours - rhours) * 60;\r\n   const rminutes = Math.round(minutes);\r\n\r\n   return parseFloat(`${rhours}.${rminutes}`);\r\n}\r\n\r\nconst ABFieldCalculateDefaults = {\r\n   key: \"calculate\",\r\n   // unique key to reference this specific DataField\r\n\r\n   description: \"Perform a calculation based upon existing values\",\r\n   // description: what gets displayed in the Editor description.\r\n   // NOTE: this will be displayed using a Label: L(description)\r\n\r\n   icon: \"calculator\",\r\n   // font-awesome icon reference.  (without the 'fa-').  so 'calculator'  to\r\n   // reference 'fa-calculator'\r\n\r\n   isFilterable: (field) => {\r\n      const unsupportedInFilter = [\"MINUTE_TO_HOUR\", \"DATE\", \"HOUR\", \"MINUTE\"];\r\n      const unsupported = unsupportedInFilter.filter((item) =>\r\n         field.settings.formula.includes(item)\r\n      );\r\n      return unsupported.length == 0;\r\n   },\r\n   // {bool} / {fn}\r\n   // determines if the current ABField can be used to filter (FilterComplex\r\n   // or Query) data.\r\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\r\n   //  (field) => field.setting.something == true\r\n\r\n   isSortable: false,\r\n   // {bool} / {fn}\r\n   // determines if the current ABField can be used to Sort data.\r\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\r\n   //  (field) => true/false\r\n\r\n   menuName: \"Calculate\",\r\n   // menuName: what gets displayed in the Editor drop list\r\n   // NOTE: this will be displayed using a Label: L(menuName)\r\n\r\n   supportRequire: false,\r\n   // {bool}\r\n   // does this ABField support the Required setting?\r\n\r\n   supportUnique: false,\r\n   // {bool}\r\n   // does this ABField support the Unique setting?\r\n\r\n   useAsLabel: true,\r\n   // {bool} / {fn}\r\n   // determines if this ABField can be used in the display of an ABObject's\r\n   // label.\r\n\r\n   compatibleOrmTypes: [\"number\"],\r\n   // {array}\r\n   // what types of Sails ORM attributes can be imported into this data type?\r\n   // http://sailsjs.org/documentation/concepts/models-and-orm/attributes#?attribute-options\r\n\r\n   compatibleMysqlTypes: [\r\n      \"tinyint\",\r\n      \"smallint\",\r\n      \"mediumint\",\r\n      \"int\",\r\n      \"integer\",\r\n      \"bigint\",\r\n      \"decimal\",\r\n      \"dec\",\r\n      \"numeric\",\r\n      \"fixed\",\r\n      \"float\",\r\n      \"real\",\r\n   ],\r\n   // {array}\r\n   // what types of MySql column types can be imported into this data type?\r\n   // https://www.techonthenet.com/mysql/datatypes.php\r\n};\r\n\r\nconst defaultValues = {\r\n   formula: \"\",\r\n   decimalSign: \"none\", // \"none\", \"comma\", \"period\", \"space\"\r\n   decimalPlaces: 0, // 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\r\n};\r\n\r\nmodule.exports = class ABFieldCalculateCore extends ABField {\r\n   constructor(values, object) {\r\n      super(values, object, ABFieldCalculateDefaults);\r\n   }\r\n\r\n   // return the default values for this DataField\r\n   static defaults() {\r\n      return ABFieldCalculateDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return defaultValues;\r\n   }\r\n\r\n   /**\r\n    * @method convertToJs\r\n    *\r\n    * @param {ABOBject} object\r\n    * @param {string} formula\r\n    * @param {object} rowData\r\n    * @param {integer} place\r\n    * @param {string} alias [Optional]\r\n    */\r\n   static convertToJs(object, formula, rowData, place, alias = null) {\r\n      if (!formula) return \"\";\r\n\r\n      // replace with current date\r\n      formula = formula.replace(/\\(CURRENT\\)/g, \"(new Date())\");\r\n\r\n      object.fields().forEach((f) => {\r\n         let colName = f.columnName;\r\n         if (colName.indexOf(\".\") > -1)\r\n            // QUERY: get only column name\r\n            colName = colName.split(\".\")[1];\r\n\r\n         // if template does not contain, then should skip\r\n         if (formula.indexOf(\"{\" + colName + \"}\") < 0) return;\r\n\r\n         const data =\r\n            rowData[`${object.alias ?? alias}.${f.columnName}`] ??\r\n            rowData[f.columnName];\r\n\r\n         // number fields\r\n         if (f.key == \"number\") {\r\n            const numberVal = `(${data || 0})`; // (number) - NOTE : (-5) to support negative number\r\n            formula = formula.replace(\r\n               new RegExp(\"{\" + colName + \"}\", \"g\"),\r\n               numberVal\r\n            );\r\n         }\r\n         // calculate and formula fields\r\n         else if (f.key == \"calculate\" || f.key == \"formula\") {\r\n            let calVal = f.format(rowData) || 0;\r\n\r\n            // pull number only\r\n            if (typeof calVal == \"string\")\r\n               calVal = calVal.replace(/[^-0-9.]/g, \"\");\r\n\r\n            calVal = `(${calVal})`;\r\n\r\n            formula = formula.replace(\r\n               new RegExp(\"{\" + colName + \"}\", \"g\"),\r\n               calVal\r\n            );\r\n         }\r\n         // date fields\r\n         else if (f.key == \"date\") {\r\n            const dateVal = `\"${data || \"\"}\"`; // \"date\"\r\n            formula = formula.replace(\r\n               new RegExp(\"{\" + colName + \"}\", \"g\"),\r\n               dateVal\r\n            );\r\n         }\r\n         // boolean fields\r\n         else if (f.key == \"boolean\") {\r\n            const booleanVal = `(${data || 0})`; // show 1 or 0 for boolean\r\n            formula = formula.replace(\r\n               new RegExp(\"{\" + colName + \"}\", \"g\"),\r\n               booleanVal\r\n            );\r\n         }\r\n      });\r\n\r\n      // decimal places - toFixed()\r\n      // FIX: floating number calculation\r\n      // https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/\r\n      return eval(formula).toFixed(place || 0);\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /**\r\n    * @method defaultValue\r\n    * insert a key=>value pair that represent the default value\r\n    * for this field.\r\n    * @param {obj} values a key=>value hash of the current values.\r\n    */\r\n   defaultValue(values) {\r\n      // this field is read only\r\n      delete values[this.columnName];\r\n   }\r\n\r\n   format(rowData) {\r\n      let place = 0;\r\n      if (this.settings.decimalSign != \"none\") {\r\n         place = this.settings.decimalPlaces;\r\n      }\r\n\r\n      try {\r\n         let result = this.constructor.convertToJs(\r\n            this.object,\r\n            this.settings.formula,\r\n            rowData,\r\n            place,\r\n            this.alias\r\n         );\r\n\r\n         switch (this.settings.decimalSign) {\r\n            case \"comma\":\r\n               result = result.replace(\".\", \",\");\r\n               break;\r\n            case \"space\":\r\n               result = result.replace(\".\", \" \");\r\n               break;\r\n         }\r\n\r\n         return result;\r\n      } catch (err) {\r\n         return \"\";\r\n      }\r\n   }\r\n};\r\n\r\n","/*\r\n * ABFieldCombine\r\n *\r\n * An ABFieldCombine defines a combined field type.\r\n *\r\n */\r\n\r\nconst ABField = require(\"../../platform/dataFields/ABField\");\r\n\r\nfunction L(key, altText) {\r\n   // TODO:\r\n   return altText; // AD.lang.label.getLabel(key) || altText;\r\n}\r\n\r\nconst ABFieldCombinedDefaults = {\r\n   key: \"combined\",\r\n   // unique key to reference this specific DataField\r\n\r\n   description: \"Combined Value\",\r\n   // description: what gets displayed in the Editor description.\r\n   // NOTE: this will be displayed using a Label: L(description)\r\n\r\n   icon: \"key\",\r\n   // font-awesome icon reference.  (without the 'fa-').  so 'key'  to\r\n   // reference 'fa-key'\r\n\r\n   isFilterable: true,\r\n   // {bool} / {fn}\r\n   // determines if the current ABField can be used to filter (FilterComplex\r\n   // or Query) data.\r\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\r\n   //  (field) => field.setting.something == true\r\n\r\n   isSortable: false,\r\n   // {bool} / {fn}\r\n   // determines if the current ABField can be used to Sort data.\r\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\r\n   //  (field) => true/false\r\n\r\n   menuName: \"Combined Field\",\r\n   // menuName: what gets displayed in the Editor drop list\r\n   // NOTE: this will be displayed using a Label: L(menuName)\r\n\r\n   supportRequire: false,\r\n   // {bool}\r\n   // does this ABField support the Required setting?\r\n\r\n   supportUnique: false,\r\n   // {bool}\r\n   // does this ABField support the Unique setting?\r\n\r\n   useAsLabel: true,\r\n   // {bool} / {fn}\r\n   // determines if this ABField can be used in the display of an ABObject's\r\n   // label.\r\n\r\n   compatibleOrmTypes: [\"string\"],\r\n   // {array}\r\n   // what types of Sails ORM attributes can be imported into this data type?\r\n   // http://sailsjs.org/documentation/concepts/models-and-orm/attributes#?attribute-options\r\n\r\n   compatibleMysqlTypes: [\"text\", \"mediumtext\", \"longtext\"],\r\n   // {array}\r\n   // what types of MySql column types can be imported into this data type?\r\n   // https://www.techonthenet.com/mysql/datatypes.php\r\n};\r\n\r\n// defaultValues: the keys must match a .name of your elements to set it's default value.\r\nconst defaultValues = {\r\n   combinedFields: \"\",\r\n   // {string} \"field's uuid1, field's uuid2, field's uuid3, ...\"\r\n   // This tells us what fields will be combined.\r\n   // if we don't have this, the old value which we filled out won't be cleared when we do \"Add field\" this type again.\r\n\r\n   delimiter: \"plus\", // plus, space, dash, period\r\n};\r\n\r\nmodule.exports = class ABFieldCombineCore extends ABField {\r\n   constructor(values, object) {\r\n      super(values, object, ABFieldCombinedDefaults);\r\n   }\r\n\r\n   // return the default values for this DataField\r\n   static defaults() {\r\n      return ABFieldCombinedDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return defaultValues;\r\n   }\r\n\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n\r\n      this.settings.delimiter =\r\n         values.settings.delimiter || defaultValues.delimiter;\r\n   }\r\n\r\n   /**\r\n    * @method defaultValue\r\n    * insert a key=>value pair that represent the default value\r\n    * for this field.\r\n    * @param {obj} values a key=>value hash of the current values.\r\n    */\r\n   defaultValue(values) {\r\n      // Remove every values, then we will use AUTO_INCREMENT of MySQL\r\n      delete values[this.columnName];\r\n   }\r\n\r\n   warnings() {\r\n      this._warnings = [];\r\n\r\n      (this.settings.combinedFields.split(\",\") || []).forEach((id) => {\r\n         var field = this.object.fieldByID(id);\r\n         if (!field) {\r\n            this.emit(\"warning\", \"dependent field not found\", {\r\n               fieldID: id,\r\n               combinedFields: this.settings.combinedFields,\r\n            });\r\n         }\r\n      });\r\n      // console.error(\"combinedFields:\", this.settings.combinedFields);\r\n\r\n      return this._warnings;\r\n   }\r\n};\r\n","/*\r\n * ABFieldConnect\r\n *\r\n * An ABFieldConnect defines a connect to other object field type.\r\n *\r\n */\r\n\r\nvar ABField = require(\"../../platform/dataFields/ABField\");\r\n\r\n// function L(key, altText) {\r\n//    // TODO:\r\n//    return altText; // AD.lang.label.getLabel(key) || altText;\r\n// }\r\n\r\nconst ABFieldConnectDefaults = {\r\n   key: \"connectObject\",\r\n   // unique key to reference this specific DataField\r\n\r\n   description: \"Connect two data objects together\",\r\n   // description: what gets displayed in the Editor description.\r\n   // NOTE: this will be displayed using a Label: L(description)\r\n\r\n   icon: \"external-link\",\r\n   // font-awesome icon reference.  (without the 'fa-').  so 'external-link'  to\r\n   // reference 'fa-external-link'\r\n\r\n   isFilterable: true,\r\n   // {bool} / {fn}\r\n   // determines if the current ABField can be used to filter (FilterComplex\r\n   // or Query) data.\r\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\r\n   //  (field) => field.setting.something == true\r\n\r\n   isSortable: (field) => {\r\n      const linkType = `${field?.settings?.linkType}:${field?.settings?.linkViaType}`;\r\n      return [\"one:many\", \"one:one\"].indexOf(linkType) > -1;\r\n   },\r\n   // {bool} / {fn}\r\n   // determines if the current ABField can be used to Sort data.\r\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\r\n   //  (field) => true/false\r\n\r\n   menuName: \"Connect to another record\",\r\n   // menuName: what gets displayed in the Editor drop list\r\n   // NOTE: this will be displayed using a Label: L(menuName)\r\n\r\n   supportRequire: false,\r\n   // {bool}\r\n   // does this ABField support the Required setting?\r\n\r\n   supportUnique: false,\r\n   // {bool}\r\n   // does this ABField support the Unique setting?\r\n\r\n   useAsLabel: false,\r\n   // {bool} / {fn}\r\n   // determines if this ABField can be used in the display of an ABObject's\r\n   // label.\r\n\r\n   compatibleOrmTypes: [\"string\"],\r\n   // {array}\r\n   // what types of Sails ORM attributes can be imported into this data type?\r\n   // http://sailsjs.org/documentation/concepts/models-and-orm/attributes#?attribute-options\r\n\r\n   compatibleMysqlTypes: [\"char\", \"varchar\", \"tinytext\"],\r\n   // {array}\r\n   // what types of MySql column types can be imported into this data type?\r\n   // https://www.techonthenet.com/mysql/datatypes.php\r\n};\r\n\r\nconst defaultValues = {\r\n   linkObject: \"\", // ABObject.id\r\n   // the .id of the ABObject we are connected to\r\n\r\n   linkType: \"one\", // [one, many]\r\n   // 'one' : this object can have only 1 of our linkObject\r\n   // 'many': this object can have MANY of our linkObject\r\n\r\n   linkViaType: \"many\", // [one, many]\r\n   // 'one' : the linkedObject can only have 1 of me\r\n   // 'many' : the linkedObject can have many of me\r\n\r\n   linkColumn: \"\", // ABField.id\r\n   // the .id of the field in the linkedObject that is our\r\n   // connected field.\r\n\r\n   isSource: null, // bit : 1,0\r\n   // isSource indicates that this object is the source of the connection:\r\n   // if linkType==one, and isSource=1, then the value in this object's field\r\n   // \t\tis the connected object's id\r\n   // if linkType == one, and isSource = 0, then the linkObject has this obj.id\r\n   //  \tin it's connected field (linkColumn)\r\n\r\n   // the next 3 Fields are concerning how we connect to other ABObjects when\r\n   // we are NOT using the .uuid as the connecting Value. Instead, there is an\r\n   // ABIndex setting we are connecting with.\r\n   isCustomFK: 0,\r\n   // {bool} truthy [0,1, etc...]\r\n   // indicates that this connection is using 1 or more custom foreign keys\r\n   // for the data it is storing in it's relationship.\r\n\r\n   indexField: \"\", // ABField.id\r\n   // {string} {ABField.id}\r\n   // In a Connection defined between A --> B, this field represents the ABField\r\n   // that is used for the data being stored.\r\n   // In 1:1,  1:M  or M:1  relationships, .indexField always refers to the\r\n   //       field we are pulling the Data FROM.\r\n   // In M:N relationships:  this will refer to the A.Field.id that is a custom\r\n   //       key (if any).\r\n\r\n   indexField2: \"\", // ABField.id\r\n   // {string}  {ABField.id}\r\n   // In the M:N relationship: this field refers to the B.Field.id that is a\r\n   //       custom Key for the data we are storing.\r\n};\r\n\r\nmodule.exports = class ABFieldConnectCore extends ABField {\r\n   constructor(values, object, fieldDefaults = ABFieldConnectDefaults) {\r\n      super(values, object, fieldDefaults);\r\n\r\n      this.isConnection = true;\r\n      // {bool}\r\n      // is this an ABFieldConnect type of field.\r\n      // this is a simplified helper to identify if an ABField is a type\r\n      // of connect field.  Since this is the only place it is defined,\r\n      // all other field types will be falsy\r\n\r\n      // // text to Int:\r\n      // this.settings.isSource = parseInt(this.settings.isSource || 0);\r\n      // this.settings.isCustomFK = parseInt(this.settings.isCustomFK || 0);\r\n   }\r\n\r\n   // return the default values for this DataField\r\n   static defaults() {\r\n      return ABFieldConnectDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return defaultValues;\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n\r\n      // text to Int:\r\n      this.settings.isSource = parseInt(this.settings.isSource || 0);\r\n      this.settings.isCustomFK = parseInt(this.settings.isCustomFK || 0);\r\n   }\r\n\r\n   warnings() {\r\n      this._warnings = [];\r\n\r\n      var linkField = this.fieldLink;\r\n      if (!linkField) {\r\n         this.emit(\r\n            \"warning\",\r\n            `ConnectField[${this.label}][${this.id}] is unable to find linked field[${this.settings.linkColumn}]`,\r\n            {\r\n               linkColumn: this.settings.linkColumn,\r\n            }\r\n         );\r\n      }\r\n\r\n      let linkObj = this.datasourceLink;\r\n      if (!linkObj) {\r\n         this.emit(\r\n            \"warning\",\r\n            `ConnectField[${this.label}][${this.id}] is unable to find linked object[${this.settings.linkObject}]`,\r\n            {\r\n               linkObject: this.settings.linkObject,\r\n            }\r\n         );\r\n      }\r\n\r\n      return this._warnings;\r\n   }\r\n\r\n   ///\r\n   /// Working with Actual Object Values:\r\n   ///\r\n\r\n   /**\r\n    * @method defaultValue\r\n    * insert a key=>value pair that represent the default value\r\n    * for this field.\r\n    * @param {obj} values a key=>value hash of the current values.\r\n    */\r\n   defaultValue(/* values */) {}\r\n\r\n   /**\r\n    * @method isValidData\r\n    * Parse through the given data and return an error if this field's\r\n    * data seems invalid.\r\n    * @param {obj} data  a key=>value hash of the inputs to parse.\r\n    * @param {OPValidator} validator  provided Validator fn\r\n    * @return {array}\r\n    */\r\n   isValidData(data, validator) {\r\n      super.isValidData(data, validator);\r\n   }\r\n\r\n   relationName() {\r\n      // there is object name - {objectName}.{columnName}\r\n      if (this.columnName.indexOf(\".\") > -1) {\r\n         const names = this.columnName.split(\".\");\r\n         return `${names[0]}.${this.AB.rules.toFieldRelationFormat(names[1])}`;\r\n      } else {\r\n         return this.AB.rules.toFieldRelationFormat(this.columnName);\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method datasourceLink\r\n    * return the ABObject that this field connection links to\r\n    * @return {ABObject}\r\n    */\r\n   get datasourceLink() {\r\n      const linkObj = this.AB.objectByID(this.settings.linkObject);\r\n      if (!linkObj) {\r\n         const configError = new Error(\r\n            `ConnectField[${this.label}][${this.id}] unable to find linkObject[${this.settings.linkObject}]`\r\n         );\r\n         this.AB.notify.builder(configError, {\r\n            field: this,\r\n            linkObject: this.settings.linkObject,\r\n         });\r\n      }\r\n      return linkObj;\r\n   }\r\n\r\n   /**\r\n    * @method fieldLink\r\n    * return the ABField that we are linked to.\r\n    * @return {ABDataField}  or undefined if not found.\r\n    */\r\n   get fieldLink() {\r\n      const objectLink = this.datasourceLink;\r\n      if (!objectLink) return null; // note: already Notified\r\n\r\n      const linkColumn = objectLink.fieldByID(this.settings.linkColumn);\r\n      if (!linkColumn) {\r\n         const configError = new Error(\r\n            `ConnectField[${this.label}][${this.id}] unable to find linkColumn[${this.settings.linkColumn}]`\r\n         );\r\n         this.AB.notify.builder(configError, {\r\n            field: this,\r\n            linkColumn: this.settings.linkColumn,\r\n         });\r\n      }\r\n      return linkColumn;\r\n   }\r\n\r\n   /**\r\n    * @method pullRelationValues\r\n    * Return the data values for this field entry in the provided data row.\r\n    * @param {*} row\r\n    * @return {array}\r\n    */\r\n   pullRelationValues(row) {\r\n      let selectedData;\r\n\r\n      // Get linked object\r\n      const linkedObject = this.datasourceLink;\r\n\r\n      let data = this.dataValue(row);\r\n      if (data && linkedObject) {\r\n         // convert to JSON\r\n         if (typeof data == \"string\") {\r\n            try {\r\n               data = JSON.parse(data);\r\n            } catch (e) {\r\n               // must be a UUID\r\n               // so just set that to selectedData:\r\n               selectedData = data;\r\n            }\r\n         }\r\n\r\n         selectedData = data;\r\n      }\r\n\r\n      return selectedData;\r\n   }\r\n\r\n   dataValue(rowData) {\r\n      if (rowData == null) return \"\";\r\n\r\n      const propName = `${this.object.name}.${this.relationName()}`;\r\n\r\n      return (\r\n         rowData[this.relationName()] ||\r\n         rowData[propName] ||\r\n         rowData[this.columnName] ||\r\n         \"\"\r\n      );\r\n   }\r\n\r\n   format(rowData) {\r\n      const val = this.pullRelationValues(rowData);\r\n      const linkedObject = this.datasourceLink;\r\n\r\n      // array\r\n      if (Array.isArray(val))\r\n         return val\r\n            .map((v) => {\r\n               if (v.text == null) return linkedObject.displayData(v) || \"\";\r\n               else return v.text || \"\";\r\n            })\r\n            .join(\", \");\r\n      // string\r\n      else if (val) {\r\n         if (val.text == null) return linkedObject.displayData(rowData) || \"\";\r\n         else if (val.text) return val.text || \"\";\r\n      }\r\n      // empty string\r\n      else return \"\";\r\n   }\r\n\r\n   /**\r\n    * @method linkType\r\n    * return the type of connection we have to our connected object\r\n    * @return {string}\r\n    */\r\n   linkType() {\r\n      return this.settings.linkType;\r\n   }\r\n\r\n   /**\r\n    * @method linkType\r\n    * return the type of connection we have to our connected object\r\n    * @return {string}\r\n    */\r\n   linkViaType() {\r\n      return this.settings.linkViaType;\r\n   }\r\n\r\n   /**\r\n    * @method isSource\r\n    * does this object contain the .id of the remote object (in case of linkType : one )\r\n    * @return {bool}\r\n    */\r\n   isSource() {\r\n      return this.settings.isSource;\r\n   }\r\n\r\n   /**\r\n    * @property indexField\r\n    * @return {ABField}\r\n    */\r\n   get indexField() {\r\n      if (!this.settings.isCustomFK || !this.settings.indexField) {\r\n         return null;\r\n      }\r\n\r\n      // 1:M\r\n      if (\r\n         this.settings.linkType == \"one\" &&\r\n         this.settings.linkViaType == \"many\"\r\n      ) {\r\n         return this.datasourceLink.fields(\r\n            (f) => f.id == this.settings.indexField\r\n         )[0];\r\n      }\r\n      // 1:1\r\n      else if (\r\n         this.settings.linkType == \"one\" &&\r\n         this.settings.linkViaType == \"one\"\r\n      ) {\r\n         if (this.settings.isSource) {\r\n            return this.datasourceLink.fields(\r\n               (f) => f.id == this.settings.indexField\r\n            )[0];\r\n         } else {\r\n            return this.object.fields(\r\n               (f) => f.id == this.settings.indexField\r\n            )[0];\r\n         }\r\n      }\r\n      // M:1\r\n      else if (\r\n         this.settings.linkType == \"many\" &&\r\n         this.settings.linkViaType == \"one\"\r\n      ) {\r\n         return this.object.fields((f) => f.id == this.settings.indexField)[0];\r\n      }\r\n      // M:N\r\n      else if (\r\n         this.settings.linkType == \"many\" &&\r\n         this.settings.linkViaType == \"many\"\r\n      ) {\r\n         let indexField = this.object.fields(\r\n            (f) => f.id == this.settings.indexField\r\n         )[0];\r\n\r\n         if (indexField == null)\r\n            indexField = this.datasourceLink.fields(\r\n               (f) => f.id == this.settings.indexField\r\n            )[0];\r\n\r\n         return indexField;\r\n      }\r\n\r\n      return null;\r\n   }\r\n\r\n   /**\r\n    * @property indexField2\r\n    * @return {ABField}\r\n    */\r\n   get indexField2() {\r\n      if (!this.settings.isCustomFK || !this.settings.indexField2) {\r\n         return null;\r\n      }\r\n\r\n      let indexField;\r\n\r\n      // M:N only\r\n      if (\r\n         this.settings.linkType == \"many\" &&\r\n         this.settings.linkViaType == \"many\"\r\n      ) {\r\n         indexField = this.object.fields(\r\n            (f) => f.id == this.settings.indexField2\r\n         )[0];\r\n\r\n         if (indexField == null)\r\n            indexField = this.datasourceLink.fields(\r\n               (f) => f.id == this.settings.indexField2\r\n            )[0];\r\n      }\r\n\r\n      return indexField;\r\n   }\r\n\r\n   /**\r\n    * @method getRelationValue\r\n    * pull values for update connect data\r\n    * @param {Object} rowData\r\n    * @param {Object} options - {\r\n    *                               forUpdate: boolean\r\n    *                           }\r\n    * @return {Object}\r\n    */\r\n   getRelationValue(rowData, options = {}) {\r\n      if (rowData == null) return;\r\n      let colName;\r\n      const indexField = this.indexField;\r\n      const datasourceLink = this.datasourceLink;\r\n\r\n      // custom index\r\n      // M:N\r\n      if (\r\n         this.settings.linkType == \"many\" &&\r\n         this.settings.linkViaType == \"many\"\r\n      ) {\r\n         const indexField2 = this.indexField2;\r\n\r\n         if (indexField && indexField.object.id == datasourceLink.id) {\r\n            colName = indexField.columnName;\r\n         } else if (indexField2 && indexField2.object.id == datasourceLink.id) {\r\n            colName = indexField2.columnName;\r\n         }\r\n      }\r\n      // 1:M, 1:1 isSource = true\r\n      else if (\r\n         indexField &&\r\n         ((this.settings.linkType == \"one\" &&\r\n            this.settings.linkViaType == \"many\") ||\r\n            (this.settings.linkType == \"one\" &&\r\n               this.settings.linkViaType == \"one\" &&\r\n               this.settings.isSource))\r\n      ) {\r\n         colName = indexField.columnName;\r\n      }\r\n      // M:1\r\n      else if (\r\n         this.settings.linkType == \"many\" &&\r\n         this.settings.linkViaType == \"one\"\r\n      ) {\r\n         // NOTE: M:1 has special case\r\n         // it uses different value for search and update.\r\n         // UPDATE uses row id\r\n         // SEARCH uses custom index value\r\n         if (options.forUpdate) {\r\n            colName = datasourceLink.PK();\r\n         } else {\r\n            colName = indexField\r\n               ? indexField.columnName\r\n               : this.fieldLink.columnName;\r\n         }\r\n      }\r\n      // NO CUSTOM INDEX\r\n      else if (datasourceLink) {\r\n         colName = datasourceLink.PK();\r\n      }\r\n\r\n      let result = rowData[colName] || rowData.id || rowData;\r\n\r\n      if (colName == \"id\") {\r\n         result = parseInt(result);\r\n      }\r\n\r\n      return result;\r\n   }\r\n};\r\n","/*\r\n * ABFieldCore\r\n *\r\n * ABFieldBase defines the common ABField structure that is shared between\r\n * the client and the server.  Mostly how it manages it's internal data, and\r\n * how it is related to the ABObject classes.\r\n *\r\n */\r\n// const ABEmitter = require(\"../../platform/ABEmitter\");\r\nconst ABMLClass = require(\"../../platform/ABMLClass\");\r\n\r\nmodule.exports = class ABFieldCore extends ABMLClass {\r\n   constructor(values, object, fieldDefaults) {\r\n      super([\"label\"], object.AB);\r\n\r\n      // NOTE: setup this first so later we can use .fieldType(), .fieldIcon()\r\n      this.defaults = fieldDefaults || {};\r\n\r\n      /*\r\n  \t\t{\r\n  \t\t\tid:'uuid',\t\t\t\t\t// uuid value for this obj\r\n  \t\t\tkey:'fieldKey',\t\t\t\t// unique key for this Field\r\n  \t\t\ticon:'font',\t\t\t\t// fa-[icon] reference for an icon for this Field Type\r\n  \t\t\tlabel:'',\t\t\t\t\t// pulled from translation\r\n\t\t\tcolumnName:'column_name',\t// a valid mysql table.column name\r\n\t\t\tisImported: 1/0,\t\t\t// flag to mark is import from other object\r\n\t\t\tsettings: {\t\t\t\t\t// unique settings for the type of field\r\n\t\t\t\tshowIcon:true/false,\t// only useful in Object Workspace DataTable\r\n\t\t\t\tisImported: 1/0,\t\t// flag to mark is import from other object\r\n\t\t\t\trequired: 1/0,\t\t\t// field allows does not allow NULL or it does allow NULL\r\n\t\t\t\twidth: {int}\t\t\t// width of display column\r\n\r\n\t\t\t\t// specific for dataField\r\n\t\t\t},\r\n\t\t\ttranslations:[]\r\n  \t\t}\r\n  \t\t*/\r\n\r\n      this.object = object;\r\n\r\n      this.fromValues(values);\r\n   }\r\n\r\n   ///\r\n   /// Static Methods\r\n   ///\r\n   /// Available to the Class level object.  These methods are not dependent\r\n   /// on the instance values of the Application.\r\n   ///\r\n   static get reservedNames() {\r\n      return [\r\n         \"id\",\r\n         \"created_at\",\r\n         \"updated_at\",\r\n         \"properties\",\r\n         \"createdAt\",\r\n         \"updatedAt\",\r\n      ];\r\n   }\r\n\r\n   static defaultValues() {\r\n      return {};\r\n   }\r\n\r\n   // unique key to reference this specific DataField\r\n   fieldKey() {\r\n      return this.defaults.key;\r\n   }\r\n\r\n   /**\r\n    * Sails ORM data types that can be imported to this DataField\r\n    * @return {Array}\r\n    */\r\n   fieldOrmTypes() {\r\n      if (this.defaults.compatibleOrmTypes) {\r\n         if (Array.isArray(this.defaults.compatibleOrmTypes)) {\r\n            return this.defaults.compatibleOrmTypes;\r\n         } else {\r\n            return [this.defaults.compatibleOrmTypes];\r\n         }\r\n      } else {\r\n         return [];\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Mysql data types that can be imported to this DataField\r\n    * @return {Array}\r\n    */\r\n   fieldMysqlTypes() {\r\n      if (this.defaults.compatibleMysqlTypes) {\r\n         if (Array.isArray(this.defaults.compatibleMysqlTypes)) {\r\n            return this.defaults.compatibleMysqlTypes;\r\n         } else {\r\n            return [this.defaults.compatibleMysqlTypes];\r\n         }\r\n      } else {\r\n         return [];\r\n      }\r\n   }\r\n\r\n   // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\r\n   fieldIcon() {\r\n      return this.defaults.icon;\r\n   }\r\n\r\n   // the multilingual text for the name of this data field.\r\n   fieldMenuName() {\r\n      return this.defaults.menuName;\r\n   }\r\n\r\n   // the multilingual text for the name of this data field.\r\n   fieldDescription() {\r\n      return this.defaults.description;\r\n   }\r\n\r\n   // the flag to set when checking if field should be filterable\r\n   fieldIsFilterable() {\r\n      if (this.defaults.isFilterable != null) {\r\n         if (typeof this.defaults.isFilterable === \"function\") {\r\n            return this.defaults.isFilterable(this);\r\n         } else {\r\n            return this.defaults.isFilterable;\r\n         }\r\n      }\r\n\r\n      return 1;\r\n   }\r\n\r\n   // the flag to set when checking if field should be sortable\r\n   fieldIsSortable() {\r\n      if (this.defaults.isSortable != null) {\r\n         if (typeof this.defaults.isSortable === \"function\") {\r\n            return this.defaults.isSortable(this);\r\n         } else {\r\n            return this.defaults.isSortable;\r\n         }\r\n      }\r\n\r\n      return 1;\r\n   }\r\n\r\n   // the flag to set when checking if the field should be used as a label\r\n   fieldUseAsLabel() {\r\n      if (this.defaults.useAsLabel != null) {\r\n         if (typeof this.defaults.useAsLabel === \"function\") {\r\n            return this.defaults.useAsLabel(this);\r\n         } else {\r\n            return this.defaults.useAsLabel;\r\n         }\r\n      }\r\n\r\n      return 1;\r\n   }\r\n\r\n   fieldSupportRequire() {\r\n      if (this.defaults.supportRequire) return this.defaults.supportRequire;\r\n      // default\r\n      else return true;\r\n   }\r\n\r\n   fieldSupportQuery() {\r\n      if (this.defaults.supportQuery != null) {\r\n         if (typeof this.defaults.supportQuery === \"function\") {\r\n            return this.defaults.supportQuery(this);\r\n         } else {\r\n            return this.defaults.supportQuery;\r\n         }\r\n      }\r\n\r\n      return true;\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /// ABApplication data methods\r\n\r\n   /**\r\n    * @method toObj()\r\n    *\r\n    * properly compile the current state of this ABField instance\r\n    * into the values needed for saving to the DB.\r\n    *\r\n    * @return {json}\r\n    */\r\n   toObj() {\r\n      const obj = super.toObj();\r\n\r\n      return {\r\n         id: this.id,\r\n         type: this.type || \"field\",\r\n         key: this.key,\r\n         icon: this.icon,\r\n         isImported: this.isImported,\r\n         columnName: this.columnName,\r\n         settings: this.settings,\r\n         translations: obj.translations,\r\n      };\r\n   }\r\n\r\n   defaultCheck(val, defaultVal) {\r\n      let returnVal = defaultVal;\r\n      if (typeof val != \"undefined\") {\r\n         returnVal = val;\r\n      }\r\n      return returnVal;\r\n   }\r\n\r\n   /**\r\n    * @method fromValues()\r\n    *\r\n    * initialze this object with the given set of values.\r\n    * @param {obj} values\r\n    */\r\n   fromValues(values) {\r\n      if (!this.id) this.id = values.id; // NOTE: only exists after .save()\r\n      this.type == values.type || \"field\";\r\n      this.key = values.key || this.fieldKey();\r\n      this.icon = values.icon || this.fieldIcon();\r\n\r\n      // if this is being instantiated on a read from the Property UI,\r\n      // .label is coming in under .settings.label\r\n      this.label = values.label || values.settings.label || \"?label?\";\r\n\r\n      this.columnName = values.columnName || \"\";\r\n\r\n      this.isImported = values.isImported || 0;\r\n\r\n      values.settings = values.settings || {};\r\n      this.settings = values.settings;\r\n      this.settings.showIcon = this.defaultCheck(values.settings.showIcon, \"1\");\r\n      this.settings.required = this.defaultCheck(values.settings.required, \"0\");\r\n      this.settings.width = this.defaultCheck(values.settings.width, \"0\");\r\n\r\n      // convert from \"0\" => 0\r\n      this.isImported = parseInt(this.isImported);\r\n      this.settings.showIcon = parseInt(this.settings.showIcon);\r\n      this.settings.required = parseInt(this.settings.required);\r\n      this.settings.unique = parseInt(this.settings.unique || 0);\r\n      this.settings.width = parseInt(this.settings.width);\r\n\r\n      // we're responsible for setting up our specific settings:\r\n      const defaultValues = this.constructor.defaultValues() || {};\r\n      for (const dv in defaultValues) {\r\n         this.settings[dv] = this.defaultCheck(\r\n            values.settings[dv],\r\n            defaultValues[dv]\r\n         );\r\n      }\r\n\r\n      // const the MLClass now process the Translations\r\n      super.fromValues(values);\r\n\r\n      // final validity check: columnName really should have a value:\r\n      this.columnName = this.columnName || this.label;\r\n\r\n      // knex does not like .(dot) in table and column names\r\n      // https://github.com/knex/knex/issues/2762\r\n      this.columnName = this.columnName.replace(/[^a-zA-Z0-9_ ]/gi, \"\");\r\n   }\r\n\r\n   /**\r\n    * @method urlPointer()\r\n    * return a string pointer to decode this object from the root application\r\n    * object.\r\n    * @return {string} pointer reference\r\n    */\r\n   urlPointer() {\r\n      return this.object.urlField() + this.id;\r\n   }\r\n\r\n   /**\r\n    * @method defaultValue\r\n    * insert a key=>value pair that represent the default value\r\n    * for this field.\r\n    * @param {obj} values a key=>value hash of the current values.\r\n    */\r\n   defaultValue(values) {\r\n      values[this.columnName] = \"\";\r\n   }\r\n\r\n   /**\r\n    * @method isValidData\r\n    * Parse through the given data and return an error if this field's\r\n    * data seems invalid.\r\n    * @param {obj} data  a key=>value hash of the inputs to parse.\r\n    */\r\n   isValidData(data, validator) {\r\n      // console.error('!!! Field ['+this.fieldKey()+'] has not implemented .isValidData()!!!');\r\n      if (\r\n         this.settings.required &&\r\n         (data[this.columnName] == null || data[this.columnName] == \"\") &&\r\n         data[this.columnName] != 0\r\n      ) {\r\n         validator.addError(this.columnName, \"This is a required field.\");\r\n      }\r\n   }\r\n\r\n   /*\r\n    * @property isMultilingual\r\n    * does this field represent multilingual data?\r\n    * @return {bool}\r\n    */\r\n   get isMultilingual() {\r\n      return false;\r\n   }\r\n\r\n   dataValue(rowData) {\r\n      const propName = `${this.alias || this.object.name}.${this.columnName}`;\r\n\r\n      let result = \"\";\r\n      if (rowData[this.columnName] != null) {\r\n         result = rowData[this.columnName];\r\n      } else if (rowData[propName] != null) {\r\n         result = rowData[propName];\r\n      }\r\n\r\n      return result;\r\n   }\r\n\r\n   /**\r\n    * @method format\r\n    * return display text to detail comonent and define label of object\r\n    *\r\n    * @param {Object} rowData - data\r\n    */\r\n   format(rowData) {\r\n      if (rowData) {\r\n         return this.dataValue(rowData);\r\n      } else return \"\";\r\n   }\r\n\r\n   /**\r\n    * @method toDefinition()\r\n    *\r\n    * convert this instance into an ABDefinition object.\r\n    *\r\n    * @return {ABDefinition}\r\n    */\r\n   toDefinition() {\r\n      const myDef = super.toDefinition();\r\n\r\n      // attempt to provide a more descriptive name:\r\n      // [obj]->[fieldName]\r\n      if (myDef.name == \"\") {\r\n         myDef.name =\r\n            myDef.json.name || myDef.json.label || myDef.json.columnName;\r\n      }\r\n      if (this.object && this.object.name) {\r\n         myDef.name = `${this.object.name}->${myDef.name}`;\r\n      }\r\n      return myDef;\r\n   }\r\n};\r\n","/*\r\n * ABFieldDate\r\n *\r\n * An ABFieldDate defines a date field type.\r\n *\r\n */\r\n\r\nconst ABField = require(\"../../platform/dataFields/ABField\");\r\n\r\nfunction L(key, altText) {\r\n   // TODO:\r\n   return altText; // AD.lang.label.getLabel(key) || altText;\r\n}\r\n\r\nconst ABFieldDateDefaults = {\r\n   key: \"date\",\r\n   // unique key to reference this specific DataField\r\n\r\n   description: \"Pick one from a calendar.\",\r\n   // description: what gets displayed in the Editor description.\r\n   // NOTE: this will be displayed using a Label: L(description)\r\n\r\n   icon: \"calendar\",\r\n   // font-awesome icon reference.  (without the 'fa-').  so 'calendar'  to\r\n   // reference 'fa-calendar'\r\n\r\n   isFilterable: true,\r\n   // {bool} / {fn}\r\n   // determines if the current ABField can be used to filter (FilterComplex\r\n   // or Query) data.\r\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\r\n   //  (field) => field.setting.something == true\r\n\r\n   isSortable: true,\r\n   // {bool} / {fn}\r\n   // determines if the current ABField can be used to Sort data.\r\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\r\n   //  (field) => true/false\r\n\r\n   menuName: \"Date\",\r\n   // menuName: what gets displayed in the Editor drop list\r\n   // NOTE: this will be displayed using a Label: L(menuName)\r\n\r\n   supportRequire: true,\r\n   // {bool}\r\n   // does this ABField support the Required setting?\r\n\r\n   supportUnique: false,\r\n   // {bool}\r\n   // does this ABField support the Unique setting?\r\n\r\n   useAsLabel: true,\r\n   // {bool} / {fn}\r\n   // determines if this ABField can be used in the display of an ABObject's\r\n   // label.\r\n\r\n   compatibleOrmTypes: [\"date\"],\r\n   // {array}\r\n   // what types of Sails ORM attributes can be imported into this data type?\r\n   // http://sailsjs.org/documentation/concepts/models-and-orm/attributes#?attribute-options\r\n\r\n   compatibleMysqlTypes: [\"date\"],\r\n   // {array}\r\n   // what types of MySql column types can be imported into this data type?\r\n   // https://www.techonthenet.com/mysql/datatypes.php\r\n};\r\n\r\nconst defaultValues = {\r\n   dateFormat: 2, // 1 (Ignore date), 2, 3, 4, 5\r\n   defaultDate: 1, // 1 (None), 2 (Current Date), 3 (Specific Date)\r\n   defaultDateValue: null, // {Date}\r\n   validateCondition: \"none\",\r\n   validateRangeUnit: \"days\",\r\n   validateRangeBefore: 0,\r\n   validateRangeAfter: 0,\r\n   validateStartDate: null,\r\n   validateEndDate: null,\r\n};\r\n\r\nmodule.exports = class ABFieldDateCore extends ABField {\r\n   constructor(values, object, defaultValues = ABFieldDateDefaults) {\r\n      super(values, object, defaultValues);\r\n   }\r\n\r\n   // return the default values for this DataField\r\n   static defaults() {\r\n      return ABFieldDateDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return defaultValues;\r\n   }\r\n\r\n   // TODO: current webpack install fails here without babel-loader,\r\n   // so swtich this to old JS method of Static Values (see bottom)\r\n   // static RegEx = \"^[0-9]{4}-[0-9]{2}-[0-9]{2}$\";\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /**\r\n    * @method fromValues()\r\n    *\r\n    * initialze this object with the given set of values.\r\n    * @param {obj} values\r\n    */\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n\r\n      // text to Int:\r\n      this.settings.dateFormat = parseInt(this.settings.dateFormat);\r\n      this.settings.defaultDate = parseInt(this.settings.defaultDate);\r\n   }\r\n\r\n   ///\r\n   /// Working with Actual Object Values:\r\n   ///\r\n\r\n   /**\r\n    * @method defaultValue\r\n    * insert a key=>value pair that represent the default value\r\n    * for this field.\r\n    * @param {obj} values a key=>value hash of the current values.\r\n    */\r\n   defaultValue(values) {\r\n      if (values[this.columnName] != null) return;\r\n\r\n      let dateResult;\r\n\r\n      // Set current date as default\r\n      if (this.settings.defaultDate == 2) {\r\n         dateResult = new Date();\r\n      }\r\n      // Set specific date as default\r\n      else if (\r\n         this.settings.defaultDate == 3 &&\r\n         this.settings.defaultDateValue\r\n      ) {\r\n         dateResult = new Date(this.settings.defaultDateValue);\r\n      }\r\n\r\n      // if no default value is set, then don't insert a value.\r\n      if (dateResult != null) {\r\n         values[this.columnName] = this.AB.toDateFormat(dateResult, {\r\n            format: \"YYYY-MM-DD\",\r\n         });\r\n         // values[this.columnName] = moment(dateResult).format(\"YYYY-MM-DD\");\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method isValidData\r\n    * Parse through the given data and return an error if this field's\r\n    * data seems invalid.\r\n    * @param {obj} data  a key=>value hash of the inputs to parse.\r\n    * @param {OPValidator} validator  provided Validator fn\r\n    */\r\n   isValidData(data, validator) {\r\n      super.isValidData(data, validator);\r\n\r\n      if (data[this.columnName]) {\r\n         let value = data[this.columnName];\r\n\r\n         if (!(value instanceof Date)) {\r\n            value = this.AB.toDate(value);\r\n            // value = new Date(this.convertToMoment(value));\r\n         }\r\n\r\n         // verify we didn't end up with an InValid Date result.\r\n         if (\r\n            Object.prototype.toString.call(value) === \"[object Date]\" &&\r\n            isFinite(value)\r\n         ) {\r\n            let isValid = true;\r\n\r\n            // Custom vaildate is here\r\n            if (this.settings && this.settings.validateCondition) {\r\n               const startDate = this.settings.validateStartDate\r\n                     ? new Date(this.settings.validateStartDate)\r\n                     : null,\r\n                  endDate = this.settings.validateEndDate\r\n                     ? new Date(this.settings.validateEndDate)\r\n                     : null,\r\n                  startDateDisplay = this.getDateDisplay(startDate),\r\n                  endDateDisplay = this.getDateDisplay(endDate);\r\n               const minDate = this.AB.subtractDate(\r\n                  new Date(),\r\n                  this.settings.validateRangeBefore,\r\n                  this.settings.validateRangeUnit\r\n               );\r\n               const maxDate = this.AB.addDate(\r\n                  new Date(),\r\n                  this.settings.validateRangeAfter,\r\n                  this.settings.validateRangeUnit\r\n               );\r\n               switch (this.settings.validateCondition) {\r\n                  case \"dateRange\":\r\n                     if (minDate < value && value < maxDate) isValid = true;\r\n                     else {\r\n                        isValid = false;\r\n                        validator.addError(\r\n                           this.columnName,\r\n                           L(\"Should be in between {0} and {1}\", [\r\n                              this.getDateDisplay(minDate),\r\n                              this.getDateDisplay(maxDate),\r\n                           ])\r\n                        );\r\n                     }\r\n\r\n                     break;\r\n                  case \"between\":\r\n                     if (startDate < value && value < endDate) isValid = true;\r\n                     else {\r\n                        isValid = false;\r\n                        validator.addError(\r\n                           this.columnName,\r\n                           L(\"Should be in between {0} and {1}\", [\r\n                              startDateDisplay,\r\n                              endDateDisplay,\r\n                           ])\r\n                        );\r\n                     }\r\n                     break;\r\n                  case \"notBetween\":\r\n                     if (value < startDate && endDate < value) isValid = true;\r\n                     else {\r\n                        isValid = false;\r\n                        validator.addError(\r\n                           this.columnName,\r\n                           L(\"Should not be in between {0} and {1}\", [\r\n                              startDateDisplay,\r\n                              endDateDisplay,\r\n                           ])\r\n                        );\r\n                     }\r\n                     break;\r\n                  case \"=\":\r\n                     isValid =\r\n                        value.getTime &&\r\n                        startDate.getTime &&\r\n                        value.getTime() == startDate.getTime();\r\n                     if (!isValid)\r\n                        validator.addError(\r\n                           this.columnName,\r\n                           L(\"Should equal {0}\", [startDateDisplay])\r\n                        );\r\n                     break;\r\n                  case \"<>\":\r\n                     isValid =\r\n                        value.getTime &&\r\n                        startDate.getTime &&\r\n                        value.getTime() != startDate.getTime();\r\n                     if (!isValid)\r\n                        validator.addError(\r\n                           this.columnName,\r\n                           L(\"Should not equal {0}\", [startDateDisplay])\r\n                        );\r\n                     break;\r\n                  case \">\":\r\n                     isValid =\r\n                        value.getTime &&\r\n                        startDate.getTime &&\r\n                        value.getTime() > startDate.getTime();\r\n                     if (!isValid)\r\n                        validator.addError(\r\n                           this.columnName,\r\n                           L(\"Should after {0}\", [startDateDisplay])\r\n                        );\r\n                     break;\r\n                  case \"<\":\r\n                     isValid =\r\n                        value.getTime &&\r\n                        startDate.getTime &&\r\n                        value.getTime() < startDate.getTime();\r\n                     if (!isValid)\r\n                        validator.addError(\r\n                           this.columnName,\r\n                           L(\"Should before {0}\", [startDateDisplay])\r\n                        );\r\n                     break;\r\n                  case \">=\":\r\n                     isValid =\r\n                        value.getTime &&\r\n                        startDate.getTime &&\r\n                        value.getTime() >= startDate.getTime();\r\n                     if (!isValid)\r\n                        validator.addError(\r\n                           this.columnName,\r\n                           L(\"Should after or equal {0}\", [startDateDisplay])\r\n                        );\r\n                     break;\r\n                  case \"<=\":\r\n                     isValid =\r\n                        value.getTime &&\r\n                        startDate.getTime &&\r\n                        value.getTime() <= startDate.getTime();\r\n                     if (!isValid)\r\n                        validator.addError(\r\n                           this.columnName,\r\n                           L(\"Should before or equal {0}\", [startDateDisplay])\r\n                        );\r\n                     break;\r\n               }\r\n            }\r\n\r\n            if (isValid) {\r\n               // Reformat value to DB\r\n               // NOTE: should we update here?\r\n               data[this.columnName] = this.exportValue(value);\r\n            }\r\n         } else {\r\n            // return a validation error\r\n            validator.addError(this.columnName, \"Should be a Date!\");\r\n         }\r\n      }\r\n   }\r\n\r\n   format(rowData) {\r\n      const d = this.dataValue(rowData);\r\n\r\n      if (d == \"\" || d == null) {\r\n         return \"\";\r\n      }\r\n\r\n      // pull format from settings.\r\n      const dateObj = this.AB.toDate(d);\r\n      return this.getDateDisplay(dateObj);\r\n\r\n      // const momentObj = this.convertToMoment(d);\r\n      // return this.getDateDisplay(new Date(momentObj));\r\n   }\r\n\r\n   getFormat() {\r\n      let dateFormatString = \"\";\r\n\r\n      const dateFormat =\r\n         this.settings && this.settings.dateFormat\r\n            ? this.settings.dateFormat\r\n            : \"\";\r\n\r\n      switch (dateFormat) {\r\n         //Ignore Date\r\n         case (1, 2):\r\n            {\r\n               dateFormatString = \"%d/%m/%Y\";\r\n            }\r\n            break;\r\n         //mm/dd/yyyy\r\n         case 3:\r\n            {\r\n               dateFormatString = \"%m/%d/%Y\";\r\n            }\r\n            break;\r\n         //M D, yyyy\r\n         case 4:\r\n            {\r\n               dateFormatString = \"%M %d, %Y\";\r\n            }\r\n            break;\r\n         //D M, yyyy\r\n         case 5:\r\n            {\r\n               dateFormatString = \"%d %M, %Y\";\r\n            }\r\n            break;\r\n         default:\r\n            {\r\n               dateFormatString = \"%d/%m/%Y\";\r\n            }\r\n            break;\r\n      }\r\n\r\n      return dateFormatString;\r\n   }\r\n\r\n   getDateDisplay(dateData) {\r\n      const dateFormat = this.getFormat();\r\n\r\n      return this.dateToString(dateFormat, dateData);\r\n   }\r\n\r\n   // convertToMoment(string) {\r\n   //    const result = moment(string);\r\n\r\n   //    const supportFormats = [\r\n   //       \"DD/MM/YYYY\",\r\n   //       \"MM/DD/YYYY\",\r\n   //       \"DD-MM-YYYY\",\r\n   //       \"MM-DD-YYYY\"\r\n   //    ];\r\n\r\n   //    supportFormats.forEach((format) => {\r\n   //       if (!result || !result.isValid()) result = moment(string, format);\r\n   //    });\r\n\r\n   //    return result;\r\n   // }\r\n\r\n   exportValue(value) {\r\n      return this.AB.toDateFormat(value, {\r\n         format: \"YYYY-MM-DD\",\r\n      });\r\n      // return this.convertToMoment(value).format(\"YYYY-MM-DD\");\r\n   }\r\n\r\n   dateToString(dateFormat, dateData) {\r\n      if (dateData && dateData.toString) return dateData.toString();\r\n      else return \"\";\r\n   }\r\n};\r\n\r\n// Transition Code:\r\n// revert to static RegEx once babel-loader is working locally.\r\nmodule.exports.RegEx = \"^[0-9]{4}-[0-9]{2}-[0-9]{2}$\";\r\n","/*\r\n * ABFieldDateTime\r\n *\r\n * An ABFieldDateTime defines a datetime field type.\r\n *\r\n */\r\n\r\nconst ABFieldDateCore = require(\"./ABFieldDateCore\");\r\n\r\nfunction L(key, altText) {\r\n   // TODO:\r\n   return altText; // AD.lang.label.getLabel(key) || altText;\r\n}\r\n\r\nconst ABFieldDateDefaults = {\r\n   key: \"datetime\",\r\n   // unique key to reference this specific DataField\r\n\r\n   description: \"Pick one from date & time.\",\r\n   // description: what gets displayed in the Editor description.\r\n   // NOTE: this will be displayed using a Label: L(description)\r\n\r\n   icon: \"clock-o\",\r\n   // font-awesome icon reference.  (without the 'fa-').  so 'clock-o'  to\r\n   // reference 'clock-o'\r\n\r\n   isFilterable: true,\r\n   // {bool} / {fn}\r\n   // determines if the current ABField can be used to filter (FilterComplex\r\n   // or Query) data.\r\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\r\n   //  (field) => field.setting.something == true\r\n\r\n   isSortable: false,\r\n   // {bool} / {fn}\r\n   // determines if the current ABField can be used to Sort data.\r\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\r\n   //  (field) => true/false\r\n\r\n   menuName: \"Date & Time\",\r\n   // menuName: what gets displayed in the Editor drop list\r\n   // NOTE: this will be displayed using a Label: L(menuName)\r\n\r\n   supportRequire: true,\r\n   // {bool}\r\n   // does this ABField support the Required setting?\r\n\r\n   supportUnique: false,\r\n   // {bool}\r\n   // does this ABField support the Unique setting?\r\n\r\n   useAsLabel: true,\r\n   // {bool} / {fn}\r\n   // determines if this ABField can be used in the display of an ABObject's\r\n   // label.\r\n\r\n   compatibleOrmTypes: [\"datetime\"],\r\n   // {array}\r\n   // what types of Sails ORM attributes can be imported into this data type?\r\n   // http://sailsjs.org/documentation/concepts/models-and-orm/attributes#?attribute-options\r\n\r\n   compatibleMysqlTypes: [\"datetime\"],\r\n   // {array}\r\n   // what types of MySql column types can be imported into this data type?\r\n   // https://www.techonthenet.com/mysql/datatypes.php\r\n};\r\n\r\nconst defaultValues = {\r\n   timeFormat: 2, // 1 (Ignore time), 2, 3\r\n   defaultTime: 1, // 1 (None), 2 (Current Time), 3 (Specific Time)\r\n   defaultTimeValue: null, // {Date}\r\n};\r\n\r\nmodule.exports = class ABFieldDateTimeCore extends ABFieldDateCore {\r\n   constructor(values, object) {\r\n      super(values, object, ABFieldDateDefaults);\r\n   }\r\n\r\n   // return the default values for this DataField\r\n   static defaults() {\r\n      return ABFieldDateDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      const baseDefault = super.defaultValues();\r\n      return Object.assign(baseDefault, defaultValues);\r\n   }\r\n\r\n   // TODO: current webpack install fails here without babel-loader,\r\n   // so swtich this to old JS method of Static Values (see bottom)\r\n   // static RegEx = \"^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}$\";\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /**\r\n    * @method fromValues()\r\n    *\r\n    * initialze this object with the given set of values.\r\n    * @param {obj} values\r\n    */\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n\r\n      // text to Int:\r\n      this.settings.timeFormat = parseInt(this.settings.timeFormat);\r\n      this.settings.defaultTime = parseInt(this.settings.defaultTime);\r\n   }\r\n\r\n   ///\r\n   /// Working with Actual Object Values:\r\n   ///\r\n\r\n   /**\r\n    * @method defaultValue\r\n    * insert a key=>value pair that represent the default value\r\n    * for this field.\r\n    * @param {obj} values a key=>value hash of the current values.\r\n    */\r\n   defaultValue(values) {\r\n      if (values[this.columnName] != null) return;\r\n\r\n      super.defaultValue(values);\r\n\r\n      let dateResult;\r\n\r\n      // From default value of ABFieldDateCore\r\n      if (values[this.columnName]) {\r\n         dateResult = this.AB.toDate(values[this.columnName]);\r\n         // const momentVal = this.convertToMoment(values[this.columnName]);\r\n         // if (momentVal.isValid()) {\r\n         //    dateResult = new Date(momentVal);\r\n         // }\r\n      }\r\n\r\n      // Set current time as default\r\n      if (this.settings.defaultTime == 2) {\r\n         const currDate = new Date();\r\n\r\n         if (dateResult == null) dateResult = new Date();\r\n\r\n         dateResult.setHours(currDate.getHours());\r\n         dateResult.setMinutes(currDate.getMinutes());\r\n         dateResult.setSeconds(currDate.getSeconds());\r\n         dateResult.setMilliseconds(currDate.getMilliseconds());\r\n      }\r\n      // Set specific time as default\r\n      else if (\r\n         this.settings.defaultTime == 3 &&\r\n         this.settings.defaultTimeValue\r\n      ) {\r\n         const defaultTime = new Date(this.settings.defaultTimeValue);\r\n\r\n         if (dateResult == null) dateResult = new Date();\r\n\r\n         dateResult.setHours(defaultTime.getHours());\r\n         dateResult.setMinutes(defaultTime.getMinutes());\r\n         dateResult.setSeconds(defaultTime.getSeconds());\r\n         dateResult.setMilliseconds(defaultTime.getMilliseconds());\r\n      }\r\n\r\n      // if no default value is set, then don't insert a value.\r\n      if (dateResult != null)\r\n         values[this.columnName] = dateResult.toISOString();\r\n   }\r\n\r\n   getFormat() {\r\n      const timeFormat = this.getTimeFormat();\r\n\r\n      this.settings = this.settings || {};\r\n\r\n      if (this.settings.dateFormat == 1) {\r\n         return timeFormat;\r\n      }\r\n\r\n      const dateFormat = super.getFormat();\r\n\r\n      return `${dateFormat} ${timeFormat}`;\r\n   }\r\n\r\n   format(rowData) {\r\n      const datetimeFormat = this.getFormat();\r\n      const d = this.dataValue(rowData);\r\n      const dateObj = this.AB.toDate(d);\r\n\r\n      if (d == \"\" || d == null) {\r\n         return \"\";\r\n      }\r\n\r\n      return webix.Date.dateToStr(datetimeFormat)(dateObj);\r\n   }\r\n\r\n   getTimeFormat() {\r\n      this.settings = this.settings || {};\r\n      switch (this.settings.timeFormat) {\r\n         case 2:\r\n            return \" %h:%i %A\";\r\n         case 3:\r\n            return \" %H:%i\";\r\n         default:\r\n            return \"\";\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method exportValue\r\n    * @param {Date} date\r\n    * @return {string}\r\n    */\r\n   exportValue(date) {\r\n      return date.toISOString();\r\n   }\r\n};\r\n\r\n// Transition Code:\r\n// revert to static RegEx once babel-loader is working locally.\r\nmodule.exports.RegEx =\r\n   \"^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}$\";\r\n","/*\r\n * ABFieldEmail\r\n *\r\n * An ABFieldEmail defines a boolean field type.\r\n *\r\n */\r\n\r\nconst ABField = require(\"../../platform/dataFields/ABField\");\r\n\r\nfunction L(key, altText) {\r\n   // TODO:\r\n   return altText; // AD.lang.label.getLabel(key) || altText;\r\n}\r\n\r\nconst ABFieldEmailDefaults = {\r\n   key: \"email\",\r\n   // unique key to reference this specific DataField\r\n\r\n   description: \"Email fields are used to store email addresses.\",\r\n   // description: what gets displayed in the Editor description.\r\n   // NOTE: this will be displayed using a Label: L(description)\r\n\r\n   icon: \"envelope\",\r\n   // font-awesome icon reference.  (without the 'fa-').  so 'envelope'  to\r\n   // reference 'fa-envelope'\r\n\r\n   isFilterable: true,\r\n   // {bool} / {fn}\r\n   // determines if the current ABField can be used to filter (FilterComplex\r\n   // or Query) data.\r\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\r\n   //  (field) => field.setting.something == true\r\n\r\n   isSortable: false,\r\n   // {bool} / {fn}\r\n   // determines if the current ABField can be used to Sort data.\r\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\r\n   //  (field) => true/false\r\n\r\n   menuName: \"Email\",\r\n   // menuName: what gets displayed in the Editor drop list\r\n   // NOTE: this will be displayed using a Label: L(menuName)\r\n\r\n   supportRequire: true,\r\n   // {bool}\r\n   // does this ABField support the Required setting?\r\n\r\n   supportUnique: true,\r\n   // {bool}\r\n   // does this ABField support the Unique setting?\r\n\r\n   useAsLabel: true,\r\n   // {bool} / {fn}\r\n   // determines if this ABField can be used in the display of an ABObject's\r\n   // label.\r\n\r\n   compatibleOrmTypes: [\"string\"],\r\n   // {array}\r\n   // what types of Sails ORM attributes can be imported into this data type?\r\n   // http://sailsjs.org/documentation/concepts/models-and-orm/attributes#?attribute-options\r\n\r\n   compatibleMysqlTypes: [\"char\", \"varchar\", \"tinytext\"],\r\n   // {array}\r\n   // what types of MySql column types can be imported into this data type?\r\n   // https://www.techonthenet.com/mysql/datatypes.php\r\n};\r\n\r\nconst defaultValues = {\r\n   default: \"\",\r\n   defaultCheckbox: 0,\r\n};\r\n\r\nmodule.exports = class ABFieldEmailCore extends ABField {\r\n   constructor(values, object) {\r\n      super(values, object, ABFieldEmailDefaults);\r\n   }\r\n\r\n   // return the default values for this DataField\r\n   static defaults() {\r\n      return ABFieldEmailDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return defaultValues;\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n\r\n      this.settings.default = values.settings.default || \"\";\r\n   }\r\n\r\n   ///\r\n   /// Working with Actual Object Values:\r\n   ///\r\n\r\n   /**\r\n    * @method defaultValue\r\n    * insert a key=>value pair that represent the default value\r\n    * for this field.\r\n    * @param {obj} values a key=>value hash of the current values.\r\n    */\r\n   defaultValue(values) {\r\n      // if no default value is set, then don't insert a value.\r\n      if (!values[this.columnName]) {\r\n         // Set default string\r\n         if (this.settings.default) {\r\n            values[this.columnName] = this.settings.default;\r\n         }\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method isValidData\r\n    * Parse through the given data and return an error if this field's\r\n    * data seems invalid.\r\n    * @param {obj} data  a key=>value hash of the inputs to parse.\r\n    * @param {OPValidator} validator  provided Validator fn\r\n    * @return {array}\r\n    */\r\n   isValidData(data, validator) {\r\n      if (data[this.columnName]) {\r\n         const Reg = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n\r\n         let value = data[this.columnName];\r\n         value = String(value).toLowerCase();\r\n         if (!Reg.test(value)) {\r\n            validator.addError(this.columnName, \"Invalid email\");\r\n         }\r\n      }\r\n   }\r\n};\r\n","/*\r\n * ABFieldFile\r\n *\r\n * An ABFieldFile defines a File field type.\r\n *\r\n */\r\n\r\nconst ABField = require(\"../../platform/dataFields/ABField\");\r\n\r\nfunction L(key, altText) {\r\n   // TODO:\r\n   return altText; // AD.lang.label.getLabel(key) || altText;\r\n}\r\n\r\nconst ABFieldFileDefaults = {\r\n   key: \"file\",\r\n   // unique key to reference this specific DataField\r\n\r\n   description: \"Attach a File to this object.\",\r\n   // description: what gets displayed in the Editor description.\r\n   // NOTE: this will be displayed using a Label: L(description)\r\n\r\n   icon: \"file\",\r\n   // font-awesome icon reference.  (without the 'fa-').  so 'file'  to\r\n   // reference 'fa-file'\r\n\r\n   isFilterable: false,\r\n   // {bool} / {fn}\r\n   // determines if the current ABField can be used to filter (FilterComplex\r\n   // or Query) data.\r\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\r\n   //  (field) => field.setting.something == true\r\n\r\n   isSortable: false,\r\n   // {bool} / {fn}\r\n   // determines if the current ABField can be used to Sort data.\r\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\r\n   //  (field) => true/false\r\n\r\n   menuName: \"File Attachment\",\r\n   // menuName: what gets displayed in the Editor drop list\r\n   // NOTE: this will be displayed using a Label: L(menuName)\r\n\r\n   supportRequire: false,\r\n   // {bool}\r\n   // does this ABField support the Required setting?\r\n\r\n   supportUnique: false,\r\n   // {bool}\r\n   // does this ABField support the Unique setting?\r\n\r\n   useAsLabel: false,\r\n   // {bool} / {fn}\r\n   // determines if this ABField can be used in the display of an ABObject's\r\n   // label.\r\n\r\n   compatibleOrmTypes: [\"string\"],\r\n   // {array}\r\n   // what types of Sails ORM attributes can be imported into this data type?\r\n   // http://sailsjs.org/documentation/concepts/models-and-orm/attributes#?attribute-options\r\n\r\n   compatibleMysqlTypes: [\"char\", \"varchar\", \"tinytext\"],\r\n   // {array}\r\n   // what types of MySql column types can be imported into this data type?\r\n   // https://www.techonthenet.com/mysql/datatypes.php\r\n};\r\n\r\nconst defaultValues = {\r\n   removeExistingData: 0,\r\n   fileSize: 0,\r\n   fileType: \"\",\r\n};\r\n\r\nmodule.exports = class ABFieldFileCore extends ABField {\r\n   constructor(values, object) {\r\n      super(values, object, ABFieldFileDefaults);\r\n   }\r\n\r\n   // return the default values for this DataField\r\n   static defaults() {\r\n      return ABFieldFileDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return defaultValues;\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n\r\n      // text to Int:\r\n      this.settings.fileSize = parseInt(this.settings.fileSize);\r\n      this.settings.limitFileSize = parseInt(this.settings.limitFileSize);\r\n      this.settings.limitFileType = parseInt(this.settings.limitFileType);\r\n      this.settings.removeExistingData = parseInt(\r\n         this.settings.removeExistingData\r\n      );\r\n   }\r\n\r\n   /**\r\n    * @method dataValue\r\n    * return the file data stored as part of this field.\r\n    *\r\n    * An ABFieldFile column contains a json structure that contains\r\n    *  .uuid : {string} a file uuid reference\r\n    *  .filename : {string} the name of the file that was uploaded.\r\n    *\r\n    * This will return the json object.\r\n    * @param {obj} values a key=>value hash of the current values.\r\n    * @return {obj} { uuid, filename }, or {} if empty.\r\n    */\r\n   dataValue(rowData) {\r\n      const propName = `${this.alias || this.object.name}.${this.columnName}`;\r\n\r\n      let result = rowData[this.columnName] || rowData[propName] || {};\r\n      if (typeof result == \"string\") {\r\n         try {\r\n            result = JSON.parse(result);\r\n         } catch (err) {\r\n            // ignore error\r\n         }\r\n      }\r\n\r\n      return result;\r\n   }\r\n\r\n   /**\r\n    * @method defaultValue\r\n    * insert a key=>value pair that represent the default value\r\n    * for this field.\r\n    *\r\n    * An ABFieldFile expects a json structure that contains\r\n    *  .uuid : {string} a file uuid reference\r\n    *  .filename : {string} the name of the file that was uploaded.\r\n    *\r\n    * For a default value, we return an empty json object: \"{}\"\r\n    * @param {obj} values a key=>value hash of the current values.\r\n    */\r\n   defaultValue(values) {\r\n      values[this.columnName] = \"{}\";\r\n   }\r\n\r\n   format(rowData) {\r\n      let result = this.dataValue(rowData);\r\n      if (result) {\r\n         if (typeof result == \"string\") {\r\n            try {\r\n               result = JSON.parse(result);\r\n            } catch (err) {\r\n               // ignore error.\r\n            }\r\n         }\r\n\r\n         // return file name\r\n         return result ? result.filename || \"\" : \"\";\r\n      } else {\r\n         return \"\";\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method requestParam\r\n    * return the entry in the given input that relates to this field.\r\n    * @param {obj} allParameters  a key=>value hash of the inputs to parse.\r\n    * @return {obj} or undefined\r\n    */\r\n   requestParam(allParameters) {\r\n      const myParameter = super.requestParam(allParameters);\r\n\r\n      // if we have our default empty object, then remove the entry\r\n      // and let the DB insert a null value.\r\n      if (myParameter?.[this.columnName] == \"{}\") {\r\n         delete myParameter[this.columnName];\r\n      }\r\n\r\n      return myParameter;\r\n   }\r\n};\r\n","/*\r\n * ABFieldFormula\r\n *\r\n * An ABFieldFormula are used to run calculations on connected (child) records\r\n * and store the total of that calculation in the parent.\r\n *\r\n */\r\n\r\nconst ABField = require(\"../../platform/dataFields/ABField\");\r\n\r\nfunction L(key, altText) {\r\n   return altText; // AD.lang.label.getLabel(key) || altText;\r\n}\r\n\r\nconst ABFieldFormulaDefaults = {\r\n   key: \"formula\",\r\n   // unique key to reference this specific DataField\r\n\r\n   description:\r\n      \"Perform a calculation by a formula type based upon existing values\",\r\n   // description: what gets displayed in the Editor description.\r\n   // NOTE: this will be displayed using a Label: L(description)\r\n\r\n   icon: \"circle-o-notch\",\r\n   // font-awesome icon reference.  (without the 'fa-').  so 'circle-o-notch'  to\r\n   // reference 'fa-circle-o-notch'\r\n\r\n   isFilterable: true,\r\n   // {bool} / {fn}\r\n   // determines if the current ABField can be used to filter (FilterComplex\r\n   // or Query) data.\r\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\r\n   //  (field) => field.setting.something == true\r\n\r\n   isSortable: false,\r\n   // {bool} / {fn}\r\n   // determines if the current ABField can be used to Sort data.\r\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\r\n   //  (field) => true/false\r\n\r\n   menuName: \"Formula\",\r\n   // menuName: what gets displayed in the Editor drop list\r\n   // NOTE: this will be displayed using a Label: L(menuName)\r\n\r\n   supportQuery: (field) => {\r\n      const fieldLink = field.fieldLink;\r\n      if (fieldLink == null) return false;\r\n\r\n      // Not support calculate field in query\r\n      return fieldLink.key !== \"calculate\";\r\n   },\r\n\r\n   supportRequire: false,\r\n   // {bool}\r\n   // does this ABField support the Required setting?\r\n\r\n   supportUnique: false,\r\n   // {bool}\r\n   // does this ABField support the Unique setting?\r\n\r\n   useAsLabel: false,\r\n   // {bool} / {fn}\r\n   // determines if this ABField can be used in the display of an ABObject's\r\n   // label.\r\n\r\n   compatibleOrmTypes: [\"number\"],\r\n   // {array}\r\n   // what types of Sails ORM attributes can be imported into this data type?\r\n   // http://sailsjs.org/documentation/concepts/models-and-orm/attributes#?attribute-options\r\n\r\n   compatibleMysqlTypes: [\r\n      \"tinyint\",\r\n      \"smallint\",\r\n      \"mediumint\",\r\n      \"int\",\r\n      \"integer\",\r\n      \"bigint\",\r\n      \"decimal\",\r\n      \"dec\",\r\n      \"numeric\",\r\n      \"fixed\",\r\n      \"float\",\r\n      \"real\",\r\n   ],\r\n   // {array}\r\n   // what types of MySql column types can be imported into this data type?\r\n   // https://www.techonthenet.com/mysql/datatypes.php\r\n};\r\n\r\nconst defaultValues = {\r\n   field: \"\", // id of ABField : NOTE - store our connect field to support when there are multi - linked columns\r\n   objectLink: \"\", // id of ABObject\r\n   fieldLink: \"\", // id of ABField\r\n   type: \"sum\", // \"sum\", \"average\", \"max\", \"min\", \"count\"\r\n   where: \"\",\r\n};\r\n\r\nmodule.exports = class ABFieldFormulaCore extends ABField {\r\n   constructor(values, object) {\r\n      super(values, object, ABFieldFormulaDefaults);\r\n   }\r\n\r\n   // return the default values for this DataField\r\n   static defaults() {\r\n      return ABFieldFormulaDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return defaultValues;\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /**\r\n    * @method defaultValue\r\n    * insert a key=>value pair that represent the default value\r\n    * for this field.\r\n    * @param {obj} values a key=>value hash of the current values.\r\n    */\r\n   defaultValue(values) {\r\n      // this field is read only\r\n      delete values[this.columnName];\r\n   }\r\n\r\n   /**\r\n    * @method format\r\n    * both calculate and format the data input based of user settings\r\n    * for this field.\r\n    * @param {obj} rowData\r\n    *        a key=>value hash of the current values.\r\n    * @param {boolean} reCalculate\r\n    *        a boolean that signals if we should force recalculation of values\r\n    */\r\n   format(rowData, reCalculate = false) {\r\n      const fieldLink = this.fieldLink;\r\n\r\n      const reformat = (numData) => {\r\n         // ABFieldCalculate does not need to .format again\r\n         if (!fieldLink || fieldLink.key == \"calculate\") {\r\n            return numData;\r\n         } else {\r\n            const rowDataFormat = {};\r\n            rowDataFormat[fieldLink.columnName] = numData;\r\n            return fieldLink.format(rowDataFormat);\r\n         }\r\n      };\r\n\r\n      // if data exists, then will not calculate on client side\r\n      // unless we pass reCalculate=true to force the recalculation\r\n      if (rowData[this.columnName] != null && !reCalculate) {\r\n         // reformat data\r\n         return reformat(rowData[this.columnName]);\r\n      }\r\n\r\n      if (!fieldLink) return 0;\r\n\r\n      const fieldBase = this.fieldBase();\r\n      if (!fieldBase) return 0;\r\n\r\n      let data =\r\n         rowData[fieldBase.relationName()] ||\r\n         rowData[fieldBase.columnName] ||\r\n         [];\r\n      if (!Array.isArray(data)) data = [data];\r\n\r\n      // Filter\r\n      if (\r\n         data &&\r\n         data.length &&\r\n         this.settings &&\r\n         this.settings.where &&\r\n         this.settings.where.rules &&\r\n         this.settings.where.rules.length\r\n      ) {\r\n         this.filterHelper.setValue(this.settings.where);\r\n         data = data.filter((item) => this.filterHelper.isValid(item));\r\n      }\r\n\r\n      let numberList = [];\r\n\r\n      // pull number from data\r\n      switch (fieldLink.key) {\r\n         case \"calculate\":\r\n            data.forEach((d) => {\r\n               numberList.push(parseFloat(fieldLink.format(d) || 0));\r\n            });\r\n            break;\r\n         case \"number\":\r\n            numberList = data.map((d) => d[fieldLink.columnName] || 0);\r\n            break;\r\n      }\r\n\r\n      let result = 0;\r\n\r\n      // get the decimal size of the numbers being calculated\r\n      const decimalSize = fieldLink.getDecimalSize();\r\n\r\n      // calculate\r\n      switch (this.settings.type) {\r\n         case \"sum\":\r\n            if (numberList.length > 0) {\r\n               // get power of 10 to the number of decimal places this number\r\n               // is formated to require\r\n               const multiplier = Math.pow(10, decimalSize);\r\n               // multiply values by muliplyier and add them to pervious value\r\n               // because in javascript adding number with decimals can cause issues\r\n               // ex: 9.11 + 222.11 = 231.22000000000003\r\n               let sum = 0;\r\n               numberList.forEach((val) => {\r\n                  sum += val * multiplier || 0;\r\n               });\r\n               // divide result by multiplier to get actual value\r\n               result = sum / multiplier;\r\n            }\r\n            break;\r\n\r\n         case \"average\":\r\n            if (numberList.length > 0) {\r\n               // get power of 10 to the number of decimal places this number\r\n               // is formated to require\r\n               const multiplier = Math.pow(10, decimalSize);\r\n               // multiply values by muliplyier and add them to pervious value\r\n               // because in javascript adding number with decimals can cause issues\r\n               // ex: 9.11 + 222.11 = 231.22000000000003\r\n               let sum = 0;\r\n               numberList.forEach((val) => {\r\n                  sum += val * multiplier || 0;\r\n               });\r\n               // divide result by multiplier to get actual value\r\n               // and divide by length to get the average\r\n               result = sum / multiplier / numberList.length;\r\n            }\r\n            break;\r\n\r\n         case \"max\":\r\n            result = Math.max(...numberList) || 0;\r\n            break;\r\n         case \"min\":\r\n            result = Math.min(...numberList) || 0;\r\n            break;\r\n         case \"count\":\r\n            result = numberList.length;\r\n            break;\r\n      }\r\n\r\n      rowData[this.columnName] = result;\r\n\r\n      // ABFieldCalculate does not need to .format again\r\n      if (fieldLink.key == \"calculate\") {\r\n         return result;\r\n      } else {\r\n         return reformat(result);\r\n      }\r\n   }\r\n\r\n   fieldBase() {\r\n      return this.object.fields((f) => f.id == this.settings.field)[0];\r\n   }\r\n\r\n   get fieldLink() {\r\n      const obj = this.object.AB.objects(\r\n         (obj) => obj.id == this.settings.object\r\n      )[0];\r\n      if (!obj) return null;\r\n\r\n      const field = obj.fields((f) => f.id == this.settings.fieldLink)[0];\r\n      if (!field) return null;\r\n\r\n      return field;\r\n   }\r\n\r\n   get filterHelper() {\r\n      if (this._rowFilter == null) {\r\n         this._rowFilter = this.AB.filterComplexNew(`${this.id}_filterComplex`);\r\n\r\n         if (this.fieldLink && this.fieldLink.object) {\r\n            this._rowFilter.fieldsLoad(this.fieldLink.object.fields());\r\n            this._rowFilter.setValue(this.settings.where);\r\n         }\r\n      }\r\n\r\n      return this._rowFilter;\r\n   }\r\n};\r\n","/*\r\n * ABFieldImageCore\r\n *\r\n * An ABFieldImage defines a Image field type.\r\n *\r\n */\r\n\r\nconst ABField = require(\"../../platform/dataFields/ABField\");\r\n\r\nconst ABFieldImageDefaults = {\r\n   key: \"image\",\r\n   // unique key to reference this specific DataField\r\n\r\n   description: \"Attach an image to this object.\",\r\n   // description: what gets displayed in the Editor description.\r\n   // NOTE: this will be displayed using a Label: L(description)\r\n\r\n   icon: \"file-image-o\",\r\n   // font-awesome icon reference.  (without the 'fa-').  so 'file-image-o'  to\r\n   // reference 'fa-file-image-o'\r\n\r\n   isFilterable: false,\r\n   // {bool} / {fn}\r\n   // determines if the current ABField can be used to filter (FilterComplex\r\n   // or Query) data.\r\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\r\n   //  (field) => field.setting.something == true\r\n\r\n   isSortable: false,\r\n   // {bool} / {fn}\r\n   // determines if the current ABField can be used to Sort data.\r\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\r\n   //  (field) => true/false\r\n\r\n   menuName: \"Image Attachment\",\r\n   // menuName: what gets displayed in the Editor drop list\r\n   // NOTE: this will be displayed using a Label: L(menuName)\r\n\r\n   supportRequire: false,\r\n   // {bool}\r\n   // does this ABField support the Required setting?\r\n\r\n   supportUnique: false,\r\n   // {bool}\r\n   // does this ABField support the Unique setting?\r\n\r\n   useAsLabel: false,\r\n   // {bool} / {fn}\r\n   // determines if this ABField can be used in the display of an ABObject's\r\n   // label.\r\n\r\n   compatibleOrmTypes: [\"string\"],\r\n   // {array}\r\n   // what types of Sails ORM attributes can be imported into this data type?\r\n   // http://sailsjs.org/documentation/concepts/models-and-orm/attributes#?attribute-options\r\n\r\n   compatibleMysqlTypes: [\"char\", \"varchar\", \"tinytext\"],\r\n   // {array}\r\n   // what types of MySql column types can be imported into this data type?\r\n   // https://www.techonthenet.com/mysql/datatypes.php\r\n};\r\n\r\nconst defaultValues = {\r\n   useWidth: 0,\r\n   imageWidth: \"\",\r\n   useHeight: 0,\r\n   imageHeight: \"\",\r\n   removeExistingData: 0,\r\n   useDefaultImage: false,\r\n   defaultImageUrl: \"\",\r\n};\r\n\r\nmodule.exports = class ABFieldImageCore extends ABField {\r\n   constructor(values, object) {\r\n      super(values, object, ABFieldImageDefaults);\r\n\r\n      // NOTE: our Labels are ready here:\r\n      if (\r\n         ABFieldImageDefaults.menuName == \"*Image Attachment\" &&\r\n         this.AB.Label\r\n      ) {\r\n         const L = this.AB.Label();\r\n         ABFieldImageDefaults.menuName = L(\r\n            \"ab.dataField.image.menuName\",\r\n            \"*Image Attachment\"\r\n         );\r\n         ABFieldImageDefaults.description = L(\r\n            \"ab.dataField.image.description\",\r\n            \"*Attach an image to this object.\"\r\n         );\r\n      }\r\n\r\n      /*\r\n    \t{\r\n\t\t\tsettings: {\r\n\t\t\t\t'useWidth':0,\r\n\t\t\t\t'imageWidth':'',\r\n\t\t\t\t'useHeight': 0,\r\n\t\t\t\t'imageHeight': '',\r\n\t\t\t\t'removeExistingData': 0\r\n\t\t\t}\r\n    \t}\r\n    \t*/\r\n   }\r\n\r\n   // return the default values for this DataField\r\n   static defaults() {\r\n      return ABFieldImageDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return defaultValues;\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n\r\n      // text to Int:\r\n      this.settings.useWidth = parseInt(this.settings.useWidth);\r\n      this.settings.useHeight = parseInt(this.settings.useHeight);\r\n      this.settings.imageWidth = parseInt(this.settings.imageWidth);\r\n      this.settings.imageHeight = parseInt(this.settings.imageHeight);\r\n      this.settings.useDefaultImage = parseInt(this.settings.useDefaultImage);\r\n      this.settings.removeExistingData = parseInt(\r\n         this.settings.removeExistingData\r\n      );\r\n   }\r\n\r\n   /**\r\n    * @method isValidData\r\n    * Parse through the given data and return an error if this field's\r\n    * data seems invalid.\r\n    * @param {obj} data  a key=>value hash of the inputs to parse.\r\n    * @param {OPValidator} validator  provided Validator fn\r\n    * @return {array}\r\n    */\r\n   isValidData(data, validator) {\r\n      super.isValidData(data, validator);\r\n   }\r\n};\r\n","/*\r\n * ABFieldJson\r\n *\r\n * An ABFieldJson defines a JSON field type.\r\n *\r\n */\r\n\r\nconst ABField = require(\"../../platform/dataFields/ABField\");\r\n\r\nconst ABFieldJsonDefaults = {\r\n   key: \"json\",\r\n   // unique key to reference this specific DataField\r\n\r\n   description: \"JSON value\",\r\n   // description: what gets displayed in the Editor description.\r\n   // NOTE: this will be displayed using a Label: L(description)\r\n\r\n   icon: \"font\",\r\n   // font-awesome icon reference.  (without the 'fa-').  so 'font'  to\r\n   // reference 'fa-font'\r\n\r\n   isFilterable: false,\r\n   // {bool} / {fn}\r\n   // determines if the current ABField can be used to filter (FilterComplex\r\n   // or Query) data.\r\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\r\n   //  (field) => field.setting.something == true\r\n\r\n   isSortable: false,\r\n   // {bool} / {fn}\r\n   // determines if the current ABField can be used to Sort data.\r\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\r\n   //  (field) => true/false\r\n\r\n   menuName: \"JSON\",\r\n   // menuName: what gets displayed in the Editor drop list\r\n   // NOTE: this will be displayed using a Label: L(menuName)\r\n\r\n   supportRequire: false,\r\n   // {bool}\r\n   // does this ABField support the Required setting?\r\n\r\n   supportUnique: false,\r\n   // {bool}\r\n   // does this ABField support the Unique setting?\r\n\r\n   useAsLabel: true,\r\n   // {bool} / {fn}\r\n   // determines if this ABField can be used in the display of an ABObject's\r\n   // label.\r\n\r\n   compatibleOrmTypes: [\"json\"],\r\n   // {array}\r\n   // what types of Sails ORM attributes can be imported into this data type?\r\n   // http://sailsjs.org/documentation/concepts/models-and-orm/attributes#?attribute-options\r\n\r\n   compatibleMysqlTypes: [\"json\"],\r\n   // {array}\r\n   // what types of MySql column types can be imported into this data type?\r\n   // https://www.techonthenet.com/mysql/datatypes.php\r\n};\r\n\r\nconst defaultValues = {};\r\n\r\nmodule.exports = class ABFieldJsonCore extends ABField {\r\n   constructor(values, object) {\r\n      super(values, object, ABFieldJsonDefaults);\r\n   }\r\n\r\n   // return the default values for this DataField\r\n   static defaults() {\r\n      return ABFieldJsonDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return defaultValues;\r\n   }\r\n\r\n   /**\r\n    * @method defaultValue\r\n    * insert a key=>value pair that represent the default value\r\n    * for this field.\r\n    * @param {obj} values a key=>value hash of the current values.\r\n    */\r\n   defaultValue(values) {\r\n      // in the case of a JSON data type, we should NOT insert a \"\"\r\n      //\r\n      // values[this.columnName] = \"\";\r\n   }\r\n};\r\n","/*\r\n * ABFieldListCore\r\n *\r\n * An ABFieldList defines a select list field type.\r\n *\r\n */\r\n\r\n// const ABFieldSelectivity = require(\"../../platform/dataFields/ABFieldSelectivity\");\r\nconst ABField = require(\"../../platform/dataFields/ABField\");\r\n\r\nfunction L(key, altText) {\r\n   // TODO:\r\n   return altText; // AD.lang.label.getLabel(key) || altText;\r\n}\r\n\r\nconst ABFieldListDefaults = {\r\n   key: \"list\",\r\n   // unique key to reference this specific DataField\r\n\r\n   description:\r\n      \"Select list allows you to select predefined options below from a dropdown.\",\r\n   // description: what gets displayed in the Editor description.\r\n   // NOTE: this will be displayed using a Label: L(description)\r\n\r\n   icon: \"th-list\",\r\n   // font-awesome icon reference.  (without the 'fa-').  so 'th-list'  to\r\n   // reference 'fa-th-list'\r\n\r\n   isFilterable: (field) => {\r\n      if (field.settings.isMultiple) {\r\n         return false;\r\n      } else {\r\n         return true;\r\n      }\r\n   },\r\n   // {bool} / {fn}\r\n   // determines if the current ABField can be used to filter (FilterComplex\r\n   // or Query) data.\r\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\r\n   //  (field) => field.setting.something == true\r\n\r\n   isSortable: (field) => {\r\n      if (field.settings.isMultiple) {\r\n         return false;\r\n      } else {\r\n         return true;\r\n      }\r\n   },\r\n   // {bool} / {fn}\r\n   // determines if the current ABField can be used to Sort data.\r\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\r\n   //  (field) => true/false\r\n\r\n   menuName: \"Select list\",\r\n   // menuName: what gets displayed in the Editor drop list\r\n   // NOTE: this will be displayed using a Label: L(menuName)\r\n\r\n   supportRequire: true,\r\n   // {bool}\r\n   // does this ABField support the Required setting?\r\n\r\n   supportUnique: false,\r\n   // {bool}\r\n   // does this ABField support the Unique setting?\r\n\r\n   useAsLabel: true,\r\n   // {bool} / {fn}\r\n   // determines if this ABField can be used in the display of an ABObject's\r\n   // label.\r\n\r\n   compatibleOrmTypes: [\"string\"],\r\n   // {array}\r\n   // what types of Sails ORM attributes can be imported into this data type?\r\n   // http://sailsjs.org/documentation/concepts/models-and-orm/attributes#?attribute-options\r\n\r\n   compatibleMysqlTypes: [\r\n      \"char\",\r\n      \"varchar\",\r\n      \"tinytext\" /* \"text\", \"mediumtext\" */,\r\n   ],\r\n   // {array}\r\n   // what types of MySql column types can be imported into this data type?\r\n   // https://www.techonthenet.com/mysql/datatypes.php\r\n\r\n   hasColors: (field) => {\r\n      if (field.settings.hasColors) {\r\n         return true;\r\n      } else {\r\n         return false;\r\n      }\r\n   },\r\n};\r\n\r\nconst defaultValues = {\r\n   isMultiple: 0,\r\n   // {bool}\r\n   // can multiple values be selected?\r\n\r\n   hasColors: 0,\r\n   // {bool}\r\n   // are we to display our values in colors?\r\n\r\n   options: [],\r\n   // {array}\r\n   // The options defined for this list:\r\n   // [ { id, text, hex, translations },...]\r\n   //    .id {string} a unique id for this value\r\n   //    .text {string} the displayed text of this value\r\n   //    .hex {string} a color hex definition for this value\r\n   //    .translations {obj} the multilingual definitions for this value.\r\n\r\n   default: \"none\",\r\n   multipleDefault: [],\r\n};\r\n\r\nmodule.exports = class ABFieldListCore extends ABField {\r\n   constructor(values, object) {\r\n      super(values, object, ABFieldListDefaults);\r\n\r\n      this.pendingDeletions = [];\r\n      // {array}\r\n      // a list of pending option deletions that need to be processed\r\n      // when this is saved.\r\n   }\r\n\r\n   // return the default values for this DataField\r\n   static defaults() {\r\n      return ABFieldListDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return defaultValues;\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /**\r\n    * @method fromValues()\r\n    *\r\n    * initialze this object with the given set of values.\r\n    * @param {obj} values\r\n    */\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n\r\n      // translate options list\r\n      if (this.settings.options && this.settings.options.length > 0) {\r\n         this.settings.options.forEach((opt) => {\r\n            this.translate(opt, opt, [\"text\"]);\r\n         });\r\n      }\r\n\r\n      this.settings.isMultiple = parseInt(this.settings.isMultiple);\r\n      this.settings.hasColors = parseInt(this.settings.hasColors);\r\n   }\r\n\r\n   /**\r\n    * @method toObj()\r\n    *\r\n    * properly compile the current state of this ABApplication instance\r\n    * into the values needed for saving to the DB.\r\n    *\r\n    * Most of the instance data is stored in .json field, so be sure to\r\n    * update that from all the current values of our child fields.\r\n    *\r\n    * @return {json}\r\n    */\r\n   toObj() {\r\n      const obj = super.toObj();\r\n\r\n      // Un-translate options list\r\n      obj.settings.options.forEach((opt) => {\r\n         this.unTranslate(opt, opt, [\"text\"]);\r\n      });\r\n\r\n      return obj;\r\n   }\r\n\r\n   ///\r\n   /// Working with Actual Object Values:\r\n   ///\r\n\r\n   /**\r\n    * @method defaultValue\r\n    * insert a key=>value pair that represent the default value\r\n    * for this field.\r\n    * @param {obj} values a key=>value hash of the current values.\r\n    */\r\n   defaultValue(values) {\r\n      // Multiple select list\r\n      if (this.settings.isMultiple == true) {\r\n         let defaultVals = [];\r\n         this.settings.multipleDefault.forEach((def) => {\r\n            this.settings.options.forEach((opt) => {\r\n               if (opt.id == def.text) {\r\n                  defaultVals.push(opt);\r\n               }\r\n            });\r\n         });\r\n         values[this.columnName] = defaultVals || [];\r\n      }\r\n      // Single select list\r\n      else if (this.settings.default && this.settings.default != \"\") {\r\n         values[this.columnName] = this.settings.default;\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method isValidData\r\n    * Parse through the given data and return an error if this field's\r\n    * data seems invalid.\r\n    * @param {obj} data  a key=>value hash of the inputs to parse.\r\n    * @param {OPValidator} validator  provided Validator fn\r\n    * @return {array}\r\n    */\r\n   isValidData(data, validator) {\r\n      super.isValidData(data, validator);\r\n   }\r\n\r\n   /**\r\n    * @method options\r\n    * Return an array of [{ id, text }] options defined by this field.\r\n    * @return {array}\r\n    */\r\n   options() {\r\n      return this.settings.options.map((opt) => {\r\n         return {\r\n            id: opt.id,\r\n            text: opt.text,\r\n            hex: opt.hex ? opt.hex : \"\",\r\n            translations: opt.translations ? opt.translations : \"\",\r\n         };\r\n      });\r\n   }\r\n\r\n   format(rowData, options = {}) {\r\n      let val = this.dataValue(rowData) || [];\r\n\r\n      if (typeof val == \"string\") {\r\n         try {\r\n            val = JSON.parse(val);\r\n         } catch (e) {\r\n            // continue regardless of error\r\n         }\r\n      }\r\n\r\n      // Convert to array\r\n      if (!Array.isArray(val)) val = [val];\r\n\r\n      const displayOpts = this.settings.options\r\n         .filter((opt) => val.filter((v) => (v.id || v) == opt.id).length > 0)\r\n         .map((opt) => {\r\n            let text = opt.text;\r\n            const languageCode = options.languageCode || \"en\";\r\n\r\n            // Pull text of option with specify language code\r\n            const optTran = (opt.translations || []).filter(\r\n               (o) => o.language_code == languageCode\r\n            )[0];\r\n            if (optTran) text = optTran.text;\r\n\r\n            return text;\r\n         });\r\n\r\n      return displayOpts.join(\", \");\r\n   }\r\n};\r\n","/*\r\n * ABFieldLongText\r\n *\r\n * An ABFieldLongText defines a LongText field type.\r\n *\r\n */\r\n\r\nconst ABField = require(\"../../platform/dataFields/ABField\");\r\n\r\nconst MAX_CHAR_LENGTH = 5000;\r\n\r\nfunction L(key, altText) {\r\n   // TODO:\r\n   return altText; // AD.lang.label.getLabel(key) || altText;\r\n}\r\n\r\nconst ABFieldLongTextDefaults = {\r\n   key: \"LongText\", // unique key to reference this specific DataField\r\n\r\n   description: \"Multiple lines of text\",\r\n   // description: what gets displayed in the Editor description.\r\n   // NOTE: this will be displayed using a Label: L(description)\r\n\r\n   icon: \"align-right\",\r\n   // font-awesome icon reference.  (without the 'fa-').  so 'align-right'  to\r\n   // reference 'fa-align-right'\r\n\r\n   isFilterable: true,\r\n   // {bool} / {fn}\r\n   // determines if the current ABField can be used to filter (FilterComplex\r\n   // or Query) data.\r\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\r\n   //  (field) => field.setting.something == true\r\n\r\n   isSortable: false,\r\n   // {bool} / {fn}\r\n   // determines if the current ABField can be used to Sort data.\r\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\r\n   //  (field) => true/false\r\n\r\n   menuName: \"Long text\",\r\n   // menuName: what gets displayed in the Editor drop list\r\n   // NOTE: this will be displayed using a Label: L(menuName)\r\n\r\n   supportRequire: true,\r\n   // {bool}\r\n   // does this ABField support the Required setting?\r\n\r\n   supportUnique: false,\r\n   // {bool}\r\n   // does this ABField support the Unique setting?\r\n\r\n   useAsLabel: true,\r\n   // {bool} / {fn}\r\n   // determines if this ABField can be used in the display of an ABObject's\r\n   // label.\r\n\r\n   compatibleOrmTypes: [\"longtext\", \"mediumtext\", \"text\"],\r\n   // {array}\r\n   // what types of Sails ORM attributes can be imported into this data type?\r\n   // http://sailsjs.org/documentation/concepts/models-and-orm/attributes#?attribute-options\r\n\r\n   compatibleMysqlTypes: [\"text\", \"mediumtext\", \"longtext\"],\r\n   // {array}\r\n   // what types of MySql column types can be imported into this data type?\r\n   // https://www.techonthenet.com/mysql/datatypes.php\r\n\r\n   MAX_CHAR_LENGTH,\r\n   // {integer}\r\n   // The maximum length our ABFieldLongText can be.\r\n};\r\n\r\n// defaultValues: the keys must match a .name of your elements to set it's default value.\r\nconst defaultValues = {\r\n   default: \"\",\r\n   supportMultilingual: 0,\r\n};\r\n\r\nmodule.exports = class ABFieldLongText extends ABField {\r\n   constructor(values, object) {\r\n      super(values, object, ABFieldLongTextDefaults);\r\n\r\n      /*\r\n    \t{\r\n\t\t\tsettings: {\r\n\t\t\t\tdefault: 'string',\r\n\t\t\t\tsupportMultilingual: 1/0\r\n\t\t\t}\r\n    \t}\r\n    \t*/\r\n   }\r\n\r\n   // return the default values for this DataField\r\n   static defaults() {\r\n      return ABFieldLongTextDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return defaultValues;\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /**\r\n    * @method fromValues()\r\n    *\r\n    * initialze this object with the given set of values.\r\n    * @param {obj} values\r\n    */\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n\r\n      this.settings.default = values.settings.default || \"\";\r\n\r\n      // we're responsible for setting up our specific settings:\r\n      this.settings.supportMultilingual =\r\n         values.settings.supportMultilingual + \"\" ||\r\n         defaultValues.supportMultilingual;\r\n\r\n      // text to Int:\r\n      this.settings.supportMultilingual = parseInt(\r\n         this.settings.supportMultilingual\r\n      );\r\n\r\n      if (this.settings.supportMultilingual) {\r\n         if (this.object)\r\n            this.object.translate(this.settings, this.settings, [\"default\"]);\r\n      } else this.settings.default = values.settings.default || \"\";\r\n   }\r\n\r\n   /**\r\n    * @method toObj()\r\n    *\r\n    * properly compile the current state of this ABApplication instance\r\n    * into the values needed for saving to the DB.\r\n    *\r\n    * Most of the instance data is stored in .json field, so be sure to\r\n    * update that from all the current values of our child fields.\r\n    *\r\n    * @return {json}\r\n    */\r\n   toObj() {\r\n      const obj = super.toObj();\r\n\r\n      if (this.settings.supportMultilingual)\r\n         if (this.object)\r\n            this.object.unTranslate(obj.settings, obj.settings, [\"default\"]);\r\n         else obj.settings.default = this.settings.default;\r\n\r\n      return obj;\r\n   }\r\n\r\n   /*\r\n    * @property isMultilingual\r\n    * does this field represent multilingual data?\r\n    * @return {bool}\r\n    */\r\n   get isMultilingual() {\r\n      return this.settings.supportMultilingual == 1;\r\n   }\r\n\r\n   /**\r\n    * @method defaultValue\r\n    * insert a key=>value pair that represent the default value\r\n    * for this field.\r\n    * @param {obj} values a key=>value hash of the current values.\r\n    */\r\n   defaultValue(values) {\r\n      if (values[this.columnName] == null) {\r\n         if (typeof this.settings.default == \"string\") {\r\n            values[this.columnName] = this.settings.default;\r\n         } else {\r\n            values[this.columnName] = \"\";\r\n         }\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method isValidData\r\n    * Parse through the given data and return an error if this field's\r\n    * data seems invalid.\r\n    * @param {obj} data  a key=>value hash of the inputs to parse.\r\n    * @param {OPValidator} validator  provided Validator fn\r\n    * @return {array}\r\n    */\r\n   isValidData(data, validator) {\r\n      super.isValidData(data, validator);\r\n\r\n      if (\r\n         data &&\r\n         data[this.columnName] &&\r\n         data[this.columnName].length > MAX_CHAR_LENGTH\r\n      ) {\r\n         validator.addError(\r\n            this.columnName,\r\n            `should NOT be longer than ${MAX_CHAR_LENGTH} characters`\r\n         );\r\n      }\r\n   }\r\n};\r\n","/*\r\n * ABFieldNumber\r\n *\r\n * An ABFieldNumber defines a Number field type.\r\n *\r\n */\r\n\r\nconst ABField = require(\"../../platform/dataFields/ABField\");\r\n\r\nconst ABFieldNumberDefaults = {\r\n   key: \"number\",\r\n   // unique key to reference this specific DataField\r\n\r\n   description: \"A Float or Integer Value\",\r\n   // description: what gets displayed in the Editor description.\r\n   // NOTE: this will be displayed using a Label: L(description)\r\n\r\n   icon: \"hashtag\",\r\n   // font-awesome icon reference.  (without the 'fa-').  so 'hashtag'  to\r\n   // reference 'fa-hashtag'\r\n\r\n   isFilterable: true,\r\n   // {bool} / {fn}\r\n   // determines if the current ABField can be used to filter (FilterComplex\r\n   // or Query) data.\r\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\r\n   //  (field) => field.setting.something == true\r\n\r\n   isSortable: true,\r\n   // {bool} / {fn}\r\n   // determines if the current ABField can be used to Sort data.\r\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\r\n   //  (field) => true/false\r\n\r\n   menuName: \"Number\",\r\n   // menuName: what gets displayed in the Editor drop list\r\n   // NOTE: this will be displayed using a Label: L(menuName)\r\n\r\n   supportRequire: true,\r\n   // {bool}\r\n   // does this ABField support the Required setting?\r\n\r\n   supportUnique: true,\r\n   // {bool}\r\n   // does this ABField support the Unique setting?\r\n\r\n   useAsLabel: true,\r\n   // {bool} / {fn}\r\n   // determines if this ABField can be used in the display of an ABObject's\r\n   // label.\r\n\r\n   compatibleOrmTypes: [\"number\"],\r\n   // {array}\r\n   // what types of Sails ORM attributes can be imported into this data type?\r\n   // http://sailsjs.org/documentation/concepts/models-and-orm/attributes#?attribute-options\r\n\r\n   compatibleMysqlTypes: [\r\n      \"tinyint\",\r\n      \"smallint\",\r\n      \"mediumint\",\r\n      \"int\",\r\n      \"integer\",\r\n      \"bigint\",\r\n      \"decimal\",\r\n      \"dec\",\r\n      \"numeric\",\r\n      \"fixed\",\r\n      \"float\",\r\n      \"real\",\r\n   ],\r\n   // {array}\r\n   // what types of MySql column types can be imported into this data type?\r\n   // https://www.techonthenet.com/mysql/datatypes.php\r\n};\r\n\r\nconst defaultValues = {\r\n   // 'allowRequired': 0,\r\n   default: \"\",\r\n   typeFormat: \"none\",\r\n   typeDecimals: \"none\",\r\n   typeDecimalPlaces: 0,\r\n   typeRounding: \"none\",\r\n   typeThousands: \"none\",\r\n   validation: 0,\r\n   validateMinimum: \"\",\r\n   validateMaximum: \"\",\r\n};\r\n\r\nlet L = null; //AB.Label();\r\n\r\nmodule.exports = class ABFieldNumberCore extends ABField {\r\n   constructor(values, object) {\r\n      super(values, object, ABFieldNumberDefaults);\r\n\r\n      /*\r\n    \t{\r\n\t\t\tsettings: {\r\n\t\t\t\t'allowRequired':0,\r\n\t\t\t\t'default':null,\r\n\t\t\t\t'typeFormat': 'none',\r\n\t\t\t\t'typeDecimals': 'none',\r\n\t\t\t\t'typeDecimalPlaces': 'none',\r\n\t\t\t\t'typeRounding' : 'none',\r\n\t\t\t\t'typeThousands': 'none',\r\n\t\t\t\t'validation':0,\r\n\t\t\t\t'validateMinimum':null,\r\n\t\t\t\t'validateMaximum':null\r\n\t\t\t}\r\n    \t}\r\n    \t*/\r\n      if (!L) {\r\n         L = this.AB.Label();\r\n      }\r\n   }\r\n\r\n   // return the default values for this DataField\r\n   static defaults() {\r\n      return ABFieldNumberDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return defaultValues;\r\n   }\r\n\r\n   static formatList(iL) {\r\n      if (iL && !L) L = iL;\r\n      return [\r\n         { id: \"none\", value: L(\"None\") },\r\n         {\r\n            id: \"dollar\",\r\n            value: L(\"$\"),\r\n            sign: \"$\",\r\n            position: \"prefix\",\r\n         },\r\n         {\r\n            id: \"yen\",\r\n            value: L(\"¥\"),\r\n            sign: \"¥\",\r\n            position: \"prefix\",\r\n         },\r\n         {\r\n            id: \"pound\",\r\n            value: L(\"£\"),\r\n            sign: \"£\",\r\n            position: \"prefix\",\r\n         },\r\n         {\r\n            id: \"euroBefore\",\r\n            value: L(\"€ (before)\"),\r\n            sign: \"€\",\r\n            position: \"prefix\",\r\n         },\r\n         {\r\n            id: \"euroAfter\",\r\n            value: L(\"€ (after)\"),\r\n            sign: \"€\",\r\n            position: \"postfix\",\r\n         },\r\n         {\r\n            id: \"percent\",\r\n            value: L(\"%\"),\r\n            sign: \"%\",\r\n            position: \"postfix\",\r\n         },\r\n      ];\r\n   }\r\n\r\n   static delimiterList() {\r\n      return [\r\n         { id: \"none\", value: L(\"None\") },\r\n         {\r\n            id: \"comma\",\r\n            value: L(\"Comma\"),\r\n            sign: \",\",\r\n         },\r\n         {\r\n            id: \"period\",\r\n            value: L(\"Period\"),\r\n            sign: \".\",\r\n         },\r\n         {\r\n            id: \"space\",\r\n            value: L(\"Space\"),\r\n            sign: \" \",\r\n         },\r\n      ];\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n\r\n      // text to Int:\r\n      // this.settings.allowRequired = parseInt(this.settings.allowRequired);\r\n      this.settings.validation = parseInt(this.settings.validation);\r\n   }\r\n\r\n   ///\r\n   /// Working with Actual Object Values:\r\n   ///\r\n\r\n   /**\r\n    * @method defaultValue\r\n    * insert a key=>value pair that represent the default value\r\n    * for this field.\r\n    * @param {obj} values a key=>value hash of the current values.\r\n    */\r\n   defaultValue(values) {\r\n      // if no default value is set, then don't insert a value.\r\n      if (this.settings.default != \"\") {\r\n         values[this.columnName] = this.settings.default;\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method isValidData\r\n    * Parse through the given data and return an error if this field's\r\n    * data seems invalid.\r\n    * @param {obj} data  a key=>value hash of the inputs to parse.\r\n    * @param {OPValidator} validator  provided Validator fn\r\n    * @return {array}\r\n    */\r\n   isValidData(data, validator) {\r\n      super.isValidData(data, validator);\r\n\r\n      // const L = this.AB.Label();\r\n\r\n      if (data[this.columnName] != null && data[this.columnName] != \"\") {\r\n         let value = data[this.columnName];\r\n\r\n         // if this is an integer:\r\n         if (this.settings.typeDecimals == \"none\") {\r\n            value = parseInt(value);\r\n         } else {\r\n            const places = parseInt(this.settings.typeDecimalPlaces) || 2;\r\n            value = parseFloat(parseFloat(value).toFixed(places));\r\n         }\r\n\r\n         const isNumeric = (n) => {\r\n            return !Number.isNaN(parseFloat(n)) && Number.isFinite(n);\r\n         };\r\n         if (!isNumeric(value)) {\r\n            validator.addError(this.columnName, L(\"invalid number\"));\r\n         }\r\n\r\n         // validate Minimum\r\n         if (\r\n            this.settings.validation == true &&\r\n            this.settings.validateMinimum != null &&\r\n            this.settings.validateMinimum > value\r\n         ) {\r\n            const errMessage = L(\"should be greater than {0}\", [\r\n               this.settings.validateMinimum,\r\n            ]);\r\n\r\n            validator.addError(this.columnName, errMessage);\r\n         }\r\n\r\n         // validate Maximum\r\n         if (\r\n            this.settings.validation == true &&\r\n            this.settings.validateMaximum != null &&\r\n            this.settings.validateMaximum < value\r\n         ) {\r\n            const errMessage = L(\"should be less than {0}\", [\r\n               this.settings.validateMaximum,\r\n            ]);\r\n\r\n            validator.addError(this.columnName, errMessage);\r\n         }\r\n      }\r\n   }\r\n\r\n   format(rowData) {\r\n      if (\r\n         rowData[this.columnName] == null ||\r\n         (rowData[this.columnName] != 0 && rowData[this.columnName] == \"\")\r\n      )\r\n         return \"\";\r\n\r\n      let data = rowData[this.columnName] || 0;\r\n\r\n      if (typeof data == \"string\") {\r\n         data = data.replace(/,/g, \"\");\r\n      }\r\n\r\n      // Validate number\r\n      if (isNaN(parseFloat(data))) data = 0;\r\n\r\n      const formatSign = this.constructor\r\n         .formatList()\r\n         .filter((item) => item.id == this.settings.typeFormat)[0];\r\n      const decimalPlaces =\r\n         this.settings.typeDecimalPlaces != \"none\"\r\n            ? parseInt(this.settings.typeDecimalPlaces)\r\n            : 0;\r\n\r\n      let thousandsSign = this.constructor\r\n         .delimiterList()\r\n         .filter((item) => item.id == this.settings.typeThousands)[0];\r\n      let decimalSign = this.constructor\r\n         .delimiterList()\r\n         .filter((item) => item.id == this.settings.typeDecimals)[0];\r\n      let prefix = \"\";\r\n      let postfix = \"\";\r\n\r\n      if (formatSign && formatSign.sign) {\r\n         switch (formatSign.position) {\r\n            case \"prefix\":\r\n               prefix = formatSign.sign;\r\n               break;\r\n            case \"postfix\":\r\n               postfix = formatSign.sign;\r\n               break;\r\n         }\r\n      }\r\n\r\n      decimalSign = decimalSign.sign || \"\";\r\n      thousandsSign = thousandsSign.sign || \"\";\r\n\r\n      // round number\r\n      if (this.settings.typeRounding == \"roundDown\") {\r\n         const digit = Math.pow(10, decimalPlaces);\r\n         data = Math.floor(data * digit) / digit;\r\n      }\r\n\r\n      const number = this.formatNumber(data, {\r\n         groupDelimiter: thousandsSign,\r\n         groupSize: 3,\r\n         decimalDelimiter: decimalSign,\r\n         decimalSize: decimalPlaces,\r\n      });\r\n\r\n      return `${prefix} ${number} ${postfix}`;\r\n   }\r\n\r\n   formatNumber(data, options = {}) {\r\n      if (data === \"\" || data == null) return data;\r\n\r\n      data = parseFloat(data);\r\n      const negativeSign = data < 0 ? \"-\" : \"\";\r\n      data = Math.abs(data);\r\n\r\n      const dataStr = data.toString();\r\n      const integerStr = dataStr.split(\".\")[0];\r\n      const decimalStr = dataStr.split(\".\")[1];\r\n\r\n      let integerValue = \"\";\r\n\r\n      // Thousands digit sign\r\n      if (options.groupDelimiter) {\r\n         const step = 3;\r\n         let i = integerStr.length;\r\n\r\n         do {\r\n            i -= step;\r\n            const chunk =\r\n               i > 0\r\n                  ? integerStr.substr(i, step)\r\n                  : integerStr.substr(0, step + i);\r\n            integerValue = `${chunk}${\r\n               integerValue ? options.groupDelimiter + integerValue : \"\"\r\n            }`;\r\n         } while (i > 0);\r\n      } else {\r\n         integerValue = integerStr;\r\n      }\r\n\r\n      let result = \"\";\r\n\r\n      // Decimal\r\n      if (options.decimalDelimiter && options.decimalSize) {\r\n         result = `${negativeSign}${integerValue}${\r\n            decimalStr\r\n               ? options.decimalDelimiter +\r\n                 decimalStr.toString().substr(0, options.decimalSize)\r\n               : \"\"\r\n         }`;\r\n      }\r\n      // Integer\r\n      else {\r\n         result = `${negativeSign}${integerValue}`;\r\n      }\r\n\r\n      return result;\r\n   }\r\n\r\n   getDecimalSize() {\r\n      if (this.settings.typeDecimalPlaces != \"none\") {\r\n         return parseInt(this.settings.typeDecimalPlaces);\r\n      } else {\r\n         return 0;\r\n      }\r\n   }\r\n};\r\n","/*\r\n * ABFieldString\r\n *\r\n * An ABFieldString defines a string field type.\r\n *\r\n */\r\n\r\nconst ABField = require(\"../../platform/dataFields/ABField\");\r\n\r\nconst MAX_CHAR_LENGTH = 255;\r\n\r\nconst ABFieldStringDefaults = {\r\n   key: \"string\",\r\n   // unique key to reference this specific DataField\r\n\r\n   description: \"short string value\",\r\n   // description: what gets displayed in the Editor description.\r\n   // NOTE: this will be displayed using a Label: L(description)\r\n\r\n   icon: \"font\",\r\n   // font-awesome icon reference.  (without the 'fa-').  so 'font'  to\r\n   // reference 'fa-font'\r\n\r\n   isFilterable: true,\r\n   // {bool} / {fn}\r\n   // determines if the current ABField can be used to filter (FilterComplex\r\n   // or Query) data.\r\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\r\n   //  (field) => field.setting.something == true\r\n\r\n   isSortable: true,\r\n   // {bool} / {fn}\r\n   // determines if the current ABField can be used to Sort data.\r\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\r\n   //  (field) => true/false\r\n\r\n   menuName: \"Single line text\",\r\n   // menuName: what gets displayed in the Editor drop list\r\n   // NOTE: this will be displayed using a Label: L(menuName)\r\n\r\n   supportRequire: true,\r\n   // {bool}\r\n   // does this ABField support the Required setting?\r\n\r\n   supportUnique: false,\r\n   // {bool}\r\n   // does this ABField support the Unique setting?\r\n\r\n   useAsLabel: true,\r\n   // {bool} / {fn}\r\n   // determines if this ABField can be used in the display of an ABObject's\r\n   // label.\r\n\r\n   compatibleOrmTypes: [\"string\"],\r\n   // {array}\r\n   // what types of Sails ORM attributes can be imported into this data type?\r\n   // http://sailsjs.org/documentation/concepts/models-and-orm/attributes#?attribute-options\r\n\r\n   compatibleMysqlTypes: [\"char\", \"varchar\", \"tinytext\"],\r\n   // {array}\r\n   // what types of MySql column types can be imported into this data type?\r\n   // https://www.techonthenet.com/mysql/datatypes.php\r\n\r\n   MAX_CHAR_LENGTH,\r\n   // {integer}\r\n   // The maximum length our ABFieldString can be.\r\n};\r\n\r\nconst defaultValues = {\r\n   default: \"\",\r\n   supportMultilingual: 0,\r\n};\r\n\r\nmodule.exports = class ABFieldStringCore extends ABField {\r\n   constructor(values, object) {\r\n      super(values, object, ABFieldStringDefaults);\r\n\r\n      /*\r\n    \t{\r\n\t\t\tsettings: {\r\n\t\t\t\tdefault: 'string',\r\n\t\t\t\tsupportMultilingual: 1/0\r\n\t\t\t}\r\n    \t}\r\n        */\r\n   }\r\n\r\n   // return the default values for this DataField\r\n   static defaults() {\r\n      return ABFieldStringDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return defaultValues;\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /**\r\n    * @method fromValues()\r\n    *\r\n    * initialze this object with the given set of values.\r\n    * @param {obj} values\r\n    */\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n\r\n      // we're responsible for setting up our specific settings:\r\n      this.settings.default = values.settings.default || defaultValues.default;\r\n      this.settings.supportMultilingual =\r\n         values.settings.supportMultilingual + \"\" ||\r\n         defaultValues.supportMultilingual;\r\n\r\n      // text to Int:\r\n      this.settings.supportMultilingual = parseInt(\r\n         this.settings.supportMultilingual\r\n      );\r\n\r\n      if (this.settings.supportMultilingual) {\r\n         this.translate(this.settings, this.settings, [\"default\"]);\r\n      } else this.settings.default = values.settings.default || \"\";\r\n   }\r\n\r\n   /**\r\n    * @method toObj()\r\n    *\r\n    * properly compile the current state of this ABApplication instance\r\n    * into the values needed for saving to the DB.\r\n    *\r\n    * Most of the instance data is stored in .json field, so be sure to\r\n    * update that from all the current values of our child fields.\r\n    *\r\n    * @return {json}\r\n    */\r\n   toObj() {\r\n      const obj = super.toObj();\r\n\r\n      if (this.settings.supportMultilingual) {\r\n         this.unTranslate(obj.settings, obj.settings, [\"default\"]);\r\n      } else obj.settings.default = this.settings.default;\r\n\r\n      return obj;\r\n   }\r\n\r\n   ///\r\n   /// Working with Actual Object Values:\r\n   ///\r\n\r\n   /**\r\n    * @method defaultValue\r\n    * insert a key=>value pair that represent the default value\r\n    * for this field.\r\n    * @param {obj} values a key=>value hash of the current values.\r\n    */\r\n   defaultValue(values) {\r\n      // if no default value is set, then don't insert a value.\r\n      if (!values[this.columnName]) {\r\n         // Set default string\r\n         if (this.settings.default) {\r\n            if (this.settings.default.indexOf(\"{uuid}\") >= 0) {\r\n               values[this.columnName] = this.AB.uuid();\r\n            } else {\r\n               values[this.columnName] = this.settings.default;\r\n            }\r\n         }\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method isValidData\r\n    * Parse through the given data and return an error if this field's\r\n    * data seems invalid.\r\n    * @param {obj} data  a key=>value hash of the inputs to parse.\r\n    * @param {OPValidator} validator  provided Validator fn\r\n    * @return {array}\r\n    */\r\n   isValidData(data, validator) {\r\n      super.isValidData(data, validator);\r\n\r\n      const L = this.AB.Label();\r\n\r\n      if (\r\n         data &&\r\n         data[this.columnName] &&\r\n         data[this.columnName].length > MAX_CHAR_LENGTH\r\n      ) {\r\n         validator.addError(\r\n            this.columnName,\r\n            L(\"should NOT be longer than {0} characters\", [MAX_CHAR_LENGTH])\r\n         );\r\n      }\r\n   }\r\n\r\n   /*\r\n    * @property isMultilingual\r\n    * does this field represent multilingual data?\r\n    * @return {bool}\r\n    */\r\n   get isMultilingual() {\r\n      return this.settings.supportMultilingual == 1;\r\n   }\r\n};\r\n","/*\r\n * ABFieldTextFormula\r\n *\r\n * An ABFieldTextFormula defines a TextFormula field type.\r\n *\r\n */\r\n\r\nconst ABField = require(\"../../platform/dataFields/ABField\");\r\n\r\nfunction L(key, altText) {\r\n   // TODO:\r\n   return altText; // AD.lang.label.getLabel(key) || altText;\r\n}\r\n\r\nconst ABFieldTextFormulaDefaults = {\r\n   key: \"TextFormula\",\r\n   // unique key to reference this specific DataField\r\n\r\n   description: \"Text Formula\",\r\n   // description: what gets displayed in the Editor description.\r\n   // NOTE: this will be displayed using a Label: L(description)\r\n\r\n   icon: \"question\",\r\n   // font-awesome icon reference.  (without the 'fa-').  so 'question'  to\r\n   // reference 'fa-question'\r\n\r\n   isFilterable: false,\r\n   // {bool} / {fn}\r\n   // determines if the current ABField can be used to filter (FilterComplex\r\n   // or Query) data.\r\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\r\n   //  (field) => field.setting.something == true\r\n\r\n   isSortable: false,\r\n   // {bool} / {fn}\r\n   // determines if the current ABField can be used to Sort data.\r\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\r\n   //  (field) => true/false\r\n\r\n   menuName: \"Text Formula\",\r\n   // menuName: what gets displayed in the Editor drop list\r\n   // NOTE: this will be displayed using a Label: L(menuName)\r\n\r\n   supportRequire: false,\r\n   // {bool}\r\n   // does this ABField support the Required setting?\r\n\r\n   supportUnique: false,\r\n   // {bool}\r\n   // does this ABField support the Unique setting?\r\n\r\n   useAsLabel: true,\r\n   // {bool} / {fn}\r\n   // determines if this ABField can be used in the display of an ABObject's\r\n   // label.\r\n\r\n   compatibleOrmTypes: [\"string\"],\r\n   // {array}\r\n   // what types of Sails ORM attributes can be imported into this data type?\r\n   // http://sailsjs.org/documentation/concepts/models-and-orm/attributes#?attribute-options\r\n\r\n   compatibleMysqlTypes: [\"text\", \"mediumtext\", \"longtext\"],\r\n   // {array}\r\n   // what types of MySql column types can be imported into this data type?\r\n   // https://www.techonthenet.com/mysql/datatypes.php\r\n};\r\n\r\n// defaultValues: the keys must match a .name of your elements to set it's default value.\r\nconst defaultValues = {\r\n   textFormula: \"\",\r\n   // {string} \"some text or text with formula ...\"\r\n   // This tells us what the formula we need to do with text included text string.\r\n   // if we don't have this, the old value which we filled out won't be cleared when we do \"Add field\" this type again.\r\n\r\n   // 'imageWidth':'',\r\n   // 'useHeight': 0,\r\n   // 'imageHeight': ''\r\n};\r\n\r\n/** Private methods */\r\n\r\n/**\r\n * @method setValueToFormula\r\n *\r\n * @param {ABOBject} object\r\n * @param {string} formulaString\r\n * @param {object} rowData\r\n */\r\n\r\nfunction setValueToFormula(object, formulaString, rowData) {\r\n   if (!formulaString) return;\r\n\r\n   const fieldRegExp = /{[^{}]+}/gm;\r\n   const matches_field_array = formulaString.match(fieldRegExp);\r\n   matches_field_array.forEach((element) => {\r\n      const columnName = element.replace(/{|}|\"/g, \"\");\r\n      object.fields().forEach((field) => {\r\n         if (field.columnName == columnName) {\r\n            if (field.key == \"AutoIndex\") {\r\n               //Check AutoIndex Field\r\n               const autoIndexVal = field.format(rowData) || 0;\r\n               formulaString = formulaString.replace(element, autoIndexVal);\r\n            } else if (field.key == \"calculate\") {\r\n               //Calculate Field\r\n               const calVal = `(${field.format(rowData) || 0})`;\r\n               formulaString = formulaString.replace(element, eval(calVal));\r\n            } else if (field.key == \"date\") {\r\n               formulaString = formulaString.replace(\r\n                  element,\r\n                  rowData[columnName]\r\n                     ? field.exportValue(rowData[columnName])\r\n                     : \"\"\r\n               );\r\n            } else {\r\n               formulaString = formulaString.replace(\r\n                  element,\r\n                  rowData[columnName] ? field.format(rowData) : \"\"\r\n               );\r\n            }\r\n         }\r\n      });\r\n   });\r\n\r\n   return formulaString;\r\n}\r\n\r\n/**\r\n * @method setBuildinValueToFormula\r\n *\r\n * @param {ABFactory} AB\r\n * @param {string} formulaString\r\n */\r\n\r\nfunction setBuildinValueToFormula(AB, formulaString) {\r\n   const buildInRegExp = /\\w+\\(.*?\\)/gm;\r\n   const matches_buildin_array = formulaString.match(buildInRegExp);\r\n   if (matches_buildin_array) {\r\n      const buildinList = getBuildInFunction();\r\n      matches_buildin_array.forEach((element) => {\r\n         const formula_array = element.split(/\\(|\\)/);\r\n         const isBracketInBracket =\r\n            formula_array.length > 2 && formula_array[2] != \"\";\r\n         const functionName = formula_array[0];\r\n         const parameters_array = formula_array[1].split(\",\");\r\n         let isMatch = false;\r\n         for (let i = 0; i < buildinList.length; i++) {\r\n            let resultParameters = element;\r\n            if (functionName == buildinList[i].id) {\r\n               if (parameters_array.length == buildinList[i].parameter_size) {\r\n                  switch (functionName) {\r\n                     case \"left\":\r\n                        resultParameters = getLeft(\r\n                           parameters_array[0],\r\n                           parameters_array[1]\r\n                        );\r\n                        break;\r\n                     case \"right\":\r\n                        resultParameters = getRight(\r\n                           parameters_array[0],\r\n                           parameters_array[1]\r\n                        );\r\n                        break;\r\n                     case \"mid\":\r\n                        resultParameters = getMid(\r\n                           parameters_array[0],\r\n                           parameters_array[1],\r\n                           parameters_array[2]\r\n                        );\r\n                        break;\r\n                     case \"trim\":\r\n                        resultParameters = getTrim(parameters_array[0]);\r\n                        break;\r\n                     case \"trimLeft\":\r\n                        resultParameters = getTrimLeft(parameters_array[0]);\r\n                        break;\r\n                     case \"trimRight\":\r\n                        resultParameters = getTrimRight(parameters_array[0]);\r\n                        break;\r\n                     case \"length\":\r\n                        resultParameters = getLength(parameters_array[0]);\r\n                        break;\r\n                     case \"regexReplace\":\r\n                        resultParameters = getRegExpReplace(\r\n                           parameters_array[0],\r\n                           parameters_array[1].trimLeft(),\r\n                           parameters_array[2].trimLeft()\r\n                        );\r\n                        break;\r\n                     case \"extractRegex\":\r\n                        resultParameters = getExtractRegex(\r\n                           parameters_array[0],\r\n                           parameters_array[1].trimLeft()\r\n                        );\r\n                        break;\r\n                     case \"replace\":\r\n                        resultParameters = getReplace(\r\n                           parameters_array[0],\r\n                           parameters_array[1].trimLeft(),\r\n                           parameters_array[2].trimLeft()\r\n                        );\r\n                        break;\r\n                     case \"lower\":\r\n                        resultParameters = getLower(parameters_array[0]);\r\n                        break;\r\n                     case \"upper\":\r\n                        resultParameters = getUpper(parameters_array[0]);\r\n                        break;\r\n                     case \"capitalize\":\r\n                        resultParameters = getCapitalize(parameters_array[0]);\r\n                        break;\r\n                     case \"random\":\r\n                        resultParameters = getRandom(parameters_array[0]);\r\n                        break;\r\n                     case \"numberToWords\":\r\n                        resultParameters = getNumberToWords(\r\n                           parameters_array[0]\r\n                        );\r\n                        break;\r\n                     case \"getDateDayOfWeekName\":\r\n                        if (isBracketInBracket) {\r\n                           element = element + \")\";\r\n                        }\r\n                        resultParameters = getDateDayOfWeekName(\r\n                           AB,\r\n                           parameters_array[0]\r\n                        );\r\n                        break;\r\n                     case \"getDateMonthOfYearName\":\r\n                        if (isBracketInBracket) {\r\n                           element = element + \")\";\r\n                        }\r\n                        resultParameters = getDateMonthOfYearName(\r\n                           AB,\r\n                           parameters_array[0]\r\n                        );\r\n                        break;\r\n                     case \"formatDate\":\r\n                        resultParameters = getFormatDate(\r\n                           parameters_array[0],\r\n                           parameters_array[1].trimLeft()\r\n                        );\r\n                        break;\r\n                     default:\r\n                        break;\r\n                  }\r\n                  isMatch = true;\r\n                  formulaString = formulaString.replace(\r\n                     element,\r\n                     resultParameters\r\n                  );\r\n                  return;\r\n               } else {\r\n                  resultParameters = functionName + \"(Bad Parameter)\";\r\n                  formulaString = formulaString.replace(\r\n                     element,\r\n                     resultParameters\r\n                  );\r\n               }\r\n            }\r\n         }\r\n      });\r\n   }\r\n   return formulaString;\r\n}\r\n\r\nfunction getBuildInFunction() {\r\n   const functionList = [\r\n      {\r\n         id: \"left\",\r\n         value: \"left({COLUMN_NAME}, 1)\",\r\n         type: \"build-in\",\r\n         parameter_size: 2,\r\n      },\r\n      {\r\n         id: \"right\",\r\n         value: \"right({COLUMN_NAME}, 1)\",\r\n         type: \"build-in\",\r\n         parameter_size: 2,\r\n      },\r\n      {\r\n         id: \"mid\",\r\n         value: \"mid({COLUMN_NAME}, 1, 1)\",\r\n         type: \"build-in\",\r\n         parameter_size: 3,\r\n      },\r\n      {\r\n         id: \"trim\",\r\n         value: \"trim({COLUMN_NAME})\",\r\n         type: \"build-in\",\r\n         parameter_size: 1,\r\n      },\r\n      {\r\n         id: \"trimLeft\",\r\n         value: \"trimLeft({COLUMN_NAME})\",\r\n         type: \"build-in\",\r\n         parameter_size: 1,\r\n      },\r\n      {\r\n         id: \"trimRight\",\r\n         value: \"trimRight({COLUMN_NAME})\",\r\n         type: \"build-in\",\r\n         parameter_size: 1,\r\n      },\r\n      {\r\n         id: \"length\",\r\n         value: \"length({COLUMN_NAME})\",\r\n         type: \"build-in\",\r\n         parameter_size: 1,\r\n      },\r\n      {\r\n         id: \"regexReplace\",\r\n         value: \"regexReplace({COLUMN_NAME}, [*], REPLACE_VALUE)\",\r\n         type: \"build-in\",\r\n         parameter_size: 3,\r\n      },\r\n      {\r\n         id: \"extractRegex\",\r\n         value: \"extractRegex({COLUMN_NAME}, [*])\",\r\n         type: \"build-in\",\r\n         parameter_size: 2,\r\n      },\r\n      {\r\n         id: \"replace\",\r\n         value: \"replace({COLUMN_NAME}, SEARCH_VALUE, REPLACE_VALUE)\",\r\n         type: \"build-in\",\r\n         parameter_size: 3,\r\n      },\r\n      {\r\n         id: \"lower\",\r\n         value: \"lower({COLUMN_NAME})\",\r\n         type: \"build-in\",\r\n         parameter_size: 1,\r\n      },\r\n      {\r\n         id: \"upper\",\r\n         value: \"upper({COLUMN_NAME})\",\r\n         type: \"build-in\",\r\n         parameter_size: 1,\r\n      },\r\n      {\r\n         id: \"capitalize\",\r\n         value: \"capitalize({COLUMN_NAME})\",\r\n         type: \"build-in\",\r\n         parameter_size: 1,\r\n      },\r\n      { id: \"random\", value: \"random(1)\", type: \"build-in\", parameter_size: 1 },\r\n      {\r\n         id: \"numberToWords\",\r\n         value: \"numberToWords({NUMBER_COLUMN} or 012...)\",\r\n         type: \"build-in\",\r\n         parameter_size: 1,\r\n      },\r\n      {\r\n         id: \"getDateDayOfWeekName\",\r\n         value: \"getDateDayOfWeekName({DATE_COLUMN})\",\r\n         type: \"build-in\",\r\n         parameter_size: 1,\r\n      },\r\n      {\r\n         id: \"getDateMonthOfYearName\",\r\n         value: \"getDateMonthOfYearName({DATE_COLUMN})\",\r\n         type: \"build-in\",\r\n         parameter_size: 1,\r\n      },\r\n      {\r\n         id: \"formatDate\",\r\n         value: \"formatDate({DATE_COLUMN}, OUTPUT_FORMAT)\",\r\n         type: \"build-in\",\r\n         parameter_size: 2,\r\n      },\r\n   ];\r\n   return functionList;\r\n}\r\n\r\nfunction getLeft(string, endPosition) {\r\n   return string.substring(0, parseInt(endPosition));\r\n}\r\n\r\nfunction getRight(string, endposition) {\r\n   const reverseStr = reverseString(string).substring(0, parseInt(endposition));\r\n   return reverseString(reverseStr);\r\n}\r\n\r\nfunction reverseString(string) {\r\n   return string.split(\" \").reverse().join(\" \");\r\n}\r\n\r\nfunction getMid(string, startPosition, length) {\r\n   if (string.length < startPosition) return \"mid(Bad Parameter)\";\r\n   return string.substring(\r\n      parseInt(startPosition),\r\n      parseInt(startPosition) + parseInt(length)\r\n   );\r\n}\r\n\r\nfunction getTrim(string) {\r\n   return string.trim();\r\n}\r\n\r\nfunction getTrimLeft(string) {\r\n   return string.trimLeft();\r\n}\r\n\r\nfunction getTrimRight(string) {\r\n   return string.trimRight();\r\n}\r\n\r\nfunction getLength(string) {\r\n   return string.length;\r\n}\r\n\r\nfunction getRegExpReplace(string, regexp, replaceString) {\r\n   return string.replace(regexp, replaceString);\r\n}\r\n\r\nfunction getExtractRegex(string, regexp) {\r\n   const extractResult = string.match(regexp);\r\n   if (Array.isArray(extractResult)) {\r\n      return extractResult[0];\r\n   }\r\n   return extractResult;\r\n}\r\n\r\nfunction getReplace(string, searchValue, replaceValue) {\r\n   return string.replace(searchValue, replaceValue);\r\n}\r\n\r\nfunction getLower(string) {\r\n   return string.toLowerCase();\r\n}\r\n\r\nfunction getUpper(string) {\r\n   return string.toUpperCase();\r\n}\r\n\r\nfunction getCapitalize(string) {\r\n   return string\r\n      .toLowerCase()\r\n      .split(\" \")\r\n      .map((s) => s.charAt(0).toUpperCase() + s.substring(1))\r\n      .join(\" \");\r\n}\r\n\r\nfunction getRandom(max) {\r\n   return Math.floor(Math.random() * (max + 1));\r\n}\r\n\r\nfunction getNumberToWords(number) {\r\n   const string = number.trim(\",\").toString();\r\n\r\n   let units,\r\n      tens,\r\n      scales,\r\n      start,\r\n      end,\r\n      chunks,\r\n      chunksLen,\r\n      chunk,\r\n      ints,\r\n      i,\r\n      word,\r\n      words;\r\n\r\n   const and = \"\";\r\n\r\n   /* Is number zero? */\r\n   if (parseInt(string) === 0) {\r\n      return \"zero\";\r\n   }\r\n\r\n   /* Array of units as words */\r\n   units = [\r\n      \"\",\r\n      \"one\",\r\n      \"two\",\r\n      \"three\",\r\n      \"four\",\r\n      \"five\",\r\n      \"six\",\r\n      \"seven\",\r\n      \"eight\",\r\n      \"nine\",\r\n      \"ten\",\r\n      \"eleven\",\r\n      \"twelve\",\r\n      \"thirteen\",\r\n      \"fourteen\",\r\n      \"fifteen\",\r\n      \"sixteen\",\r\n      \"seventeen\",\r\n      \"eighteen\",\r\n      \"nineteen\",\r\n   ];\r\n\r\n   /* Array of tens as words */\r\n   tens = [\r\n      \"\",\r\n      \"\",\r\n      \"twenty\",\r\n      \"thirty\",\r\n      \"forty\",\r\n      \"fifty\",\r\n      \"sixty\",\r\n      \"seventy\",\r\n      \"eighty\",\r\n      \"ninety\",\r\n   ];\r\n\r\n   /* Array of scales as words */\r\n   scales = [\r\n      \"\",\r\n      \"thousand\",\r\n      \"million\",\r\n      \"billion\",\r\n      \"trillion\",\r\n      \"quadrillion\",\r\n      \"quintillion\",\r\n      \"sextillion\",\r\n      \"septillion\",\r\n      \"octillion\",\r\n      \"nonillion\",\r\n      \"decillion\",\r\n      \"undecillion\",\r\n      \"duodecillion\",\r\n      \"tredecillion\",\r\n      \"quatttuor-decillion\",\r\n      \"quindecillion\",\r\n      \"sexdecillion\",\r\n      \"septen-decillion\",\r\n      \"octodecillion\",\r\n      \"novemdecillion\",\r\n      \"vigintillion\",\r\n      \"centillion\",\r\n   ];\r\n\r\n   /* Split user arguemnt into 3 digit chunks from right to left */\r\n   start = string.length;\r\n   chunks = [];\r\n   while (start > 0) {\r\n      end = start;\r\n      chunks.push(string.slice((start = Math.max(0, start - 3)), end));\r\n   }\r\n\r\n   /* Check if function has enough scale words to be able to stringify the user argument */\r\n   chunksLen = chunks.length;\r\n   if (chunksLen > scales.length) {\r\n      return \"\";\r\n   }\r\n\r\n   /* Stringify each integer in each chunk */\r\n   words = [];\r\n   for (i = 0; i < chunksLen; i++) {\r\n      chunk = parseInt(chunks[i]);\r\n\r\n      if (chunk) {\r\n         /* Split chunk into array of individual integers */\r\n         ints = chunks[i].split(\"\").reverse().map(parseFloat);\r\n\r\n         /* If tens integer is 1, i.e. 10, then add 10 to units integer */\r\n         if (ints[1] === 1) {\r\n            ints[0] += 10;\r\n         }\r\n\r\n         /* Add scale word if chunk is not zero and array item exists */\r\n         if ((word = scales[i])) {\r\n            words.push(word);\r\n         }\r\n\r\n         /* Add unit word if array item exists */\r\n         if ((word = units[ints[0]])) {\r\n            words.push(word);\r\n         }\r\n\r\n         /* Add tens word if array item exists */\r\n         if ((word = tens[ints[1]])) {\r\n            words.push(word);\r\n         }\r\n\r\n         /* Add 'and' string after units or tens integer if: */\r\n         if (ints[0] || ints[1]) {\r\n            /* Chunk has a hundreds integer or chunk is the first of multiple chunks */\r\n            if (ints[2] || (!i && chunksLen)) {\r\n               words.push(and);\r\n            }\r\n         }\r\n\r\n         /* Add hundreds word if array item exists */\r\n         if ((word = units[ints[2]])) {\r\n            words.push(word + \" hundred\");\r\n         }\r\n      }\r\n   }\r\n\r\n   return words.reverse().join(\" \");\r\n}\r\n\r\nfunction getDateDayOfWeekName(AB, date) {\r\n   // const localizeDT = moment(date);\r\n   // localizeDT.locale(AD.lang.currentLanguage);\r\n   // return localizeDT.format(\"dddd\");\r\n\r\n   return AB.toDateFormat(date, {\r\n      format: \"dddd\",\r\n      localeCode: AB.Account.language(),\r\n   });\r\n}\r\n\r\nfunction getDateMonthOfYearName(AB, date) {\r\n   // const localizeDT = moment(date);\r\n   // localizeDT.locale(AD.lang.currentLanguage);\r\n   // return localizeDT.format(\"MMMM\");\r\n\r\n   return AB.toDateFormat(date, {\r\n      format: \"MMMM\",\r\n      localeCode: AB.Account.language(),\r\n   });\r\n}\r\n\r\nfunction getFormatDate(date, format) {\r\n   const dt = new Date(date);\r\n   return dt.toString(format);\r\n}\r\n\r\nmodule.exports = class ABFieldTextFormulaCore extends ABField {\r\n   constructor(values, object) {\r\n      super(values, object, ABFieldTextFormulaDefaults);\r\n\r\n      /*\r\n    \t{\r\n\t\t\tsettings: {\r\n\t\t\t\ttextDefault: 'string',\r\n\t\t\t\tsupportMultilingual: true/false\r\n\t\t\t}\r\n    \t}\r\n    \t*/\r\n\r\n      // // text to Int:\r\n      // this.settings.supportMultilingual = parseInt(this.settings.supportMultilingual);\r\n   }\r\n\r\n   // return the default values for this DataField\r\n   static defaults() {\r\n      return ABFieldTextFormulaDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return defaultValues;\r\n   }\r\n\r\n   static getBuildInFunction() {\r\n      return getBuildInFunction();\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /**\r\n    * @method defaultValue\r\n    * insert a key=>value pair that represent the default value\r\n    * for this field.\r\n    * @param {obj} values a key=>value hash of the current values.\r\n    */\r\n   defaultValue(values) {\r\n      // if no default value is set, then don't insert a value.\r\n      if (!values[this.columnName]) {\r\n         // Set default value\r\n         // values[this.columnName] = this.settings.DEFAULT_VALUE;\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method isValidData\r\n    * Parse through the given data and return an error if this field's\r\n    * data seems invalid.\r\n    * @param {obj} data  a key=>value hash of the inputs to parse.\r\n    * @param {OPValidator} validator  provided Validator fn\r\n    * @return {array}\r\n    */\r\n   isValidData(data, validator) {\r\n      validator = super.isValid();\r\n\r\n      // validator.addError(this.columnName, L('ab.validation.object.name.unique', 'Field columnName must be unique (#name# already used in this Application)').replace('#name#', this.name) );\r\n\r\n      return validator;\r\n   }\r\n\r\n   /*\r\n    * @property isMultilingual\r\n    * does this field represent multilingual data?\r\n    * @return {bool}\r\n    */\r\n   get isMultilingual() {\r\n      // return this.settings.supportMultilingual == 1;\r\n      return false;\r\n   }\r\n\r\n   format(rowData) {\r\n      try {\r\n         if (!this.settings.textFormula) return \"\";\r\n\r\n         let resultFormula = this.settings.textFormula;\r\n\r\n         //Set Field value first\r\n         resultFormula = setValueToFormula(this.object, resultFormula, rowData);\r\n\r\n         //then Check Build-in Function\r\n         resultFormula = setBuildinValueToFormula(this.AB, resultFormula);\r\n\r\n         return resultFormula;\r\n      } catch (err) {\r\n         return \"\";\r\n      }\r\n   }\r\n};\r\n\r\n//// NOTE: if you need a unique [edit_type] by your returned config.editor above:\r\n// webix.editors = {\r\n//   \"[edit_type]\": {\r\n//     focus: function () {...}\r\n//     getValue: function () {...},\r\n//     setValue: function (value) {...},\r\n//     render: function () {...}\r\n//   }\r\n// };\r\n\r\n//// NOTE: if you need a unique [sort_type] by your returned config.sort above:\r\n// webix.DataStore.prototype.sorting.as.[sort_type] = function(a,b){\r\n//     return a > b ? 1 : -1;\r\n// }\r\n","/*\r\n * ABFieldTreeCore\r\n *\r\n * An ABFieldTree defines a select list field type.\r\n *\r\n */\r\n\r\nconst ABFieldSelectivity = require(\"../../platform/dataFields/ABFieldSelectivity\");\r\n\r\nfunction L(key, altText) {\r\n   // TODO:\r\n   return altText; // AD.lang.label.getLabel(key) || altText;\r\n}\r\n\r\nconst ABFieldTreeDefaults = {\r\n   key: \"tree\",\r\n   // unique key to reference this specific DataField\r\n\r\n   description:\r\n      \"Data tree allows you to build a hierarchical set of selectable data. (ex: Categories and sub-categories)\",\r\n   // description: what gets displayed in the Editor description.\r\n   // NOTE: this will be displayed using a Label: L(description)\r\n\r\n   icon: \"sitemap\",\r\n   // font-awesome icon reference.  (without the 'fa-').  so 'sitemap'  to\r\n   // reference 'fa-sitemap'\r\n\r\n   isFilterable: false,\r\n   // {bool} / {fn}\r\n   // determines if the current ABField can be used to filter (FilterComplex\r\n   // or Query) data.\r\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\r\n   //  (field) => field.setting.something == true\r\n\r\n   isSortable: false,\r\n   // {bool} / {fn}\r\n   // determines if the current ABField can be used to Sort data.\r\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\r\n   //  (field) => true/false\r\n\r\n   menuName: \"Data Tree\",\r\n   // menuName: what gets displayed in the Editor drop list\r\n   // NOTE: this will be displayed using a Label: L(menuName)\r\n\r\n   supportRequire: false,\r\n   // {bool}\r\n   // does this ABField support the Required setting?\r\n\r\n   supportUnique: false,\r\n   // {bool}\r\n   // does this ABField support the Unique setting?\r\n\r\n   useAsLabel: false,\r\n   // {bool} / {fn}\r\n   // determines if this ABField can be used in the display of an ABObject's\r\n   // label.\r\n\r\n   compatibleOrmTypes: [\"string\"],\r\n   // {array}\r\n   // what types of Sails ORM attributes can be imported into this data type?\r\n   // http://sailsjs.org/documentation/concepts/models-and-orm/attributes#?attribute-options\r\n\r\n   compatibleMysqlTypes: [\"text\", \"mediumtext\", \"longtext\"],\r\n   // {array}\r\n   // what types of MySql column types can be imported into this data type?\r\n   // https://www.techonthenet.com/mysql/datatypes.php\r\n};\r\n\r\nconst defaultValues = {\r\n   options: [],\r\n};\r\n\r\nmodule.exports = class ABFieldTreeCore extends ABFieldSelectivity {\r\n   constructor(values, object) {\r\n      super(values, object, ABFieldTreeDefaults);\r\n   }\r\n\r\n   // return the default values for this DataField\r\n   static defaults() {\r\n      return ABFieldTreeDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return defaultValues;\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /**\r\n    * @method fromValues()\r\n    *\r\n    * initialze this object with the given set of values.\r\n    * @param {obj} values\r\n    */\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n\r\n      // translate options list\r\n      if (this.settings.options && this.settings.options.length > 0) {\r\n         this.settings.options.forEach((opt) => {\r\n            this.translate(opt, opt, [\"text\"]);\r\n         });\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method toObj()\r\n    *\r\n    * properly compile the current state of this ABApplication instance\r\n    * into the values needed for saving to the DB.\r\n    *\r\n    * Most of the instance data is stored in .json field, so be sure to\r\n    * update that from all the current values of our child fields.\r\n    *\r\n    * @return {json}\r\n    */\r\n   toObj() {\r\n      const obj = super.toObj();\r\n\r\n      // Un-translate options list\r\n      if (obj.settings.options && obj.settings.options.length > 0) {\r\n         obj.settings.options.forEach((opt) => {\r\n            this.unTranslate(opt, opt, [\"text\"]);\r\n         });\r\n      }\r\n\r\n      return obj;\r\n   }\r\n\r\n   ///\r\n   /// Working with Actual Object Values:\r\n   ///\r\n\r\n   /**\r\n    * @method defaultValue\r\n    * insert a key=>value pair that represent the default value\r\n    * for this field.\r\n    * @param {obj} values a key=>value hash of the current values.\r\n    */\r\n   defaultValue(values) {}\r\n\r\n   /**\r\n    * @method isValidData\r\n    * Parse through the given data and return an error if this field's\r\n    * data seems invalid.\r\n    * @param {obj} data  a key=>value hash of the inputs to parse.\r\n    * @param {OPValidator} validator  provided Validator fn\r\n    * @return {array}\r\n    */\r\n   isValidData(data, validator) {\r\n      super.isValidData(data, validator);\r\n   }\r\n};\r\n","/*\r\n * ABFieldUser\r\n *\r\n * An ABFieldUser defines a user field type.\r\n *\r\n */\r\n\r\nconst ABFieldConnect = require(\"../../platform/dataFields/ABFieldConnect\");\r\n\r\nfunction L(key, altText) {\r\n   // TODO:\r\n   return altText; // AD.lang.label.getLabel(key) || altText;\r\n}\r\n\r\nconst ABFieldUserDefaults = {\r\n   key: \"user\",\r\n   // unique key to reference this specific DataField\r\n\r\n   description: \"Add users to a record.\",\r\n   // description: what gets displayed in the Editor description.\r\n   // NOTE: this will be displayed using a Label: L(description)\r\n\r\n   icon: \"user-o\",\r\n   // font-awesome icon reference.  (without the 'fa-').  so 'user-o'  to\r\n   // reference 'fa-user-o'\r\n\r\n   isFilterable: true,\r\n   // {bool} / {fn}\r\n   // determines if the current ABField can be used to filter (FilterComplex\r\n   // or Query) data.\r\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\r\n   //  (field) => field.setting.something == true\r\n\r\n   isSortable: (field) => {\r\n      if (field.settings.isMultiple) {\r\n         return false;\r\n      } else {\r\n         return true;\r\n      }\r\n   },\r\n   // {bool} / {fn}\r\n   // determines if the current ABField can be used to Sort data.\r\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\r\n   //  (field) => true/false\r\n\r\n   menuName: \"User\",\r\n   // menuName: what gets displayed in the Editor drop list\r\n   // NOTE: this will be displayed using a Label: L(menuName)\r\n\r\n   supportRequire: false,\r\n   // {bool}\r\n   // does this ABField support the Required setting?\r\n\r\n   supportUnique: false,\r\n   // {bool}\r\n   // does this ABField support the Unique setting?\r\n\r\n   useAsLabel: true,\r\n   // {bool} / {fn}\r\n   // determines if this ABField can be used in the display of an ABObject's\r\n   // label.\r\n\r\n   compatibleOrmTypes: [\"string\"],\r\n   // {array}\r\n   // what types of Sails ORM attributes can be imported into this data type?\r\n   // http://sailsjs.org/documentation/concepts/models-and-orm/attributes#?attribute-options\r\n\r\n   compatibleMysqlTypes: [\"char\", \"varchar\", \"tinytext\"],\r\n   // {array}\r\n   // what types of MySql column types can be imported into this data type?\r\n   // https://www.techonthenet.com/mysql/datatypes.php\r\n\r\n   USERNAME_FIELD_ID: \"5760560b-c078-47ca-98bf-e18ac492a561\",\r\n   // {string} .uuid\r\n   // the ABField.id of the SiteUser.username field.  This is what other\r\n   // objects will link to in their ABFieldUser connections.\r\n};\r\n\r\nconst defaultValues = {\r\n   editable: 1,\r\n   isMultiple: 0,\r\n   isCurrentUser: 0,\r\n   isShowProfileImage: 0,\r\n   isShowUsername: 1,\r\n};\r\n\r\nmodule.exports = class ABFieldUserCore extends ABFieldConnect {\r\n   constructor(values, object) {\r\n      super(values, object, ABFieldUserDefaults);\r\n   }\r\n\r\n   // return the default values for this DataField\r\n   static defaults() {\r\n      return ABFieldUserDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return defaultValues;\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n\r\n      this.settings.editable = parseInt(this.settings.editable);\r\n      this.settings.isMultiple = parseInt(this.settings.isMultiple);\r\n      this.settings.isCurrentUser = parseInt(this.settings.isCurrentUser);\r\n      this.settings.isShowProfileImage = parseInt(\r\n         this.settings.isShowProfileImage\r\n      );\r\n      this.settings.isShowUsername = parseInt(this.settings.isShowUsername);\r\n   }\r\n\r\n   ///\r\n   /// Working with Actual Object Values:\r\n   ///\r\n\r\n   format(rowData) {\r\n      let val = this.dataValue(rowData) || [];\r\n\r\n      if (val && !Array.isArray(val)) val = [val];\r\n      if (!val) val = [];\r\n\r\n      return val.map((v) => v.username || v).join(\", \");\r\n   }\r\n};\r\n","/**\r\n * ABProcessLane\r\n * manages the lanes in a Process Diagram.\r\n *\r\n * Lanes manage users in the system, and provide a way to lookup a SiteUser.\r\n */\r\nconst ABProcessParticipant = require(\"../../platform/process/ABProcessParticipant\");\r\n\r\nconst ABProcessLaneDefaults = {\r\n   type: \"process.lane\",\r\n   // {string} .type\r\n   // unique key to reference this specific object\r\n\r\n   // icon: \"key\"\r\n   // {string} .icon\r\n   // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\r\n};\r\n\r\nmodule.exports = class ABProcessLaneCore extends ABProcessParticipant {\r\n   constructor(attributes, process, AB) {\r\n      super(attributes, process, AB);\r\n\r\n      //// Runtime Values\r\n      //// these are not stored in the Definition, but rather\r\n      //// loaded and used from a running process instance.\r\n   }\r\n\r\n   static defaults() {\r\n      return ABProcessLaneDefaults;\r\n   }\r\n\r\n   fromValues(attributes) {\r\n      /*\r\n        {\r\n            id: uuid(),\r\n            name: 'name',\r\n            type: 'xxxxx',\r\n            json: \"{json}\"\r\n        }\r\n        */\r\n      super.fromValues(attributes);\r\n\r\n      this.type = attributes.type || ABProcessLaneDefaults.type;\r\n   }\r\n\r\n   /**\r\n    * @method toObj()\r\n    * properly compile the current state of this object instance\r\n    * into the values needed for saving to the DB.\r\n    * @return {json}\r\n    */\r\n   // toObj() {\r\n   //     // default label value\r\n   //     if (!this.label && this.name && this.name != \"\") {\r\n   //         this.label = this.name;\r\n   //     }\r\n\r\n   //     // untranslate this object:\r\n   //     var data = super.toObj();\r\n\r\n   //     var fieldsToSave = [\r\n   //         \"id\",\r\n   //         \"name\",\r\n   //         \"type\",\r\n   //         \"processID\",\r\n   //         \"diagramID\",\r\n   //         \"where\"\r\n   //     ];\r\n   //     fieldsToSave.forEach((f) => {\r\n   //         data[f] = this[f];\r\n   //     });\r\n\r\n   //     return data;\r\n   // }\r\n};\r\n","/**\r\n * ABProcessParticipant\r\n * manages the participant lanes in a Process Diagram.\r\n *\r\n * Participants manage users in the system, and provide a way to lookup a SiteUser.\r\n */\r\nconst ABMLClass = require(\"../../platform/ABMLClass\");\r\n\r\nconst ABProcessParticipantDefaults = {\r\n   type: \"process.participant\",\r\n   // {string} .type\r\n   // unique key to reference this specific object\r\n\r\n   // icon: \"key\" // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\r\n};\r\n\r\nmodule.exports = class ABProcessParticipantCore extends ABMLClass {\r\n   constructor(attributes, process, AB) {\r\n      super([\"label\"], AB);\r\n\r\n      this.process = process;\r\n      if (!this.processID) {\r\n         this.processID = process.id;\r\n      }\r\n\r\n      this.fromValues(attributes);\r\n\r\n      //// Runtime Values\r\n      //// these are not stored in the Definition, but rather\r\n      //// loaded and used from a running process instance.\r\n   }\r\n\r\n   static defaults() {\r\n      return ABProcessParticipantDefaults;\r\n   }\r\n\r\n   fromValues(attributes) {\r\n      /*\r\n        {\r\n            id: uuid(),\r\n            name: 'name',\r\n            type: 'xxxxx',\r\n            json: \"{json}\"\r\n        }\r\n        */\r\n      // These Values are needed By ABDefinition:\r\n      this.id = attributes.id;\r\n      this.name = attributes.name || \"\";\r\n      this.type = attributes.type || ABProcessParticipantDefaults.type;\r\n      this.key = attributes.key || ABProcessParticipantDefaults.type;\r\n\r\n      // Process Values:\r\n      this.processID = attributes.processID || null;\r\n      this.diagramID = attributes.diagramID || \"?diagramID?\";\r\n      this.laneIDs = attributes.laneIDs || [];\r\n      this.stashed = false;\r\n      if (attributes.stashed && attributes.stashed != \"\") {\r\n         this.stashed = attributes.stashed;\r\n      }\r\n\r\n      this.useRole = 0;\r\n      if (typeof attributes.useRole != \"undefined\") {\r\n         this.useRole = parseInt(attributes.useRole);\r\n      }\r\n\r\n      this.role = 0;\r\n      if (typeof attributes.role != \"undefined\") {\r\n         this.role = attributes.role;\r\n      }\r\n\r\n      this.useAccount = 0;\r\n      if (typeof attributes.useAccount != \"undefined\") {\r\n         this.useAccount = parseInt(attributes.useAccount);\r\n      }\r\n\r\n      this.account = 0;\r\n      if (typeof attributes.account != \"undefined\") {\r\n         this.account = attributes.account;\r\n      }\r\n\r\n      this.useField = 0;\r\n      if (typeof attributes.useField != \"undefined\") {\r\n         this.useField = parseInt(attributes.useField);\r\n      }\r\n\r\n      this.fields = [];\r\n      if (typeof attributes.fields != \"undefined\") {\r\n         this.fields = attributes.fields;\r\n      }\r\n\r\n      super.fromValues(attributes); // perform translation on this object.\r\n      // NOTE: keep this at the end of .fromValues();\r\n\r\n      if (!this.label) {\r\n         this.label = this.name;\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method toObj()\r\n    *\r\n    * properly compile the current state of this ABApplication instance\r\n    * into the values needed for saving to the DB.\r\n    *\r\n    * Most of the instance data is stored in .json field, so be sure to\r\n    * update that from all the current values of our child fields.\r\n    *\r\n    * @return {json}\r\n    */\r\n   toObj() {\r\n      // default label value\r\n      if (!this.label && this.name && this.name != \"\") {\r\n         this.label = this.name;\r\n      }\r\n\r\n      // untranslate this object:\r\n      var data = super.toObj();\r\n\r\n      var fieldsToSave = [\r\n         \"id\",\r\n         \"name\",\r\n         \"type\",\r\n         \"processID\",\r\n         \"diagramID\",\r\n         \"laneIDs\",\r\n         \"where\",\r\n         \"useRole\",\r\n         \"role\",\r\n         \"useAccount\",\r\n         \"account\",\r\n         \"useField\",\r\n         \"fields\",\r\n         \"stashed\",\r\n      ];\r\n      fieldsToSave.forEach((f) => {\r\n         data[f] = this[f];\r\n      });\r\n\r\n      return data;\r\n   }\r\n};\r\n","/*\r\n * ABProcessTaskManager\r\n *\r\n * An interface for managing the different ABProcessTasks in AppBuilder.\r\n *\r\n */\r\n\r\n/*\r\n * Tasks\r\n * A name => ABProcessElement hash of the different ABProcessElements available.\r\n */\r\nvar Tasks = {};\r\n\r\n/*\r\n * DEFINITIONTYPES\r\n * a hash of BPMN:Element.type to Default values\r\n * for each of our Process Objects.\r\n *\r\n * NOTE: For Tasks, the key should be target.type,\r\n * for Triggers or End elements, the key should be\r\n * the target.eventDefinitionType\r\n */\r\nvar DEFINITIONTYPES = {};\r\n\r\nvar AllProcessElements = [\r\n   require(\"../../platform/process/tasks/ABProcessEnd\"),\r\n   require(\"../../platform/process/tasks/ABProcessGatewayExclusive\"),\r\n   require(\"../../platform/process/tasks/ABProcessTaskEmail\"),\r\n   require(\"../../platform/process/tasks/ABProcessTaskService\"),\r\n   require(\"../../platform/process/tasks/ABProcessTaskServiceAccountingBatchProcessing\"),\r\n   require(\"../../platform/process/tasks/ABProcessTaskServiceAccountingFPClose\"),\r\n   require(\"../../platform/process/tasks/ABProcessTaskServiceAccountingFPYearClose\"),\r\n   require(\"../../platform/process/tasks/ABProcessTaskServiceAccountingJEArchive\"),\r\n   require(\"../../platform/process/tasks/ABProcessTaskServiceCalculate\"),\r\n   require(\"../../platform/process/tasks/ABProcessTaskServiceInsertRecord\"),\r\n   require(\"../../platform/process/tasks/ABProcessTaskServiceQuery\"),\r\n   require(\"../../platform/process/tasks/ABProcessTaskServiceGetResetPasswordUrl\"),\r\n   require(\"../../platform/process/tasks/ABProcessTaskSubProcess\"),\r\n   require(\"../../platform/process/tasks/ABProcessTaskUser\"),\r\n   require(\"../../platform/process/tasks/ABProcessTaskUserApproval\"),\r\n   require(\"../../platform/process/tasks/ABProcessTaskUserExternal\"),\r\n   require(\"../../platform/process/tasks/ABProcessTrigger\"),\r\n   require(\"../../platform/process/tasks/ABProcessTriggerLifecycle\"),\r\n   require(\"../../platform/process/tasks/ABProcessTriggerTimer\"),\r\n];\r\n\r\nAllProcessElements.forEach((ELEMENT) => {\r\n   Tasks[ELEMENT.defaults().key] = ELEMENT;\r\n\r\n   switch (ELEMENT.defaults().category) {\r\n      case \"start\":\r\n      case \"end\":\r\n         DEFINITIONTYPES[ELEMENT.DiagramReplace().target.eventDefinitionType] =\r\n            ELEMENT.defaults();\r\n         break;\r\n\r\n      case \"gateway\":\r\n      case \"task\":\r\n         DEFINITIONTYPES[ELEMENT.DiagramReplace().target.type] =\r\n            ELEMENT.defaults();\r\n         break;\r\n   }\r\n});\r\n\r\nmodule.exports = {\r\n   /*\r\n    * @function allTasks\r\n    * return all the currently defined ABProcessTasks in an array.\r\n    * @return [{ABProcessTask},...]\r\n    */\r\n   allTasks: function () {\r\n      var tasks = [];\r\n      for (var t in Tasks) {\r\n         tasks.push(Tasks[t]);\r\n      }\r\n      return tasks;\r\n   },\r\n\r\n   /*\r\n    * @function newTask\r\n    * return an instance of an ABProcessTask based upon the values.type value.\r\n    * @return {ABProcessTask}\r\n    */\r\n   newTask: function (values, process, AB) {\r\n      if (values.key) {\r\n         return new Tasks[values.key](values, process, AB);\r\n      } else {\r\n         //// TODO: what to do here?\r\n      }\r\n   },\r\n\r\n   DiagramReplaceDefinitionsForType: function (type) {\r\n      var definitions = AllProcessElements.filter((e) => {\r\n         return e.defaults().category == type;\r\n      }).map((e) => {\r\n         return e.DiagramReplace();\r\n      });\r\n      return definitions;\r\n   },\r\n\r\n   StartEvents: function () {\r\n      return this.DiagramReplaceDefinitionsForType(\"start\");\r\n   },\r\n\r\n   Gateways: function () {\r\n      return this.DiagramReplaceDefinitionsForType(\"gateway\");\r\n   },\r\n\r\n   Tasks: function () {\r\n      return this.DiagramReplaceDefinitionsForType(\"task\");\r\n   },\r\n\r\n   EndEvents: function () {\r\n      return this.DiagramReplaceDefinitionsForType(\"end\");\r\n   },\r\n\r\n   definitionForElement: function (element) {\r\n      // pull the key from the embedded .eventDefinition\r\n      // if there is one\r\n      var key = null;\r\n      if (element.businessObject.eventDefinitions) {\r\n         var def = element.businessObject.eventDefinitions[0];\r\n         if (def) {\r\n            key = def.$type;\r\n         }\r\n      }\r\n\r\n      // if not, then just use the base .type\r\n      if (!key) {\r\n         key = element.type;\r\n      }\r\n\r\n      return DEFINITIONTYPES[key];\r\n   },\r\n};\r\n","var ABMLClass = require(\"../../../platform/ABMLClass\");\r\n\r\nmodule.exports = class ABProcessTaskCore extends ABMLClass {\r\n   constructor(attributes, process, AB, defaultValues) {\r\n      super([\"label\"], AB);\r\n\r\n      this.defaults = defaultValues || { key: \"core\", icon: \"core\" };\r\n      // {obj} .defaults\r\n      // a value hash of default values for an ABProcessTask\r\n      // NOTE: needs to be set before .fromValues()\r\n\r\n      this.fromValues(attributes);\r\n\r\n      this.process = process;\r\n      if (!this.processID) {\r\n         this.processID = process.id;\r\n      }\r\n      // {ABProcess} .process\r\n      // The parent ABProcess this process element is a part of.\r\n\r\n      //// Runtime Values\r\n      //// these are not stored in the Definition, but rather\r\n      //// loaded and used from a running process instance.\r\n      this.state = null;\r\n   }\r\n\r\n   ///\r\n   /// Static Methods\r\n   ///\r\n\r\n   fromValues(attributes) {\r\n      /*\r\n        {\r\n            id: uuid(),\r\n            name: 'name',\r\n            type: 'xxxxx',\r\n            json: \"{json}\"\r\n        }\r\n        */\r\n      // ABDefinition Related fields:\r\n      this.id = attributes.id;\r\n      this.name = attributes.name || \"\";\r\n      this.type = attributes.type || \"process.task.unknown\";\r\n\r\n      // ABProcess related fields:\r\n      this.key = attributes.key || this.defaults.key || \"?key?\";\r\n      this.processID = attributes.processID || null;\r\n      this.diagramID = attributes.diagramID || \"?diagramID?\";\r\n      this.laneDiagramID = attributes.laneDiagramID || \"?laneID?\";\r\n      // laneDiagramID : connects to the parent object that defines any\r\n      //      default User information for the Task.  In our case, it\r\n      //      might be a {ABProcessParticipant} object, or a {ABProcessLane}\r\n      //      object.  by default, a diagram's Participant obj doesn't define\r\n      //      any lanes, and therefore can provide that info.  Once a lane\r\n      //      is added, however, an object is assigned to it, and the\r\n      //      Lane will provide that info.\r\n\r\n      // initialize any defined settings\r\n      if (this.defaults && this.defaults.settings) {\r\n         this.defaults.settings.forEach((s) => {\r\n            if (typeof attributes[s] == \"undefined\") this[s] = null;\r\n            else this[s] = attributes[s];\r\n         });\r\n      }\r\n\r\n      super.fromValues(attributes); // perform translation on this object.\r\n      // NOTE: keep this at the end of .fromValues();\r\n\r\n      if (!this.label) {\r\n         this.label = this.name;\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method toObj()\r\n    *\r\n    * properly compile the current state of this ABApplication instance\r\n    * into the values needed for saving to the DB.\r\n    *\r\n    * Most of the instance data is stored in .json field, so be sure to\r\n    * update that from all the current values of our child fields.\r\n    *\r\n    * @return {json}\r\n    */\r\n   toObj() {\r\n      // default label value\r\n      if (!this.label && this.name && this.name != \"\") {\r\n         this.label = this.name;\r\n      }\r\n\r\n      // untranslate this object:\r\n      var data = super.toObj();\r\n\r\n      var fieldsToSave = [\r\n         \"id\",\r\n         \"name\",\r\n         \"type\",\r\n         \"processID\",\r\n         \"diagramID\",\r\n         \"laneDiagramID\",\r\n         \"key\",\r\n      ];\r\n      fieldsToSave.forEach((f) => {\r\n         data[f] = this[f];\r\n      });\r\n\r\n      // save any defined settings\r\n      if (this.defaults && this.defaults.settings) {\r\n         this.defaults.settings.forEach((s) => {\r\n            data[s] = this[s];\r\n         });\r\n      }\r\n\r\n      return data;\r\n   }\r\n\r\n   ////\r\n   //// Process Instance Methods\r\n   ////\r\n\r\n   /**\r\n    * errorConfig()\r\n    * Respond with an error when expected configuration parameters do not\r\n    * pull data.\r\n    * @param {obj} instance\r\n    *        the instance data of this task\r\n    * @param {string} msg\r\n    *        the display message for this error.\r\n    * @param {array[string]} fields\r\n    *        an array of parameter keys that should be included in the error\r\n    *        for additional information.\r\n    * @return {Promise.reject(error)}\r\n    */\r\n   errorConfig(instance, msg, fields = []) {\r\n      this.log(instance, msg);\r\n      var error = new Error(`${this.type}: ${msg}`);\r\n      var info = { task: this };\r\n      if (!Array.isArray(fields)) fields = [fields];\r\n      fields.forEach((field) => {\r\n         info[field] = this[field];\r\n      });\r\n      this.AB.notify.builder(error, info);\r\n      return Promise.reject(error);\r\n   }\r\n\r\n   /**\r\n    * initState()\r\n    * setup this task's initial state variables\r\n    * @param {obj} context\r\n    *        the context data of the process instance\r\n    * @param {obj} defaults\r\n    *        any values to include from our child classes\r\n    * @param {obj} val\r\n    *        any values to override the default state\r\n    */\r\n   initState(context, defaults, val) {\r\n      defaults = defaults || {};\r\n      if (!val) {\r\n         val = defaults;\r\n         defaults = {};\r\n\r\n         // in this case, then auto initi blank instanceValues:\r\n         if (this.defaults && this.defaults.instanceValues) {\r\n            this.defaults.instanceValues.forEach((v) => {\r\n               defaults[v] = null;\r\n            });\r\n         }\r\n      }\r\n\r\n      context.taskState = context.taskState || {};\r\n\r\n      // don't overwrite your settings if they already exist:\r\n      if (!context.taskState[this.diagramID]) {\r\n         context.taskState[this.diagramID] = {\r\n            initialized: true,\r\n            status: \"initialized\",\r\n         };\r\n         for (var d in defaults) {\r\n            context.taskState[this.diagramID][d] = defaults[d];\r\n         }\r\n         for (var v in val) {\r\n            context.taskState[this.diagramID][v] = val[v];\r\n         }\r\n      }\r\n   }\r\n\r\n   /**\r\n    * log()\r\n    * enter a log in the current process instance\r\n    * @param {obj} instance  the current ABProcessInstance\r\n    * @param {...} ...allArgs the remaining parameters sent to the log\r\n    */\r\n   log(instance, ...allArgs) {\r\n      var text = `${this.diagramID} : ${\r\n         this.name ? this.name : this.key\r\n      } : ${allArgs.join(\" \")}`;\r\n      instance.log.push(text);\r\n   }\r\n\r\n   /**\r\n    * myLane()\r\n    * return the ABProcessParticipant | ABProcessLane element we are\r\n    * in.\r\n    * @return {ABProcessParticipant|ABProcessLane}\r\n    */\r\n   myLane() {\r\n      return this.process.elementForDiagramID(this.laneDiagramID);\r\n   }\r\n\r\n   /**\r\n    * myState()\r\n    * return the current state values for this ABProcessTask\r\n    * @param {obj} instance  the current ABProcessInstance\r\n    * @return {obj}\r\n    */\r\n   myState(instance) {\r\n      return instance.context.taskState[this.diagramID];\r\n   }\r\n\r\n   /**\r\n    * nextTasks()\r\n    * follow the current instance diagram and return the next task(s)\r\n    * after this task.\r\n    * @param {obj} instance  the current ABProcessInstance\r\n    * @return {array}  [ABProcessTask, ...] or {null} if an error\r\n    */\r\n   nextTasks(instance) {\r\n      var nextTasks = [];\r\n\r\n      var myDiagramObj = instance.hashDiagramObjects[this.diagramID];\r\n      if (!myDiagramObj) {\r\n         var error = new Error(\r\n            `Configuration Error: Did not find my definition for dID[${this.diagramID}]`\r\n         );\r\n         this.onError(instance, error);\r\n         return null;\r\n      }\r\n\r\n      // myDiagramObj :\r\n      // {\r\n      //     \"bpmn2:outgoing\": [{\"_text\": \"SequenceFlow_00fbxm3\"} ...],\r\n      //     \"_attributes\": {id: \"StartEvent_1\"},\r\n      //     \"_type\": \"start\"\r\n      // }\r\n\r\n      // find my possible exits:\r\n      var exitFlows = myDiagramObj[\"bpmn2:outgoing\"];\r\n      if (!exitFlows) {\r\n         var error = new Error(\r\n            `Configuration Error: Did not find any outgoing flows for dID[${this.diagramID}]`\r\n         );\r\n         this.AB.notify.builder(error, { task: this });\r\n         this.onError(instance, error);\r\n         return null;\r\n      }\r\n\r\n      if (!Array.isArray(exitFlows)) {\r\n         exitFlows = [exitFlows];\r\n      }\r\n\r\n      var tasksFromFlow = (flow) => {\r\n         // follow a flow and grab each of it's exit tasks\r\n         // place them into nextTasks[];\r\n\r\n         var flowObj = instance.hashDiagramObjects[flow[\"_text\"]];\r\n         if (!flowObj) return;\r\n\r\n         var targetIDs = flowObj[\"_attributes\"][\"targetRef\"];\r\n         if (!targetIDs) return;\r\n\r\n         if (!Array.isArray(targetIDs)) {\r\n            targetIDs = [targetIDs];\r\n         }\r\n\r\n         targetIDs.forEach((tid) => {\r\n            var targetTask = this.process.elementForDiagramID(tid);\r\n            if (targetTask) {\r\n               if (nextTasks) {\r\n                  nextTasks.push(targetTask);\r\n               }\r\n            } else {\r\n               var error = new Error(\r\n                  `Configuration Error: No ProcessTask instance for diagramID[${tid}]`\r\n               );\r\n               this.AB.notify.builder(error, { task: this });\r\n               this.onError(instance, error);\r\n               nextTasks = null;\r\n            }\r\n         });\r\n      };\r\n\r\n      exitFlows.forEach((f) => {\r\n         tasksFromFlow(f);\r\n      });\r\n\r\n      return nextTasks;\r\n   }\r\n\r\n   /**\r\n    * onError()\r\n    * perform the following actions (log it) on an error.\r\n    * @param {obj} instance  the current ABProcessInstance\r\n    * @param {Error} error\r\n    */\r\n   onError(instance, error) {\r\n      if (error) {\r\n         var text = `${error.toString()}`;\r\n         this.log(instance, text);\r\n      }\r\n      var myState = this.myState(instance);\r\n      myState.status = \"error\";\r\n   }\r\n\r\n   /**\r\n    * processDataFields()\r\n    * return an array of avaiable data fields that this element\r\n    * can request from other ProcessElements.\r\n    * Different Process Elements can make data available to other\r\n    * process Elements.\r\n    * @return {array} | null\r\n    */\r\n   processDataFields() {\r\n      return null;\r\n   }\r\n\r\n   /**\r\n    * processData()\r\n    * return the current value requested for the given data key.\r\n    * @param {obj} instance\r\n    * @return {mixed} | null\r\n    */\r\n   processData(instance, key) {\r\n      return null;\r\n   }\r\n\r\n   /**\r\n    * processDataObjects()\r\n    * return an array of avaiable ABObjects that this element\r\n    * can provide to other ProcessElements.\r\n    * @return {array} | null\r\n    */\r\n   processDataObjects() {\r\n      return null;\r\n   }\r\n\r\n   /**\r\n    * hashProcessDataValues()\r\n    * return a hash of live Process Data Values\r\n    * @param {obj} instance\r\n    * @return {array} | null\r\n    */\r\n   hashProcessDataValues(instance) {\r\n      var listDataFields = this.process.processDataFields(this);\r\n      var currentProcessValues = {};\r\n      listDataFields.forEach((f) => {\r\n         currentProcessValues[f.key] = this.process.processData(this, [\r\n            instance,\r\n            f.key,\r\n         ]);\r\n      });\r\n      return currentProcessValues;\r\n   }\r\n\r\n   /**\r\n    * reset()\r\n    * prepare this task to run again if it was already completed.\r\n    *\r\n    * This might happen in a process where a loop is formed and tasks\r\n    * are repeated until a certain outcome.\r\n    *\r\n    * @param {obj} instance  the current ABProcessInstance\r\n    */\r\n   reset(instance) {\r\n      // a task wants to run me.  Possibly again.\r\n      var myState = this.myState(instance);\r\n\r\n      // if I haven't setup my state (why?) then just\r\n      // do that again:\r\n      if (!myState) {\r\n         this.initState(instance.context);\r\n      } else {\r\n         // if I have already \"completed\" and we are being\r\n         // asked to run again (it's possible)\r\n         if (myState.status == \"completed\" || myState.status == \"error\") {\r\n            // remove my current state\r\n            delete instance.context.taskState[this.diagramID];\r\n\r\n            // store a new state in the context\r\n            this.initState(instance.context);\r\n\r\n            // remember our previous state\r\n            var newState = this.myState(instance);\r\n            newState._prevState = myState;\r\n            this.log(instance, \" Reset() called. Running again. \");\r\n         }\r\n      }\r\n   }\r\n\r\n   /**\r\n    * stateCompleted()\r\n    * mark this task has having completed.\r\n    * @param {obj} instance  the current ABProcessInstance\r\n    */\r\n   stateCompleted(instance) {\r\n      var myState = this.myState(instance);\r\n      myState.status = \"completed\";\r\n   }\r\n\r\n   /**\r\n    * stateUpdate()\r\n    * update my state values with the given values data\r\n    * @param {obj} instance  the current ABProcessInstance\r\n    * @param {obj} values    the new state values\r\n    */\r\n   stateUpdate(instance, values) {\r\n      values = values || {};\r\n      var myState = this.myState(instance);\r\n      for (var v in values) {\r\n         myState[v] = values[v];\r\n      }\r\n   }\r\n\r\n   /**\r\n    * wantToDoSomething()\r\n    * determine if this task still has something to do.\r\n    * @param {obj} instance  the instance data of the process we are working on\r\n    * @return {bool} true if there is still pending actions\r\n    */\r\n   wantToDoSomething(instance) {\r\n      var state = this.myState(instance);\r\n      if (state) {\r\n         return state.status != \"completed\" && state.status != \"error\";\r\n      } else {\r\n         // my state wasn't defined?\r\n         console.warn(\r\n            \"ABProcessTaskCore:wantToDoSomething(): called without having initialized our state first.\",\r\n            instance\r\n         );\r\n         // initialize our state and try again\r\n         this.initState(instance.context);\r\n         return this.wantToDoSomething(instance);\r\n      }\r\n   }\r\n\r\n   get startElements() {\r\n      let startElems =\r\n         this.process.elements(\r\n            (elem) => elem && elem.defaults && elem.defaults.category == \"start\"\r\n         ) || [];\r\n      return startElems;\r\n   }\r\n\r\n   get previousElements() {\r\n      return this.process.connectionPreviousTask(this);\r\n   }\r\n\r\n   get objectOfStartElement() {\r\n      const startElem = this.startElements[0];\r\n      if (!startElem) return null;\r\n\r\n      return this.AB.objectByID(startElem.objectID);\r\n   }\r\n\r\n   get objectOfPrevElement() {\r\n      let prevElem = this.previousElements[0];\r\n      if (!prevElem) return null;\r\n\r\n      let objectID;\r\n      switch (prevElem.type) {\r\n         case \"process.task.service.query\":\r\n            objectID = prevElem.qlObj ? prevElem.qlObj.objectID : null;\r\n            break;\r\n         case \"process.task.service.insertRecord\":\r\n         default:\r\n            objectID = prevElem.objectID;\r\n            break;\r\n      }\r\n\r\n      return this.AB.objectByID(objectID);\r\n   }\r\n};\r\n","const ABProcessElement = require(\"../../../platform/process/tasks/ABProcessElement.js\");\r\n\r\nvar ABProcessTaskEndDefaults = {\r\n   category: \"end\",\r\n   // category: {string} | null\r\n   // if this Element should show up on one of the popup replace menus, then\r\n   // specify one of the categories of elements it should be an option for.\r\n   // Available choices: [ \"start\", \"gateway\", \"task\", \"end\" ].\r\n   //\r\n   // if it shouldn't show up under the popup menu, then leave this null\r\n\r\n   fields: [],\r\n   // fields: {array}\r\n   // a list of internal setting values this Element tracks\r\n\r\n   icon: \"stop\", // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\r\n   // icon: {string}\r\n   // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\r\n\r\n   key: \"End\",\r\n   // key: {string}\r\n   // unique key to reference this specific Task\r\n};\r\n\r\nmodule.exports = class ABProcessTaskEndCore extends ABProcessElement {\r\n   constructor(attributes, process, AB) {\r\n      attributes.type = attributes.type || \"process.task.end\";\r\n      super(attributes, process, AB, ABProcessTaskEndDefaults);\r\n\r\n      // listen\r\n   }\r\n\r\n   // return the default values for this DataField\r\n   static defaults() {\r\n      return ABProcessTaskEndDefaults;\r\n   }\r\n\r\n   static DiagramReplace() {\r\n      return {\r\n         label: \"Terminate End Event\",\r\n         actionName: \"replace-with-terminate-end\",\r\n         className: \"bpmn-icon-end-event-terminate\",\r\n         target: {\r\n            type: \"bpmn:EndEvent\",\r\n            eventDefinitionType: \"bpmn:TerminateEventDefinition\",\r\n         },\r\n      };\r\n   }\r\n\r\n   /**\r\n    * do()\r\n    * this method actually performs the action for this task.\r\n    * @param {obj} instance  the instance data of the running process\r\n    * @return {Promise}\r\n    *      resolve(true/false) : true if the task is completed.\r\n    *                            false if task is still waiting\r\n    */\r\n   // do(instance) {\r\n   //     return new Promise((resolve, reject) => {\r\n   //         // An End Event doesn't perform any other actions\r\n   //         // than to signal it has successfully completed.\r\n   //         // But it provides no Additional Tasks to work on.\r\n   //         // for testing:\r\n   //         this.stateCompleted(instance);\r\n   //         this.log(instance, \"End Event Reached\");\r\n   //         resolve(true);\r\n   //     });\r\n   // }\r\n\r\n   /**\r\n    * initState()\r\n    * setup this task's initial state variables\r\n    * @param {obj} context  the context data of the process instance\r\n    * @param {obj} val  any values to override the default state\r\n    */\r\n   initState(context, val) {\r\n      var myDefaults = {\r\n         triggered: false,\r\n      };\r\n\r\n      super.initState(context, myDefaults, val);\r\n   }\r\n\r\n   /**\r\n    * nextTasks()\r\n    * return the next tasks to be run after this task is complete.\r\n    * @param {obj} instance  the instance data of the running process\r\n    * @return {Promise}\r\n    *      resolve([])\r\n    */\r\n   nextTasks(instance) {\r\n      // I'm an End Event.  There are no nextTasks()\r\n      return [];\r\n   }\r\n};\r\n","const ABProcessElement = require(\"../../../platform/process/tasks/ABProcessElement.js\");\r\n\r\nvar ABProcessGatewayExclusiveDefaults = {\r\n   category: \"gateway\",\r\n   // category: {string} | null\r\n   // if this Element should show up on one of the popup replace menus, then\r\n   // specify one of the categories of elements it should be an option for.\r\n   // Available choices: [ \"start\", \"gateway\", \"task\", \"end\" ].\r\n   //\r\n   // if it shouldn't show up under the popup menu, then leave this null\r\n\r\n   icon: \"check-circle\", // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\r\n   // icon: {string}\r\n   // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\r\n\r\n   instanceValues: [],\r\n   // instanceValues: {array}\r\n   // a list of values this element tracks as it is operating in a process.\r\n\r\n   key: \"GatewayExclusive\",\r\n   // key: {string}\r\n   // unique key to reference this specific Task\r\n\r\n   settings: [\"conditions\"],\r\n   // settings: {array}\r\n   // a list of internal setting values this Element tracks. These are the\r\n   // values set by the platform .propertiesStash()\r\n};\r\n\r\nmodule.exports = class ABProcessGatewayExclusiveCore extends ABProcessElement {\r\n   constructor(attributes, process, AB) {\r\n      attributes.type = attributes.type || \"process.gateway.exclusive\";\r\n      super(attributes, process, AB, ABProcessGatewayExclusiveDefaults);\r\n\r\n      // listen\r\n   }\r\n\r\n   // return the default values for this DataField\r\n   static defaults() {\r\n      return ABProcessGatewayExclusiveDefaults;\r\n   }\r\n\r\n   static DiagramReplace() {\r\n      return {\r\n         label: \"Exclusive Gateway\",\r\n         actionName: \"replace-with-exclusive-gateway\",\r\n         className: \"bpmn-icon-gateway-xor\",\r\n         target: {\r\n            type: \"bpmn:ExclusiveGateway\",\r\n         },\r\n      };\r\n   }\r\n\r\n   /*\r\n    fromValues(attributes) {\r\n        /*\r\n        {\r\n            id: uuid(),\r\n            name: 'name',\r\n            type: 'xxxxx',\r\n            json: \"{json}\"\r\n        }\r\n        * /\r\n        super.fromValues(attributes);\r\n\r\n        ABProcessGatewayExclusiveDefaults.fields.forEach((f) => {\r\n            this[f] = attributes[f];\r\n        });\r\n    }\r\n    */\r\n\r\n   /**\r\n    * @method toObj()\r\n    *\r\n    * properly compile the current state of this ABApplication instance\r\n    * into the values needed for saving to the DB.\r\n    *\r\n    * Most of the instance data is stored in .json field, so be sure to\r\n    * update that from all the current values of our child fields.\r\n    *\r\n    * @return {json}\r\n    */\r\n   /*\r\n    toObj() {\r\n        var data = super.toObj();\r\n\r\n        ABProcessGatewayExclusiveDefaults.fields.forEach((f) => {\r\n            data[f] = this[f];\r\n        });\r\n\r\n        return data;\r\n    }\r\n    */\r\n\r\n   ////\r\n   //// Process Instance Methods\r\n   ////\r\n\r\n   /**\r\n    * initState()\r\n    * setup this task's initial state variables\r\n    * @param {obj} context  the context data of the process instance\r\n    * @param {obj} val  any values to override the default state\r\n    */\r\n   /*\r\n    initState(context, val) {\r\n        var myDefaults = {\r\n            userFormID: null,\r\n            userFormResponse: null\r\n        };\r\n\r\n        super.initState(context, myDefaults, val);\r\n    }\r\n    */\r\n\r\n   /**\r\n    * processDataFields()\r\n    * return an array of avaiable data fields that this element\r\n    * can provide to other ProcessElements.\r\n    * Different Process Elements can make data available to other\r\n    * process Elements.\r\n    * @return {array} | null\r\n    */\r\n   /*\r\n    processDataFields() {\r\n        // in this Task, we can return the Response to the UserForm\r\n        return [\r\n            {\r\n                key: `${this.id}.userFormResponse`,\r\n                label: `${this.label}->Response`\r\n            }\r\n        ];\r\n    }\r\n    */\r\n\r\n   /**\r\n    * processData()\r\n    * return the current value requested for the given data key.\r\n    * @param {obj} instance\r\n    * @return {mixed} | null\r\n    */\r\n   /*\r\n    processData(instance, key) {\r\n        var parts = key.split(\".\");\r\n        if (parts[0] == this.id) {\r\n            var myState = this.myState(instance);\r\n            return myState[parts[1]];\r\n        }\r\n        return null;\r\n    }\r\n    */\r\n};\r\n","// import ABApplication from \"./ABApplication\"\r\n// const ABApplication = require(\"./ABApplication\"); // NOTE: change to require()\r\nconst ABProcessElement = require(\"../../../platform/process/tasks/ABProcessElement.js\");\r\n\r\nvar ABProcessTaskEmailDefaults = {\r\n   category: \"task\",\r\n   // category: {string} | null\r\n   // if this Element should show up on one of the popup replace menus, then\r\n   // specify one of the categories of elements it should be an option for.\r\n   // Available choices: [ \"start\", \"gateway\", \"task\", \"end\" ].\r\n   //\r\n   // if it shouldn't show up under the popup menu, then leave this null\r\n\r\n   fields: [\r\n      \"to\",\r\n      \"from\",\r\n      \"subject\",\r\n      \"message\",\r\n      \"toCustom\",\r\n      \"fromCustom\",\r\n      \"toUsers\",\r\n      \"fromUsers\",\r\n   ],\r\n   // fields: {array}\r\n   // a list of internal setting values this Element tracks\r\n\r\n   icon: \"email\", // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\r\n   // icon: {string}\r\n   // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\r\n\r\n   key: \"Email\",\r\n   // key: {string}\r\n   // unique key to reference this specific Task\r\n};\r\n\r\nmodule.exports = class ABProcessTaskEmailCore extends ABProcessElement {\r\n   constructor(attributes, process, AB) {\r\n      attributes.type = attributes.type || \"process.task.email\";\r\n      super(attributes, process, AB, ABProcessTaskEmailDefaults);\r\n\r\n      // listen\r\n   }\r\n\r\n   // return the default values for this DataField\r\n   static defaults() {\r\n      return ABProcessTaskEmailDefaults;\r\n   }\r\n\r\n   static DiagramReplace() {\r\n      return {\r\n         label: \"Send Task\",\r\n         actionName: \"replace-with-send-task\",\r\n         className: \"bpmn-icon-send\",\r\n         target: {\r\n            type: \"bpmn:SendTask\",\r\n         },\r\n      };\r\n   }\r\n\r\n   fromValues(attributes) {\r\n      /*\r\n        {\r\n            id: uuid(),\r\n            name: 'name',\r\n            type: 'xxxxx',\r\n            json: \"{json}\"\r\n        }\r\n        */\r\n      super.fromValues(attributes);\r\n\r\n      ABProcessTaskEmailDefaults.fields.forEach((f) => {\r\n         this[f] = attributes[f];\r\n      });\r\n   }\r\n\r\n   /**\r\n    * @method toObj()\r\n    *\r\n    * properly compile the current state of this ABApplication instance\r\n    * into the values needed for saving to the DB.\r\n    *\r\n    * Most of the instance data is stored in .json field, so be sure to\r\n    * update that from all the current values of our child fields.\r\n    *\r\n    * @return {json}\r\n    */\r\n   toObj() {\r\n      var data = super.toObj();\r\n\r\n      ABProcessTaskEmailDefaults.fields.forEach((f) => {\r\n         data[f] = this[f];\r\n      });\r\n\r\n      return data;\r\n   }\r\n\r\n   ////\r\n   //// Process Instance Methods\r\n   ////\r\n\r\n   /**\r\n    * do()\r\n    * this method actually performs the action for this task.\r\n    * @param {obj} instance  the instance data of the running process\r\n    * @return {Promise}\r\n    *      resolve(true/false) : true if the task is completed.\r\n    *                            false if task is still waiting\r\n    */\r\n   // do(instance) {\r\n   //     return new Promise((resolve, reject) => {\r\n   //         // for testing:\r\n   //         var myState = this.myState(instance);\r\n   //         myState.status = \"completed\";\r\n   //         this.log(instance, \"Email Sent successfully\");\r\n   //         resolve(true);\r\n   //     });\r\n   // }\r\n\r\n   /**\r\n    * initState()\r\n    * setup this task's initial state variables\r\n    * @param {obj} context  the context data of the process instance\r\n    * @param {obj} val  any values to override the default state\r\n    */\r\n   initState(context, val) {\r\n      var myDefaults = {\r\n         to: [],\r\n         from: [],\r\n         subject: this.subject,\r\n         message: this.message,\r\n      };\r\n\r\n      super.initState(context, myDefaults, val);\r\n   }\r\n};\r\n","const ABProcessElement = require(\"../../../platform/process/tasks/ABProcessElement.js\");\r\n\r\nvar AccountingBatchProcessingDefaults = {\r\n   category: null,\r\n   // category: {string} | null\r\n   // if this Element should show up on one of the popup replace menus, then\r\n   // specify one of the categories of elements it should be an option for.\r\n   // Available choices: [ \"start\", \"gateway\", \"task\", \"end\" ].\r\n   //\r\n   // if it shouldn't show up under the popup menu, then leave this null\r\n\r\n   icon: \"check-circle\", // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\r\n   // icon: {string}\r\n   // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\r\n\r\n   instanceValues: [],\r\n   // instanceValues: {array}\r\n   // a list of values this element tracks as it is operating in a process.\r\n\r\n   key: \"AccountingBatchProcessing\",\r\n   // key: {string}\r\n   // unique key to reference this specific Task\r\n\r\n   settings: [\r\n      \"objectBatch\",\r\n      \"processBatchValue\",\r\n      \"fieldBatchEntries\",\r\n      \"fieldBatchFinancialPeriod\",\r\n      \"objectJE\",\r\n      \"fieldJEAccount\",\r\n      \"fieldJERC\",\r\n      \"fieldJEStatus\",\r\n      \"fieldJEStatusComplete\",\r\n      \"objectBR\",\r\n      \"fieldBRFinancialPeriod\",\r\n      \"fieldBRAccount\",\r\n      \"fieldBRRC\",\r\n      \"fieldBREntries\",\r\n   ],\r\n   // settings: {array}\r\n   // a list of internal setting values this Element tracks. These are the\r\n   // values set by the platform .propertiesStash()\r\n};\r\n\r\nmodule.exports = class AccountingBatchProcessingCore extends ABProcessElement {\r\n   constructor(attributes, process, AB) {\r\n      attributes.type =\r\n         attributes.type || \"process.task.service.accounting.batchProcessing\";\r\n      super(attributes, process, AB, AccountingBatchProcessingDefaults);\r\n\r\n      // listen\r\n   }\r\n\r\n   // return the default values for this DataField\r\n   static defaults() {\r\n      return AccountingBatchProcessingDefaults;\r\n   }\r\n\r\n   static DiagramReplace() {\r\n      return null;\r\n   }\r\n\r\n   /*\r\n    fromValues(attributes) {\r\n        /*\r\n        {\r\n            id: uuid(),\r\n            name: 'name',\r\n            type: 'xxxxx',\r\n            json: \"{json}\"\r\n        }\r\n        * /\r\n        super.fromValues(attributes);\r\n\r\n        AccountingBatchProcessingDefaults.settings.forEach((f) => {\r\n            this[f] = attributes[f];\r\n        });\r\n    }\r\n    */\r\n\r\n   /**\r\n    * @method toObj()\r\n    *\r\n    * properly compile the current state of this ABApplication instance\r\n    * into the values needed for saving to the DB.\r\n    *\r\n    * Most of the instance data is stored in .json field, so be sure to\r\n    * update that from all the current values of our child fields.\r\n    *\r\n    * @return {json}\r\n    */\r\n   /*\r\n    toObj() {\r\n        var data = super.toObj();\r\n\r\n        AccountingBatchProcessingDefaults.settings.forEach((f) => {\r\n            data[f] = this[f];\r\n        });\r\n\r\n        return data;\r\n    }\r\n    */\r\n\r\n   ////\r\n   //// Process Instance Methods\r\n   ////\r\n\r\n   /**\r\n    * initState()\r\n    * setup this task's initial state variables\r\n    * @param {obj} context  the context data of the process instance\r\n    * @param {obj} val  any values to override the default state\r\n    */\r\n   /*\r\n    initState(context, val) {\r\n        var myDefaults = {\r\n            instanceVariable1: null,\r\n            instanceVariable2: null\r\n        };\r\n\r\n        super.initState(context, myDefaults, val);\r\n    }\r\n    */\r\n\r\n   /**\r\n    * processDataFields()\r\n    * return an array of avaiable data fields that this element\r\n    * can provide to other ProcessElements.\r\n    * Different Process Elements can make data available to other\r\n    * process Elements.\r\n    * @return {array} | null\r\n    */\r\n   /*\r\n    processDataFields() {\r\n        // in this Task, we can return the Response to the UserForm\r\n        return [\r\n            {\r\n                key: `${this.id}.[someInstanceVariableHere]`,\r\n                label: `${this.label}->Response`\r\n            }\r\n        ];\r\n    }\r\n    */\r\n\r\n   /**\r\n    * processData()\r\n    * return the current value requested for the given data key.\r\n    * @param {obj} instance\r\n    * @return {mixed} | null\r\n    */\r\n   /*\r\n    processData(instance, key) {\r\n        var parts = key.split(\".\");\r\n        if (parts[0] == this.id) {\r\n            var myState = this.myState(instance);\r\n            return myState[parts[1]];\r\n        }\r\n        return null;\r\n    }\r\n    */\r\n};\r\n","const ABProcessElement = require(\"../../../platform/process/tasks/ABProcessElement.js\");\r\n\r\nvar AccountingFPCloseDefaults = {\r\n   category: null,\r\n   // category: {string} | null\r\n   // if this Element should show up on one of the popup replace menus, then\r\n   // specify one of the categories of elements it should be an option for.\r\n   // Available choices: [ \"start\", \"gateway\", \"task\", \"end\" ].\r\n   //\r\n   // if it shouldn't show up under the popup menu, then leave this null\r\n\r\n   icon: \"check-circle\", // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\r\n   // icon: {string}\r\n   // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\r\n\r\n   instanceValues: [],\r\n   // instanceValues: {array}\r\n   // a list of values this element tracks as it is operating in a process.\r\n\r\n   key: \"AccountingFPClose\",\r\n   // key: {string}\r\n   // unique key to reference this specific Task\r\n\r\n   settings: [\r\n      \"processFPValue\",\r\n      \"objectFP\",\r\n      \"objectGL\",\r\n      \"objectAcc\",\r\n      \"fieldFPStart\",\r\n      \"fieldFPOpen\",\r\n      \"fieldFPStatus\",\r\n      \"fieldFPActive\",\r\n      \"fieldGLStarting\",\r\n      \"fieldGLRunning\",\r\n      \"fieldGLAccount\",\r\n      \"fieldGLRc\",\r\n      \"fieldGLDebit\",\r\n      \"fieldGLCredit\",\r\n      \"fieldAccType\",\r\n      \"fieldAccAsset\",\r\n      \"fieldAccExpense\",\r\n      \"fieldAccLiabilities\",\r\n      \"fieldAccEquity\",\r\n      \"fieldAccIncome\",\r\n   ],\r\n   // settings: {array}\r\n   // a list of internal setting values this Element tracks. These are the\r\n   // values set by the platform .propertiesStash()\r\n};\r\n\r\nmodule.exports = class AccountingFPCloseCore extends ABProcessElement {\r\n   constructor(attributes, process, AB) {\r\n      attributes.type =\r\n         attributes.type || \"process.task.service.accounting.fpClose\";\r\n      super(attributes, process, AB, AccountingFPCloseDefaults);\r\n\r\n      // listen\r\n   }\r\n\r\n   // return the default values for this DataField\r\n   static defaults() {\r\n      return AccountingFPCloseDefaults;\r\n   }\r\n\r\n   static DiagramReplace() {\r\n      return null;\r\n   }\r\n\r\n   /*\r\n    fromValues(attributes) {\r\n        /*\r\n        {\r\n            id: uuid(),\r\n            name: 'name',\r\n            type: 'xxxxx',\r\n            json: \"{json}\"\r\n        }\r\n        * /\r\n        super.fromValues(attributes);\r\n\r\n        AccountingFPCloseDefaults.settings.forEach((f) => {\r\n            this[f] = attributes[f];\r\n        });\r\n    }\r\n    */\r\n\r\n   /**\r\n    * @method toObj()\r\n    *\r\n    * properly compile the current state of this ABApplication instance\r\n    * into the values needed for saving to the DB.\r\n    *\r\n    * Most of the instance data is stored in .json field, so be sure to\r\n    * update that from all the current values of our child fields.\r\n    *\r\n    * @return {json}\r\n    */\r\n   /*\r\n    toObj() {\r\n        var data = super.toObj();\r\n\r\n        AccountingFPCloseDefaults.settings.forEach((f) => {\r\n            data[f] = this[f];\r\n        });\r\n\r\n        return data;\r\n    }\r\n    */\r\n\r\n   ////\r\n   //// Process Instance Methods\r\n   ////\r\n\r\n   /**\r\n    * initState()\r\n    * setup this task's initial state variables\r\n    * @param {obj} context  the context data of the process instance\r\n    * @param {obj} val  any values to override the default state\r\n    */\r\n   /*\r\n    initState(context, val) {\r\n        var myDefaults = {\r\n            instanceVariable1: null,\r\n            instanceVariable2: null\r\n        };\r\n\r\n        super.initState(context, myDefaults, val);\r\n    }\r\n    */\r\n\r\n   /**\r\n    * processDataFields()\r\n    * return an array of avaiable data fields that this element\r\n    * can provide to other ProcessElements.\r\n    * Different Process Elements can make data available to other\r\n    * process Elements.\r\n    * @return {array} | null\r\n    */\r\n   /*\r\n    processDataFields() {\r\n        // in this Task, we can return the Response to the UserForm\r\n        return [\r\n            {\r\n                key: `${this.id}.[someInstanceVariableHere]`,\r\n                label: `${this.label}->Response`\r\n            }\r\n        ];\r\n    }\r\n    */\r\n\r\n   /**\r\n    * processData()\r\n    * return the current value requested for the given data key.\r\n    * @param {obj} instance\r\n    * @return {mixed} | null\r\n    */\r\n   /*\r\n    processData(instance, key) {\r\n        var parts = key.split(\".\");\r\n        if (parts[0] == this.id) {\r\n            var myState = this.myState(instance);\r\n            return myState[parts[1]];\r\n        }\r\n        return null;\r\n    }\r\n    */\r\n};\r\n","const ABProcessElement = require(\"../../../platform/process/tasks/ABProcessElement.js\");\r\n\r\nvar AccountingFPYearCloseDefaults = {\r\n   category: null,\r\n   // category: {string} | null\r\n   // if this Element should show up on one of the popup replace menus, then\r\n   // specify one of the categories of elements it should be an option for.\r\n   // Available choices: [ \"start\", \"gateway\", \"task\", \"end\" ].\r\n   //\r\n   // if it shouldn't show up under the popup menu, then leave this null\r\n\r\n   icon: \"check-circle\", // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\r\n   // icon: {string}\r\n   // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\r\n\r\n   instanceValues: [],\r\n   // instanceValues: {array}\r\n   // a list of values this element tracks as it is operating in a process.\r\n\r\n   key: \"AccountingFPYearClose\",\r\n   // key: {string}\r\n   // unique key to reference this specific Task\r\n\r\n   settings: [\r\n      \"processFPYearValue\",\r\n      \"objectFPYear\",\r\n      \"objectFPMonth\",\r\n      \"objectGL\",\r\n      \"objectAccount\",\r\n      \"valueFundBalances\",\r\n      \"valueNetIncome\",\r\n      \"fieldFPYearStart\",\r\n      \"fieldFPYearEnd\",\r\n      \"fieldFPYearStatus\",\r\n      \"fieldFPYearActive\",\r\n      \"fieldFPMonthStart\",\r\n      \"fieldFPMonthEnd\",\r\n      \"fieldGLStartBalance\",\r\n      \"fieldGLRunningBalance\",\r\n      \"fieldGLrc\",\r\n      \"fieldAccNumber\",\r\n      \"fieldAccType\",\r\n      \"fieldAccTypeIncome\",\r\n      \"fieldAccTypeExpense\",\r\n      \"fieldAccTypeEquity\",\r\n   ],\r\n   // settings: {array}\r\n   // a list of internal setting values this Element tracks. These are the\r\n   // values set by the platform .propertiesStash()\r\n};\r\n\r\nmodule.exports = class AccountingFPYearCloseCore extends ABProcessElement {\r\n   constructor(attributes, process, AB) {\r\n      attributes.type =\r\n         attributes.type || \"process.task.service.accounting.fpYearClose\";\r\n      super(attributes, process, AB, AccountingFPYearCloseDefaults);\r\n\r\n      // listen\r\n   }\r\n\r\n   // return the default values for this DataField\r\n   static defaults() {\r\n      return AccountingFPYearCloseDefaults;\r\n   }\r\n\r\n   static DiagramReplace() {\r\n      return null;\r\n   }\r\n\r\n   /*\r\n    fromValues(attributes) {\r\n        /*\r\n        {\r\n            id: uuid(),\r\n            name: 'name',\r\n            type: 'xxxxx',\r\n            json: \"{json}\"\r\n        }\r\n        * /\r\n        super.fromValues(attributes);\r\n\r\n        AccountingFPCloseDefaults.settings.forEach((f) => {\r\n            this[f] = attributes[f];\r\n        });\r\n    }\r\n    */\r\n\r\n   /**\r\n    * @method toObj()\r\n    *\r\n    * properly compile the current state of this ABApplication instance\r\n    * into the values needed for saving to the DB.\r\n    *\r\n    * Most of the instance data is stored in .json field, so be sure to\r\n    * update that from all the current values of our child fields.\r\n    *\r\n    * @return {json}\r\n    */\r\n   /*\r\n    toObj() {\r\n        var data = super.toObj();\r\n\r\n        AccountingFPCloseDefaults.settings.forEach((f) => {\r\n            data[f] = this[f];\r\n        });\r\n\r\n        return data;\r\n    }\r\n    */\r\n\r\n   ////\r\n   //// Process Instance Methods\r\n   ////\r\n\r\n   /**\r\n    * initState()\r\n    * setup this task's initial state variables\r\n    * @param {obj} context  the context data of the process instance\r\n    * @param {obj} val  any values to override the default state\r\n    */\r\n   /*\r\n    initState(context, val) {\r\n        var myDefaults = {\r\n            instanceVariable1: null,\r\n            instanceVariable2: null\r\n        };\r\n\r\n        super.initState(context, myDefaults, val);\r\n    }\r\n    */\r\n\r\n   /**\r\n    * processDataFields()\r\n    * return an array of avaiable data fields that this element\r\n    * can provide to other ProcessElements.\r\n    * Different Process Elements can make data available to other\r\n    * process Elements.\r\n    * @return {array} | null\r\n    */\r\n   /*\r\n    processDataFields() {\r\n        // in this Task, we can return the Response to the UserForm\r\n        return [\r\n            {\r\n                key: `${this.id}.[someInstanceVariableHere]`,\r\n                label: `${this.label}->Response`\r\n            }\r\n        ];\r\n    }\r\n    */\r\n\r\n   /**\r\n    * processData()\r\n    * return the current value requested for the given data key.\r\n    * @param {obj} instance\r\n    * @return {mixed} | null\r\n    */\r\n   /*\r\n    processData(instance, key) {\r\n        var parts = key.split(\".\");\r\n        if (parts[0] == this.id) {\r\n            var myState = this.myState(instance);\r\n            return myState[parts[1]];\r\n        }\r\n        return null;\r\n    }\r\n    */\r\n};\r\n","const ABProcessElement = require(\"../../../platform/process/tasks/ABProcessElement.js\");\r\n\r\nlet AccountingJEArchiveDefaults = {\r\n   category: null,\r\n   // category: {string} | null\r\n   // if this Element should show up on one of the popup replace menus, then\r\n   // specify one of the categories of elements it should be an option for.\r\n   // Available choices: [ \"start\", \"gateway\", \"task\", \"end\" ].\r\n   //\r\n   // if it shouldn't show up under the popup menu, then leave this null\r\n\r\n   icon: \"archive\", // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\r\n   // icon: {string}\r\n   // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\r\n\r\n   instanceValues: [],\r\n   // instanceValues: {array}\r\n   // a list of values this element tracks as it is operating in a process.\r\n\r\n   key: \"AccountingJEArchive\",\r\n   // key: {string}\r\n   // unique key to reference this specific Task\r\n\r\n   settings: [\r\n      \"processBatchValue\",\r\n      \"objectBatch\",\r\n      \"objectBalance\",\r\n      \"objectJE\",\r\n      \"objectJEArchive\",\r\n\r\n      \"fieldBatchFiscalMonth\",\r\n      \"fieldJeAccount\",\r\n      \"fieldJeRC\",\r\n      \"fieldJeArchiveBalance\",\r\n      \"fieldBrFiscalMonth\",\r\n      \"fieldBrAccount\",\r\n      \"fieldBrRC\",\r\n      \"fieldsMatch\",\r\n   ],\r\n   // settings: {array}\r\n   // a list of internal setting values this Element tracks. These are the\r\n   // values set by the platform .propertiesStash()\r\n};\r\n\r\nmodule.exports = class AccountingJEArchiveCore extends ABProcessElement {\r\n   constructor(attributes, process, AB) {\r\n      attributes.type =\r\n         attributes.type || \"process.task.service.accounting.jeArchive\";\r\n      super(attributes, process, AB, AccountingJEArchiveDefaults);\r\n\r\n      // listen\r\n   }\r\n\r\n   // return the default values for this DataField\r\n   static defaults() {\r\n      return AccountingJEArchiveDefaults;\r\n   }\r\n\r\n   static DiagramReplace() {\r\n      return null;\r\n   }\r\n\r\n   /*\r\n    fromValues(attributes) {\r\n        /*\r\n        {\r\n            id: uuid(),\r\n            name: 'name',\r\n            type: 'xxxxx',\r\n            json: \"{json}\"\r\n        }\r\n        * /\r\n        super.fromValues(attributes);\r\n\r\n        AccountingBatchProcessingDefaults.settings.forEach((f) => {\r\n            this[f] = attributes[f];\r\n        });\r\n    }\r\n    */\r\n\r\n   /**\r\n    * @method toObj()\r\n    *\r\n    * properly compile the current state of this ABApplication instance\r\n    * into the values needed for saving to the DB.\r\n    *\r\n    * Most of the instance data is stored in .json field, so be sure to\r\n    * update that from all the current values of our child fields.\r\n    *\r\n    * @return {json}\r\n    */\r\n   /*\r\n    toObj() {\r\n        var data = super.toObj();\r\n\r\n        AccountingBatchProcessingDefaults.settings.forEach((f) => {\r\n            data[f] = this[f];\r\n        });\r\n\r\n        return data;\r\n    }\r\n    */\r\n\r\n   ////\r\n   //// Process Instance Methods\r\n   ////\r\n\r\n   /**\r\n    * initState()\r\n    * setup this task's initial state variables\r\n    * @param {obj} context  the context data of the process instance\r\n    * @param {obj} val  any values to override the default state\r\n    */\r\n   /*\r\n    initState(context, val) {\r\n        var myDefaults = {\r\n            instanceVariable1: null,\r\n            instanceVariable2: null\r\n        };\r\n\r\n        super.initState(context, myDefaults, val);\r\n    }\r\n    */\r\n\r\n   /**\r\n    * processDataFields()\r\n    * return an array of avaiable data fields that this element\r\n    * can provide to other ProcessElements.\r\n    * Different Process Elements can make data available to other\r\n    * process Elements.\r\n    * @return {array} | null\r\n    */\r\n   /*\r\n    processDataFields() {\r\n        // in this Task, we can return the Response to the UserForm\r\n        return [\r\n            {\r\n                key: `${this.id}.[someInstanceVariableHere]`,\r\n                label: `${this.label}->Response`\r\n            }\r\n        ];\r\n    }\r\n    */\r\n\r\n   /**\r\n    * processData()\r\n    * return the current value requested for the given data key.\r\n    * @param {obj} instance\r\n    * @return {mixed} | null\r\n    */\r\n   /*\r\n    processData(instance, key) {\r\n        var parts = key.split(\".\");\r\n        if (parts[0] == this.id) {\r\n            var myState = this.myState(instance);\r\n            return myState[parts[1]];\r\n        }\r\n        return null;\r\n    }\r\n    */\r\n};\r\n","const ABProcessElement = require(\"../../../platform/process/tasks/ABProcessElement.js\");\r\n\r\nlet CalculateDefaults = {\r\n   category: null,\r\n   // category: {string} | null\r\n   // if this Element should show up on one of the popup replace menus, then\r\n   // specify one of the categories of elements it should be an option for.\r\n   // Available choices: [ \"start\", \"gateway\", \"task\", \"end\" ].\r\n   //\r\n   // if it shouldn't show up under the popup menu, then leave this null\r\n\r\n   icon: \"calculator\", // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\r\n   // icon: {string}\r\n   // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\r\n\r\n   instanceValues: [],\r\n   // instanceValues: {array}\r\n   // a list of values this element tracks as it is operating in a process.\r\n\r\n   key: \"Calculate\",\r\n   // key: {string}\r\n   // unique key to reference this specific Task\r\n\r\n   settings: [\"formulaText\"]\r\n};\r\n\r\nmodule.exports = class CalculateTaskCore extends ABProcessElement {\r\n   constructor(attributes, process, application) {\r\n      attributes.type = attributes.type || \"process.task.service.calculate\";\r\n      super(attributes, process, application, CalculateDefaults);\r\n\r\n      // listen\r\n   }\r\n\r\n   // return the default values for this DataField\r\n   static defaults() {\r\n      return CalculateDefaults;\r\n   }\r\n\r\n   static DiagramReplace() {\r\n      return null;\r\n   }\r\n\r\n   /**\r\n    * processDataFields()\r\n    * return an array of avaiable data fields that this element\r\n    * can provide to other ProcessElements.\r\n    * Different Process Elements can make data available to other\r\n    * process Elements.\r\n    * @return {array} | null\r\n    */\r\n   processDataFields() {\r\n      return {\r\n         key: `${this.id}.value`,\r\n         label: `${this.label}->Value`\r\n      };\r\n   }\r\n};\r\n","/**\r\n * ABProcessTaskServiceCore\r\n *\r\n * This defines the base Service Task element that can be placed on a BPMN\r\n * diagram.  In our system, we will let the designer choose a sub class\r\n * to make active for this element.\r\n *\r\n * Currently a ServiceTask performs a dedicated operation on the server.\r\n *  - performing a query, looking up data, etc...\r\n *\r\n */\r\nconst ABProcessElement = require(\"../../../platform/process/tasks/ABProcessElement.js\");\r\n\r\nvar ABProcessTaskServiceDefaults = {\r\n   category: \"task\",\r\n   // category: {string} | null\r\n   // if this Element should show up on one of the popup replace menus, then\r\n   // specify one of the categories of elements it should be an option for.\r\n   // Available choices: [ \"start\", \"gateway\", \"task\", \"end\" ].\r\n   //\r\n   // if it shouldn't show up under the popup menu, then leave this null\r\n\r\n   icon: \"check-circle\", // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\r\n   // icon: {string}\r\n   // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\r\n\r\n   instanceValues: [],\r\n   // instanceValues: {array}\r\n   // a list of values this element tracks as it is operating in a process.\r\n\r\n   key: \"TaskService\",\r\n   // key: {string}\r\n   // unique key to reference this specific Task\r\n\r\n   settings: [],\r\n   // settings: {array}\r\n   // a list of internal setting values this Element tracks. These are the\r\n   // values set by the platform .propertiesStash()\r\n};\r\n\r\nmodule.exports = class ABProcessTaskServiceCore extends ABProcessElement {\r\n   constructor(attributes, process, AB) {\r\n      attributes.type = attributes.type || \"process.task.service\";\r\n      super(attributes, process, AB, ABProcessTaskServiceDefaults);\r\n\r\n      // listen\r\n   }\r\n\r\n   // return the default values for this DataField\r\n   static defaults() {\r\n      return ABProcessTaskServiceDefaults;\r\n   }\r\n\r\n   static DiagramReplace() {\r\n      return {\r\n         label: \"Service Task\",\r\n         actionName: \"replace-with-service-task\",\r\n         className: \"bpmn-icon-service\",\r\n         target: {\r\n            type: \"bpmn:ServiceTask\",\r\n         },\r\n      };\r\n   }\r\n\r\n   /*\r\n    fromValues(attributes) {\r\n        /*\r\n        {\r\n            id: uuid(),\r\n            name: 'name',\r\n            type: 'xxxxx',\r\n            json: \"{json}\"\r\n        }\r\n        * /\r\n        super.fromValues(attributes);\r\n\r\n        ABProcessTaskServiceDefaults.fields.forEach((f) => {\r\n            this[f] = attributes[f];\r\n        });\r\n    }\r\n    */\r\n\r\n   /**\r\n    * @method toObj()\r\n    *\r\n    * properly compile the current state of this ABApplication instance\r\n    * into the values needed for saving to the DB.\r\n    *\r\n    * Most of the instance data is stored in .json field, so be sure to\r\n    * update that from all the current values of our child fields.\r\n    *\r\n    * @return {json}\r\n    */\r\n   /*\r\n    toObj() {\r\n        var data = super.toObj();\r\n\r\n        ABProcessTaskServiceDefaults.fields.forEach((f) => {\r\n            data[f] = this[f];\r\n        });\r\n\r\n        return data;\r\n    }\r\n    */\r\n\r\n   ////\r\n   //// Process Instance Methods\r\n   ////\r\n\r\n   /**\r\n    * initState()\r\n    * setup this task's initial state variables\r\n    * @param {obj} context  the context data of the process instance\r\n    * @param {obj} val  any values to override the default state\r\n    */\r\n   /*\r\n    initState(context, val) {\r\n        var myDefaults = {\r\n            userFormID: null,\r\n            userFormResponse: null\r\n        };\r\n\r\n        super.initState(context, myDefaults, val);\r\n    }\r\n    */\r\n\r\n   /**\r\n    * processDataFields()\r\n    * return an array of avaiable data fields that this element\r\n    * can provide to other ProcessElements.\r\n    * Different Process Elements can make data available to other\r\n    * process Elements.\r\n    * @return {array} | null\r\n    */\r\n   /*\r\n    processDataFields() {\r\n        // in this Task, we can return the Response to the UserForm\r\n        return [\r\n            {\r\n                key: `${this.id}.userFormResponse`,\r\n                label: `${this.label}->Response`\r\n            }\r\n        ];\r\n    }\r\n    */\r\n\r\n   /**\r\n    * processData()\r\n    * return the current value requested for the given data key.\r\n    * @param {obj} instance\r\n    * @return {mixed} | null\r\n    */\r\n   /*\r\n    processData(instance, key) {\r\n        var parts = key.split(\".\");\r\n        if (parts[0] == this.id) {\r\n            var myState = this.myState(instance);\r\n            return myState[parts[1]];\r\n        }\r\n        return null;\r\n    }\r\n    */\r\n};\r\n","// import ABApplication from \"./ABApplication\"\r\n// const ABApplication = require(\"./ABApplication\"); // NOTE: change to require()\r\nconst ABProcessElement = require(\"../../../platform/process/tasks/ABProcessElement.js\");\r\n\r\nconst ABProcessTaskGetResetPasswordUrlDefaults = {\r\n   category: null,\r\n   // category: {string} | null\r\n   // if this Element should show up on one of the popup replace menus, then\r\n   // specify one of the categories of elements it should be an option for.\r\n   // Available choices: [ \"start\", \"gateway\", \"task\", \"end\" ].\r\n   //\r\n   // if it shouldn't show up under the popup menu, then leave this null\r\n\r\n   icon: \"plus-circle\", // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\r\n   // icon: {string}\r\n   // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\r\n\r\n   instanceValues: [],\r\n   // instanceValues: {array}\r\n   // a list of values this element tracks as it is operating in a process.\r\n\r\n   key: \"GetResetPasswordUrl\",\r\n   // key: {string}\r\n   // unique key to reference this specific Task\r\n\r\n   settings: [\"email\"],\r\n   // settings: {array}\r\n   // a list of internal setting values this Element tracks. These are the\r\n   // values set by the platform .propertiesStash()\r\n};\r\n\r\nmodule.exports = class ABProcessTaskGetResetPasswordUrlCore extends (\r\n   ABProcessElement\r\n) {\r\n   constructor(attributes, process, AB) {\r\n      attributes.type =\r\n         attributes.type || \"process.task.service.getResetPasswordUrl\";\r\n      super(attributes, process, AB, ABProcessTaskGetResetPasswordUrlDefaults);\r\n\r\n      // listen\r\n   }\r\n\r\n   // return the default values for this DataField\r\n   static defaults() {\r\n      return ABProcessTaskGetResetPasswordUrlDefaults;\r\n   }\r\n\r\n   static DiagramReplace() {\r\n      return null;\r\n   }\r\n\r\n   /**\r\n    * processDataFields()\r\n    * return an array of avaiable data fields that this element\r\n    * can provide to other ProcessElements.\r\n    * Different Process Elements can make data available to other\r\n    * process Elements.\r\n    * @return {array} | null\r\n    */\r\n   processDataFields() {\r\n      return {\r\n         key: `${this.id}.url`,\r\n         label: `${this.label}->URL`,\r\n      };\r\n   }\r\n};\r\n","const ABProcessElement = require(\"../../../platform/process/tasks/ABProcessElement.js\");\r\n\r\nlet InsertRecordDefaults = {\r\n   category: null,\r\n   // category: {string} | null\r\n   // if this Element should show up on one of the popup replace menus, then\r\n   // specify one of the categories of elements it should be an option for.\r\n   // Available choices: [ \"start\", \"gateway\", \"task\", \"end\" ].\r\n   //\r\n   // if it shouldn't show up under the popup menu, then leave this null\r\n\r\n   icon: \"plus-circle\", // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\r\n   // icon: {string}\r\n   // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\r\n\r\n   instanceValues: [],\r\n   // instanceValues: {array}\r\n   // a list of values this element tracks as it is operating in a process.\r\n\r\n   key: \"InsertRecord\",\r\n   // key: {string}\r\n   // unique key to reference this specific Task\r\n\r\n   settings: [\r\n      \"objectID\",\r\n      \"fieldValues\",\r\n      \"isRepeat\",\r\n      \"repeatMode\",\r\n      \"repeatColumn\",\r\n   ],\r\n};\r\n\r\nmodule.exports = class InsertRecordCore extends ABProcessElement {\r\n   constructor(attributes, process, AB) {\r\n      attributes.type = attributes.type || \"process.task.service.insertRecord\";\r\n      super(attributes, process, AB, InsertRecordDefaults);\r\n\r\n      // listen\r\n   }\r\n\r\n   // return the default values for this DataField\r\n   static defaults() {\r\n      return InsertRecordDefaults;\r\n   }\r\n\r\n   static DiagramReplace() {\r\n      return null;\r\n   }\r\n\r\n   fromValues(attributes) {\r\n      super.fromValues(attributes);\r\n\r\n      this.isRepeat = JSON.parse(attributes.isRepeat || false);\r\n   }\r\n\r\n   get startElement() {\r\n      let startElem = this.process.elements(\r\n         (elem) => elem && elem.defaults && elem.defaults.category == \"start\"\r\n      )[0];\r\n      return startElem;\r\n   }\r\n\r\n   get previousElement() {\r\n      return this.process.connectionPreviousTask(this)[0];\r\n   }\r\n\r\n   get objectOfStartElement() {\r\n      let startElem = this.startElement;\r\n      if (!startElem) return null;\r\n\r\n      let startElemObj = this.AB.objectByID(startElem.objectID);\r\n      return startElemObj;\r\n   }\r\n\r\n   get objectOfPrevElement() {\r\n      let prevElem = this.previousElement;\r\n      if (!prevElem) return null;\r\n\r\n      let objectID;\r\n      switch (prevElem.type) {\r\n         case \"process.task.service.query\":\r\n            objectID = prevElem.qlObj ? prevElem.qlObj.objectID : null;\r\n            break;\r\n         case \"process.task.service.insertRecord\":\r\n         default:\r\n            objectID = prevElem.objectID;\r\n            break;\r\n      }\r\n\r\n      return this.AB.objectByID(objectID);\r\n   }\r\n\r\n   get fieldRepeat() {\r\n      let obj = this.objectOfStartElement;\r\n      if (!obj) return null;\r\n\r\n      return obj.fields((f) => f.id == this.repeatColumn)[0];\r\n   }\r\n\r\n   /*\r\n     fromValues(attributes) {\r\n         /*\r\n         {\r\n             id: uuid(),\r\n             name: 'name',\r\n             type: 'xxxxx',\r\n             json: \"{json}\"\r\n         }\r\n         * /\r\n         super.fromValues(attributes);\r\n \r\n         AccountingBatchProcessingDefaults.settings.forEach((f) => {\r\n             this[f] = attributes[f];\r\n         });\r\n     }\r\n     */\r\n\r\n   /**\r\n    * @method toObj()\r\n    *\r\n    * properly compile the current state of this ABApplication instance\r\n    * into the values needed for saving to the DB.\r\n    *\r\n    * Most of the instance data is stored in .json field, so be sure to\r\n    * update that from all the current values of our child fields.\r\n    *\r\n    * @return {json}\r\n    */\r\n   /*\r\n     toObj() {\r\n         var data = super.toObj();\r\n \r\n         AccountingBatchProcessingDefaults.settings.forEach((f) => {\r\n             data[f] = this[f];\r\n         });\r\n \r\n         return data;\r\n     }\r\n     */\r\n\r\n   ////\r\n   //// Process Instance Methods\r\n   ////\r\n\r\n   /**\r\n    * initState()\r\n    * setup this task's initial state variables\r\n    * @param {obj} context  the context data of the process instance\r\n    * @param {obj} val  any values to override the default state\r\n    */\r\n   /*\r\n     initState(context, val) {\r\n         var myDefaults = {\r\n             instanceVariable1: null,\r\n             instanceVariable2: null\r\n         };\r\n \r\n         super.initState(context, myDefaults, val);\r\n     }\r\n     */\r\n\r\n   /**\r\n    * processDataFields()\r\n    * return an array of avaiable data fields that this element\r\n    * can provide to other ProcessElements.\r\n    * Different Process Elements can make data available to other\r\n    * process Elements.\r\n    * @return {array} | null\r\n    */\r\n   /*\r\n     processDataFields() {\r\n         // in this Task, we can return the Response to the UserForm\r\n         return [\r\n             {\r\n                 key: `${this.id}.[someInstanceVariableHere]`,\r\n                 label: `${this.label}->Response`\r\n             }\r\n         ];\r\n     }\r\n     */\r\n\r\n   /**\r\n    * processData()\r\n    * return the current value requested for the given data key.\r\n    * @param {obj} instance\r\n    * @return {mixed} | null\r\n    */\r\n   /*\r\n     processData(instance, key) {\r\n         var parts = key.split(\".\");\r\n         if (parts[0] == this.id) {\r\n             var myState = this.myState(instance);\r\n             return myState[parts[1]];\r\n         }\r\n         return null;\r\n     }\r\n     */\r\n};\r\n","const ABProcessElement = require(\"../../../platform/process/tasks/ABProcessElement.js\");\r\n\r\nconst ABQLManager = require(\"../../../platform/ql/ABQLManager.js\");\r\n\r\nvar ABProcessTaskServiceQueryDefaults = {\r\n   category: null,\r\n   // category: {string} | null\r\n   // if this Element should show up on one of the popup replace menus, then\r\n   // specify one of the categories of elements it should be an option for.\r\n   // Available choices: [ \"start\", \"gateway\", \"task\", \"end\" ].\r\n   //\r\n   // if it shouldn't show up under the popup menu, then leave this null\r\n\r\n   icon: \"check-circle\", // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\r\n   // icon: {string}\r\n   // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\r\n\r\n   instanceValues: [],\r\n   // instanceValues: {array}\r\n   // a list of values this element tracks as it is operating in a process.\r\n\r\n   key: \"TaskServiceQuery\",\r\n   // key: {string}\r\n   // unique key to reference this specific Task\r\n\r\n   settings: [\"qlObj\"],\r\n   // settings: {array}\r\n   // a list of internal setting values this Element tracks. These are the\r\n   // values set by the platform .propertiesStash()\r\n};\r\n\r\nmodule.exports = class ABProcessTaskServiceQueryCore extends ABProcessElement {\r\n   constructor(attributes, process, AB) {\r\n      attributes.type = attributes.type || \"process.task.service.query\";\r\n      super(attributes, process, AB, ABProcessTaskServiceQueryDefaults);\r\n\r\n      // listen\r\n   }\r\n\r\n   // return the default values for this DataField\r\n   static defaults() {\r\n      return ABProcessTaskServiceQueryDefaults;\r\n   }\r\n\r\n   static DiagramReplace() {\r\n      return null;\r\n   }\r\n\r\n   fromValues(attributes) {\r\n      super.fromValues(attributes);\r\n\r\n      // Before we make instances of qlObj:\r\n      this._datasources = [];\r\n\r\n      // comvert our qlObj into an ABQLxxx instance.\r\n      if (this.qlObj) {\r\n         this.qlObj = ABQLManager.fromAttributes(this.qlObj, this, this.AB);\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method toObj()\r\n    * properly compile the current state of this object instance\r\n    * into the values needed for saving to the DB.\r\n    * @return {json}\r\n    */\r\n   toObj() {\r\n      var data = super.toObj();\r\n\r\n      // convert qlObj into obj format:\r\n      if (this.qlObj) {\r\n         data.qlObj = this.qlObj.toObj();\r\n      }\r\n\r\n      return data;\r\n   }\r\n\r\n   registerDatasource(obj) {\r\n      this._datasources.push(obj);\r\n   }\r\n\r\n   ////\r\n   //// Process Instance Methods\r\n   ////\r\n\r\n   /**\r\n    * initState()\r\n    * setup this task's initial state variables\r\n    * @param {obj} context  the context data of the process instance\r\n    * @param {obj} val  any values to override the default state\r\n    */\r\n   /*\r\n    initState(context, val) {\r\n        var myDefaults = {\r\n            instanceVariable1: null,\r\n            instanceVariable2: null\r\n        };\r\n\r\n        super.initState(context, myDefaults, val);\r\n    }\r\n    */\r\n\r\n   /**\r\n    * processDataFields()\r\n    * return an array of avaiable data fields that this element\r\n    * can provide to other ProcessElements.\r\n    * Different Process Elements can make data available to other\r\n    * process Elements.\r\n    * @return {array} | null\r\n    */\r\n   processDataFields() {\r\n      // in this Task, we can return the Response to the UserForm\r\n      var fields = null;\r\n      if (this._datasources.length > 0) {\r\n         fields = [];\r\n         this._datasources.forEach((s) => {\r\n            var param = s.processDataField(this.id, this.label);\r\n            if (param) {\r\n               fields.push(param);\r\n            }\r\n         });\r\n      }\r\n      return fields;\r\n   }\r\n\r\n   /**\r\n    * processData()\r\n    * return the current value requested for the given data key.\r\n    * @param {obj} instance\r\n    * @return {mixed} | null\r\n    */\r\n   processData(instance, key) {\r\n      var parts = key.split(\".\");\r\n      if (parts[0] == this.id) {\r\n         var myState = this.myState(instance);\r\n         return myState[parts[1]];\r\n      }\r\n      return null;\r\n   }\r\n};\r\n","const ABProcessElement = require(\"../../../platform/process/tasks/ABProcessElement.js\");\r\n\r\nlet SubProcessDefaults = {\r\n   category: \"task\",\r\n   // category: {string} | null\r\n   // if this Element should show up on one of the popup replace menus, then\r\n   // specify one of the categories of elements it should be an option for.\r\n   // Available choices: [ \"start\", \"gateway\", \"task\", \"end\" ].\r\n   //\r\n   // if it shouldn't show up under the popup menu, then leave this null\r\n\r\n   icon: \"object-group\", // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\r\n   // icon: {string}\r\n   // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\r\n\r\n   instanceValues: [],\r\n   // instanceValues: {array}\r\n   // a list of values this element tracks as it is operating in a process.\r\n\r\n   key: \"SubProcess\",\r\n   // key: {string}\r\n   // unique key to reference this specific Task\r\n\r\n   settings: [\r\n      \"isEnable\",\r\n      \"parameterId\",\r\n      \"connectionAttrs\",\r\n      \"elementIDs\",\r\n      \"loopType\",\r\n   ],\r\n};\r\n\r\nmodule.exports = class SubProcessCore extends ABProcessElement {\r\n   constructor(attributes, process, AB) {\r\n      attributes.type = attributes.type || \"process.task.service.subProcess\";\r\n      super(attributes, process, AB, SubProcessDefaults);\r\n\r\n      // listen\r\n   }\r\n\r\n   // return the default values for this DataField\r\n   static defaults() {\r\n      return SubProcessDefaults;\r\n   }\r\n\r\n   static DiagramReplace() {\r\n      // taken from \"bpmn-js/lib/features/replace/ReplaceOptions\"\r\n      return {\r\n         label: \"Sub Process\",\r\n         actionName: \"replace-with-subprocess\",\r\n         className: \"bpmn-icon-subprocess-expanded\",\r\n         target: {\r\n            type: \"bpmn:SubProcess\",\r\n            isExpanded: true,\r\n         },\r\n      };\r\n   }\r\n\r\n   fromValues(attributes) {\r\n      super.fromValues(attributes);\r\n\r\n      // Convert string to boolean\r\n      this.isEnable = this.isEnable == null ? true : JSON.parse(this.isEnable);\r\n\r\n      this._elements = {};\r\n      (attributes.elementIDs || []).forEach((eID) => {\r\n         let ele = this.AB.processElementNew(eID, this);\r\n         if (ele) {\r\n            this._elements[eID] = ele;\r\n         }\r\n      });\r\n\r\n      this._connections = attributes.connectionAttrs || {};\r\n   }\r\n\r\n   /**\r\n    * @method toObj()\r\n    *\r\n    * properly compile the current state of this ABApplication instance\r\n    * into the values needed for saving to the DB.\r\n    *\r\n    * Most of the instance data is stored in .json field, so be sure to\r\n    * update that from all the current values of our child fields.\r\n    *\r\n    * @return {json}\r\n    */\r\n   toObj() {\r\n      let data = super.toObj();\r\n\r\n      data.elementIDs = [];\r\n      for (let e in this._elements) {\r\n         data.elementIDs.push(this._elements[e].id);\r\n      }\r\n\r\n      data.connectionAttrs = this._connections;\r\n\r\n      return data;\r\n   }\r\n\r\n   /**\r\n    * @method processDataFields()\r\n    * return an array of avaiable data fields that this element\r\n    * can provide to other ProcessElements.\r\n    * Different Process Elements can make data available to other\r\n    * process Elements.\r\n    * @param {ABProcessElement} currElement\r\n    *        the ABProcessElement that is requesting the data.\r\n    * @return {array} | null\r\n    */\r\n   processDataFields(currElement) {\r\n      if (this.parameterId == null) return [];\r\n\r\n      let dataFieldOpt = (this.process.processDataFields(this) || []).filter(\r\n         (opt) => opt.key == this.parameterId\r\n      )[0];\r\n      if (dataFieldOpt == null) return [];\r\n\r\n      let result = [];\r\n\r\n      // Connect field type\r\n      if (\r\n         dataFieldOpt.field &&\r\n         dataFieldOpt.field.key == \"connectObject\" &&\r\n         dataFieldOpt.field.datasourceLink &&\r\n         dataFieldOpt.field.datasourceLink.fields\r\n      ) {\r\n         result.push({\r\n            key: `${this.id}.uuid.subProcess`,\r\n            label: `${this.label}->Repeat Data.ID`,\r\n            object: dataFieldOpt.field.datasourceLink,\r\n         });\r\n\r\n         dataFieldOpt.field.datasourceLink.fields().forEach((f) => {\r\n            result.push({\r\n               key: `${this.id}.${f.id}.subProcess`,\r\n               label: `${this.label}->Repeat Data.${f.label}`,\r\n               field: f,\r\n               object: f.object,\r\n            });\r\n         });\r\n      }\r\n      // Other field types\r\n      else {\r\n         result.push({\r\n            key: dataFieldOpt.field\r\n               ? `${this.id}.${dataFieldOpt.field.id}.subProcess`\r\n               : `${this.id}.subProcess`,\r\n            label: `${this.label}->Repeat Data`,\r\n            field: dataFieldOpt.field,\r\n            object: dataFieldOpt.object,\r\n         });\r\n      }\r\n\r\n      let previousFields = this.process.processDataFields.call(\r\n         this,\r\n         currElement\r\n      );\r\n      if (previousFields && previousFields.length > 0) {\r\n         result = result.concat(previousFields);\r\n      }\r\n\r\n      return result;\r\n   }\r\n\r\n   /**\r\n    * @method processData()\r\n    * return an array of avaiable ABObjects that are represented\r\n    * by the data previous ProcessElements are working with.\r\n    * @param {ABProcessElement} currElement\r\n    *        the ABProcessElement that is requesting the data.\r\n    * @return {array} | null\r\n    */\r\n   processData(currElement, params) {\r\n      let instance = params[0];\r\n      let key = params[1];\r\n      let data;\r\n\r\n      if (instance && key && key.startsWith && key.startsWith(this.id)) {\r\n         let fieldId = key.split(\".\")[2];\r\n         let myState = this.myState(instance);\r\n         let stateData = myState ? myState.data : null;\r\n         data = stateData;\r\n\r\n         if (stateData && fieldId) {\r\n            let dataFieldOpt = (\r\n               this.process.processDataFields(this) || []\r\n            ).filter((opt) => opt.key == this.parameterId)[0];\r\n\r\n            if (\r\n               dataFieldOpt &&\r\n               dataFieldOpt.field &&\r\n               dataFieldOpt.field.key == \"connectObject\"\r\n            ) {\r\n               if (!Array.isArray(stateData)) stateData = [stateData];\r\n\r\n               // Extract data\r\n               data = stateData.map((item) => {\r\n                  if (fieldId == \"uuid\" || fieldId == \"id\") {\r\n                     return item.uuid || item.id;\r\n                  } else if (dataFieldOpt.field.datasourceLink) {\r\n                     let returnField = dataFieldOpt.field.datasourceLink.fields(\r\n                        (f) => f.id == fieldId\r\n                     )[0];\r\n                     if (returnField) return item[returnField.columnName];\r\n                     else return item;\r\n                  }\r\n               });\r\n            }\r\n         }\r\n      }\r\n\r\n      if (data == null)\r\n         data = this.process.processData.call(this, currElement, params);\r\n\r\n      if (data == null) data = this.process.processData(this, params);\r\n\r\n      return data;\r\n   }\r\n\r\n   //\r\n   // Diagram Elements\r\n   //\r\n\r\n   /**\r\n    * @method connections()\r\n    * return an array of connections that describe the relationships between\r\n    * our process elements.\r\n    * @param {fn} fn an iterator that returns true if the provided element\r\n    *                should be returned.\r\n    * @return [{SimpleConnectionObj}]\r\n    */\r\n   connections(fn) {\r\n      return this.process.connections.call(this, fn);\r\n   }\r\n\r\n   /**\r\n    * @method connectionForDiagramID()\r\n    * return the connection for the given diagram id\r\n    * @param {string} dID\r\n    *        the bpmn:Element diagram id\r\n    */\r\n   connectionForDiagramID(dID) {\r\n      if (!dID) return;\r\n\r\n      return this.process.connectionForDiagramID.call(this, dID);\r\n   }\r\n\r\n   /**\r\n    * @method connectionsIncoming()\r\n    * return the connections that are entering this Element\r\n    * @param {string} dID\r\n    *        the bpmn:Element diagram id\r\n    */\r\n   connectionsIncoming(dID) {\r\n      if (!dID) return;\r\n\r\n      return this.process.connectionsIncoming.call(this, dID);\r\n   }\r\n\r\n   /**\r\n    * @method connectionsOutgoing()\r\n    * return the connections that are leaving this Element\r\n    * @param {string} dID\r\n    *        the bpmn:Element diagram id\r\n    */\r\n   connectionsOutgoing(dID) {\r\n      if (!dID) return;\r\n\r\n      return this.process.connectionsOutgoing.call(this, dID);\r\n   }\r\n\r\n   /**\r\n    * @method connectionRemove()\r\n    * remove the connection info for the given bpmn:element\r\n    * @param {BMPNDiagramOBJ} element\r\n    *        the {element} returned from the BPMN.io modeling library event.\r\n    */\r\n   connectionRemove(element) {\r\n      if (!element) return;\r\n\r\n      this.process.connectionRemove.call(this, element);\r\n   }\r\n\r\n   /**\r\n    * @method connectionSimplyElement()\r\n    * given a BPMN diagram element, return a simplified object that describes\r\n    * the connection between two elements.\r\n    * @param {BMPNDiagramOBJ} element\r\n    *        the {element} returned from the BPMN.io modeling library event.\r\n    * @return {SimpleConnectionObj}\r\n    *        .id : {string} diagram id of the connection element\r\n    *        .type : {string} the type of connection\r\n    *        .from : {string} the diagram id of the source element\r\n    *        .to : {string} the diagram id of the dest element\r\n    */\r\n   connectionSimplyElement(element) {\r\n      if (!element) return;\r\n\r\n      return this.process.connectionSimplyElement.call(this, element);\r\n   }\r\n\r\n   /**\r\n    * @method connectionUpsert()\r\n    * add or update the connection information for the given bpmn:element\r\n    * @param {BMPNDiagramOBJ} element\r\n    *        the {element} returned from the BPMN.io modeling library event.\r\n    */\r\n   connectionUpsert(element) {\r\n      if (!element) return;\r\n\r\n      this.process.connectionUpsert.call(this, element);\r\n   }\r\n\r\n   /**\r\n    * @method connectionPreviousTask()\r\n    * return the ABProcessElement(s) that was a previous Element\r\n    * (eg connects to) this element.\r\n    * @param {ABProcessElement} currElement\r\n    * @return {array}\r\n    */\r\n   connectionPreviousTask(currElement) {\r\n      if (!currElement) return;\r\n\r\n      return this.process.connectionPreviousTask.call(this, currElement);\r\n   }\r\n\r\n   /**\r\n    * @method elements()\r\n    * return an array of elements that match the given filter (or all elements\r\n    * if no filter is provided).\r\n    * @param {fn} fn an iterator that returns true if the provided element\r\n    *                should be returned.\r\n    * @return {[ABProcessTask, ABProcessParticipant, etc...]}\r\n    */\r\n   elements(fn = () => true) {\r\n      return this.process.elements.call(this, fn);\r\n   }\r\n\r\n   /**\r\n    * @method elementAdd()\r\n    * insert an element to be tracked by this process.\r\n    * @param {ABProcessElement} element\r\n    *        the full instance of an ABProcessElement to track.\r\n    */\r\n   elementAdd(element) {\r\n      if (!element) return;\r\n\r\n      this.process.elementAdd.call(this, element);\r\n   }\r\n\r\n   /**\r\n    * @method elementForDiagramID()\r\n    * return the object that is tied to the given xml diagram ID.\r\n    * @param {string} dID the diagram ID\r\n    * @return {ABProcess[OBJ]}\r\n    */\r\n   elementForDiagramID(dID) {\r\n      if (!dID) return null;\r\n\r\n      return this.process.elementForDiagramID.call(this, dID);\r\n   }\r\n\r\n   /**\r\n    * @method elementRemove()\r\n    * remove an element from being tracked by this process.\r\n    * @param {obj|ABProcessElement} def\r\n    *        a definition of, or full Object instance of the ABProcessElement\r\n    *        to remove.\r\n    */\r\n   elementRemove(def) {\r\n      if (!def) return;\r\n\r\n      this.process.elementRemove.call(this, def);\r\n   }\r\n};\r\n","const ABProcessElement = require(\"../../../platform/process/tasks/ABProcessElement.js\");\r\n\r\nconst ABFieldList = require(\"../../../platform/dataFields/ABFieldList.js\");\r\n\r\nvar ABProcessTaskApprovalDefaults = {\r\n   category: null,\r\n   // category: {string} | null\r\n   // if this Element should show up on one of the popup replace menus, then\r\n   // specify one of the categories of elements it should be an option for.\r\n   // Available choices: [ \"start\", \"gateway\", \"task\", \"end\" ].\r\n   //\r\n   // if it shouldn't show up under the popup menu, then leave this null\r\n\r\n   icon: \"check-circle\", // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\r\n   // icon: {string}\r\n   // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\r\n\r\n   instanceValues: [\"userFormID\", \"userFormResponse\"],\r\n   // instanceValues: {array}\r\n   // a list of values this element tracks as it is operating in a process.\r\n\r\n   key: \"Approval\",\r\n   // key: {string}\r\n   // unique key to reference this specific Task\r\n\r\n   settings: [\"who\", \"toUsers\", \"formBuilder\"],\r\n   // settings: {array}\r\n   // a list of internal setting values this Element tracks. These are the\r\n   // values set by the platform .propertiesStash()\r\n};\r\n\r\nmodule.exports = class ABProcessTaskUserApprovalCore extends ABProcessElement {\r\n   constructor(attributes, process, AB) {\r\n      attributes.type = attributes.type || \"process.task.user.approval\";\r\n      super(attributes, process, AB, ABProcessTaskApprovalDefaults);\r\n\r\n      // listen\r\n   }\r\n\r\n   // return the default values for this DataField\r\n   static defaults() {\r\n      return ABProcessTaskApprovalDefaults;\r\n   }\r\n\r\n   static DiagramReplace() {\r\n      return null;\r\n   }\r\n\r\n   fromValues(attributes) {\r\n      /*\r\n        {\r\n            id: uuid(),\r\n            name: 'name',\r\n            type: 'xxxxx',\r\n            json: \"{json}\"\r\n        }\r\n        */\r\n      super.fromValues(attributes);\r\n\r\n      function fixBoolean(obj) {\r\n         if (obj) {\r\n            Object.keys(obj).forEach((k) => {\r\n               if (obj[k] == \"false\") {\r\n                  obj[k] = false;\r\n               } else if (obj[k] == \"true\") {\r\n                  obj[k] = true;\r\n               } else if (typeof obj[k] == \"object\") {\r\n                  fixBoolean(obj[k]);\r\n               }\r\n            });\r\n         }\r\n      }\r\n      fixBoolean(this.formBuilder);\r\n   }\r\n\r\n   /**\r\n    * @method toObj()\r\n    * properly compile the current state of this object instance\r\n    * into the values needed for saving to the DB.\r\n    * @return {json}\r\n    */\r\n   /*     \r\n    toObj() {\r\n        var data = super.toObj();\r\n\r\n        ABProcessTaskApprovalDefaults.fields.forEach((f) => {\r\n            data[f] = this[f];\r\n        });\r\n\r\n        return data;\r\n    }\r\n*/\r\n   ////\r\n   //// Process Instance Methods\r\n   ////\r\n\r\n   /**\r\n    * initState()\r\n    * setup this task's initial state variables\r\n    * @param {obj} context  the context data of the process instance\r\n    * @param {obj} val  any values to override the default state\r\n    */\r\n   /*\r\n    initState(context, val) {\r\n        var myDefaults = {};\r\n        ABProcessTaskApprovalDefaults.instanceValues.forEach((v) => {\r\n            myDefaults[v] = null;\r\n        });\r\n\r\n        super.initState(context, myDefaults, val);\r\n    }\r\n*/\r\n\r\n   /*\r\n    * preProcessFormIOComponents()\r\n    * we need to parse the form.io components to ensure the proper columnName\r\n    * and labels are being used. We also will translate the columnNames at this\r\n    * point in the code\r\n    */\r\n   preProcessFormIOComponents() {\r\n      var fields = this.process.processDataFields(this);\r\n      if (fields && this.formBuilder && this.formBuilder.components) {\r\n         this.formBuilder.components.forEach((c) => {\r\n            if (c.abFieldID) {\r\n               fields.filter((entry) => {\r\n                  if (entry.field && entry.field.id == c.abFieldID) {\r\n                     c.label = entry.field.label;\r\n                     c.key = entry.key;\r\n                     if (\r\n                        c.data &&\r\n                        c.data.values &&\r\n                        entry.field.settings.options\r\n                     ) {\r\n                        var vals = [];\r\n                        entry.field.settings.options.forEach((opt) => {\r\n                           vals.push({\r\n                              label: opt.text,\r\n                              value: opt.id,\r\n                           });\r\n                        });\r\n                        c.data.values = vals;\r\n                     }\r\n                  }\r\n               });\r\n            } else if (c.components && c.components.length) {\r\n               c.key = c.path;\r\n               c.components.forEach((o) => {\r\n                  if (o.abFieldID) {\r\n                     // these are plucked conneted values\r\n                     // gather up all their fields to be used\r\n                     var pluck = fields.filter((f) => {\r\n                        return f.key == c.path;\r\n                     })[0];\r\n                     if (!pluck) return;\r\n                     pluck.object.fields().filter((entry) => {\r\n                        if (entry && entry.id == o.abFieldID) {\r\n                           o.label = entry.label;\r\n                           o.key = entry.columnName;\r\n                           if (\r\n                              o.data &&\r\n                              o.data.values &&\r\n                              entry.settings.options\r\n                           ) {\r\n                              var vals = [];\r\n                              entry.settings.options.forEach((opt) => {\r\n                                 vals.push({\r\n                                    label: opt.text,\r\n                                    value: opt.id\r\n                                 });\r\n                              });\r\n                              o.data.values = vals;\r\n                           }\r\n                        }\r\n                     });\r\n                  }\r\n               });\r\n            }\r\n         });\r\n      }\r\n      return this.formBuilder;\r\n   }\r\n\r\n   /**\r\n    * processDataFields()\r\n    * return an array of avaiable data fields that this element\r\n    * can provide to other ProcessElements.\r\n    * Different Process Elements can make data available to other\r\n    * process Elements.\r\n    * @return {array} | null\r\n    */\r\n   processDataFields() {\r\n      // we need to get the button events defined by the form.io formBuilder\r\n      var options = [];\r\n      this.formBuilder.components.forEach((comp) => {\r\n         if (comp.type == \"button\" && comp.action == \"event\" && comp.event) {\r\n            options.push({\r\n               id: comp.event,\r\n               text: comp.label,\r\n            });\r\n         }\r\n      });\r\n      // in this Task, we can return the Response to the UserForm\r\n      // The Response can be in the form of a List Field, with one or more\r\n      // return options.\r\n\r\n      var myID = this.diagramID;\r\n\r\n      // create an ABFieldList object:\r\n      // make sure the options follow what is currently defined for our\r\n      // responses:\r\n      var myObj = this.AB.objectNew({});\r\n      var listField = new ABFieldList(\r\n         {\r\n            id: `${myID}.userFormResponse`,\r\n            label: `${this.label}->Response`,\r\n            columnName: `${myID}.userFormResponse`,\r\n            settings: {\r\n               options: options,\r\n            },\r\n         },\r\n         myObj\r\n      );\r\n\r\n      return [\r\n         {\r\n            key: `${myID}.userFormResponse`,\r\n            label: `${this.label}->Response`,\r\n            field: listField,\r\n            object: null,\r\n         },\r\n      ];\r\n   }\r\n\r\n   /**\r\n    * processData()\r\n    * return the current value requested for the given data key.\r\n    * @param {obj} instance\r\n    * @return {mixed} | null\r\n    */\r\n   processData(instance, key) {\r\n      if (key) {\r\n         var parts = key.split(\".\");\r\n         if (parts[0] == this.diagramID) {\r\n            var myState = this.myState(instance);\r\n            return myState[parts[1]];\r\n         }\r\n      }\r\n      return null;\r\n   }\r\n};\r\n","/**\r\n * ABProcessTaskUserCore\r\n *\r\n * This defines the base User Task element that can be placed on a BPMN\r\n * diagram.  In our system, we will let the designer choose a sub class\r\n * to make active for this element.\r\n *\r\n * Currently a UserTask expects a human user to perform an action.  These\r\n * actions are in the possible forms:\r\n *  - confirm offline action\r\n *  - approve data\r\n *  - fill out a form\r\n *\r\n */\r\n\r\nconst ABProcessElement = require(\"../../../platform/process/tasks/ABProcessElement.js\");\r\n\r\nvar ABProcessTaskUserDefaults = {\r\n   category: \"task\",\r\n   // category: {string} | null\r\n   // if this Element should show up on one of the popup replace menus, then\r\n   // specify one of the categories of elements it should be an option for.\r\n   // Available choices: [ \"start\", \"gateway\", \"task\", \"end\" ].\r\n   //\r\n   // if it shouldn't show up under the popup menu, then leave this null\r\n\r\n   icon: \"user\", // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\r\n   // icon: {string}\r\n   // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\r\n\r\n   instanceValues: [],\r\n   // instanceValues: {array}\r\n   // a list of values this element tracks as it is operating in a process.\r\n\r\n   key: \"TaskUser\",\r\n   // key: {string}\r\n   // unique key to reference this specific Task\r\n\r\n   settings: [],\r\n   // settings: {array}\r\n   // a list of internal setting values this Element tracks. These are the\r\n   // values set by the platform .propertiesStash()\r\n};\r\n\r\nmodule.exports = class ABProcessTaskUserCore extends ABProcessElement {\r\n   constructor(attributes, process, AB) {\r\n      attributes.type = attributes.type || \"process.task.user\";\r\n      super(attributes, process, AB, ABProcessTaskUserDefaults);\r\n\r\n      // listen\r\n   }\r\n\r\n   // return the default values for this DataField\r\n   static defaults() {\r\n      return ABProcessTaskUserDefaults;\r\n   }\r\n\r\n   static DiagramReplace() {\r\n      // taken from \"bpmn-js/lib/features/replace/ReplaceOptions\"\r\n      return {\r\n         label: \"User Task\",\r\n         actionName: \"replace-with-user-task\",\r\n         className: \"bpmn-icon-user\",\r\n         target: {\r\n            type: \"bpmn:UserTask\",\r\n         },\r\n      };\r\n   }\r\n\r\n   ////\r\n   //// Process Instance Methods\r\n   ////\r\n\r\n   /**\r\n    * do()\r\n    * this method actually performs the action for this task.\r\n    * @param {obj} instance  the instance data of the running process\r\n    * @return {Promise}\r\n    *      resolve(true/false) : true if the task is completed.\r\n    *                            false if task is still waiting\r\n    */\r\n   // do(instance) {\r\n   //     return new Promise((resolve, reject) => {\r\n   //         // for testing:\r\n   //         var myState = this.myState(instance);\r\n   //         myState.status = \"completed\";\r\n   //         this.log(instance, \"Email Sent successfully\");\r\n   //         resolve(true);\r\n   //     });\r\n   // }\r\n\r\n   /**\r\n    * initState()\r\n    * setup this task's initial state variables\r\n    * @param {obj} context  the context data of the process instance\r\n    * @param {obj} val  any values to override the default state\r\n    */\r\n   initState(context, val) {\r\n      var myDefaults = {\r\n         roles: [],\r\n         ui: null,\r\n      };\r\n\r\n      super.initState(context, myDefaults, val);\r\n   }\r\n};\r\n","// import ABApplication from \"./ABApplication\"\r\n// const ABApplication = require(\"./ABApplication\"); // NOTE: change to require()\r\nconst ABProcessElement = require(\"../../../platform/process/tasks/ABProcessElement.js\");\r\n\r\nconst ABProcessTaskUserExternalDefaults = {\r\n   category: null,\r\n   // category: {string} | null\r\n   // if this Element should show up on one of the popup replace menus, then\r\n   // specify one of the categories of elements it should be an option for.\r\n   // Available choices: [ \"start\", \"gateway\", \"task\", \"end\" ].\r\n   //\r\n   // if it shouldn't show up under the popup menu, then leave this null\r\n\r\n   icon: \"plus-circle\", // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\r\n   // icon: {string}\r\n   // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\r\n\r\n   instanceValues: [\"userFormID\", \"userFormResponse\"],\r\n   // instanceValues: {array}\r\n   // a list of values this element tracks as it is operating in a process.\r\n\r\n   key: \"External\",\r\n   // key: {string}\r\n   // unique key to reference this specific Task\r\n\r\n   settings: [\"who\", \"toUsers\", \"url\"],\r\n   // settings: {array}\r\n   // a list of internal setting values this Element tracks. These are the\r\n   // values set by the platform .propertiesStash()\r\n};\r\n\r\nconst settings = {\r\n   who: \"0\",\r\n   toUsers: null,\r\n   url: \"\",\r\n};\r\n\r\nmodule.exports = class ABProcessTaskUserExternalCore extends ABProcessElement {\r\n   constructor(attributes, process, AB) {\r\n      for (const key in settings)\r\n         attributes[key] = attributes[key] ?? settings[key];\r\n      super(\r\n         Object.assign(\r\n            {\r\n               type: \"process.task.service.external\",\r\n            },\r\n            attributes\r\n         ),\r\n         process,\r\n         AB,\r\n         ABProcessTaskUserExternalDefaults\r\n      );\r\n\r\n      // listen\r\n   }\r\n\r\n   // return the default values for this DataField\r\n   static defaults() {\r\n      return ABProcessTaskUserExternalDefaults;\r\n   }\r\n\r\n   static DiagramReplace() {\r\n      return null;\r\n   }\r\n\r\n   /**\r\n    * processDataFields()\r\n    * return an array of avaiable data fields that this element\r\n    * can provide to other ProcessElements.\r\n    * Different Process Elements can make data available to other\r\n    * process Elements.\r\n    * @return {array} | null\r\n    */\r\n   processDataFields() {\r\n      return [\r\n         {\r\n            key: `${this.id}.userFormResponse`,\r\n            label: `${this.label}->Response`,\r\n         },\r\n      ];\r\n   }\r\n};\r\n","const ABProcessElement = require(\"../../../platform/process/tasks/ABProcessElement.js\");\r\n\r\nvar ABProcessTriggerDefaults = {\r\n   category: \"start\",\r\n   // category: {string} | null\r\n   // if this Element should show up on one of the popup replace menus, then\r\n   // specify one of the categories of elements it should be an option for.\r\n   // Available choices: [ \"start\", \"gateway\", \"task\", \"end\" ].\r\n   //\r\n   // if it shouldn't show up under the popup menu, then leave this null\r\n\r\n   fields: [],\r\n   // fields: {array}\r\n   // a list of internal setting values this Element tracks\r\n\r\n   icon: \"key\", // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\r\n   // icon: {string}\r\n   // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\r\n\r\n   key: \"Trigger\",\r\n   // key: {string}\r\n   // unique key to reference this specific Task\r\n};\r\n\r\nmodule.exports = class ABProcessTriggerCore extends ABProcessElement {\r\n   constructor(attributes, process, AB) {\r\n      attributes.type = attributes.type || \"trigger\";\r\n      super(attributes, process, AB, ABProcessTriggerDefaults);\r\n\r\n      // listen\r\n   }\r\n\r\n   // return the default values for this DataField\r\n   static defaults() {\r\n      return ABProcessTriggerDefaults;\r\n   }\r\n\r\n   static DiagramReplace() {\r\n      return {\r\n         label: \"Signal Start Event\",\r\n         actionName: \"replace-with-signal-start\",\r\n         className: \"bpmn-icon-start-event-signal\",\r\n         target: {\r\n            type: \"bpmn:StartEvent\",\r\n            // type: {string} the general bpmn category\r\n            //      \"StartEvent\", \"Task\", \"EndEvent\", \"ExclusiveGateway\"\r\n            eventDefinitionType: \"bpmn:SignalEventDefinition\",\r\n         },\r\n      };\r\n   }\r\n\r\n   fromValues(attributes) {\r\n      super.fromValues(attributes);\r\n\r\n      this.triggerKey = attributes.triggerKey || \"triggerKey.??\";\r\n   }\r\n\r\n   /**\r\n    * @method toObj()\r\n    *\r\n    * properly compile the current state of this ABApplication instance\r\n    * into the values needed for saving to the DB.\r\n    *\r\n    * Most of the instance data is stored in .json field, so be sure to\r\n    * update that from all the current values of our child fields.\r\n    *\r\n    * @return {json}\r\n    */\r\n   toObj() {\r\n      var data = super.toObj();\r\n\r\n      data.triggerKey = this.triggerKey;\r\n\r\n      return data;\r\n   }\r\n};\r\n","// import ABApplication from \"./ABApplication\"\r\n// const ABApplication = require(\"./ABApplication\"); // NOTE: change to require()\r\nconst ABProcessTrigger = require(\"../../../platform/process/tasks/ABProcessTrigger.js\");\r\n\r\nvar ABProcessTaskTriggerLifecycleDefaults = {\r\n   category: \"start\",\r\n   // category: {string} | null\r\n   // if this Element should show up on one of the popup replace menus, then\r\n   // specify one of the categories of elements it should be an option for.\r\n   // Available choices: [ \"start\", \"gateway\", \"task\", \"end\" ].\r\n   //\r\n   // if it shouldn't show up under the popup menu, then leave this null\r\n\r\n   fields: [\r\n      \"objectID\",\r\n      \"lifecycleKey\" /* , \"triggerKey\" is tracked in ABProcessTrigger */,\r\n   ],\r\n   // fields: {array}\r\n   // a list of internal setting values this Element tracks\r\n\r\n   icon: \"key\",\r\n   // icon: {string}\r\n   // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\r\n\r\n   key: \"TriggerLifecycle\",\r\n   // key: {string}\r\n   // unique key to reference this specific Task\r\n};\r\n\r\nmodule.exports = class ABProcessTriggerLifecycle extends ABProcessTrigger {\r\n   constructor(attributes, process, AB) {\r\n      attributes.type = attributes.type || \"trigger\";\r\n      super(attributes, process, AB, ABProcessTaskTriggerLifecycleDefaults);\r\n\r\n      // listen\r\n   }\r\n\r\n   // return the default values for this DataField\r\n   static defaults() {\r\n      return ABProcessTaskTriggerLifecycleDefaults;\r\n   }\r\n\r\n   static DiagramReplace() {\r\n      return {\r\n         label: \"Object Lifecycle Trigger\",\r\n         actionName: \"replace-with-signal-lifecycle-start\",\r\n         // type: {string} a unique key to reference this element\r\n         className: \"bpmn-icon-start-event-signal\",\r\n         target: {\r\n            type: \"bpmn:StartEvent\",\r\n            // type: {string} the general bpmn category\r\n            //      \"StartEvent\", \"Task\", \"EndEvent\", \"ExclusiveGateway\"\r\n            eventDefinitionType: \"ab:SignalLifecycle\",\r\n         },\r\n      };\r\n   }\r\n\r\n   fromValues(attributes) {\r\n      super.fromValues(attributes);\r\n\r\n      this.objectID = attributes.objectID || \"objID.??\";\r\n      this.lifecycleKey = attributes.lifecycleKey || \"lifecycle.key??\";\r\n   }\r\n\r\n   /**\r\n    * @method toObj()\r\n    *\r\n    * properly compile the current state of this ABApplication instance\r\n    * into the values needed for saving to the DB.\r\n    *\r\n    * Most of the instance data is stored in .json field, so be sure to\r\n    * update that from all the current values of our child fields.\r\n    *\r\n    * @return {json}\r\n    */\r\n   toObj() {\r\n      var data = super.toObj();\r\n\r\n      data.objectID = this.objectID;\r\n      data.lifecycleKey = this.lifecycleKey;\r\n      return data;\r\n   }\r\n\r\n   /**\r\n    * processDataFields()\r\n    * return an array of avaiable data fields that this element\r\n    * can provide to other ProcessElements.\r\n    * Different Process Elements can make data available to other\r\n    * process Elements.\r\n    * @return {array} | null\r\n    */\r\n   processDataFields() {\r\n      var fields = null;\r\n      if (this.objectID) {\r\n         fields = [];\r\n         var object = this.AB.objectByID(this.objectID);\r\n         if (object) {\r\n            var myID = this.diagramID;\r\n            object.fields().forEach((field) => {\r\n               fields.push({\r\n                  key: `${myID}.${field.id}`,\r\n                  label: `${this.label}->${object.label}->${field.label}`,\r\n                  field,\r\n                  object,\r\n               });\r\n            });\r\n            fields.push({\r\n               key: `${myID}.uuid`,\r\n               label: `${this.label}->${object.label}`,\r\n               field: null,\r\n               object,\r\n            });\r\n         } else {\r\n            // OK, so we have an this.objectID defined, but we can't find it.\r\n            // that's something we need to alert:\r\n            var error = new Error(\r\n               `ABProcessTriggerLifecycleCore.processDataFields():TaskID[${this.id}]: could not find referenced object by ID [${this.objectID}]`\r\n            );\r\n            this.AB.error(error);\r\n         }\r\n      }\r\n      return fields;\r\n   }\r\n\r\n   /**\r\n    * processData()\r\n    * return the current value requested for the given data key.\r\n    * @param {obj} instance\r\n    * @return {mixed} | null\r\n    */\r\n   processData(instance, key) {\r\n      var parts = key.split(\".\");\r\n      if (parts[0] == this.diagramID) {\r\n         var myState = this.myState(instance);\r\n         if (myState[\"data\"]) {\r\n            var object = this.AB.objectByID(this.objectID);\r\n            var field = object.fields((f) => {\r\n               return f.id == parts[1];\r\n            })[0];\r\n            if (field) {\r\n               if (parts[2]) {\r\n                  return field[parts[2]].call(field, myState[\"data\"]);\r\n               } else {\r\n                  // instance.context.data[field.column_name];\r\n                  // if field is \"calculate\" or \"TextFormula\" data is not stored\r\n                  // in data base and we need to run format method\r\n                  if ([\"calculate\", \"TextFormula\"].indexOf(field.key) != -1) {\r\n                     return field.format(myState[\"data\"]);\r\n                  } else if (field.key == \"connectObject\") {\r\n                     return (\r\n                        myState[\"data\"][field.columnName] ||\r\n                        myState[\"data\"][field.relationName()]\r\n                     );\r\n                  } else {\r\n                     return myState[\"data\"][field.columnName];\r\n                  }\r\n               }\r\n            } else if (parts[1] == \"uuid\") {\r\n               return myState[\"data\"][\"uuid\"];\r\n            } else {\r\n               // parts[1] should be a field.id\r\n               var object = this.AB.objectByID(this.objectID);\r\n               var field = object.fields((f) => {\r\n                  return f.id == parts[1];\r\n               })[0];\r\n               if (field) {\r\n                  if (parts[2]) {\r\n                     return field[parts[2]].call(field, myState[\"data\"]);\r\n                  } else {\r\n                     // instance.context.data[field.column_name];\r\n                     return myState[\"data\"][field.columnName];\r\n                  }\r\n               }\r\n            }\r\n         }\r\n      }\r\n      return null;\r\n   }\r\n\r\n   /**\r\n    * processDataObjects()\r\n    * return an array of avaiable ABObjects that this element\r\n    * can provide to other ProcessElements.\r\n    * @return {array} | null\r\n    */\r\n   processDataObjects() {\r\n      var objects = null;\r\n      if (this.objectID) {\r\n         objects = [this.AB.objectByID(this.objectID)];\r\n      }\r\n      return objects;\r\n   }\r\n};\r\n","const ABProcessTrigger = require(\"../../../platform/process/tasks/ABProcessTrigger.js\");\r\n\r\nvar ABProcessTaskTriggerLifecycleDefaults = {\r\n   category: \"start\",\r\n   // category: {string} | null\r\n   // if this Element should show up on one of the popup replace menus, then\r\n   // specify one of the categories of elements it should be an option for.\r\n   // Available choices: [ \"start\", \"gateway\", \"task\", \"end\" ].\r\n   //\r\n   // if it shouldn't show up under the popup menu, then leave this null\r\n\r\n   fields: [\r\n      \"repeatEvery\",\r\n      \"repeatTime\",\r\n      \"repeatDaily\",\r\n      \"repeatWeekly\",\r\n      \"repeatMonthly\",\r\n      \"isEnabled\"\r\n   ],\r\n   // fields: {array}\r\n   // a list of internal setting values this Element tracks\r\n\r\n   icon: \"clock-o\", // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\r\n   // icon: {string}\r\n   // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\r\n\r\n   key: \"TimerStartEvent\",\r\n   // key: {string}\r\n   // unique key to reference this specific Task\r\n\r\n   repeatEvery: \"daily\",\r\n   repeatTime: \"01:00\",\r\n   repeatDaily: \"day\",\r\n   repeatWeekly: \"FRI\",\r\n   repeatMonthly: \"last\",\r\n   isEnabled: true\r\n};\r\n\r\nmodule.exports = class ABProcessTriggerTimer extends ABProcessTrigger {\r\n   constructor(attributes, process, application) {\r\n      attributes.type = attributes.type || \"trigger\";\r\n      super(\r\n         attributes,\r\n         process,\r\n         application,\r\n         ABProcessTaskTriggerLifecycleDefaults\r\n      );\r\n   }\r\n\r\n   // return the default values for this DataField\r\n   static defaults() {\r\n      return ABProcessTaskTriggerLifecycleDefaults;\r\n   }\r\n\r\n   static DiagramReplace() {\r\n      return {\r\n         label: \"Timer Start Event\",\r\n         actionName: \"replace-with-signal-timer-start\",\r\n         // type: {string} a unique key to reference this element\r\n         className: \"bpmn-icon-start-event-timer\",\r\n         target: {\r\n            type: \"bpmn:StartEvent\",\r\n            // type: {string} the general bpmn category\r\n            //      \"StartEvent\", \"Task\", \"EndEvent\", \"ExclusiveGateway\"\r\n            eventDefinitionType: \"ab:SignalTriggerTimer\"\r\n         }\r\n      };\r\n   }\r\n\r\n   fromValues(attributes) {\r\n      super.fromValues(attributes);\r\n\r\n      this.repeatEvery =\r\n         attributes.repeatEvery ||\r\n         ABProcessTaskTriggerLifecycleDefaults.repeatEvery;\r\n\r\n      this.repeatDaily =\r\n         attributes.repeatDaily ||\r\n         ABProcessTaskTriggerLifecycleDefaults.repeatDaily;\r\n\r\n      this.repeatWeekly =\r\n         attributes.repeatWeekly ||\r\n         ABProcessTaskTriggerLifecycleDefaults.repeatWeekly;\r\n\r\n      this.repeatMonthly =\r\n         attributes.repeatMonthly ||\r\n         ABProcessTaskTriggerLifecycleDefaults.repeatMonthly;\r\n\r\n      // Convert UTC to local time\r\n      if (attributes.repeatTime) {\r\n         let timeVals = attributes.repeatTime.split(\":\");\r\n         let currDate = new Date();\r\n         currDate.setUTCHours(timeVals[0]);\r\n         currDate.setUTCMinutes(timeVals[1]);\r\n         this.repeatTime = `${currDate.getHours()}:${currDate.getMinutes()}`;\r\n      } else {\r\n         this.repeatTime = ABProcessTaskTriggerLifecycleDefaults.repeatTime;\r\n      }\r\n\r\n      this.isEnabled = JSON.parse(\r\n         attributes.isEnabled || ABProcessTaskTriggerLifecycleDefaults.isEnabled\r\n      );\r\n   }\r\n\r\n   /**\r\n    * @method toObj()\r\n    *\r\n    * properly compile the current state of this ABApplication instance\r\n    * into the values needed for saving to the DB.\r\n    *\r\n    * Most of the instance data is stored in .json field, so be sure to\r\n    * update that from all the current values of our child fields.\r\n    *\r\n    * @return {json}\r\n    */\r\n   toObj() {\r\n      var data = super.toObj();\r\n\r\n      data.repeatEvery = this.repeatEvery;\r\n      data.repeatDaily = this.repeatDaily;\r\n      data.repeatWeekly = this.repeatWeekly;\r\n      data.repeatMonthly = this.repeatMonthly;\r\n\r\n      // Convert local time to UTC\r\n      data.repeatTime = this.repeatTime;\r\n      if (data.repeatTime && data.repeatTime instanceof Date) {\r\n         data.repeatTime = `${data.repeatTime.getUTCHours()}:${data.repeatTime.getMinutes()}`;\r\n      }\r\n\r\n      data.isEnabled = this.isEnabled;\r\n\r\n      return data;\r\n   }\r\n\r\n   getCronExpression() {\r\n      let timeVals = this.repeatTime.split(\":\");\r\n      let second = \"*\";\r\n      let minute = timeVals[1];\r\n      let hour = timeVals[0];\r\n      let day;\r\n      let month;\r\n      let dayWeek;\r\n      let year = \"*\";\r\n\r\n      switch (this.repeatEvery) {\r\n         case \"daily\":\r\n            day = \"*\";\r\n            month = \"*\";\r\n            dayWeek = this.repeatDaily == \"weekday\" ? \"1-5\" : \"*\";\r\n            break;\r\n         case \"weekly\":\r\n            day = \"*\";\r\n            month = \"*\";\r\n            dayWeek = this.repeatWeekly;\r\n            break;\r\n         case \"monthly\":\r\n            day = this.repeatMonthly;\r\n            month = \"*\";\r\n            dayWeek = \"*\";\r\n            break;\r\n      }\r\n\r\n      return `${second} ${minute} ${hour} ${day} ${month} ${dayWeek} ${year}`;\r\n   }\r\n};\r\n\r\n","/*\r\n * ABQL\r\n *\r\n * An ABQL defines the base class for our AB Query Language Objects.\r\n * These classes share a common way to\r\n *   - parse input strings for commands\r\n *\r\n *\r\n */\r\n\r\nclass ABQLCore {\r\n   constructor(attributes, parameterDefinitions, prevOP, task, AB) {\r\n      // manage the incoming Parameter Definitions\r\n      if (!Array.isArray(parameterDefinitions)) {\r\n         parameterDefinitions = [parameterDefinitions];\r\n      }\r\n      this.parameterDefinitions = parameterDefinitions;\r\n\r\n      this.object = prevOP ? prevOP.object : null;\r\n      // {ABObject}\r\n      // The current {ABObject} the current Query Language Operation is associated\r\n      // with.\r\n\r\n      // if the previous Operation defined an .objectOut then our .object is THAT\r\n      // one.\r\n      if (prevOP && prevOP.objectOut) {\r\n         this.object = prevOP.objectOut;\r\n      }\r\n\r\n      this.prevOP = prevOP;\r\n      this.task = task;\r\n      // {ABProcessTaskxxx}\r\n      // This is running under a specific ABProcessTaskServiceQuery.  When\r\n      // searching for data from the Process, we must go through this.task\r\n      // to do so.\r\n\r\n      this.AB = AB;\r\n\r\n      this.next = null;\r\n\r\n      this.fromAttributes(attributes);\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   initObject(attributes) {}\r\n\r\n   fromAttributes(attributes) {\r\n      /*\r\n        {\r\n            id: uuid(),\r\n            name: 'name',\r\n            type: 'xxxxx',\r\n            json: \"{json}\"\r\n        }\r\n        */\r\n\r\n      // super.fromValues(attributes);\r\n\r\n      // this.entryComplete = attributes.entryComplete || false;\r\n      this.params = attributes.params || {};\r\n      // {hash}\r\n      // The configuration values entered by the AppBuilder UI for this\r\n      // operation.\r\n\r\n      this.objectID = attributes.objectID || null;\r\n      // be sure to do a hard lookup if an objectID was saved:\r\n      if (this.objectID) {\r\n         this.object = this.objectLookup(this.objectID);\r\n      }\r\n\r\n      this.initObject(attributes);\r\n\r\n      if (this.objectID && !this.object) {\r\n         // at least dump a warning here:\r\n         this.AB.notify.developer(\r\n            new Error(\r\n               `ABQLCore.fromAttributes(): unable to initialize ABObject [${this.objectID}]`\r\n            ),\r\n            {\r\n               attributes,\r\n               objectID: this.objectID,\r\n            }\r\n         );\r\n      }\r\n\r\n      if (attributes.next) {\r\n         var nextOP = null;\r\n         (this.NextQLOps || this.constructor.NextQLOps).forEach((OP) => {\r\n            if (OP.key == attributes.next.key) {\r\n               nextOP = OP;\r\n            }\r\n         });\r\n         if (nextOP) {\r\n            // exact match, so add next:\r\n            var qlOP = new nextOP(attributes.next, this, this.task, this.AB);\r\n            this.next = qlOP;\r\n         }\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method objectLookup()\r\n    * return a matching {ABObject} that is represented by the given id.\r\n    * NOTE: we will try to match on: our initial .objectID first, then\r\n    * the given objID.\r\n    * NOTE: this will match an object.id as well as object.label\r\n    * @param {string} objID\r\n    */\r\n   objectLookup(objID) {\r\n      return this.AB.objects((o) => {\r\n         var quotedLabel = `\"${o.label}\"`;\r\n         return (\r\n            // o.id == this.objectID ||\r\n            o.id == objID || quotedLabel.indexOf(objID) == 0\r\n         );\r\n      })[0];\r\n   }\r\n\r\n   /**\r\n    * @method availableProcessDataFieldsHash()\r\n    * return a { \"field.key\" => {processFieldDef} } hash of the currently\r\n    * available fields in the process.\r\n    * @return {obj}\r\n    */\r\n   availableProcessDataFieldsHash() {\r\n      var availableProcessDataFields =\r\n         this.task.process.processDataFields(this.task) || [];\r\n      var hashFieldIDs = {};\r\n      availableProcessDataFields.forEach((f) => {\r\n         if (f.field) {\r\n            hashFieldIDs[f.field.id] = f;\r\n         } else {\r\n            hashFieldIDs[f.key] = f;\r\n         }\r\n      });\r\n      return hashFieldIDs;\r\n   }\r\n\r\n   /*\r\n    * @method paramChanged()\r\n    * respond to an update to the given parameter.\r\n    * NOTE: the value will ALREADY be saved in this.params[pDef.name].\r\n    * @param {obj} pDef\r\n    *        the this.parameterDefinition entry of the parameter that was\r\n    *        changed.\r\n    */\r\n   paramChanged(pDef) {}\r\n\r\n   /**\r\n    * @method toObj()\r\n    * properly compile the current state of this ABQL instance\r\n    * into the values needed for saving to the DB.\r\n    * @return {json}\r\n    */\r\n   toObj() {\r\n      var obj = {\r\n         key: this.constructor.key,\r\n         // entryComplete: this.entryComplete,\r\n         params: this.params,\r\n         // currQuery: this.currQuery,\r\n         // queryValid: this.queryValid,\r\n         objectID: this.object ? this.object.id : null,\r\n      };\r\n\r\n      if (this.next) {\r\n         obj.next = this.next.toObj();\r\n      }\r\n\r\n      return obj;\r\n   }\r\n}\r\n\r\nmodule.exports = ABQLCore;\r\n","/*\r\n * ABQLFindCore\r\n *\r\n * An ABQLFind depends on a BASE QL object (Object, Datacollection, Query)\r\n * and can perform a DB query based upon that BASE object.\r\n *\r\n */\r\n\r\nconst ABQL = require(\"../../platform/ql/ABQL.js\");\r\nconst NextQLOps = require(\"./ABQLSet.js\");\r\n// {array} of {ABQLxxx} options\r\n// this is an array of what possible next Operations can come after an\r\n// ABQLFind task is complete.  In this case the {ABQLSet} operations come\r\n// next.  {ABQLSet} operations work on a Set|{Array} or data results.\r\n\r\nvar ParameterDefinitions = [\r\n   {\r\n      type: \"objectConditions\",\r\n      name: \"cond\",\r\n   },\r\n];\r\n\r\nclass ABQLFindCore extends ABQL {\r\n   constructor(attributes, prevOP, task, AB) {\r\n      super(attributes, ParameterDefinitions, prevOP, task, AB);\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n}\r\n\r\nABQLFindCore.key = \"find\";\r\nABQLFindCore.label = \"find\";\r\nABQLFindCore.NextQLOps = NextQLOps;\r\n\r\nmodule.exports = ABQLFindCore;\r\n","/*\r\n * ABQLManagerCore\r\n *\r\n * An interface for managing the different ABQL Operations available in our\r\n * AppBuilder.\r\n *\r\n */\r\n\r\nconst QLObject = require(\"../../platform/ql/ABQLRootObject.js\");\r\nvar QLOps = [QLObject];\r\n\r\nvar ABQLManagerCore = {\r\n   /**\r\n    * @method fromAttributes()\r\n    * return an {ABQL} object that represents the given attributes that\r\n    * were saved from the previous .toObj()\r\n    * @param {object} attributes\r\n    *\t\t  the values returned from the previous .toObj() call\r\n    * @param {ABProcessTask***} task\r\n    *\t\t  the current ABProcessTaskServiceQuery that contains this QL\r\n    * @param {ABFactory} AB\r\n    *\t\t  the current ABFactory we are operating under.\r\n    * @return {ABQL} | null\r\n    */\r\n   fromAttributes: function (attributes, task, AB) {\r\n      if (!attributes) {\r\n         return null;\r\n      }\r\n      var matchingOPs = [];\r\n      ABQLManagerCore.QLOps.forEach((Op) => {\r\n         if (Op.key == attributes.key) {\r\n            matchingOPs.push(Op);\r\n         }\r\n      });\r\n      if (matchingOPs.length == 1) {\r\n         // let this Operation initialize and return the last OP\r\n         // in the chain\r\n         var qlOP = new matchingOPs[0](attributes, task, AB);\r\n         return qlOP;\r\n      } else {\r\n         return null;\r\n      }\r\n   },\r\n\r\n   /**\r\n    * @array QLOps\r\n    * An array of the root QL Operations.\r\n    */\r\n   QLOps: QLOps,\r\n};\r\nmodule.exports = ABQLManagerCore;\r\n","/*\r\n * ABQLRootObjectCore\r\n *\r\n * An ABQL defines a Query Language Operation. A QL Operation\r\n * is intended to be evaluated at run time and return a value that can be\r\n * assigned to form value or an object.\r\n *\r\n *\r\n */\r\n\r\nconst ABQL = require(\"../../platform/ql/ABQL.js\");\r\n\r\n// Define the Operations that can be performed off of a RootObject.\r\n// Each Root Object might have a different set of Operations, so we\r\n// define them here.\r\nconst QLFind = require(\"../../platform/ql/ABQLFind.js\");\r\nvar NextQLOps = [QLFind];\r\n\r\nvar ParameterDefinitions = [\r\n   {\r\n      type: \"objectName\",\r\n      name: \"name\",\r\n   },\r\n];\r\n\r\nclass ABQLObjectCore extends ABQL {\r\n   constructor(attributes, task, AB) {\r\n      // NOTE: keep this so we can insert the prevOp == null\r\n      super(attributes, ParameterDefinitions, null, task, AB);\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n   initObject(attributes) {\r\n      if (!this.object && this.params) {\r\n         var objNameDef = this.parameterDefinitions.find((pDef) => {\r\n            return pDef.type == \"objectName\";\r\n         });\r\n         if (objNameDef) {\r\n            this.objectID = this.params[objNameDef.name];\r\n            this.object = this.objectLookup(this.objectID);\r\n         }\r\n      }\r\n   }\r\n\r\n   toObj() {\r\n      var obj = super.toObj();\r\n\r\n      // if we don't have an objectID, but we have an objectName parameter\r\n      // definition then save that as our objectID\r\n      if (!obj.objectID && this.params) {\r\n         var objNameDef = this.parameterDefinitions.find((pDef) => {\r\n            return pDef.type == \"objectName\";\r\n         });\r\n         if (objNameDef) {\r\n            obj.objectID = this.params[objNameDef.name];\r\n         }\r\n      }\r\n      return obj;\r\n   }\r\n}\r\nABQLObjectCore.key = \"object\";\r\nABQLObjectCore.label = \"object\";\r\nABQLObjectCore.NextQLOps = NextQLOps;\r\n\r\nmodule.exports = ABQLObjectCore;\r\n","/*\r\n * ABQLRow\r\n *\r\n * Defines all the QL operations that can be performed on a Row of data. This is a\r\n * Single row/instance of an object.\r\n *\r\n */\r\n\r\nconst QLUpdate = require(\"../../platform/ql/ABQLRowUpdate.js\");\r\nconst QLSave = require(\"../../platform/ql/ABQLRowSave\");\r\nconst QLPluck = require(\"../../platform/ql/ABQLRowPluck\");\r\n\r\nmodule.exports = [QLUpdate, QLSave, QLPluck];\r\n","/*\r\n/*\r\n * ABQLRowPluckCore\r\n *\r\n * An ABQLRowPluckCore can process a value of data and puck out a specified\r\n * field to then make an object of values that only contain that field.\r\n *\r\n */\r\n\r\nconst ABQLValue = require(\"./ABQLValue.js\");\r\n// const ABQLSet = require(\"./ABQLSet.js\");\r\nconst ABQLSetPluck = require(\"../../platform/ql/ABQLSetPluck.js\");\r\n\r\nclass ABQLRowPluckCore extends ABQLSetPluck {\r\n   // Dynamic NextQLOps\r\n   get NextQLOps() {\r\n      let nextQLOps = [];\r\n      let field = this.field;\r\n      if (field == null) {\r\n         field = this.object.fieldByID(this.fieldID);\r\n      }\r\n\r\n      // Update .NextQLOps WARN: update to static it affects to every ABQLRowPluck instances.\r\n      if (field) {\r\n         // M:1 M:N connect field, then set ABQLSet to next steps\r\n         if (field.key == \"connectObject\") {\r\n            if (field.settings.linkType == \"many\") {\r\n               // NOTE: Could not require(\"./ABQLSet.js\") on the top. It returns an empty object. Why ><\r\n               const ABQLSet = require(\"./ABQLSet.js\");\r\n               nextQLOps = ABQLSet;\r\n            } else {\r\n               // return ABQLRow.js\r\n               nextQLOps = this.prevOP.constructor.NextQLOps;\r\n            }\r\n         }\r\n         // Normal field\r\n         else {\r\n            nextQLOps = ABQLValue;\r\n         }\r\n      } else if (this.fieldID == \"_PK\") {\r\n         nextQLOps = ABQLValue;\r\n      }\r\n\r\n      return nextQLOps;\r\n   }\r\n}\r\n\r\nABQLRowPluckCore.key = \"row_pluck\";\r\nABQLRowPluckCore.label = \"pluck\";\r\nABQLRowPluckCore.NextQLOps = []; // Static NextQLOps\r\n\r\nmodule.exports = ABQLRowPluckCore;\r\n","/*\r\n * ABQLRowUpdateCore\r\n *\r\n * An ABQLRow Update allows you to update the values on the current\r\n * Row of data.\r\n *\r\n */\r\n\r\nconst ABQL = require(\"../../platform/ql/ABQL.js\");\r\n// const ABQLRow = require(\"./ABQLRow.js\");\r\n\r\nvar ParameterDefinitions = [\r\n   {\r\n      type: \"objectValues\",\r\n      name: \"values\",\r\n   },\r\n];\r\n\r\nclass ABQLRowUpdateCore extends ABQL {\r\n   constructor(attributes, prevOP, task, AB) {\r\n      super(attributes, ParameterDefinitions, prevOP, task, AB);\r\n\r\n      // #Hack! : when an Operation provides the same .NextQlOps that it\r\n      // was defined in, we can't require it again ==> circular dependency.\r\n      // so we manually set it here from the operation that created us:\r\n      this.constructor.NextQLOps = prevOP.constructor.NextQLOps;\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n}\r\n\r\nABQLRowUpdateCore.key = \"update\";\r\nABQLRowUpdateCore.label = \"update record\";\r\nABQLRowUpdateCore.NextQLOps = [];\r\n// NOTE: .NextQLOps => see the #Hack in the constructor\r\n\r\nmodule.exports = ABQLRowUpdateCore;\r\n","/*\r\n * ABQLSet\r\n *\r\n * Here we define the group of operations that can be performed on a SET of data.\r\n * A SET is an array of objects/row data.\r\n *\r\n */\r\n\r\nmodule.exports = [\r\n   require(\"../../platform/ql/ABQLSetFirst.js\"),\r\n   require(\"../../platform/ql/ABQLSetPluck.js\"),\r\n   require(\"../../platform/ql/ABQLSetSave.js\")\r\n];\r\n","/*\r\n/*\r\n * ABQLSetFirstCore\r\n *\r\n * An ABQLFind depends on a BASE QL object (Object, Datacollection, Query)\r\n * and can perform a DB query based upon that BASE object.\r\n *\r\n */\r\n\r\nconst ABQL = require(\"../../platform/ql/ABQL.js\");\r\nconst ABQLRow = require(\"./ABQLRow.js\");\r\n// {array} of {ABQLxxx} options\r\n// this is an array of what possible next Operations can come after an\r\n// ABQLSetFirst task is complete.  In this case the {ABQLRow} operations come\r\n// next.  {ABQLRow} operations work on a single row of data.\r\n\r\nclass ABQLSetFirstCore extends ABQL {\r\n   constructor(attributes, prevOP, task, AB) {\r\n      super(attributes, [], prevOP, task, AB);\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n}\r\n\r\nABQLSetFirstCore.key = \"first\";\r\nABQLSetFirstCore.label = \"first\";\r\nABQLSetFirstCore.NextQLOps = ABQLRow;\r\n\r\nmodule.exports = ABQLSetFirstCore;\r\n","/*\r\n/*\r\n * ABQLSetPluckCore\r\n *\r\n * An ABQLSetPluck can process a set (array) of data and puck out a specified\r\n * field to then make an array of values that only contain that field.\r\n *\r\n */\r\n\r\nconst ABQL = require(\"../../platform/ql/ABQL.js\");\r\n// const ABQLSet = require(\"./ABQLSet.js\");\r\n\r\nvar ParameterDefinitions = [\r\n   {\r\n      type: \"objectFields\",\r\n      name: \"field\",\r\n   },\r\n];\r\n\r\nclass ABQLSetPluckCore extends ABQL {\r\n   constructor(attributes, prevOP, task, AB) {\r\n      super(attributes, ParameterDefinitions, prevOP, task, AB);\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   fromAttributes(attributes) {\r\n      // #Hack! : when an Operation provides the same .NextQlOps that it\r\n      // was defined in, we can't require it again ==> circular dependency.\r\n      // so we manually set it here from the operation that created us:\r\n      this.constructor.NextQLOps = this.prevOP.constructor.NextQLOps;\r\n\r\n      // we need to gather our .field and .objectOut before we\r\n      // allow our base class to continue forward:\r\n\r\n      this.fieldID = attributes.fieldID;\r\n      this.field = this.object?.fieldByID(this.fieldID);\r\n\r\n      if (attributes.objectOutID) {\r\n         this.objectOut = this.objectLookup(attributes.objectOutID);\r\n      }\r\n\r\n      super.fromAttributes(attributes);\r\n   }\r\n\r\n   toObj() {\r\n      var obj = super.toObj();\r\n\r\n      if (this.fieldID) {\r\n         obj.fieldID = this.fieldID;\r\n         if (this.objectOut) {\r\n            obj.objectOutID = this.objectOut.id;\r\n         }\r\n      } else {\r\n         obj.fieldID = this.params.field || null;\r\n         var field = this.object.fieldByID(obj.fieldID);\r\n\r\n         if (field?.isConnection) {\r\n            obj.objectOutID = field.datasourceLink.id;\r\n         }\r\n      }\r\n      return obj;\r\n   }\r\n}\r\n\r\nABQLSetPluckCore.key = \"set_pluck\";\r\nABQLSetPluckCore.label = \"pluck\";\r\nABQLSetPluckCore.NextQLOps = [];\r\n\r\nmodule.exports = ABQLSetPluckCore;\r\n","/*\r\n/*\r\n * ABQLSetSaveCore\r\n *\r\n * An ABQLSetSave can store the current Data set into the Process Task it is\r\n * in, so that this data can be made available to other Process Tasks.\r\n *\r\n */\r\n\r\nconst ABQL = require(\"../../platform/ql/ABQL.js\");\r\n\r\nvar ParameterDefinitions = [\r\n   {\r\n      type: \"taskParam\",\r\n      name: \"task_param\"\r\n   }\r\n];\r\n\r\nclass ABQLSetSaveCore extends ABQL {\r\n   constructor(attributes, prevOP, task, AB) {\r\n      super(attributes, ParameterDefinitions, prevOP, task, AB);\r\n\r\n      // TODO: register with the task that we can provide data.\r\n      if (this.taskParam) {\r\n         task.registerDatasource(this);\r\n         this.registered = true;\r\n      }\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   fromAttributes(attributes) {\r\n      // #Hack! : when an Operation provides the same .NextQlOps that it\r\n      // was defined in, we can't require it again ==> circular dependency.\r\n      // so we manually set it here from the operation that created us:\r\n      this.constructor.NextQLOps = this.prevOP.constructor.NextQLOps;\r\n\r\n      super.fromAttributes(attributes);\r\n      this.taskParam = attributes.taskParam || this.params.task_param;\r\n   }\r\n\r\n   toObj() {\r\n      var obj = super.toObj();\r\n\r\n      obj.taskParam = this.taskParam || this.params.task_param;\r\n\r\n      return obj;\r\n   }\r\n\r\n   processDataField(id, label) {\r\n      // we have to report back on:\r\n      // key:  id.taskParam\r\n      // label: label->taskParam\r\n      // object: ABObject\r\n      // field: ABField\r\n      // set : {bool}\r\n\r\n      var field = null;\r\n      // {ABField}\r\n      // if the value being stored is NOT a connectObject, then it is\r\n      // a particular field in the previous object.\r\n\r\n      // if we are saving a specific field of an Object, pass that\r\n      // ABField along:\r\n      if (\r\n         this.prevOP?.field?.key != \"connectObject\"\r\n      ) {\r\n         field = this.prevOP.field;\r\n      }\r\n\r\n      return {\r\n         key: `${id}.${this.taskParam || this.params.task_param}`,\r\n         label: `${label}->${this.taskParam || this.params.task_param}`,\r\n         field: field,\r\n         object: this.object,\r\n         set: true\r\n      };\r\n   }\r\n}\r\n\r\nABQLSetSaveCore.key = \"set_save\";\r\nABQLSetSaveCore.label = \"save\";\r\nABQLSetSaveCore.NextQLOps = [];\r\n// NOTE: currently, this is an ending step. but it doesn't have to be...\r\n\r\nmodule.exports = ABQLSetSaveCore;\r\n","/*\r\n * ABQLValue\r\n *\r\n * Here we define the group of operations that can be performed on a VALUE.\r\n * A VALUE is an object or array.\r\n *\r\n */\r\n\r\nmodule.exports = [require(\"../../platform/ql/ABQLValueSave.js\")];\r\n","/*\r\n/*\r\n * ABQLRowValueCore\r\n *\r\n * An ABQLRowSave can store the current Data set into the Process Task it is\r\n * in, so that this data can be made available to other Process Tasks.\r\n *\r\n */\r\n\r\nconst ABQLSetSave = require(\"../../platform/ql/ABQLSetSave.js\");\r\n\r\nclass ABQLValueSaveCore extends ABQLSetSave {\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   fromAttributes(attributes) {\r\n      super.fromAttributes(attributes);\r\n\r\n      this.constructor.NextQLOps =\r\n         this.prevOP.NextQLOps || this.prevOP.constructor.NextQLOps;\r\n   }\r\n}\r\n\r\nABQLValueSaveCore.key = \"value_save\";\r\nABQLValueSaveCore.label = \"save\";\r\nABQLValueSaveCore.NextQLOps = [];\r\n// NOTE: currently, this is an ending step. but it doesn't have to be...\r\n\r\nmodule.exports = ABQLValueSaveCore;\r\n\r\n","const ABViewWidget = require(\"../../platform/views/ABViewWidget\");\r\n\r\nconst ABViewCSVExporterDefaults = {\r\n   key: \"csvExporter\", // unique key identifier for this ABViewForm\r\n   icon: \"download\", // icon reference: (without 'fa-' )\r\n   labelKey: \"CSV Exporter\", // {string} the multilingual label key for the class label\r\n};\r\n\r\nconst ABViewCSVExporterPropertyComponentDefaults = {\r\n   dataviewID: null,\r\n   where: null,\r\n   buttonLabel: \"Export CSV\",\r\n   filename: \"exportCSV\",\r\n   hasHeader: true,\r\n   width: 150,\r\n};\r\n\r\nmodule.exports = class ABViewCSVExporterCore extends ABViewWidget {\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(\r\n         values,\r\n         application,\r\n         parent,\r\n         defaultValues || ABViewCSVExporterDefaults\r\n      );\r\n   }\r\n\r\n   static common() {\r\n      return ABViewCSVExporterDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return ABViewCSVExporterPropertyComponentDefaults;\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /**\r\n    * @method fromValues()\r\n    *\r\n    * initialze this object with the given set of values.\r\n    * @param {obj} values\r\n    */\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n\r\n      // convert to boolean\r\n      if (typeof values.settings.hasHeader == \"string\")\r\n         this.settings.hasHeader = JSON.parse(values.settings.hasHeader);\r\n\r\n      if (this.settings.hasHeader == null)\r\n         this.settings.hasHeader =\r\n            ABViewCSVExporterPropertyComponentDefaults.hasHeader;\r\n\r\n      // convert from \"0\" => 0\r\n      this.settings.width = parseInt(\r\n         values.settings.width ||\r\n            ABViewCSVExporterPropertyComponentDefaults.width\r\n      );\r\n   }\r\n};\r\n","const ABViewWidget = require(\"../../platform/views/ABViewWidget\");\r\n\r\nconst ABRecordRule = require(\"../../rules/ABViewRuleListFormRecordRules\");\r\n\r\nconst ABViewCSVImporterDefaults = {\r\n   key: \"csvImporter\",\r\n   // {string}\r\n   // unique key identifier for this ABViewForm\r\n\r\n   icon: \"upload\",\r\n   // {string}\r\n   // font-awesome icon reference: (without 'fa-' )\r\n\r\n   labelKey: \"CSV Importer\",\r\n   // {string}\r\n   // the multilingual label key for the class label\r\n   // NOTE: will be used as L(labelKey)\r\n};\r\n\r\nconst ABViewCSVImporterPropertyComponentDefaults = {\r\n   dataviewID: null,\r\n   // {uuid}\r\n   // The ABDataCollection.uuid that we are using to store the data.\r\n   // NOTE: we actually use the DC to get the ABObject it is connected to.\r\n\r\n   availableFieldIds: [],\r\n   //{array}\r\n   // A list of ABField.ids that are allowed to be imported using this widget.\r\n\r\n   buttonLabel: \"Upload CSV\",\r\n   // {string}\r\n   // The Label(key) to display on the initial button\r\n\r\n   width: 0,\r\n   // {integer}\r\n   // Width of the Popup.\r\n\r\n   recordRules: [],\r\n   // {array}  [ {RecordRule}, ... ]\r\n   // A list of ABViewRuleListFormRecordRules that should be performed upon\r\n   // each row of data imported.\r\n   // The Array should look like:\r\n   // [{\r\n   //    action: {string},\r\n   //    when: [\r\n   //       {\r\n   //          fieldId: {UUID},\r\n   //          comparer: {string},\r\n   //          value: {string}\r\n   //       }\r\n   //    ],\r\n   //    values: [\r\n   //       {\r\n   //          fieldId: {UUID},\r\n   //          value: {object}\r\n   //       }\r\n   //    ]\r\n   // }]\r\n};\r\n\r\nmodule.exports = class ABViewCSVImporterCore extends ABViewWidget {\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(\r\n         values,\r\n         application,\r\n         parent,\r\n         defaultValues || ABViewCSVImporterDefaults\r\n      );\r\n   }\r\n\r\n   /**\r\n    * @method common()\r\n    * Provides the default settings for an instance of an ABViewCSVImporter\r\n    * @return {json}\r\n    */\r\n   static common() {\r\n      return ABViewCSVImporterDefaults;\r\n   }\r\n\r\n   /**\r\n    * @method defaultValues()\r\n    * Provides the default settings for an instance of an ABViewCSVImporter\r\n    * Component that is displayed on the UI.\r\n    * @return {json}\r\n    */\r\n   static defaultValues() {\r\n      return ABViewCSVImporterPropertyComponentDefaults;\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /**\r\n    * @method fromValues()\r\n    *\r\n    * initialze this object with the given set of values.\r\n    * @param {obj} values\r\n    */\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n\r\n      // convert from \"0\" => 0\r\n      this.settings.width = parseInt(\r\n         this.settings.width || ABViewCSVImporterPropertyComponentDefaults.width\r\n      );\r\n   }\r\n\r\n   get RecordRule() {\r\n      let object = this.datacollection?.datasource;\r\n      if (!object) return;\r\n\r\n      if (this._recordRule == null) {\r\n         this._recordRule = new ABRecordRule();\r\n      }\r\n\r\n      this._recordRule.formLoad(this);\r\n      this._recordRule.fromSettings(this.settings.recordRules);\r\n      this._recordRule.objectLoad(object);\r\n\r\n      return this._recordRule;\r\n   }\r\n\r\n   doRecordRulesPre(rowDatas) {\r\n      if (rowDatas && !Array.isArray(rowDatas)) {\r\n         rowDatas = [rowDatas];\r\n      }\r\n\r\n      rowDatas.forEach((row) => {\r\n         this.RecordRule?.processPre({ data: row.data || row, form: this });\r\n      });\r\n   }\r\n\r\n   doRecordRules(rowDatas) {\r\n      if (rowDatas && !Array.isArray(rowDatas)) {\r\n         rowDatas = [rowDatas];\r\n      }\r\n\r\n      if (!this.RecordRule) return Promise.resolve();\r\n\r\n      let tasks = [];\r\n\r\n      rowDatas.forEach((row) => {\r\n         tasks.push(\r\n            this.RecordRule.process({ data: row.data || row, form: this })\r\n         );\r\n      });\r\n\r\n      return Promise.all(tasks);\r\n   }\r\n};\r\n","const ABViewWidget = require(\"../../platform/views/ABViewWidget\");\r\n\r\nconst ABViewCarouselPropertyComponentDefaults = {\r\n   dataviewID: null, // uuid of ABDatacollection\r\n   field: null, // uuid\r\n\r\n   width: 460,\r\n   height: 275,\r\n   showLabel: true,\r\n   hideItem: false,\r\n   hideButton: false,\r\n   navigationType: \"corner\", // \"corner\" || \"side\"\r\n   filterByCursor: false,\r\n\r\n   detailsPage: null, // uuid\r\n   detailsTab: null, // uuid\r\n   editPage: null, // uuid\r\n   editTab: null, // uuid\r\n};\r\n\r\nconst ABViewDefaults = {\r\n   key: \"carousel\", // {string} unique key for this view\r\n   icon: \"clone\", // {string} fa-[icon] reference for this view\r\n   labelKey: \"Carousel\", // {string} the multilingual label key for the class label\r\n};\r\n\r\nmodule.exports = class ABViewCarouselCore extends ABViewWidget {\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(values, application, parent, defaultValues || ABViewDefaults);\r\n   }\r\n\r\n   static common() {\r\n      return ABViewDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return ABViewCarouselPropertyComponentDefaults;\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /**\r\n    * @method fromValues()\r\n    *\r\n    * initialze this object with the given set of values.\r\n    * @param {obj} values\r\n    */\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n\r\n      // convert from \"0\" => 0\r\n      if (typeof this.settings.width != \"undefined\") {\r\n         this.settings.width = parseInt(this.settings.width);\r\n      } else {\r\n         this.settings.width = ABViewCarouselPropertyComponentDefaults.width;\r\n      }\r\n      if (typeof this.settings.height != \"undefined\") {\r\n         this.settings.height = parseInt(this.settings.height);\r\n      } else {\r\n         this.settings.height = ABViewCarouselPropertyComponentDefaults.height;\r\n      }\r\n      try {\r\n         this.settings.showLabel = JSON.parse(this.settings.showLabel);\r\n      } catch (e) {\r\n         this.settings.showLabel =\r\n            ABViewCarouselPropertyComponentDefaults.showLabel;\r\n      }\r\n      try {\r\n         this.settings.hideItem = JSON.parse(this.settings.hideItem);\r\n      } catch (e) {\r\n         this.settings.hideItem =\r\n            ABViewCarouselPropertyComponentDefaults.hideItem;\r\n      }\r\n      try {\r\n         this.settings.hideButton = JSON.parse(this.settings.hideButton);\r\n      } catch (e) {\r\n         this.settings.hideButton =\r\n            ABViewCarouselPropertyComponentDefaults.hideButton;\r\n      }\r\n      this.settings.navigationType =\r\n         this.settings.navigationType ||\r\n         ABViewCarouselPropertyComponentDefaults.navigationType;\r\n      try {\r\n         this.settings.filterByCursor = JSON.parse(\r\n            this.settings.filterByCursor\r\n         );\r\n      } catch (e) {\r\n         this.settings.filterByCursor =\r\n            ABViewCarouselPropertyComponentDefaults.filterByCursor;\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method componentList\r\n    * return the list of components available on this view to display in the editor.\r\n    */\r\n   componentList() {\r\n      return [];\r\n   }\r\n\r\n   get imageField() {\r\n      let dc = this.datacollection;\r\n      if (!dc) return null;\r\n\r\n      let obj = dc.datasource;\r\n      if (!obj) return null;\r\n\r\n      return obj.fields((f) => f.id == this.settings.field)[0];\r\n   }\r\n};\r\n","const ABViewChartComponent = require(\"../../platform/views/ABViewChartComponent\");\r\n\r\nconst ABViewChartAreaPropertyComponentDefaults = {\r\n   areaType: \"area\",\r\n   isLegend: true,\r\n   // chartWidth: 600,\r\n   chartHeight: 0,\r\n   labelFontSize: 12,\r\n   stepValue: 20,\r\n   maxValue: 100,\r\n};\r\n\r\nconst ABViewDefaults = {\r\n   key: \"area\", // {string} unique key for this view\r\n   icon: \"area-chart\", // {string} fa-[icon] reference for this view\r\n   labelKey: \"ab.components.chart.area\", // {string} the multilingual label key for the class label\r\n};\r\n\r\nmodule.exports = class ABViewChartAreaCore extends ABViewChartComponent {\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(values, application, parent, defaultValues || ABViewDefaults);\r\n   }\r\n\r\n   static common() {\r\n      return ABViewDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return ABViewChartAreaPropertyComponentDefaults;\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /**\r\n    * @method fromValues()\r\n    *\r\n    * initialze this object with the given set of values.\r\n    * @param {obj} values\r\n    */\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n\r\n      this.settings.isLegend = JSON.parse(\r\n         this.settings.isLegend ||\r\n            ABViewChartAreaPropertyComponentDefaults.isLegend\r\n      );\r\n\r\n      // this.settings.chartWidth = parseInt(this.settings.chartWidth || ABViewChartAreaPropertyComponentDefaults.chartWidth);\r\n      this.settings.chartHeight = parseInt(\r\n         this.settings.chartHeight ||\r\n            ABViewChartAreaPropertyComponentDefaults.chartHeight\r\n      );\r\n\r\n      this.settings.labelFontSize = parseInt(\r\n         this.settings.labelFontSize ||\r\n            ABViewChartAreaPropertyComponentDefaults.labelFontSize\r\n      );\r\n      this.settings.stepValue = parseInt(\r\n         this.settings.stepValue ||\r\n            ABViewChartAreaPropertyComponentDefaults.stepValue\r\n      );\r\n      this.settings.maxValue = parseInt(\r\n         this.settings.maxValue ||\r\n            ABViewChartAreaPropertyComponentDefaults.maxValue\r\n      );\r\n\r\n      this.translate(this, this, [\"areaLabel\"]);\r\n   }\r\n\r\n   /**\r\n    * @method componentList\r\n    * return the list of components available on this view to display in the editor.\r\n    */\r\n   componentList() {\r\n      return [];\r\n   }\r\n};\r\n","const ABViewChartComponent = require(\"../../platform/views/ABViewChartComponent\");\r\n\r\nconst ABViewChartBarPropertyComponentDefaults = {\r\n   barType: \"bar\",\r\n   barPreset: \"column\",\r\n   isLegend: true,\r\n   // chartWidth: 600,\r\n   height: 200,\r\n   labelFontSize: 12,\r\n   stepValue: 20,\r\n   maxValue: 100,\r\n};\r\n\r\nconst ABViewDefaults = {\r\n   key: \"bar\", // {string} unique key for this view\r\n   icon: \"bar-chart\", // {string} fa-[icon] reference for this view\r\n   labelKey: \"ab.components.chart.bar\", // {string} the multilingual label key for the class label\r\n};\r\n\r\nmodule.exports = class ABViewChartBarCore extends ABViewChartComponent {\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(values, application, parent, defaultValues || ABViewDefaults);\r\n   }\r\n\r\n   static common() {\r\n      return ABViewDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return ABViewChartBarPropertyComponentDefaults;\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /**\r\n    * @method fromValues()\r\n    *\r\n    * initialze this object with the given set of values.\r\n    * @param {obj} values\r\n    */\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n\r\n      this.settings.isLegend = JSON.parse(\r\n         this.settings.isLegend ||\r\n            ABViewChartBarPropertyComponentDefaults.isLegend\r\n      );\r\n\r\n      // this.settings.chartWidth = parseInt(this.settings.chartWidth || ABViewChartBarPropertyComponentDefaults.chartWidth);\r\n      this.settings.height = parseInt(\r\n         this.settings.height || ABViewChartBarPropertyComponentDefaults.height\r\n      );\r\n\r\n      this.settings.labelFontSize = parseInt(\r\n         this.settings.labelFontSize ||\r\n            ABViewChartBarPropertyComponentDefaults.labelFontSize\r\n      );\r\n      this.settings.stepValue = parseInt(\r\n         this.settings.stepValue ||\r\n            ABViewChartBarPropertyComponentDefaults.stepValue\r\n      );\r\n      this.settings.maxValue = parseInt(\r\n         this.settings.maxValue ||\r\n            ABViewChartBarPropertyComponentDefaults.maxValue\r\n      );\r\n\r\n      this.translate(this, this, [\"barLabel\"]);\r\n   }\r\n\r\n   /**\r\n    * @method componentList\r\n    * return the list of components available on this view to display in the editor.\r\n    */\r\n   componentList() {\r\n      return [];\r\n   }\r\n};\r\n","const ABViewContainer = require(\"../../platform/views/ABViewContainer\");\r\n\r\nconst ABViewChartPropertyComponentDefaults = {\r\n   dataviewID: null,\r\n   columnValue: null,\r\n   columnLabel: null,\r\n   columnValue2: null,\r\n   isPercentage: true,\r\n   showLabel: true,\r\n   labelPosition: \"left\",\r\n   labelWidth: 120,\r\n   height: 200,\r\n   multipleSeries: false,\r\n};\r\n\r\nconst ABViewChartDefaults = {\r\n   key: \"chart\", // {string} unique key for this view\r\n   icon: \"bar-chart\", // {string} fa-[icon] reference for this view\r\n   labelKey: \"Chart\", // {string} the multilingual label key for the class label\r\n};\r\n\r\nmodule.exports = class ABViewChartCore extends ABViewContainer {\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(values, application, parent, defaultValues || ABViewChartDefaults);\r\n   }\r\n\r\n   static common() {\r\n      return ABViewChartDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return ABViewChartPropertyComponentDefaults;\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /**\r\n    * @method fromValues()\r\n    *\r\n    * initialze this object with the given set of values.\r\n    * @param {obj} values\r\n    */\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n\r\n      this.settings.isPercentage = JSON.parse(\r\n         this.settings.isPercentage ||\r\n            ABViewChartPropertyComponentDefaults.isPercentage\r\n      );\r\n\r\n      this.settings.labelPosition =\r\n         this.settings.labelPosition ||\r\n         ABViewChartPropertyComponentDefaults.labelPosition;\r\n\r\n      // convert from \"0\" => true/false\r\n      this.settings.showLabel = JSON.parse(\r\n         this.settings.showLabel != null\r\n            ? this.settings.showLabel\r\n            : ABViewChartPropertyComponentDefaults.showLabel\r\n      );\r\n      this.settings.multipleSeries = JSON.parse(\r\n         this.settings.multipleSeries != null\r\n            ? this.settings.multipleSeries\r\n            : ABViewChartPropertyComponentDefaults.multipleSeries\r\n      );\r\n\r\n      // convert from \"0\" => 0\r\n      this.settings.labelWidth = parseInt(\r\n         this.settings.labelWidth ||\r\n            ABViewChartPropertyComponentDefaults.labelWidth\r\n      );\r\n      this.settings.height = parseInt(\r\n         this.settings.height || ABViewChartPropertyComponentDefaults.height\r\n      );\r\n\r\n      this.translate(this, this, [\"chartLabel\"]);\r\n   }\r\n\r\n   /**\r\n    * @method componentList\r\n    * return the list of components available on this view to display in the editor.\r\n    */\r\n   componentList() {\r\n      var viewsToAllow = [\"label\", \"pie\", \"bar\", \"line\", \"area\"],\r\n         allComponents = this.application.viewAll(); // ABViewManager.allViews();\r\n\r\n      var ret = allComponents.filter((c) => {\r\n         return viewsToAllow.indexOf(c.common().key) > -1;\r\n      });\r\n      return ret;\r\n   }\r\n\r\n   labelField() {\r\n      var dc = this.datacollection;\r\n      if (!dc) return null;\r\n\r\n      var obj = dc.datasource;\r\n      if (!obj) return null;\r\n\r\n      return obj.fields((f) => f.id == this.settings.columnLabel)[0];\r\n   }\r\n\r\n   valueField() {\r\n      var dc = this.datacollection;\r\n      if (!dc) return null;\r\n\r\n      var obj = dc.datasource;\r\n      if (!obj) return null;\r\n\r\n      return obj.fields((f) => f.id == this.settings.columnValue)[0];\r\n   }\r\n\r\n   valueField2() {\r\n      var dc = this.datacollection;\r\n      if (!dc) return null;\r\n\r\n      var obj = dc.datasource;\r\n      if (!obj) return null;\r\n\r\n      return obj.fields((f) => f.id == this.settings.columnValue2)[0];\r\n   }\r\n};\r\n","const ABViewChartComponent = require(\"../../platform/views/ABViewChartComponent\");\r\n\r\nconst ABViewChartLinePropertyComponentDefaults = {\r\n   lineType: \"line\",\r\n   linePreset: \"plot\",\r\n   isLegend: true,\r\n   // chartWidth: 600,\r\n   chartHeight: 200,\r\n   labelFontSize: 12,\r\n   stepValue: 20,\r\n   maxValue: 100,\r\n};\r\n\r\nconst ABViewDefaults = {\r\n   key: \"line\", // {string} unique key for this view\r\n   icon: \"line-chart\", // {string} fa-[icon] reference for this view\r\n   labelKey: \"ab.components.chart.line\", // {string} the multilingual label key for the class label\r\n};\r\n\r\nmodule.exports = class ABViewChartLineCore extends ABViewChartComponent {\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(values, application, parent, defaultValues || ABViewDefaults);\r\n   }\r\n\r\n   static common() {\r\n      return ABViewDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return ABViewChartLinePropertyComponentDefaults;\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /**\r\n    * @method fromValues()\r\n    *\r\n    * initialze this object with the given set of values.\r\n    * @param {obj} values\r\n    */\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n\r\n      this.settings.isLegend = JSON.parse(\r\n         this.settings.isLegend ||\r\n            ABViewChartLinePropertyComponentDefaults.isLegend\r\n      );\r\n\r\n      // this.settings.chartWidth = parseInt(this.settings.chartWidth || ABViewChartLinePropertyComponentDefaults.chartWidth);\r\n      this.settings.chartHeight = parseInt(\r\n         this.settings.chartHeight ||\r\n            ABViewChartLinePropertyComponentDefaults.chartHeight\r\n      );\r\n\r\n      this.settings.labelFontSize = parseInt(\r\n         this.settings.labelFontSize ||\r\n            ABViewChartLinePropertyComponentDefaults.labelFontSize\r\n      );\r\n      this.settings.stepValue = parseInt(\r\n         this.settings.stepValue ||\r\n            ABViewChartLinePropertyComponentDefaults.stepValue\r\n      );\r\n      this.settings.maxValue = parseInt(\r\n         this.settings.maxValue ||\r\n            ABViewChartLinePropertyComponentDefaults.maxValue\r\n      );\r\n\r\n      this.translate(this, this, [\"lineLabel\"]);\r\n   }\r\n\r\n   /**\r\n    * @method componentList\r\n    * return the list of components available on this view to display in the editor.\r\n    */\r\n   componentList() {\r\n      return [];\r\n   }\r\n};\r\n","const ABViewChartComponent = require(\"../../platform/views/ABViewChartComponent\");\r\n\r\nconst ABViewChartPiePropertyComponentDefaults = {\r\n   pieType: \"pie\",\r\n   isLegend: true,\r\n   // chartWidth: 600,\r\n   height: 200,\r\n   innerFontSize: 12,\r\n   labelFontSize: 12,\r\n};\r\n\r\nconst ABViewDefaults = {\r\n   key: \"pie\", // {string} unique key for this view\r\n   icon: \"pie-chart\", // {string} fa-[icon] reference for this view\r\n   labelKey: \"ab.components.chart.pie\", // {string} the multilingual label key for the class label\r\n};\r\n\r\nmodule.exports = class ABViewChartPieCore extends ABViewChartComponent {\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(values, application, parent, defaultValues || ABViewDefaults);\r\n   }\r\n\r\n   static common() {\r\n      return ABViewDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return ABViewChartPiePropertyComponentDefaults;\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /**\r\n    * @method fromValues()\r\n    *\r\n    * initialze this object with the given set of values.\r\n    * @param {obj} values\r\n    */\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n\r\n      this.settings.isLegend = JSON.parse(\r\n         this.settings.isLegend ||\r\n            ABViewChartPiePropertyComponentDefaults.isLegend\r\n      );\r\n\r\n      // this.settings.chartWidth = parseInt(this.settings.chartWidth || ABViewChartPiePropertyComponentDefaults.chartWidth);\r\n      this.settings.height = parseInt(\r\n         this.settings.height || ABViewChartPiePropertyComponentDefaults.height\r\n      );\r\n\r\n      this.settings.innerFontSize = parseInt(\r\n         this.settings.innerFontSize ||\r\n            ABViewChartPiePropertyComponentDefaults.innerFontSize\r\n      );\r\n      this.settings.labelFontSize = parseInt(\r\n         this.settings.labelFontSize ||\r\n            ABViewChartPiePropertyComponentDefaults.labelFontSize\r\n      );\r\n\r\n      this.translate(this, this, [\"pieLabel\"]);\r\n   }\r\n\r\n   /**\r\n    * @method componentList\r\n    * return the list of components available on this view to display in the editor.\r\n    */\r\n   componentList() {\r\n      return [];\r\n   }\r\n};\r\n","const ABViewWidget = require(\"../../platform/views/ABViewWidget\");\r\n\r\nconst ABViewCommentPropertyComponentDefaults = {\r\n   dataviewID: null,\r\n   columnUser: null,\r\n   columnComment: null,\r\n   columnDate: null,\r\n   height: 300,\r\n   label: \"\", // label is required and you can add more if the component needs them\r\n   // format:0  \t// 0 - normal, 1 - title, 2 - description\r\n};\r\n\r\nconst ABViewDefaults = {\r\n   key: \"comment\", // {string} unique key for this view\r\n   icon: \"comments\", // {string} fa-[icon] reference for this view\r\n   labelKey: \"Comment\", // {string} the multilingual label key for the class label\r\n};\r\n\r\nmodule.exports = class ABViewCommentCore extends ABViewWidget {\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(values, application, parent, defaultValues || ABViewDefaults);\r\n   }\r\n\r\n   static common() {\r\n      return ABViewDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return ABViewCommentPropertyComponentDefaults;\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /**\r\n    * @method fromValues()\r\n    *\r\n    * initialze this object with the given set of values.\r\n    * @param {obj} values\r\n    */\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n\r\n      // convert from \"0\" => 0\r\n      // this.settings.format = parseInt(this.settings.format);\r\n      // if this is being instantiated on a read from the Property UI,\r\n      this.settings.height = parseInt(this.settings.height || 0);\r\n   }\r\n\r\n   /**\r\n    * @method componentList\r\n    * return the list of components available on this view to display in the editor.\r\n    */\r\n   componentList() {\r\n      return [];\r\n   }\r\n\r\n   getUserField() {\r\n      var dv = this.datacollection;\r\n      if (!dv) return null;\r\n\r\n      var obj = dv.datasource;\r\n      if (!obj) return null;\r\n\r\n      return obj.fields((f) => f.id == this.settings.columnUser)[0];\r\n   }\r\n\r\n   getCommentField() {\r\n      var dv = this.datacollection;\r\n      if (!dv) return null;\r\n\r\n      var obj = dv.datasource;\r\n      if (!obj) return null;\r\n\r\n      return obj.fields((f) => f.id == this.settings.columnComment)[0];\r\n   }\r\n\r\n   getDateField() {\r\n      var dv = this.datacollection;\r\n      if (!dv) return null;\r\n\r\n      var obj = dv.datasource;\r\n      if (!obj) return null;\r\n\r\n      return obj.fields((f) => f.id == this.settings.columnDate)[0];\r\n   }\r\n\r\n   getUserData() {\r\n      var userObject = this.getUsers();\r\n      var userList = [];\r\n\r\n      if (!userObject) return;\r\n\r\n      userObject.forEach((item, index) => {\r\n         var imageURL = \"\";\r\n         if (item.image) {\r\n            imageURL = \"/opsportal/image/UserProfile/\" + item.image;\r\n         }\r\n         var user = { id: index + 1, value: item.value, image: imageURL };\r\n         userList.push(user);\r\n      });\r\n      return userList;\r\n   }\r\n\r\n   model() {\r\n      let dv = this.datacollection;\r\n      if (!dv) return null; // TODO: refactor in v2\r\n\r\n      // get ABObject\r\n      let obj = dv.datasource;\r\n      if (obj == null) return null; // TODO: refactor in v2\r\n\r\n      // get ABModel\r\n      let model = dv.model; // already notified\r\n      if (!model) return null;\r\n\r\n      return model;\r\n   }\r\n};\r\n","const ABViewContainer = require(\"../../platform/views/ABViewContainer\");\r\n\r\nconst ABViewPropertyDefaults = {\r\n   dataviewID: null,\r\n   filterConditions: {},\r\n};\r\n\r\nconst ABViewDefaults = {\r\n   key: \"conditionalcontainer\", // unique key identifier for this ABView\r\n   icon: \"shield\", // icon reference: (without 'fa-' )\r\n   labelKey: \"Conditional Container\", // {string} the multilingual label key for the class label\r\n};\r\n\r\nmodule.exports = class ABViewConditionalContainerCore extends ABViewContainer {\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(values, application, parent, defaultValues || ABViewDefaults);\r\n\r\n      var L = this.AB.Multilingual.label;\r\n\r\n      // the conditional container always has 'If' and 'Else' panels\r\n      if (this.views((v) => v instanceof ABViewContainer).length < 2) {\r\n         // 'If' panel\r\n         var ifPanel = application.viewNew(\r\n            {\r\n               key: ABViewContainer.common().key,\r\n               label: L(\"If\", \"If\"),\r\n               settings: {\r\n                  removable: false,\r\n               },\r\n            },\r\n            application,\r\n            this\r\n         );\r\n         this._views.push(ifPanel);\r\n\r\n         // 'Else' panel\r\n         var elsePanel = application.viewNew(\r\n            {\r\n               key: ABViewContainer.common().key,\r\n               label: L(\"Else\", \"Else\"),\r\n               settings: {\r\n                  removable: false,\r\n               },\r\n            },\r\n            application,\r\n            this\r\n         );\r\n         this._views.push(elsePanel);\r\n      }\r\n   }\r\n\r\n   static common() {\r\n      return ABViewDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return ABViewPropertyDefaults;\r\n   }\r\n};\r\n","const ABViewWidget = require(\"../../platform/views/ABViewWidget\");\r\n\r\nconst ABViewConnectDataFilterPropertyComponentDefaults = {\r\n   dataviewID: null, // uuid of ABDatacollection\r\n   field: null, // uuid\r\n};\r\n\r\nconst ABViewDefaults = {\r\n   key: \"connect-data-filter\", // {string} unique key for this view\r\n   icon: \"filter\", // {string} fa-[icon] reference for this view\r\n   labelKey: \"Connected Data Filter\", // {string} the multilingual label key for the class label\r\n};\r\n\r\nmodule.exports = class ABViewConnectDataFilterCore extends ABViewWidget {\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(values, application, parent, defaultValues ?? ABViewDefaults);\r\n   }\r\n\r\n   static common() {\r\n      return ABViewDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return ABViewConnectDataFilterPropertyComponentDefaults;\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /**\r\n    * @method fromValues()\r\n    *\r\n    * initialze this object with the given set of values.\r\n    * @param {obj} values\r\n    */\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n   }\r\n\r\n   /**\r\n    * @method componentList\r\n    * return the list of components available on this view to display in the editor.\r\n    */\r\n   componentList() {\r\n      return [];\r\n   }\r\n\r\n};\r\n","/*\r\n * ABViewContainerCore\r\n *\r\n * An ABViewContainerCore defines a UI display component.\r\n *\r\n * A container might have multiple columns of display info.\r\n *\r\n */\r\n\r\nconst ABView = require(\"../../platform/views/ABView\");\r\n\r\n// function L(key, altText) {\r\n// \treturn AD.lang.label.getLabel(key) || altText;\r\n// }\r\n\r\nconst ABViewDefaults = {\r\n   key: \"viewcontainer\", // {string} unique key for this view\r\n   icon: \"braille\", // {string} fa-[icon] reference for this view\r\n   labelKey: \"Container\", // {string} the multilingual label key for the class label\r\n};\r\n\r\nconst ABPropertyComponentDefaults = {\r\n   columns: 1,\r\n   gravity: 1,\r\n};\r\n\r\nmodule.exports = class ABViewContainerCore extends ABView {\r\n   /**\r\n    * @param {obj} values  key=>value hash of ABView values\r\n    * @param {ABApplication} application the application object this view is under\r\n    * @param {ABView} parent the ABView this view is a child of. (can be null)\r\n    * @param {obj} defaultValues special sub class defined default values.\r\n    */\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(values, application, parent, defaultValues || ABViewDefaults);\r\n   }\r\n\r\n   static common() {\r\n      return ABViewDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return ABPropertyComponentDefaults;\r\n   }\r\n\r\n   /**\r\n    * @method fromValues()\r\n    *\r\n    * initialze this object with the given set of values.\r\n    * @param {obj} values\r\n    */\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n\r\n      // convert from \"0\" => 0\r\n      this.settings.columns = parseInt(\r\n         this.settings.columns || ABPropertyComponentDefaults.columns\r\n      );\r\n\r\n      if (typeof this.settings.gravity != \"undefined\") {\r\n         this.settings.gravity.map(function (gravity) {\r\n            return parseInt(gravity);\r\n         });\r\n      }\r\n\r\n      if (this.settings.removable != null) {\r\n         this.settings.removable = JSON.parse(this.settings.removable); // convert to boolean\r\n      } else {\r\n         this.settings.removable = true;\r\n      }\r\n\r\n      if (this.settings.movable != null) {\r\n         this.settings.movable = JSON.parse(this.settings.movable); // convert to boolean\r\n      } else {\r\n         this.settings.movable = true;\r\n      }\r\n   }\r\n\r\n   viewsSortByPosition() {\r\n      // Sort views from y, x positions\r\n      return this.views().sort((a, b) => {\r\n         if (a.position.y == b.position.y) return a.position.x - b.position.x;\r\n         else return a.position.y - b.position.y;\r\n      });\r\n   }\r\n\r\n   // saveReorder() {\r\n   //    return this.application.viewReorder(this);\r\n   // }\r\n};\r\n","/*\r\n * ABViewCore\r\n *\r\n * ABViewCore defines the common ABView structure that is shared between\r\n * the client and the server.  Mostly how it manages it's internal data, and\r\n * how it is related to the ABView classes.\r\n *\r\n */\r\n\r\nvar ABMLClass = require(\"../../platform/ABMLClass\");\r\n\r\nconst ABViewDefaults = {\r\n   key: \"view\", // {string} unique key for this view\r\n   icon: \"window-maximize\", // {string} fa-[icon] reference for this view\r\n   labelKey: \"ab.components.view\", // {string} the multilingual label key for the class label\r\n   tabicon: \"\", // no default tab icons\r\n};\r\n\r\nconst ABViewPropertyComponentDefaults = {\r\n   label: \"\",\r\n};\r\n\r\nmodule.exports = class ABViewCore extends ABMLClass {\r\n   /**\r\n    * @param {obj} values  key=>value hash of ABView values\r\n    * @param {ABApplication} application the application object this view is under\r\n    * @param {ABView} parent the ABView this view is a child of. (can be null)\r\n    */\r\n   constructor(values, application, parent, defaultValues) {\r\n      super([\"label\"], application.AB);\r\n\r\n      this.__events = [];\r\n      // keep track of any event listeners attached to this ABView object\r\n\r\n      this.defaults = defaultValues || ABViewDefaults;\r\n\r\n      this.application = application;\r\n\r\n      this.parent = parent || null;\r\n\r\n      this.warningsSilent = false;\r\n      // {bool}\r\n      // Should we suppress our configuration warnings?\r\n\r\n      this.fromValues(values);\r\n   }\r\n\r\n   static common() {\r\n      return ABViewDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return ABViewPropertyComponentDefaults;\r\n   }\r\n\r\n   /**\r\n    * @method newInstance()\r\n    * return a new instance of this ABView.\r\n    * @param {ABApplication} application  \t: the root ABApplication this view is under\r\n    * @param {ABView/ABApplication} parent\t: the parent object of this ABView.\r\n    * @return {ABView}\r\n    */\r\n   static newInstance(application, parent) {\r\n      console.error(\"!!! where is this being called???\");\r\n      // return a new instance from ABViewManager:\r\n      return application.viewNew(\r\n         { key: this.common().key },\r\n         application,\r\n         parent\r\n      ); // ABViewManager.newView({ key: this.common().key }, application, parent);\r\n   }\r\n\r\n   viewKey() {\r\n      return this.defaults.key;\r\n   }\r\n\r\n   viewIcon() {\r\n      return this.defaults.icon;\r\n   }\r\n\r\n   tabIcon() {\r\n      return this.defaults.tabicon;\r\n   }\r\n\r\n   /**\r\n    * @method toObj()\r\n    *\r\n    * properly compile the current state of this ABView instance\r\n    * into the values needed for saving to the DB.\r\n    *\r\n    * @return {json}\r\n    */\r\n   toObj() {\r\n      // // NOTE: ensure we have a uuid() set:\r\n      // if (!this.id) {\r\n      //    this.id = this.application.uuid();\r\n      // }\r\n\r\n      // this.application.unTranslate(this, this, [\"label\"]);\r\n\r\n      // MLClass translation\r\n      var obj = super.toObj();\r\n\r\n      var result = {\r\n         id: this.id,\r\n         type: this.type || \"view\",\r\n         key: this.key,\r\n         icon: this.icon,\r\n         tabicon: this.tabicon,\r\n         name: this.name,\r\n         settings: this.AB.cloneDeep(this.settings || {}),\r\n         accessLevels: this.accessLevels,\r\n         translations: obj.translations,\r\n      };\r\n\r\n      // encode our child view references\r\n      result.viewIDs = (this._views || []).map((v) => v.id).filter((id) => id);\r\n\r\n      if (this.position) result.position = this.position;\r\n\r\n      // encode our .isRoot() reference.\r\n      // (NOTE: this is set so our server side code can distinguish) between a .view\r\n      // and a root page:\r\n      // NOTE: we intentionally do NOT pull this out in .fromValues()\r\n      result.isRoot = this.isRoot();\r\n\r\n      return result;\r\n   }\r\n\r\n   /**\r\n    * @method fromValues()\r\n    *\r\n    * initialze this object with the given set of values.\r\n    * @param {obj} values\r\n    */\r\n   fromValues(values) {\r\n      this.id = values.id; // NOTE: only exists after .save()\r\n      // {string} .id\r\n      // the uuid of this ABObject Definition.\r\n\r\n      this.type = values.type || \"view\";\r\n      // {string} .type\r\n      // the type of ABDefinition this is.\r\n\r\n      this.key = values.key || this.viewKey();\r\n      // {string} .key\r\n      // the unique lookup key for our ABViewManager to create new\r\n      // instances of this object.\r\n\r\n      this.icon = values.icon || this.viewIcon();\r\n      // {string} .icon\r\n      // the font awesome icon reference for showing an icon for this\r\n      // view in the AppBuilder interface builder.\r\n\r\n      this.tabicon = values.tabicon || this.tabIcon();\r\n\r\n      this.name = values.name;\r\n      // {string} .name\r\n      // A name reference for this ABView. This is a reference that isn't\r\n      // translateable and will be used for lookups across languages.\r\n\r\n      // if this is being instantiated on a read from the Property UI,\r\n      // .label is coming in under .settings.label\r\n      values.settings = values.settings || {};\r\n      this.label = values.label || values.settings.label || \"?label?\";\r\n\r\n      this.settings = values.settings || {};\r\n      // {obj} .settings\r\n      // the property settings for this ABView\r\n\r\n      // make sure .settings.height is an int and not a string\r\n      this.settings.height = parseInt(this.settings.height || 0);\r\n\r\n      this.accessLevels = values.accessLevels || {};\r\n      // {obj} .accessLevels\r\n      // Hash: { ABRole.id : accessLevel }\r\n      // tracks the Role -> AccessLevel settings of this particular\r\n      // view.\r\n      // accessLevel: 0 : no access, 1 : view only, 2: full access\r\n\r\n      // let the MLClass now process the translations:\r\n      super.fromValues(values);\r\n\r\n      // If the View / DataCollection does not have a .name already,\r\n      // use the English label translation as the .name instead.\r\n      if (!this.name && Array.isArray(this.translations)) {\r\n         for (var i = 0; i < this.translations.length; i++) {\r\n            if (i == 0) {\r\n               // Use the first label found, in case there is no 'en'\r\n               this.name = this.translations[i].label;\r\n            }\r\n            if (this.translations[i].language_code == \"en\") {\r\n               // But the 'en' label will have final priority\r\n               this.name = this.translations[i].label;\r\n               break;\r\n            }\r\n         }\r\n      }\r\n\r\n      // default value for our label\r\n      if (this.label == \"?label?\") {\r\n         if (this.parent) {\r\n            this.label = this.parent.label + \".\" + this.defaults.key;\r\n         }\r\n      }\r\n\r\n      var views = [];\r\n      (values.viewIDs || []).forEach((id) => {\r\n         var def = this.AB.definitionByID(id);\r\n         if (def) {\r\n            views.push(this.application.viewNew(def, this.application, this));\r\n         } else {\r\n            this.AB.notify.builder(\r\n               new Error(\r\n                  `Application[${this.application.name}][${this.application.id}].View[${this.name}][${this.id}] references unknown View[${id}]`\r\n               ),\r\n               {\r\n                  context:\"ABViewCore:fromValues():values.viewIDs for each\",\r\n                  id\r\n               }\r\n            );\r\n         }\r\n      });\r\n      this._views = views;\r\n\r\n      // convert from \"0\" => 0\r\n      this.position = values.position || {};\r\n\r\n      if (this.position.x != null) this.position.x = parseInt(this.position.x);\r\n      if (this.position.y != null) this.position.y = parseInt(this.position.y);\r\n\r\n      this.position.dx = parseInt(this.position.dx || 1);\r\n      this.position.dy = parseInt(this.position.dy || 1);\r\n   }\r\n\r\n   isRoot() {\r\n      return this.parent == null || this.parent == this.application;\r\n   }\r\n\r\n   /**\r\n    * @method allParents()\r\n    *\r\n    * return an flatten array of all the ABViews parents\r\n    *\r\n    * @return {array}      array of ABViews\r\n    */\r\n   allParents() {\r\n      var parents = [];\r\n      var curView = this;\r\n\r\n      // add current view to array\r\n      parents.unshift(curView);\r\n\r\n      while (!curView.isRoot() && curView.parent) {\r\n         parents.unshift(curView.parent);\r\n\r\n         curView = curView.parent;\r\n      }\r\n\r\n      return parents;\r\n   }\r\n\r\n   /**\r\n    * @method isAccessibleForRoles()\r\n    * return true/false if this ABViewPage is accessible for one of the\r\n    * passed in ABRoles.\r\n    * @param {array[ABRole]} roles\r\n    *        an array of {ABRole} instances.\r\n    * @return {bool}\r\n    */\r\n   isAccessibleForRoles(roles) {\r\n      var foundRole = false;\r\n\r\n      var accessibleRoles = Object.keys(this.accessLevels) || [];\r\n      (roles || []).forEach((r) => {\r\n         if (accessibleRoles.indexOf(r.uuid || r) > -1) {\r\n            foundRole = true;\r\n         }\r\n      });\r\n\r\n      return foundRole;\r\n   }\r\n\r\n   /**\r\n    * @method getUserAccess()\r\n    *\r\n    * return the access level of the current user on the current view\r\n    *\r\n    * @return {integer}  // 0 = No Access // 1 = Read Only // 2 = Full Access\r\n    */\r\n   getUserAccess() {\r\n      // by default everyone has no access\r\n      var accessLevel = 0;\r\n\r\n      if (this.application.isAccessManaged) {\r\n         // check to see if the current users is the access manager\r\n         var isAccessManager = false;\r\n         // first check if manager is defined by their role\r\n         if (parseInt(this.application.accessManagers.useRole) == 1) {\r\n            // if so check if any of the user's role match the managers\r\n            this.AB.Account.roles().forEach((role) => {\r\n               if (\r\n                  this.application.accessManagers.role.indexOf(\r\n                     role.id || role.uuid\r\n                  ) > -1\r\n               ) {\r\n                  // if so set the access level to full access\r\n                  isAccessManager = true;\r\n                  accessLevel = 2;\r\n               }\r\n            });\r\n         }\r\n         // if the user isn't already set as the manager and the manager is defined by their account\r\n         if (\r\n            !isAccessManager &&\r\n            parseInt(this.application.accessManagers.useAccount) == 1\r\n         ) {\r\n            // check if the user's account matches the managers\r\n            if (\r\n               this.application.accessManagers.account.indexOf(\r\n                  this.AB.Account.uuid() + \"\"\r\n               ) > -1\r\n            ) {\r\n               // if so set the access level to full access\r\n               isAccessManager = true;\r\n               accessLevel = 2;\r\n            }\r\n         }\r\n\r\n         // if the user is not the manager check if the page has access levels defined for roles\r\n         if (\r\n            this.accessLevels &&\r\n            Object.keys(this.accessLevels).length > 0 &&\r\n            !isAccessManager\r\n         ) {\r\n            // check to see if the user's roles matches one of the roles defined\r\n            this.AB.Account.roles().forEach((role) => {\r\n               var currentRole = this.accessLevels[role.id || role.uuid];\r\n               if (currentRole && parseInt(currentRole) > accessLevel)\r\n                  // if the access level is higher than a previous role set to the new level\r\n                  accessLevel = parseInt(currentRole);\r\n            });\r\n         }\r\n      } else {\r\n         accessLevel = 2;\r\n      }\r\n\r\n      return accessLevel;\r\n   }\r\n\r\n   /**\r\n    * @method parentFormComponent\r\n    * return the closest form object this component is on.\r\n    */\r\n   parentFormComponent() {\r\n      var form = null;\r\n\r\n      var curr = this;\r\n      while (curr.key != \"form\" && !curr.isRoot() && curr.parent) {\r\n         curr = curr.parent;\r\n      }\r\n\r\n      if (curr.key == \"form\") {\r\n         form = curr;\r\n      }\r\n\r\n      return form;\r\n   }\r\n\r\n   /**\r\n    * @method parentDetailComponent\r\n    * return the closest detail object that this component is on.\r\n    * @returns {ABViewDetail} detail component\r\n    */\r\n   parentDetailComponent() {\r\n      var detail = null;\r\n\r\n      var curr = this;\r\n      while (curr.key != \"detail\" && !curr.isRoot() && curr.parent) {\r\n         curr = curr.parent;\r\n      }\r\n\r\n      if (curr.key == \"detail\") {\r\n         detail = curr;\r\n      }\r\n\r\n      return detail;\r\n   }\r\n\r\n   pageParent(filterFn) {\r\n      if (filterFn == null) filterFn = () => true;\r\n\r\n      // if current page is the root page, then return itself.\r\n      if (this.isRoot()) {\r\n         return this;\r\n      }\r\n\r\n      var parentPage = this.parent;\r\n      while (\r\n         parentPage &&\r\n         (parentPage.key != \"page\" || !filterFn(parentPage))\r\n      ) {\r\n         parentPage = parentPage.parent;\r\n      }\r\n\r\n      return parentPage;\r\n   }\r\n\r\n   pageRoot() {\r\n      var rootPage = this.pageParent();\r\n\r\n      while (!rootPage.isRoot()) {\r\n         rootPage = rootPage.pageParent();\r\n      }\r\n\r\n      return rootPage;\r\n   }\r\n\r\n   /**\r\n    * @method urlPointer()\r\n    * return the url pointer that references this view.  This url pointer\r\n    * should be able to be used by this.application.urlResolve() to return\r\n    * this view object.\r\n    * @return {string}\r\n    */\r\n   urlPointer() {\r\n      if (this.parent) {\r\n         return this.parent.urlView() + this.id;\r\n      } else {\r\n         return this.application.urlPage() + this.id;\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method urlView\r\n    * return a string pointer to this object's views.\r\n    * @return {string}\r\n    */\r\n   urlView() {\r\n      return this.urlPointer() + \"/_views/\";\r\n   }\r\n\r\n   /**\r\n    * @property datacollection\r\n    * return data source\r\n    *\r\n    * @return {ABDataCollection}\r\n    */\r\n   get datacollection() {\r\n      let dataviewID = (this.settings || {}).dataviewID;\r\n      if (!dataviewID) {\r\n         if (\r\n            [\"form\", \"grid\", \"line\", \"area\", \"bar\", \"gantt\", \"kanban\"].indexOf(\r\n               this.key\r\n            ) > -1\r\n         ) {\r\n            // NOTE: ignore kanban side forms where this is the case:\r\n            if (this.key == \"form\" && this._currentObject) return null;\r\n\r\n            if (this.warningsSilent) return null;\r\n\r\n            var errNoDCID = new Error(\r\n               `ABViewCore:get datacollection(): View[${this.key}] didn't define a dataviewID.`\r\n            );\r\n            this.AB.notify.builder(errNoDCID, {\r\n               view: this,\r\n               settings: this.settings,\r\n            });\r\n         } else {\r\n            // These views shouldn't matter if they don't have a datacollection.\r\n            if ([\"page\", \"viewcontainer\"].indexOf(this.key) == -1) {\r\n               console.warn(\r\n                  `TODO: figure out which ABView* require a .dataviewID: ${this.key}?`\r\n               );\r\n            }\r\n         }\r\n         return null;\r\n      }\r\n\r\n      var dc = this.AB.datacollectionByID(dataviewID);\r\n      if (!dc) {\r\n         var errNoDC = new Error(\r\n            `View[${this.label}][${this.id}] is unable to find associated DataCollection`\r\n         );\r\n         this.AB.notify.builder(errNoDC, {\r\n            view: this,\r\n            dataviewID,\r\n         });\r\n      }\r\n      return dc;\r\n   }\r\n\r\n   ///\r\n   /// Update Access accessLevels\r\n   ///\r\n\r\n   /**\r\n    * @method updateAccessLevels()\r\n    *\r\n    *\r\n    * @param {string} roleId\r\n    *\r\n    * @param {string} accessLevel\r\n    *\r\n    * @return {Promise}\r\n    *\r\n    */\r\n   updateAccessLevels(roleId, accessLevel) {\r\n      if (parseInt(accessLevel) == 0) {\r\n         if (this.accessLevels[roleId]) delete this.accessLevels[roleId];\r\n      } else {\r\n         this.accessLevels[roleId] = accessLevel;\r\n      }\r\n\r\n      return this.save(false, false);\r\n   }\r\n\r\n   ///\r\n   /// Views\r\n   ///\r\n\r\n   /**\r\n    * @method views()\r\n    *\r\n    * return an array of all the ABViews children\r\n    *\r\n    * @param {fn} filter  \ta filter fn to return a set of ABViews that this fn\r\n    *\t\t\t\t\t\treturns true for.\r\n    * @param {boolean} deep\r\n    *\r\n    * @return {array} \tarray of ABViews\r\n    */\r\n   views(filter = () => true, deep = false) {\r\n      var result = [];\r\n\r\n      if (!this._views || this._views.length < 1) return result;\r\n\r\n      // find into recursively\r\n      if (filter && deep) {\r\n         result = result.concat(this._views.filter(filter));\r\n\r\n         this._views.forEach((v) => {\r\n            var subViews = v.views(filter, deep);\r\n            if (subViews && subViews.length > 0) {\r\n               result = result.concat(subViews);\r\n            }\r\n         });\r\n      } else {\r\n         result = this._views.filter(filter);\r\n      }\r\n\r\n      return result;\r\n   }\r\n\r\n   /**\r\n    * @method viewNew()\r\n    *\r\n    *\r\n    * @return {ABView}\r\n    */\r\n   viewNew(values, application, parent) {\r\n      return this.application.viewNew(\r\n         values,\r\n         application || this.application,\r\n         parent || this\r\n      );\r\n   }\r\n\r\n   /**\r\n    * @method viewDestroy()\r\n    *\r\n    * remove the current ABView from our list of ._views.\r\n    *\r\n    * @param {ABView} view\r\n    * @return {Promise}\r\n    */\r\n   viewDestroy(view) {\r\n      console.error(\"DEPRECIATED: where is this called?\");\r\n      return this.viewRemove(view);\r\n   }\r\n\r\n   /**\r\n    * @method viewRemove()\r\n    *\r\n    * remove the current ABView from our list of ._views.\r\n    *\r\n    * @param {ABView} view\r\n    * @return {Promise}\r\n    */\r\n   viewRemove(view) {\r\n      var origLen = this._views.length;\r\n      this._views = this.views(function (v) {\r\n         return v.id != view.id;\r\n      });\r\n\r\n      if (this._views.length < origLen) {\r\n         return this.save();\r\n      }\r\n\r\n      return Promise.resolve();\r\n   }\r\n\r\n   /**\r\n    * @method viewInsert()\r\n    *\r\n    * persist the current ABView in our list of ._views.\r\n    *\r\n    * @param {ABView} object\r\n    * @return {Promise}\r\n    */\r\n   viewInsert(view) {\r\n      var isIncluded =\r\n         this.views(function (v) {\r\n            return v.id == view.id;\r\n         }).length > 0;\r\n      if (!isIncluded) {\r\n         this._views.push(view);\r\n         return this.save();\r\n      }\r\n\r\n      return Promise.resolve();\r\n   }\r\n\r\n   /**\r\n    * @method viewReorder()\r\n    *\r\n    * reorder the current ABView in our list of ._views.\r\n    *\r\n    * @param {string} viewId - id of the active view\r\n    * @param {string} toPosition - 'to' postion\r\n    * @return {Promise}\r\n    */\r\n   viewReorder(viewId, toPosition) {\r\n      var from = this._views.findIndex((v) => v.id == viewId);\r\n      if (from < 0) return;\r\n\r\n      // move drag item to 'to' position\r\n      this._views.splice(toPosition, 0, this._views.splice(from, 1)[0]);\r\n\r\n      // save to database\r\n      return this.save(true);\r\n   }\r\n\r\n   /// ABApplication data methods\r\n\r\n   /**\r\n    * @method destroy()\r\n    *\r\n    * destroy the current instance of ABApplication\r\n    *\r\n    * also remove it from our _AllApplications\r\n    *\r\n    * @return {Promise}\r\n    */\r\n   destroy() {\r\n      // unsubscribe events\r\n      this.eventClear(true);\r\n\r\n      return Promise.resolve()\r\n         .then(() => {\r\n            // When deleting an ABView\r\n            // be sure to remove any of it's ABViews as well\r\n            // This cleans out any dangling ABDefinitions\r\n\r\n            var allViewDeletes = [];\r\n            var allViews = this.views();\r\n            this._views = [];\r\n            // doing ._views = [] prevents any of my updates when\r\n            // a sub-view is .destroy()ed\r\n\r\n            allViews.forEach((v) => {\r\n               allViewDeletes.push(v.destroy());\r\n            });\r\n            return Promise.all(allViewDeletes);\r\n         })\r\n         .then(() => {\r\n            // NOTE: this should not happen on ABViewPage objects\r\n            if (this.parent && !this.pages) {\r\n               return this.parent.viewRemove(this);\r\n            }\r\n         })\r\n         .then(() => {\r\n            return super.destroy();\r\n         })\r\n         .then(() => {\r\n            this.emit(\"destroyed\");\r\n         });\r\n   }\r\n\r\n   /**\r\n    * @method save()\r\n    * persist this instance of ABView\r\n    * @return {Promise}\r\n    *\t\t.resolve( {this} )\r\n    */\r\n   save() {\r\n      return Promise.resolve()\r\n         .then(() => {\r\n            // this creates our .id\r\n            return super.save();\r\n         })\r\n         .then(() => {\r\n            // NOTE: this should not happen on ABViewPage objects:\r\n            if (this.parent && !this.pages) {\r\n               // if we have a .parent, make sure we are included in our .parent's\r\n               // viewIDs\r\n               return this.parent.viewInsert(this);\r\n            }\r\n         })\r\n         .then(() => {\r\n            return this;\r\n         });\r\n   }\r\n\r\n   ///\r\n   /// Events\r\n   ///\r\n\r\n   /**\r\n    * @method eventAdd()\r\n    *\r\n    *\r\n    *\r\n    * @param {object} evt - {\r\n    * \t\t\t\t\t\t\temitter: object,\r\n    * \t\t\t\t\t\t\teventName: string,\r\n    * \t\t\t\t\t\t\tlistener: function\r\n    * \t\t\t\t\t\t}\r\n    */\r\n   eventAdd(evt) {\r\n      if (!evt || !evt.emitter || !evt.listener) return;\r\n\r\n      var exists = this.__events.find((e) => {\r\n         return e.emitter == evt.emitter && e.eventName == evt.eventName;\r\n         // && e.listener == evt.listener;\r\n      });\r\n\r\n      if (!exists || exists.length < 1) {\r\n         // add to array\r\n         this.__events.push({\r\n            emitter: evt.emitter,\r\n            eventName: evt.eventName,\r\n            listener: evt.listener,\r\n         });\r\n\r\n         // listening this event\r\n         evt.emitter.on(evt.eventName, evt.listener);\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method eventClear()\r\n    * unsubscribe all events.\r\n    * should do it before destroy a component\r\n    *\r\n    * @param {bool} deep - clear events of child views\r\n    */\r\n   eventClear(deep) {\r\n      if (deep) {\r\n         this.views().forEach((v) => {\r\n            v.eventClear(deep);\r\n         });\r\n      }\r\n\r\n      if (this.__events && this.__events.length > 0) {\r\n         this.__events.forEach((e) => {\r\n            e.emitter.removeListener(e.eventName, e.listener);\r\n         });\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method clone()\r\n    * clone the definitions of this ABView object.\r\n    * @param {obj} lookUpIds\r\n    *        an { oldID : newID } lookup hash for converting ABView objects\r\n    *        and their setting pointers.\r\n    * @param {ABView*} parent\r\n    *        Which ABView should be connected as the parent object of this\r\n    *        copy.\r\n    * @param {obj} options\r\n    *        option settings for the copy command.\r\n    *        options.ignoreSubPages {bool}\r\n    *             set to true to skip copying any sub pages of this ABView.\r\n    * @return {obj}\r\n    *        obj defs of this ABView\r\n    */\r\n   clone(lookUpIds, parent, options = {}) {\r\n      lookUpIds = lookUpIds || {};\r\n\r\n      // get settings of the target\r\n      let config = this.toObj();\r\n\r\n      // remove sub-elements property\r\n      [\"pages\", \"views\"].forEach((prop) => {\r\n         delete config[prop];\r\n      });\r\n\r\n      // update id of linked components\r\n      if (this.copyUpdateProperyList) {\r\n         (this.copyUpdateProperyList() || []).forEach((prop) => {\r\n            if (config && config.settings)\r\n               config.settings[prop] = lookUpIds[config.settings[prop]];\r\n         });\r\n      }\r\n\r\n      // copy from settings\r\n      let result = this.viewNew(config, this.application, parent);\r\n\r\n      // change id\r\n      if (parent == null) {\r\n         // the page is getting cloned to root: there is no parent, as parent is the application\r\n         result.id = null;\r\n      } else {\r\n         result.id = lookUpIds[result.id] || this.AB.uuid();\r\n      }\r\n\r\n      // copy sub pages\r\n      if (this.pages && !options.ignoreSubPages) {\r\n         result._pages = [];\r\n         this.pages().forEach((p) => {\r\n            let copiedSubPage = p.clone(lookUpIds, result, options);\r\n            copiedSubPage.parent = result;\r\n\r\n            result._pages.push(copiedSubPage);\r\n         });\r\n      }\r\n\r\n      // copy sub views\r\n      if (this.views && !options.ignoreSubViews) {\r\n         result._views = [];\r\n         this.views().forEach((v) => {\r\n            let copiedView = v.clone(lookUpIds, result, options);\r\n\r\n            result._views.push(copiedView);\r\n         });\r\n      }\r\n\r\n      return result;\r\n   }\r\n\r\n   /**\r\n    * @method copy()\r\n    * create a new copy of this ABView object. The resulting ABView should\r\n    * be identical in settings and all sub pages/views, but each new object\r\n    * is a unique view (different ids).\r\n    * @param {obj} lookUpIds\r\n    *        an { oldID : newID } lookup hash for converting ABView objects\r\n    *        and their setting pointers.\r\n    * @param {ABView*} parent\r\n    *        Which ABView should be connected as the parent object of this\r\n    *        copy.\r\n    * @param {obj} options\r\n    *        option settings for the copy command.\r\n    *        options.ignoreSubPages {bool}\r\n    *             set to true to skip copying any sub pages of this ABView.\r\n    *        options.newName {string}\r\n    *             new user determined name for page\r\n    * @return {Promise}\r\n    *        .resolved with the instance of the copied ABView\r\n    */\r\n   copy(lookUpIds, parent, options = {}) {\r\n      lookUpIds = lookUpIds || {};\r\n\r\n      // get settings of the target\r\n      let config = this.toObj();\r\n\r\n      // remove sub-elements property\r\n      [\"pageIDs\", \"viewIDs\"].forEach((prop) => {\r\n         delete config[prop];\r\n      });\r\n\r\n      // update id of linked components\r\n      if (this.copyUpdateProperyList) {\r\n         (this.copyUpdateProperyList() || []).forEach((prop) => {\r\n            if (config && config.settings)\r\n               config.settings[prop] = lookUpIds[config.settings[prop]];\r\n         });\r\n      }\r\n\r\n      // copy from settings\r\n      let result = this.application.viewNew(config, this.application, parent);\r\n\r\n      // keep the parent\r\n      result.parent = parent || this.parent;\r\n\r\n      // change id\r\n      if (parent == null) {\r\n         // the page is getting cloned to root: there is no parent, as parent is the application.\r\n         // pages with null parent ids default to getting put on root\r\n         result.id = null;\r\n      } else {\r\n         result.id = lookUpIds[result.id] || this.AB.uuid();\r\n      }\r\n\r\n      // page's name should not be duplicate\r\n      if (this.key == \"page\") {\r\n         result.name =\r\n            options?.newName ||\r\n            `${result.name}_copied_${this.AB.uuid().slice(0, 3)}`;\r\n\r\n         result.label = options?.newName || `${result.label} (copied)`;\r\n      }\r\n\r\n      return Promise.resolve()\r\n         .then(() => {\r\n            // copy sub pages\r\n            var allSaves = [];\r\n\r\n            if (this._pages && !options.ignoreSubPages) {\r\n               result._pages = [];\r\n               this.pages().forEach((p) => {\r\n                  // this prevents result.save() from happening on each of these\r\n                  // p.copy():\r\n                  if (p.isRoot())\r\n                     this.application._pages.push({ id: lookUpIds[p.id] });\r\n\r\n                  allSaves.push(\r\n                     p\r\n                        .copy(lookUpIds, result, options)\r\n                        .then((copiedSubPage) => {\r\n                           copiedSubPage.parent = result;\r\n                           // remove the temp {id:} entry above:\r\n                           this.application._pages = this.application._pages.filter(\r\n                              (p2) => p2.id != lookUpIds[p.id]\r\n                           );\r\n\r\n                           // now add the full copiedSubPage:\r\n                           result._pages.push(copiedSubPage);\r\n                        })\r\n                  );\r\n               });\r\n            }\r\n\r\n            return Promise.all(allSaves);\r\n         })\r\n         .then(() => {\r\n            // copy sub views\r\n            var allSaves = [];\r\n\r\n            if (this._views && !options.ignoreSubViews) {\r\n               result._views = [];\r\n               this.views().forEach((v) => {\r\n                  allSaves.push(\r\n                     // send a null for parent, so that the .save() wont trigger\r\n                     // a save of the parent.\r\n                     v.copy(lookUpIds, result, options).then((copiedView) => {\r\n                        // now patch up the parent connection:\r\n                        // copiedView.parent = result;\r\n                        if (\r\n                           result._views.filter((vi) => vi.id == copiedView.id)\r\n                              .length < 1\r\n                        ) {\r\n                           result._views.push(copiedView);\r\n                        }\r\n                     })\r\n                  );\r\n               });\r\n            }\r\n\r\n            return Promise.all(allSaves);\r\n         })\r\n         .then(() => {\r\n            // now we do 1 save for all the views\r\n            return result.save();\r\n         })\r\n         .then(() => {\r\n            return result;\r\n         });\r\n   }\r\n};\r\n","const ABViewDetail = require(\"../../platform/views/ABViewDetail\");\r\n\r\nconst ABViewDataviewPropertyComponentDefaults = {\r\n   xCount: 1, // {int} the number of columns per row (need at least one)\r\n   detailsPage: \"\",\r\n   detailsTab: \"\",\r\n   editPage: \"\",\r\n   editTab: \"\",\r\n};\r\n\r\nconst ABViewDataviewDefaults = {\r\n   key: \"dataview\", // {string} unique key for this view\r\n   icon: \"th\", // {string} fa-[icon] reference for this view\r\n   labelKey: \"Data view\", // {string} the multilingual label key for the class label\r\n};\r\n\r\nmodule.exports = class ABViewDataviewCore extends ABViewDetail {\r\n   /**\r\n    * @param {obj} values  key=>value hash of ABView values\r\n    * @param {ABApplication} application the application object this view is under\r\n    * @param {ABView} parent the ABView this view is a child of. (can be null)\r\n    */\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(\r\n         values,\r\n         application,\r\n         parent,\r\n         defaultValues || ABViewDataviewDefaults\r\n      );\r\n   }\r\n\r\n   static common() {\r\n      return ABViewDataviewDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return ABViewDataviewPropertyComponentDefaults;\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /**\r\n    * @method fromValues()\r\n    *\r\n    * initialze this object with the given set of values.\r\n    * @param {obj} values\r\n    */\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n\r\n      this.settings.xCount = parseInt(\r\n         this.settings.xCount || ABViewDataviewPropertyComponentDefaults.xCount\r\n      );\r\n      this.settings.detailsPage =\r\n         this.settings.detailsPage ||\r\n         ABViewDataviewPropertyComponentDefaults.detailsPage;\r\n      this.settings.editPage =\r\n         this.settings.editPage ||\r\n         ABViewDataviewPropertyComponentDefaults.editPage;\r\n      this.settings.detailsTab =\r\n         this.settings.detailsTab ||\r\n         ABViewDataviewPropertyComponentDefaults.detailsTab;\r\n      this.settings.editTab =\r\n         this.settings.editTab ||\r\n         ABViewDataviewPropertyComponentDefaults.editTab;\r\n   }\r\n};\r\n","const ABViewDetailComponent = require(\"../../platform/views/ABViewDetailComponent\");\r\n\r\nconst ABViewDetailCheckboxPropertyComponentDefaults = {};\r\n\r\nconst ABViewDetailCheckboxDefaults = {\r\n   key: \"detailcheckbox\", // {string} unique key for this view\r\n   icon: \"check-square-o\", // {string} fa-[icon] reference for this view\r\n   labelKey: \"ab.components.detail.checkbox\", // {string} the multilingual label key for the class label\r\n};\r\n\r\nmodule.exports = class ABViewDetailCheckboxCore extends ABViewDetailComponent {\r\n   /**\r\n    * @param {obj} values  key=>value hash of ABView values\r\n    * @param {ABApplication} application the application object this view is under\r\n    * @param {ABView} parent the ABView this view is a child of. (can be null)\r\n    */\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(\r\n         values,\r\n         application,\r\n         parent,\r\n         defaultValues || ABViewDetailCheckboxDefaults\r\n      );\r\n   }\r\n\r\n   static common() {\r\n      return ABViewDetailCheckboxDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return ABViewDetailCheckboxPropertyComponentDefaults;\r\n   }\r\n\r\n   /*\r\n    * @method componentList\r\n    * return the list of components available on this view to display in the editor.\r\n    */\r\n   componentList() {\r\n      return [];\r\n   }\r\n};\r\n","const ABViewWidget = require(\"../../platform/views/ABViewWidget\");\r\n\r\nmodule.exports = class ABViewDetailComponentCore extends ABViewWidget {\r\n   // constructor(values, application, parent, defaultValues) {\r\n   //    super(values, application, parent, defaultValues);\r\n   // }\r\n\r\n   detailComponent() {\r\n      var detailView = null;\r\n\r\n      var curr = this;\r\n      while (\r\n         !curr.isRoot() &&\r\n         curr.parent &&\r\n         curr.key != \"detail\" &&\r\n         curr.key != \"dataview\"\r\n      ) {\r\n         curr = curr.parent;\r\n      }\r\n\r\n      if (curr.key == \"detail\" || curr.key == \"dataview\") {\r\n         detailView = curr;\r\n      }\r\n\r\n      return detailView;\r\n   }\r\n\r\n   field() {\r\n      let detailComponent = this.detailComponent();\r\n      if (detailComponent == null) return null;\r\n\r\n      let datacollection = detailComponent.datacollection;\r\n      if (datacollection == null) return null;\r\n\r\n      let object = datacollection.datasource;\r\n      if (object == null) return null;\r\n\r\n      let field = object.fields((v) => v.id == this.settings.fieldId)[0];\r\n\r\n      // set .alias to support queries that contains alias name\r\n      // [aliasName].[columnName]\r\n      if (field && this.settings.alias) {\r\n         field.alias = this.settings.alias;\r\n      }\r\n\r\n      return field;\r\n   }\r\n\r\n   getCurrentData() {\r\n      var detailCom = this.detailComponent();\r\n      if (!detailCom) return null;\r\n\r\n      var dv = detailCom.datacollection;\r\n      if (!dv) return null;\r\n\r\n      var field = this.field();\r\n      if (!field) return null;\r\n\r\n      var currData = dv.getCursor();\r\n      if (currData) return currData[field.columnName];\r\n      else return null;\r\n   }\r\n};\r\n","// const ABViewDetailSelectivity = require(\"../../platform/views/ABViewDetailSelectivity\");\r\nconst ABViewDetailComponent = require(\"../../platform/views/ABViewDetailComponent\");\r\n\r\nconst ABViewDetailPropertyComponentDefaults = {\r\n   formView: \"\", // id of form to add new data\r\n};\r\n\r\nconst ABViewDefaults = {\r\n   key: \"detailconnect\", // {string} unique key for this view\r\n   icon: \"list-ul\", // {string} fa-[icon] reference for this view\r\n   labelKey: \"ab.components.detail.connect\", // {string} the multilingual label key for the class label\r\n};\r\n\r\nmodule.exports = class ABViewDetailConnectCore extends ABViewDetailComponent {\r\n   /**\r\n    * @param {obj} values  key=>value hash of ABView values\r\n    * @param {ABApplication} application the application object this view is under\r\n    * @param {ABView} parent the ABView this view is a child of. (can be null)\r\n    */\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(values, application, parent, defaultValues || ABViewDefaults);\r\n   }\r\n\r\n   static common() {\r\n      return ABViewDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return ABViewDetailPropertyComponentDefaults;\r\n   }\r\n};\r\n","const ABViewContainer = require(\"../../platform/views/ABViewContainer\");\r\n\r\nconst ABViewDetailDefaults = {\r\n   key: \"detail\", // {string} unique key for this view\r\n   icon: \"file-text-o\", // {string} fa-[icon] reference for this view\r\n   labelKey: \"Detail\", // {string} the multilingual label key for the class label\r\n};\r\n\r\nconst ABViewDetailPropertyComponentDefaults = {\r\n   dataviewID: null,\r\n   showLabel: true,\r\n   labelPosition: \"left\",\r\n   labelWidth: 120,\r\n   height: 0,\r\n};\r\n\r\nmodule.exports = class ABViewDetailCore extends ABViewContainer {\r\n   /**\r\n    * @param {obj} values  key=>value hash of ABView values\r\n    * @param {ABApplication} application the application object this view is under\r\n    * @param {ABView} parent the ABView this view is a child of. (can be null)\r\n    */\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(values, application, parent, defaultValues || ABViewDetailDefaults);\r\n   }\r\n\r\n   static common() {\r\n      return ABViewDetailDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return ABViewDetailPropertyComponentDefaults;\r\n   }\r\n\r\n   /**\r\n    * @method fromValues()\r\n    *\r\n    * initialze this object with the given set of values.\r\n    * @param {obj} values\r\n    */\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n\r\n      this.settings.labelPosition =\r\n         this.settings.labelPosition ||\r\n         ABViewDetailPropertyComponentDefaults.labelPosition;\r\n\r\n      // convert from \"0\" => true/false\r\n      this.settings.showLabel = JSON.parse(\r\n         this.settings.showLabel != null\r\n            ? this.settings.showLabel\r\n            : ABViewDetailPropertyComponentDefaults.showLabel\r\n      );\r\n\r\n      // convert from \"0\" => 0\r\n      this.settings.labelWidth = parseInt(\r\n         this.settings.labelWidth ||\r\n            ABViewDetailPropertyComponentDefaults.labelWidth\r\n      );\r\n      this.settings.height = parseInt(\r\n         this.settings.height || ABViewDetailPropertyComponentDefaults.height\r\n      );\r\n   }\r\n\r\n   /**\r\n    * @method componentList\r\n    * return the list of components available on this view to display in the editor.\r\n    */\r\n   componentList() {\r\n      var viewsToAllow = [\"label\", \"text\"],\r\n         allComponents = this.application.viewAll();\r\n\r\n      return allComponents.filter((c) => {\r\n         return viewsToAllow.indexOf(c.common().key) > -1;\r\n      });\r\n   }\r\n};\r\n","const ABViewDetailComponent = require(\"../../platform/views/ABViewDetailComponent\");\r\n\r\nconst ABViewDetailCustomPropertyComponentDefaults = {};\r\n\r\nconst ABViewDetailCustomDefaults = {\r\n   key: \"detailcustom\", // {string} unique key for this view\r\n   icon: \"dot-circle-o\", // {string} fa-[icon] reference for this view\r\n   labelKey: \"ab.components.detail.custom\", // {string} the multilingual label key for the class label\r\n};\r\n\r\nmodule.exports = class ABViewDetailCustomCore extends ABViewDetailComponent {\r\n   /**\r\n    * @param {obj} values  key=>value hash of ABView values\r\n    * @param {ABApplication} application the application object this view is under\r\n    * @param {ABView} parent the ABView this view is a child of. (can be null)\r\n    */\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(\r\n         values,\r\n         application,\r\n         parent,\r\n         defaultValues || ABViewDetailCustomDefaults\r\n      );\r\n   }\r\n\r\n   static common() {\r\n      return ABViewDetailCustomDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return ABViewDetailCustomPropertyComponentDefaults;\r\n   }\r\n\r\n   /*\r\n    * @method componentList\r\n    * return the list of components available on this view to display in the editor.\r\n    */\r\n   componentList() {\r\n      return [];\r\n   }\r\n};\r\n","const ABViewDetailComponent = require(\"../../platform/views/ABViewDetailComponent\");\r\n\r\nconst ABViewDetailImagePropertyComponentDefaults = {\r\n   height: 80,\r\n   width: 120,\r\n};\r\n\r\nconst ABViewDetailImageDefaults = {\r\n   key: \"detailimage\", // {string} unique key for this view\r\n   icon: \"image\", // {string} fa-[icon] reference for this view\r\n   labelKey: \"ab.components.detail.image\", // {string} the multilingual label key for the class label\r\n};\r\n\r\nmodule.exports = class ABViewDetailImageCore extends ABViewDetailComponent {\r\n   /**\r\n    * @param {obj} values  key=>value hash of ABView values\r\n    * @param {ABApplication} application the application object this view is under\r\n    * @param {ABView} parent the ABView this view is a child of. (can be null)\r\n    */\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(\r\n         values,\r\n         application,\r\n         parent,\r\n         defaultValues || ABViewDetailImageDefaults\r\n      );\r\n   }\r\n\r\n   static common() {\r\n      return ABViewDetailImageDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return ABViewDetailImagePropertyComponentDefaults;\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /**\r\n    * @method fromValues()\r\n    *\r\n    * initialze this object with the given set of values.\r\n    * @param {obj} values\r\n    */\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n\r\n      // convert from \"0\" => 0\r\n      this.settings.height = parseInt(\r\n         this.settings.height ||\r\n            ABViewDetailImagePropertyComponentDefaults.height\r\n      );\r\n      this.settings.width = parseInt(\r\n         this.settings.width || ABViewDetailImagePropertyComponentDefaults.width\r\n      );\r\n   }\r\n\r\n   /**\r\n    * @method componentList\r\n    * return the list of components available on this view to display in the editor.\r\n    */\r\n   componentList() {\r\n      return [];\r\n   }\r\n};\r\n","const ABViewDetailComponent = require(\"../../platform/views/ABViewDetailComponent\");\r\n\r\nconst ABViewDetailTextPropertyComponentDefaults = {\r\n   height: 0,\r\n};\r\n\r\nconst ABViewDetailTextDefaults = {\r\n   key: \"detailtext\", // {string} unique key for this view\r\n   icon: \"etsy\", // {string} fa-[icon] reference for this view\r\n   labelKey: \"ab.components.detail.text\", // {string} the multilingual label key for the class label\r\n};\r\n\r\nmodule.exports = class ABViewDetailTextCore extends ABViewDetailComponent {\r\n   /**\r\n    * @param {obj} values  key=>value hash of ABView values\r\n    * @param {ABApplication} application the application object this view is under\r\n    * @param {ABView} parent the ABView this view is a child of. (can be null)\r\n    */\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(\r\n         values,\r\n         application,\r\n         parent,\r\n         defaultValues || ABViewDetailTextDefaults\r\n      );\r\n   }\r\n\r\n   static common() {\r\n      return ABViewDetailTextDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return ABViewDetailTextPropertyComponentDefaults;\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /**\r\n    * @method fromValues()\r\n    *\r\n    * initialze this object with the given set of values.\r\n    * @param {obj} values\r\n    */\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n\r\n      // convert from \"0\" => 0\r\n      this.settings.height = parseInt(\r\n         this.settings.height ||\r\n            ABViewDetailTextPropertyComponentDefaults.height\r\n      );\r\n   }\r\n\r\n   /**\r\n    * @method componentList\r\n    * return the list of components available on this view to display in the editor.\r\n    */\r\n   componentList() {\r\n      return [];\r\n   }\r\n};\r\n","const ABViewDetailComponent = require(\"../../platform/views/ABViewDetailComponent\");\r\n\r\nconst ABViewDetailPropertyComponentDefaults = {};\r\n\r\nconst ABViewDetailTreeDefaults = {\r\n   key: \"detailtree\", // {string} unique key for this view\r\n   icon: \"sitemap\", // {string} fa-[icon] reference for this view\r\n   labelKey: \"ab.components.detail.tree\", // {string} the multilingual label key for the class label\r\n};\r\n\r\nmodule.exports = class ABViewDetailTextCore extends ABViewDetailComponent {\r\n   /**\r\n    * @param {obj} values  key=>value hash of ABView values\r\n    * @param {ABApplication} application the application object this view is under\r\n    * @param {ABView} parent the ABView this view is a child of. (can be null)\r\n    */\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(\r\n         values,\r\n         application,\r\n         parent,\r\n         defaultValues || ABViewDetailTreeDefaults\r\n      );\r\n   }\r\n\r\n   static common() {\r\n      return ABViewDetailTreeDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return ABViewDetailPropertyComponentDefaults;\r\n   }\r\n\r\n   /**\r\n    * @method componentList\r\n    * return the list of components available on this view to display in the editor.\r\n    */\r\n   componentList() {\r\n      return [];\r\n   }\r\n};\r\n","const ABViewWidget = require(\"../../platform/views/ABViewWidget\");\r\n\r\nconst ABViewDocxBuilderPropertyComponentDefaults = {\r\n   buttonlabel: \"Download DOCX\",\r\n   dataviewID: null,\r\n   width: 0,\r\n   filename: \"\", // uuid\r\n   filelabel: \"output.docx\",\r\n   language: \"en\", // en\r\n   toolbarBackground: \"ab-background-default\",\r\n   buttonPosition: \"left\",\r\n};\r\n\r\nconst ABViewDefaults = {\r\n   key: \"docxBuilder\", // {string} unique key for this view\r\n   icon: \"file-word-o\", // {string} fa-[icon] reference for this view\r\n   labelKey: \"DOCX Builder\", // {string} the multilingual label key for the class label\r\n};\r\n\r\nmodule.exports = class ABViewDocxBuilderCore extends ABViewWidget {\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(values, application, parent, defaultValues || ABViewDefaults);\r\n   }\r\n\r\n   static common() {\r\n      return ABViewDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return ABViewDocxBuilderPropertyComponentDefaults;\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /**\r\n    * @method toObj()\r\n    *\r\n    * properly compile the current state of this ABViewLabel instance\r\n    * into the values needed for saving.\r\n    *\r\n    * @return {json}\r\n    */\r\n   toObj() {\r\n      this.unTranslate(this, this, [\"filelabel\", \"buttonlabel\"]);\r\n\r\n      var obj = super.toObj();\r\n      obj.viewIDs = [];\r\n      return obj;\r\n   }\r\n\r\n   /**\r\n    * @method fromValues()\r\n    *\r\n    * initialze this object with the given set of values.\r\n    * @param {obj} values\r\n    */\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n\r\n      // convert from \"0\" => 0\r\n      this.settings.width = parseInt(\r\n         this.settings.width || ABViewDocxBuilderPropertyComponentDefaults.width\r\n      );\r\n\r\n      this.translate(this, this, [\"filelabel\", \"buttonlabel\"]);\r\n   }\r\n\r\n   uploadUrl() {\r\n      // TODO: Convert this to use ABFactory.urlFileUpload() or a ABFieldFile\r\n      // to get the URL:\r\n      console.warn(\r\n         new Error(\r\n            \"TODO: convert ABViewDocxBuilderCore.uploadUrl() to use common url code.\"\r\n         )\r\n      );\r\n      // let actionKey =\r\n      //    \"opstool.AB_\" + this.application.name.replace(\"_\", \"\") + \".view\";\r\n\r\n      // return (\r\n      //    \"/\" +\r\n      //    [\"opsportal\", \"file\", this.application.name, actionKey, \"1\"].join(\"/\")\r\n      // );\r\n      return `/file/upload/DOCX${this.id}/VIEW${this.id}/1`;\r\n   }\r\n\r\n   downloadUrl() {\r\n      return `/file/${this.settings.filename}`;\r\n   }\r\n\r\n   get languageCode() {\r\n      return (\r\n         this.settings.language ||\r\n         ABViewDocxBuilderPropertyComponentDefaults.language\r\n      );\r\n   }\r\n\r\n   get datacollections() {\r\n      let dataviewID = (this.settings || {}).dataviewID;\r\n      if (!dataviewID) return [];\r\n\r\n      let dvList = dataviewID.split(\",\") || [];\r\n\r\n      return this.AB.datacollections((dv) => dvList.indexOf(dv.id) > -1) || [];\r\n   }\r\n};\r\n","const ABView = require(\"../../platform/views/ABView\");\r\n\r\nconst ABViewFormButtonPropertyComponentDefaults = {\r\n   includeSave: true,\r\n   saveLabel: \"\",\r\n   includeCancel: false,\r\n   cancelLabel: \"\",\r\n   includeReset: false,\r\n   resetLabel: \"\",\r\n   afterCancel: null,\r\n   alignment: \"right\",\r\n   isDefault: false, // mark default button of form widget\r\n};\r\n\r\nconst ABViewFormButtonDefaults = {\r\n   key: \"button\",\r\n   // {string} unique key for this view\r\n\r\n   icon: \"square\",\r\n   // {string} fa-[icon] reference for this view\r\n\r\n   labelKey: \"ab.components.button\",\r\n   // {string} the multilingual label key for the class label\r\n};\r\n\r\nmodule.exports = class ABViewFormButtonCore extends ABView {\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(\r\n         values,\r\n         application,\r\n         parent,\r\n         defaultValues || ABViewFormButtonDefaults\r\n      );\r\n   }\r\n\r\n   static common() {\r\n      return ABViewFormButtonDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return ABViewFormButtonPropertyComponentDefaults;\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   toObj() {\r\n      // labels are multilingual values:\r\n      let labels = [];\r\n\r\n      if (this.settings.saveLabel) labels.push(\"saveLabel\");\r\n\r\n      if (this.settings.cancelLabel) labels.push(\"cancelLabel\");\r\n\r\n      if (this.settings.resetLabel) labels.push(\"resetLabel\");\r\n\r\n      this.unTranslate(this.settings, this.settings, labels);\r\n\r\n      let result = super.toObj();\r\n\r\n      return result;\r\n   }\r\n\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n\r\n      // labels are multilingual values:\r\n      let labels = [];\r\n\r\n      if (this.settings.saveLabel) labels.push(\"saveLabel\");\r\n\r\n      if (this.settings.cancelLabel) labels.push(\"cancelLabel\");\r\n\r\n      if (this.settings.resetLabel) labels.push(\"resetLabel\");\r\n\r\n      this.unTranslate(this.settings, this.settings, labels);\r\n\r\n      this.settings.includeSave = JSON.parse(\r\n         this.settings.includeSave ||\r\n            ABViewFormButtonPropertyComponentDefaults.includeSave\r\n      );\r\n      this.settings.includeCancel = JSON.parse(\r\n         this.settings.includeCancel ||\r\n            ABViewFormButtonPropertyComponentDefaults.includeCancel\r\n      );\r\n      this.settings.includeReset = JSON.parse(\r\n         this.settings.includeReset ||\r\n            ABViewFormButtonPropertyComponentDefaults.includeReset\r\n      );\r\n\r\n      this.settings.isDefault = JSON.parse(\r\n         this.settings.isDefault ||\r\n            ABViewFormButtonPropertyComponentDefaults.isDefault\r\n      );\r\n   }\r\n\r\n   /**\r\n    * @method componentList\r\n    * return the list of components available on this view to display in the editor.\r\n    */\r\n   componentList() {\r\n      return [];\r\n   }\r\n};\r\n","const ABViewFormComponent = require(\"../../platform/views/ABViewFormComponent\");\r\n\r\nconst ABViewFormCheckboxPropertyComponentDefaults = {};\r\n\r\nconst ABViewFormCheckboxDefaults = {\r\n   key: \"checkbox\", // {string} unique key for this view\r\n   icon: \"check-square-o\", // {string} fa-[icon] reference for this view\r\n   labelKey: \"ab.components.checkbox\", // {string} the multilingual label key for the class label\r\n};\r\n\r\nmodule.exports = class ABViewFormCheckboxCore extends ABViewFormComponent {\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(\r\n         values,\r\n         application,\r\n         parent,\r\n         defaultValues || ABViewFormCheckboxDefaults\r\n      );\r\n   }\r\n\r\n   static common() {\r\n      return ABViewFormCheckboxDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return ABViewFormCheckboxPropertyComponentDefaults;\r\n   }\r\n\r\n   /**\r\n    * @method componentList\r\n    * return the list of components available on this view to display in the editor.\r\n    */\r\n   componentList() {\r\n      return [];\r\n   }\r\n};\r\n","const ABView = require(\"../../platform/views/ABView\");\r\n\r\nconst ABViewFormFieldPropertyComponentDefaults = {\r\n   required: 0,\r\n   disable: 0,\r\n};\r\n\r\nmodule.exports = class ABViewFormComponentCore extends ABView {\r\n   // constructor(values, application, parent, defaultValues) {\r\n   //    super(values, application, parent, defaultValues);\r\n   // }\r\n\r\n   static defaultValues() {\r\n      return ABViewFormFieldPropertyComponentDefaults;\r\n   }\r\n\r\n   field() {\r\n      if (this.settings.objectId) {\r\n         let object = this.AB.objectByID(this.settings.objectId);\r\n         if (!object) return null;\r\n\r\n         return object.fieldByID(this.settings.fieldId);\r\n      } else {\r\n         let form = this.parentFormComponent();\r\n         if (form == null) return null;\r\n\r\n         let object;\r\n         if (form._currentObject) {\r\n            object = form._currentObject;\r\n         } else {\r\n            let datacollection = form.datacollection;\r\n            if (datacollection == null) return null;\r\n\r\n            object = datacollection.datasource;\r\n         }\r\n\r\n         if (object == null) return null;\r\n\r\n         let field = object.fieldByID(this.settings.fieldId);\r\n         return field;\r\n      }\r\n   }\r\n};\r\n","const ABViewFormComponent = require(\"../../platform/views/ABViewFormComponent\");\r\n\r\nconst ABViewFormConnectPropertyComponentDefaults = {\r\n   formView: \"\", // id of form to add new data\r\n   filterConditions: {\r\n      // array of filters to apply to the data table\r\n      glue: \"and\",\r\n      rules: [],\r\n   },\r\n   sortFields: [],\r\n   // objectWorkspace: {\r\n   //    filterConditions: {\r\n   //       // array of filters to apply to the data table\r\n   //       glue: \"and\",\r\n   //       rules: [],\r\n   //    },\r\n   // },\r\n   popupWidth: 700,\r\n   popupHeight: 450,\r\n};\r\n\r\nconst ABViewFormConnectDefaults = {\r\n   key: \"connect\", // {string} unique key for this view\r\n   icon: \"list-ul\", // {string} fa-[icon] reference for this view\r\n   labelKey: \"Connect\", // {string} the multilingual label key for the class label\r\n};\r\n\r\nmodule.exports = class ABViewFormConnectCore extends ABViewFormComponent {\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(\r\n         values,\r\n         application,\r\n         parent,\r\n         defaultValues || ABViewFormConnectDefaults\r\n      );\r\n   }\r\n\r\n   static common() {\r\n      return ABViewFormConnectDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return ABViewFormConnectPropertyComponentDefaults;\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /**\r\n    * @method fromValues()\r\n    *\r\n    * initialze this object with the given set of values.\r\n    * @param {obj} values\r\n    */\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n\r\n      this.settings.filterConditions =\r\n         this.settings.filterConditions ||\r\n         ABViewFormConnectPropertyComponentDefaults.filterConditions;\r\n   }\r\n\r\n   /**\r\n    * @method componentList\r\n    * return the list of components available on this view to display in the editor.\r\n    */\r\n   componentList() {\r\n      return [];\r\n   }\r\n};\r\n","const ABViewContainer = require(\"../../platform/views/ABViewContainer\");\r\nconst ABViewFormComponent = require(\"../../platform/views/ABViewFormComponent\");\r\n\r\nconst ABRecordRule = require(\"../../rules/ABViewRuleListFormRecordRules\");\r\nconst ABSubmitRule = require(\"../../rules/ABViewRuleListFormSubmitRules\");\r\n\r\nconst ABViewFormDefaults = {\r\n   key: \"form\", // unique key identifier for this ABViewForm\r\n   icon: \"list-alt\", // icon reference: (without 'fa-' )\r\n   labelKey: \"Form\", // {string} the multilingual label key for the class label\r\n};\r\n\r\nconst ABViewFormPropertyComponentDefaults = {\r\n   dataviewID: null,\r\n   showLabel: true,\r\n   labelPosition: \"left\",\r\n   labelWidth: 120,\r\n   height: 200,\r\n   clearOnLoad: false,\r\n   clearOnSave: false,\r\n   displayRules: [],\r\n   editForm: \"none\", // The url pointer of ABViewForm\r\n\r\n   //\t[{\r\n   //\t\taction: {string},\r\n   //\t\twhen: [\r\n   //\t\t\t{\r\n   //\t\t\t\tfieldId: {UUID},\r\n   //\t\t\t\tcomparer: {string},\r\n   //\t\t\t\tvalue: {string}\r\n   //\t\t\t}\r\n   //\t\t],\r\n   //\t\tvalues: [\r\n   //\t\t\t{\r\n   //\t\t\t\tfieldId: {UUID},\r\n   //\t\t\t\tvalue: {object}\r\n   //\t\t\t}\r\n   //\t\t]\r\n   //\t}]\r\n   recordRules: [],\r\n\r\n   //\t[{\r\n   //\t\taction: {string},\r\n   //\t\twhen: [\r\n   //\t\t\t{\r\n   //\t\t\t\tfieldId: {UUID},\r\n   //\t\t\t\tcomparer: {string},\r\n   //\t\t\t\tvalue: {string}\r\n   //\t\t\t}\r\n   //\t\t],\r\n   //\t\tvalue: {string}\r\n   //\t}]\r\n   submitRules: [],\r\n};\r\n\r\nmodule.exports = class ABViewFormCore extends ABViewContainer {\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(values, application, parent, defaultValues || ABViewFormDefaults);\r\n   }\r\n\r\n   static common() {\r\n      return ABViewFormDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return ABViewFormPropertyComponentDefaults;\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /**\r\n    * @method fromValues()\r\n    *\r\n    * initialze this object with the given set of values.\r\n    * @param {obj} values\r\n    */\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n\r\n      this.settings.labelPosition =\r\n         this.settings.labelPosition ||\r\n         ABViewFormPropertyComponentDefaults.labelPosition;\r\n\r\n      // convert from \"0\" => true/false\r\n      this.settings.showLabel = JSON.parse(\r\n         this.settings.showLabel != null\r\n            ? this.settings.showLabel\r\n            : ABViewFormPropertyComponentDefaults.showLabel\r\n      );\r\n      this.settings.clearOnLoad = JSON.parse(\r\n         this.settings.clearOnLoad != null\r\n            ? this.settings.clearOnLoad\r\n            : ABViewFormPropertyComponentDefaults.clearOnLoad\r\n      );\r\n      this.settings.clearOnSave = JSON.parse(\r\n         this.settings.clearOnSave != null\r\n            ? this.settings.clearOnSave\r\n            : ABViewFormPropertyComponentDefaults.clearOnSave\r\n      );\r\n\r\n      // convert from \"0\" => 0\r\n      this.settings.labelWidth = parseInt(\r\n         this.settings.labelWidth == null\r\n            ? ABViewFormPropertyComponentDefaults.labelWidth\r\n            : this.settings.labelWidth\r\n      );\r\n      this.settings.height = parseInt(\r\n         this.settings.height == null\r\n            ? ABViewFormPropertyComponentDefaults.height\r\n            : this.settings.height\r\n      );\r\n   }\r\n\r\n   // Use this function in kanban\r\n   objectLoad(object) {\r\n      this._currentObject = object;\r\n   }\r\n\r\n   /**\r\n    * @method componentList\r\n    * return the list of components available on this view to display in the editor.\r\n    */\r\n   componentList() {\r\n      var viewsToAllow = [\"label\", \"layout\", \"button\", \"text\"],\r\n         allComponents = this.application.viewAll();\r\n\r\n      return allComponents.filter((c) => {\r\n         return viewsToAllow.indexOf(c.common().key) > -1;\r\n      });\r\n   }\r\n\r\n   /**\r\n    * @method fieldComponents()\r\n    *\r\n    * return an array of all the ABViewFormField children\r\n    *\r\n    * @param {fn} filter  \ta filter fn to return a set of ABViewFormField that this fn\r\n    *\t\t\t\t\t\treturns true for.\r\n    * @return {array} \tarray of ABViewFormField\r\n    */\r\n   fieldComponents(filter) {\r\n      const flattenComponents = (views) => {\r\n         let components = [];\r\n\r\n         views.forEach((v) => {\r\n            if (v == null) return;\r\n\r\n            components.push(v);\r\n\r\n            if (v._views?.length) {\r\n               components = components.concat(flattenComponents(v._views));\r\n            }\r\n         });\r\n\r\n         return components;\r\n      };\r\n\r\n      if (this._views?.length) {\r\n         const allComponents = flattenComponents(this._views);\r\n\r\n         if (filter == null) {\r\n            filter = (comp) => comp instanceof ABViewFormComponent;\r\n         }\r\n\r\n         return allComponents.filter(filter);\r\n      } else {\r\n         return [];\r\n      }\r\n   }\r\n\r\n   addFieldToForm(field, yPosition) {\r\n      if (field == null) return;\r\n\r\n      var fieldComponent = field.formComponent();\r\n      if (fieldComponent == null) return;\r\n\r\n      var newView = fieldComponent.newInstance(this.application, this);\r\n      if (newView == null) return;\r\n\r\n      // set settings to component\r\n      newView.settings = newView.settings || {};\r\n      newView.settings.fieldId = field.id;\r\n      // TODO : Default settings\r\n\r\n      if (yPosition != null) newView.position.y = yPosition;\r\n\r\n      // add a new component\r\n      this._views.push(newView);\r\n\r\n      return newView;\r\n   }\r\n\r\n   get RecordRule() {\r\n      let object = this.datacollection.datasource;\r\n\r\n      if (this._recordRule == null) {\r\n         this._recordRule = new ABRecordRule();\r\n      }\r\n\r\n      this._recordRule.formLoad(this);\r\n      this._recordRule.fromSettings(this.settings.recordRules);\r\n      this._recordRule.objectLoad(object);\r\n\r\n      return this._recordRule;\r\n   }\r\n\r\n   doRecordRulesPre(rowData) {\r\n      return this.RecordRule.processPre({ data: rowData, form: this });\r\n   }\r\n\r\n   doRecordRules(rowData) {\r\n      // validate for record rules\r\n      if (rowData) {\r\n         let object = this.datacollection.datasource;\r\n         let ruleValidator = object.isValidData(rowData);\r\n         let isUpdatedDataValid = ruleValidator.pass();\r\n         if (!isUpdatedDataValid) {\r\n            console.error(\"Updated data is invalid.\", { rowData: rowData });\r\n            return Promise.reject(new Error(\"Updated data is invalid.\"));\r\n         }\r\n      }\r\n\r\n      return this.RecordRule.process({ data: rowData, form: this });\r\n   }\r\n\r\n   doSubmitRules(rowData) {\r\n      var object = this.datacollection.datasource;\r\n\r\n      var SubmitRules = new ABSubmitRule();\r\n      SubmitRules.formLoad(this);\r\n      SubmitRules.fromSettings(this.settings.submitRules);\r\n      SubmitRules.objectLoad(object);\r\n\r\n      return SubmitRules.process({ data: rowData, form: this });\r\n   }\r\n};\r\n","const ABViewFormComponent = require(\"../../platform/views/ABViewFormComponent\");\r\n\r\nconst ABViewFormCustomPropertyComponentDefaults = {};\r\n\r\nconst ABViewFormCustomDefaults = {\r\n   key: \"fieldcustom\",\r\n   // {string} unique key for this view\r\n   icon: \"object-group\",\r\n   // {string} fa-[icon] reference for this view\r\n   labelKey: \"ab.components.custom\",\r\n   // {string} the multilingual label key for the class label\r\n};\r\n\r\nmodule.exports = class ABViewFormCustom extends ABViewFormComponent {\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(\r\n         values,\r\n         application,\r\n         parent,\r\n         defaultValues || ABViewFormCustomDefaults\r\n      );\r\n   }\r\n\r\n   static common() {\r\n      return ABViewFormCustomDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return ABViewFormCustomPropertyComponentDefaults;\r\n   }\r\n\r\n   /**\r\n    * @method componentList\r\n    * return the list of components available on this view to display in the editor.\r\n    */\r\n   componentList() {\r\n      return [];\r\n   }\r\n};\r\n","const ABViewFormComponent = require(\"../../platform/views/ABViewFormComponent\");\r\n\r\nconst ABViewFormDatepickerPropertyComponentDefaults = {\r\n   timepicker: false,\r\n};\r\n\r\nconst ABViewFormDatepickerDefaults = {\r\n   key: \"datepicker\", // {string} unique key for this view\r\n   icon: \"calendar\", // {string} fa-[icon] reference for this view\r\n   labelKey: \"ab.components.datepicker\", // {string} the multilingual label key for the class label\r\n};\r\n\r\nmodule.exports = class ABViewFormDatepickerCore extends ABViewFormComponent {\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(\r\n         values,\r\n         application,\r\n         parent,\r\n         defaultValues || ABViewFormDatepickerDefaults\r\n      );\r\n   }\r\n\r\n   static common() {\r\n      return ABViewFormDatepickerDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return ABViewFormDatepickerPropertyComponentDefaults;\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /**\r\n    * @method componentList\r\n    * return the list of components available on this view to display in the editor.\r\n    */\r\n   componentList() {\r\n      return [];\r\n   }\r\n};\r\n","const ABViewFormComponent = require(\"../../platform/views/ABViewFormComponent\");\r\n\r\nconst ABViewFormNumberPropertyComponentDefaults = {\r\n   isStepper: 0,\r\n};\r\n\r\nconst ABViewFormNumberDefaults = {\r\n   key: \"numberbox\", // {string} unique key for this view\r\n   icon: \"hashtag\", // {string} fa-[icon] reference for this view\r\n   labelKey: \"ab.components.number\", // {string} the multilingual label key for the class label\r\n};\r\n\r\nmodule.exports = class ABViewFormNumberCore extends ABViewFormComponent {\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(\r\n         values,\r\n         application,\r\n         parent,\r\n         defaultValues || ABViewFormNumberDefaults\r\n      );\r\n   }\r\n\r\n   static common() {\r\n      return ABViewFormNumberDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return ABViewFormNumberPropertyComponentDefaults;\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /**\r\n    * @method toObj()\r\n    *\r\n    * properly compile the current state of this ABViewFormText instance\r\n    * into the values needed for saving.\r\n    *\r\n    * @return {json}\r\n    */\r\n   toObj() {\r\n      this.unTranslate(this, this, [\"label\", \"formLabel\"]);\r\n\r\n      var obj = super.toObj();\r\n      obj.views = []; // no subviews\r\n      return obj;\r\n   }\r\n\r\n   /**\r\n    * @method fromValues()\r\n    *\r\n    * initialze this object with the given set of values.\r\n    * @param {obj} values\r\n    */\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n\r\n      // if this is being instantiated on a read from the Property UI,\r\n      this.settings.isStepper =\r\n         this.settings.isStepper ||\r\n         ABViewFormNumberPropertyComponentDefaults.isStepper;\r\n\r\n      // convert from \"0\" => 0\r\n      this.settings.isStepper = parseInt(this.settings.isStepper);\r\n   }\r\n\r\n   /**\r\n    * @method componentList\r\n    * return the list of components available on this view to display in the editor.\r\n    */\r\n   componentList() {\r\n      return [];\r\n   }\r\n};\r\n","const ABViewFormCustom = require(\"../../platform/views/ABViewFormCustom\");\r\n\r\nconst ABViewFormReadonlyPropertyComponentDefaults = {};\r\n\r\nconst ABViewFormReadonlyDefaults = {\r\n   key: \"fieldreadonly\", // {string} unique key for this view\r\n   icon: \"calculator\", // {string} fa-[icon] reference for this view\r\n   labelKey: \"ab.components.readonly\", // {string} the multilingual label key for the class label\r\n};\r\n\r\nmodule.exports = class ABViewFormReadonly extends ABViewFormCustom {\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(\r\n         values,\r\n         application,\r\n         parent,\r\n         defaultValues || ABViewFormReadonlyDefaults\r\n      );\r\n   }\r\n\r\n   static common() {\r\n      return ABViewFormReadonlyDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return ABViewFormReadonlyPropertyComponentDefaults;\r\n   }\r\n\r\n   /**\r\n    * @method componentList\r\n    * return the list of components available on this view to display in the editor.\r\n    */\r\n   componentList() {\r\n      return [];\r\n   }\r\n};\r\n","const ABViewFormComponent = require(\"../../platform/views/ABViewFormComponent\");\r\n\r\nconst ABViewFormSelectMultiplePropertyComponentDefaults = {\r\n   type: \"multicombo\", // 'richselect' or 'radio'\r\n};\r\n\r\nconst ABSelectMultipleDefaults = {\r\n   key: \"selectmultiple\", // {string} unique key for this view\r\n   icon: \"list-ul\", // {string} fa-[icon] reference for this view\r\n   labelKey: \"ab.components.selectmultiple\", // {string} the multilingual label key for the class label\r\n};\r\n\r\nmodule.exports = class ABViewFormSelectMultipleCore extends ABViewFormComponent {\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(\r\n         values,\r\n         application,\r\n         parent,\r\n         defaultValues || ABSelectMultipleDefaults\r\n      );\r\n   }\r\n\r\n   static common() {\r\n      return ABSelectMultipleDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return ABViewFormSelectMultiplePropertyComponentDefaults;\r\n   }\r\n\r\n   /**\r\n    * @method componentList\r\n    * return the list of components available on this view to display in the editor.\r\n    */\r\n   componentList() {\r\n      return [];\r\n   }\r\n};\r\n","const ABViewFormComponent = require(\"../../platform/views/ABViewFormComponent\");\r\n\r\nconst ABViewFormSelectSinglePropertyComponentDefaults = {\r\n   type: \"richselect\", // 'richselect' or 'radio'\r\n};\r\n\r\nconst ABSelectSingleDefaults = {\r\n   key: \"selectsingle\", // {string} unique key for this view\r\n   icon: \"list-ul\", // {string} fa-[icon] reference for this view\r\n   labelKey: \"ab.components.selectsingle\", // {string} the multilingual label key for the class label\r\n};\r\n\r\nmodule.exports = class ABViewFormSelectSingleCore extends ABViewFormComponent {\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(\r\n         values,\r\n         application,\r\n         parent,\r\n         defaultValues || ABSelectSingleDefaults\r\n      );\r\n   }\r\n\r\n   static common() {\r\n      return ABSelectSingleDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return ABViewFormSelectSinglePropertyComponentDefaults;\r\n   }\r\n\r\n   /**\r\n    * @method componentList\r\n    * return the list of components available on this view to display in the editor.\r\n    */\r\n   componentList() {\r\n      return [];\r\n   }\r\n};\r\n","const ABViewFormComponent = require(\"../../platform/views/ABViewFormComponent\");\r\n\r\nconst ABViewFormTextboxPropertyComponentDefaults = {\r\n   type: \"single\", // 'single', 'multiple' or 'rich'\r\n};\r\n\r\nconst ABViewFormTextboxDefaults = {\r\n   key: \"textbox\", // {string} unique key for this view\r\n   icon: \"i-cursor\", // {string} fa-[icon] reference for this view\r\n   labelKey: \"ab.components.textbox\", // {string} the multilingual label key for the class label\r\n};\r\n\r\nmodule.exports = class ABViewFormTextboxCore extends ABViewFormComponent {\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(\r\n         values,\r\n         application,\r\n         parent,\r\n         defaultValues || ABViewFormTextboxDefaults\r\n      );\r\n   }\r\n\r\n   static common() {\r\n      return ABViewFormTextboxDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return ABViewFormTextboxPropertyComponentDefaults;\r\n   }\r\n\r\n   /**\r\n    * @method componentList\r\n    * return the list of components available on this view to display in the editor.\r\n    */\r\n   componentList() {\r\n      return [];\r\n   }\r\n};\r\n","const ABViewFormCustom = require(\"../../platform/views/ABViewFormCustom\");\r\n\r\nconst ABViewFormTreePropertyComponentDefaults = {};\r\n\r\nconst ABTreeDefaults = {\r\n   key: \"formtree\", // {string} unique key for this view\r\n   icon: \"sitemap\", // {string} fa-[icon] reference for this view\r\n   labelKey: \"ab.components.tree\", // {string} the multilingual label key for the class label\r\n};\r\n\r\nmodule.exports = class ABViewFormTreeCore extends ABViewFormCustom {\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(values, application, parent, defaultValues || ABTreeDefaults);\r\n   }\r\n\r\n   static common() {\r\n      return ABTreeDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return ABViewFormTreePropertyComponentDefaults;\r\n   }\r\n\r\n   /**\r\n    * @method componentList\r\n    * return the list of components available on this view to display in the editor.\r\n    */\r\n   componentList() {\r\n      return [];\r\n   }\r\n};\r\n","const ABViewWidget = require(\"../../platform/views/ABViewWidget\");\r\n\r\nconst ABViewGanttPropertyComponentDefaults = {\r\n   dataviewID: \"\",\r\n   // {string}\r\n   // {ABDatacollection.id} of the datacollection that contains the data for\r\n   // the Gantt chart.\r\n\r\n   titleFieldID: \"\",\r\n   // {string}\r\n   // {ABFieldXXX.id} of the field that contains the value of the title\r\n   // ABFieldString, ABFieldLongText\r\n\r\n   startDateFieldID: \"\",\r\n   // {string}\r\n   // {ABFieldDate.id} of the field that contains the start date\r\n\r\n   endDateFieldID: \"\",\r\n   // {string}\r\n   // {ABFieldDate.id} of the field that contains the end date\r\n\r\n   durationFieldID: \"\",\r\n   // {string}\r\n   // {ABFieldNumber.id} of the field that contains the duration\r\n\r\n   progressFieldID: \"\",\r\n   // {string}\r\n   // {ABFieldNumber.id} of the field that marks the progress\r\n\r\n   notesFieldID: \"\",\r\n   // {string}\r\n   // {ABFieldXXX.id} of the field that contains the value of the title\r\n   // ABFieldString, ABFieldLongText\r\n};\r\n\r\nconst ABViewDefaults = {\r\n   key: \"gantt\", // {string} unique key for this view\r\n   icon: \"tasks\", // {string} fa-[icon] reference for this view\r\n   labelKey: \"Gantt\", // {string} the multilingual label key for the class label\r\n};\r\n\r\nmodule.exports = class ABViewGanttCore extends ABViewWidget {\r\n   /**\r\n    * @param {obj} values  key=>value hash of ABView values\r\n    * @param {ABApplication} application the application object this view is under\r\n    * @param {ABViewWidget} parent the ABViewWidget this view is a child of. (can be null)\r\n    */\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(values, application, parent, defaultValues || ABViewDefaults);\r\n   }\r\n\r\n   static common() {\r\n      return ABViewDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return ABViewGanttPropertyComponentDefaults;\r\n   }\r\n\r\n   /**\r\n    * @method fromValues()\r\n    *\r\n    * initialze this object with the given set of values.\r\n    * @param {obj} values\r\n    */\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n\r\n      Object.keys(ABViewGanttPropertyComponentDefaults).forEach((k) => {\r\n         this.settings[k] =\r\n            this.settings[k] || ABViewGanttPropertyComponentDefaults[k];\r\n      });\r\n   }\r\n\r\n   /**\r\n    * @method componentList\r\n    * return the list of components available on this view to display in the editor.\r\n    */\r\n   componentList() {\r\n      return [];\r\n   }\r\n};\r\n","const ABViewWidget = require(\"../../platform/views/ABViewWidget\");\r\n\r\nconst ABViewGridPropertyComponentDefaults = {\r\n   label: \"\",\r\n   // {string}\r\n   // label is required and you can add more if the component needs them\r\n\r\n   // format:0  \t// 0 - normal, 1 - title, 2 - description\r\n   dataviewID: \"\",\r\n   // {uuid}\r\n   // uuid of ABDataCollection that drives the data for our Grid\r\n\r\n   padding: 17,\r\n   // {int}\r\n   // the default padding surrounding the component\r\n\r\n   showToolbar: 1,\r\n   // {bool}\r\n   // do we show our toolbar?\r\n\r\n   isEditable: 0,\r\n   // {bool}\r\n   // do we allow editing in the grid?\r\n\r\n   massUpdate: 0,\r\n   // {bool}\r\n   // do we allow the Mass Update capability? (row checkboxes and the\r\n   // MassUpdate popup)\r\n\r\n   allowDelete: 0,\r\n   // {bool}\r\n   // do we allow deleting multiple rows at a time? Mass Delete.\r\n\r\n   // isFilterable:0,\r\n\r\n   isSortable: 1,\r\n   // {bool}\r\n   // do we allow the sort options.\r\n\r\n   isExportable: 0,\r\n   // {bool}\r\n   // do we enable the webix export from grid capabilities?\r\n\r\n   // linkedObject:'',\r\n   // linkedField:'',\r\n   // linkedPage:'',\r\n   // linkedPageView:'',\r\n   // linkedEditPage:'',\r\n   // linkedEditPageForm:'',\r\n\r\n   detailsPage: \"\",\r\n   // {ABViewPage.id}\r\n   // the ABViewPage that has the details component.\r\n\r\n   detailsTab: \"\",\r\n   // {ABViewTab.id}\r\n   // the ABViewTab component, that has the details component.\r\n   // NOTE: if your details is embedded on a TAB, we need both the\r\n   // .detailsPage & .detailsTab to successfully show the item.\r\n\r\n   editPage: \"\",\r\n   // {ABViewPage.id}\r\n   // the ABViewPage that has the edit component.\r\n\r\n   editTab: \"\",\r\n   // {ABViewTab.id}\r\n   // the ABViewTab component, that has the edit component.\r\n   // NOTE: if your editor is embedded on a TAB, we need both the\r\n   // .editPage & .editTab to successfully show the form.\r\n\r\n   trackView: 0,\r\n   // {bool}\r\n   // Do we offer the ability to track changes to this object/row?\r\n\r\n   frozenColumnID: \"\",\r\n   // {ABField.id}\r\n   // id of column you want to stop freezing the left hand side at.\r\n\r\n   hiddenFields: [],\r\n   // {array}  [ ABField.id, ABField.id, ... ]\r\n   // array of [ids] to add hidden:true to\r\n\r\n   summaryColumns: [],\r\n   // {array}  [ ABField.id, ABField.id, ... ]\r\n   // array of [ids] to add the SUM footer to\r\n\r\n   countColumns: [],\r\n   // {array}  [ ABField.id, ABField.id, ... ]\r\n   // array of [ids] to add the Count footer to\r\n\r\n   // TODO: get rid of objectWorkspace!\r\n   objectWorkspace: {\r\n      // sortFields:[], // array of columns with their sort configurations\r\n      // filterConditions:[], // array of filters to apply to the data table\r\n      frozenColumnID: \"\", // id of column you want to stop freezing\r\n      hiddenFields: [], // array of [ids] to add hidden:true to\r\n      summaryColumns: [],\r\n      countColumns: [],\r\n   },\r\n   gridFilter: {\r\n      filterOption: 1,\r\n      userFilterPosition: \"toolbar\",\r\n      isGlobalToolbar: 1,\r\n   },\r\n   // summaryFields: [], // array of [field ids] to add the summary column in footer\r\n   // countFields: [], // array of [field ids] to add the summary column in footer\r\n\r\n   height: 0,\r\n   // {int}\r\n   // The Height of our Grid.\r\n   // See ../views/ABViewDataview.js\r\n\r\n   hideHeader: 0,\r\n   labelAsField: 0,\r\n   hideButtons: 0,\r\n   groupBy: \"\", // id of field\r\n\r\n   // TODO: add to ABDesigner.interface design:\r\n   columnConfig: [],\r\n   // {array} [ {columnHeader}, {columnHeader} ... ]\r\n   // An array of column headers for the grid to display. These should\r\n   // be generated at Design time, and can allow the designer to ORDER the\r\n   // columns, assign column widths, fillspace, etc...\r\n   //    {columnHeader}\r\n   //    The minimum amount of information a Grid needs for it's customization\r\n   //    .id {string} ABField.columnName\r\n   //    .fieldId {string} ABField.id\r\n   //    .width {int}\r\n   //    .fillspace {bool}\r\n   //    .minwidth\r\n   //\r\n   //    When displaying column headers, we will ask the\r\n   //    CurrentObject.columnHeaders(), and then modify them with our settings\r\n   //    here.\r\n\r\n   saveLocal: 1,\r\n   // {bool}\r\n   // Allow saving of local changes to our grid display. This will enable\r\n   // a user to modify the Grid display locally.\r\n};\r\n\r\nconst ABViewDefaults = {\r\n   key: \"grid\", // {string} unique key for this view\r\n   icon: \"table\", // {string} fa-[icon] reference for this view\r\n   labelKey: \"Grid\", // {string} the multilingual label key for the class label\r\n};\r\n\r\n/**\r\n * @function settingsDefault()\r\n * Verifies a given field is set and if not, defaults to what we havein our\r\n * ABViewGridPropertyComponentDefaults.\r\n * NOTE: use this fn() for values that are NOT TRUTHY ... so not for numeric\r\n * 1 or 0.\r\n * @param {hash} base\r\n *        The current settings value hash.\r\n * @param {string} field\r\n *        The parameter we are checking.\r\n */\r\nfunction settingsDefault(base, field) {\r\n   if (typeof base[field] == \"undefined\") {\r\n      base[field] = ABViewGridPropertyComponentDefaults[field];\r\n      return;\r\n   }\r\n   base[field] = base[field] || ABViewGridPropertyComponentDefaults[field];\r\n}\r\n\r\n/**\r\n * @function settingsDefaultJSON()\r\n * Verifies a given field is set and if not, defaults to what we havein our\r\n * ABViewGridPropertyComponentDefaults.\r\n * NOTE: use this fn() for values that ARE TRUTHY ... so for numeric 1 or 0\r\n * @param {hash} base\r\n *        The current settings value hash.\r\n * @param {string} field\r\n *        The parameter we are checking.\r\n */\r\nfunction settingsDefaultJSON(base, field) {\r\n   try {\r\n      base[field] = JSON.parse(base[field]);\r\n   } catch (e) {\r\n      base[field] = ABViewGridPropertyComponentDefaults[field];\r\n   }\r\n}\r\n\r\nmodule.exports = class ABViewGridCore extends ABViewWidget {\r\n   /**\r\n    * @param {obj} values  key=>value hash of ABView values\r\n    * @param {ABApplication} application the application object this view is under\r\n    * @param {ABViewWidget} parent the ABViewWidget this view is a child of. (can be null)\r\n    */\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(values, application, parent, defaultValues || ABViewDefaults);\r\n   }\r\n\r\n   static common() {\r\n      return ABViewDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return ABViewGridPropertyComponentDefaults;\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /**\r\n    * @method fromValues()\r\n    *\r\n    * initialze this object with the given set of values.\r\n    * @param {obj} values\r\n    */\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n\r\n      // if this is being instantiated on a read from the Property UI,\r\n      settingsDefault(this.settings, \"dataviewID\");\r\n\r\n      // Convert to boolean\r\n      // these values are sometimes 0 (number) at this point so the JSON.parse\r\n      // with the || (or) statement was always falling to the default so I am\r\n      // trying to parse the value...if it fails we use the default value\r\n      settingsDefaultJSON(this.settings, \"padding\");\r\n      settingsDefaultJSON(this.settings, \"showToolbar\");\r\n      settingsDefaultJSON(this.settings, \"isEditable\");\r\n      settingsDefaultJSON(this.settings, \"massUpdate\");\r\n      settingsDefaultJSON(this.settings, \"allowDelete\");\r\n      // this.settings.isFilterable = JSON.parse(this.settings.isFilterable || ABViewGridPropertyComponentDefaults.isFilterable);\r\n      settingsDefaultJSON(this.settings, \"isSortable\");\r\n      settingsDefaultJSON(this.settings, \"isExportable\");\r\n      settingsDefaultJSON(this.settings, \"hideHeader\");\r\n      settingsDefaultJSON(this.settings, \"labelAsField\");\r\n      settingsDefaultJSON(this.settings, \"hideButtons\");\r\n      settingsDefaultJSON(this.settings, \"columnConfig\");\r\n      settingsDefaultJSON(this.settings, \"saveLocal\");\r\n\r\n      this.settings.gridFilter =\r\n         this.settings.gridFilter ||\r\n         ABViewGridPropertyComponentDefaults.gridFilter;\r\n\r\n      try {\r\n         this.settings.gridFilter.filterOption = JSON.parse(\r\n            this.settings.gridFilter.filterOption\r\n         );\r\n      } catch (e) {\r\n         this.settings.gridFilter.filterOption =\r\n            ABViewGridPropertyComponentDefaults.gridFilter.filterOption;\r\n      }\r\n\r\n      try {\r\n         this.settings.gridFilter.isGlobalToolbar = JSON.parse(\r\n            this.settings.gridFilter.isGlobalToolbar\r\n         );\r\n      } catch (e) {\r\n         this.settings.gridFilter.isGlobalToolbar =\r\n            ABViewGridPropertyComponentDefaults.gridFilter.isGlobalToolbar;\r\n      }\r\n\r\n      // this.settings.linkedObject = this.settings.linkedObject || ABViewGridPropertyComponentDefaults.linkedObject;\r\n      // this.settings.linkedField = this.settings.linkedField || ABViewGridPropertyComponentDefaults.linkedField;\r\n      // this.settings.linkedPage = this.settings.linkedPage || ABViewGridPropertyComponentDefaults.linkedPage;\r\n      // this.settings.linkedPageView = this.settings.linkedPageView || ABViewGridPropertyComponentDefaults.linkedPageView;\r\n      // this.settings.linkedEditPage = this.settings.linkedEditPage || ABViewGridPropertyComponentDefaults.linkedEditPage;\r\n      // this.settings.linkedEditPageForm = this.settings.linkedEditPageForm || ABViewGridPropertyComponentDefaults.linkedEditPageForm;\r\n\r\n      settingsDefault(this.settings, \"detailsPage\");\r\n      settingsDefault(this.settings, \"editPage\");\r\n      settingsDefault(this.settings, \"detailsTab\");\r\n      settingsDefault(this.settings, \"editTab\");\r\n      settingsDefaultJSON(this.settings, \"trackView\");\r\n\r\n      // TODO: remove objectworkspace!\r\n      // this.settings.objectWorkspace =\r\n      //    this.settings.objectWorkspace ||\r\n      //    ABViewGridPropertyComponentDefaults.objectWorkspace;\r\n\r\n      // if (typeof this.settings.objectWorkspace != \"undefined\") {\r\n      //    if (typeof this.settings.objectWorkspace.sortFields == \"undefined\")\r\n      //       this.settings.objectWorkspace.sortFields = [];\r\n      //    if (\r\n      //       typeof this.settings.objectWorkspace.filterConditions == \"undefined\"\r\n      //    )\r\n      //       this.settings.objectWorkspace.filterConditions = [];\r\n      //    if (typeof this.settings.objectWorkspace.frozenColumnID == \"undefined\")\r\n      //       this.settings.objectWorkspace.frozenColumnID = \"\";\r\n      //    if (typeof this.settings.objectWorkspace.hiddenFields == \"undefined\")\r\n      //       this.settings.objectWorkspace.hiddenFields = [];\r\n      //    if (typeof this.settings.objectWorkspace.summaryColumns == \"undefined\")\r\n      //       this.settings.objectWorkspace.summaryColumns = [];\r\n      //    if (typeof this.settings.objectWorkspace.countColumns == \"undefined\")\r\n      //       this.settings.objectWorkspace.countColumns = [];\r\n      // }\r\n\r\n      var owFields = [\r\n         \"sortFields\",\r\n         \"filterConditions\",\r\n         \"frozenColumnID\",\r\n         \"hiddenFields\",\r\n         \"summaryColumns\",\r\n         \"countColumns\",\r\n      ];\r\n      // Transition: if we have an .objectWorkspace, copy those values in here:\r\n      if (this.settings.objectWorkspace) {\r\n         owFields.forEach((f) => {\r\n            this.settings[f] = this.settings.objectWorkspace[f];\r\n         });\r\n      }\r\n\r\n      // make sure they have actual default values now.\r\n      owFields.forEach((f) => {\r\n         settingsDefault(this.settings, f);\r\n      });\r\n\r\n      // we are not allowed to have sub views:\r\n      this._views = [];\r\n   }\r\n\r\n   /**\r\n    * @method componentList\r\n    * return the list of components available on this view to display in the editor.\r\n    */\r\n   componentList() {\r\n      return [];\r\n   }\r\n\r\n   removeField(field, cb) {\r\n      let shouldSave = false;\r\n\r\n      // check to see if there is a frozenColumnID and if it matches the\r\n      // deleted field\r\n      if (this.settings?.frozenColumnID == field.columnName) {\r\n         // remove the column name from the frozen column id\r\n         this.settings.frozenColumnID = \"\";\r\n         // flag the object to be saved later\r\n         shouldSave = true;\r\n      }\r\n\r\n      // check to see if there are hidden fields\r\n      if (this.settings.hiddenFields?.length) {\r\n         // find if the deleted field is in the array\r\n         let index = this.settings.hiddenFields.indexOf(field.columnName);\r\n         // if so splice it out of the array\r\n         if (index > -1) {\r\n            this.settings.hiddenFields.splice(index, 1);\r\n            // flag the object to be saved later\r\n            shouldSave = true;\r\n         }\r\n      }\r\n\r\n      // check to see if there are hidden fields\r\n      if (this.settings.summaryColumns?.length) {\r\n         // find if the deleted field is in the array\r\n         let index = this.settings.summaryColumns.indexOf(field.id);\r\n         // if so splice it out of the array\r\n         if (index > -1) {\r\n            this.settings.summaryColumns.splice(index, 1);\r\n            // flag the object to be saved later\r\n            shouldSave = true;\r\n         }\r\n      }\r\n\r\n      // check to see if there are hidden fields\r\n      if (this.settings.countColumns?.length) {\r\n         // find if the deleted field is in the array\r\n         let index = this.settings.countColumns.indexOf(field.id);\r\n         // if so splice it out of the array\r\n         if (index > -1) {\r\n            this.settings.countColumns.splice(index, 1);\r\n            // flag the object to be saved later\r\n            shouldSave = true;\r\n         }\r\n      }\r\n      // if settings were changed call the callback\r\n\r\n      cb(null, shouldSave);\r\n   }\r\n\r\n   copyUpdateProperyList() {\r\n      return [\"detailsPage\", \"detailsTab\", \"editPage\", \"editTab\"];\r\n   }\r\n};\r\n","const ABViewWidget = require(\"../../platform/views/ABViewWidget\");\r\n\r\nconst ABViewImagePropertyComponentDefaults = {\r\n   filename: \"\",\r\n   width: 200,\r\n   height: 100,\r\n};\r\n\r\nconst ABViewDefaults = {\r\n   key: \"image\", // {string} unique key for this view\r\n   icon: \"picture-o\", // {string} fa-[icon] reference for this view\r\n   labelKey: \"Image\", // {string} the multilingual label key for the class label\r\n};\r\n\r\nmodule.exports = class ABViewImageCore extends ABViewWidget {\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(values, application, parent, defaultValues || ABViewDefaults);\r\n   }\r\n\r\n   static common() {\r\n      return ABViewDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return ABViewImagePropertyComponentDefaults;\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /**\r\n    * @method fromValues()\r\n    *\r\n    * initialze this object with the given set of values.\r\n    * @param {obj} values\r\n    */\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n\r\n      // convert from \"0\" => 0\r\n      this.settings.width = parseInt(\r\n         this.settings.width || ABViewImagePropertyComponentDefaults.width\r\n      );\r\n      this.settings.height = parseInt(\r\n         this.settings.height || ABViewImagePropertyComponentDefaults.height\r\n      );\r\n   }\r\n};\r\n","const ABViewWidget = require(\"../../platform/views/ABViewWidget\");\r\n\r\nconst ABViewKanbanPropertyComponentDefaults = {\r\n   dataviewID: null,\r\n   // {uuid}\r\n   // The ABDataCollection.uuid that we are using to store the data.\r\n   // NOTE: we actually use the DC to get the ABObject it is connected to.\r\n\r\n   editFields: [],\r\n   // {array}\r\n   // An array of {ABField.id} that determines which fields should show up\r\n   // in the editor.\r\n\r\n   verticalGroupingField: \"\",\r\n   // {ABField.id}\r\n   // the .id of the ABField instance that determines the Vertical Grouping\r\n   // of the Kanban.\r\n\r\n   horizontalGroupingField: \"\",\r\n   // {ABField.id}\r\n   // the .id of the ABField instance that determines the horizontal Grouping\r\n   // of the Kanban.\r\n\r\n   ownerField: \"\",\r\n   // {ABFieldUser.id}\r\n   // the .id of the ABFieldUser instance that determines the owner of the\r\n   // entries.\r\n\r\n   template: \"\",\r\n   // {json}\r\n   // The {ABViewText} definition used to display the template for this KanBan.\r\n   //\r\n   // A display template used for displaying the information in each Card. The\r\n   // template is a basic string with special placeholders:  {field.id}\r\n   // Given a row of data, the current object will scan the template for any\r\n   // placeholders matching one of it's fields, and then update it with the\r\n   // current value.\r\n};\r\n\r\nconst ABViewDefaults = {\r\n   key: \"kanban\",\r\n   // {string}\r\n   // unique key identifier for this ABViewForm\r\n\r\n   icon: \"columns\",\r\n   // {string}\r\n   // font-awesome icon reference: (without 'fa-' )\r\n\r\n   labelKey: \"Kanban\",\r\n   // {string}\r\n   // the multilingual label key\r\n   // NOTE: will be used as L(labelKey)\r\n};\r\n\r\nmodule.exports = class ABViewKanbanCore extends ABViewWidget {\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(values, application, parent, defaultValues || ABViewDefaults);\r\n   }\r\n\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n\r\n      // set a default .template value\r\n      if (!this.settings.template) {\r\n         this.settings.template = { id: `${this.id}_template`, key: \"text\" };\r\n         this.settings.template.text = this.settings.textTemplate;\r\n      }\r\n\r\n      this.TextTemplate = this.AB.viewNewDetatched(this.settings.template);\r\n   }\r\n\r\n   toObj() {\r\n      var obj = super.toObj();\r\n      obj.settings.template = this.TextTemplate.toObj();\r\n      return obj;\r\n   }\r\n\r\n   static common() {\r\n      return ABViewDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return ABViewKanbanPropertyComponentDefaults;\r\n   }\r\n};\r\n","const ABViewWidget = require(\"../../platform/views/ABViewWidget\");\r\n\r\nconst ABViewLabelPropertyComponentDefaults = {\r\n   label: \"\",\r\n   format: 0, // 0 - normal, 1 - title, 2 - description\r\n   alignment: \"left\",\r\n};\r\n\r\nconst ABViewDefaults = {\r\n   key: \"label\", // {string} unique key for this view\r\n   icon: \"font\", // {string} fa-[icon] reference for this view\r\n   labelKey: \"ab.components.label\", // {string} the multilingual label key for the class label\r\n};\r\n\r\nmodule.exports = class ABViewLabelCore extends ABViewWidget {\r\n   /**\r\n    * @param {obj} values  key=>value hash of ABView values\r\n    * @param {ABApplication} application the application object this view is under\r\n    * @param {ABViewWidget} parent the ABViewWidget this view is a child of. (can be null)\r\n    */\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(values, application, parent, defaultValues || ABViewDefaults);\r\n   }\r\n\r\n   static common() {\r\n      return ABViewDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return ABViewLabelPropertyComponentDefaults;\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /**\r\n    * @method toObj()\r\n    *\r\n    * properly compile the current state of this ABViewLabel instance\r\n    * into the values needed for saving.\r\n    *\r\n    * @return {json}\r\n    */\r\n   toObj() {\r\n      this.unTranslate(this, this, [\"label\", \"text\"]);\r\n\r\n      var obj = super.toObj();\r\n      obj.viewIDs = [];\r\n      return obj;\r\n   }\r\n\r\n   /**\r\n    * @method fromValues()\r\n    *\r\n    * initialze this object with the given set of values.\r\n    * @param {obj} values\r\n    */\r\n   fromValues(values) {\r\n      super.fromValues(values); // <-- this performs the translations\r\n\r\n      // if this is being instantiated on a read from the Property UI,\r\n      // .text is coming in under .settings.label\r\n      this.text = values.text || values.settings.text || \"*text\";\r\n\r\n      this.settings.format =\r\n         this.settings.format || ABViewLabelPropertyComponentDefaults.format;\r\n      this.settings.alignment =\r\n         this.settings.alignment ||\r\n         ABViewLabelPropertyComponentDefaults.alignment;\r\n\r\n      // we are not allowed to have sub views:\r\n      this._views = [];\r\n\r\n      // convert from \"0\" => 0\r\n      this.settings.format = parseInt(this.settings.format);\r\n\r\n      this.translate(this, this, [\"label\", \"text\"]);\r\n   }\r\n\r\n   /**\r\n    * @method componentList\r\n    * return the list of components available on this view to display in the editor.\r\n    */\r\n   componentList() {\r\n      return [];\r\n   }\r\n\r\n   //// Allow external interface to manipulate our settings:\r\n\r\n   /**\r\n    * @method formatNormal\r\n    * display text in the normal format.\r\n    */\r\n   formatNormal() {\r\n      this.settings.format = 0;\r\n   }\r\n\r\n   /**\r\n    * @method formatTitle\r\n    * display text as a Title.\r\n    */\r\n   formatTitle() {\r\n      this.settings.format = 1;\r\n   }\r\n\r\n   /**\r\n    * @method formatDescription\r\n    * display text as a description.\r\n    */\r\n   formatDescription() {\r\n      this.settings.format = 2;\r\n   }\r\n};\r\n","const ABViewContainer = require(\"../../platform/views/ABViewContainer\");\r\nconst ABViewWidget = require(\"../../platform/views/ABViewWidget\");\r\n\r\nconst PropertyComponentDefaults = {\r\n   label: \"\",\r\n   numColumns: 1, // The number of columns for this layout\r\n};\r\n\r\nconst ABViewDefaults = {\r\n   key: \"layout\", // {string} unique key for this view\r\n   icon: \"columns\", // {string} fa-[icon] reference for this view\r\n   labelKey: \"Layout\", // {string} the multilingual label key for the class label\r\n};\r\n\r\nmodule.exports = class ABViewLayoutCore extends ABViewWidget {\r\n   /**\r\n    * @param {obj} values  key=>value hash of ABView values\r\n    * @param {ABApplication} application the application object this view is under\r\n    * @param {ABView} parent the ABView this view is a child of. (can be null)\r\n    */\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(values, application, parent, defaultValues || ABViewDefaults);\r\n   }\r\n\r\n   static common() {\r\n      return ABViewDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return PropertyComponentDefaults;\r\n   }\r\n\r\n   /**\r\n    * @method addColumn\r\n    * method to actually add a new ABView as one of our columns.\r\n    * This is called by the static .addView() method.\r\n    */\r\n   addColumn() {\r\n      this._views.push(\r\n         this.application.viewNew(\r\n            {\r\n               key: ABViewContainer.common().key,\r\n            },\r\n            this.application,\r\n            this\r\n         )\r\n      );\r\n   }\r\n\r\n   /**\r\n    * @method componentList\r\n    * return the list of components available on this view to display in the editor.\r\n    * @param {bool} isEdited  is this component currently in the Interface Editor\r\n    * @return {array} of ABView objects.\r\n    */\r\n   componentList(isEdited) {\r\n      if (isEdited) {\r\n         // if the layout component is being edited in the editor (isEdited == true)\r\n         // then we return [];\r\n         return [];\r\n      } else {\r\n         // the layout view doesn't care what components are offered, it get's\r\n         // the list from it's parent view.\r\n         // ## NOTE: layout views should not be root views.\r\n         if (this.parent) {\r\n            return this.parent.componentList(false);\r\n         } else {\r\n            return [];\r\n         }\r\n      }\r\n   }\r\n};\r\n","const ABViewWidget = require(\"../../platform/views/ABViewWidget\");\r\n\r\nconst ABViewListPropertyComponentDefaults = {\r\n   dataviewID: null,\r\n   field: null,\r\n   height: 0,\r\n};\r\n\r\nconst ABViewDefaults = {\r\n   key: \"list\", // {string} unique key for this view\r\n   icon: \"list-ul\", // {string} fa-[icon] reference for this view\r\n   labelKey: \"List\", // {string} the multilingual label key for the class label\r\n};\r\n\r\nmodule.exports = class ABViewLabelCore extends ABViewWidget {\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(values, application, parent, defaultValues || ABViewDefaults);\r\n   }\r\n\r\n   static common() {\r\n      return ABViewDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return ABViewListPropertyComponentDefaults;\r\n   }\r\n\r\n   field() {\r\n      var dv = this.datacollection;\r\n      if (!dv) return null;\r\n\r\n      var object = dv.datasource;\r\n      if (!object) return null;\r\n\r\n      return object.fields((f) => f.id == this.settings.field)[0];\r\n   }\r\n};\r\n","const ABViewWidget = require(\"../../platform/views/ABViewWidget\");\r\n\r\nconst ABViewMenuPropertyComponentDefaults = {\r\n   orientation: \"x\",\r\n   buttonStyle: \"ab-menu-default\",\r\n   menuAlignment: \"ab-menu-left\",\r\n   menuInToolbar: 1,\r\n   menuPadding: 10,\r\n   menuTheme: \"bg_gray\",\r\n   menuPosition: \"left\",\r\n   menuTextLeft: \"\",\r\n   menuTextRight: \"\",\r\n   menuTextCenter: \"\",\r\n   // [\r\n   // \t\t{\r\n   //\t\t\tpageId: uuid,\r\n   //\t\t\ttabId: uuid,\r\n   //\t\t\ttype: string, // \"page\", \"tab\"\r\n   //\t\t\tisChecked: bool,\r\n   //\t\t\taliasname: string,\r\n   //\t\t\ttranslations: []\r\n   //\t\t}\r\n   // ]\r\n   pages: [],\r\n   order: [],\r\n};\r\n\r\nconst ABMenuDefaults = {\r\n   key: \"menu\", // {string} unique key for this view\r\n   icon: \"th-large\", // {string} fa-[icon] reference for this view\r\n   labelKey: \"Menu\", // {string} the multilingual label key for the class label\r\n};\r\n\r\nmodule.exports = class ABViewMenuCore extends ABViewWidget {\r\n   /**\r\n    * @param {obj} values  key=>value hash of ABView values\r\n    * @param {ABApplication} application the application object this view is under\r\n    * @param {ABViewWidget} parent the ABViewWidget this view is a child of. (can be null)\r\n    */\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(values, application, parent, defaultValues || ABMenuDefaults);\r\n   }\r\n\r\n   static common() {\r\n      return ABMenuDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return ABViewMenuPropertyComponentDefaults;\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /**\r\n    * @method toObj()\r\n    *\r\n    * properly compile the current state of this ABViewMenu instance\r\n    * into the values needed for saving.\r\n    *\r\n    * @return {json}\r\n    */\r\n   toObj() {\r\n      this.unTranslate(this, this, [\r\n         \"menuTextLeft\",\r\n         \"menuTextCenter\",\r\n         \"menuTextRight\",\r\n      ]);\r\n      if (this.settings.pages) {\r\n         this.settings.pages.forEach((page) => {\r\n            this.unTranslate(page, page, [\"aliasname\"]);\r\n         });\r\n      }\r\n\r\n      var obj = super.toObj();\r\n      obj.viewIDs = [];\r\n      return obj;\r\n   }\r\n\r\n   /**\r\n    * @method fromValues()\r\n    *\r\n    * initialze this object with the given set of values.\r\n    * @param {obj} values\r\n    */\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n\r\n      this.translate(this, this, [\r\n         \"menuTextLeft\",\r\n         \"menuTextCenter\",\r\n         \"menuTextRight\",\r\n      ]);\r\n\r\n      this.settings.pages =\r\n         this.settings.pages || ABViewMenuPropertyComponentDefaults.pages;\r\n\r\n      for (var i = 0; i < this.settings.pages.length; i++) {\r\n         var page = this.settings.pages[i];\r\n         if (page instanceof Object) {\r\n            page.isChecked = JSON.parse(page.isChecked || false);\r\n\r\n            this.translate(page, page, [\"aliasname\"]);\r\n         }\r\n         // Compatible with old data\r\n         else if (typeof page == \"string\") {\r\n            this.settings.pages[i] = {\r\n               pageId: page,\r\n               isChecked: true,\r\n            };\r\n         }\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method componentList\r\n    * return the list of components available on this view to display in the editor.\r\n    */\r\n   componentList() {\r\n      return [];\r\n   }\r\n\r\n   ClearPagesInView(view) {\r\n      // clear menu items\r\n      if (view && view.count() > 1) {\r\n         view.find({}).forEach((item) => {\r\n            view.remove(item.id);\r\n         });\r\n      }\r\n   }\r\n\r\n   AddPagesToView(view, pages) {\r\n      if (!view || !pages) return;\r\n\r\n      (pages || []).forEach((displayPage) => {\r\n         if (displayPage.isChecked) {\r\n            let existsPage = this.application.pages(\r\n               (p) => p.id == displayPage.pageId,\r\n               true\r\n            )[0];\r\n            if (!existsPage) return;\r\n\r\n            var pageAccessLevel = existsPage.getUserAccess();\r\n            if (pageAccessLevel == 0) return;\r\n\r\n            if (displayPage.tabId) {\r\n               let existsTab = this.application.views(\r\n                  (v) => v.id == displayPage.tabId,\r\n                  true\r\n               )[0];\r\n               if (!existsTab) return;\r\n\r\n               var tabAccessLevel = existsTab.getUserAccess();\r\n               if (tabAccessLevel == 0) return;\r\n            }\r\n\r\n            let label = this.getAliasname(displayPage);\r\n            // create a temporaty store for the menu item\r\n            var menuItem;\r\n            // check if page has a parent or not\r\n            if (displayPage.parent && displayPage.parent != \"0\") {\r\n               // if page has a parent attempt to grab its submenu\r\n               menuItem = view.getSubMenu(displayPage.parent);\r\n            } else {\r\n               // if the page doesn't have parent use the current menu\r\n               menuItem = view;\r\n            }\r\n            // if the menu item doesn't have a menu selected find it\r\n            if (menuItem == null) {\r\n               // get the menu item\r\n               var curMenu = view.getMenuItem(displayPage.parent);\r\n               // create a submenu placeholder\r\n               curMenu.submenu = [];\r\n               // update the menu with the new submenu included\r\n               view.refresh(displayPage.parent);\r\n               // get the submenu we just created\r\n               menuItem = view.getSubMenu(displayPage.parent);\r\n            }\r\n            if (menuItem.exists(displayPage.tabId || displayPage.pageId))\r\n               return;\r\n            // add a new item to the menu/submenu\r\n            menuItem.add(\r\n               {\r\n                  id: displayPage.tabId || displayPage.pageId,\r\n                  value: label,\r\n                  type: displayPage.type,\r\n                  pageId: displayPage.pageId,\r\n                  icon: displayPage.icon\r\n                     ? \"fa fa-fw fa-\" + displayPage.icon\r\n                     : \"\",\r\n               },\r\n               displayPage.position ? parseInt(displayPage.position) : 0\r\n            );\r\n         }\r\n      });\r\n   }\r\n\r\n   /**\r\n    * @method getAliasname\r\n    * @param pageInfo - an object in settings\r\n    * {\r\n    * \tpageId: uuid,\r\n    * \ttabId: uuid,\r\n    * \ttype: string, - \"page\" or \"tab\"\r\n    * \tisChecked: bool,\r\n    * \taliasname: string,\r\n    *\ttranslations: []\r\n    *}\r\n    *\r\n    * @return {string}\r\n    */\r\n   getAliasname(pageInfo) {\r\n      var lang = this.AB.Multilingual.currentLanguage();\r\n      var translation = pageInfo.translations.filter((t) => {\r\n         return t.language_code == lang;\r\n      });\r\n\r\n      var label = \"\";\r\n\r\n      if (translation.length) {\r\n         if (translation[0].aliasname) {\r\n            label = translation[0].aliasname;\r\n         } else if (translation[0].label) {\r\n            label = translation[0].label;\r\n         }\r\n      }\r\n\r\n      // Just in case there isn't one stored in the translations yet\r\n      if (!label && pageInfo.aliasname) {\r\n         label = pageInfo.aliasname;\r\n      }\r\n\r\n      // if alias is empty, then find label of page or tab\r\n      if (\r\n         !label ||\r\n         // remove [en] or [th] etc.\r\n         !label.replace(/\\[.{2,}\\]/g, \"\")\r\n      ) {\r\n         // first check to see if we are actually on a page\r\n         // if not recursivly look up for the nearest parent page\r\n         var pageId;\r\n         if (pageInfo.pageId) {\r\n            pageId = pageInfo.pageId;\r\n         } else {\r\n            pageId = this.getParentPageId(pageInfo);\r\n         }\r\n         // find label of the actual page\r\n         var page = this.application.pages((p) => p.id == pageId, true)[0];\r\n         if (page) {\r\n            // find label of the tab view\r\n            if (pageInfo.type == \"tab\" || pageInfo.key == \"viewcontainer\") {\r\n               var tabView = page.views(\r\n                  (v) => v.id == pageInfo.tabId || v.id == pageInfo.id,\r\n                  true\r\n               )[0];\r\n               if (tabView) {\r\n                  label = tabView.label;\r\n               }\r\n            } else {\r\n               label = page.label;\r\n            }\r\n         }\r\n      }\r\n\r\n      return label;\r\n   }\r\n\r\n   getParentPageId(currentView) {\r\n      if (currentView.key != \"page\") {\r\n         return this.getParentPageId(currentView.parent);\r\n      } else {\r\n         return currentView.id;\r\n      }\r\n   }\r\n\r\n   copy(lookUpIds, parent) {\r\n      return super.copy(lookUpIds, parent).then((result) => {\r\n         // update ids of page's settings\r\n         (result.settings.pages || []).forEach((p, i) => {\r\n            let page = result.settings.pages[i];\r\n\r\n            // Compatible with old data\r\n            if (typeof page == \"string\") {\r\n               result.settings.pages[i] = lookUpIds[page];\r\n            } else {\r\n               page.pageId = lookUpIds[page.pageId];\r\n               page.tabId = lookUpIds[page.tabId];\r\n            }\r\n         });\r\n\r\n         return result.save().then(() => {\r\n            return result;\r\n         });\r\n      });\r\n   }\r\n};\r\n","/*\r\n * ABViewPage\r\n *\r\n * An ABView that represents a \"Page\" in the system.\r\n *\r\n * Pages are\r\n *\t- allowed to be displayed in the interface list\r\n *\t- return a full list of components that can be added to the view editor\r\n *\r\n *\r\n */\r\n\r\nconst ABViewContainer = require(\"../../platform/views/ABViewContainer\");\r\n// var ABViewManager = require(\"../ABViewManager\");\r\n\r\n// function L(key, altText) {\r\n//     return AD.lang.label.getLabel(key) || altText;\r\n// }\r\n\r\nconst ABViewDefaults = {\r\n   key: \"page\", // unique key identifier for this ABView\r\n   icon: \"file\", // icon reference: (without 'fa-' )\r\n};\r\n\r\nconst ABPropertyComponentDefaults = {\r\n   type: \"page\", // 'page', 'popup' or 'reportPage'\r\n   popupWidth: 700,\r\n   popupHeight: 450,\r\n   pageWidth: null,\r\n   fixedPageWidth: 0,\r\n   pageBackground: \"ab-background-default\",\r\n};\r\n\r\nmodule.exports = class ABViewPageCore extends ABViewContainer {\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(values, application, parent, defaultValues || ABViewDefaults);\r\n\r\n      // \t{\r\n      // \t\tid:'uuid',\t\t\t\t\t// uuid value for this obj\r\n      // \t\tkey:'viewKey',\t\t\t\t// unique key for this View Type\r\n      // \t\ticon:'font',\t\t\t\t// fa-[icon] reference for an icon for this View Type\r\n\r\n      //\t\tname: '',\t\t\t\t\t// unique page name\r\n\r\n      // \t\tlabel:'',\t\t\t\t\t// pulled from translation\r\n\r\n      //\t\tsettings: {\t\t\t\t\t// unique settings for the type of field\r\n      //\t\t},\r\n\r\n      //\t\ttranslations:[]\r\n      // \t}\r\n\r\n      this.parent = null; // will be set by the pageNew() that creates this obj.\r\n      // {obj} .parent\r\n      // this points to the ABView object that manages this object as a child.\r\n      // this param is shared across ABViews as well as ABViewPage, but has\r\n      // different implications ... so we default an ABViewPage.parent = null\r\n      // and the place that Creates the Page must assign the .parent externally.\r\n   }\r\n\r\n   static common() {\r\n      return ABViewDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return ABPropertyComponentDefaults;\r\n   }\r\n\r\n   static getPageActionKey(view) {\r\n      return [\r\n         \"opstools\",\r\n         \"AB_\" + String(view.application.name).replace(/[^a-z0-9]/gi, \"\"),\r\n         String(view.name)\r\n            .replace(/[^a-z0-9]/gi, \"\")\r\n            .toLowerCase(),\r\n         \"view\",\r\n      ].join(\".\");\r\n   }\r\n\r\n   /**\r\n    * @method toObj()\r\n    *\r\n    * properly compile the current state of this ABViewPage instance\r\n    * into the values needed for saving to the DB.\r\n    *\r\n    * @return {json}\r\n    */\r\n   toObj() {\r\n      var obj = super.toObj();\r\n\r\n      obj.name = this.name;\r\n\r\n      obj.myAppID = this.myAppID;\r\n\r\n      // icon of popup page\r\n      if (this.settings.type == \"popup\") obj.icon = \"clone\";\r\n\r\n      // set label of the page\r\n      if (!this.label || this.label == \"?label?\") obj.label = obj.name;\r\n\r\n      // compile our pages\r\n      obj.pageIDs = (this._pages || []).map((p) => p.id);\r\n\r\n      return obj;\r\n   }\r\n\r\n   /**\r\n    * @method fromValues()\r\n    *\r\n    * initialze this object with the given set of values.\r\n    * @param {obj} values\r\n    */\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n\r\n      // icon of popup page\r\n      if (values.settings.type == \"popup\") this.icon = \"clone\";\r\n\r\n      // set label of the page\r\n      if (!this.label || this.label == \"?label?\") this.label = this.name;\r\n\r\n      // track which application this Page belongs to:\r\n      this.myAppID = values.myAppID;\r\n      if (!this.myAppID && this.application) {\r\n         this.myAppID = this.application.id;\r\n      }\r\n\r\n      // now properly handle our sub pages.\r\n      var pages = [];\r\n      (values.pageIDs || []).forEach((id) => {\r\n         var def = this.AB.definitionByID(id);\r\n         if (def) {\r\n            pages.push(this.pageNew(def));\r\n         } else {\r\n            this.AB.error(\r\n               `App[${this.application.name}][${this.application.id}]->Page[${this.name}][${this.id}] referenced an unknown Page[${id}]`\r\n            );\r\n         }\r\n      });\r\n      this._pages = pages;\r\n\r\n      // the default columns of ABView is 1\r\n      this.settings.columns = this.settings.columns || 1;\r\n      this.settings.gravity = this.settings.gravity || [1];\r\n\r\n      // convert from \"0\" => 0\r\n   }\r\n\r\n   /**\r\n    * @method destroy()\r\n    *\r\n    * destroy the current instance of ABApplication\r\n    *\r\n    * also remove it from our _AllApplications\r\n    *\r\n    * @return {Promise}\r\n    */\r\n   destroy() {\r\n      return Promise.resolve()\r\n         .then(() => {\r\n            // When deleting an ABViewPage\r\n            // be sure to remove any of it's ABViewPages as well\r\n            // This cleans out any dangling ABDefinitions and cleans up the\r\n            // OpsPortal Permissions:\r\n\r\n            var allPageDeletes = [];\r\n            var allPages = this.pages();\r\n            this._pages = [];\r\n            // doing ._pages = [] prevents any of my updates when\r\n            // a sub-page is .destroy()ed\r\n\r\n            allPages.forEach((p) => {\r\n               allPageDeletes.push(p.destroy());\r\n            });\r\n            return Promise.all(allPageDeletes);\r\n         })\r\n         .then(() => {\r\n            var parent = this.parent || this.application;\r\n\r\n            return parent.pageRemove(this);\r\n         })\r\n         .then(() => {\r\n            return super.destroy();\r\n         });\r\n\r\n      // return new Promise((resolve, reject) => {\r\n      //    // verify we have been .save() before:\r\n      //    if (this.id) {\r\n      //       this.application\r\n      //          .viewDestroy(this)\r\n      //          .then(() => {\r\n      //             // remove the page in list\r\n      //             var parent = this.parent || this.application;\r\n      //             var remainingPages = parent.pages((p) => {\r\n      //                return p.id != this.id;\r\n      //             });\r\n      //             parent._pages = remainingPages;\r\n\r\n      //             resolve();\r\n      //          })\r\n      //          .catch(reject);\r\n      //    } else {\r\n      //       resolve(); // nothing to do really\r\n      //    }\r\n      // });\r\n   }\r\n\r\n   /**\r\n    * @method save()\r\n    * persist this instance of ABViewPage\r\n    * @return {Promise}\r\n    *         .resolve( {this} )\r\n    */\r\n   save() {\r\n      return Promise.resolve()\r\n         .then(() => {\r\n            // this creates our .id\r\n            return super.save();\r\n         })\r\n         .then(() => {\r\n            // now we can persist ourself in our parent\r\n            var parent = this.parent || this.application;\r\n\r\n            return parent.pageInsert(this);\r\n         })\r\n         .then(() => {\r\n            return this;\r\n         });\r\n   }\r\n\r\n   ///\r\n   /// Pages\r\n   ///\r\n\r\n   /**\r\n    * @method pages()\r\n    *\r\n    * return an array of all the ABViewPages for this ABViewPage.\r\n    *\r\n    * @param {fn} filter\t\ta filter fn to return a set of ABViewPages that this fn\r\n    *\t\t\t\t\t\t\treturns true for.\r\n    * @param {boolean} deep\tflag to find in sub pages\r\n    *\r\n    * @return {array}\t\t\tarray of ABViewPages\r\n    */\r\n   pages(filter = () => true, deep = false) {\r\n      var result = [];\r\n\r\n      // find into sub-pages recursively\r\n      if (filter && deep) {\r\n         if (this._pages && this._pages.length > 0) {\r\n            result = this._pages.filter(filter);\r\n\r\n            if (result.length < 1) {\r\n               this._pages.forEach((p) => {\r\n                  var subPages = p.pages(filter, deep);\r\n                  if (subPages && subPages.length > 0) {\r\n                     result = subPages;\r\n                  }\r\n               });\r\n            }\r\n         }\r\n      }\r\n      // find root pages\r\n      else {\r\n         result = this._pages.filter(filter);\r\n      }\r\n\r\n      return result;\r\n   }\r\n\r\n   /**\r\n    * @method pageInsert()\r\n    *\r\n    * save the given ABViewPage in our ._pages array and persist the current\r\n    * values if they changed.\r\n    *\r\n    * @param {ABViewPage} page The instance of the page to save.\r\n    * @return {Promise}\r\n    */\r\n   pageInsert(page) {\r\n      var isIncluded = this.pages((o) => o.id === page.id).length > 0;\r\n      if (!isIncluded) {\r\n         // if not already included, then add and save the Obj definition:\r\n         this._pages.push(page);\r\n         return this.save();\r\n      }\r\n\r\n      // Nothing was required so return\r\n      return Promise.resolve();\r\n   }\r\n\r\n   /**\r\n    * @method pageNew()\r\n    *\r\n    * return an instance of a new (unsaved) ABViewPage that is tied to this\r\n    * ABViewPage.\r\n    *\r\n    * NOTE: this new page is not included in our this.pages until a .save()\r\n    * is performed on the page.\r\n    *\r\n    * @return {ABViewPage}\r\n    */\r\n   pageNew(values) {\r\n      // make sure this is an ABViewPage description\r\n      values.key = ABViewDefaults.key;\r\n\r\n      // NOTE: this returns a new ABView component.\r\n      // when creating a new page, the 3rd param should be null, to signify\r\n      // the top level component.\r\n      var page = this.application.viewNew(values, this.application, null);\r\n      page.parent = this;\r\n      return page;\r\n   }\r\n\r\n   /**\r\n    * @method pageRemove()\r\n    *\r\n    * remove the given ABViewPage from our ._pages array and persist the current\r\n    * values.\r\n    *\r\n    * @param {ABViewPage} page The instance of the page to remove.\r\n    * @return {Promise}\r\n    */\r\n   pageRemove(page) {\r\n      var origLen = this._pages.length;\r\n      this._pages = this.pages(function (p) {\r\n         return p.id != page.id;\r\n      });\r\n\r\n      if (this._pages.length < origLen) {\r\n         return this.save();\r\n      }\r\n\r\n      // if we get here, then nothing changed so nothing to do.\r\n      return Promise.resolve();\r\n   }\r\n\r\n   /**\r\n    * @method urlView()\r\n    * return the url pointer for views in this application.\r\n    * @return {string}\r\n    */\r\n   urlPage() {\r\n      return this.urlPointer() + \"/_pages/\";\r\n   }\r\n\r\n   /**\r\n    * @method urlPointer()\r\n    * return the url pointer that references this view.  This url pointer\r\n    * should be able to be used by this.application.urlResolve() to return\r\n    * this view object.\r\n    * @return {string}\r\n    */\r\n   urlPointer() {\r\n      if (this.parent) {\r\n         return this.parent.urlPage() + this.id;\r\n      } else {\r\n         return this.application.urlPage() + this.id;\r\n      }\r\n   }\r\n\r\n   updateIcon(obj) {\r\n      // icon of page\r\n      if (obj.settings.type == \"popup\") {\r\n         obj.icon = \"clone\";\r\n      } else {\r\n         obj.icon = ABViewDefaults.icon;\r\n      }\r\n      return obj;\r\n   }\r\n\r\n   /**\r\n    * @method clone()\r\n    * clone the defintions of this ABViewPage object.\r\n    * @param {obj} lookUpIds\r\n    *        an { oldID : newID } lookup hash for converting ABView objects\r\n    *        and their setting pointers.\r\n    * @param {ABView*} parent\r\n    *        Which ABView should be connected as the parent object of this\r\n    *        copy.\r\n    * @return {obj}\r\n    *        defs of the copied ABView\r\n    */\r\n   clone(lookUpIds, parent) {\r\n      // initial new ids of pages and components\r\n      if (lookUpIds == null) {\r\n         // create a hash of { oldID : newID } of any sub Pages and Views.\r\n         lookUpIds = {};\r\n\r\n         let mapNewIdFn = (currView) => {\r\n            if (!lookUpIds[currView.id])\r\n               lookUpIds[currView.id] = this.AB.uuid();\r\n\r\n            if (currView.pages) {\r\n               currView.pages().forEach((p) => mapNewIdFn(p));\r\n            }\r\n\r\n            if (currView.views) {\r\n               currView.views().forEach((v) => mapNewIdFn(v));\r\n            }\r\n         };\r\n\r\n         // start map new ids\r\n         mapNewIdFn(this);\r\n      }\r\n\r\n      // copy\r\n      let result = super.clone(lookUpIds, parent);\r\n\r\n      // page's name should not be duplicate\r\n      result.name = null;\r\n\r\n      return result;\r\n   }\r\n\r\n   /**\r\n    * @method copy()\r\n    * create a new copy of this ABViewPage object. The resulting ABView should\r\n    * be identical in settings and all sub pages/views, but each new object\r\n    * is a unique view (different ids).\r\n    * @param {obj} lookUpIds\r\n    *        an { oldID : newID } lookup hash for converting ABView objects\r\n    *        and their setting pointers.\r\n    * @param {ABView*} parent\r\n    *        Which ABView should be connected as the parent object of this\r\n    *        copy.\r\n    * @return {Promise}\r\n    *        .resolved with the instance of the copied ABView\r\n    */\r\n   copy(lookUpIds, parent, options) {\r\n      // initial new ids of pages and components\r\n      if (lookUpIds == null) {\r\n         // create a hash of { oldID : newID } of any sub Pages and Views.\r\n         lookUpIds = {};\r\n\r\n         let mapNewIdFn = (currView) => {\r\n            if (!lookUpIds[currView.id])\r\n               lookUpIds[currView.id] = this.AB.uuid();\r\n\r\n            if (currView.pages) {\r\n               currView.pages().forEach((p) => mapNewIdFn(p));\r\n            }\r\n\r\n            if (currView.views) {\r\n               currView.views().forEach((v) => mapNewIdFn(v));\r\n            }\r\n         };\r\n\r\n         // start map new ids\r\n         mapNewIdFn(this);\r\n      }\r\n\r\n      // now continue with the default .copy()\r\n      return super.copy(lookUpIds, parent, options);\r\n   }\r\n};\r\n","const ABViewWidget = require(\"../../platform/views/ABViewWidget\");\r\n\r\nconst ABViewPivotPropertyComponentDefaults = {\r\n   dataviewID: null,\r\n   removeMissed: 0,\r\n   totalColumn: 0,\r\n   separateLabel: 0,\r\n   min: 0,\r\n   max: 0,\r\n   height: 0,\r\n};\r\n\r\nconst ABViewDefaults = {\r\n   key: \"pivot\", // {string} unique key for this view\r\n   icon: \"cube\", // {string} fa-[icon] reference for this view\r\n   labelKey: \"ab.components.pivot\", // {string} the multilingual label key for the class label\r\n};\r\n\r\nmodule.exports = class ABViewPivotCore extends ABViewWidget {\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(values, application, parent, defaultValues || ABViewDefaults);\r\n   }\r\n\r\n   static common() {\r\n      return ABViewDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return ABViewPivotPropertyComponentDefaults;\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /**\r\n    * @method fromValues()\r\n    *\r\n    * initialze this object with the given set of values.\r\n    * @param {obj} values\r\n    */\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n\r\n      // Convert to boolean\r\n      this.settings.removeMissed = JSON.parse(\r\n         this.settings.removeMissed ||\r\n            ABViewPivotPropertyComponentDefaults.removeMissed\r\n      );\r\n      this.settings.totalColumn = JSON.parse(\r\n         this.settings.totalColumn ||\r\n            ABViewPivotPropertyComponentDefaults.totalColumn\r\n      );\r\n      this.settings.separateLabel = JSON.parse(\r\n         this.settings.separateLabel ||\r\n            ABViewPivotPropertyComponentDefaults.separateLabel\r\n      );\r\n      this.settings.min = JSON.parse(\r\n         this.settings.allowDelete || ABViewPivotPropertyComponentDefaults.min\r\n      );\r\n      this.settings.max = JSON.parse(\r\n         this.settings.max || ABViewPivotPropertyComponentDefaults.max\r\n      );\r\n\r\n      if (this.settings.structure && typeof this.settings.structure == \"string\")\r\n         this.settings.structure = JSON.parse(this.settings.structure);\r\n\r\n      // \"0\" -> 0\r\n      this.settings.height = parseInt(\r\n         this.settings.height || ABViewPivotPropertyComponentDefaults.height\r\n      );\r\n   }\r\n\r\n   /**\r\n    * @method toObj()\r\n    *\r\n    * properly compile the current state of this ABViewLabel instance\r\n    * into the values needed for saving.\r\n    *\r\n    * @return {json}\r\n    */\r\n   toObj() {\r\n      var obj = super.toObj();\r\n\r\n      obj.views = [];\r\n      obj.settings = obj.settings || {};\r\n\r\n      if (this.settings.structure)\r\n         obj.settings.structure = JSON.stringify(this.settings.structure);\r\n\r\n      return obj;\r\n   }\r\n\r\n   /**\r\n    * @method componentList\r\n    * return the list of components available on this view to display in the editor.\r\n    */\r\n   componentList() {\r\n      return [];\r\n   }\r\n};\r\n","const ABViewWidget = require(\"../../platform/views/ABViewWidget\");\r\n\r\nconst ABViewReportManagerPropertyComponentDefaults = {\r\n   moduleList: [],\r\n   queryList: []\r\n};\r\n\r\nconst ABViewDefaults = {\r\n   key: \"reportsManager\", // {string} unique key for this view\r\n   icon: \"wpforms\", // {string} fa-[icon] reference for this view\r\n   labelKey: \"ab.components.reportsManager\" // {string} the multilingual label key for the class label\r\n};\r\n\r\nmodule.exports = class ABViewReportsManagerCore extends ABViewWidget {\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(values, application, parent, defaultValues || ABViewDefaults);\r\n   }\r\n\r\n   static common() {\r\n      return ABViewDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return ABViewReportManagerPropertyComponentDefaults;\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /**\r\n    * @method fromValues()\r\n    *\r\n    * initialze this object with the given set of values.\r\n    * @param {obj} values\r\n    */\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n\r\n      this.settings.moduleList =\r\n         this.settings.moduleList ||\r\n         ABViewReportManagerPropertyComponentDefaults.moduleList;\r\n\r\n      this.settings.queryList =\r\n         this.settings.queryList ||\r\n         ABViewReportManagerPropertyComponentDefaults.queryList;\r\n   }\r\n\r\n   /**\r\n    * @method toObj()\r\n    *\r\n    * properly compile the current state of this ABViewLabel instance\r\n    * into the values needed for saving.\r\n    *\r\n    * @return {json}\r\n    */\r\n   toObj() {\r\n      var obj = super.toObj();\r\n\r\n      obj.settings = obj.settings || {};\r\n\r\n      return obj;\r\n   }\r\n\r\n   /**\r\n    * @method componentList\r\n    * return the list of components available on this view to display in the editor.\r\n    */\r\n   componentList() {\r\n      return [];\r\n   }\r\n};\r\n\r\n","const ABViewWidget = require(\"../../platform/views/ABViewWidget\");\r\nconst ABViewContainer = require(\"../../platform/views/ABViewContainer\");\r\n\r\nconst ABViewTabPropertyComponentDefaults = {\r\n   height: 0,\r\n   minWidth: 0,\r\n   stackTabs: 0, // use sidebar view instead of tabview\r\n   darkTheme: 0, // set dark theme css or not\r\n   sidebarWidth: 200, // width of sidebar menu when stacking tabs\r\n   sidebarPos: \"left\", // the default position of sidebar\r\n   iconOnTop: 0, // do you want to put the icon above the text label?\r\n};\r\n\r\nconst ABViewTabDefaults = {\r\n   key: \"tab\", // {string} unique key for this view\r\n   icon: \"window-maximize\", // {string} fa-[icon] reference for this view\r\n   labelKey: \"Tab\", // {string} the multilingual label key for the class label\r\n};\r\n\r\nmodule.exports = class ABViewTabCore extends ABViewWidget {\r\n   /**\r\n    * @param {obj} values  key=>value hash of ABView values\r\n    * @param {ABApplication} application the application object this view is under\r\n    * @param {ABViewWidget} parent the ABViewWidget this view is a child of. (can be null)\r\n    */\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(values, application, parent, defaultValues || ABViewTabDefaults);\r\n   }\r\n\r\n   static common() {\r\n      return ABViewTabDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return ABViewTabPropertyComponentDefaults;\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /**\r\n    * @method fromValues()\r\n    *\r\n    * initialze this object with the given set of values.\r\n    * @param {obj} values\r\n    */\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n\r\n      // convert from \"0\" => 0\r\n      this.settings.height = parseInt(this.settings.height);\r\n      this.settings.minWidth = parseInt(this.settings.minWidth || 0);\r\n      this.settings.stackTabs = parseInt(this.settings.stackTabs);\r\n      this.settings.darkTheme = parseInt(this.settings.darkTheme);\r\n      this.settings.sidebarWidth = parseInt(this.settings.sidebarWidth);\r\n      this.settings.sidebarPos = this.settings.sidebarPos;\r\n      this.settings.iconOnTop = parseInt(this.settings.iconOnTop);\r\n   }\r\n\r\n   addTab(tabName, tabIcon) {\r\n      return this.application\r\n         .viewNew(\r\n            {\r\n               key: ABViewContainer.common().key,\r\n               label: tabName,\r\n               tabicon: tabIcon,\r\n            },\r\n            this.application,\r\n            this\r\n         )\r\n         .save();\r\n   }\r\n\r\n   /**\r\n    * @method componentList\r\n    * return the list of components available on this view to display in the editor.\r\n    */\r\n   componentList() {\r\n      return [];\r\n   }\r\n};\r\n","const ABViewWidget = require(\"../../platform/views/ABViewWidget\");\r\n\r\nconst ABViewTextPropertyComponentDefaults = {\r\n   text: \"\",\r\n   // {string}\r\n   // A multilingual text template that is used to display a given set of\r\n   // values.\r\n\r\n   height: 0,\r\n   // {integer}\r\n   // The default height of this widget.\r\n\r\n   dataviewID: null,\r\n   // {uuid}\r\n   // The {ABDataCollection.id} of the datacollection this ABViewText is\r\n   // pulling data from.\r\n   // In most usage situations this ABView is tied to the data in an\r\n   // ABDataCollection.  However, it is possible for an ABObject to be\r\n   // directly assigned to the ABView, and that will be used instead.\r\n};\r\n\r\nconst ABViewDefaults = {\r\n   key: \"text\",\r\n   // {string}\r\n   // unique key for this view\r\n\r\n   icon: \"font\",\r\n   // {string}\r\n   // fa-[icon] reference for this view\r\n\r\n   labelKey: \"Text\",\r\n   // {string}\r\n   // the multilingual label key for the class label\r\n};\r\n\r\nmodule.exports = class ABViewTextCore extends ABViewWidget {\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(values, application, parent, defaultValues || ABViewDefaults);\r\n\r\n      this._object = null;\r\n   }\r\n\r\n   static common() {\r\n      return ABViewDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return ABViewTextPropertyComponentDefaults;\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /**\r\n    * @method toObj()\r\n    *\r\n    * properly compile the current state of this ABViewLabel instance\r\n    * into the values needed for saving.\r\n    *\r\n    * @return {json}\r\n    */\r\n   toObj() {\r\n      // NOTE: ABView auto translates/untranslates \"label\"\r\n      // add in any additional fields here:\r\n      this.unTranslate(this, this, [\"text\"]);\r\n\r\n      var obj = super.toObj();\r\n      obj.views = [];\r\n      return obj;\r\n   }\r\n\r\n   /**\r\n    * @method fromValues()\r\n    *\r\n    * initialze this object with the given set of values.\r\n    * @param {obj} values\r\n    */\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n\r\n      this.settings = this.settings || {};\r\n\r\n      // convert from \"0\" => 0\r\n      this.settings.height = parseInt(\r\n         this.settings.height || ABViewTextPropertyComponentDefaults.height\r\n      );\r\n\r\n      // if this is being instantiated on a read from the Property UI,\r\n      this.text = values.text || ABViewTextPropertyComponentDefaults.text;\r\n\r\n      // NOTE: ABView auto translates/untranslates \"label\"\r\n      // add in any additional fields here:\r\n      this.translate(this, this, [\"text\"]);\r\n   }\r\n\r\n   /**\r\n    * @method componentList\r\n    * return the list of components available on this view to display in the editor.\r\n    */\r\n   componentList() {\r\n      return [];\r\n   }\r\n\r\n   /**\r\n    * @property datacollection\r\n    * return ABDatacollection of this form\r\n    *\r\n    * @return {ABDatacollection}\r\n    */\r\n   get datacollection() {\r\n      if (this.parent?.key == \"dataview\") {\r\n         return this.AB.datacollectionByID(this.parent.settings.dataviewID);\r\n      } else {\r\n         return this.AB.datacollectionByID(this.settings.dataviewID);\r\n      }\r\n   }\r\n\r\n   fieldKey(field) {\r\n      let label = field.label || \"\";\r\n      label = label.replace(/\\(/g, \"\\\\(\");\r\n      label = label.replace(/\\)/g, \"\\\\)\");\r\n      return label;\r\n   }\r\n\r\n   displayText(val, componentID) {\r\n      var result = this.text;\r\n\r\n      let clearTemplateValue = (result) => {\r\n         return result.replace(/{(.*?)}/g, \"\");\r\n      };\r\n\r\n      var dv = this.datacollection;\r\n      // if (!dv) return clearTemplateValue(result);\r\n\r\n      var object = dv?.datasource ?? this._object;\r\n      if (!object) return clearTemplateValue(result);\r\n\r\n      const rowData = val || dv.getCursor() || {};\r\n\r\n      object.fields().forEach((f) => {\r\n         // add \\\\ in front of the regular expression special charactors\r\n         // let label = f.label || \"\";\r\n         // label = label.replace(/\\(/g, \"\\\\(\");\r\n         // label = label.replace(/\\)/g, \"\\\\)\");\r\n         let label = this.fieldKey(f);\r\n\r\n         var template = new RegExp(\"{\" + label + \"}\", \"g\");\r\n\r\n         // IDEA: I'd like to keep all the image url logic INSIDE the ABFieldImage\r\n         // object.  Is there some way we can simply call: f.imageTemplate(rowData)\r\n         // and parse the results for the url to display here?\r\n\r\n         var data = f.format(rowData);\r\n         if (f.key == \"image\") {\r\n            var fData = data;\r\n            data = f.urlImage(fData);\r\n\r\n            // Question: should we change f.urlImage() to return the defaultImageUrl\r\n            // if fData is \"\" and .useDefaultImage = true?\r\n\r\n            if (\r\n               !fData &&\r\n               f.settings.defaultImageUrl &&\r\n               f.settings.useDefaultImage\r\n            ) {\r\n               data = f.urlImage(f.settings.defaultImageUrl);\r\n\r\n               ////\r\n               //// James:  Revisit this and make sure we are handling things ok now.\r\n               // result = result.replace(\r\n               //    \"img\",\r\n               //    'img onload=\\'AD.comm.hub.publish(\"component.adjust\", {\"containerID\": \"' +\r\n               //       componentID +\r\n               //       \"\\\"});' \"\r\n               // );\r\n               // } else if (\r\n               //    fData != \"\" &&\r\n               //    result.indexOf(\"onload\") == -1 &&\r\n               //    componentID\r\n               // ) {\r\n               // result = result.replace(\r\n               //    \"img\",\r\n               //    'img onload=\\'AD.comm.hub.publish(\"component.adjust\", {\"containerID\": \"' +\r\n               //       componentID +\r\n               //       \"\\\"});' \"\r\n               // );\r\n            } else {\r\n               ////\r\n               //// James: It looks like this routine assumes the this.text template will\r\n               //// only have 1 <img> tag in it.  Is that necessarilly true?\r\n               ////\r\n               //// If NOT, then we need to rethink this next line:\r\n\r\n               result = result.replace(\r\n                  \"img\",\r\n                  \"img onerror='this.parentNode.removeChild(this);' \"\r\n               );\r\n            }\r\n         }\r\n\r\n         result = result.replace(template, data);\r\n      });\r\n\r\n      // Support {uuid} tag in tempalte\r\n      result = result.replace(/{PK}/g, rowData[object.PK()]);\r\n\r\n      return result;\r\n   }\r\n\r\n   objectLoad(object) {\r\n      this._object = object;\r\n   }\r\n};\r\n","const ABView = require(\"../../platform/views/ABView\");\r\n\r\nconst ABViewDefaults = {\r\n   key: \"viewwidget\", // {string} unique key for this view\r\n   icon: \"circle-o-notch \", // {string} fa-[icon] reference for this view\r\n   labelKey: \"ab.components.widget\", // {string} the multilingual label key for the class label\r\n};\r\n\r\nconst ABPropertyComponentDefaults = {\r\n   columnSpan: 1,\r\n   rowSpan: 1,\r\n};\r\n\r\nmodule.exports = class ABViewWidgetCore extends ABView {\r\n   /**\r\n    * @param {obj} values  key=>value hash of ABView values\r\n    * @param {ABApplication} application the application object this view is under\r\n    * @param {ABView} parent the ABView this view is a child of. (can be null)\r\n    * @param {obj} defaultValues special sub class defined default values.\r\n    */\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(values, application, parent, defaultValues || ABViewDefaults);\r\n   }\r\n\r\n   static common() {\r\n      return ABViewDefaults;\r\n   }\r\n\r\n   static defaultValues() {\r\n      return ABPropertyComponentDefaults;\r\n   }\r\n\r\n   /**\r\n    * @method fromValues()\r\n    *\r\n    * initialze this object with the given set of values.\r\n    * @param {obj} values\r\n    */\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n\r\n      // convert from \"0\" => 0\r\n      this.settings.columnSpan = parseInt(\r\n         this.settings.columnSpan || ABPropertyComponentDefaults.columnSpan\r\n      );\r\n      this.settings.rowSpan = parseInt(\r\n         this.settings.rowSpan || ABPropertyComponentDefaults.rowSpan\r\n      );\r\n   }\r\n};\r\n","const _ = require(\"lodash\");\r\n\r\n// prettier-ignore\r\nconst ABApplicationCore = require(\"../core/ABApplicationCore.js\");\r\n\r\nconst ABViewPage = require(\"./views/ABViewPage\");\r\nconst ABViewManager = require(\"./ABViewManager\");\r\n\r\nmodule.exports = class ABClassApplication extends ABApplicationCore {\r\n   constructor(attributes, AB) {\r\n      super(attributes, AB);\r\n\r\n      // now listen for any updates to our managed objects\r\n      this._handler_page_updated = (definition) => {\r\n         var currPage = this._pages.find((p) => p.id === definition.id);\r\n         if (currPage) {\r\n            this._pages = this._pages.filter((p) => p.id != currPage.id);\r\n            this._pages.push(currPage.refreshInstance());\r\n         }\r\n      };\r\n      this._pages.forEach((p) => {\r\n         p.on(\"definition.updated\", this._handler_page_updated);\r\n      });\r\n   }\r\n\r\n   static applications(/*fn = () => true*/) {\r\n      console.error(\r\n         \"ABApplication.applicationForID(): Depreciated. Who is doing this?\"\r\n      );\r\n      return null;\r\n   }\r\n   static applicationForID(/*id*/) {\r\n      var errDepreciated = new Error(\r\n         \"ABApplication.applicationForID(): Depreciated. Who is doing this?\"\r\n      );\r\n      console.error(errDepreciated);\r\n      return null;\r\n   }\r\n\r\n   static definitionForID(/*id*/) {\r\n      var errDepreciated = new Error(\r\n         \"ABApplication.definitionForID(): Depreciated. Who is doing this?\"\r\n      );\r\n      console.error(errDepreciated);\r\n      return null;\r\n   }\r\n\r\n   areaKey() {\r\n      return this.AB.kebabCase(`ab-${this.name}`);\r\n   }\r\n\r\n   /**\r\n    * @method refreshInstance()\r\n    * Used when a definition.updated message is detected on this ABApplication.\r\n    * This method will return a new instance based upon the current definition\r\n    * and properly resolve any handlers and pending network Requests.\r\n    * @return {ABObject}\r\n    */\r\n   refreshInstance() {\r\n      var newObj = this.AB.applicationByID(this.id);\r\n\r\n      // remove my listeners\r\n      this._pages.forEach((p) => {\r\n         p.removeListener(\"definition.updated\", this._handler_page_updated);\r\n      });\r\n\r\n      return newObj;\r\n   }\r\n\r\n   ///\r\n   /// Definition\r\n   ///\r\n\r\n   /**\r\n    * @method _listInsert()\r\n    * save the given entity into our desired list:\r\n    * @param {varid} entity\r\n    * @param {string} key\r\n    *        the key of the list we are managing\r\n    * @return {Promise}\r\n    */\r\n   async _listInsert(entity, key) {\r\n      var isIncluded = this[key].indexOf(entity.id) != -1;\r\n      if (!isIncluded) {\r\n         this[key].push(entity.id);\r\n         await this.save();\r\n      }\r\n   }\r\n\r\n   async _listRemove(entity, key) {\r\n      var begLen = this[key].length;\r\n      this[key] = this[key].filter((id) => {\r\n         return id != entity.id;\r\n      });\r\n      // if there was a change then save this.\r\n      if (begLen != this[key].length) {\r\n         await this.save();\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method datacollectionInsert()\r\n    * persist the current ABDataCollection in our list of .datacollectionIDs.\r\n    * @param {ABDataCollection} dc\r\n    * @return {Promise}\r\n    */\r\n   datacollectionInsert(dc) {\r\n      return this._listInsert(dc, \"datacollectionIDs\");\r\n   }\r\n\r\n   /**\r\n    * @method datacollectionRemove()\r\n    * remove the given ABDataCollection from our list of .datacollectionIDs.\r\n    * @param {ABDataCollection} dc\r\n    * @return {Promise}\r\n    */\r\n   datacollectionRemove(dc) {\r\n      return this._listRemove(dc, \"datacollectionIDs\");\r\n   }\r\n\r\n   /**\r\n    * @method objectInsert()\r\n    * persist the current ABObject in our list of .objectIDs.\r\n    * @param {ABObject} object\r\n    * @return {Promise}\r\n    */\r\n   objectInsert(object) {\r\n      return this._listInsert(object, \"objectIDs\");\r\n   }\r\n\r\n   /**\r\n    * @method objectRemove()\r\n    * remove the current ABObject from our list of .objectIDs.\r\n    * NOTE: this method persists the changes to the server.\r\n    * @param {ABObject} object\r\n    * @return {Promise}\r\n    */\r\n   objectRemove(object) {\r\n      return this._listRemove(object, \"objectIDs\");\r\n   }\r\n\r\n   /**\r\n    * @method processInsert()\r\n    * persist the current ABProcess in our list of .processIDs.\r\n    * @param {ABProcess} process\r\n    * @return {Promise}\r\n    */\r\n   processInsert(process) {\r\n      this._processes.push(process);\r\n      return this._listInsert(process, \"processIDs\");\r\n   }\r\n\r\n   /**\r\n    * @method processRemove()\r\n    * remove the current ABProcess from our list of .processIDs.\r\n    * NOTE: this method persists the changes to the server.\r\n    * @param {ABProcess} process\r\n    * @return {Promise}\r\n    */\r\n   processRemove(process) {\r\n      this._processes = this._processes.filter((p) => p.id != process.id);\r\n      return this._listRemove(process, \"processIDs\");\r\n   }\r\n\r\n   /**\r\n    * @method queryInsert()\r\n    * persist the current ABObjectQuery in our list of .queryIDs.\r\n    * @param {ABObjectQuery} query\r\n    * @return {Promise}\r\n    */\r\n   queryInsert(query) {\r\n      return this._listInsert(query, \"queryIDs\");\r\n   }\r\n\r\n   /**\r\n    * @method queryRemove()\r\n    * remove the current ABObjectQuery from our list of .queryIDs.\r\n    * NOTE: this method persists the changes to the server.\r\n    * @param {ABObjectQuery} query\r\n    * @return {Promise}\r\n    */\r\n   queryRemove(query) {\r\n      return this._listRemove(query, \"queryIDs\");\r\n   }\r\n\r\n   /**\r\n    * @method exportIDs()\r\n    * export any relevant .ids for the necessary operation of this application.\r\n    * @param {array} ids\r\n    *         the array of ids to insert any relevant .ids into\r\n    */\r\n   exportIDs(ids) {\r\n      // make sure we don't get into an infinite loop:\r\n      if (ids.indexOf(this.id) > -1) return;\r\n\r\n      ids.push(this.id);\r\n\r\n      // start with Objects:\r\n      this.objectsIncluded().forEach((o) => {\r\n         o.exportIDs(ids);\r\n      });\r\n\r\n      // Queries\r\n      this.queriesIncluded().forEach((q) => {\r\n         q.exportIDs(ids);\r\n      });\r\n\r\n      // Datacollections\r\n      // NOTE: currently the server doesn't make instances of DataCollections\r\n      // so we manually parse the related info here:\r\n      this.datacollectionIDs.forEach((dID) => {\r\n         if (ids.indexOf(dID) > -1) return;\r\n\r\n         var def = this.AB.definitionByID(dID);\r\n         if (def) {\r\n            ids.push(dID);\r\n            if (def.settings.datasourceID) {\r\n               var object = this.AB.objectByID(def.settings.datasourceID);\r\n               if (object) {\r\n                  object.exportIDs(ids);\r\n               }\r\n            }\r\n         }\r\n      });\r\n\r\n      // Processes\r\n      this.processes().forEach((p) => {\r\n         p.exportIDs(ids);\r\n      });\r\n\r\n      // Pages\r\n      // NOTE: currently the server doesn't make instances of ABViews\r\n      // so we manually parse the object data here:\r\n      var parseView = (view) => {\r\n         if (ids.indexOf(view.id) > -1) return;\r\n         ids.push(view.id);\r\n         (view.pageIDs || []).forEach((pid) => {\r\n            var pdef = this.AB.definitionByID(pid);\r\n            if (pdef) {\r\n               parseView(pdef);\r\n            }\r\n         });\r\n\r\n         (view.viewIDs || []).forEach((vid) => {\r\n            var vdef = this.AB.definitionByID(vid);\r\n            if (vdef) {\r\n               parseView(vdef);\r\n            }\r\n         });\r\n      };\r\n\r\n      var pageIDs = this._pages.map((p) => p.id);\r\n      (pageIDs || []).forEach((pid) => {\r\n         var pdef = this.AB.definitionByID(pid);\r\n         if (pdef) {\r\n            parseView(pdef);\r\n         }\r\n      });\r\n\r\n      // return only unique entries:\r\n      ids = this.AB.uniq(ids);\r\n   }\r\n\r\n   /**\r\n    * @method pageNew()\r\n    * return a new instance of an ABViewPage\r\n    * @param values\r\n    *        The initial settings for the page.\r\n    * @return {ABViewPage}\r\n    */\r\n   pageNew(values) {\r\n      return new ABViewPage(values, this);\r\n   }\r\n\r\n   /**\r\n    * @method pageInsert()\r\n    * Insert a new ABViewPage into this Application.\r\n    * @param {ABViewPage} page\r\n    *        The instance of the page to save.\r\n    * @return {Promise}\r\n    */\r\n   async pageInsert(page) {\r\n      // var isIncluded = this.pageByID(page.id);\r\n      var isIncluded = this._pages.filter((p) => p.id == page.id)[0];\r\n      if (!isIncluded) {\r\n         this._pages.push(page);\r\n         // Save our own Info:\r\n         return this.save();\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method pageRemove()\r\n    * remove the current ABViewPage from our list of pages.\r\n    * @param {ABViewPage} page\r\n    * @return {Promise}\r\n    */\r\n   async pageRemove(page) {\r\n      var origLen = this._pages.length;\r\n      this._pages = this.pages(function (p) {\r\n         return p.id != page.id;\r\n      });\r\n\r\n      if (this._pages.length < origLen) {\r\n         return this.save();\r\n      }\r\n\r\n      // if we get here, then nothing changed so nothing to do.\r\n   }\r\n\r\n   save() {\r\n      // if someone just changed the name of our ABApplication, reflect that\r\n      // in our Def.Name\r\n      if (this.name != this.label) {\r\n         this.name = this.label;\r\n      }\r\n      return super.save();\r\n   }\r\n\r\n   warningsEval() {\r\n      this._warnings = [];\r\n\r\n      //\r\n      // check for valid object references:\r\n      //\r\n      var checks = {\r\n         objectIDs: \"object\",\r\n         queryIDs: \"query\",\r\n         datacollectionIDs: \"datacollection\",\r\n      };\r\n\r\n      Object.keys(checks).forEach((k) => {\r\n         this[k].forEach((id) => {\r\n            var def = this.AB.definitionByID(id);\r\n            if (!def) {\r\n               this.emit(\r\n                  \"warning\",\r\n                  `Application is referencing a missing ${checks[k]}`,\r\n                  {\r\n                     appID: this.id,\r\n                     id,\r\n                  }\r\n               );\r\n            }\r\n         });\r\n      });\r\n\r\n      //\r\n      // Make sure there is some way to access this Application:\r\n      //\r\n      if (this.roleAccess.length == 0 && !this.isAccessManaged) {\r\n         this.emit(\r\n            \"warning\",\r\n            \"Application has no Role assigned, and is unaccessible.\"\r\n         );\r\n      }\r\n\r\n      // do our Role references exist?\r\n      var allRoles = this.AB.Account.rolesAll().map((r) => r.id);\r\n      this.roleAccess.forEach((r) => {\r\n         if (allRoles.indexOf(r) == -1) {\r\n            this.emit(\r\n               \"warning\",\r\n               `Specified Role Access [${r}] does not exist in this system`,\r\n               { role: r }\r\n            );\r\n         }\r\n      });\r\n   }\r\n\r\n   warningsAll() {\r\n      var warnings = [].concat(this._warnings);\r\n      [\r\n         \"objectsIncluded\",\r\n         \"queriesIncluded\",\r\n         \"datacollectionsIncluded\",\r\n         \"processes\",\r\n         \"pages\",\r\n         \"views\",\r\n      ].forEach((k) => {\r\n         this[k]().forEach((o) => {\r\n            warnings = warnings.concat(o.warningsAll());\r\n         });\r\n      });\r\n\r\n      return warnings;\r\n   }\r\n\r\n   /**\r\n    * @method mobileAppNew()\r\n    *\r\n    * return an instance of a new (unsaved) ABMobileApp that is tied to this\r\n    * ABApplication.\r\n    *\r\n    * @return {ABMobileApp}\r\n    */\r\n   // mobileAppNew(values) {\r\n   //    return new ABMobileApp(values, this);\r\n   // }\r\n};\r\n","const ABEmitter = require(\"./ABEmitter\");\r\n\r\nconst CustomComponentManager = require(\"../../webix_custom_components/customComponentManager\");\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABComponent extends ABEmitter {\r\n   /**\r\n    * @param {object} App\r\n    *      ?what is this?\r\n    * @param {string} idBase\r\n    *      Identifier for this component\r\n    */\r\n   constructor(App, idBase, AB) {\r\n      super();\r\n\r\n      // Transition Code:\r\n      // make sure we have an this.AB\r\n      if (App && App.AB) {\r\n         this.AB = App.AB;\r\n      }\r\n\r\n      // passed in AB will override\r\n      if (AB) {\r\n         this.AB = AB;\r\n         // {ABFactory} AB\r\n      }\r\n\r\n      if (!App) {\r\n         if (AB._App) {\r\n            App = AB._App;\r\n         } else {\r\n            App = {\r\n               uuid: AB.Webix.uid(),\r\n\r\n               /*\r\n                * AB\r\n                * the {ABFactory} for our interface.\r\n                */\r\n               AB: AB,\r\n\r\n               /*\r\n                * actions:\r\n                * a hash of exposed application methods that are shared among our\r\n                * components, so one component can invoke an action that updates\r\n                * another component.\r\n                */\r\n               actions: {},\r\n\r\n               /*\r\n                * config\r\n                * webix configuration settings for our current browser\r\n                */\r\n               config: AB.UISettings.config(),\r\n\r\n               /*\r\n                * custom\r\n                * a collection of custom components for this App Instance.\r\n                */\r\n               custom: null,\r\n\r\n               /*\r\n                * Icons\r\n                * this will provide you with the list of avaialbe font awesome 4.7.0 icons to use in interface building\r\n                */\r\n               icons: AB.UISettings.icons,\r\n\r\n               Label: L,\r\n\r\n               /*\r\n                * labels\r\n                * a collection of labels that are common for the Application.\r\n                */\r\n               labels: {\r\n                  add: L(\"Add\"),\r\n                  create: L(\"Create\"),\r\n                  delete: L(\"Delete\"),\r\n                  edit: L(\"Edit\"),\r\n                  export: L(\"Export\"),\r\n                  formName: L(\"Name\"),\r\n                  import: L(\"Import\"),\r\n                  rename: L(\"Rename\"),\r\n                  ok: L(\"Ok\"),\r\n\r\n                  cancel: L(\"Cancel\"),\r\n                  save: L(\"Save\"),\r\n\r\n                  yes: L(\"Yes\"),\r\n                  no: L(\"No\"),\r\n\r\n                  none: L(\"None\"),\r\n                  close: L(\"Close\"),\r\n\r\n                  default: L(\"Default\"),\r\n                  defaultPlaceholder: L(\"Enter default value\"),\r\n\r\n                  disable: L(\"Disable\"),\r\n\r\n                  required: L(\"Required\"),\r\n                  unique: L(\"Unique\"),\r\n\r\n                  invalidMessage: {\r\n                     required: L(\"This field is required\"),\r\n                  },\r\n\r\n                  createErrorMessage: L(\"System could not create <b>{0}</b>.\"),\r\n                  createSuccessMessage: L(\"<b>{0}</b> is created.\"),\r\n\r\n                  updateErrorMessage: L(\"System could not update <b>{0}</b>.\"),\r\n                  updateSucessMessage: L(\"<b>{0}</b> is updated.\"),\r\n\r\n                  deleteErrorMessage: L(\"System could not delete <b>{0}</b>.\"),\r\n                  deleteSuccessMessage: L(\"<b>{0}</b> is deleted.\"),\r\n\r\n                  renameErrorMessage: L(\"System could not rename <b>{0}</b>.\"),\r\n                  renameSuccessMessage: L(\"<b>{0}</b> is renamed.\"),\r\n\r\n                  // Data Field  common Property labels:\r\n                  dataFieldHeaderLabel: L(\"Section Title\"),\r\n                  dataFieldHeaderLabelPlaceholder: L(\"Section Name\"),\r\n\r\n                  dataFieldLabel: L(\"Label\"),\r\n                  dataFieldLabelPlaceholder: L(\"Label\"),\r\n\r\n                  dataFieldColumnName: L(\"Field Name\"),\r\n                  dataFieldColumnNamePlaceholder: L(\"Database field name\"),\r\n\r\n                  dataFieldShowIcon: L(\"show icon?\"),\r\n\r\n                  componentDropZone: L(\"add widgets here\"),\r\n               },\r\n\r\n               /*\r\n                * unique()\r\n                * A function that returns a globally unique Key.\r\n                * @param {string} key   The key to modify and return.\r\n                * @return {string}\r\n                */\r\n               unique: function (key) {\r\n                  return `${key}${this.uuid}`;\r\n               },\r\n            };\r\n            AB._App = App;\r\n         }\r\n      }\r\n\r\n      if (!App.custom) {\r\n         if (!AB.custom) {\r\n            var componentManager = new CustomComponentManager();\r\n            componentManager.initComponents(App);\r\n         } else {\r\n            App.custom = AB.custom;\r\n         }\r\n      }\r\n\r\n      this.App = App;\r\n\r\n      this.idBase = idBase || \"?idbase?\";\r\n   }\r\n\r\n   actions(_actions) {\r\n      console.error(\"!!! REFACTOR out .actions()\");\r\n      if (_actions) {\r\n         for (var a in _actions) {\r\n            this.App.actions[a] = _actions[a];\r\n         }\r\n      }\r\n   }\r\n\r\n   Label() {\r\n      return (...params) => {\r\n         // console.error(\"!! App.label() depreciated.\");\r\n         return this.AB.Multilingual.label(...params);\r\n      };\r\n   }\r\n\r\n   unique(key) {\r\n      return this.App.unique(`${this.idBase}_${key}`);\r\n   }\r\n};\r\n","const ABObjectQuery = require(\"./ABObjectQuery\");\r\nconst ABDataCollectionCore = require(\"../core/ABDataCollectionCore\");\r\n\r\nmodule.exports = class ABDataCollection extends ABDataCollectionCore {\r\n   constructor(attributes, AB) {\r\n      super(attributes, AB);\r\n      this.setMaxListeners(0);\r\n   }\r\n\r\n   /**\r\n    * @method save()\r\n    *\r\n    * persist this instance of ABDataCollection with it's parent\r\n    *\r\n    *\r\n    * @return {Promise}\r\n    *\t\t\t.resolve( {this} )\r\n    */\r\n   async save() {\r\n      if (!this.id) {\r\n         this.label = this.label || this.name;\r\n      }\r\n      await super.save();\r\n      this.AB.emit(\"ab.datacollection.update\", {\r\n         datacollectionId: this.id,\r\n      });\r\n      return this;\r\n   }\r\n\r\n   isValid() {\r\n      var validator = this.AB.Validation.validator();\r\n      var L = this.AB.Label();\r\n\r\n      // label/name must be unique:\r\n      var isNameUnique =\r\n         this.AB.datacollections((o) => {\r\n            return (\r\n               o.id != this.id &&\r\n               o.name.toLowerCase() == this.name.toLowerCase()\r\n            );\r\n         }).length == 0;\r\n      if (!isNameUnique) {\r\n         validator.addError(\r\n            \"name\",\r\n            L('Name must be unique (\"{0}\" already in use)', [this.name])\r\n         );\r\n      }\r\n\r\n      return validator;\r\n   }\r\n\r\n   ///\r\n   /// Cursor\r\n   ///\r\n\r\n   /**\r\n    * currentUserUsername\r\n    * must return the proper value for the current user that would match a \"user\" field\r\n    * in an object.\r\n    * This is platform dependent, so must be implemented by a child object.\r\n    * @return {string}\r\n    */\r\n   currentUserUsername() {\r\n      return this.AB.Account.username();\r\n   }\r\n\r\n   ///\r\n   /// Data\r\n   ///\r\n\r\n   init() {\r\n      // prevent initialize many times\r\n      if (this.initialized) return;\r\n      // this.initialized = true;  // <<---- DO NOT SET THIS HERE\r\n\r\n      super.init();\r\n\r\n      //// Now connect our platform hub to our Object Triggers:\r\n\r\n      // events\r\n      this.AB.on(\"ab.datacollection.create\", (data) => {\r\n         // debugger;\r\n         this.emit(\"ab.datacollection.create\", data);\r\n      });\r\n\r\n      this.AB.on(\"ab.datacollection.update\", (data) => {\r\n         // debugger;\r\n         this.emit(\"ab.datacollection.update\", data);\r\n      });\r\n\r\n      // We are subscribing to notifications from the server that an item may\r\n      // be stale and needs updating\r\n      // We will improve this later and verify that it needs updating before\r\n      // attempting the update on the client side\r\n      this.AB.on(\"ab.datacollection.stale\", (data) => {\r\n         // debugger;\r\n         this.emit(\"ab.datacollection.stale\", data);\r\n      });\r\n\r\n      this.AB.on(\"ab.datacollection.delete\", (data) => {\r\n         // debugger;\r\n         this.emit(\"ab.datacollection.delete\", data);\r\n      });\r\n\r\n      this.bindParentDc();\r\n   }\r\n\r\n   bindParentDc() {\r\n      // if we pass the master datacollection and the field it is linked to\r\n      // we want to bind it witht hat field as second param so dataFeed is\r\n      // used on the slave datacollection\r\n      let dataCollectionLink = this.datacollectionLink;\r\n      let fieldLink = this.fieldLink;\r\n      if (!this.settings.loadAll && dataCollectionLink && fieldLink) {\r\n         let dc = this.__dataCollection;\r\n         // the second param is the field id we bind the data to the master with\r\n         dc.bind(dataCollectionLink.__dataCollection, fieldLink.id);\r\n         // defining dataFeed allows us to query the database when the table is scrolled\r\n         dc.define(\"dataFeed\", (value, params) => {\r\n            // copy current wheres\r\n            var wheres = this.AB.cloneDeep(\r\n               this.settings.objectWorkspace.filterConditions\r\n            );\r\n            // add bind items data as a filter to wheres\r\n            if (value) {\r\n               // don't include an empty where condition in our .rules\r\n               // start by replacing it with null\r\n               if (!wheres.rules) {\r\n                  wheres = null;\r\n               }\r\n\r\n               wheres = {\r\n                  glue: \"and\",\r\n                  rules: [\r\n                     wheres,\r\n                     {\r\n                        alias: fieldLink.alias, // ABObjectQuery\r\n                        key: Object.keys(params)[0],\r\n                        rule: fieldLink.alias ? \"contains\" : \"equals\", // NOTE: If object is query, then use \"contains\" because ABOBjectQuery return JSON\r\n                        value: fieldLink.getRelationValue(\r\n                           dataCollectionLink.__dataCollection.getItem(value)\r\n                        ),\r\n                     },\r\n                  ],\r\n               };\r\n\r\n               // remove any null in the .rules\r\n               wheres.rules = wheres.rules.filter((r) => r);\r\n            }\r\n\r\n            // this is the same item that was already bound...don't reload data\r\n            if (\r\n               JSON.stringify(this.__reloadWheres) == JSON.stringify(wheres) ||\r\n               (wheres.rules && wheres.rules.length == 0)\r\n            ) {\r\n               return;\r\n            } else {\r\n               // now that we have the modified wheres the dataCollections wheres\r\n               // need to be modified for subsequent loads on scroll so lets set them\r\n               this.reloadWheres(wheres);\r\n               // reload data\r\n               this.reloadData(0, 20);\r\n            }\r\n         });\r\n      }\r\n   }\r\n\r\n   loadData(start, limit = 20) {\r\n      return super.loadData(start, limit).catch((err) => {\r\n         // hideProgressOfComponents() is a platform specific action.\r\n         this.hideProgressOfComponents();\r\n\r\n         // propagate the error here:\r\n         if (err) {\r\n            throw err;\r\n         }\r\n      });\r\n   }\r\n\r\n   /**\r\n    * processIncomingData()\r\n    * is called from loadData() once the data is returned.  This method\r\n    * allows the platform to make adjustments to the data based upon any\r\n    * platform defined criteria.\r\n    * @param {obj} data  the data as it was returned from the Server\r\n    *        which should be in following format:\r\n    *        {\r\n    *          status: \"success\", // or \"error\"\r\n    *          data:[ {ABObjectData}, {ABObjectData}, ...]\r\n    *        }\r\n    */\r\n   processIncomingData(data) {\r\n      // Web Platform:\r\n\r\n      // data check:\r\n      if (data.data && !Array.isArray(data.data)) {\r\n         data.data = [data.data];\r\n      }\r\n\r\n      // standardize the heights\r\n\r\n      /*\r\n       // In v2: we move the row height calculation into the Interface designer.\r\n       //\r\n\r\n      // calculate default value of $height of rows\r\n      let obj = this.datasource;\r\n      let defaultHeight = 0;\r\n      let minHeight = 0;\r\n      let imageFields = obj.fields((f) => f.key == \"image\");\r\n      let hiddenFields = obj.objectWorkspace.hiddenFields;\r\n      imageFields.forEach(function (f) {\r\n         if (hiddenFields.indexOf(f.columnName) == -1) {\r\n            if (\r\n               parseInt(f.settings.useHeight) == 1 &&\r\n               parseInt(f.settings.imageHeight) > minHeight\r\n            ) {\r\n               minHeight = parseInt(f.settings.imageHeight) + 20;\r\n            } else {\r\n               minHeight = 100;\r\n            }\r\n         }\r\n      });\r\n      if (minHeight > 0) {\r\n         defaultHeight = minHeight;\r\n      }\r\n\r\n      (data.data || []).forEach((d) => {\r\n         // define $height of rows to render in webix elements\r\n         if (\r\n            d.properties != null &&\r\n            d.properties.height != \"undefined\" &&\r\n            parseInt(d.properties.height) > 0\r\n         ) {\r\n            d.$height = parseInt(d.properties.height);\r\n         } else if (defaultHeight > 0) {\r\n            d.$height = defaultHeight;\r\n         }\r\n      });\r\n      */\r\n\r\n      return super.processIncomingData(data).then(() => {\r\n         // Web Platform:\r\n         // when that is done:\r\n         this.hideProgressOfComponents();\r\n      });\r\n   }\r\n\r\n   ///\r\n   /// Components\r\n   ///\r\n\r\n   /**\r\n    * @method attachFlexlayout\r\n    *\r\n    *\r\n    * @param {Object} component - a webix flexlayout element instance\r\n    */\r\n   attachFlexlayout(component) {\r\n      var dc = this.__dataCollection;\r\n\r\n      // prevent attach many times\r\n      if (this.__flexComponentIds.indexOf(component.config.id) > -1) {\r\n         return;\r\n      } else {\r\n         // keep component id to an array\r\n         this.__flexComponentIds.push(component.config.id);\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method bind\r\n    *\r\n    *\r\n    * @param {Object} component - a webix element instance\r\n    */\r\n   bind(component) {\r\n      var dc = this.__dataCollection;\r\n\r\n      // prevent bind many times\r\n      if (\r\n         this.__bindComponentIds.indexOf(component.config.id) > -1 &&\r\n         $$(component.config.id).data &&\r\n         $$(component.config.id).data.find &&\r\n         $$(component.config.id).data.find({}).length > 0\r\n      )\r\n         return;\r\n      // keep component id to an array\r\n      else this.__bindComponentIds.push(component.config.id);\r\n\r\n      if (\r\n         component.config.view == \"datatable\" ||\r\n         component.config.view == \"dataview\" ||\r\n         component.config.view == \"treetable\" ||\r\n         component.config.view == \"kanban\"\r\n      ) {\r\n         if (dc) {\r\n            var items = dc.count();\r\n            if (\r\n               items == 0 &&\r\n               (this._dataStatus == this.dataStatusFlag.notInitial ||\r\n                  this._dataStatus == this.dataStatusFlag.initializing) &&\r\n               component.showProgress\r\n            ) {\r\n               component.showProgress({ type: \"icon\" });\r\n            }\r\n\r\n            component.define(\"datafetch\", 20);\r\n            component.define(\"datathrottle\", 500);\r\n\r\n            // initial data of treetable\r\n            if (component.config.view == \"treetable\") {\r\n               if (\r\n                  this.datasource &&\r\n                  this.datasource.isGroup &&\r\n                  this.__treeCollection\r\n               ) {\r\n                  component.define(\"data\", this.__treeCollection);\r\n                  component.refresh();\r\n               } else {\r\n                  // NOTE: tree data does not support dynamic loading when scrolling\r\n                  // https://forum.webix.com/discussion/3078/dynamic-loading-in-treetable\r\n                  component.define(\"data\", []);\r\n                  component.parse(dc.find({}));\r\n               }\r\n            } else {\r\n               component.data.sync(dc);\r\n            }\r\n\r\n            // Implement .onDataRequest for paging loading\r\n            if (!this.settings.loadAll) {\r\n               component.___AD = component.___AD || {};\r\n               // if (component.___AD.onDataRequestEvent) component.detachEvent(component.___AD.onDataRequestEvent);\r\n               if (!component.___AD.onDataRequestEvent) {\r\n                  component.___AD.onDataRequestEvent = component.attachEvent(\r\n                     \"onDataRequest\",\r\n                     (start, count) => {\r\n                        if (component.showProgress)\r\n                           component.showProgress({ type: \"icon\" });\r\n\r\n                        // load more data to the data collection\r\n                        dc.loadNext(count, start);\r\n\r\n                        return false; // <-- prevent the default \"onDataRequest\"\r\n                     }\r\n                  );\r\n               }\r\n\r\n               // // NOTE : treetable should use .parse or TreeCollection\r\n               // // https://forum.webix.com/discussion/1694/tree-and-treetable-using-data-from-datacollection\r\n               // if (\r\n               //    component.config.view == \"treetable\" &&\r\n               //    !this.datasource.isGroup\r\n               // ) {\r\n               //    component.___AD = component.___AD || {};\r\n               //    if (!component.___AD.onDcLoadData) {\r\n               //       component.___AD.onDcLoadData = () => {\r\n               //          component.parse(dc.find({}));\r\n               //       };\r\n\r\n               //       this.on(\"loadData\", component.___AD.onDcLoadData);\r\n               //    }\r\n               // }\r\n            }\r\n         } else {\r\n            component.data.unsync();\r\n         }\r\n      } else if (component.bind) {\r\n         if (dc) {\r\n            // Do I need to check if there is any data in the collection before binding?\r\n            component.bind(dc);\r\n         } else {\r\n            component.unbind();\r\n         }\r\n\r\n         if (component.refresh) component.refresh();\r\n      }\r\n   }\r\n\r\n   unbind(component) {\r\n      if (!component) return;\r\n\r\n      component.detachEvent(\"onDataRequest\");\r\n      if (component.___AD) {\r\n         if (component.___AD.onDataRequestEvent)\r\n            delete component.___AD.onDataRequestEvent;\r\n\r\n         if (component.___AD.onDcLoadData) {\r\n            if (this.off) this.off(\"loadData\", component.___AD.onDcLoadData);\r\n            delete component.___AD.onDcLoadData;\r\n         }\r\n      }\r\n\r\n      if (component.data && component.data.unsync) {\r\n         component.data.unsync();\r\n         component.define(\"data\", []);\r\n      }\r\n\r\n      if (component.unbind) component.unbind();\r\n\r\n      if (component.refresh) component.refresh();\r\n\r\n      // remove from array\r\n      this.__bindComponentIds = (this.__bindComponentIds || []).filter(\r\n         (id) => id != component.config.id\r\n      );\r\n   }\r\n\r\n   hideProgressOfComponents() {\r\n      this.__bindComponentIds.forEach((comId) => {\r\n         if ($$(comId) && $$(comId).hideProgress) $$(comId).hideProgress();\r\n      });\r\n   }\r\n\r\n   /** Private methods */\r\n\r\n   /**\r\n    * @method _dataCollectionNew\r\n    * Get webix.DataCollection\r\n    *\r\n    * @return {webix.DataCollection}\r\n    *\r\n    * @param {Array} data - initial data\r\n    */\r\n   _dataCollectionNew(data) {\r\n      // get a webix data collection\r\n      let dc = new webix.DataCollection({\r\n         data: data || [],\r\n      });\r\n\r\n      this._extendCollection(dc);\r\n\r\n      return dc;\r\n   }\r\n\r\n   /**\r\n    * @method _treeCollectionNew\r\n    * Get webix.TreeCollection\r\n    *\r\n    * @return {webix.TreeCollection}\r\n    *\r\n    */\r\n   _treeCollectionNew() {\r\n      // get a webix data collection\r\n      let treeStore = new webix.TreeCollection();\r\n\r\n      this._extendCollection(treeStore);\r\n\r\n      return treeStore;\r\n   }\r\n\r\n   _extendCollection(dataStore) {\r\n      // Apply this data collection to support multi-selection\r\n      // https://docs.webix.com/api__refs__selectionmodel.html\r\n      webix.extend(dataStore, webix.SelectionModel);\r\n\r\n      dataStore.___AD = dataStore.___AD || {};\r\n\r\n      // Implement .onDataRequest for paging loading\r\n      if (!this.settings.loadAll) {\r\n         if (!dataStore.___AD.onDataRequestEvent) {\r\n            dataStore.___AD.onDataRequestEvent = dataStore.attachEvent(\r\n               \"onDataRequest\",\r\n               (start, count) => {\r\n                  if (start < 0) start = 0;\r\n\r\n                  // load more data to the data collection\r\n                  this.loadData(start, count);\r\n\r\n                  return false; // <-- prevent the default \"onDataRequest\"\r\n               }\r\n            );\r\n         }\r\n\r\n         if (!dataStore.___AD.onAfterLoadEvent) {\r\n            dataStore.___AD.onAfterLoadEvent = dataStore.attachEvent(\r\n               \"onAfterLoad\",\r\n               () => {\r\n                  this.emit(\"loadData\", {});\r\n               }\r\n            );\r\n         }\r\n      }\r\n\r\n      // override unused functions of selection model\r\n      dataStore.addCss = function () {};\r\n      dataStore.removeCss = function () {};\r\n      dataStore.render = function () {};\r\n\r\n      if (!dataStore.___AD.onAfterLoad) {\r\n         dataStore.___AD.onAfterLoad = dataStore.attachEvent(\r\n            \"onAfterLoad\",\r\n            () => {\r\n               this.hideProgressOfComponents();\r\n            }\r\n         );\r\n      }\r\n   }\r\n\r\n   parseTreeCollection(data = {}) {\r\n      if (\r\n         !(this.__datasource instanceof ABObjectQuery) ||\r\n         !this.__datasource.isGroup ||\r\n         !this.__treeCollection\r\n      )\r\n         return;\r\n\r\n      let addRowToTree = (join = {}, parentAlias = null) => {\r\n         let alias = join.alias;\r\n\r\n         (data.data || []).forEach((row) => {\r\n            let dataId = row[`${alias}.uuid`] || row[`${alias}.id`];\r\n            if (!dataId) return;\r\n\r\n            // find parent nodes\r\n            let parentItemIds = [];\r\n            let parentId =\r\n               row[`${parentAlias}.uuid`] || row[`${parentAlias}.id`];\r\n            if (parentId) {\r\n               parentItemIds = this.__treeCollection\r\n                  .find(\r\n                     (item) =>\r\n                        item._alias == parentAlias && item._dataId == parentId\r\n                  )\r\n                  .map((item) => item.id);\r\n            }\r\n\r\n            // check exists\r\n            let exists = this.__treeCollection.find((item) => {\r\n               return (\r\n                  item._alias == alias &&\r\n                  item._dataId == dataId &&\r\n                  (parentItemIds.length == 0 ||\r\n                     parentItemIds.indexOf(item.$parent) > -1)\r\n               );\r\n            }, true);\r\n            if (exists) return;\r\n\r\n            let treeNode = {};\r\n            treeNode._alias = alias;\r\n            treeNode._dataId = dataId;\r\n            treeNode._itemId = row.id; // Keep row id for set cursor to data collection\r\n\r\n            Object.keys(row).forEach((propName) => {\r\n               // Pull value from alias\r\n               if (propName.indexOf(`${alias}.`) == 0) {\r\n                  treeNode[propName] = row[propName];\r\n               }\r\n            });\r\n\r\n            if (row.translations) treeNode.translations = row.translations;\r\n\r\n            // child nodes\r\n            if (parentItemIds.length > 0)\r\n               parentItemIds.forEach((parentItemId) => {\r\n                  this.__treeCollection.add(treeNode, null, parentItemId);\r\n               });\r\n            // root node\r\n            else this.__treeCollection.add(treeNode, null);\r\n         });\r\n\r\n         // Sub-joins\r\n         (join.links || []).forEach((link) => {\r\n            addRowToTree(link, alias);\r\n         });\r\n      };\r\n\r\n      // Show loading cursor\r\n      (this.__bindComponentIds || []).forEach((comId) => {\r\n         //// Webix Command here:\r\n         let boundComp = $$(comId);\r\n         if (boundComp && boundComp.showProgress)\r\n            boundComp.showProgress({ type: \"icon\" });\r\n\r\n         if (boundComp.data && boundComp.data.unsync) boundComp.data.unsync();\r\n      });\r\n\r\n      addRowToTree(this.__datasource.joins());\r\n\r\n      // Hide loading cursor\r\n      (this.__bindComponentIds || []).forEach((comId) => {\r\n         let boundComp = $$(comId);\r\n         if (boundComp && boundComp.hideProgress) boundComp.hideProgress();\r\n         boundComp.define(\"data\", this.__treeCollection);\r\n      });\r\n   }\r\n\r\n   warningsAll() {\r\n      // report both OUR warnings, and any warnings from any of our fields\r\n      const allWarnings = [].concat(this._warnings);\r\n\r\n      if (!this.datasource) {\r\n         allWarnings.push({\r\n            message: `Datacollection[${this.label}][${this.id}] doesn't have a datasource.`,\r\n            data: {},\r\n         });\r\n      } else if (this.linkDatacollectionID) {\r\n         const linkDC = this.AB.datacollectionById(this.linkDatacollectionID);\r\n\r\n         if (linkDC)\r\n            allWarnings.push({\r\n               message: `Datacollection[${this.label}][${this.id}] can't resolve linkDatacollectionID[${this.linkDatacollectionID}]`,\r\n               data: {},\r\n            });\r\n      }\r\n\r\n      return allWarnings;\r\n   }\r\n\r\n   warningsEval() {\r\n      // our .fromValues() has already registered any missing fields.\r\n      // those should get reported from warnings()\r\n   }\r\n\r\n   get userScopes() {\r\n      return this.AB.Account.scopes();\r\n   }\r\n};\r\n","var ABDefinitionCore = require(\"../core/ABDefinitionCore\");\r\n\r\nmodule.exports = class ABDefinition extends ABDefinitionCore {\r\n   // constructor(attributes, AB) {\r\n   //    super(attributes, AB);\r\n   // }\r\n};\r\n","/**\r\n * ABEmitter\r\n *\r\n * This is the platform dependent implementation of an Emitter object.\r\n *\r\n */\r\n\r\nvar EventEmitter = require(\"events\").EventEmitter;\r\n\r\nmodule.exports = class ABEmitter extends EventEmitter {\r\n   constructor() {\r\n      super(/*{ maxListeners: 0 }*/);\r\n   }\r\n};\r\n","const ABIndexCore = require(\"../core/ABIndexCore\");\r\n\r\nmodule.exports = class ABIndex extends ABIndexCore {\r\n   // constructor(attributes, object) {\r\n   //    super(attributes, object);\r\n   // }\r\n\r\n   /**\r\n    * @method save()\r\n    * persist this instance of ABIndex with it's parent ABObject\r\n    * @return {Promise}\r\n    */\r\n   save() {\r\n      return super\r\n         .save()\r\n         .then(() => this.object.indexSave(this))\r\n         .then(() => this.migrateCreate());\r\n   }\r\n\r\n   /**\r\n    * @method destroy()\r\n    * destroy the current instance of ABIndex\r\n    * also remove it from our parent ABObject\r\n    * @return {Promise}\r\n    */\r\n   destroy() {\r\n      return new Promise((resolve, reject) => {\r\n         if (this.id) {\r\n            this.migrateDrop()\r\n               .then(() => {\r\n                  return super.destroy();\r\n               })\r\n               .then(() => this.object.indexRemove(this))\r\n               .then(resolve)\r\n               .catch(reject);\r\n         } else {\r\n            resolve();\r\n         }\r\n      });\r\n   }\r\n\r\n   ///\r\n   /// DB Migrations\r\n   ///\r\n\r\n   migrateCreate() {\r\n      return this.AB.Network.post({\r\n         url: `/definition/migrate/object/${this.object.id}/index/${this.id}`,\r\n         // data: this.toObj(),\r\n      });\r\n   }\r\n\r\n   migrateDrop() {\r\n      return this.AB.Network[\"delete\"]({\r\n         url: `/definition/migrate/object/${this.object.id}/index/${this.id}`,\r\n      });\r\n   }\r\n};\r\n","/**\r\n * ABMLClass\r\n * manage the multilingual information of an instance of a AB Defined Class.\r\n *\r\n * these classes have certain fields (\"label\", \"description\"), that can be\r\n * represented in different language options as defined by our platform.\r\n *\r\n * This platform ABMLClass will define 2 methods that allow for the translation\r\n * untranslation of this data.\r\n */\r\nvar ABMLClassCore = require(\"../core/ABMLClassCore\");\r\n\r\nmodule.exports = class ABMLClass extends ABMLClassCore {\r\n   constructor(fieldList, AB) {\r\n      super(fieldList, AB);\r\n\r\n      this._warnings = [];\r\n      // {array}\r\n      // an array of warning messages for this object.\r\n\r\n      this.on(\"warning\", (message, data) => {\r\n         this._warnings.push({ message, data });\r\n      });\r\n   }\r\n\r\n   // fromValues(attributes) {\r\n   //    super.fromValues(attributes);\r\n   // }\r\n\r\n   warnings() {\r\n      return this._warnings;\r\n   }\r\n\r\n   warningsEval() {\r\n      this._warnings = [];\r\n      // if (\r\n      //    [\"datacollection\", \"object\", \"query\", \"process\"].indexOf(this.type) >\r\n      //    -1\r\n      // ) {\r\n      //    console.warn(\r\n      //       `ABML Object [${this.type}][${this.label}] has not overwritten .warningsEval()`\r\n      //    );\r\n      // }\r\n\r\n      // many of our warnings are generated during the .fromValues() method\r\n      // when we initialize our Objects.  So, cause this process to repeat.\r\n      this.fromValues(this.toObj());\r\n   }\r\n\r\n   warningsAll() {\r\n      // console.warn(\r\n      //    `ABML Object [${this.label}] has not overwritten .warningsAll()`\r\n      // );\r\n      return this.warnings();\r\n   }\r\n\r\n   /**\r\n    * @method languageDefault\r\n    * return a default language code.\r\n    * @return {string}\r\n    */\r\n   languageDefault() {\r\n      return this.AB.Account.language() || \"en\";\r\n   }\r\n\r\n   /**\r\n    * @method destroy()\r\n    * remove this definition.\r\n    * @return {Promise}\r\n    */\r\n   async destroy() {\r\n      var def = this.toDefinition();\r\n      if (def.id) {\r\n         return def.destroy().catch((err) => {\r\n            if (err.toString().indexOf(\"No record found\") > -1) {\r\n               // this is weird, but not breaking:\r\n               console.log(\r\n                  `ABMLClass.destroy(): could not find record for id[${def.id}]`\r\n               );\r\n               console.log(def);\r\n               return;\r\n            }\r\n            throw err;\r\n         });\r\n      }\r\n      return Promise.resolve();\r\n   }\r\n\r\n   /**\r\n    * @method save()\r\n    * persist this definition of our {ABxxx} Object\r\n    * @return {Promise}\r\n    */\r\n   async save() {\r\n      var def = this.toDefinition();\r\n      // if not name, try to use our label as the name\r\n      def.name = def.name || this.name || this.label || \"name\";\r\n      var data = await def.save();\r\n      if (!this.id) {\r\n         this.id = data.id;\r\n      }\r\n   }\r\n};\r\n","const ABModelCore = require(\"../core/ABModelCore\");\r\n\r\n//\r\n// ABModel\r\n//\r\n// Represents the Data interface for an ABObject data.\r\n//\r\n// 2 ways to use an ABModel to load a DataTable:\r\n// \tMethod 1:\r\n// \tgather all the data externally and send to the DataTable\r\n//\t\tModel.findAll()\r\n//\t\t.then((data)=>{\r\n//\t\t\tDataTable.parse(data);\r\n//\t\t})\r\n//\r\n// \tMethod 2:\r\n// \tSet the Model object with a condition / skip / limit, then\r\n// \tuse it to load the DataTable:\r\n//\t\tModel.where({})\r\n//\t\t.skip(XX)\r\n//\t\t.limit(XX)\r\n//\t\t.loadInto(DataTable);\r\n\r\nfunction errorPopup(error) {\r\n   // Show the pop up\r\n   if (error && error.data && error.data.error == \"READONLY\") {\r\n      webix.alert({\r\n         title: \"Your action is blocked\",\r\n         ok: \"Ok\",\r\n         text: error.data.message || \"\",\r\n         type: \"alert-warning\",\r\n      });\r\n   }\r\n}\r\n\r\n/*\r\n * @function no_socket_trigger()\r\n * a common routine to trigger an update.\r\n * In the case where our AB.Network.type() isn't a socket implementation\r\n * we need to manually trigger the expected socket events ourselves.\r\n * This fn() attempts to simulate the socket responses in such a case.\r\n * @param {ABModel} model\r\n *        The ABModel currently processing the network transaction.\r\n * @param {string} key\r\n *        The socket update trigger we are simulating.\r\n * @param {json} data\r\n *        The relevant response from our network transaction.\r\n */\r\nfunction no_socket_trigger(model, key, data) {\r\n   // If we do not have socket updates available, then trigger an\r\n   // update event with this data.\r\n   if (model.AB.Network.type() != \"socket\") {\r\n      model.AB.emit(key, {\r\n         objectId: model.object.id,\r\n         data,\r\n      });\r\n   }\r\n}\r\n\r\nmodule.exports = class ABModel extends ABModelCore {\r\n   constructor(object) {\r\n      super(object);\r\n\r\n      this.handler_create = (...params) => {\r\n         this.handler_common(\"ab.datacollection.create\", ...params);\r\n      };\r\n\r\n      this.handler_delete = (...params) => {\r\n         this.handler_common(\"ab.datacollection.update\", ...params);\r\n      };\r\n\r\n      this.handler_findAll = (...params) => {\r\n         this.handler_common(null, ...params);\r\n      };\r\n\r\n      this.handler_logs = (context, err, data) => {\r\n         if (err) {\r\n            context.reject?.(err);\r\n            return;\r\n         }\r\n         context.resolve?.(data);\r\n      };\r\n\r\n      this.handler_update = (...params) => {\r\n         this.handler_common(\"ab.datacollection.update\", ...params);\r\n      };\r\n\r\n      this.handler_common = (key, context, err, data) => {\r\n         // key: {string} the relevant socket event key\r\n         //      can be null if not relevant.\r\n         // context : {obj} any provided context data provided on the\r\n         //           this.AB.Network.get() call.\r\n         // err: {Error} any returned error message from api\r\n         // data: {obj} returned data from the model-get api in format:\r\n         //       {data: [], total_count: 1, pos: 0, offset: 0, limit: 0}\r\n         if (err) {\r\n            context.reject?.(err);\r\n            return;\r\n         }\r\n         if (key) {\r\n            // on \"update\" & \"create\" we want to normalizeData()\r\n            if (key.indexOf(\"delete\") == -1) {\r\n               this.normalizeData(data);\r\n            }\r\n         } else {\r\n            // on a findAll we normalize data.data\r\n            this.normalizeData(data.data);\r\n         }\r\n\r\n         context.resolve?.(data);\r\n\r\n         if (key) {\r\n            no_socket_trigger(this, key, data);\r\n         }\r\n      };\r\n   }\r\n\r\n   ///\r\n   /// Static Methods\r\n   ///\r\n   /// Available to the Class level object.  These methods are not dependent\r\n   /// on the instance values of the Application.\r\n   ///\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   // Prepare multilingual fields to be untranslated\r\n   // Before untranslating we need to ensure that values.translations is set.\r\n   prepareMultilingualData(values) {\r\n      // if this object has some multilingual fields, translate the data:\r\n      var mlFields = this.object.multilingualFields();\r\n      // if mlFields are inside of the values saved we want to translate otherwise do not because it will reset the translation field and you may loose unchanged translations\r\n      var shouldTranslate = false;\r\n      if (mlFields.length) {\r\n         mlFields.forEach(function (field) {\r\n            if (values[field] != null) {\r\n               shouldTranslate = true;\r\n            }\r\n         });\r\n      }\r\n      if (shouldTranslate) {\r\n         if (\r\n            values.translations == null ||\r\n            typeof values.translations == \"undefined\" ||\r\n            values.translations == \"\"\r\n         ) {\r\n            values.translations = [];\r\n         }\r\n         this.object.unTranslate(values, values, mlFields);\r\n      }\r\n   }\r\n\r\n   request(method, params) {\r\n      return this.AB.Network[method](params);\r\n   }\r\n\r\n   /**\r\n    * @method batchCreate\r\n    * update model values on the server.\r\n    */\r\n   batchCreate(values) {\r\n      values.batch.map((vals) => {\r\n         return this.prepareMultilingualData(vals.data);\r\n      });\r\n\r\n      return new Promise((resolve, reject) => {\r\n         var jobID = this.AB.jobID();\r\n         this.AB.Network.once(jobID, (context, err, data) => {\r\n            if (err) {\r\n               reject(err);\r\n               return;\r\n            }\r\n            this.normalizeData(data);\r\n            resolve(data);\r\n            // FIX: now with sockets, the triggers are fired from socket updates.\r\n            // trigger a create event\r\n            // triggerEvent('create', this.object, data);\r\n         });\r\n\r\n         this.AB.Network.post(\r\n            {\r\n               url: this.object.urlRestBatch(),\r\n               params: values,\r\n            },\r\n            {\r\n               key: jobID,\r\n               context: {},\r\n            }\r\n         )\r\n            // .then((data) => {\r\n            //    this.normalizeData(data);\r\n\r\n            //    resolve(data);\r\n\r\n            //    // FIX: now with sockets, the triggers are fired from socket updates.\r\n            //    // trigger a create event\r\n            //    // triggerEvent('create', this.object, data);\r\n            // })\r\n            .catch(reject);\r\n      });\r\n   }\r\n\r\n   /**\r\n    * @method create\r\n    * update model values on the server.\r\n    */\r\n   create(values) {\r\n      this.prepareMultilingualData(values);\r\n\r\n      // add default values record if no value is passed for column\r\n      this.object.fields().forEach((f) => {\r\n         if (values[f.columnName] === undefined) {\r\n            f.defaultValue(values);\r\n         }\r\n      });\r\n\r\n      return new Promise((resolve, reject) => {\r\n         var jobID = this.AB.jobID();\r\n         this.AB.Network.once(jobID, this.handler_create);\r\n         this.AB.Network.post(\r\n            {\r\n               url: this.object.urlRest(),\r\n               params: values,\r\n            },\r\n            {\r\n               key: jobID,\r\n               context: { resolve, reject },\r\n            }\r\n         ).catch((err) => {\r\n            errorPopup(err);\r\n            reject(err);\r\n         });\r\n      });\r\n   }\r\n\r\n   /**\r\n    * @method delete\r\n    * remove this model instance from the server\r\n    * @param {integer|UUID} id  the .id of the instance to remove.\r\n    * @return {Promise}\r\n    */\r\n   delete(id) {\r\n      return new Promise((resolve, reject) => {\r\n         var jobID = this.AB.jobID();\r\n         this.AB.Network.once(jobID, this.handler_delete);\r\n         this.AB.Network[\"delete\"](\r\n            {\r\n               url: this.object.urlRestItem(id),\r\n            },\r\n            {\r\n               key: jobID,\r\n               context: { resolve, reject },\r\n            }\r\n         ).catch((err) => {\r\n            errorPopup(err);\r\n            reject(err);\r\n         });\r\n      });\r\n   }\r\n\r\n   /**\r\n    * @method findAll\r\n    * performs a data find with the provided condition.\r\n    */\r\n   findAll(cond) {\r\n      cond = cond || {};\r\n\r\n      // \t\t// prepare our condition:\r\n      // \t\tvar newCond = {};\r\n\r\n      // \t\t// if the provided cond looks like our { where:{}, skip:xx, limit:xx } format,\r\n      // \t\t// just use this one.\r\n      // \t\tif (cond.where) {\r\n      // \t\t\tnewCond = cond;\r\n      // \t\t} else {\r\n\r\n      // \t\t\t// else, assume the provided condition is the .where clause.\r\n      // \t\t\tnewCond.where = cond;\r\n      // \t\t}\r\n\r\n      // /// if this is our depreciated format:\r\n      // if (newCond.where.where) {\r\n      // \tOP.Error.log('Depreciated Embedded .where condition.');\r\n      // }\r\n\r\n      return new Promise((resolve, reject) => {\r\n         var jobID = this.AB.jobID();\r\n         this.AB.Network.once(jobID, this.handler_findAll);\r\n         this.AB.Network.get(\r\n            {\r\n               url: this.object.urlRest(),\r\n               params: cond,\r\n               // params: newCond\r\n            },\r\n            {\r\n               key: jobID,\r\n               context: { resolve, reject },\r\n            }\r\n         )\r\n            // .then((data) => {\r\n            //    this.normalizeData(data.data);\r\n\r\n            //    resolve(data);\r\n            // })\r\n            .catch((err) => {\r\n               if (err && err.code) {\r\n                  switch (err.code) {\r\n                     case \"ER_PARSE_ERROR\":\r\n                        this.AB.notify.developer(err, {\r\n                           message:\r\n                              \"AppBuilder:ABModel:findAll(): Parse Error with provided condition\",\r\n                           condition: cond,\r\n                        });\r\n                        break;\r\n\r\n                     default:\r\n                        this.AB.notify.developer(err, {\r\n                           message:\r\n                              \"AppBuilder:ABModel:findAll(): Unknown Error with provided condition\",\r\n                           condition: cond,\r\n                        });\r\n                        break;\r\n                  }\r\n               }\r\n               reject(err);\r\n            });\r\n      });\r\n   }\r\n\r\n   /**\r\n    * @method loadInto\r\n    * loads the current values into the provided Webix DataTable\r\n    * @param {DataTable} DT  A Webix component that can dynamically load data.\r\n    */\r\n   loadInto(DT) {\r\n      // if a limit was applied, then this component should be loading dynamically\r\n      if (this._limit) {\r\n         DT.define(\"datafetch\", this._limit);\r\n         DT.define(\"datathrottle\", 250); // 250ms???\r\n\r\n         // catch the event where data is requested:\r\n         // here we will do our own findAll() so we can persist\r\n         // the provided .where condition.\r\n\r\n         // oh yeah, and make sure to remove any existing event handler when we\r\n         // perform a new .loadInto()\r\n         DT.___AD = DT.___AD || {};\r\n         if (DT.___AD.onDataRequestEvent) {\r\n            DT.detachEvent(DT.___AD.onDataRequestEvent);\r\n         }\r\n         DT.___AD.onDataRequestEvent = DT.attachEvent(\r\n            \"onDataRequest\",\r\n            (start, count) => {\r\n               var cond = {\r\n                  where: this._where,\r\n                  sort: this._sort,\r\n                  limit: count,\r\n                  skip: start,\r\n               };\r\n\r\n               if (DT.showProgress) DT.showProgress({ type: \"icon\" });\r\n\r\n               this.findAll(cond).then((data) => {\r\n                  /*\r\n                   // In V2: we move the row height processing into \r\n                   // the interface designer \r\n\r\n                  data.data.forEach((item) => {\r\n                     if (\r\n                        item.properties != null &&\r\n                        item.properties.height != \"undefined\" &&\r\n                        parseInt(item.properties.height) > 0\r\n                     ) {\r\n                        item.$height = parseInt(item.properties.height);\r\n                     } else if (parseInt(this._where.height) > 0) {\r\n                        item.$height = parseInt(this._where.height);\r\n                     }\r\n                  });\r\n                  */\r\n                  DT.parse(data);\r\n\r\n                  if (DT.hideProgress) DT.hideProgress();\r\n               });\r\n\r\n               return false; // <-- prevent the default \"onDataRequest\"\r\n            }\r\n         );\r\n\r\n         DT.refresh();\r\n      }\r\n\r\n      // else just load it all at once:\r\n      var cond = {};\r\n      if (this._where) cond.where = this._where;\r\n      if (this._sort) cond.sort = this._sort;\r\n      if (this._limit != null) cond.limit = this._limit;\r\n      if (this._skip != null) cond.skip = this._skip;\r\n\r\n      if (DT.showProgress) DT.showProgress({ type: \"icon\" });\r\n\r\n      this.findAll(cond)\r\n         .then((data) => {\r\n            // v2: we no longer process item $height\r\n            /*\r\n            data.data.forEach((item) => {\r\n               if (\r\n                  item.properties != null &&\r\n                  item.properties.height != \"undefined\" &&\r\n                  parseInt(item.properties.height) > 0\r\n               ) {\r\n                  item.$height = parseInt(item.properties.height);\r\n               } else if (parseInt(this._where.height) > 0) {\r\n                  item.$height = parseInt(this._where.height);\r\n               }\r\n            });\r\n            */\r\n\r\n            DT.parse(data);\r\n\r\n            if (DT.hideProgress) DT.hideProgress();\r\n         })\r\n         .catch((err) => {\r\n            console.error(\"!!!!!\", err);\r\n         });\r\n   }\r\n\r\n   /**\r\n    * @method logs()\r\n    * return the log history related to this model's ABObject.\r\n    * @param {hash} options\r\n    *        a key=>value hash of optional search criteria\r\n    *        .rowId {string} the uuid of the individual entry we are querying\r\n    *        .levelName {string} the type of entry [\"insert\", \"update\", \"delete\"]\r\n    *        .username {string} the entries associated with the given user\r\n    *        .startDate {date} entries that happened ON or AFTER this date\r\n    *        .endDate {date} entries that happened ON or BEFORE this date\r\n    *        .start {integer} paging control: how many entries to skip\r\n    *        .limit {integer} paging control: only return this # entries\r\n    * @return {Promise}\r\n    */\r\n   logs(options) {\r\n      return new Promise((resolve, reject) => {\r\n         var jobID = this.AB.jobID();\r\n         this.AB.Network.once(jobID, this.handler_logs);\r\n         this.AB.Network.get(\r\n            {\r\n               url: this.object.urlRestLog(),\r\n               params: options,\r\n               // params: newCond\r\n            },\r\n            {\r\n               key: jobID,\r\n               context: { resolve, reject },\r\n            }\r\n         ).catch((err) => {\r\n            if (err && err.code) {\r\n               this.AB.notify.developer(err, {\r\n                  context: \"AppBuilder:ABModel:logs(): Error\",\r\n                  options,\r\n               });\r\n            }\r\n            reject(err);\r\n         });\r\n      });\r\n   }\r\n\r\n   /**\r\n    * @method limit\r\n    * set the limit value for this set of data\r\n    * @param {integer} limit  the number or elements to return in this call\r\n    * @return {ABModel} this object that is chainable.\r\n    */\r\n   limit(limit) {\r\n      this._limit = limit;\r\n      return this;\r\n   }\r\n\r\n   /**\r\n    * @method skip\r\n    * set the skip value for this set of data\r\n    * @param {integer} skip  the number or elements to skip\r\n    * @return {ABModel} this object that is chainable.\r\n    */\r\n   skip(skip) {\r\n      this._skip = skip;\r\n      return this;\r\n   }\r\n\r\n   /**\r\n    * @method update\r\n    * update model values on the server.\r\n    */\r\n   update(id, values) {\r\n      this.prepareMultilingualData(values);\r\n\r\n      // remove empty properties\r\n      for (var key in values) {\r\n         if (values[key] == null) delete values[key];\r\n      }\r\n\r\n      return new Promise((resolve, reject) => {\r\n         var jobID = this.AB.jobID();\r\n         this.AB.Network.once(jobID, this.handler_update);\r\n         this.AB.Network.put(\r\n            {\r\n               url: this.object.urlRestItem(id),\r\n               params: values,\r\n            },\r\n            { key: jobID, context: { resolve, reject } }\r\n         )\r\n            // .then((data) => {\r\n            //    this.normalizeData(data);\r\n\r\n            //    resolve(data);\r\n\r\n            //    // If we do not have socket updates available, then trigger an\r\n            //    // update event with this data.\r\n            //    if (this.AB.Network.type() != \"socket\") {\r\n            //       this.AB.emit(\"ab.datacollection.update\", {\r\n            //          objectId: this.object.id,\r\n            //          data,\r\n            //       });\r\n            //    }\r\n            // })\r\n            .catch((err) => {\r\n               errorPopup(err);\r\n               reject(err);\r\n            });\r\n      });\r\n   }\r\n\r\n   /**\r\n    * @method batchUpdate\r\n    * update value to many rows on the server.\r\n    */\r\n   batchUpdate({ rowIds, values }) {\r\n      return new Promise((resolve, reject) => {\r\n         var jobID = this.AB.jobID();\r\n         this.AB.Network.once(jobID, (context, err /*, data */) => {\r\n            if (err) {\r\n               reject(err);\r\n               return;\r\n            }\r\n            // this.normalizeData(data);\r\n            resolve(true);\r\n            // what about checking for socket updates?\r\n         });\r\n         this.AB.Network.put(\r\n            {\r\n               url: this.object.urlRestBatch(),\r\n               params: {\r\n                  rowIds,\r\n                  values,\r\n               },\r\n            },\r\n            { key: jobID, context: {} }\r\n         )\r\n            // .then(() => {\r\n            //    resolve(true);\r\n            // })\r\n            .catch(reject);\r\n      });\r\n   }\r\n};\r\n","//\r\n// ABModelQuery\r\n//\r\n// Represents the Data interface for an ABObjectQuery data.\r\n\r\nconst ABModel = require(\"./ABModel\");\r\n\r\nmodule.exports = class ABModelQuery extends ABModel {\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /**\r\n    * @method batchCreate\r\n    * update model values on the server.\r\n    */\r\n   batchCreate(values) {\r\n      var error = new Error(\r\n         \"ABObjectQuery.ABModelQuery.batchCreate() should not be called.\"\r\n      );\r\n      return Promise.reject(error);\r\n   }\r\n\r\n   /**\r\n    * @method create\r\n    * update model values on the server.\r\n    */\r\n   create(values) {\r\n      var error = new Error(\r\n         \"ABObjectQuery.ABModelQuery.create() should not be called.\"\r\n      );\r\n      return Promise.reject(error);\r\n   }\r\n\r\n   /**\r\n    * @method delete\r\n    * remove this model instance from the server\r\n    * @param {integer|UUID} id  the .id of the instance to remove.\r\n    * @return {Promise}\r\n    */\r\n   delete(id) {\r\n      var error = new Error(\r\n         \"ABObjectQuery.ABModelQuery.delete() should not be called.\"\r\n      );\r\n      return Promise.reject(error);\r\n   }\r\n\r\n   /**\r\n    * @method update\r\n    * update model values on the server.\r\n    */\r\n   update(id, values) {\r\n      var error = new Error(\r\n         \"ABObjectQuery.ABModelQuery.update() should not be called.\"\r\n      );\r\n      return Promise.reject(error);\r\n   }\r\n\r\n   /**\r\n    * @method batchUpdate\r\n    * update value to many rows on the server.\r\n    */\r\n   batchUpdate({ rowIds, values }) {\r\n      var error = new Error(\r\n         \"ABObjectQuery.ABModelQuery.batchUpdate() should not be called.\"\r\n      );\r\n      return Promise.reject(error);\r\n   }\r\n};\r\n","const ABObjectCore = require(\"../core/ABObjectCore\");\r\nconst ABObjectWorkspaceViewCollection = require(\"./workspaceViews/ABObjectWorkspaceViewCollection\");\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\n// NOTE: this has been moved to NetworkRestSocket:\r\n//\r\n// // Start listening for server events for object updates and call triggerEvent as the callback\r\n// if (typeof io != \"undefined\") {\r\n//    io.socket.on(\"ab.object.update\", function (msg) {\r\n//       AB.emit(\"ab.object.update\", {\r\n//          objectId: msg.objectId,\r\n//          data: msg.data,\r\n//       });\r\n//    });\r\n// } else {\r\n//    console.error(\"TODO: ABObject: configure Socket.io\");\r\n// }\r\n\r\n// io.socket.on(\"ab.object.delete\", function (msg) {\r\n// });\r\n\r\nmodule.exports = class ABObject extends ABObjectCore {\r\n   constructor(attributes, AB) {\r\n      super(attributes, AB);\r\n\r\n      this.workspaceViews = new ABObjectWorkspaceViewCollection(\r\n         attributes,\r\n         this,\r\n         AB\r\n      );\r\n\r\n      // listen for our ABFields.\"definition.updated\"\r\n      this.fields().forEach((f) => {\r\n         f.on(\"definition.updated\", (field) => {\r\n            // create a new Field with the updated def\r\n            var def = this.AB.definitionByID(field.id);\r\n            if (!def) return;\r\n\r\n            var newField = this.AB.fieldNew(def, this);\r\n\r\n            // we want to keep the same fieldID order:\r\n            var newFields = [];\r\n            this.fields().forEach((f) => {\r\n               if (f.id === field.id) {\r\n                  newFields.push(newField);\r\n                  return;\r\n               }\r\n               newFields.push(f);\r\n            });\r\n\r\n            this._fields = newFields;\r\n         });\r\n      });\r\n\r\n      // listen\r\n      // this.AB.on(\"ab.object.update\", (data) => {\r\n      //    if (this.id == data.objectId) this.fromValues(data.data);\r\n      // });\r\n\r\n      this._pendingNetworkRequests = {};\r\n      // {hash}   uuid : {Promise}\r\n      // convert our migrateXXXX() operations to be Relay/offline compatible.\r\n      // if a queued operation is sent after a web browser refresh, then\r\n      // we will NOT have a pending promise to .resolve()/.reject()\r\n\r\n      this._handler_object_migrate = (context, err, response) => {\r\n         // NOTE:\r\n         var pending = this._pendingNetworkRequests?.[context.uuid];\r\n         if (err) {\r\n            pending?.reject(err);\r\n            return;\r\n         }\r\n         pending?.resolve(response);\r\n      };\r\n      this.AB.Network.on(\"object.migrate\", this._handler_object_migrate);\r\n   }\r\n\r\n   /**\r\n    * @method refreshInstance()\r\n    * Used when a definition.updated message is detected on this ABObject.\r\n    * This method will return a new instance based upon the current definition\r\n    * and properly resolve any handlers and pending network Requests.\r\n    * @return {ABObject}\r\n    */\r\n   refreshInstance() {\r\n      var newObj = this.AB.objectByID(this.id);\r\n\r\n      // prevent doing this multiple times:\r\n      if (this._pendingNetworkRequests) {\r\n         // remove object.migrate listener\r\n         this.AB.Network.removeListener(\r\n            \"object.migrate\",\r\n            this._handler_object_migrate\r\n         );\r\n\r\n         // transfer the pending network requests\r\n         newObj._pendingNetworkRequests = this._pendingNetworkRequests;\r\n         this._pendingNetworkRequests = null;\r\n      }\r\n\r\n      return newObj;\r\n   }\r\n\r\n   ///\r\n   /// Static Methods\r\n   ///\r\n   /// Available to the Class level object.  These methods are not dependent\r\n   /// on the instance values of the Application.\r\n   ///\r\n\r\n   fromValues(attributes) {\r\n      /*\r\n\t\t{\r\n\t\t\tid: uuid(),\r\n\t\t\tname: 'name',\r\n\t\t\tlabelFormat: 'xxxxx',\r\n\t\t\tisImported: 1/0,\r\n\t\t\tisExternal: 1/0,\r\n\t\t\turlPath:'string',\r\n\t\t\timportFromObject: 'string', // JSON Schema style reference:  '#[ABApplication.id]/objects/[ABObject.id]'\r\n\t\t\t\t\t\t\t\t\t\t// to get other object:  ABApplication.objectFromRef(obj.importFromObject);\r\n\t\t\ttranslations:[\r\n\t\t\t\t{}\r\n\t\t\t],\r\n\t\t\tfields:[\r\n\t\t\t\t{ABDataField}\r\n\t\t\t]\r\n\t\t}\r\n\t\t*/\r\n\r\n      super.fromValues(attributes);\r\n\r\n      if (this.workspaceViews) this.workspaceViews.fromObj(attributes);\r\n   }\r\n\r\n   //// TODO: Refactor isValid() to ignore op and not error if duplicateName is own .id\r\n\r\n   isValid() {\r\n      var validator = this.AB.Validation.validator();\r\n\r\n      // label/name must be unique:\r\n      var isNameUnique =\r\n         this.AB.objects((o) => {\r\n            return (\r\n               o.id != this.id &&\r\n               o.name.toLowerCase() == this.name.toLowerCase()\r\n            );\r\n         }).length == 0;\r\n      if (!isNameUnique) {\r\n         validator.addError(\r\n            \"name\",\r\n            L('Object name must be unique (\"{0}\" already in use)', [this.name])\r\n         );\r\n      }\r\n\r\n      // Check the common validations:\r\n      // TODO:\r\n      // if (!inputValidator.validate(values.label)) {\r\n      // \t_logic.buttonSaveEnable();\r\n      // \treturn false;\r\n      // }\r\n\r\n      return validator;\r\n   }\r\n\r\n   /**\r\n    * @method isValidData\r\n    * Parse through the given data and return an array of any invalid\r\n    * value errors.\r\n    * @param {obj} data a key=>value hash of the inputs to parse.\r\n    * @return {array}\r\n    */\r\n   isValidData(data) {\r\n      var validator = this.AB.Validation.validator();\r\n      this.fields().forEach((f) => {\r\n         // check if value was passed, if so validate it\r\n         if (data.hasOwnProperty(f.columnName)) f.isValidData(data, validator);\r\n      });\r\n\r\n      return validator;\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /**\r\n    * @method fieldNew()\r\n    *\r\n    * return an instance of a new (unsaved) ABField that is tied to this\r\n    * ABObject.\r\n    *\r\n    * NOTE: this new field is not included in our this.fields until a .save()\r\n    * is performed on the field.\r\n    *\r\n    * @param {obj} values  the initial values for this field.\r\n    *\t\t\t\t\t\t{ key:'{string}'} is required\r\n    * @return {ABField}\r\n    */\r\n   // fieldNew ( values ) {\r\n   // \t// NOTE: ABFieldManager returns the proper ABFieldXXXX instance.\r\n   // \treturn ABFieldManager.newField( values, this );\r\n   // }\r\n\r\n   /// ABApplication data methods\r\n\r\n   /**\r\n    * @method destroy()\r\n    *\r\n    * destroy the current instance of ABObject\r\n    *\r\n    * also remove it from our parent application\r\n    *\r\n    * @return {Promise}\r\n    */\r\n   async destroy() {\r\n      /*\r\n        return new Promise((resolve, reject) => {\r\n            // Remove the import object, then its model will not be destroyed\r\n            if (this.isImported) {\r\n                this.application\r\n                    .objectDestroy(this)\r\n                    .catch(reject)\r\n                    .then(() => {\r\n                        resolve();\r\n                    });\r\n\r\n                return;\r\n            }\r\n\r\n            // OK, some of our Fields have special follow up actions that need to be\r\n            // considered when they no longer exist, so before we simply drop this\r\n            // object/table, drop each of our fields and give them a chance to clean up\r\n            // what needs cleaning up.\r\n\r\n            // ==> More work, but safer.\r\n            var fieldDrops = [];\r\n            this.fields().forEach((f) => {\r\n                fieldDrops.push(f.destroy());\r\n            });\r\n\r\n            Promise.all(fieldDrops)\r\n                .then(() => {\r\n                    return new Promise((next, err) => {\r\n                        // now drop our table\r\n                        // NOTE: our .migrateXXX() routines expect the object to currently exist\r\n                        // in the DB before we perform the DB operations.  So we need to\r\n                        // .migrateDrop()  before we actually .objectDestroy() this.\r\n                        this.migrateDrop()\r\n                            .then(() => {\r\n                                // finally remove us from the application storage\r\n                                return this.application.objectDestroy(this);\r\n                            })\r\n                            .then(next)\r\n                            .catch(err);\r\n                    });\r\n                })\r\n\r\n                // flag .disable to queries who contains this removed object\r\n                .then(() => {\r\n                    return new Promise((next, err) => {\r\n                        this.application\r\n                            .queries(\r\n                                (q) =>\r\n                                    q.objects((o) => o.id == this.id).length > 0\r\n                            )\r\n                            .forEach((q) => {\r\n                                q._objects = q.objects((o) => o.id != this.id);\r\n\r\n                                q.disabled = true;\r\n                            });\r\n\r\n                        next();\r\n                    });\r\n                })\r\n                .then(resolve)\r\n                .catch(reject);\r\n        });\r\n */\r\n\r\n      var removeFromApplications = () => {\r\n         var allRemoves = [];\r\n         this.AB.applications().forEach((app) => {\r\n            allRemoves.push(app.objectRemove(this));\r\n         });\r\n         return Promise.all(allRemoves);\r\n      };\r\n\r\n      var disableRelatedQueries = () => {\r\n         return new Promise((next /*, err */) => {\r\n            this.AB.queries(\r\n               (q) => q.objects((o) => o.id == this.id).length > 0\r\n            ).forEach((q) => {\r\n               // q._objects = q.objects((o) => o.id != this.id);\r\n\r\n               q.disabled = true;\r\n            });\r\n\r\n            next();\r\n         });\r\n      };\r\n\r\n      try {\r\n         // 1) remove us from all Application:\r\n         await removeFromApplications();\r\n\r\n         // 2) disable any connected Queries\r\n         await disableRelatedQueries();\r\n\r\n         // if an imported Object (FederatedTable, Existing Table, etc...)\r\n         // then skip this step\r\n         if (this.isImported) {\r\n            return Promise.resolve();\r\n         }\r\n\r\n         // time to remove my table:\r\n         // NOTE: our .migrateXXX() routines expect the object to currently exist\r\n         // in the DB before we perform the DB operations.  So we need to\r\n         // .migrateDrop()  before we actually .destroy() this.\r\n         await this.migrateDrop();\r\n\r\n         // now remove my definition\r\n\r\n         // start with my fields:\r\n         var fieldDrops = [];\r\n\r\n         // Only ABObjects should attempt any fieldDrops.\r\n         // ABObjectQueries can safely skip this step:\r\n         if (this.type == \"object\") {\r\n            var allFields = this.fields();\r\n            this._fields = []; // clear our field counter so we don't retrigger\r\n            // this.save() on each field.destroy();\r\n\r\n            allFields.forEach((f) => {\r\n               fieldDrops.push(f.destroy());\r\n            });\r\n         }\r\n         await Promise.all(fieldDrops);\r\n\r\n         await super.destroy();\r\n         this.emit(\"destroyed\");\r\n      } catch (err) {\r\n         this.AB.notify.developer(err, {\r\n            context: \"ABObject.destroy(): error destroying object.\",\r\n         });\r\n      }\r\n\r\n      // return Promise.resolve()\r\n      //    .then(() => {\r\n      //       // 1) remove us from all Application:\r\n      //       return removeFromApplications();\r\n      //    })\r\n      //    .then(() => {\r\n      //       // 2) disable any connected Queries\r\n      //       return disableRelatedQueries();\r\n      //    })\r\n      //    .then(() => {\r\n      //       // if an imported Object (FederatedTable, Existing Table, etc...)\r\n      //       // then skip this step\r\n      //       if (this.isImported) {\r\n      //          return Promise.resolve();\r\n      //       }\r\n\r\n      //       // time to remove my table:\r\n      //       // NOTE: our .migrateXXX() routines expect the object to currently exist\r\n      //       // in the DB before we perform the DB operations.  So we need to\r\n      //       // .migrateDrop()  before we actually .destroy() this.\r\n      //       return this.migrateDrop();\r\n      //    })\r\n      //    .then(() => {\r\n      //       // now remove my definition\r\n\r\n      //       // start with my fields:\r\n      //       var fieldDrops = [];\r\n\r\n      //       // Only ABObjects should attempt any fieldDrops.\r\n      //       // ABObjectQueries can safely skip this step:\r\n      //       if (this.type == \"object\") {\r\n      //          var allFields = this.fields();\r\n      //          this._fields = []; // clear our field counter so we don't retrigger\r\n      //          // this.save() on each field.destroy();\r\n\r\n      //          allFields.forEach((f) => {\r\n      //             fieldDrops.push(f.destroy());\r\n      //          });\r\n      //       }\r\n\r\n      //       return Promise.all(fieldDrops)\r\n      //          .then(() => {\r\n      //             // now me.\r\n      //             return super.destroy();\r\n      //          })\r\n      //          .then(() => {\r\n      //             this.emit(\"destroyed\");\r\n      //          });\r\n      //    });\r\n   }\r\n\r\n   /**\r\n    * @method save()\r\n    *\r\n    * persist this instance of ABObject with it's parent ABApplication\r\n    *\r\n    *\r\n    * @return {Promise}\r\n    *\t\t\t\t\t\t.resolve( {this} )\r\n    */\r\n   async save() {\r\n      var isAdd = false;\r\n\r\n      // if this is our initial save()\r\n      if (!this.id) {\r\n         this.label = this.label || this.name;\r\n         isAdd = true;\r\n      }\r\n\r\n      try {\r\n         await super.save();\r\n         if (isAdd) {\r\n            await this.migrateCreate();\r\n         }\r\n         return this;\r\n      } catch (err) {\r\n         this.AB.notify.developer(err, {\r\n            context: \"ABObject.save()\",\r\n            obj: this.toObj(),\r\n         });\r\n         throw err;\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method toObj()\r\n    *\r\n    * properly compile the current state of this ABApplication instance\r\n    * into the values needed for saving to the DB.\r\n    *\r\n    * Most of the instance data is stored in .json field, so be sure to\r\n    * update that from all the current values of our child fields.\r\n    *\r\n    * @return {json}\r\n    */\r\n   toObj() {\r\n      var result = super.toObj();\r\n\r\n      result.objectWorkspaceViews = this.workspaceViews.toObj();\r\n\r\n      return result;\r\n   }\r\n\r\n   ///\r\n   /// DB Migrations\r\n   ///\r\n\r\n   migrateCreate() {\r\n      return new Promise((resolve, reject) => {\r\n         var uuid = this.AB.uuid();\r\n         this._pendingNetworkRequests[uuid] = { resolve, reject };\r\n         var jobResponse = {\r\n            key: \"object.migrate\",\r\n            context: { uuid, id: this.id },\r\n         };\r\n         this.AB.Network.post(\r\n            {\r\n               url: `/definition/migrate/object/${this.id}`,\r\n            },\r\n            jobResponse\r\n         );\r\n      });\r\n   }\r\n\r\n   migrateDrop() {\r\n      return new Promise((resolve, reject) => {\r\n         var uuid = this.AB.uuid();\r\n         this._pendingNetworkRequests[uuid] = { resolve, reject };\r\n         var jobResponse = {\r\n            key: \"object.migrate\",\r\n            context: { uuid, id: this.id },\r\n         };\r\n         this.AB.Network[\"delete\"](\r\n            {\r\n               url: `/definition/migrate/object/${this.id}`,\r\n            },\r\n            jobResponse\r\n         );\r\n      });\r\n   }\r\n\r\n   ///\r\n   /// Working with Client Components:\r\n   ///\r\n\r\n   /**\r\n    * @method columnResize()\r\n    *\r\n    * save the new width of a column\r\n    *\r\n    * @param {} id The instance of the field to save.\r\n    * @param {int} newWidth the new width of the field\r\n    * @param {int} oldWidth the old width of the field\r\n    * @return {Promise}\r\n    */\r\n   columnResize(columnName, newWidth /*, oldWidth */) {\r\n      var fieldID = null;\r\n      for (var i = 0; i < this._fields.length; i++) {\r\n         if (this._fields[i].columnName == columnName) {\r\n            fieldID = this._fields[i].id;\r\n            break;\r\n            // this._fields[i].settings.width = newWidth;\r\n         }\r\n      }\r\n\r\n      // Johnny: This is better but still not right.  the ABObject should not be\r\n      // storing sizes for field widths.  That is a function of the UI and which\r\n      // Grid is being displayed.  THAT GRID should be storing a column width\r\n      // locally.\r\n      // TODO: once we have v2 in place.\r\n\r\n      var fieldSettings = this.AB.localSettings(fieldID);\r\n      fieldSettings = fieldSettings || {};\r\n      fieldSettings.width = newWidth;\r\n\r\n      return this.AB.localSettings(fieldID, fieldSettings);\r\n      // return this.save();\r\n   }\r\n\r\n   // return the column headers for this object\r\n   // @param {bool} isObjectWorkspace  return the settings saved for the object workspace\r\n   columnHeaders(\r\n      isObjectWorkspace,\r\n      isEditable,\r\n      summaryColumns,\r\n      countColumns,\r\n      hiddenFieldNames\r\n   ) {\r\n      summaryColumns = summaryColumns || [];\r\n      countColumns = countColumns || [];\r\n\r\n      var headers = [];\r\n      // var columnNameLookup = {};\r\n\r\n      // get the header for each of our fields:\r\n      this.fields().forEach((f) => {\r\n         var header = f.columnHeader({\r\n            isObjectWorkspace: isObjectWorkspace,\r\n            editable: isEditable,\r\n         });\r\n\r\n         if (isEditable) {\r\n            header.validationRules = f.settings.validationRules;\r\n         }\r\n\r\n         header.alias = f.alias || undefined; // query type\r\n         header.fieldID = f.id;\r\n         // header.fieldURL = f.urlPointer();\r\n\r\n         // if the field specifies a width\r\n         if (f.settings.width != 0) {\r\n            header.width = f.settings.width;\r\n         }\r\n\r\n         // if the User has already updated a local width for this\r\n         var fieldSettings = this.AB.localSettings(f.id);\r\n         if (fieldSettings && fieldSettings.width) {\r\n            if (!header.width || fieldSettings.width > header.width) {\r\n               // set column width to the customized width\r\n               header.width = fieldSettings.width;\r\n            }\r\n         }\r\n\r\n         if (!header.width) {\r\n            // set column width to adjust:true by default;\r\n            header.adjust = true;\r\n         }\r\n\r\n         // add the summary footer\r\n         if (summaryColumns.indexOf(f.id) > -1) {\r\n            if (f.key == \"calculate\" || f.key == \"formula\") {\r\n               header.footer = { content: \"totalColumn\", field: f };\r\n            } else {\r\n               header.footer = { content: \"summColumn\" };\r\n            }\r\n         }\r\n         // add the count footer\r\n         else if (countColumns.indexOf(f.id) > -1)\r\n            header.footer = { content: \"countColumn\" };\r\n\r\n         headers.push(header);\r\n         // columnNameLookup[header.id] = f.columnName; // name => id\r\n      });\r\n\r\n      // update our headers with any settings applied in the Object Workspace\r\n      /*\r\n      // In v2: this is handled by the ABDesigner\r\n      //\r\n      if (isObjectWorkspace) {\r\n         let hiddenFieldList = [];\r\n\r\n         if (hiddenFieldNames && hiddenFieldNames.length > 0)\r\n            hiddenFieldList = hiddenFieldNames;\r\n         // else if (this.workspaceHiddenFields)\r\n         //    hiddenFieldList = this.workspaceHiddenFields;\r\n\r\n         if (hiddenFieldList.length > 0) {\r\n            hiddenFieldList.forEach((hfID) => {\r\n               headers.forEach((h) => {\r\n                  if (columnNameLookup[h.id] == hfID) {\r\n                     h.hidden = true;\r\n                  }\r\n               });\r\n            });\r\n         }\r\n      }\r\n      */\r\n\r\n      return headers;\r\n   }\r\n\r\n   // after a component has rendered, tell each of our fields to perform\r\n   // any custom display operations\r\n   // @param {Webix.DataStore} data a webix datastore of all the rows effected\r\n   //        by the render.\r\n   customDisplays(data, App, DataTable, rowIds, isEditable) {\r\n      if (!data || !data.getFirstId) return;\r\n\r\n      // var fields = this.fields(f => this.workspaceHiddenFields.indexOf(f.columnName) < 0);\r\n      let fields = [];\r\n      DataTable.eachColumn((columnName) => {\r\n         let field = this.fields((f) => f.columnName == columnName)[0];\r\n         if (field) fields.push(field);\r\n      });\r\n\r\n      if (rowIds != null) {\r\n         rowIds.forEach((id) => {\r\n            let row = data.getItem(id);\r\n            if (row) {\r\n               fields.forEach((f) => {\r\n                  let node = DataTable.getItemNode({\r\n                     row: row.id,\r\n                     column: f.columnName,\r\n                  });\r\n                  f.customDisplay(row, App, node, {\r\n                     editable: isEditable,\r\n                  });\r\n               });\r\n            }\r\n         });\r\n      } else {\r\n         let id = data.getFirstId();\r\n         while (id) {\r\n            var row = data.getItem(id);\r\n            if (row) {\r\n               fields.forEach((f) => {\r\n                  var node = DataTable.getItemNode({\r\n                     row: row.id,\r\n                     column: f.columnName,\r\n                  });\r\n                  f.customDisplay(row, App, node, {\r\n                     editable: isEditable,\r\n                  });\r\n               });\r\n            }\r\n            id = data.getNextId(id);\r\n         }\r\n      }\r\n   }\r\n\r\n   // Display data with label format of object\r\n   displayData(rowData) {\r\n      if (rowData == null) return \"\";\r\n\r\n      // translate multilingual\r\n      //// TODO: isn't this a MLObject??  use this.translate()\r\n      var mlFields = this.multilingualFields();\r\n      this.translate(rowData, rowData, mlFields);\r\n\r\n      var labelData = this.labelFormat || \"\";\r\n\r\n      // default label\r\n      if (!labelData && this.fields().length > 0) {\r\n         var defaultField = this.fields((f) => f.fieldUseAsLabel())[0];\r\n         if (defaultField) labelData = `{${defaultField.id}}`;\r\n         else\r\n            labelData = `${this.AB.isUUID(rowData.id) ? \"ID: \" : \"\"}${\r\n               rowData.id\r\n            }`; // show id of row\r\n      }\r\n\r\n      // get column ids in {colId} template\r\n      // ['{colId1}', ..., '{colIdN}']\r\n      var colIds = labelData.match(/\\{[^}]+\\}/g);\r\n\r\n      if (colIds && colIds.forEach) {\r\n         colIds.forEach((colId) => {\r\n            var colIdNoBracket = colId.replace(\"{\", \"\").replace(\"}\", \"\");\r\n\r\n            var field = this.fieldByID(colIdNoBracket);\r\n            if (field == null) return;\r\n\r\n            labelData = labelData.replace(colId, field.format(rowData) || \"\");\r\n         });\r\n      }\r\n\r\n      // if label is empty, then show .id\r\n      if (!labelData.trim()) {\r\n         let labelSettings = this.labelSettings || {};\r\n         if (labelSettings && labelSettings.isNoLabelDisplay) {\r\n            labelData = L(labelSettings.noLabelText || \"[No Label]\");\r\n         } else {\r\n            // show id of row\r\n            labelData = `${this.AB.isUUID(rowData.id) ? \"ID: \" : \"\"}${\r\n               rowData.id\r\n            }`;\r\n         }\r\n      }\r\n\r\n      return labelData;\r\n   }\r\n\r\n   currentView() {\r\n      return this.workspaceViews.getCurrentView();\r\n   }\r\n\r\n   warningsAll() {\r\n      // report both OUR warnings, and any warnings from any of our fields\r\n      var allWarnings = [].concat(this._warnings);\r\n      this.fields().forEach((f) => {\r\n         allWarnings = allWarnings.concat(f.warnings());\r\n      });\r\n\r\n      if (this.fields().length == 0) {\r\n         allWarnings.push({ message: \"I got no fields.\", data: {} });\r\n      }\r\n\r\n      this.indexes().forEach((i) => {\r\n         allWarnings = allWarnings.concat(i.warnings());\r\n      });\r\n\r\n      return allWarnings;\r\n   }\r\n\r\n   // warningsEval() {\r\n   //    // our .fromValues() has already registered any missing fields.\r\n   //    // those should get reported from warnings()\r\n   // }\r\n\r\n   isUuid(text) {\r\n      console.error(\r\n         \"ABObject.isUuid(): is depreciated.  directly reference AB.Rules.isUUID() instead.\"\r\n      );\r\n      return this.AB.isUUID(text);\r\n   }\r\n};\r\n","const ABObject = require(\"./ABObject\");\r\n\r\n/**\r\n * ABObjectExternal\r\n * These are ABObjects that ... (might need to be refactored out?)\r\n * NOTE: on the web client, these should function just like ABObjects\r\n */\r\nmodule.exports = class ABObjectExternal extends ABObject {};\r\n","const ABObject = require(\"./ABObject\");\r\n\r\n/**\r\n * ABObjectImport\r\n * These are ABObjects that were Imported from existing Tables in the\r\n * system.\r\n *\r\n * NOTE: on the web client, these should function just like ABObjects\r\n */\r\nmodule.exports = class ABObjectImport extends ABObject {};\r\n","//\r\n// ABObjectQuery\r\n//\r\n// A type of Object in our system that is based upon a complex relationship of multiple\r\n// existing Objects.\r\n//\r\n// In the QueryBuilder section of App Builder, a new Query Object can be created.\r\n// An initial Object can be chosen from our current list of Objects. After that, additional Objects\r\n// and a specified join type can be specified.\r\n//\r\n// A list of fields from each specified Object can also be included as the data to be returned.\r\n//\r\n// A where statement is also part of the definition.\r\n//\r\n\r\nconst ABObjectQueryCore = require(\"../core/ABObjectQueryCore\");\r\n\r\nvar ABFactory = null;\r\nif (typeof io != \"undefined\") {\r\n   io.socket.on(\"ab.query.update\", function (msg) {\r\n      if (ABFactory) {\r\n         ABFactory.emit(\"ab.query.update\", {\r\n            queryId: msg.queryId,\r\n            data: msg.data,\r\n         });\r\n      } else {\r\n         console.error(\r\n            \"ABObjectQuery:: received io.socket msg before ABFactory is defined\"\r\n         );\r\n         console.error(\"TODO: move this to ABFactory!\");\r\n      }\r\n   });\r\n} else {\r\n   console.error(\"TODO: install socket.io client for sails updates.\");\r\n}\r\n\r\n// io.socket.on(\"ab.query.delete\", function (msg) {\r\n// });\r\n\r\nmodule.exports = class ABObjectQuery extends ABObjectQueryCore {\r\n   constructor(attributes, AB) {\r\n      super(attributes, AB);\r\n\r\n      if (!ABFactory) {\r\n         ABFactory = AB;\r\n      }\r\n      // listen\r\n      this.AB.on(\"ab.query.update\", (data) => {\r\n         if (this.id == data.queryId) this.fromValues(data.data);\r\n      });\r\n\r\n      // .fromValues() should already have been called in super()\r\n      // so now add in our conditionScan()\r\n      // NOTE: this can be folded into the Core once filterComplex\r\n      // is fully implemented and not on Platform only.\r\n\r\n      // now scan our conditions to make sure they are\r\n      // 1) reference fields that exist in our Query\r\n      // 2) completely filled out conditions.\r\n      this.conditionScan(this.where);\r\n   }\r\n\r\n   ///\r\n   /// Static Methods\r\n   ///\r\n   /// Available to the Class level object.  These methods are not dependent\r\n   /// on the instance values of the Application.\r\n   ///\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /// ABApplication data methods\r\n\r\n   /**\r\n    * @method destroy()\r\n    *\r\n    * destroy the current instance of ABObjectQuery\r\n    *\r\n    * also remove it from our parent application\r\n    *\r\n    * @return {Promise}\r\n    */\r\n   // destroy() {\r\n   //    return super.destroy().then(() => {\r\n   //       console.error(\"Move .queryRemove() to Appbuilder Designer.\");\r\n   //       // return this.AB.queryRemove(this);\r\n   //    });\r\n   // }\r\n\r\n   /**\r\n    * @method save()\r\n    *\r\n    * persist this instance of ABObjectQuery with it's parent ABApplication\r\n    *\r\n    * @return {Promise}\r\n    *\t\t\t\t\t\t.resolve( {this} )\r\n    */\r\n   // async save() {\r\n   //    try {\r\n   //       await super.save();\r\n   //       return this;\r\n   //    } catch (err) {\r\n   //       this.AB.notify.developer(err, {\r\n   //          context: \"ABObjectQuery.save()\",\r\n   //          query: this.toObj(),\r\n   //       });\r\n   //       throw err;\r\n   //    }\r\n   // }\r\n\r\n   ///\r\n   /// Fields\r\n   ///\r\n\r\n   /**\r\n    * @method importFields\r\n    * instantiate a set of fields from the given attributes.\r\n    * Our attributes are a set of field URLs That should already be created in their respective\r\n    * ABObjects.\r\n    * @param {array} fieldSettings The different field urls for each field\r\n    *             { }\r\n    * @param {bool} shouldAliasColumn\r\n    *        should we add the object alias to the columnNames?\r\n    *        this is primarily used on the web client\r\n    */\r\n   importFields(fieldSettings) {\r\n      super.importFields(fieldSettings);\r\n\r\n      this._fields.forEach((fieldEntry) => {\r\n         // include object name {aliasName}.{columnName}\r\n         // to use it in grid headers & hidden fields\r\n         fieldEntry.field.columnName = `${fieldEntry.alias}.${fieldEntry.field.columnName}`;\r\n      });\r\n   }\r\n\r\n   /**\r\n    * @method columnResize()\r\n    *\r\n    * save the new width of a column\r\n    *\r\n    * @param {} id The instance of the field to save.\r\n    * @param {int} newWidth the new width of the field\r\n    * @param {int} oldWidth the old width of the field\r\n    * @return {Promise}\r\n    */\r\n   columnResize(columnName, newWidth, oldWidth) {\r\n      let field = this.fields((f) => f.columnName == columnName)[0];\r\n      if (field) {\r\n         field.settings.width = newWidth;\r\n\r\n         return this.save();\r\n      } else {\r\n         return Promise.resolve();\r\n      }\r\n   }\r\n\r\n   ///\r\n   /// Working with Client Components:\r\n   ///\r\n\r\n   // return the column headers for this object\r\n   // @param {bool} isObjectWorkspace  return the settings saved for the object workspace\r\n   columnHeaders(\r\n      isObjectWorkspace,\r\n      isEditable,\r\n      summaryColumns,\r\n      countColumns,\r\n      hiddenFieldNames\r\n   ) {\r\n      var headers = super.columnHeaders(\r\n         isObjectWorkspace,\r\n         isEditable,\r\n         summaryColumns,\r\n         countColumns,\r\n         hiddenFieldNames\r\n      );\r\n\r\n      headers.forEach((h) => {\r\n         // pull object by alias\r\n         let object = this.objectByAlias(h.alias);\r\n         if (!object) return;\r\n\r\n         let field = object.fieldByID(h.fieldID);\r\n         if (!field) return;\r\n\r\n         // NOTE: query v1\r\n         let alias = \"\";\r\n         if (Array.isArray(this.joins())) {\r\n            alias = field.object.name;\r\n         } else {\r\n            alias = h.alias;\r\n         }\r\n\r\n         // include object name {aliasName}.{columnName}\r\n         // to use it in grid headers & hidden fields\r\n         h.id = `${alias}.${field.columnName}`;\r\n\r\n         // label\r\n         if (this.settings && this.settings.hidePrefix) {\r\n            h.header = `${field.label || \"\"}`;\r\n         } else {\r\n            h.header = `${field.object.label || \"\"}.${field.label || \"\"}`;\r\n         }\r\n\r\n         // icon\r\n         if (field.settings && field.settings.showIcon) {\r\n            h.header = `<span class=\"webix_icon fa fa-${field.fieldIcon()}\"></span>${\r\n               h.header\r\n            }`;\r\n         }\r\n\r\n         // If this query supports grouping, then add folder icon to display in grid\r\n         if (this.isGroup) {\r\n            let originTemplate = h.template;\r\n\r\n            h.template = (item, common) => {\r\n               if (item[h.id])\r\n                  return (\r\n                     common.icon(item, common) +\r\n                     (originTemplate\r\n                        ? originTemplate(item, common, item[h.id])\r\n                        : item[h.id])\r\n                  );\r\n               else return \"\";\r\n            };\r\n         }\r\n\r\n         h.adjust = true;\r\n         h.minWidth = 220;\r\n      });\r\n\r\n      return headers;\r\n   }\r\n\r\n   /**\r\n    * @method conditionScan()\r\n    * Scan the provided condition object and determine if there are any\r\n    * configuration issues.\r\n    * @param {obj} rule\r\n    *        the QueryBuilder rule that we are scanning.\r\n    * @param {array} listWarnings\r\n    *        An array of warnings that we should add our notices to.\r\n    */\r\n   conditionScan(rule) {\r\n      if (!rule) {\r\n         return;\r\n      }\r\n\r\n      if (rule.glue) {\r\n         (rule.rules || []).forEach((r) => {\r\n            this.conditionScan(r);\r\n         });\r\n         return;\r\n      }\r\n\r\n      // 1) we need to have any key as one of our fields.\r\n      let field = this.fieldByID(rule.key);\r\n      if (!field && rule.key != \"this_object\") {\r\n         this.emit(\r\n            \"warning\",\r\n            \"condition does not reference one of our fields\",\r\n            {\r\n               rule,\r\n            }\r\n         );\r\n      }\r\n\r\n      // 2) completely filled out conditions.\r\n      if (!this._conditionCheck) {\r\n         this._conditionCheck = this.AB.filterComplexNew(\r\n            `${this.id}_conditionCheck`\r\n         );\r\n         // {FilterComplex} ._conditionCheck\r\n         // has our .isConditionComplete() method.\r\n      }\r\n      if (!this._conditionCheck.isConditionComplete(rule)) {\r\n         this.emit(\"warning\", \"incomplete condition definition\", {\r\n            rule,\r\n         });\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method warningsAll()\r\n    * Compile any warnings from this Query, or any of it's fields.\r\n    * @return {array}\r\n    *         An array of warning objects.\r\n    *         .message {string} message to display\r\n    *         .data {obj} associated debug info for this warning.\r\n    */\r\n   // warningsAll() {\r\n   //    // report both OUR warnings, and any warnings from any of our fields\r\n   //    // NOTE: this will get\r\n   //    var allWarnings = super.warningsAll();\r\n\r\n   //    return allWarnings;\r\n   // }\r\n};\r\n","const ABProcessCore = require(\"../core/ABProcessCore\");\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABProcess extends ABProcessCore {\r\n   constructor(attributes, AB) {\r\n      super(attributes, AB);\r\n\r\n      // listen\r\n      this.AB.on(\"ab.abprocess.update\", (data) => {\r\n         if (this.id == data.objectId) this.fromValues(data.data);\r\n      });\r\n   }\r\n\r\n   /**\r\n    * @method destroy()\r\n    *\r\n    * destroy the current instance of ABObject\r\n    *\r\n    * also remove it from our parent application\r\n    *\r\n    * @return {Promise}\r\n    */\r\n   destroy() {\r\n      // remove all my Elements\r\n      var allElements = this.elements();\r\n      var allDestroy = [];\r\n      allElements.forEach((e) => {\r\n         allDestroy.push(e.destroy());\r\n      });\r\n\r\n      return Promise.all(allDestroy).then(() => {\r\n         // now remove myself\r\n         return new Promise((resolve, reject) => {\r\n            this.toDefinition()\r\n               .destroy()\r\n               .then(() => {\r\n                  // allow normal processing to contine now:\r\n                  resolve();\r\n               })\r\n               .then(() => {\r\n                  // in the background\r\n                  // remove this reference from ALL Applications that link\r\n                  // to me:\r\n                  console.error(\r\n                     \"TODO: ABProcess.destroy(): refactor to .emit('destroyed') and let containing Apps self remove.\"\r\n                  );\r\n                  var appsWithProcess = this.AB.applications().find((a) => {\r\n                     return a.hasProcess(this);\r\n                  });\r\n                  if (appsWithProcess.length > 0) {\r\n                     appsWithProcess.forEach((a) => {\r\n                        a.processRemove(this);\r\n                     });\r\n                  }\r\n               })\r\n               .catch((err) => {\r\n                  reject(err);\r\n               });\r\n         });\r\n      });\r\n   }\r\n\r\n   /**\r\n    * @method save()\r\n    *\r\n    * persist this instance of ABObject with it's parent ABApplication\r\n    *\r\n    *\r\n    * @return {Promise}\r\n    *\t\t\t\t\t\t.resolve( {this} )\r\n    */\r\n   save() {\r\n      // if this is an update:\r\n      // if (this.id) {\r\n      // \treturn ABDefinition.update(this.id, this.toDefinition());\r\n      // } else {\r\n\r\n      // \treturn ABDefinition.create(this.toDefinition());\r\n      // }\r\n\r\n      // make sure all our tasks have save()ed.\r\n      var allSaves = [];\r\n      var allTasks = this.elements();\r\n      allTasks.forEach((t) => {\r\n         allSaves.push(t.save());\r\n      });\r\n      return Promise.all(allSaves).then(() => {\r\n         // now we can save our Process definition\r\n         return this.toDefinition()\r\n            .save()\r\n            .then((data) => {\r\n               // if I didn't have an .id then this was a create()\r\n               // and I need to update my data with the generated .id\r\n\r\n               if (!this.id) {\r\n                  this.id = data.id;\r\n               }\r\n\r\n               // Also, our embedded elements now all have .ids\r\n               // where they might not have before.  So now\r\n               // rebuild our this._elements hash with all id\r\n               var _new = {};\r\n               Object.keys(this._elements).forEach((k) => {\r\n                  _new[this._elements[k].id] = this._elements[k];\r\n               });\r\n               this._elements = _new;\r\n            });\r\n      });\r\n   }\r\n\r\n   isValid() {\r\n      var validator = this.AB.Validation.validator();\r\n\r\n      // label/name must be unique:\r\n      var isNameUnique =\r\n         this.AB.processes((o) => {\r\n            return o.name.toLowerCase() == this.name.toLowerCase();\r\n         }).length == 0;\r\n      if (!isNameUnique) {\r\n         validator.addError(\r\n            \"name\",\r\n            L(`Process name must be unique (\"{0}\" already in use)`, [this.name])\r\n         );\r\n      }\r\n\r\n      return validator;\r\n   }\r\n\r\n   /**\r\n    * @method elementNewForModelDefinition()\r\n    * create a new process element defined by the given BPMN:Element\r\n    *\r\n    * the BPMN:Element definition comes from the BPMN Modeler when a new\r\n    * diagram element is created.\r\n    *\r\n    * @param {BPMN:Element} element\r\n    *        the BPMN modeler diagram element definition\r\n    * @return {ABProcess[OBJ]}\r\n    */\r\n   elementNewForModelDefinition(element) {\r\n      var task = this.AB.processElementNewForModelDefinition(element, this);\r\n      if (task) {\r\n         this.elementAdd(task);\r\n      }\r\n      return task;\r\n   }\r\n};\r\n","const ABViewManagerCore = require(\"../core/ABViewManagerCore\");\r\n\r\nmodule.exports = class ABViewManager extends ABViewManagerCore {};\r\n","var L = null;\r\n// multilingual Label fn()\r\n\r\nmodule.exports = class CSVImporter {\r\n   constructor(Label) {\r\n      // {ABMultilingual.label()} function.\r\n      //\r\n      if (!L) {\r\n         L = Label;\r\n\r\n         // if this was a v1: App param:\r\n         if (Label.Label) {\r\n            L = Label.Label;\r\n         }\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method getSeparateItems()\r\n    * Return the options of how the CSV values are separated.\r\n    * @return {array}  [ {id, value} ... ]\r\n    */\r\n   getSeparateItems() {\r\n      return [\r\n         { id: \",\", value: L(\"Comma (,)\") },\r\n         { id: \"\\t\", value: L(\"Tab (&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)\") },\r\n         { id: \";\", value: L(\"Semicolon (;)\") },\r\n         { id: \"s\", value: L(\"Space ( )\") },\r\n      ];\r\n   }\r\n\r\n   /**\r\n    * @method validateFile\r\n    * Validate file extension\r\n    * @param {*} fileInfo\r\n    *        https://docs.webix.com/api__ui.uploader_onbeforefileadd_event.html\r\n    * @return {boolean}\r\n    */\r\n   validateFile(fileInfo) {\r\n      if (!fileInfo || !fileInfo.file || !fileInfo.file.type) return false;\r\n\r\n      // validate file type\r\n      let extensionType = fileInfo.file.type.toLowerCase();\r\n      if (\r\n         extensionType == \"text/csv\" ||\r\n         extensionType == \"application/vnd.ms-excel\"\r\n      ) {\r\n         return true;\r\n      } else {\r\n         return false;\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method getDataRows\r\n    * Pull data rows from the CSV file\r\n    *\r\n    * @param {Object} fileInfo - https://docs.webix.com/api__ui.uploader_onbeforefileadd_event.html\r\n    * @param {string} separatedBy\r\n    *\r\n    * @return {Promise} -[\r\n    * \t\t\t\t\t\t[\"Value 1.1\", \"Value 1.2\", \"Value 1.3\"],\r\n    * \t\t\t\t\t\t[\"Value 2.1\", \"Value 2.2\", \"Value 2.3\"],\r\n    * \t\t\t\t\t]\r\n    */\r\n   getDataRows(fileInfo, separatedBy) {\r\n      if (!this.validateFile(fileInfo)) return Promise.reject();\r\n\r\n      return new Promise((resolve, reject) => {\r\n         // read CSV file\r\n         let reader = new window.FileReader();\r\n         reader.onload = (e) => {\r\n            let result = [];\r\n\r\n            // split lines\r\n            let dataRows = reader.result\r\n               .split(/\\r\\n|\\n|\\r/) // CRLF = \\r\\n; LF = \\n; CR = \\r;\r\n               .filter((row) => row && row.length > 0);\r\n\r\n            // split columns\r\n            (dataRows || []).forEach((row) => {\r\n               let dataCols = [];\r\n               if (separatedBy == \",\") {\r\n                  // NOTE: if the file contains ,, .match() can not reconize this empty string\r\n                  row = row.replace(/,,/g, \", ,\");\r\n\r\n                  // https://stackoverflow.com/questions/11456850/split-a-string-by-commas-but-ignore-commas-within-double-quotes-using-javascript#answer-11457952\r\n                  dataCols = row.match(/(\".*?\"|[^\",]+)(?=\\s*,|\\s*$)/g);\r\n               } else {\r\n                  dataCols = row.split(separatedBy);\r\n               }\r\n\r\n               result.push(dataCols.map((dCol) => this.reformat(dCol)));\r\n            });\r\n\r\n            resolve(result);\r\n         };\r\n         reader.readAsText(fileInfo.file);\r\n      });\r\n   }\r\n\r\n   /**\r\n    * @method getGuessDataType\r\n    * return our best guess of what type of data for the requested column.\r\n    * @param {array} dataRows\r\n    *        The data we are evaluating:\r\n    *        [\r\n    *           [\"Value 1.1\", \"Value 1.2\", \"Value 1.3\"],\r\n    *           [\"Value 2.1\", \"Value 2.2\", \"Value 2.3\"],\r\n    * \t\t ]\r\n    * @param colIndex {Number}\r\n    * @return {string}\r\n    */\r\n   getGuessDataType(dataRows, colIndex) {\r\n      var data,\r\n         // {various} the data pulled from the requested row/column\r\n         repeatNum = 10;\r\n      // {integer} how many rows do we want to scan trying to find a value\r\n\r\n      // Loop to find a value\r\n      for (var i = 1; i <= repeatNum; i++) {\r\n         var line = dataRows[i];\r\n         if (!line) break;\r\n\r\n         data = line[colIndex];\r\n\r\n         if (data != null && data.length > 0) break;\r\n      }\r\n\r\n      if (data == null || data == \"\") {\r\n         return \"string\";\r\n      } else if (\r\n         data == 0 ||\r\n         data == 1 ||\r\n         data == true ||\r\n         data == false ||\r\n         data == \"checked\" ||\r\n         data == \"unchecked\"\r\n      ) {\r\n         return \"boolean\";\r\n      } else if (!isNaN(data)) {\r\n         return \"number\";\r\n      } else if (Date.parse(data)) {\r\n         return \"date\";\r\n      } else {\r\n         // determine which type of string this might be:\r\n         if (data.length > 100) return \"LongText\";\r\n         else return \"string\";\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method reformat\r\n    * @param {string} str\r\n    */\r\n   reformat(str) {\r\n      if (!str) return \"\";\r\n\r\n      return str.trim().replace(/\"/g, \"\").replace(/'/g, \"\");\r\n   }\r\n};\r\n","const FilterComplexCore = require(\"../core/FilterComplexCore\");\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\n/**\r\n * @function _toInternal()\r\n * translate our external QB conditions into our internal format that\r\n * makes the cond.rule unique by adding the field.id to the rule.\r\n * @param {obj} cond - {\r\n *                         rules: [\r\n *                            {\r\n *                               alias: string || undefined,\r\n *                               key: uuid,\r\n *                               rule: string,\r\n *                               value: object,\r\n *                            }\r\n *                         ]\r\n *                      }\r\n *        the QB condition format we use exernally in our AB system.\r\n */\r\nfunction _toInternal(cond, fields = []) {\r\n   if (!cond) return;\r\n   if (cond.key) {\r\n      // Convert to format\r\n      // {\r\n      //    glue: \"and\",\r\n      //    rules: [\r\n      //       {\r\n      //          field: \"test_col\",\r\n      //          condition: { type: \"greater\", filter: 100 },\r\n      //       },\r\n      //    ],\r\n      // }\r\n      const field = fields.filter((f) => f.id == cond.key)[0];\r\n      cond.field = field?.columnName ?? field?.id;\r\n\r\n      cond.condition = {\r\n         type: cond.rule,\r\n         filter: cond.value,\r\n      };\r\n\r\n      if (Array.isArray(cond.value)) cond.includes = cond.value;\r\n      else cond.includes = (cond.value ?? \"\").split(\",\");\r\n\r\n      if (field?.key == \"date\" || field?.key == \"datetime\") {\r\n         cond.condition.filter = cond.condition.filter\r\n            ? AB.toDate(cond.condition.filter)\r\n            : null;\r\n\r\n         cond.includes = cond.includes.map((v) => AB.toDate(v));\r\n      }\r\n\r\n      delete cond.key;\r\n      delete cond.rule;\r\n      delete cond.value;\r\n   }\r\n\r\n   if (cond.rules && cond.rules.length) {\r\n      (cond.rules ?? []).forEach((r) => {\r\n         _toInternal(r, fields);\r\n      });\r\n   }\r\n}\r\n\r\n/**\r\n * @function _toExternal()\r\n * translate our internal QB conditions into our external format that\r\n * where the cond.rule no longer has the field.id.\r\n * @param {obj} cond - {\r\n *                         glue: \"and\",\r\n *                         rules: [\r\n *                            {\r\n *                               field: \"test_col\",\r\n *                               condition: { type: \"greater\", filter: 100 },\r\n *                            },\r\n *                         ],\r\n *                      }\r\n *        the QB condition format we use internally\r\n */\r\nfunction _toExternal(cond, fields = []) {\r\n   if (!cond) return;\r\n   if (cond.field) {\r\n      let field = fields.filter((f) => f.columnName == cond.field)[0];\r\n      // cond.alias = alias || undefined;\r\n      cond.key = field?.id ?? cond.field;\r\n      cond.condition = cond.condition ?? {};\r\n      cond.rule = cond.condition.type;\r\n\r\n      // Convert multi-values to a string\r\n      let values = cond.includes ?? [];\r\n      if (cond.condition.filter && values.indexOf(cond.condition.filter) < 0)\r\n         values.push(cond.condition.filter);\r\n\r\n      cond.value = values\r\n         .map((v) => {\r\n            // Convert date format\r\n            if (field && (field.key == \"date\" || field.key == \"datetime\")) {\r\n               return field.exportValue(v);\r\n            } else if (v instanceof Date) {\r\n               return v.toISOString();\r\n            } else {\r\n               return v;\r\n            }\r\n         })\r\n         .join(\",\");\r\n\r\n      delete cond.field;\r\n      delete cond.type;\r\n      delete cond.includes;\r\n      delete cond.condition;\r\n   }\r\n\r\n   if (cond.rules && cond.rules.length) {\r\n      (cond.rules ?? []).forEach((r) => {\r\n         _toExternal(r, fields);\r\n      });\r\n   }\r\n}\r\n\r\nmodule.exports = class FilterComplex extends FilterComplexCore {\r\n   constructor(idBase, AB) {\r\n      idBase = idBase ?? \"ab_row_filter\";\r\n\r\n      super(idBase, AB);\r\n\r\n      let labels = (this.labels = {\r\n         common: (AB._App ?? {}).labels,\r\n         component: {\r\n            and: L(\"And\"),\r\n            or: L(\"Or\"),\r\n\r\n            thisObject: L(\"This Object\"),\r\n            inQuery: L(\"In Query\"),\r\n            notInQuery: L(\"Not In Query\"),\r\n            inQueryField: L(\"By Query Field\"),\r\n            notInQueryField: L(\"Not By Query Field\"),\r\n\r\n            inQueryFieldQueryPlaceholder: L(\"Choose a Query\"),\r\n            inQueryFieldFieldPlaceholder: L(\"Choose a Field\"),\r\n\r\n            sameAsUser: L(\"Same As User\"),\r\n            notSameAsUser: L(\"Not Same As User\"),\r\n\r\n            sameAsField: L(\"Same As Field\"),\r\n            notSameAsField: L(\"Not Field\"),\r\n\r\n            inDataCollection: L(\"In Data Collection\"),\r\n            notInDataCollection: L(\"Not In Data Collection\"),\r\n\r\n            containsCondition: L(\"contains\"),\r\n            notContainsCondition: L(\"doesn't contain\"),\r\n            isCondition: L(\"is\"),\r\n            isNotCondition: L(\"is not\"),\r\n            isEmpty: L(\"is empty\"),\r\n            isNotEmpty: L(\"is not empty\"),\r\n\r\n            beforeCondition: L(\"is before\"),\r\n            afterCondition: L(\"is after\"),\r\n            onOrBeforeCondition: L(\"is on or before\"),\r\n            onOrAfterCondition: L(\"is on or after\"),\r\n            beforeCurrentCondition: L(\"is before current date\"),\r\n            afterCurrentCondition: L(\"is after current date\"),\r\n            onOrBeforeCurrentCondition: L(\"is on or before current date\"),\r\n            onOrAfterCurrentCondition: L(\"is on or after current date\"),\r\n            onLastDaysCondition: L(\"last ... days\"),\r\n            onNextDaysCondition: L(\"next ... days\"),\r\n\r\n            equalCondition: L(\":\"),\r\n            notEqualCondition: L(\"≠\"),\r\n            lessThanCondition: L(\"<\"),\r\n            moreThanCondition: L(\">\"),\r\n            lessThanOrEqualCondition: L(\"≤\"),\r\n            moreThanOrEqualCondition: L(\"≥\"),\r\n\r\n            equalListCondition: L(\"equals\"),\r\n            notEqualListCondition: L(\"does not equal\"),\r\n\r\n            checkedCondition: L(\"is checked\"),\r\n            notCheckedCondition: L(\"is not checked\"),\r\n\r\n            isCurrentUserCondition: L(\"is current user\"),\r\n            isNotCurrentUserCondition: L(\"is not current user\"),\r\n            containsCurrentUserCondition: L(\"contains current user\"),\r\n            notContainsCurrentUserCondition: L(\"does not contain current user\"),\r\n\r\n            ContextDefaultOption: L(\"choose option\"),\r\n            EqualsProcessValue: L(\"equals process value\"),\r\n            NotEqualsProcessValueCondition: L(\"not equals process value\"),\r\n            InProcessValueCondition: L(\"in process value\"),\r\n            notInProcessValueCondition: L(\"not in process value\"),\r\n         },\r\n      });\r\n\r\n      // internal list of Webix IDs to reference our UI components.\r\n      let ids = (this.ids = {\r\n         popup: this.unique(`${idBase}_popup`),\r\n         querybuilder: this.unique(`${idBase}_querybuilder`),\r\n         save: this.unique(`${idBase}_save`),\r\n      });\r\n\r\n      // Set current username\r\n      this.Account.username = this.AB.Account.username();\r\n\r\n      this._recordRuleFieldOptions = [];\r\n\r\n      // webix UI definition:\r\n      this.ui = {\r\n         rows: [\r\n            {\r\n               view: \"layout\",\r\n               type: \"clean\",\r\n               borderless: true,\r\n               rows: [\r\n                  {\r\n                     view: \"query\",\r\n                     id: ids.querybuilder,\r\n                     data: () => [],\r\n                     // data: async (field) => await this.pullOptions(field),\r\n                     fields: [],\r\n                  },\r\n               ],\r\n            },\r\n            {\r\n               id: ids.save,\r\n               view: \"button\",\r\n               css: \"webix_primary\",\r\n               value: L(\"Save\"),\r\n               click: () => {\r\n                  if (this.myPopup) this.myPopup.hide();\r\n                  this.emit(\"save\", this.getValue());\r\n               },\r\n            },\r\n         ],\r\n      };\r\n   }\r\n\r\n   // setting up UI\r\n   init(options) {\r\n      super.init(options);\r\n\r\n      const el = $$(this.ids.querybuilder);\r\n      if (el) {\r\n         el.getState().$observe(\"value\", (v) => {\r\n            if (this.__blockOnChange) return false;\r\n\r\n            this.emit(\"changed\", this.getValue());\r\n         });\r\n      }\r\n\r\n      this._isRecordRule = options?.isRecordRule ?? false;\r\n      this._recordRuleFieldOptions = options?.fieldOptions ?? [];\r\n   }\r\n\r\n   /**\r\n    * @method isValid\r\n    * validate the row data is valid filter condition\r\n    *\r\n    * @param rowData {Object} - data row\r\n    */\r\n   isValid(rowData) {\r\n      let helper = () => true;\r\n\r\n      let $query = $$(this.ids.querybuilder);\r\n      if ($query) {\r\n         helper = $query.getFilterFunction();\r\n         return helper(rowData);\r\n      } else {\r\n         return super.isValid(rowData);\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method isConditionComplete()\r\n    * Check a given condition entry and indicate if it is fully\r\n    * filled out.\r\n    * @param {obj} cond\r\n    *        The Condition object we are checking.  If a Macro\r\n    *        condition if provided: { glue:\"and\", rules:[] } then\r\n    *        this method will return True/False if All rules are\r\n    *        complete.\r\n    *        If an individual rule is provided, then it evaluates\r\n    *        the completness of that rule. { key, rule, value }\r\n    * @return {bool}\r\n    */\r\n   isConditionComplete(cond) {\r\n      if (!cond) return false;\r\n\r\n      let isComplete = true;\r\n      // start optimistically.\r\n\r\n      if (cond.glue) {\r\n         (cond.rules ?? []).forEach((r) => {\r\n            isComplete = isComplete && this.isConditionComplete(r);\r\n         });\r\n      } else {\r\n         // every condition needs a .key & .rule\r\n         if (!cond.key || cond.key == \"\") {\r\n            isComplete = false;\r\n         }\r\n\r\n         if (!cond.rule || cond.rule == \"\") {\r\n            isComplete = false;\r\n         }\r\n\r\n         if (isComplete) {\r\n            switch (cond.rule) {\r\n               case \"is_current_user\":\r\n               case \"is_not_current_user\":\r\n               case \"contain_current_user\":\r\n               case \"not_contain_current_user\":\r\n               case \"same_as_user\":\r\n               case \"not_same_as_user\":\r\n               case \"less_current\":\r\n               case \"greater_current\":\r\n               case \"less_or_equal_current\":\r\n               case \"greater_or_equal_current\":\r\n               case \"is_empty\":\r\n               case \"is_not_empty\":\r\n                  // There are only a few rules that don't need a\r\n                  // value\r\n                  break;\r\n\r\n               default:\r\n                  // The rest do need a .value\r\n                  if (!cond.value || cond.value == \"\") {\r\n                     isComplete = false;\r\n                  }\r\n                  break;\r\n            }\r\n         }\r\n      }\r\n\r\n      return isComplete;\r\n   }\r\n\r\n   setValue(settings) {\r\n      super.setValue(settings);\r\n      if (!settings) return;\r\n\r\n      const el = $$(this.ids.querybuilder);\r\n      if (el) {\r\n         let qbSettings = this.AB.cloneDeep(settings);\r\n\r\n         // Settings should match a condition built upon our QB format:\r\n         // {\r\n         //    glue:\"and\",\r\n         //    rules:[\r\n         //       {\r\n         //          key:\"uuid\",\r\n         //          rule:\"\",\r\n         //          value:\"\"\r\n         //       }\r\n         //    ]\r\n         // }\r\n         // externally our key should be the field.id and the rules should be\r\n         // the \"contains\", \"not_contains\", \"equal\" ... keywords.\r\n         // However, internally, we convert these rules into .ids that are\r\n         // unique for each field (see uiInit()).  So when we bring in settings\r\n         // we need to translate them into our internal format:\r\n\r\n         _toInternal(qbSettings, this._Fields);\r\n\r\n         this.__blockOnChange = true;\r\n         el.define(\"value\", qbSettings);\r\n         this.__blockOnChange = false;\r\n      }\r\n   }\r\n\r\n   getValue() {\r\n      if ($$(this.ids.querybuilder)) {\r\n         let settings = this.AB.cloneDeep(\r\n            $$(this.ids.querybuilder).getState().value ?? {}\r\n         );\r\n\r\n         // what we pull out of the QB will have .rules in our internal format:\r\n         // {field.id}_{rule}  (see uiInit() )\r\n         // But we need to store them in our generic QB format for use outside\r\n         // our FilterComplex widget.\r\n         _toExternal(settings, this._Fields);\r\n         this.condition = settings;\r\n      }\r\n\r\n      return super.getValue();\r\n   }\r\n\r\n   fieldsLoad(fields = [], object = null) {\r\n      super.fieldsLoad(fields, object);\r\n      this.uiInit();\r\n   }\r\n\r\n   toShortHand() {\r\n      return \"Add Filters\";\r\n   }\r\n\r\n   uiInit() {\r\n      this.uiQueryCustomValue();\r\n\r\n      let el = $$(this.ids.querybuilder);\r\n      if (el) {\r\n         // Clear fields\r\n         while (el.config.fields.length > 0) {\r\n            el.config.fields.pop();\r\n         }\r\n         // Set fields\r\n         (this.fieldsToQB() ?? []).forEach((f) => {\r\n            el.config.fields.push(f);\r\n         });\r\n      }\r\n   }\r\n\r\n   // HACK: have to overwrite Webix Query's function to support our custom input requirement.\r\n   // HooWoo\r\n   uiQueryCustomValue() {\r\n      const $el = $$(this.ids.querybuilder);\r\n      if (!$el) return;\r\n\r\n      // window.query.views.filter.prototype.CreateFilter = (\r\n      $el.$app.require(\"jet-views\", \"filter\").prototype.CreateFilter = (\r\n         field,\r\n         type,\r\n         format,\r\n         conditions,\r\n         place\r\n      ) => {\r\n         let inputs = this.uiValue(field);\r\n\r\n         let ui = {\r\n            view: \"filter\",\r\n            localId: \"filter\",\r\n            conditions: conditions,\r\n            field: field,\r\n            mode: type,\r\n            template: function (o) {\r\n               let str = o[field];\r\n               let parser =\r\n                  format ?? (type == \"date\" ? webix.i18n.dateFormatStr : null);\r\n               if (parser) str = parser(str);\r\n               return str;\r\n            },\r\n            inputs: inputs,\r\n            margin: 6,\r\n         };\r\n\r\n         let filter = webix.ui(ui, place);\r\n\r\n         // let data = [];\r\n         // const $query = $$(this.ids.querybuilder);\r\n         // if ($query) {\r\n         //    data = $query.app.getService(\"backend\").data(field);\r\n         // }\r\n         // filter.parse(data);\r\n\r\n         return filter;\r\n      };\r\n   }\r\n\r\n   uiValue(fieldColumnName) {\r\n      let result;\r\n\r\n      // Special case: this_object\r\n      if (fieldColumnName == \"this_object\") {\r\n         return []\r\n            .concat(this.uiQueryValue(\"this_object\"))\r\n            .concat(this.uiDataCollectionValue(\"this_object\"))\r\n            .concat(this.uiCustomValue(\"this_object\"))\r\n            .concat(this.uiContextValue(\"this_object\", \"uuid\"));\r\n      }\r\n\r\n      let field = (this._Fields ?? []).filter(\r\n         (f) => f.columnName == fieldColumnName\r\n      )[0];\r\n\r\n      switch (field?.key) {\r\n         case \"boolean\":\r\n            result = this.uiBooleanValue(field);\r\n            break;\r\n         case \"connectObject\":\r\n            result = []\r\n               .concat(this.uiQueryValue(field))\r\n               .concat(this.uiUserValue(field))\r\n               .concat(this.uiDataCollectionValue(field))\r\n               .concat(this.uiContextValue(field))\r\n               .concat(this.uiNoneValue());\r\n            break;\r\n         case \"date\":\r\n         case \"datetime\":\r\n            result = [\"datepicker\", \"daterangepicker\"];\r\n            break;\r\n         case \"list\":\r\n            result = this.uiListValue(field);\r\n            break;\r\n         case \"user\":\r\n            result = []\r\n               .concat(this.uiNoneValue())\r\n               .concat(this.uiUserValue(field));\r\n            break;\r\n         // case \"number\":\r\n         //    result = [\"text\"];\r\n         //    break;\r\n         case \"string\":\r\n         case \"LongText\":\r\n         case \"email\":\r\n            result = this.uiNoneValue();\r\n            break;\r\n      }\r\n\r\n      // Add filter options to Custom index\r\n      if (\r\n         field?.settings?.isCustomFK &&\r\n         // 1:M\r\n         ((field?.settings?.linkType === \"one\" &&\r\n            field?.settings?.linkViaType === \"many\") ||\r\n            // 1:1 isSource = true\r\n            (field?.settings?.linkType === \"one\" &&\r\n               field?.settings?.linkViaType === \"one\" &&\r\n               field?.settings?.isSource))\r\n      ) {\r\n         result = (result ?? []).concat(this.uiTextValue(field));\r\n      } else if (field?.key != \"connectObject\") {\r\n         result = (result ?? [])\r\n            .concat(this.uiTextValue(field))\r\n            .concat(this.uiQueryFieldValue(field))\r\n            .concat(this.uiContextValue(field));\r\n      }\r\n      // Special case: from Process builder\r\n      // .processFieldsLoad()\r\n      else if (fieldColumnName.indexOf(\"uuid\") > -1) {\r\n         result = this.uiContextValue(null, fieldColumnName);\r\n      }\r\n\r\n      if (this._isRecordRule) {\r\n         result = (result ?? []).concat(this.uiRecordRuleValue(field));\r\n      }\r\n\r\n      result = (result ?? []).concat(this.uiCustomValue(field));\r\n\r\n      return result;\r\n   }\r\n\r\n   uiNoneValue() {\r\n      return [\r\n         {\r\n            batch: \"none\",\r\n            borderless: true,\r\n            view: \"template\",\r\n            template: \"\",\r\n         },\r\n      ];\r\n   }\r\n\r\n   uiBooleanValue(field) {\r\n      return [\r\n         {\r\n            batch: \"boolean\",\r\n            view: \"checkbox\",\r\n         },\r\n      ];\r\n   }\r\n\r\n   uiTextValue(field) {\r\n      return [\r\n         {\r\n            batch: \"text\",\r\n            view: \"text\",\r\n            on: {\r\n               onAfterRender: function () {\r\n                  // HACK: focus on webix.text and webix.textarea\r\n                  // Why!! If the parent layout has zIndex lower than 101, then is not able to focus to webix.text and webix.textarea\r\n                  let $layout =\r\n                     this.queryView(function (a) {\r\n                        return !a.getParentView();\r\n                     }, \"parent\") ?? this;\r\n                  $layout.$view.style.zIndex = 102;\r\n               },\r\n            },\r\n         },\r\n      ];\r\n   }\r\n\r\n   uiQueryValue(field) {\r\n      let options = [];\r\n\r\n      let isQueryField =\r\n         this._QueryFields?.filter((f) => f.id == field.id).length > 0;\r\n\r\n      // populate the list of Queries for this_object:\r\n      if (field == \"this_object\" && this._Object) {\r\n         options = this._Queries?.filter((q) =>\r\n            q.canFilterObject(this._Object)\r\n         );\r\n      }\r\n      // populate the list of Queries for a query field\r\n      else if (isQueryField) {\r\n         options = this._Queries?.filter(\r\n            (q) =>\r\n               (this._Object ? this._Object.id : \"\") != q.id && // Prevent filter looping\r\n               q.canFilterObject(field.datasourceLink)\r\n         );\r\n      }\r\n\r\n      options?.forEach((q) => {\r\n         options.push({\r\n            id: q.id,\r\n            value: q.label,\r\n         });\r\n      });\r\n\r\n      return [\r\n         {\r\n            batch: \"query\",\r\n            view: \"combo\",\r\n            options: options ?? [],\r\n         },\r\n      ];\r\n   }\r\n\r\n   uiListValue(field) {\r\n      return [\r\n         {\r\n            batch: \"list\",\r\n            view: \"combo\",\r\n            options: field?.settings?.options?.map(function (x) {\r\n               return {\r\n                  id: x.id,\r\n                  value: x.text,\r\n               };\r\n            }),\r\n         },\r\n      ];\r\n   }\r\n\r\n   uiUserValue(field) {\r\n      return [\r\n         {\r\n            batch: \"user\",\r\n            view: \"combo\",\r\n            options: this.AB.Account.userList().map((u) => {\r\n               return {\r\n                  id: u.username,\r\n                  value: u.username,\r\n               };\r\n            }),\r\n         },\r\n      ];\r\n   }\r\n\r\n   uiDataCollectionValue(field) {\r\n      let linkObjectId;\r\n      if (field == \"this_object\" && this._Object) {\r\n         linkObjectId = this._Object.id;\r\n      } else {\r\n         linkObjectId = field?.settings?.linkObject;\r\n      }\r\n\r\n      return [\r\n         {\r\n            batch: \"datacollection\",\r\n            view: \"combo\",\r\n            options: linkObjectId\r\n               ? this.AB.datacollections(\r\n                    (dc) => dc?.datasource?.id == linkObjectId\r\n                 ).map((dc) => {\r\n                    return {\r\n                       id: dc.id,\r\n                       value: dc.label,\r\n                    };\r\n                 })\r\n               : [],\r\n         },\r\n      ];\r\n   }\r\n\r\n   uiQueryFieldValue(field) {\r\n      return [\r\n         {\r\n            batch: \"queryField\",\r\n            view: \"combo\",\r\n            placeholder: this.labels.component.inQueryFieldQueryPlaceholder,\r\n            options: this.queries(\r\n               (q) => this._Object == null || q.id != this._Object.id\r\n            ).map((q) => {\r\n               return {\r\n                  id: q.id,\r\n                  value: q.label,\r\n               };\r\n            }),\r\n         },\r\n      ];\r\n   }\r\n\r\n   uiRecordRuleValue(field) {\r\n      return [\r\n         {\r\n            batch: \"recordRule\",\r\n            view: \"select\",\r\n            options: this._recordRuleFieldOptions ?? [],\r\n         },\r\n      ];\r\n   }\r\n\r\n   uiContextValue(field, processFieldKey = null) {\r\n      let processField = (this._ProcessFields ?? []).filter((pField) => {\r\n         if (!pField) return false;\r\n\r\n         if (pField.field) {\r\n            return pField.field.id == field.id;\r\n         } else if (pField.key) {\r\n            // uuid\r\n            let processFieldId = pField.key.split(\".\").pop();\r\n            return (\r\n               processFieldId == field.id ||\r\n               processFieldId == field.key ||\r\n               processFieldId == processFieldKey ||\r\n               pField.key == processFieldKey\r\n            );\r\n         }\r\n      })[0];\r\n\r\n      if (!processField) return [];\r\n\r\n      return [\r\n         {\r\n            batch: \"context\",\r\n            view: \"select\",\r\n            options: [\r\n               {\r\n                  id: \"empty\",\r\n                  value: this.labels.component.ContextDefaultOption,\r\n               },\r\n               {\r\n                  id: processField.key,\r\n                  value: L(\"context({0})\", [processField.label]),\r\n               },\r\n            ],\r\n         },\r\n      ];\r\n   }\r\n\r\n   uiCustomValue(field) {\r\n      let customOptions = this._customOptions ?? {};\r\n      let options = customOptions[field.id ?? field] ?? {};\r\n      return options.values ?? [];\r\n   }\r\n\r\n   popUp(...options) {\r\n      if (!this.myPopup) {\r\n         let ui = {\r\n            id: this.ids.popup,\r\n            view: \"popup\",\r\n            height: 400,\r\n            width: 800,\r\n            body: this.ui,\r\n         };\r\n\r\n         this.myPopup = webix.ui(ui);\r\n         this.init();\r\n      }\r\n\r\n      if (this._Fields) {\r\n         this.fieldsLoad(this._Fields, this._Object);\r\n      }\r\n\r\n      // NOTE: do this, before the .setValue() operation, as we need to have\r\n      // our fields and filters defined BEFORE a setValue() is performed.\r\n      // this.uiInit();\r\n\r\n      if (this.condition) {\r\n         this.setValue(this.condition);\r\n      }\r\n\r\n      this.myPopup.show(...options);\r\n   }\r\n\r\n   /**\r\n    * @method addCustomOption\r\n    *\r\n    * @param {string|uuid} fieldId\r\n    * @param {Object} options - {\r\n    *                               conditions: [],\r\n    *                               values: []\r\n    *                           }\r\n    */\r\n   addCustomOption(fieldId, options = {}) {\r\n      this._customOptions = this._customOptions ?? {};\r\n      this._customOptions[fieldId] = options;\r\n   }\r\n};\r\n","const RowFilterCore = require(\"../core/RowFilterCore\");\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class RowFilter extends RowFilterCore {\r\n   constructor(App, idBase, AB) {\r\n      super(App, idBase, AB);\r\n\r\n      console.error(\"TODO: Switch RowFilter => FilterComplex\");\r\n\r\n      // internal list of Webix IDs to reference our UI components.\r\n      let ids = (this.ids = {\r\n         component: this.unique(`${idBase}_rowFilter`),\r\n         filterForm: this.unique(`${idBase}_rowFilter_form`),\r\n         addNewFilter: this.unique(`${idBase}_rowFilter_addNewFilter`),\r\n\r\n         glue: this.unique(`${idBase}_rowFilter_glue`),\r\n         field: this.unique(`${idBase}_rowFilter_field`),\r\n         rule: this.unique(`${idBase}_rowFilter_rule`),\r\n         inputValue: this.unique(`${idBase}_rowFilter_inputValue`),\r\n\r\n         queryCombo: this.unique(`${idBase}_rowFilter_queryCombo`),\r\n         queryFieldCombo: this.unique(`${idBase}_rowFilter_queryFieldCombo`),\r\n         queryFieldComboQuery: this.unique(\r\n            `${idBase}_rowFilter_queryFieldComboQuery`\r\n         ),\r\n         queryFieldComboField: this.unique(\r\n            `${idBase}_rowFilter_queryFieldComboField`\r\n         ),\r\n         fieldMatch: this.unique(`${idBase}_rowFilter_fieldMatchCombo`),\r\n\r\n         dataCollection: this.unique(`${idBase}_rowFilter_dataCollection`),\r\n\r\n         listOptions: this.unique(`${idBase}_rowFilter_listOptions`),\r\n\r\n         datePicker: this.unique(`${idBase}_rowFilter_datePicker`),\r\n      });\r\n\r\n      // Set current username\r\n      // this.Account.username = this.AB.Account.username();\r\n\r\n      var batchName; // we need to revert to this default when switching away from a in/by query field\r\n\r\n      // Default options list to push to all fields\r\n      this.queryFieldOptions = [\r\n         {\r\n            value: L(\"By Query Field\"),\r\n            id: \"in_query_field\",\r\n         },\r\n         {\r\n            value: L(\"Not In Query\"),\r\n            id: \"not_in_query_field\",\r\n         },\r\n      ];\r\n\r\n      this.recordRuleOptions = [];\r\n      this.recordRuleFieldOptions = [];\r\n\r\n      let _logic = this._logic || {};\r\n\r\n      /**\r\n       * @method getFieldList\r\n       * return field list to render options\r\n       */\r\n      _logic.getFieldList = () => {\r\n         return (this._Fields || []).map((f) => {\r\n            let label = f.label;\r\n\r\n            // include object's name to options\r\n            if (this._settings.showObjectName && f.object) {\r\n               label = f.object.label + \".\" + f.label;\r\n            }\r\n\r\n            return {\r\n               id: f.id,\r\n               value: label,\r\n               alias: f.alias || undefined, // ABObjectQuery\r\n            };\r\n         });\r\n      };\r\n\r\n      _logic.getFilterUI = () => {\r\n         let instance = this;\r\n         let config_settings = this.config_settings || {};\r\n\r\n         return {\r\n            id: \"f\" + webix.uid(),\r\n            isolate: true,\r\n            cols: [\r\n               {\r\n                  // Add / Or\r\n                  view: \"combo\",\r\n                  id: ids.glue,\r\n                  width: 80,\r\n                  value: config_settings.glue || \"and\",\r\n                  options: [\r\n                     {\r\n                        value: L(\"And\"),\r\n                        id: \"and\",\r\n                     },\r\n                     {\r\n                        value: L(\"Or\"),\r\n                        id: \"or\",\r\n                     },\r\n                  ],\r\n                  on: {\r\n                     onChange: function (newVal, oldVal) {\r\n                        _logic.selectCombineCondition(newVal);\r\n                     },\r\n                  },\r\n               },\r\n               {\r\n                  // Field list\r\n                  view: \"combo\",\r\n                  id: ids.field,\r\n                  suggest: {\r\n                     on: {\r\n                        onBeforeShow: function () {\r\n                           this.define(\"width\", 400);\r\n                           this.resize();\r\n                        },\r\n                     },\r\n                     data: _logic.getFieldList(),\r\n                  },\r\n                  on: {\r\n                     onChange: function (columnId) {\r\n                        var $viewCond = this.getParentView();\r\n                        _logic.selectField(columnId, $viewCond);\r\n                     },\r\n                  },\r\n               },\r\n               // Comparer\r\n               {\r\n                  id: ids.rule,\r\n                  width: 220,\r\n                  cells: [\r\n                     {},\r\n                     // Query\r\n                     {\r\n                        batch: \"query\",\r\n                        view: \"combo\",\r\n                        value: \"in_query\",\r\n                        options: [\r\n                           {\r\n                              value: L(\"In Query\"),\r\n                              id: \"in_query\",\r\n                           },\r\n                           {\r\n                              value: L(\"Not In Query\"),\r\n                              id: \"not_in_query\",\r\n                           },\r\n                           {\r\n                              value: L(\"contains\"),\r\n                              id: \"contains\",\r\n                           },\r\n                           {\r\n                              value: L(\"doesn't contain\"),\r\n                              id: \"not_contains\",\r\n                           },\r\n                           {\r\n                              value: L(\"is\"),\r\n                              id: \"equals\",\r\n                           },\r\n                           {\r\n                              value: L(\"is not\"),\r\n                              id: \"not_equal\",\r\n                           },\r\n                           {\r\n                              value: L(\"is empty\"),\r\n                              id: \"is_empty\",\r\n                           },\r\n                           {\r\n                              value: L(\"is not empty\"),\r\n                              id: \"is_not_empty\",\r\n                           },\r\n                           {\r\n                              value: L(\"Same As User\"),\r\n                              id: \"same_as_user\",\r\n                           },\r\n                           {\r\n                              value: L(\"Not Same As User\"),\r\n                              id: \"not_same_as_user\",\r\n                           },\r\n                           {\r\n                              value: L(\"In Data Collection\"),\r\n                              id: \"in_data_collection\",\r\n                           },\r\n                           {\r\n                              value: L(\"Not In Data Collection\"),\r\n                              id: \"not_in_data_collection\",\r\n                           },\r\n                        ].concat(instance.recordRuleOptions),\r\n                        on: {\r\n                           onChange: function (condition, oldValue) {\r\n                              var $viewComparer = this.getParentView();\r\n                              var $viewCond = $viewComparer.getParentView();\r\n                              _logic.onChangeRule(condition, $viewCond);\r\n                              _logic.onChange();\r\n                           },\r\n                        },\r\n                     },\r\n\r\n                     // Date\r\n                     {\r\n                        batch: \"date\",\r\n                        view: \"combo\",\r\n                        value: \"less\",\r\n                        options: [\r\n                           {\r\n                              value: L(\"equals\"),\r\n                              id: \"equals\",\r\n                           },\r\n                           {\r\n                              value: L(\"does not equal\"),\r\n                              id: \"not_equal\",\r\n                           },\r\n                           {\r\n                              value: L(\"is before\"),\r\n                              id: \"less\",\r\n                           },\r\n                           {\r\n                              value: L(\"is after\"),\r\n                              id: \"greater\",\r\n                           },\r\n                           {\r\n                              value: L(\"is on or before\"),\r\n                              id: \"less_or_equal\",\r\n                           },\r\n                           {\r\n                              value: L(\"is on or after\"),\r\n                              id: \"greater_or_equal\",\r\n                           },\r\n                           {\r\n                              value: L(\"is before current date\"),\r\n                              id: \"less_current\",\r\n                           },\r\n                           {\r\n                              value: L(\"is after current date\"),\r\n                              id: \"greater_current\",\r\n                           },\r\n                           {\r\n                              value: L(\"is on or before current date\"),\r\n                              id: \"less_or_equal_current\",\r\n                           },\r\n                           {\r\n                              value: L(\"is on or after current date\"),\r\n                              id: \"greater_or_equal_current\",\r\n                           },\r\n                           {\r\n                              value: L(\"last ... days\"),\r\n                              id: \"last_days\",\r\n                           },\r\n                           {\r\n                              value: L(\"next ... days\"),\r\n                              id: \"next_days\",\r\n                           },\r\n                        ]\r\n                           .concat(instance.queryFieldOptions)\r\n                           .concat(instance.recordRuleOptions),\r\n                        on: {\r\n                           onChange: function (condition) {\r\n                              var $viewComparer = this.getParentView();\r\n                              var $viewCond = $viewComparer.getParentView();\r\n                              _logic.onChangeRule(condition, $viewCond);\r\n                              _logic.onChange();\r\n                           },\r\n                        },\r\n                     },\r\n                     // Number\r\n                     {\r\n                        batch: \"number\",\r\n                        view: \"combo\",\r\n                        value: \"equals\",\r\n                        options: [\r\n                           {\r\n                              value: L(\":\"),\r\n                              id: \"equals\",\r\n                           },\r\n                           {\r\n                              value: L(\"≠\"),\r\n                              id: \"not_equal\",\r\n                           },\r\n                           {\r\n                              value: L(\"<\"),\r\n                              id: \"less\",\r\n                           },\r\n                           {\r\n                              value: L(\">\"),\r\n                              id: \"greater\",\r\n                           },\r\n                           {\r\n                              value: L(\"≤\"),\r\n                              id: \"less_or_equal\",\r\n                           },\r\n                           {\r\n                              value: L(\"≥\"),\r\n                              id: \"greater_or_equal\",\r\n                           },\r\n                        ]\r\n                           .concat(instance.queryFieldOptions)\r\n                           .concat(instance.recordRuleOptions),\r\n                        on: {\r\n                           onChange: function (condition) {\r\n                              var $viewComparer = this.getParentView();\r\n                              var $viewCond = $viewComparer.getParentView();\r\n                              _logic.onChangeRule(condition, $viewCond);\r\n                              _logic.onChange();\r\n                           },\r\n                        },\r\n                     },\r\n                     // List\r\n                     {\r\n                        batch: \"list\",\r\n                        view: \"combo\",\r\n                        value: \"equals\",\r\n                        options: [\r\n                           {\r\n                              value: L(\"equals\"),\r\n                              id: \"equals\",\r\n                           },\r\n                           {\r\n                              value: L(\"does not equal\"),\r\n                              id: \"not_equal\",\r\n                           },\r\n                           {\r\n                              value: L(\"Same As User\"),\r\n                              id: \"same_as_user\",\r\n                           },\r\n                           {\r\n                              value: L(\"Not Same As User\"),\r\n                              id: \"not_same_as_user\",\r\n                           },\r\n                        ]\r\n                           .concat(instance.queryFieldOptions)\r\n                           .concat(instance.recordRuleOptions),\r\n                        on: {\r\n                           onChange: function (condition, oldValue) {\r\n                              var $viewComparer = this.getParentView();\r\n                              var $viewCond = $viewComparer.getParentView();\r\n                              _logic.onChangeRule(condition, $viewCond);\r\n                              _logic.onChange();\r\n                           },\r\n                        },\r\n                     },\r\n                     // Boolean\r\n                     {\r\n                        batch: \"boolean\",\r\n                        view: \"combo\",\r\n                        value: \"equals\",\r\n                        options: [\r\n                           {\r\n                              value: L(\"equals\"),\r\n                              id: \"equals\",\r\n                           },\r\n                           {\r\n                              value: L(\"does not equal\"),\r\n                              id: \"not_equal\",\r\n                           },\r\n                        ]\r\n                           .concat(instance.queryFieldOptions)\r\n                           .concat(instance.recordRuleOptions),\r\n                        on: {\r\n                           onChange: function (condition) {\r\n                              var $viewComparer = this.getParentView();\r\n                              var $viewCond = $viewComparer.getParentView();\r\n                              _logic.onChangeRule(condition, $viewCond);\r\n                              _logic.onChange();\r\n                           },\r\n                        },\r\n                     },\r\n                     // User\r\n                     {\r\n                        batch: \"user\",\r\n                        view: \"combo\",\r\n                        value: \"is_current_user\",\r\n                        options: [\r\n                           {\r\n                              value: L(\"is current user\"),\r\n                              id: \"is_current_user\",\r\n                           },\r\n                           {\r\n                              value: L(\"is not current user\"),\r\n                              id: \"is_not_current_user\",\r\n                           },\r\n                           {\r\n                              value: L(\"contains current user\"),\r\n                              id: \"contain_current_user\",\r\n                           },\r\n                           {\r\n                              value: L(\"does not contain current user\"),\r\n                              id: \"not_contain_current_user\",\r\n                           },\r\n                           {\r\n                              value: L(\"equals\"),\r\n                              id: \"equals\",\r\n                           },\r\n                           {\r\n                              value: L(\"does not equal\"),\r\n                              id: \"not_equal\",\r\n                           },\r\n                        ]\r\n                           .concat(instance.queryFieldOptions)\r\n                           .concat(instance.recordRuleOptions),\r\n                        on: {\r\n                           onChange: function (condition) {\r\n                              var $viewComparer = this.getParentView();\r\n                              var $viewCond = $viewComparer.getParentView();\r\n                              _logic.onChangeRule(condition, $viewCond);\r\n                              _logic.onChange();\r\n                           },\r\n                        },\r\n                     },\r\n                     // String\r\n                     {\r\n                        batch: \"string\",\r\n                        view: \"combo\",\r\n                        value: \"contains\",\r\n                        options: [\r\n                           {\r\n                              value: L(\"contains\"),\r\n                              id: \"contains\",\r\n                           },\r\n                           {\r\n                              value: L(\"doesn't contain\"),\r\n                              id: \"not_contains\",\r\n                           },\r\n                           {\r\n                              value: L(\"is\"),\r\n                              id: \"equals\",\r\n                           },\r\n                           {\r\n                              value: L(\"is not\"),\r\n                              id: \"not_equal\",\r\n                           },\r\n                        ]\r\n                           .concat(instance.queryFieldOptions)\r\n                           .concat(instance.recordRuleOptions),\r\n                        on: {\r\n                           onChange: function (condition) {\r\n                              var $viewComparer = this.getParentView();\r\n                              var $viewCond = $viewComparer.getParentView();\r\n                              _logic.onChangeRule(condition, $viewCond);\r\n                              _logic.onChange();\r\n                           },\r\n                        },\r\n                     },\r\n                     // Email\r\n                     {\r\n                        batch: \"email\",\r\n                        view: \"combo\",\r\n                        value: \"contains\",\r\n                        options: [\r\n                           {\r\n                              value: L(\"contains\"),\r\n                              id: \"contains\",\r\n                           },\r\n                           {\r\n                              value: L(\"doesn't contain\"),\r\n                              id: \"not_contains\",\r\n                           },\r\n                           {\r\n                              value: L(\"is\"),\r\n                              id: \"equals\",\r\n                           },\r\n                           {\r\n                              value: L(\"is not\"),\r\n                              id: \"not_equal\",\r\n                           },\r\n                        ]\r\n                           .concat(instance.queryFieldOptions)\r\n                           .concat(instance.recordRuleOptions),\r\n                        on: {\r\n                           onChange: function (condition) {\r\n                              var $viewComparer = this.getParentView();\r\n                              var $viewCond = $viewComparer.getParentView();\r\n                              _logic.onChangeRule(condition, $viewCond);\r\n                              _logic.onChange();\r\n                           },\r\n                        },\r\n                     },\r\n                  ],\r\n               },\r\n               // Value\r\n               {\r\n                  id: ids.inputValue,\r\n                  isolate: true,\r\n                  cells: [\r\n                     {\r\n                        batch: \"empty\",\r\n                     },\r\n\r\n                     // Query\r\n                     {\r\n                        id: ids.queryCombo,\r\n\r\n                        batch: \"query\",\r\n                        view: \"combo\",\r\n                        options: [],\r\n                        on: {\r\n                           onChange: _logic.onChange,\r\n                        },\r\n                     },\r\n\r\n                     // Query Field\r\n                     {\r\n                        id: ids.queryFieldCombo,\r\n                        batch: \"queryField\",\r\n                        rows: [\r\n                           {\r\n                              id: ids.queryFieldComboQuery,\r\n                              view: \"combo\",\r\n                              options: [],\r\n                              placeholder: L(\"Choose a Query\"),\r\n                              on: {\r\n                                 onChange: function (value) {\r\n                                    var $viewComparer = this.getParentView();\r\n                                    var $viewCond = $viewComparer\r\n                                       .getParentView()\r\n                                       .getParentView();\r\n                                    _logic.onChangeQueryFieldCombo(\r\n                                       value,\r\n                                       $viewCond\r\n                                    );\r\n\r\n                                    _logic.onChange();\r\n                                 },\r\n                              },\r\n                           },\r\n                           {\r\n                              id: ids.queryFieldComboField,\r\n                              view: \"combo\",\r\n                              options: [],\r\n                              placeholder: L(\"Choose a Field\"),\r\n                              on: {\r\n                                 onChange: _logic.onChange,\r\n                              },\r\n                           },\r\n                        ],\r\n                     },\r\n\r\n                     // Field match\r\n                     {\r\n                        id: ids.fieldMatch,\r\n                        batch: \"fieldMatch\",\r\n                        view: \"combo\",\r\n                        options: [],\r\n                        on: {\r\n                           onChange: _logic.onChange,\r\n                        },\r\n                     },\r\n\r\n                     // Data collection\r\n                     {\r\n                        id: ids.dataCollection,\r\n                        batch: \"dataCollection\",\r\n                        view: \"richselect\",\r\n                        options: [],\r\n                        on: {\r\n                           onChange: _logic.onChange,\r\n                        },\r\n                     },\r\n\r\n                     // Date\r\n                     {\r\n                        // inputView.format = field.getDateFormat();\r\n                        batch: \"date\",\r\n                        id: ids.datePicker,\r\n                        view: \"datepicker\",\r\n                        on: {\r\n                           onChange: function () {\r\n                              _logic.onChange();\r\n                           },\r\n                        },\r\n                     },\r\n                     // Number\r\n                     {\r\n                        batch: \"number\",\r\n                        view: \"text\",\r\n                        validate: webix.rules.isNumber,\r\n                        on: {\r\n                           onTimedKeyPress: function () {\r\n                              if (this.validate()) _logic.onChange();\r\n                           },\r\n                        },\r\n                     },\r\n                     // List\r\n                     {\r\n                        batch: \"list\",\r\n                        id: ids.listOptions,\r\n                        view: \"combo\",\r\n                        options: [],\r\n                        on: {\r\n                           onChange: function () {\r\n                              _logic.onChange();\r\n                           },\r\n                        },\r\n                     },\r\n                     // Boolean\r\n                     {\r\n                        batch: \"boolean\",\r\n                        view: \"checkbox\",\r\n                        on: {\r\n                           onChange: function () {\r\n                              _logic.onChange();\r\n                           },\r\n                        },\r\n                     },\r\n                     // User\r\n                     {\r\n                        batch: \"user\",\r\n                        view: \"combo\",\r\n                        options: this.AB.Account.userList().map((u) => {\r\n                           return {\r\n                              id: u.username,\r\n                              value: u.username,\r\n                           };\r\n                        }),\r\n                        on: {\r\n                           onChange: function () {\r\n                              _logic.onChange();\r\n                           },\r\n                        },\r\n                     },\r\n                     // String\r\n                     {\r\n                        batch: \"string\",\r\n                        view: \"text\",\r\n                        on: {\r\n                           onTimedKeyPress: function () {\r\n                              _logic.onChange();\r\n                           },\r\n                        },\r\n                     },\r\n                     // Email\r\n                     {\r\n                        batch: \"email\",\r\n                        view: \"text\",\r\n                        on: {\r\n                           onTimedKeyPress: function () {\r\n                              _logic.onChange();\r\n                           },\r\n                        },\r\n                     },\r\n                  ],\r\n               },\r\n               {\r\n                  view: \"button\",\r\n                  css: \"webix_primary\",\r\n                  icon: \"fa fa-plus\",\r\n                  type: \"icon\",\r\n                  autowidth: true,\r\n                  click: function () {\r\n                     var $viewForm = this.getFormView();\r\n\r\n                     var indexView = $viewForm.index(this.getParentView());\r\n\r\n                     _logic.addNewFilter(indexView + 1);\r\n                  },\r\n               },\r\n               {\r\n                  view: \"button\",\r\n                  css: \"webix_danger\",\r\n                  icon: \"fa fa-trash\",\r\n                  type: \"icon\",\r\n                  autowidth: true,\r\n                  click: function () {\r\n                     var $viewCond = this.getParentView();\r\n\r\n                     _logic.removeNewFilter($viewCond);\r\n                  },\r\n               },\r\n            ],\r\n         };\r\n      };\r\n\r\n      _logic.getAddButtonUI = () => {\r\n         return {\r\n            view: \"button\",\r\n            id: ids.addNewFilter,\r\n            css: \"webix_primary\",\r\n            type: \"form\",\r\n            label: L(\"Add a filter\"),\r\n            click: () => {\r\n               _logic.addNewFilter();\r\n            },\r\n         };\r\n      };\r\n\r\n      _logic.addNewFilter = (index, fieldId) => {\r\n         var viewId;\r\n         var ui = _logic.getFilterUI();\r\n\r\n         var $viewForm = $$(ids.filterForm);\r\n         if ($viewForm) {\r\n            viewId = $viewForm.addView(ui, index);\r\n\r\n            _logic.toggleAddNewButton();\r\n\r\n            // select a option of field\r\n            if (fieldId) _logic.selectField(fieldId, $$(viewId), true);\r\n         }\r\n\r\n         return viewId;\r\n      };\r\n\r\n      _logic.removeNewFilter = function ($viewCond) {\r\n         var $viewForm = $$(ids.filterForm);\r\n\r\n         $viewForm.removeView($viewCond);\r\n\r\n         _logic.toggleAddNewButton();\r\n\r\n         _logic.onChange();\r\n      };\r\n\r\n      _logic.toggleAddNewButton = function () {\r\n         if (!$$(ids.filterForm)) return;\r\n\r\n         // Show \"Add new filter\" button\r\n         if ($$(ids.filterForm).getChildViews().length < 1) {\r\n            $$(ids.filterForm).hide();\r\n            $$(ids.addNewFilter).show();\r\n         }\r\n         // Hide \"Add new filter\" button\r\n         else {\r\n            $$(ids.filterForm).show();\r\n            $$(ids.addNewFilter).hide();\r\n         }\r\n      };\r\n\r\n      _logic.selectCombineCondition = (val, ignoreNotify) => {\r\n         // define combine value to configuration\r\n         this.config_settings.glue = val;\r\n\r\n         // update value of every combine conditions\r\n         var $viewConds = $$(ids.filterForm).getChildViews();\r\n         $viewConds.forEach((v) => {\r\n            if (v.$$ && v.$$(ids.glue)) v.$$(ids.glue).setValue(val);\r\n         });\r\n\r\n         if (!ignoreNotify) _logic.onChange();\r\n      };\r\n\r\n      _logic.selectField = (columnId, $viewCond, ignoreNotify) => {\r\n         if (!this._Fields) return;\r\n\r\n         var field = this._Fields.filter((f) => f.id == columnId)[0];\r\n         if (!field) return;\r\n\r\n         // switch view\r\n         batchName = field.key;\r\n         if (field.id == \"this_object\") batchName = \"query\";\r\n         // Special this object query\r\n         else if (batchName == \"LongText\" || batchName == \"combined\")\r\n            batchName = \"string\";\r\n         else if (field.key == \"formula\") batchName = \"number\";\r\n         var isQueryField =\r\n            this._QueryFields.filter((f) => {\r\n               return f.id == field.id;\r\n            }).length > 0;\r\n         if (isQueryField) {\r\n            // we chose a connectField which is now a Query type\r\n            batchName = \"query\";\r\n         }\r\n         $viewCond.$$(ids.rule).showBatch(batchName);\r\n         $viewCond.$$(ids.inputValue).showBatch(batchName);\r\n\r\n         let options = [];\r\n         let Queries = [];\r\n\r\n         // populate the list of Queries for this_object:\r\n         if (field.id == \"this_object\" && this._Object) {\r\n            Queries = this.queries((q) => q.canFilterObject(this._Object));\r\n         }\r\n         // populate the list of Queries for a query field\r\n         else if (isQueryField) {\r\n            Queries = this.queries((q) => {\r\n               return (\r\n                  (this._Object ? this._Object.id : \"\") != q.id && // Prevent filter looping\r\n                  q.canFilterObject(field.datasourceLink)\r\n               );\r\n            });\r\n         }\r\n\r\n         Queries.forEach((q) => {\r\n            options.push({\r\n               id: q.id,\r\n               value: q.label,\r\n            });\r\n         });\r\n         $viewCond\r\n            .$$(ids.inputValue)\r\n            .$$(ids.queryCombo)\r\n            .define(\"options\", options);\r\n         $viewCond.$$(ids.inputValue).$$(ids.queryCombo).refresh();\r\n\r\n         // populate options of list\r\n         if (field.key == \"list\") {\r\n            let listOptions = field.settings.options.map(function (x) {\r\n               return {\r\n                  id: x.id,\r\n                  value: x.text,\r\n               };\r\n            });\r\n\r\n            $viewCond\r\n               .$$(ids.inputValue)\r\n               .$$(ids.listOptions)\r\n               .define(\"options\", listOptions);\r\n            $viewCond.$$(ids.inputValue).$$(ids.listOptions).refresh();\r\n         }\r\n         // set format of datepicker\r\n         else if (field.key == \"date\") {\r\n            $viewCond\r\n               .$$(ids.inputValue)\r\n               .$$(ids.datePicker)\r\n               .define(\"format\", field.getFormat());\r\n            $viewCond.$$(ids.inputValue).$$(ids.datePicker).refresh();\r\n         }\r\n\r\n         var rule = null,\r\n            ruleViewId = $viewCond.$$(ids.rule).getActiveId(),\r\n            $viewComparer = $viewCond\r\n               .$$(ids.rule)\r\n               .queryView({ id: ruleViewId });\r\n         if ($viewComparer && $viewComparer.getList) {\r\n            let defaultOpt = ($viewComparer.getList().config.data || [])[0];\r\n            if (defaultOpt) {\r\n               $viewComparer.setValue(defaultOpt.id);\r\n            }\r\n\r\n            // rule = $viewComparer.getValue();\r\n            // if (rule == \"in_query_field\" || rule == \"not_in_query_field\") {\r\n            // \t// Show the new value inputs\r\n            // \t$viewCond.$$(ids.inputValue).showBatch(\"queryField\");\r\n            // } else if (rule == \"same_as_field\" || rule == \"not_same_as_field\") {\r\n            // \t// Show the new value inputs\r\n            // \t$viewCond.$$(ids.inputValue).showBatch(\"fieldMatch\");\r\n            // }\r\n         }\r\n\r\n         if (!ignoreNotify) _logic.onChange();\r\n      };\r\n\r\n      _logic.onChangeRule = (rule, $viewCond, notify = false) => {\r\n         switch (rule) {\r\n            case \"contains\":\r\n            case \"not_contains\":\r\n            case \"equals\":\r\n            case \"not_equal\":\r\n               // For \"connect_fields\" search by CUSTOM index value\r\n               if (batchName == \"query\") {\r\n                  $viewCond.$$(ids.inputValue).showBatch(\"string\");\r\n               }\r\n               // If want to call notify or call .onChange(), then pass notify is true.\r\n               // _logic.onChange();\r\n               break;\r\n\r\n            case \"is_current_user\":\r\n            case \"is_not_current_user\":\r\n            case \"contain_current_user\":\r\n            case \"not_contain_current_user\":\r\n            case \"same_as_user\":\r\n            case \"not_same_as_user\":\r\n            case \"less_current\":\r\n            case \"greater_current\":\r\n            case \"less_or_equal_current\":\r\n            case \"greater_or_equal_current\":\r\n            case \"is_empty\":\r\n            case \"is_not_empty\":\r\n               // clear and disable the value field\r\n               $viewCond.$$(ids.inputValue).showBatch(\"empty\");\r\n               _logic.onChange();\r\n               break;\r\n\r\n            case \"last_days\":\r\n            case \"next_days\":\r\n               // Show the number input\r\n               $viewCond.$$(ids.inputValue).showBatch(\"number\");\r\n               break;\r\n\r\n            case \"in_query_field\":\r\n            case \"not_in_query_field\":\r\n               // populate the list of Queries for this_object:\r\n               var options = [];\r\n\r\n               // Get all application's queries\r\n               this.queries(\r\n                  (q) => this._Object == null || q.id != this._Object.id\r\n               ).forEach((q) => {\r\n                  options.push({\r\n                     id: q.id,\r\n                     value: q.label,\r\n                  });\r\n               });\r\n\r\n               $viewCond\r\n                  .$$(ids.inputValue)\r\n                  .$$(ids.queryFieldComboQuery)\r\n                  .define(\"options\", options);\r\n               $viewCond\r\n                  .$$(ids.inputValue)\r\n                  .$$(ids.queryFieldComboQuery)\r\n                  .refresh();\r\n\r\n               // Show the new value inputs\r\n               $viewCond.$$(ids.inputValue).showBatch(\"queryField\");\r\n               break;\r\n\r\n            case \"same_as_field\":\r\n            case \"not_same_as_field\":\r\n               $viewCond\r\n                  .$$(ids.inputValue)\r\n                  .$$(ids.fieldMatch)\r\n                  .define(\"options\", this.recordRuleFieldOptions);\r\n               $viewCond.$$(ids.inputValue).$$(ids.fieldMatch).refresh();\r\n\r\n               // Show the new value inputs\r\n               $viewCond.$$(ids.inputValue).showBatch(\"fieldMatch\");\r\n               break;\r\n\r\n            case \"in_data_collection\":\r\n            case \"not_in_data_collection\": {\r\n               let dcOptions = [];\r\n\r\n               // pull data collection list\r\n\r\n               // get id of the link object\r\n               let linkObjectId,\r\n                  columnId = $viewCond.$$(ids.field).getValue();\r\n               if (columnId == \"this_object\" && this._Object) {\r\n                  linkObjectId = this._Object.id;\r\n               } else {\r\n                  let field = this._Fields.filter((f) => f.id == columnId)[0];\r\n                  if (field) linkObjectId = field.settings.linkObject;\r\n               }\r\n\r\n               if (this._Application && linkObjectId) {\r\n                  this._Application\r\n                     .datacollections(\r\n                        (dc) =>\r\n                           dc.datasource && dc.datasource.id == linkObjectId\r\n                     )\r\n                     .forEach((dc) => {\r\n                        dcOptions.push({\r\n                           id: dc.id,\r\n                           value: dc.label,\r\n                        });\r\n                     });\r\n               }\r\n\r\n               $viewCond\r\n                  .$$(ids.inputValue)\r\n                  .$$(ids.dataCollection)\r\n                  .define(\"options\", dcOptions);\r\n               $viewCond.$$(ids.inputValue).$$(ids.dataCollection).refresh();\r\n\r\n               // Show the new value inputs\r\n               $viewCond.$$(ids.inputValue).showBatch(\"dataCollection\");\r\n               break;\r\n            }\r\n\r\n            default:\r\n               // Show the default value inputs\r\n               $viewCond.$$(ids.inputValue).showBatch(batchName);\r\n\r\n               if (notify) _logic.onChange();\r\n\r\n               break;\r\n         }\r\n      };\r\n\r\n      _logic.onChangeQueryFieldCombo = (value, $viewCond) => {\r\n         // populate the list of Queries for this_object:\r\n         let options = [];\r\n         // Get all queries fields\r\n         let Query = this.queries((q) => {\r\n            return q.id == value;\r\n         })[0];\r\n         if (Query) {\r\n            Query.fields((f) => {\r\n               return !f.isConnection;\r\n            }).forEach((q) => {\r\n               options.push({\r\n                  id: q.id,\r\n                  value: q.object.label + \".\" + q.label,\r\n               });\r\n            });\r\n\r\n            $viewCond\r\n               .$$(ids.inputValue)\r\n               .$$(ids.queryFieldComboField)\r\n               .define(\"options\", options);\r\n            $viewCond.$$(ids.inputValue).$$(ids.queryFieldComboField).refresh();\r\n         }\r\n\r\n         // _logic.onChange();\r\n      };\r\n\r\n      _logic.onChange = () => {\r\n         if (!this.__blockOnChange) {\r\n            // refresh config settings before notify\r\n            _logic.getValue();\r\n\r\n            console.warn(\"convert RowFilter.callback.onChange() to .emit()\");\r\n            _logic.callbacks.onChange();\r\n            this.emit(\"change\");\r\n         }\r\n\r\n         return false;\r\n      };\r\n\r\n      _logic.blockOnChange = () => {\r\n         this.__blockOnChange = true;\r\n      };\r\n\r\n      _logic.unblockOnChange = () => {\r\n         this.__blockOnChange = false;\r\n      };\r\n\r\n      /**\r\n       * @method getValue\r\n       *\r\n       * @return {JSON} -\r\n       * {\r\n       * \t\tglue: '', // 'and', 'or'\r\n       *\t\trules: [\r\n       *\t\t\t{\r\n       *\t\t\t\tkey:\t'column name',\r\n       *\t\t\t\trule:\t'rule',\r\n       *\t\t\t\tvalue:\t'value'\r\n       *\t\t\t}\r\n       *\t\t]\r\n       * }\r\n       */\r\n      _logic.getValue = () => {\r\n         let config_settings = {\r\n            glue: \"and\",\r\n            rules: [],\r\n         };\r\n\r\n         var $viewForm = $$(ids.filterForm);\r\n         if ($viewForm) {\r\n            $viewForm.getChildViews().forEach(($viewCond, index) => {\r\n               if (index == 0) {\r\n                  config_settings.glue = $viewCond.$$(ids.glue).getValue();\r\n               }\r\n\r\n               var $fieldElem = $viewCond.$$(ids.field);\r\n               if (!$fieldElem) return;\r\n\r\n               /* field id */\r\n               var fieldId = $fieldElem.getValue();\r\n               if (!fieldId) return;\r\n\r\n               /* alias */\r\n               var alias;\r\n               var selectedOpt = $viewCond\r\n                  .$$(ids.field)\r\n                  .getPopup()\r\n                  .config.body.data.filter((opt) => opt.id == fieldId)[0];\r\n               if (selectedOpt) alias = selectedOpt.alias || undefined;\r\n\r\n               /* rule */\r\n               var rule = null,\r\n                  ruleViewId = $viewCond.$$(ids.rule).getActiveId(),\r\n                  $viewComparer = $viewCond\r\n                     .$$(ids.rule)\r\n                     .queryView({ id: ruleViewId });\r\n               if ($viewComparer && $viewComparer.getValue)\r\n                  rule = $viewComparer.getValue();\r\n\r\n               /* value */\r\n               var value = null,\r\n                  valueViewId = $viewCond.$$(ids.inputValue).getActiveId(),\r\n                  $viewConditionValue = $viewCond\r\n                     .$$(ids.inputValue)\r\n                     .queryView({ id: valueViewId });\r\n               if ($viewConditionValue && $viewConditionValue.getValue) {\r\n                  value = $viewConditionValue.getValue();\r\n               } else if (\r\n                  $viewConditionValue &&\r\n                  $viewConditionValue.getChildViews()\r\n               ) {\r\n                  var vals = [];\r\n                  $viewConditionValue.getChildViews().forEach((element) => {\r\n                     vals.push($$(element).getValue());\r\n                  });\r\n                  value = vals.join(\":\");\r\n               }\r\n\r\n               // Convert date format\r\n               if (value instanceof Date) {\r\n                  let dateField = this._Fields.filter(\r\n                     (f) => f.id == fieldId\r\n                  )[0];\r\n                  if (dateField) {\r\n                     value = dateField.exportValue(value);\r\n                  } else {\r\n                     value = value.toISOString();\r\n                  }\r\n               }\r\n\r\n               config_settings.rules.push({\r\n                  alias: alias || undefined,\r\n                  key: fieldId,\r\n                  rule: rule,\r\n                  value: value,\r\n               });\r\n            });\r\n         }\r\n\r\n         this.config_settings = config_settings;\r\n\r\n         return this.config_settings;\r\n      };\r\n\r\n      // webix UI definition:\r\n      this.ui = {\r\n         id: ids.component,\r\n         rows: [\r\n            {\r\n               view: \"form\",\r\n               id: ids.filterForm,\r\n               hidden: true,\r\n               elements: [],\r\n            },\r\n            _logic.getAddButtonUI(),\r\n         ],\r\n      };\r\n   }\r\n\r\n   // setting up UI\r\n   init(options = {}) {\r\n      super.init(options);\r\n\r\n      // register our callbacks:\r\n      for (var c in this._logic.callbacks) {\r\n         this._logic.callbacks[c] = options[c] || this._logic.callbacks[c];\r\n      }\r\n\r\n      if (options.showObjectName)\r\n         this._settings.showObjectName = options.showObjectName;\r\n\r\n      if (options.isRecordRule) {\r\n         this.recordRuleOptions = [\r\n            {\r\n               value: L(\"Same As Field\"),\r\n               id: \"same_as_field\",\r\n            },\r\n            {\r\n               value: L(\"Not Field\"),\r\n               id: \"not_same_as_field\",\r\n            },\r\n         ];\r\n         this.recordRuleFieldOptions = options.fieldOptions;\r\n      }\r\n   }\r\n\r\n   setValue(settings) {\r\n      settings = settings || {};\r\n\r\n      super.setValue(settings);\r\n\r\n      let ids = this.ids;\r\n      let logic = this._logic;\r\n\r\n      // block .onChange event\r\n      logic.blockOnChange();\r\n\r\n      let config_settings = this.AB.cloneDeep(settings);\r\n      config_settings.rules = config_settings.rules || [];\r\n\r\n      // Redraw form with no elements\r\n      var $viewForm = $$(ids.filterForm);\r\n      if ($viewForm) webix.ui([], $viewForm);\r\n\r\n      // Add \"new filter\" button\r\n      if (config_settings.rules.length == 0) {\r\n         logic.toggleAddNewButton();\r\n      }\r\n\r\n      config_settings.rules.forEach((f) => {\r\n         var viewId = logic.addNewFilter(),\r\n            $viewCond = $$(viewId);\r\n\r\n         if ($viewCond == null) return;\r\n\r\n         var field = this._Fields.filter((col) => col.id == f.key)[0];\r\n\r\n         // \"and\" \"or\"\r\n         $viewCond.$$(ids.glue).define(\"value\", config_settings.glue);\r\n         $viewCond.$$(ids.glue).refresh();\r\n\r\n         // Select Field\r\n         $viewCond.$$(ids.field).define(\"value\", f.key);\r\n         $viewCond.$$(ids.field).refresh();\r\n         logic.selectField(f.key, $viewCond, true);\r\n\r\n         // Comparer\r\n         var ruleViewId = $viewCond.$$(ids.rule).getActiveId(),\r\n            $viewComparer = $viewCond\r\n               .$$(ids.rule)\r\n               .queryView({ id: ruleViewId });\r\n         if ($viewComparer && $viewComparer.setValue) {\r\n            $viewComparer.define(\"value\", f.rule);\r\n            $viewComparer.refresh();\r\n         }\r\n\r\n         // if (f.rule == \"in_query_field\" || f.rule == \"not_in_query_field\" || f.rule == \"same_as_field\" || f.rule == \"not_same_as_field\") {\r\n         $viewCond.blockEvent();\r\n         logic.onChangeRule(f.rule, $viewCond);\r\n         $viewCond.unblockEvent();\r\n         // }\r\n\r\n         // Input\r\n         var valueViewId = $viewCond.$$(ids.inputValue).getActiveId(),\r\n            $viewConditionValue = $viewCond\r\n               .$$(ids.inputValue)\r\n               .queryView({ id: valueViewId });\r\n         if ($viewConditionValue && $viewConditionValue.setValue) {\r\n            // convert to Date object\r\n            if (\r\n               field &&\r\n               field.key == \"date\" &&\r\n               f.value &&\r\n               (f.rule == \"less\" ||\r\n                  f.rule == \"greater\" ||\r\n                  f.rule == \"less_or_equal\" ||\r\n                  f.rule == \"greater_or_equal\")\r\n            ) {\r\n               $viewConditionValue.define(\"value\", new Date(f.value));\r\n            } else {\r\n               $viewConditionValue.define(\"value\", f.value);\r\n            }\r\n\r\n            $viewConditionValue.refresh();\r\n         } else if (\r\n            $viewConditionValue &&\r\n            $viewConditionValue.getChildViews()\r\n         ) {\r\n            let vals = (f.value || \"\").split(\":\");\r\n            let index = 0;\r\n            $viewConditionValue.getChildViews().forEach((element) => {\r\n               $$(element).blockEvent();\r\n               $$(element).setValue(vals[index]);\r\n               if (index == 0) {\r\n                  logic.onChangeQueryFieldCombo(vals[index], $viewCond);\r\n               }\r\n               $$(element).unblockEvent();\r\n               // $$(element).refresh();\r\n               index++;\r\n            });\r\n         }\r\n\r\n         if (field && field.key == \"user\") {\r\n            $viewCond.blockEvent();\r\n            logic.onChangeRule(f.rule, $viewCond);\r\n            $viewCond.blockEvent();\r\n         }\r\n      });\r\n\r\n      // unblock .onChange event\r\n      logic.unblockOnChange();\r\n   }\r\n\r\n   /**\r\n    * @method isComplete()\r\n    * returns a truthy value representing whether or not our current condition\r\n    * expression is fully completed.  Then externally checks can be made to\r\n    * verify if the data is complete.\r\n    * @return {bool}\r\n    */\r\n   isComplete() {\r\n      if (!this._completeConditions) {\r\n         this._completeConditions = this.AB.filterComplexNew(\r\n            `${this.ids.component}_iscomplete`\r\n         );\r\n      }\r\n\r\n      return this._completeConditions.isConditionComplete(this.getValue());\r\n   }\r\n};\r\n","// const ABComponent = require(\"./ABComponent\");\r\nimport ClassUI from \"../../ui/ClassUI\";\r\nconst ABViewForm = require(\"../platform/views/ABViewForm\");\r\n\r\nvar L = null;\r\n\r\nexport default class RowUpdater extends ClassUI {\r\n   constructor(idBase, AB) {\r\n      super(idBase, {\r\n         form: `${idBase}_rowUpdaterForm`,\r\n         addNew: `${idBase}_rowUpdaterAddNew`,\r\n         field: `${idBase}_rowUpdaterField`,\r\n      });\r\n\r\n      this.idBase = idBase;\r\n\r\n      this._Object = null;\r\n      // {ABObject}\r\n      // The ABObject we are building a form for.\r\n\r\n      this._mockFormWidget = null;\r\n      // {ABViewForm}\r\n      // When building our form components to display, they need a\r\n      // ABViewForm to be associated with.\r\n\r\n      this.AB = AB;\r\n\r\n      if (!L) {\r\n         L = (...params) => {\r\n            return this.AB.Multilingual.label(...params);\r\n         };\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method uiItem()\r\n    * Return the webix description of a new field/value row.\r\n    * @return {json}\r\n    */\r\n   uiItem() {\r\n      var self = this;\r\n      return {\r\n         rows: [\r\n            {\r\n               view: \"layout\",\r\n               isolate: true,\r\n               cols: [\r\n                  {\r\n                     // Label\r\n                     view: \"label\",\r\n                     width: 40,\r\n                     label: L(\"Set\")\r\n                  },\r\n                  {\r\n                     // Field list\r\n                     view: \"combo\",\r\n                     id: this.ids.field,\r\n                     options: this.getFieldList(true),\r\n                     on: {\r\n                        onChange: function(columnId) {\r\n                           let $viewItem = this.getParentView();\r\n                           self.selectField(columnId, $viewItem);\r\n                        }\r\n                     }\r\n                  },\r\n                  {\r\n                     // Label\r\n                     view: \"label\",\r\n                     width: 40,\r\n                     label: L(\"To\")\r\n                  },\r\n                  {\r\n                     view: \"segmented\",\r\n                     value: \"custom\",\r\n                     height: 40,\r\n                     maxWidth: 160,\r\n                     options: [\r\n                        { id: \"custom\", value: L(\"Custom\") },\r\n                        { id: \"process\", value: L(\"Process\") }\r\n                     ],\r\n                     hidden:\r\n                        this._extendedOptions == null ||\r\n                        !this._extendedOptions.length,\r\n                     on: {\r\n                        onChange: function(val) {\r\n                           let $viewItem = this.getParentView();\r\n\r\n                           self.toggleCustomProcessOption(\r\n                              $viewItem,\r\n                              val == \"process\"\r\n                           );\r\n                        }\r\n                     }\r\n                  },\r\n                  // Field value\r\n                  {},\r\n                  // Extended value\r\n                  {\r\n                     hidden: true\r\n                  },\r\n                  {\r\n                     // \"Remove\" button\r\n                     view: \"button\",\r\n                     css: \"webix_danger\",\r\n                     icon: \"fa fa-trash\",\r\n                     type: \"icon\",\r\n                     autowidth: true,\r\n\r\n                     click: function() {\r\n                        let $viewCond = this.getParentView().getParentView();\r\n\r\n                        self.removeItem($viewCond);\r\n                     }\r\n                  },\r\n               ]\r\n            },\r\n         ],\r\n      };\r\n   }\r\n\r\n   /**\r\n    * @method ui()\r\n    * return the webix description of our Entry form.\r\n    * @return {json}\r\n    */\r\n   ui() {\r\n      // webix UI definition:\r\n      return {\r\n         rows: [\r\n            {\r\n               view: \"form\",\r\n               id: this.ids.form,\r\n               hidden: true,\r\n               borderless: true,\r\n               elements: [],\r\n            },\r\n            {\r\n               view: \"button\",\r\n               id: this.ids.addNew,\r\n               icon: \"fa fa-plus\",\r\n               type: \"iconButton\",\r\n               label: L(\"Add field to edit\"),\r\n               click: () => {\r\n                  this.addItem();\r\n               },\r\n            },\r\n         ],\r\n      };\r\n   }\r\n\r\n   init(/* AB */) {\r\n      return Promise.resolve();\r\n   }\r\n\r\n   /**\r\n    * @method addItem()\r\n    * Add another field/value entry item to our form.\r\n    * @param {integer} index\r\n    *        which position in the list of form elements do we want to\r\n    *        insert the new row.\r\n    * @return {string} the webix .id of the new row we just added.\r\n    */\r\n   addItem(index) {\r\n      let $form = $$(this.ids.form);\r\n\r\n      let remainFields = this.getFieldList(true);\r\n      if (remainFields.length < 1) return;\r\n\r\n      let ui = this.uiItem();\r\n\r\n      let viewId = $form.addView(ui, index);\r\n\r\n      this.toggleForm();\r\n\r\n      return viewId;\r\n   }\r\n\r\n   /**\r\n    * @method getFieldList()\r\n    * Return an array of options in a webix.list format that represents the\r\n    * possible fields that can be selected on the current ABObject.\r\n    * @param {bool} excludeSelected\r\n    *        should we exclude from the list the fields that are ALREADY\r\n    *        displayed on the form?\r\n    * @return {array} [ { id, value }, ... ]\r\n    *         id: ABField.id\r\n    *         value: ABField.label\r\n    */\r\n   getFieldList(excludeSelected) {\r\n      let options = (this._Object.fields() || []).map((f) => {\r\n         return {\r\n            id: f.id,\r\n            value: f.label,\r\n         };\r\n      });\r\n\r\n      if (excludeSelected) {\r\n         let $form = $$(this.ids.form);\r\n\r\n         $form.getChildViews().forEach(($viewCond) => {\r\n            // Ignore \"Add new\" button\r\n            if (!$viewCond || !$viewCond.$$) return;\r\n\r\n            let $fieldElem = $viewCond.$$(this.ids.field);\r\n            if (!$fieldElem) return;\r\n\r\n            let fieldId = $fieldElem.getValue();\r\n            if (!fieldId) return;\r\n\r\n            options = options.filter((opt) => opt.id != fieldId);\r\n         });\r\n      }\r\n      return options;\r\n   }\r\n\r\n   /**\r\n    * @method getValue\r\n    * Return an array of field:value results that have been entered on this\r\n    * form.\r\n    * @return {Array}\r\n    *         [\r\n    *            {\r\n    *               fieldId: {UUID}\r\n    *               isProcessValue: {Boolean} - If it is true, then value is from Process parameter\r\n    *               value: {Object}\r\n    *            },\r\n    *            ...\r\n    *         ]\r\n    */\r\n   getValue() {\r\n      let result = [];\r\n\r\n      let $form = $$(this.ids.form);\r\n      if ($form) {\r\n         $form.getChildViews().forEach(($viewContainer) => {\r\n            let $viewItem = $viewContainer.getChildViews()[0];\r\n\r\n            // Ignore \"Add new\" button\r\n            if (!$viewItem || !$viewItem.$$) return;\r\n\r\n            let $fieldElem = $viewItem.$$(this.ids.field);\r\n            if (!$fieldElem) return;\r\n\r\n            let fieldId = $fieldElem.getValue();\r\n            if (!fieldId) return;\r\n\r\n            let $customValueElem = $viewItem.getChildViews()[4];\r\n            let $processValueElem = $viewItem.getChildViews()[5];\r\n            if (!$customValueElem && !$processValueElem) return;\r\n\r\n            let fieldInfo = this._Object.fieldByID(fieldId);\r\n\r\n            let val = {\r\n               fieldId: fieldId\r\n            };\r\n\r\n            // Custom value\r\n            if ($customValueElem && $customValueElem.isVisible()) {\r\n               if (fieldInfo.key == \"connectObject\") {\r\n                  val.value = fieldInfo.getValue(\r\n                     $customValueElem.getChildViews()[0]\r\n                  );\r\n               } else if (\r\n                  fieldInfo.key == \"date\" ||\r\n                  fieldInfo.key == \"datetime\"\r\n               ) {\r\n                  let currDateCheckbox = $customValueElem.getChildViews()[0];\r\n                  if (currDateCheckbox.getValue() == true) {\r\n                     val.value = \"ab-current-date\";\r\n                  } else {\r\n                     let datePicker = $customValueElem.getChildViews()[1];\r\n                     val.value = fieldInfo.getValue(datePicker);\r\n                  }\r\n               } else {\r\n                  // Get value from data field manager\r\n                  val = fieldInfo.getValue($customValueElem);\r\n               }\r\n            }\r\n            // Process value\r\n            else if ($processValueElem && $processValueElem.isVisible()) {\r\n               val.isProcessValue = true;\r\n               val.value = $processValueElem.getValue();\r\n            }\r\n\r\n            // Add to output\r\n            result.push(val);\r\n         });\r\n      }\r\n\r\n      return result;\r\n   }\r\n\r\n   /**\r\n    * @method objectLoad\r\n    * Load the Object we are currently working with.\r\n    * @param {ABObject} object\r\n    */\r\n   objectLoad(object) {\r\n      this._Object = object;\r\n\r\n      this._mockApp = this.AB.applicationNew({});\r\n      this._mockFormWidget = new ABViewForm(\r\n         {\r\n            settings: {\r\n               showLabel: false,\r\n               labelWidth: 0,\r\n            },\r\n         },\r\n         this._mockApp // just need any ABApplication here\r\n      );\r\n      this._mockFormWidget.objectLoad(object);\r\n\r\n      this.setValue(null); // clear\r\n   }\r\n\r\n   /**\r\n    * @method removeItem\r\n    * Remove the current form row.\r\n    * @param {webix.view} $viewCond\r\n    *        This is the webix.view that contains the whole value row\r\n    *        we are removing.\r\n    */\r\n   removeItem($viewCond) {\r\n      let $form = $$(this.ids.form);\r\n      $form.removeView($viewCond);\r\n      this.toggleForm();\r\n   }\r\n\r\n   /**\r\n    * @method selectField\r\n    * Update the value display when a field is selected. Changing to a\r\n    * different field will change the types of values that can be entered.\r\n    * @param {string} columnId\r\n    *        The field.uuid of the object that was selected.\r\n    * @param {webix.view} $viewItem\r\n    *        The webix.view that contains the value expression of the field\r\n    *        that was selected.\r\n    */\r\n   async selectField(columnId, $viewItem) {\r\n      let field = this._Object.fieldByID(columnId);\r\n      if (!field) {\r\n         this.AB.notify.builder(\r\n            new Error(`could not find field for id[${columnId}]`),\r\n            {\r\n               context: \"RowUpdater.selectField() could not find a field\",\r\n               fieldID: columnId,\r\n            }\r\n         );\r\n         return;\r\n      }\r\n      let fieldComponent = field.formComponent(),\r\n         formFieldWidget = fieldComponent.newInstance(\r\n            this._mockApp,\r\n            this._mockFormWidget\r\n         ),\r\n         formFieldComponent = formFieldWidget.component(\r\n            this.AB._App,\r\n            this.idBase\r\n         ),\r\n         inputView = formFieldComponent.ui;\r\n\r\n      // WORKAROUND: add '[Current User]' option to the user data field\r\n      switch (field.key) {\r\n         case \"connectObject\":\r\n            {\r\n               const options = (await field.getOptions()) ?? [];\r\n               const $combo = inputView.rows[0];\r\n               $combo.suggest.body.data = options;\r\n            }\r\n            break;\r\n         case \"user\":\r\n            inputView.options = inputView.options || [];\r\n            inputView.options.unshift({\r\n               id: \"ab-current-user\",\r\n               value: L(\"[Current User]\"),\r\n            });\r\n            break;\r\n         case \"date\":\r\n         case \"datetime\":\r\n            inputView = {\r\n               view: \"layout\",\r\n               rows: [\r\n                  {\r\n                     view: \"checkbox\",\r\n                     labelWidth: 0,\r\n                     labelRight: L(\"Current Date/Time\"),\r\n                     on: {\r\n                        onChange: function (newVal) {\r\n                           let layout = this.getParentView();\r\n                           if (!layout) return;\r\n\r\n                           let datePicker = layout.getChildViews()[1];\r\n                           if (!datePicker) return;\r\n\r\n                           newVal ? datePicker.hide() : datePicker.show();\r\n                        },\r\n                     },\r\n                  },\r\n                  inputView,\r\n               ],\r\n            };\r\n            break;\r\n      }\r\n\r\n      let childViews = $viewItem.getChildViews();\r\n\r\n      // Change component to display value\r\n      $viewItem.removeView(childViews[4]);\r\n      $viewItem.addView(inputView, 4);\r\n\r\n      formFieldComponent.init();\r\n\r\n      // Show custom display of data field\r\n      if (field.customDisplay)\r\n         field.customDisplay({}, this.AB._App, childViews[4].$view);\r\n\r\n      // Add extended value options\r\n      $viewItem.removeView(childViews[5]);\r\n      if (this._extendedOptions && this._extendedOptions.length) {\r\n         $viewItem.addView(\r\n            {\r\n               view: \"richselect\",\r\n               options: this._extendedOptions,\r\n               hidden: true\r\n            },\r\n            5\r\n         );\r\n      } else {\r\n         $viewItem.addView(\r\n            {\r\n               hidden: true\r\n            },\r\n            5\r\n         );\r\n      }\r\n\r\n      this.toggleCustomProcessOption(\r\n         $viewItem,\r\n         childViews[3].getValue() == \"process\"\r\n      );\r\n\r\n      // _logic.refreshFieldList();\r\n      // $$(this).adjust();\r\n      $$($viewItem).adjust();\r\n      $viewItem.getFormView().adjust();\r\n   }\r\n\r\n   /**\r\n    * @method setValue\r\n    * Given the previous settings, redraw the form with the field/value\r\n    * entries.\r\n    * @param {array} settings\r\n    *        [\r\n    *           {\r\n    *              fieldId: {UUID}\r\n    *              value: {Object|String}\r\n    *           }, ...\r\n    *        ]\r\n    */\r\n   setValue(settings) {\r\n      let $form = $$(this.ids.form);\r\n      if (!$form) return;\r\n\r\n      // Redraw form with no elements\r\n      webix.ui([], $form);\r\n\r\n      settings = settings || [];\r\n      if (settings.length < 1) return;\r\n\r\n      settings.forEach((item) => {\r\n         let $viewContainer = $$(this.addItem());\r\n         let $viewItem = $viewContainer.getChildViews()[0];\r\n\r\n         $viewItem.$$(this.ids.field).setValue(item.fieldId);\r\n         let $valueTypeButton = $viewItem.queryView(\r\n            { view: \"segmented\" },\r\n            \"self\"\r\n         );\r\n         $valueTypeButton.setValue(\r\n            item.isProcessValue ? \"process\" : \"custom\"\r\n         );\r\n\r\n         let $customValueElem = $viewItem.getChildViews()[4];\r\n         let $processValueElem = $viewItem.getChildViews()[5];\r\n         if (!$customValueElem && !$processValueElem) return;\r\n\r\n         let fieldInfo = this._Object.fieldByID(item.fieldId);\r\n         if (!fieldInfo) return;\r\n\r\n         // Set custom value\r\n         let rowData = {};\r\n         rowData[fieldInfo.columnName] = item.value;\r\n         fieldInfo.setValue($customValueElem, rowData);\r\n\r\n         // Set process value\r\n         $processValueElem.setValue(item.value);\r\n      });\r\n\r\n      this.toggleForm();\r\n   }\r\n\r\n   /**\r\n    * @method toggleForm\r\n    * decide if the form with the field/value elements should be displayed.\r\n    */\r\n   toggleForm() {\r\n      let $form = $$(this.ids.form);\r\n      if ($form) {\r\n         let childViews = $form.getChildViews();\r\n         if (childViews && childViews.length) {\r\n            $form.show();\r\n         } else {\r\n            $form.hide();\r\n         }\r\n         $form.adjust();\r\n      }\r\n   }\r\n\r\n   setExtendedOptions(options) {\r\n      this._extendedOptions = options;\r\n   }\r\n\r\n   toggleCustomProcessOption($viewItem, showProcessOption) {\r\n      let $customOption = $viewItem.getChildViews()[4];\r\n      let $processOption = $viewItem.getChildViews()[5];\r\n\r\n      if (showProcessOption) {\r\n         $customOption.hide();\r\n         $processOption.show();\r\n      } else {\r\n         $customOption.show();\r\n         $processOption.hide();\r\n      }\r\n   }\r\n}\r\n","/*\r\n * ABField\r\n *\r\n * An ABField defines a single unique Field/Column in a ABObject.\r\n *\r\n */\r\n\r\nconst ABFieldCore = require(\"../../core/dataFields/ABFieldCore\");\r\n\r\nconst L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABField extends ABFieldCore {\r\n   constructor(values, object, fieldDefaults) {\r\n      super(values, object, fieldDefaults);\r\n\r\n      this.AB.on(\"ab.abdefinition.update\", (def) => {\r\n         if (def.id == this.id) {\r\n            this.emit(\"definition.updated\", this);\r\n         }\r\n      });\r\n\r\n      //  \t// NOTE: setup this first so later we can use .fieldType(), .fieldIcon()\r\n      //  \tthis.defaults = fieldDefaults;\r\n\r\n      // \t{\r\n      // \t\tid:'uuid',\t\t\t\t\t// uuid value for this obj\r\n      // \t\tkey:'fieldKey',\t\t\t\t// unique key for this Field\r\n      // \t\ticon:'font',\t\t\t\t// fa-[icon] reference for an icon for this Field Type\r\n      // \t\tlabel:'',\t\t\t\t\t// pulled from translation\r\n      // \t\tcolumnName:'column_name',\t// a valid mysql table.column name\r\n      //\t\tsettings: {\t\t\t\t\t// unique settings for the type of field\r\n      // \t\t\tshowIcon:true/false,\t// only useful in Object Workspace DataTable\r\n      // \t\t\tisImported: 1/0,\t\t// flag to mark is import from other object\r\n      // \t\t\trequired: 1/0,\t\t\t// field allows does not allow NULL or it does allow NULL\r\n      // \t\t\twidth: {int}\t\t\t// width of display column\r\n\r\n      // \t\t// specific for dataField\r\n      // \t\t},\r\n      // \t\ttranslations:[]\r\n      // \t}\r\n\r\n      // \tthis.fromValues(values);\r\n\r\n      // this.object = object;\r\n   }\r\n\r\n   ///\r\n   /// Static Methods\r\n   ///\r\n   /// Available to the Class level object.  These methods are not dependent\r\n   /// on the instance values of the Application.\r\n   ///\r\n\r\n   static clearEditor(ids) {\r\n      this._CurrentField = null;\r\n\r\n      const defaultValues = {\r\n         label: \"\",\r\n         columnName: \"\",\r\n         showIcon: 1,\r\n         required: 0,\r\n         unique: 0,\r\n         validationRules: \"\",\r\n      };\r\n\r\n      for (const f in defaultValues) {\r\n         const component = $$(ids[f]);\r\n         if (component) component.setValue(defaultValues[f]);\r\n      }\r\n\r\n      // reset the validation rules UI\r\n      const filterViews = $$(ids.filterComplex).queryView(\r\n         {\r\n            view: \"form\",\r\n            css: \"abValidationForm\",\r\n         },\r\n         \"all\"\r\n      );\r\n      if (filterViews.length) {\r\n         filterViews.forEach((v) => {\r\n            $$(ids.filterComplex).removeView(v);\r\n         });\r\n      }\r\n\r\n      $$(ids.addValidation).hide();\r\n\r\n      // hide warning message of null data\r\n      $$(ids.numberOfNull).hide();\r\n   }\r\n\r\n   /**\r\n    * @function editorPopulate\r\n    *\r\n    * populate the form with the given ABField instance provided.\r\n    *\r\n    * @param {object} ids\r\n    * @param {ABField} field\r\n    */\r\n   static editorPopulate(ids, field) {\r\n      this._CurrentField = field;\r\n\r\n      $$(ids.label).setValue(field.label);\r\n      $$(ids.columnName).setValue(field.columnName);\r\n      $$(ids.showIcon).setValue(field.settings.showIcon);\r\n      $$(ids.required).setValue(field.settings.required);\r\n      $$(ids.unique).setValue(field.settings.unique);\r\n\r\n      if (this._CurrentField) {\r\n         $$(ids.addValidation).show();\r\n      }\r\n\r\n      if (field.settings && field.settings.validationRules) {\r\n         let rules = field.settings.validationRules;\r\n         if (typeof rules == \"string\") {\r\n            try {\r\n               rules = JSON.parse(rules);\r\n            } catch (e) {\r\n               // continue regardless of error\r\n            }\r\n         }\r\n         (rules || []).forEach((settings) => {\r\n            field.addValidation(ids, settings);\r\n         });\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @function definitionEditor\r\n    *\r\n    * Many DataFields share some base information for their usage\r\n    * in the AppBuilder.  The UI Editors have a common header\r\n    * and footer format, and this function allows child DataFields\r\n    * to not have to define those over and over.\r\n    *\r\n    * The common layout header contains:\r\n    *\t\t[Menu Label]\r\n    *\t\t[textBox: labelName]\r\n    *\t\t[text:    description]\r\n    *\r\n    * The defined DataField UI will be added at the end of this.\r\n    *\r\n    * This routine actually updated the live DataField definition\r\n    * with the common header info.\r\n    *\r\n    * @param {DataField} field  The DataField object to work with.\r\n    */\r\n   static definitionEditor(App, ids, _logic, Field) {\r\n      /// TODO: maybe just pass in onChange instead of _logic\r\n      /// if not onChange, then use our default:\r\n\r\n      // setup our default labelOnChange functionality:\r\n      let labelOnChange = function (newVal, oldVal) {\r\n         oldVal = oldVal || \"\";\r\n\r\n         if (\r\n            newVal != oldVal &&\r\n            oldVal == $$(ids.columnName).getValue() &&\r\n            $$(ids.columnName).isEnabled()\r\n         ) {\r\n            $$(ids.columnName).setValue(newVal);\r\n         }\r\n      };\r\n\r\n      // if they provided a labelOnChange() override, use that:\r\n      if (_logic.labelOnChange) {\r\n         labelOnChange = _logic.labelOnChange;\r\n      }\r\n\r\n      let requiredOnChange = function (newVal, oldVal, ids) {\r\n         console.warn(\r\n            \"Field has not implemented .requiredOnChange() is that okay?\"\r\n         );\r\n      };\r\n\r\n      const addValidation = (ids) => {\r\n         return this._CurrentField.addValidation(ids);\r\n      };\r\n\r\n      // if the provided a requriedOnChange() override, use that:\r\n      if (_logic.requiredOnChange) {\r\n         requiredOnChange = _logic.requiredOnChange;\r\n      }\r\n\r\n      const getNumberOfNullValue = async (isRequired) => {\r\n         if (\r\n            isRequired &&\r\n            this._CurrentField &&\r\n            this._CurrentField.id &&\r\n            this._CurrentField.settings.required != isRequired\r\n         ) {\r\n            // TODO: disable save button\r\n\r\n            // get count number\r\n            const data = await this._CurrentField.object.model().count({\r\n               where: {\r\n                  glue: \"and\",\r\n                  rules: [\r\n                     {\r\n                        key: this._CurrentField.id,\r\n                        rule: \"is_null\",\r\n                     },\r\n                  ],\r\n               },\r\n            });\r\n\r\n            if (data.count > 0) {\r\n               const messageTemplate = L(\r\n                  \"** There are {0} rows that will be updated to default value\",\r\n                  [data.count]\r\n               );\r\n\r\n               $$(ids.numberOfNull).setValue(messageTemplate);\r\n               $$(ids.numberOfNull).show();\r\n            } else {\r\n               $$(ids.numberOfNull).hide();\r\n            }\r\n\r\n            // TODO: enable save button\r\n         } else {\r\n            $$(ids.numberOfNull).hide();\r\n         }\r\n      };\r\n\r\n      const _ui = {\r\n         // id: ids.component,\r\n         rows: [\r\n            // {\r\n            // \tview: \"label\",\r\n            // \tlabel: \"<span class='webix_icon fa fa-{0}'></span>{1}\".replace('{0}', Field.icon).replace('{1}', Field.menuName)\r\n            // },\r\n            {\r\n               view: \"text\",\r\n               id: ids.label,\r\n               name: \"label\",\r\n               label: L(\"Label\"),\r\n               placeholder: L(\"Label\"),\r\n               labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n               css: \"ab-new-label-name\",\r\n               on: {\r\n                  onChange: function (newVal, oldVal) {\r\n                     labelOnChange(newVal, oldVal);\r\n                  },\r\n               },\r\n            },\r\n            {\r\n               view: \"text\",\r\n               id: ids.columnName,\r\n               name: \"columnName\",\r\n               disallowEdit: true,\r\n               label: L(\"Field Name\"),\r\n               labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n               placeholder: L(\"Database field name\"),\r\n            },\r\n            {\r\n               view: \"label\",\r\n               id: ids.fieldDescription,\r\n               label: L(\"Description\"),\r\n               align: \"right\",\r\n            },\r\n            {\r\n               view: \"checkbox\",\r\n               id: ids.showIcon,\r\n               name: \"showIcon\",\r\n               labelRight: App.labels.dataFieldShowIcon, // 'Show icon',\r\n               labelWidth: this.AB.UISettings.config().labelWidthCheckbox,\r\n               value: true,\r\n            },\r\n            {\r\n               view: \"checkbox\",\r\n               id: ids.required,\r\n               name: \"required\",\r\n               hidden: !Field.supportRequire,\r\n               labelRight: App.labels.required,\r\n               // disallowEdit: true,\r\n               labelWidth: this.AB.UISettings.config().labelWidthCheckbox,\r\n               on: {\r\n                  onChange: async (newVal, oldVal) => {\r\n                     requiredOnChange(newVal, oldVal, ids);\r\n\r\n                     // If check require on edit field, then show warning message\r\n                     await getNumberOfNullValue(newVal);\r\n                  },\r\n               },\r\n            },\r\n            // warning message: number of null value rows\r\n            {\r\n               view: \"label\",\r\n               id: ids.numberOfNull,\r\n               css: { color: \"#f00\" },\r\n               label: \"\",\r\n               hidden: true,\r\n            },\r\n\r\n            {\r\n               view: \"checkbox\",\r\n               id: ids.unique,\r\n               name: \"unique\",\r\n               hidden: !Field.supportUnique,\r\n               labelRight: App.labels.unique,\r\n               disallowEdit: true,\r\n               labelWidth: this.AB.UISettings.config().labelWidthCheckbox,\r\n            },\r\n            {\r\n               id: ids.filterComplex,\r\n               rows: [],\r\n            },\r\n            {\r\n               id: ids.addValidation,\r\n               view: \"button\",\r\n               label: L(\"Add Field Validation\"),\r\n               css: \"webix_primary\",\r\n               click: () => {\r\n                  addValidation(ids);\r\n               },\r\n            },\r\n            // have a hidden field to contain the validationRules\r\n            // value we will parse out later\r\n            {\r\n               id: ids.validationRules,\r\n               view: \"text\",\r\n               hidden: true,\r\n               name: \"validationRules\",\r\n            },\r\n         ],\r\n      };\r\n\r\n      return _ui;\r\n   }\r\n\r\n   static editorValues(settings) {\r\n      const obj = {\r\n         label: settings.label,\r\n         columnName: settings.columnName,\r\n         settings: settings,\r\n      };\r\n\r\n      delete settings.label;\r\n      delete settings.columnName;\r\n\r\n      return obj;\r\n   }\r\n\r\n   addValidation(ids, settings) {\r\n      const App = this.object.application.App;\r\n      const Filter = this.AB.filterComplexNew(\r\n         `${this.id}_field_validation_rules`\r\n      );\r\n      $$(ids.filterComplex).addView({\r\n         view: \"form\",\r\n         css: \"abValidationForm\",\r\n         cols: [\r\n            {\r\n               rows: [\r\n                  {\r\n                     view: \"text\",\r\n                     name: \"invalidMessage\",\r\n                     labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n                     value:\r\n                        settings && settings.invalidMessage\r\n                           ? settings.invalidMessage\r\n                           : \"\",\r\n                     label: L(\"Invalid Message\"),\r\n                  },\r\n                  Filter.ui,\r\n               ],\r\n            },\r\n            {\r\n               view: \"button\",\r\n               css: \"webix_danger\",\r\n               icon: \"fa fa-trash\",\r\n               type: \"icon\",\r\n               autowidth: true,\r\n               click: function () {\r\n                  const $viewCond = this.getParentView();\r\n                  $$(ids.filterComplex).removeView($viewCond);\r\n               },\r\n            },\r\n         ],\r\n      });\r\n      $$(Filter.ids.save).hide();\r\n      // Filter.applicationLoad(this.object.application);\r\n      Filter.fieldsLoad(this.object.fields());\r\n      if (settings && settings.rules) Filter.setValue(settings.rules);\r\n   }\r\n\r\n   /*\r\n    * @method isValid\r\n    * check the current values to make sure they are valid.\r\n    * Here we check the default values provided by ABField.\r\n    *\r\n    * @return null or [{OP.Validation.validator()}] objects.\r\n    */\r\n   isValid() {\r\n      const validator = this.AB.Validation.validator();\r\n\r\n      // .columnName must be unique among fileds on the same object\r\n      const isNameUnique =\r\n         this.object.fields((f) => {\r\n            return (\r\n               f.id != this.id &&\r\n               f.columnName.toLowerCase() == this.columnName.toLowerCase()\r\n            );\r\n         }).length == 0;\r\n      if (!isNameUnique) {\r\n         validator.addError(\r\n            \"columnName\",\r\n            L(\r\n               \"Field columnName must be unique ({0} already used in this Application)\",\r\n               [this.columnName]\r\n            )\r\n         );\r\n      }\r\n\r\n      return validator;\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /// ABApplication data methods\r\n\r\n   /**\r\n    * @method destroy()\r\n    *\r\n    * destroy the current instance of ABApplication\r\n    *\r\n    * also remove it from our _AllApplications\r\n    *\r\n    * @return {Promise}\r\n    */\r\n   async destroy() {\r\n      // verify we have been .save() before:\r\n      if (!this.id) return;\r\n\r\n      // NOTE: our .migrateXXX() routines expect the object to currently exist\r\n      // in the DB before we perform the DB operations.  So we need to\r\n      // .migrateDrop()  before we actually .objectDestroy() this.\r\n      await this.migrateDrop();\r\n\r\n      // the server still references an ABField in relationship to it's\r\n      // ABObject, so we need to destroy the Field 1st, then remove it\r\n      // from it's object.\r\n      await super.destroy();\r\n\r\n      await this.object.fieldRemove(this);\r\n   }\r\n\r\n   /**\r\n    * @method save()\r\n    *\r\n    * persist this instance of ABField with it's parent ABObject\r\n    *\r\n    *\r\n    * @return {Promise}\r\n    *\t\t\t\t\t\t.resolve( {this} )\r\n    */\r\n   async save() {\r\n      let isAdd = false;\r\n      // if this is our initial save()\r\n      if (!this.id) {\r\n         isAdd = true;\r\n      }\r\n\r\n      // Whenever we update our settings, make sure any\r\n      // existing rows that have NULL values for this field\r\n      // are updated to have our current .default value.\r\n      if (!isAdd && this.settings.required && this.settings.default) {\r\n         const model = this.object.model();\r\n\r\n         // pull rows that has null value\r\n         const result = await model.findAll({\r\n            where: {\r\n               glue: \"and\",\r\n               rules: [\r\n                  {\r\n                     key: this.id,\r\n                     rule: \"is_null\",\r\n                  },\r\n               ],\r\n            },\r\n         });\r\n\r\n         const tasks = [];\r\n\r\n         // updating ...\r\n         result.data.forEach((d) => {\r\n            if (!d[this.columnName]) d[this.columnName] = this.settings.default;\r\n\r\n            tasks.push(model.update(d.id, d));\r\n         });\r\n\r\n         await Promise.all(tasks);\r\n      }\r\n\r\n      // New ABDefinition method of saving:\r\n      // when this is done, we now have an .id\r\n      await super.save();\r\n\r\n      // incase this was an ADD operation, make sure the\r\n      // parent Obj now includes this object:\r\n      // NOTE: must be done after the .save() so we have an .id\r\n      await this.object.fieldAdd(this);\r\n\r\n      // perform any server side migrations for this Field:\r\n\r\n      // but not connectObject fields:\r\n      // ABFieldConnect.migrateXXX() gets called from the UI popupNewDataField\r\n      // in order to handle the timings of the 2 fields that need to be created\r\n      if (!this.isConnection) {\r\n         const fnMigrate = isAdd ? this.migrateCreate() : this.migrateUpdate();\r\n         await fnMigrate;\r\n      }\r\n\r\n      return this;\r\n   }\r\n\r\n   ///\r\n   /// DB Migrations\r\n   ///\r\n\r\n   migrateCreate() {\r\n      return this.AB.Network.post({\r\n         url: `/definition/migrate/object/${this.object.id}/field/${this.id}`,\r\n      });\r\n   }\r\n\r\n   migrateUpdate() {\r\n      return this.AB.Network.put({\r\n         url: `/definition/migrate/object/${this.object.id}/field/${this.id}`,\r\n      });\r\n   }\r\n\r\n   migrateDrop() {\r\n      return this.AB.Network[\"delete\"]({\r\n         url: `/definition/migrate/object/${this.object.id}/field/${this.id}`,\r\n      });\r\n   }\r\n\r\n   ///\r\n   /// Working with Actual Object Values:\r\n   ///\r\n\r\n   /**\r\n    * @function columnHeader\r\n    * Return the column header for a webix grid component for this specific\r\n    * data field.\r\n    * @param {Object} options\r\n    * {\r\n    *    isObjectWorkspace: {bool},  is this being used in the Object workspace.\r\n    *    width: {int},\r\n    *    height: {int},\r\n    *    editable: {bool}\r\n    * }\r\n    * @return {obj}  configuration obj\r\n    */\r\n   columnHeader(options) {\r\n      options = options || {};\r\n\r\n      const config = {\r\n         id: this.columnName, // this.id,\r\n         header: this.label,\r\n      };\r\n\r\n      if (options.isObjectWorkspace && this.settings.showIcon) {\r\n         config.header = `<span class=\"webix_icon fa fa-${this.fieldIcon()}\"></span>${\r\n            config.header\r\n         }`;\r\n      }\r\n\r\n      return config;\r\n   }\r\n\r\n   /*\r\n    * @function customDisplay\r\n    * perform any custom display modifications for this field.  If this isn't\r\n    * a standard value display (think image, Map, graph, etc...) then use this\r\n    * method to create the display in the table/grid cell.\r\n    * @param {object} row\r\n    *        is the {name=>value} hash of the current row of data.\r\n    * @param {App} App\r\n    *        the shared ui App object useful more making globally\r\n    *\t\t\t unique id references.\r\n    * @param {HtmlDOM} node\r\n    *        the HTML Dom object for this field's display.\r\n    * @param {object} options\r\n    *        option of additional settings\r\n    */\r\n   customDisplay(row, App, node, options) {}\r\n\r\n   /*\r\n    * @function customEdit\r\n    *\r\n    *\r\n    *\r\n    * @param {object} row is the {name=>value} hash of the current row of data.\r\n    * @param {App} App the shared ui App object useful more making globally\r\n    *\t\t\t\t\tunique id references.\r\n    * @param {HtmlDOM} node  the HTML Dom object for this field's display.\r\n    */\r\n   customEdit(row, App, node) {\r\n      return true;\r\n   }\r\n\r\n   /**\r\n    * @method getValue\r\n    * this function uses for form component and mass update popup\r\n    * to get value of fields that apply custom editor\r\n    *\r\n    * @param {Object} item - Webix element\r\n    * @param {Object} rowData - data of row\r\n    *\r\n    * @return {Object}\r\n    */\r\n   getValue(item, rowData) {\r\n      return item.getValue();\r\n   }\r\n\r\n   /**\r\n    * @method setValue\r\n    * this function uses for form component and mass update popup\r\n    * to get value of fields that apply custom editor\r\n    *\r\n    * @param {Object} item - Webix element\r\n    * @param {Object} rowData - data of row\r\n    *\r\n    */\r\n   setValue(item, rowData, defaultValue) {\r\n      if (!item) return;\r\n\r\n      let val;\r\n\r\n      if (\r\n         (rowData == null || rowData[this.columnName] == null) &&\r\n         defaultValue != null\r\n      ) {\r\n         val = defaultValue;\r\n      } else if (rowData && rowData[this.columnName] != null) {\r\n         val = rowData[this.columnName];\r\n      } else {\r\n         val = rowData;\r\n      }\r\n\r\n      item.setValue(val);\r\n   }\r\n\r\n   /**\r\n    * @method formComponent\r\n    * returns a drag and droppable component that is used on the UI\r\n    * interface builder to place form components related to this ABField.\r\n    *\r\n    * an ABField defines which form component is used to edit it's contents.\r\n    * However, what is returned here, needs to be able to create an instance of\r\n    * the component that will be stored with the ABViewForm.\r\n    */\r\n   formComponent(formKey) {\r\n      // NOTE: what is being returned here needs to mimic an ABView CLASS.\r\n      // primarily the .common() and .newInstance() methods.\r\n\r\n      return {\r\n         // .common() is used to create the display in the list\r\n         common: () => {\r\n            return {\r\n               key: formKey,\r\n\r\n               // // but since this is a common place holder: use the\r\n               // // multilingual label here:\r\n               // labelKey: 'ab.abfield.labelPlaceholder',\r\n               // icon:  'square'\r\n            };\r\n         },\r\n\r\n         // .newInstance() is used to create the view instance when the component\r\n         // \t\tis dropped onto the ABView list.\r\n         newInstance: (application, parent) => {\r\n            // NOTE: in case you were wondering, the base ABField\r\n            // \t\t will just return a label with 'ABFieldPlaceholder'\r\n            // \t\t as the text.  Any sub class of ABField should overwrite\r\n            // \t\t this and return an actual Form Component.\r\n\r\n            // store object id and field id to field component\r\n            const values = this.formComponent().common();\r\n            values.settings = values.settings || {};\r\n            values.settings.objectId = this.object.id;\r\n            values.settings.fieldId = this.id;\r\n\r\n            const ABFieldPlaceholder = application.viewNew(\r\n               values,\r\n               application,\r\n               parent\r\n            ); // ABViewManager.newView(values, application, parent);\r\n            // ABFieldPlaceholder.formatTitle();\r\n            // ABFieldPlaceholder.text = \"ABFieldPlaceholder\";\r\n\r\n            return ABFieldPlaceholder;\r\n         },\r\n      };\r\n   }\r\n\r\n   /**\r\n    * @method detailComponent\r\n    */\r\n   detailComponent() {\r\n      return {\r\n         common: () => {\r\n            return {\r\n               icon: \"square\",\r\n            };\r\n         },\r\n\r\n         // .newInstance() is used to create the view instance when the component\r\n         // \t\tis dropped onto the ABView list.\r\n         newInstance: (application, parent) => {\r\n            // store object id and field id to field component\r\n            const values = this.detailComponent().common();\r\n            values.settings = values.settings || {};\r\n            values.settings.objectId = this.object.id;\r\n            values.settings.fieldId = this.id;\r\n\r\n            const ABFieldPlaceholder = application.viewNew(\r\n               values,\r\n               application,\r\n               parent\r\n            ); // ABViewManager.newView(values, application, parent);\r\n\r\n            return ABFieldPlaceholder;\r\n         },\r\n      };\r\n   }\r\n};\r\n","const ABFieldAutoIndexCore = require(\"../../core/dataFields/ABFieldAutoIndexCore\");\r\n\r\nmodule.exports = class ABFieldAutoIndex extends ABFieldAutoIndexCore {\r\n   // constructor(values, object) {\r\n   //    super(values, object);\r\n   // }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   isValid() {\r\n      const validator = super.isValid();\r\n\r\n      // validator.addError('columnName', L('ab.validation.object.name.unique', 'Field columnName must be unique (#name# already used in this Application)').replace('#name#', this.name) );\r\n\r\n      return validator;\r\n   }\r\n\r\n   ///\r\n   /// Working with Actual Object Values:\r\n   ///\r\n\r\n   // return the grid column header definition for this instance of ABFieldAutoIndex\r\n   columnHeader(options) {\r\n      const config = super.columnHeader(options);\r\n\r\n      config.editor = null; // read only\r\n      config.css = \"textCell\";\r\n      config.template = (rowData) => {\r\n         // if this isn't part of a group header display the default format\r\n         if (!rowData.$group) {\r\n            return this.format(rowData);\r\n         } else {\r\n            return \"\";\r\n         }\r\n      };\r\n\r\n      return config;\r\n   }\r\n\r\n   /*\r\n    * @funciton formComponent\r\n    * returns a drag and droppable component that is used on the UI\r\n    * interface builder to place form components related to this ABField.\r\n    *\r\n    * an ABField defines which form component is used to edit it's contents.\r\n    * However, what is returned here, needs to be able to create an instance of\r\n    * the component that will be stored with the ABViewForm.\r\n    */\r\n   formComponent() {\r\n      return super.formComponent(\"fieldreadonly\");\r\n   }\r\n\r\n   detailComponent() {\r\n      const detailComponentSetting = super.detailComponent();\r\n\r\n      detailComponentSetting.common = () => {\r\n         return {\r\n            key: \"detailtext\",\r\n         };\r\n      };\r\n\r\n      return detailComponentSetting;\r\n   }\r\n};\r\n","const ABFieldBooleanCore = require(\"../../core/dataFields/ABFieldBooleanCore\");\r\n\r\nmodule.exports = class ABFieldBoolean extends ABFieldBooleanCore {\r\n   constructor(values, object) {\r\n      super(values, object);\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   isValid() {\r\n      const validator = super.isValid();\r\n\r\n      // validator.addError('columnName', L('ab.validation.object.name.unique', 'Field columnName must be unique (#name# already used in this Application)').replace('#name#', this.name) );\r\n\r\n      return validator;\r\n   }\r\n\r\n   ///\r\n   /// Working with Actual Object Values:\r\n   ///\r\n\r\n   // return the grid column header definition for this instance of ABFieldBoolean\r\n   columnHeader(options) {\r\n      options = options || {};\r\n\r\n      const config = super.columnHeader(options);\r\n\r\n      config.editor = \"template\";\r\n      config.css = \"center\";\r\n      config.template = (row, common, value, config) => {\r\n         // Group header\r\n         if (row.$group) return row[this.columnName];\r\n\r\n         // editable\r\n         if (options.editable) {\r\n            return (\r\n               '<div class=\"ab-boolean-display\">' +\r\n               common.checkbox(row, common, value, config) +\r\n               \"</div>\"\r\n            );\r\n         }\r\n\r\n         // readonly\r\n         else {\r\n            if (value)\r\n               return \"<div class='webix_icon fa fa-check-square-o'></div>\";\r\n            else return \"<div class='webix_icon fa fa-square-o'></div>\";\r\n         }\r\n      };\r\n\r\n      return config;\r\n   }\r\n\r\n   /*\r\n    * @funciton formComponent\r\n    * returns a drag and droppable component that is used on the UI\r\n    * interface builder to place form components related to this ABField.\r\n    *\r\n    * an ABField defines which form component is used to edit it's contents.\r\n    * However, what is returned here, needs to be able to create an instance of\r\n    * the component that will be stored with the ABViewForm.\r\n    */\r\n   formComponent() {\r\n      return super.formComponent(\"checkbox\");\r\n   }\r\n\r\n   detailComponent() {\r\n      const detailComponentSetting = super.detailComponent();\r\n\r\n      detailComponentSetting.common = () => {\r\n         return {\r\n            key: \"detailcheckbox\",\r\n         };\r\n      };\r\n\r\n      return detailComponentSetting;\r\n   }\r\n};\r\n","const ABFieldCalculateCore = require(\"../../core/dataFields/ABFieldCalculateCore\");\r\n\r\nmodule.exports = class ABFieldCalculate extends ABFieldCalculateCore {\r\n   constructor(values, object) {\r\n      super(values, object);\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   isValid() {\r\n      const validator = super.isValid();\r\n\r\n      // validator.addError('columnName', L('ab.validation.object.name.unique', 'Field columnName must be unique (#name# already used in this Application)').replace('#name#', this.name) );\r\n\r\n      return validator;\r\n   }\r\n\r\n   ///\r\n   /// Working with Actual Object Values:\r\n   ///\r\n\r\n   // return the grid column header definition for this instance of ABFieldCalculate\r\n   columnHeader(options) {\r\n      const config = super.columnHeader(options);\r\n\r\n      config.editor = null; // read only\r\n      config.css = \"textCell\";\r\n      config.template = (rowData) => {\r\n         if (rowData.$group) return rowData[this.columnName];\r\n\r\n         return this.format(rowData);\r\n      };\r\n\r\n      return config;\r\n   }\r\n\r\n   /*\r\n    * @funciton formComponent\r\n    * returns a drag and droppable component that is used on the UI\r\n    * interface builder to place form components related to this ABField.\r\n    *\r\n    * an ABField defines which form component is used to edit it's contents.\r\n    * However, what is returned here, needs to be able to create an instance of\r\n    * the component that will be stored with the ABViewForm.\r\n    */\r\n   formComponent() {\r\n      return super.formComponent(\"fieldreadonly\");\r\n   }\r\n\r\n   detailComponent() {\r\n      const detailComponentSetting = super.detailComponent();\r\n\r\n      detailComponentSetting.common = () => {\r\n         return {\r\n            key: \"detailtext\",\r\n         };\r\n      };\r\n\r\n      return detailComponentSetting;\r\n   }\r\n};\r\n","const ABFieldCombineCore = require(\"../../core/dataFields/ABFieldCombineCore\");\r\n\r\nmodule.exports = class ABFieldCombine extends ABFieldCombineCore {\r\n   constructor(values, object) {\r\n      super(values, object);\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   isValid() {\r\n      const validator = super.isValid();\r\n\r\n      // validator.addError('columnName', L('ab.validation.object.name.unique', 'Field columnName must be unique (#name# already used in this Application)').replace('#name#', this.name) );\r\n\r\n      return validator;\r\n   }\r\n\r\n   ///\r\n   /// Working with Actual Object Values:\r\n   ///\r\n\r\n   // return the grid column header definition for this instance of ABFieldCombine\r\n   columnHeader(options) {\r\n      const config = super.columnHeader(options);\r\n\r\n      config.editor = null; // read only\r\n      config.css = \"textCell\";\r\n      config.template = (rowData) => {\r\n         // if this isn't part of a group header display the default format\r\n         if (!rowData.$group) {\r\n            return this.format(rowData);\r\n         } else {\r\n            return \"\";\r\n         }\r\n      };\r\n\r\n      return config;\r\n   }\r\n\r\n   /*\r\n    * @funciton formComponent\r\n    * returns a drag and droppable component that is used on the UI\r\n    * interface builder to place form components related to this ABField.\r\n    *\r\n    * an ABField defines which form component is used to edit it's contents.\r\n    * However, what is returned here, needs to be able to create an instance of\r\n    * the component that will be stored with the ABViewForm.\r\n    */\r\n   formComponent() {\r\n      return super.formComponent(\"fieldreadonly\");\r\n   }\r\n\r\n   detailComponent() {\r\n      const detailComponentSetting = super.detailComponent();\r\n\r\n      detailComponentSetting.common = () => {\r\n         return {\r\n            key: \"detailtext\",\r\n         };\r\n      };\r\n\r\n      return detailComponentSetting;\r\n   }\r\n};\r\n","const ABFieldConnectCore = require(\"../../core/dataFields/ABFieldConnectCore\");\r\n\r\nconst L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABFieldConnect extends ABFieldConnectCore {\r\n   constructor(values, object, fieldDefaults) {\r\n      super(values, object, fieldDefaults);\r\n   }\r\n\r\n   /**\r\n    * @method destroy()\r\n    *\r\n    * destroy the current instance of ABApplication\r\n    *\r\n    * also remove it from our _AllApplications\r\n    *\r\n    * @return {Promise}\r\n    */\r\n   async destroy() {\r\n      // verify we have been .save()d before:\r\n      if (!this.id) return Promise.resolve();\r\n\r\n      // NOTE: our .migrateXXX() routines expect the object to currently exist\r\n      // in the DB before we perform the DB operations.  So we need to\r\n      // .migrateDrop()  before we actually .objectDestroy() this.\r\n      // this.migrateDrop()\r\n      //    // .then(() => {\r\n      //    //    // NOTE : prevent recursive remove connected fields\r\n      //    //    // - remove this field from JSON\r\n      //    //    this.object._fields = this.object.fields((f) => {\r\n      //    //       return f.id != this.id;\r\n      //    //    });\r\n      //    // })\r\n      //    .then(() => {\r\n      //       // Save JSON of the object\r\n      //       return this.object.fieldRemove(this);\r\n      //    })\r\n      await super.destroy();\r\n\r\n      // Now we need to remove our linked Object->field\r\n\r\n      const linkObject = this.datasourceLink;\r\n      if (!linkObject) return Promise.resolve(); // already notified\r\n\r\n      const linkField = this.fieldLink;\r\n      if (!linkField) return Promise.resolve(); // already notified\r\n\r\n      // destroy linked field\r\n      return linkField.destroy();\r\n   }\r\n\r\n   ///\r\n   /// Working with Actual Object Values:\r\n   ///\r\n\r\n   /**\r\n    * @method pullRelationValues\r\n    *\r\n    * On the Web client, we want our returned relation values to be\r\n    * ready for Webix objects that require a .text and .value field.\r\n    *\r\n    * @param {*} row\r\n    * @return {array}\r\n    */\r\n   pullRelationValues(row) {\r\n      let selectedData = [];\r\n\r\n      const data = super.pullRelationValues(row);\r\n      const linkedObject = this.datasourceLink;\r\n\r\n      if (data && linkedObject) {\r\n         // if this select value is array\r\n         if (Array.isArray(data)) {\r\n            selectedData = data.map(function (d) {\r\n               // display label in format\r\n               if (d) {\r\n                  d.text = d.text || linkedObject.displayData(d);\r\n                  d.value = d.text;\r\n               }\r\n\r\n               return d;\r\n            });\r\n         } else if (data.id || data.uuid) {\r\n            selectedData = data;\r\n            selectedData.text =\r\n               selectedData.text || linkedObject.displayData(selectedData);\r\n            selectedData.value = selectedData.text;\r\n         } else if (typeof data == \"string\") {\r\n            selectedData = { text: data };\r\n         }\r\n      }\r\n\r\n      return selectedData;\r\n   }\r\n\r\n   columnHeader(options) {\r\n      options = options || {};\r\n      const config = super.columnHeader(options);\r\n      const field = this;\r\n      const App = field.AB._App;\r\n\r\n      if (options.filters == null) {\r\n         options.filters = {};\r\n      }\r\n\r\n      var multiselect = this.settings.linkType == \"many\";\r\n\r\n      config.editor = multiselect ? \"multiselect\" : \"combo\";\r\n      config.editFormat = (value) => {\r\n         return this.editFormat(value);\r\n      };\r\n      config.editParse = (value) => {\r\n         return this.editParse(value);\r\n      };\r\n      config.template = (row) => {\r\n         var selectedData = this.pullRelationValues(row);\r\n         var values = [];\r\n         values.push('<div class=\"badgeContainer\">');\r\n         if (\r\n            selectedData &&\r\n            Array.isArray(selectedData) &&\r\n            selectedData.length\r\n         ) {\r\n            selectedData.forEach((val) => {\r\n               values.push(\r\n                  `<div class='webix_multicombo_value'><span>${val.value}</span><!-- span data-uuid=\"${val.id}\" class=\"webix_multicombo_delete\" role=\"button\" aria-label=\"Remove item\"></span --></div>`\r\n               );\r\n            });\r\n            if (selectedData.length > 1) {\r\n               values.push(\r\n                  `<span class=\"webix_badge selectivityBadge\">${selectedData.length}</span>`\r\n               );\r\n            }\r\n         } else if (selectedData.value) {\r\n            let clear = \"\";\r\n            if (options.editable) {\r\n               clear = `<span class=\"webix_multicombo_delete clear-combo-value\" role=\"button\" aria-label=\"Remove item\"></span>`;\r\n            }\r\n            values.push(\r\n               `<div class='webix_multicombo_value'>${clear}<span class=\"ellip\">${selectedData.value}</span></div>`\r\n            );\r\n         } else {\r\n            return \"\";\r\n         }\r\n         values.push(\"</div>\");\r\n         return values.join(\"\");\r\n      };\r\n\r\n      config.suggest = {\r\n         on: {\r\n            onBeforeShow: function () {\r\n               field.openOptions(this);\r\n            },\r\n         },\r\n\r\n         // Support partial matches\r\n         filter: ({ value }, search) =>\r\n            (value ?? \"\").toLowerCase().includes((search ?? \"\").toLowerCase()),\r\n      };\r\n\r\n      if (multiselect) {\r\n         config.suggest.view = \"checksuggest\";\r\n         config.suggest.button = true;\r\n      }\r\n\r\n      return config;\r\n   }\r\n\r\n   openOptions($suggest) {\r\n      // PREVENT repeatedly pull data:\r\n      // If the options list was populated, then skip\r\n      const $list = $suggest.getList();\r\n      if (($list?.find({}) ?? []).length) return;\r\n\r\n      // Listen create/update events of the linked object, then clear data list to re-populate\r\n      [\"create\", \"update\"].forEach((key) => {\r\n         if (this[`_dc_${key}_event`]) return;\r\n\r\n         this[`_dc_${key}_event`] = this.AB.on(\r\n            `ab.datacollection.${key}`,\r\n            (res) => {\r\n               if (this.datasourceLink.id == res.objectId) $list.clearAll();\r\n            }\r\n         );\r\n      });\r\n\r\n      this.getAndPopulateOptions($suggest);\r\n   }\r\n\r\n   /*\r\n    * @function customEdit\r\n    *\r\n    * @param {object} row is the {name=>value} hash of the current row of data.\r\n    * @param {App} App the shared ui App object useful more making globally\r\n    *\t\t\t\t\tunique id references.\r\n    * @param {HtmlDOM} node  the HTML Dom object for this field's display.\r\n    */\r\n\r\n   //// NOTE: why do we pass in row, App, and node?  is this something we do in our external components?\r\n   ////       are these values present when this Object is instanciated? Can't we just pass these into the\r\n   ////       object constructor and have it internally track these things?\r\n   customEdit(row, App, node) {\r\n      // var selectedData = this.pullRelationValues(row);\r\n      // this._selectedData = selectedData;\r\n   }\r\n\r\n   /*\r\n    * @funciton formComponent\r\n    * returns a drag and droppable component that is used on the UI\r\n    * interface builder to place form components related to this ABField.\r\n    *\r\n    * an ABField defines which form component is used to edit it's contents.\r\n    * However, what is returned here, needs to be able to create an instance of\r\n    * the component that will be stored with the ABViewForm.\r\n    */\r\n   formComponent() {\r\n      return super.formComponent(\"connect\");\r\n   }\r\n\r\n   detailComponent() {\r\n      const detailComponentSetting = super.detailComponent();\r\n\r\n      detailComponentSetting.common = () => {\r\n         return {\r\n            key: \"detailconnect\",\r\n         };\r\n      };\r\n\r\n      return detailComponentSetting;\r\n   }\r\n\r\n   /**\r\n    * @method getOptions\r\n    * show options list in selectivity\r\n    *\r\n    * @return {Promise}\r\n    */\r\n   getOptions(where, term, sort) {\r\n      return new Promise((resolve, reject) => {\r\n         let haveResolved = false;\r\n         // {bool}\r\n         // have we already passed back a result?\r\n\r\n         const respond = (options) => {\r\n            // filter the raw lookup with the provided search term\r\n            options = options.filter((item) => {\r\n               if (item.text.toLowerCase().includes(term.toLowerCase())) {\r\n                  return true;\r\n               }\r\n            });\r\n\r\n            if (!haveResolved) {\r\n               haveResolved = true;\r\n               resolve(options);\r\n            } else {\r\n               // if we have already resolved() then .emit() that we have\r\n               // updated \"option.data\".\r\n               this.emit(\"option.data\", options);\r\n            }\r\n         };\r\n\r\n         // Prepare Where clause\r\n\r\n         where = where || {};\r\n         sort = sort || [];\r\n\r\n         if (!where.glue) where.glue = \"and\";\r\n\r\n         if (!where.rules) where.rules = [];\r\n\r\n         term = term || \"\";\r\n\r\n         // check if linked object value is not define, should return a empty array\r\n         if (!this.settings.linkObject) return [];\r\n\r\n         // if options was cached\r\n         // if (this._options != null) return resolve(this._options);\r\n\r\n         const linkedObj = this.datasourceLink;\r\n\r\n         // System could not found the linked object - It may be deleted ?\r\n         if (linkedObj == null) throw new Error(\"No linked object\");\r\n\r\n         const linkedCol = this.fieldLink;\r\n\r\n         // System could not found the linked field - It may be deleted ?\r\n         if (linkedCol == null) throw new Error(\"No linked column\");\r\n\r\n         // Get linked object model\r\n         const linkedModel = linkedObj.model();\r\n\r\n         // M:1 - get data that's only empty relation value\r\n         if (\r\n            this.settings.linkType == \"many\" &&\r\n            this.settings.linkViaType == \"one\"\r\n         ) {\r\n            // Mar 8, 2022 I (James) removed this because we need these options\r\n            // to appear so we can put a checkbox next to them with the new UI\r\n            // where.rules.push({\r\n            //    key: linkedCol.id,\r\n            //    rule: \"is_null\",\r\n            // });\r\n            // where[linkedCol.columnName] = null;\r\n         }\r\n         // 1:1\r\n         else if (\r\n            this.settings.linkType == \"one\" &&\r\n            this.settings.linkViaType == \"one\"\r\n         ) {\r\n            // 1:1 - get data is not match link id that we have\r\n            if (this.settings.isSource == true) {\r\n               // NOTE: make sure \"haveNoRelation\" shows up as an operator\r\n               // the value \":0\" doesn't matter, we just need 'haveNoRelation' as an operator.\r\n               // newRule[linkedCol.id] = { 'haveNoRelation': 0 };\r\n               where.rules.push({\r\n                  key: linkedCol.id,\r\n                  rule: \"have_no_relation\",\r\n               });\r\n            }\r\n            // 1:1 - get data that's only empty relation value by query null value from link table\r\n            else {\r\n               where.rules.push({\r\n                  key: linkedCol.id,\r\n                  rule: \"is_null\",\r\n               });\r\n               // newRule[linkedCol.id] = 'null';\r\n               // where[linkedCol.id] = null;\r\n            }\r\n         }\r\n\r\n         const storageID = `${this.id}-${JSON.stringify(where)}`;\r\n\r\n         Promise.resolve()\r\n            // TODO: debug the cached data + response so the droplist can display\r\n            // updated data.\r\n            .then(async () => {\r\n               // Get Local Storage\r\n\r\n               // We store the .findAll() results locally and return that for a\r\n               // quick response:\r\n               const storedOptions = await this.AB.Storage.get(storageID);\r\n               if (storedOptions) {\r\n                  // immediately respond with our stored options.\r\n                  this._options = storedOptions;\r\n                  return respond(this._options);\r\n               }\r\n            })\r\n            .then(async () => {\r\n               try {\r\n                  // Pull linked object data\r\n                  const result = await linkedModel.findAll({\r\n                     where: where,\r\n                     sort: sort,\r\n                     populate: false,\r\n                  });\r\n\r\n                  // cache linked object data\r\n                  this._options = result.data || result || [];\r\n\r\n                  // populate display text\r\n                  (this._options || []).forEach((opt) => {\r\n                     opt.text = linkedObj.displayData(opt);\r\n                     opt.value = opt.text;\r\n                  });\r\n\r\n                  this.AB.Storage.set(storageID, this._options);\r\n                  return respond(this._options);\r\n               } catch (err) {\r\n                  this.AB.notify.developer(err, {\r\n                     context:\r\n                        \"ABFieldConnect:getOptions(): unable to retrieve options from server\",\r\n                     field: this.toObj(),\r\n                     where,\r\n                  });\r\n\r\n                  haveResolved = true;\r\n                  throw err;\r\n               }\r\n            });\r\n      });\r\n   }\r\n\r\n   editFormat(value) {\r\n      if (!value) return \"\";\r\n      let vals = [];\r\n      if (Array.isArray(value)) {\r\n         value.forEach((val) => {\r\n            if (typeof val == \"object\") {\r\n               vals.push(val.id);\r\n            } else {\r\n               let itemObj = this.getItemFromVal(val);\r\n               vals.push(itemObj.id);\r\n            }\r\n         });\r\n      } else {\r\n         if (typeof value == \"object\") {\r\n            vals.push(value.id);\r\n         } else {\r\n            let itemObj = this.getItemFromVal(value);\r\n            if (itemObj && itemObj.id) {\r\n               vals.push(itemObj.id);\r\n            }\r\n         }\r\n      }\r\n      return vals.join();\r\n   }\r\n\r\n   editParse(value) {\r\n      var multiselect = this.settings.linkType == \"many\";\r\n      if (multiselect) {\r\n         if (!value) {\r\n            return [];\r\n         } else {\r\n            let returnVals = [];\r\n            let vals = value.split(\",\");\r\n            vals.forEach((val) => {\r\n               returnVals.push(this.getItemFromVal(val));\r\n            });\r\n            return returnVals;\r\n         }\r\n      } else {\r\n         let item = this.getItemFromVal(value);\r\n         return item;\r\n      }\r\n   }\r\n\r\n   getAndPopulateOptions(editor, options, field, form) {\r\n      const theEditor = editor;\r\n\r\n      // if we are filtering based off another selectivity's value we\r\n      // need to do it on fetch each time because the value can change\r\n      // copy the filters so we don't add to them every time there is a change\r\n      const combineFilters = options?.filters\r\n         ? Object.assign({}, options.filters)\r\n         : { glue: \"and\", rules: [] };\r\n\r\n      if (options?.filterByConnectValues) {\r\n         const parseFilterByConnectValues = (conditions, values, depth = 0) => {\r\n            const valuesByDepth = values.filter((e) => e.depth === depth);\r\n\r\n            return [\r\n               ...conditions.rules.map((e) => {\r\n                  if (e.glue)\r\n                     return {\r\n                        glue: e.glue,\r\n                        rules: parseFilterByConnectValues(e, values, depth + 1),\r\n                     };\r\n\r\n                  const value = valuesByDepth.filter(\r\n                     (ef) => ef.key === e.key && ef.value === e.value\r\n                  )[0];\r\n\r\n                  if (!value) return e;\r\n\r\n                  const $parentField = value?.filterValue?.config.id\r\n                     ? $$(value.filterValue.config.id)\r\n                     : null;\r\n\r\n                  if (!$parentField)\r\n                     throw Error(\r\n                        \"Some parent field's view components don't exist\"\r\n                     );\r\n\r\n                  const parentValue = value?.filterValue\r\n                     ? $parentField.getValue() ?? \"\"\r\n                     : \"\";\r\n\r\n                  let newVal = \"\";\r\n\r\n                  if (parentValue) {\r\n                     if (value.filterColumn) {\r\n                        if (\r\n                           field.object\r\n                              .fieldByID(value.filterValue.config.dataFieldId)\r\n                              .getItemFromVal(parentValue)\r\n                        ) {\r\n                           newVal = field.object\r\n                              .fieldByID(value.filterValue.config.dataFieldId)\r\n                              .getItemFromVal(parentValue)[value.filterColumn];\r\n                        } else {\r\n                           newVal = parentValue;\r\n                        }\r\n                     } else {\r\n                        newVal = parentValue;\r\n                     }\r\n                  }\r\n\r\n                  return {\r\n                     key: e.key,\r\n                     rule: \"equals\",\r\n                     value: newVal,\r\n                  };\r\n               }),\r\n            ];\r\n         };\r\n\r\n         combineFilters.rules = parseFilterByConnectValues(\r\n            combineFilters,\r\n            options.filterByConnectValues\r\n         );\r\n      }\r\n\r\n      const handlerOptionData = (data) => {\r\n         this.populateOptions(theEditor, data, field, form, true);\r\n      };\r\n\r\n      // try to make sure we don't continually add up listeners.\r\n      this.removeListener(\"option.data\", handlerOptionData).once(\r\n         \"option.data\",\r\n         handlerOptionData\r\n      );\r\n\r\n      this.getOptions(combineFilters, \"\").then((data) => {\r\n         this.populateOptions(theEditor, data, field, form, false);\r\n      });\r\n   }\r\n\r\n   populateOptions(theEditor, data, field, form, addCy) {\r\n      theEditor.blockEvent();\r\n      theEditor.getList().clearAll();\r\n      theEditor.getList().define(\"data\", data);\r\n      if (addCy) {\r\n         this.populateOptionsDataCy(theEditor, field, form);\r\n      }\r\n      if (theEditor.getValue && theEditor.getValue()) {\r\n         theEditor.setValue(theEditor.getValue());\r\n         // } else if (this._selectedData && this._selectedData.length) {\r\n         //    theEditor.setValue(this.editFormat(this._selectedData));\r\n      }\r\n      theEditor.unblockEvent();\r\n   }\r\n\r\n   populateOptionsDataCy(theEditor, field, form) {\r\n      // Add data-cy attributes\r\n      if (theEditor?.getList) {\r\n         if (!theEditor.getPopup) return;\r\n         var popup = theEditor.getPopup();\r\n         if (!popup) return;\r\n         theEditor.getList().data.each((option) => {\r\n            if (!option) return;\r\n            var node = popup.$view.querySelector(\r\n               \"[webix_l_id='\" + option.id + \"']\"\r\n            );\r\n            if (!node) return;\r\n            node.setAttribute(\r\n               \"data-cy\",\r\n               `${field.key} options ${option.id} ${field.id} ${form.id}`\r\n            );\r\n         });\r\n      }\r\n   }\r\n\r\n   getItemFromVal(val) {\r\n      let item;\r\n      let options = this._options || [];\r\n      if (options.length > 0) {\r\n         for (let i = 0; i < options.length; i++) {\r\n            if (\r\n               this.indexField &&\r\n               options[i][this.indexField.object.PK()] == val\r\n            ) {\r\n               item = options[i];\r\n               break;\r\n            } else if (\r\n               this.indexField2 &&\r\n               options[i][this.indexField2.object.PK()] == val\r\n            ) {\r\n               item = options[i];\r\n               break;\r\n            } else {\r\n               if (options[i].id == val) {\r\n                  item = options[i];\r\n                  break;\r\n               }\r\n            }\r\n         }\r\n         return item;\r\n      } else {\r\n         return \"\";\r\n      }\r\n   }\r\n\r\n   getValue(item) {\r\n      var multiselect = this.settings.linkType == \"many\";\r\n      if (multiselect) {\r\n         let vals = [];\r\n         if (item.getValue()) {\r\n            let val = item.getValue().split(\",\");\r\n            val.forEach((record) => {\r\n               vals.push(item.getList().getItem(record));\r\n            });\r\n         }\r\n         return vals;\r\n      } else {\r\n         if (item.getValue()) {\r\n            return item.getList().getItem(item.getValue());\r\n         } else {\r\n            return \"\";\r\n         }\r\n      }\r\n   }\r\n\r\n   setValue(item, rowData) {\r\n      if (!item) return;\r\n      // if (AB.isEmpty(rowData)) return; removed because sometimes we will\r\n      // want to set this to empty\r\n      let val = this.pullRelationValues(rowData);\r\n      // put in current values as options so we can display them before\r\n      // the rest of the options are fetched when field is clicked\r\n      if (item.getList && item.getList().count() == 0) {\r\n         if (this.settings.linkType != \"one\" && !Array.isArray(val)) {\r\n            val = [val];\r\n         }\r\n         item.getList().define(\"data\", val);\r\n      }\r\n      item.define(\"value\", val);\r\n   }\r\n\r\n   /**\r\n    * @method pullRecordRelationValues\r\n    *\r\n    * On the Web client, we want our returned relation values to be\r\n    * ready for Webix objects that require a .text and .value field.\r\n    *\r\n    * @param {*} row\r\n    * @return {array}\r\n    */\r\n   pullRecordRelationValues(record) {\r\n      var selectedData = [];\r\n\r\n      var data = record;\r\n      var linkedObject = this.datasourceLink;\r\n\r\n      if (data && linkedObject) {\r\n         // if this select value is array\r\n         if (Array.isArray(data)) {\r\n            selectedData = data.map(function (d) {\r\n               // display label in format\r\n               if (d) {\r\n                  d.text = d.text || linkedObject.displayData(d);\r\n                  d.value = d.text;\r\n               }\r\n\r\n               return d;\r\n            });\r\n         } else if (data.id || data.uuid) {\r\n            selectedData = data;\r\n            selectedData.text =\r\n               selectedData.text || linkedObject.displayData(selectedData);\r\n            selectedData.value = selectedData.text;\r\n         }\r\n      }\r\n\r\n      return selectedData;\r\n   }\r\n};\r\n","const ABFieldDateCore = require(\"../../core/dataFields/ABFieldDateCore\");\r\n\r\nmodule.exports = class ABFieldDate extends ABFieldDateCore {\r\n   constructor(values, object) {\r\n      super(values, object);\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   isValid() {\r\n      const validator = super.isValid();\r\n\r\n      // validator.addError('columnName', L('ab.validation.object.name.unique', 'Field columnName must be unique (#name# already used in this Application)').replace('#name#', this.name) );\r\n\r\n      return validator;\r\n   }\r\n\r\n   ///\r\n   /// Working with Actual Object Values:\r\n   ///\r\n\r\n   // return the grid column header definition for this instance of ABFieldDate\r\n   columnHeader(options) {\r\n      const config = super.columnHeader(options);\r\n\r\n      // if (this.settings.includeTime)\r\n      // config.editor = \"datetime\";\r\n      // else\r\n      config.editor = \"date\";\r\n\r\n      // allows entering characters in datepicker input, false by default\r\n      config.editable = true;\r\n\r\n      // NOTE: it seems that the default value is a string in ISO format.\r\n\r\n      //// NOTE: webix seems unable to parse ISO string into => date here.\r\n      // config.map = '(date)#'+this.columnName+'#';   // so don't use this.\r\n\r\n      config.template = (row) => {\r\n         if (row.$group) return row[this.columnName];\r\n\r\n         return this.format(row);\r\n      };\r\n\r\n      config.format = (d) => {\r\n         const rowData = {};\r\n         rowData[this.columnName] = d;\r\n\r\n         return this.format(rowData);\r\n      };\r\n\r\n      config.editFormat = (d) => {\r\n         // this routine needs to return a Date() object for the editor to work with.\r\n\r\n         if (d == \"\" || d == null) {\r\n            return \"\";\r\n         }\r\n\r\n         // else retun the actual ISO string => Date() value\r\n         return this.AB.toDate(d);\r\n      };\r\n\r\n      return config;\r\n   }\r\n\r\n   /*\r\n    * @funciton formComponent\r\n    * returns a drag and droppable component that is used on the UI\r\n    * interface builder to place form components related to this ABField.\r\n    *\r\n    * an ABField defines which form component is used to edit it's contents.\r\n    * However, what is returned here, needs to be able to create an instance of\r\n    * the component that will be stored with the ABViewForm.\r\n    */\r\n   formComponent() {\r\n      // NOTE: what is being returned here needs to mimic an ABView CLASS.\r\n      // primarily the .common() and .newInstance() methods.\r\n      const formComponentSetting = super.formComponent(\"datepicker\");\r\n\r\n      // .common() is used to create the display in the list\r\n      formComponentSetting.common = () => {\r\n         return {\r\n            key: \"datepicker\",\r\n         };\r\n      };\r\n\r\n      return formComponentSetting;\r\n   }\r\n\r\n   detailComponent() {\r\n      const detailComponentSetting = super.detailComponent();\r\n\r\n      detailComponentSetting.common = () => {\r\n         return {\r\n            key: \"detailtext\",\r\n         };\r\n      };\r\n\r\n      return detailComponentSetting;\r\n   }\r\n\r\n   dateToString(dateFormat, dateData) {\r\n      return webix.Date.dateToStr(dateFormat)(dateData);\r\n   }\r\n\r\n   // Overwrite core.format to use webix locales.\r\n   format(rowData) {\r\n      if (!window.webixLocale) return super.format(rowData);\r\n      const d = this.dataValue(rowData);\r\n\r\n      if (d == \"\" || d == null) {\r\n         return \"\";\r\n      }\r\n      const dateObj = this.AB.toDate(d);\r\n\r\n      const dateFormat = this.settings.dateFormat;\r\n      // @const {int} dateFormat AB Date Format\r\n      // 1 - ignore, 2 - dd/mm/yyyy, 3 - mm/dd/yyyy, 4 - M D, yyyy, 5 - D M, yyyy\r\n\r\n      // Return longdate if option 4 or 5\r\n      if (dateFormat >= 4) {\r\n         return webix.i18n.longDateFormatStr(dateObj);\r\n      } else {\r\n         return webix.i18n.dateFormatStr(dateObj);\r\n      }\r\n   }\r\n};\r\n","const ABFieldDateTimeCore = require(\"../../core/dataFields/ABFieldDateTimeCore\");\r\n\r\nmodule.exports = class ABFieldDateTime extends ABFieldDateTimeCore {\r\n   constructor(values, object) {\r\n      super(values, object);\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   // isValid() {\r\n   //    const validator = super.isValid();\r\n\r\n   //    // validator.addError('columnName', L('ab.validation.object.name.unique', 'Field columnName must be unique (#name# already used in this Application)').replace('#name#', this.name) );\r\n\r\n   //    return validator;\r\n   // }\r\n\r\n   ///\r\n   /// Working with Actual Object Values:\r\n   ///\r\n\r\n   // return the grid column header definition for this instance of ABFieldDate\r\n   columnHeader(options) {\r\n      const config = super.columnHeader(options);\r\n\r\n      // Ignore date\r\n      if (this.settings.dateFormat == 1) {\r\n         config.editor = \"time\";\r\n      } else {\r\n         config.editor = \"datetime\";\r\n      }\r\n\r\n      // allows entering characters in datepicker input, false by default\r\n      config.editable = true;\r\n\r\n      // NOTE: it seems that the default value is a string in ISO format.\r\n\r\n      //// NOTE: webix seems unable to parse ISO string into => date here.\r\n      // config.map = '(date)#'+this.columnName+'#';   // so don't use this.\r\n\r\n      config.template = (row) => {\r\n         if (row.$group) return row[this.columnName];\r\n\r\n         return this.format(row);\r\n      };\r\n\r\n      config.format = (d) => {\r\n         const rowData = {};\r\n         rowData[this.columnName] = d;\r\n\r\n         return this.format(rowData);\r\n      };\r\n\r\n      config.editFormat = (d) => {\r\n         // this routine needs to return a Date() object for the editor to work with.\r\n\r\n         if (d == \"\" || d == null) {\r\n            return \"\";\r\n         }\r\n\r\n         // else retun the actual ISO string => Date() value\r\n         return this.AB.toDate(d);\r\n      };\r\n\r\n      return config;\r\n   }\r\n\r\n   /*\r\n    * @funciton formComponent\r\n    * returns a drag and droppable component that is used on the UI\r\n    * interface builder to place form components related to this ABField.\r\n    *\r\n    * an ABField defines which form component is used to edit it's contents.\r\n    * However, what is returned here, needs to be able to create an instance of\r\n    * the component that will be stored with the ABViewForm.\r\n    */\r\n   formComponent() {\r\n      // NOTE: what is being returned here needs to mimic an ABView CLASS.\r\n      // primarily the .common() and .newInstance() methods.\r\n      const formComponentSetting = super.formComponent(\"datepicker\");\r\n\r\n      // .common() is used to create the display in the list\r\n      formComponentSetting.common = () => {\r\n         return {\r\n            key: \"datepicker\",\r\n         };\r\n      };\r\n\r\n      return formComponentSetting;\r\n   }\r\n\r\n   detailComponent() {\r\n      const detailComponentSetting = super.detailComponent();\r\n\r\n      detailComponentSetting.common = () => {\r\n         return {\r\n            key: \"detailtext\",\r\n         };\r\n      };\r\n\r\n      return detailComponentSetting;\r\n   }\r\n\r\n   // Overwrite core.format to use webix locales.\r\n   format(rowData) {\r\n      if (!window.webixLocale) return super.format(rowData);\r\n      const d = this.dataValue(rowData);\r\n\r\n      if (d == \"\" || d == null) {\r\n         return \"\";\r\n      }\r\n      const dateObj = this.AB.toDate(d);\r\n\r\n      const dateFormat = this.settings.dateFormat;\r\n      // @const {int} dateFormat AB Date Format\r\n      // 1 - ignore, 2 - dd/mm/yyyy, 3 - mm/dd/yyyy, 4 - M D, yyyy, 5 - D M, yyyy\r\n      const timeToStr = webix.Date.dateToStr(this.getTimeFormat());\r\n\r\n      if (dateFormat >= 4) {\r\n         return `${webix.i18n.longDateFormatStr(dateObj)} ${timeToStr(\r\n            dateObj\r\n         )}`;\r\n      } else {\r\n         return `${webix.i18n.dateFormatStr(dateObj)} ${timeToStr(dateObj)}`;\r\n      }\r\n   }\r\n};\r\n","const ABFieldEmailCore = require(\"../../core/dataFields/ABFieldEmailCore\");\r\n\r\nmodule.exports = class ABFieldEmail extends ABFieldEmailCore {\r\n   // constructor(values, object) {\r\n   //    super(values, object);\r\n   // }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   // isValid() {\r\n   //    const validator = super.isValid();\r\n\r\n   //    // validator.addError('columnName', L('ab.validation.object.name.unique', 'Field columnName must be unique (#name# already used in this Application)').replace('#name#', this.name) );\r\n\r\n   //    return validator;\r\n   // }\r\n\r\n   ///\r\n   /// Working with Actual Object Values:\r\n   ///\r\n\r\n   // return the grid column header definition for this instance of ABFieldBoolean\r\n   columnHeader(options) {\r\n      const config = super.columnHeader(options);\r\n\r\n      config.editor = \"text\";\r\n\r\n      return config;\r\n   }\r\n\r\n   /*\r\n    * @funciton formComponent\r\n    * returns a drag and droppable component that is used on the UI\r\n    * interface builder to place form components related to this ABField.\r\n    *\r\n    * an ABField defines which form component is used to edit it's contents.\r\n    * However, what is returned here, needs to be able to create an instance of\r\n    * the component that will be stored with the ABViewForm.\r\n    */\r\n   formComponent() {\r\n      // NOTE: what is being returned here needs to mimic an ABView CLASS.\r\n      // primarily the .common() and .newInstance() methods.\r\n      const formComponentSetting = super.formComponent();\r\n\r\n      // .common() is used to create the display in the list\r\n      formComponentSetting.common = () => {\r\n         return {\r\n            key: \"textbox\",\r\n            settings: {\r\n               type: \"single\",\r\n            },\r\n         };\r\n      };\r\n\r\n      return formComponentSetting;\r\n   }\r\n\r\n   detailComponent() {\r\n      const detailComponentSetting = super.detailComponent();\r\n\r\n      detailComponentSetting.common = () => {\r\n         return {\r\n            key: \"detailtext\",\r\n         };\r\n      };\r\n\r\n      return detailComponentSetting;\r\n   }\r\n};\r\n","const ABFieldFileCore = require(\"../../core/dataFields/ABFieldFileCore\");\r\n\r\nconst L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABFieldFile extends ABFieldFileCore {\r\n   constructor(values, object) {\r\n      super(values, object);\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   isValid() {\r\n      const validator = super.isValid();\r\n\r\n      // validator.addError('columnName', L('ab.validation.object.name.unique', 'Field columnName must be unique (#name# already used in this Application)').replace('#name#', this.name) );\r\n\r\n      return validator;\r\n   }\r\n\r\n   /**\r\n    * @function destroy\r\n    * On a destroy operation, ask if the user wants to keep the related file.\r\n    */\r\n   async destroy() {\r\n      return new Promise((resolve, reject) => {\r\n         // verify we have been .save()d before:\r\n         if (!this.id) {\r\n            resolve();\r\n            return;\r\n         }\r\n\r\n         // Ask the user what to do about the existing file:\r\n         webix.confirm({\r\n            title: L(\"Keep Files?\"),\r\n            message: L(\"Do you want to keep the files referenced by {0}?\", [\r\n               this.label,\r\n            ]),\r\n            callback: async (result) => {\r\n               // update this setting so the server can respond correctly in\r\n               // ABFieldFile.migrateDrop()\r\n               this.settings.removeExistingData = result ? 0 : 1;\r\n\r\n               try {\r\n                  await this.save();\r\n\r\n                  // TODO: a reminder that you still got alot on the server to do!\r\n                  webix.alert({\r\n                     title: \"!! TODO !!\",\r\n                     text:\r\n                        \"Tell a Developer to actually pay attention to this!\",\r\n                  });\r\n\r\n                  // now the default .destroy()\r\n                  await super.destroy();\r\n\r\n                  resolve();\r\n               } catch (err) {\r\n                  reject(err);\r\n               }\r\n            },\r\n         });\r\n      });\r\n   }\r\n\r\n   ///\r\n   /// Working with Actual Object Values:\r\n   ///\r\n\r\n   // return the grid column header definition for this instance of ABFieldFile\r\n   columnHeader(options) {\r\n      options = options || {};\r\n\r\n      const config = super.columnHeader(options);\r\n\r\n      config.editor = false;\r\n\r\n      const editable = options.editable;\r\n\r\n      // populate our default template:\r\n      config.template = (obj) => {\r\n         if (obj.$group) return this.dataValue(obj);\r\n\r\n         const fileDiv = [\r\n            '<div class=\"ab-file-data-field\" style=\"float: left;\">',\r\n            '<div class=\"webix_view ab-file-holder\">',\r\n            '<div class=\"webix_template\">',\r\n            this.fileTemplate(obj, editable),\r\n            \"</div>\",\r\n            \"</div>\",\r\n            \"</div>\",\r\n         ].join(\"\");\r\n\r\n         return fileDiv;\r\n      };\r\n\r\n      return config;\r\n   }\r\n\r\n   /*\r\n    * @function customDisplay\r\n    * perform any custom display modifications for this field.\r\n    * @param {object} row is the {name=>value} hash of the current row of data.\r\n    * @param {App} App the shared ui App object useful more making globally\r\n    *\t\t\t\t\tunique id references.\r\n    * @param {HtmlDOM} node  the HTML Dom object for this field's display.\r\n    */\r\n   customDisplay(row, App, node, options) {\r\n      // sanity check.\r\n      if (!node) {\r\n         return;\r\n      }\r\n      options = options || {};\r\n\r\n      let typesList = [];\r\n      let maximumSize = 0;\r\n\r\n      if (this.settings.limitFileType && this.settings.fileType) {\r\n         typesList = this.settings.fileType.split(\",\");\r\n      }\r\n\r\n      if (this.settings.limitFileSize && this.settings.fileSize) {\r\n         maximumSize = this.settings.fileSize;\r\n      }\r\n\r\n      // \t\t// safety check:\r\n      // \t\t// webix seems to crash if you specify a .container that doesn't exists:\r\n      // \t\t// Note: when the template is first created, we don't have App.unique()\r\n      const parentContainer = node.querySelector(\".ab-file-holder\");\r\n      if (parentContainer) {\r\n         parentContainer.innerHTML = \"\";\r\n         // parentContainer.id = idBase;\t// change it to the unique one.\r\n\r\n         // \t\t\t// use a webix component for displaying the content.\r\n         // \t\t\t// do this so I can use the progress spinner\r\n\r\n         const webixContainer = webix.ui({\r\n            view: \"template\",\r\n            container: parentContainer,\r\n\r\n            template: this.fileTemplate(row, options.editable),\r\n\r\n            borderless: true,\r\n            width: 160,\r\n            height: 60,\r\n         });\r\n         webix.extend(webixContainer, webix.ProgressBar);\r\n\r\n         // \t\t\t////\r\n         // \t\t\t//// Prepare the Uploader\r\n         // \t\t\t////\r\n\r\n         if (!options.editable) {\r\n            const domNode = parentContainer.querySelector(\".delete-image\");\r\n            if (domNode) domNode.style.display = \"none\";\r\n\r\n            return;\r\n         }\r\n\r\n         const url = this.urlUpload(true);\r\n\r\n         const uploader = webix.ui({\r\n            view: \"uploader\",\r\n            apiOnly: true,\r\n            upload: url,\r\n            inputName: \"file\",\r\n            multiple: false,\r\n            on: {\r\n               // when a file is added to the uploader\r\n               onBeforeFileAdd: function (item) {\r\n                  node.classList.remove(\"webix_invalid\");\r\n                  node.classList.remove(\"webix_invalid_cell\");\r\n\r\n                  // verify file type\r\n                  const acceptableTypes = typesList;\r\n                  if (acceptableTypes && acceptableTypes != \"\") {\r\n                     const type = item.type.toLowerCase();\r\n                     if (acceptableTypes.indexOf(type) == -1) {\r\n                        webix.message(\r\n                           L(\"Only [{0}] files are supported\", [\r\n                              acceptableTypes.join(\", \"),\r\n                           ])\r\n                        );\r\n                        return false;\r\n                     }\r\n                  }\r\n\r\n                  //verify file size\r\n                  //Convert to MegaBytes\r\n                  if (maximumSize > 0) {\r\n                     const acceptableSizes = maximumSize * 1000000;\r\n                     if (item.size > acceptableSizes) {\r\n                        webix.message(\r\n                           L(\"Maximum file size is {0}MB\", [maximumSize])\r\n                        );\r\n                        return false;\r\n                     }\r\n                  }\r\n\r\n                  // start progress indicator\r\n                  webixContainer.showProgress({\r\n                     type: \"icon\",\r\n                     delay: 2000,\r\n                  });\r\n               },\r\n\r\n               // when upload is complete:\r\n               onFileUpload: async (item, response) => {\r\n                  webixContainer.hideProgress();\r\n                  // this.showFile(idBase, response.data.uuid);\r\n\r\n                  const values = {};\r\n                  values[this.columnName] = {};\r\n                  values[this.columnName].uuid = response.data.uuid;\r\n                  values[this.columnName].filename = item.name;\r\n\r\n                  // update just this value on our current object.model\r\n                  if (row.id) {\r\n                     try {\r\n                        await this.object.model().update(row.id, values);\r\n\r\n                        // update the client side data object as well so other data changes won't cause this save to be reverted\r\n                        if ($$(node) && $$(node).updateItem)\r\n                           $$(node).updateItem(row.id, values);\r\n                     } catch (err) {\r\n                        node.classList.add(\"webix_invalid\");\r\n                        node.classList.add(\"webix_invalid_cell\");\r\n\r\n                        this.AB.notify.developer(err, {\r\n                           context:\r\n                              \"ABFieldFile.onFileUpload(): Error updating our entry.\",\r\n                           row: row,\r\n                           values: values,\r\n                        });\r\n                     }\r\n                  }\r\n\r\n                  // update value in the form component\r\n                  this.setValue($$(node), values);\r\n               },\r\n\r\n               // if an error was returned\r\n               onFileUploadError: (item, response) => {\r\n                  this.AB.notify.developer(new Error(\"Error loading file\"), {\r\n                     message: \"Error loading file\",\r\n                     response,\r\n                  });\r\n                  webixContainer.hideProgress();\r\n               },\r\n            },\r\n         });\r\n         uploader.addDropZone(webixContainer.$view);\r\n\r\n         // store upload id into html element (it will be used in .customEdit)\r\n         node.dataset[\"uploaderId\"] = uploader.config.id;\r\n\r\n         // open file upload dialog when's click\r\n         node.addEventListener(\"click\", (e) => {\r\n            if (e.target.className.indexOf(\"delete-image\") > -1) {\r\n               this.deleteFile = true;\r\n            }\r\n         });\r\n      }\r\n   }\r\n\r\n   /*\r\n    * @function customEdit\r\n    *\r\n    * @param {object} row is the {name=>value} hash of the current row of data.\r\n    * @param {App} App the shared ui App object useful more making globally\r\n    *\t\t\t\t\tunique id references.\r\n    * @param {HtmlDOM} node  the HTML Dom object for this field's display.\r\n    */\r\n   customEdit(row, App, node) {\r\n      if (this.deleteFile == true) {\r\n         // remove the property because it is only needed to prevent the file dialog from showing\r\n         delete this.deleteFile;\r\n\r\n         // Ask the user if they really want to delete the photo\r\n         webix.confirm({\r\n            title: \"\",\r\n            message: L(\"Are you sure you want to remove this file?\"),\r\n            callback: async (result) => {\r\n               const confirmDelete = result ? 1 : 0;\r\n               if (confirmDelete) {\r\n                  // update just this value on our current object.model\r\n                  const values = {};\r\n                  values[this.columnName] = \"\";\r\n\r\n                  if (row.id) {\r\n                     try {\r\n                        await this.object.model().update(row.id, values);\r\n\r\n                        // update the client side data object as well so other data changes won't cause this save to be reverted\r\n                        if ($$(node) && $$(node).updateItem)\r\n                           $$(node).updateItem(row.id, values);\r\n                     } catch (err) {\r\n                        node.classList.add(\"webix_invalid\");\r\n                        node.classList.add(\"webix_invalid_cell\");\r\n\r\n                        this.AB.notify.developer(err, {\r\n                           message: \"Error updating our entry.\",\r\n                           row: row,\r\n                           values: values,\r\n                        });\r\n                     }\r\n                  }\r\n                  // update value in the form component\r\n                  else {\r\n                     this.setValue($$(node), values);\r\n                  }\r\n               }\r\n            },\r\n         });\r\n      } else {\r\n         const rowData = this.dataValue(row);\r\n         if (!rowData || !rowData.uuid) {\r\n            const uploaderId = node.dataset[\"uploaderId\"],\r\n               uploader = $$(uploaderId);\r\n\r\n            if (uploader && uploader.fileDialog)\r\n               uploader.fileDialog({ rowid: row.id });\r\n         }\r\n      }\r\n\r\n      return false;\r\n   }\r\n\r\n   /*\r\n    * @funciton formComponent\r\n    * returns a drag and droppable component that is used on the UI\r\n    * interface builder to place form components related to this ABField.\r\n    *\r\n    * an ABField defines which form component is used to edit it's contents.\r\n    * However, what is returned here, needs to be able to create an instance of\r\n    * the component that will be stored with the ABViewForm.\r\n    */\r\n   formComponent() {\r\n      return super.formComponent(\"fieldcustom\");\r\n   }\r\n\r\n   detailComponent() {\r\n      const detailComponentSetting = super.detailComponent();\r\n\r\n      detailComponentSetting.common = () => {\r\n         return {\r\n            key: \"detailcustom\",\r\n         };\r\n      };\r\n\r\n      return detailComponentSetting;\r\n   }\r\n\r\n   //File Template\r\n\r\n   fileTemplate(obj, editable) {\r\n      let iconDisplay = \"\";\r\n      let fileDisplay = \"display:none;\";\r\n      let fileURL = \"\";\r\n\r\n      let value = \"\";\r\n      let name = \"\";\r\n\r\n      const rowData = this.dataValue(obj);\r\n      if (rowData) {\r\n         value = rowData.uuid;\r\n         name = rowData.filename;\r\n      }\r\n\r\n      if (value && name) {\r\n         iconDisplay = \"display:none;\";\r\n         fileDisplay = \"\";\r\n         fileURL = \"/file/\" + value;\r\n      }\r\n\r\n      const html = [\r\n         `<div class=\"file-data-field-icon\" style=\"text-align: center; height: inherit; display: table-cell; vertical-align: middle; border: 2px dotted #CCC; background: #FFF; border-radius: 10px; font-size: 11px; line-height: 13px; padding: 0 10px; ${iconDisplay}\"><i class=\"fa fa-file fa-2x\" style=\"opacity: 0.6; font-size: 32px; margin-top: 3px; margin-bottom: 5px;\"></i>${\r\n            editable ? `<br/>${L(\"Drag and drop or click here\")}` : \"\"\r\n         }</div>`,\r\n         `<div class=\"file-data-field-name\" style=\" width:100%; height:100%; position:relative; \"><a target=\"_blank\" href=\"${fileURL}\">${\r\n            name || \"\"\r\n         }</a>${\r\n            editable\r\n               ? `<a style=\"${fileDisplay}\" class=\"ab-delete-photo\" href=\"javascript:void(0);\"><i class=\"fa fa-times delete-image\"></i></a>`\r\n               : \"\"\r\n         }</div>`,\r\n      ].join(\"\");\r\n\r\n      return html;\r\n   }\r\n\r\n   getValue(item, rowData) {\r\n      const file = item.$view.querySelector(\".file-data-field-name\");\r\n      const fileLink = file.querySelector(\"a\");\r\n\r\n      return {\r\n         uuid: file.getAttribute(\"file-uuid\"),\r\n         filename: fileLink.innerHTML,\r\n      };\r\n   }\r\n\r\n   setValue(item, rowData) {\r\n      if (!item) return;\r\n\r\n      const domNode = item.$view;\r\n      if (!domNode) return;\r\n\r\n      let val = null;\r\n      if (rowData) {\r\n         val = this.dataValue(rowData);\r\n\r\n         // if (val == null) {\r\n         // \t// assume they just sent us a single value\r\n         // \tval = rowData;\r\n         // }\r\n      }\r\n\r\n      const fileicon = domNode.querySelector(\".file-data-field-icon\");\r\n      if (fileicon) fileicon.style.display = val && val.uuid ? \"none\" : \"block\";\r\n\r\n      const file = domNode.querySelector(\".file-data-field-name\");\r\n      if (file) {\r\n         const fileDeleteIcon = file.querySelector(\".ab-delete-photo\");\r\n         if (fileDeleteIcon)\r\n            fileDeleteIcon.style.display = val && val.uuid ? \"block\" : \"none\";\r\n\r\n         file.style.display = val && val.uuid ? \"block\" : \"none\";\r\n         if (val && val.uuid) file.setAttribute(\"file-uuid\", val.uuid);\r\n         else file.removeAttribute(\"file-uuid\");\r\n\r\n         const fileLink = file.querySelector(\"a\");\r\n         const fileURL = \"/file/\" + (val ? val.uuid : \"\");\r\n         fileLink.href = fileURL;\r\n         fileLink.innerHTML = val ? val.filename : \"\";\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method urlUpload()\r\n    * return the url for uploading a file.\r\n    * When used in a webix widget, the response is different than our normal\r\n    * API, so we can pass in a param to indicate a response compatible with\r\n    * webix.\r\n    * @param {bool} isWebix\r\n    *        Is this url being used by a webix component?\r\n    * @return {string}\r\n    */\r\n   urlUpload(isWebix = true) {\r\n      return `/file/upload/${this.object.id}/${this.id}/${isWebix ? \"1\" : \"0\"}`;\r\n   }\r\n};\r\n","const ABFieldFormulaCore = require(\"../../core/dataFields/ABFieldFormulaCore\");\r\n\r\nmodule.exports = class ABFieldFormula extends ABFieldFormulaCore {\r\n   // constructor(values, object) {\r\n   //    super(values, object);\r\n   // }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   // isValid() {\r\n   //    const validator = super.isValid();\r\n\r\n   //    // validator.addError('columnName', L('ab.validation.object.name.unique', 'Field columnName must be unique (#name# already used in this Application)').replace('#name#', this.name) );\r\n\r\n   //    return validator;\r\n   // }\r\n\r\n   ///\r\n   /// Working with Actual Object Values:\r\n   ///\r\n\r\n   // return the grid column header definition for this instance of ABFieldFormula\r\n   columnHeader(options) {\r\n      const config = super.columnHeader(options);\r\n\r\n      config.editor = null; // read only\r\n      config.css = \"textCell\";\r\n      config.template = (rowData) => {\r\n         if (rowData.$group) return rowData[this.columnName];\r\n\r\n         return this.format(rowData);\r\n      };\r\n\r\n      return config;\r\n   }\r\n\r\n   /*\r\n    * @funciton formComponent\r\n    * returns a drag and droppable component that is used on the UI\r\n    * interface builder to place form components related to this ABField.\r\n    *\r\n    * an ABField defines which form component is used to edit it's contents.\r\n    * However, what is returned here, needs to be able to create an instance of\r\n    * the component that will be stored with the ABViewForm.\r\n    */\r\n   formComponent() {\r\n      // not support in the form widget\r\n      return super.formComponent(\"fieldreadonly\");\r\n   }\r\n\r\n   detailComponent() {\r\n      const detailComponentSetting = super.detailComponent();\r\n\r\n      detailComponentSetting.common = () => {\r\n         return {\r\n            key: \"detailtext\",\r\n         };\r\n      };\r\n\r\n      return detailComponentSetting;\r\n   }\r\n};\r\n","const ABFieldImageCore = require(\"../../core/dataFields/ABFieldImageCore\");\r\n\r\nconst L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABFieldImage extends ABFieldImageCore {\r\n   constructor(values, object) {\r\n      super(values, object);\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /**\r\n    * @function destroy\r\n    * On a destroy operation, ask if the user wants to keep the related images.\r\n    */\r\n   async destroy() {\r\n      return new Promise((resolve, reject) => {\r\n         // verify we have been .save()d before:\r\n         if (this.id) {\r\n            // Ask the user what to do about the existing images:\r\n            webix.confirm({\r\n               title: L(\"Keep Images?\"),\r\n               message: L(\"Do you want to keep the images referenced by {0}?\", [\r\n                  this.label,\r\n               ]),\r\n               callback: async (result) => {\r\n                  // update this setting so the server can respond correctly in\r\n                  // ABFieldImage.migrateDrop()\r\n                  this.settings.removeExistingData = result ? 0 : 1;\r\n\r\n                  try {\r\n                     await this.save();\r\n\r\n                     // TODO: a reminder that you still got alot on the server to do!\r\n                     webix.alert({\r\n                        title: \"!! TODO !!\",\r\n                        text:\r\n                           \"ABFieldImage.destroy(): Tell a Developer to actually pay attention to this!\",\r\n                     });\r\n\r\n                     await super.destroy();\r\n\r\n                     resolve();\r\n                  } catch (err) {\r\n                     reject(err);\r\n                  }\r\n               },\r\n            });\r\n         } else {\r\n            resolve(); // nothing to do really\r\n         }\r\n      });\r\n   }\r\n\r\n   ///\r\n   /// Working with Actual Object Values:\r\n   ///\r\n\r\n   idCustomContainer(obj, formId) {\r\n      // if formId is passed the field is in a form view not a grid and\r\n      // we won't have the obj and each time this\r\n      // field is in a form it will conflict with the last one rendered\r\n      if (formId) {\r\n         return `${this.columnName.replace(/ /g, \"_\")}-${formId}-image`;\r\n      } else {\r\n         return `${this.columnName.replace(/ /g, \"_\")}-${obj.id}-image`;\r\n      }\r\n   }\r\n\r\n   // return the grid column header definition for this instance of ABFieldImage\r\n   columnHeader(options) {\r\n      options = options || {};\r\n\r\n      const config = super.columnHeader(options);\r\n      const field = this;\r\n\r\n      config.editor = false; // 'text';  // '[edit_type]'   for your unique situation\r\n      // config.sort   = 'string' // '[sort_type]'   for your unique situation\r\n\r\n      let containerHeight = \"100%\";\r\n      let imageHeight = \"100%\";\r\n      let width = \"100%\";\r\n      let imageSrcHeight = \"100%\";\r\n      if (field.settings.useWidth) {\r\n         config.width = field.settings.imageWidth || 100;\r\n         const heightVal =\r\n            field.settings.useHeight && field.settings.imageHeight\r\n               ? field.settings.imageHeight + 20\r\n               : 80;\r\n         containerHeight = `${heightVal}px`;\r\n         width = `${field.settings.imageWidth || 100}px`;\r\n         imageHeight =\r\n            field.settings.useHeight && field.settings.imageHeight\r\n               ? field.settings.imageHeight\r\n               : 80;\r\n         imageHeight = `${imageHeight}px`;\r\n         imageSrcHeight =\r\n            field.settings.useHeight && field.settings.imageHeight\r\n               ? field.settings.imageHeight\r\n               : 60;\r\n         imageSrcHeight = `${imageSrcHeight}px`;\r\n      } else if (options.width) {\r\n         config.width = options.width || 100;\r\n         width = `${options.width || 100}px`;\r\n         imageHeight = options.width;\r\n         imageHeight = `${imageHeight}px`;\r\n         imageSrcHeight = options.width;\r\n         imageSrcHeight = `${imageSrcHeight}px`;\r\n      }\r\n      if (\r\n         field.settings.useHeight &&\r\n         field.settings.imageHeight &&\r\n         field.settings.imageHeight != \"NaN\"\r\n      ) {\r\n         config.height = field.settings.imageHeight || 0;\r\n         containerHeight = parseInt(config.height) + 20;\r\n         containerHeight = `${containerHeight}px`;\r\n         imageHeight = parseInt(config.height);\r\n         imageHeight = `${imageHeight}px`;\r\n         imageSrcHeight = parseInt(config.height);\r\n         imageSrcHeight = `${imageSrcHeight}px`;\r\n      }\r\n\r\n      const editable = options.editable;\r\n\r\n      // populate our default template:\r\n      // debugger;\r\n      config.template = (obj) => {\r\n         if (obj.$group) return obj[this.columnName];\r\n\r\n         const widthStyle = `width: ${width}; height: ${containerHeight}`;\r\n\r\n         const imageStyle = `width: ${width}; height: ${imageHeight}`;\r\n\r\n         const imgDiv = [\r\n            `<div class=\"ab-image-data-field\" style=\"float: left; ${widthStyle}\">`,\r\n            `<div class=\"webix_view ab-image-holder\" style=\"${imageStyle}\">`,\r\n            '<div class=\"webix_template\">',\r\n            this.imageTemplate(obj, {\r\n               editable: editable,\r\n               height: imageSrcHeight,\r\n               width: width,\r\n            }),\r\n            \"</div>\",\r\n            \"</div>\",\r\n            \"</div>\",\r\n         ].join(\"\");\r\n\r\n         return imgDiv;\r\n      };\r\n\r\n      return config;\r\n   }\r\n\r\n   /*\r\n    * @function customDisplay\r\n    * perform any custom display modifications for this field.\r\n    * @param {object} row is the {name=>value} hash of the current row of data.\r\n    * @param {App} App the shared ui App object useful more making globally\r\n    *\t\t\t\t\tunique id references.\r\n    * @param {HtmlDOM} node  the HTML Dom object for this field's display.\r\n    * @param {object} options - {\r\n    * \t\teditable {Bool}   where or not this field is currently editable\r\n    * \t\tformId {string}   the id of the presenting form if any\r\n    * }\r\n    */\r\n   customDisplay(row, App, node, options) {\r\n      // sanity check.\r\n      if (!node) {\r\n         return;\r\n      }\r\n      const L = App.Label;\r\n\r\n      options = options || {};\r\n\r\n      const idBase = App.unique(this.idCustomContainer(row, options.formId));\r\n\r\n      // safety check:\r\n      // webix seems to crash if you specify a .container that doesn't exists:\r\n      // Note: when the template is first created, we don't have App.unique()\r\n      const parentContainer = node.querySelector(\".ab-image-holder\");\r\n      if (parentContainer) {\r\n         parentContainer.innerHTML = \"\";\r\n         // parentContainer.id = idBase;\t// change it to the unique one.\r\n\r\n         let imgHeight = 0;\r\n         if (this.settings.useHeight) {\r\n            imgHeight = parseInt(this.settings.imageHeight) || imgHeight;\r\n         }\r\n\r\n         let imgWidth = 0;\r\n         if (this.settings.useWidth) {\r\n            imgWidth = parseInt(this.settings.imageWidth) || imgWidth;\r\n         }\r\n\r\n         if (options.height) imgHeight = options.height;\r\n\r\n         if (options.width) imgWidth = options.width;\r\n         //// TODO: actually pay attention to the height and width when\r\n         //// displaying the images.\r\n\r\n         // use a webix component for displaying the content.\r\n         // do this so I can use the progress spinner\r\n         const webixContainer = webix.ui({\r\n            view: \"template\",\r\n            css: \"ab-image-holder\",\r\n            // id: ids.container,\r\n            container: parentContainer,\r\n\r\n            template: this.imageTemplate(row, {\r\n               editable: options.editable,\r\n               height: imgHeight ? imgHeight + \"px\" : 0,\r\n               width: imgWidth ? imgWidth + \"px\" : 0,\r\n            }),\r\n\r\n            borderless: true,\r\n            height: imgHeight,\r\n            width: imgWidth,\r\n         });\r\n         webix.extend(webixContainer, webix.ProgressBar);\r\n\r\n         ////\r\n         //// Prepare the Uploader\r\n         ////\r\n\r\n         if (!options.editable) {\r\n            const domNode = parentContainer.querySelector(\".delete-image\");\r\n            if (domNode) domNode.style.display = \"none\";\r\n\r\n            return;\r\n         }\r\n\r\n         const url = this.urlUpload();\r\n\r\n         const uploader = webix.ui({\r\n            view: \"uploader\",\r\n            // id:ids.uploader,\r\n            apiOnly: true,\r\n            upload: url,\r\n            inputName: \"file\",\r\n            multiple: false,\r\n            // formData:{\r\n            // \tappKey:application.name,\r\n            // \tpermission:actionKey,\r\n            // \tisWebix:true,\r\n            // \timageParam:'upload'\r\n            // },\r\n            on: {\r\n               // when a file is added to the uploader\r\n               onBeforeFileAdd: function (item) {\r\n                  node.classList.remove(\"webix_invalid\");\r\n                  node.classList.remove(\"webix_invalid_cell\");\r\n\r\n                  // verify file type\r\n                  const acceptableTypes = [\"jpg\", \"jpeg\", \"bmp\", \"png\", \"gif\"];\r\n                  const type = item.type.toLowerCase();\r\n                  if (acceptableTypes.indexOf(type) == -1) {\r\n                     webix.message(\r\n                        L(\"Only [{0}] images are supported\", [\r\n                           acceptableTypes.join(\", \"),\r\n                        ])\r\n                     );\r\n                     return false;\r\n                  }\r\n\r\n                  // start progress indicator\r\n                  webixContainer.showProgress({\r\n                     type: \"icon\",\r\n                     delay: 2000,\r\n                  });\r\n               },\r\n\r\n               // when upload is complete:\r\n               onFileUpload: async (item, response) => {\r\n                  webixContainer.hideProgress();\r\n                  this.showImage(response.data.uuid, node);\r\n\r\n                  // TODO: delete previous image from our OPsPortal service?\r\n\r\n                  const values = {};\r\n                  values[this.columnName] = response.data.uuid;\r\n\r\n                  // update just this value on our current object.model\r\n                  if (row.id) {\r\n                     try {\r\n                        await this.object.model().update(row.id, values);\r\n\r\n                        // update the client side data object as well so other data changes won't cause this save to be reverted\r\n                        if (\r\n                           $$(node) &&\r\n                           $$(node).getItem &&\r\n                           $$(node).getItem(row.id)\r\n                        ) {\r\n                           $$(node).updateItem(row.id, values);\r\n                        } else {\r\n                           // if you scroll the table the connection to the datatable is lost so we need to find it again\r\n                           const dataTable = document.querySelector(\r\n                              \".webix_dtable\"\r\n                           );\r\n                           if ($$(dataTable) && $$(dataTable).getItem(row.id))\r\n                              $$(dataTable).updateItem(row.id, values);\r\n                        }\r\n                     } catch (err) {\r\n                        node.classList.add(\"webix_invalid\");\r\n                        node.classList.add(\"webix_invalid_cell\");\r\n\r\n                        this.AB.notify.developer(err, {\r\n                           context:\r\n                              \"ABFieldImage.onFileUpload(): model.update(): error updating our entry\",\r\n                           field: this,\r\n                           row,\r\n                           values,\r\n                        });\r\n                     }\r\n                  }\r\n\r\n                  // update value in the form component\r\n                  this.setValue($$(node), values);\r\n               },\r\n\r\n               // if an error was returned\r\n               onFileUploadError: (item, response) => {\r\n                  this.AB.notify.developer(new Error(\"Error uploading image\"), {\r\n                     context: \"ABFieldImage. uploader. onFileUploadError():\",\r\n                     field: this,\r\n                     response,\r\n                  });\r\n                  webixContainer.hideProgress();\r\n               },\r\n            },\r\n         });\r\n         uploader.addDropZone(webixContainer.$view);\r\n\r\n         // store upload id into html element (it will be used in .customEdit)\r\n         node.dataset[\"uploaderId\"] = uploader.config.id;\r\n\r\n         // if we are working in a datagrid we need to add a click event to\r\n         // check if the user is clicking on the delete button\r\n         if (node.className == \"webix_cell\") {\r\n            node.addEventListener(\"click\", (e) => {\r\n               if (e.target.className.indexOf(\"delete-image\") > -1) {\r\n                  this.deleteImage = true;\r\n               }\r\n            });\r\n         }\r\n      }\r\n   }\r\n\r\n   /*\r\n    * @function customEdit\r\n    *\r\n    * @param {object} row is the {name=>value} hash of the current row of data.\r\n    * @param {App} App the shared ui App object useful more making globally\r\n    *\t\t\t\t\tunique id references.\r\n    * @param {HtmlDOM} node  the HTML Dom object for this field's display.\r\n    */\r\n   customEdit(row, App, node, id, evt) {\r\n      if (\r\n         (evt && evt.target.className.indexOf(\"delete-image\") > -1) ||\r\n         this.deleteImage\r\n      ) {\r\n         delete this.deleteImage;\r\n         if (!row.removeDefaultImage) {\r\n            row.removeDefaultImage = [];\r\n         }\r\n         row.removeDefaultImage[this.columnName] = true;\r\n\r\n         // Ask the user if they really want to delete the photo\r\n         webix.confirm({\r\n            title: L(\"Are you sure you want to remove this image?\"),\r\n            callback: async (result) => {\r\n               const confirmDelete = result ? 1 : 0;\r\n               if (confirmDelete) {\r\n                  // update just this value on our current object.model\r\n                  const values = {};\r\n                  values[this.columnName] = \"\"; // removing the reference to the image here\r\n\r\n                  try {\r\n                     await this.object.model().update(row.id, values);\r\n\r\n                     // update the client side data object as well so other data changes won't cause this save to be reverted\r\n                     if ($$(node) && $$(node).updateItem)\r\n                        $$(node).updateItem(row.id, values);\r\n\r\n                     // update value in the form component\r\n                     this.setValue($$(node), values);\r\n                  } catch (err) {\r\n                     node.classList.add(\"webix_invalid\");\r\n                     node.classList.add(\"webix_invalid_cell\");\r\n\r\n                     this.AB.notify.developer(err, {\r\n                        context:\r\n                           \"ABFieldImage: customEdit(): Error updating our entry\",\r\n                        field: this,\r\n                        row: row,\r\n                        values: values,\r\n                     });\r\n                  }\r\n               }\r\n            },\r\n         });\r\n      } else {\r\n         const uploaderId = node.dataset[\"uploaderId\"],\r\n            uploader = $$(uploaderId);\r\n\r\n         if (uploader && uploader.fileDialog)\r\n            uploader.fileDialog({ rowid: row.id });\r\n      }\r\n\r\n      return false;\r\n   }\r\n\r\n   /*\r\n    * @funciton formComponent\r\n    * returns a drag and droppable component that is used on the UI\r\n    * interface builder to place form components related to this ABField.\r\n    *\r\n    * an ABField defines which form component is used to edit it's contents.\r\n    * However, what is returned here, needs to be able to create an instance of\r\n    * the component that will be stored with the ABViewForm.\r\n    */\r\n   formComponent() {\r\n      return super.formComponent(\"fieldcustom\");\r\n   }\r\n\r\n   detailComponent() {\r\n      const detailComponentSetting = super.detailComponent();\r\n\r\n      detailComponentSetting.common = () => {\r\n         return {\r\n            key: \"detailimage\",\r\n         };\r\n      };\r\n\r\n      return detailComponentSetting;\r\n   }\r\n\r\n   imageTemplate(obj, options) {\r\n      options = options || {};\r\n      options.height = options.height || \"100%\";\r\n      options.width = options.width || \"100%\";\r\n\r\n      // deault view is icon:\r\n      let iconDisplay = \"\";\r\n      let imageDisplay = \"display:none;\";\r\n      let imageURL = \"\";\r\n\r\n      let value = \"\";\r\n      let isRemoveDefaultImage = false;\r\n      if (obj[this.columnName]) {\r\n         value = obj[this.columnName];\r\n      }\r\n      if (obj.removeDefaultImage) {\r\n         if (obj.removeDefaultImage[this.columnName]) {\r\n            isRemoveDefaultImage = obj.removeDefaultImage[this.columnName];\r\n         }\r\n      }\r\n\r\n      if (value) {\r\n         iconDisplay = \"display:none;\";\r\n         imageDisplay = \"\";\r\n         imageURL = `background-image:url('${this.urlImage(value)}');`;\r\n      } else {\r\n         if (this.settings.useDefaultImage && !isRemoveDefaultImage) {\r\n            iconDisplay = \"display:none;\";\r\n            imageDisplay = \"\";\r\n            imageURL = `background-image:url('${this.urlImage(\r\n               this.settings.defaultImageUrl\r\n            )}');`;\r\n         }\r\n      }\r\n\r\n      let html = [\r\n         `<div class=\"image-data-field-icon\" style=\"${iconDisplay}\">#drag#</div>` +\r\n            `<div class=\"image-data-field-image\" style=\"${imageDisplay} width:${options.width}; height:${options.height}; ${imageURL}\">#remove#</div>`,\r\n      ].join(\"\");\r\n\r\n      html = html.replace(\r\n         \"#drag#\",\r\n         options.editable\r\n            ? `<div>${L(\"Drag and drop or click here\")}</div>`\r\n            : \"\"\r\n      );\r\n      html = html.replace(\r\n         \"#remove#\",\r\n         options.editable\r\n            ? `<a style=\"${imageDisplay}\" class=\"ab-delete-photo\" href=\"javascript:void(0);\"><i class=\"fa fa-times delete-image\"></i></a>`\r\n            : \"\"\r\n      );\r\n\r\n      return html;\r\n   }\r\n\r\n   showImage(uuid, node) {\r\n      const parentContainer = node.querySelector(\".ab-image-holder\");\r\n      if (parentContainer) {\r\n         parentContainer.querySelector(\".image-data-field-icon\").style.display =\r\n            \"none\";\r\n         const image = parentContainer.querySelector(\".image-data-field-image\");\r\n         image.style.display = \"\";\r\n         image.style.backgroundImage = `url('${this.urlImage(uuid)}')`;\r\n         image.setAttribute(\"image-uuid\", uuid);\r\n      }\r\n   }\r\n\r\n   getValue(item, rowData) {\r\n      const image = item.$view.querySelector(\".image-data-field-image\");\r\n      return image.getAttribute(\"image-uuid\");\r\n   }\r\n\r\n   setValue(item, rowData) {\r\n      if (!item) return;\r\n\r\n      const domNode = item.$view;\r\n      if (!domNode) return;\r\n\r\n      let val = null;\r\n      if (rowData) {\r\n         val = this.dataValue(rowData);\r\n\r\n         // if (val == null) {\r\n         // \t// assume they just sent us a single value\r\n         // \tval = rowData;\r\n         // }\r\n      }\r\n\r\n      const imageIcon = domNode.querySelector(\".image-data-field-icon\");\r\n      if (imageIcon) imageIcon.style.display = val ? \"none\" : \"\";\r\n\r\n      const image = domNode.querySelector(\".image-data-field-image\");\r\n      if (image) {\r\n         const imageDeleteIcon = image.querySelector(\".ab-delete-photo\");\r\n         if (imageDeleteIcon)\r\n            imageDeleteIcon.style.display = val ? \"block\" : \"none\";\r\n\r\n         image.style.display = val ? \"block\" : \"none\";\r\n\r\n         if (val) {\r\n            image.style.backgroundImage = `url('${this.urlImage(val)}')`;\r\n            image.setAttribute(\"image-uuid\", val);\r\n         } else {\r\n            image.removeAttribute(\"image-uuid\");\r\n         }\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method toBase64\r\n    *\r\n    * @param {Object} rowData\r\n    *\r\n    * @return {Promise} - {\r\n    * \t\tdata: string,\r\n    * \t\twidth: number,\r\n    * \t\theight: number\r\n    * }\r\n    */\r\n   toBase64(rowData) {\r\n      const promise = new Promise((resolve, reject) => {\r\n         if (!rowData[this.columnName]) return resolve(null);\r\n\r\n         const img = new Image();\r\n         img.crossOrigin = \"Anonymous\";\r\n         img.onerror = function (err) {\r\n            reject(err);\r\n         };\r\n         img.onload = function () {\r\n            const canvas = document.createElement(\"canvas\");\r\n            canvas.width = img.width;\r\n            canvas.height = img.height;\r\n            const ctx = canvas.getContext(\"2d\");\r\n            ctx.drawImage(img, 0, 0);\r\n            const dataURL = canvas.toDataURL();\r\n            const imageData = {\r\n               data: dataURL,\r\n               width: img.width,\r\n               height: img.height,\r\n            };\r\n            resolve(imageData);\r\n         };\r\n\r\n         img.src = this.urlImage(rowData[this.columnName]);\r\n      });\r\n      return promise;\r\n   }\r\n\r\n   /**\r\n    * @method urlImage()\r\n    * return the url to use to reference the image by it's id.\r\n    * @param {string} id\r\n    *        the file.uuid reference of this image.\r\n    * @return {string}\r\n    */\r\n   urlImage(id) {\r\n      return `/file/${id}`;\r\n   }\r\n\r\n   /**\r\n    * @method urlUpload()\r\n    * return the url for uploading a file.\r\n    * When used in a webix widget, the response is different than our normal\r\n    * API, so we can pass in a param to indicate a response compatible with\r\n    * webix.\r\n    * @param {bool} isWebix\r\n    *        Is this url being used by a webix component?\r\n    * @return {string}\r\n    */\r\n   urlUpload(isWebix = true) {\r\n      return `/file/upload/${this.object.id}/${this.id}/${isWebix ? \"1\" : \"0\"}`;\r\n   }\r\n};\r\n","const ABFieldJsonCore = require(\"../../core/dataFields/ABFieldJsonCore\");\r\n\r\nmodule.exports = class ABFieldJson extends ABFieldJsonCore {\r\n   // constructor(values, object) {\r\n   //    super(values, object);\r\n   // }\r\n\r\n   ///\r\n   /// Working with Actual Object Values:\r\n   ///\r\n\r\n   // return the grid column header definition for this instance of ABFieldJson\r\n   columnHeader(options) {\r\n      const config = super.columnHeader(options);\r\n\r\n      // config.editor = null; // read only for now\r\n      config.editor = \"text\";\r\n      config.css = \"textCell\";\r\n\r\n      // when called by ABViewFormCustom, will need a .template() fn.\r\n      // currently we don't need to return anything so ...\r\n      config.template = () => \"\";\r\n\r\n      return config;\r\n   }\r\n\r\n   /*\r\n    * @funciton formComponent\r\n    * returns a drag and droppable component that is used on the UI\r\n    * interface builder to place form components related to this ABField.\r\n    *\r\n    * an ABField defines which form component is used to edit it's contents.\r\n    * However, what is returned here, needs to be able to create an instance of\r\n    * the component that will be stored with the ABViewForm.\r\n    */\r\n   formComponent() {\r\n      // read-only for now\r\n      return super.formComponent(\"fieldreadonly\");\r\n   }\r\n\r\n   detailComponent() {\r\n      const detailComponentSetting = super.detailComponent();\r\n\r\n      detailComponentSetting.common = () => {\r\n         return {\r\n            key: \"detailtext\",\r\n         };\r\n      };\r\n\r\n      return detailComponentSetting;\r\n   }\r\n};\r\n","const ABFieldListCore = require(\"../../core/dataFields/ABFieldListCore\");\r\n\r\nconst L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABFieldList extends ABFieldListCore {\r\n   constructor(values, object) {\r\n      super(values, object);\r\n\r\n      // this._Selectivity = new ABFieldSelectivity(values, object);\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   save() {\r\n      return super.save().then(() => {\r\n         // Now we want to clear out any entries that had values == to item removed from our list:\r\n         if (this.pendingDeletions.length) {\r\n            const model = this.object.model();\r\n\r\n            if (this.settings.isMultiple == true) {\r\n               // find all the entries that have one of the deleted values:\r\n               // use Promise to prevent issues with data being loaded before it is deleted on client side\r\n               return new Promise((resolve, reject) => {\r\n                  let numDone = 0;\r\n                  let numToDo = 0;\r\n\r\n                  model\r\n                     .findAll({})\r\n                     .then((list) => {\r\n                        list = list.data || list;\r\n\r\n                        // for each list item\r\n                        list.forEach((item) => {\r\n                           if (Array.isArray(item[this.columnName])) {\r\n                              // get fields not in pendingDeletions\r\n                              let remainingFields = item[\r\n                                 this.columnName\r\n                              ].filter((i) => {\r\n                                 return (\r\n                                    this.pendingDeletions.indexOf(i.id) == -1\r\n                                 );\r\n                              });\r\n\r\n                              if (\r\n                                 remainingFields.length !=\r\n                                 item[this.columnName].length\r\n                              ) {\r\n                                 numToDo++;\r\n\r\n                                 // update value to new field list\r\n                                 if (remainingFields.length == 0) {\r\n                                    remainingFields = \"\";\r\n                                 }\r\n                                 const value = {};\r\n                                 value[this.columnName] = remainingFields;\r\n                                 model.update(item.id, value).then(() => {\r\n                                    // if ($$(node) && $$(node).updateItem)\r\n                                    //    $$(node).updateItem(value.id, value);\r\n                                    numDone++;\r\n                                    if (numDone >= numToDo) {\r\n                                       resolve();\r\n                                    }\r\n                                 });\r\n                              }\r\n                           }\r\n                        });\r\n                        if (numToDo == 0) {\r\n                           resolve();\r\n                        }\r\n                     })\r\n                     .catch(reject);\r\n               });\r\n            } else {\r\n               // find all the entries that have one of the deleted values:\r\n               const where = {};\r\n               where[this.columnName] = this.pendingDeletions;\r\n               return new Promise((resolve, reject) => {\r\n                  let numDone = 0;\r\n\r\n                  model\r\n                     .findAll(where)\r\n                     .then((list) => {\r\n                        // make sure we just work with the { data:[] } that was returned\r\n                        list = list.data || list;\r\n\r\n                        // for each one, set the value to ''\r\n                        // NOTE: jQuery ajax routines filter out null values, so we can't\r\n                        // set them to null. :(\r\n                        // const numDone = 0;\r\n                        const value = {};\r\n                        value[this.columnName] = \"\";\r\n\r\n                        list.forEach((item) => {\r\n                           model.update(item.id, value).then(() => {\r\n                              numDone++;\r\n                              if (numDone >= list.length) {\r\n                                 resolve();\r\n                              }\r\n                           });\r\n                        });\r\n                        if (list.length == 0) {\r\n                           resolve();\r\n                        }\r\n                     })\r\n                     .catch(reject);\r\n               });\r\n            }\r\n         }\r\n      });\r\n   }\r\n\r\n   isValid() {\r\n      const validator = super.isValid();\r\n\r\n      // validator.addError('columnName', L('ab.validation.object.name.unique', 'Field columnName must be unique (#name# already used in this Application)').replace('#name#', this.name) );\r\n\r\n      return validator;\r\n   }\r\n\r\n   ///\r\n   /// Working with Actual Object Values:\r\n   ///\r\n\r\n   // return the grid column header definition for this instance of ABFieldList\r\n   columnHeader(options) {\r\n      options = options || {};\r\n\r\n      const config = super.columnHeader(options);\r\n      const field = this;\r\n      const App = field.AB._App;\r\n\r\n      var formClass = \"\";\r\n      var placeHolder = \"\";\r\n      if (options.editable) {\r\n         formClass = \" form-entry\";\r\n         placeHolder = `<span style='color: #CCC; padding: 0 5px;'>${L(\r\n            \"Select item\"\r\n         )}</span>`;\r\n      }\r\n      var isRemovable = options.editable && !this.settings.required;\r\n\r\n      config.editFormat = (value) => {\r\n         return this.editFormat(value);\r\n      };\r\n      config.editParse = (value) => {\r\n         return this.editParse(value);\r\n      };\r\n\r\n      config.template = (rowData) => {\r\n         let selectedData = rowData[this.columnName];\r\n         if (selectedData == null) return \"\";\r\n         if (this.settings.isMultiple) {\r\n            selectedData = _getSelectedOptions(this, rowData);\r\n         }\r\n         var values = [];\r\n         values.push('<div class=\"badgeContainer\">');\r\n         let hasCustomColor = \"\";\r\n         let optionHex = \"\";\r\n         if (\r\n            selectedData &&\r\n            Array.isArray(selectedData) &&\r\n            selectedData.length\r\n         ) {\r\n            selectedData.forEach((val) => {\r\n               if (this.settings.hasColors && val.hex) {\r\n                  hasCustomColor = \"hascustomcolor\";\r\n                  optionHex = `background: ${val.hex};`;\r\n               }\r\n               if (val.text) {\r\n                  values.push(\r\n                     `<div style=\"${optionHex}\" class='webix_multicombo_value ${hasCustomColor}'><span>${val.text}</span><!-- span data-uuid=\"${val.id}\" class=\"webix_multicombo_delete\" role=\"button\" aria-label=\"Remove item\"></span --></div>`\r\n                  );\r\n               }\r\n            });\r\n            if (selectedData.length > 1) {\r\n               values.push(\r\n                  `<span class=\"webix_badge selectivityBadge\">${selectedData.length}</span>`\r\n               );\r\n            }\r\n         } else if (selectedData) {\r\n            let selectedObj = selectedData;\r\n            if (typeof selectedData == \"string\") {\r\n               selectedObj = this.getItemFromVal(selectedData);\r\n            }\r\n            if (!selectedObj) return \"\";\r\n            if (this.settings.hasColors && selectedObj.hex) {\r\n               hasCustomColor = \"hascustomcolor\";\r\n               optionHex = `background: ${selectedObj.hex};`;\r\n            }\r\n            if (selectedObj.text) {\r\n               let clear = \"\";\r\n               if (options.editable) {\r\n                  clear = `<span class=\"webix_multicombo_delete clear-combo-value\" role=\"button\" aria-label=\"Remove item\"></span>`;\r\n               }\r\n               values.push(\r\n                  `<div style=\"${optionHex}\" class='webix_multicombo_value ${hasCustomColor}'>${clear}<span class=\"ellip\">${selectedObj.text}</span></div>`\r\n               );\r\n            }\r\n         } else {\r\n            return \"\";\r\n         }\r\n         values.push(\"</div>\");\r\n         return values.join(\"\");\r\n      };\r\n      config.editor = this.settings.isMultiple ? \"multiselect\" : \"combo\";\r\n      config.suggest = {\r\n         button: true,\r\n         data: this.settings.options.map(function (opt) {\r\n            return {\r\n               id: opt.id,\r\n               value: opt.text,\r\n               hex: opt.hex,\r\n            };\r\n         }),\r\n      };\r\n      if (this.settings.isMultiple) {\r\n         config.suggest.view = \"checksuggest\";\r\n      }\r\n\r\n      return config;\r\n   }\r\n\r\n   /*\r\n    * @function customDisplay\r\n    * perform any custom display modifications for this field.\r\n    * @param {object} row is the {name=>value} hash of the current row of data.\r\n    * @param {App} App the shared ui App object useful more making globally\r\n    *             unique id references.\r\n    * @param {HtmlDOM} node  the HTML Dom object for this field's display.\r\n    */\r\n   customDisplay(row, App, node, options) {\r\n      // sanity check.\r\n      if (!node) {\r\n         return;\r\n      }\r\n\r\n      options = options || {};\r\n\r\n      if (!node.querySelector) return;\r\n\r\n      var clearButton = node.querySelector(\r\n         \".selectivity-single-selected-item-remove\"\r\n      );\r\n      if (clearButton) {\r\n         clearButton.addEventListener(\"click\", (e) => {\r\n            e.stopPropagation();\r\n            var values = {};\r\n            values[this.columnName] = \"\";\r\n            this.object\r\n               .model()\r\n               .update(row.id, values)\r\n               .then(() => {\r\n                  // update the client side data object as well so other data changes won't cause this save to be reverted\r\n                  $$(node)?.updateItem?.(row.id, values);\r\n               })\r\n               .catch((err) => {\r\n                  node.classList.add(\"webix_invalid\");\r\n                  node.classList.add(\"webix_invalid_cell\");\r\n\r\n                  this.AB.notify.developer(err, {\r\n                     message: \"Error updating our entry.\",\r\n                     row: row,\r\n                     values: \"\",\r\n                     field: this.toObj(),\r\n                  });\r\n               });\r\n         });\r\n      }\r\n   }\r\n\r\n   /*\r\n    * @function customEdit\r\n    *\r\n    * @param {object} row is the {name=>value} hash of the current row of data.\r\n    * @param {App} App the shared ui App object useful more making globally\r\n    *             unique id references.\r\n    * @param {HtmlDOM} node  the HTML Dom object for this field's display.\r\n    */\r\n   // customEdit(row, App, node) {\r\n   //    return super.customEdit(row, App, node);\r\n   // }\r\n\r\n   /*\r\n    * @funciton formComponent\r\n    * returns a drag and droppable component that is used on the UI\r\n    * interface builder to place form components related to this ABField.\r\n    *\r\n    * an ABField defines which form component is used to edit it's contents.\r\n    * However, what is returned here, needs to be able to create an instance of\r\n    * the component that will be stored with the ABViewForm.\r\n    */\r\n   formComponent() {\r\n      // NOTE: what is being returned here needs to mimic an ABView CLASS.\r\n      // primarily the .common() and .newInstance() methods.\r\n      const formComponentSetting = super.formComponent();\r\n\r\n      // .common() is used to create the display in the list\r\n      formComponentSetting.common = () => {\r\n         return {\r\n            key: this.settings.isMultiple ? \"selectmultiple\" : \"selectsingle\",\r\n            settings: {\r\n               options: this.settings.options.map(function (opt) {\r\n                  return {\r\n                     id: opt.id,\r\n                     value: opt.text,\r\n                     hex: opt.hex,\r\n                  };\r\n               }),\r\n            },\r\n         };\r\n      };\r\n\r\n      return formComponentSetting;\r\n   }\r\n\r\n   detailComponent() {\r\n      const detailComponentSetting = super.detailComponent();\r\n\r\n      detailComponentSetting.common = () => {\r\n         return {\r\n            key: this.settings.isMultiple ? \"detailtext\" : \"detailtext\",\r\n         };\r\n      };\r\n\r\n      return detailComponentSetting;\r\n   }\r\n\r\n   editFormat(value) {\r\n      if (!value) return \"\";\r\n      let vals = [];\r\n      if (Array.isArray(value)) {\r\n         value.forEach((val) => {\r\n            if (typeof val == \"object\") {\r\n               vals.push(val.id);\r\n            } else {\r\n               let itemObj = this.getItemFromVal(val);\r\n               vals.push(itemObj.id);\r\n            }\r\n         });\r\n      } else {\r\n         if (typeof value == \"object\") {\r\n            vals.push(value.id);\r\n         } else {\r\n            let itemObj = this.getItemFromVal(value);\r\n            if (itemObj && itemObj.id) {\r\n               vals.push(itemObj.id);\r\n            }\r\n         }\r\n      }\r\n      return vals.join();\r\n   }\r\n\r\n   editParse(value) {\r\n      if (this.settings.isMultiple) {\r\n         let returnVals = [];\r\n         let vals = value.split(\",\");\r\n         vals.forEach((val) => {\r\n            returnVals.push(this.getItemFromVal(val));\r\n         });\r\n         return returnVals;\r\n      } else {\r\n         return value;\r\n      }\r\n   }\r\n\r\n   getItemFromVal(val) {\r\n      let item;\r\n      let options = this.options();\r\n      if (options.length > 1) {\r\n         options.forEach((option) => {\r\n            if (option.id == val) {\r\n               item = option;\r\n               return false;\r\n            }\r\n         });\r\n         return item;\r\n      } else {\r\n         return \"\";\r\n      }\r\n   }\r\n\r\n   getValue(item, rowData) {\r\n      return this.editParse(item.getValue());\r\n   }\r\n\r\n   getSelectedOptions(field, rowData = {}) {\r\n      let result = [];\r\n      if (rowData[this.columnName] != null) {\r\n         result = rowData[this.columnName];\r\n      } else if (rowData) {\r\n         if (Array.isArray(rowData)) {\r\n            result = rowData;\r\n         } else {\r\n            result.push(rowData);\r\n         }\r\n      }\r\n      if (result.length) {\r\n         if (typeof result == \"string\") result = JSON.parse(result);\r\n\r\n         // Pull text with current language\r\n         if (this.settings) {\r\n            result = (this.settings.options || []).filter((opt) => {\r\n               return (\r\n                  (result || []).filter((v) => (opt.id || opt) == (v.id || v))\r\n                     .length > 0\r\n               );\r\n            });\r\n         }\r\n      }\r\n\r\n      return result;\r\n   }\r\n\r\n   setValue(item, rowData) {\r\n      if (!item) return;\r\n\r\n      if (this.settings.isMultiple) {\r\n         // do we need anything here?\r\n      } else {\r\n         super.setValue(item, rowData);\r\n      }\r\n   }\r\n};\r\n\r\n// == Private methods ==\r\nfunction _getSelectedOptions(field, rowData = {}) {\r\n   let result = [];\r\n   if (rowData[field.columnName] != null) {\r\n      result = rowData[field.columnName];\r\n\r\n      if (typeof result == \"string\") result = JSON.parse(result);\r\n\r\n      // Pull text with current language\r\n      if (field.settings) {\r\n         result = (field.settings.options || []).filter((opt) => {\r\n            return (\r\n               (result || []).filter((v) => (opt.id || opt) == (v.id || v))\r\n                  .length > 0\r\n            );\r\n         });\r\n      }\r\n   }\r\n\r\n   return result;\r\n}\r\n","const ABFieldLongTextCore = require(\"../../core/dataFields/ABFieldLongTextCore\");\r\n\r\nmodule.exports = class ABFieldLongText extends ABFieldLongTextCore {\r\n   constructor(values, object) {\r\n      super(values, object);\r\n\r\n      /*\r\n\t\t{\r\n\t\t\tsettings: {\r\n\t\t\t\tdefault: 'string',\r\n\t\t\t\tsupportMultilingual: 1/0\r\n\t\t\t}\r\n\t\t}\r\n\t\t*/\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   isValid() {\r\n      const validator = super.isValid();\r\n\r\n      // validator.addError('columnName', L('ab.validation.object.name.unique', 'Field columnName must be unique (#name# already used in this Application)').replace('#name#', this.name) );\r\n\r\n      return validator;\r\n   }\r\n\r\n   ///\r\n   /// Working with Actual Object Values:\r\n   ///\r\n\r\n   // return the grid column header definition for this instance of ABFieldLongText\r\n   columnHeader(options) {\r\n      const config = super.columnHeader(options);\r\n\r\n      config.editor = \"text\"; // '[edit_type]'   for your unique situation\r\n      // config.sort = 'string' // '[sort_type]'   for your unique situation\r\n      config.template = (obj, common, value, col, ind) => {\r\n         return (value || \"\").toString().replace(/[<]/g, \"&lt;\");\r\n      };\r\n\r\n      return config;\r\n   }\r\n\r\n   /*\r\n    * @funciton formComponent\r\n    * returns a drag and droppable component that is used on the UI\r\n    * interface builder to place form components related to this ABField.\r\n    *\r\n    * an ABField defines which form component is used to edit it's contents.\r\n    * However, what is returned here, needs to be able to create an instance of\r\n    * the component that will be stored with the ABViewForm.\r\n    */\r\n   formComponent() {\r\n      // NOTE: what is being returned here needs to mimic an ABView CLASS.\r\n      // primarily the .common() and .newInstance() methods.\r\n      const formComponentSetting = super.formComponent();\r\n\r\n      // .common() is used to create the display in the list\r\n      formComponentSetting.common = () => {\r\n         return {\r\n            key: \"textbox\",\r\n            settings: {\r\n               type: \"multiple\",\r\n            },\r\n         };\r\n      };\r\n\r\n      return formComponentSetting;\r\n   }\r\n\r\n   detailComponent() {\r\n      const detailComponentSetting = super.detailComponent();\r\n\r\n      detailComponentSetting.common = () => {\r\n         return {\r\n            key: \"detailtext\",\r\n         };\r\n      };\r\n\r\n      return detailComponentSetting;\r\n   }\r\n\r\n   /**\r\n    * @method setValue\r\n    * this function uses for form component and mass update popup\r\n    * to get value of fields that apply custom editor\r\n    *\r\n    * @param {Object} item - Webix element\r\n    * @param {Object} rowData - data of row\r\n    *\r\n    * @return {Object}\r\n    */\r\n   setValue(item, rowData) {\r\n      super.setValue(item, rowData, \"\");\r\n   }\r\n};\r\n","const ABFieldNumberCore = require(\"../../core/dataFields/ABFieldNumberCore\");\r\n\r\nlet INIT_EDITOR = false;\r\n// {bool} INIT_EDITOR\r\n// Transition code between previous Framework and current.\r\n// we now need to wait until webix is declared or accessible globally.\r\n\r\nmodule.exports = class ABFieldNumber extends ABFieldNumberCore {\r\n   constructor(values, object) {\r\n      if (!INIT_EDITOR) {\r\n         // NOTE: if you need a unique [edit_type] by your returned config.editor above:\r\n         webix.editors.number = webix.extend(\r\n            {\r\n               // TODO : Validate number only\r\n            },\r\n            webix.editors.text\r\n         );\r\n         INIT_EDITOR = true;\r\n      }\r\n      super(values, object);\r\n   }\r\n\r\n   ///\r\n   /// Working with Actual Object Values:\r\n   ///\r\n\r\n   /**\r\n    * @method formComponent\r\n    * returns a drag and droppable component that is used on the UI\r\n    * interface builder to place form components related to this ABField.\r\n    *\r\n    * an ABField defines which form component is used to edit it's contents.\r\n    * However, what is returned here, needs to be able to create an instance of\r\n    * the component that will be stored with the ABViewForm.\r\n    */\r\n   // return the grid column header definition for this instance of ABFieldNumber\r\n   columnHeader(options) {\r\n      const config = super.columnHeader(options);\r\n\r\n      config.editor = \"number\"; // [edit_type] simple inline editing.\r\n\r\n      config.format = (d) => {\r\n         const rowData = {};\r\n         rowData[this.columnName] = d;\r\n\r\n         return this.format(rowData);\r\n      };\r\n\r\n      return config;\r\n   }\r\n\r\n   /**\r\n    * @method formComponent\r\n    * returns a drag and droppable component that is used on the UI\r\n    * interface builder to place form components related to this ABField.\r\n    *\r\n    * an ABField defines which form component is used to edit it's contents.\r\n    * However, what is returned here, needs to be able to create an instance of\r\n    * the component that will be stored with the ABViewForm.\r\n    */\r\n   formComponent() {\r\n      return super.formComponent(\"numberbox\");\r\n   }\r\n\r\n   detailComponent() {\r\n      const detailComponentSetting = super.detailComponent();\r\n\r\n      detailComponentSetting.common = () => {\r\n         return {\r\n            key: \"detailtext\",\r\n         };\r\n      };\r\n\r\n      return detailComponentSetting;\r\n   }\r\n};\r\n","/*\r\n * ABFieldSelectivity\r\n *\r\n * An ABFieldSelectivity defines a single unique Field/Column in a ABObject.\r\n *\r\n */\r\n\r\nconst ABField = require(\"./ABField\");\r\n\r\nconst defaultSettings = {\r\n   allowClear: true,\r\n   removeOnly: false,\r\n   readOnly: false,\r\n   showDropdown: true,\r\n   placeholder: \"\",\r\n   multiple: false,\r\n};\r\n\r\nconst ABFieldSelectivityDefaults = {\r\n   key: \"selectivity\",\r\n};\r\n\r\nmodule.exports = class ABFieldSelectivity extends ABField {\r\n   constructor(values, object, fieldDefaults = ABFieldSelectivityDefaults) {\r\n      super(values, object, fieldDefaults);\r\n   }\r\n\r\n   // return the default values for this DataField\r\n   static defaults() {\r\n      return {\r\n         key: \"selectivity\",\r\n         icon: \"bars\",\r\n         menuName: \"\",\r\n         description: \"\",\r\n      };\r\n   }\r\n\r\n   selectivityRender(domNode, settings, App, row) {\r\n      if (domNode == null) return;\r\n\r\n      const cypress = settings.dataCy || \"\";\r\n      domNode.setAttribute(\"data-cy\", cypress);\r\n\r\n      // setting up our specific settings:\r\n      settings = settings || {};\r\n      for (const dv in defaultSettings) {\r\n         if (settings[dv] === null) {\r\n            settings[dv] = null;\r\n         } else {\r\n            settings[dv] = settings[dv] || defaultSettings[dv];\r\n         }\r\n      }\r\n\r\n      if (\r\n         settings.multiple &&\r\n         settings.items &&\r\n         settings.data &&\r\n         settings.data.length\r\n      ) {\r\n         settings.data.forEach(function (d) {\r\n            settings.items.map(function (i) {\r\n               if (i.id == d.id) d.hex = i.hex;\r\n            });\r\n         });\r\n         settings[\"data\"] = this.prepareData(\r\n            settings[\"data\"],\r\n            settings.multiple\r\n         );\r\n      } else if (settings[\"data\"] == null || settings[\"data\"] == \"\") {\r\n         settings[\"data\"] = this.prepareData([], settings.multiple);\r\n      } else {\r\n         settings[\"data\"] = this.prepareData(\r\n            settings[\"data\"],\r\n            settings.multiple\r\n         );\r\n      }\r\n\r\n      // store the field id so we can look it up on click events later\r\n      settings[\"field\"] = this.id;\r\n\r\n      // Prevent render selectivity duplicate\r\n      if (domNode.selectivity != null) {\r\n         // Refresh selectivity settings\r\n         domNode.selectivity.setOptions(settings);\r\n\r\n         return;\r\n      }\r\n\r\n      settings.element = domNode;\r\n\r\n      // Render selectivity\r\n      let selectivityInput;\r\n      if (settings.multiple) {\r\n         if (settings.isUsers) {\r\n            settings.templates = {\r\n               multipleSelectedItem: function (options) {\r\n                  return `<span class=\"selectivity-multiple-selected-item ${\r\n                     options.highlighted ? \" highlighted\" : \"\"\r\n                  }\"\r\n\t\t\t\t\t\t\t\tstyle=\"background-color: #eee !important; color: #666 !important; box-shadow: inset 0px 1px 1px #333;\"\r\n\t\t\t\t\t\t\t\tdata-item-id=\"${options.uuid}\" data-field-id=\"${settings.field}\">\r\n\t\t\t\t\t\t\t\t<i class=\"fa fa-user\" style=\"color: #666; opacity: 0.6;\"></i> \r\n                        ${\r\n                           settings.additionalText\r\n                              ? settings.additionalText(options)\r\n                              : \"\"\r\n                        }\r\n\t\t\t\t\t\t\t\t${!settings.isLabelHidden ? options.text : \"\"}\r\n\t\t\t\t\t\t\t\t${\r\n                           options.removable\r\n                              ? ` <a class=\"selectivity-multiple-selected-item-remove\" style=\"color: #333;\"><i class=\"fa fa-remove\"></i></a>`\r\n                              : \"\"\r\n                        }\r\n\t\t\t\t\t\t\t</span>`;\r\n               },\r\n            };\r\n         } else {\r\n            settings.templates = {\r\n               multipleSelectedItem: function (options) {\r\n                  return `<span class=\"selectivity-multiple-selected-item ${\r\n                     options.highlighted ? \" highlighted\" : \"\"\r\n                  }\"\r\n\t\t\t\t\t\t\t\tstyle=\"background-color: ${options.hex} !important;\"\r\n\t\t\t\t\t\t\t\tdata-item-id=\"${options.uuid}\" data-field-id=\"${settings.field}\">\r\n                        ${\r\n                           settings.editPage\r\n                              ? ` <a class=\"selectivity-multiple-selected-item-edit\"><i class=\"fa fa-edit\"></i></a>`\r\n                              : \"\"\r\n                        }\r\n                        ${\r\n                           settings.additionalText\r\n                              ? settings.additionalText(options)\r\n                              : \"\"\r\n                        }\r\n                        ${!settings.isLabelHidden ? options.text : \"\"}\r\n                        ${\r\n                           options.removable\r\n                              ? ` <a class=\"selectivity-multiple-selected-item-remove\"><i class=\"fa fa-remove\"></i></a>`\r\n                              : \"\"\r\n                        }\r\n\t\t\t\t\t\t\t</span>`;\r\n               },\r\n            };\r\n         }\r\n         selectivityInput = new Selectivity.Inputs.Multiple(settings);\r\n\r\n         domNode.selectivity = selectivityInput;\r\n         this.selectivitySetBadge(domNode, App, row);\r\n      } else {\r\n         settings.templates = {\r\n            singleSelectedItem: function (options) {\r\n               return `<span class=\"selectivity-single-selected-item\" data-item-id=\"${\r\n                  options.uuid\r\n               }\" data-field-id=\"${settings.field}\">\r\n\t\t\t\t\t\t\t${\r\n                        settings.editPage\r\n                           ? '<a class=\"selectivity-single-selected-item-edit\"><i class=\"fa fa-edit\"></i></a>'\r\n                           : \"\"\r\n                     }\r\n                     ${\r\n                        settings.additionalText\r\n                           ? settings.additionalText(options)\r\n                           : \"\"\r\n                     }\r\n                     ${!settings.isLabelHidden ? options.text : \"\"}\r\n                     ${\r\n                        options.removable\r\n                           ? '<a class=\"selectivity-single-selected-item-remove\"><i class=\"fa fa-remove\"></i></a>'\r\n                           : \"\"\r\n                     }\r\n\t\t\t\t\t\t</span>`;\r\n            },\r\n         };\r\n\r\n         selectivityInput = new Selectivity.Inputs.Single(settings);\r\n         domNode.selectivity = selectivityInput;\r\n      }\r\n\r\n      if (settings.editPage) {\r\n         const trigerEditPageEvent = () => {\r\n            const instance = this;\r\n            const editMenus = document.querySelectorAll(\r\n               \".selectivity-single-selected-item-edit, .selectivity-multiple-selected-item-edit\"\r\n            );\r\n            for (let i = 0; i < editMenus.length; i++) {\r\n               const eMenu = editMenus[i];\r\n               if (eMenu && !eMenu.__hasClickEvent) {\r\n                  eMenu.addEventListener(\r\n                     \"click\",\r\n                     function (e) {\r\n                        e.stopPropagation();\r\n                        e.preventDefault();\r\n\r\n                        const parentElm = this.parentElement;\r\n                        if (!parentElm) return;\r\n\r\n                        const rowId = parentElm.getAttribute(\"data-item-id\");\r\n                        if (!rowId) return;\r\n\r\n                        const fieldId = parentElm.getAttribute(\"data-field-id\");\r\n                        if (!fieldId) return;\r\n\r\n                        const thisField = instance.object.fieldByID(fieldId);\r\n                        if (!thisField) return;\r\n\r\n                        thisField.emit(\"editPage\", rowId);\r\n                     },\r\n                     true\r\n                  );\r\n                  eMenu.__hasClickEvent = true;\r\n               }\r\n            }\r\n         };\r\n\r\n         setTimeout(() => {\r\n            trigerEditPageEvent();\r\n\r\n            domNode.addEventListener(\"change\", () => {\r\n               trigerEditPageEvent();\r\n            });\r\n         }, 500);\r\n      }\r\n\r\n      // WORKAROUND : remove caret icon of selectivity\r\n      if (settings.readOnly) {\r\n         const caretElems = domNode.getElementsByClassName(\"selectivity-caret\");\r\n         for (let i = 0; i < caretElems.length; i++) {\r\n            const caretElm = caretElems[i];\r\n            if (caretElm) {\r\n               caretElm.parentNode.removeChild(caretElm);\r\n            }\r\n         }\r\n      }\r\n\r\n      // remember our settings values\r\n      this.selectivitySettings = settings;\r\n   }\r\n\r\n   selectivityGet(domNode) {\r\n      if (domNode && domNode.selectivity) {\r\n         if (this.selectivitySettings && this.selectivitySettings.multiple) {\r\n            // on a multiple select, return an array of results, or empty array\r\n            return domNode.selectivity.getData() || [];\r\n         } else {\r\n            // if a single select, return the object or null\r\n            return domNode.selectivity.getData() || null;\r\n         }\r\n      } else {\r\n         if (this.selectivitySettings && this.selectivitySettings.multiple)\r\n            return [];\r\n         else return null;\r\n      }\r\n   }\r\n\r\n   selectivitySet(domNode, data) {\r\n      if (!domNode || !domNode.selectivity) return;\r\n\r\n      data = this.prepareData(data, domNode.selectivity.options.multiple);\r\n\r\n      if (\r\n         (Array.isArray(data) && data[0]) || // Check Array\r\n         (data && data.id)\r\n      )\r\n         // Check a object\r\n         domNode.selectivity.setData(data);\r\n      else domNode.selectivity.clear();\r\n   }\r\n\r\n   selectivityDestroy(domNode) {\r\n      if (domNode && domNode.selectivity) {\r\n         domNode.selectivity.destroy();\r\n\r\n         delete domNode.selectivity;\r\n      }\r\n   }\r\n\r\n   prepareData(data, multiple = true) {\r\n      if (!data && multiple) {\r\n         return [];\r\n      } else if (multiple && data && Array.isArray(data) && data.length == 0) {\r\n         return [];\r\n      } else if (!multiple && data && Array.isArray(data) && data.length == 0) {\r\n         return null;\r\n      } else if (!data && !multiple) {\r\n         return null;\r\n      }\r\n\r\n      if (typeof data == \"string\" && data.length > 0) {\r\n         try {\r\n            data = JSON.parse(data);\r\n         } catch (e) {\r\n            // not JSON parsable, so convert to\r\n            data = { id: data, text: data };\r\n         }\r\n      }\r\n\r\n      // if single select, then it should be object\r\n      if (!multiple && Array.isArray(data)) {\r\n         data = data[0];\r\n      } else if (multiple && !Array.isArray(data)) {\r\n         data = [data];\r\n      }\r\n\r\n      // check to see if id is present on each item\r\n      if (multiple) {\r\n         data.forEach((d) => {\r\n            if (!d.id && d.uuid) {\r\n               d.id = d.uuid;\r\n            }\r\n         });\r\n      } else {\r\n         if (!data.id && data.uuid) data.id = data.uuid;\r\n      }\r\n\r\n      if (data == null && multiple) {\r\n         data = [];\r\n      }\r\n\r\n      return data;\r\n   }\r\n\r\n   selectivitySetBadge(domNode) {\r\n      if (!domNode.clientHeight) return;\r\n      const innerHeight = domNode.clientHeight;\r\n      const outerHeight = domNode.parentElement.clientHeight;\r\n      if (innerHeight - outerHeight > 5) {\r\n         let count = 0;\r\n         let values = [];\r\n         if (domNode && domNode.selectivity)\r\n            values = domNode.selectivity.getValue() || [];\r\n\r\n         count = values.length;\r\n         if (count > 1) {\r\n            const badge = domNode.querySelector(\r\n               \".webix_badge.selectivityBadge\"\r\n            );\r\n            if (badge != null) {\r\n               badge.innerHTML = count;\r\n            } else {\r\n               const anchor = document.createElement(\"A\");\r\n               anchor.href = \"javascript:void(0);\";\r\n               // v2: this just updated the $height property for this row\r\n               // we don't do that anymore:\r\n               // anchor.addEventListener(\"click\", function () {\r\n               //    App.actions.onRowResizeAuto(row.id, innerHeight);\r\n               // });\r\n               const node = document.createElement(\"SPAN\");\r\n               const textnode = document.createTextNode(count);\r\n               node.classList.add(\"webix_badge\", \"selectivityBadge\");\r\n               node.appendChild(textnode);\r\n               anchor.appendChild(node);\r\n               domNode.appendChild(anchor);\r\n            }\r\n         }\r\n      }\r\n   }\r\n};\r\n","const ABFieldStringCore = require(\"../../core/dataFields/ABFieldStringCore\");\r\n\r\nmodule.exports = class ABFieldString extends ABFieldStringCore {\r\n   // constructor(values, object) {\r\n   //    super(values, object);\r\n\r\n   // {\r\n   //   settings: {\r\n   // \t  default: 'string',\r\n   // \t  supportMultilingual: 1/0\r\n   //   }\r\n   // }\r\n\r\n   // }\r\n\r\n   ///\r\n   /// Working with Actual Object Values:\r\n   ///\r\n\r\n   // return the grid column header definition for this instance of ABFieldString\r\n   columnHeader(options) {\r\n      const config = super.columnHeader(options);\r\n\r\n      config.editor = \"text\";\r\n      config.css = \"textCell\";\r\n      // config.sort   = 'string'\r\n      config.template = (obj, common, value /* , col, ind */) => {\r\n         // if this isn't part of a group header display the default format\r\n         if (!obj.$group) {\r\n            return (value || \"\").toString().replace(/[<]/g, \"&lt;\");\r\n         } else {\r\n            return \"\";\r\n         }\r\n      };\r\n\r\n      return config;\r\n   }\r\n\r\n   /**\r\n    * @method defaultValue\r\n    * insert a key=>value pair that represent the default value\r\n    * for this field.\r\n    * @param {obj} values a key=>value hash of the current values.\r\n    */\r\n   defaultValue(values) {\r\n      // if no default value is set, then don't insert a value.\r\n      if (!values[this.columnName]) {\r\n         // Set default string\r\n         if (this.settings.default) {\r\n            if (this.settings.default.indexOf(\"{uuid}\") >= 0) {\r\n               values[this.columnName] = this.AB.uuid();\r\n            } else {\r\n               values[this.columnName] = this.settings.default;\r\n            }\r\n         }\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method isValidData\r\n    * Parse through the given data and return an error if this field's\r\n    * data seems invalid.\r\n    * @param {obj} data  a key=>value hash of the inputs to parse.\r\n    * @param {OPValidator} validator  provided Validator fn\r\n    * @return {array}\r\n    */\r\n   isValidData(data, validator) {\r\n      super.isValidData(data, validator);\r\n\r\n      if (data && data[this.columnName]) {\r\n         const max_length = this.constructor.defaults().MAX_CHAR_LENGTH;\r\n\r\n         if (data[this.columnName].length > max_length) {\r\n            const L = this.AB.Label();\r\n            validator.addError(\r\n               this.columnName,\r\n               L(\"should NOT be longer than {0} characters\", [max_length])\r\n            );\r\n         }\r\n      }\r\n   }\r\n\r\n   /*\r\n    * @property isMultilingual\r\n    * does this field represent multilingual data?\r\n    * @return {bool}\r\n    */\r\n   get isMultilingual() {\r\n      return this.settings.supportMultilingual == 1;\r\n   }\r\n\r\n   /**\r\n    * @method formComponent\r\n    * returns a drag and droppable component that is used on the UI\r\n    * interface builder to place form components related to this ABField.\r\n    *\r\n    * an ABField defines which form component is used to edit it's contents.\r\n    * However, what is returned here, needs to be able to create an instance of\r\n    * the component that will be stored with the ABViewForm.\r\n    */\r\n   formComponent() {\r\n      // NOTE: what is being returned here needs to mimic an ABView CLASS.\r\n      // primarily the .common() and .newInstance() methods.\r\n      const formComponentSetting = super.formComponent();\r\n\r\n      // .common() is used to create the display in the list\r\n      formComponentSetting.common = () => {\r\n         return {\r\n            key: \"textbox\",\r\n            settings: {\r\n               type: \"single\",\r\n            },\r\n         };\r\n      };\r\n\r\n      return formComponentSetting;\r\n   }\r\n\r\n   detailComponent() {\r\n      const detailComponentSetting = super.detailComponent();\r\n\r\n      detailComponentSetting.common = () => {\r\n         return {\r\n            key: \"detailtext\",\r\n         };\r\n      };\r\n\r\n      return detailComponentSetting;\r\n   }\r\n\r\n   /**\r\n    * @method setValue\r\n    * this function uses for form component and mass update popup\r\n    * to get value of fields that apply custom editor\r\n    *\r\n    * @param {Object} item - Webix element\r\n    * @param {Object} rowData - data of row\r\n    *\r\n    * @return {Object}\r\n    */\r\n   setValue(item, rowData) {\r\n      super.setValue(item, rowData, \"\");\r\n   }\r\n};\r\n","const ABFieldTextFormulaCore = require(\"../../core/dataFields/ABFieldTextFormulaCore\");\r\n\r\nmodule.exports = class ABFieldTextFormula extends ABFieldTextFormulaCore {\r\n   // constructor(values, object) {\r\n   //    super(values, object);\r\n   // }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   // isValid() {\r\n   //    const validator = super.isValid();\r\n\r\n   //    // validator.addError('columnName', L('ab.validation.object.name.unique', 'Field columnName must be unique (#name# already used in this Application)').replace('#name#', this.name) );\r\n\r\n   //    return validator;\r\n   // }\r\n\r\n   ///\r\n   /// Working with Actual Object Values:\r\n   ///\r\n\r\n   // return the grid column header definition for this instance of ABFieldTextFormula\r\n   columnHeader(options) {\r\n      const config = super.columnHeader(options);\r\n\r\n      config.editor = null; // read only\r\n      config.css = \"textCell\";\r\n      config.template = (rowData) => {\r\n         // if this isn't part of a group header display the default format\r\n         if (!rowData.$group) {\r\n            return this.format(rowData);\r\n         } else {\r\n            return \"\";\r\n         }\r\n      };\r\n\r\n      return config;\r\n   }\r\n\r\n   /*\r\n    * @function customDisplay\r\n    * perform any custom display modifications for this field.\r\n    * @param {object} row is the {name=>value} hash of the current row of data.\r\n    * @param {App} App the shared ui App object useful more making globally\r\n    *\t\t\t\t\tunique id references.\r\n    * @param {HtmlDOM} node  the HTML Dom object for this field's display.\r\n    */\r\n   customDisplay(/* row, App, node, options */) {}\r\n\r\n   /*\r\n    * @funciton formComponent\r\n    * returns a drag and droppable component that is used on the UI\r\n    * interface builder to place form components related to this ABField.\r\n    *\r\n    * an ABField defines which form component is used to edit it's contents.\r\n    * However, what is returned here, needs to be able to create an instance of\r\n    * the component that will be stored with the ABViewForm.\r\n    */\r\n   formComponent() {\r\n      // not support in the form widget\r\n      return null;\r\n   }\r\n\r\n   detailComponent() {\r\n      const detailComponentSetting = super.detailComponent();\r\n\r\n      detailComponentSetting.common = () => {\r\n         return {\r\n            key: \"detailtext\",\r\n         };\r\n      };\r\n\r\n      return detailComponentSetting;\r\n   }\r\n};\r\n","const ABFieldTreeCore = require(\"../../core/dataFields/ABFieldTreeCore\");\r\n\r\nconst L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABFieldTree extends ABFieldTreeCore {\r\n   // constructor(values, object) {\r\n   //    super(values, object);\r\n   // }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   // isValid() {\r\n   //    const validator = super.isValid();\r\n\r\n   //    // validator.addError('columnName', L('ab.validation.object.name.unique', 'Field columnName must be unique (#name# already used in this Application)').replace('#name#', this.name) );\r\n\r\n   //    return validator;\r\n   // }\r\n\r\n   ///\r\n   /// Working with Actual Object Values:\r\n   ///\r\n\r\n   idCustomContainer(obj) {\r\n      return \"#columnName#-#id#-tree\"\r\n         .replace(\"#id#\", obj.id)\r\n         .replace(\"#columnName#\", this.columnName.replace(/ /g, \"_\"));\r\n   }\r\n\r\n   // return the grid column header definition for this instance of ABFieldTree\r\n   columnHeader(options) {\r\n      options = options || {};\r\n\r\n      const config = super.columnHeader(options);\r\n      const field = this;\r\n\r\n      let formClass = \"\";\r\n      let placeHolder = \"\";\r\n      if (options.isForm) {\r\n         formClass = \" form-entry\";\r\n         placeHolder =\r\n            \"<span style='color: #CCC; padding: 0 5px;'>\" +\r\n            L(\"Select items\") +\r\n            \"</span>\";\r\n      }\r\n\r\n      const width = options.width;\r\n\r\n      config.template = (obj) => {\r\n         if (obj.$group) return obj[field.columnName];\r\n\r\n         const branches = [];\r\n         let selectOptions = this.AB.cloneDeep(field.settings.options);\r\n         selectOptions = new webix.TreeCollection({\r\n            data: selectOptions,\r\n         });\r\n\r\n         let values = obj;\r\n         if (obj[field.columnName] != null) {\r\n            values = obj[field.columnName];\r\n         }\r\n\r\n         selectOptions.data.each(function (obj) {\r\n            if (\r\n               typeof values.indexOf != \"undefined\" &&\r\n               values.indexOf(obj.id) != -1\r\n            ) {\r\n               let html = \"\";\r\n\r\n               let rootid = obj.id;\r\n               while (this.getParentId(rootid)) {\r\n                  selectOptions.data.each(function (par) {\r\n                     if (selectOptions.data.getParentId(rootid) == par.id) {\r\n                        html = par.text + \": \" + html;\r\n                     }\r\n                  });\r\n                  rootid = this.getParentId(rootid);\r\n               }\r\n\r\n               html += obj.text;\r\n               branches.push(html);\r\n            }\r\n         });\r\n\r\n         const myHex = \"#4CAF50\";\r\n         let nodeHTML = \"\";\r\n         nodeHTML += \"<div class='list-data-values'>\";\r\n         if (branches.length == 0) {\r\n            nodeHTML += placeHolder;\r\n         } else {\r\n            branches.forEach(function (item) {\r\n               nodeHTML +=\r\n                  '<span class=\"selectivity-multiple-selected-item rendered\" style=\"background-color:' +\r\n                  myHex +\r\n                  ' !important;\">' +\r\n                  item +\r\n                  \"</span>\";\r\n            });\r\n         }\r\n         nodeHTML += \"</div>\";\r\n\r\n         // field.setBadge(node, App, row);\r\n\r\n         if (width) {\r\n            return (\r\n               '<div style=\"margin-left: ' +\r\n               width +\r\n               'px;\" class=\"list-data-values' +\r\n               formClass +\r\n               '\">' +\r\n               nodeHTML +\r\n               \"</div>\"\r\n            );\r\n         } else {\r\n            return (\r\n               '<div class=\"list-data-values' +\r\n               formClass +\r\n               '\">' +\r\n               nodeHTML +\r\n               \"</div>\"\r\n            );\r\n         }\r\n      };\r\n\r\n      return config;\r\n   }\r\n\r\n   /*\r\n    * @function customDisplay\r\n    * perform any custom display modifications for this field.\r\n    * @param {object} row is the {name=>value} hash of the current row of data.\r\n    * @param {App} App the shared ui App object useful more making globally\r\n    *\t\t\t\t\tunique id references.\r\n    * @param {HtmlDOM} node  the HTML Dom object for this field's display.\r\n    */\r\n   customDisplay(row, App, node, options) {\r\n      // sanity check.\r\n      if (!node) {\r\n         return;\r\n      }\r\n\r\n      options = options || {};\r\n\r\n      const field = this;\r\n\r\n      if (options.isForm) {\r\n         if (!row || row.length == 0) {\r\n            node.innerHTML =\r\n               \"<div class='list-data-values form-entry'><span style='color: #CCC; padding: 0 5px;'>\" +\r\n               L(\"Select items\") +\r\n               \"</span></div>\";\r\n            return;\r\n         }\r\n\r\n         const branches = [];\r\n         options = this.AB.cloneDeep(field.settings.options);\r\n         options = new webix.TreeCollection({\r\n            data: options,\r\n         });\r\n\r\n         let values = row;\r\n         if (row[field.columnName] != null) {\r\n            values = row[field.columnName];\r\n         }\r\n\r\n         options.data.each(function (obj) {\r\n            if (\r\n               typeof values.indexOf != \"undefined\" &&\r\n               values.indexOf(obj.id) != -1\r\n            ) {\r\n               let html = \"\";\r\n\r\n               let rootid = obj.id;\r\n               while (this.getParentId(rootid)) {\r\n                  options.data.each(function (par) {\r\n                     if (options.data.getParentId(rootid) == par.id) {\r\n                        html = par.text + \": \" + html;\r\n                     }\r\n                  });\r\n                  rootid = this.getParentId(rootid);\r\n               }\r\n\r\n               html += obj.text;\r\n               branches.push(html);\r\n            }\r\n         });\r\n\r\n         const myHex = \"#4CAF50\";\r\n         let nodeHTML = \"\";\r\n         nodeHTML += \"<div class='list-data-values form-entry'>\";\r\n         branches.forEach(function (item) {\r\n            nodeHTML +=\r\n               '<span class=\"selectivity-multiple-selected-item rendered\" style=\"background-color:' +\r\n               myHex +\r\n               ' !important;\">' +\r\n               item +\r\n               \"</span>\";\r\n         });\r\n         nodeHTML += \"</div>\";\r\n\r\n         node.innerHTML = nodeHTML;\r\n      }\r\n\r\n      field.setBadge(node, App, row);\r\n   }\r\n\r\n   /*\r\n    * @function customEdit\r\n    *\r\n    * @param {object} row is the {name=>value} hash of the current row of data.\r\n    * @param {App} App the shared ui App object useful more making globally\r\n    *\t\t\t\t\tunique id references.\r\n    * @param {HtmlDOM} node  the HTML Dom object for this field's display.\r\n    */\r\n   customEdit(row, App, node, component) {\r\n      const idBase = App.unique(this.idCustomContainer(row));\r\n      const idPopup = `${idBase}-popup`;\r\n      const idTree = `${idBase}-tree`;\r\n      const view = $$(node);\r\n      const field = this;\r\n      const parentComponent = component;\r\n      let values = {};\r\n      let firstRender = true;\r\n\r\n      function getValues(field, row) {\r\n         let values = {};\r\n         if (\r\n            typeof field != \"undefined\" &&\r\n            typeof field.columnName != \"undefined\" &&\r\n            typeof row[field.columnName] != \"undefined\"\r\n         ) {\r\n            values = row[field.columnName];\r\n         }\r\n         return values;\r\n      }\r\n\r\n      function populateTree(field, vals) {\r\n         values = getValues(field, vals);\r\n\r\n         $$(idTree).blockEvent(); // prevents endless loop\r\n\r\n         const options = field.AB.cloneDeep(field.settings.options);\r\n         $$(idTree).clearAll();\r\n         $$(idTree).parse(options);\r\n         $$(idTree).refresh();\r\n         $$(idTree).uncheckAll();\r\n         $$(idTree).openAll();\r\n\r\n         if (values != null && values.length) {\r\n            values.forEach(function (id) {\r\n               if ($$(idTree).exists(id)) {\r\n                  $$(idTree).checkItem(id);\r\n                  const dom = $$(idTree).getItemNode(id);\r\n                  dom.classList.add(\"selected\");\r\n               }\r\n            });\r\n         }\r\n         $$(idTree).unblockEvent();\r\n      }\r\n\r\n      if ($$(idPopup)) {\r\n         $$(idPopup).show();\r\n         populateTree(this, row);\r\n      } else {\r\n         webix\r\n            .ui({\r\n               id: idPopup,\r\n               view: \"popup\",\r\n               width: 500,\r\n               height: 400,\r\n               on: {\r\n                  onShow: () => {\r\n                     if (firstRender == true) populateTree(this, row);\r\n\r\n                     firstRender = false;\r\n                  },\r\n               },\r\n               body: {\r\n                  id: idTree,\r\n                  view: \"tree\",\r\n                  css: \"ab-data-tree\",\r\n                  template: function (obj, common) {\r\n                     return (\r\n                        \"<label>\" +\r\n                        common.checkbox(obj, common) +\r\n                        \"&nbsp;\" +\r\n                        obj.text +\r\n                        \"</label>\"\r\n                     );\r\n                  },\r\n                  on: {\r\n                     onItemCheck: async function (id, value, event) {\r\n                        const dom = this.getItemNode(id);\r\n                        const tree = this;\r\n                        if (value == true) {\r\n                           dom.classList.add(\"selected\");\r\n                        } else {\r\n                           dom.classList.remove(\"selected\");\r\n                        }\r\n                        // works for the same-level children only\r\n                        // except root items\r\n                        if (this.getParentId(id)) {\r\n                           tree.blockEvent(); // prevents endless loop\r\n\r\n                           let rootid = id;\r\n                           while (this.getParentId(rootid)) {\r\n                              rootid = this.getParentId(rootid);\r\n                              if (rootid != id) tree.uncheckItem(rootid);\r\n                           }\r\n\r\n                           this.data.eachSubItem(rootid, function (item) {\r\n                              if (item.id != id) tree.uncheckItem(item.id);\r\n                           });\r\n\r\n                           tree.unblockEvent();\r\n                        } else {\r\n                           tree.blockEvent(); // prevents endless loop\r\n                           this.data.eachSubItem(id, function (obj) {\r\n                              if (obj.id != id) tree.uncheckItem(obj.id);\r\n                           });\r\n                           tree.unblockEvent();\r\n                        }\r\n                        const values = {};\r\n                        values[field.columnName] = $$(idTree).getChecked();\r\n\r\n                        if (row.id) {\r\n                           // pass null because it could not put empty array in REST api\r\n                           if (values[field.columnName].length == 0)\r\n                              values[field.columnName] = \"\";\r\n\r\n                           try {\r\n                              await field.object.model().update(row.id, values);\r\n\r\n                              // update the client side data object as well so other data changes won't cause this save to be reverted\r\n                              if (view && view.updateItem) {\r\n                                 view.updateItem(row.id, values);\r\n                              }\r\n                           } catch (err) {\r\n                              node.classList.add(\"webix_invalid\");\r\n                              node.classList.add(\"webix_invalid_cell\");\r\n\r\n                              this.AB.notify.developer(err, {\r\n                                 message: \"Error updating our entry.\",\r\n                                 row: row,\r\n                                 values: values,\r\n                              });\r\n                           }\r\n                        } else {\r\n                           const rowData = {};\r\n                           rowData[field.columnName] = $$(idTree).getChecked();\r\n\r\n                           field.setValue($$(parentComponent.ui.id), rowData);\r\n                        }\r\n                     },\r\n                  },\r\n               },\r\n            })\r\n            .show(node, {\r\n               x: -7,\r\n            });\r\n      }\r\n      return false;\r\n   }\r\n\r\n   setBadge(domNode, row) {\r\n      const field = this;\r\n      domNode = domNode.querySelector(\".list-data-values\");\r\n      const innerHeight = domNode.scrollHeight;\r\n      const outerHeight = domNode.parentElement.clientHeight;\r\n      if (innerHeight - outerHeight > 5) {\r\n         let count = 0;\r\n         if (row[field.columnName] && row[field.columnName].length)\r\n            count = row[field.columnName].length;\r\n         else count = 0;\r\n\r\n         if (count > 1) {\r\n            const badge = domNode.querySelector(\r\n               \".webix_badge.selectivityBadge\"\r\n            );\r\n            if (badge != null) {\r\n               badge.innerHTML = count;\r\n            } else {\r\n               const anchor = document.createElement(\"A\");\r\n               anchor.href = \"javascript:void(0);\";\r\n               anchor.addEventListener(\"click\", function (event) {\r\n                  // v2: this was just saving the new height to the\r\n                  // field properties. We don't do that anymore:\r\n                  // App.actions.onRowResizeAuto(row.id, innerHeight);\r\n                  event.stopPropagation();\r\n               });\r\n               const node = document.createElement(\"SPAN\");\r\n               const textnode = document.createTextNode(count);\r\n               node.classList.add(\"webix_badge\", \"selectivityBadge\");\r\n               node.appendChild(textnode);\r\n               anchor.appendChild(node);\r\n               domNode.appendChild(anchor);\r\n            }\r\n         }\r\n      }\r\n   }\r\n\r\n   /*\r\n    * @funciton formComponent\r\n    * returns a drag and droppable component that is used on the UI\r\n    * interface builder to place form components related to this ABField.\r\n    *\r\n    * an ABField defines which form component is used to edit it's contents.\r\n    * However, what is returned here, needs to be able to create an instance of\r\n    * the component that will be stored with the ABViewForm.\r\n    */\r\n   formComponent() {\r\n      return super.formComponent(\"formtree\");\r\n   }\r\n\r\n   detailComponent() {\r\n      const detailComponentSetting = super.detailComponent();\r\n\r\n      detailComponentSetting.common = () => {\r\n         return {\r\n            key: \"detailtree\",\r\n         };\r\n      };\r\n\r\n      return detailComponentSetting;\r\n   }\r\n\r\n   getValue(item, rowData) {\r\n      let values = {};\r\n      values = item.getValues();\r\n      return values;\r\n   }\r\n\r\n   setValue(item, rowData) {\r\n      if (!item) return false;\r\n\r\n      const val = rowData[this.columnName] || [];\r\n\r\n      item.setValues(val);\r\n      // get dom\r\n      const dom = item.$view.querySelector(\".list-data-values\");\r\n\r\n      if (!dom) return false;\r\n\r\n      // set value to selectivity\r\n      this.customDisplay(val, this.App, dom, {\r\n         editable: true,\r\n         isForm: true,\r\n      });\r\n\r\n      setTimeout(function () {\r\n         let height = 33;\r\n         if (dom.scrollHeight > 33) {\r\n            height = dom.scrollHeight;\r\n         }\r\n         item.config.height = height + 5;\r\n         item.resize();\r\n      }, 200);\r\n   }\r\n};\r\n","const ABFieldConnectCore = require(\"../../core/dataFields/ABFieldConnectCore\");\r\nconst ABFieldUserCore = require(\"../../core/dataFields/ABFieldUserCore\");\r\n\r\nmodule.exports = class ABFieldUser extends ABFieldUserCore {\r\n   constructor(values, object, fieldDefaults) {\r\n      super(values, object, fieldDefaults);\r\n   }\r\n\r\n   ///\r\n   /// Working with Actual Object Values:\r\n   ///\r\n\r\n   async save() {\r\n      // Add new\r\n      if (this.id == null) {\r\n         const SiteUser = this.AB.objectUser();\r\n         const Defaults = ABFieldUserCore.defaults();\r\n\r\n         this.settings.linkObject = SiteUser.id;\r\n         this.settings.isCustomFK = 1;\r\n\r\n         if (this.settings.isMultiple) {\r\n            this.settings.indexField2 = Defaults.USERNAME_FIELD_ID;\r\n            this.settings.linkType = \"many\";\r\n            this.settings.linkViaType = \"many\";\r\n            this.settings.isSource = 1;\r\n         } else {\r\n            this.settings.indexField = Defaults.USERNAME_FIELD_ID;\r\n            this.settings.linkType = \"one\";\r\n            this.settings.linkViaType = \"many\";\r\n            this.settings.isSource = 1;\r\n         }\r\n\r\n         // TODO: .fieldCustomNew() for saving \"local\" changes.\r\n         // NOTE: The Object adding this Field sees it's data as a ABFieldUser\r\n         //       connection.\r\n         //       However, the SiteUser will see the data as a ABFieldConnect\r\n         //       connection\r\n         const linkCol = SiteUser.fieldNew({\r\n            key: ABFieldConnectCore.defaults().key,\r\n            columnName: `${this.object.name}_${this.label}`,\r\n            label: this.object.label,\r\n            settings: {\r\n               showIcon: this.settings.showIcon,\r\n               linkObject: this.object.id,\r\n               linkType: this.settings.linkViaType,\r\n               linkViaType: this.settings.linkType,\r\n               isCustomFK: this.settings.isCustomFK,\r\n               indexField: this.settings.indexField,\r\n               indexField2: this.settings.indexField2,\r\n               isSource: 0,\r\n            },\r\n         });\r\n\r\n         // // Create definitions of the connected fields\r\n         // // NOTE: skip directly to the ABMLClass.save() to avoid the\r\n         // // migrations caused during the ABField.save() operations.\r\n         // await ABFieldUserCore.prototype.save.call(this);\r\n\r\n         // linkCol.settings.linkColumn = this.id;\r\n         // await ABFieldUserCore.prototype.save.call(linkCol);\r\n\r\n         // // Update the id value of linked field to connect together\r\n         // this.settings.linkColumn = linkCol.id;\r\n         // await ABFieldUserCore.prototype.save.call(this);\r\n\r\n         let newDef = await this.toDefinition().save();\r\n         this.id = newDef.id;\r\n\r\n         linkCol.settings.linkColumn = this.id;\r\n         let newLinkDef = await linkCol.toDefinition().save();\r\n         linkCol.id = newLinkDef.id;\r\n\r\n         this.settings.linkColumn = linkCol.id;\r\n         await this.toDefinition().save();\r\n\r\n         // Add fields to Objects\r\n         await this.object.fieldAdd(this);\r\n\r\n         await SiteUser.fieldAdd(linkCol);\r\n\r\n         // Create column to DB\r\n         await this.migrateCreate();\r\n\r\n         await linkCol.migrateCreate();\r\n\r\n         return this;\r\n      } else {\r\n         return super.save();\r\n      }\r\n   }\r\n\r\n   // return the grid column header definition for this instance of ABFieldUser\r\n\r\n   columnHeader(options) {\r\n      // debugger;\r\n      options = this.setDisplayOptions(options);\r\n      return super.columnHeader(options);\r\n   }\r\n\r\n   /**\r\n    * @function customDisplay\r\n    * perform any custom display modifications for this field.\r\n    * @param {object} row is the {name=>value} hash of the current row of data.\r\n    * @param {App} App the shared ui App object useful more making globally\r\n    *             unique id references.\r\n    * @param {HtmlDOM} node  the HTML Dom object for this field's display.\r\n    */\r\n   // customDisplay(row, App, node, options = {}) {\r\n   //    debugger;\r\n   //    options = this.setDisplayOptions(options);\r\n   //\r\n   //    return super.customDisplay(row, App, node, options);\r\n   // }\r\n\r\n   setDisplayOptions(options) {\r\n      options = options || {};\r\n      options.editable =\r\n         this.settings.editable != null ? this.settings.editable : true;\r\n\r\n      options.isLabelHidden =\r\n         this.settings.isShowUsername != null\r\n            ? !this.settings.isShowUsername\r\n            : false;\r\n\r\n      options.additionalText = (opt) => {\r\n         if (!this.settings.isShowProfileImage) return \"\";\r\n\r\n         if (opt.image_id)\r\n            return `<img src='/opsportal/image/UserProfile/${opt.image_id}' style='border-radius:100%; object-fit: cover; margin: 0 5px 0 -10px;' width='28' height='28' />`;\r\n         else return '<i style=\"opacity: 0.6;\" class=\"fa fa-user\"></i> ';\r\n      };\r\n\r\n      return options;\r\n   }\r\n\r\n   /**\r\n    * @method defaultValue\r\n    * insert a key=>value pair that represent the default value\r\n    * for this field.\r\n    * @param {obj} values a key=>value hash of the current values.\r\n    */\r\n   defaultValue(values) {\r\n      if (this.settings.isCurrentUser) {\r\n         if (this.settings.isMultiple) {\r\n            values[this.columnName] = [\r\n               {\r\n                  id: this.AB.Account.username(),\r\n                  text: this.AB.Account.username(),\r\n               },\r\n            ];\r\n         } else {\r\n            values[this.columnName] = this.AB.Account.username();\r\n         }\r\n      }\r\n   }\r\n\r\n   // getValue() {\r\n   //    var elem = $$(ids.component);\r\n   //\r\n   //    return field.getValue(elem, rowData);\r\n   // }\r\n\r\n   setValue(item, rowData) {\r\n      let val = rowData[this.columnName];\r\n      // Select \"[Current user]\" to update\r\n      if (val == \"ab-current-user\") val = this.AB.Account.username();\r\n\r\n      rowData[this.columnName] = val;\r\n\r\n      super.setValue(item, rowData);\r\n   }\r\n\r\n   getUsers() {\r\n      return this.AB.Account.userList().map((u) => {\r\n         const result = {\r\n            id: u.username,\r\n            image: u.image_id,\r\n         };\r\n\r\n         if (this.settings.isMultiple) {\r\n            result.text = u.username;\r\n         } else {\r\n            result.value = u.username;\r\n         }\r\n\r\n         return result;\r\n      });\r\n   }\r\n};\r\n","/**\r\n * ABProcessLane\r\n * manages a lane in a Process Diagram.\r\n *\r\n * Lanes manage users in the system, and provide a way to lookup a SiteUser.\r\n */\r\nvar ABProcessLaneCore = require(\"../../core/process/ABProcessLaneCore\");\r\n\r\nmodule.exports = class ABProcessLane extends ABProcessLaneCore {\r\n   // constructor(attributes, process, application) {\r\n   //    super(attributes, process, application);\r\n   // }\r\n\r\n   ////\r\n   //// Modeler Instance Methods\r\n   ////\r\n\r\n   transferParticipantWhereToMe(id) {\r\n      var myParticipant = this.process.elementForDiagramID(id);\r\n      if (myParticipant) {\r\n         // if I haven't already set my where clause, and my Participant\r\n         // has one, then take it:\r\n         if (!this.stashed && myParticipant.stashed) {\r\n            var copyParams = [\r\n               \"stashed\",\r\n               \"useRole\",\r\n               \"role\",\r\n               \"useAccount\",\r\n               \"account\",\r\n            ];\r\n            copyParams.forEach((p) => {\r\n               var swap = this[p];\r\n               this[p] = myParticipant[p];\r\n               myParticipant[p] = swap; // ?? do this ??\r\n            });\r\n         }\r\n      }\r\n   }\r\n\r\n   /**\r\n    * fromElement()\r\n    * initialize this Lane's values from the given BPMN:Lane\r\n    * @param {BPMNParticipant}\r\n    */\r\n   fromElement(element) {\r\n      this.diagramID = element.id || this.diagramID;\r\n\r\n      // on creation, if I have child objects, then move the .where definition\r\n      // from my parent Participant to ME\r\n      if (element.children && element.children.length > 0) {\r\n         if (element.parent && element.parent.type == \"bpmn:Participant\") {\r\n            this.transferParticipantWhereToMe(element.parent.id);\r\n         }\r\n      } else {\r\n         // this info might just reside in the .parent.children[]\r\n         if (\r\n            element.parent &&\r\n            element.parent.children &&\r\n            element.parent.children.length > 0\r\n         ) {\r\n            element.parent.children.forEach((child) => {\r\n               if (child.type != \"bpmn:Lane\") {\r\n                  // if child has lanes\r\n                  if (\r\n                     child.businessObject.lanes &&\r\n                     child.businessObject.lanes.length > 0\r\n                  ) {\r\n                     // if lane is me\r\n                     var myLane = child.businessObject.lanes.find((l) => {\r\n                        return l.id == this.diagramID;\r\n                     });\r\n                     if (myLane) {\r\n                        this.transferParticipantWhereToMe(element.parent.id);\r\n\r\n                        // tell child I'm it's lane:\r\n                        var objChild = this.process.elementForDiagramID(\r\n                           child.id\r\n                        );\r\n                        if (objChild) {\r\n                           objChild.setLane(this);\r\n                        }\r\n                     }\r\n                  }\r\n               }\r\n            });\r\n         }\r\n      }\r\n\r\n      this.onChange(element);\r\n   }\r\n\r\n   /**\r\n    * onChange()\r\n    * update the current Lane with information that was relevant\r\n    * from the provided BPMN:Lane\r\n    * @param {BPMNParticipant}\r\n    */\r\n   onChange(defElement) {\r\n      /*\r\n        Sample DefElement:\r\n            {\r\n                \"labels\": [],\r\n                \"children\": [],\r\n                \"id\": \"Participant_185ljkg\",\r\n                \"width\": 958,\r\n                \"height\": 240,\r\n                \"type\": \"bpmn:Participant\",\r\n                \"x\": -810,\r\n                \"y\": -2010,\r\n                \"order\": {\r\n                    \"level\": -2\r\n                },\r\n               \"businessObject\": {\r\n                    \"$type\": \"bpmn:Participant\",\r\n                    \"id\": \"Participant_185ljkg\",\r\n                    \"di\": {\r\n                        \"$type\": \"bpmndi:BPMNShape\",\r\n                        \"bounds\": {\r\n                            \"$type\": \"dc:Bounds\",\r\n                            \"x\": -810,\r\n                            \"y\": -2010,\r\n                            \"width\": 958,\r\n                            \"height\": 240\r\n                        },\r\n                        \"id\": \"Participant_185ljkg_di\",\r\n                        \"isHorizontal\": true\r\n                    },\r\n                    \"processRef\": {\r\n                        \"$type\": \"bpmn:Process\",\r\n                        \"id\": \"Process_0x3sul5\"\r\n                    }\r\n                }\r\n         */\r\n\r\n      // from the BPMI modeler we can gather a label for this:\r\n      if (\r\n         defElement.businessObject.name &&\r\n         defElement.businessObject.name != \"\"\r\n      ) {\r\n         this.label = defElement.businessObject.name;\r\n      }\r\n\r\n      // if I picked up a new task, inform it I am it's lane:\r\n   }\r\n};\r\n","/**\r\n * ABProcessParticipant\r\n * manages the participant lanes in a Process Diagram.\r\n *\r\n * Participants manage users in the system (when there are no lanes defined)\r\n * and provide a way to lookup a SiteUser.\r\n */\r\nvar ABProcessParticipantCore = require(\"../../core/process/ABProcessParticipantCore\");\r\n\r\nconst L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABProcessParticipant extends ABProcessParticipantCore {\r\n   // constructor(attributes, process, AB) {\r\n   //    super(attributes, process, AB);\r\n   // }\r\n\r\n   ////\r\n   //// Modeler Instance Methods\r\n   ////\r\n\r\n   /**\r\n    * fromElement()\r\n    * initialize this Participant's values from the given BPMN:Participant\r\n    * @param {BPMNParticipant}\r\n    */\r\n   fromElement(element) {\r\n      this.diagramID = element.id || this.diagramID;\r\n      this.onChange(element);\r\n   }\r\n\r\n   /**\r\n    * onChange()\r\n    * update the current Participant with information that was relevant\r\n    * from the provided BPMN:Participant\r\n    * @param {BPMNParticipant}\r\n    */\r\n   onChange(defElement) {\r\n      /*\r\n        Sample DefElement:\r\n            {\r\n                \"labels\": [],\r\n                \"children\": [],\r\n                \"id\": \"Participant_185ljkg\",\r\n                \"width\": 958,\r\n                \"height\": 240,\r\n                \"type\": \"bpmn:Participant\",\r\n                \"x\": -810,\r\n                \"y\": -2010,\r\n                \"order\": {\r\n                    \"level\": -2\r\n                },\r\n               \"businessObject\": {\r\n                    \"$type\": \"bpmn:Participant\",\r\n                    \"id\": \"Participant_185ljkg\",\r\n                    \"di\": {\r\n                        \"$type\": \"bpmndi:BPMNShape\",\r\n                        \"bounds\": {\r\n                            \"$type\": \"dc:Bounds\",\r\n                            \"x\": -810,\r\n                            \"y\": -2010,\r\n                            \"width\": 958,\r\n                            \"height\": 240\r\n                        },\r\n                        \"id\": \"Participant_185ljkg_di\",\r\n                        \"isHorizontal\": true\r\n                    },\r\n                    \"processRef\": {\r\n                        \"$type\": \"bpmn:Process\",\r\n                        \"id\": \"Process_0x3sul5\"\r\n                    }\r\n                }\r\n         */\r\n\r\n      // from the BPMI modeler we can gather a label for this:\r\n      if (\r\n         defElement.businessObject.name &&\r\n         defElement.businessObject.name != \"\"\r\n      ) {\r\n         this.label = defElement.businessObject.name;\r\n      }\r\n\r\n      if (defElement.children) {\r\n         var laneIDs = [];\r\n         defElement.children.forEach((c) => {\r\n            if (c.type == \"bpmn:Lane\") {\r\n               laneIDs.push(c.id);\r\n            }\r\n         });\r\n         this.laneIDs = laneIDs;\r\n      }\r\n   }\r\n\r\n   /**\r\n    * diagramProperties()\r\n    * return a set of values for the XML shape definition based upon\r\n    * the current values of this objec.\r\n    * @return {json}\r\n    */\r\n   diagramProperties() {\r\n      return [\r\n         {\r\n            id: this.diagramID,\r\n            def: {\r\n               name: this.name,\r\n            },\r\n         },\r\n      ];\r\n   }\r\n\r\n   // static propertyIDs(id) {\r\n   //    return {\r\n   //       form: `${id}_form`,\r\n   //       name: `${id}_name`,\r\n   //       role: `${id}_role`,\r\n   //       useRole: `${id}_useRoles`,\r\n   //       useAccount: `${id}_useAccounts`,\r\n   //       account: `${id}_account`,\r\n   //    };\r\n   // }\r\n   /**\r\n    * propertiesShow()\r\n    * display the properties panel for this Process Element.\r\n    * @param {string} id\r\n    *        the webix $$(id) of the properties panel area.\r\n    */\r\n   propertiesShow(id) {\r\n      console.error(\"TODO: refactor to ABDesigner\");\r\n\r\n      var ids = ABProcessParticipant.propertyIDs(id);\r\n\r\n      var ui = {\r\n         id: id,\r\n         rows: [\r\n            { view: \"label\", label: `${this.type} :` },\r\n            {\r\n               view: \"form\",\r\n               id: ids.form,\r\n               // width: 300,\r\n               elements: [\r\n                  {\r\n                     id: ids.name,\r\n                     view: \"text\",\r\n                     label: L(\"Name\"),\r\n                     name: \"name\",\r\n                     value: this.name,\r\n                  },\r\n                  // { template: \"Select Users\", type: \"section\" },\r\n                  // {\r\n                  //     id: id + \"_userView\",\r\n                  //     cols: [\r\n                  //         {\r\n                  //             view: \"checkbox\",\r\n                  //             id: ids.useRole,\r\n                  //             labelRight: \"by Role\",\r\n                  //             value: this.useRole || 0\r\n                  //         },\r\n                  //         {\r\n                  //             id: ids.role,\r\n                  //             view: \"select\",\r\n                  //             label: \"Role\",\r\n                  //             value: this.role,\r\n                  //             options: __Roles,\r\n                  //             labelAlign: \"left\"\r\n                  //         }\r\n                  //     ]\r\n                  // }\r\n                  // {\r\n                  //     margin: 5,\r\n                  //     cols: [\r\n                  //         {\r\n                  //             view: \"button\",\r\n                  //             value: \"Login\",\r\n                  //             css: \"webix_primary\"\r\n                  //         },\r\n                  //         { view: \"button\", value: \"Cancel\" }\r\n                  //     ]\r\n                  // }\r\n               ],\r\n            },\r\n         ],\r\n      };\r\n\r\n      // If we don't have any sub lanes, then offer the select user options:\r\n      if (this.laneIDs && this.laneIDs.length == 0) {\r\n         var userUI = ABProcessParticipant.selectUsersUi(id, this);\r\n         ui.rows[1].elements.push(userUI);\r\n      }\r\n\r\n      webix.ui(ui, $$(id));\r\n\r\n      $$(id).show();\r\n   }\r\n\r\n   /**\r\n    * selectUsersUi()\r\n    * A resuable fn to return the webix ui for a reusable Select User picker.\r\n    * @param {ABFactory} AB\r\n    * @param {string} id\r\n    *        the webix $$(id) of the properties panel area.\r\n    * @param {json} values\r\n    *        the current values represented for this user selection.\r\n    */\r\n   static selectUsersUi(AB, id, values) {\r\n      console.warn(\"!!! Where is this used???\");\r\n\r\n      var L = (...params) => {\r\n         return this.AB.Multilingual.label(...params);\r\n      };\r\n\r\n      var ids = ABProcessParticipant.propertyIDs(id);\r\n      var __Roles = this.AB.Account.rolesAll();\r\n      var __Users = this.AB.Account.userList();\r\n\r\n      __Roles.unshift({ id: \"--\", value: L(\"select a role\") });\r\n      __Users.unshift({ id: \"--\", value: L(\"select a user\") });\r\n\r\n      return {\r\n         view: \"fieldset\",\r\n         label: L(\"Select Users\"),\r\n         body: {\r\n            rows: [\r\n               {\r\n                  cols: [\r\n                     {\r\n                        view: \"checkbox\",\r\n                        id: ids.useRole,\r\n                        labelRight: L(\"by Role\"),\r\n                        labelWidth: 0,\r\n                        width: 120,\r\n                        value: values.useRole ? values.useRole : 0,\r\n                        click: function (id /*, event */) {\r\n                           if ($$(id).getValue()) {\r\n                              $$(ids.role).enable();\r\n                           } else {\r\n                              $$(ids.role).disable();\r\n                           }\r\n                        },\r\n                     },\r\n                     {\r\n                        id: ids.role,\r\n                        view: \"select\",\r\n                        value: values.role ? values.role : \"\",\r\n                        disabled: values.useRole ? false : true,\r\n                        options: __Roles,\r\n                        labelAlign: \"left\",\r\n                     },\r\n                  ],\r\n               },\r\n               {\r\n                  cols: [\r\n                     {\r\n                        view: \"checkbox\",\r\n                        id: ids.useAccount,\r\n                        labelRight: L(\"by Account\"),\r\n                        labelWidth: 0,\r\n                        width: 120,\r\n                        value: values.useAccount ? values.useAccount : 0,\r\n                        click: function (id /*, event */) {\r\n                           if ($$(id).getValue()) {\r\n                              $$(ids.account).enable();\r\n                           } else {\r\n                              $$(ids.account).disable();\r\n                           }\r\n                        },\r\n                     },\r\n                     {\r\n                        id: ids.account,\r\n                        view: \"multicombo\",\r\n                        value: values.account ? values.account : 0,\r\n                        disabled: values.useAccount ? false : true,\r\n                        suggest: __Users,\r\n                        labelAlign: \"left\",\r\n                        placeholder: L(\"Click or type to add user...\"),\r\n                        stringResult: false /* returns data as an array of [id] */,\r\n                     },\r\n                  ],\r\n               },\r\n            ],\r\n         },\r\n      };\r\n   }\r\n\r\n   /**\r\n    * selectManagersUi()\r\n    * A resuable fn to return the webix ui for a reusable Select Managers picker.\r\n    * This UI is used in the ABDesigner New Application form.\r\n    * @param {ABFactory} AB\r\n    * @param {string} id\r\n    *        the webix $$(id) of the properties panel area.\r\n    * @param {jsonobj} obj\r\n    *        the default values for these fields.\r\n    */\r\n\r\n   /*\r\n    * Moving this to ABDesigner/src/rootPages/Designer/forms/process\r\n    */\r\n   // static selectManagersUi(AB, id, obj) {\r\n   //    var L = (...params) => {\r\n   //       return AB.Multilingual.label(...params);\r\n   //    };\r\n\r\n   //    var ids = ABProcessParticipant.propertyIDs(id);\r\n   //    var __Roles = AB.Account.rolesAll().map((r) => {\r\n   //       return { id: r.id, value: r.name };\r\n   //    });\r\n   //    var __Users = AB.Account.userList().map((u) => {\r\n   //       return { id: u.uuid, value: u.username };\r\n   //    });\r\n\r\n   //    return {\r\n   //       type: \"form\",\r\n   //       css: \"no-margin\",\r\n   //       rows: [\r\n   //          {\r\n   //             cols: [\r\n   //                {\r\n   //                   view: \"checkbox\",\r\n   //                   id: ids.useRole,\r\n   //                   labelRight: L(\"by Role\"),\r\n   //                   labelWidth: 0,\r\n   //                   width: 120,\r\n   //                   value: obj.useRole == \"1\" ? 1 : 0,\r\n   //                   click: function (id /*, event */) {\r\n   //                      if ($$(id).getValue()) {\r\n   //                         $$(ids.role).enable();\r\n   //                      } else {\r\n   //                         $$(ids.role).disable();\r\n   //                      }\r\n   //                   },\r\n   //                },\r\n   //                {\r\n   //                   id: ids.role,\r\n   //                   view: \"multicombo\",\r\n   //                   value: obj.role ? obj.role : 0,\r\n   //                   disabled: obj.useRole == \"1\" ? false : true,\r\n   //                   suggest: __Roles,\r\n   //                   placeholder: L(\"Click or type to add role...\"),\r\n   //                   labelAlign: \"left\",\r\n   //                   stringResult: false /* returns data as an array of [id] */,\r\n   //                },\r\n   //             ],\r\n   //          },\r\n   //          {\r\n   //             cols: [\r\n   //                {\r\n   //                   view: \"checkbox\",\r\n   //                   id: ids.useAccount,\r\n   //                   labelRight: L(\"by Account\"),\r\n   //                   labelWidth: 0,\r\n   //                   width: 120,\r\n   //                   value: obj.useAccount == \"1\" ? 1 : 0,\r\n   //                   click: function (id /*, event */) {\r\n   //                      if ($$(id).getValue()) {\r\n   //                         $$(ids.account).enable();\r\n   //                      } else {\r\n   //                         $$(ids.account).disable();\r\n   //                      }\r\n   //                   },\r\n   //                },\r\n   //                {\r\n   //                   id: ids.account,\r\n   //                   view: \"multicombo\",\r\n   //                   value: obj.account ? obj.account : 0,\r\n   //                   disabled: obj.useAccount == \"1\" ? false : true,\r\n   //                   suggest: __Users,\r\n   //                   labelAlign: \"left\",\r\n   //                   placeholder: L(\"Click or type to add user...\"),\r\n   //                   stringResult: false /* returns data as an array of [id] */,\r\n   //                },\r\n   //             ],\r\n   //          },\r\n   //       ],\r\n   //    };\r\n   // }\r\n\r\n   /**\r\n    * stashUsersUi()\r\n    * A resuable fn to return the values from our static selectUsersUI().\r\n    * @param {string} id\r\n    *        the webix $$(id) of the properties panel area.\r\n    */\r\n   /*\r\n    * Moving this to ABDesigner/src/rootPages/Designer/forms/process\r\n    */\r\n   // static stashUsersUi(id) {\r\n   //    var obj = {};\r\n   //    var ids = ABProcessParticipant.propertyIDs(id);\r\n\r\n   //    if ($$(ids.useRole)) {\r\n   //       obj.useRole = $$(ids.useRole).getValue();\r\n   //    }\r\n\r\n   //    if ($$(ids.role) && obj.useRole) {\r\n   //       obj.role = $$(ids.role).getValue();\r\n   //       if (obj.role === \"--\") obj.role = null;\r\n   //    } else {\r\n   //       obj.role = null;\r\n   //    }\r\n\r\n   //    if ($$(ids.useAccount)) {\r\n   //       obj.useAccount = $$(ids.useAccount).getValue();\r\n   //    }\r\n\r\n   //    if ($$(ids.account) && obj.useAccount) {\r\n   //       obj.account = $$(ids.account).getValue(/*{ options: true }*/);\r\n   //       if (obj.account === \"--\") obj.account = null;\r\n   //    } else {\r\n   //       obj.account = null;\r\n   //    }\r\n\r\n   //    return obj;\r\n   // }\r\n\r\n   /**\r\n    * propertiesStash()\r\n    * pull our values from our property panel.\r\n    * @param {string} id\r\n    *        the webix $$(id) of the properties panel area.\r\n    */\r\n   propertiesStash(id) {\r\n      var ids = ABProcessParticipant.propertyIDs(id);\r\n      this.name = $$(ids.name).getValue();\r\n      if (this.laneIDs.length == 0) {\r\n         var userDef = ABProcessParticipant.stashUsersUi(id);\r\n         Object.keys(userDef).forEach((k) => {\r\n            this[k] = userDef[k];\r\n         });\r\n      }\r\n      this.stashed = true;\r\n   }\r\n};\r\n","const ABProcessElementCore = require(\"../../../core/process/tasks/ABProcessElementCore.js\");\r\n\r\nmodule.exports = class ABProcessElement extends ABProcessElementCore {\r\n   // constructor(attributes, process, AB, defaultValues) {\r\n   //    super(attributes, process, AB, defaultValues);\r\n\r\n   //    // listen\r\n   // }\r\n\r\n   /**\r\n    * @method destroy()\r\n    * remove this task definition.\r\n    * @return {Promise}\r\n    */\r\n   destroy() {\r\n      ////\r\n      //// TODO: once our core conversion is complete, this .save() can be\r\n      //// moved to ABProcessTaskCore, and our ABDefinition.save() can take\r\n      //// care of the proper method to save depending on the current Platform.\r\n      ////\r\n      // return this.toDefinition()\r\n      //     .destroy()\r\n\r\n      return super.destroy().then(() => {\r\n         return this.process.elementRemove(this);\r\n      });\r\n   }\r\n\r\n   isValid() {\r\n      /*\r\n        var validator = OP.Validation.validator();\r\n\r\n        // label/name must be unique:\r\n        var isNameUnique =\r\n            this.AB.processes((o) => {\r\n                return o.name.toLowerCase() == this.name.toLowerCase();\r\n            }).length == 0;\r\n        if (!isNameUnique) {\r\n            validator.addError(\r\n                \"name\",\r\n                L(\r\n                    \"ab.validation.object.name.unique\",\r\n                    `Process name must be unique (\"${this.name}\"\" already used in this Application)`\r\n                )\r\n            );\r\n        }\r\n\r\n        return validator;\r\n        */\r\n\r\n      // var isValid =\r\n      //     this.AB.processes((o) => {\r\n      //         return o.name.toLowerCase() == this.name.toLowerCase();\r\n      //     }).length == 0;\r\n      // return isValid;\r\n\r\n      return true;\r\n   }\r\n\r\n   ////\r\n   //// Modeler Instance Methods\r\n   ////\r\n\r\n   findLane(curr, cb) {\r\n      if (!curr) {\r\n         cb(null, null);\r\n         return;\r\n      }\r\n\r\n      // if current object has a LANE definition, use that one:\r\n      if (curr.lanes && curr.lanes.length > 0) {\r\n         cb(null, curr.lanes[0]);\r\n      } else if (curr.$type == \"bpmn:Participant\") {\r\n         // if the current is a Participant, take that one\r\n         cb(null, curr);\r\n      } else {\r\n         // else move upwards and check again:\r\n         curr = curr.$parent;\r\n         this.findLane(curr, cb);\r\n      }\r\n   }\r\n\r\n   setLane(Lane) {\r\n      this.laneDiagramID = Lane.diagramID;\r\n   }\r\n\r\n   /**\r\n    * fromElement()\r\n    * initialize this Task's values from the given BPMN:Element\r\n    * @param {BPMNElement}\r\n    */\r\n   fromElement(element) {\r\n      this.diagramID = element.id || this.diagramID;\r\n      this.onChange(element);\r\n   }\r\n\r\n   /**\r\n    * onChange()\r\n    * update the current Task with information that was relevant\r\n    * from the provided BPMN:Element\r\n    * @param {BPMNElement}\r\n    */\r\n   onChange(defElement) {\r\n      /*\r\n        Sample DefElement:\r\n            {\r\n                \"labels\": [],\r\n                \"children\": [],\r\n                \"id\": \"Task_08j07ni\",\r\n                \"width\": 100,\r\n                \"height\": 80,\r\n                \"type\": \"bpmn:SendTask\",\r\n                \"x\": 20,\r\n                \"y\": -2130,\r\n                \"order\": {\r\n                    \"level\": 5\r\n                },\r\n                \"businessObject\": {\r\n                    \"$type\": \"bpmn:SendTask\",\r\n                    \"id\": \"Task_08j07ni\",\r\n                    \"name\": \"ffff\",\r\n                    \"di\": {\r\n                        \"$type\": \"bpmndi:BPMNShape\",\r\n                        \"bounds\": {\r\n                            \"$type\": \"dc:Bounds\",\r\n                            \"x\": 20,\r\n                            \"y\": -2130,\r\n                            \"width\": 100,\r\n                            \"height\": 80\r\n                        },\r\n                        \"id\": \"SendTask_0iidv6o_di\"\r\n                    }\r\n\r\n                    // Some elements (like EndEvents) have:\r\n                    .eventDefinitions: [\r\n                        {\r\n                            $type: \"actual bpmn:ElementType\",\r\n                            ...\r\n                        }\r\n                    ]\r\n                },\r\n                \"incoming\":[],\r\n                \"outgoing\":[]\r\n            }\r\n         */\r\n\r\n      // from the BPMI modeler we can gather a label for this:\r\n      if (\r\n         defElement.businessObject.name &&\r\n         defElement.businessObject.name != \"\"\r\n      ) {\r\n         this.label = defElement.businessObject.name;\r\n      }\r\n\r\n      // our lane may have changed:\r\n      var currObj = defElement.businessObject;\r\n      this.findLane(currObj, (err, obj) => {\r\n         if (obj) {\r\n            this.laneDiagramID = obj.id;\r\n         } else {\r\n            // if my parent shape is a Participant, then use that:\r\n            if (\r\n               defElement.parent &&\r\n               defElement.parent.type == \"bpmn:Participant\"\r\n            ) {\r\n               this.laneDiagramID = defElement.parent.id;\r\n            } else {\r\n               this.laneDiagramID = null;\r\n            }\r\n         }\r\n      });\r\n   }\r\n\r\n   /**\r\n    * diagramProperties()\r\n    * return a set of values for the XML shape definition based upon\r\n    * the current values of this object.\r\n    * @return {json}\r\n    */\r\n   diagramProperties() {\r\n      return [\r\n         {\r\n            id: this.diagramID,\r\n            def: {\r\n               name: this.name,\r\n            },\r\n         },\r\n      ];\r\n   }\r\n\r\n   /**\r\n    * propertiesShow()\r\n    * display the properties panel for this Process Element.\r\n    * @param {string} id\r\n    *        the webix $$(id) of the properties panel area.\r\n    */\r\n   propertiesShow(id) {\r\n      var ui = {\r\n         id: id,\r\n         view: \"label\",\r\n         label: \"this task has not implement properties yet...\",\r\n      };\r\n\r\n      webix.ui(ui, $$(id));\r\n\r\n      $$(id).show();\r\n   }\r\n\r\n   /**\r\n    * propertiesStash()\r\n    * pull our values from our property panel.\r\n    * @param {string} id\r\n    *        the webix $$(id) of the properties panel area.\r\n    */\r\n   propertiesStash(id) {}\r\n\r\n   /**\r\n    * property()\r\n    * return the specific property value if it exists.\r\n    * @return {mixed} | undefined\r\n    */\r\n   property(id) {\r\n      if ($$(id)) {\r\n         return $$(id).getValue();\r\n      }\r\n   }\r\n\r\n   /**\r\n    * switchTo()\r\n    * replace this object with an instance of one of our child classes:\r\n    * @param {ABProcessTask*} child\r\n    *        an instance of the new Process Task we are replaced with.\r\n    * @param {string} propertiesID\r\n    *        the webix ui.id container for the properties panel.\r\n    */\r\n   switchTo(child, propertiesID) {\r\n      // remove myself from our containing process's elements\r\n      this.process.elementRemove(this);\r\n\r\n      // add the new Process WITH the same id\r\n      this.process.elementAdd(child);\r\n\r\n      // show the child properties:\r\n      child.propertiesShow(propertiesID);\r\n\r\n      this.emit(\"switchTo\", child);\r\n   }\r\n};\r\n","const ABProcessEndCore = require(\"../../../core/process/tasks/ABProcessEndCore.js\");\r\n\r\nmodule.exports = class ABProcessEnd extends ABProcessEndCore {\r\n   /**\r\n    * do()\r\n    * this method actually performs the action for this task.\r\n    * @param {obj} instance  the instance data of the running process\r\n    * @return {Promise}\r\n    *      resolve(true/false) : true if the task is completed.\r\n    *                            false if task is still waiting\r\n    */\r\n   // do(instance) {\r\n   //     return new Promise((resolve, reject) => {\r\n   //         // An End Event doesn't perform any other actions\r\n   //         // than to signal it has successfully completed.\r\n   //         // But it provides no Additional Tasks to work on.\r\n   //         // for testing:\r\n   //         this.stateCompleted(instance);\r\n   //         this.log(instance, \"End Event Reached\");\r\n   //         resolve(true);\r\n   //     });\r\n   // }\r\n};\r\n","const ABProcessGatewayExclusiveCore = require(\"../../../core/process/tasks/ABProcessGatewayExclusiveCore.js\");\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABProcessGatewayExclusive extends (\r\n   ABProcessGatewayExclusiveCore\r\n) {\r\n   ////\r\n   //// Process Instance Methods\r\n   ////\r\n\r\n   propertyIDs(id) {\r\n      return {\r\n         name: `${id}_name`,\r\n      };\r\n   }\r\n\r\n   /**\r\n    * propertiesShow()\r\n    * display the properties panel for this Process Element.\r\n    * @param {string} id\r\n    *        the webix $$(id) of the properties panel area.\r\n    */\r\n   propertiesShow(id, App) {\r\n      var ids = this.propertyIDs(id);\r\n\r\n      var ui = {\r\n         id: id,\r\n         view: \"form\",\r\n         elements: [\r\n            {\r\n               id: ids.name,\r\n               view: \"text\",\r\n               label: L(\"Name\"),\r\n               name: \"name\",\r\n               value: this.name,\r\n            },\r\n         ],\r\n      };\r\n\r\n      // here is how we can find out what possible process data\r\n      // fields are available to this task:\r\n      //   returns an [{ key:'{uuid}', label:\"\" field:{ABDataField} }, {}, ...]\r\n      var listDataFields = this.process.processDataFields(this);\r\n      var abFields = (listDataFields || []).map((f) => {\r\n         return f.field;\r\n      });\r\n\r\n      var myOutgoingConnections = this.process.connectionsOutgoing(\r\n         this.diagramID\r\n      );\r\n\r\n      this.__dfLookup = {};\r\n      this.conditions = this.conditions || {};\r\n      myOutgoingConnections.forEach((conn) => {\r\n         var condition = this.conditions[conn.id] || {};\r\n\r\n         var connectedElement = this.process.elementForDiagramID(conn.to);\r\n\r\n         var DF = this.AB.filterComplexNew(`${id}_${conn.id}_filter`);\r\n         // DF.applicationLoad(this.application);\r\n         DF.fieldsLoad(abFields);\r\n         this.__dfLookup[conn.id] = DF;\r\n\r\n         var connUI = {\r\n            view: \"fieldset\",\r\n            label: L(\"to {0}\", [\r\n               connectedElement\r\n                  ? connectedElement.name\r\n                  : L(\"unlabeled Task({0})\", [conn.id]),\r\n            ]),\r\n            body: {\r\n               rows: [\r\n                  {\r\n                     id: `${id}_${conn.id}_label`,\r\n                     view: \"text\",\r\n                     label: L(\"Label\"),\r\n                     value: condition.label || \"\",\r\n                  },\r\n                  DF.ui,\r\n               ],\r\n            },\r\n         };\r\n\r\n         ui.elements.push(connUI);\r\n      });\r\n\r\n      // DF.setValue(CurrentQuery.where);\r\n\r\n      webix.ui(ui, $$(id));\r\n\r\n      $$(id).show();\r\n\r\n      // update the filters after they have been .show()n\r\n      myOutgoingConnections.forEach((conn) => {\r\n         var condition = this.conditions[conn.id] || {};\r\n         var DF = this.__dfLookup[conn.id];\r\n         if (condition.filterValue) {\r\n            DF.setValue(condition.filterValue);\r\n         }\r\n      });\r\n   }\r\n\r\n   /**\r\n    * propertiesStash()\r\n    * pull our values from our property panel.\r\n    * @param {string} id\r\n    *        the webix $$(id) of the properties panel area.\r\n    */\r\n   propertiesStash(id) {\r\n      var ids = this.propertyIDs(id);\r\n      this.name = this.property(ids.name);\r\n      this.conditions = {};\r\n\r\n      var myOutgoingConnections = this.process.connectionsOutgoing(\r\n         this.diagramID\r\n      );\r\n      myOutgoingConnections.forEach((conn) => {\r\n         this.conditions[conn.id] = {};\r\n         this.conditions[conn.id].label = this.property(\r\n            `${id}_${conn.id}_label`\r\n         );\r\n         if (this.__dfLookup && this.__dfLookup[conn.id]) {\r\n            var DF = this.__dfLookup[conn.id];\r\n            this.conditions[conn.id].filterValue = DF.getValue();\r\n         }\r\n      });\r\n   }\r\n\r\n   /**\r\n    * diagramProperties()\r\n    * return a set of values for the XML shape definition based upon\r\n    * the current values of this object.\r\n    * @return {json}\r\n    */\r\n   diagramProperties() {\r\n      // the first entry is for the gateway element itself\r\n      var properties = [\r\n         {\r\n            id: this.diagramID,\r\n            def: {\r\n               name: this.name,\r\n            },\r\n         },\r\n      ];\r\n\r\n      // now add any additional updates for each of our connections:\r\n      var myOutgoingConnections = this.process.connectionsOutgoing(\r\n         this.diagramID\r\n      );\r\n      myOutgoingConnections.forEach((conn) => {\r\n         properties.push({\r\n            id: conn.id,\r\n            def: {\r\n               name: this.conditions[conn.id].label,\r\n            },\r\n         });\r\n      });\r\n      return properties;\r\n   }\r\n};\r\n","// import ABApplication from \"./ABApplication\"\r\n// const ABApplication = require(\"./ABApplication\"); // NOTE: change to require()\r\nconst ABProcessTaskEmailCore = require(\"../../../core/process/tasks/ABProcessTaskEmailCore.js\");\r\nconst ABProcessParticipant = require(\"../ABProcessParticipant.js\");\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABProcessTaskEmail extends ABProcessTaskEmailCore {\r\n   ////\r\n   //// Process Instance Methods\r\n   ////\r\n\r\n   /**\r\n    * do()\r\n    * this method actually performs the action for this task.\r\n    * @param {obj} instance  the instance data of the running process\r\n    * @return {Promise}\r\n    *      resolve(true/false) : true if the task is completed.\r\n    *                            false if task is still waiting\r\n    */\r\n   // do(instance) {\r\n   //     return new Promise((resolve, reject) => {\r\n   //         // for testing:\r\n   //         var myState = this.myState(instance);\r\n   //         myState.status = \"completed\";\r\n   //         this.log(instance, \"Email Sent successfully\");\r\n   //         resolve(true);\r\n   //     });\r\n   // }\r\n\r\n   /**\r\n    * initState()\r\n    * setup this task's initial state variables\r\n    * @param {obj} context  the context data of the process instance\r\n    * @param {obj} val  any values to override the default state\r\n    */\r\n   // initState(context, val) {\r\n   //     var myDefaults = {\r\n   //         to: \"0\",\r\n   //         from: \"0\",\r\n   //         subject: \"\",\r\n   //         message: \"\",\r\n   //         fromUsers: {},\r\n   //         toUsers: {},\r\n   //         toCustom: \"\",\r\n   //         fromCustom: \"\"\r\n   //     };\r\n\r\n   //     super.initState(context, myDefaults, val);\r\n   // }\r\n\r\n   propertyIDs(id) {\r\n      return {\r\n         name: `${id}_name`,\r\n         to: `${id}_to`,\r\n         from: `${id}_from`,\r\n         subject: `${id}_subject`,\r\n         fromUser: `${id}_from_user`,\r\n         toUser: `${id}_to_user`,\r\n         message: `${id}_message`,\r\n         toCustom: `${id}_to_custom`,\r\n         fromCustom: `${id}_from_custom`,\r\n      };\r\n   }\r\n\r\n   /**\r\n    * propertiesShow()\r\n    * display the properties panel for this Process Element.\r\n    * @param {string} id\r\n    *        the webix $$(id) of the properties panel area.\r\n    */\r\n   propertiesShow(id) {\r\n      var ids = this.propertyIDs(id);\r\n\r\n      var toUserUI = ABProcessParticipant.selectUsersUi(\r\n         id + \"_to_\",\r\n         this.toUsers || {}\r\n      );\r\n      var fromUserUI = ABProcessParticipant.selectUsersUi(\r\n         id + \"_from_\",\r\n         this.fromUsers || {}\r\n      );\r\n\r\n      var ui = {\r\n         id: id,\r\n         view: \"form\",\r\n         elements: [\r\n            {\r\n               id: ids.name,\r\n               view: \"text\",\r\n               label: L(\"Name\"),\r\n               name: \"name\",\r\n               value: this.name,\r\n            },\r\n            {\r\n               id: ids.to,\r\n               view: \"select\",\r\n               label: L(\"To\"),\r\n               name: \"to\",\r\n               value: this.to,\r\n               options: [\r\n                  {\r\n                     id: 0,\r\n                     value: L(\"Next Participant\"),\r\n                  },\r\n                  {\r\n                     id: 1,\r\n                     value: L(\"Select Role or User\"),\r\n                  },\r\n                  {\r\n                     id: 2,\r\n                     value: L(\"Custom\"),\r\n                  },\r\n               ],\r\n               on: {\r\n                  onChange: (val) => {\r\n                     if (parseInt(val) == 1) {\r\n                        $$(ids.toUser).show();\r\n                        $$(ids.toCustom).hide();\r\n                     } else if (parseInt(val) == 2) {\r\n                        $$(ids.toUser).hide();\r\n                        $$(ids.toCustom).show();\r\n                     } else {\r\n                        $$(ids.toUser).hide();\r\n                        $$(ids.toCustom).hide();\r\n                     }\r\n                  },\r\n               },\r\n            },\r\n            {\r\n               id: ids.toUser,\r\n               rows: [toUserUI],\r\n               paddingY: 10,\r\n               hidden: parseInt(this.to) == 1 ? false : true,\r\n            },\r\n            {\r\n               id: ids.toCustom,\r\n               view: \"text\",\r\n               label: L(\"Email\"),\r\n               placeholder: L(\"Type email address here...\"),\r\n               name: \"toCustom\",\r\n               value: this.toCustom,\r\n               hidden: parseInt(this.to) == 2 ? false : true,\r\n            },\r\n            {\r\n               id: ids.from,\r\n               view: \"select\",\r\n               label: L(\"From\"),\r\n               name: \"from\",\r\n               value: this.from,\r\n               options: [\r\n                  {\r\n                     id: 0,\r\n                     value: L(\"Current Participant\"),\r\n                  },\r\n                  {\r\n                     id: 1,\r\n                     value: L(\"Select Role or User\"),\r\n                  },\r\n                  {\r\n                     id: 2,\r\n                     value: L(\"Custom\"),\r\n                  },\r\n               ],\r\n               on: {\r\n                  onChange: (val) => {\r\n                     if (parseInt(val) == 1) {\r\n                        $$(ids.fromUser).show();\r\n                        $$(ids.fromCustom).hide();\r\n                     } else if (parseInt(val) == 2) {\r\n                        $$(ids.fromUser).hide();\r\n                        $$(ids.fromCustom).show();\r\n                     } else {\r\n                        $$(ids.fromUser).hide();\r\n                        $$(ids.fromCustom).hide();\r\n                     }\r\n                  },\r\n               },\r\n            },\r\n            {\r\n               id: ids.fromUser,\r\n               rows: [fromUserUI],\r\n               paddingY: 10,\r\n               hidden: parseInt(this.from) == 1 ? false : true,\r\n            },\r\n            {\r\n               id: ids.fromCustom,\r\n               view: \"text\",\r\n               label: L(\"Email\"),\r\n               placeholder: L(\"Type email address here...\"),\r\n               name: \"fromCustom\",\r\n               value: this.fromCustom,\r\n               hidden: parseInt(this.from) == 2 ? false : true,\r\n            },\r\n            {\r\n               id: ids.subject,\r\n               view: \"text\",\r\n               label: L(\"Subject\"),\r\n               name: \"subject\",\r\n               value: this.subject,\r\n            },\r\n            {\r\n               view: \"spacer\",\r\n               height: 10,\r\n            },\r\n            {\r\n               id: ids.message,\r\n               view: \"tinymce-editor\",\r\n               label: L(\"Message\"),\r\n               name: \"message\",\r\n               value: this.message,\r\n               borderless: true,\r\n               minHeight: 500,\r\n               config: {\r\n                  plugins: [\r\n                     \"advlist autolink lists link image charmap print preview anchor\",\r\n                     \"searchreplace visualblocks code fullscreen\",\r\n                     \"insertdatetime media table contextmenu paste imagetools wordcount\",\r\n                  ],\r\n                  toolbar:\r\n                     \"insertfile undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image\",\r\n                  init_instance_callback: (editor) => {\r\n                     editor.on(\"KeyUp\", (event) => {\r\n                        // _logic.onChange();\r\n                     });\r\n\r\n                     editor.on(\"Change\", function (event) {\r\n                        // _logic.onChange();\r\n                     });\r\n                  },\r\n               },\r\n            },\r\n         ],\r\n      };\r\n\r\n      webix.ui(ui, $$(id));\r\n\r\n      $$(id).show();\r\n   }\r\n\r\n   /**\r\n    * propertiesStash()\r\n    * pull our values from our property panel.\r\n    * @param {string} id\r\n    *        the webix $$(id) of the properties panel area.\r\n    */\r\n   propertiesStash(id) {\r\n      var ids = this.propertyIDs(id);\r\n      this.name = this.property(ids.name);\r\n      this.to = this.property(ids.to);\r\n      this.from = this.property(ids.from);\r\n      this.subject = this.property(ids.subject);\r\n      this.message = this.property(ids.message);\r\n      this.toCustom = this.property(ids.toCustom);\r\n      this.fromCustom = this.property(ids.fromCustom);\r\n      this.toUsers = ABProcessParticipant.stashUsersUi(id + \"_to_\");\r\n      this.fromUsers = ABProcessParticipant.stashUsersUi(id + \"_from_\");\r\n   }\r\n};\r\n","const ABProcessTaskServiceCore = require(\"../../../core/process/tasks/ABProcessTaskServiceCore.js\");\r\n\r\nmodule.exports = class ABProcessTaskService extends ABProcessTaskServiceCore {};\r\n","const AccountingBatchProcessingCore = require(\"../../../core/process/tasks/ABProcessTaskServiceAccountingBatchProcessingCore.js\");\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class AccountingBatchProcessing extends (\r\n   AccountingBatchProcessingCore\r\n) {\r\n   ////\r\n   //// Process Instance Methods\r\n   ////\r\n\r\n   propertyIDs(id) {\r\n      return {\r\n         name: `${id}_name`,\r\n         processBatchValue: `${id}_processBatchValue`,\r\n         objectBatch: `${id}_objectBatch`,\r\n         fieldBatchEntries: `${id}_fieldBatchEntries`,\r\n         fieldBatchFinancialPeriod: `${id}_fieldBatchFinancialPeriod`,\r\n         objectJE: `${id}_objectJE`,\r\n         fieldJEAccount: `${id}_fieldJEAccount`,\r\n         fieldJERC: `${id}_fieldJERC`,\r\n         fieldJEStatus: `${id}_fieldJEStatus`,\r\n         fieldJEStatusComplete: `${id}_fieldJEStatusComplete`,\r\n         objectBR: `${id}_objectBR`,\r\n         fieldBRFinancialPeriod: `${id}_fieldBRFinancialPeriod`,\r\n         fieldBRAccount: `${id}_fieldBRAccount`,\r\n         fieldBRRC: `${id}_fieldBRRC`,\r\n         fieldBREntries: `${id}_fieldBREntries`,\r\n      };\r\n   }\r\n\r\n   /**\r\n    * propertiesShow()\r\n    * display the properties panel for this Process Element.\r\n    * @param {string} id\r\n    *        the webix $$(id) of the properties panel area.\r\n    */\r\n   propertiesShow(id) {\r\n      var ids = this.propertyIDs(id);\r\n\r\n      var processValues = [{ id: 0, value: L(\"Select a Process Value\") }];\r\n      var processDataFields = this.process.processDataFields(this);\r\n      (processDataFields || []).forEach((row) => {\r\n         processValues.push({ id: row.key, value: row.label });\r\n      });\r\n\r\n      var objectList = this.AB.objects().map((o) => {\r\n         return { id: o.id, value: o.label || o.name, object: o };\r\n      });\r\n      objectList.unshift({\r\n         id: 0,\r\n         value: L(\"Select an Object\"),\r\n      });\r\n\r\n      //\r\n      // set up field settings:\r\n      //\r\n\r\n      var blankField = {\r\n         id: 0,\r\n         value: L(\"Select a Field\"),\r\n      };\r\n      // blankField : generic Select a field entry\r\n\r\n      function defaultFields(objID) {\r\n         // create a new options array of Field Choices for the given obj.id\r\n\r\n         var fields = [blankField];\r\n         if (objID) {\r\n            var entry = objectList.find((o) => o.id == objID);\r\n            if (entry && entry.object) {\r\n               entry.object.fields().forEach((f) => {\r\n                  fields.push({ id: f.id, value: f.label, field: f });\r\n               });\r\n            }\r\n         }\r\n         return fields;\r\n      }\r\n\r\n      function updateFields(fieldPickers, fieldValues, defaultValue) {\r\n         // update the list of field select choices with the new field choices\r\n\r\n         fieldPickers.forEach((fp) => {\r\n            var picker = $$(fp);\r\n            if (picker) {\r\n               picker.define(\"options\", fieldValues);\r\n               // if (defaultValue) {\r\n               //    picker.define(\"value\", defaultValue);\r\n               // } else {\r\n               //    picker.define(\"value\", fieldValues[0].value);\r\n               // }\r\n               picker.refresh();\r\n               picker.show();\r\n            }\r\n         });\r\n      }\r\n\r\n      var batchFields = defaultFields(this.objectBatch);\r\n      // batchFields : the default list of fields for the Batch Object\r\n\r\n      var fieldPickersBatch = [\r\n         ids.fieldBatchEntries,\r\n         ids.fieldBatchFinancialPeriod,\r\n      ];\r\n      // fieldPickersBatch : the list of field selects to update for the Batch\r\n      //      object.\r\n\r\n      var jeFields = defaultFields(this.objectJE);\r\n      // jeFields : the default list of fields for the Journal Entry Object\r\n\r\n      var fieldPickersJE = [\r\n         ids.fieldJEAccount,\r\n         ids.fieldJERC,\r\n         ids.fieldJEStatus,\r\n      ];\r\n      // fieldPickersJE : the list of field selects to update for the Journal Entry\r\n      //      object.\r\n\r\n      function compileStatusValues(statusField) {\r\n         var values = [{ id: 0, value: L(\"Select the Complete Value\") }];\r\n         if (statusField && statusField.options) {\r\n            statusField.options().forEach((o) => {\r\n               values.push({ id: o.id, value: o.text });\r\n            });\r\n         }\r\n         return values;\r\n      }\r\n\r\n      function updatePickerStatusComplete(values) {\r\n         var wbxComplete = $$(ids.fieldJEStatusComplete);\r\n         if (wbxComplete) {\r\n            // update fieldJEStatusComplete options\r\n            wbxComplete.define(\"options\", values);\r\n            wbxComplete.refresh();\r\n            // show fieldJEStatusComplete\r\n            wbxComplete.show();\r\n         }\r\n      }\r\n\r\n      function onStatusComplete(newVal) {\r\n         // pull the ABField object from newValue\r\n         var jeEntryID = $$(ids.objectJE).getValue();\r\n         var jeEntry = objectList.find((o) => o.id == jeEntryID);\r\n         if (jeEntry && jeEntry.object) {\r\n            var statusField = jeEntry.object.fieldByID(newVal);\r\n            if (statusField && statusField.options) {\r\n               // get the options as an []\r\n               jeFieldStatusValues = compileStatusValues(statusField);\r\n\r\n               updatePickerStatusComplete(jeFieldStatusValues);\r\n            }\r\n         }\r\n      }\r\n\r\n      var jeFieldStatusValues = compileStatusValues();\r\n      // jeFieldStatusValues : the list of status options from the fieldJEStatus\r\n      //      selected entry.\r\n\r\n      var brFields = defaultFields(this.objectBR);\r\n      // jeFields : the default list of fields for the Journal Entry Object\r\n\r\n      var fieldPickersBR = [\r\n         ids.fieldBRFinancialPeriod,\r\n         ids.fieldBRAccount,\r\n         ids.fieldBRRC,\r\n         ids.fieldBREntries,\r\n      ];\r\n      // fieldPickersBR : the list of field selects to update for the Balance Record\r\n      //      object.\r\n\r\n      var ui = {\r\n         id: id,\r\n         view: \"form\",\r\n         elements: [\r\n            {\r\n               id: ids.name,\r\n               view: \"text\",\r\n               label: L(\"Name\"),\r\n               name: \"name\",\r\n               value: this.name,\r\n            },\r\n            {\r\n               id: ids.processBatchValue,\r\n               view: \"select\",\r\n               label: L(\"Process Batch Value\"),\r\n               value: this.processBatchValue,\r\n               name: \"processBatchValue\",\r\n               options: processValues,\r\n            },\r\n            {\r\n               id: ids.objectBatch,\r\n               view: \"select\",\r\n               label: L(\"Batch Object\"),\r\n               value: this.objectBatch,\r\n               name: \"objectBatch\",\r\n               options: objectList,\r\n               on: {\r\n                  onChange(newVal, oldVal) {\r\n                     if (newVal != oldVal) {\r\n                        // gather new set of batchFields\r\n                        batchFields = defaultFields(newVal);\r\n                        // rebuild the associated list of Fields to pick\r\n                        updateFields(fieldPickersBatch, batchFields);\r\n                     }\r\n                  },\r\n               },\r\n            },\r\n            {\r\n               id: ids.fieldBatchEntries,\r\n               view: \"select\",\r\n               label: L(\"Batch->JE[]\"),\r\n               value: this.fieldBatchEntries,\r\n               name: \"fieldBatchEntries\",\r\n               options: batchFields,\r\n               hidden: true,\r\n            },\r\n            {\r\n               id: ids.fieldBatchFinancialPeriod,\r\n               view: \"select\",\r\n               label: L(\"Batch->FinancialPeriod\"),\r\n               value: this.fieldBatchFinancialPeriod,\r\n               name: \"fieldBatchFinancialPeriod\",\r\n               options: batchFields,\r\n               hidden: true,\r\n            },\r\n            {\r\n               id: ids.objectJE,\r\n               view: \"select\",\r\n               label: L(\"Journal Entry Object\"),\r\n               value: this.objectJE,\r\n               name: \"objectJE\",\r\n               options: objectList,\r\n               on: {\r\n                  onChange(newVal, oldVal) {\r\n                     if (newVal != oldVal) {\r\n                        // gather new set of jeFields\r\n                        jeFields = defaultFields(newVal);\r\n                        // rebuild the associated list of Fields to pick\r\n                        updateFields(fieldPickersJE, jeFields);\r\n                     }\r\n                  },\r\n               },\r\n            },\r\n            {\r\n               id: ids.fieldJEAccount,\r\n               view: \"select\",\r\n               label: L(\"JE->Account\"),\r\n               value: this.fieldJEAccount,\r\n               name: \"fieldJEAccount\",\r\n               options: jeFields,\r\n               hidden: true,\r\n            },\r\n            {\r\n               id: ids.fieldJERC,\r\n               view: \"select\",\r\n               label: L(\"JE->RC\"),\r\n               value: this.fieldJERC,\r\n               name: \"fieldJERC\",\r\n               options: jeFields,\r\n               hidden: true,\r\n            },\r\n            {\r\n               id: ids.fieldJEStatus,\r\n               view: \"select\",\r\n               label: L(\"JE->Status\"),\r\n               value: this.fieldJEStatus,\r\n               name: \"fieldJEStatus\",\r\n               options: jeFields,\r\n               hidden: true,\r\n               on: {\r\n                  onChange(newVal, oldVal) {\r\n                     if (newVal != oldVal) {\r\n                        onStatusComplete(newVal);\r\n                     }\r\n                  },\r\n               },\r\n            },\r\n            {\r\n               id: ids.fieldJEStatusComplete,\r\n               view: \"select\",\r\n               label: L(\"JE->Status->Complete\"),\r\n               value: this.fieldJEStatusComplete,\r\n               name: \"fieldJEStatusComplete\",\r\n               options: jeFieldStatusValues,\r\n               hidden: true,\r\n            },\r\n            {\r\n               id: ids.objectBR,\r\n               view: \"select\",\r\n               label: L(\"Balance Record\"),\r\n               value: this.objectBR,\r\n               name: \"objectBR\",\r\n               options: objectList,\r\n               on: {\r\n                  onChange(newVal, oldVal) {\r\n                     if (newVal != oldVal) {\r\n                        // gather new set of jeFields\r\n                        brFields = defaultFields(newVal);\r\n                        // rebuild the associated list of Fields to pick\r\n                        updateFields(fieldPickersBR, brFields);\r\n                     }\r\n                  },\r\n               },\r\n            },\r\n            {\r\n               id: ids.fieldBRFinancialPeriod,\r\n               view: \"select\",\r\n               label: L(\"BR->FP\"),\r\n               value: this.fieldBRFinancialPeriod,\r\n               name: \"fieldBRFinancialPeriod\",\r\n               options: brFields,\r\n               hidden: true,\r\n            },\r\n            {\r\n               id: ids.fieldBRAccount,\r\n               view: \"select\",\r\n               label: L(\"BR->Account\"),\r\n               value: this.fieldBRAccount,\r\n               name: \"fieldBRAccount\",\r\n               options: brFields,\r\n               hidden: true,\r\n            },\r\n            {\r\n               id: ids.fieldBRRC,\r\n               view: \"select\",\r\n               label: L(\"BR->RC\"),\r\n               value: this.fieldBRRC,\r\n               name: \"fieldBRRC\",\r\n               options: brFields,\r\n               hidden: true,\r\n            },\r\n            {\r\n               id: ids.fieldBREntries,\r\n               view: \"select\",\r\n               label: L(\"BR->Entries\"),\r\n               value: this.fieldBREntries,\r\n               name: \"fieldBREntries\",\r\n               options: brFields,\r\n               hidden: true,\r\n            },\r\n         ],\r\n      };\r\n\r\n      webix.ui(ui, $$(id));\r\n\r\n      // if there are already default values for our Objects,\r\n      // unhide the field selectors:\r\n      if (this.objectBatch && this.objectBatch != 0) {\r\n         updateFields(fieldPickersBatch, batchFields);\r\n      }\r\n\r\n      if (this.objectJE && this.objectJE != 0) {\r\n         updateFields(fieldPickersJE, jeFields);\r\n      }\r\n\r\n      if (this.fieldJEStatus) {\r\n         onStatusComplete(this.fieldJEStatus);\r\n      }\r\n\r\n      if (this.objectBR && this.objectBR != 0) {\r\n         updateFields(fieldPickersBR, brFields);\r\n      }\r\n\r\n      $$(id).show();\r\n   }\r\n\r\n   /**\r\n    * propertiesStash()\r\n    * pull our values from our property panel.\r\n    * @param {string} id\r\n    *        the webix $$(id) of the properties panel area.\r\n    */\r\n   propertiesStash(id) {\r\n      var ids = this.propertyIDs(id);\r\n      this.name = this.property(ids.name);\r\n\r\n      this.defaults.settings.forEach((s) => {\r\n         this[s] = this.property(ids[s]);\r\n      });\r\n   }\r\n};\r\n","const AccountingFPCloseCore = require(\"../../../core/process/tasks/ABProcessTaskServiceAccountingFPCloseCore.js\");\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class AccountingFPClose extends AccountingFPCloseCore {\r\n   ////\r\n   //// Process Instance Methods\r\n   ////\r\n\r\n   propertyIDs(id) {\r\n      return {\r\n         name: `${id}_name`,\r\n         processFPValue: `${id}_processFPValue`,\r\n         objectFP: `${id}_objectFP`,\r\n         objectGL: `${id}_objectGL`,\r\n         objectAcc: `${id}_objectAcc`,\r\n         fieldFPStart: `${id}_fieldFPStart`,\r\n         fieldFPOpen: `${id}_fieldFPOpen`,\r\n         fieldFPStatus: `${id}_fieldFPStatus`,\r\n         fieldFPActive: `${id}_fieldFPActive`,\r\n         fieldGLStarting: `${id}_fieldGLStarting`,\r\n         fieldGLRunning: `${id}_fieldGLRunning`,\r\n         fieldGLAccount: `${id}_fieldGLAccount`,\r\n         fieldGLRc: `${id}_fieldGLRc`,\r\n         fieldGLDebit: `${id}fieldGLDebit`,\r\n         fieldGLCredit: `${id}_fieldGLCredit`,\r\n         fieldAccType: `${id}_fieldAccType`,\r\n         fieldAccAsset: `${id}_fieldAccAsset`,\r\n         fieldAccExpense: `${id}_fieldAccExpense`,\r\n         fieldAccLiabilities: `${id}_fieldAccLiabilities`,\r\n         fieldAccEquity: `${id}_fieldAccEquity`,\r\n         fieldAccIncome: `${id}_fieldAccIncome`,\r\n      };\r\n   }\r\n\r\n   /**\r\n    * propertiesShow()\r\n    * display the properties panel for this Process Element.\r\n    * @param {string} id\r\n    *        the webix $$(id) of the properties panel area.\r\n    */\r\n   propertiesShow(id) {\r\n      var ids = this.propertyIDs(id);\r\n\r\n      var processValues = [{ id: 0, value: L(\"Select a Process Value\") }];\r\n      var processDataFields = this.process.processDataFields(this);\r\n      (processDataFields || []).forEach((row) => {\r\n         processValues.push({ id: row.key, value: row.label });\r\n      });\r\n\r\n      var objectList = this.AB.objects().map((o) => {\r\n         return { id: o.id, value: o.label || o.name, object: o };\r\n      });\r\n      objectList.unshift({\r\n         id: 0,\r\n         value: L(\"Select an Object\"),\r\n      });\r\n\r\n      let getFieldOptions = (objID) => {\r\n         let fields = [\r\n            {\r\n               id: 0,\r\n               value: L(\"Select a Field\"),\r\n            },\r\n         ];\r\n\r\n         if (objID) {\r\n            var entry = objectList.find((o) => o.id == objID);\r\n            if (entry && entry.object) {\r\n               entry.object.fields().forEach((f) => {\r\n                  fields.push({ id: f.id, value: f.label, field: f });\r\n               });\r\n            }\r\n         }\r\n         return fields;\r\n      };\r\n\r\n      let getStatusFieldOptions = (statusFieldId) => {\r\n         let result = [];\r\n         let fpObject = this.AB.objectByID(this.objectFP);\r\n         if (!fpObject) return result;\r\n\r\n         let fpStatusField = fpObject.fieldByID(statusFieldId);\r\n         if (\r\n            !fpStatusField ||\r\n            !fpStatusField.settings ||\r\n            !fpStatusField.settings.options\r\n         )\r\n            return result;\r\n\r\n         result = (fpStatusField.settings.options || []).map((opt) => {\r\n            return {\r\n               id: opt.id,\r\n               value: opt.text,\r\n            };\r\n         });\r\n\r\n         return result;\r\n      };\r\n\r\n      let updateFPFields = (fpFields) => {\r\n         [ids.fieldFPStart, ids.fieldFPOpen, ids.fieldFPStatus].forEach(\r\n            (fieldGLElem) => {\r\n               $$(fieldGLElem).define(\"options\", fpFields);\r\n               $$(fieldGLElem).refresh();\r\n            }\r\n         );\r\n      };\r\n\r\n      let updateFPStatusFields = (fpStatusOptions) => {\r\n         $$(ids.fieldFPActive).define(\"options\", fpStatusOptions);\r\n         $$(ids.fieldFPActive).refresh();\r\n      };\r\n\r\n      let updateGLFields = (glFields) => {\r\n         [\r\n            ids.fieldGLRunning,\r\n            ids.fieldGLAccount,\r\n            ids.fieldGLRc,\r\n            ids.fieldGLDebit,\r\n            ids.fieldGLCredit,\r\n         ].forEach((fieldGLElem) => {\r\n            $$(fieldGLElem).define(\"options\", glFields);\r\n            $$(fieldGLElem).refresh();\r\n         });\r\n      };\r\n\r\n      let updateAccFields = (accFields) => {\r\n         $$(ids.fieldAccType).define(\"options\", accFields);\r\n         $$(ids.fieldAccType).refresh();\r\n      };\r\n\r\n      let updateAccTypeOptions = (accTypeOptions) => {\r\n         [\r\n            ids.fieldAccAsset,\r\n            ids.fieldAccExpense,\r\n            ids.fieldAccLiabilities,\r\n            ids.fieldAccEquity,\r\n            ids.fieldAccIncome,\r\n         ].forEach((fieldGLElem) => {\r\n            $$(fieldGLElem).define(\"options\", accTypeOptions);\r\n            $$(fieldGLElem).refresh();\r\n         });\r\n      };\r\n\r\n      let getListOptions = (objectId, fieldId) => {\r\n         let result = [];\r\n         let object = this.AB.objectByID(objectId);\r\n         if (!object) return result;\r\n\r\n         let fpStatusField = object.fieldByID(fieldId);\r\n         if (\r\n            !fpStatusField ||\r\n            !fpStatusField.settings ||\r\n            !fpStatusField.settings.options\r\n         )\r\n            return result;\r\n\r\n         result = (fpStatusField.settings.options || []).map((opt) => {\r\n            return {\r\n               id: opt.id,\r\n               value: opt.text,\r\n            };\r\n         });\r\n\r\n         return result;\r\n      };\r\n\r\n      let fpFields = getFieldOptions(this.objectFP);\r\n      let glFields = getFieldOptions(this.objectGL);\r\n      let accFields = getFieldOptions(this.objectAcc);\r\n      let fpStatusFields = getStatusFieldOptions(this.fieldFPStatus);\r\n      let accTypeOptions = getListOptions(this.objectAcc, this.fieldAccType);\r\n\r\n      var ui = {\r\n         id: id,\r\n         view: \"form\",\r\n         elementsConfig: {\r\n            labelWidth: 200,\r\n         },\r\n         elements: [\r\n            {\r\n               id: ids.name,\r\n               view: \"text\",\r\n               label: L(\"Name\"),\r\n               name: \"name\",\r\n               value: this.name,\r\n            },\r\n            {\r\n               id: ids.processFPValue,\r\n               view: \"select\",\r\n               label: L(\"Process Fiscal Period Value\"),\r\n               value: this.processFPValue,\r\n               name: \"processFPValue\",\r\n               options: processValues,\r\n            },\r\n            {\r\n               id: ids.objectFP,\r\n               view: \"select\",\r\n               label: L(\"FP Object\"),\r\n               value: this.objectFP,\r\n               name: \"objectFP\",\r\n               options: objectList,\r\n               on: {\r\n                  onChange(newVal, oldVal) {\r\n                     if (newVal != oldVal) {\r\n                        // gather new set of batchFields\r\n                        fpFields = getFieldOptions(newVal);\r\n                        // rebuild the associated list of Fields to pick\r\n                        updateFPFields(fpFields);\r\n                     }\r\n                  },\r\n               },\r\n            },\r\n            {\r\n               id: ids.objectGL,\r\n               view: \"select\",\r\n               label: L(\"GL Object\"),\r\n               value: this.objectGL,\r\n               name: \"objectGL\",\r\n               options: objectList,\r\n               on: {\r\n                  onChange(newVal, oldVal) {\r\n                     if (newVal != oldVal) {\r\n                        // gather new set of batchFields\r\n                        glFields = getFieldOptions(newVal);\r\n                        // rebuild the associated list of Fields to pick\r\n                        updateGLFields(glFields);\r\n                     }\r\n                  },\r\n               },\r\n            },\r\n            {\r\n               id: ids.objectAcc,\r\n               view: \"select\",\r\n               label: L(\"Account Object\"),\r\n               value: this.objectAcc,\r\n               name: \"objectAcc\",\r\n               options: objectList,\r\n               on: {\r\n                  onChange(newVal, oldVal) {\r\n                     if (newVal != oldVal) {\r\n                        accFields = getFieldOptions(newVal);\r\n                        updateAccFields(accFields);\r\n                     }\r\n                  },\r\n               },\r\n            },\r\n            {\r\n               id: ids.fieldFPStart,\r\n               view: \"select\",\r\n               label: L(\"FP -> Start\"),\r\n               value: this.fieldFPStart,\r\n               name: \"fieldFPStart\",\r\n               options: fpFields,\r\n            },\r\n            {\r\n               id: ids.fieldFPOpen,\r\n               view: \"select\",\r\n               label: L(\"FP -> Open\"),\r\n               value: this.fieldFPOpen,\r\n               name: \"fieldFPOpen\",\r\n               options: fpFields,\r\n            },\r\n            {\r\n               id: ids.fieldFPStatus,\r\n               view: \"select\",\r\n               label: L(\"FP -> Status\"),\r\n               value: this.fieldFPStatus,\r\n               name: \"fieldFPStatus\",\r\n               options: fpFields,\r\n               on: {\r\n                  onChange(newVal, oldVal) {\r\n                     if (newVal != oldVal) {\r\n                        fpStatusFields = getStatusFieldOptions(newVal);\r\n                        updateFPStatusFields(fpStatusFields);\r\n                     }\r\n                  },\r\n               },\r\n            },\r\n            {\r\n               id: ids.fieldFPActive,\r\n               view: \"select\",\r\n               label: L(\"FP -> Active\"),\r\n               value: this.fieldFPActive,\r\n               name: \"fieldFPActive\",\r\n               options: fpStatusFields,\r\n            },\r\n            {\r\n               id: ids.fieldGLStarting,\r\n               view: \"select\",\r\n               label: L(\"GL -> Starting BL\"),\r\n               value: this.fieldGLStarting,\r\n               name: \"fieldGLStarting\",\r\n               options: glFields,\r\n            },\r\n            {\r\n               id: ids.fieldGLRunning,\r\n               view: \"select\",\r\n               label: L(\"GL -> Running BL\"),\r\n               value: this.fieldGLRunning,\r\n               name: \"fieldGLRunning\",\r\n               options: glFields,\r\n            },\r\n            {\r\n               id: ids.fieldGLAccount,\r\n               view: \"select\",\r\n               label: L(\"GL -> Account\"),\r\n               value: this.fieldGLAccount,\r\n               name: \"fieldGLAccount\",\r\n               options: glFields,\r\n            },\r\n            {\r\n               id: ids.fieldGLRc,\r\n               view: \"select\",\r\n               label: L(\"GL -> RC\"),\r\n               value: this.fieldGLRc,\r\n               name: \"fieldGLRc\",\r\n               options: glFields,\r\n            },\r\n            {\r\n               id: ids.fieldGLDebit,\r\n               view: \"select\",\r\n               label: L(\"GL -> Debit\"),\r\n               value: this.fieldGLDebit,\r\n               name: \"fieldGLDebit\",\r\n               options: glFields,\r\n            },\r\n            {\r\n               id: ids.fieldGLCredit,\r\n               view: \"select\",\r\n               label: L(\"GL -> Credit\"),\r\n               value: this.fieldGLCredit,\r\n               name: \"fieldGLCredit\",\r\n               options: glFields,\r\n            },\r\n            {\r\n               id: ids.fieldAccType,\r\n               view: \"select\",\r\n               label: L(\"Acc -> Type\"),\r\n               value: this.fieldAccType,\r\n               name: \"fieldAccType\",\r\n               options: accFields,\r\n               on: {\r\n                  onChange: (newVal, oldVal) => {\r\n                     if (newVal != oldVal) {\r\n                        accTypeOptions = getListOptions(\r\n                           this.objectAcc || $$(ids.objectAcc).getValue(),\r\n                           newVal\r\n                        );\r\n                        updateAccTypeOptions(accTypeOptions);\r\n                     }\r\n                  },\r\n               },\r\n            },\r\n            {\r\n               id: ids.fieldAccAsset,\r\n               view: \"select\",\r\n               label: L(\"Acc -> Asset\"),\r\n               value: this.fieldAccAsset,\r\n               name: \"fieldAccAsset\",\r\n               options: accTypeOptions,\r\n            },\r\n            {\r\n               id: ids.fieldAccExpense,\r\n               view: \"select\",\r\n               label: L(\"Acc -> Expense\"),\r\n               value: this.fieldAccExpense,\r\n               name: \"fieldAccExpense\",\r\n               options: accTypeOptions,\r\n            },\r\n            {\r\n               id: ids.fieldAccLiabilities,\r\n               view: \"select\",\r\n               label: L(\"Acc -> Liabilities\"),\r\n               value: this.fieldAccLiabilities,\r\n               name: \"fieldAccLiabilities\",\r\n               options: accTypeOptions,\r\n            },\r\n            {\r\n               id: ids.fieldAccEquity,\r\n               view: \"select\",\r\n               label: L(\"Acc -> Equity\"),\r\n               value: this.fieldAccEquity,\r\n               name: \"fieldAccEquity\",\r\n               options: accTypeOptions,\r\n            },\r\n            {\r\n               id: ids.fieldAccIncome,\r\n               view: \"select\",\r\n               label: L(\"Acc -> Income\"),\r\n               value: this.fieldAccIncome,\r\n               name: \"fieldAccIncome\",\r\n               options: accTypeOptions,\r\n            },\r\n         ],\r\n      };\r\n\r\n      webix.ui(ui, $$(id));\r\n\r\n      $$(id).show();\r\n   }\r\n\r\n   /**\r\n    * propertiesStash()\r\n    * pull our values from our property panel.\r\n    * @param {string} id\r\n    *        the webix $$(id) of the properties panel area.\r\n    */\r\n   propertiesStash(id) {\r\n      var ids = this.propertyIDs(id);\r\n      this.name = this.property(ids.name);\r\n\r\n      // TIP: keep the .settings entries == ids[s] keys and this will\r\n      // remain simple:\r\n      this.defaults.settings.forEach((s) => {\r\n         this[s] = this.property(ids[s]);\r\n      });\r\n   }\r\n};\r\n","const AccountingFPYearCloseCore = require(\"../../../core/process/tasks/ABProcessTaskServiceAccountingFPYearCloseCore.js\");\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class AccountingFPYearClose extends AccountingFPYearCloseCore {\r\n   ////\r\n   //// Process Instance Methods\r\n   ////\r\n   propertyIDs(id) {\r\n      return {\r\n         name: `${id}_name`,\r\n         processFPYearValue: `${id}_processFPYearValue`,\r\n         objectFPYear: `${id}_objectFPYear`,\r\n         objectFPMonth: `${id}_objectFPMonth`,\r\n         objectGL: `${id}_objectGL`,\r\n         objectAccount: `${id}_objectAccount`,\r\n         valueFundBalances: `${id}_valueFundBalances`,\r\n         valueNetIncome: `${id}_valueNetIncome`,\r\n         fieldFPYearStart: `${id}_fieldFPYearStart`,\r\n         fieldFPYearEnd: `${id}_fieldFPYearEnd`,\r\n         fieldFPYearStatus: `${id}_fieldFPYearStatus`,\r\n         fieldFPYearActive: `${id}_fieldFPYearActive`,\r\n         fieldFPMonthStart: `${id}_fieldFPMonthStart`,\r\n         fieldFPMonthEnd: `${id}_fieldFPMonthEnd`,\r\n         fieldGLStartBalance: `${id}_fieldGLStartBalance`,\r\n         fieldGLRunningBalance: `${id}_fieldGLRunningBalance`,\r\n         fieldGLrc: `${id}_fieldGLrc`,\r\n         fieldAccNumber: `${id}_fieldAccNumber`,\r\n         fieldAccType: `${id}_fieldAccType`,\r\n         fieldAccTypeIncome: `${id}_fieldAccTypeIncome`,\r\n         fieldAccTypeExpense: `${id}_fieldAccTypeExpense`,\r\n         fieldAccTypeEquity: `${id}_fieldAccTypeEquity`,\r\n      };\r\n   }\r\n\r\n   /**\r\n    * propertiesShow()\r\n    * display the properties panel for this Process Element.\r\n    * @param {string} id\r\n    *        the webix $$(id) of the properties panel area.\r\n    */\r\n   propertiesShow(id) {\r\n      var ids = this.propertyIDs(id);\r\n\r\n      var processValues = [{ id: 0, value: L(\"Select a Process Value\") }];\r\n      var processDataFields = this.process.processDataFields(this);\r\n      (processDataFields || []).forEach((row) => {\r\n         processValues.push({ id: row.key, value: row.label });\r\n      });\r\n\r\n      var objectList = this.AB.objects().map((o) => {\r\n         return { id: o.id, value: o.label || o.name, object: o };\r\n      });\r\n      objectList.unshift({\r\n         id: 0,\r\n         value: L(\"Select an Object\"),\r\n      });\r\n\r\n      let getFieldOptions = (objID, fieldKey) => {\r\n         let fields = [\r\n            {\r\n               id: 0,\r\n               value: L(\"Select a Field\"),\r\n            },\r\n         ];\r\n\r\n         if (objID) {\r\n            var entry = objectList.find((o) => o.id == objID);\r\n            if (entry && entry.object) {\r\n               entry.object\r\n                  .fields((f) => f.key == fieldKey)\r\n                  .forEach((f) => {\r\n                     fields.push({ id: f.id, value: f.label, field: f });\r\n                  });\r\n            }\r\n         }\r\n         return fields;\r\n      };\r\n\r\n      let getListOptions = (objectId, fieldId) => {\r\n         let result = [];\r\n         let object = this.AB.objectByID(objectId);\r\n         if (!object) return result;\r\n\r\n         let fpStatusField = object.fieldByID(fieldId);\r\n         if (\r\n            !fpStatusField ||\r\n            !fpStatusField.settings ||\r\n            !fpStatusField.settings.options\r\n         )\r\n            return result;\r\n\r\n         result = (fpStatusField.settings.options || []).map((opt) => {\r\n            return {\r\n               id: opt.id,\r\n               value: opt.text,\r\n            };\r\n         });\r\n\r\n         return result;\r\n      };\r\n\r\n      let updateAccNumberFields = (accNumberFields) => {\r\n         $$(ids.fieldAccNumber).define(\"options\", accNumberFields);\r\n         $$(ids.fieldAccNumber).refresh();\r\n      };\r\n\r\n      let updateAccFields = (accFields) => {\r\n         $$(ids.fieldAccType).define(\"options\", accFields);\r\n         $$(ids.fieldAccType).refresh();\r\n      };\r\n\r\n      let updateAccTypeOptions = (accTypeOptions) => {\r\n         [\r\n            ids.fieldAccTypeIncome,\r\n            ids.fieldAccTypeExpense,\r\n            ids.fieldAccTypeEquity,\r\n         ].forEach((fieldGLElem) => {\r\n            $$(fieldGLElem).define(\"options\", accTypeOptions);\r\n            $$(fieldGLElem).refresh();\r\n         });\r\n      };\r\n\r\n      let updateFPYearDateOptions = (fpYearDateOptions) => {\r\n         [ids.fieldFPYearStart, ids.fieldFPYearEnd].forEach((fieldGLElem) => {\r\n            $$(fieldGLElem).define(\"options\", fpYearDateOptions);\r\n            $$(fieldGLElem).refresh();\r\n         });\r\n      };\r\n\r\n      let updateFPYearStatusOptions = (fpYearStatusFields) => {\r\n         $$(ids.fieldFPYearStatus).define(\"options\", fpYearStatusFields);\r\n         $$(ids.fieldFPYearStatus).refresh();\r\n      };\r\n\r\n      let updateFPYearActiveOptions = (fpYearStatusOptions) => {\r\n         $$(ids.fieldFPYearActive).define(\"options\", fpYearStatusOptions);\r\n         $$(ids.fieldFPYearActive).refresh();\r\n      };\r\n\r\n      let updateFPMonthDateFields = (fpMonthDateOpts) => {\r\n         [ids.fieldFPMonthStart, ids.fieldFPMonthEnd].forEach((fieldGLElem) => {\r\n            $$(fieldGLElem).define(\"options\", fpMonthDateOpts);\r\n            $$(fieldGLElem).refresh();\r\n         });\r\n      };\r\n\r\n      let updateGlNumberFields = (glNumberOptions) => {\r\n         [ids.fieldGLStartBalance, ids.fieldGLRunningBalance].forEach(\r\n            (fieldGLElem) => {\r\n               $$(fieldGLElem).define(\"options\", glNumberOptions);\r\n               $$(fieldGLElem).refresh();\r\n            }\r\n         );\r\n      };\r\n\r\n      let updateGlConnectFields = (glRcOptions) => {\r\n         $$(ids.fieldGLrc).define(\"options\", glRcOptions);\r\n         $$(ids.fieldGLrc).refresh();\r\n      };\r\n\r\n      let fpYearDateFields = getFieldOptions(this.objectFPYear, \"date\");\r\n      let fpYearStatusFields = getFieldOptions(this.objectFPYear, \"list\");\r\n      let fpYearStatusOptions = getListOptions(\r\n         this.objectFPYear,\r\n         this.fieldFPYearStatus\r\n      );\r\n      let fpMonthDateFields = getFieldOptions(this.objectFPMonth, \"date\");\r\n      let glNumberFields = getFieldOptions(this.objectGL, \"number\");\r\n      let glRcFields = getFieldOptions(this.objectGL, \"connectObject\");\r\n      let accNumberFields = getFieldOptions(this.objectAccount, \"number\");\r\n      let accTypeFields = getFieldOptions(this.objectAccount, \"list\");\r\n      let accTypeOptions = getListOptions(\r\n         this.objectAccount,\r\n         this.fieldAccType\r\n      );\r\n\r\n      var ui = {\r\n         id: id,\r\n         view: \"form\",\r\n         elementsConfig: {\r\n            labelWidth: 200,\r\n         },\r\n         elements: [\r\n            {\r\n               id: ids.name,\r\n               view: \"text\",\r\n               label: L(\"Name\"),\r\n               name: \"name\",\r\n               value: this.name,\r\n            },\r\n            {\r\n               id: ids.processFPYearValue,\r\n               view: \"select\",\r\n               label: L(\"Process Fiscal Period Year Value\"),\r\n               value: this.processFPYearValue,\r\n               name: \"processFPYearValue\",\r\n               options: processValues,\r\n            },\r\n            {\r\n               id: ids.objectFPYear,\r\n               view: \"select\",\r\n               label: L(\"FP Year Object\"),\r\n               value: this.objectFPYear,\r\n               name: \"objectFPYear\",\r\n               options: objectList,\r\n               on: {\r\n                  onChange: (newVal, oldVal) => {\r\n                     if (newVal != oldVal) {\r\n                        fpYearDateFields = getFieldOptions(newVal, \"date\");\r\n                        updateFPYearDateOptions(fpYearDateFields);\r\n\r\n                        accTypeFields = getFieldOptions(newVal, \"list\");\r\n                        updateFPYearStatusOptions(accTypeFields);\r\n                     }\r\n                  },\r\n               },\r\n            },\r\n            {\r\n               id: ids.objectFPMonth,\r\n               view: \"select\",\r\n               label: L(\"FP Month Object\"),\r\n               value: this.objectFPMonth,\r\n               name: \"objectFPMonth\",\r\n               options: objectList,\r\n               on: {\r\n                  onChange: (newVal, oldVal) => {\r\n                     if (newVal != oldVal) {\r\n                        fpMonthDateFields = getFieldOptions(newVal, \"date\");\r\n                        updateFPMonthDateFields(fpMonthDateFields);\r\n                     }\r\n                  },\r\n               },\r\n            },\r\n            {\r\n               id: ids.objectGL,\r\n               view: \"select\",\r\n               label: L(\"Balance Object\"),\r\n               value: this.objectGL,\r\n               name: \"objectGL\",\r\n               options: objectList,\r\n               on: {\r\n                  onChange: (newVal, oldVal) => {\r\n                     if (newVal != oldVal) {\r\n                        glNumberFields = getFieldOptions(newVal, \"number\");\r\n                        updateGlNumberFields(glNumberFields);\r\n\r\n                        glRcFields = getFieldOptions(newVal, \"connectObject\");\r\n                        updateGlConnectFields(glRcFields);\r\n                     }\r\n                  },\r\n               },\r\n            },\r\n            {\r\n               id: ids.objectAccount,\r\n               view: \"select\",\r\n               label: L(\"Account Object\"),\r\n               value: this.objectAccount,\r\n               name: \"objectAccount\",\r\n               options: objectList,\r\n               on: {\r\n                  onChange: (newVal, oldVal) => {\r\n                     if (newVal != oldVal) {\r\n                        accTypeFields = getFieldOptions(newVal, \"list\");\r\n                        updateAccFields(accTypeFields);\r\n\r\n                        accNumberFields = getFieldOptions(newVal, \"number\");\r\n                        updateAccNumberFields(accNumberFields);\r\n                     }\r\n                  },\r\n               },\r\n            },\r\n            {\r\n               id: ids.valueFundBalances,\r\n               view: \"text\",\r\n               label: L(\"Fund Balances Code\"),\r\n               value: this.valueFundBalances,\r\n               name: \"valueFundBalances\",\r\n            },\r\n            {\r\n               id: ids.valueNetIncome,\r\n               view: \"text\",\r\n               label: L(\"Net Income Code\"),\r\n               value: this.valueNetIncome,\r\n               name: \"valueNetIncome\",\r\n            },\r\n            {\r\n               id: ids.fieldFPYearStart,\r\n               view: \"select\",\r\n               label: L(\"FP Year -> Start\"),\r\n               value: this.fieldFPYearStart,\r\n               name: \"fieldFPYearStart\",\r\n               options: fpYearDateFields,\r\n            },\r\n            {\r\n               id: ids.fieldFPYearEnd,\r\n               view: \"select\",\r\n               label: L(\"FP Year -> End\"),\r\n               value: this.fieldFPYearEnd,\r\n               name: \"fieldFPYearEnd\",\r\n               options: fpYearDateFields,\r\n            },\r\n            {\r\n               id: ids.fieldFPYearStatus,\r\n               view: \"select\",\r\n               label: L(\"FP Year -> Status\"),\r\n               value: this.fieldFPYearStatus,\r\n               name: \"fieldFPYearStatus\",\r\n               options: fpYearStatusFields,\r\n               on: {\r\n                  onChange: (newVal, oldVal) => {\r\n                     if (newVal != oldVal) {\r\n                        fpYearStatusOptions = getListOptions(\r\n                           this.objectFPYear || $$(ids.objectFPYear).getValue(),\r\n                           newVal\r\n                        );\r\n                        updateFPYearActiveOptions(fpYearStatusOptions);\r\n                     }\r\n                  },\r\n               },\r\n            },\r\n            {\r\n               id: ids.fieldFPYearActive,\r\n               view: \"select\",\r\n               label: L(\"FP Year -> Active\"),\r\n               value: this.fieldFPYearActive,\r\n               name: \"fieldFPYearActive\",\r\n               options: fpYearStatusOptions,\r\n            },\r\n            {\r\n               id: ids.fieldFPMonthStart,\r\n               view: \"select\",\r\n               label: L(\"FP Month -> Start\"),\r\n               value: this.fieldFPMonthStart,\r\n               name: \"fieldFPMonthStart\",\r\n               options: fpMonthDateFields,\r\n            },\r\n            {\r\n               id: ids.fieldFPMonthEnd,\r\n               view: \"select\",\r\n               label: L(\"FP Month -> End\"),\r\n               value: this.fieldFPMonthEnd,\r\n               name: \"fieldFPMonthEnd\",\r\n               options: fpMonthDateFields,\r\n            },\r\n            {\r\n               id: ids.fieldGLStartBalance,\r\n               view: \"select\",\r\n               label: L(\"GL -> Start Balance\"),\r\n               value: this.fieldGLStartBalance,\r\n               name: \"fieldGLStartBalance\",\r\n               options: glNumberFields,\r\n            },\r\n            {\r\n               id: ids.fieldGLRunningBalance,\r\n               view: \"select\",\r\n               label: L(\"GL -> Running Balance\"),\r\n               value: this.fieldGLRunningBalance,\r\n               name: \"fieldGLRunningBalance\",\r\n               options: glNumberFields,\r\n            },\r\n            {\r\n               id: ids.fieldGLrc,\r\n               view: \"select\",\r\n               label: L(\"GL -> RC\"),\r\n               value: this.fieldGLrc,\r\n               name: \"fieldGLrc\",\r\n               options: glRcFields,\r\n            },\r\n            {\r\n               id: ids.fieldAccNumber,\r\n               view: \"select\",\r\n               label: L(\"Acc -> Account Number\"),\r\n               value: this.fieldAccNumber,\r\n               name: \"fieldAccNumber\",\r\n               options: accNumberFields,\r\n            },\r\n            {\r\n               id: ids.fieldAccType,\r\n               view: \"select\",\r\n               label: L(\"Acc -> Type\"),\r\n               value: this.fieldAccType,\r\n               name: \"fieldAccType\",\r\n               options: accTypeFields,\r\n               on: {\r\n                  onChange: (newVal, oldVal) => {\r\n                     if (newVal != oldVal) {\r\n                        accTypeOptions = getListOptions(\r\n                           this.objectAccount ||\r\n                              $$(ids.objectAccount).getValue(),\r\n                           newVal\r\n                        );\r\n                        updateAccTypeOptions(accTypeOptions);\r\n                     }\r\n                  },\r\n               },\r\n            },\r\n            {\r\n               id: ids.fieldAccTypeIncome,\r\n               view: \"select\",\r\n               label: L(\"Acc -> Income\"),\r\n               value: this.fieldAccTypeIncome,\r\n               name: \"fieldAccTypeIncome\",\r\n               options: accTypeOptions,\r\n            },\r\n            {\r\n               id: ids.fieldAccTypeExpense,\r\n               view: \"select\",\r\n               label: L(\"Acc -> Expense\"),\r\n               value: this.fieldAccTypeExpense,\r\n               name: \"fieldAccTypeExpense\",\r\n               options: accTypeOptions,\r\n            },\r\n            {\r\n               id: ids.fieldAccTypeEquity,\r\n               view: \"select\",\r\n               label: L(\"Acc -> Equity\"),\r\n               value: this.fieldAccTypeEquity,\r\n               name: \"fieldAccTypeEquity\",\r\n               options: accTypeOptions,\r\n            },\r\n         ],\r\n      };\r\n\r\n      webix.ui(ui, $$(id));\r\n\r\n      $$(id).show();\r\n   }\r\n\r\n   /**\r\n    * propertiesStash()\r\n    * pull our values from our property panel.\r\n    * @param {string} id\r\n    *        the webix $$(id) of the properties panel area.\r\n    */\r\n   propertiesStash(id) {\r\n      var ids = this.propertyIDs(id);\r\n      this.name = this.property(ids.name);\r\n\r\n      // TIP: keep the .settings entries == ids[s] keys and this will\r\n      // remain simple:\r\n      this.defaults.settings.forEach((s) => {\r\n         this[s] = this.property(ids[s]);\r\n      });\r\n   }\r\n};\r\n","const AccountingJEArchiveCore = require(\"../../../core/process/tasks/ABProcessTaskServiceAccountingJEArchiveCore.js\");\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class AccountingJEArchive extends AccountingJEArchiveCore {\r\n   ////\r\n   //// Process Instance Methods\r\n   ////\r\n\r\n   propertyIDs(id) {\r\n      return {\r\n         name: `${id}_name`,\r\n         processBatchValue: `${id}_processBatchValue`,\r\n         objectBatch: `${id}_objectBatch`,\r\n         objectBalance: `${id}_objectBalance`,\r\n         objectJE: `${id}_objectJE`,\r\n         objectJEArchive: `${id}_objectJEArchive`,\r\n\r\n         fieldBatchFiscalMonth: `${id}_fieldBatchFiscalMonth`,\r\n         fieldJeAccount: `${id}_fieldJeAccount`,\r\n         fieldJeRC: `${id}_fieldJeRC`,\r\n         fieldJeArchiveBalance: `${id}_fieldJeArchiveBalance`,\r\n         fieldBrFiscalMonth: `${id}_fieldBrFiscalMonth`,\r\n         fieldBrAccount: `${id}_fieldBrAccount`,\r\n         fieldBrRC: `${id}_fieldBrRC`,\r\n\r\n         fieldsMatch: `${id}_fieldsMatch`,\r\n      };\r\n   }\r\n\r\n   /**\r\n    * propertiesShow()\r\n    * display the properties panel for this Process Element.\r\n    * @param {string} id\r\n    *        the webix $$(id) of the properties panel area.\r\n    */\r\n   propertiesShow(id) {\r\n      let ids = this.propertyIDs(id);\r\n\r\n      let processValues = [{ id: 0, value: L(\"Select a Process Value\") }];\r\n      let processDataFields = this.process.processDataFields(this);\r\n      (processDataFields || []).forEach((row) => {\r\n         processValues.push({ id: row.key, value: row.label });\r\n      });\r\n\r\n      let objectList = this.AB.objects().map((o) => {\r\n         return { id: o.id, value: o.label || o.name, object: o };\r\n      });\r\n\r\n      objectList.unshift({\r\n         id: 0,\r\n         value: L(\"Select an Object\"),\r\n      });\r\n\r\n      let getConnectFieldOptions = (objectId) => {\r\n         let object = this.AB.objectByID(objectId);\r\n         if (!object) return [];\r\n\r\n         let options = object\r\n            .fields((f) => f.isConnection)\r\n            .map((f) => {\r\n               return {\r\n                  id: f.id,\r\n                  value: f.label,\r\n               };\r\n            });\r\n\r\n         options.unshift({\r\n            id: 0,\r\n            value: L(\"Select a Field\"),\r\n         });\r\n\r\n         return options;\r\n      };\r\n\r\n      let updateFields = (fieldPickers, fieldValues) => {\r\n         fieldPickers.forEach((fp) => {\r\n            var picker = $$(fp);\r\n            if (picker) {\r\n               picker.define(\"options\", fieldValues);\r\n               picker.refresh();\r\n               picker.show();\r\n            }\r\n         });\r\n      };\r\n\r\n      let refreshBatchFields = (objectId) => {\r\n         let options = getConnectFieldOptions(objectId);\r\n         updateFields([ids.fieldBatchFiscalMonth], options);\r\n      };\r\n\r\n      let refreshBRFields = (objectId) => {\r\n         let options = getConnectFieldOptions(objectId);\r\n         updateFields(\r\n            [ids.fieldBrAccount, ids.fieldBrFiscalMonth, ids.fieldBrRC],\r\n            options\r\n         );\r\n      };\r\n\r\n      let refreshJeFields = (objectId) => {\r\n         let options = getConnectFieldOptions(objectId);\r\n         updateFields([ids.fieldJeAccount, ids.fieldJeRC], options);\r\n      };\r\n\r\n      let refreshJeArchiveFields = (objectId) => {\r\n         let options = getConnectFieldOptions(objectId);\r\n         updateFields([ids.fieldJeArchiveBalance], options);\r\n      };\r\n\r\n      let refreshFieldsMatch = () => {\r\n         let $fieldsMatch = $$(ids.fieldsMatch);\r\n         if (!$fieldsMatch) return;\r\n\r\n         // clear form\r\n         webix.ui([], $fieldsMatch);\r\n\r\n         let JEObj = this.AB.objectByID(this.objectJE);\r\n         if (!JEObj) return;\r\n\r\n         let JEArchiveObj = this.AB.objectByID(this.objectJEArchive);\r\n         if (!JEArchiveObj) return;\r\n\r\n         // create JE acrhive field options to the form\r\n         JEArchiveObj.fields().forEach((f) => {\r\n            let jeFields = [];\r\n\r\n            if (f.isConnection) {\r\n               jeFields = JEObj.fields((fJe) => {\r\n                  return (\r\n                     fJe.isConnection &&\r\n                     fJe.settings &&\r\n                     f.settings &&\r\n                     fJe.settings.linkObject == f.settings.linkObject &&\r\n                     fJe.settings.linkType == f.settings.linkType &&\r\n                     fJe.settings.linkViaType == f.settings.linkViaType &&\r\n                     fJe.settings.isCustomFK == f.settings.isCustomFK\r\n                  );\r\n               });\r\n            } else {\r\n               jeFields = JEObj.fields((fJe) => fJe.key == f.key);\r\n            }\r\n\r\n            jeFields = jeFields.map((fJe) => {\r\n               return {\r\n                  id: fJe.id,\r\n                  value: fJe.label,\r\n               };\r\n            });\r\n\r\n            $fieldsMatch.addView({\r\n               view: \"select\",\r\n               name: f.id,\r\n               label: f.label,\r\n               options: jeFields,\r\n            });\r\n         });\r\n\r\n         $fieldsMatch.setValues(this.fieldsMatch || {});\r\n      };\r\n\r\n      let fieldBatchList = getConnectFieldOptions(this.objectBatch);\r\n      let fieldBalanceList = getConnectFieldOptions(this.objectBalance);\r\n      let fieldJeList = getConnectFieldOptions(this.objectJE);\r\n      let fieldJeArchiveList = getConnectFieldOptions(this.objectJEArchive);\r\n\r\n      let ui = {\r\n         id: id,\r\n         view: \"form\",\r\n         elementsConfig: {\r\n            labelWidth: 180,\r\n         },\r\n         elements: [\r\n            {\r\n               id: ids.name,\r\n               view: \"text\",\r\n               label: L(\"Name\"),\r\n               name: \"name\",\r\n               value: this.name,\r\n            },\r\n            {\r\n               id: ids.processBatchValue,\r\n               view: \"select\",\r\n               label: L(\"Process Batch Value\"),\r\n               value: this.processBatchValue,\r\n               name: \"processBatchValue\",\r\n               options: processValues,\r\n            },\r\n            {\r\n               id: ids.objectBatch,\r\n               view: \"select\",\r\n               label: L(\"Batch Object\"),\r\n               value: this.objectBatch,\r\n               name: \"objectBatch\",\r\n               options: objectList,\r\n               on: {\r\n                  onChange: (newVal) => {\r\n                     this.objectBatch = newVal;\r\n                     refreshBatchFields(newVal);\r\n                  },\r\n               },\r\n            },\r\n            {\r\n               id: ids.fieldBatchFiscalMonth,\r\n               view: \"select\",\r\n               label: L(\"Batch -> Fiscal Month\"),\r\n               value: this.fieldBatchFiscalMonth,\r\n               name: \"fieldBatchFiscalMonth\",\r\n               options: fieldBatchList,\r\n            },\r\n            {\r\n               id: ids.objectBalance,\r\n               view: \"select\",\r\n               label: L(\"BR Object\"),\r\n               value: this.objectBalance,\r\n               name: \"objectBalance\",\r\n               options: objectList,\r\n               on: {\r\n                  onChange: (newVal) => {\r\n                     this.objectBalance = newVal;\r\n                     refreshBRFields(newVal);\r\n                  },\r\n               },\r\n            },\r\n            {\r\n               id: ids.fieldBrFiscalMonth,\r\n               view: \"select\",\r\n               label: L(\"BR -> Fiscal Month\"),\r\n               value: this.fieldBrFiscalMonth,\r\n               name: \"fieldBrFiscalMonth\",\r\n               options: fieldBalanceList,\r\n            },\r\n            {\r\n               id: ids.fieldBrAccount,\r\n               view: \"select\",\r\n               label: L(\"BR -> Account\"),\r\n               value: this.fieldBrAccount,\r\n               name: \"fieldBrAccount\",\r\n               options: fieldBalanceList,\r\n            },\r\n            {\r\n               id: ids.fieldBrRC,\r\n               view: \"select\",\r\n               label: L(\"BR -> RC\"),\r\n               value: this.fieldBrRC,\r\n               name: \"fieldBrRC\",\r\n               options: fieldBalanceList,\r\n            },\r\n            {\r\n               id: ids.objectJE,\r\n               view: \"select\",\r\n               label: L(\"JE Object\"),\r\n               value: this.objectJE,\r\n               name: \"objectJE\",\r\n               options: objectList,\r\n               on: {\r\n                  onChange: (newVal) => {\r\n                     this.objectJE = newVal;\r\n                     refreshJeFields(newVal);\r\n                     refreshFieldsMatch();\r\n                  },\r\n               },\r\n            },\r\n            {\r\n               id: ids.fieldJeAccount,\r\n               view: \"select\",\r\n               label: L(\"JE -> Account\"),\r\n               value: this.fieldJeAccount,\r\n               name: \"fieldJeAccount\",\r\n               options: fieldJeList,\r\n            },\r\n            {\r\n               id: ids.fieldJeRC,\r\n               view: \"select\",\r\n               label: L(\"JE -> RC\"),\r\n               value: this.fieldJeRC,\r\n               name: \"fieldJeRC\",\r\n               options: fieldJeList,\r\n            },\r\n            {\r\n               id: ids.objectJEArchive,\r\n               view: \"select\",\r\n               label: L(\"JE Archive Object\"),\r\n               value: this.objectJEArchive,\r\n               name: \"objectJEArchive\",\r\n               options: objectList,\r\n               on: {\r\n                  onChange: (newVal) => {\r\n                     this.objectJEArchive = newVal;\r\n                     refreshJeArchiveFields(newVal);\r\n                     refreshFieldsMatch();\r\n                  },\r\n               },\r\n            },\r\n            {\r\n               id: ids.fieldJeArchiveBalance,\r\n               view: \"select\",\r\n               label: L(\"JE Archive -> BR\"),\r\n               value: this.fieldJeArchiveBalance,\r\n               name: \"fieldJeArchiveBalance\",\r\n               options: fieldJeArchiveList,\r\n            },\r\n            {\r\n               view: \"fieldset\",\r\n               label: \"Fields Matching\",\r\n               body: {\r\n                  id: ids.fieldsMatch,\r\n                  view: \"form\",\r\n                  borderless: true,\r\n                  elements: [],\r\n               },\r\n            },\r\n         ],\r\n      };\r\n\r\n      webix.ui(ui, $$(id));\r\n\r\n      $$(id).show();\r\n\r\n      refreshFieldsMatch();\r\n   }\r\n\r\n   /**\r\n    * propertiesStash()\r\n    * pull our values from our property panel.\r\n    * @param {string} id\r\n    *        the webix $$(id) of the properties panel area.\r\n    */\r\n   propertiesStash(id) {\r\n      let ids = this.propertyIDs(id);\r\n      this.name = this.property(ids.name);\r\n\r\n      // TIP: keep the .settings entries == ids[s] keys and this will\r\n      // remain simple:\r\n      this.defaults.settings.forEach((s) => {\r\n         if (s === \"fieldsMatch\") {\r\n            this[s] = $$(ids.fieldsMatch).getValues();\r\n         } else {\r\n            this[s] = this.property(ids[s]);\r\n         }\r\n      });\r\n   }\r\n};\r\n","const CalculateTaskCore = require(\"../../../core/process/tasks/ABProcessTaskServiceCalculateCore.js\");\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class CalculateTask extends CalculateTaskCore {\r\n   ////\r\n   //// Process Instance Methods\r\n   ////\r\n\r\n   propertyIDs(id) {\r\n      return {\r\n         name: `${id}_name`,\r\n         formulaText: `${id}_formulaText`,\r\n\r\n         variablePopup: `${id}_variablePopup`,\r\n         operatorPopup: `${id}_operatorPopup`,\r\n      };\r\n   }\r\n\r\n   /**\r\n    * @method propertiesShow()\r\n    * display the properties panel for this Process Element.\r\n    * @param {string} id\r\n    *        the webix $$(id) of the properties panel area.\r\n    */\r\n   propertiesShow(id) {\r\n      let ids = this.propertyIDs(id);\r\n\r\n      let list = (this.process.processDataFields(this) || []).map((item) => {\r\n         return {\r\n            id: item.key,\r\n            value: item.label,\r\n         };\r\n      });\r\n\r\n      let labelWidth = 120;\r\n      let ui = {\r\n         id: id,\r\n         view: \"form\",\r\n         elementsConfig: {\r\n            labelWidth: labelWidth,\r\n         },\r\n         elements: [\r\n            {\r\n               id: ids.name,\r\n               view: \"text\",\r\n               label: L(\"Name\"),\r\n               name: \"name\",\r\n               value: this.name,\r\n            },\r\n            {\r\n               id: ids.formulaText,\r\n               view: \"texthighlight\",\r\n               height: 200,\r\n               label: L(\"Formula\"),\r\n               type: \"textarea\",\r\n               value: this.formulaText || \"\",\r\n               highlight: (text) => {\r\n                  list.forEach(function (item) {\r\n                     text = text.replace(\r\n                        new RegExp(`{${item.value}}`, \"g\"),\r\n                        `<span style='background: #90adb5; color:#000000;'>{${item.value}}</span>`\r\n                     );\r\n                  });\r\n                  return text;\r\n               },\r\n            },\r\n            {\r\n               cols: [\r\n                  {\r\n                     width: labelWidth,\r\n                     fillspace: true,\r\n                  },\r\n                  {\r\n                     view: \"button\",\r\n                     css: \"webix_primary\",\r\n                     type: \"icon\",\r\n                     icon: \"fa fa-at\",\r\n                     label: L(\"Parameters\"),\r\n                     click: function () {\r\n                        // show popup\r\n                        $$(ids.variablePopup).show(this.$view);\r\n                     },\r\n                  },\r\n                  {\r\n                     view: \"button\",\r\n                     css: \"webix_primary\",\r\n                     type: \"icon\",\r\n                     icon: \"fa fa-hashtag\",\r\n                     label: L(\"Operators\"),\r\n                     click: function () {\r\n                        // show popup\r\n                        $$(ids.operatorPopup).show(this.$view);\r\n                     },\r\n                  },\r\n               ],\r\n            },\r\n         ],\r\n      };\r\n\r\n      webix.ui(ui, $$(id));\r\n\r\n      if ($$(ids.variablePopup) == null) {\r\n         webix.ui({\r\n            id: ids.variablePopup,\r\n            view: \"popup\",\r\n            hidden: true,\r\n            body: {\r\n               view: \"list\",\r\n               template: (item) => {\r\n                  return item.value;\r\n               },\r\n               data: list,\r\n               on: {\r\n                  onItemClick: function (id, e, node) {\r\n                     var component = this.getItem(id);\r\n\r\n                     insertFormula(`{${component.value}}`);\r\n\r\n                     $$(ids.variablePopup).hide();\r\n                  },\r\n               },\r\n            },\r\n         });\r\n      }\r\n\r\n      if ($$(ids.operatorPopup) == null) {\r\n         webix.ui({\r\n            id: ids.operatorPopup,\r\n            view: \"popup\",\r\n            hidden: true,\r\n            width: 180,\r\n            body: {\r\n               view: \"list\",\r\n               template: (item) => {\r\n                  var template = \"\";\r\n\r\n                  if (item.icon) {\r\n                     template += `<i class=\"fa fa-${item.icon}\" aria-hidden=\"true\"></i> `;\r\n                  }\r\n\r\n                  if (item.label) {\r\n                     template += item.label;\r\n                  }\r\n\r\n                  return template;\r\n               },\r\n               data: [\r\n                  {\r\n                     label: L(\"+ Adds\"),\r\n                     symbol: \"+\",\r\n                  },\r\n                  {\r\n                     label: L(\"- Subtracts\"),\r\n                     symbol: \"-\",\r\n                  },\r\n                  {\r\n                     label: L(\"* Multiples\"),\r\n                     symbol: \"*\",\r\n                  },\r\n                  {\r\n                     label: L(\"/ Divides\"),\r\n                     symbol: \"/\",\r\n                  },\r\n                  {\r\n                     label: L(\"( Open Bracket\"),\r\n                     symbol: \"(\",\r\n                  },\r\n                  {\r\n                     label: L(\") Closed Bracket\"),\r\n                     symbol: \")\",\r\n                  },\r\n               ],\r\n               on: {\r\n                  onItemClick: function (id, e, node) {\r\n                     var component = this.getItem(id);\r\n\r\n                     insertFormula(component.symbol);\r\n\r\n                     $$(ids.operatorPopup).hide();\r\n                  },\r\n               },\r\n            },\r\n         });\r\n      }\r\n\r\n      let insertFormula = (message) => {\r\n         let formula = $$(ids.formulaText).getValue();\r\n\r\n         $$(ids.formulaText).setValue(`${formula}${message} `);\r\n      };\r\n\r\n      $$(id).show();\r\n   }\r\n\r\n   /**\r\n    * @method propertiesStash()\r\n    * pull our values from our property panel.\r\n    * @param {string} id\r\n    *        the webix $$(id) of the properties panel area.\r\n    */\r\n   propertiesStash(id) {\r\n      let ids = this.propertyIDs(id);\r\n\r\n      this.name = this.property(ids.name);\r\n      this.formulaText = this.property(ids.formulaText);\r\n   }\r\n};\r\n","// import ABApplication from \"./ABApplication\"\r\n// const ABApplication = require(\"./ABApplication\"); // NOTE: change to require()\r\nconst ABProcessTaskServiceGetResetPasswordUrlCore = require(\"../../../core/process/tasks/ABProcessTaskServiceGetResetPasswordUrlCore.js\");\r\n\r\nmodule.exports = class ABProcessTaskServiceGetResetPasswordUrl extends (\r\n   ABProcessTaskServiceGetResetPasswordUrlCore\r\n) {};\r\n","const InsertRecordTaskCore = require(\"../../../core/process/tasks/ABProcessTaskServiceInsertRecordCore.js\");\r\n\r\nmodule.exports = class InsertRecordTask extends InsertRecordTaskCore {};\r\n","const ABProcessTaskServiceQueryCore = require(\"../../../core/process/tasks/ABProcessTaskServiceQueryCore.js\");\r\n\r\nconst ABQLManager = require(\"../../ql/ABQLManager.js\");\r\n\r\nmodule.exports = class ABProcessTaskServiceQuery extends (\r\n   ABProcessTaskServiceQueryCore\r\n) {\r\n   constructor(attributes, process, AB) {\r\n      super(attributes, process, AB);\r\n   }\r\n\r\n   ABQLManager() {\r\n      return ABQLManager;\r\n   }\r\n};\r\n","const SubProcessCore = require(\"../../../core/process/tasks/ABProcessTaskSubProcessCore.js\");\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class SubProcess extends SubProcessCore {\r\n   ////\r\n   //// Process Instance Methods\r\n   ////\r\n\r\n   propertyIDs(id) {\r\n      return {\r\n         name: `${id}_name`,\r\n         isEnable: `${id}_isEnable`,\r\n         parameterId: `${id}_parameterId`,\r\n      };\r\n   }\r\n\r\n   /**\r\n    * @method propertiesShow()\r\n    * display the properties panel for this Process Element.\r\n    * @param {string} id\r\n    *        the webix $$(id) of the properties panel area.\r\n    */\r\n   propertiesShow(id) {\r\n      let ids = this.propertyIDs(id);\r\n\r\n      // Pull query tasks option list\r\n      let parameterOptions = (this.process.processDataFields(this) || []).map(\r\n         (item) => {\r\n            return {\r\n               id: item.key,\r\n               value: item.label,\r\n            };\r\n         }\r\n      );\r\n\r\n      let ui = {\r\n         id: id,\r\n         view: \"form\",\r\n         elementsConfig: {\r\n            labelWidth: 120,\r\n         },\r\n         elements: [\r\n            {\r\n               id: ids.name,\r\n               view: \"text\",\r\n               label: L(\"Name\"),\r\n               name: \"name\",\r\n               value: this.name,\r\n            },\r\n            {\r\n               id: ids.isEnable,\r\n               view: \"switch\",\r\n               label: L(\"Enable\"),\r\n               value: this.isEnable,\r\n            },\r\n            {\r\n               id: ids.parameterId,\r\n               view: \"richselect\",\r\n               label: L(\"Repeat for\"),\r\n               options: parameterOptions,\r\n               value: this.parameterId,\r\n            },\r\n         ],\r\n      };\r\n\r\n      webix.ui(ui, $$(id));\r\n\r\n      $$(id).show();\r\n   }\r\n\r\n   /**\r\n    * @method propertiesStash()\r\n    * pull our values from our property panel.\r\n    * @param {string} id\r\n    *        the webix $$(id) of the properties panel area.\r\n    */\r\n   propertiesStash(id) {\r\n      let ids = this.propertyIDs(id);\r\n      this.name = this.property(ids.name);\r\n      this.isEnable = this.property(ids.isEnable);\r\n      this.parameterId = this.property(ids.parameterId);\r\n   }\r\n\r\n   /**\r\n    * @method diagramProperties()\r\n    * return a set of values for the XML shape definition based upon\r\n    * the current values of this object.\r\n    * @return {json}\r\n    */\r\n   diagramProperties(bpmnModeler) {\r\n      let props = super.diagramProperties();\r\n      props = props || [{}];\r\n      props[0].def = props[0].def || {};\r\n\r\n      if (this.parameterId != null) {\r\n         props[0].def = props[0].def || {};\r\n         props[0].def.loopCharacteristics = bpmnModeler\r\n            .get(\"moddle\")\r\n            .create(\"bpmn:MultiInstanceLoopCharacteristics\");\r\n         props[0].def.loopCharacteristics.isSequential = true;\r\n      }\r\n\r\n      return props;\r\n   }\r\n\r\n   /**\r\n    * @method onChange()\r\n    * update the current Task with information that was relevant\r\n    * from the provided BPMN:Element\r\n    * @param {BPMNElement}\r\n    */\r\n   onChange(defElement) {\r\n      let loopCharacteristics =\r\n         defElement.loopCharacteristics ||\r\n         defElement.businessObject.loopCharacteristics ||\r\n         {};\r\n\r\n      switch (loopCharacteristics.$type) {\r\n         case \"bpmn:MultiInstanceLoopCharacteristics\":\r\n            this.loopType = loopCharacteristics.isSequential\r\n               ? \"sequential\"\r\n               : \"parallel\";\r\n            break;\r\n         case \"bpmn:StandardLoopCharacteristics\":\r\n            this.loopType = \"looping\";\r\n            break;\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method destroy()\r\n    * destroy this sub process and inside tasks\r\n    *\r\n    * @return {Promise}\r\n    */\r\n   destroy() {\r\n      // reuse .destroy function of ABProcess \r\n      // to clear tasks within this sub process\r\n      return this.process.destroy.call(this);\r\n   }\r\n\r\n   /**\r\n    * @method save()\r\n    * persist this sub process\r\n    *\r\n    * @return {Promise}\r\n    *\t\t\t\t\t\t.resolve( {this} )\r\n    */\r\n   save() {\r\n      // reuse .save function of ABProcess \r\n      // to update tasks within this sub process\r\n      return this.process.save.call(this);\r\n   }\r\n\r\n   /**\r\n    * @method elementNewForModelDefinition()\r\n    * create a new process element defined by the given BPMN:Element\r\n    *\r\n    * the BPMN:Element definition comes from the BPMN Modeler when a new\r\n    * diagram element is created.\r\n    *\r\n    * @param {BPMN:Element} element\r\n    *        the BPMN modeler diagram element definition\r\n    * @return {ABProcessParticipant|ABProcessLane|ABProcessElement}\r\n    * \r\n    */\r\n   elementNewForModelDefinition(element) {\r\n      let task = this.application.processElementNewForModelDefinition(\r\n         element,\r\n         this\r\n      );\r\n\r\n      // Add a new task to this sub process\r\n      if (task) {\r\n         this.elementAdd(task);\r\n      }\r\n      return task;\r\n   }\r\n};\r\n","const ABProcessTaskUserCore = require(\"../../../core/process/tasks/ABProcessTaskUserCore.js\");\r\n\r\nmodule.exports = class ABProcessTaskUser extends ABProcessTaskUserCore {};\r\n","const ABProcessTaskUserApprovalCore = require(\"../../../core/process/tasks/ABProcessTaskUserApprovalCore.js\");\r\n\r\nmodule.exports = class ABProcessTaskUserApproval extends (\r\n   ABProcessTaskUserApprovalCore\r\n) {};\r\n","// import ABApplication from \"./ABApplication\"\r\n// const ABApplication = require(\"./ABApplication\"); // NOTE: change to require()\r\nconst ABProcessTaskUserExternalCore = require(\"../../../core/process/tasks/ABProcessTaskUserExternalCore.js\");\r\n\r\nmodule.exports = class ABProcessTaskUserExternal extends (\r\n   ABProcessTaskUserExternalCore\r\n) {};\r\n","// import ABApplication from \"./ABApplication\"\r\n// const ABApplication = require(\"./ABApplication\"); // NOTE: change to require()\r\nconst ABProcessTriggerCore = require(\"../../../core/process/tasks/ABProcessTriggerCore.js\");\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABProcessTrigger extends ABProcessTriggerCore {\r\n   propertyIDs(id) {\r\n      return {\r\n         name: `${id}_name`,\r\n      };\r\n   }\r\n\r\n   /**\r\n    * propertiesShow()\r\n    * display the properties panel for this Process Element.\r\n    * @param {string} id\r\n    *        the webix $$(id) of the properties panel area.\r\n    */\r\n   propertiesShow(id) {\r\n      var ids = this.propertyIDs(id);\r\n\r\n      var ui = {\r\n         id: id,\r\n         rows: [\r\n            {\r\n               id: ids.name,\r\n               view: \"text\",\r\n               label: L(\"Name\"),\r\n               name: \"name\",\r\n               value: this.name,\r\n            },\r\n         ],\r\n      };\r\n\r\n      webix.ui(ui, $$(id));\r\n\r\n      $$(id).show();\r\n   }\r\n\r\n   /**\r\n    * propertiesStash()\r\n    * pull our values from our property panel.\r\n    * @param {string} id\r\n    *        the webix $$(id) of the properties panel area.\r\n    */\r\n   propertiesStash(id) {\r\n      var ids = this.propertyIDs(id);\r\n      this.name = this.property(ids.name);\r\n   }\r\n};\r\n","// import ABApplication from \"./ABApplication\"\r\n// const ABApplication = require(\"./ABApplication\"); // NOTE: change to require()\r\nconst ABProcessTriggerLifecycleCore = require(\"../../../core/process/tasks/ABProcessTriggerLifecycleCore.js\");\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABProcessTriggerLifecycle extends (\r\n   ABProcessTriggerLifecycleCore\r\n) {\r\n   propertyIDs(id) {\r\n      return {\r\n         name: `${id}_name`,\r\n         objList: `${id}_objlist`,\r\n         lifecycleList: `${id}_lifecycleList`,\r\n      };\r\n   }\r\n\r\n   /**\r\n    * propertiesShow()\r\n    * display the properties panel for this Process Element.\r\n    * @param {string} id\r\n    *        the webix $$(id) of the properties panel area.\r\n    */\r\n   propertiesShow(id) {\r\n      var ids = this.propertyIDs(id);\r\n\r\n      var allObjects = this.application.objectsIncluded();\r\n      var listObj = [];\r\n      allObjects.forEach((obj) => {\r\n         listObj.push({ id: obj.id, value: obj.label });\r\n      });\r\n\r\n      var ui = {\r\n         view: \"form\",\r\n         id: id,\r\n         elements: [\r\n            {\r\n               id: ids.name,\r\n               view: \"text\",\r\n               label: L(\"Name\"),\r\n               name: \"name\",\r\n               value: this.name,\r\n            },\r\n            {\r\n               id: ids.objList,\r\n               view: \"select\",\r\n               label: L(\"Object\"),\r\n               value: this.objectID,\r\n               options: listObj,\r\n            },\r\n            {\r\n               id: ids.lifecycleList,\r\n               view: \"select\",\r\n               label: L(\"lifecycle\"),\r\n               value: this.lifecycleKey,\r\n               options: [\r\n                  { id: \"added\", value: L(\"after Add\") },\r\n                  { id: \"updated\", value: L(\"after Update\") },\r\n                  { id: \"deleted\", value: L(\"after Delete\") },\r\n               ],\r\n            },\r\n         ],\r\n      };\r\n\r\n      webix.ui(ui, $$(id));\r\n\r\n      $$(id).show();\r\n   }\r\n\r\n   /**\r\n    * propertiesStash()\r\n    * pull our values from our property panel.\r\n    * @param {string} id\r\n    *        the webix $$(id) of the properties panel area.\r\n    */\r\n   propertiesStash(id) {\r\n      var ids = this.propertyIDs(id);\r\n      this.name = this.property(ids.name);\r\n      this.objectID = this.property(ids.objList);\r\n      this.lifecycleKey = this.property(ids.lifecycleList);\r\n      this.triggerKey = `${this.objectID}.${this.lifecycleKey}`;\r\n   }\r\n};\r\n","const ABProcessTriggerTimerCore = require(\"../../../core/process/tasks/ABProcessTriggerTimerCore.js\");\r\n\r\nconst START_URL = \"/process/timer/#id#/start\";\r\nconst STOP_URL = \"/process/timer/#id#/stop\";\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABProcessTriggerTimer extends ABProcessTriggerTimerCore {\r\n   propertyIDs(id) {\r\n      return {\r\n         name: `${id}_name`,\r\n         repeatEvery: `${id}_repeatEvery`,\r\n         repeatTime: `${id}_repeatTime`,\r\n         repeatOnPanel: `${id}_repeatOnPanel`,\r\n         repeatDaily: `${id}_repeatDaily`,\r\n         repeatWeekly: `${id}_repeatWeekly`,\r\n         repeatMonthly: `${id}_repeatMonthly`,\r\n         isEnabled: `${id}_isEnabled`,\r\n      };\r\n   }\r\n\r\n   /**\r\n    * @function propertiesShow()\r\n    * display the properties panel for this Process Element.\r\n    * @param {string} id\r\n    *        the webix $$(id) of the properties panel area.\r\n    */\r\n   propertiesShow(id) {\r\n      let ids = this.propertyIDs(id);\r\n      let defaultValues = ABProcessTriggerTimer.defaults();\r\n\r\n      let dayOptions = [];\r\n      for (let day = 1; day <= 31; day++) {\r\n         dayOptions.push({\r\n            id: day,\r\n            value: day,\r\n         });\r\n      }\r\n      // dayOptions.push({\r\n      //    id: \"L\",\r\n      //    value: \"Last\"\r\n      // });\r\n\r\n      const LABEL_WIDTH = 120;\r\n      let ui = {\r\n         view: \"form\",\r\n         id: id,\r\n         elements: [\r\n            {\r\n               id: ids.name,\r\n               view: \"text\",\r\n               label: L(\"Name\"),\r\n               labelWidth: LABEL_WIDTH,\r\n               name: \"name\",\r\n               value: this.name,\r\n            },\r\n            {\r\n               id: ids.repeatEvery,\r\n               view: \"richselect\",\r\n               name: \"repeatEvery\",\r\n               label: L(\"Repeat every\"),\r\n               labelWidth: LABEL_WIDTH,\r\n               value: this.repeatEvery || defaultValues.repeatEvery,\r\n               options: [\r\n                  { id: \"daily\", value: L(\"Daily\") },\r\n                  {\r\n                     id: \"weekly\",\r\n                     value: L(\"Weekly\"),\r\n                  },\r\n                  {\r\n                     id: \"monthly\",\r\n                     value: L(\"Monthly\"),\r\n                  },\r\n               ],\r\n               on: {\r\n                  onChange: (repeatEvery) => {\r\n                     $$(ids.repeatOnPanel).showBatch(repeatEvery);\r\n                  },\r\n               },\r\n            },\r\n            {\r\n               id: ids.repeatTime,\r\n               view: \"datepicker\",\r\n               name: \"repeatTime\",\r\n               label: L(\"Time\"),\r\n               labelWidth: LABEL_WIDTH,\r\n               value: this.repeatTime || defaultValues.repeatTime,\r\n               timepicker: true,\r\n               type: \"time\",\r\n               multiselect: false,\r\n            },\r\n            {\r\n               view: \"multiview\",\r\n               id: ids.repeatOnPanel,\r\n               cells: [\r\n                  {\r\n                     view: \"radio\",\r\n                     id: ids.repeatDaily,\r\n                     label: \" \",\r\n                     labelWidth: LABEL_WIDTH,\r\n                     batch: \"daily\",\r\n                     vertical: true,\r\n                     value: this.repeatDaily || defaultValues.repeatDaily,\r\n                     options: [\r\n                        { id: \"day\", value: L(\"Day\") },\r\n                        { id: \"weekday\", value: L(\"Weekday\") },\r\n                     ],\r\n                  },\r\n                  {\r\n                     view: \"multiselect\",\r\n                     id: ids.repeatWeekly,\r\n                     labelWidth: LABEL_WIDTH,\r\n                     label: L(\"Every week on:\"),\r\n                     batch: \"weekly\",\r\n                     value: this.repeatWeekly || defaultValues.repeatWeekly,\r\n                     options: [\r\n                        {\r\n                           id: \"SUN\",\r\n                           value: L(\"Sunday\"),\r\n                        },\r\n                        {\r\n                           id: \"MON\",\r\n                           value: L(\"Monday\"),\r\n                        },\r\n                        {\r\n                           id: \"TUE\",\r\n                           value: L(\"Tuesday\"),\r\n                        },\r\n                        {\r\n                           id: \"WED\",\r\n                           value: L(\"Wednesday\"),\r\n                        },\r\n                        {\r\n                           id: \"THU\",\r\n                           value: L(\"Thursday\"),\r\n                        },\r\n                        {\r\n                           id: \"FRI\",\r\n                           value: L(\"Friday\"),\r\n                        },\r\n                        {\r\n                           id: \"SAT\",\r\n                           value: L(\"Saturday\"),\r\n                        },\r\n                     ],\r\n                  },\r\n                  {\r\n                     view: \"layout\",\r\n                     batch: \"monthly\",\r\n                     rows: [\r\n                        {\r\n                           id: ids.repeatMonthly,\r\n                           view: \"richselect\",\r\n                           labelWidth: LABEL_WIDTH,\r\n                           label: L(\"Monthly on day\"),\r\n                           options: dayOptions,\r\n                           value:\r\n                              this.repeatMonthly || defaultValues.repeatMonthly,\r\n                        },\r\n                     ],\r\n                  },\r\n               ],\r\n            },\r\n            {\r\n               id: ids.isEnabled,\r\n               view: \"switch\",\r\n               label: L(\"Enable\"),\r\n               labelWidth: LABEL_WIDTH,\r\n               value: this.isEnabled,\r\n            },\r\n         ],\r\n      };\r\n\r\n      webix.ui(ui, $$(id));\r\n\r\n      $$(id).show();\r\n      $$(ids.repeatOnPanel).showBatch(\r\n         this.repeatEvery || defaultValues.repeatEvery\r\n      );\r\n   }\r\n\r\n   /**\r\n    * @function propertiesStash()\r\n    * pull our values from our property panel.\r\n    * @param {string} id\r\n    *        the webix $$(id) of the properties panel area.\r\n    */\r\n   propertiesStash(id) {\r\n      let ids = this.propertyIDs(id);\r\n      this.name = $$(ids.name).getValue();\r\n      this.repeatEvery = $$(ids.repeatEvery).getValue();\r\n      this.repeatTime = $$(ids.repeatTime).getValue();\r\n      this.repeatDaily = $$(ids.repeatDaily).getValue();\r\n      this.repeatWeekly = $$(ids.repeatWeekly).getValue();\r\n      this.repeatMonthly = $$(ids.repeatMonthly).getValue();\r\n      this.isEnabled = $$(ids.isEnabled).getValue();\r\n      this.triggerKey =\r\n         this.triggerKey == null || this.triggerKey == \"triggerKey.??\"\r\n            ? `timer.${this.id || this.AB.uuid()}`\r\n            : this.triggerKey;\r\n   }\r\n\r\n   /**\r\n    * @method save()\r\n    * persist this instance of ABObject with it's parent ABApplication\r\n    * @return {Promise}\r\n    */\r\n   save() {\r\n      return (\r\n         Promise.resolve()\r\n            .then(() => super.save())\r\n            // Restart the timer\r\n            .then((result) => {\r\n               return this.AB.Network.put({\r\n                  url: (this.isEnabled ? START_URL : STOP_URL).replace(\r\n                     \"#id#\",\r\n                     this.id\r\n                  ),\r\n               });\r\n            })\r\n      );\r\n   }\r\n};\r\n","/*\r\n * ABQL\r\n *\r\n * An ABQL defines the base class for our AB Query Language Objects.\r\n * These classes share a common way to\r\n *   - parse input strings for commands\r\n *\r\n *\r\n */\r\nconst ABQLCore = require(\"../../core/ql/ABQLCore.js\");\r\nconst RowUpdater = require(\"../RowUpdater.js\");\r\n\r\nconst L = (...params) => AB.Multilingual.label(...params);\r\n\r\nclass ABQL extends ABQLCore {\r\n   // constructor(attributes, parameterDefinitions, prevOP, task, application) {\r\n   //     super(attributes, parameterDefinitions, prevOP, task, application);\r\n   // }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /**\r\n    * @method parseRow()\r\n    * When it is time to pull the information from the properties panel,\r\n    * use this fn to get the current Row of data.\r\n    *\r\n    * This fn() will populate the this.params with the values for each\r\n    * of our .parameterDefinitions.\r\n    *\r\n    * @param {webixNode} row\r\n    *        the current webix node that contains the ROW defining the\r\n    *        operation and it's parameters.\r\n    * @param {string} id\r\n    *        the unique id for where the properties panel is displayed.\r\n    */\r\n   parseRow(row, id) {\r\n      // var allColumns = row.getChildViews();\r\n      // allColumns.shift(); // remove selector\r\n      this.parameterDefinitions.forEach((pDef) => {\r\n         // var col = allColumns.shift();\r\n         var myID = this.uiID(id);\r\n         this.ids = this.toIDs(myID);\r\n         this.params = this.params || {};\r\n\r\n         switch (pDef.type) {\r\n            case \"objectName\":\r\n               this.params[pDef.name] = $$(this.ids.objectname).getValue();\r\n               break;\r\n\r\n            case \"objectConditions\":\r\n            case \"objectValues\":\r\n               var uiCondition = $$(this.ids.condition);\r\n               if (uiCondition) {\r\n                  var condition = uiCondition.getValue();\r\n                  if (condition && condition != \"\") {\r\n                     this.params[pDef.name] = JSON.parse(condition);\r\n                  }\r\n               }\r\n               break;\r\n         }\r\n      });\r\n   }\r\n\r\n   /*\r\n    * @method toIDs()\r\n    * generate a set of unique webix ids to use for our UI.\r\n    * @param {string} myID\r\n    *        the unique id generated by .uiID()\r\n    */\r\n   toIDs(myID) {\r\n      return {\r\n         condition: `${myID}_condition`,\r\n         objectname: `${myID}_objname`,\r\n         popup: `${myID}_popup`,\r\n         select: `${myID}_select`,\r\n         shorthand: `${myID}_shorthand`,\r\n      };\r\n   }\r\n\r\n   /**\r\n    * @method uiAddParamForDef()\r\n    * Add an operation parameter for each parameterDefinition we have defined.\r\n    * @param {obj} pDef\r\n    *        the current parameterDefinition entry we are creating the UI\r\n    *        for.\r\n    * @param {string} id\r\n    *        the unique id for where the properties panel is displayed.\r\n    * @param {obj} ui\r\n    *        the current webix ui definition we are building.\r\n    */\r\n   uiAddParamForDef(pDef, id, ui) {\r\n      // params are added to a .col[] definition.\r\n      // if our ui isn't down to the current .col element, then drill down\r\n      if (!ui.cols) {\r\n         if (ui.rows) {\r\n            for (var i = 0; i < ui.rows.length; i++) {\r\n               if (ui.rows[i].cols) {\r\n                  this.uiAddParamForDef(pDef, id, ui.rows[i]);\r\n                  break;\r\n               }\r\n            }\r\n         } else {\r\n            throw new Error(\"provided ui is not able to add a parameter!\");\r\n         }\r\n         return;\r\n      }\r\n\r\n      var paramUI = this.uiParamUI(pDef, id);\r\n\r\n      if (paramUI) {\r\n         // if we only have 1 param\r\n         if (this.parameterDefinitions.length == 1) {\r\n            ui.cols.push(paramUI);\r\n         } else {\r\n            // if we haven't already added a parameter\r\n            if (ui.cols.length < 3) {\r\n               // create a row stack of parameters:\r\n               ui.cols.push({\r\n                  rows: [paramUI],\r\n               });\r\n            } else {\r\n               // add to the current stack of parameters\r\n               ui.cols[2].rows.push(paramUI);\r\n            }\r\n         }\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method uiAddNext()\r\n    * Add the next row selector for this operation:\r\n    * @param {string} id\r\n    *        the unique id for where the properties panel is displayed.\r\n    * @param {obj} ui\r\n    *        the current webix ui definition we are building.\r\n    */\r\n   uiAddNext(id, ui) {\r\n      var uiRow = this.uiNextRow(id);\r\n\r\n      // if we have a next operation defined, then add on the ui definitions\r\n      // for that operation:\r\n      if (this.next) {\r\n         this.next.uiAddParams(id, uiRow);\r\n         ui.rows.push(uiRow);\r\n         this.next.uiAddNext(id, ui);\r\n      } else {\r\n         // otherwise we just leave the selector:\r\n         ui.rows.push(uiRow);\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method uiAddParams()\r\n    * Add operation parameter(s) for each parameterDefinition we have defined.\r\n    * @param {string} id\r\n    *        the unique id for where the properties panel is displayed.\r\n    * @param {obj} ui\r\n    *        the current webix ui definition we are building.\r\n    */\r\n   uiAddParams(id, ui) {\r\n      this.parameterDefinitions.forEach((pDef) => {\r\n         this.uiAddParamForDef(pDef, id, ui);\r\n      });\r\n   }\r\n\r\n   /*\r\n    * @method uiID()\r\n    * generate a unique webix id for this operation.\r\n    * @param {string} id\r\n    *        the webix id of the base property.query holder\r\n    */\r\n   uiID(id) {\r\n      if (this.prevOP) {\r\n         return `${this.prevOP.uiID(id)}_${this.constructor.key}`;\r\n      } else {\r\n         return `${id}_${this.constructor.key}`;\r\n      }\r\n   }\r\n\r\n   /*\r\n    * uiXXX Operations:\r\n    * are UI building operations that are performed BEFORE the webix UI\r\n    * is generated.  They work by filling out a {ui} object definition\r\n    * that webix will eventually create into the DOM.\r\n    *\r\n    * viewXXX Operations:\r\n    * are UI building operations that are performed AFTER the webix UI\r\n    * is generated. They work by adding in child views to an existing\r\n    * DOM.\r\n    */\r\n\r\n   /**\r\n    * @method uiNextRow()\r\n    * return the webix UI definition for the next of UI chaining.\r\n    * @param {string} id\r\n    *        the unique id for where the properties panel is displayed.\r\n    * @return {obj}\r\n    */\r\n   uiNextRow(id) {\r\n      var options = this.constructor.NextQLOps.map((op) => {\r\n         return { id: op.key, value: op.label };\r\n      });\r\n      options.unshift({ id: 0, value: L(\"choose next operation\") });\r\n\r\n      var myID = this.uiID(id);\r\n      var ids = this.toIDs(myID);\r\n\r\n      var uiRow = {\r\n         cols: [\r\n            { view: \"spacer\", width: this.constructor.uiIndentNext || 10 },\r\n            {\r\n               id: ids.select,\r\n               view: \"select\",\r\n               value: this.next ? this.next.constructor.key : 0,\r\n               options: options,\r\n               on: {\r\n                  onChange: (newValue, oldValue) => {\r\n                     function resetValue() {\r\n                        var select = $$(ids.select);\r\n                        select.blockEvent();\r\n                        select.setValue(oldValue);\r\n                        select.unblockEvent();\r\n                     }\r\n                     if (newValue == oldValue) {\r\n                        return;\r\n                     }\r\n                     var newOP = this.constructor.NextQLOps.find((op) => {\r\n                        return op.key == newValue;\r\n                     });\r\n                     if (!newOP) {\r\n                        resetValue();\r\n                        return;\r\n                     }\r\n\r\n                     var thisRow = $$(ids.select).getParentView();\r\n                     var thisQuery = thisRow.getParentView();\r\n\r\n                     var addOP = () => {\r\n                        if (newOP) {\r\n                           var nextOP = new newOP({}, this, this.task, this.AB);\r\n                           this.next = nextOP;\r\n                           nextOP.viewAddParams(id, thisRow);\r\n                           nextOP.viewAddNext(id, thisQuery);\r\n                        }\r\n                     };\r\n\r\n                     // if there are rows after this one, then warn\r\n                     // about changing\r\n                     var allRows = thisQuery.getChildViews();\r\n                     if (allRows.length - 1 > allRows.indexOf(thisRow)) {\r\n                        webix.confirm({\r\n                           title: \"continue?\",\r\n                           text:\r\n                              \"changing this rule will reset any following rules.\",\r\n                           ok: \"yes\",\r\n                           cancel: \"no\",\r\n                           callback: (result) => {\r\n                              if (result) {\r\n                                 // remove the current additional Rows:\r\n                                 var ir = allRows.length - 1;\r\n                                 while (\r\n                                    allRows[ir].config.id != thisRow.config.id\r\n                                 ) {\r\n                                    thisQuery.removeView(allRows[ir]);\r\n                                    ir--;\r\n                                 }\r\n\r\n                                 // now remove the parameters\r\n                                 var allCols = thisRow.getChildViews();\r\n                                 var ic = allCols.length;\r\n                                 while (ic > 1) {\r\n                                    thisRow.removeView(allCols[ic - 1]);\r\n                                    ic--;\r\n                                 }\r\n\r\n                                 addOP();\r\n                              } else {\r\n                                 resetValue();\r\n                              }\r\n                           },\r\n                        });\r\n                     } else {\r\n                        addOP();\r\n                     }\r\n                  },\r\n               },\r\n            },\r\n         ],\r\n      };\r\n\r\n      return uiRow;\r\n   }\r\n\r\n   /**\r\n    * @method uiParamUI()\r\n    * return the webix UI definition for the parameter entry of this current\r\n    * operation.\r\n    * @param {obj} pDef\r\n    *        the current parameterDefinition entry we are creating the UI\r\n    *        for.\r\n    * @param {string} id\r\n    *        the unique id for where the properties panel is displayed.\r\n    * @return {obj}\r\n    */\r\n   uiParamUI(pDef, id) {\r\n      var myID = this.uiID(id);\r\n      this.ids = this.toIDs(myID);\r\n      var paramUI = null;\r\n\r\n      // now add the parameter\r\n      switch (pDef.type) {\r\n         case \"objectName\":\r\n            // an objectName parameter returns a select list of available\r\n            // objects in this ABFactory.\r\n            var options = this.AB.objects().map((o) => {\r\n               return { id: o.id, value: o.label };\r\n            });\r\n            paramUI = {\r\n               id: this.ids.objectname,\r\n               view: \"select\",\r\n               value: this.objectID,\r\n               options: options,\r\n               on: {\r\n                  onChange: (newValue /*, oldValue */) => {\r\n                     this.params = this.params || {};\r\n                     if (newValue != this.params[pDef.name]) {\r\n                        this.params[pDef.name] = newValue;\r\n                        this.paramChanged(pDef);\r\n                     }\r\n                  },\r\n               },\r\n            };\r\n            break;\r\n\r\n         case \"objectConditions\":\r\n            // objectConditions: returns a filter text summary, that when\r\n            // clicked, pops up a Filter Entry Popup.\r\n            // the actual value is stored in a hidden field.\r\n\r\n            // we will create a new FilterComplex() object to use for our\r\n            // filtering.\r\n            // Our goal is to create a special filter entry for each avaiable\r\n            // process data value that is available.\r\n            // A filter entry needs to look like:\r\n            // {\r\n            //     id: `{string}`,      // A unique id selector for this filter\r\n            //     name: `{string}`,    // the operation name displayed\r\n            //     type, {obj}          // an object defining the editor to show\r\n            //     fn: ()=>{}           // a function used for filtering elements\r\n            // }\r\n            //\r\n            // In our filters, we are assigning filters to EACH field by the\r\n            // field.id.  So the type definition needs to look like:\r\n            // {\r\n            //     \"uniqueID of the field (field.id)\" : {webixUI definition}\r\n            // }\r\n\r\n            var Filter = this.AB.filterComplexNew(id);\r\n            var hashFieldIDs = this.availableProcessDataFieldsHash();\r\n            if (this.object) {\r\n               Filter.fieldsLoad(this.object.fields(), this.object);\r\n               // NOTE: this will create default filters based upon the\r\n               // object fields() and their types\r\n\r\n               // Now we need to add in the Process Data Fields:\r\n               // for each Process Data Field that matches our same object\r\n               var foundFields = Object.keys(hashFieldIDs)\r\n                  .map((f) => {\r\n                     return hashFieldIDs[f];\r\n                  })\r\n                  .filter((k) => {\r\n                     return k.object && k.object.id == this.object.id;\r\n                  });\r\n\r\n               Filter.processFieldsLoad(foundFields);\r\n               /*\r\n               (foundFields || []).forEach((processField) => {\r\n                  var type = {};\r\n                  if (processField.field) {\r\n                     type[processField.field.id] = {\r\n                        view: \"select\",\r\n                        options: [\r\n                           {\r\n                              id: \"empty\",\r\n                              value: \"choose option\"\r\n                           },\r\n                           {\r\n                              id: processField.key,\r\n                              value: `context(${processField.label})`\r\n                           }\r\n                        ]\r\n                     };\r\n                  } else {\r\n                     // if there is no .field, it is probably an embedded special field\r\n                     // like: .uuid\r\n                     var key = processField.key.split(\".\").pop();\r\n                     type[key] = {\r\n                        view: \"select\",\r\n                        options: [\r\n                           {\r\n                              id: \"empty\",\r\n                              value: \"choose option\"\r\n                           },\r\n                           {\r\n                              id: processField.key,\r\n                              value: `context(${processField.label})`\r\n                           }\r\n                        ]\r\n                     };\r\n                  }\r\n\r\n                  // add an \"equals\" and \"not equals\" filter for each:\r\n                  Filter.filterAdd([\r\n                     {\r\n                        id: `context_equals`,\r\n                        name: `equals`,\r\n                        type,\r\n                        fn: (a, b) => {\r\n                           return a == b;\r\n                        }\r\n                     },\r\n                     {\r\n                        id: `context_not_equal`,\r\n                        name: `not equals`,\r\n                        type,\r\n                        fn: (a, b) => {\r\n                           return a != b;\r\n                        }\r\n                     }\r\n                  ]);\r\n                  \r\n               }); */\r\n            }\r\n\r\n            // every time the Filter \"saves\" it's data, it emits this event:\r\n            // take the given condition and store it in our hidden element.\r\n            Filter.on(\"save\", (condition) => {\r\n               // @param {obj} condition an object describing the filter\r\n               // condition.\r\n\r\n               this.params = this.params || {};\r\n               this.params[pDef.name] = condition;\r\n\r\n               let shortHand = $$(this.ids.shorthand);\r\n               // console.log(Filter.toShortHand());\r\n               shortHand.define({\r\n                  label: Filter.toShortHand(),\r\n               });\r\n               shortHand.refresh();\r\n\r\n               // NOTE: the hidden element is a text field, so convert the\r\n               // {condition object} => a string\r\n               let elCondition = $$(this.ids.condition);\r\n               elCondition.define({\r\n                  value: JSON.stringify(this.params[pDef.name]),\r\n               });\r\n               elCondition.refresh();\r\n            });\r\n\r\n            // create the initial condition value from our inputs.\r\n            var initialCond = \"\";\r\n            if (this.params && this.params[pDef.name]) {\r\n               Filter.setValue(this.params[pDef.name]);\r\n               initialCond = JSON.stringify(this.params[pDef.name]);\r\n            }\r\n\r\n            // what we show on the panel, is a text representation\r\n            // of the current condition.\r\n            var displayLabel = Filter.toShortHand();\r\n            paramUI = {\r\n               rows: [\r\n                  {\r\n                     id: this.ids.shorthand,\r\n                     view: \"label\",\r\n                     label: displayLabel,\r\n                     on: {\r\n                        onItemClick: function () {\r\n                           Filter.popUp();\r\n                        },\r\n                     },\r\n                  },\r\n                  // have a hidden field to contain the condition\r\n                  // value we will parse out later\r\n                  {\r\n                     id: this.ids.condition,\r\n                     view: \"text\",\r\n                     value: initialCond,\r\n                     hidden: true,\r\n                  },\r\n               ],\r\n            };\r\n            break;\r\n\r\n         case \"objectValues\":\r\n            // objectValues : shows a condenced textual representation of the\r\n            // field => value changes.  Clicking on the text will show a popup\r\n            // that allows you to add/remove additional field updates for\r\n            // the current object.\r\n\r\n            var initialValue = \"\";\r\n            var Updater = new RowUpdater(null, myID);\r\n            if (this.object) {\r\n               Updater.objectLoad(this.object);\r\n            }\r\n\r\n            // Set processed data key to value options\r\n            Updater.setExtendedOptions(\r\n               (this.task.process.processDataFields(this.task) || []).map(\r\n                  (item) => {\r\n                     return {\r\n                        id: item.key,\r\n                        value: item.label\r\n                     };\r\n                  }\r\n               )\r\n            );\r\n\r\n            // NOTE: .setValue() must be called once the RowUpdater is already\r\n            // displayed.  See the end of popUp() below:\r\n            if (this.params && this.params[pDef.name]) {\r\n               Updater.setValue(this.params[pDef.name]);\r\n               initialValue = JSON.stringify(this.params[pDef.name]);\r\n            }\r\n\r\n            var popUp = () => {\r\n               // show the RowUpdater in a popup:\r\n               var ui = {\r\n                  id: this.ids.popup,\r\n                  view: \"popup\",\r\n                  position: \"center\",\r\n                  minWidth: 700,\r\n                  modal: true,\r\n                  resize: true,\r\n                  body: {\r\n                     rows: [\r\n                        {\r\n                           height: 30,\r\n                           borderless: true,\r\n                           cols: [\r\n                              { fillspace: true },\r\n                              {\r\n                                 view: \"button\",\r\n                                 value: \"X\",\r\n                                 width: 30,\r\n                                 click: () => {\r\n                                    $$(this.ids.popup).hide();\r\n                                 }\r\n                              }\r\n                           ]\r\n                        },\r\n                        Updater.ui,\r\n                        {\r\n                           view: \"button\",\r\n                           value: L(\"Save\"),\r\n                           css: \"webix_primary\",\r\n                           click: () => {\r\n                              this.params = this.params || {};\r\n                              this.params[pDef.name] = Updater.getValue();\r\n                              var sh = $$(this.ids.shorthand);\r\n                              sh.define({\r\n                                 label: JSON.stringify(this.params[pDef.name]),\r\n                              });\r\n                              sh.refresh();\r\n\r\n                              var cond = $$(this.ids.condition);\r\n                              cond.define({\r\n                                 value: JSON.stringify(this.params[pDef.name]),\r\n                              });\r\n                              cond.refresh();\r\n\r\n                              $$(this.ids.popup).hide();\r\n                           },\r\n                        },\r\n                     ],\r\n                  },\r\n               };\r\n\r\n               // create and show the popup\r\n               this._myPopup = webix.ui(ui);\r\n               this._myPopup.show();\r\n\r\n               // NOTE: on a RowUpdater, the values need to be set\r\n               // AFTER it is displayed:\r\n               if (this.params && this.params[pDef.name]) {\r\n                  Updater.setValue(this.params[pDef.name]);\r\n               }\r\n            };\r\n            paramUI = {\r\n               rows: [\r\n                  // the textual shorthand for these values\r\n                  {\r\n                     id: this.ids.shorthand,\r\n                     view: \"label\",\r\n                     label: initialValue,\r\n                     on: {\r\n                        onItemClick: function () {\r\n                           popUp();\r\n                        },\r\n                     },\r\n                  },\r\n                  // the hidden field that contains the results\r\n                  {\r\n                     id: this.ids.condition,\r\n                     view: \"text\",\r\n                     value: initialValue,\r\n                     hidden: true,\r\n                  },\r\n               ],\r\n            };\r\n            break;\r\n      }\r\n\r\n      return paramUI;\r\n   }\r\n\r\n   /**\r\n    * @method viewAddNext()\r\n    * Add the next selector row After this Operation:\r\n    * @param {string} id\r\n    *        the unique id for where the properties panel is displayed.\r\n    * @param {webixNode} topView\r\n    *        the current webix node that needs this view added to\r\n    *        NOTE: this should be the top container that is adding a new\r\n    *        row for each operation.\r\n    */\r\n   viewAddNext(id, topView) {\r\n      var uiRow = this.uiNextRow(id);\r\n      topView.addView(uiRow);\r\n   }\r\n\r\n   /**\r\n    * @method viewAddParams()\r\n    * Add operation parameter(s) for each parameterDefinition we have defined.\r\n    * @param {string} id\r\n    *        the unique id for where the properties panel is displayed.\r\n    * @param {webixNode} rowView\r\n    *        the current webix node that needs this view added to\r\n    *        NOTE: this should be the ROW that the parameters are added to\r\n    */\r\n   viewAddParams(id, rowView) {\r\n      var params = [];\r\n      this.parameterDefinitions.forEach((pDef) => {\r\n         // get the definition from .uiParamUI()\r\n         params.push(this.uiParamUI(pDef, id));\r\n      });\r\n      var toInsert = null;\r\n      // stack parameters in a row if there are more than 1\r\n      if (params.length > 1) {\r\n         toInsert = {\r\n            rows: params,\r\n         };\r\n      } else {\r\n         toInsert = params.pop();\r\n      }\r\n      if (toInsert) {\r\n         rowView.addView(toInsert);\r\n      }\r\n   }\r\n\r\n   ////\r\n   //// QueryString Parser routines:\r\n   ////\r\n\r\n   /*\r\n     * parseQuery()\r\n     * check the given query string input and see if this object is the\r\n     * starting object.\r\n     * @param {string} query\r\n     *\t\t\t the entered query string operation.\r\n     * @return {bool}\r\n     * /\r\n    static parseQuery(query) {\r\n        // we want to see if the beginning of this query matches our\r\n        // option_begin string.\r\n        var begQuery = query;\r\n        if (query.length > this.option_begin.length) {\r\n            begQuery = query.slice(0, this.option_begin.length);\r\n        }\r\n        if (this.option_begin.indexOf(begQuery) == 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n\r\n    /// ABApplication data methods\r\n\r\n    tabComplete() {\r\n        if (this._suggestions) {\r\n            // if our begin tag is  present in _suggestions\r\n            if (\r\n                this._suggestions.indexOf(this.constructor.option_begin) != -1\r\n            ) {\r\n                // this is probably finishing out our command:\r\n                this.currQuery = this._suggestions;\r\n            } else {\r\n                // we are suggesting a parameter value:\r\n                this.currQuery = `${this.constructor.option_begin}${this._suggestions}`;\r\n            }\r\n\r\n            // now make sure we do another refresh to get another\r\n            // suggestion.\r\n            this.fromQuery(this.currQuery);\r\n        }\r\n    }\r\n\r\n    paramsToString() {\r\n        var strs = [];\r\n        this.parameterDefinitions.forEach((pDef) => {\r\n            strs.push(this.params[pDef.name]);\r\n            // switch (pDef.type) {\r\n            //     case \"objectName\":\r\n            //         strs.push(this.params[pDef.name]);\r\n            //         break;\r\n            // }\r\n        });\r\n\r\n        return strs.join(\",\");\r\n    }\r\n\r\n    /**\r\n     * @method toObj()\r\n     *\r\n     * properly compile the current state of this ABView instance\r\n     * into the values needed for saving to the DB.\r\n     *\r\n     * @return {json}\r\n     * /\r\n    toQuery() {\r\n        if (this.entryComplete) {\r\n            return `${this.prevOP ? this.prevOP.toQuery() : \"\"}${\r\n                this.constructor.option_begin\r\n            }${this.params ? this.paramsToString() : \"\"})`;\r\n        } else {\r\n            return `${this.prevOP ? this.prevOP.toQuery() : \"\"}${\r\n                this.currQuery ? this.currQuery : \"\"\r\n            }`;\r\n        }\r\n    }\r\n\r\n    fromQuery(queryString) {\r\n        var results = this.constructor.regEx.exec(queryString);\r\n        if (results) {\r\n            this.entryComplete = true;\r\n            this.queryValid = true;\r\n            this.params = {};\r\n\r\n            if (this.paramsValid(results[1])) {\r\n                // now progress on to any next operations:\r\n                var newQuery = queryString.replace(this.constructor.regEx, \"\");\r\n                var matchingOPs = [];\r\n                this.constructor.NextQLOps.forEach((OP) => {\r\n                    if (OP.parseQuery(newQuery)) {\r\n                        matchingOPs.push(OP);\r\n                    }\r\n                });\r\n                if (matchingOPs.length == 1) {\r\n                    // exact match, so add next:\r\n                    var qlOP = new matchingOPs[0](\r\n                        {},\r\n                        this,\r\n                        this.task,\r\n                        this.application\r\n                    );\r\n                    qlOP.fromQuery(newQuery);\r\n                    this.next = qlOP;\r\n                }\r\n\r\n                // if there were no matching OPs, then they typed an error:\r\n                if (matchingOPs.length == 0) {\r\n                    this.queryValid = false;\r\n                }\r\n            } else {\r\n                // I don't recoginze these params!\r\n                this.queryValid = false;\r\n                this._suggestions = \" ! Invalid Params !\";\r\n            }\r\n        } else {\r\n            this.currQuery = queryString;\r\n            this.queryValid = true; // assume true then set to false later\r\n            this._suggestions = null;\r\n\r\n            // calculate the processing of our command + params:\r\n            // if we have finished our begining\r\n            if (this.currQuery.indexOf(this.constructor.option_begin) == 0) {\r\n                var param = this.currQuery.slice(\r\n                    this.constructor.option_begin.length\r\n                );\r\n\r\n                this.paramsFromQuery(param);\r\n            } else {\r\n                // else they need to finish the beginning\r\n                this._suggestions = this.constructor.option_begin;\r\n            }\r\n\r\n            // if we didn't have any suggestions, then what they typed\r\n            // doesn't match, so remove the last character:\r\n            if (!this._suggestions) {\r\n                this.currQuery = this.currQuery.slice(0, -1);\r\n                this.queryValid = false;\r\n                this._suggestions = null;\r\n\r\n                // try to regenerate the suggestions again:\r\n                var param = this.currQuery.slice(\r\n                    this.constructor.option_begin.length\r\n                );\r\n\r\n                this.paramsFromQuery(param);\r\n            }\r\n        }\r\n    }\r\n\r\n    firstOP() {\r\n        if (!this.prevOP) {\r\n            return this;\r\n        } else {\r\n            return this.prevOP.firstOP();\r\n        }\r\n    }\r\n\r\n    lastOP() {\r\n        if (!this.entryComplete) {\r\n            return this;\r\n        } else {\r\n            // now figure out which of our nextOps are being used.\r\n            if (this.next) {\r\n                return this.next.lastOP();\r\n            } else {\r\n                // we haven't specified a next OP, so we are still up.\r\n                return this;\r\n            }\r\n        }\r\n    }\r\n\r\n    paramPull(paramDef, queryString) {\r\n        var result = { param: queryString, balance: 0 };\r\n        if (queryString.length > 0) {\r\n            switch (paramDef.type) {\r\n                case \"objectName\":\r\n                    // define a lexer for objectNames\r\n                    var lexerObjectName = moo.compile({\r\n                        comma: { match: \",\" },\r\n                        name: {\r\n                            match: /\"(?:\\\\[\"\\\\]|[^\\n\"\\\\])*\"/\r\n                            // value: (s) => s.slice(1, -1)\r\n                        },\r\n                        WS: /[ \\t]+/,\r\n                        currKey: moo.error\r\n                    });\r\n                    lexerObjectName.reset(queryString);\r\n                    var name = \"\";\r\n                    var foundObj = null;\r\n                    var token = lexerObjectName.next();\r\n\r\n                    if (token) {\r\n                        // if this is the 2nd time through, might\r\n                        // begin with a ','\r\n                        while (token.type == \"comma\") {\r\n                            token = lexerObjectName.next();\r\n                        }\r\n\r\n                        // pull the parameter from the current queryString\r\n                        if ([\"name\", \"currKey\"].indexOf(token.type) != -1) {\r\n                            name = token.value;\r\n                        }\r\n                        result.param = name;\r\n                    }\r\n\r\n                    break;\r\n\r\n                case \"objectConditions\":\r\n                case \"objectValues\":\r\n                    // define a lexer for objectConditions\r\n                    // the goal of this lexer is to achieve json balance\r\n                    // ( equal # of { & }) while reaching an end condition:\r\n                    var lexerObjectCond = moo.compile({\r\n                        comma: { match: \",\" },\r\n                        colon: { match: \":\" },\r\n                        lbrace: { match: \"{\" },\r\n                        rbrace: { match: \"}\" },\r\n                        rparen: { match: \")\" },\r\n                        keyval: {\r\n                            match: /\"(?:\\\\[\"\\\\]|[^\\n\"\\\\])*\"/\r\n                            // value: (s) => s.slice(1, -1)\r\n                        },\r\n                        WS: /[ \\t]+/,\r\n                        currKey: moo.error\r\n                    });\r\n                    lexerObjectCond.reset(queryString);\r\n                    var balance = 0;\r\n                    var foundObj = null;\r\n                    var token = lexerObjectCond.next();\r\n                    var stop = false;\r\n                    var param = \"\";\r\n                    while (token && !stop) {\r\n                        if (token.type == \"lbrace\") {\r\n                            balance++;\r\n                        }\r\n                        if (token.type == \"rbrace\") {\r\n                            balance--;\r\n                        }\r\n\r\n                        // check for stop condition:\r\n                        // when balance is achieved and we find a \",\"\r\n                        if (balance == 0) {\r\n                            if (token.type == \"comma\") {\r\n                                stop = true;\r\n                            }\r\n                        }\r\n\r\n                        if (!stop) {\r\n                            param += token.value;\r\n                            token = lexerObjectCond.next();\r\n                        }\r\n                    }\r\n                    result.param = param;\r\n                    result.balance = balance;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    suggestionComplete() {\r\n        var params = [];\r\n        this.parameterDefinitions.forEach((pDef) => {\r\n            params.push(this.params[pDef.name]);\r\n        });\r\n        return `${this.constructor.option_begin}${params.join(\",\")})`;\r\n    }\r\n\r\n    /**\r\n     * @method paramsFromQuery()\r\n     * take the given queryString value and see if it matches our\r\n     * possible parameter values.\r\n     * we update ._suggestions based upon the current param state.\r\n     * @param {string} queryString\r\n     * /\r\n    paramsFromQuery(queryString) {\r\n        var keepGoing = true;\r\n        var current = queryString;\r\n\r\n        // for each of our parameters,\r\n        this.parameterDefinitions.forEach((pDef) => {\r\n            if (!keepGoing) return;\r\n\r\n            // pull the current param\r\n            var pullResult = this.paramPull(pDef, current);\r\n            current = current.replace(pullResult.param, \"\");\r\n\r\n            // if this param is NOT valid\r\n            if (!this.paramIsValid(pDef, pullResult)) {\r\n                // don't keep going after this\r\n                keepGoing = false;\r\n\r\n                // offer suggestions for this param\r\n                switch (pDef.type) {\r\n                    case \"objectName\":\r\n                        // return suggestions for our parameters\r\n                        var suggestions = [];\r\n                        var objects = this.application.objects((o) => {\r\n                            var quotedLabel = `\"${o.label}\"`;\r\n                            return (\r\n                                pullResult.param.length == 0 ||\r\n                                quotedLabel.indexOf(pullResult.param) == 0\r\n                            );\r\n                        });\r\n                        objects.forEach((o) => {\r\n                            suggestions.push(`\"${o.label}\"`);\r\n                        });\r\n                        this._suggestions = suggestions.join(\"\\n\");\r\n                        break;\r\n\r\n                    case \"objectConditions\":\r\n                    case \"objectValues\":\r\n                        var paramComplete = false;\r\n                        var paramObj = null;\r\n                        try {\r\n                            paramObj = JSON.parse(pullResult.param);\r\n                            paramComplete = true;\r\n                        } catch (e) {}\r\n\r\n                        if (paramComplete) {\r\n                            this.paramObj = paramObj;\r\n                            this.params[pDef.name] = pullResult.param;\r\n                            // this.entryComplete = true;\r\n                            this._suggestions = this.suggestionComplete();\r\n                        } else {\r\n                            // define a lexer to help us parse through the provided cond string\r\n                            var lexer = moo.states({\r\n                                start: {\r\n                                    lbrace: { match: \"{\", push: \"key\" }\r\n                                },\r\n                                key: {\r\n                                    colon: { match: \":\", push: \"value\" },\r\n                                    rparen: { match: \")\", pop: true },\r\n                                    key: {\r\n                                        match: /\"(?:\\\\[\"\\\\]|[^\\n\"\\\\])*\"/\r\n                                        // value: (s) => s.slice(1, -1)\r\n                                    },\r\n                                    WS: /[ \\t]+/,\r\n                                    currKey: moo.error\r\n                                },\r\n                                value: {\r\n                                    // lbrace: { match: \"{\", push: \"complexValue\" },\r\n                                    rbrace: { match: \"}\", pop: true },\r\n                                    valueContext: {\r\n                                        match: /\"\\$context\\((?:\\\\[\"\\\\]|[^\\n\"\\\\])*?\\)\"/\r\n                                    },\r\n                                    value: {\r\n                                        match: /\"(?:\\\\[\"\\\\]|[^\\n\"\\\\])*\"/\r\n                                    },\r\n                                    comma: { match: \",\", pop: true },\r\n                                    currVal: moo.error\r\n                                }\r\n                            });\r\n\r\n                            // now follow our state, to figure out if we are entering a\r\n                            // key, or a value, and then figure out how to offer suggestions\r\n                            // based upon what they are entering now:\r\n                            var state = \"start\";\r\n                            lexer.reset(pullResult.param);\r\n                            var token = lexer.next();\r\n                            var lastToken = null;\r\n                            var lastKey = null;\r\n                            while (token) {\r\n                                switch (state) {\r\n                                    case \"start\":\r\n                                        if (token.type == \"lbrace\") {\r\n                                            state = \"key\";\r\n                                        }\r\n                                        break;\r\n                                    case \"key\":\r\n                                        if (token.type == \"colon\") {\r\n                                            state = \"value\";\r\n                                        }\r\n                                        if (token.type == \"key\") {\r\n                                            lastKey = token.value;\r\n                                        }\r\n                                        break;\r\n\r\n                                    case \"value\":\r\n                                        if (token.type == \"comma\") {\r\n                                            state = \"key\";\r\n                                        }\r\n                                        break;\r\n                                }\r\n                                lastToken = token;\r\n                                token = lexer.next();\r\n                            }\r\n\r\n                            // by this point, we have ended on a state, and can figure out\r\n                            // what to suggest:\r\n                            switch (state) {\r\n                                case \"start\":\r\n                                    // if we ended here, then we didn't even have our first {\r\n                                    this._suggestions = \"{cond}\";\r\n                                    break;\r\n\r\n                                case \"key\":\r\n                                    // we are entering a Key, so suggest the available fields\r\n                                    // from this object\r\n                                    var currKey = \"\";\r\n                                    var types = [\"key\", \"currKey\"];\r\n                                    if (types.indexOf(lastToken.type) != -1) {\r\n                                        currKey = lastToken.value;\r\n                                    }\r\n                                    this._suggestions = this.fieldList(currKey);\r\n\r\n                                    // if we end up with ._suggestions == currKey\r\n                                    // then the key is complete, and we need to now enter \":\"\r\n                                    if (this._suggestions == currKey) {\r\n                                        this._suggestions = \":\";\r\n                                    }\r\n                                    break;\r\n\r\n                                case \"value\":\r\n                                    // entering a value, decide what to suggest based on what\r\n                                    // the current key/field we are on:\r\n                                    var currValue = \"\";\r\n                                    var types = [\r\n                                        \"value\",\r\n                                        \"valueContext\",\r\n                                        \"currVal\"\r\n                                    ];\r\n                                    if (types.indexOf(lastToken.type) != -1) {\r\n                                        currValue = lastToken.value;\r\n                                    }\r\n                                    this._suggestions = this.valueList(\r\n                                        lastKey,\r\n                                        currValue\r\n                                    );\r\n                                    break;\r\n                            }\r\n                        }\r\n\r\n                        break;\r\n                }\r\n            }\r\n        });\r\n\r\n        if (keepGoing) {\r\n            // none of our params were invalid, so just suggest to complete our\r\n            this._suggestions = this.suggestionComplete();\r\n        }\r\n    }\r\n\r\n    paramIsValid(paramDef, pullResult) {\r\n        var isValid = true;\r\n        this.params = this.params || {};\r\n        switch (paramDef.type) {\r\n            case \"objectName\":\r\n                // verify it is valid\r\n                var param = pullResult.param;\r\n                var foundObj = null;\r\n                if (param) {\r\n                    // see if we find a Matching Object\r\n                    foundObj = this.application.objects((o) => {\r\n                        var quotedLabel = `\"${o.label}\"`;\r\n                        return (\r\n                            param.length == 0 || quotedLabel.indexOf(param) == 0\r\n                        );\r\n                    })[0];\r\n                    if (foundObj) {\r\n                        this.params[paramDef.name] = param;\r\n                        // it is NOT valid unless it is an exact match:\r\n                        if (`\"${foundObj.label}\"` != param) {\r\n                            isValid = false;\r\n                        }\r\n                    }\r\n                }\r\n                isValid = isValid && param.length > 0 && foundObj;\r\n                break;\r\n\r\n            case \"objectConditions\":\r\n            case \"objectValues\":\r\n                if (pullResult.balance == 0) {\r\n                    this.params[paramDef.name] = pullResult.param;\r\n                }\r\n                isValid =\r\n                    isValid &&\r\n                    pullResult.balance == 0 &&\r\n                    pullResult.param.length > 0;\r\n                break;\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n    /**\r\n     * @method paramsValid()\r\n     * parse through the given text and see if our defined parameters\r\n     * can be properly represented.\r\n     * @param {string} queryString\r\n     *        the current value of the text that is the parameter(s) to our\r\n     *        function.\r\n     * @return {bool}\r\n     *         true : if every parameter parses\r\n     *         false: otherwise\r\n     * /\r\n    paramsValid(queryString) {\r\n        // queryString represents the full text parameters. Might be > 1 params\r\n\r\n        var current = queryString;\r\n        var isValid = true; // so optimistic.\r\n\r\n        // for each of our defined parameters\r\n        this.parameterDefinitions.forEach((pDef) => {\r\n            var pullResult = this.paramPull(pDef, current);\r\n            current = current.replace(pullResult.param, \"\");\r\n            isValid = isValid && this.paramIsValid(pDef, pullResult);\r\n        });\r\n\r\n        return isValid;\r\n    }\r\n\r\n    suggestions() {\r\n        if (this.entryComplete) {\r\n            // return suggestions for next operations.\r\n            var suggestions = [];\r\n\r\n            this.constructor.NextQLOps.forEach((OP) => {\r\n                suggestions.push(OP.option);\r\n            });\r\n            return suggestions.join(\"\\n\");\r\n        } else {\r\n            return this._suggestions;\r\n        }\r\n    }\r\n    */\r\n}\r\n\r\nmodule.exports = ABQL;\r\n","/*\r\n * ABQLFind\r\n *\r\n * An ABQLFind depends on a BASE QL object (Object, Datacollection, Query)\r\n * and can perform a DB query based upon that BASE object.\r\n *\r\n */\r\nconst ABQLFindCore = require(\"../../core/ql/ABQLFindCore.js\");\r\n\r\nclass ABQLFind extends ABQLFindCore {\r\n   // constructor(attributes, prevOP, task, application) {\r\n   //     super(attributes, ParameterDefinitions, prevOP, task, application);\r\n   // }\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n}\r\nABQLFind.uiIndentNext = 10;\r\n\r\nmodule.exports = ABQLFind;\r\n","/*\r\n * ABQLManager\r\n *\r\n * An interface for managing the different ABQL Operations available in our\r\n * AppBuilder.\r\n *\r\n */\r\n\r\nconst ABQLManagerCore = require(\"../../core/ql/ABQLManagerCore.js\");\r\n\r\nvar ABQLManager = {\r\n   /**\r\n    * @method fromAttributes()\r\n    * return an {ABQL} object that represents the given attributes that\r\n    * were saved from the previous .toObj()\r\n    * @param {object} attributes\r\n    *\t\t  the values returned from the previous .toObj() call\r\n    * @param {ABProcessTask***} task\r\n    *\t\t  the current ABProcessTaskServiceQuery that contains this QL\r\n    * @param {ABFactory} AB\r\n    *\t\t  the current {ABFactory} active for this interface.\r\n    * @return {ABQL} | null\r\n    */\r\n   fromAttributes: ABQLManagerCore.fromAttributes,\r\n\r\n   /**\r\n    * @method ids()\r\n    * return a set of unique webix ids for the ui portions of this object.\r\n    * @param {string} id\r\n    *\t\t  the webix base id of the parameters panel.\r\n    * @return {object}\r\n    */\r\n   ids: function (id) {\r\n      return {\r\n         root: `${id}_root`,\r\n         select: `${id}_root_select`,\r\n         options: `${id}_root_options`,\r\n      };\r\n   },\r\n\r\n   /**\r\n    * @method builder\r\n    * return a UI component like object that will display the QL builder.\r\n    * The component will support:\r\n    *\t\t.ui(id) : returns a webix ui definition for the current builder\r\n    *\t\t.init(id) : performs any special actions to prepare the webix ui\r\n    * @param {object} rootOP\r\n    *\t\t  the root ABQLxxxx operation\r\n    * @param {ABProcessTask***} task\r\n    *\t\t  the current Process Task that is requesting the data.\r\n    * @param {ABFactory} AB\r\n    *\t\t  the {ABFactory} active for this display.\r\n    * @return {object}\r\n    */\r\n   builder: function (rootOP, task, AB) {\r\n      // var rootOP = this.fromAttributes(attributes, task, AB);\r\n      let L = (...params) => AB.Multilingual.label(...params);\r\n\r\n      return {\r\n         ui: function (id) {\r\n            var options = [{ id: 0, value: L(\"choose Root\") }];\r\n            ABQLManagerCore.QLOps.forEach((op) => {\r\n               options.push({ id: op.key, value: op.label });\r\n            });\r\n\r\n            var ids = ABQLManager.ids(id);\r\n            var ui = {\r\n               rows: [\r\n                  {\r\n                     view: \"label\",\r\n                     label: L(\"Query:\"),\r\n                  },\r\n                  {\r\n                     id: ids.root,\r\n                     cols: [\r\n                        {\r\n                           id: ids.select,\r\n                           view: \"select\",\r\n                           value: rootOP ? rootOP.constructor.key : 0,\r\n                           options: options,\r\n                           on: {\r\n                              onChange: (newValue, oldValue) => {\r\n                                 function resetValue() {\r\n                                    var select = $$(ids.select);\r\n                                    select.blockEvent();\r\n                                    select.setValue(oldValue);\r\n                                    select.unblockEvent();\r\n                                 }\r\n                                 if (newValue == oldValue) {\r\n                                    return;\r\n                                 }\r\n                                 var newOP = ABQLManagerCore.QLOps.find(\r\n                                    (op) => {\r\n                                       return op.key == newValue;\r\n                                    }\r\n                                 );\r\n                                 if (!newOP) {\r\n                                    resetValue();\r\n                                    return;\r\n                                 }\r\n                                 function addOP() {\r\n                                    if (newOP) {\r\n                                       rootOP = new newOP({}, task, AB);\r\n                                       rootOP.viewAddParams(id, $$(ids.root));\r\n                                       rootOP.viewAddNext(\r\n                                          id,\r\n                                          $$(ids.root).getParentView()\r\n                                       );\r\n                                    }\r\n                                 }\r\n                                 var topEntry = $$(ids.root).getParentView();\r\n                                 var allRows = topEntry.getChildViews();\r\n                                 if (allRows.length > 2) {\r\n                                    webix.confirm({\r\n                                       title: \"continue?\",\r\n                                       text:\r\n                                          \"changing this rule will reset any following rules.\",\r\n                                       ok: \"yes\",\r\n                                       cancel: \"no\",\r\n                                       callback: (result) => {\r\n                                          if (result) {\r\n                                             // remove the current additional Rows:\r\n                                             var thisView = $$(ids.root);\r\n                                             var ir = allRows.length - 1;\r\n                                             while (\r\n                                                allRows[ir].config.id !=\r\n                                                thisView.config.id\r\n                                             ) {\r\n                                                topEntry.removeView(\r\n                                                   allRows[ir]\r\n                                                );\r\n                                                ir--;\r\n                                             }\r\n\r\n                                             // now remove the parameters\r\n                                             var allCols = thisView.getChildViews();\r\n                                             var ic = allCols.length;\r\n                                             while (ic > 1) {\r\n                                                thisView.removeView(\r\n                                                   allCols[ic - 1]\r\n                                                );\r\n                                                ic--;\r\n                                             }\r\n\r\n                                             addOP();\r\n                                          } else {\r\n                                             resetValue();\r\n                                          }\r\n                                       },\r\n                                    });\r\n                                 } else {\r\n                                    addOP();\r\n                                 } // if allRows.length > 2\r\n                              }, // onChange\r\n                           },\r\n                        },\r\n                     ],\r\n                  },\r\n               ],\r\n            };\r\n\r\n            if (rootOP) {\r\n               rootOP.uiAddParams(id, ui);\r\n               rootOP.uiAddNext(id, ui);\r\n            }\r\n\r\n            return ui;\r\n         },\r\n         init: function (id) {},\r\n      };\r\n   },\r\n\r\n   /**\r\n    * @method parse\r\n    * step through the current properties panel and decode the QL objects\r\n    * and their parameters.\r\n    * Return the .toOBJ() attributes definition as a result.\r\n    * @param {string} id\r\n    *\t\t  the webix base id of the parameters panel.\r\n    * @param {ABProcessTask***} task\r\n    *\t\t  the current Process Task that is requesting the data.\r\n    * @param {ABFactory} AB\r\n    *\t\t  the {ABFactory} object that is currently active.\r\n    * @return {object}\r\n    */\r\n   parse: function (id, task, AB) {\r\n      var ids = ABQLManager.ids(id);\r\n      var root = $$(ids.root);\r\n\r\n      if (!root) {\r\n         console.warn(\"ABQLManager.parse(): unable to find root element\");\r\n         return;\r\n      }\r\n\r\n      // get all the input rows\r\n      var rows = root.getParentView().getChildViews();\r\n      rows.shift(); // remove the query label row:\r\n\r\n      function parseCurrent(rows, options, prevOP) {\r\n         if (rows.length == 0) {\r\n            return null;\r\n         }\r\n         var row = rows.shift();\r\n\r\n         // get which operation was selected\r\n         // find the operation selector (skip any indents)\r\n         var views = row.getChildViews();\r\n         var selector = views.shift();\r\n         while (!selector.getValue) {\r\n            selector = views.shift();\r\n         }\r\n         var value = selector.getValue();\r\n\r\n         // figure out the QLOP object\r\n         var OP = options.find((o) => {\r\n            return o.key == value;\r\n         });\r\n         if (OP) {\r\n            var currOP = null;\r\n            if (prevOP) {\r\n               currOP = new OP({}, prevOP, task, AB);\r\n            } else {\r\n               currOP = new OP({}, task, AB);\r\n            }\r\n\r\n            // now get currOP to initialize from it's parameters:\r\n            currOP.parseRow(row, id);\r\n\r\n            // carry forward any .object info if not already established\r\n            // by the .parseRow():\r\n            if (!currOP.object && prevOP) {\r\n               currOP.object = prevOP.object;\r\n               currOP.objectID = currOP.object ? currOP.object.id : null;\r\n            }\r\n\r\n            var nextRow = parseCurrent(\r\n               rows,\r\n               currOP.constructor.NextQLOps,\r\n               currOP\r\n            );\r\n            currOP.next = nextRow;\r\n            return currOP;\r\n         }\r\n         return null;\r\n      }\r\n      var operation = parseCurrent(rows, ABQLManagerCore.QLOps, null);\r\n      return operation;\r\n   },\r\n};\r\nmodule.exports = ABQLManager;\r\n","/*\r\n * ABQLRootObject\r\n *\r\n * An ABQL defines a Query Language Operation. A QL Operation\r\n * is intended to be evaluated at run time and return a value that can be\r\n * assigned to form value or an object.\r\n *\r\n *\r\n */\r\n\r\nconst ABQLRootObjectCore = require(\"../../core/ql/ABQLRootObjectCore.js\");\r\n\r\nclass ABQLObject extends ABQLRootObjectCore {\r\n   // constructor(attributes, task, application) {\r\n   //     // NOTE: keep this so we can insert the prevOp == null\r\n   //     super(attributes, ParameterDefinitions, null, task, application);\r\n   // }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /*\r\n    * @method paramChanged()\r\n    * respond to an update to the given parameter.\r\n    * NOTE: the value will ALREADY be saved in this.params[pDef.name].\r\n    * @param {obj} pDef\r\n    *        the this.parameterDefinition entry of the parameter that was\r\n    *        changed.\r\n    */\r\n   paramChanged(pDef) {\r\n      if (pDef.name == \"name\") {\r\n         this.objectID = this.params[pDef.name];\r\n         this.object = this.objectLookup(this.objectID);\r\n\r\n         // ?? is this correct?\r\n         // if we already have created a .next operation, and we have\r\n         // just changed our .object, pass that information forward.\r\n         if (this.next) {\r\n            this.next.object = this.object;\r\n         }\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method parseRow()\r\n    * When it is time to pull the information from the properties panel,\r\n    * use this fn to get the current Row of data.\r\n    *\r\n    * This fn() will populate the this.params with the values for each\r\n    * of our .parameterDefinitions.\r\n    *\r\n    * @param {webixNode} row\r\n    *        the current webix node that contains the ROW defining the\r\n    *        operation and it's parameters.\r\n    * @param {string} id\r\n    *        the unique id for where the properties panel is displayed.\r\n    */\r\n   parseRow(row, id) {\r\n      super.parseRow(row, id);\r\n\r\n      // for an Object operation, we need to set our .objectID after\r\n      // the values are parsed.\r\n\r\n      if (this.params.name) {\r\n         this.objectID = this.params.name;\r\n         this.object = this.objectLookup(this.params.name);\r\n      }\r\n   }\r\n}\r\nABQLObject.uiIndentNext = 10;\r\n\r\nmodule.exports = ABQLObject;\r\n","const ABQLRowPluckCore = require(\"../../core/ql/ABQLRowPluckCore.js\");\r\n\r\nclass ABQLRowPluck extends ABQLRowPluckCore {\r\n   /*\r\n    * @method paramChanged()\r\n    * respond to an update to the given parameter.\r\n    * NOTE: the value will ALREADY be saved in this.params[pDef.name].\r\n    * @param {obj} pDef\r\n    *        the this.parameterDefinition entry of the parameter that was\r\n    *        changed.\r\n    */\r\n   paramChanged(pDef, id) {\r\n      super.paramChanged(pDef);\r\n      if (pDef.name == \"field\") {\r\n         // Re-generate next select options\r\n         this.uiNextRowSelectorRefresh(id);\r\n      }\r\n   }\r\n}\r\nABQLRowPluck.uiIndentNext = 20;\r\n\r\nmodule.exports = ABQLRowPluck;\r\n","/*\r\n * ABQLRowSave\r\n *\r\n * An ABQLRowSave can store the current Data set into the Process Task it is\r\n * in, so that this data can be made available to other Process Tasks.\r\n *\r\n */\r\n\r\nconst ABQLSetSaveCore = require(\"../../core/ql/ABQLSetSaveCore.js\");\r\n\r\nclass ABQLRowSave extends ABQLSetSaveCore {}\r\nABQLRowSave.uiIndentNext = 20;\r\n\r\nmodule.exports = ABQLRowSave;\r\n","/*\r\n * ABQLRowUpdate\r\n *\r\n * An ABQLRow Update allows you to update the values on the current\r\n * Row of data.\r\n *\r\n */\r\n\r\nconst ABQLRowUpdateCore = require(\"../../core/ql/ABQLRowUpdateCore.js\");\r\n\r\nclass ABQLRowUpdate extends ABQLRowUpdateCore {\r\n   // constructor(attributes, prevOP, task, application) {\r\n   //     super(attributes, ParameterDefinitions, prevOP, task, application);\r\n   //     // #Hack! : when an Operation provides the same .NextQlOps that it\r\n   //     // was defined in, we can't require it again ==> circular dependency.\r\n   //     // so we manually set it here from the operation that created us:\r\n   //     this.constructor.NextQLOps = prevOP.constructor.NextQLOps;\r\n   // }\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n}\r\nABQLRowUpdate.uiIndentNext = 20;\r\n\r\nmodule.exports = ABQLRowUpdate;\r\n","/*\r\n * ABQLSetFirst\r\n *\r\n * An ABQLFind depends on a BASE QL object (Object, Datacollection, Query)\r\n * and can perform a DB query based upon that BASE object.\r\n *\r\n */\r\n\r\nconst ABQLSetFirstCore = require(\"../../core/ql/ABQLSetFirstCore.js\");\r\n\r\nclass ABQLSetFirst extends ABQLSetFirstCore {\r\n   // constructor(attributes, prevOP, task, application) {\r\n   //     super(attributes, [], prevOP, task, application);\r\n   // }\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n}\r\nABQLSetFirst.uiIndentNext = 20;\r\n\r\nmodule.exports = ABQLSetFirst;\r\n","/*\r\n * ABQLSetPluck\r\n *\r\n * An ABQLSetPluck can process a set (array) of data and puck out a specified\r\n * field from each row to then make an array of values that only contain that \r\n * field.\r\n * \r\n * Example: \r\narray = [\r\n {\r\n\tname: \"Neo\",\r\n\temail: \"neo@thematrix.com\",\r\n\trelationships: [ { morpheous}, {trinity} ]\r\n },\r\n {\r\n\tname: \"trinity\",\r\n\temail: \"trinity@thematrix.com\",\r\n\trelationships: [ {neo}, {morpheous} ]\r\n },\r\n {\r\n\tname: \"morpheous\",\r\n\temail: \"morpheous@thematrix.com\",\r\n\trelationships: [ {neo}, {trinity}]\r\n }\r\n\r\n]\r\n\r\npluck(\"email\") :\r\n\t[\r\n\t\t\"neo@thematrix.com\",\r\n\t\t\"trinity@thematrix.com\",\r\n\t\t\"morpheous@thematrix.com\"\r\n\t]\r\n\r\npluck(\"relationships\"):\r\n\t[\r\n\t\t{neo},\r\n\t\t{trinity},\r\n\t\t{morpheous}\r\n\t]\r\n *\r\n */\r\n\r\nconst ABQLSetPluckCore = require(\"../../core/ql/ABQLSetPluckCore.js\");\r\n\r\nclass ABQLSetPluck extends ABQLSetPluckCore {\r\n   // constructor(attributes, prevOP, task, application) {\r\n   //     super(attributes, [], prevOP, task, application);\r\n   // }\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /*\r\n    * @method paramChanged()\r\n    * respond to an update to the given parameter.\r\n    * NOTE: the value will ALREADY be saved in this.params[pDef.name].\r\n    * @param {obj} pDef\r\n    *        the this.parameterDefinition entry of the parameter that was\r\n    *        changed.\r\n    */\r\n   paramChanged(pDef) {\r\n      if (pDef.name == \"field\") {\r\n         // debugger;\r\n         this.fieldID = this.params[pDef.name];\r\n         // v2 method:\r\n         // this.field = this.object.fieldByID(this.fieldID);\r\n         this.field = this.object.fieldByID(this.fieldID);\r\n\r\n         // v2 method:\r\n         // if (this.field && this.field.isConnected) {\r\n         if (this.field && this.field.key == \"connectObject\") {\r\n            this.objectOut = this.field.datasourceLink;\r\n\r\n            // ?? is this correct?\r\n            // if we already have created a .next operation, and we have\r\n            // just changed our .object, pass that information forward.\r\n            if (this.next) {\r\n               this.next.object = this.objectOut;\r\n            }\r\n         }\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method parseRow()\r\n    * When it is time to pull the information from the properties panel,\r\n    * use this fn to get the current Row of data.\r\n    *\r\n    * This fn() will populate the this.params with the values for each\r\n    * of our .parameterDefinitions.\r\n    *\r\n    * NOTE: in this process our .object and .objectOut isn't as simple\r\n    * as the other QL node types.  We'll have to interpolate our values\r\n    * from the given fieldID in our property panel.\r\n    *\r\n    * @param {webixNode} row\r\n    *        the current webix node that contains the ROW defining the\r\n    *        operation and it's parameters.\r\n    * @param {string} id\r\n    *        the unique id for where the properties panel is displayed.\r\n    */\r\n   parseRow(row, id) {\r\n      super.parseRow(row, id);\r\n\r\n      this.fieldID = this.params.field;\r\n\r\n      // we now have to build backwards from the current fieldID to set our\r\n      // relevant .object and .objectOut\r\n      this.AB.objects((o) => {\r\n         if (!this.field) {\r\n            // var field = o.fieldByID(this.fieldID);\r\n            var field = o.fieldByID(this.fieldID);\r\n            if (field) {\r\n               this.field = field;\r\n            }\r\n         }\r\n      });\r\n\r\n      if (this.field) {\r\n         this.object = this.field.object;\r\n         // v2 method:\r\n         // if (this.field.isConnected) {\r\n         if (this.field && this.field.key == \"connectObject\") {\r\n            this.objectOut = this.field.datasourceLink;\r\n         }\r\n      }\r\n   }\r\n}\r\nABQLSetPluck.uiIndentNext = 10;\r\n\r\nmodule.exports = ABQLSetPluck;\r\n","/*\r\n * ABQLSetSave\r\n *\r\n * An ABQLSetSave can store the current Data set into the Process Task it is\r\n * in, so that this data can be made available to other Process Tasks.\r\n *\r\n */\r\n\r\nconst ABQLSetSaveCore = require(\"../../core/ql/ABQLSetSaveCore.js\");\r\n\r\nclass ABQLSetSave extends ABQLSetSaveCore {\r\n   // constructor(attributes, prevOP, task, application) {\r\n   //     super(attributes, [], prevOP, task, application);\r\n   // }\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /*\r\n    * @method paramChanged()\r\n    * respond to an update to the given parameter.\r\n    * NOTE: the value will ALREADY be saved in this.params[pDef.name].\r\n    * @param {obj} pDef\r\n    *        the this.parameterDefinition entry of the parameter that was\r\n    *        changed.\r\n    */\r\n   paramChanged(pDef) {\r\n      if (pDef.name == \"task_param\") {\r\n         this.taskParam = this.params[pDef.name];\r\n      }\r\n   }\r\n\r\n   parseRow(row, id) {\r\n      super.parseRow(row, id);\r\n\r\n      if (!this.registered) {\r\n         this.task.registerDatasource(this);\r\n         this.registered = true;\r\n      }\r\n   }\r\n}\r\nABQLSetSave.uiIndentNext = 10;\r\n\r\nmodule.exports = ABQLSetSave;\r\n","/*\r\n * ABQLValueSave\r\n *\r\n * An ABQLValueSave can store the current Data field set into the Process Task it is\r\n * in, so that this data can be made available to other Process Tasks.\r\n *\r\n */\r\n\r\nconst ABQLValueSaveCore = require(\"../../core/ql/ABQLValueSaveCore.js\");\r\n\r\nclass ABQLValueSave extends ABQLValueSaveCore {}\r\nABQLValueSave.uiIndentNext = 30;\r\n\r\nmodule.exports = ABQLValueSave;\r\n","const ABViewCore = require(\"../../core/views/ABViewCore.js\");\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABView extends ABViewCore {\r\n   // constructor(attributes, application, parent) {\r\n   //    super(attributes, application, parent);\r\n   // }\r\n\r\n   // /*\r\n   //  * @method isValid\r\n   //  * check the current values to make sure they are valid.\r\n   //  * Here we check the default values provided by ABView.\r\n   //  *\r\n   //  * @return {ABFactory.Validation.validator()}\r\n   //  */\r\n   // isValid() {\r\n   //    var validator = this.AB.Validation.validator();\r\n\r\n   //    // // labels must be unique among views on the same parent\r\n   //    var parent = this.parent;\r\n   //    // if (!parent) { parent = this.application; }\r\n\r\n   //    // if we have a parent component:\r\n   //    if (parent) {\r\n   //       var isNameUnique =\r\n   //          parent.views((v) => {\r\n   //             return (\r\n   //                v.id != this.id &&\r\n   //                v.label.toLowerCase() == this.label.toLowerCase()\r\n   //             );\r\n   //          }).length == 0;\r\n   //       if (!isNameUnique) {\r\n   //          validator.addError(\r\n   //             \"label\",\r\n   //             L(\"View label must be unique among peers.\")\r\n   //          );\r\n   //       }\r\n   //    }\r\n   //    return validator;\r\n   // }\r\n\r\n   // /**\r\n   //  * @method editorComponent\r\n   //  * return the Editor for this UI component.\r\n   //  * the editor should display either a \"block\" view or \"preview\" of\r\n   //  * the current layout of the view.\r\n   //  * @param {string} mode what mode are we in ['block', 'preview']\r\n   //  * @return {Component}\r\n   //  */\r\n   // editorComponent(App, mode) {\r\n   //    var idBase = \"ABViewEditorComponent\";\r\n   //    var ids = {\r\n   //       component: App.unique(idBase + \"_component\"),\r\n   //       view: App.unique(idBase + \"_view\"),\r\n   //    };\r\n\r\n   //    var _ui = {\r\n   //       rows: [\r\n   //          {\r\n   //             id: ids.component,\r\n   //             view: App.custom.savablelayout.view,\r\n   //             type: \"space\",\r\n   //             rows: [],\r\n   //          },\r\n   //       ],\r\n   //    };\r\n\r\n   //    var _init = (options) => {\r\n   //       var Layout = $$(ids.component);\r\n\r\n   //       var allComponents = [];\r\n\r\n   //       App.eventIds = App.eventIds || {};\r\n\r\n   //       // prevent .attachEvent multiple times\r\n   //       if (App.eventIds[\"onAfterPortletMove\"])\r\n   //          webix.detachEvent(\"onAfterPortletMove\");\r\n\r\n   //       // listen a event of the porlet when layout is changed\r\n   //       App.eventIds[\"onAfterPortletMove\"] = webix.attachEvent(\r\n   //          \"onAfterPortletMove\",\r\n   //          (source, parent, active, target, mode) => {\r\n   //             _logic.onAfterPortletMove();\r\n   //          }\r\n   //       );\r\n\r\n   //       // attach all the .UI views:\r\n   //       this.views().forEach((child) => {\r\n   //          var component = child.component(App);\r\n\r\n   //          var porletUI = {\r\n   //             viewId: child.id, // set id to .viewId, the layout template\r\n   //             view: \"portlet\",\r\n   //             css: \"ab-interface-component\",\r\n   //             // borderless: true,\r\n   //             layoutType: \"head\", // Drag on icon\r\n   //             body: {\r\n   //                rows: [\r\n   //                   {\r\n   //                      view: \"template\",\r\n   //                      height: 30,\r\n   //                      css: \"ab-porlet-header\",\r\n   //                      template: _logic.template(child),\r\n   //                      onClick: {\r\n   //                         \"ab-component-edit\": (e, id, trg) => {\r\n   //                            _logic.viewEdit(e, child.id, trg);\r\n   //                         },\r\n   //                         \"ab-component-remove\": (e, id, trg) => {\r\n   //                            _logic.viewDelete(e, child.id, trg);\r\n   //                         },\r\n   //                      },\r\n   //                   },\r\n   //                   mode == \"preview\"\r\n   //                      ? component.ui\r\n   //                      : {\r\n   //                           // empty element\r\n   //                           view: \"spacer\",\r\n   //                           hidden: true,\r\n   //                        },\r\n   //                ],\r\n   //             },\r\n   //          };\r\n\r\n   //          // get element in template\r\n   //          var elem = Layout.queryView({ viewId: child.id });\r\n\r\n   //          // If webix element is not exists in html, then destroy it.\r\n   //          // NOTE : webix does not know html is missing when we redraw layout at .setState\r\n   //          if (elem && !document.body.contains(elem.$view)) elem.destructor();\r\n\r\n   //          if (elem) {\r\n   //             // replace component to layout\r\n   //             webix.ui(porletUI, elem);\r\n   //          }\r\n   //          // add component to rows\r\n   //          else {\r\n   //             Layout.addView(porletUI);\r\n   //          }\r\n\r\n   //          allComponents.push(component);\r\n   //       });\r\n\r\n   //       // in preview mode, have each child render a preview\r\n   //       // of their content:\r\n   //       if (mode == \"preview\") {\r\n   //          // perform any init setups for the content:\r\n   //          allComponents.forEach((component) => {\r\n   //             component.init();\r\n   //          });\r\n   //       }\r\n   //    };\r\n\r\n   //    var _logic = {\r\n   //       /**\r\n   //        * @method template()\r\n   //        * render the list template for the View\r\n   //        * @param {obj} obj the current View instance\r\n   //        * @param {obj} common  Webix provided object with common UI tools\r\n   //        */\r\n   //       template: function (child) {\r\n   //          return (\r\n   //             \"<div>\" +\r\n   //             `<i class=\"fa fa-${child.icon} webix_icon_btn\"></i> ` +\r\n   //             ` ${child.label}` +\r\n   //             '<div class=\"ab-component-tools\">' +\r\n   //             '<i class=\"fa fa-trash ab-component-remove\"></i>' +\r\n   //             '<i class=\"fa fa-edit ab-component-edit\"></i>' +\r\n   //             \"</div>\" +\r\n   //             \"</div>\"\r\n   //          );\r\n   //       },\r\n\r\n   //       /**\r\n   //        * @method viewDelete()\r\n   //        * Called when the [delete] icon for a child View is clicked.\r\n   //        * @param {obj} e the onClick event object\r\n   //        * @param {integer} id the id of the element to delete\r\n   //        * @param {obj} trg  Webix provided object\r\n   //        */\r\n   //       viewDelete: (e, id, trg) => {\r\n   //          var deletedView = this.views((v) => v.id == id)[0];\r\n\r\n   //          if (!deletedView) return false;\r\n\r\n   //          this.AB.Dialog.Confirm({\r\n   //             title: L(\"Delete component\"),\r\n   //             text: L(\"Do you want to delete <b>{0}</b>?\", [\r\n   //                deletedView.label,\r\n   //             ]),\r\n   //             callback: function (result) {\r\n   //                if (result) {\r\n   //                   var Layout = $$(ids.component);\r\n\r\n   //                   // remove UI of this component in template\r\n   //                   var deletedElem = Layout.queryView({ viewId: id });\r\n   //                   if (deletedElem)\r\n   //                      $$(ids.component).destroyView(deletedElem);\r\n\r\n   //                   // update/refresh template to ABView\r\n   //                   _logic.refreshTemplate();\r\n\r\n   //                   deletedView\r\n   //                      .destroy()\r\n   //                      .then(() => {\r\n   //                         // signal the current view has been deleted.\r\n   //                         deletedView.emit(\"destroyed\", deletedView);\r\n\r\n   //                         // if we don't have any views, then place a \"drop here\" placeholder\r\n   //                         if ($$(ids.component).getChildViews().length == 0) {\r\n   //                            webix.extend($$(ids.component), webix.OverlayBox);\r\n   //                            $$(ids.component).showOverlay(\r\n   //                               \"<div class='drop-zone'><div>\" +\r\n   //                                  App.labels.componentDropZone +\r\n   //                                  \"</div></div>\"\r\n   //                            );\r\n   //                         }\r\n   //                      })\r\n   //                      .catch((err) => {\r\n   //                         this.AB.error(\r\n   //                            \"Error trying to delete selected View:\",\r\n   //                            { error: err, view: deletedView }\r\n   //                         );\r\n   //                      });\r\n   //                }\r\n   //             },\r\n   //          });\r\n   //          e.preventDefault();\r\n   //       },\r\n\r\n   //       /**\r\n   //        * @method viewEdit()\r\n   //        * Called when the [edit] icon for a child View is clicked.\r\n   //        * @param {obj} e the onClick event object\r\n   //        * @param {integer} id the id of the element to edit\r\n   //        * @param {obj} trg  Webix provided object\r\n   //        */\r\n   //       viewEdit: (e, id, trg) => {\r\n   //          var view = this.views((v) => v.id == id)[0];\r\n\r\n   //          if (!view) return false;\r\n\r\n   //          // yeah, if the empty placeholder fires an [edit] event,\r\n   //          // then ignore it.\r\n   //          if (view.id == \"del_me\") return false;\r\n\r\n   //          // NOTE: let webix finish this onClick event, before\r\n   //          // calling .populateInterfaceWorkspace() which will replace\r\n   //          // the interface elements with the edited view.  (apparently\r\n   //          // that causes errors.)\r\n   //          setTimeout(() => {\r\n   //             App.actions.populateInterfaceWorkspace(view);\r\n   //          }, 50);\r\n\r\n   //          e.preventDefault();\r\n\r\n   //          return false;\r\n   //       },\r\n\r\n   //       onAfterPortletMove: () => {\r\n   //          _logic.refreshTemplate();\r\n\r\n   //          // save template layout to ABPageView\r\n   //          this.save();\r\n\r\n   //          // // Reorder\r\n   //          // var viewId = active.config.id;\r\n   //          // var targetId = target.config.id;\r\n\r\n   //          // var toPosition = this._views.findIndex((v) => v.id == targetId);\r\n\r\n   //          // this.viewReorder(viewId, toPosition);\r\n   //       },\r\n\r\n   //       refreshTemplate: () => {\r\n   //          // get portlet template UI to ABView\r\n   //          this.template = $$(ids.component).getState();\r\n   //       },\r\n   //    };\r\n\r\n   //    return {\r\n   //       ui: _ui,\r\n   //       init: _init,\r\n   //    };\r\n   // }\r\n\r\n   // static propertyEditorComponent(App) {\r\n   //    var ABViewPropertyComponent = new ABPropertyComponent({\r\n   //       editObject: this, // ABView\r\n\r\n   //       fieldDefaults: this.common(), // ABViewDefaults,\r\n\r\n   //       elements: (App, field) => {\r\n   //          var ids = {\r\n   //             imageWidth: \"\",\r\n   //             imageHeight: \"\",\r\n   //          };\r\n   //          ids = field.idsUnique(ids, App);\r\n\r\n   //          return [];\r\n   //       },\r\n\r\n   //       // defaultValues: the keys must match a .name of your elements to set it's default value.\r\n   //       defaultValues: ABViewPropertyComponentDefaults,\r\n\r\n   //       // rules: basic form validation rules for webix form entry.\r\n   //       // the keys must match a .name of your .elements for it to apply\r\n   //       rules: {\r\n   //          // 'textDefault':webix.rules.isNotEmpty,\r\n   //          // 'supportMultilingual':webix.rules.isNotEmpty\r\n   //       },\r\n\r\n   //       // include additional behavior on default component operations here:\r\n   //       // The base routines will be processed first, then these.  Any results\r\n   //       // from the base routine, will be passed on to these:\r\n   //       //   @param {obj} ids  the list of ids used to generate the UI.  your\r\n   //       //           provided .elements will have matching .name keys\r\n   //       //           to access them here.\r\n   //       //  @param {obj} values the current set of values provided for this instance\r\n   //       //             of ABField:\r\n   //       //           {\r\n   //       //           id:'',      // if already .saved()\r\n   //       //             label:'',\r\n   //       //             columnName:'',\r\n   //       //           settings:{\r\n   //       //             showIcon:'',\r\n   //       //\r\n   //       //             your element key=>values here\r\n   //       //           }\r\n   //       //           }\r\n   //       //\r\n   //       //     .clear(ids)  : reset the display to an empty state\r\n   //       //     .isValid(ids, isValid): perform validation on the current editor values\r\n   //       //     .populate(ids, ABField) : populate the form with your current settings\r\n   //       //     .show(ids)   : display the form in the editor\r\n   //       //     .values(ids, values) : return the current values from the form\r\n   //       logic: {},\r\n\r\n   //       // perform any additional setup actions here.\r\n   //       // @param {obj} ids  the hash of id values for all the current form elements.\r\n   //       //          it should have your elements + the default Header elements:\r\n   //       //           .label, .columnName, .fieldDescription, .showIcon\r\n   //       init: function (ids) {\r\n   //          // want to hide the description? :\r\n   //          // $$(ids.fieldDescription).hide();\r\n   //       },\r\n   //    });\r\n\r\n   //    return ABViewPropertyComponent.component(App);\r\n   // }\r\n\r\n   // static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\r\n   //    return [\r\n   //       // Component Label\r\n   //       {\r\n   //          view: \"text\",\r\n   //          // id: ids.label,\r\n   //          name: \"label\",\r\n   //          label: App.labels.dataFieldHeaderLabel,\r\n   //          placeholder: App.labels.dataFieldHeaderLabelPlaceholder,\r\n   //          labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n   //          css: \"ab-new-label-name\",\r\n   //          //        on: {\r\n   //          //          onChange: function (newVal, oldVal) {\r\n   //          // console.warn('ABView.onChange()!!!');\r\n   //          //          }\r\n   //          //        }\r\n   //       },\r\n   //    ];\r\n   // }\r\n\r\n   // static propertyEditorPopulate(App, ids, view) {\r\n   //    if (!view) return;\r\n   //    $$(ids.label).setValue(view.label);\r\n   // }\r\n\r\n   // static propertyEditorValues(ids, view) {\r\n   //    if (!view) return;\r\n   //    view.label = $$(ids.label).getValue();\r\n   // }\r\n\r\n   // static propertyEditorSave(ids, view, includeSubViews = false) {\r\n   //    this.propertyEditorValues(ids, view);\r\n\r\n   //    return new Promise((resolve, reject) => {\r\n   //       view\r\n   //          .save(includeSubViews)\r\n   //          .then(function () {\r\n   //             // signal the current view has been updated.\r\n   //             view.emit(\"properties.updated\", view);\r\n\r\n   //             resolve();\r\n   //          })\r\n   //          .catch(function (err) {\r\n   //             this.AB.error(\"unable to save view:\", {\r\n   //                error: err,\r\n   //                view: view,\r\n   //             });\r\n   //             reject(err);\r\n   //          });\r\n   //    });\r\n   // }\r\n\r\n   // /**\r\n   //  * @method propertyDatacollections()\r\n   //  * a convience method to return a list of available Datacollections\r\n   //  * @param {bool} isGlobal\r\n   //  *        true : return a list of ALL available DataCollections\r\n   //  *        false: (default) only return a list of included DCs\r\n   //  * @return {array}\r\n   //  *        [ { id:dc.id, value:dc.label } ]\r\n   //  *        this format is used by the webix select lists to choose your\r\n   //  *        datasources.\r\n   //  */\r\n   // propertyDatacollections(\r\n   //    filter = () => true,\r\n   //    isGlobal = false,\r\n   //    defaultOption = null\r\n   // ) {\r\n   //    if (defaultOption == null) {\r\n   //       defaultOption = {\r\n   //          id: \"\",\r\n   //          value: L(\"Select a DataCollection\"),\r\n   //       };\r\n   //    }\r\n\r\n   //    var list = [];\r\n   //    if (isGlobal) {\r\n   //       list = this.AB.datacollections(filter);\r\n   //    } else {\r\n   //       list = this.application.datacollectionsIncluded(filter);\r\n   //    }\r\n   //    list = list.map((dc) => {\r\n   //       return {\r\n   //          id: dc.id,\r\n   //          value: dc.label,\r\n   //       };\r\n   //    });\r\n   //    list.unshift(defaultOption);\r\n   //    return list;\r\n   // }\r\n\r\n   /*\r\n    * @component()\r\n    * return a UI component based upon this view.\r\n    * @param {obj} App\r\n    * @return {obj} UI component\r\n    */\r\n   component(App) {\r\n      var idBase = \"ABView_\" + this.id;\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n      };\r\n\r\n      // an ABView is a collection of rows:\r\n      var _ui = {\r\n         id: ids.component,\r\n         view: \"layout\",\r\n         type: \"space\",\r\n         rows: [],\r\n      };\r\n\r\n      // if this form is empty, then force a minimal row height\r\n      // so the component isn't completely hidden on the screen.\r\n      // (important in the editor so we don't loose the ability to edit the\r\n      // component)\r\n      if (_ui.rows.length == 0) {\r\n         _ui.height = 30;\r\n      }\r\n\r\n      // make sure each of our child views get .init() called\r\n      var _init = (options) => {};\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: _init,\r\n      };\r\n   }\r\n\r\n   /*\r\n    * @method componentList\r\n    * return the list of components available on this view to display in the editor.\r\n    * @param {bool} isEdited  is this component currently in the Interface Editor\r\n    * @return {array} of ABView objects.\r\n    */\r\n   componentList(isEdited) {\r\n      // if (this.parent) {\r\n      //  return this.parent.componentList(false);\r\n      // } else {\r\n\r\n      // views not allowed to drop onto this View:\r\n      var viewsToIgnore = [\r\n         \"view\",\r\n         \"page\",\r\n         \"formpanel\",\r\n         \"viewcontainer\",\r\n         // not allowed Detail's widgets\r\n         \"detailcheckbox\",\r\n         \"detailcustom\",\r\n         \"detailconnect\",\r\n         \"detailimage\",\r\n         \"detailselectivity\",\r\n         \"detailtext\",\r\n         \"detailtree\",\r\n         // not allowed Form's widgets\r\n         \"button\",\r\n         \"checkbox\",\r\n         \"connect\",\r\n         \"datepicker\",\r\n         \"fieldcustom\",\r\n         \"textbox\",\r\n         \"numberbox\",\r\n         \"selectsingle\",\r\n         \"selectmultiple\",\r\n         \"formtree\",\r\n         \"fieldreadonly\",\r\n         // not allowed Chart's Widgets\r\n         \"pie\",\r\n         \"bar\",\r\n         \"line\",\r\n         \"area\",\r\n         // not allowed Report page\r\n         \"report\",\r\n         \"reportPage\",\r\n         \"reportPanel\",\r\n      ];\r\n\r\n      var allComponents = this.application.viewAll(); // ABViewManager.allViews();\r\n      var allowedComponents = allComponents.filter((c) => {\r\n         return viewsToIgnore.indexOf(c.common().key) == -1;\r\n      });\r\n\r\n      return allowedComponents;\r\n\r\n      // }\r\n   }\r\n\r\n   changePage(pageId) {\r\n      this.emit(\"changePage\", pageId);\r\n   }\r\n\r\n   // removeField(field, cb) {\r\n   //    // if this view has matching field then destroy()\r\n   //    if (this.settings.fieldId == field.id) {\r\n   //       this.destroy()\r\n   //          .then(() => {\r\n   //             // signal the current view has been deleted.\r\n   //             this.emit(\"destroyed\", this);\r\n   //             cb(null, true);\r\n   //          })\r\n   //          .catch((err) => {\r\n   //             this.AB.error(\"Error trying to delete selected View:\", {\r\n   //                error: err,\r\n   //                view: this,\r\n   //             });\r\n   //             cb(err);\r\n   //          });\r\n   //    } else {\r\n   //       // if not check for subViews then call removeField on them\r\n\r\n   //       var shouldSave = false;\r\n\r\n   //       var finish = () => {\r\n   //          if (shouldSave) {\r\n   //             this.save()\r\n   //                .then(() => {\r\n   //                   cb();\r\n   //                })\r\n   //                .catch(cb);\r\n   //          } else {\r\n   //             cb();\r\n   //          }\r\n   //       };\r\n\r\n   //       // for each sub view, view.removeField(field);\r\n   //       var listViews = this.views();\r\n   //       var done = 0;\r\n   //       listViews.forEach((v) => {\r\n   //          v.removeField(field, (err, updateMade) => {\r\n   //             if (err) {\r\n   //                cb(err);\r\n   //             } else {\r\n   //                if (updateMade) {\r\n   //                   shouldSave = true;\r\n   //                }\r\n\r\n   //                done++;\r\n   //                if (done >= listViews.length) {\r\n   //                   finish();\r\n   //                }\r\n   //             }\r\n   //          });\r\n   //       });\r\n\r\n   //       if (listViews.length == 0) {\r\n   //          finish();\r\n   //       }\r\n   //    }\r\n   // }\r\n};\r\n","const ABViewCSVExporterCore = require(\"../../core/views/ABViewCSVExporterCore\");\r\n\r\nconst ABViewCSVExporterPropertyComponentDefaults =\r\n   ABViewCSVExporterCore.defaultValues();\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nlet PropertyFilter = null;\r\n\r\nmodule.exports = class ABViewCSVExporter extends ABViewCSVExporterCore {\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(values, application, parent, defaultValues);\r\n   }\r\n\r\n   //\r\n   //\tEditor Related\r\n   //\r\n\r\n   /**\r\n    * @method editorComponent\r\n    * return the Editor for this UI component.\r\n    * the editor should display either a \"block\" view or \"preview\" of\r\n    * the current layout of the view.\r\n    * @param {string} mode what mode are we in ['block', 'preview']\r\n    * @return {Component}\r\n    */\r\n   editorComponent(App, mode) {\r\n      let idBase = \"ABViewCsvExporterEditorComponent\";\r\n      let component = this.component(App, idBase);\r\n\r\n      return component;\r\n   }\r\n\r\n   //\r\n   // Property Editor\r\n   //\r\n\r\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\r\n      let idBase = \"ABViewCSVExporter\";\r\n\r\n      let commonUI = super.propertyEditorDefaultElements(\r\n         App,\r\n         ids,\r\n         _logic,\r\n         ObjectDefaults\r\n      );\r\n\r\n      _logic.showFilterPopup = ($view) => {\r\n         this.filter_popup.show($view, null, { pos: \"top\" });\r\n      };\r\n\r\n      _logic.onFilterChange = () => {\r\n         let view = _logic.currentEditObject();\r\n         let filterValues = PropertyFilter.getValue() || {};\r\n\r\n         let allComplete = true;\r\n         (filterValues.rules || []).forEach((f) => {\r\n            // if all 3 fields are present, we are good.\r\n            if (f.key && f.rule && f.value) {\r\n               allComplete = allComplete && true;\r\n            } else {\r\n               // else, we found an entry that wasn't complete:\r\n               allComplete = false;\r\n            }\r\n         });\r\n\r\n         // only perform the update if a complete row is specified:\r\n         if (allComplete) {\r\n            // we want to call .save() but give webix a chance to properly update it's\r\n            // select boxes before this call causes them to be removed:\r\n            setTimeout(() => {\r\n               this.propertyEditorSave(ids, view);\r\n            }, 10);\r\n         }\r\n      };\r\n\r\n      // create filter popups\r\n      this.initPopupEditors(App, ids, _logic);\r\n\r\n      // _logic functions\r\n\r\n      _logic.selectSource = (dcId, oldDcId) => {\r\n         let currView = _logic.currentEditObject();\r\n\r\n         // this.propertyUpdateRules(ids, currView);\r\n\r\n         // refresh UI\r\n         currView.emit(\"properties.updated\", currView);\r\n\r\n         // save\r\n         currView.settings.dataviewID = dcId;\r\n         this.propertyEditorValues(ids, currView);\r\n         currView.save();\r\n      };\r\n\r\n      return commonUI.concat([\r\n         {\r\n            view: \"fieldset\",\r\n            label: L(\"Data:\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n            body: {\r\n               rows: [\r\n                  {\r\n                     name: \"datacollection\",\r\n                     view: \"richselect\",\r\n                     label: L(\"Data Source\"),\r\n                     labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n                     skipAutoSave: true,\r\n                     on: {\r\n                        onChange: _logic.selectSource,\r\n                     },\r\n                  },\r\n                  {\r\n                     name: \"hasHeader\",\r\n                     view: \"checkbox\",\r\n                     label: L(\"Header on first line\"),\r\n                     labelWidth: this.AB.UISettings.config().labelWidthXLarge,\r\n                  },\r\n                  {\r\n                     cols: [\r\n                        {\r\n                           view: \"label\",\r\n                           label: L(\"Filter Option:\"),\r\n                           css: \"ab-text-bold\",\r\n                           width: this.AB.UISettings.config().labelWidthLarge,\r\n                        },\r\n                        {\r\n                           view: \"button\",\r\n                           name: \"filterMenuButton\",\r\n                           css: \"webix_primary\",\r\n                           label: L(\"Settings\"),\r\n                           icon: \"fa fa-gear\",\r\n                           type: \"icon\",\r\n                           badge: 0,\r\n                           click: function () {\r\n                              _logic.showFilterPopup(this.$view);\r\n                           },\r\n                        },\r\n                     ],\r\n                  },\r\n               ],\r\n            },\r\n         },\r\n         {\r\n            view: \"fieldset\",\r\n            label: L(\"Customize Display:\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n            body: {\r\n               type: \"clean\",\r\n               padding: 10,\r\n               rows: [\r\n                  {\r\n                     name: \"buttonLabel\",\r\n                     view: \"text\",\r\n                     label: L(\"Label\"),\r\n                     labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n                  },\r\n                  {\r\n                     name: \"filename\",\r\n                     view: \"text\",\r\n                     label: L(\"File name\"),\r\n                     labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n                  },\r\n                  {\r\n                     view: \"counter\",\r\n                     name: \"width\",\r\n                     label: L(\"Width:\"),\r\n                     labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n                  },\r\n               ],\r\n            },\r\n         },\r\n      ]);\r\n   }\r\n\r\n   static propertyEditorPopulate(App, ids, view) {\r\n      super.propertyEditorPopulate(App, ids, view);\r\n\r\n      // Pull data views to options\r\n      let dcOptions = view.AB.datacollections().map((dc) => {\r\n         return {\r\n            id: dc.id,\r\n            value: dc.label,\r\n         };\r\n      });\r\n\r\n      let $DcSelector = $$(ids.datacollection);\r\n      $DcSelector.define(\"options\", dcOptions);\r\n      $DcSelector.define(\"value\", view.settings.dataviewID || null);\r\n      $DcSelector.refresh();\r\n\r\n      $$(ids.hasHeader).setValue(\r\n         view.settings.hasHeader ||\r\n            ABViewCSVExporterPropertyComponentDefaults.hasHeader\r\n      );\r\n      $$(ids.buttonLabel).setValue(\r\n         view.settings.buttonLabel ||\r\n            ABViewCSVExporterPropertyComponentDefaults.buttonLabel\r\n      );\r\n      $$(ids.filename).setValue(\r\n         view.settings.filename ||\r\n            ABViewCSVExporterPropertyComponentDefaults.filename\r\n      );\r\n      $$(ids.width).setValue(\r\n         view.settings.width || ABViewCSVExporterPropertyComponentDefaults.width\r\n      );\r\n\r\n      // Populate data to popups\r\n      // PropertyFilter.applicationLoad(view.application);\r\n      let dc = view.datacollection;\r\n      let obj = dc ? dc.datasource : null;\r\n      if (obj) {\r\n         PropertyFilter.fieldsLoad(obj.fields());\r\n      } else {\r\n         PropertyFilter.fieldsLoad([]);\r\n      }\r\n      PropertyFilter.setValue(view.settings.where);\r\n\r\n      this.propertyBadgeNumber(ids, view);\r\n\r\n      //   // when a change is made in the properties the popups need to reflect the change\r\n      //   this.updateEventIds = this.updateEventIds || {}; // { viewId: boolean, ..., viewIdn: boolean }\r\n      //   if (!this.updateEventIds[view.id]) {\r\n      //      this.updateEventIds[view.id] = true;\r\n\r\n      //      view.addListener(\"properties.updated\", () => {\r\n      //         this.populateBadgeNumber(ids, view);\r\n      //      });\r\n      //   }\r\n   }\r\n\r\n   static initPopupEditors(App, ids, _logic) {\r\n      var idBase = \"ABViewCSVExporterPropertyEditor\";\r\n\r\n      PropertyFilter = this.AB.filterComplexNew(`${idBase}_filter`);\r\n      PropertyFilter.init();\r\n      // when we make a change in the popups we want to make sure we save the new workspace to the properties to do so just fire an onChange event\r\n      PropertyFilter.on(\"change\", (val) => {\r\n         _logic.onFilterChange(val);\r\n      });\r\n\r\n      this.filter_popup = webix.ui({\r\n         view: \"popup\",\r\n         width: 800,\r\n         hidden: true,\r\n         body: PropertyFilter.ui,\r\n      });\r\n   }\r\n\r\n   static propertyEditorValues(ids, view) {\r\n      super.propertyEditorValues(ids, view);\r\n\r\n      view.settings.dataviewID = $$(ids.datacollection).getValue();\r\n      view.settings.hasHeader = $$(ids.hasHeader).getValue();\r\n      view.settings.where = PropertyFilter.getValue();\r\n\r\n      view.settings.buttonLabel =\r\n         $$(ids.buttonLabel).getValue() ||\r\n         ABViewCSVExporterPropertyComponentDefaults.buttonLabel;\r\n\r\n      view.settings.filename =\r\n         $$(ids.filename).getValue() ||\r\n         ABViewCSVExporterPropertyComponentDefaults.filename;\r\n\r\n      view.settings.width =\r\n         $$(ids.width).getValue() ||\r\n         ABViewCSVExporterPropertyComponentDefaults.width;\r\n\r\n      this.propertyBadgeNumber(ids, view);\r\n   }\r\n\r\n   static propertyBadgeNumber(ids, view) {\r\n      if (view.settings.where && view.settings.where.rules) {\r\n         $$(ids.filterMenuButton).define(\r\n            \"badge\",\r\n            view.settings.where.rules.length\r\n         );\r\n         $$(ids.filterMenuButton).refresh();\r\n      } else {\r\n         $$(ids.filterMenuButton).define(\"badge\", null);\r\n         $$(ids.filterMenuButton).refresh();\r\n      }\r\n   }\r\n\r\n   component(App, idBase) {\r\n      idBase = idBase || \"ABCSVExporter_\" + this.id;\r\n      let ids = {\r\n         button: App.unique(`${idBase}_button`),\r\n         buttonFilter: App.unique(`${idBase}_button_filter`),\r\n         popupFilter: App.unique(`${idBase}_popup_filter`),\r\n      };\r\n\r\n      let ClientFilter = this.AB.filterComplexNew(`${idBase}_filter`);\r\n\r\n      let _ui = {\r\n         view: \"layout\",\r\n         type: \"clean\",\r\n         borderless: true,\r\n         cols: [\r\n            {\r\n               id: ids.buttonFilter,\r\n               view: \"button\",\r\n               css: \"webix_transparent\",\r\n               type: \"icon\",\r\n               icon: \"fa fa-filter\",\r\n               borderless: true,\r\n               width: 50,\r\n               label: \"\",\r\n               click: () => {\r\n                  _logic.showFilterPopup();\r\n               },\r\n            },\r\n            {\r\n               id: ids.button,\r\n               view: \"button\",\r\n               css: \"webix_primary\",\r\n               type: \"icon\",\r\n               icon: \"fa fa-download\",\r\n               borderless: true,\r\n               width:\r\n                  this.settings.width ||\r\n                  ABViewCSVExporterPropertyComponentDefaults.width,\r\n               label:\r\n                  this.settings.buttonLabel ||\r\n                  ABViewCSVExporterPropertyComponentDefaults.buttonLabel,\r\n               click: () => {\r\n                  _logic.downloadCsvFile();\r\n               },\r\n            },\r\n            { fillspace: true },\r\n         ],\r\n      };\r\n\r\n      // make sure each of our child views get .init() called\r\n      let _init = (options) => {\r\n         let dc = this.datacollection;\r\n         if (dc) {\r\n            let obj = dc.datasource;\r\n\r\n            // ClientFilter.applicationLoad(obj ? obj.application : null);\r\n            ClientFilter.fieldsLoad(obj ? obj.fields() : [], obj);\r\n         }\r\n\r\n         ClientFilter.init();\r\n         ClientFilter.on(\"change\", (val) => {\r\n            _logic.onFilterChange(val);\r\n         });\r\n\r\n         // webix.ui({\r\n         //    view: \"popup\",\r\n         //    id: ids.popupFilter,\r\n         //    width: 800,\r\n         //    hidden: true,\r\n         //    body: ClientFilter.ui,\r\n         // });\r\n      };\r\n\r\n      let _logic = (this._logic = {\r\n         downloadCsvFile: () => {\r\n            let url = `/appbuilder/csv-export/${this.id}`;\r\n            let where = ClientFilter.getValue();\r\n\r\n            if (where && (where.rules || []).length) {\r\n               let qsWhere = JSON.stringify(where);\r\n               qsWhere = encodeURIComponent(qsWhere);\r\n               url = `${url}?where=${qsWhere}`;\r\n            }\r\n\r\n            window.open(url);\r\n         },\r\n         showFilterPopup: () => {\r\n            let $buttonFilter = $$(ids.buttonFilter);\r\n            ClientFilter.popUp($buttonFilter ? $buttonFilter.$view : null);\r\n         },\r\n         onFilterChange: () => {\r\n            let $buttonFilter = $$(ids.buttonFilter);\r\n            if (!$buttonFilter) return;\r\n\r\n            let where = ClientFilter.getValue();\r\n            $buttonFilter.define(\"badge\", (where.rules || []).length || null);\r\n            $buttonFilter.refresh();\r\n         },\r\n      });\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: _init,\r\n      };\r\n   }\r\n};\r\n","const ABViewCSVImporterCore = require(\"../../core/views/ABViewCSVImporterCore\");\r\n// import ClassUI from \"../../../ui/ClassUI\";\r\nconst ClassUI = require(\"../../../ui/ClassUI\").default;\r\n\r\nconst CSVImporter = require(\"../CSVImporter\");\r\nconst ABRecordRule = require(\"../../rules/ABViewRuleListFormRecordRules\");\r\n\r\nconst ABViewCSVImporterPropertyComponentDefaults =\r\n   ABViewCSVImporterCore.defaultValues();\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n// multilingual Label fn()\r\n\r\nlet PopupRecordRule = null;\r\n\r\nclass ABViewCSVImporterComponent extends ClassUI {\r\n   constructor(viewCSVImporter, idBase) {\r\n      idBase = idBase || `ABCSVImporter_${viewCSVImporter.id}`;\r\n\r\n      super(idBase, {\r\n         button: \"\",\r\n         popup: \"\",\r\n\r\n         form: \"\",\r\n         uploader: \"\",\r\n         uploadFileList: \"\",\r\n         separatedBy: \"\",\r\n         headerOnFirstLine: \"\",\r\n         columnList: \"\",\r\n\r\n         search: \"\",\r\n         datatable: \"\",\r\n\r\n         statusMessage: \"\",\r\n         progressBar: \"\",\r\n\r\n         importButton: \"\",\r\n         rules: \"\",\r\n      });\r\n\r\n      this.viewCSVImporter = viewCSVImporter;\r\n      // {ABViewCSVImporter}\r\n      // The ABView that has created this CSVImporter.\r\n\r\n      this.settings = this.viewCSVImporter.settings;\r\n      // {json}\r\n      // a local copy of the settings for our ABView\r\n\r\n      this.csvImporter = new CSVImporter(L);\r\n      // {CSVImporter}\r\n      // An instance of the object that imports the CSV data.\r\n\r\n      this._dataRows = null;\r\n\r\n      this.CurrentObjectID = null;\r\n      // {string}\r\n      // the ABObject.id of the object we are working with.\r\n\r\n      this._csvFileInfo = null;\r\n\r\n      this.validationError = false;\r\n   }\r\n\r\n   ui() {\r\n      return {\r\n         cols: [\r\n            {\r\n               view: \"button\",\r\n               css: \"webix_primary\",\r\n               type: \"icon\",\r\n               icon: \"fa fa-upload\",\r\n               label: L(\r\n                  this.settings.buttonLabel ||\r\n                     ABViewCSVImporterPropertyComponentDefaults.buttonLabel\r\n               ),\r\n               width:\r\n                  this.settings.width ||\r\n                  ABViewCSVImporterPropertyComponentDefaults.width,\r\n               click: () => {\r\n                  this.showPopup();\r\n               },\r\n            },\r\n            {\r\n               fillspace: true,\r\n            },\r\n         ],\r\n      };\r\n   }\r\n\r\n   uiConfig() {\r\n      var ids = this.ids;\r\n\r\n      return {\r\n         view: \"form\",\r\n         type: \"clean\",\r\n         id: ids.form,\r\n         borderless: true,\r\n         minWidth: 400,\r\n         gravity: 1,\r\n         elements: [\r\n            {\r\n               rows: [\r\n                  {\r\n                     id: ids.uploader,\r\n                     view: \"uploader\",\r\n                     name: \"csvFile\",\r\n                     css: \"webix_primary\",\r\n                     value: L(\"Choose a CSV file\"),\r\n                     accept: \"text/csv\",\r\n                     multiple: false,\r\n                     autosend: false,\r\n                     link: ids.uploadFileList,\r\n                     on: {\r\n                        onBeforeFileAdd: (fileInfo) => {\r\n                           this._csvFileInfo = fileInfo;\r\n                           return this.loadCsvFile();\r\n                        },\r\n                     },\r\n                  },\r\n                  {\r\n                     id: ids.uploadFileList,\r\n                     name: \"uploadedFile\",\r\n                     view: \"list\",\r\n                     type: \"uploader\",\r\n                     autoheight: true,\r\n                     borderless: true,\r\n                     onClick: {\r\n                        webix_remove_upload: (e, id /*, trg */) => {\r\n                           this.removeCsvFile(id);\r\n                        },\r\n                     },\r\n                  },\r\n                  {\r\n                     padding: 10,\r\n                     rows: [\r\n                        {\r\n                           id: ids.separatedBy,\r\n                           view: \"richselect\",\r\n                           name: \"separatedBy\",\r\n                           label: L(\"Separated by\"),\r\n                           labelWidth: 140,\r\n                           options: this.csvImporter.getSeparateItems(),\r\n                           value: \",\",\r\n                           on: {\r\n                              onChange: () => {\r\n                                 this.loadCsvFile();\r\n                              },\r\n                           },\r\n                        },\r\n                        {\r\n                           id: ids.headerOnFirstLine,\r\n                           view: \"checkbox\",\r\n                           name: \"headerOnFirstLine\",\r\n                           label: L(\"Header on first line\"),\r\n                           labelWidth: 140,\r\n                           disabled: true,\r\n                           value: true,\r\n                           on: {\r\n                              onChange: (/*newVal, oldVal*/) => {\r\n                                 this.populateColumnList();\r\n                              },\r\n                           },\r\n                        },\r\n                     ],\r\n                  },\r\n                  {\r\n                     type: \"space\",\r\n                     rows: [\r\n                        {\r\n                           view: \"scrollview\",\r\n                           minHeight: 300,\r\n                           body: {\r\n                              padding: 10,\r\n                              id: ids.columnList,\r\n                              rows: [],\r\n                           },\r\n                        },\r\n                     ],\r\n                  },\r\n               ],\r\n            },\r\n         ],\r\n      };\r\n   }\r\n\r\n   uiRecordsView() {\r\n      var ids = this.ids;\r\n      return {\r\n         gravity: 2,\r\n         rows: [\r\n            {\r\n               view: \"toolbar\",\r\n               css: \"bg_gray\",\r\n               cols: [\r\n                  { width: 5 },\r\n                  {\r\n                     id: ids.search,\r\n                     view: \"search\",\r\n                     value: \"\",\r\n                     label: \"\",\r\n                     placeholder: L(\"Search records...\"),\r\n                     keyPressTimeout: 200,\r\n                     on: {\r\n                        onTimedKeyPress: () => {\r\n                           let text = $$(ids.search).getValue();\r\n                           this.search(text);\r\n                        },\r\n                     },\r\n                  },\r\n                  { width: 2 },\r\n               ],\r\n            },\r\n            {\r\n               id: ids.datatable,\r\n               view: \"datatable\",\r\n               resizeColumn: true,\r\n               editable: true,\r\n               editaction: \"dblclick\",\r\n               css: \"ab-csv-importer\",\r\n               borderless: false,\r\n               tooltip: (obj) => {\r\n                  var tooltip = obj._errorMsg\r\n                     ? obj._errorMsg\r\n                     : \"No validation errors\";\r\n                  return tooltip;\r\n               },\r\n               minWidth: 650,\r\n               columns: [],\r\n               on: {\r\n                  onValidationError: function (id, obj, details) {\r\n                     // console.log(`item ${id} invalid`);\r\n                     var errors = \"\";\r\n                     Object.keys(details).forEach((key) => {\r\n                        this.$view.complexValidations[key].forEach((err) => {\r\n                           errors += err.invalidMessage + \"</br>\";\r\n                        });\r\n                     });\r\n                     var $dt = $$(ids.datatable);\r\n                     $dt.blockEvent();\r\n                     $dt.updateItem(id, {\r\n                        _status: \"invalid\",\r\n                        _errorMsg: errors,\r\n                     });\r\n                     $dt.unblockEvent();\r\n                     this.validationError = true;\r\n                  },\r\n                  onValidationSuccess: function (id, obj, details) {\r\n                     // console.log(`item ${id} valid`);\r\n                     var $dt = $$(ids.datatable);\r\n                     $dt.blockEvent();\r\n                     $dt.updateItem(id, {\r\n                        _status: \"valid\",\r\n                        _errorMsg: \"\",\r\n                     });\r\n                     $dt.unblockEvent();\r\n                     this.validationError = false;\r\n                  },\r\n                  onCheck: () => {\r\n                     var selected = $$(ids.datatable).find({ _included: true });\r\n                     $$(ids.importButton).setValue(this.labelImport(selected));\r\n                     if (this.overLimitAlert(selected)) {\r\n                        $$(ids.importButton).disable();\r\n                     } else {\r\n                        $$(ids.importButton).enable();\r\n                     }\r\n                  },\r\n               },\r\n            },\r\n            {\r\n               id: ids.progressBar,\r\n               height: 6,\r\n            },\r\n            {\r\n               view: \"button\",\r\n               name: \"import\",\r\n               id: ids.importButton,\r\n               value: L(\"Import\"),\r\n               css: \"webix_primary\",\r\n               disabled: true,\r\n               click: () => {\r\n                  this.import();\r\n               },\r\n            },\r\n         ],\r\n      };\r\n   }\r\n\r\n   uiPopup() {\r\n      var ids = this.ids;\r\n\r\n      return {\r\n         id: ids.popup,\r\n         view: \"window\",\r\n         hidden: true,\r\n         position: \"center\",\r\n         modal: true,\r\n         resize: true,\r\n         head: {\r\n            view: \"toolbar\",\r\n            css: \"webix_dark\",\r\n            cols: [\r\n               {},\r\n               {\r\n                  view: \"label\",\r\n                  label: L(\"CSV Importer\"),\r\n                  autowidth: true,\r\n               },\r\n               {},\r\n               {\r\n                  view: \"button\",\r\n                  width: 35,\r\n                  css: \"webix_transparent\",\r\n                  type: \"icon\",\r\n                  icon: \"nomargin fa fa-times\",\r\n                  click: () => {\r\n                     this.hide();\r\n                  },\r\n               },\r\n            ],\r\n         },\r\n         body: {\r\n            type: \"form\",\r\n            rows: [\r\n               {\r\n                  type: \"line\",\r\n                  cols: [\r\n                     this.uiConfig(),\r\n                     { width: 20 },\r\n                     this.uiRecordsView(),\r\n                     { width: 1 },\r\n                  ],\r\n               },\r\n               {\r\n                  id: ids.statusMessage,\r\n                  view: \"label\",\r\n                  align: \"right\",\r\n                  hidden: true,\r\n               },\r\n               {\r\n                  hidden: true,\r\n                  margin: 5,\r\n                  cols: [\r\n                     { fillspace: true },\r\n                     {\r\n                        view: \"button\",\r\n                        name: \"cancel\",\r\n                        value: L(\"Cancel\"),\r\n                        css: \"ab-cancel-button\",\r\n                        autowidth: true,\r\n                        click: () => {\r\n                           this.hide();\r\n                        },\r\n                     },\r\n                     /*,\r\n                        {\r\n                           view: \"button\",\r\n                           name: \"import\",\r\n                           id: ids.importButton,\r\n                           value: labels.component.import,\r\n                           css: \"webix_primary\",\r\n                           disabled: true,\r\n                           autowidth: true,\r\n                           type: \"form\",\r\n                           click: () => {\r\n                              _logic.import();\r\n                           }\r\n                        }*/\r\n                  ],\r\n               },\r\n            ],\r\n         },\r\n      };\r\n   }\r\n\r\n   /**\r\n    * @method CurrentObject()\r\n    * A helper to return the current ABObject we are working with.\r\n    * @return {ABObject}\r\n    */\r\n   get CurrentObject() {\r\n      return this.AB.objectByID(this.CurrentObjectID);\r\n   }\r\n\r\n   objectLoad(object) {\r\n      this.CurrentObjectID = object?.id;\r\n   }\r\n\r\n   init(AB) {\r\n      this.AB = AB;\r\n      var ids = this.ids;\r\n\r\n      // Populate values to rules\r\n\r\n      let selectedDv = this.viewCSVImporter.datacollection;\r\n\r\n      if (selectedDv) {\r\n         this.CurrentObjectID = selectedDv.datasource.id;\r\n      }\r\n\r\n      webix.ui(this.uiPopup());\r\n\r\n      if ($$(ids.form)) webix.extend($$(ids.form), webix.ProgressBar);\r\n      if ($$(ids.progressBar))\r\n         webix.extend($$(ids.progressBar), webix.ProgressBar);\r\n   }\r\n\r\n   showPopup() {\r\n      $$(this.ids.popup)?.show();\r\n\r\n      this.formClear();\r\n\r\n      // open file dialog to upload\r\n      $$(this.ids.uploader).fileDialog();\r\n   }\r\n\r\n   hide() {\r\n      $$(this.ids.popup)?.hide();\r\n   }\r\n\r\n   formClear() {\r\n      var ids = this.ids;\r\n      this._dataRows = null;\r\n      this._csvFileInfo = null;\r\n\r\n      $$(ids.form).clearValidation();\r\n      $$(ids.form).clear();\r\n      $$(ids.separatedBy).setValue(\",\");\r\n\r\n      webix.ui([], $$(ids.columnList));\r\n\r\n      $$(ids.headerOnFirstLine).disable();\r\n      $$(ids.importButton).disable();\r\n\r\n      $$(ids.search).setValue(\"\");\r\n      $$(ids.uploadFileList).clearAll();\r\n      $$(ids.datatable).clearAll();\r\n\r\n      $$(ids.statusMessage).setValue(\"\");\r\n      $$(ids.statusMessage).hide();\r\n   }\r\n\r\n   search(searchText) {\r\n      let $datatable = $$(this.ids.datatable);\r\n      if (!$datatable) return;\r\n\r\n      searchText = (searchText || \"\").toLowerCase();\r\n\r\n      let matchFields = this.getMatchFields();\r\n\r\n      $datatable.filter((row) => {\r\n         let exists = false;\r\n\r\n         (matchFields || []).forEach((f) => {\r\n            if (exists) return;\r\n\r\n            exists =\r\n               (row[`${f.columnIndex}`] || \"\")\r\n                  .toString()\r\n                  .toLowerCase()\r\n                  .indexOf(searchText) > -1;\r\n         });\r\n\r\n         return exists;\r\n      });\r\n   }\r\n\r\n   statusTemplate(item) {\r\n      let template = \"\";\r\n\r\n      if (!item) return template;\r\n\r\n      switch (item._status) {\r\n         case \"in-progress\":\r\n            template = \"<span class='fa fa-refresh'></span>\";\r\n            break;\r\n         case \"invalid\":\r\n            template = \"<span class='fa fa-exclamation-triangle'></span>\";\r\n            break;\r\n         case \"valid\":\r\n            template = \"<span class='fa fa-check'></span>\";\r\n            break;\r\n         case \"done\":\r\n            template = \"<span class='fa fa-check'></span>\";\r\n            break;\r\n         case \"fail\":\r\n            template = \"<span class='fa fa-remove'></span>\";\r\n            break;\r\n      }\r\n\r\n      return template;\r\n   }\r\n\r\n   async loadCsvFile() {\r\n      if (!this._csvFileInfo) return false;\r\n\r\n      if (!this.csvImporter.validateFile(this._csvFileInfo)) {\r\n         webix.alert({\r\n            title: L(\"This file extension is not allowed\"),\r\n            text: L(\"Please only upload CSV files\"),\r\n            ok: L(\"Ok\"),\r\n         });\r\n\r\n         return false;\r\n      }\r\n\r\n      var ids = this.ids;\r\n\r\n      // show loading cursor\r\n      $$(ids.form)?.showProgress?.({ type: \"icon\" });\r\n\r\n      // read CSV file\r\n      let separatedBy = $$(ids.separatedBy).getValue();\r\n      this._dataRows = await this.csvImporter.getDataRows(\r\n         this._csvFileInfo,\r\n         separatedBy\r\n      );\r\n\r\n      $$(ids.headerOnFirstLine).enable();\r\n      $$(ids.importButton).enable();\r\n      let length = this._dataRows.length;\r\n      if ($$(ids.headerOnFirstLine).getValue()) {\r\n         length = this._dataRows.length - 1;\r\n      }\r\n      $$(ids.importButton).setValue(this.labelImport(length));\r\n\r\n      this.populateColumnList();\r\n\r\n      $$(ids.form)?.hideProgress?.();\r\n\r\n      return true;\r\n   }\r\n\r\n   removeCsvFile(fileId) {\r\n      $$(this.ids.uploadFileList).remove(fileId);\r\n      this.formClear();\r\n      return true;\r\n   }\r\n\r\n   populateColumnList() {\r\n      var ids = this.ids;\r\n      var self = this;\r\n\r\n      // clear list\r\n      webix.ui([], $$(ids.columnList));\r\n\r\n      if (this._dataRows == null) return;\r\n\r\n      // check first line of CSV\r\n      let firstLine = this._dataRows[0];\r\n      if (firstLine == null) return;\r\n\r\n      let csvColumnList = [];\r\n      let fieldList = [];\r\n      if (this.CurrentObject) {\r\n         fieldList =\r\n            this.CurrentObject.fields((f) => {\r\n               // available fields\r\n               if (\r\n                  this.settings.availableFieldIds?.length &&\r\n                  this.settings.availableFieldIds.indexOf(f.id) < 0\r\n               ) {\r\n                  return false;\r\n               }\r\n\r\n               // filter editable fields\r\n               let formComp = f.formComponent();\r\n               if (!formComp) return true;\r\n\r\n               let formConfig = formComp.common();\r\n               if (!formConfig) return true;\r\n\r\n               return formConfig.key != \"fieldreadonly\";\r\n            }) || [];\r\n      }\r\n      // check first line be header columns\r\n      if ($$(ids.headerOnFirstLine).getValue()) {\r\n         csvColumnList = firstLine.map((colName, index) => {\r\n            return {\r\n               id: index + 1, // webix .options list disallow value 0\r\n               value: colName,\r\n               key: this.csvImporter.getGuessDataType(this._dataRows, index),\r\n            };\r\n         });\r\n      } else {\r\n         for (let i = 0; i < firstLine.length; i++) {\r\n            csvColumnList.push({\r\n               id: i + 1, // webix .options list disallow value 0\r\n               value: L(\"Column {0}\", [i + 1]),\r\n               key: this.csvImporter.getGuessDataType(this._dataRows, i),\r\n            });\r\n         }\r\n      }\r\n\r\n      // Add unselect item\r\n      csvColumnList.unshift({\r\n         id: \"none\",\r\n         value: L(\"None\"),\r\n      });\r\n\r\n      // populate columns to UI\r\n      let uiColumns = [];\r\n      let selectedCsvCols = [];\r\n      fieldList.forEach((f) => {\r\n         let selectVal = \"none\";\r\n\r\n         // match up by data type\r\n         let matchCol = csvColumnList.filter(\r\n            (c) => c.key == f.key && selectedCsvCols.indexOf(c.id) < 0\r\n         )[0];\r\n         if (matchCol) {\r\n            selectVal = matchCol.id;\r\n\r\n            // cache\r\n            selectedCsvCols.push(selectVal);\r\n         }\r\n\r\n         let columnOptUI = {\r\n            view: \"richselect\",\r\n            gravity: 2,\r\n            options: csvColumnList,\r\n            fieldId: f.id,\r\n            abName: \"columnIndex\",\r\n            value: selectVal,\r\n            on: {\r\n               onChange: function () {\r\n                  self.toggleLinkFields(this);\r\n                  self.loadDataToGrid();\r\n               },\r\n            },\r\n         };\r\n\r\n         // Add date format options\r\n         if (f.key == \"date\") {\r\n            let dateSeparatorOptions = [\"/\", \"-\", \".\", \",\", \" \"];\r\n            let dayFormatOptions = [\r\n               { value: L(\"1 to 31\"), id: \"D\" },\r\n               { value: L(\"01 to 31\"), id: \"DD\" },\r\n            ];\r\n            let monthFormatOptions = [\r\n               { value: L(\"1 to 12\"), id: \"M\" },\r\n               { value: L(\"01 to 12\"), id: \"MM\" },\r\n            ];\r\n            let yearFormatOptions = [\r\n               { value: L(\"00 to 99\"), id: \"YY\" },\r\n               { value: L(\"2000 to 2099\"), id: \"YYYY\" },\r\n            ];\r\n            let dateOrderOptions = [\r\n               {\r\n                  value: L(\"D-M-Y\"),\r\n                  id: 1,\r\n               },\r\n               {\r\n                  value: L(\"M-D-Y\"),\r\n                  id: 2,\r\n               },\r\n               {\r\n                  value: L(\"Y-M-D\"),\r\n                  id: 3,\r\n               },\r\n               {\r\n                  value: L(\"Y-D-M\"),\r\n                  id: 4,\r\n               },\r\n            ];\r\n\r\n            columnOptUI = {\r\n               gravity: 2,\r\n               rows: [\r\n                  columnOptUI,\r\n                  {\r\n                     view: \"richselect\",\r\n                     label: L(\"Separator\"),\r\n                     labelWidth: 100,\r\n                     on: {\r\n                        onChange: () => {\r\n                           this.loadDataToGrid();\r\n                        },\r\n                     },\r\n                     name: \"separator\",\r\n                     abName: \"columnDateFormat\",\r\n                     options: dateSeparatorOptions,\r\n                     value: \"/\",\r\n                  },\r\n                  {\r\n                     view: \"richselect\",\r\n                     label: L(\"Day\"),\r\n                     labelWidth: 100,\r\n                     on: {\r\n                        onChange: () => {\r\n                           this.loadDataToGrid();\r\n                        },\r\n                     },\r\n                     name: \"day\",\r\n                     abName: \"columnDateFormat\",\r\n                     options: dayFormatOptions,\r\n                     value: \"D\",\r\n                  },\r\n                  {\r\n                     view: \"richselect\",\r\n                     label: L(\"Month\"),\r\n                     labelWidth: 100,\r\n                     on: {\r\n                        onChange: () => {\r\n                           this.loadDataToGrid();\r\n                        },\r\n                     },\r\n                     name: \"month\",\r\n                     abName: \"columnDateFormat\",\r\n                     options: monthFormatOptions,\r\n                     value: \"M\",\r\n                  },\r\n                  {\r\n                     view: \"richselect\",\r\n                     label: L(\"Year\"),\r\n                     labelWidth: 100,\r\n                     on: {\r\n                        onChange: () => {\r\n                           this.loadDataToGrid();\r\n                        },\r\n                     },\r\n                     name: \"year\",\r\n                     abName: \"columnDateFormat\",\r\n                     options: yearFormatOptions,\r\n                     value: \"YY\",\r\n                  },\r\n                  {\r\n                     view: \"richselect\",\r\n                     label: L(\"Order\"),\r\n                     labelWidth: 100,\r\n                     on: {\r\n                        onChange: () => {\r\n                           this.loadDataToGrid();\r\n                        },\r\n                     },\r\n                     name: \"order\",\r\n                     abName: \"columnDateFormat\",\r\n                     options: dateOrderOptions,\r\n                     value: 1,\r\n                  },\r\n               ],\r\n            };\r\n         }\r\n\r\n         // Add connected field options\r\n         if (f.isConnection) {\r\n            let linkFieldOptions = [];\r\n\r\n            if (f.datasourceLink) {\r\n               linkFieldOptions = f.datasourceLink\r\n                  .fields((fld) => !fld.isConnection)\r\n                  .map((fld) => {\r\n                     return {\r\n                        id: fld.id,\r\n                        value: fld.label,\r\n                     };\r\n                  });\r\n            }\r\n\r\n            columnOptUI = {\r\n               gravity: 2,\r\n               rows: [\r\n                  columnOptUI,\r\n                  {\r\n                     view: \"richselect\",\r\n                     label: \"=\",\r\n                     labelWidth: 20,\r\n                     abName: \"columnLinkData\",\r\n                     hidden: true,\r\n                     options: linkFieldOptions,\r\n                     value: linkFieldOptions[0] ? linkFieldOptions[0].id : null,\r\n                  },\r\n               ],\r\n            };\r\n         }\r\n\r\n         uiColumns.push({\r\n            view: \"layout\",\r\n            borderless: true,\r\n            cols: [\r\n               {\r\n                  view: \"template\",\r\n                  gravity: 1,\r\n                  borderless: true,\r\n                  css: { \"padding-top\": 10 },\r\n                  template: `<span class=\"fa fa-${f.icon}\"></span> ${f.label}`,\r\n               },\r\n               columnOptUI,\r\n            ],\r\n         });\r\n      });\r\n      webix.ui(uiColumns, $$(ids.columnList));\r\n\r\n      this.loadDataToGrid();\r\n   }\r\n\r\n   toggleLinkFields($columnOption) {\r\n      if (!$columnOption) return;\r\n\r\n      let $optionPanel = $columnOption.getParentView();\r\n      let $linkFieldOption = $optionPanel.queryView(\r\n         { abName: \"columnLinkData\" },\r\n         \"all\"\r\n      )[0];\r\n      if (!$linkFieldOption) return;\r\n\r\n      if ($columnOption.getValue() == \"none\") {\r\n         $linkFieldOption.hide();\r\n      } else {\r\n         $linkFieldOption.show();\r\n      }\r\n   }\r\n\r\n   overLimitAlert(data) {\r\n      var limit = 1000;\r\n      if (data.length > limit) {\r\n         // we only allow 1000 record imports\r\n         webix.alert({\r\n            title: L(\"Too many records\"),\r\n            ok: L(\"Ok\"),\r\n            text: L(\r\n               \"Due to browser limitations we only allow imports of {0} records. Please upload a new CSV or deselect records to import.\",\r\n               [limit]\r\n            ),\r\n         });\r\n         return true;\r\n      }\r\n      return false;\r\n   }\r\n\r\n   loadDataToGrid() {\r\n      var ids = this.ids;\r\n      let $datatable = $$(ids.datatable);\r\n      if (!$datatable) return;\r\n\r\n      $datatable.clearAll();\r\n\r\n      // show loading cursor\r\n      $datatable?.showProgress?.({ type: \"icon\" });\r\n\r\n      /** Prepare Columns */\r\n      let matchFields = this.getMatchFields();\r\n\r\n      let columns = [];\r\n\r\n      // add \"status\" column\r\n      columns.push({\r\n         id: \"_status\",\r\n         header: \"\",\r\n         template: this.statusTemplate,\r\n         width: 30,\r\n      });\r\n\r\n      // add \"checkbox\" column\r\n      columns.push({\r\n         id: \"_included\",\r\n         header: { content: \"masterCheckbox\" },\r\n         template: \"{common.checkbox()}\",\r\n         width: 30,\r\n      });\r\n\r\n      var fieldValidations = [];\r\n      var rulePops = [];\r\n      // populate columns\r\n      (matchFields || []).forEach((f) => {\r\n         var validationRules = f.field.settings.validationRules;\r\n         // parse the rules because they were stored as a string\r\n         // check if rules are still a string...if so lets parse them\r\n         if (validationRules && typeof validationRules === \"string\") {\r\n            validationRules = JSON.parse(validationRules);\r\n         }\r\n\r\n         if (validationRules && validationRules.length) {\r\n            var validationUI = [];\r\n            // there could be more than one so lets loop through and build the UI\r\n            validationRules.forEach((rule) => {\r\n               var Filter = this.AB.filterComplexNew(\r\n                  `${f.field.id}_${webix.uid()}`\r\n               );\r\n               // add the new ui to an array so we can add them all at the same time\r\n               validationUI.push(Filter.ui);\r\n               // store the filter's info so we can assign values and settings after the ui is rendered\r\n               fieldValidations.push({\r\n                  filter: Filter,\r\n                  view: Filter.ids.querybuilder,\r\n                  columnName: f.field.id,\r\n                  validationRules: rule.rules,\r\n                  invalidMessage: rule.invalidMessage,\r\n                  columnIndex: f.columnIndex,\r\n               });\r\n            });\r\n            // create a unique view id for popup\r\n            var popUpId = ids.rules + \"_\" + f.field.id + \"_\" + webix.uid();\r\n            // store the popup ids so we can remove the later\r\n            rulePops.push(popUpId);\r\n            // add the popup to the UI but don't show it\r\n            webix.ui({\r\n               view: \"popup\",\r\n               css: \"ab-rules-popup\",\r\n               id: popUpId,\r\n               body: {\r\n                  rows: validationUI,\r\n               },\r\n            });\r\n         }\r\n\r\n         var editor = \"text\";\r\n         switch (f.field.key) {\r\n            case \"number\":\r\n               editor = \"number\";\r\n               break;\r\n            default:\r\n            // code block\r\n         }\r\n         columns.push({\r\n            id: f.columnIndex,\r\n            header: f.field.label,\r\n            editor: editor,\r\n            template: function (obj, common, value /*, col, ind */) {\r\n               return value.replace(/[<]/g, \"&lt;\");\r\n            },\r\n            minWidth: 150,\r\n            fillspace: true,\r\n         });\r\n      });\r\n\r\n      if (fieldValidations.length) {\r\n         // we need to store the rules for use later so lets build a container array\r\n         var complexValidations = [];\r\n         fieldValidations.forEach((f) => {\r\n            // init each ui to have the properties (app and fields) of the object we are editing\r\n            // f.filter.applicationLoad(App);\r\n            f.filter.fieldsLoad(this.CurrentObject.fields());\r\n            // now we can set the value because the fields are properly initialized\r\n            f.filter.setValue(f.validationRules);\r\n            // if there are validation rules present we need to store them in a lookup hash\r\n            // so multiple rules can be stored on a single field\r\n            if (!Array.isArray(complexValidations[f.columnName]))\r\n               complexValidations[f.columnName] = [];\r\n\r\n            // now we can push the rules into the hash\r\n            complexValidations[f.columnName].push({\r\n               filters: $$(f.view).getFilterHelper(),\r\n               values: $$(ids.datatable).getSelectedItem(),\r\n               invalidMessage: f.invalidMessage,\r\n               columnIndex: f.columnIndex,\r\n            });\r\n         });\r\n         var rules = {};\r\n         var dataTable = $$(ids.datatable);\r\n         // store the rules in a data param to be used later\r\n         dataTable.$view.complexValidations = complexValidations;\r\n         // use the lookup to build the validation rules\r\n         Object.keys(complexValidations).forEach(function (key) {\r\n            rules[key] = function (value, data) {\r\n               // default valid is true\r\n               var isValid = true;\r\n               dataTable.$view.complexValidations[key].forEach((filter) => {\r\n                  let rowValue = {};\r\n                  // use helper funtion to check if valid\r\n                  // map the column names to the index numbers of data\r\n                  // reformat data to display\r\n                  (matchFields || []).forEach((f) => {\r\n                     let record = data[f.columnIndex];\r\n                     if (\r\n                        f.field.key == \"date\" &&\r\n                        record.includes(\"Invalid date\")\r\n                     ) {\r\n                        isValid = false;\r\n                     }\r\n                     rowValue[f.field.id] = record;\r\n                  });\r\n                  var ruleValid = filter.filters(rowValue);\r\n                  // if invalid we need to tell the field\r\n                  if (ruleValid == false) {\r\n                     isValid = false;\r\n                     // webix.message({\r\n                     //    type: \"error\",\r\n                     //    text: invalidMessage\r\n                     // });\r\n                  }\r\n               });\r\n               return isValid;\r\n            };\r\n         });\r\n         // define validation rules\r\n         dataTable.define(\"rules\", rules);\r\n         // store the array of view ids on the webix object so we can get it later\r\n         dataTable.config.rulePops = rulePops;\r\n         dataTable.refresh();\r\n      } else {\r\n         var dataTable = $$(ids.datatable);\r\n         // check if the previous datatable had rule popups and remove them\r\n         if (dataTable.config.rulePops) {\r\n            dataTable.config.rulePops.forEach((popup) => {\r\n               if ($$(popup)) $$(popup).destructor();\r\n            });\r\n         }\r\n         // remove any validation rules from the previous table\r\n         dataTable.define(\"rules\", {});\r\n         dataTable.refresh();\r\n      }\r\n\r\n      /** Prepare Data */\r\n      let parsedData = [];\r\n\r\n      (this._dataRows || []).forEach((row, index) => {\r\n         let rowValue = {\r\n            id: index + 1,\r\n         };\r\n\r\n         // reformat data to display\r\n         (matchFields || []).forEach((f) => {\r\n            let data = row[f.columnIndex - 1];\r\n\r\n            if (f.field.key == \"date\") {\r\n               // let dateFormat = moment(data, f.format).format(\r\n               //    \"YYYY-MM-DD\"\r\n               // );\r\n               // debugger;\r\n               let dateFormat = this.AB.toDate(data, { format: f.format });\r\n               dateFormat = this.AB.toDateFormat(dateFormat, {\r\n                  format: \"YYYY-MM-DD\",\r\n               });\r\n               if (dateFormat == \"Invalid date\") {\r\n                  dateFormat = dateFormat + \" - \" + data;\r\n               }\r\n               rowValue[f.columnIndex] = dateFormat;\r\n            } else {\r\n               rowValue[f.columnIndex] = data; // array to object\r\n            }\r\n         });\r\n\r\n         // insert \"true\" value of checkbox\r\n         rowValue[\"_included\"] = true;\r\n\r\n         parsedData.push(rowValue);\r\n      });\r\n\r\n      // skip the first line\r\n      let isSkipFirstLine = $$(ids.headerOnFirstLine).getValue();\r\n      if (isSkipFirstLine && parsedData.length > 1) {\r\n         parsedData = parsedData.slice(1);\r\n      }\r\n\r\n      $$(ids.importButton).setValue(this.labelImport(parsedData));\r\n\r\n      $datatable.refreshColumns(columns);\r\n\r\n      $datatable.parse(parsedData);\r\n\r\n      if (this.overLimitAlert(parsedData)) {\r\n         $$(ids.importButton).disable();\r\n      } else {\r\n         $$(ids.importButton).enable();\r\n      }\r\n\r\n      // hide loading cursor\r\n      $datatable?.hideProgress?.();\r\n   }\r\n\r\n   refreshRemainingTimeText(startUpdateTime, total, index) {\r\n      const ids = this.ids;\r\n\r\n      // Calculate remaining time\r\n      let spentTime = new Date() - startUpdateTime; // milliseconds that has passed since last completed record since start\r\n\r\n      let averageRenderTime = spentTime / index; // average milliseconds per single render at this point\r\n\r\n      let remainTime = averageRenderTime * (total - index);\r\n\r\n      let result = \"\";\r\n\r\n      // Convert milliseconds to a readable string\r\n      let days = (remainTime / 86400000).toFixed(0);\r\n      let hours = (remainTime / 3600000).toFixed(0);\r\n      let minutes = (remainTime / 60000).toFixed(0);\r\n      let seconds = (remainTime / 1000).toFixed(0);\r\n\r\n      if (seconds < 1) result = \"\";\r\n      else if (seconds < 60)\r\n         result = L(\"Approximately {0} second(s) remaining\", [seconds]);\r\n      // result = `Approximately ${seconds} second${\r\n      //    seconds > 1 ? \"s\" : \"\"\r\n      // }`;\r\n      else if (minutes == 1)\r\n         result = L(\"Approximately 1 minute {0} seconds remaining\", [\r\n            seconds - 60,\r\n         ]);\r\n      // result = `Approximately 1 minute ${seconds - 60} seconds`;\r\n      else if (minutes < 60)\r\n         result = L(\"Approximately {0} minutes remaining\", [minutes]);\r\n      else if (hours < 24)\r\n         result = L(\"Approximately {0} hour(s) remaining\", [hours]);\r\n      else result = L(\"Approximately {0} day(s) remaining\", [days]);\r\n\r\n      if (result) {\r\n         $$(ids.importButton)?.setValue(result);\r\n      } else {\r\n         const selected = $$(ids.datatable)?.find({ _included: true });\r\n         $$(ids.importButton)?.setValue(this.labelImport(selected));\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method getMatchFields\r\n    *\r\n    * @return {Object} - [\r\n    *                      {\r\n    *                         columnIndex: {number},\r\n    *                         field: {ABField},\r\n    *                         searchField: {ABField} [optional]\r\n    *                      },\r\n    *                      ...\r\n    *                    ]\r\n    */\r\n   getMatchFields() {\r\n      let result = [];\r\n      var ids = this.ids;\r\n\r\n      // get richselect components\r\n      let $selectorViews = $$(ids.columnList)\r\n         .queryView({ abName: \"columnIndex\" }, \"all\")\r\n         .filter((selector) => selector.getValue() != \"none\");\r\n\r\n      ($selectorViews || []).forEach(($selector) => {\r\n         if (!this.CurrentObject) return;\r\n\r\n         // webix .options list disallow value 0\r\n         let colIndex = $selector.getValue();\r\n\r\n         let field = this.CurrentObject.fieldByID($selector.config.fieldId);\r\n         if (!field) return;\r\n\r\n         let fieldData = {\r\n            columnIndex: colIndex,\r\n            field: field,\r\n         };\r\n\r\n         if (field.key == \"date\") {\r\n            let $optionPanel = $selector.getParentView();\r\n            let $dateFormatSelectors = $optionPanel.queryView(\r\n               { abName: \"columnDateFormat\" },\r\n               \"all\"\r\n            );\r\n\r\n            // define the column to compare data to search .id\r\n            if ($dateFormatSelectors) {\r\n               $dateFormatSelectors.forEach((selector) => {\r\n                  fieldData[selector.config.name] = selector.getValue();\r\n               });\r\n\r\n               // convert all dates into mysql date format YYYY-DD-MM\r\n               var format;\r\n               switch (fieldData.order) {\r\n                  case \"1\":\r\n                     format =\r\n                        fieldData.day +\r\n                        fieldData.separator +\r\n                        fieldData.month +\r\n                        fieldData.separator +\r\n                        fieldData.year;\r\n                     break;\r\n                  case \"2\":\r\n                     format =\r\n                        fieldData.month +\r\n                        fieldData.separator +\r\n                        fieldData.day +\r\n                        fieldData.separator +\r\n                        fieldData.year;\r\n                     break;\r\n                  case \"3\":\r\n                     format =\r\n                        fieldData.year +\r\n                        fieldData.separator +\r\n                        fieldData.month +\r\n                        fieldData.separator +\r\n                        fieldData.day;\r\n                     break;\r\n                  case \"4\":\r\n                     format =\r\n                        fieldData.year +\r\n                        fieldData.separator +\r\n                        fieldData.day +\r\n                        fieldData.separator +\r\n                        fieldData.month;\r\n               }\r\n               fieldData.format = format;\r\n            }\r\n         }\r\n\r\n         if (field.isConnection) {\r\n            let $optionPanel = $selector.getParentView();\r\n            let $linkDataSelector = $optionPanel.queryView(\r\n               { abName: \"columnLinkData\" },\r\n               \"all\"\r\n            )[0];\r\n\r\n            // define the column to compare data to search .id\r\n            if ($linkDataSelector) {\r\n               let searchField = field.datasourceLink.fieldByID(\r\n                  $linkDataSelector.getValue()\r\n               );\r\n               fieldData.searchField = searchField;\r\n            }\r\n         }\r\n\r\n         result.push(fieldData);\r\n      });\r\n\r\n      return result;\r\n   }\r\n\r\n   labelImport(selected) {\r\n      var length = selected;\r\n      if (Array.isArray(selected)) length = selected.length;\r\n\r\n      return L(\"Import {0} Records\", [length]);\r\n   }\r\n\r\n   /**\r\n    * @method import\r\n    *\r\n    * @return {Promise}\r\n    */\r\n   import() {\r\n      // get ABDatacollection\r\n      let dv = this.viewCSVImporter.datacollection;\r\n      // if (dv == null) return Promise.resolve();\r\n\r\n      // // get ABObject\r\n      // let obj = dv.datasource;\r\n\r\n      // Make sure we are connected to an Object\r\n      let obj = this.CurrentObject;\r\n      if (obj == null) return Promise.resolve();\r\n\r\n      // get ABModel\r\n      // let model = dv.model;\r\n      // if (model == null) return Promise.resolve();\r\n\r\n      var ids = this.ids;\r\n      $$(ids.importButton).disable();\r\n\r\n      // Show loading cursor\r\n      $$(ids.form).showProgress({ type: \"icon\" });\r\n      $$(ids.progressBar).showProgress({\r\n         type: \"top\",\r\n         position: 0.0001,\r\n      });\r\n\r\n      // get richselect components\r\n      let matchFields = this.getMatchFields();\r\n\r\n      // Get object's model\r\n      let objModel = this.CurrentObject.model();\r\n\r\n      let selectedRows = $$(ids.datatable).find({ _included: true });\r\n\r\n      let _currProgress = 0;\r\n      let increaseProgressing = () => {\r\n         _currProgress += 1;\r\n         $$(ids.progressBar).showProgress({\r\n            type: \"bottom\",\r\n            position: _currProgress / selectedRows.length,\r\n         });\r\n      };\r\n\r\n      let itemFailed = (itemId, errMessage) => {\r\n         let $datatable = $$(ids.datatable);\r\n         if ($datatable) {\r\n            // set \"fail\" status\r\n            $datatable.addRowCss(itemId, \"row-fail\");\r\n            $datatable.blockEvent();\r\n            $datatable.updateItem(itemId, {\r\n               _status: \"fail\",\r\n               _errorMsg: errMessage,\r\n            });\r\n            $datatable.unblockEvent();\r\n         }\r\n         increaseProgressing();\r\n\r\n         console.error(errMessage);\r\n      };\r\n\r\n      let itemInvalid = (itemId, errors = []) => {\r\n         let $datatable = $$(ids.datatable);\r\n         if ($datatable) {\r\n            // combine all error messages to display in tooltip\r\n            let errorMsg = [];\r\n            // mark which column are invalid\r\n            errors.forEach((err) => {\r\n               if (!err || !err.name) return;\r\n               let fieldInfo = matchFields.filter(\r\n                  (f) => f.field && f.field.columnName == err.name\r\n               )[0];\r\n               errorMsg.push(err.name + \": \" + err.message);\r\n               // we also need to define an error message\r\n               // webix.message({\r\n               //    type: \"error\",\r\n               //    text: err.name + \": \" + err.message\r\n               // });\r\n            });\r\n            // set \"fail\" status\r\n            $$(ids.datatable).blockEvent();\r\n            $$(ids.datatable).updateItem(itemId, {\r\n               _status: \"invalid\",\r\n               _errorMsg: errorMsg.join(\"</br>\"),\r\n            });\r\n            $$(ids.datatable).unblockEvent();\r\n            $datatable.addRowCss(itemId, \"webix_invalid\");\r\n         }\r\n         // increaseProgressing();\r\n      };\r\n\r\n      let itemPass = (itemId) => {\r\n         let $datatable = $$(ids.datatable);\r\n         if ($datatable) {\r\n            // set \"done\" status\r\n            $datatable.removeRowCss(itemId, \"row-fail\");\r\n            $datatable.addRowCss(itemId, \"row-pass\");\r\n            $datatable.blockEvent();\r\n            $datatable.updateItem(itemId, {\r\n               _status: \"done\",\r\n               _errorMsg: \"\",\r\n            });\r\n            $datatable.unblockEvent();\r\n         }\r\n         increaseProgressing();\r\n      };\r\n\r\n      let itemValid = (itemId) => {\r\n         let $datatable = $$(ids.datatable);\r\n         if ($datatable) {\r\n            // mark all columns valid (just in case they were invalid before)\r\n            // matchFields.forEach((f) => {\r\n            //    $datatable.removeCellCss(\r\n            //       itemId,\r\n            //       f.columnIndex,\r\n            //       \"webix_invalid_cell\"\r\n            //    );\r\n            // });\r\n            // highlight the row\r\n            $datatable.removeRowCss(itemId, \"webix_invalid\");\r\n            $datatable.blockEvent();\r\n            $datatable.updateItem(itemId, {\r\n               _status: \"\",\r\n               _errorMsg: \"\",\r\n            });\r\n            $datatable.unblockEvent();\r\n            // $datatable.addRowCss(itemId, \"row-pass\");\r\n         }\r\n      };\r\n\r\n      let uiCleanUp = () => {\r\n         // To Do anyUI updates\r\n         // console.log(\"ui clean up now\");\r\n         $$(ids.importButton).enable();\r\n\r\n         // Hide loading cursor\r\n         $$(ids.form).hideProgress();\r\n         $$(ids.progressBar).hideProgress();\r\n         $$(ids.statusMessage).setValue(\"\");\r\n         $$(ids.statusMessage).hide();\r\n\r\n         var selected = $$(ids.datatable).find({ _included: true });\r\n         $$(ids.importButton).setValue(this.labelImport(selected));\r\n\r\n         this.emit(\"done\");\r\n      };\r\n\r\n      // Set parent's data collection cursor\r\n      let dcLink = dv?.datacollectionLink;\r\n      let objectLink;\r\n      let linkConnectFields = [];\r\n      let linkValues;\r\n      if (dcLink && dcLink.getCursor()) {\r\n         objectLink = dcLink.datasource;\r\n\r\n         linkConnectFields = this.CurrentObject.fields(\r\n            (f) => f.isConnection && f.settings.linkObject == objectLink.id\r\n         );\r\n\r\n         linkValues = dcLink.getCursor();\r\n      }\r\n\r\n      let allValid = true;\r\n      let validRows = [];\r\n      // Pre Check Validations of whole CSV import\r\n      // update row to green if valid\r\n      // update row to red if !valid\r\n      (selectedRows || []).forEach((data, index) => {\r\n         let newRowData = {};\r\n\r\n         // Set parent's data collection cursor\r\n         if (objectLink && linkConnectFields.length && linkValues) {\r\n            linkConnectFields.forEach((f) => {\r\n               let linkColName = f.indexField\r\n                  ? f.indexField.columnName\r\n                  : objectLink.PK();\r\n               newRowData[f.columnName] = {};\r\n               newRowData[f.columnName][linkColName] =\r\n                  linkValues[linkColName] || linkValues.id;\r\n            });\r\n         }\r\n\r\n         matchFields.forEach((f) => {\r\n            if (!f.field || !f.field.key) return;\r\n\r\n            switch (f.field.key) {\r\n               // case \"connectObject\":\r\n               //    // skip\r\n               //    break;\r\n               case \"number\":\r\n                  if (typeof data[f.columnIndex] != \"number\") {\r\n                     newRowData[f.field.columnName] = (\r\n                        data[f.columnIndex] || \"\"\r\n                     ).replace(/[^-0-9.]/gi, \"\");\r\n                  } else {\r\n                     newRowData[f.field.columnName] = data[f.columnIndex];\r\n                  }\r\n                  break;\r\n               default:\r\n                  newRowData[f.field.columnName] = data[f.columnIndex];\r\n                  break;\r\n            }\r\n         });\r\n\r\n         let isValid = false;\r\n         let errorMsg = \"\";\r\n\r\n         // first check legacy and server side validation\r\n         let validator = this.CurrentObject.isValidData(newRowData);\r\n         isValid = validator.pass();\r\n         errorMsg = validator.errors;\r\n\r\n         if (isValid) {\r\n            // now check complex field validation rules\r\n            isValid = $$(ids.datatable).validate(data.id);\r\n         } else {\r\n            allValid = false;\r\n            itemInvalid(data.id, errorMsg);\r\n         }\r\n         if (isValid) {\r\n            itemValid(data.id);\r\n            validRows.push({ id: data.id, data: newRowData });\r\n         } else {\r\n            allValid = false;\r\n         }\r\n         // $$(ids.datatable).unblockEvent();\r\n      });\r\n\r\n      if (!allValid) {\r\n         // To Do anyUI updates\r\n         // $$(ids.importButton).enable();\r\n         //\r\n         // // Hide loading cursor\r\n         // $$(ids.form).hideProgress();\r\n         // $$(ids.progressBar).hideProgress();\r\n         // $$(ids.statusMessage).setValue(\"\");\r\n         // $$(ids.statusMessage).hide();\r\n         //\r\n         // // _logic.hide();\r\n         //\r\n         // if (_logic.callbacks && _logic.callbacks.onDone)\r\n         //    _logic.callbacks.onDone();\r\n         uiCleanUp();\r\n\r\n         webix.alert({\r\n            title: L(\"Invalid Data\"),\r\n            ok: L(\"Ok\"),\r\n            text: L(\r\n               \"The highlighted row has invalid data. Please edit in the window or update the CSV and try again.\"\r\n            ),\r\n         });\r\n\r\n         return Promise.resolve();\r\n      }\r\n\r\n      // if pass, then continue to process each row\r\n      // ?? : can we process in Parallel?\r\n      // ?? : implement hash Lookups for connected Fields\r\n      var hashLookups = {};\r\n      // {obj}  /*  { connectField.id : { 'searchWord' : \"uuid\"}}\r\n      // use this hash to reduce the # of lookups needed to fill in our\r\n      // connected entries\r\n\r\n      let connectedFields = matchFields.filter(\r\n         (f) => f && f.field && f.field.isConnection && f.searchField\r\n      );\r\n\r\n      let startUpdateTime;\r\n      var numDone = 0;\r\n      return Promise.resolve()\r\n         .then(() => {\r\n            // forEach connectedFields in csv\r\n\r\n            var allLookups = [];\r\n\r\n            (connectedFields || []).forEach((f) => {\r\n               let connectField = f.field;\r\n               let searchField = f.searchField;\r\n               // let searchWord = newRowData[f.columnIndex];\r\n\r\n               let connectObject = connectField.datasourceLink;\r\n               if (!connectObject) return;\r\n\r\n               let connectModel = connectObject.model();\r\n               if (!connectModel) return;\r\n\r\n               let linkIdKey = connectField.indexField\r\n                  ? connectField.indexField.columnName\r\n                  : connectField.object.PK();\r\n\r\n               // prepare default hash entry:\r\n               hashLookups[connectField.id] = {};\r\n\r\n               // load all values of connectedField entries\r\n\r\n               allLookups.push(\r\n                  connectModel\r\n                     .findAll({\r\n                        where: {}, // !!!\r\n                        populate: false,\r\n                     })\r\n                     .then((list) => {\r\n                        if (list.data) {\r\n                           list = list.data;\r\n                        }\r\n                        (list || []).forEach((row) => {\r\n                           // store in hash[field.id] = { 'searchKey' : \"uuid\" }\r\n\r\n                           hashLookups[connectField.id][\r\n                              row[searchField.columnName]\r\n                           ] = row[linkIdKey];\r\n                        });\r\n                     })\r\n                     .catch((errMessage) => {\r\n                        console.error(errMessage);\r\n                     })\r\n               );\r\n            });\r\n\r\n            return Promise.all(allLookups);\r\n         })\r\n         .then(() => {\r\n            // forEach validRow\r\n            validRows.forEach((data) => {\r\n               let newRowData = data.data;\r\n\r\n               // update the datagrid row to in-progress\r\n               $$(ids.datatable).blockEvent();\r\n               $$(ids.datatable).updateItem(data.id, {\r\n                  _status: \"in-progress\",\r\n                  _errorMsg: \"\",\r\n               });\r\n               $$(ids.datatable).unblockEvent();\r\n\r\n               // forEach ConnectedField\r\n               (connectedFields || []).forEach((f) => {\r\n                  // find newRowData[field.columnName] = { field.PK : hash[field.id][searchWord] }\r\n                  let connectField = f.field;\r\n                  let linkIdKey = connectField.indexField\r\n                     ? connectField.indexField.columnName\r\n                     : connectField.object.PK();\r\n                  var uuid =\r\n                     hashLookups[connectField.id][\r\n                        newRowData[connectField.columnName]\r\n                     ];\r\n\r\n                  if (!uuid) {\r\n                     itemInvalid(data.id, [{ name: connectField.columnName }]);\r\n                     allValid = false;\r\n                  }\r\n\r\n                  newRowData[connectField.columnName] = {};\r\n                  newRowData[connectField.columnName][linkIdKey] = uuid;\r\n               });\r\n            });\r\n         })\r\n         .then(() => {\r\n            if (!allValid) {\r\n               webix.alert({\r\n                  title: L(\"Invalid Data\"),\r\n                  ok: L(\"Ok\"),\r\n                  text: L(\r\n                     \"The highlighted row has invalid data. Please edit in the window or update the CSV and try again.\"\r\n                  ),\r\n               });\r\n               uiCleanUp();\r\n\r\n               return Promise.resolve();\r\n            }\r\n            // NOTE: Parallel exectuion of all these:\r\n            var allSaves = [];\r\n\r\n            const createRecord = (objModel, newRowsData, element, total) => {\r\n               return new Promise((resolve, reject) => {\r\n                  element.doRecordRulesPre(newRowsData);\r\n\r\n                  objModel\r\n                     .batchCreate({ batch: newRowsData })\r\n                     .then((result) => {\r\n                        var recordRules = [];\r\n\r\n                        // Show errors of each row\r\n                        Object.keys(result.errors).forEach((rowIndex) => {\r\n                           let error = result.errors[rowIndex];\r\n                           if (error) {\r\n                              itemFailed(\r\n                                 rowIndex,\r\n                                 error.message || error.sqlMessage || error\r\n                              );\r\n                           }\r\n                        });\r\n\r\n                        Object.keys(result.data).forEach((rowIndex) => {\r\n                           let rowData = result.data[rowIndex];\r\n                           recordRules.push(\r\n                              new Promise((next, err) => {\r\n                                 // Process Record Rule\r\n                                 element\r\n                                    .doRecordRules(rowData)\r\n                                    .then(() => {\r\n                                       itemPass(rowIndex);\r\n                                       next();\r\n                                    })\r\n                                    .catch((errMessage) => {\r\n                                       itemFailed(rowIndex, errMessage);\r\n                                       err(\"that didn't work\");\r\n                                    });\r\n                              })\r\n                           );\r\n                        });\r\n                        Promise.all(recordRules)\r\n                           .then(() => {\r\n                              newRowsData.forEach((row) => {\r\n                                 // itemPass(row.id);\r\n                                 numDone++;\r\n                                 if (numDone % 50 == 0) {\r\n                                    this.refreshRemainingTimeText(\r\n                                       startUpdateTime,\r\n                                       validRows.length,\r\n                                       numDone\r\n                                    );\r\n                                 }\r\n                              });\r\n                              if (numDone == total) {\r\n                                 uiCleanUp();\r\n                                 $$(ids.importButton).disable();\r\n                              }\r\n                              resolve();\r\n                           })\r\n                           .catch((err) => {\r\n                              // newRowsData.forEach((row) => {\r\n                              //    itemFailed(row.id, err);\r\n                              // });\r\n                              reject(err);\r\n                           });\r\n                     })\r\n                     .catch((errMessage) => {\r\n                        console.error(errMessage);\r\n                        reject(errMessage);\r\n                     });\r\n               });\r\n            };\r\n\r\n            validRows.forEach((data) => {\r\n               let newRowData = data.data;\r\n               allSaves.push({ id: data.id, data: newRowData });\r\n            });\r\n\r\n            // we are going to store these promises in an array of\r\n            // arrays with 50 in each sub array\r\n            var throttledSaves = [];\r\n            var index = 0;\r\n            var total = allSaves.length;\r\n            while (allSaves.length) {\r\n               throttledSaves[index] = allSaves.splice(0, 50);\r\n               index++;\r\n            }\r\n\r\n            // execute the array of array of 100 promises one at at time\r\n            function performThrottledSaves(\r\n               currentRecords,\r\n               remainingRecords,\r\n               importer,\r\n               total\r\n            ) {\r\n               // execute the next 100\r\n               // const requests = currentRecords.map((data) => {\r\n               //    return createRecord(\r\n               //       objModel,\r\n               //       data.record,\r\n               //       data.data,\r\n               //       importer\r\n               //    );\r\n               // });\r\n               const requests = createRecord(\r\n                  objModel,\r\n                  currentRecords,\r\n                  importer,\r\n                  total\r\n               );\r\n               requests\r\n                  .then(() => {\r\n                     // when done get the next 10\r\n                     var nextRecords = remainingRecords.shift();\r\n                     // if there are any remaining in the group call performThrottledSaves\r\n                     if (nextRecords && nextRecords.length) {\r\n                        return performThrottledSaves(\r\n                           nextRecords,\r\n                           remainingRecords,\r\n                           importer,\r\n                           total\r\n                        );\r\n                     } else {\r\n                        // uiCleanUp();\r\n                        return Promise.resolve();\r\n                     }\r\n                  })\r\n                  .catch((err) => {\r\n                     // Handle errors here\r\n                     return Promise.reject(err);\r\n                  });\r\n            }\r\n\r\n            // now we are going to processes these new containers one at a time\r\n            // $$(ids.datatable).blockEvent();\r\n            // this is when the real work starts so lets begin our countdown timer now\r\n            startUpdateTime = new Date();\r\n            // get the first group of Promises out of the collection\r\n            var next = throttledSaves.shift();\r\n            // execute our Promise iterator\r\n            return performThrottledSaves(\r\n               next,\r\n               throttledSaves,\r\n               this.viewCSVImporter,\r\n               total\r\n            );\r\n         })\r\n         .catch((err) => {\r\n            // resolve Error UI\r\n            webix.alert({\r\n               title: L(\"Error Creating Records\"),\r\n               ok: L(\"Ok\"),\r\n               text: L(\"One or more records failed upon creation.\"),\r\n            });\r\n            // $$(ids.datatable).unblockEvent();\r\n            uiCleanUp();\r\n            console.error(err);\r\n         });\r\n   }\r\n}\r\n\r\nmodule.exports = class ABViewCSVImporter extends ABViewCSVImporterCore {\r\n   // constructor(values, application, parent, defaultValues) {\r\n   //    super(values, application, parent, defaultValues);\r\n   // }\r\n\r\n   //\r\n   //\tEditor Related\r\n   //\r\n\r\n   /**\r\n    * @method editorComponent\r\n    * return the Editor for this UI component.\r\n    * the editor should display either a \"block\" view or \"preview\" of\r\n    * the current layout of the view.\r\n    * @param {string} mode what mode are we in ['block', 'preview']\r\n    * @return {Component}\r\n    */\r\n   editorComponent(App, mode) {\r\n      let idBase = \"ABViewCsvImporterEditorComponent\";\r\n      let component = this.component(App, idBase);\r\n\r\n      return component;\r\n   }\r\n\r\n   //\r\n   // Property Editor\r\n   //\r\n\r\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\r\n      let commonUI = super.propertyEditorDefaultElements(\r\n         App,\r\n         ids,\r\n         _logic,\r\n         ObjectDefaults\r\n      );\r\n\r\n      let idBase = \"ABViewCSVImporter\";\r\n      let L = App.Label;\r\n\r\n      PopupRecordRule = new ABRecordRule();\r\n      PopupRecordRule.component(App, idBase + \"_recordrule\"); // prepare the UI component.\r\n\r\n      // _logic functions\r\n\r\n      _logic.selectSource = (dcId, oldDcId) => {\r\n         let currView = _logic.currentEditObject();\r\n\r\n         this.propertyUpdateRules(ids, currView);\r\n\r\n         // refresh UI\r\n         currView.emit(\"properties.updated\", currView);\r\n\r\n         currView.settings.dataviewID = dcId;\r\n\r\n         this.propertyAvailableFields(ids, currView, { selectAll: true });\r\n\r\n         // save\r\n         currView.save();\r\n      };\r\n\r\n      _logic.listTemplate = (field, common) => {\r\n         let currView = _logic.currentEditObject();\r\n\r\n         let fieldComponent = field.formComponent();\r\n         if (fieldComponent == null)\r\n            return `<i class='fa fa-times'></i>  ${field.label} <div class='ab-component-form-fields-component-info'> Disable </div>`;\r\n\r\n         let componentKey = fieldComponent.common().key;\r\n         let formComponent = currView.application.viewAll(\r\n            (v) => v.common().key == componentKey\r\n         )[0];\r\n\r\n         return `${common.markCheckbox(field)} ${\r\n            field.label\r\n         } <div class='ab-component-form-fields-component-info'> <i class='fa fa-${\r\n            formComponent ? formComponent.common().icon : \"fw\"\r\n         }'></i> ${\r\n            formComponent ? L(formComponent.common().labelKey, \"Label\") : \"\"\r\n         } </div>`;\r\n      };\r\n\r\n      _logic.check = (e, fieldId) => {\r\n         // update UI list\r\n         let item = $$(ids.fields).getItem(fieldId);\r\n         item.selected = item.selected ? 0 : 1;\r\n         $$(ids.fields).updateItem(fieldId, item);\r\n\r\n         let currView = _logic.currentEditObject();\r\n         this.propertyEditorValues(ids, currView);\r\n         currView.save();\r\n      };\r\n\r\n      _logic.recordRuleShow = () => {\r\n         let currView = _logic.currentEditObject();\r\n\r\n         PopupRecordRule.formLoad(currView);\r\n         PopupRecordRule.fromSettings(currView.settings.recordRules);\r\n         PopupRecordRule.show();\r\n\r\n         // Workaround\r\n         PopupRecordRule.qbFixAfterShow();\r\n      };\r\n\r\n      _logic.recordRuleSave = (settings) => {\r\n         let currView = _logic.currentEditObject();\r\n         currView.settings.recordRules = settings;\r\n\r\n         // trigger a save()\r\n         this.propertyEditorSave(ids, currView);\r\n\r\n         // update badge number of rules\r\n         this.populateBadgeNumber(ids, currView);\r\n      };\r\n\r\n      PopupRecordRule.init({\r\n         onSave: _logic.recordRuleSave,\r\n      });\r\n\r\n      return commonUI.concat([\r\n         {\r\n            view: \"fieldset\",\r\n            label: L(\"ab.component.label.dataSource\", \"*Data:\"),\r\n            labelWidth: App.config.labelWidthLarge,\r\n            body: {\r\n               name: \"datacollection\",\r\n               view: \"richselect\",\r\n               label: L(\"ab.components.form.dataSource\", \"*Data Source\"),\r\n               labelWidth: App.config.labelWidthLarge,\r\n               skipAutoSave: true,\r\n               on: {\r\n                  onChange: _logic.selectSource,\r\n               },\r\n            },\r\n         },\r\n         {\r\n            view: \"fieldset\",\r\n            label: L(\r\n               \"ab.component.csvImporter.availableFields\",\r\n               \"*Available Fields:\"\r\n            ),\r\n            labelWidth: App.config.labelWidthLarge,\r\n            body: {\r\n               type: \"clean\",\r\n               padding: 10,\r\n               rows: [\r\n                  {\r\n                     name: \"fields\",\r\n                     view: \"list\",\r\n                     select: false,\r\n                     minHeight: 250,\r\n                     template: _logic.listTemplate,\r\n                     type: {\r\n                        markCheckbox: function (item) {\r\n                           return (\r\n                              \"<span class='check webix_icon fa fa-\" +\r\n                              (item.selected ? \"check-\" : \"\") +\r\n                              \"square-o'></span>\"\r\n                           );\r\n                        },\r\n                     },\r\n                     onClick: {\r\n                        check: _logic.check,\r\n                     },\r\n                  },\r\n               ],\r\n            },\r\n         },\r\n         {\r\n            view: \"fieldset\",\r\n            label: L(\"ab.components.form.rules\", \"*Rules:\"),\r\n            labelWidth: App.config.labelWidthLarge,\r\n            body: {\r\n               type: \"clean\",\r\n               padding: 10,\r\n               rows: [\r\n                  {\r\n                     cols: [\r\n                        {\r\n                           view: \"label\",\r\n                           label: L(\r\n                              \"ab.components.form.recordRules\",\r\n                              \"*Record Rules:\"\r\n                           ),\r\n                           width: App.config.labelWidthLarge,\r\n                        },\r\n                        {\r\n                           view: \"button\",\r\n                           name: \"buttonRecordRules\",\r\n                           css: \"webix_primary\",\r\n                           label: L(\"ab.components.form.settings\", \"*Settings\"),\r\n                           icon: \"fa fa-gear\",\r\n                           type: \"icon\",\r\n                           badge: 0,\r\n                           click: function () {\r\n                              _logic.recordRuleShow();\r\n                           },\r\n                        },\r\n                     ],\r\n                  },\r\n               ],\r\n            },\r\n         },\r\n         {\r\n            view: \"fieldset\",\r\n            label: L(\r\n               \"ab.component.label.customizeDisplay\",\r\n               \"*Customize Display:\"\r\n            ),\r\n            labelWidth: App.config.labelWidthLarge,\r\n            body: {\r\n               type: \"clean\",\r\n               padding: 10,\r\n               rows: [\r\n                  {\r\n                     name: \"buttonLabel\",\r\n                     view: \"text\",\r\n                     label: L(\"ab.components.csvImporter.label\", \"*Label\"),\r\n                     labelWidth: App.config.labelWidthXLarge,\r\n                  },\r\n                  {\r\n                     view: \"counter\",\r\n                     name: \"width\",\r\n                     label: L(\"ab.components.csvImporter.width\", \"*Width:\"),\r\n                     labelWidth: App.config.labelWidthXLarge,\r\n                  },\r\n               ],\r\n            },\r\n         },\r\n      ]);\r\n   }\r\n\r\n   static propertyEditorPopulate(App, ids, view) {\r\n      super.propertyEditorPopulate(App, ids, view);\r\n\r\n      // Pull data views to options\r\n      let dcOptions = view.propertyDatacollections();\r\n\r\n      let $DcSelector = $$(ids.datacollection);\r\n      $DcSelector.define(\"options\", dcOptions);\r\n      $DcSelector.define(\"value\", view.settings.dataviewID || null);\r\n      $DcSelector.refresh();\r\n\r\n      $$(ids.buttonLabel).setValue(view.settings.buttonLabel);\r\n      $$(ids.width).setValue(view.settings.width);\r\n\r\n      // compatible to previous version\r\n      let availableFldOptions = {};\r\n      if (view.settings.availableFieldIds == null) {\r\n         availableFldOptions.selectAll = true;\r\n      }\r\n\r\n      this.propertyAvailableFields(ids, view, availableFldOptions);\r\n      this.propertyUpdateRules(ids, view);\r\n      this.populateBadgeNumber(ids, view);\r\n\r\n      // when a change is made in the properties the popups need to reflect the change\r\n      this.updateEventIds = this.updateEventIds || {}; // { viewId: boolean, ..., viewIdn: boolean }\r\n      if (!this.updateEventIds[view.id]) {\r\n         this.updateEventIds[view.id] = true;\r\n\r\n         view.addListener(\"properties.updated\", () => {\r\n            this.populateBadgeNumber(ids, view);\r\n         });\r\n      }\r\n   }\r\n\r\n   static propertyEditorValues(ids, view) {\r\n      super.propertyEditorValues(ids, view);\r\n\r\n      view.settings.dataviewID = $$(ids.datacollection).getValue();\r\n      view.settings.buttonLabel = $$(ids.buttonLabel).getValue();\r\n      view.settings.width = $$(ids.width).getValue();\r\n\r\n      view.settings.availableFieldIds = [];\r\n      let fields = $$(ids.fields).find({ selected: true });\r\n      (fields || []).forEach((f) => {\r\n         view.settings.availableFieldIds.push(f.id);\r\n      });\r\n   }\r\n\r\n   static propertyAvailableFields(ids, view, options = {}) {\r\n      let datacollection = view.AB.datacollections(\r\n         (dc) => dc.id == view.settings.dataviewID\r\n      )[0];\r\n      let object = datacollection ? datacollection.datasource : null;\r\n\r\n      view.settings = view.settings || {};\r\n      let availableFields = view.settings.availableFieldIds || [];\r\n\r\n      // Pull field list\r\n      let fieldOptions = [];\r\n      if (object != null) {\r\n         fieldOptions = object.fields().map((f) => {\r\n            f.selected = options.selectAll\r\n               ? true\r\n               : availableFields.filter((fieldId) => f.id == fieldId).length >\r\n                 0;\r\n\r\n            return f;\r\n         });\r\n      }\r\n\r\n      $$(ids.fields).clearAll();\r\n      $$(ids.fields).parse(fieldOptions);\r\n   }\r\n\r\n   static propertyUpdateRules(ids, view) {\r\n      if (!view) return;\r\n\r\n      // Populate values to rules\r\n      let selectedDv = view.datacollection;\r\n      if (selectedDv) {\r\n         PopupRecordRule.objectLoad(selectedDv.datasource);\r\n      }\r\n\r\n      // PopupDisplayRule.formLoad(view);\r\n      PopupRecordRule.formLoad(view);\r\n   }\r\n\r\n   static populateBadgeNumber(ids, view) {\r\n      if (!view) return;\r\n\r\n      if (view.settings.recordRules) {\r\n         $$(ids.buttonRecordRules).define(\r\n            \"badge\",\r\n            view.settings.recordRules.length || null\r\n         );\r\n         $$(ids.buttonRecordRules).refresh();\r\n      } else {\r\n         $$(ids.buttonRecordRules).define(\"badge\", null);\r\n         $$(ids.buttonRecordRules).refresh();\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method component()\r\n    * return a UI component based upon this view.\r\n    * @param {obj} App\r\n    * @return {obj} UI component\r\n    */\r\n   component(v1App = false, idBase) {\r\n      var component = new ABViewCSVImporterComponent(this, idBase);\r\n\r\n      // if this is our v1Interface\r\n      if (v1App) {\r\n         var newComponent = component;\r\n         component = {\r\n            ui: component.ui(),\r\n            init: (options, accessLevel) => {\r\n               return newComponent.init(this.AB, accessLevel);\r\n            },\r\n            onShow: (...params) => {\r\n               return newComponent.onShow?.(...params);\r\n            },\r\n         };\r\n      }\r\n\r\n      return component;\r\n   }\r\n};\r\n","\r\nconst ABViewCarouselCore = require(\"../../core/views/ABViewCarouselCore\");\r\n\r\n// const ABViewPropertyFilterData = require(\"./viewProperties/ABViewPropertyFilterData\");\r\n// const ABViewPropertyLinkPage = require(\"./viewProperties/ABViewPropertyLinkPage\");\r\n\r\nimport ABViewPropertyFilterData from \"./viewProperties/ABViewPropertyFilterData\";\r\nimport ABViewPropertyLinkPage from \"./viewProperties/ABViewPropertyLinkPage\";\r\n\r\nconst ABFieldImage = require(\"../dataFields/ABFieldImage\");\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nlet PopupCarouselFilterMenu = null;\r\n\r\nexport default class ABViewCarousel extends ABViewCarouselCore {\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(values, application, parent, defaultValues);\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /**\r\n    * @method fromValues()\r\n    *\r\n    * initialze this object with the given set of values.\r\n    * @param {obj} values\r\n    */\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n\r\n      // filter property\r\n      this.filterHelper.fromSettings(this.settings.filter);\r\n   }\r\n\r\n   //\r\n   //\tEditor Related\r\n   //\r\n\r\n   /**\r\n    * @method editorComponent\r\n    * return the Editor for this UI component.\r\n    * the editor should display either a \"block\" view or \"preview\" of\r\n    * the current layout of the view.\r\n    * @param {string} mode what mode are we in ['block', 'preview']\r\n    * @return {Component}\r\n    */\r\n   editorComponent(App, mode) {\r\n      var idBase = \"ABViewCarouselEditorComponent\";\r\n\r\n      var CarouselComponent = this.component(App, idBase);\r\n\r\n      return CarouselComponent;\r\n   }\r\n\r\n   //\r\n   // Property Editor\r\n   //\r\n\r\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\r\n      var idBase = \"ABViewCarouselPropertyEditor\";\r\n\r\n      let commonUI = super.propertyEditorDefaultElements(\r\n         App,\r\n         ids,\r\n         _logic,\r\n         ObjectDefaults\r\n      );\r\n\r\n      PopupCarouselFilterMenu = ABViewPropertyFilterData.propertyComponent(\r\n         App,\r\n         idBase\r\n      );\r\n      this.linkPageComponent = ABViewPropertyLinkPage.propertyComponent(\r\n         App,\r\n         idBase\r\n      );\r\n\r\n      let filter_property_popup = webix.ui({\r\n         view: \"window\",\r\n         modal: true,\r\n         position: \"center\",\r\n         resize: true,\r\n         width: 700,\r\n         height: 450,\r\n         css: \"ab-main-container\",\r\n         head: {\r\n            view: \"toolbar\",\r\n            cols: [\r\n               {\r\n                  view: \"label\",\r\n                  label: L(\"Filter Menu\"),\r\n               },\r\n            ],\r\n         },\r\n         body: PopupCarouselFilterMenu.ui,\r\n      });\r\n\r\n      _logic.filterMenuShow = () => {\r\n         var currView = _logic.currentEditObject();\r\n\r\n         PopupCarouselFilterMenu.setSettings(currView.settings.filter);\r\n\r\n         // show filter popup\r\n         filter_property_popup.show();\r\n      };\r\n\r\n      _logic.filterSave = () => {\r\n         var currView = _logic.currentEditObject();\r\n\r\n         // hide filter popup\r\n         filter_property_popup.hide();\r\n\r\n         // refresh settings\r\n         this.propertyEditorValues(ids, currView);\r\n\r\n         // trigger a save()\r\n         this.propertyEditorSave(ids, currView);\r\n      };\r\n\r\n      _logic.filterCancel = () => {\r\n         // hide filter popup\r\n         filter_property_popup.hide();\r\n      };\r\n\r\n      PopupCarouselFilterMenu.init({\r\n         onSave: _logic.filterSave,\r\n         onCancel: _logic.filterCancel,\r\n      });\r\n\r\n      return commonUI.concat([\r\n         {\r\n            view: \"fieldset\",\r\n            label: L(\"Data:\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n            body: {\r\n               type: \"clean\",\r\n               padding: 10,\r\n               rows: [\r\n                  {\r\n                     view: \"select\",\r\n                     name: \"datacollection\",\r\n                     label: L(\"Object:\"),\r\n                     labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n                     options: [],\r\n                     on: {\r\n                        onChange: function (newv, oldv) {\r\n                           if (newv != oldv) {\r\n                              $$(ids.detailsPage).setValue(\"\");\r\n                              $$(ids.editPage).setValue(\"\");\r\n\r\n                              let imageFields = [];\r\n\r\n                              let dataCollection = _logic\r\n                                 .currentEditObject()\r\n                                 .AB.datacollectionByID(newv);\r\n                              if (dataCollection) {\r\n                                 let datasource = dataCollection.datasource;\r\n                                 if (datasource) {\r\n                                    imageFields =\r\n                                       datasource\r\n                                          .fields(\r\n                                             (f) => f instanceof ABFieldImage\r\n                                          )\r\n                                          .map((f) => {\r\n                                             return {\r\n                                                id: f.id,\r\n                                                value: f.label,\r\n                                             };\r\n                                          }) || [];\r\n                                 }\r\n                              }\r\n                              if (imageFields.length > 0) {\r\n                                 imageFields.unshift({\r\n                                    id: \"\",\r\n                                    value: L(\"Select a field\"),\r\n                                 });\r\n                              } else {\r\n                                 imageFields.unshift({\r\n                                    id: \"\",\r\n                                    value: L(\"no image fields.\"),\r\n                                 });\r\n                              }\r\n\r\n                              $$(ids.field).define(\"options\", imageFields);\r\n                              $$(ids.field).refresh();\r\n                           }\r\n                        },\r\n                     },\r\n                  },\r\n\r\n                  {\r\n                     view: \"select\",\r\n                     name: \"field\",\r\n                     label: L(\"Image Field:\"),\r\n                     labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n                     options: [],\r\n                  },\r\n\r\n                  {\r\n                     view: \"checkbox\",\r\n                     name: \"filterByCursor\",\r\n                     labelWidth: 0,\r\n                     labelRight: L(\"Filter images by cursor\")\r\n                  },\r\n               ],\r\n            },\r\n         },\r\n\r\n         this.linkPageComponent.ui,\r\n         // {\r\n         // \tview: \"fieldset\",\r\n         // \tlabel: L('ab.component.label.linkedPages', '*Linked Pages:'),\r\n         // \tlabelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n         // \tbody: {\r\n         // \t\ttype: \"clean\",\r\n         // \t\tpadding: 10,\r\n         // \t\trows: [\r\n         // \t\t\t{\r\n         // \t\t\t\tview: \"select\",\r\n         // \t\t\t\tname: \"detailsPage\",\r\n         // \t\t\t\tlabel: L('ab.component.label.detailsPage', '*Details Page:'),\r\n         // \t\t\t\tlabelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n         // \t\t\t\toptions: []\r\n         // \t\t\t},\r\n         // \t\t\t{\r\n         // \t\t\t\tview: \"select\",\r\n         // \t\t\t\tname: \"editPage\",\r\n         // \t\t\t\tlabel: L('ab.component.label.editForm', '*Edit Form:'),\r\n         // \t\t\t\tlabelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n         // \t\t\t\toptions: []\r\n         // \t\t\t}\r\n         // \t\t]\r\n         // \t}\r\n         // },\r\n         {\r\n            view: \"fieldset\",\r\n            label: L(\"Customize Display:\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n            body: {\r\n               type: \"clean\",\r\n               padding: 10,\r\n               rows: [\r\n                  {\r\n                     view: \"select\",\r\n                     name: \"navigationType\",\r\n                     label: L(\"Navigation Type\"),\r\n                     labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n                     options: [\r\n                        { id: \"corner\", value: L(\"Corner\") },\r\n                        { id: \"side\", value: L(\"Side\") },\r\n                     ],\r\n                  },\r\n\r\n                  {\r\n                     view: \"checkbox\",\r\n                     name: \"showLabel\",\r\n                     labelRight: L(\"Show label of image\"),\r\n                     labelWidth: this.AB.UISettings.config().labelWidthCheckbox,\r\n                  },\r\n\r\n                  {\r\n                     view: \"checkbox\",\r\n                     name: \"hideItem\",\r\n                     labelRight: L(\"Hide item list\"),\r\n                     labelWidth: this.AB.UISettings.config().labelWidthCheckbox,\r\n                  },\r\n\r\n                  {\r\n                     view: \"checkbox\",\r\n                     name: \"hideButton\",\r\n                     labelRight: L(\"Hide navigation buttons\"),\r\n                     labelWidth: this.AB.UISettings.config().labelWidthCheckbox,\r\n                  },\r\n\r\n                  {\r\n                     view: \"counter\",\r\n                     name: \"width\",\r\n                     label: L(\"Width:\"),\r\n                     labelWidth: this.AB.UISettings.config().labelWidthXLarge,\r\n                  },\r\n\r\n                  {\r\n                     view: \"counter\",\r\n                     name: \"height\",\r\n                     label: L(\"Height:\"),\r\n                     labelWidth: this.AB.UISettings.config().labelWidthXLarge,\r\n                  },\r\n\r\n                  {\r\n                     cols: [\r\n                        {\r\n                           view: \"label\",\r\n                           label: L(\"Filter Option:\"),\r\n                           css: \"ab-text-bold\",\r\n                           width: this.AB.UISettings.config().labelWidthXLarge,\r\n                        },\r\n                        {\r\n                           view: \"button\",\r\n                           id: ids.gridFilterMenuButton,\r\n                           css: \"webix_primary\",\r\n                           label: L(\"Settings\"),\r\n                           icon: \"fa fa-gear\",\r\n                           type: \"icon\",\r\n                           badge: 0,\r\n                           click: function () {\r\n                              _logic.filterMenuShow(this.$view);\r\n                           },\r\n                        },\r\n                     ],\r\n                  },\r\n               ],\r\n            },\r\n         },\r\n      ]);\r\n   }\r\n\r\n   static propertyEditorPopulate(App, ids, view) {\r\n      super.propertyEditorPopulate(App, ids, view);\r\n\r\n      if (!view) return;\r\n\r\n      // Set the objects you can choose from in the list\r\n      // Pull data collections to options\r\n      var objectOptions = view.propertyDatacollections();\r\n      $$(ids.datacollection).define(\"options\", objectOptions);\r\n      $$(ids.datacollection).refresh();\r\n\r\n      $$(ids.datacollection).setValue(view.settings.dataviewID);\r\n      $$(ids.field).setValue(view.settings.field);\r\n      $$(ids.filterByCursor).setValue(view.settings.filterByCursor);\r\n\r\n      $$(ids.width).setValue(view.settings.width);\r\n      $$(ids.height).setValue(view.settings.height);\r\n      $$(ids.showLabel).setValue(view.settings.showLabel);\r\n      $$(ids.hideItem).setValue(view.settings.hideItem);\r\n      $$(ids.hideButton).setValue(view.settings.hideButton);\r\n      $$(ids.navigationType).setValue(view.settings.navigationType);\r\n\r\n      // Populate values to QueryBuilder\r\n      var selectedDv = view.datacollection;\r\n      if (selectedDv) {\r\n         PopupCarouselFilterMenu.objectLoad(selectedDv.datasource);\r\n      }\r\n\r\n      // Populate values to link page properties\r\n      this.linkPageComponent.viewLoad(view);\r\n      this.linkPageComponent.setSettings(view.settings);\r\n   }\r\n\r\n   static propertyEditorValues(ids, view) {\r\n      super.propertyEditorValues(ids, view);\r\n\r\n      view.settings.dataviewID = $$(ids.datacollection).getValue();\r\n      view.settings.field = $$(ids.field).getValue();\r\n      view.settings.filterByCursor = $$(ids.filterByCursor).getValue() || false;\r\n\r\n      view.settings.width = $$(ids.width).getValue();\r\n      view.settings.height = $$(ids.height).getValue();\r\n      view.settings.showLabel = $$(ids.showLabel).getValue();\r\n      view.settings.hideItem = $$(ids.hideItem).getValue();\r\n      view.settings.hideButton = $$(ids.hideButton).getValue();\r\n      view.settings.navigationType = $$(ids.navigationType).getValue();\r\n\r\n      // filter\r\n      view.settings.filter = PopupCarouselFilterMenu.getSettings();\r\n\r\n      // link pages\r\n      let linkSettings = this.linkPageComponent.getSettings();\r\n      for (let key in linkSettings) {\r\n         view.settings[key] = linkSettings[key];\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method component()\r\n    * return a UI component based upon this view.\r\n    * @param {obj} App\r\n    * @return {obj} UI component\r\n    */\r\n   component(App) {\r\n      var idBase = this.idBase;\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n      };\r\n\r\n      var dv = this.datacollection;\r\n      if (dv) {\r\n         this.filterHelper.objectLoad(dv.datasource);\r\n         this.filterHelper.fromSettings(this.settings.filter);\r\n      }\r\n\r\n      let filterUI = this.filterHelper.component(App, idBase);\r\n      let linkPage = this.linkPageHelper.component(App, idBase);\r\n\r\n      let spacer = {};\r\n      if (this.settings.width == 0) {\r\n         spacer = {\r\n            width: 1,\r\n         };\r\n      }\r\n\r\n      let _ui = {\r\n         borderless: true,\r\n         cols: [\r\n            spacer, // spacer\r\n            {\r\n               borderless: true,\r\n               rows: [\r\n                  filterUI.ui, // filter UI\r\n                  {\r\n                     id: ids.component,\r\n                     view: \"carousel\",\r\n                     cols: [],\r\n                     width: this.settings.width,\r\n                     height: this.settings.height,\r\n                     navigation: {\r\n                        items: !this.settings.hideItem,\r\n                        buttons: !this.settings.hideButton,\r\n                        type: this.settings.navigationType,\r\n                     },\r\n                     on: {\r\n                        onShow: function () {\r\n                           let activeIndex = $$(ids.component).getActiveIndex();\r\n                           _logic.switchImage(activeIndex);\r\n                        },\r\n                     },\r\n                  },\r\n               ],\r\n            },\r\n            spacer, // spacer\r\n         ],\r\n      };\r\n\r\n      // make sure each of our child views get .init() called\r\n      let _init = (options) => {\r\n         let dv = this.datacollection;\r\n         if (!dv) return;\r\n\r\n         let object = dv.datasource;\r\n         if (!object) return;\r\n\r\n         dv.on(\"loadData\", () => {\r\n            _logic.onShow();\r\n         });\r\n         dv.on(\"update\", () => {\r\n            dv.reloadData();\r\n         });\r\n         dv.on(\"delete\", () => {\r\n            dv.reloadData();\r\n         });\r\n         dv.on(\"create\", () => {\r\n            dv.reloadData();\r\n         });\r\n         dv.on(\"initializingData\", () => {\r\n            _logic.busy();\r\n         });\r\n         dv.on(\"initializedData\", () => {\r\n            _logic.ready();\r\n         });\r\n\r\n         if (this.settings.filterByCursor) {\r\n            dv.on(\"changeCursor\", () => {\r\n               _logic.onShow();\r\n            });\r\n         }\r\n\r\n         // filter helper\r\n         this.filterHelper.objectLoad(object);\r\n         this.filterHelper.viewLoad(this);\r\n\r\n         filterUI.init({\r\n            onFilterData: (fnFilter) => {\r\n               _logic.onShow(fnFilter); // be notified when there is a change in the filter\r\n            },\r\n         });\r\n\r\n         // link page helper\r\n         linkPage.init({\r\n            view: this,\r\n            datacollection: dv,\r\n         });\r\n\r\n         // set data-cy\r\n         const carousel = $$(ids.component).$view;\r\n         carousel.setAttribute('data-cy', `${this.key} ${this.id}`);\r\n         carousel\r\n             .querySelector('.webix_nav_button_prev')\r\n             ?.firstElementChild\r\n             ?.setAttribute('data-cy', `${this.key} button previous ${this.id}`);\r\n         carousel\r\n             .querySelector('.webix_nav_button_next')\r\n             ?.firstElementChild\r\n             ?.setAttribute('data-cy', `${this.key} button next ${this.id}`);\r\n\r\n      };\r\n\r\n      let _logic = {\r\n         myTemplate: (row) => {\r\n            if (row && row.src) {\r\n               let template =\r\n                  `<div class=\"ab-carousel-image-container\">` +\r\n                  `<img src=\"${row.src}\" class=\"content\" ondragstart=\"return false\" />` +\r\n                  (this.settings.showLabel\r\n                     ? `<div class=\"ab-carousel-image-title\">${\r\n                          row.label || \"\"\r\n                       }</div>`\r\n                     : \"\") +\r\n                  `<div class=\"ab-carousel-image-icon\">` +\r\n                  (this.settings.detailsPage || this.settings.detailsTab\r\n                     ? `<span ab-row-id=\"${row.id}\" class=\"ab-carousel-detail webix_icon fa fa-eye\"></span>`\r\n                     : \"\") +\r\n                  (this.settings.editPage || this.settings.editTab\r\n                     ? `<span ab-row-id=\"${row.id}\" class=\"ab-carousel-edit webix_icon fa fa-pencil\"></span>`\r\n                     : \"\") +\r\n                  `<span class=\"webix_icon ab-carousel-fullscreen fa fa-arrows-alt\"></span>` +\r\n                  `<span style=\"display: none;\" class=\"webix_icon ab-carousel-exit-fullscreen fa fa-times\"></span>` +\r\n                  `</div>` +\r\n                  `</div>`;\r\n\r\n               return template;\r\n            } // empty image\r\n            else return \"\";\r\n         },\r\n\r\n         busy: () => {\r\n            let Carousel = $$(ids.component);\r\n\r\n            Carousel.disable();\r\n\r\n            if (Carousel.showProgress) Carousel.showProgress({ type: \"icon\" });\r\n         },\r\n\r\n         ready: () => {\r\n            let Carousel = $$(ids.component);\r\n\r\n            Carousel.enable();\r\n\r\n            if (Carousel.hideProgress) Carousel.hideProgress();\r\n         },\r\n\r\n         switchImage: async (current_position) => {\r\n            let dv = this.datacollection;\r\n            if (!dv) return;\r\n\r\n            // Check want to load more images\r\n            if (\r\n               current_position >= this._imageCount - 1 && // check last image\r\n               dv.totalCount > this._rowCount\r\n            ) {\r\n               // loading cursor\r\n               _logic.busy();\r\n\r\n               try {\r\n                  await dv.loadData(this._rowCount || 0);\r\n               } catch (err) {\r\n                  App.AB.notify.developer(err, {\r\n                     message: \"Error when load data from a Data collection\",\r\n                  });\r\n               }\r\n\r\n               _logic.ready();\r\n            }\r\n         },\r\n\r\n         onShow: (fnFilter) => {\r\n            let dv = this.datacollection;\r\n            if (!dv) return;\r\n\r\n            let obj = dv.datasource;\r\n            if (!obj) return;\r\n\r\n            let field = this.imageField;\r\n            if (!field) return;\r\n\r\n            if (dv && dv.dataStatus == dv.dataStatusFlag.notInitial) {\r\n               // load data when a widget is showing\r\n               dv.loadData();\r\n\r\n               // it will call .onShow again after dc loads completely\r\n               return;\r\n            }\r\n\r\n            fnFilter = fnFilter || filterUI.getFilter();\r\n\r\n            let rows = dv.getData(fnFilter);\r\n\r\n            // Filter images by cursor\r\n            if (this.settings.filterByCursor) {\r\n               let cursor = dv.getCursor();\r\n               if (cursor) {\r\n                  rows = rows.filter(\r\n                     (r) =>\r\n                        (r[obj.PK()] || r.id || r) ==\r\n                        (cursor[obj.PK()] || cursor.id || cursor)\r\n                  );\r\n               }\r\n            }\r\n\r\n            let images = [];\r\n\r\n            rows.forEach((r) => {\r\n               let imgFile = r[field.columnName];\r\n               if (imgFile) {\r\n                  let imgData = {\r\n                     id: r.id,\r\n                     src: `/file/${imgFile}`,\r\n                  };\r\n\r\n                  // label of row data\r\n                  if (this.settings.showLabel) {\r\n                     imgData.label = obj.displayData(r);\r\n                  }\r\n\r\n                  images.push({\r\n                     css: \"image\",\r\n                     borderless: true,\r\n                     template: _logic.myTemplate,\r\n                     data: imgData,\r\n                  });\r\n               }\r\n            });\r\n\r\n            // insert the default image to first item\r\n            if (field.settings.defaultImageUrl) {\r\n               images.unshift({\r\n                  css: \"image\",\r\n                  template: _logic.myTemplate,\r\n                  data: {\r\n                     id: this.AB.uuid(),\r\n                     src: `/file/${field.settings.defaultImageUrl}`,\r\n                     label: L(\"Default image\"),\r\n                  },\r\n               });\r\n            }\r\n\r\n            // empty image\r\n            if (images.length < 1) {\r\n               images.push({\r\n                  rows: [\r\n                     {\r\n                        view: \"label\",\r\n                        align: \"center\",\r\n                        height: this.settings.height,\r\n                        label:\r\n                           \"<div style='display: block; font-size: 180px; background-color: #666; color: transparent; text-shadow: 0px 1px 1px rgba(255,255,255,0.5); -webkit-background-clip: text; -moz-background-clip: text; background-clip: text;' class='fa fa-picture-o'></div>\",\r\n                     },\r\n                     {\r\n                        view: \"label\",\r\n                        align: \"center\",\r\n                        label: L(\"No image\"),\r\n                     },\r\n                  ],\r\n               });\r\n            }\r\n\r\n            // store total of rows\r\n            this._rowCount = rows.length;\r\n\r\n            // store total of images\r\n            this._imageCount = images.length;\r\n\r\n            var Carousel = $$(ids.component);\r\n\r\n            // re-render\r\n            webix.ui(images, Carousel);\r\n\r\n            // add loading cursor\r\n            if (Carousel) webix.extend(Carousel, webix.ProgressBar);\r\n\r\n            // link pages events\r\n            let editPage = this.settings.editPage;\r\n            let detailsPage = this.settings.detailsPage;\r\n\r\n            // if (detailsPage || editPage) {\r\n            $$(ids.component).$view.onclick = (e) => {\r\n               if (e.target.className) {\r\n                  if (e.target.className.indexOf(\"ab-carousel-edit\") > -1) {\r\n                     webix.html.removeCss(\r\n                        $$(ids.component).getNode(),\r\n                        \"fullscreen\"\r\n                     );\r\n                     webix.fullscreen.exit();\r\n                     let rowId = e.target.getAttribute(\"ab-row-id\");\r\n                     linkPage.changePage(editPage, rowId);\r\n                  } else if (\r\n                     e.target.className.indexOf(\"ab-carousel-detail\") > -1\r\n                  ) {\r\n                     webix.html.removeCss(\r\n                        $$(ids.component).getNode(),\r\n                        \"fullscreen\"\r\n                     );\r\n                     webix.fullscreen.exit();\r\n                     let rowId = e.target.getAttribute(\"ab-row-id\");\r\n                     linkPage.changePage(detailsPage, rowId);\r\n                  } else if (\r\n                     e.target.className.indexOf(\"ab-carousel-fullscreen\") > -1\r\n                  ) {\r\n                     $$(ids.component).define(\"css\", \"fullscreen\");\r\n                     webix.fullscreen.set(ids.component, {\r\n                        head: {\r\n                           view: \"toolbar\",\r\n                           css: \"webix_dark\",\r\n                           elements: [\r\n                              {},\r\n                              {\r\n                                 view: \"icon\",\r\n                                 icon: \"fa fa-times\",\r\n                                 click: function () {\r\n                                    webix.html.removeCss(\r\n                                       $$(ids.component).getNode(),\r\n                                       \"fullscreen\"\r\n                                    );\r\n                                    webix.fullscreen.exit();\r\n                                 },\r\n                              },\r\n                           ],\r\n                        },\r\n                     });\r\n                  }\r\n               }\r\n            };\r\n            // }\r\n         },\r\n\r\n         showFilterPopup: ($view) => {\r\n            filterUI.showPopup($view);\r\n         },\r\n      };\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: _init,\r\n         logic: _logic,\r\n\r\n         onShow: _logic.onShow,\r\n      };\r\n   }\r\n\r\n   get idBase() {\r\n      return `ABViewCarousel_${this.id}`;\r\n   }\r\n\r\n   get filterHelper() {\r\n      if (this.__filterHelper == null)\r\n         this.__filterHelper = new ABViewPropertyFilterData(this.AB, this.idBase);\r\n\r\n      return this.__filterHelper;\r\n   }\r\n\r\n   get linkPageHelper() {\r\n      if (this.__linkPageHelper == null)\r\n         this.__linkPageHelper = new ABViewPropertyLinkPage();\r\n\r\n      return this.__linkPageHelper;\r\n   }\r\n};\r\n","const ABViewChartCore = require(\"../../core/views/ABViewChartCore\");\r\n\r\nconst ABViewChartPropertyComponentDefaults = ABViewChartCore.defaultValues();\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABViewChart extends ABViewChartCore {\r\n   // constructor(values, application, parent, defaultValues) {\r\n   //    super(values, application, parent, defaultValues);\r\n   // }\r\n\r\n   /**\r\n    * @method editorComponent\r\n    * return the Editor for this UI component.\r\n    * the editor should display either a \"block\" view or \"preview\" of\r\n    * the current layout of the view.\r\n    * @param {string} mode what mode are we in ['block', 'preview']\r\n    * @return {Component}\r\n    */\r\n   editorComponent(App, mode) {\r\n      var comp = super.editorComponent(App, mode);\r\n\r\n      // Define height of cell\r\n      comp.ui.rows[0].cellHeight = 400;\r\n\r\n      return comp;\r\n   }\r\n\r\n   //\r\n   // Property Editor\r\n   //\r\n\r\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\r\n      var commonUI = super.propertyEditorDefaultElements(\r\n         App,\r\n         ids,\r\n         _logic,\r\n         ObjectDefaults\r\n      );\r\n      this._App = App; // #Hack!!\r\n\r\n      _logic.enableMultipleSeries = (isEnable) => {\r\n         var currView = _logic.currentEditObject();\r\n\r\n         if (isEnable) {\r\n            this.populateFieldOptions2(ids, currView);\r\n         } else {\r\n            $$(ids.columnValue2).define(\"options\", []);\r\n            $$(ids.columnValue2).refresh();\r\n            $$(ids.columnValue2).disable();\r\n         }\r\n      };\r\n      return commonUI.concat([\r\n         {\r\n            name: \"multipleSeries\",\r\n            view: \"checkbox\",\r\n            label: L(\"Multiple Series\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n            on: {\r\n               onChange: _logic.enableMultipleSeries,\r\n            },\r\n         },\r\n         {\r\n            name: \"dataview\",\r\n            view: \"richselect\",\r\n            label: L(\"Chart Data\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n         },\r\n         {\r\n            name: \"columnLabel\",\r\n            view: \"richselect\",\r\n            label: L(\"Label Column\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n         },\r\n         {\r\n            name: \"columnValue\",\r\n            view: \"richselect\",\r\n            label: L(\"Value Column\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n         },\r\n         {\r\n            name: \"columnValue2\",\r\n            view: \"richselect\",\r\n            label: L(\"Value Column 2\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n         },\r\n         {\r\n            name: \"isPercentage\",\r\n            view: \"checkbox\",\r\n            labelRight: L(\"Percentage\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthCheckbox,\r\n         },\r\n         {\r\n            name: \"showLabel\",\r\n            view: \"checkbox\",\r\n            label: L(\"Display Label\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n         },\r\n         {\r\n            name: \"labelPosition\",\r\n            view: \"richselect\",\r\n            label: L(\"Label Position\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n            options: [\r\n               {\r\n                  id: \"left\",\r\n                  value: L(\"Left\"),\r\n               },\r\n               {\r\n                  id: \"top\",\r\n                  value: L(\"Top\"),\r\n               },\r\n            ],\r\n         },\r\n         {\r\n            name: \"labelWidth\",\r\n            view: \"counter\",\r\n            label: L(\"Label Width\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n         },\r\n         {\r\n            view: \"counter\",\r\n            name: \"height\",\r\n            label: L(\"Height:\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n         },\r\n      ]);\r\n   }\r\n\r\n   static propertyEditorPopulate(App, ids, view) {\r\n      super.propertyEditorPopulate(App, ids, view);\r\n\r\n      this.populateDataview(ids, view);\r\n      this.populateFieldOptions(ids, view);\r\n\r\n      $$(ids.multipleSeries).setValue(\r\n         view.settings.multipleSeries ||\r\n            ABViewChartPropertyComponentDefaults.multipleSeries\r\n      );\r\n      $$(ids.dataview).setValue(\r\n         view.settings.dataviewID ||\r\n            ABViewChartPropertyComponentDefaults.dataviewID\r\n      );\r\n      $$(ids.columnValue).setValue(\r\n         view.settings.columnValue ||\r\n            ABViewChartPropertyComponentDefaults.columnValue\r\n      );\r\n      $$(ids.columnLabel).setValue(\r\n         view.settings.columnLabel ||\r\n            ABViewChartPropertyComponentDefaults.columnLabel\r\n      );\r\n      $$(ids.isPercentage).setValue(\r\n         view.settings.isPercentage != null\r\n            ? view.settings.isPercentage\r\n            : ABViewChartPropertyComponentDefaults.isPercentage\r\n      );\r\n\r\n      $$(ids.showLabel).setValue(\r\n         view.settings.showLabel ||\r\n            ABViewChartPropertyComponentDefaults.showLabel\r\n      );\r\n      $$(ids.labelPosition).setValue(\r\n         view.settings.labelPosition ||\r\n            ABViewChartPropertyComponentDefaults.labelPosition\r\n      );\r\n      $$(ids.labelWidth).setValue(\r\n         view.settings.labelWidth ||\r\n            ABViewChartPropertyComponentDefaults.labelWidth\r\n      );\r\n      $$(ids.height).setValue(\r\n         view.settings.height || ABViewChartPropertyComponentDefaults.height\r\n      );\r\n\r\n      if (view.settings.multipleSeries) {\r\n         this.populateFieldOptions2(ids, view);\r\n         $$(ids.columnValue2).setValue(\r\n            view.settings.columnValue2 ||\r\n               ABViewChartPropertyComponentDefaults.columnValue2\r\n         );\r\n      }\r\n   }\r\n\r\n   static propertyEditorValues(ids, view) {\r\n      super.propertyEditorValues(ids, view);\r\n\r\n      view.settings.multipleSeries = $$(ids.multipleSeries).getValue();\r\n      view.settings.dataviewID = $$(ids.dataview).getValue();\r\n      view.settings.columnValue = $$(ids.columnValue).getValue();\r\n      view.settings.columnLabel = $$(ids.columnLabel).getValue();\r\n      view.settings.isPercentage = $$(ids.isPercentage).getValue();\r\n\r\n      view.settings.showLabel = $$(ids.showLabel).getValue();\r\n      view.settings.labelPosition = $$(ids.labelPosition).getValue();\r\n      view.settings.labelWidth = $$(ids.labelWidth).getValue();\r\n      view.settings.height = $$(ids.height).getValue();\r\n\r\n      this.populateFieldOptions(ids, view);\r\n\r\n      if (view.settings.multipleSeries) {\r\n         view.settings.columnValue2 = $$(ids.columnValue2).getValue();\r\n         this.populateFieldOptions2(ids, view);\r\n      }\r\n\r\n      // UPDATE charts when parent properties are changed\r\n      view.views().forEach((v) => {\r\n         v.parent.refreshData();\r\n      });\r\n   }\r\n\r\n   static populateDataview(ids, view) {\r\n      // Set the objects you can choose from in the list\r\n      var objectOptions = view.propertyDatacollections();\r\n\r\n      $$(ids.dataview).define(\"options\", objectOptions);\r\n      $$(ids.dataview).refresh();\r\n   }\r\n\r\n   static populateFieldOptions(ids, view) {\r\n      // clear options\r\n      $$(ids.columnLabel).define(\"options\", []);\r\n      $$(ids.columnLabel).refresh();\r\n\r\n      $$(ids.columnValue).define(\"options\", []);\r\n      $$(ids.columnValue).refresh();\r\n\r\n      var dc = view.datacollection;\r\n      if (dc == null) return;\r\n\r\n      var obj = dc.datasource;\r\n      if (obj == null) return;\r\n\r\n      var allFields = obj.fields();\r\n      var numFields = obj.fields(\r\n         (f) => f.key == \"number\" || f.key == \"formula\" || f.key == \"calculate\"\r\n      );\r\n\r\n      var convertOption = (opt) => {\r\n         return {\r\n            id: opt.id,\r\n            value: opt.columnName,\r\n            key: opt.key,\r\n         };\r\n      };\r\n\r\n      var columnLabelOptions = allFields.map(convertOption);\r\n      var columnValueOptions = numFields.map(convertOption);\r\n\r\n      var defaultOption = {\r\n         id: \"\",\r\n         value: L(\"Select a column\"),\r\n         key: \"\",\r\n      };\r\n      columnLabelOptions.unshift(defaultOption);\r\n      columnValueOptions.unshift(defaultOption);\r\n\r\n      $$(ids.columnLabel).define(\"options\", columnLabelOptions);\r\n      $$(ids.columnLabel).refresh();\r\n      $$(ids.columnLabel).enable();\r\n\r\n      $$(ids.columnValue).define(\"options\", columnValueOptions);\r\n      $$(ids.columnValue).refresh();\r\n      $$(ids.columnValue).enable();\r\n   }\r\n\r\n   static populateFieldOptions2(ids, view) {\r\n      // clear options\r\n      $$(ids.columnValue2).define(\"options\", []);\r\n      $$(ids.columnValue2).refresh();\r\n      $$(ids.columnValue2).enable();\r\n\r\n      var dc = view.datacollection;\r\n      if (dc == null) return;\r\n\r\n      var obj = dc.datasource;\r\n      if (obj == null) return;\r\n\r\n      var numFields = obj.fields((f) => f.key == \"number\");\r\n\r\n      var convertOption = (opt) => {\r\n         return {\r\n            id: opt.id,\r\n            value: opt.columnName,\r\n            key: opt.key,\r\n         };\r\n      };\r\n\r\n      var columnValueOptions = numFields.map(convertOption);\r\n\r\n      var defaultOption = {\r\n         id: \"\",\r\n         value: L(\"Select a column\"),\r\n         key: \"\",\r\n      };\r\n      columnValueOptions.unshift(defaultOption);\r\n\r\n      $$(ids.columnValue2).define(\"options\", columnValueOptions);\r\n      $$(ids.columnValue2).refresh();\r\n   }\r\n\r\n   /**\r\n    * @method component()\r\n    * return a UI component based upon this view.\r\n    * @param {obj} App\r\n    * @return {obj} UI component\r\n    */\r\n   component(App) {\r\n      var idBase = \"ABViewChart_\" + this.id;\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n      };\r\n\r\n      // get webix.dashboard\r\n      var container = super.component(App);\r\n\r\n      var _ui = {\r\n         type: \"form\",\r\n         borderless: true,\r\n         // height: this.settings.height || ABViewChartPropertyComponentDefaults.height,\r\n         rows: [\r\n            {\r\n               // view: \"scrollview\",\r\n               body: container.ui,\r\n            },\r\n         ],\r\n      };\r\n\r\n      // make sure each of our child views get .init() called\r\n      var _init = (options, accessLevel) => {\r\n         container.init(options, accessLevel);\r\n\r\n         var currentComponent = $$(ids.component);\r\n         if (currentComponent) {\r\n            webix.extend(currentComponent, webix.ProgressBar);\r\n         }\r\n\r\n         let dc = this.datacollection;\r\n         if (dc) {\r\n            if (dc.datacollectionLink) {\r\n               this.eventAdd({\r\n                  emitter: dc.datacollectionLink,\r\n                  eventName: \"changeCursor\",\r\n                  listener: () => this.refreshData(),\r\n               });\r\n            }\r\n\r\n            this.eventAdd({\r\n               emitter: dc,\r\n               eventName: \"changeCursor\",\r\n               listener: () => this.refreshData(),\r\n            });\r\n\r\n            this.eventAdd({\r\n               emitter: dc,\r\n               eventName: \"create\",\r\n               listener: () => this.refreshData(),\r\n            });\r\n\r\n            this.eventAdd({\r\n               emitter: dc,\r\n               eventName: \"update\",\r\n               listener: () => this.refreshData(),\r\n            });\r\n\r\n            this.eventAdd({\r\n               emitter: dc,\r\n               eventName: \"delete\",\r\n               listener: () => this.refreshData(),\r\n            });\r\n\r\n            this.eventAdd({\r\n               emitter: dc,\r\n               eventName: \"initializedData\",\r\n               listener: () => this.refreshData(),\r\n            });\r\n         }\r\n      };\r\n\r\n      var _logic = {};\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: _init,\r\n         logic: _logic,\r\n\r\n         onShow: container.onShow,\r\n      };\r\n   }\r\n\r\n   getReportData() {\r\n      if (!this.dcChart) {\r\n         this.dcChart = new webix.DataCollection();\r\n      }\r\n\r\n      return this.dcChart;\r\n   }\r\n\r\n   refreshData() {\r\n      var dc = this.datacollection;\r\n      if (dc == null) return this.dcChart;\r\n\r\n      var labelCol = this.labelField();\r\n      var valueCol = this.valueField();\r\n      var valueCol2 = this.valueField2();\r\n\r\n      if (!labelCol || !valueCol) return this.dcChart;\r\n\r\n      // var labelColName = labelCol.columnName;\r\n      var numberColName = valueCol.columnName;\r\n\r\n      var numberColName2 = \"\";\r\n      if (this.settings.multipleSeries && valueCol2) {\r\n         numberColName2 = valueCol2.columnName;\r\n      }\r\n\r\n      var colorList = [\r\n         \"#ee4339\",\r\n         \"#ee9336\",\r\n         \"#eed236\",\r\n         \"#d3ee36\",\r\n         \"#a7ee70\",\r\n         \"#58dccd\",\r\n         \"#36abee\",\r\n         \"#476cee\",\r\n         \"#a244ea\",\r\n         \"#e33fc7\",\r\n      ];\r\n\r\n      var dInfo = dc.getData();\r\n\r\n      var result = [];\r\n      var sumData = {};\r\n      var sumNumber = 0;\r\n      var sumNumber2 = 0;\r\n      var countNumber = dInfo.length;\r\n      var obj;\r\n\r\n      switch (valueCol.key) {\r\n         case \"formula\":\r\n            {\r\n               obj = valueCol.object;\r\n               var objLink = this.AB.objectByID(valueCol.settings.object);\r\n               var fieldBase = obj.fieldByID(valueCol.settings.field);\r\n               var fieldLink = objLink.fieldByID(valueCol.settings.fieldLink);\r\n            }\r\n            break;\r\n\r\n         case \"calculate\":\r\n            {\r\n               obj = valueCol.object;\r\n               var place = valueCol.settings.decimalPlaces;\r\n            }\r\n            break;\r\n\r\n         default:\r\n            break;\r\n      }\r\n\r\n      dInfo.forEach((item) => {\r\n         var labelKey = labelCol.format(item) || item.id;\r\n         var numberVal = parseFloat(item[numberColName] || 0);\r\n         if (this.settings.multipleSeries) {\r\n            var numberVal2 = parseFloat(item[numberColName2]) || 0;\r\n         }\r\n\r\n         switch (valueCol.key) {\r\n            //Formula Datatype\r\n            case \"formula\":\r\n               {\r\n                  var data = item[fieldBase.relationName()];\r\n                  if (!Array.isArray(data)) {\r\n                     data = [data];\r\n                  }\r\n                  var numberList = [];\r\n\r\n                  // pull number from data\r\n                  switch (fieldLink.key) {\r\n                     case \"calculate\":\r\n                        data.forEach((d) => {\r\n                           numberList.push(\r\n                              parseFloat(fieldLink.format(d) || 0)\r\n                           );\r\n                        });\r\n                        break;\r\n                     case \"number\":\r\n                        numberList = data.map(\r\n                           (d) => d[fieldLink.columnName] || 0\r\n                        );\r\n                        break;\r\n                  }\r\n\r\n                  var result = 0;\r\n\r\n                  // calculate\r\n                  switch (valueCol.settings.type) {\r\n                     case \"sum\":\r\n                        numberList.forEach((num) => (result += num));\r\n                        break;\r\n                     case \"average\":\r\n                        if (numberList.length > 0) {\r\n                           numberList.forEach((num) => (result += num)); // sum\r\n                           result = result / numberList.length;\r\n                        }\r\n                        break;\r\n                     case \"max\":\r\n                        numberList.forEach((num) => {\r\n                           if (result < num) result = num;\r\n                        });\r\n                        break;\r\n                     case \"min\":\r\n                        numberList.forEach((num) => {\r\n                           if (result > num) result = num;\r\n                        });\r\n                        break;\r\n                     case \"count\":\r\n                        result = numberList.length;\r\n                        break;\r\n                  }\r\n                  numberVal = result;\r\n               }\r\n               break;\r\n\r\n            //Calcualte Datatype\r\n            case \"calculate\":\r\n               {\r\n                  var formula = valueCol.settings.formula;\r\n                  // replace with current date\r\n                  formula = formula.replace(/\\(CURRENT\\)/g, \"(new Date())\");\r\n\r\n                  obj.fields().forEach((f) => {\r\n                     var colName = f.columnName;\r\n                     if (colName.indexOf(\".\") > -1)\r\n                        // QUERY: get only column name\r\n                        colName = colName.split(\".\")[1];\r\n\r\n                     // if template does not contain, then should skip\r\n                     if (formula.indexOf(`{${colName}}`) < 0) return;\r\n\r\n                     // number fields\r\n                     if (f.key == \"number\") {\r\n                        let numberVal = `(${item[f.columnName] || 0})`; // (number) - NOTE : (-5) to support negative number\r\n                        formula = formula.replace(\r\n                           new RegExp(`{${colName}}`, \"g\"),\r\n                           numberVal\r\n                        );\r\n                     }\r\n                     // calculate and formula fields\r\n                     else if (f.key == \"calculate\" || f.key == \"formula\") {\r\n                        let calVal = `(${f.format(item) || 0})`;\r\n                        formula = formula.replace(\r\n                           new RegExp(`{${colName}}`, \"g\"),\r\n                           calVal\r\n                        );\r\n                     }\r\n                     // date fields\r\n                     else if (f.key == \"date\") {\r\n                        let dateVal = `\"${\r\n                           item[f.columnName] ? item[f.columnName] : \"\"\r\n                        }\"`; // \"date\"\r\n                        formula = formula.replace(\r\n                           new RegExp(`{${colName}}`, \"g\"),\r\n                           dateVal\r\n                        );\r\n                     }\r\n                     // boolean fields\r\n                     else if (f.key == \"boolean\") {\r\n                        let booleanVal = `(${item[f.columnName] || 0})`; // show 1 or 0 for boolean\r\n                        formula = formula.replace(\r\n                           new RegExp(`{${colName}}`, \"g\"),\r\n                           booleanVal\r\n                        );\r\n                     }\r\n                  });\r\n\r\n                  // decimal places - toFixed()\r\n                  // FIX: floating number calculation\r\n                  // https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/\r\n                  numberVal = parseFloat(eval(formula).toFixed(place || 0));\r\n               }\r\n               break;\r\n\r\n            default:\r\n               break;\r\n         }\r\n         if (sumData[labelKey] == null) {\r\n            var label = labelKey;\r\n\r\n            // Get label of the connect field\r\n            if (labelCol.isConnection) {\r\n               var relateValues = labelCol.pullRelationValues(item);\r\n               if (relateValues != null) {\r\n                  if (Array.isArray(relateValues))\r\n                     label = relateValues\r\n                        .map((val) => val.text || \"\")\r\n                        .join(\", \");\r\n                  else label = relateValues.text;\r\n               }\r\n            }\r\n\r\n            if (this.settings.multipleSeries) {\r\n               sumData[labelKey] = {\r\n                  label: label || item.id,\r\n                  value: 0,\r\n                  value2: 0,\r\n               };\r\n            } else {\r\n               sumData[labelKey] = {\r\n                  label: label || item.id,\r\n                  value: 0,\r\n               };\r\n            }\r\n         }\r\n\r\n         sumData[labelKey].value += numberVal;\r\n         sumNumber += numberVal;\r\n\r\n         if (this.settings.multipleSeries) {\r\n            sumData[labelKey].value2 += numberVal2;\r\n            sumNumber2 += numberVal2;\r\n         }\r\n      });\r\n\r\n      var index = 0;\r\n\r\n      for (var key in sumData) {\r\n         var val = sumData[key].value;\r\n         if (val <= 0) continue;\r\n\r\n         // Display to percent values\r\n         if (this.settings.isPercentage) {\r\n            val = (val / sumNumber) * 100;\r\n            val = Math.round(val * 100) / 100; // round decimal 2 digits\r\n            val = val + \" %\";\r\n         }\r\n\r\n         if (this.settings.multipleSeries) {\r\n            var val2 = sumData[key].value2;\r\n            if (val2 <= 0) continue;\r\n\r\n            // Display to percent values\r\n            if (this.settings.isPercentage) {\r\n               val2 = (val2 / sumNumber2) * 100;\r\n               val2 = Math.round(val2 * 100) / 100; // round decimal 2 digits\r\n               val2 = val2 + \" %\";\r\n            }\r\n\r\n            result.push({\r\n               label: sumData[key].label,\r\n               value: val,\r\n               value2: val2,\r\n               color: colorList[index % colorList.length],\r\n               count: countNumber,\r\n            });\r\n         } else {\r\n            result.push({\r\n               label: sumData[key].label,\r\n               value: val,\r\n               color: colorList[index % colorList.length],\r\n               count: countNumber,\r\n            });\r\n         }\r\n\r\n         index += 1;\r\n      }\r\n\r\n      let dcChart = this.getReportData();\r\n      dcChart.clearAll();\r\n      dcChart.parse(result);\r\n\r\n      this.emit(\"refreshData\", this.dcChart);\r\n   }\r\n};\r\n","const ABViewChartAreaCore = require(\"../../core/views/ABViewChartAreaCore\");\r\n\r\nconst ABViewChartAreaPropertyComponentDefaults = ABViewChartAreaCore.defaultValues();\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABViewChartArea extends ABViewChartAreaCore {\r\n   // constructor(values, application, parent, defaultValues) {\r\n   //    super(values, application, parent, defaultValues);\r\n   // }\r\n\r\n   //\r\n   //\tEditor Related\r\n   //\r\n\r\n   /**\r\n    * @method editorComponent\r\n    * return the Editor for this UI component.\r\n    * the editor should display either a \"block\" view or \"preview\" of\r\n    * the current layout of the view.\r\n    * @param {string} mode what mode are we in ['block', 'preview']\r\n    * @return {Component}\r\n    */\r\n   editorComponent(App, mode) {\r\n      let idBase = \"ABViewChartAreaEditorComponent\";\r\n      let ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n      };\r\n      let baseEditor = super.editorComponent(App, mode, {\r\n         componentId: ids.component,\r\n      });\r\n\r\n      return baseEditor;\r\n   }\r\n\r\n   //\r\n   // Property Editor\r\n   //\r\n\r\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\r\n      var commonUI = super.propertyEditorDefaultElements(\r\n         App,\r\n         ids,\r\n         _logic,\r\n         ObjectDefaults\r\n      );\r\n\r\n      // in addition to the common .label  values, we\r\n      // ask for:\r\n      return commonUI.concat([\r\n         {\r\n            name: \"areaType\",\r\n            view: \"richselect\",\r\n            label: L(\"Chart Type\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n            options: [\r\n               {\r\n                  id: \"area\",\r\n                  value: L(\"Area\"),\r\n               },\r\n               {\r\n                  id: \"stackedArea\",\r\n                  value: L(\"Stacked Area\"),\r\n               },\r\n            ],\r\n         },\r\n         // {\r\n         // \tname: 'chartWidth',\r\n         // \tview: 'counter',\r\n         // \tmin: 1,\r\n         // \tlabel: L('ab.component.chart.area.chartWidth', '*Width')\r\n         // },\r\n         {\r\n            name: \"chartHeight\",\r\n            view: \"counter\",\r\n            min: 1,\r\n            label: L(\"Height\"),\r\n         },\r\n         {\r\n            name: \"stepValue\",\r\n            view: \"counter\",\r\n            min: 1,\r\n            label: L(\"Step\"),\r\n         },\r\n         {\r\n            name: \"maxValue\",\r\n            view: \"counter\",\r\n            min: 1,\r\n            label: L(\"Max Value\"),\r\n         },\r\n         {\r\n            name: \"labelFontSize\",\r\n            view: \"counter\",\r\n            min: 1,\r\n            label: L(\"Label Font Size\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthXLarge,\r\n         },\r\n         {\r\n            name: \"isLegend\",\r\n            view: \"checkbox\",\r\n            labelRight: L(\"Show Legend\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthCheckbox,\r\n         },\r\n      ]);\r\n   }\r\n\r\n   static propertyEditorPopulate(App, ids, view) {\r\n      super.propertyEditorPopulate(App, ids, view);\r\n\r\n      // Make sure you set the values for this property editor in Webix\r\n      // $$(ids.chartWidth).setValue(view.settings.chartWidth != null ? view.settings.chartWidth : ABViewChartAreaPropertyComponentDefaults.chartWidth);\r\n      $$(ids.chartHeight).setValue(\r\n         view.settings.chartHeight != null\r\n            ? view.settings.chartHeight\r\n            : ABViewChartAreaPropertyComponentDefaults.chartHeight\r\n      );\r\n      $$(ids.labelFontSize).setValue(\r\n         view.settings.labelFontSize != null\r\n            ? view.settings.labelFontSize\r\n            : ABViewChartAreaPropertyComponentDefaults.labelFontSize\r\n      );\r\n      $$(ids.stepValue).setValue(\r\n         view.settings.stepValue != null\r\n            ? view.settings.stepValue\r\n            : ABViewChartAreaPropertyComponentDefaults.stepValue\r\n      );\r\n      $$(ids.maxValue).setValue(\r\n         view.settings.maxValue != null\r\n            ? view.settings.maxValue\r\n            : ABViewChartAreaPropertyComponentDefaults.maxValue\r\n      );\r\n      $$(ids.areaType).setValue(\r\n         view.settings.areaType != null\r\n            ? view.settings.areaType\r\n            : ABViewChartAreaPropertyComponentDefaults.areaType\r\n      );\r\n      $$(ids.isLegend).setValue(\r\n         view.settings.isLegend != null\r\n            ? view.settings.isLegend\r\n            : ABViewChartAreaPropertyComponentDefaults.isLegend\r\n      );\r\n   }\r\n\r\n   static propertyEditorValues(ids, view) {\r\n      super.propertyEditorValues(ids, view);\r\n\r\n      // Retrive the values of your properties from Webix and store them in the view\r\n      view.settings.areaType = $$(ids.areaType).getValue();\r\n      view.settings.isLegend = $$(ids.isLegend).getValue();\r\n      // view.settings.chartWidth = $$(ids.chartWidth).getValue();\r\n      view.settings.chartHeight = $$(ids.chartHeight).getValue();\r\n      view.settings.labelFontSize = $$(ids.labelFontSize).getValue();\r\n      view.settings.stepValue = $$(ids.stepValue).getValue();\r\n      view.settings.maxValue = $$(ids.maxValue).getValue();\r\n   }\r\n\r\n   /**\r\n    * @method component()\r\n    * return a UI component based upon this view.\r\n    * @param {obj} App\r\n    * @return {obj} UI component\r\n    */\r\n   component(App) {\r\n      let baseComp = super.component(App);\r\n\r\n      // get a UI component for each of our child views\r\n      var viewComponents = [];\r\n      this.views().forEach((v) => {\r\n         viewComponents.push(v.component(App));\r\n      });\r\n\r\n      var idBase = \"ABViewChartArea_\" + this.id;\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n      };\r\n\r\n      var _ui = {\r\n         id: ids.component,\r\n         view: \"chart\",\r\n         type:\r\n            this.settings.areaType != null\r\n               ? this.settings.areaType\r\n               : ABViewChartAreaPropertyComponentDefaults.areaType,\r\n         yAxis: {\r\n            start: 0,\r\n            step:\r\n               this.settings.stepValue != null\r\n                  ? this.settings.stepValue\r\n                  : ABViewChartAreaPropertyComponentDefaults.stepValue, //\"#stepValue#\",\r\n            end:\r\n               this.settings.maxValue != null\r\n                  ? this.settings.maxValue\r\n                  : ABViewChartAreaPropertyComponentDefaults.maxValue, //\"#maxValue#\"\r\n         },\r\n         xAxis: {\r\n            template:\r\n               this.settings.isLegend == true\r\n                  ? \"<div style='font-size:\" +\r\n                    this.settings.labelFontSize +\r\n                    \"px;'>#label#</div>\"\r\n                  : \"\",\r\n         },\r\n         legend:\r\n            this.settings.isLegend == true\r\n               ? {\r\n                    template:\r\n                       \"<div style='font-size:\" +\r\n                       this.settings.labelFontSize +\r\n                       \"px;'>#label#</div>\",\r\n                    values: [], // TODO : bug in webix 5.1.7\r\n                 }\r\n               : null,\r\n         series: [\r\n            {\r\n               alpha: 0.7,\r\n               value: \"#value#\",\r\n               color: \"#ee4339\",\r\n            },\r\n            {\r\n               alpha: 0.4,\r\n               value: \"#value2#\",\r\n               color: \"#a7ee70\",\r\n            },\r\n         ],\r\n         // height: this.settings.chartHeight != null ? this.settings.chartHeight : ABViewChartAreaPropertyComponentDefaults.chartHeight,\r\n         // width: this.settings.chartWidth != null ? this.settings.chartWidth : ABViewChartAreaPropertyComponentDefaults.chartWidth,\r\n         // data: reportData\r\n      };\r\n\r\n      if (this.settings.chartHeight) _ui.height = this.settings.chartHeight;\r\n\r\n      // make sure each of our child views get .init() called\r\n      let _init = (options) => {\r\n         baseComp.init({\r\n            componentId: ids.component,\r\n         });\r\n      };\r\n      let _logic = baseComp.logic;\r\n      let _onShow = baseComp.onShow;\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: _init,\r\n         logic: _logic,\r\n\r\n         onShow: _onShow,\r\n      };\r\n   }\r\n};\r\n","const ABViewChartBarCore = require(\"../../core/views/ABViewChartBarCore\");\r\n\r\nconst ABViewChartBarPropertyComponentDefaults = ABViewChartBarCore.defaultValues();\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABViewChartBar extends ABViewChartBarCore {\r\n   // constructor(values, application, parent, defaultValues) {\r\n   //    super(values, application, parent, defaultValues);\r\n   // }\r\n\r\n   //\r\n   //\tEditor Related\r\n   //\r\n\r\n   /**\r\n    * @method editorComponent\r\n    * return the Editor for this UI component.\r\n    * the editor should display either a \"block\" view or \"preview\" of\r\n    * the current layout of the view.\r\n    * @param {string} mode what mode are we in ['block', 'preview']\r\n    * @return {Component}\r\n    */\r\n   editorComponent(App, mode) {\r\n      let idBase = \"ABViewChartBarEditorComponent\";\r\n      let ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n      };\r\n\r\n      let baseEditor = super.editorComponent(App, mode, {\r\n         componentId: ids.component,\r\n      });\r\n\r\n      return baseEditor;\r\n   }\r\n\r\n   //\r\n   // Property Editor\r\n   //\r\n\r\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\r\n      var commonUI = super.propertyEditorDefaultElements(\r\n         App,\r\n         ids,\r\n         _logic,\r\n         ObjectDefaults\r\n      );\r\n\r\n      // in addition to the common .label  values, we\r\n      // ask for:\r\n      return commonUI.concat([\r\n         {\r\n            name: \"barType\",\r\n            view: \"richselect\",\r\n            label: L(\"Chart Type\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n            options: [\r\n               {\r\n                  id: \"bar\",\r\n                  value: L(\"Vertical\"),\r\n               },\r\n               {\r\n                  id: \"barH\",\r\n                  value: L(\"Horizontal\"),\r\n               },\r\n            ],\r\n         },\r\n         {\r\n            name: \"barPreset\",\r\n            view: \"richselect\",\r\n            label: L(\"Chart Preset\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n            options: [\r\n               {\r\n                  id: \"column\",\r\n                  value: L(\"Column\"),\r\n               },\r\n               {\r\n                  id: \"stick\",\r\n                  value: L(\"Stick\"),\r\n               },\r\n               {\r\n                  id: \"alpha\",\r\n                  value: L(\"Alpha\"),\r\n               },\r\n            ],\r\n         },\r\n         // {\r\n         // \tname: 'chartWidth',\r\n         // \tview: 'counter',\r\n         // \tmin: 1,\r\n         // \tlabel: L('ab.component.chart.bar.chartWidth', '*Width')\r\n         // },\r\n         {\r\n            name: \"height\",\r\n            view: \"counter\",\r\n            min: 1,\r\n            label: L(\"Height\"),\r\n         },\r\n         {\r\n            name: \"stepValue\",\r\n            view: \"counter\",\r\n            min: 1,\r\n            label: L(\"Step\"),\r\n         },\r\n         {\r\n            name: \"maxValue\",\r\n            view: \"counter\",\r\n            min: 1,\r\n            label: L(\"Max Value\"),\r\n         },\r\n         {\r\n            name: \"labelFontSize\",\r\n            view: \"counter\",\r\n            min: 1,\r\n            label: L(\"Label Font Size\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthXLarge,\r\n         },\r\n         {\r\n            name: \"isLegend\",\r\n            view: \"checkbox\",\r\n            labelRight: L(\"Show Legend\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthCheckbox,\r\n         },\r\n      ]);\r\n   }\r\n\r\n   static propertyEditorPopulate(App, ids, view) {\r\n      super.propertyEditorPopulate(App, ids, view);\r\n\r\n      // Make sure you set the values for this property editor in Webix\r\n      // $$(ids.chartWidth).setValue(view.settings.chartWidth != null ? view.settings.chartWidth : ABViewChartBarPropertyComponentDefaults.chartWidth);\r\n      $$(ids.height).setValue(\r\n         view.settings.height != null\r\n            ? view.settings.height\r\n            : ABViewChartBarPropertyComponentDefaults.height\r\n      );\r\n      $$(ids.labelFontSize).setValue(\r\n         view.settings.labelFontSize != null\r\n            ? view.settings.labelFontSize\r\n            : ABViewChartBarPropertyComponentDefaults.labelFontSize\r\n      );\r\n      $$(ids.stepValue).setValue(\r\n         view.settings.stepValue != null\r\n            ? view.settings.stepValue\r\n            : ABViewChartBarPropertyComponentDefaults.stepValue\r\n      );\r\n      $$(ids.maxValue).setValue(\r\n         view.settings.maxValue != null\r\n            ? view.settings.maxValue\r\n            : ABViewChartBarPropertyComponentDefaults.maxValue\r\n      );\r\n      $$(ids.barType).setValue(\r\n         view.settings.barType != null\r\n            ? view.settings.barType\r\n            : ABViewChartBarPropertyComponentDefaults.barType\r\n      );\r\n      $$(ids.barPreset).setValue(\r\n         view.settings.barPreset != null\r\n            ? view.settings.barPreset\r\n            : ABViewChartBarPropertyComponentDefaults.barPreset\r\n      );\r\n      $$(ids.isLegend).setValue(\r\n         view.settings.isLegend != null\r\n            ? view.settings.isLegend\r\n            : ABViewChartBarPropertyComponentDefaults.isLegend\r\n      );\r\n   }\r\n\r\n   static propertyEditorValues(ids, view) {\r\n      super.propertyEditorValues(ids, view);\r\n\r\n      // Retrive the values of your properties from Webix and store them in the view\r\n      view.settings.barType = $$(ids.barType).getValue();\r\n      view.settings.barPreset = $$(ids.barPreset).getValue();\r\n      view.settings.isLegend = $$(ids.isLegend).getValue();\r\n      // view.settings.chartWidth = $$(ids.chartWidth).getValue();\r\n      view.settings.height = $$(ids.height).getValue();\r\n      view.settings.labelFontSize = $$(ids.labelFontSize).getValue();\r\n      view.settings.stepValue = $$(ids.stepValue).getValue();\r\n      view.settings.maxValue = $$(ids.maxValue).getValue();\r\n   }\r\n\r\n   /**\r\n    * @method component()\r\n    * return a UI component based upon this view.\r\n    * @param {obj} App\r\n    * @return {obj} UI component\r\n    */\r\n   component(App) {\r\n      let baseComp = super.component(App);\r\n\r\n      // get a UI component for each of our child views\r\n      var viewComponents = [];\r\n      this.views().forEach((v) => {\r\n         viewComponents.push(v.component(App));\r\n      });\r\n\r\n      var idBase = \"ABViewChartBar_\" + this.id;\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n      };\r\n      var _ui;\r\n\r\n      if (this.settings.barType == \"bar\" || this.settings.barType == null) {\r\n         _ui = {\r\n            id: ids.component,\r\n            view: \"chart\",\r\n            type:\r\n               this.settings.barType != null\r\n                  ? this.settings.barType\r\n                  : ABViewChartBarPropertyComponentDefaults.barType,\r\n            preset:\r\n               this.settings.barPreset != null\r\n                  ? this.settings.barPreset\r\n                  : ABViewChartBarPropertyComponentDefaults.barPreset,\r\n            value: \"#value#\",\r\n            color: \"#color#\",\r\n            yAxis: {\r\n               start: 0,\r\n               step:\r\n                  this.settings.stepValue != null\r\n                     ? this.settings.stepValue\r\n                     : ABViewChartBarPropertyComponentDefaults.stepValue, //\"#stepValue#\",\r\n               end:\r\n                  this.settings.maxValue != null\r\n                     ? this.settings.maxValue\r\n                     : ABViewChartBarPropertyComponentDefaults.maxValue, //\"#maxValue#\"\r\n            },\r\n            xAxis: {\r\n               template:\r\n                  this.settings.isLegend == true\r\n                     ? \"<div style='font-size:\" +\r\n                       this.settings.labelFontSize +\r\n                       \"px;'>#label#</div>\"\r\n                     : \"\",\r\n            },\r\n            legend:\r\n               this.settings.isLegend == true\r\n                  ? \"<div style='font-size:\" +\r\n                    this.settings.labelFontSize +\r\n                    \"px;'>#label#</div>\"\r\n                  : \"\",\r\n            height:\r\n               this.settings.height != null\r\n                  ? this.settings.height\r\n                  : ABViewChartBarPropertyComponentDefaults.height,\r\n            // width: this.settings.chartWidth != null ? this.settings.chartWidth : ABViewChartBarPropertyComponentDefaults.chartWidth,\r\n            // data: reportData\r\n         };\r\n      } else {\r\n         _ui = {\r\n            id: ids.component,\r\n            view: \"chart\",\r\n            type:\r\n               this.settings.barType != null\r\n                  ? this.settings.barType\r\n                  : ABViewChartBarPropertyComponentDefaults.barType,\r\n            preset:\r\n               this.settings.barPreset != null\r\n                  ? this.settings.barPreset\r\n                  : ABViewChartBarPropertyComponentDefaults.barPreset,\r\n            value: \"#value#\",\r\n            color: \"#color#\",\r\n            yAxis: {\r\n               template:\r\n                  this.settings.isLegend == true\r\n                     ? \"<div style='font-size:\" +\r\n                       this.settings.labelFontSize +\r\n                       \"px;'>#label#</div>\"\r\n                     : \"\",\r\n            },\r\n            xAxis: {\r\n               start: 0,\r\n               step: \"#stepValue#\",\r\n               end: \"#maxValue#\",\r\n            },\r\n            legend:\r\n               this.settings.isLegend == true\r\n                  ? {\r\n                       template:\r\n                          \"<div style='font-size:\" +\r\n                          this.settings.labelFontSize +\r\n                          \"px;'>#label#</div>\",\r\n                       values: [], // TODO : bug in webix 5.1.7\r\n                    }\r\n                  : null,\r\n            height:\r\n               this.settings.height != null\r\n                  ? this.settings.height\r\n                  : ABViewChartBarPropertyComponentDefaults.height,\r\n            // width: this.settings.chartWidth != null ? this.settings.chartWidth : ABViewChartBarPropertyComponentDefaults.chartWidth,\r\n            // data: reportData\r\n         };\r\n      }\r\n\r\n      let _init = () => {\r\n         baseComp.init({\r\n            componentId: ids.component,\r\n         });\r\n      };\r\n      let _logic = baseComp.logic;\r\n      let _onShow = baseComp.onShow;\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: _init,\r\n         logic: _logic,\r\n\r\n         onShow: _onShow,\r\n      };\r\n   }\r\n};\r\n","const ABViewWidget = require(\"./ABViewWidget\");\r\n\r\nmodule.exports = class ABViewChartComponent extends ABViewWidget {\r\n   editorComponent(App, mode, options) {\r\n      let component = this.component(App);\r\n      let _ui = component.ui;\r\n      _ui.id = options.componentId;\r\n\r\n      let _init = () => {\r\n         component.init({\r\n            componentId: _ui.id,\r\n         });\r\n      };\r\n      let _logic = component.logic;\r\n      let _onShow = component.onShow;\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: _init,\r\n         logic: _logic,\r\n         onShow: _onShow,\r\n      };\r\n   }\r\n\r\n   /**\r\n    * @method component()\r\n    * return a UI component based upon this view.\r\n    * @param {obj} App\r\n    * @return {obj} UI component\r\n    */\r\n   component(App) {\r\n      // make sure each of our child views get .init() called\r\n      var _init = (options) => {\r\n         this._componentId = options.componentId;\r\n\r\n         this.eventAdd({\r\n            emitter: this.parent,\r\n            eventName: \"refreshData\",\r\n            listener: (reportData) => {\r\n               // If this widget does not show, then will not refresh data\r\n               if (this._isShow) _logic.refreshData(reportData);\r\n            },\r\n         });\r\n      };\r\n\r\n      var _logic = {\r\n         setValue: (componentId, val) => {\r\n            if ($$(componentId)) $$(componentId).setValues({ display: val });\r\n         },\r\n\r\n         onShow: () => {\r\n            // if (!this._isShow) {\r\n\r\n            // Mark this widget is showing\r\n            this._isShow = true;\r\n\r\n            let reportData = this.parent.getReportData();\r\n            _logic.refreshData(reportData);\r\n            // }\r\n         },\r\n\r\n         refreshData: (reportData) => {\r\n            let comp = $$(this._componentId);\r\n            if (comp && comp.data) comp.data.sync(reportData);\r\n         },\r\n      };\r\n\r\n      return {\r\n         // ui: _ui,\r\n         init: _init,\r\n         logic: _logic,\r\n\r\n         onShow: _logic.onShow,\r\n      };\r\n   }\r\n};\r\n","const ABViewChartLineCore = require(\"../../core/views/ABViewChartLineCore\");\r\n\r\nconst ABViewChartLinePropertyComponentDefaults = ABViewChartLineCore.defaultValues();\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABViewChartLine extends ABViewChartLineCore {\r\n   // constructor(values, application, parent, defaultValues) {\r\n   //    super(values, application, parent, defaultValues);\r\n   // }\r\n\r\n   //\r\n   //\tEditor Related\r\n   //\r\n\r\n   /**\r\n    * @method editorComponent\r\n    * return the Editor for this UI component.\r\n    * the editor should display either a \"block\" view or \"preview\" of\r\n    * the current layout of the view.\r\n    * @param {string} mode what mode are we in ['block', 'preview']\r\n    * @return {Component}\r\n    */\r\n   editorComponent(App, mode) {\r\n      let idBase = \"ABViewChartLineEditorComponent\";\r\n      let ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n      };\r\n\r\n      let baseEditor = super.editorComponent(App, mode, {\r\n         componentId: ids.component,\r\n      });\r\n\r\n      return baseEditor;\r\n   }\r\n\r\n   //\r\n   // Property Editor\r\n   //\r\n\r\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\r\n      var commonUI = super.propertyEditorDefaultElements(\r\n         App,\r\n         ids,\r\n         _logic,\r\n         ObjectDefaults\r\n      );\r\n\r\n      // in addition to the common .label  values, we\r\n      // ask for:\r\n      return commonUI.concat([\r\n         {\r\n            name: \"lineType\",\r\n            view: \"richselect\",\r\n            label: L(\"Chart Type\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n            options: [\r\n               {\r\n                  id: \"line\",\r\n                  value: L(\"Line\"),\r\n               },\r\n               {\r\n                  id: \"spline\",\r\n                  value: L(\"Spline\"),\r\n               },\r\n            ],\r\n         },\r\n         {\r\n            name: \"linePreset\",\r\n            view: \"richselect\",\r\n            label: L(\"Chart Preset\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n            options: [\r\n               {\r\n                  id: \"plot\",\r\n                  value: L(\"Plot\"),\r\n               },\r\n               {\r\n                  id: \"diamond\",\r\n                  value: L(\"Diamond\"),\r\n               },\r\n               {\r\n                  id: \"simple\",\r\n                  value: L(\"Simple\"),\r\n               },\r\n            ],\r\n         },\r\n         // {\r\n         // \tname: 'chartWidth',\r\n         // \tview: 'counter',\r\n         // \tmin: 1,\r\n         // \tlabel: L('ab.component.chart.line.chartWidth', '*Width')\r\n         // },\r\n         {\r\n            name: \"chartHeight\",\r\n            view: \"counter\",\r\n            min: 1,\r\n            label: L(\"Height\"),\r\n         },\r\n         {\r\n            name: \"stepValue\",\r\n            view: \"counter\",\r\n            min: 1,\r\n            label: L(\"Step\"),\r\n         },\r\n         {\r\n            name: \"maxValue\",\r\n            view: \"counter\",\r\n            min: 1,\r\n            label: L(\"Max Value\"),\r\n         },\r\n         {\r\n            name: \"labelFontSize\",\r\n            view: \"counter\",\r\n            min: 1,\r\n            label: L(\"Label Font Size\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthXLarge,\r\n         },\r\n         {\r\n            name: \"isLegend\",\r\n            view: \"checkbox\",\r\n            labelRight: L(\"Show Legend\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthCheckbox,\r\n         },\r\n      ]);\r\n   }\r\n\r\n   static propertyEditorPopulate(App, ids, view) {\r\n      super.propertyEditorPopulate(App, ids, view);\r\n\r\n      // Make sure you set the values for this property editor in Webix\r\n      // $$(ids.chartWidth).setValue(view.settings.chartWidth != null ? view.settings.chartWidth : ABViewChartLinePropertyComponentDefaults.chartWidth);\r\n      $$(ids.chartHeight).setValue(\r\n         view.settings.chartHeight != null\r\n            ? view.settings.chartHeight\r\n            : ABViewChartLinePropertyComponentDefaults.chartHeight\r\n      );\r\n      $$(ids.labelFontSize).setValue(\r\n         view.settings.labelFontSize != null\r\n            ? view.settings.labelFontSize\r\n            : ABViewChartLinePropertyComponentDefaults.labelFontSize\r\n      );\r\n      $$(ids.stepValue).setValue(\r\n         view.settings.stepValue != null\r\n            ? view.settings.stepValue\r\n            : ABViewChartLinePropertyComponentDefaults.stepValue\r\n      );\r\n      $$(ids.maxValue).setValue(\r\n         view.settings.maxValue != null\r\n            ? view.settings.maxValue\r\n            : ABViewChartLinePropertyComponentDefaults.maxValue\r\n      );\r\n      $$(ids.lineType).setValue(\r\n         view.settings.lineType != null\r\n            ? view.settings.lineType\r\n            : ABViewChartLinePropertyComponentDefaults.lineType\r\n      );\r\n      $$(ids.linePreset).setValue(\r\n         view.settings.linePreset != null\r\n            ? view.settings.linePreset\r\n            : ABViewChartLinePropertyComponentDefaults.linePreset\r\n      );\r\n      $$(ids.isLegend).setValue(\r\n         view.settings.isLegend != null\r\n            ? view.settings.isLegend\r\n            : ABViewChartLinePropertyComponentDefaults.isLegend\r\n      );\r\n   }\r\n\r\n   static propertyEditorValues(ids, view) {\r\n      super.propertyEditorValues(ids, view);\r\n\r\n      // Retrive the values of your properties from Webix and store them in the view\r\n      view.settings.lineType = $$(ids.lineType).getValue();\r\n      view.settings.linePreset = $$(ids.linePreset).getValue();\r\n      view.settings.isLegend = $$(ids.isLegend).getValue();\r\n      // view.settings.chartWidth = $$(ids.chartWidth).getValue();\r\n      view.settings.chartHeight = $$(ids.chartHeight).getValue();\r\n      view.settings.labelFontSize = $$(ids.labelFontSize).getValue();\r\n      view.settings.stepValue = $$(ids.stepValue).getValue();\r\n      view.settings.maxValue = $$(ids.maxValue).getValue();\r\n   }\r\n\r\n   /**\r\n    * @method component()\r\n    * return a UI component based upon this view.\r\n    * @param {obj} App\r\n    * @return {obj} UI component\r\n    */\r\n   component(App) {\r\n      let baseComp = super.component(App);\r\n\r\n      // get a UI component for each of our child views\r\n      var viewComponents = [];\r\n      this.views().forEach((v) => {\r\n         viewComponents.push(v.component(App));\r\n      });\r\n\r\n      var idBase = \"ABViewChartLine_\" + this.id;\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n      };\r\n\r\n      var _ui = {\r\n         id: ids.component,\r\n         view: \"chart\",\r\n         type:\r\n            this.settings.lineType != null\r\n               ? this.settings.lineType\r\n               : ABViewChartLinePropertyComponentDefaults.lineType,\r\n         preset:\r\n            this.settings.linePreset != null\r\n               ? this.settings.linePreset\r\n               : ABViewChartLinePropertyComponentDefaults.linePreset,\r\n         value: \"#value#\",\r\n         color: \"#color#\",\r\n         yAxis: {\r\n            start: 0,\r\n            step:\r\n               this.settings.stepValue != null\r\n                  ? this.settings.stepValue\r\n                  : ABViewChartLinePropertyComponentDefaults.stepValue, //\"#stepValue#\",\r\n            end:\r\n               this.settings.maxValue != null\r\n                  ? this.settings.maxValue\r\n                  : ABViewChartLinePropertyComponentDefaults.maxValue, //\"#maxValue#\"\r\n         },\r\n         xAxis: {\r\n            template:\r\n               this.settings.isLegend == true\r\n                  ? \"<div style='font-size:\" +\r\n                    this.settings.labelFontSize +\r\n                    \"px;'>#label#</div>\"\r\n                  : \"\",\r\n         },\r\n         legend:\r\n            this.settings.isLegend == true\r\n               ? {\r\n                    template:\r\n                       \"<div style='font-size:\" +\r\n                       this.settings.labelFontSize +\r\n                       \"px;'>#label#</div>\",\r\n                    values: [], // TODO : bug in webix 5.1.7\r\n                 }\r\n               : null,\r\n         height:\r\n            this.settings.chartHeight != null\r\n               ? this.settings.chartHeight\r\n               : ABViewChartLinePropertyComponentDefaults.chartHeight,\r\n         // width: this.settings.chartWidth != null ? this.settings.chartWidth : ABViewChartLinePropertyComponentDefaults.chartWidth,\r\n         // data: reportData\r\n      };\r\n\r\n      let _init = () => {\r\n         baseComp.init({\r\n            componentId: ids.component,\r\n         });\r\n      };\r\n      let _logic = baseComp.logic;\r\n      let _onShow = baseComp.onShow;\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: _init,\r\n         logic: _logic,\r\n\r\n         onShow: _onShow,\r\n      };\r\n   }\r\n};\r\n","const ABViewChartPieCore = require(\"../../core/views/ABViewChartPieCore\");\r\n\r\nconst ABViewChartPiePropertyComponentDefaults = ABViewChartPieCore.defaultValues();\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABViewChartPie extends ABViewChartPieCore {\r\n   // constructor(values, application, parent, defaultValues) {\r\n   //    super(values, application, parent, defaultValues);\r\n   // }\r\n\r\n   //\r\n   //\tEditor Related\r\n   //\r\n\r\n   /**\r\n    * @method editorComponent\r\n    * return the Editor for this UI component.\r\n    * the editor should display either a \"block\" view or \"preview\" of\r\n    * the current layout of the view.\r\n    * @param {string} mode what mode are we in ['block', 'preview']\r\n    * @return {Component}\r\n    */\r\n   editorComponent(App, mode) {\r\n      let idBase = \"ABViewChartPieEditorComponent\";\r\n      // let ids = {\r\n      //    component: App.unique(idBase + \"_component\")\r\n      // };\r\n\r\n      // let baseEditor = super.editorComponent(App, mode, {\r\n      //    componentId: ids.component\r\n      // });\r\n\r\n      // return baseEditor;\r\n\r\n      return this.component(App, idBase);\r\n   }\r\n\r\n   //\r\n   // Property Editor\r\n   //\r\n\r\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\r\n      var commonUI = super.propertyEditorDefaultElements(\r\n         App,\r\n         ids,\r\n         _logic,\r\n         ObjectDefaults\r\n      );\r\n\r\n      // in addition to the common .label  values, we\r\n      // ask for:\r\n      return commonUI.concat([\r\n         {\r\n            name: \"pieType\",\r\n            view: \"richselect\",\r\n            label: L(\"Chart Type\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n            options: [\r\n               {\r\n                  id: \"pie\",\r\n                  value: L(\"Standard\"),\r\n               },\r\n               {\r\n                  id: \"pie3D\",\r\n                  value: L(\"Pie3D\"),\r\n               },\r\n               {\r\n                  id: \"donut\",\r\n                  value: L(\"Donut\"),\r\n               },\r\n            ],\r\n         },\r\n         // {\r\n         // \tname: 'chartWidth',\r\n         // \tview: 'counter',\r\n         // \tmin: 1,\r\n         // \tlabel: L('ab.component.chart.pie.chartWidth', '*Width')\r\n         // },\r\n         {\r\n            name: \"height\",\r\n            view: \"counter\",\r\n            min: 1,\r\n            label: L(\"Height\"),\r\n         },\r\n         {\r\n            name: \"innerFontSize\",\r\n            view: \"counter\",\r\n            min: 1,\r\n            label: L(\"Inner Font Size\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthXLarge,\r\n         },\r\n         {\r\n            name: \"labelFontSize\",\r\n            view: \"counter\",\r\n            min: 1,\r\n            label: L(\"Label Font Size\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthXLarge,\r\n         },\r\n         {\r\n            name: \"isLegend\",\r\n            view: \"checkbox\",\r\n            labelRight: L(\"Show Legend\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthCheckbox,\r\n         },\r\n      ]);\r\n   }\r\n\r\n   static propertyEditorPopulate(App, ids, view) {\r\n      super.propertyEditorPopulate(App, ids, view);\r\n\r\n      // Make sure you set the values for this property editor in Webix\r\n      // $$(ids.chartWidth).setValue(view.settings.chartWidth != null ? view.settings.chartWidth : ABViewChartPiePropertyComponentDefaults.chartWidth);\r\n      $$(ids.height).setValue(\r\n         view.settings.height != null\r\n            ? view.settings.height\r\n            : ABViewChartPiePropertyComponentDefaults.height\r\n      );\r\n      $$(ids.innerFontSize).setValue(\r\n         view.settings.innerFontSize != null\r\n            ? view.settings.innerFontSize\r\n            : ABViewChartPiePropertyComponentDefaults.innerFontSize\r\n      );\r\n      $$(ids.labelFontSize).setValue(\r\n         view.settings.labelFontSize != null\r\n            ? view.settings.labelFontSize\r\n            : ABViewChartPiePropertyComponentDefaults.labelFontSize\r\n      );\r\n      $$(ids.pieType).setValue(\r\n         view.settings.pieType != null\r\n            ? view.settings.pieType\r\n            : ABViewChartPiePropertyComponentDefaults.pieType\r\n      );\r\n      $$(ids.isLegend).setValue(\r\n         view.settings.isLegend != null\r\n            ? view.settings.isLegend\r\n            : ABViewChartPiePropertyComponentDefaults.isLegend\r\n      );\r\n   }\r\n\r\n   static propertyEditorValues(ids, view) {\r\n      super.propertyEditorValues(ids, view);\r\n\r\n      // Retrive the values of your properties from Webix and store them in the view\r\n      view.settings.pieType = $$(ids.pieType).getValue();\r\n      view.settings.isLegend = $$(ids.isLegend).getValue();\r\n      // view.settings.chartWidth = $$(ids.chartWidth).getValue();\r\n      view.settings.height = $$(ids.height).getValue();\r\n      view.settings.innerFontSize = $$(ids.innerFontSize).getValue();\r\n      view.settings.labelFontSize = $$(ids.labelFontSize).getValue();\r\n   }\r\n\r\n   /**\r\n    * @method component()\r\n    * return a UI component based upon this view.\r\n    * @param {obj} App\r\n    * @return {obj} UI component\r\n    */\r\n   component(App, idBase) {\r\n      let baseComp = super.component(App);\r\n\r\n      // get a UI component for each of our child views\r\n      var viewComponents = [];\r\n      this.views().forEach((v) => {\r\n         viewComponents.push(v.component(App));\r\n      });\r\n\r\n      idBase = idBase || \"ABViewChartPie_\" + this.id;\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n      };\r\n\r\n      let legend = null;\r\n      if (this.settings.isLegend == true) {\r\n         legend = {\r\n            width: this.parent.settings.labelWidth,\r\n            template:\r\n               this.settings.isLegend == true\r\n                  ? `<div style='font-size: ${this.settings.labelFontSize}px;'>#label#</div>`\r\n                  : \"\",\r\n         };\r\n      }\r\n\r\n      var _ui = {\r\n         id: ids.component,\r\n         view: \"chart\",\r\n         type:\r\n            this.settings.pieType != null\r\n               ? this.settings.pieType\r\n               : ABViewChartPiePropertyComponentDefaults.pieType,\r\n         value: \"#value#\",\r\n         color: \"#color#\",\r\n         legend: legend,\r\n         pieInnerText: `<div style='font-size: ${this.settings.innerFontSize}px;'>#value#</div>`,\r\n         shadow: 1,\r\n         height:\r\n            this.settings.height != null\r\n               ? this.settings.height\r\n               : ABViewChartPiePropertyComponentDefaults.height,\r\n         // width: this.settings.chartWidth != null ? this.settings.chartWidth : ABViewChartPiePropertyComponentDefaults.chartWidth,\r\n         // data: reportData\r\n      };\r\n\r\n      let _init = () => {\r\n         baseComp.init({\r\n            componentId: ids.component,\r\n         });\r\n      };\r\n      let _logic = baseComp.logic;\r\n      let _onShow = baseComp.onShow;\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: _init,\r\n         logic: _logic,\r\n\r\n         onShow: _onShow,\r\n      };\r\n   }\r\n};\r\n","const ABViewCommentCore = require(\"../../core/views/ABViewCommentCore\");\r\n\r\nconst ABViewCommentPropertyComponentDefaults = ABViewCommentCore.defaultValues();\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABViewComment extends ABViewCommentCore {\r\n   // constructor(values, application, parent, defaultValues) {\r\n   //    super(values, application, parent, defaultValues);\r\n   // }\r\n\r\n   //\r\n   //\tEditor Related\r\n   //\r\n\r\n   /**\r\n    * @method editorComponent\r\n    * return the Editor for this UI component.\r\n    * the editor should display either a \"block\" view or \"preview\" of\r\n    * the current layout of the view.\r\n    * @param {string} mode what mode are we in ['block', 'preview']\r\n    * @return {Component}\r\n    */\r\n   editorComponent(App, mode) {\r\n      var idBase = \"ABViewCommentEditorComponent\";\r\n      var CommentView = this.component(App, idBase);\r\n\r\n      return {\r\n         ui: CommentView.ui,\r\n         init: CommentView.init,\r\n         logic: CommentView.logic,\r\n         onShow: CommentView.onShow,\r\n      };\r\n   }\r\n\r\n   //\r\n   // Property Editor\r\n   //\r\n\r\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\r\n      var commonUI = super.propertyEditorDefaultElements(\r\n         App,\r\n         ids,\r\n         _logic,\r\n         ObjectDefaults\r\n      );\r\n\r\n      // _logic functions\r\n\r\n      _logic.selectSource = (dcId, oldDcId) => {\r\n         var currView = _logic.currentEditObject();\r\n\r\n         // Update field options in property\r\n         this.propertyUpdateUserFieldOptions(ids, currView, dcId);\r\n         this.propertyUpdateCommentFieldOptions(ids, currView, dcId);\r\n         this.propertyUpdateDateFieldOptions(ids, currView, dcId);\r\n      };\r\n\r\n      // in addition to the common .label  values, we\r\n      // ask for:\r\n      return commonUI.concat([\r\n         {\r\n            name: \"dataSource\",\r\n            view: \"richselect\",\r\n            label: L(\"Data Source\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n            on: {\r\n               onChange: _logic.selectSource,\r\n            },\r\n         },\r\n         {\r\n            name: \"columnUser\",\r\n            view: \"richselect\",\r\n            label: L(\"Select a user field\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n         },\r\n         {\r\n            name: \"columnComment\",\r\n            view: \"richselect\",\r\n            label: L(\"Select a comment field\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n         },\r\n         {\r\n            name: \"columnDate\",\r\n            view: \"richselect\",\r\n            label: L(\"Select a date field\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n         },\r\n         {\r\n            view: \"counter\",\r\n            name: \"height\",\r\n            label: L(\"Height:\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n         },\r\n      ]);\r\n   }\r\n\r\n   static propertyEditorPopulate(App, ids, view) {\r\n      super.propertyEditorPopulate(App, ids, view);\r\n\r\n      var datacollectionId = view.settings.dataviewID\r\n         ? view.settings.dataviewID\r\n         : null;\r\n\r\n      this.propertyUpdateDatacollectionOptions(ids, view, datacollectionId);\r\n      this.propertyUpdateUserFieldOptions(ids, view, datacollectionId);\r\n      this.propertyUpdateCommentFieldOptions(ids, view, datacollectionId);\r\n      this.propertyUpdateDateFieldOptions(ids, view, datacollectionId);\r\n\r\n      $$(ids.dataSource).setValue(\r\n         view.settings.dataviewID ||\r\n            ABViewCommentPropertyComponentDefaults.dataviewID\r\n      );\r\n      $$(ids.columnUser).setValue(\r\n         view.settings.columnUser ||\r\n            ABViewCommentPropertyComponentDefaults.columnUser\r\n      );\r\n      $$(ids.columnComment).setValue(\r\n         view.settings.columnComment ||\r\n            ABViewCommentPropertyComponentDefaults.columnComment\r\n      );\r\n      $$(ids.columnDate).setValue(\r\n         view.settings.columnDate ||\r\n            ABViewCommentPropertyComponentDefaults.columnDate\r\n      );\r\n      $$(ids.height).setValue(\r\n         view.settings.height || ABViewCommentPropertyComponentDefaults.height\r\n      );\r\n   }\r\n\r\n   static propertyEditorValues(ids, view) {\r\n      super.propertyEditorValues(ids, view);\r\n\r\n      view.settings.dataviewID = $$(ids.dataSource).getValue();\r\n      view.settings.columnUser = $$(ids.columnUser).getValue();\r\n      view.settings.columnComment = $$(ids.columnComment).getValue();\r\n      view.settings.columnDate = $$(ids.columnDate).getValue();\r\n      view.settings.height = $$(ids.height).getValue();\r\n\r\n      // Retrive the values of your properties from Webix and store them in the view\r\n   }\r\n\r\n   static propertyUpdateDatacollectionOptions(ids, view, dcId) {\r\n      // Pull data collections to options\r\n      var dcOptions = view.propertyDatacollections();\r\n      $$(ids.dataSource).define(\"options\", dcOptions);\r\n      $$(ids.dataSource).define(\"value\", dcId);\r\n      $$(ids.dataSource).refresh();\r\n   }\r\n\r\n   static propertyUpdateUserFieldOptions(ids, view, dcId) {\r\n      var datacollection = view.AB.datacollectionByID(dcId);\r\n      var object = datacollection ? datacollection.datasource : null;\r\n\r\n      // Pull field list\r\n      var fieldOptions = [];\r\n      if (object != null) {\r\n         fieldOptions = object\r\n            .fields((f) => f.key == \"user\")\r\n            .map((f) => {\r\n               return {\r\n                  id: f.id,\r\n                  value: f.label,\r\n               };\r\n            });\r\n      }\r\n      // Add a default option\r\n      var defaultOption = { id: null, value: \"[Select]\" };\r\n      fieldOptions.unshift(defaultOption);\r\n\r\n      $$(ids.columnUser).define(\"options\", fieldOptions);\r\n      $$(ids.columnUser).refresh();\r\n   }\r\n\r\n   static propertyUpdateCommentFieldOptions(ids, view, dcId) {\r\n      var datacollection = view.AB.datacollectionByID(dcId);\r\n      var object = datacollection ? datacollection.datasource : null;\r\n\r\n      // Pull field list\r\n      var fieldOptions = [];\r\n      if (object != null) {\r\n         fieldOptions = object\r\n            .fields((f) => f.key == \"string\" || f.key == \"LongText\")\r\n            .map((f) => {\r\n               return {\r\n                  id: f.id,\r\n                  value: f.label,\r\n               };\r\n            });\r\n      }\r\n      // Add a default option\r\n      var defaultOption = { id: null, value: \"[Select]\" };\r\n      fieldOptions.unshift(defaultOption);\r\n\r\n      $$(ids.columnComment).define(\"options\", fieldOptions);\r\n      $$(ids.columnComment).refresh();\r\n   }\r\n\r\n   static propertyUpdateDateFieldOptions(ids, view, dcId) {\r\n      var datacollection = view.AB.datacollectionByID(dcId);\r\n      var object = datacollection ? datacollection.datasource : null;\r\n\r\n      // Pull field list\r\n      var fieldOptions = [];\r\n      if (object != null) {\r\n         fieldOptions = object\r\n            .fields((f) => f.key == \"date\")\r\n            .map((f) => {\r\n               return {\r\n                  id: f.id,\r\n                  value: f.label,\r\n               };\r\n            });\r\n      }\r\n      // Add a default option\r\n      var defaultOption = { id: null, value: \"[Select]\" };\r\n      fieldOptions.unshift(defaultOption);\r\n\r\n      $$(ids.columnDate).define(\"options\", fieldOptions);\r\n      $$(ids.columnDate).refresh();\r\n   }\r\n\r\n   /*\r\n    * @component()\r\n    * return a UI component based upon this view.\r\n    * @param {obj} App\r\n    * @return {obj} UI component\r\n    */\r\n   component(App) {\r\n      var idBase = \"ABViewComment_\" + this.id;\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n      };\r\n\r\n      let base = super.component(App);\r\n\r\n      var userList = this.getUserData();\r\n      var userId = this.getCurrentUserId();\r\n\r\n      var _ui = {\r\n         id: ids.component,\r\n         view: \"comments\",\r\n         users: userList,\r\n         currentUser: userId,\r\n         height: this.settings.height,\r\n         on: {\r\n            onBeforeAdd: function (id, obj, index) {\r\n               _logic.addComment(obj.text, new Date());\r\n            },\r\n            // NOTE: no update event of comment widget !!\r\n            // Updating event handles in .init function\r\n            // https://docs.webix.com/api__ui.comments_onbeforeeditstart_event.html#comment-4509366150\r\n\r\n            // onAfterEditStart: function (rowId) {\r\n            // \tlet item = this.getItem(rowId);\r\n\r\n            // \t_logic.updateComment(rowId, item);\r\n            // },\r\n            onAfterDelete: function (rowId) {\r\n               _logic.deleteComment(rowId);\r\n            },\r\n         },\r\n      };\r\n\r\n      // make sure each of our child views get .init() called\r\n      var _init = (options) => {\r\n         this.__dvEvents = this.__dvEvents || {};\r\n\r\n         let $comment = $$(ids.component);\r\n         if ($comment) {\r\n            let $commentList = $comment.queryView({ view: \"list\" });\r\n            if ($commentList) {\r\n               // Updating comment event\r\n               if (!this.__dvEvents.onStoreUpdated)\r\n                  this.__dvEvents.onStoreUpdated = $commentList.data.attachEvent(\r\n                     \"onStoreUpdated\",\r\n                     (rowId, data, operate) => {\r\n                        if (operate == \"update\") {\r\n                           _logic.updateComment(rowId, (data || {}).text);\r\n                        }\r\n                     }\r\n                  );\r\n\r\n               // Implement progress bar\r\n               webix.extend($commentList, webix.ProgressBar);\r\n            }\r\n         }\r\n\r\n         var dv = this.datacollection;\r\n         if (!dv) return;\r\n\r\n         // bind dc to component\r\n         // dv.bind($$(ids.component));\r\n\r\n         if (!this.__dvEvents.create)\r\n            this.__dvEvents.create = dv.on(\"create\", () =>\r\n               _logic.refreshComment()\r\n            );\r\n\r\n         if (!this.__dvEvents.update)\r\n            this.__dvEvents.update = dv.on(\"update\", () =>\r\n               _logic.refreshComment()\r\n            );\r\n\r\n         if (!this.__dvEvents.delete)\r\n            this.__dvEvents.delete = dv.on(\"delete\", () =>\r\n               _logic.refreshComment()\r\n            );\r\n\r\n         if (!this.__dvEvents.loadData)\r\n            this.__dvEvents.loadData = dv.on(\"loadData\", () =>\r\n               _logic.refreshComment()\r\n            );\r\n      };\r\n\r\n      var _logic = {\r\n         getCommentData: () => {\r\n            let dv = this.datacollection;\r\n            if (!dv) return null;\r\n\r\n            let userCol = this.getUserField();\r\n            let commentCol = this.getCommentField();\r\n            let dateCol = this.getDateField();\r\n\r\n            if (!userCol || !commentCol) return null;\r\n\r\n            let userColName = userCol.columnName;\r\n            let commentColName = commentCol.columnName;\r\n            let dateColName = dateCol ? dateCol.columnName : null;\r\n\r\n            let dataObject = dv.getData();\r\n            let dataList = [];\r\n\r\n            dataObject.forEach((item, index) => {\r\n               if (item[commentColName]) {\r\n                  var user = this.getUserData().find((user) => {\r\n                     return user.value == item[userColName];\r\n                  });\r\n                  var data = {\r\n                     id: item.id,\r\n                     user_id: user ? user.id : 0,\r\n                     date: item[dateColName]\r\n                        ? new Date(item[dateColName])\r\n                        : null,\r\n                     default_date: new Date(item[\"created_at\"]),\r\n                     text: item[commentColName],\r\n                  };\r\n\r\n                  dataList.push(data);\r\n               }\r\n            });\r\n\r\n            dataList.sort(function (a, b) {\r\n               if (dateColName) {\r\n                  return (\r\n                     new Date(a.date).getTime() - new Date(b.date).getTime()\r\n                  );\r\n               } else {\r\n                  return (\r\n                     new Date(a.default_date).getTime() -\r\n                     new Date(b.default_date).getTime()\r\n                  );\r\n               }\r\n            });\r\n\r\n            return {\r\n               data: dataList,\r\n            };\r\n         },\r\n         refreshComment: () => {\r\n            if (this.__refreshTimeout) clearTimeout(this.__refreshTimeout);\r\n\r\n            _logic.busy();\r\n\r\n            this.__refreshTimeout = setTimeout(() => {\r\n               let $comment = $$(ids.component);\r\n               if (!$comment) return;\r\n\r\n               // clear comments\r\n               let $commentList = $comment.queryView({ view: \"list\" });\r\n               if ($commentList) $commentList.clearAll();\r\n\r\n               // populate comments\r\n               let commentData = _logic.getCommentData();\r\n               if (commentData) {\r\n                  $$(ids.component).parse(commentData);\r\n               }\r\n\r\n               // scroll to the last item\r\n               if ($commentList)\r\n                  $commentList.scrollTo(0, Number.MAX_SAFE_INTEGER);\r\n\r\n               delete this.__refreshTimeout;\r\n\r\n               _logic.ready();\r\n            }, 90);\r\n         },\r\n         addComment: (commentText, dateTime) => {\r\n            this.saveData(commentText, dateTime);\r\n         },\r\n         updateComment: (rowId, commentText) => {\r\n            let model = this.model();\r\n            if (!model) return Promise.resolve(); // already notified\r\n\r\n            let commentField = this.getCommentField();\r\n            if (!commentField) return Promise.resolve(); // already notified\r\n\r\n            let values = {};\r\n            values[commentField.columnName] = commentText || \"\";\r\n\r\n            return model.update(rowId, values);\r\n         },\r\n         deleteComment: (rowId) => {\r\n            let model = this.model();\r\n            if (!model) return;\r\n\r\n            return model.delete(rowId);\r\n         },\r\n         busy: () => {\r\n            let $comment = $$(ids.component);\r\n            if (!$comment) return;\r\n\r\n            let $commentList = $comment.queryView({ view: \"list\" });\r\n            if (!$commentList) return;\r\n\r\n            $commentList.disable();\r\n\r\n            if ($commentList.showProgress)\r\n               $commentList.showProgress({ type: \"icon\" });\r\n         },\r\n         ready: () => {\r\n            let $comment = $$(ids.component);\r\n            if (!$comment) return;\r\n\r\n            let $commentList = $comment.queryView({ view: \"list\" });\r\n            if (!$commentList) return;\r\n\r\n            $commentList.enable();\r\n\r\n            if ($commentList.hideProgress) $commentList.hideProgress();\r\n         },\r\n      };\r\n\r\n      var onShow = () => {\r\n         base.onShow();\r\n\r\n         _logic.refreshComment();\r\n      };\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: _init,\r\n         logic: _logic,\r\n         onShow: onShow,\r\n      };\r\n   }\r\n\r\n   getUsers() {\r\n      return this.AB.Account.userList().map((u) => {\r\n         return {\r\n            id: u.username,\r\n            value: u.username,\r\n            image: u.image_id,\r\n         };\r\n      });\r\n   }\r\n\r\n   getCurrentUserId() {\r\n      var userObject = this.getUsers();\r\n      var currentUser = this.AB.Account.username();\r\n      //Anonymous User = 0\r\n      var currentUserId = 0;\r\n\r\n      if (!userObject) return;\r\n\r\n      userObject.forEach((item, index) => {\r\n         if (item.value == currentUser) {\r\n            currentUserId = index + 1;\r\n         }\r\n      });\r\n      return currentUserId;\r\n   }\r\n\r\n   async saveData(commentText, dateTime) {\r\n      if (commentText == null || commentText == \"\") return Promise.resolve();\r\n\r\n      let dv = this.datacollection;\r\n      if (!dv) return Promise.resolve();\r\n\r\n      let model = this.model();\r\n      if (model == null) {\r\n         this.AB.notify.builder(\r\n            {},\r\n            {\r\n               message:\r\n                  \"ABViewComment.saveData(): could not pull a model to work with.\",\r\n               viewName: this.label,\r\n            }\r\n         );\r\n         return Promise.resolve();\r\n      }\r\n\r\n      let comment = {};\r\n\r\n      let userField = this.getUserField();\r\n      if (userField) comment[userField.columnName] = this.AB.Account.username();\r\n\r\n      let commentField = this.getCommentField();\r\n      if (commentField) comment[commentField.columnName] = commentText;\r\n\r\n      let dateField = this.getDateField();\r\n      if (dateField) comment[dateField.columnName] = dateTime;\r\n\r\n      // add parent cursor to default\r\n      let dvLink = dv.datacollectionLink;\r\n      if (dvLink && dvLink.getCursor()) {\r\n         let objectLink = dvLink.datasource;\r\n         let fieldLink = dv.fieldLink;\r\n\r\n         if (objectLink && fieldLink) {\r\n            comment[fieldLink.columnName] = {};\r\n            comment[fieldLink.columnName][\r\n               objectLink.PK()\r\n            ] = dvLink.getCursor().id;\r\n         }\r\n      }\r\n\r\n      return await model.create(comment);\r\n   }\r\n};\r\n","/**\r\n * ABViewComponent\r\n * A common UI component class for our UI widgets.\r\n */\r\nimport ClassUI from \"../../../ui/ClassUI\";\r\n\r\nexport default class ABViewComponent extends ClassUI {\r\n   constructor(...params) {\r\n      super(...params);\r\n\r\n      this.__events = [];\r\n      // {array}\r\n      // A collection of any listeners we are managing.\r\n      // {\r\n      //   emitter:   {EventEmitter} the object we are listening on\r\n      //   eventName: {string} the event key we are listening for\r\n      //   listener:  {fn} the function to call on\r\n      // }\r\n\r\n      this.CurrentObjectID = null;\r\n      // {string}\r\n      // the ABObject.id of the object we are working with.\r\n\r\n      this.CurrentDatacollectionID = null;\r\n      // {string}\r\n      // the ABDataCollection.id of the DC we are working with\r\n   }\r\n\r\n   /**\r\n    * @method CurrentObject()\r\n    * A helper to return the current ABObject we are working with.\r\n    * @return {ABObject}\r\n    */\r\n   get CurrentObject() {\r\n      return this.AB.objectByID(this.CurrentObjectID);\r\n   }\r\n   /**\r\n    * @method CurrentDatacollection()\r\n    * A helper to return the current ABDataCollection we are working with.\r\n    * @return {ABDataCollection}\r\n    */\r\n   get CurrentDatacollection() {\r\n      return this.AB.datacollectionByID(this.CurrentDatacollectionID);\r\n   }\r\n\r\n   /**\r\n    * @method datacollectionLoad\r\n    *\r\n    * @param datacollection {ABDatacollection}\r\n    */\r\n   datacollectionLoad(datacollection) {\r\n      this.CurrentDatacollectionID = datacollection.id;\r\n   }\r\n\r\n   objectLoad(object) {\r\n      this.CurrentObjectID = object.id;\r\n   }\r\n\r\n   /**\r\n    * @method eventAdd()\r\n    * Create a new listener on an object. Note, this will prevent multiple\r\n    * listeners being applied to the same Object.\r\n    * @param {object} evt\r\n    *        The definition of the event we are adding:\r\n    *        {\r\n    *           emitter:   {EventEmitter} the object we are listening on\r\n    *           eventName: {string} the event key we are listening for\r\n    *           listener:   {fn} the function to call on\r\n    *        }\r\n    */\r\n   eventAdd(evt) {\r\n      if (!evt || !evt.emitter || !evt.listener) return;\r\n\r\n      // make sure we haven't done this before:\r\n      var exists = this.__events.find((e) => {\r\n         return e.emitter == evt.emitter && e.eventName == evt.eventName;\r\n         // && e.listener == evt.listener;\r\n      });\r\n\r\n      if (!exists || exists.length < 1) {\r\n         // add to array\r\n         this.__events.push({\r\n            emitter: evt.emitter,\r\n            eventName: evt.eventName,\r\n            listener: evt.listener,\r\n         });\r\n\r\n         // listening this event\r\n         evt.emitter.on(evt.eventName, evt.listener);\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method eventsClear()\r\n    * Remove all the attached event listeners and reset our tracking.\r\n    */\r\n   eventsClear() {\r\n      (this.__events || []).forEach((e) => {\r\n         e.emitter.removeListener(e.eventName, e.listener);\r\n      });\r\n      this.__events = [];\r\n   }\r\n\r\n   /**\r\n    * @method onShow()\r\n    * perform any preparations necessary when showing this component.\r\n    */\r\n   onShow() {\r\n      // if we manage a datacollection, then make sure it has started\r\n      // loading it's data when we are showing our component.\r\n      var dv = this.datacollection;\r\n      if (dv) {\r\n         if (dv.dataStatus == dv.dataStatusFlag.notInitial) {\r\n            // load data when a widget is showing\r\n            dv.loadData();\r\n         }\r\n      }\r\n   }\r\n}\r\n","const ABViewConditionalContainerCore = require(\"../../core/views/ABViewConditionalContainerCore\");\r\n\r\nconst ABViewPropertyDefaults = ABViewConditionalContainerCore.defaultValues();\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nlet FilterComponent = null;\r\n\r\nmodule.exports = class ABViewConditionalContainer extends (\r\n   ABViewConditionalContainerCore\r\n) {\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(values, application, parent, defaultValues);\r\n\r\n      // Set filter value\r\n      this.__filterComponent = this.AB.filterComplexNew(\r\n         `${this.id}_filterComponent`\r\n      );\r\n      // this.__filterComponent.applicationLoad(application);\r\n      this.populateFilterComponent();\r\n   }\r\n\r\n   //\r\n   // Property Editor\r\n   //\r\n\r\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\r\n      var commonUI = super.propertyEditorDefaultElements(\r\n         App,\r\n         ids,\r\n         _logic,\r\n         ObjectDefaults\r\n      );\r\n\r\n      var idBase = \"ABViewConditionalContainerPropertyEditor\";\r\n\r\n      _logic.changeDatacollection = (dvId) => {\r\n         var view = _logic.currentEditObject();\r\n\r\n         this.populatePopupEditors(ids, view, dvId);\r\n      };\r\n\r\n      _logic.showFilterPopup = ($view) => {\r\n         this.filter_popup.show($view, null, { pos: \"top\" });\r\n      };\r\n\r\n      _logic.onFilterChange = () => {\r\n         var view = _logic.currentEditObject();\r\n\r\n         var filterValues = FilterComponent.getValue();\r\n\r\n         view.settings.filterConditions = filterValues;\r\n\r\n         var allComplete = true;\r\n         filterValues.rules.forEach((f) => {\r\n            // if all 3 fields are present, we are good.\r\n            if (f.key && f.rule && f.value) {\r\n               allComplete = allComplete && true;\r\n            } else {\r\n               // else, we found an entry that wasn't complete:\r\n               allComplete = false;\r\n            }\r\n         });\r\n\r\n         // only perform the update if a complete row is specified:\r\n         if (allComplete) {\r\n            // we want to call .save() but give webix a chance to properly update it's\r\n            // select boxes before this call causes them to be removed:\r\n            setTimeout(() => {\r\n               this.propertyEditorSave(ids, view);\r\n            }, 10);\r\n         }\r\n\r\n         this.populateBadgeNumber(ids, view);\r\n      };\r\n\r\n      FilterComponent = this.AB.filterComplexNew(`${idBase}_filter`);\r\n      FilterComponent.init();\r\n      FilterComponent.on(\"change\", (val) => {\r\n         _logic.onFilterChange(val);\r\n      });\r\n\r\n      this.filter_popup = webix.ui({\r\n         view: \"popup\",\r\n         width: 800,\r\n         hidden: true,\r\n         body: FilterComponent.ui,\r\n      });\r\n\r\n      return commonUI.concat([\r\n         {\r\n            name: \"datacollection\",\r\n            view: \"richselect\",\r\n            label: L(\"Data Source\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n            on: {\r\n               onChange: function (dvId) {\r\n                  _logic.changeDatacollection(dvId);\r\n               },\r\n            },\r\n         },\r\n         {\r\n            view: \"fieldset\",\r\n            name: \"filter\",\r\n            label: L(\"Filter:\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n            body: {\r\n               type: \"clean\",\r\n               padding: 10,\r\n               rows: [\r\n                  {\r\n                     cols: [\r\n                        {\r\n                           view: \"label\",\r\n                           label: L(\"Filter Data:\"),\r\n                           width: this.AB.UISettings.config().labelWidthLarge,\r\n                        },\r\n                        {\r\n                           view: \"button\",\r\n                           name: \"buttonFilter\",\r\n                           label: L(\"Settings\"),\r\n                           icon: \"fa fa-gear\",\r\n                           type: \"icon\",\r\n                           css: \"webix_primary\",\r\n                           autowidth: true,\r\n                           badge: 0,\r\n                           click: function () {\r\n                              _logic.showFilterPopup(this.$view);\r\n                           },\r\n                        },\r\n                     ],\r\n                  },\r\n               ],\r\n            },\r\n         },\r\n      ]);\r\n   }\r\n\r\n   static propertyEditorPopulate(App, ids, view) {\r\n      super.propertyEditorPopulate(App, ids, view);\r\n\r\n      // FilterComponent.applicationLoad(view.application);\r\n\r\n      var datacollectionId = view.settings.dataviewID\r\n         ? view.settings.dataviewID\r\n         : null;\r\n      var SourceSelector = $$(ids.datacollection);\r\n\r\n      // Pull data collections to options\r\n      var dcOptions = view.propertyDatacollections();\r\n      SourceSelector.define(\"options\", dcOptions);\r\n      SourceSelector.define(\"value\", datacollectionId);\r\n      SourceSelector.refresh();\r\n\r\n      this.populatePopupEditors(ids, view);\r\n   }\r\n\r\n   static propertyEditorValues(ids, view) {\r\n      super.propertyEditorValues(ids, view);\r\n\r\n      view.settings.dataviewID = $$(ids.datacollection).getValue();\r\n   }\r\n\r\n   static populatePopupEditors(ids, view, datacollectionId) {\r\n      // pull current data collection\r\n      var dv = view.datacollection;\r\n\r\n      // specify data collection id\r\n      if (datacollectionId) {\r\n         dv = view.AB.datacollectionByID(datacollectionId);\r\n      }\r\n\r\n      if (dv && dv.datasource) {\r\n         FilterComponent.fieldsLoad(dv.datasource.fields());\r\n         view.__filterComponent.fieldsLoad(dv.datasource.fields());\r\n      } else {\r\n         FilterComponent.fieldsLoad();\r\n         view.__filterComponent.fieldsLoad();\r\n      }\r\n\r\n      FilterComponent.setValue(\r\n         view.settings.filterConditions ||\r\n            ABViewPropertyDefaults.filterConditions\r\n      );\r\n      view.__filterComponent.setValue(\r\n         view.settings.filterConditions ||\r\n            ABViewPropertyDefaults.filterConditions\r\n      );\r\n\r\n      this.populateBadgeNumber(ids, view);\r\n   }\r\n\r\n   static populateBadgeNumber(ids, view) {\r\n      if (\r\n         view.settings.filterConditions &&\r\n         view.settings.filterConditions.rules\r\n      ) {\r\n         $$(ids.buttonFilter).define(\r\n            \"badge\",\r\n            view.settings.filterConditions.rules.length || null\r\n         );\r\n         $$(ids.buttonFilter).refresh();\r\n      } else {\r\n         $$(ids.buttonFilter).define(\"badge\", null);\r\n         $$(ids.buttonFilter).refresh();\r\n      }\r\n   }\r\n\r\n   /*\r\n    * @component()\r\n    * return a UI component based upon this view.\r\n    * @param {obj} App\r\n    * @return {obj} UI component\r\n    */\r\n   component(App) {\r\n      var idBase = \"ABViewConditionalContainer_\" + this.id;\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n      };\r\n\r\n      var baseComp = super.component(App);\r\n\r\n      const ifComp = this.views()[0].component(App);\r\n      const elseComp = this.views()[1].component(App);\r\n\r\n      ifComp.ui.batch = \"if\";\r\n      elseComp.ui.batch = \"else\";\r\n\r\n      var _ui = {\r\n         id: ids.component,\r\n         view: \"multiview\",\r\n         cells: [\r\n            {\r\n               batch: \"wait\",\r\n               view: \"layout\",\r\n               rows: [\r\n                  {\r\n                     view: \"label\",\r\n                     label: L(\"Please wait...\"),\r\n                  },\r\n               ],\r\n            },\r\n            ifComp.ui,\r\n            elseComp.ui,\r\n         ],\r\n      };\r\n\r\n      var _init = (options, accessLevel) => {\r\n         baseComp.init(options);\r\n         ifComp.init(options, accessLevel);\r\n         elseComp.init(options, accessLevel);\r\n\r\n         this.populateFilterComponent();\r\n\r\n         var dv = this.datacollection;\r\n         if (dv) {\r\n            // listen DC events\r\n            this.eventAdd({\r\n               emitter: dv,\r\n               eventName: \"loadData\",\r\n               listener: () => _logic.displayView(),\r\n            });\r\n            this.eventAdd({\r\n               emitter: dv,\r\n               eventName: \"initializedData\",\r\n               listener: () => _logic.displayView(),\r\n            });\r\n\r\n            this.eventAdd({\r\n               emitter: dv,\r\n               eventName: \"changeCursor\",\r\n               listener: (...p) => _logic.displayView(...p),\r\n            });\r\n         }\r\n\r\n         _logic.displayView();\r\n      };\r\n\r\n      var _logic = {\r\n         displayView: (currData) => {\r\n            let dv = this.datacollection;\r\n            if (dv && dv.dataStatus === dv.dataStatusFlag.initialized) {\r\n               if (currData == null) {\r\n                  currData = dv.getCursor();\r\n               }\r\n               var isValid = this.__filterComponent.isValid(currData);\r\n\r\n               // dataStatus initialized\r\n               // filter is valid\r\n               // currentData has been loaded from cursor\r\n               if (\r\n                  isValid &&\r\n                  currData != undefined // if , at this point, there is no cursor; the data collection is empty\r\n               ) {\r\n                  // if (isValid && currData) {\r\n                  $$(ids.component).showBatch(\"if\");\r\n               } else {\r\n                  $$(ids.component).showBatch(\"else\");\r\n               }\r\n            } else {\r\n               // show 'waiting' panel if data is not loaded\r\n               $$(ids.component).showBatch(\"wait\");\r\n               return;\r\n            }\r\n         },\r\n      };\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: _init,\r\n         logic: _logic,\r\n\r\n         onShow: baseComp.onShow,\r\n      };\r\n   }\r\n\r\n   populateFilterComponent() {\r\n      let dc = this.datacollection;\r\n      if (dc && dc.datasource)\r\n         this.__filterComponent.fieldsLoad(dc.datasource.fields());\r\n      else this.__filterComponent.fieldsLoad([]);\r\n\r\n      this.__filterComponent.setValue(\r\n         this.settings.filterConditions ||\r\n            ABViewPropertyDefaults.filterConditions\r\n      );\r\n   }\r\n\r\n   save() {\r\n      // Because conditional container has always IF and ELSE containers, then it should be include them to call save too\r\n      let includeSubViews = true;\r\n\r\n      return super.save(includeSubViews);\r\n   }\r\n};\r\n","import ABViewConnectDataFilterCore from \"../../core/views/ABViewConnectDataFilterCore\";\r\nimport ABViewComponent from \"./ABViewComponent\";\r\n\r\nconst L = (...params) => AB.Multilingual.label(...params);\r\n\r\nclass ABViewConnectDataFilterComponent extends ABViewComponent {\r\n   constructor(view, idbase) {\r\n      super(idbase ?? `ABViewConnectDataFilter_${view.id}`, {\r\n         reset: \"\",\r\n      });\r\n\r\n      this.view = view;\r\n      this.AB = view.AB;\r\n      this.datacollection = this.view.datacollection;\r\n      this.settings = view.settings;\r\n   }\r\n\r\n   ui() {\r\n      return {\r\n         type: \"space\",\r\n         borderless: true,\r\n         cols: [\r\n            {\r\n               view: \"icon\",\r\n               icon: \"fa fa-filter\",\r\n               align: \"left\",\r\n               disabled: true,\r\n            },\r\n            {\r\n               view: \"combo\",\r\n               id: this.ids.component,\r\n               labelWidth: this.AB.UISettings.config().labelWidthXLarge,\r\n               disabled: true,\r\n               on: {\r\n                  onChange: (id) => this.applyConnectFilter(id),\r\n               },\r\n            },\r\n            {\r\n               view: \"icon\",\r\n               id: this.ids.reset,\r\n               icon: \"fa fa-times\",\r\n               align: \"left\",\r\n               disabled: true,\r\n               tooltip: L(\"Renmove this filter\"),\r\n               on: {\r\n                  onItemClick: () => this.resetConnectFilter(),\r\n               },\r\n            },\r\n         ],\r\n      };\r\n   }\r\n\r\n   async init(options) {\r\n      const dv = this.datacollection;\r\n      if (!dv) return;\r\n\r\n      const object = dv.datasource;\r\n      if (!object) return;\r\n\r\n      const [field] = object.fields((f) => f.columnName == this.settings.field);\r\n      if (!field) {\r\n         this.AB.notify.developer(\r\n            `Cannot find field \"${this.settings.field}\" in ${object.name}`,\r\n            {\r\n               context: \"ABViewConnectDataFilterComponent.init()\",\r\n               data: { settings: this.settings },\r\n            }\r\n         );\r\n         return;\r\n      }\r\n      this.field = field;\r\n\r\n      const suggest = webix.ui({\r\n         view: \"suggest\",\r\n         filter: ({ value }, search) =>\r\n            value.toLowerCase().includes(search.toLowerCase()),\r\n         on: {\r\n            onShow: () => {\r\n               field.populateOptionsDataCy($$(this.ids.component), field, {});\r\n            },\r\n         },\r\n      });\r\n      field.getAndPopulateOptions(suggest, null, field);\r\n\r\n      $$(this.ids.component).define(\"suggest\", suggest);\r\n      $$(this.ids.component).define(\r\n         \"label\",\r\n         `${L(\"Filter by\")} ${field.label}`\r\n      );\r\n      $$(this.ids.component).enable();\r\n      $$(this.ids.component).refresh();\r\n   }\r\n\r\n   resetConnectFilter() {\r\n      this.datacollection.filterCondition({ glue: \"and\", rules: [] });\r\n      this.datacollection.reloadData();\r\n      // Block applyConnectFields() from triggering\r\n      $$(this.ids.component).blockEvent();\r\n      $$(this.ids.component).setValue();\r\n      $$(this.ids.component).unblockEvent();\r\n      $$(this.ids.reset).disable();\r\n   }\r\n\r\n   applyConnectFilter(connectId) {\r\n      const filterRule = {\r\n         key: this.field.id,\r\n         rule: \"equals\",\r\n         value: connectId,\r\n      };\r\n\r\n      this.datacollection.filterCondition({ glue: \"and\", rules: [filterRule] });\r\n      this.datacollection.reloadData();\r\n      $$(this.ids.reset).enable();\r\n   }\r\n}\r\n\r\nexport default class ABViewConnectDataFilter extends ABViewConnectDataFilterCore {\r\n   /**\r\n    * @method component()\r\n    * return a UI component based upon this view.\r\n    * @param {obj} App\r\n    * @return {obj} UI component\r\n    */\r\n   component(v1App = false) {\r\n      let component = new ABViewConnectDataFilterComponent(this);\r\n\r\n      // if this is our v1Interface\r\n      if (v1App) {\r\n         var newComponent = component;\r\n         component = {\r\n            ui: newComponent.ui(),\r\n            init: (options, accessLevel) => {\r\n               return newComponent.init(this.AB, accessLevel);\r\n            },\r\n            onShow: (...params) => {\r\n               return newComponent.onShow?.(...params);\r\n            },\r\n         };\r\n      }\r\n      return component;\r\n   }\r\n}\r\n","const ABViewContainerCore = require(\"../../core/views/ABViewContainerCore\");\r\n\r\nconst ABPropertyComponentDefaults = ABViewContainerCore.defaultValues();\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABViewContainer extends ABViewContainerCore {\r\n   // constructor(values, application, parent, defaultValues) {\r\n   //    super(values, application, parent, defaultValues);\r\n   // }\r\n\r\n   //\r\n   //\tEditor Related\r\n   //\r\n\r\n   /**\r\n    * @method editorComponent\r\n    * return the Editor for this UI component.\r\n    * the editor should display either a \"block\" view or \"preview\" of\r\n    * the current layout of the view.\r\n    * @param {string} mode what mode are we in ['block', 'preview']\r\n    * @return {Component}\r\n    */\r\n   editorComponent(App, mode) {\r\n      var idBase = \"ABViewContainerEditorComponent\";\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n      };\r\n\r\n      var subComponents = {}; // { viewId: viewComponent, ..., viewIdn: viewComponent }\r\n\r\n      var cellHeight = 250;\r\n      // if (this.key == \"form\" || this.key == \"detail\") {\r\n      // \tcellHeight = 80;\r\n      // }\r\n\r\n      var _ui = {\r\n         rows: [\r\n            {\r\n               id: ids.component,\r\n               view: \"dashboard\",\r\n               css: \"ab-\" + this.key + \"-container\",\r\n               cellHeight: cellHeight,\r\n               gridColumns:\r\n                  this.settings.columns || ABPropertyComponentDefaults.columns,\r\n            },\r\n         ],\r\n      };\r\n\r\n      var _init = (options) => {\r\n         var Dashboard = $$(ids.component);\r\n         if (Dashboard) {\r\n            webix.extend(Dashboard, webix.OverlayBox);\r\n            webix.extend(Dashboard, webix.ProgressBar);\r\n         }\r\n\r\n         // this.views().reverse().forEach((child) => {\r\n\r\n         // NOTE: need to sorting before .addView because there is a render position bug in webix 5.1.7\r\n         // https://webix.com/snippet/404cf0c7\r\n         var childViews = this.viewsSortByPosition();\r\n\r\n         // attach all the .UI views:\r\n         childViews.forEach((child) => {\r\n            var component = child.component(App);\r\n\r\n            // store\r\n            subComponents[child.id] = component;\r\n\r\n            let view = \"panel\";\r\n            if (child.settings.movable == false) view = \"scrollview\";\r\n\r\n            Dashboard.addView({\r\n               view: view,\r\n\r\n               // specific viewId to .name, it will be used to save view position\r\n               name: child.id,\r\n               icon: \"fa fa-arrows\",\r\n               css: \"ab-widget-container\",\r\n               body: {\r\n                  rows: [\r\n                     {\r\n                        view: \"template\",\r\n                        height: 30,\r\n                        css: \"ab-widget-header\",\r\n                        template: _logic.template(child),\r\n                        onClick: {\r\n                           \"ab-component-edit\": (e, id, trg) => {\r\n                              _logic.viewEdit(e, child.id, trg);\r\n                           },\r\n                           \"ab-component-remove\": (e, id, trg) => {\r\n                              _logic.viewDelete(e, child.id, trg);\r\n                           },\r\n                        },\r\n                     },\r\n                     component.ui,\r\n                     // (mode == 'preview' ? component.ui : {\r\n                     // \t// empty element\r\n                     // \tview: 'spacer',\r\n                     // \thidden: true,\r\n                     // })\r\n                  ],\r\n               },\r\n\r\n               // dx: _logic.validatePosition(child.position.dx, 1, Dashboard.config.gridColumns),\r\n               // dy: _logic.validatePosition(child.position.dy, 1, Dashboard.config.gridRows),\r\n\r\n               dx: child.position.dx || 1,\r\n               dy: child.position.dy || 1,\r\n               x: _logic.validatePosition(\r\n                  child.position.x,\r\n                  0,\r\n                  Dashboard.config.gridColumns - 1\r\n               ),\r\n               y: child.position.y || 0,\r\n            });\r\n\r\n            // initial sub-component\r\n            component.init(null, 2); // when in editor allow full access\r\n         });\r\n\r\n         // listen onChange event\r\n         // NOTE: listen after populate views by .addView\r\n         if (this._onChangeId) Dashboard.detachEvent(this._onChangeId);\r\n         this._onChangeId = Dashboard.attachEvent(\"onChange\", () => {\r\n            _logic.onReorder();\r\n         });\r\n\r\n         // show \"drop here\" panel\r\n         _logic.showEmptyPlaceholder();\r\n\r\n         Dashboard.adjust();\r\n      };\r\n\r\n      var _logic = {\r\n         /**\r\n          * @method template()\r\n          * render the list template for the View\r\n          * @param {obj} obj the current View instance\r\n          * @param {obj} common  Webix provided object with common UI tools\r\n          */\r\n         template: (child) => {\r\n            return `<div>\r\n               <i class=\"fa fa-${child.icon} webix_icon_btn\"></i> ${child.label}\r\n               <div class=\"ab-component-tools\">\r\n               ${\r\n                  child.settings.removable == false\r\n                     ? \"\"\r\n                     : '<i class=\"fa fa-trash ab-component-remove\"></i>'\r\n               }\r\n               <i class=\"fa fa-edit ab-component-edit\"></i>\r\n               </div></div>`;\r\n         },\r\n\r\n         /**\r\n          * @method viewDelete()\r\n          * Called when the [delete] icon for a child View is clicked.\r\n          * @param {obj} e the onClick event object\r\n          * @param {integer} id the id of the element to delete\r\n          * @param {obj} trg  Webix provided object\r\n          */\r\n         viewDelete: (e, id, trg) => {\r\n            var deletedView = this.views((v) => v.id == id)[0];\r\n            if (!deletedView) return false;\r\n\r\n            webix.confirm({\r\n               title: L(\"Delete component\"),\r\n               text: L(\"Do you want to delete <b>{0}</b>?\", [\r\n                  deletedView.label,\r\n               ]),\r\n               callback: async (result) => {\r\n                  if (!result) return;\r\n                  // let Dashboard = $$(ids.component);\r\n\r\n                  // // remove UI of this component in template\r\n                  // var deletedElem = Dashboard.queryView({ name: id });\r\n                  // if (deletedElem) {\r\n\r\n                  // \t// store the removed view to signal event in .onChange\r\n                  // \tthis.__deletedView = deletedView;\r\n\r\n                  // \t// remove view\r\n                  // \tvar remainingViews = this.views((v) => { return v.id != deletedView.id; })\r\n                  // \tthis._views = remainingViews;\r\n\r\n                  // \t// this calls the remove REST to API server\r\n                  // \tDashboard.removeView(deletedElem);\r\n                  // }\r\n\r\n                  _logic.busy();\r\n\r\n                  try {\r\n                     await deletedView.destroy();\r\n\r\n                     // signal the current view has been deleted.\r\n                     deletedView.emit(\"destroyed\", deletedView);\r\n\r\n                     let Dashboard = $$(ids.component);\r\n\r\n                     // Update UI\r\n                     var deletedElem = Dashboard.queryView({ name: id });\r\n                     if (deletedElem) {\r\n                        Dashboard.blockEvent();\r\n                        Dashboard.removeView(deletedElem);\r\n                        Dashboard.unblockEvent();\r\n                     }\r\n\r\n                     _logic.showEmptyPlaceholder();\r\n                  } catch (err) {\r\n                     App.AB.notify.developer(err, {\r\n                        message: \"Error trying to delete selected View:\",\r\n                        view: deletedView,\r\n                     });\r\n                  }\r\n\r\n                  _logic.ready();\r\n               },\r\n            });\r\n            e.preventDefault();\r\n         },\r\n\r\n         /**\r\n          * @method viewEdit()\r\n          * Called when the [edit] icon for a child View is clicked.\r\n          * @param {obj} e the onClick event object\r\n          * @param {integer} id the id of the element to edit\r\n          * @param {obj} trg  Webix provided object\r\n          */\r\n         viewEdit: (e, id, trg) => {\r\n            var view = this.views((v) => v.id == id)[0];\r\n\r\n            if (!view) return false;\r\n\r\n            // NOTE: let webix finish this onClick event, before\r\n            // calling .populateInterfaceWorkspace() which will replace\r\n            // the interface elements with the edited view.  (apparently\r\n            // that causes errors.)\r\n            setTimeout(() => {\r\n               App.actions.populateInterfaceWorkspace(view);\r\n            }, 50);\r\n\r\n            e.preventDefault();\r\n\r\n            return false;\r\n         },\r\n\r\n         onReorder: async () => {\r\n            _logic.busy();\r\n\r\n            var Dashboard = $$(ids.component);\r\n\r\n            // ignore in \"preview\" mode\r\n            // if (Dashboard == null || Dashboard.config.view != \"dashboard\") return;\r\n\r\n            var viewState = Dashboard.serialize();\r\n\r\n            var allViewUpdates = [];\r\n\r\n            // save view position state to views\r\n            this.views().forEach((v) => {\r\n               var state = viewState.filter((vs) => vs.name == v.id)[0];\r\n               if (state) {\r\n                  v.position.x = state.x;\r\n                  v.position.y = state.y;\r\n\r\n                  // validate position data\r\n                  if (v.position.x < 0) v.position.x = 0;\r\n                  if (v.position.y < 0) v.position.y = 0;\r\n\r\n                  allViewUpdates.push(v.save());\r\n               }\r\n            });\r\n\r\n            try {\r\n               // save template layout\r\n               // this.saveReorder()\r\n               await Promise.all(allViewUpdates);\r\n\r\n               await this.save();\r\n\r\n               _logic.ready();\r\n            } catch (err) {\r\n               App.AB.notify.developer(err, {\r\n                  message: \"Error trying to save selected View:\",\r\n                  view: this.toObj(),\r\n               });\r\n               _logic.ready();\r\n            }\r\n         },\r\n\r\n         showEmptyPlaceholder: () => {\r\n            var Dashboard = $$(ids.component);\r\n\r\n            // if we don't have any views, then place a \"drop here\" placeholder\r\n            if (Dashboard.getChildViews().length == 0) {\r\n               Dashboard.showOverlay(\r\n                  \"<div class='drop-zone'><div>\" +\r\n                     App.labels.componentDropZone +\r\n                     \"</div></div>\"\r\n               );\r\n            }\r\n         },\r\n\r\n         validatePosition: (curPosition, minPosition, maxPosition) => {\r\n            if (curPosition < minPosition) return minPosition;\r\n            if (curPosition > maxPosition) return maxPosition;\r\n            else return curPosition;\r\n         },\r\n\r\n         busy: () => {\r\n            let Dashboard = $$(ids.component);\r\n            if (Dashboard) {\r\n               Dashboard.disable();\r\n\r\n               if (Dashboard.showProgress)\r\n                  Dashboard.showProgress({ type: \"icon\" });\r\n            }\r\n         },\r\n\r\n         ready: () => {\r\n            let Dashboard = $$(ids.component);\r\n            if (Dashboard) {\r\n               Dashboard.enable();\r\n\r\n               if (Dashboard.hideProgress) Dashboard.hideProgress();\r\n            }\r\n         },\r\n      };\r\n\r\n      var _onShow = () => {\r\n         this.views().forEach((v) => {\r\n            var component = subComponents[v.id];\r\n\r\n            if (component && component.onShow) {\r\n               component.onShow();\r\n            }\r\n         });\r\n\r\n         let dc = this.datacollection;\r\n         if (dc && dc.dataStatus == dc.dataStatusFlag.notInitial) {\r\n            // load data when a widget is showing\r\n            dc.loadData();\r\n         }\r\n      };\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: _init,\r\n         logic: _logic,\r\n\r\n         onShow: _onShow,\r\n      };\r\n   }\r\n\r\n   //\r\n   // Property Editor\r\n   //\r\n\r\n   // static propertyEditorComponent(App) {\r\n   // \treturn ABViewPropertyComponent.component(App);\r\n   // }\r\n\r\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\r\n      var commonUI = super.propertyEditorDefaultElements(\r\n         App,\r\n         ids,\r\n         _logic,\r\n         ObjectDefaults\r\n      );\r\n\r\n      _logic.addColumnGravity = (newVal, oldVal) => {\r\n         var pos = $$(ids.gravity).getParentView().index($$(ids.gravity));\r\n         $$(ids.gravity)\r\n            .getParentView()\r\n            .addView(\r\n               {\r\n                  view: \"counter\",\r\n                  value: \"1\",\r\n                  min: 1,\r\n                  label: L(\"Column {0} Gravity\", [newVal]),\r\n                  labelWidth: this.AB.UISettings.config().labelWidthXLarge,\r\n                  css: \"gravity_counter\",\r\n                  on: {\r\n                     onChange: () => {\r\n                        _logic.onChange();\r\n                     },\r\n                  },\r\n               },\r\n               pos\r\n            );\r\n      };\r\n\r\n      _logic.removeColumnGravity = (newVal, oldVal) => {\r\n         $$(ids.gravity)\r\n            .getParentView()\r\n            .removeView(\r\n               $$(ids.gravity).getParentView().getChildViews()[\r\n                  $$(ids.gravity).getParentView().index($$(ids.gravity)) - 1\r\n               ]\r\n            );\r\n      };\r\n\r\n      // in addition to the common .label  values, we\r\n      // ask for:\r\n      return commonUI.concat([\r\n         {\r\n            name: \"columns\",\r\n            view: \"counter\",\r\n            min: 1,\r\n            label: L(\"Columns\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthXLarge,\r\n            on: {\r\n               onChange: function (newVal, oldVal) {\r\n                  if (newVal > 8) $$(ids.columns).setValue(8);\r\n\r\n                  if (newVal > oldVal) {\r\n                     _logic.addColumnGravity(newVal, oldVal);\r\n                  } else if (newVal < oldVal) {\r\n                     _logic.removeColumnGravity(newVal, oldVal);\r\n                  }\r\n               },\r\n            },\r\n         },\r\n         {\r\n            view: \"text\",\r\n            name: \"gravity\",\r\n            height: 1,\r\n         },\r\n      ]);\r\n   }\r\n\r\n   static propertyEditorPopulate(App, ids, view, logic) {\r\n      super.propertyEditorPopulate(App, ids, view, logic);\r\n      this._App = App;\r\n\r\n      $$(ids.columns).setValue(\r\n         view.settings.columns || ABPropertyComponentDefaults.columns\r\n      );\r\n\r\n      var gravityCounters = $$(ids.gravity)\r\n         .getParentView()\r\n         .queryView({ css: \"gravity_counter\" }, \"all\")\r\n         .map((counter) => $$(ids.gravity).getParentView().removeView(counter));\r\n\r\n      for (var step = 1; step <= $$(ids.columns).getValue(); step++) {\r\n         var pos = $$(ids.gravity).getParentView().index($$(ids.gravity));\r\n         $$(ids.gravity)\r\n            .getParentView()\r\n            .addView(\r\n               {\r\n                  view: \"counter\",\r\n                  min: 1,\r\n                  label: L(\"Column {0} Gravity\", [step]),\r\n                  labelWidth: this.AB.UISettings.config().labelWidthXLarge,\r\n                  css: \"gravity_counter\",\r\n                  value:\r\n                     view.settings.gravity && view.settings.gravity[step - 1]\r\n                        ? view.settings.gravity[step - 1]\r\n                        : ABPropertyComponentDefaults.gravity,\r\n                  on: {\r\n                     onChange: () => {\r\n                        logic.onChange();\r\n                     },\r\n                  },\r\n               },\r\n               pos\r\n            );\r\n      }\r\n\r\n      // NOTE : Move to .propertyEditorSave\r\n      // // when a change is made in the properties the popups need to reflect the change\r\n      // this.updateEventIds = this.updateEventIds || {}; // { viewId: boolean, ..., viewIdn: boolean }\r\n      // if (!this.updateEventIds[view.id]) {\r\n      // \tthis.updateEventIds[view.id] = true;\r\n\r\n      // \t// refresh dashboard to update \"position.x\" and \"position.y\" of child views\r\n      // \tview.addListener('properties.updated', function () {\r\n\r\n      // \t\tsetTimeout(() => {\r\n      // \t\t\tview.editorComponent(App).logic.onChange();\r\n      // \t\t}, 100)\r\n\r\n      // \t}, this);\r\n      // }\r\n   }\r\n\r\n   static propertyEditorValues(ids, view) {\r\n      super.propertyEditorValues(ids, view);\r\n\r\n      view.settings.columns = $$(ids.columns).getValue();\r\n\r\n      var gravity = [];\r\n      $$(ids.gravity)\r\n         .getParentView()\r\n         .queryView({ css: \"gravity_counter\" }, \"all\")\r\n         .map((counter) => gravity.push($$(counter).getValue()));\r\n      view.settings.gravity = gravity;\r\n   }\r\n\r\n   static async propertyEditorSave(ids, view) {\r\n      this.propertyEditorValues(ids, view);\r\n\r\n      // Save .settings of container\r\n      await view.save();\r\n\r\n      // signal the current view has been updated.\r\n      view.emit(\"properties.updated\", view);\r\n\r\n      // Save reorder of subviews\r\n      let editorComponent = view.editorComponent(this._App);\r\n      await editorComponent.logic.onReorder();\r\n   }\r\n\r\n   /**\r\n    * @method component()\r\n    * return a UI component based upon this view.\r\n    * @param {obj} App\r\n    * @param {string} idPrefix\r\n    *\r\n    * @return {obj} UI component\r\n    */\r\n   component(App, idPrefix) {\r\n      var idBase = \"ABViewContainer_\" + (idPrefix || \"\") + this.id;\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n      };\r\n\r\n      this.viewComponents = this.viewComponents || {}; // { viewId: viewComponent, ..., viewIdn: viewComponent }\r\n\r\n      var _logic = {\r\n         changePage: (pageId) => {\r\n            this.changePage(pageId);\r\n         },\r\n\r\n         callbacks: {},\r\n\r\n         getElements: (views) => {\r\n            var rows = [];\r\n            var curRowIndex;\r\n            var curColIndex;\r\n\r\n            views.forEach((v) => {\r\n               let component = this.viewComponents[v.id];\r\n               // if (!component) {\r\n               component = v.component(App, idPrefix);\r\n               this.viewComponents[v.id] = component;\r\n               // }\r\n\r\n               // if key == \"form\" or \"button\" register the callbacks to the parent\r\n               // NOTE this will only work on the last form of a page!\r\n               if (v.key == \"form\" && v._logic.callbacks) {\r\n                  _logic.callbacks = v._logic.callbacks;\r\n               }\r\n\r\n               // Create a new row\r\n               if (v.position.y == null || v.position.y != curRowIndex) {\r\n                  curRowIndex = v.position.y || rows.length;\r\n                  curColIndex = 0;\r\n\r\n                  var rowNew = {\r\n                     cols: [],\r\n                  };\r\n\r\n                  // Create columns following setting value\r\n                  var colNumber =\r\n                     this.settings.columns ||\r\n                     ABPropertyComponentDefaults.columns;\r\n                  for (var i = 0; i < colNumber; i++) {\r\n                     var grav =\r\n                        this.settings.gravity && this.settings.gravity[i]\r\n                           ? parseInt(this.settings.gravity[i])\r\n                           : ABPropertyComponentDefaults.gravity;\r\n                     rowNew.cols.push({\r\n                        gravity: grav,\r\n                     });\r\n                  }\r\n\r\n                  rows.push(rowNew);\r\n               }\r\n\r\n               // Get the last row\r\n               var curRow = rows[rows.length - 1];\r\n\r\n               var newPos = v.position.x || 0;\r\n               var getGrav = 1;\r\n\r\n               if (curRow.cols[newPos] && curRow.cols[newPos].gravity) {\r\n                  getGrav = curRow.cols[newPos].gravity;\r\n               }\r\n\r\n               component.ui.gravity = getGrav;\r\n\r\n               // Add ui of sub-view to column\r\n               curRow.cols[newPos] = component.ui;\r\n\r\n               curColIndex += 1;\r\n\r\n               // Trigger 'changePage' event to parent\r\n               this.eventAdd({\r\n                  emitter: v,\r\n                  eventName: \"changePage\",\r\n                  listener: (...p) => _logic.changePage(...p),\r\n               });\r\n            });\r\n\r\n            return rows;\r\n         },\r\n      };\r\n\r\n      // Generate rows & cols of views to .layout\r\n      var views = this.viewsSortByPosition();\r\n      var rowViews = _logic.getElements(views);\r\n\r\n      var _ui = {\r\n         id: ids.component,\r\n         view: \"layout\",\r\n         rows: rowViews,\r\n      };\r\n\r\n      // make sure each of our child views get .init() called\r\n      var _init = (options, parentAccessLevel = 0) => {\r\n         // register our callbacks:\r\n         if (options) {\r\n            for (var c in _logic.callbacks) {\r\n               _logic.callbacks[c] = options[c] || _logic.callbacks[c];\r\n            }\r\n         }\r\n\r\n         // see access by CSS class\r\n         if ($$(ids.component))\r\n            $$(ids.component).define(\"css\", \"accessLevel-\" + parentAccessLevel);\r\n\r\n         // attach all the .UI views:\r\n         for (var key in this.viewComponents) {\r\n            // skip when the view is removed.\r\n            if (this.views((v) => v.id == key)[0] == null) return;\r\n\r\n            var component = this.viewComponents[key];\r\n\r\n            // Initial component along with options in case there are callbacks we need to listen for\r\n            if (parentAccessLevel > 0) {\r\n               component.init(options, parentAccessLevel);\r\n            } else {\r\n               $$(component.ui.id).hide();\r\n            }\r\n         }\r\n      };\r\n\r\n      var _onShow = () => {\r\n         let dv = this.datacollection;\r\n         if (dv && dv.dataStatus == dv.dataStatusFlag.notInitial) {\r\n            // load data when a widget is showing\r\n            dv.loadData();\r\n         }\r\n\r\n         // calll .onShow in child components\r\n         this.views().forEach((v) => {\r\n            var component = this.viewComponents[v.id];\r\n\r\n            if (component && component.onShow) {\r\n               component.onShow();\r\n            }\r\n         });\r\n      };\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: _init,\r\n         logic: _logic,\r\n\r\n         onShow: _onShow,\r\n      };\r\n   }\r\n};\r\n","const ABViewDataviewCore = require(\"../../core/views/ABViewDataviewCore\");\r\nconst ABViewPropertyLinkPage = require(\"./viewProperties/ABViewPropertyLinkPage\")\r\n   .default;\r\n\r\nconst ABViewDataviewDefaults = ABViewDataviewCore.defaultValues();\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABViewDataview extends ABViewDataviewCore {\r\n   // constructor(values, application, parent, defaultValues) {\r\n   //    super(values, application, parent, defaultValues);\r\n   // }\r\n\r\n   //\r\n   // Property Editor\r\n   //\r\n\r\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\r\n      var idBase = \"ABViewDataviewPropertyEditor\";\r\n\r\n      var commonUI = super.propertyEditorDefaultElements(\r\n         App,\r\n         ids,\r\n         _logic,\r\n         ObjectDefaults\r\n      );\r\n\r\n      this.linkPageComponent = ABViewPropertyLinkPage.propertyComponent(\r\n         App,\r\n         idBase\r\n      );\r\n\r\n      return commonUI.concat([\r\n         {\r\n            view: \"counter\",\r\n            name: \"xCount\",\r\n            min: 1, // we cannot have 0 columns per row so lets not accept it\r\n            label: L(\"Items in a row\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n            step: 1,\r\n         },\r\n         this.linkPageComponent.ui,\r\n      ]);\r\n   }\r\n\r\n   static propertyEditorPopulate(App, ids, view) {\r\n      super.propertyEditorPopulate(App, ids, view);\r\n\r\n      $$(ids.xCount).setValue(\r\n         view.settings.xCount || ABViewDataviewDefaults.xCount\r\n      );\r\n\r\n      this.linkPageComponent.viewLoad(view);\r\n      this.linkPageComponent.setSettings(view.settings);\r\n   }\r\n\r\n   static propertyEditorValues(ids, view) {\r\n      super.propertyEditorValues(ids, view);\r\n\r\n      view.settings.xCount = $$(ids.xCount).getValue();\r\n\r\n      let linkSettings = this.linkPageComponent.getSettings();\r\n      for (let key in linkSettings) {\r\n         view.settings[key] = linkSettings[key];\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method fromValues()\r\n    *\r\n    * initialze this object with the given set of values.\r\n    * @param {obj} values\r\n    */\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n\r\n      this.settings.detailsPage =\r\n         this.settings.detailsPage || ABViewDataviewDefaults.detailsPage;\r\n      this.settings.editPage =\r\n         this.settings.editPage || ABViewDataviewDefaults.editPage;\r\n      this.settings.detailsTab =\r\n         this.settings.detailsTab || ABViewDataviewDefaults.detailsTab;\r\n      this.settings.editTab =\r\n         this.settings.editTab || ABViewDataviewDefaults.editTab;\r\n   }\r\n\r\n   /**\r\n    * @method component()\r\n    * return a UI component based upon this view.\r\n    * @param {obj } App\r\n    * @return {obj } UI component\r\n    */\r\n   component(App) {\r\n      var com = {};\r\n\r\n      var idBase = \"ABViewDataview_\" + this.id;\r\n      var ids = {\r\n         scrollview: App.unique(`${idBase}_scrollview`),\r\n         component: App.unique(`${idBase}_component`),\r\n         dataFlexView: App.unique(`${idBase}_dataFlexView`),\r\n      };\r\n\r\n      let linkPage = this.linkPageHelper.component(App, idBase);\r\n\r\n      com.ui = {\r\n         id: ids.component,\r\n         rows: [\r\n            {\r\n               id: ids.scrollview,\r\n               view: \"scrollview\",\r\n               scroll: \"y\",\r\n               body: {\r\n                  id: ids.dataFlexView,\r\n                  view: \"flexlayout\",\r\n                  paddingX: 15,\r\n                  paddingY: 19,\r\n                  type: \"space\",\r\n                  cols: [],\r\n               },\r\n               on: {\r\n                  onAfterScroll: function () {\r\n                     let pos = this.getScrollState();\r\n\r\n                     com.logic.scroll(pos);\r\n                  },\r\n               },\r\n            },\r\n         ],\r\n      };\r\n\r\n      if (this.settings.height) com.ui.height = this.settings.height;\r\n\r\n      com.init = (options) => {\r\n         var dc = this.datacollection;\r\n         if (!dc) return;\r\n\r\n         let dataView = $$(ids.dataFlexView);\r\n\r\n         // initial the link page helper\r\n         linkPage.init({\r\n            view: this,\r\n            datacollection: dc,\r\n         });\r\n\r\n         // if (dc.datacollectionLink && dc.fieldLink) {\r\n         //    dc.bind(dataView, dc.datacollectionLink, dc.fieldLink);\r\n         // } else {\r\n         //    dc.bind(dataView);\r\n         // }\r\n         // track all flexlayout component IDs on the data collectino so we can notify them of changes\r\n         dc.attachFlexlayout(dataView);\r\n         dc.on(\"initializingData\", () => {\r\n            com.logic.busy();\r\n         });\r\n         dc.on(\"initializedData\", () => {\r\n            com.logic.ready();\r\n         });\r\n         dc.on(\"loadData\", () => {\r\n            com.emptyView();\r\n            com.renderData();\r\n         });\r\n         dc.on(\"update\", () => {\r\n            com.emptyView();\r\n            com.renderData();\r\n         });\r\n         dc.on(\"delete\", () => {\r\n            com.emptyView();\r\n            com.renderData();\r\n         });\r\n         dc.on(\"create\", () => {\r\n            com.emptyView();\r\n            com.renderData();\r\n         });\r\n\r\n         // this.eventClear();\r\n         //\r\n         // this.eventAdd({\r\n         //    emitter: dc,\r\n         //    eventName: \"loadData\",\r\n         //    listener: () => {\r\n         //       com.renderData();\r\n         //    },\r\n         // });\r\n      };\r\n\r\n      com.logic = {\r\n         busy: () => {\r\n            let Layout = $$(ids.dataFlexView);\r\n            let Scroll = $$(ids.scrollview);\r\n\r\n            // editor mode doesn't load this ui\r\n            if (!Scroll || !Layout) return;\r\n\r\n            Layout.disable();\r\n\r\n            if (!Scroll.showProgress) {\r\n               webix.extend(Scroll, webix.ProgressBar);\r\n            }\r\n            Scroll.showProgress({ type: \"icon\" });\r\n         },\r\n\r\n         ready: () => {\r\n            let Layout = $$(ids.dataFlexView);\r\n            let Scroll = $$(ids.scrollview);\r\n\r\n            // editor mode doesn't load this ui\r\n            if (!Scroll || !Layout) return;\r\n\r\n            Layout.enable();\r\n\r\n            if (Scroll && !Scroll.hideProgress) {\r\n               webix.extend(Scroll, webix.ProgressBar);\r\n            }\r\n            Scroll.hideProgress();\r\n         },\r\n\r\n         // we need to recursivly look backwards to toggle tabs into view when a user choosed to select a tab for edit or details views\r\n         toggleTab: (parentTab, wb) => {\r\n            // find the tab\r\n            var tab = wb.getTopParentView().queryView({ id: parentTab });\r\n            // if we didn't pass and id we may have passed a domNode\r\n            if (tab == null) {\r\n               tab = $$(parentTab);\r\n            }\r\n\r\n            if (tab == null) return;\r\n\r\n            // set the tabbar to to the tab\r\n            var tabbar = tab.getParentView().getParentView();\r\n\r\n            if (tabbar == null) return;\r\n\r\n            if (tabbar.setValue) {\r\n               // if we have reached the top we won't have a tab\r\n               tabbar.setValue(parentTab);\r\n            }\r\n\r\n            // find if it is in a multiview of a tab\r\n            var nextTab = tabbar.queryView({ view: \"scrollview\" }, \"parent\");\r\n            // if so then do this again\r\n            if (nextTab) {\r\n               com.toggleTab(nextTab, wb);\r\n            }\r\n         },\r\n\r\n         /**\r\n          * @method scroll\r\n          * @param pos - {\r\n          * \t\t\t\t\tx: {integer},\r\n          * \t\t\t\t\ty: {integer}\r\n          * \t\t\t\t}\r\n          */\r\n         scroll: async (pos) => {\r\n            let loadWhen = 40;\r\n\r\n            let y = pos.y;\r\n            let maxYPos =\r\n               $$(ids.dataFlexView).$height - $$(ids.scrollview).$height;\r\n            if (maxYPos - y <= loadWhen) {\r\n               if (this.loadMoreTimer) return;\r\n\r\n               com.setYPos(y);\r\n\r\n               var dc = this.datacollection;\r\n               if (!dc) return;\r\n\r\n               if ($$(ids.dataFlexView).getChildViews().length >= dc.totalCount)\r\n                  return;\r\n\r\n               // loading cursor\r\n               com.logic.busy();\r\n\r\n               await dc.loadData(\r\n                  $$(ids.dataFlexView).getChildViews().length || 0\r\n               );\r\n\r\n               this.loadMoreTimer = setTimeout(() => {\r\n                  this.loadMoreTimer = null;\r\n               }, 1100);\r\n            }\r\n         },\r\n      };\r\n\r\n      com.onShow = () => {\r\n         var dc = this.datacollection;\r\n         if (!dc) return;\r\n\r\n         if (dc.dataStatus == dc.dataStatusFlag.notInitial) {\r\n            // load data when a widget is showing\r\n            dc.loadData();\r\n         } else if (dc.dataStatus == dc.dataStatusFlag.initialized) {\r\n            com.renderData();\r\n         }\r\n      };\r\n\r\n      com.setYPos = (pos) => {\r\n         this.yPosition = pos;\r\n      };\r\n\r\n      com.getYPos = () => {\r\n         return this.yPosition || 0;\r\n      };\r\n\r\n      com.emptyView = () => {\r\n         let flexlayout = {\r\n            id: ids.dataFlexView,\r\n            view: \"flexlayout\",\r\n            type: \"clean\",\r\n            padding: 10,\r\n            css: { background: \"#ebedf0 !important\" },\r\n            cols: [],\r\n         };\r\n         webix.ui(flexlayout, $$(ids.scrollview), $$(ids.dataFlexView));\r\n      };\r\n\r\n      com.renderData = () => {\r\n         let editPage = this.settings.editPage;\r\n         let detailsPage = this.settings.detailsPage;\r\n         var editTab = this.settings.editTab;\r\n         var detailsTab = this.settings.detailsTab;\r\n         var records = [];\r\n\r\n         var dc = this.datacollection;\r\n         if (!dc) {\r\n            com.logic.ready();\r\n            return;\r\n         }\r\n\r\n         let Layout = $$(ids.dataFlexView) || $$(ids.component);\r\n\r\n         if (!Layout || isNaN(Layout.$width)) {\r\n            com.logic.ready();\r\n            return;\r\n         }\r\n\r\n         let recordWidth = Math.floor(\r\n            (Layout.$width - 20 - parseInt(this.settings.xCount) * 20) /\r\n               parseInt(this.settings.xCount)\r\n         );\r\n\r\n         var rows = dc.getData();\r\n\r\n         // if this amount of data is already parsed just skip the rest.\r\n         if (Layout.currentLength == rows.length) {\r\n            com.logic.ready();\r\n            return;\r\n         }\r\n\r\n         Layout.currentLength = rows.length;\r\n\r\n         // store total of rows\r\n         this._startPos = Layout.getChildViews\r\n            ? Layout.getChildViews().length\r\n            : 0;\r\n\r\n         let stopPos = rows.length;\r\n\r\n         if (this._startPos == 0) {\r\n            stopPos = rows.length;\r\n         } else if (rows.length - this._startPos > 20) {\r\n            stopPos = this._startPos + 20;\r\n         }\r\n\r\n         if (dc.settings.loadAll) {\r\n            stopPos = rows.length;\r\n         }\r\n\r\n         var dataGrid = [];\r\n         for (var i = this._startPos; i < stopPos; i++) {\r\n            // get the components configuation\r\n            let detailCom = App.AB.cloneDeep(super.component(App, rows[i].id));\r\n\r\n            // adjust the UI to make sure it will look like a \"card\"\r\n            detailCom.ui.type = \"space\";\r\n            detailCom.ui.css = \"ab-detail-view\";\r\n            if (detailsPage || editPage) {\r\n               detailCom.ui.css += \" ab-detail-hover ab-record-\" + rows[i].id;\r\n            }\r\n            if (detailsPage) {\r\n               detailCom.ui.css += \" ab-detail-page\";\r\n            }\r\n            if (editPage) {\r\n               detailCom.ui.css += \" ab-edit-page\";\r\n            }\r\n            detailCom.ui.paddingX = 10;\r\n            detailCom.ui.paddingY = 6;\r\n            detailCom.ui.minWidth = recordWidth - 10;\r\n            detailCom.ui.maxWidth = recordWidth;\r\n\r\n            if (Layout.addView) {\r\n               Layout.addView(detailCom.ui, -1);\r\n               detailCom.init(null, 2); // 2 - Always allow access to components inside data view\r\n               setTimeout(detailCom.logic.displayData(rows[i]), 0);\r\n            } else {\r\n               records.push(detailCom.ui);\r\n            }\r\n         }\r\n\r\n         if (records.length) {\r\n            var flexlayout = {\r\n               id: ids.dataFlexView,\r\n               view: \"flexlayout\",\r\n               paddingX: 15,\r\n               paddingY: 19,\r\n               type: \"space\",\r\n               cols: records,\r\n            };\r\n            webix.ui(flexlayout, $$(ids.scrollview), $$(ids.dataFlexView));\r\n\r\n            for (let i = this._startPos; i < stopPos; i++) {\r\n               let detailCom = App.AB.cloneDeep(\r\n                  super.component(App, rows[i].id)\r\n               );\r\n               detailCom.init(null, 2); // 2 - Always allow access to components inside data view\r\n               setTimeout(detailCom.logic.displayData(rows[i]), 0);\r\n            }\r\n         }\r\n\r\n         if ($$(ids.scrollview)) {\r\n            $$(ids.scrollview).scrollTo(0, com.getYPos());\r\n\r\n            if (detailsPage || editPage) {\r\n               Layout.$view.onclick = (e) => {\r\n                  var clicked = false;\r\n                  if (editPage) {\r\n                     for (let p of e.path) {\r\n                        if (\r\n                           p.className &&\r\n                           p.className.indexOf(\"webix_accordionitem_header\") >\r\n                              -1\r\n                        ) {\r\n                           clicked = true;\r\n                           p.parentNode.parentNode.classList.forEach((c) => {\r\n                              if (c.indexOf(\"ab-record-\") > -1) {\r\n                                 // var record = parseInt(c.replace(\"ab-record-\", \"\"));\r\n                                 var record = c.replace(\"ab-record-\", \"\");\r\n                                 linkPage.changePage(editPage, record);\r\n                                 // com.logic.toggleTab(detailsTab, ids.component);\r\n                              }\r\n                           });\r\n                           break;\r\n                        }\r\n                     }\r\n                  }\r\n                  if (detailsPage && !clicked) {\r\n                     for (let p of e.path) {\r\n                        if (\r\n                           p.className &&\r\n                           p.className.indexOf(\"webix_accordionitem\") > -1\r\n                        ) {\r\n                           p.parentNode.parentNode.classList.forEach((c) => {\r\n                              if (c.indexOf(\"ab-record-\") > -1) {\r\n                                 // var record = parseInt(c.replace(\"ab-record-\", \"\"));\r\n                                 var record = c.replace(\"ab-record-\", \"\");\r\n                                 linkPage.changePage(detailsPage, record);\r\n                                 // com.logic.toggleTab(detailsTab, ids.component);\r\n                              }\r\n                           });\r\n                           break;\r\n                        }\r\n                     }\r\n                  }\r\n               };\r\n            }\r\n         }\r\n\r\n         //Add data-cy attributes for cypress tests\r\n         const name = this.name.replace(\".dataview\", \"\");\r\n         Layout.$view.setAttribute(\r\n            \"data-cy\",\r\n            `dataview container ${name} ${this.id}`\r\n         );\r\n\r\n         Layout.getChildViews().forEach((child, i) => {\r\n            const uuid = rows[i + this._startPos][\"uuid\"];\r\n            const view = child.$view;\r\n            view\r\n               .querySelector(\".webix_accordionitem_body\")\r\n               .setAttribute(\r\n                  \"data-cy\",\r\n                  `dataview item ${name} ${uuid} ${this.id}`\r\n               );\r\n            view\r\n               .querySelector(\".webix_accordionitem_button\")\r\n               .setAttribute(\r\n                  \"data-cy\",\r\n                  `dataview item button ${name} ${uuid} ${this.id}`\r\n               );\r\n         });\r\n\r\n         com.logic.ready();\r\n      };\r\n\r\n      return com;\r\n   }\r\n\r\n   get linkPageHelper() {\r\n      if (this.__linkPageHelper == null)\r\n         this.__linkPageHelper = new ABViewPropertyLinkPage();\r\n\r\n      return this.__linkPageHelper;\r\n   }\r\n};\r\n","const ABViewDetailCore = require(\"../../core/views/ABViewDetailCore\");\r\nconst ABViewDetailComponent = require(\"./ABViewDetailComponent\");\r\nconst ABObjectQuery = require(\"../ABObjectQuery\");\r\n\r\nconst ABViewDetailPropertyComponentDefaults = ABViewDetailCore.defaultValues();\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABViewDetail extends ABViewDetailCore {\r\n   // constructor(values, application, parent, defaultValues) {\r\n   //    super(values, application, parent, defaultValues);\r\n   // }\r\n\r\n   /**\r\n    * @method editorComponent\r\n    * return the Editor for this UI component.\r\n    * the editor should display either a \"block\" view or \"preview\" of\r\n    * the current layout of the view.\r\n    * @param {string} mode what mode are we in ['block', 'preview']\r\n    * @return {Component}\r\n    */\r\n   editorComponent(App, mode) {\r\n      var comp = super.editorComponent(App, mode);\r\n\r\n      // Define height of cell\r\n      comp.ui.rows[0].cellHeight = 75;\r\n\r\n      return comp;\r\n   }\r\n\r\n   //\r\n   // Property Editor\r\n   //\r\n\r\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\r\n      var commonUI = super.propertyEditorDefaultElements(\r\n         App,\r\n         ids,\r\n         _logic,\r\n         ObjectDefaults\r\n      );\r\n\r\n      // _logic functions\r\n\r\n      _logic.selectSource = async (dcId, oldDcId) => {\r\n         // TODO : warning message\r\n\r\n         _logic.busy();\r\n\r\n         let currView = _logic.currentEditObject();\r\n         currView.settings.dataviewID = dcId;\r\n\r\n         // clear sub views\r\n         currView._views = [];\r\n\r\n         this.propertyUpdateFieldOptions(ids, currView, dcId);\r\n\r\n         // add all fields to editor by default\r\n         if (currView._views.length > 0) return Promise.resolve();\r\n\r\n         let fieldSaves = [];\r\n         let fields = $$(ids.fields).find({});\r\n         fields.reverse();\r\n         fields.forEach((f, index) => {\r\n            if (!f.selected) {\r\n               let yPosition = fields.length - index - 1;\r\n\r\n               var fieldView = currView.addFieldToView(f, yPosition, ids, App);\r\n               fieldSaves.push(fieldView.save());\r\n\r\n               // update item to UI list\r\n               f.selected = 1;\r\n               $$(ids.fields).updateItem(f.id, f);\r\n            }\r\n         });\r\n\r\n         await Promise.all(fieldSaves);\r\n\r\n         // Saving\r\n         await currView.save();\r\n\r\n         currView.emit(\"properties.updated\", currView);\r\n\r\n         _logic.ready();\r\n      };\r\n\r\n      _logic.listTemplate = (field, common) => {\r\n         return `${common.markCheckbox(field)} ${field.label}`;\r\n      };\r\n\r\n      _logic.check = async (e, fieldId) => {\r\n         var currView = _logic.currentEditObject();\r\n\r\n         // update UI list\r\n         var item = $$(ids.fields).getItem(fieldId);\r\n         item.selected = item.selected ? 0 : 1;\r\n         $$(ids.fields).updateItem(fieldId, item);\r\n\r\n         // add a field to the form\r\n         if (item.selected) {\r\n            await currView.addFieldToView(item, null, ids, App).save();\r\n\r\n            // Refresh UI\r\n            currView.emit(\"properties.updated\", currView);\r\n\r\n            // .addFieldToView() does not auto update the currView:\r\n            await currView.save();\r\n         }\r\n         // remove field in the form\r\n         else {\r\n            let fieldView = currView.views(\r\n               (c) => c.settings.fieldId == fieldId\r\n            )[0];\r\n            if (fieldView) {\r\n               // let remainingViews = currView.views(c => c.settings.fieldId != fieldId);\r\n               // currView._views = remainingViews;\r\n\r\n               await fieldView.destroy();\r\n\r\n               // Refresh UI\r\n               currView.emit(\"properties.updated\", currView);\r\n            }\r\n         }\r\n\r\n         // trigger a save()\r\n         // this.propertyEditorSave(ids, currView);\r\n      };\r\n\r\n      return commonUI.concat([\r\n         {\r\n            name: \"datacollection\",\r\n            view: \"richselect\",\r\n            label: L(\"Data Source\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n            skipAutoSave: true,\r\n            on: {\r\n               onChange: (dcId, oldDcId) => _logic.selectSource(dcId, oldDcId),\r\n            },\r\n         },\r\n         {\r\n            name: \"fields\",\r\n            view: \"list\",\r\n            select: false,\r\n            minHeight: 200,\r\n            template: _logic.listTemplate,\r\n            type: {\r\n               markCheckbox: function (item) {\r\n                  return (\r\n                     \"<span class='check webix_icon fa fa-\" +\r\n                     (item.selected ? \"check-\" : \"\") +\r\n                     \"square-o'></span>\"\r\n                  );\r\n               },\r\n            },\r\n            onClick: {\r\n               check: (e, fieldId) => _logic.check(e, fieldId),\r\n            },\r\n         },\r\n         {\r\n            name: \"showLabel\",\r\n            view: \"checkbox\",\r\n            label: L(\"Display Label\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n         },\r\n         {\r\n            name: \"labelPosition\",\r\n            view: \"richselect\",\r\n            label: L(\"Label Position\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n            options: [\r\n               {\r\n                  id: \"left\",\r\n                  value: L(\"Left\"),\r\n               },\r\n               {\r\n                  id: \"top\",\r\n                  value: L(\"Top\"),\r\n               },\r\n            ],\r\n         },\r\n         {\r\n            name: \"labelWidth\",\r\n            view: \"counter\",\r\n            label: L(\"Label Width\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n         },\r\n         {\r\n            view: \"counter\",\r\n            name: \"height\",\r\n            label: L(\"Height:\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n         },\r\n      ]);\r\n   }\r\n\r\n   static propertyEditorPopulate(App, ids, view) {\r\n      super.propertyEditorPopulate(App, ids, view);\r\n\r\n      var SourceSelector = $$(ids.datacollection);\r\n      var datacollectionId = view.settings.dataviewID || null;\r\n\r\n      // Pull data views to options\r\n      var dcOptions = view.propertyDatacollections();\r\n      SourceSelector.define(\"options\", dcOptions);\r\n      SourceSelector.define(\"value\", datacollectionId);\r\n      SourceSelector.refresh();\r\n\r\n      this.propertyUpdateFieldOptions(ids, view, datacollectionId);\r\n\r\n      $$(ids.showLabel).setValue(\r\n         view.settings.showLabel != null\r\n            ? view.settings.showLabel\r\n            : ABViewDetailPropertyComponentDefaults.showLabel\r\n      );\r\n      $$(ids.labelPosition).setValue(\r\n         view.settings.labelPosition ||\r\n            ABViewDetailPropertyComponentDefaults.labelPosition\r\n      );\r\n      $$(ids.labelWidth).setValue(\r\n         parseInt(view.settings.labelWidth) ||\r\n            ABViewDetailPropertyComponentDefaults.labelWidth\r\n      );\r\n      $$(ids.height).setValue(\r\n         view.settings.height >= 0\r\n            ? view.settings.height\r\n            : ABViewDetailPropertyComponentDefaults.height\r\n      );\r\n\r\n      // update properties when a field component is deleted\r\n      view.views().forEach((v) => {\r\n         if (v instanceof ABViewDetailComponent)\r\n            v.once(\"destroyed\", () =>\r\n               this.propertyEditorPopulate(App, ids, view)\r\n            );\r\n      });\r\n   }\r\n\r\n   static propertyEditorValues(ids, view) {\r\n      super.propertyEditorValues(ids, view);\r\n\r\n      view.settings.dataviewID = $$(ids.datacollection).getValue();\r\n      view.settings.showLabel = $$(ids.showLabel).getValue();\r\n      view.settings.labelPosition = $$(ids.labelPosition).getValue();\r\n      view.settings.labelWidth = $$(ids.labelWidth).getValue();\r\n      view.settings.height = $$(ids.height).getValue();\r\n   }\r\n\r\n   static propertyUpdateFieldOptions(ids, view, dcId) {\r\n      var datacollection = view.AB.datacollectionByID(dcId);\r\n      var object = datacollection ? datacollection.datasource : null;\r\n\r\n      // Pull field list\r\n      var fieldOptions = [];\r\n      if (object != null) {\r\n         fieldOptions = object.fields().map((f) => {\r\n            f.selected =\r\n               view.views((com) => {\r\n                  return f.id == com.settings.fieldId;\r\n               }).length > 0;\r\n\r\n            return f;\r\n         });\r\n      }\r\n\r\n      $$(ids.fields).clearAll();\r\n      $$(ids.fields).parse(fieldOptions);\r\n   }\r\n\r\n   /**\r\n    * @method component()\r\n    * return a UI component based upon this view.\r\n    * @param {obj } App\r\n    * @param {string} idPrefix - define to support in 'Datacollection' widget\r\n    *\r\n    * @return {obj } UI component\r\n    */\r\n   component(App, idPrefix) {\r\n      // get webix.dashboard\r\n      var container = super.component(App, idPrefix);\r\n\r\n      var _ui = {\r\n         type: \"form\",\r\n         borderless: true,\r\n         // height: this.settings.height || ABViewDetailPropertyComponentDefaults.height,\r\n         rows: [\r\n            {\r\n               // view: \"scrollview\",\r\n               body: container.ui,\r\n            },\r\n         ],\r\n      };\r\n\r\n      // make sure each of our child views get .init() called\r\n      var _init = (options, parentAccessLevel) => {\r\n         // populate .views to webix.dashboard\r\n         container.init(options, parentAccessLevel);\r\n      };\r\n\r\n      var _logic = {\r\n         displayData: (rowData) => {\r\n            rowData = rowData || {};\r\n\r\n            let views = this.views() || [];\r\n            views = views.sort((a, b) => {\r\n               if (!a || !b || !a.field || !b.field) return 0;\r\n\r\n               // NOTE: sort order of calculated fields.\r\n               // FORMULA field type should be calculated before CALCULATE field type\r\n               if (a.field.key == \"formula\" && b.field.key == \"calculate\") {\r\n                  return -1;\r\n               } else if (\r\n                  a.field.key == \"calculate\" &&\r\n                  b.field.key == \"formula\"\r\n               ) {\r\n                  return 1;\r\n               } else {\r\n                  return 0;\r\n               }\r\n            });\r\n\r\n            views.forEach((f) => {\r\n               if (f.field) {\r\n                  var field = f.field();\r\n                  var val;\r\n\r\n                  if (!field) return;\r\n\r\n                  if (!rowData) return;\r\n\r\n                  // get value of relation when field is a connect field\r\n                  switch (field.key) {\r\n                     case \"connectObject\":\r\n                        val = field.pullRelationValues(rowData);\r\n                        break;\r\n                     case \"list\":\r\n                        val = rowData[field.columnName];\r\n                        if (!val) {\r\n                           val = \"\";\r\n                           break;\r\n                        }\r\n\r\n                        if (field.settings.isMultiple == 0) {\r\n                           let myVal = \"\";\r\n\r\n                           field.settings.options.forEach(function (options) {\r\n                              if (options.id == val) myVal = options.text;\r\n                           });\r\n\r\n                           if (field.settings.hasColors) {\r\n                              let myHex = \"#66666\";\r\n                              let hasCustomColor = \"\";\r\n                              field.settings.options.forEach(function (h) {\r\n                                 if (h.text == myVal) {\r\n                                    myHex = h.hex;\r\n                                    hasCustomColor = \"hascustomcolor\";\r\n                                 }\r\n                              });\r\n                              myVal = `<span class=\"webix_multicombo_value ${hasCustomColor}\" style=\"background-color: ${myHex} !important;\"><span>${myVal}</span></span>`;\r\n                           }\r\n\r\n                           val = myVal;\r\n                        } else {\r\n                           let items = [];\r\n                           let myVal = \"\";\r\n                           val.forEach((value) => {\r\n                              var hasCustomColor = \"\";\r\n                              var optionHex = \"\";\r\n                              if (field.settings.hasColors && value.hex) {\r\n                                 hasCustomColor = \"hascustomcolor\";\r\n                                 optionHex = `background: ${value.hex};`;\r\n                              }\r\n                              field.settings.options.forEach(function (\r\n                                 options\r\n                              ) {\r\n                                 if (options.id == value.id)\r\n                                    myVal = options.text;\r\n                              });\r\n                              items.push(\r\n                                 `<span class=\"webix_multicombo_value ${hasCustomColor}\" style=\"${optionHex}\" optvalue=\"${value.id}\"><span>${myVal}</span></span>`\r\n                              );\r\n                           });\r\n                           val = items.join(\"\");\r\n                        }\r\n                        break;\r\n                     case \"user\":\r\n                        val = field.pullRelationValues(rowData);\r\n                        break;\r\n                     case \"file\":\r\n                        val = rowData[field.columnName];\r\n                        break;\r\n                     case \"formula\":\r\n                        if (rowData) {\r\n                           let dv = this.datacollection;\r\n                           let ds = dv ? dv.datasource : null;\r\n                           let needRecalculate =\r\n                              !ds || ds instanceof ABObjectQuery ? false : true;\r\n\r\n                           val = field.format(rowData, needRecalculate);\r\n                        }\r\n                        break;\r\n                     default:\r\n                        val = field.format(rowData);\r\n                     // break;\r\n                  }\r\n               }\r\n\r\n               // set value to each components\r\n               var vComponent = f.component(App, idPrefix);\r\n\r\n               // if (vComponent.onShow) vComponent.onShow();\r\n\r\n               if (vComponent.logic && vComponent.logic.setValue) {\r\n                  vComponent.logic.setValue(val);\r\n               }\r\n\r\n               if (vComponent.logic && vComponent.logic.displayText) {\r\n                  vComponent.logic.displayText(rowData);\r\n               }\r\n            });\r\n         },\r\n      };\r\n\r\n      var _onShow = () => {\r\n         container.onShow();\r\n         try {\r\n            const dataCy = `Detail ${this.name.split(\".\")[0]} ${this.id}`;\r\n            $$(container.ui.id).$view.setAttribute(\"data-cy\", dataCy);\r\n         } catch (e) {\r\n            console.warn(\"Problem setting data-cy\", e);\r\n         }\r\n\r\n         // listen DC events\r\n         let dv = this.datacollection;\r\n         if (dv) {\r\n            let currData = dv.getCursor();\r\n            if (currData) {\r\n               _logic.displayData(currData);\r\n            }\r\n\r\n            this.eventAdd({\r\n               emitter: dv,\r\n               eventName: \"changeCursor\",\r\n               listener: (newRow) => {\r\n                  _logic.displayData(newRow);\r\n               },\r\n            });\r\n\r\n            this.eventAdd({\r\n               emitter: dv,\r\n               eventName: \"create\",\r\n               listener: (createdRow) => {\r\n                  let currCursor = dv.getCursor();\r\n                  if (currCursor && currCursor.id == createdRow.id)\r\n                     _logic.displayData(createdRow);\r\n               },\r\n            });\r\n\r\n            this.eventAdd({\r\n               emitter: dv,\r\n               eventName: \"update\",\r\n               listener: (updatedRow) => {\r\n                  let currCursor = dv.getCursor();\r\n                  if (currCursor && currCursor.id == updatedRow.id)\r\n                     _logic.displayData(updatedRow);\r\n               },\r\n            });\r\n         }\r\n      };\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: _init,\r\n         logic: _logic,\r\n\r\n         onShow: _onShow,\r\n      };\r\n   }\r\n\r\n   clearFieldComponents() {\r\n      let tasks = [];\r\n\r\n      this.views().forEach((comp) => {\r\n         tasks.push(() => comp.destroy());\r\n      });\r\n\r\n      return tasks.reduce((promiseChain, currTask) => {\r\n         return promiseChain.then(currTask);\r\n      }, Promise.resolve([]));\r\n   }\r\n\r\n   addFieldToView(field, yPosition, ids, App) {\r\n      if (field == null) return;\r\n\r\n      let newView = field.detailComponent().newInstance(this.application, this);\r\n      if (newView == null) return;\r\n\r\n      // set settings to component\r\n      newView.settings = newView.settings || {};\r\n      newView.settings.fieldId = field.id;\r\n      newView.settings.labelWidth =\r\n         this.settings.labelWidth ||\r\n         ABViewDetailPropertyComponentDefaults.labelWidth;\r\n\r\n      // keep alias to support Query that contains alias name\r\n      // [alias].[columnName]\r\n      newView.settings.alias = field.alias;\r\n\r\n      // TODO : Default settings\r\n\r\n      newView.position.y = yPosition;\r\n\r\n      // add a new component\r\n      this._views.push(newView);\r\n\r\n      // update properties when a sub-view is destroyed\r\n      newView.once(\"destroyed\", () => {\r\n         ABViewDetail.propertyEditorPopulate(App, ids, this);\r\n      });\r\n\r\n      return newView;\r\n   }\r\n};\r\n","const ABViewDetailCheckboxCore = require(\"../../core/views/ABViewDetailCheckboxCore\");\r\n\r\nmodule.exports = class ABViewDetailCheckbox extends ABViewDetailCheckboxCore {\r\n   /**\r\n    * @param {obj} values  key=>value hash of ABView values\r\n    * @param {ABApplication} application the application object this view is under\r\n    * @param {ABView} parent the ABView this view is a child of. (can be null)\r\n    */\r\n   // constructor(values, application, parent, defaultValues) {\r\n   //    super(values, application, parent, defaultValues);\r\n   // }\r\n\r\n   //\r\n   //\tEditor Related\r\n   //\r\n\r\n   /**\r\n    * @method editorComponent\r\n    * return the Editor for this UI component.\r\n    * the editor should display either a \"block\" view or \"preview\" of\r\n    * the current layout of the view.\r\n    * @param {string} mode what mode are we in ['block', 'preview']\r\n    * @return {Component}\r\n    */\r\n   editorComponent(App, mode) {\r\n      var idBase = \"ABViewDetailCheckboxEditorComponent\";\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n      };\r\n\r\n      var checkboxElem = this.component(App).ui;\r\n      checkboxElem.id = ids.component;\r\n\r\n      var _ui = {\r\n         rows: [checkboxElem, {}],\r\n      };\r\n\r\n      var _init = (options) => {};\r\n\r\n      var _logic = {};\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: _init,\r\n         logic: _logic,\r\n      };\r\n   }\r\n\r\n   //\r\n   // Property Editor\r\n   //\r\n\r\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\r\n      var commonUI = super.propertyEditorDefaultElements(\r\n         App,\r\n         ids,\r\n         _logic,\r\n         ObjectDefaults\r\n      );\r\n\r\n      // in addition to the common .label  values, we\r\n      // ask for:\r\n      return commonUI.concat([]);\r\n   }\r\n\r\n   static propertyEditorPopulate(App, ids, view) {\r\n      super.propertyEditorPopulate(App, ids, view);\r\n   }\r\n\r\n   static propertyEditorValues(ids, view) {\r\n      super.propertyEditorValues(ids, view);\r\n   }\r\n\r\n   /**\r\n    * @component()\r\n    * return a UI component based upon this view.\r\n    * @param {obj} App\r\n    * @param {string} idPrefix\r\n    *\r\n    * @return {obj} UI component\r\n    */\r\n   component(App, idPrefix) {\r\n      var component = super.component(App);\r\n      var field = this.field();\r\n\r\n      var idBase = \"ABViewDetailCheckbox_\" + (idPrefix || \"\") + this.id;\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n         detail: this.parentDetailComponent()?.id || this.parent.id,\r\n      };\r\n\r\n      component.ui.id = ids.component;\r\n\r\n      component.ui.on = {\r\n         //Add data-cy attribute for Cypress Testing\r\n         onAfterRender: () => {\r\n            const dataCy = `detail checkbox ${field?.columnName} ${field?.id} ${ids.detail}`;\r\n            $$(ids.component)?.$view.setAttribute(\"data-cy\", dataCy);\r\n         },\r\n      };\r\n\r\n      return {\r\n         ui: component.ui,\r\n         init: component.init,\r\n\r\n         logic: {\r\n            setValue: (val) => {\r\n               var checkbox = \"\";\r\n\r\n               // Check\r\n               if (val && JSON.parse(val))\r\n                  checkbox =\r\n                     '<span class=\"check webix_icon fa fa-check-square-o\"></span>';\r\n               // Uncheck\r\n               else\r\n                  checkbox =\r\n                     '<span class=\"check webix_icon fa fa-square-o\"></span>';\r\n\r\n               component.logic.setValue(ids.component, checkbox);\r\n            },\r\n         },\r\n      };\r\n   }\r\n};\r\n","const ABViewDetailComponentCore = require(\"../../core/views/ABViewDetailComponentCore\");\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABViewDetailComponent extends ABViewDetailComponentCore {\r\n   // constructor(values, application, parent, defaultValues) {\r\n   //    super(values, application, parent, defaultValues);\r\n   // }\r\n\r\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\r\n      var commonUI = super.propertyEditorDefaultElements(\r\n         App,\r\n         ids,\r\n         _logic,\r\n         ObjectDefaults\r\n      );\r\n\r\n      return commonUI.concat([\r\n         {\r\n            name: \"fieldLabel\",\r\n            view: \"text\",\r\n            disabled: true,\r\n            label: L(\"Field\"),\r\n         },\r\n      ]);\r\n   }\r\n\r\n   static propertyEditorPopulate(App, ids, view) {\r\n      super.propertyEditorPopulate(App, ids, view);\r\n\r\n      var field = view.field();\r\n\r\n      if (field) {\r\n         $$(ids.fieldLabel).setValue(field.label);\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @component()\r\n    * return a UI component based upon this view.\r\n    * @param {obj} App\r\n    * @param {string} idPrefix\r\n    *\r\n    * @return {obj} UI component\r\n    */\r\n   component(App, idPrefix) {\r\n      var idBase = \"ABViewDetailComponent_\" + (idPrefix || \"\") + this.id;\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n      };\r\n      // setup 'label' of the element\r\n      var detailView = this.detailComponent(),\r\n         field = this.field() || {},\r\n         label = \"\";\r\n\r\n      var settings = {};\r\n      if (detailView) settings = detailView.settings;\r\n\r\n      var isUsers = false;\r\n      if (field && field.key == \"user\") isUsers = true;\r\n\r\n      var templateLabel = \"\";\r\n      if (settings.showLabel == true) {\r\n         if (settings.labelPosition == \"top\")\r\n            templateLabel =\r\n               \"<label style='display:block; text-align: left;' class='webix_inp_top_label'>#label#</label>#display#\";\r\n         else\r\n            templateLabel =\r\n               \"<label style='width: #width#px; display: inline-block; float: left; line-height: 32px;'>#label#</label><div class='ab-detail-component-holder' style='margin-left: #width#px;'>#display#</div>\";\r\n      }\r\n      // no label\r\n      else {\r\n         templateLabel = \"#display#\";\r\n      }\r\n\r\n      var template = templateLabel\r\n         .replace(/#width#/g, settings.labelWidth)\r\n         .replace(/#label#/g, field ? field.label : \"\");\r\n\r\n      var height = 38;\r\n      if (settings.labelPosition == \"top\") height = height * 2;\r\n\r\n      if (\r\n         field &&\r\n         field.settings &&\r\n         typeof field.settings.useHeight != \"undefined\" &&\r\n         field.settings.useHeight == 1\r\n      ) {\r\n         height = parseInt(field.settings.imageHeight) || height;\r\n      }\r\n\r\n      var _ui = {\r\n         id: ids.component,\r\n         view: \"template\",\r\n         borderless: true,\r\n         height: height,\r\n         isUsers: isUsers,\r\n         template: template,\r\n         data: { display: \"\" }, // show empty data in template\r\n      };\r\n\r\n      // make sure each of our child views get .init() called\r\n      var _init = (options) => {};\r\n\r\n      var _logic = {\r\n         setValue: (componentId, val) => {\r\n            if ($$(componentId)) {\r\n               if (field.key == \"string\" || field.key == \"LongText\") {\r\n                  val = val.replace(/[<]/g, \"&lt;\");\r\n               } else if (field.key == \"user\") {\r\n                  val = val.text ?? val.value ?? val.username ?? val;\r\n               }\r\n               $$(componentId).setValues({ display: val });\r\n            }\r\n         },\r\n      };\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: _init,\r\n         logic: _logic,\r\n      };\r\n   }\r\n};\r\n","const ABViewDetailConnectCore = require(\"../../core/views/ABViewDetailConnectCore\");\r\nconst ABViewPropertyAddPage = require(\"./viewProperties/ABViewPropertyAddPage\")\r\n   .default;\r\n\r\nmodule.exports = class ABViewDetailConnect extends ABViewDetailConnectCore {\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /**\r\n    * @method fromValues()\r\n    *\r\n    * initialze this object with the given set of values.\r\n    * @param {obj} values\r\n    */\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n\r\n      this.addPageTool.fromSettings(this.settings);\r\n   }\r\n\r\n   //\r\n   // Property Editor\r\n   //\r\n\r\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\r\n      let commonUI = super.propertyEditorDefaultElements(\r\n         App,\r\n         ids,\r\n         _logic,\r\n         ObjectDefaults\r\n      );\r\n\r\n      let idBase = \"ABViewDetailConnectPropertyEditor\";\r\n\r\n      if (this.addPageProperty == null) {\r\n         this.addPageProperty = ABViewPropertyAddPage.propertyComponent(\r\n            App,\r\n            idBase\r\n         );\r\n         this.addPageProperty.init({\r\n            onSave: () => {\r\n               let currView = _logic.currentEditObject();\r\n               if (!currView) return;\r\n\r\n               // refresh settings\r\n               this.propertyEditorValues(ids, currView);\r\n\r\n               // trigger a save()\r\n               this.propertyEditorSave(ids, currView);\r\n            },\r\n         });\r\n      }\r\n\r\n      // in addition to the common .label  values, we\r\n      // ask for:\r\n      return commonUI.concat([this.addPageProperty.ui]);\r\n   }\r\n\r\n   static propertyEditorPopulate(App, ids, view) {\r\n      super.propertyEditorPopulate(App, ids, view);\r\n\r\n      this.addPageProperty.setSettings(view, view.settings);\r\n   }\r\n\r\n   static propertyEditorValues(ids, view) {\r\n      super.propertyEditorValues(ids, view);\r\n\r\n      view.settings = this.addPageProperty.getSettings(view);\r\n\r\n      // refresh settings of app page tool\r\n      view.addPageTool.fromSettings(view.settings);\r\n   }\r\n\r\n   /**\r\n    * @method component()\r\n    * return a UI component based upon this view.\r\n    * @param {obj} App\r\n    * @param {string} idPrefix\r\n    *\r\n    * @return {obj} UI component\r\n    */\r\n   component(App, idPrefix) {\r\n      let idBase = \"ABViewDetailConnect_\" + (idPrefix || \"\") + this.id;\r\n      let baseComp = super.component(App, idBase);\r\n      var ids = {\r\n         detail: this.parentDetailComponent()?.id || this.parent.id,\r\n      };\r\n\r\n      let addPageComponent = this.addPageTool.component(App, idBase);\r\n\r\n      let _init = (options) => {\r\n         baseComp.init(options);\r\n\r\n         addPageComponent.applicationLoad(this.application);\r\n         addPageComponent.init({\r\n            // TODO : callbacks\r\n         });\r\n      };\r\n\r\n      baseComp.ui.on = {\r\n         //Add data-cy attribute for Cypress Testing\r\n         onAfterRender: () => {\r\n            let field = this.field((fld) => {\r\n               return fld.id == this.settings.fieldId;\r\n            });\r\n            // some form fields are remaining in the UI even after removed from data structure\r\n            if (field?.columnName) {\r\n               let columnName = field.columnName;\r\n               const dataCy = `detail connected ${columnName} ${this.settings.fieldId} ${ids.detail}`;\r\n               $$(baseComp.ui.id)?.$view.setAttribute(\"data-cy\", dataCy);\r\n            }\r\n         },\r\n      };\r\n\r\n      // Click to open new data form\r\n      // addPageComponent.ui.onClick = addPageComponent.ui.onClick || {};\r\n      let ui = {};\r\n      if (addPageComponent.ui) {\r\n         addPageComponent.ui.click = (e, id, trg) => {\r\n            // e.stopPropagation();\r\n\r\n            // TODO: busy cursor\r\n\r\n            let dc;\r\n            let detail = this.detailComponent();\r\n            if (detail) dc = detail.datacollection;\r\n\r\n            setTimeout(() => {\r\n               addPageComponent.onClick(dc);\r\n            }, 50);\r\n\r\n            return false;\r\n         };\r\n\r\n         ui = {\r\n            rows: [\r\n               {\r\n                  cols: [baseComp.ui, addPageComponent.ui],\r\n               },\r\n            ],\r\n         };\r\n      } else {\r\n         ui = baseComp.ui;\r\n      }\r\n\r\n      return {\r\n         ui: ui,\r\n\r\n         init: _init,\r\n         logic: {\r\n            setValue: (val) => {\r\n               let vals = [];\r\n               if (Array.isArray(val)) {\r\n                  val.forEach((record) => {\r\n                     vals.push(\r\n                        `<span class=\"webix_multicombo_value\">${record.text}</span>`\r\n                     );\r\n                  });\r\n               } else {\r\n                  vals.push(\r\n                     `<span class=\"webix_multicombo_value\">${val.text}</span>`\r\n                  );\r\n               }\r\n               baseComp.logic.setValue(baseComp.ui.id, vals.join(\"\"));\r\n            },\r\n         },\r\n      };\r\n   }\r\n\r\n   get addPageTool() {\r\n      if (this.__addPageTool == null)\r\n         this.__addPageTool = new ABViewPropertyAddPage();\r\n\r\n      return this.__addPageTool;\r\n   }\r\n};\r\n","const ABViewDetailCustomCore = require(\"../../core/views/ABViewDetailCustomCore\");\r\n\r\nmodule.exports = class ABViewDetailCustom extends ABViewDetailCustomCore {\r\n   /**\r\n    * @param {obj} values  key=>value hash of ABView values\r\n    * @param {ABApplication} application the application object this view is under\r\n    * @param {ABView} parent the ABView this view is a child of. (can be null)\r\n    */\r\n   // constructor(values, application, parent, defaultValues) {\r\n   //    super(values, application, parent, defaultValues);\r\n   // }\r\n\r\n   //\r\n   //\tEditor Related\r\n   //\r\n\r\n   /**\r\n    * @method editorComponent\r\n    * return the Editor for this UI component.\r\n    * the editor should display either a \"block\" view or \"preview\" of\r\n    * the current layout of the view.\r\n    * @param {string} mode what mode are we in ['block', 'preview']\r\n    * @return {Component}\r\n    */\r\n   editorComponent(App, mode) {\r\n      var idBase = \"ABViewDetailCustomEditorComponent\";\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n      };\r\n\r\n      var component = this.component(App);\r\n\r\n      var textElem = component.ui;\r\n      textElem.id = ids.component;\r\n\r\n      var _ui = {\r\n         rows: [textElem, {}],\r\n      };\r\n\r\n      var _init = component.init;\r\n      var _logic = component.logic;\r\n\r\n      var _onShow = component.onShow;\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: _init,\r\n         logic: _logic,\r\n\r\n         onShow: _onShow,\r\n      };\r\n   }\r\n\r\n   //\r\n   // Property Editor\r\n   //\r\n\r\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\r\n      var commonUI = super.propertyEditorDefaultElements(\r\n         App,\r\n         ids,\r\n         _logic,\r\n         ObjectDefaults\r\n      );\r\n\r\n      // in addition to the common .label  values, we\r\n      // ask for:\r\n      return commonUI.concat([]);\r\n   }\r\n\r\n   static propertyEditorPopulate(App, ids, view) {\r\n      super.propertyEditorPopulate(App, ids, view);\r\n   }\r\n\r\n   static propertyEditorValues(ids, view) {\r\n      super.propertyEditorValues(ids, view);\r\n   }\r\n\r\n   /**\r\n    * @component()\r\n    * return a UI component based upon this view.\r\n    * @param {obj} App\r\n    * @param {string} idPrefix\r\n    *\r\n    * @return {obj} UI component\r\n    */\r\n   component(App, idPrefix) {\r\n      var component = super.component(App);\r\n      var field = this.field();\r\n      var detailView = this.detailComponent();\r\n\r\n      var idBase = \"ABViewDetailCustom_\" + (idPrefix || \"\") + this.id;\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n         detail: this.parentDetailComponent()?.id || this.parent.id,\r\n      };\r\n\r\n      var templateLabel = \"\";\r\n      if (detailView.settings.showLabel == true) {\r\n         if (detailView.settings.labelPosition == \"top\")\r\n            templateLabel =\r\n               \"<label style='display:block; text-align: left;' class='webix_inp_top_label'>#label#</label>\";\r\n         else\r\n            templateLabel =\r\n               \"<label style='width: #width#px; display: inline-block; float: left; line-height: 32px;'>#label#</label>\";\r\n      }\r\n\r\n      var template = (templateLabel + \"#result#\")\r\n         // var template = (templateLabel)\r\n         .replace(/#width#/g, detailView.settings.labelWidth)\r\n         .replace(/#label#/g, field ? field.label : \"\")\r\n         .replace(/#result#/g, field ? field.columnHeader().template({}) : \"\");\r\n\r\n      component.ui.id = ids.component;\r\n      component.ui.view = \"template\";\r\n      component.ui.minHeight = 45;\r\n      component.ui.height = 60;\r\n      component.ui.borderless = true;\r\n      component.ui.template = template;\r\n\r\n      component.ui.on = {\r\n         //Add data-cy attribute for Cypress Testing\r\n         onAfterRender: () => {\r\n            const dataCy = `detail custom ${field?.columnName} ${field?.id} ${ids.detail}`;\r\n            $$(ids.component)?.$view.setAttribute(\"data-cy\", dataCy);\r\n         },\r\n      };\r\n\r\n      // make sure each of our child views get .init() called\r\n      component.init = (options) => {};\r\n\r\n      component.onShow = () => {\r\n         if (!field) return;\r\n\r\n         var elem = $$(ids.component);\r\n         if (!elem) return;\r\n\r\n         var detailCom = this.detailComponent(),\r\n            rowData = detailCom.datacollection.getCursor() || {},\r\n            node = elem.$view;\r\n\r\n         field.customDisplay(rowData, App, node, {\r\n            editable: false,\r\n         });\r\n      };\r\n\r\n      component.logic.setValue = (val) => {\r\n         if (!field) return;\r\n\r\n         var elem = $$(ids.component);\r\n         if (!elem) return;\r\n\r\n         var rowData = {};\r\n         rowData[field.columnName] = val;\r\n\r\n         field.setValue(elem, rowData);\r\n      };\r\n\r\n      return component;\r\n   }\r\n};\r\n","const ABViewDetailImageCore = require(\"../../core/views/ABViewDetailImageCore\");\r\n\r\nconst ABViewDetailImagePropertyComponentDefaults = ABViewDetailImageCore.defaultValues();\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABViewDetailImage extends ABViewDetailImageCore {\r\n   /**\r\n    * @param {obj} values  key=>value hash of ABView values\r\n    * @param {ABApplication} application the application object this view is under\r\n    * @param {ABView} parent the ABView this view is a child of. (can be null)\r\n    */\r\n   // constructor(values, application, parent, defaultValues) {\r\n   //    super(values, application, parent, defaultValues);\r\n   // }\r\n\r\n   //\r\n   //\tEditor Related\r\n   //\r\n\r\n   /**\r\n    * @method editorComponent\r\n    * return the Editor for this UI component.\r\n    * the editor should display either a \"block\" view or \"preview\" of\r\n    * the current layout of the view.\r\n    * @param {string} mode what mode are we in ['block', 'preview']\r\n    * @return {Component}\r\n    */\r\n   editorComponent(App, mode) {\r\n      var idBase = \"ABViewDetailImageEditorComponent\";\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n      };\r\n\r\n      var elem = this.component(App).ui;\r\n      elem.id = ids.component;\r\n\r\n      var _ui = {\r\n         rows: [elem, {}],\r\n      };\r\n\r\n      var _init = (options) => {};\r\n\r\n      var _logic = {};\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: _init,\r\n         logic: _logic,\r\n      };\r\n   }\r\n\r\n   //\r\n   // Property Editor\r\n   //\r\n\r\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\r\n      var commonUI = super.propertyEditorDefaultElements(\r\n         App,\r\n         ids,\r\n         _logic,\r\n         ObjectDefaults\r\n      );\r\n\r\n      // in addition to the common .label  values, we\r\n      // ask for:\r\n      return commonUI.concat([\r\n         {\r\n            view: \"counter\",\r\n            name: \"height\",\r\n            label: L(\"Height:\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n         },\r\n         {\r\n            view: \"counter\",\r\n            name: \"width\",\r\n            label: L(\"Width:\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n         },\r\n      ]);\r\n   }\r\n\r\n   static propertyEditorPopulate(App, ids, view) {\r\n      super.propertyEditorPopulate(App, ids, view);\r\n\r\n      $$(ids.height).setValue(\r\n         view.settings.height ||\r\n            ABViewDetailImagePropertyComponentDefaults.height\r\n      );\r\n      $$(ids.width).setValue(\r\n         view.settings.width || ABViewDetailImagePropertyComponentDefaults.width\r\n      );\r\n   }\r\n\r\n   static propertyEditorValues(ids, view) {\r\n      super.propertyEditorValues(ids, view);\r\n\r\n      view.settings.height = $$(ids.height).getValue();\r\n      view.settings.width = $$(ids.width).getValue();\r\n   }\r\n\r\n   /**\r\n    * @component()\r\n    * return a UI component based upon this view.\r\n    * @param {obj} App\r\n    * @param {string} idPrefix\r\n    *\r\n    * @return {obj} UI component\r\n    */\r\n   component(App, idPrefix) {\r\n      var component = super.component(App);\r\n      var field = this.field();\r\n\r\n      var idBase = `ABViewDetailImage_${idPrefix || \"\"}${this.id}`;\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n         detail: this.parentDetailComponent()?.id || this.parent.id,\r\n      };\r\n\r\n      var defaultImageUrl = field ? field.settings.defaultImageUrl : \"\";\r\n\r\n      component.ui.id = ids.component;\r\n\r\n      if (this.settings.height) component.ui.height = this.settings.height;\r\n\r\n      // if (this.settings.width)\r\n      // \tcomponent.ui.width = this.settings.width;\r\n\r\n      component.ui.on = {\r\n         //Add data-cy attribute for Cypress Testing\r\n         onAfterRender: () => {\r\n            const dataCy = `detail image ${field?.columnName} ${field?.id} ${ids.detail}`;\r\n            $$(ids.component)?.$view.setAttribute(\"data-cy\", dataCy);\r\n         },\r\n      };\r\n\r\n      var _logic = {\r\n         setValue: (val) => {\r\n            var imageTemplate = \"\";\r\n\r\n            if (val || (!val && defaultImageUrl)) {\r\n               let imageUrl = field.urlImage(val || defaultImageUrl);\r\n               let width =\r\n                  field && field.settings.imageWidth\r\n                     ? `${field.settings.imageWidth}px`\r\n                     : \"200px\";\r\n               let height =\r\n                  field && field.settings.imageHeight\r\n                     ? `${field.settings.imageHeight}px`\r\n                     : \"100%\";\r\n\r\n               if (this.settings.height) height = `${this.settings.height}px`;\r\n\r\n               if (this.settings.width) width = `${this.settings.width}px`;\r\n\r\n               imageTemplate =\r\n                  `<div class=\"ab-image-data-field\">` +\r\n                  `<div style=\"float: left; background-size: cover; background-position: center center; background-image:url('${imageUrl}');  width: ${width}; height: ${height}; position:relative;\">` +\r\n                  `<a href=\"${imageUrl}\" target=\"_blank\" title=\"\" class=\"fa fa-download ab-image-data-field-download\"></a>` +\r\n                  `</div></div>`;\r\n            }\r\n\r\n            component.logic.setValue(ids.component, imageTemplate);\r\n         },\r\n      };\r\n\r\n      return {\r\n         ui: component.ui,\r\n         init: component.init,\r\n\r\n         logic: _logic,\r\n      };\r\n   }\r\n};\r\n","const ABViewDetailTextCore = require(\"../../core/views/ABViewDetailTextCore\");\r\n\r\nconst ABViewDetailTextPropertyComponentDefaults = ABViewDetailTextCore.defaultValues();\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABViewDetailText extends ABViewDetailTextCore {\r\n   /**\r\n    * @param {obj} values  key=>value hash of ABView values\r\n    * @param {ABApplication} application the application object this view is under\r\n    * @param {ABView} parent the ABView this view is a child of. (can be null)\r\n    */\r\n   // constructor(values, application, parent, defaultValues) {\r\n   //    super(values, application, parent, defaultValues);\r\n   // }\r\n\r\n   //\r\n   //\tEditor Related\r\n   //\r\n\r\n   /**\r\n    * @method editorComponent\r\n    * return the Editor for this UI component.\r\n    * the editor should display either a \"block\" view or \"preview\" of\r\n    * the current layout of the view.\r\n    * @param {string} mode what mode are we in ['block', 'preview']\r\n    * @return {Component}\r\n    */\r\n   editorComponent(App, mode) {\r\n      var idBase = \"ABViewDetailTextEditorComponent\";\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n      };\r\n\r\n      var textElem = this.component(App).ui;\r\n      textElem.id = ids.component;\r\n\r\n      var _ui = {\r\n         rows: [textElem, {}],\r\n      };\r\n\r\n      var _init = (options) => {};\r\n\r\n      var _logic = {};\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: _init,\r\n         logic: _logic,\r\n      };\r\n   }\r\n\r\n   //\r\n   // Property Editor\r\n   //\r\n\r\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\r\n      var commonUI = super.propertyEditorDefaultElements(\r\n         App,\r\n         ids,\r\n         _logic,\r\n         ObjectDefaults\r\n      );\r\n\r\n      // in addition to the common .label  values, we\r\n      // ask for:\r\n      return commonUI.concat([\r\n         {\r\n            view: \"counter\",\r\n            name: \"height\",\r\n            label: L(\"Height:\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n         },\r\n      ]);\r\n   }\r\n\r\n   static propertyEditorPopulate(App, ids, view) {\r\n      super.propertyEditorPopulate(App, ids, view);\r\n\r\n      $$(ids.height).setValue(\r\n         view.settings.height ||\r\n            ABViewDetailTextPropertyComponentDefaults.height\r\n      );\r\n   }\r\n\r\n   static propertyEditorValues(ids, view) {\r\n      super.propertyEditorValues(ids, view);\r\n\r\n      view.settings.height = $$(ids.height).getValue();\r\n   }\r\n\r\n   /**\r\n    * @component()\r\n    * return a UI component based upon this view.\r\n    * @param {obj} App\r\n    * @param {string} idPrefix\r\n    *\r\n    * @return {obj} UI component\r\n    */\r\n   component(App, idPrefix) {\r\n      var component = super.component(App);\r\n      var field = this.field();\r\n      var idBase = \"ABViewDetailText_\" + (idPrefix || \"\") + this.id;\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n         detail: this.parentDetailComponent()?.id || this.parent.id,\r\n      };\r\n\r\n      component.ui.id = ids.component;\r\n\r\n      component.ui.css = \"ab-text\";\r\n\r\n      if (this.settings.height) component.ui.height = this.settings.height;\r\n\r\n      component.ui.on = {\r\n         //Add data-cy attribute for Cypress Testing\r\n         onAfterRender: () => {\r\n            const dataCy = `detail text ${field?.columnName} ${field?.id} ${ids.detail}`;\r\n            $$(ids.component)?.$view.setAttribute(\"data-cy\", dataCy);\r\n         },\r\n      };\r\n\r\n      return {\r\n         ui: component.ui,\r\n         init: component.init,\r\n\r\n         logic: {\r\n            setValue: (val) => {\r\n               component.logic.setValue(ids.component, val);\r\n            },\r\n         },\r\n      };\r\n   }\r\n};\r\n","let ABViewDetailTreeCore = require(\"../../core/views/ABViewDetailTreeCore\");\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABViewDetailTree extends ABViewDetailTreeCore {\r\n   /**\r\n    * @param {obj} values  key=>value hash of ABView values\r\n    * @param {ABApplication} application the application object this view is under\r\n    * @param {ABView} parent the ABView this view is a child of. (can be null)\r\n    */\r\n   // constructor(values, application, parent, defaultValues) {\r\n   //    super(values, application, parent, defaultValues);\r\n   // }\r\n\r\n   //\r\n   //\tEditor Related\r\n   //\r\n\r\n   /**\r\n    * @method editorComponent\r\n    * return the Editor for this UI component.\r\n    * the editor should display either a \"block\" view or \"preview\" of\r\n    * the current layout of the view.\r\n    * @param {string} mode what mode are we in ['block', 'preview']\r\n    * @return {Component}\r\n    */\r\n   editorComponent(App, mode) {\r\n      var idBase = \"ABViewDetailTreeEditorComponent\";\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n      };\r\n\r\n      var elem = this.component(App).ui;\r\n      elem.id = ids.component;\r\n\r\n      var _ui = {\r\n         rows: [elem, {}],\r\n      };\r\n\r\n      var _init = (options) => {};\r\n\r\n      var _logic = {};\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: _init,\r\n         logic: _logic,\r\n      };\r\n   }\r\n\r\n   //\r\n   // Property Editor\r\n   //\r\n\r\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\r\n      var commonUI = super.propertyEditorDefaultElements(\r\n         App,\r\n         ids,\r\n         _logic,\r\n         ObjectDefaults\r\n      );\r\n\r\n      // in addition to the common .label  values, we\r\n      // ask for:\r\n      return commonUI.concat([]);\r\n   }\r\n\r\n   static propertyEditorPopulate(App, ids, view) {\r\n      super.propertyEditorPopulate(App, ids, view);\r\n   }\r\n\r\n   static propertyEditorValues(ids, view) {\r\n      super.propertyEditorValues(ids, view);\r\n   }\r\n\r\n   /**\r\n    * @component()\r\n    * return a UI component based upon this view.\r\n    * @param {obj} App\r\n    * @param {string} idPrefix\r\n    *\r\n    * @return {obj} UI component\r\n    */\r\n   component(App, idPrefix) {\r\n      var component = super.component(App);\r\n      var field = this.field();\r\n      var detailView = this.detailComponent();\r\n\r\n      var idBase = `ABViewDetailTree_${idPrefix || \"\"}${this.id}`;\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n      };\r\n      var className = \"ab-detail-tree\";\r\n\r\n      component.ui.id = ids.component;\r\n\r\n      var _init = (options) => {\r\n         component.init(options);\r\n\r\n         // add div of tree to detail\r\n         var divTree = `<div class=\"${className}\"></div>`;\r\n         component.logic.setValue(ids.component, divTree);\r\n      };\r\n\r\n      var _logic = {\r\n         getDomTree: () => {\r\n            var elem = $$(ids.component);\r\n            if (!elem) return;\r\n\r\n            return elem.$view.getElementsByClassName(className)[0];\r\n         },\r\n\r\n         setValue: (val) => {\r\n            // convert value to array\r\n            if (val != null && !(val instanceof Array)) {\r\n               val = [val];\r\n            }\r\n\r\n            setTimeout(function () {\r\n               // get tree dom\r\n               var domTree = _logic.getDomTree();\r\n\r\n               if (!domTree) return false;\r\n\r\n               var branches = [];\r\n               if (typeof field.settings.options.data == \"undefined\") {\r\n                  field.settings.options = new webix.TreeCollection({\r\n                     data: field.settings.options,\r\n                  });\r\n               }\r\n\r\n               field.settings.options.data.each(function (obj) {\r\n                  if (val != null && val.indexOf(obj.id) != -1) {\r\n                     var html = \"\";\r\n\r\n                     var rootid = obj.id;\r\n                     while (this.getParentId(rootid)) {\r\n                        field.settings.options.data.each(function (par) {\r\n                           if (\r\n                              field.settings.options.data.getParentId(rootid) ==\r\n                              par.id\r\n                           ) {\r\n                              html = par.text + \": \" + html;\r\n                           }\r\n                        });\r\n                        rootid = this.getParentId(rootid);\r\n                     }\r\n\r\n                     html += obj.text;\r\n                     branches.push(html);\r\n                  }\r\n               });\r\n\r\n               var myHex = \"#4CAF50\";\r\n               var nodeHTML = \"<div class='list-data-values'>\";\r\n               branches.forEach(function (item) {\r\n                  nodeHTML +=\r\n                     '<span class=\"selectivity-multiple-selected-item rendered\" style=\"background-color:' +\r\n                     myHex +\r\n                     ' !important;\">' +\r\n                     item +\r\n                     \"</span>\";\r\n               });\r\n               nodeHTML += \"</div>\";\r\n               domTree.innerHTML = nodeHTML;\r\n\r\n               var height = 33;\r\n               if (domTree.scrollHeight > 33) height = domTree.scrollHeight;\r\n\r\n               $$(ids.component).config.height = height;\r\n               $$(ids.component).resize();\r\n            }, 50);\r\n         },\r\n      };\r\n\r\n      return {\r\n         ui: component.ui,\r\n\r\n         init: _init,\r\n         logic: _logic,\r\n      };\r\n   }\r\n};\r\n","const ABViewDocxBuilderCore = require(\"../../core/views/ABViewDocxBuilderCore\");\r\n\r\nconst ABFieldConnect = require(\"../dataFields/ABFieldConnect\");\r\nconst ABFieldImage = require(\"../dataFields/ABFieldImage\");\r\nconst ABObjectQuery = require(\"../ABObjectQuery\");\r\n\r\nconst Docxtemplater = require(\"../../../js/docxtemplater.v3.0.12.min.js\");\r\nconst ImageModule = require(\"../../../js/docxtemplater-image-module.v3.0.2.min.js\");\r\nconst JSZipUtils = require(\"jszip-utils/dist/jszip-utils.min.js\");\r\nconst JSZip = require(\"../../../js/jszip.min.js\");\r\n\r\nconst ABViewDocxBuilderPropertyComponentDefaults = ABViewDocxBuilderCore.defaultValues();\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nfunction letUserDownload(blob, filename) {\r\n   let url = window.URL.createObjectURL(blob);\r\n\r\n   let a = document.createElement(\"a\");\r\n   a.href = url;\r\n   a.download = filename;\r\n   document.body.appendChild(a); // we need to append the element to the dom -> otherwise it will not work in firefox\r\n   a.click();\r\n   a.remove(); //afterwards we remove the element again\r\n\r\n   window.URL.revokeObjectURL(url);\r\n}\r\n\r\nmodule.exports = class ABViewDocxBuilder extends ABViewDocxBuilderCore {\r\n   // constructor(values, application, parent, defaultValues) {\r\n   //    super(values, application, parent, defaultValues);\r\n   // }\r\n\r\n   //\r\n   //\tEditor Related\r\n   //\r\n\r\n   /**\r\n    * @method editorComponent\r\n    * return the Editor for this UI component.\r\n    * the editor should display either a \"block\" view or \"preview\" of\r\n    * the current layout of the view.\r\n    * @param {string} mode what mode are we in ['block', 'preview']\r\n    * @return {Component}\r\n    */\r\n   editorComponent(App, mode) {\r\n      var idBase = \"ABViewDocxBuilderEditorComponent\";\r\n\r\n      var DocxBuilderComponent = this.component(App, idBase);\r\n\r\n      return DocxBuilderComponent;\r\n   }\r\n\r\n   //\r\n   // Property Editor\r\n   //\r\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\r\n      var commonUI = super.propertyEditorDefaultElements(\r\n         App,\r\n         ids,\r\n         _logic,\r\n         ObjectDefaults\r\n      );\r\n\r\n      _logic.validateType = (item) => {\r\n         // verify file type\r\n         var acceptableTypes = [\"docx\"];\r\n         var type = item.type.toLowerCase();\r\n         if (acceptableTypes.indexOf(type) == -1) {\r\n            //// TODO: multilingual\r\n            webix.message(\r\n               \"Only [\" + acceptableTypes.join(\", \") + \"] files are supported\"\r\n            );\r\n            return false;\r\n         } else {\r\n            // set upload url to uploader\r\n            let currView = _logic.currentEditObject();\r\n            let uploadUrl = currView.uploadUrl();\r\n\r\n            $$(ids.docxFile).define(\"upload\", uploadUrl);\r\n            $$(ids.docxFile).refresh();\r\n\r\n            return true;\r\n         }\r\n      };\r\n\r\n      _logic.uploadedFile = (fileInfo) => {\r\n         if (!fileInfo || !fileInfo.data) return;\r\n\r\n         let currView = _logic.currentEditObject();\r\n         currView.settings.filename = fileInfo.data.uuid;\r\n         currView.filelabel = fileInfo.name;\r\n\r\n         $$(ids.filelabel).setValue(currView.filelabel);\r\n         $$(ids.docxDownload).show();\r\n      };\r\n\r\n      _logic.downloadFile = () => {\r\n         let currView = _logic.currentEditObject();\r\n         let url = currView.downloadUrl();\r\n\r\n         fetch(url)\r\n            .then((response) => response.blob())\r\n            .then((blob) => {\r\n               letUserDownload(blob, currView.filelabel);\r\n            });\r\n      };\r\n\r\n      // Populate language options\r\n      var langOptions = App.AB.Multilingual.languages().map((lang) => {\r\n         return {\r\n            id: lang.language_code,\r\n            value: lang.language_label,\r\n         };\r\n      });\r\n\r\n      $$(ids.language).define(\"options\", langOptions);\r\n      $$(ids.language).refresh();\r\n\r\n      // in addition to the common .label  values, we\r\n      // ask for:\r\n      return commonUI.concat([\r\n         {\r\n            view: \"fieldset\",\r\n            label: L(\"Data:\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n            body: {\r\n               type: \"clean\",\r\n               padding: 10,\r\n               rows: [\r\n                  {\r\n                     name: \"datacollection\",\r\n                     // view: 'richselect',\r\n                     view: \"multicombo\",\r\n                     label: L(\"Data Source\"),\r\n                     labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n                  },\r\n               ],\r\n            },\r\n         },\r\n\r\n         {\r\n            view: \"fieldset\",\r\n            label: L(\"Template file:\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n            body: {\r\n               type: \"clean\",\r\n               padding: 10,\r\n               rows: [\r\n                  {\r\n                     cols: [\r\n                        {\r\n                           view: \"label\",\r\n                           label: L(\"DOCX file:\"),\r\n                           css: \"ab-text-bold\",\r\n                           width: this.AB.UISettings.config().labelWidthXLarge,\r\n                        },\r\n                        {\r\n                           view: \"uploader\",\r\n                           value: L(\"Upload\"),\r\n                           name: \"docxFile\",\r\n                           apiOnly: true,\r\n                           inputName: \"file\",\r\n                           multiple: false,\r\n                           on: {\r\n                              onBeforeFileAdd: (item) => {\r\n                                 return _logic.validateType(item);\r\n                              },\r\n\r\n                              onFileUpload: (file, response) => {\r\n                                 _logic.uploadedFile(file);\r\n                              },\r\n\r\n                              onFileUploadError: (file, response) => {},\r\n                           },\r\n                        },\r\n                     ],\r\n                  },\r\n                  {\r\n                     name: \"filelabel\",\r\n                     view: \"text\",\r\n                     label: L(\"Filename\"),\r\n                     labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n                  },\r\n                  {\r\n                     name: \"docxDownload\",\r\n                     view: \"button\",\r\n                     type: \"icon\",\r\n                     css: \"webix_primary\",\r\n                     icon: \"fa fa-file-word-o\",\r\n                     label: L(\"Download Template File\"),\r\n                     click: () => {\r\n                        _logic.downloadFile();\r\n                     },\r\n                  },\r\n               ],\r\n            },\r\n         },\r\n\r\n         {\r\n            view: \"fieldset\",\r\n            label: L(\"Language:\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n            body: {\r\n               type: \"clean\",\r\n               padding: 10,\r\n               rows: [\r\n                  {\r\n                     name: \"language\",\r\n                     view: \"richselect\",\r\n                     label: L(\"Language\"),\r\n                     labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n                  },\r\n               ],\r\n            },\r\n         },\r\n\r\n         {\r\n            view: \"fieldset\",\r\n            label: L(\"Customize Display:\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n            body: {\r\n               type: \"clean\",\r\n               padding: 10,\r\n               rows: [\r\n                  {\r\n                     name: \"buttonlabel\",\r\n                     view: \"text\",\r\n                     label: L(\"Label\"),\r\n                     labelWidth: this.AB.UISettings.config().labelWidthXLarge,\r\n                  },\r\n\r\n                  {\r\n                     view: \"counter\",\r\n                     name: \"width\",\r\n                     label: L(\"Width:\"),\r\n                     labelWidth: this.AB.UISettings.config().labelWidthXLarge,\r\n                  },\r\n                  {\r\n                     view: \"richselect\",\r\n                     name: \"toolbarBackground\",\r\n                     label: L(\"Page background:\"),\r\n                     labelWidth: this.AB.UISettings.config().labelWidthXLarge,\r\n                     options: [\r\n                        {\r\n                           id: \"ab-background-default\",\r\n                           value: L(\"White (default)\"),\r\n                        },\r\n                        {\r\n                           id: \"webix_dark\",\r\n                           value: L(\"Dark\"),\r\n                        },\r\n                        {\r\n                           id: \"ab-background-lightgray\",\r\n                           value: L(\"Gray\"),\r\n                        },\r\n                     ],\r\n                  },\r\n\r\n                  {\r\n                     view: \"richselect\",\r\n                     name: \"buttonPosition\",\r\n                     label: L(\"Button Position:\"),\r\n                     labelWidth: this.AB.UISettings.config().labelWidthXLarge,\r\n                     options: [\r\n                        {\r\n                           id: \"left\",\r\n                           value: L(\"Left (default)\"),\r\n                        },\r\n                        {\r\n                           id: \"center\",\r\n                           value: L(\"Centered\"),\r\n                        },\r\n                        {\r\n                           id: \"right\",\r\n                           value: L(\"Right\"),\r\n                        },\r\n                     ],\r\n                  },\r\n               ],\r\n            },\r\n         },\r\n      ]);\r\n   }\r\n\r\n   static propertyEditorPopulate(App, ids, view) {\r\n      super.propertyEditorPopulate(App, ids, view);\r\n\r\n      let $DcSelector = $$(ids.datacollection);\r\n\r\n      let selectedDvId = view.settings.dataviewID\r\n         ? view.settings.dataviewID\r\n         : null;\r\n\r\n      $$(ids.toolbarBackground).setValue(\r\n         view.settings.toolbarBackground ||\r\n            ABViewDocxBuilderPropertyComponentDefaults.toolbarBackground\r\n      );\r\n      $$(ids.buttonPosition).setValue(\r\n         view.settings.buttonPosition ||\r\n            ABViewDocxBuilderPropertyComponentDefaults.buttonPosition\r\n      );\r\n\r\n      // Pull data views to options\r\n      let dcOptions = view.AB.datacollections().map((dc) => {\r\n         return {\r\n            id: dc.id,\r\n            value: dc.label,\r\n         };\r\n      });\r\n\r\n      $DcSelector.define(\"options\", dcOptions);\r\n      $DcSelector.define(\"value\", selectedDvId);\r\n      $DcSelector.refresh();\r\n\r\n      $$(ids.language).setValue(\r\n         view.settings.language ||\r\n            ABViewDocxBuilderPropertyComponentDefaults.language\r\n      );\r\n\r\n      $$(ids.filelabel).setValue(view.filelabel || view.settings.filelabel);\r\n      $$(ids.buttonlabel).setValue(\r\n         view.buttonlabel || view.settings.buttonlabel\r\n      );\r\n      $$(ids.width).setValue(view.settings.width);\r\n\r\n      if (view.settings.filename) {\r\n         $$(ids.docxDownload).show();\r\n      } else {\r\n         $$(ids.docxDownload).hide();\r\n      }\r\n   }\r\n\r\n   static propertyEditorValues(ids, view) {\r\n      super.propertyEditorValues(ids, view);\r\n\r\n      view.buttonlabel = $$(ids.buttonlabel).getValue();\r\n      view.settings.dataviewID = $$(ids.datacollection).getValue();\r\n      view.settings.width = $$(ids.width).getValue();\r\n      view.filelabel = $$(ids.filelabel).getValue();\r\n      view.settings.language = $$(ids.language).getValue();\r\n      view.settings.toolbarBackground = $$(ids.toolbarBackground).getValue();\r\n      view.settings.buttonPosition = $$(ids.buttonPosition).getValue();\r\n   }\r\n\r\n   /**\r\n    * @function component()\r\n    * return a UI component based upon this view.\r\n    * @param {obj} App\r\n    * @return {obj} UI component\r\n    */\r\n   component(App) {\r\n      let baseCom = super.component(App);\r\n\r\n      var idBase = \"ABViewDocxBuilder_\" + this.id;\r\n      var ids = {\r\n         button: App.unique(`${idBase}_button`),\r\n         noFile: App.unique(`${idBase}_noFile`),\r\n      };\r\n\r\n      var autowidth = false;\r\n      var buttonWidth =\r\n         this.settings.width ||\r\n         ABViewDocxBuilderPropertyComponentDefaults.width;\r\n      if (buttonWidth == 0) {\r\n         autowidth = true;\r\n      }\r\n\r\n      var leftSpacer = {\r\n         type: \"spacer\",\r\n         width: 1,\r\n      };\r\n      var rightSpacer = {\r\n         type: \"spacer\",\r\n         width: 1,\r\n      };\r\n      var buttonPos =\r\n         this.settings.buttonPosition ||\r\n         ABViewDocxBuilderPropertyComponentDefaults.buttonPosition;\r\n      if (buttonPos == \"left\") {\r\n         rightSpacer = {\r\n            type: \"spacer\",\r\n         };\r\n      } else if (buttonPos == \"center\") {\r\n         leftSpacer = {\r\n            type: \"spacer\",\r\n         };\r\n         rightSpacer = {\r\n            type: \"spacer\",\r\n         };\r\n      } else if (buttonPos == \"right\") {\r\n         leftSpacer = {\r\n            type: \"spacer\",\r\n         };\r\n      }\r\n\r\n      var buttonLabelText = this.buttonlabel || this.settings.buttonlabel;\r\n      if (!buttonLabelText) {\r\n         buttonLabelText =\r\n            ABViewDocxBuilderPropertyComponentDefaults.buttonlabel;\r\n      }\r\n\r\n      var _ui = {\r\n         view: \"toolbar\",\r\n         css:\r\n            this.settings.toolbarBackground ||\r\n            ABViewDocxBuilderPropertyComponentDefaults.toolbarBackground,\r\n         cols: [\r\n            leftSpacer,\r\n            {\r\n               id: ids.button,\r\n               view: \"button\",\r\n               css: \"webix_primary\",\r\n               type: \"icon\",\r\n               icon: \"fa fa-file-word-o\",\r\n               label: buttonLabelText,\r\n               width:\r\n                  this.settings.width ||\r\n                  ABViewDocxBuilderPropertyComponentDefaults.width,\r\n               autowidth: autowidth,\r\n               click: () => {\r\n                  _logic.renderFile();\r\n               },\r\n               on: {\r\n                  // Add data-cy attribute for cypress tests\r\n                  onAfterRender: () => {\r\n                     const name = this.name.replace(\".docxBuilder\", \"\");\r\n                     const dataCy = `docx download ${name} ${this.id}`;\r\n                     $$(ids.button)\r\n                        ?.$view.querySelector(\"button\")\r\n                        .setAttribute(\"data-cy\", dataCy);\r\n                  },\r\n               },\r\n            },\r\n            {\r\n               id: ids.noFile,\r\n               view: \"label\",\r\n               label: L(\"No template file\"),\r\n            },\r\n            {\r\n               type: \"spacer\",\r\n            },\r\n            rightSpacer,\r\n         ],\r\n      };\r\n\r\n      // make sure each of our child views get .init() called\r\n      var _init = (options) => {\r\n         let DownloadButton = $$(ids.button);\r\n         let NoFileLabel = $$(ids.noFile);\r\n\r\n         if (this.settings.filename) {\r\n            DownloadButton.show();\r\n            NoFileLabel.hide();\r\n         } else {\r\n            DownloadButton.hide();\r\n            NoFileLabel.show();\r\n         }\r\n      };\r\n\r\n      let _logic = {\r\n         busy: () => {\r\n            let DownloadButton = $$(ids.button);\r\n            if (!DownloadButton) return;\r\n\r\n            DownloadButton.disable();\r\n\r\n            DownloadButton.define(\"icon\", \"fa fa-refresh fa-spin\");\r\n            DownloadButton.refresh();\r\n         },\r\n\r\n         ready: () => {\r\n            let DownloadButton = $$(ids.button);\r\n            if (!DownloadButton) return;\r\n\r\n            DownloadButton.enable();\r\n\r\n            DownloadButton.define(\"icon\", \"fa fa-file-word-o\");\r\n            DownloadButton.refresh();\r\n         },\r\n\r\n         onShow: (viewId) => {\r\n            let tasks = [];\r\n\r\n            this.datacollections.forEach((dc) => {\r\n               if (dc && dc.dataStatus == dc.dataStatusFlag.notInitial) {\r\n                  // load data when a widget is showing\r\n                  tasks.push(dc.loadData());\r\n               }\r\n            });\r\n\r\n            // Show loading cursor\r\n            if (tasks.length > 0) _logic.busy();\r\n\r\n            Promise.all(tasks)\r\n               .catch((err) => console.error(err))\r\n               .then(() => {\r\n                  // Hide loading cursor\r\n                  _logic.ready();\r\n               });\r\n         },\r\n\r\n         renderFile: () => {\r\n            _logic.busy();\r\n\r\n            let reportValues = {};\r\n            let images = {};\r\n            let summaries = {}; // { varName: sum number, ..., varName2: number2 }\r\n\r\n            Promise.resolve()\r\n               // Get current cursor\r\n               .then(() => {\r\n                  let datacollections = this.datacollections;\r\n                  let isDcLabelAdded = datacollections.length > 1;\r\n\r\n                  datacollections.forEach((dc) => {\r\n                     if (dc == null) return;\r\n\r\n                     let obj = dc.datasource;\r\n                     if (obj == null) return;\r\n\r\n                     let dcValues = [];\r\n                     let dataList = [];\r\n\r\n                     let dcCursor = dc.getCursor();\r\n\r\n                     // merge cursor to support dc and tree cursor in the report\r\n                     if (dcCursor) {\r\n                        let treeCursor = dc.getCursor(true);\r\n                        dataList.push(App.AB.merge({}, dcCursor, treeCursor));\r\n                     } else dataList = App.AB.cloneDeep(dc.getData());\r\n\r\n                     // update property names to column labels to match format names in docx file\r\n                     let mlFields = obj.multilingualFields();\r\n\r\n                     let setReportValues = (\r\n                        baseData,\r\n                        targetData,\r\n                        field,\r\n                        fieldLabels = []\r\n                     ) => {\r\n                        let val = null;\r\n\r\n                        targetData.id = baseData.id;\r\n                        targetData[`${field.columnName}_ORIGIN`] =\r\n                           baseData[field.columnName]; // Keep origin value for compare value with custom index\r\n\r\n                        // Translate multilinguage fields\r\n                        if (mlFields.length) {\r\n                           let transFields = (mlFields || []).filter(\r\n                              (fieldName) => baseData[fieldName] != null\r\n                           );\r\n                           this.translate(\r\n                              baseData,\r\n                              baseData,\r\n                              transFields,\r\n                              this.languageCode\r\n                           );\r\n                        }\r\n\r\n                        // Pull value\r\n                        if (field instanceof ABFieldConnect) {\r\n                           // If field is connected field, then\r\n                           // {\r\n                           //\t\tfieldName: {Object} or [Array]\r\n                           // }\r\n                           val = baseData[field.columnName];\r\n\r\n                           if (val && val.forEach) {\r\n                              val.forEach((v) => {\r\n                                 if (v == null) return;\r\n\r\n                                 // format relation data\r\n                                 if (field.datasourceLink) {\r\n                                    field.datasourceLink\r\n                                       .fields((f) => !f.isConnection)\r\n                                       .forEach((f) => {\r\n                                          v[`${f.columnName}_ORIGIN`] =\r\n                                             v[f.columnName];\r\n\r\n                                          v[f.columnName] = f.format(v, {\r\n                                             languageCode: this.languageCode,\r\n                                          });\r\n                                       });\r\n                                 }\r\n\r\n                                 // Keep ABObject to relation data\r\n                                 if (v && typeof v == \"object\")\r\n                                    v._object = field.datasourceLink;\r\n                              });\r\n                           }\r\n                           // TODO\r\n                           // data[label + '_label'] = field.format(baseData);\r\n                        } else {\r\n                           val = field.format(baseData, {\r\n                              languageCode: this.languageCode,\r\n                           });\r\n                        }\r\n\r\n                        // Set value to report with every languages of label\r\n                        fieldLabels.forEach((label) => {\r\n                           if (val) {\r\n                              targetData[label] = val;\r\n                           } else if (!targetData[label]) {\r\n                              targetData[label] = \"\";\r\n                           }\r\n                        });\r\n\r\n                        // normalize child items\r\n                        if (baseData.data && baseData.data.length) {\r\n                           targetData.data = targetData.data || [];\r\n                           (baseData.data || []).forEach((childItem, index) => {\r\n                              // add new data item\r\n                              if (targetData.data[index] == null)\r\n                                 targetData.data[index] = {};\r\n\r\n                              setReportValues(\r\n                                 childItem,\r\n                                 targetData.data[index],\r\n                                 field,\r\n                                 fieldLabels\r\n                              );\r\n                           });\r\n                        }\r\n                     };\r\n\r\n                     dataList.forEach((data) => {\r\n                        let resultData = {};\r\n\r\n                        // Keep id of ABObject into .scope of DOCX templater\r\n                        resultData._object = obj;\r\n\r\n                        // For support label of columns every languages\r\n                        obj.fields().forEach((f) => {\r\n                           let fieldLabels = [];\r\n\r\n                           // Query Objects\r\n                           if (obj instanceof ABObjectQuery) {\r\n                              if (typeof f.object.translations == \"string\")\r\n                                 f.object.translations = JSON.parse(\r\n                                    f.object.translations\r\n                                 );\r\n\r\n                              if (typeof f.translations == \"string\")\r\n                                 f.translations = JSON.parse(f.translations);\r\n\r\n                              (f.object.translations || []).forEach(\r\n                                 (objTran) => {\r\n                                    let fieldTran = (\r\n                                       f.translations || []\r\n                                    ).filter(\r\n                                       (fieldTran) =>\r\n                                          fieldTran.language_code ==\r\n                                          objTran.language_code\r\n                                    )[0];\r\n\r\n                                    if (!fieldTran) return;\r\n\r\n                                    let objectLabel = objTran.label;\r\n                                    let fieldLabel = fieldTran.label;\r\n\r\n                                    // Replace alias with label of object\r\n                                    fieldLabels.push(\r\n                                       `${objectLabel}.${fieldLabel}`\r\n                                    );\r\n                                 }\r\n                              );\r\n                           }\r\n                           // Normal Objects\r\n                           else {\r\n                              if (typeof f.translations == \"string\")\r\n                                 f.translations = JSON.parse(f.translations);\r\n\r\n                              f.translations.forEach((tran) => {\r\n                                 fieldLabels.push(tran.label);\r\n                              });\r\n                           }\r\n\r\n                           setReportValues(data, resultData, f, fieldLabels);\r\n                        });\r\n\r\n                        dcValues.push(resultData);\r\n                     });\r\n\r\n                     // If data sources have more than 1 or the result data more than 1 items, then add label of data source\r\n                     let datacollectionData =\r\n                        dcValues.length > 1 ? dcValues : dcValues[0];\r\n                     if (\r\n                        isDcLabelAdded ||\r\n                        (Array.isArray(datacollectionData) &&\r\n                           datacollectionData.length > 1)\r\n                     ) {\r\n                        (dc.translations || []).forEach((tran) => {\r\n                           reportValues[tran.label] = datacollectionData;\r\n                        });\r\n                     } else reportValues = datacollectionData;\r\n                  });\r\n\r\n                  return Promise.resolve();\r\n               })\r\n               // Download images\r\n               .then(() => {\r\n                  console.log(\"DOCX data: \", reportValues);\r\n\r\n                  let tasks = [];\r\n\r\n                  let addDownloadTask = (fieldImage, data = []) => {\r\n                     data.forEach((d) => {\r\n                        let imageVal = fieldImage.format(d);\r\n                        if (imageVal && !images[imageVal]) {\r\n                           tasks.push(\r\n                              new Promise((ok, bad) => {\r\n                                 let imgUrl = fieldImage.urlImage(imageVal); // `/opsportal/image/${this.application.name}/${imageVal}`;\r\n\r\n                                 JSZipUtils.getBinaryContent(\r\n                                    imgUrl,\r\n                                    function (error, content) {\r\n                                       if (error) return bad(error);\r\n                                       else {\r\n                                          // store binary of image\r\n                                          images[imageVal] = content;\r\n\r\n                                          ok();\r\n                                       }\r\n                                    }\r\n                                 );\r\n                              })\r\n                           );\r\n                        }\r\n\r\n                        // download images of child items\r\n                        addDownloadTask(fieldImage, d.data || []);\r\n                     });\r\n                  };\r\n\r\n                  this.datacollections.forEach((dc) => {\r\n                     if (!dc) return;\r\n\r\n                     let obj = dc.datasource;\r\n                     if (!obj) return;\r\n\r\n                     let currCursor = dc.getCursor();\r\n                     if (currCursor) {\r\n                        // Current cursor\r\n                        let treeCursor = dc.getCursor(true);\r\n                        currCursor = [App.AB.merge({}, currCursor, treeCursor)];\r\n                     } // List of data\r\n                     else currCursor = dc.getData();\r\n\r\n                     obj.fields((f) => f instanceof ABFieldImage).forEach(\r\n                        (f) => {\r\n                           addDownloadTask(f, currCursor);\r\n                        }\r\n                     );\r\n                  });\r\n\r\n                  return Promise.all(tasks);\r\n               })\r\n               .then(() => {\r\n                  // Download the template file\r\n                  return new Promise((next, err) => {\r\n                     let url = this.downloadUrl();\r\n\r\n                     JSZipUtils.getBinaryContent(url, (error, content) => {\r\n                        if (error) return err(error);\r\n\r\n                        next(content);\r\n                     });\r\n                  });\r\n               })\r\n               .then((content) => {\r\n                  // Generate Docx file\r\n                  return new Promise((next, err) => {\r\n                     let zip = new JSZip(content);\r\n                     let doc = new Docxtemplater();\r\n\r\n                     let imageModule = new ImageModule({\r\n                        centered: false,\r\n                        getImage: (tagValue, tagName) => {\r\n                           // NOTE: .getImage of version 3.0.2 does not support async\r\n                           //\t\t\twe can buy newer version to support it\r\n                           //\t\t\thttps://docxtemplater.com/modules/image/\r\n\r\n                           return images[tagValue] || \"\";\r\n                        },\r\n                        getSize: (imgBuffer, tagValue, tagName) => {\r\n                           let defaultVal = [300, 160];\r\n\r\n                           let dc = this.datacollection;\r\n                           if (!dc) {\r\n                              let dcs = this.datacollections;\r\n                              if (dcs) {\r\n                                 dcs.forEach((dc) => {\r\n                                    let obj = dc.datasource;\r\n                                    if (!obj) return false;\r\n\r\n                                    // This is a query object\r\n                                    if (tagName.indexOf(\".\") > -1) {\r\n                                       let tagNames = tagName.split(\".\");\r\n\r\n                                       if (!obj.objects) return false; // not a query\r\n                                       obj = obj.objects(\r\n                                          (o) => o.label == tagNames[0]\r\n                                       )[0]; // Label of object\r\n                                       if (!obj) return false;\r\n\r\n                                       tagName = tagNames[1]; // Field name\r\n                                    }\r\n\r\n                                    let imageField = obj.fields(\r\n                                       (f) => f.columnName == tagName\r\n                                    )[0];\r\n                                    if (!imageField || !imageField.settings)\r\n                                       return false;\r\n\r\n                                    if (\r\n                                       imageField.settings.useWidth &&\r\n                                       imageField.settings.imageWidth\r\n                                    )\r\n                                       defaultVal[0] =\r\n                                          imageField.settings.imageWidth;\r\n\r\n                                    if (\r\n                                       imageField.settings.useHeight &&\r\n                                       imageField.settings.imageHeight\r\n                                    )\r\n                                       defaultVal[1] =\r\n                                          imageField.settings.imageHeight;\r\n\r\n                                    return false;\r\n                                 });\r\n                                 return defaultVal;\r\n                              } else {\r\n                                 return defaultVal;\r\n                              }\r\n                           } else {\r\n                              let obj = dc.datasource;\r\n                              if (!obj) return defaultVal;\r\n\r\n                              // This is a query object\r\n                              if (tagName.indexOf(\".\") > -1) {\r\n                                 let tagNames = tagName.split(\".\");\r\n\r\n                                 obj = obj.objects(\r\n                                    (o) => o.label == tagNames[0]\r\n                                 )[0]; // Label of object\r\n                                 if (!obj) return defaultVal;\r\n\r\n                                 tagName = tagNames[1]; // Field name\r\n                              }\r\n\r\n                              let imageField = obj.fields(\r\n                                 (f) => f.columnName == tagName\r\n                              )[0];\r\n                              if (!imageField || !imageField.settings)\r\n                                 return defaultVal;\r\n\r\n                              if (\r\n                                 imageField.settings.useWidth &&\r\n                                 imageField.settings.imageWidth\r\n                              )\r\n                                 defaultVal[0] = imageField.settings.imageWidth;\r\n\r\n                              if (\r\n                                 imageField.settings.useHeight &&\r\n                                 imageField.settings.imageHeight\r\n                              )\r\n                                 defaultVal[1] =\r\n                                    imageField.settings.imageHeight;\r\n\r\n                              return defaultVal;\r\n                           }\r\n                        },\r\n                        // getSize: function (imgBuffer, tagValue, tagName) {\r\n                        // \tif (imgBuffer) {\r\n                        // \t\tvar maxWidth = 300;\r\n                        // \t\tvar maxHeight = 160;\r\n\r\n                        // \t\t// Find aspect ratio image dimensions\r\n                        // \t\ttry {\r\n                        // \t\t\tvar image = sizeOf(imgBuffer);\r\n                        // \t\t\tvar ratio = Math.min(maxWidth / image.width, maxHeight / image.height);\r\n\r\n                        // \t\t\treturn [image.width * ratio, image.height * ratio];\r\n                        // \t\t}\r\n                        // \t\t// if invalid image, then should return 0, 0 sizes\r\n                        // \t\tcatch (err) {\r\n                        // \t\t\treturn [0, 0];\r\n                        // \t\t}\r\n\r\n                        // \t}\r\n                        // \telse {\r\n                        // \t\treturn [0, 0];\r\n                        // \t}\r\n                        // }\r\n                     });\r\n\r\n                     try {\r\n                        doc.attachModule(imageModule)\r\n                           .loadZip(zip)\r\n                           .setData(reportValues)\r\n                           .setOptions({\r\n                              parser: function (tag) {\r\n                                 return {\r\n                                    get: function (scope, context) {\r\n                                       // NOTE: AppBuilder custom filter : no return empty items\r\n                                       if (tag.indexOf(\"data|\") == 0) {\r\n                                          let prop = (\r\n                                             tag.split(\"|\")[1] || \"\"\r\n                                          ).trim();\r\n\r\n                                          return (scope[\"data\"] || []).filter(\r\n                                             function (item) {\r\n                                                return item[prop]\r\n                                                   ? true\r\n                                                   : false;\r\n                                             }\r\n                                          );\r\n                                       }\r\n                                       // Mark number to add to a variable\r\n                                       else if (tag.indexOf(\"|$sum?\") > -1) {\r\n                                          let prop = tag.split(\"|$sum?\")[0];\r\n                                          let varName = tag.split(\"|$sum?\")[1];\r\n\r\n                                          let number = scope[prop];\r\n                                          if (typeof number == \"string\") {\r\n                                             number = number.replace(\r\n                                                /[^\\d.]/g, // return only number and dot\r\n                                                \"\"\r\n                                             );\r\n                                          }\r\n\r\n                                          if (summaries[varName] == null)\r\n                                             summaries[varName] = 0.0;\r\n\r\n                                          summaries[varName] += parseFloat(\r\n                                             number\r\n                                          );\r\n\r\n                                          return scope[prop];\r\n                                       }\r\n                                       // Show sum value ^\r\n                                       else if (tag.indexOf(\"$sum?\") == 0) {\r\n                                          let varName = tag.replace(\r\n                                             \"$sum?\",\r\n                                             \"\"\r\n                                          );\r\n\r\n                                          return summaries[varName] || 0;\r\n                                       }\r\n                                       // // Sum number of .data (Grouped query)\r\n                                       // else if (tag.indexOf(\"$sum|\") == 0) {\r\n                                       //    let prop = (\r\n                                       //       tag.split(\"|\")[1] || \"\"\r\n                                       //    ).trim();\r\n\r\n                                       //    let sum = 0;\r\n                                       //    (scope[\"data\"] || []).forEach(\r\n                                       //       (childItem) => {\r\n                                       //          if (!childItem[prop]) return;\r\n\r\n                                       //          let number = childItem[prop];\r\n                                       //          if (typeof number == \"string\") {\r\n                                       //             number = number.replace(\r\n                                       //                /[^\\d.]/g, // return only number and dot\r\n                                       //                \"\"\r\n                                       //             );\r\n                                       //          }\r\n\r\n                                       //          try {\r\n                                       //             sum += parseFloat(\r\n                                       //                number || 0\r\n                                       //             );\r\n                                       //          } catch (e) {}\r\n                                       //       }\r\n                                       //    );\r\n\r\n                                       //    // Print number with commas\r\n                                       //    if (sum) {\r\n                                       //       sum = sum\r\n                                       //          .toString()\r\n                                       //          .replace(\r\n                                       //             /\\B(?=(\\d{3})+(?!\\d))/g,\r\n                                       //             \",\"\r\n                                       //          );\r\n                                       //    }\r\n\r\n                                       //    return sum;\r\n                                       // }\r\n                                       // NOTE: AppBuilder custom filter of another data source\r\n                                       else if (tag.indexOf(\"$\") == 0) {\r\n                                          let props = tag\r\n                                             .replace(\"$\", \"\")\r\n                                             .split(\"|\");\r\n                                          let propSource = props[0].trim();\r\n                                          let propFilter = props[1].trim(); // column name of ABFieldConnect\r\n\r\n                                          if (!propSource || !propFilter)\r\n                                             return \"\";\r\n\r\n                                          // Pull Index field of connect field\r\n                                          let indexColName;\r\n                                          let obj = scope._object;\r\n                                          if (obj) {\r\n                                             let connectedField = obj.fields(\r\n                                                (f) =>\r\n                                                   f.columnName == propFilter\r\n                                             )[0];\r\n                                             if (connectedField) {\r\n                                                let indexField =\r\n                                                   connectedField.indexField;\r\n                                                indexColName = indexField\r\n                                                   ? indexField.columnName\r\n                                                   : null;\r\n                                             }\r\n                                          }\r\n\r\n                                          let sourceVals =\r\n                                             reportValues[propSource];\r\n                                          if (\r\n                                             sourceVals &&\r\n                                             !Array.isArray(sourceVals)\r\n                                          )\r\n                                             sourceVals = [sourceVals];\r\n\r\n                                          let getVal = (data) => {\r\n                                             return (\r\n                                                data[\r\n                                                   `${indexColName}_ORIGIN`\r\n                                                ] || // Pull origin data to compare by custom index\r\n                                                data[indexColName] ||\r\n                                                data.id ||\r\n                                                data\r\n                                             );\r\n                                          };\r\n\r\n                                          return (sourceVals || []).filter(\r\n                                             function (item) {\r\n                                                // Pull data of parent to compare\r\n                                                let comparer =\r\n                                                   scope[propFilter];\r\n\r\n                                                if (Array.isArray(comparer))\r\n                                                   return (\r\n                                                      comparer.filter(\r\n                                                         (c) =>\r\n                                                            getVal(c) ==\r\n                                                            getVal(item)\r\n                                                      ).length > 0\r\n                                                   );\r\n                                                else {\r\n                                                   return (\r\n                                                      getVal(item) ==\r\n                                                      getVal(comparer)\r\n                                                   );\r\n                                                }\r\n                                             }\r\n                                          );\r\n                                       }\r\n                                       // ์NOTE : Custom filter\r\n                                       else if (tag.indexOf(\"?\") > -1) {\r\n                                          let result = scope;\r\n                                          let prop = tag.split(\"?\")[0];\r\n                                          let condition = tag.split(\"?\")[1];\r\n                                          if (prop && condition) {\r\n                                             let data = scope[prop];\r\n                                             if (data) {\r\n                                                if (!Array.isArray(data))\r\n                                                   data = [data];\r\n\r\n                                                return data.filter((d) =>\r\n                                                   eval(\r\n                                                      condition.replace(\r\n                                                         /\\./g,\r\n                                                         \"d.\"\r\n                                                      )\r\n                                                   )\r\n                                                );\r\n                                             }\r\n                                          }\r\n                                          return result;\r\n                                       } else if (tag === \".\") {\r\n                                          return scope;\r\n                                       } else {\r\n                                          return scope[tag];\r\n                                       }\r\n                                    },\r\n                                 };\r\n                              },\r\n                           })\r\n                           .render(); // render the document\r\n                     } catch (error) {\r\n                        return err(error);\r\n                     }\r\n\r\n                     var docxFile = doc.getZip().generate({\r\n                        type: \"blob\",\r\n                        mimeType:\r\n                           \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\r\n                     }); //Output the document using Data-URI\r\n\r\n                     next(docxFile);\r\n                  });\r\n               })\r\n               .then((blobFile) => {\r\n                  // Let user download the output file\r\n                  return new Promise((next, err) => {\r\n                     letUserDownload(blobFile, this.filelabel);\r\n\r\n                     next();\r\n                  });\r\n               })\r\n               // Final step\r\n               .then(() => {\r\n                  _logic.ready();\r\n               });\r\n         },\r\n      };\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: _init,\r\n         logic: _logic,\r\n         onShow: _logic.onShow,\r\n      };\r\n   }\r\n};\r\n","const ABViewFormCore = require(\"../../core/views/ABViewFormCore\");\r\nconst ABViewFormButton = require(\"./ABViewFormButton\");\r\nconst ABViewFormCustom = require(\"./ABViewFormCustom\");\r\nconst ABViewFormConnect = require(\"./ABViewFormConnect\");\r\nconst ABViewFormComponent = require(\"./ABViewFormComponent\");\r\nconst ABViewFormSelectMultiple = require(\"./ABViewFormSelectMultiple\");\r\nconst ABViewFormTextbox = require(\"./ABViewFormTextbox\");\r\n\r\nconst ABRecordRule = require(\"../../rules/ABViewRuleListFormRecordRules\");\r\nconst ABSubmitRule = require(\"../../rules/ABViewRuleListFormSubmitRules\");\r\n\r\nlet PopupRecordRule = null;\r\nlet PopupSubmitRule = null;\r\n\r\n////\r\n//// LEFT OFF HERE: Review and Refactor\r\n////\r\nconst ABViewFormPropertyComponentDefaults = ABViewFormCore.defaultValues();\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABViewForm extends ABViewFormCore {\r\n   // constructor(values, application, parent, defaultValues) {\r\n   //    super(values, application, parent, defaultValues);\r\n   // }\r\n\r\n   /**\r\n    * @method editorComponent\r\n    * return the Editor for this UI component.\r\n    * the editor should display either a \"block\" view or \"preview\" of\r\n    * the current layout of the view.\r\n    * @param {string} mode what mode are we in ['block', 'preview']\r\n    * @return {Component}\r\n    */\r\n   editorComponent(App, mode) {\r\n      var comp = super.editorComponent(App, mode);\r\n\r\n      // Define height of cell\r\n      comp.ui.rows[0].cellHeight = 75;\r\n\r\n      return comp;\r\n   }\r\n\r\n   //\r\n   // Property Editor\r\n   //\r\n\r\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\r\n      var commonUI = super.propertyEditorDefaultElements(\r\n         App,\r\n         ids,\r\n         _logic,\r\n         ObjectDefaults\r\n      );\r\n\r\n      var idBase = \"ABViewForm\";\r\n\r\n      // PopupDisplayRule = new ABDisplayRule(App, idBase + \"_displayrule\");\r\n\r\n      PopupRecordRule = new ABRecordRule();\r\n      PopupRecordRule.component(App, `${idBase}_recordrule`); // prepare the UI component.\r\n\r\n      PopupSubmitRule = new ABSubmitRule();\r\n      PopupSubmitRule.component(App, `${idBase}_submitrule`);\r\n\r\n      // _logic functions\r\n\r\n      _logic.selectSource = (dcId, oldDcId) => {\r\n         // TODO : warning message\r\n\r\n         _logic.busy();\r\n\r\n         let currView = _logic.currentEditObject();\r\n         let formView = currView.parentFormComponent();\r\n\r\n         currView.settings.dataviewID = dcId;\r\n\r\n         // clear sub views\r\n         var viewsToRemove = currView._views;\r\n         currView._views = [];\r\n\r\n         return (\r\n            Promise.resolve()\r\n               .then(() => {\r\n                  var allRemoves = [];\r\n                  viewsToRemove.forEach((v) => {\r\n                     allRemoves.push(v.destroy());\r\n                  });\r\n                  return Promise.all(allRemoves);\r\n               })\r\n               // .then(() => {\r\n               // \t// remove all old components\r\n               // \tlet destroyTasks = [];\r\n               // \tif (oldDcId != null) {\r\n               // \t\tlet oldComps = formView.views();\r\n               // \t\toldComps.forEach(child => destroyTasks.push(() => child.destroy()));\r\n               // \t}\r\n\r\n               // \treturn destroyTasks.reduce((promiseChain, currTask) => {\r\n               // \t\treturn promiseChain.then(currTask);\r\n               // \t}, Promise.resolve([]));\r\n               // })\r\n               .then(() => {\r\n                  // refresh UI\r\n                  // formView.emit('properties.updated', currView);\r\n\r\n                  _logic.busy();\r\n\r\n                  // Update field options in property\r\n                  this.propertyUpdateFieldOptions(ids, currView, dcId);\r\n\r\n                  // add all fields to editor by default\r\n                  if (currView._views.length > 0) return Promise.resolve();\r\n\r\n                  let saveTasks = [];\r\n                  let fields = $$(ids.fields).find({});\r\n                  fields.reverse();\r\n                  fields.forEach((f, index) => {\r\n                     if (!f.selected) {\r\n                        let yPosition = fields.length - index - 1;\r\n\r\n                        // Add new form field\r\n                        let newFieldView = currView.addFieldToForm(\r\n                           f,\r\n                           yPosition\r\n                        );\r\n                        if (newFieldView) {\r\n                           newFieldView.once(\"destroyed\", () =>\r\n                              this.propertyEditorPopulate(App, ids, currView)\r\n                           );\r\n\r\n                           // // Call save API\r\n                           saveTasks.push(newFieldView.save());\r\n                        }\r\n\r\n                        // update item to UI list\r\n                        f.selected = 1;\r\n                        $$(ids.fields).updateItem(f.id, f);\r\n                     }\r\n                  });\r\n\r\n                  let defaultButton = formView.refreshDefaultButton(ids);\r\n                  if (defaultButton) saveTasks.push(defaultButton.save());\r\n\r\n                  return Promise.all(saveTasks);\r\n               })\r\n               // Saving\r\n               .then(() => {\r\n                  //// NOTE: the way the .addFieldToForm() works, it will prevent\r\n                  //// the typical field.save() -> triggering the form.save() on a\r\n                  //// new Field.  So once all our field.saves() are finished, we\r\n                  //// need to perform a form.save() to persist the changes.\r\n                  return currView.save();\r\n               })\r\n               // Finally\r\n               .then(() => {\r\n                  // refresh UI\r\n                  formView.emit(\"properties.updated\", currView);\r\n\r\n                  // Update field options in property\r\n                  this.propertyUpdateRules(ids, currView, dcId);\r\n\r\n                  _logic.ready();\r\n\r\n                  return Promise.resolve();\r\n               })\r\n         );\r\n      };\r\n\r\n      _logic.listTemplate = (field, common) => {\r\n         let currView = _logic.currentEditObject();\r\n\r\n         // disable in form\r\n         var fieldComponent = field.formComponent();\r\n         if (fieldComponent == null)\r\n            return \"<i class='fa fa-times'></i>  #label# <div class='ab-component-form-fields-component-info'> Disable </div>\".replace(\r\n               \"#label#\",\r\n               field.label\r\n            );\r\n\r\n         var componentKey = fieldComponent.common().key;\r\n         var formComponent = currView.application.viewAll(\r\n            (v) => v.common().key == componentKey\r\n         )[0];\r\n\r\n         return `${common.markCheckbox(field)} ${\r\n            field.label\r\n         } <div class='ab-component-form-fields-component-info'> <i class='fa fa-${\r\n            formComponent ? formComponent.common().icon : \"fw\"\r\n         }'></i> ${\r\n            formComponent ? L(formComponent.common().labelKey) : \"\"\r\n         } </div>`;\r\n      };\r\n\r\n      _logic.check = (e, fieldId) => {\r\n         let currView = _logic.currentEditObject();\r\n         let formView = currView.parentFormComponent();\r\n\r\n         // update UI list\r\n         let item = $$(ids.fields).getItem(fieldId);\r\n         item.selected = item.selected ? 0 : 1;\r\n         $$(ids.fields).updateItem(fieldId, item);\r\n\r\n         let doneFn = () => {\r\n            formView\r\n               .refreshDefaultButton(ids)\r\n               .save()\r\n               .then(() => {\r\n                  // refresh UI\r\n                  currView.emit(\"properties.updated\", currView);\r\n               });\r\n\r\n            // // trigger a save()\r\n            // this.propertyEditorSave(ids, currView);\r\n         };\r\n\r\n         // add a field to the form\r\n         if (item.selected) {\r\n            let fieldView = currView.addFieldToForm(item);\r\n            if (fieldView) {\r\n               fieldView.save().then(() => {\r\n                  fieldView.once(\"destroyed\", () =>\r\n                     this.propertyEditorPopulate(App, ids, currView)\r\n                  );\r\n                  currView.save().then(() => {\r\n                     doneFn();\r\n                  });\r\n               });\r\n            }\r\n         }\r\n         // remove field in the form\r\n         else {\r\n            let fieldView = formView\r\n               .fieldComponents()\r\n               .filter((c) => c.settings.fieldId == fieldId)[0];\r\n            if (fieldView) {\r\n               // let remainingViews = formView.views(c => c.settings.fieldId != fieldId);\r\n               // formView._views = remainingViews;\r\n\r\n               fieldView.destroy().then(() => {\r\n                  doneFn();\r\n               });\r\n            }\r\n         }\r\n      };\r\n\r\n      // Display rule\r\n      _logic.displayRuleShow = () => {\r\n         // var currView = _logic.currentEditObject();\r\n         // PopupDisplayRule.setValue(currView.settings.displayRules);\r\n         // PopupDisplayRule.show();\r\n      };\r\n\r\n      _logic.displayRuleSave = () => {};\r\n\r\n      // Record rule\r\n      _logic.recordRuleShow = () => {\r\n         var currView = _logic.currentEditObject();\r\n\r\n         var selectedDv = currView.datacollection;\r\n         if (selectedDv) {\r\n            PopupRecordRule.objectLoad(selectedDv.datasource);\r\n         }\r\n         PopupRecordRule.formLoad(currView);\r\n         PopupRecordRule.fromSettings(currView.settings.recordRules);\r\n         PopupRecordRule.show();\r\n\r\n         // NOTE: Querybuilder v5.2 has a bug where it won't display the [and/or]\r\n         // choosers properly if it hasn't been shown before the .setValue() call.\r\n         // so this work around allows us to refresh the display after the .show()\r\n         // on the popup.\r\n         // When they've fixed the bug, we'll remove this workaround:\r\n         PopupRecordRule.qbFixAfterShow();\r\n      };\r\n\r\n      _logic.recordRuleSave = (settings) => {\r\n         var currView = _logic.currentEditObject();\r\n         currView.settings.recordRules = settings;\r\n\r\n         // trigger a save()\r\n         this.propertyEditorSave(ids, currView);\r\n\r\n         // update badge number of rules\r\n         this.populateBadgeNumber(ids, currView);\r\n      };\r\n\r\n      // Submit rule\r\n      _logic.submitRuleShow = () => {\r\n         var currView = _logic.currentEditObject();\r\n\r\n         PopupSubmitRule.fromSettings(currView.settings.submitRules);\r\n         PopupSubmitRule.show();\r\n      };\r\n\r\n      _logic.submitRuleSave = (settings) => {\r\n         var currView = _logic.currentEditObject();\r\n         currView.settings.submitRules = settings;\r\n\r\n         // trigger a save()\r\n         this.propertyEditorSave(ids, currView);\r\n\r\n         // update badge number of rules\r\n         this.populateBadgeNumber(ids, currView);\r\n      };\r\n\r\n      /** Initial rule popups */\r\n      // PopupDisplayRule.init({\r\n      // \tonSave: _logic.displayRuleSave\r\n      // });\r\n\r\n      PopupRecordRule.init({\r\n         onSave: _logic.recordRuleSave,\r\n      });\r\n\r\n      PopupSubmitRule.init({\r\n         onSave: _logic.submitRuleSave,\r\n      });\r\n\r\n      return commonUI.concat([\r\n         {\r\n            name: \"datacollection\",\r\n            view: \"richselect\",\r\n            label: L(\"Data Source\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n            skipAutoSave: true,\r\n            on: {\r\n               onChange: _logic.selectSource,\r\n            },\r\n         },\r\n\r\n         {\r\n            view: \"fieldset\",\r\n            label: L(\"Form Fields:\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n            body: {\r\n               type: \"clean\",\r\n               padding: 10,\r\n               rows: [\r\n                  {\r\n                     name: \"fields\",\r\n                     view: \"list\",\r\n                     select: false,\r\n                     minHeight: 200,\r\n                     template: _logic.listTemplate,\r\n                     type: {\r\n                        markCheckbox: function (item) {\r\n                           return (\r\n                              \"<span class='check webix_icon fa fa-\" +\r\n                              (item.selected ? \"check-\" : \"\") +\r\n                              \"square-o'></span>\"\r\n                           );\r\n                        },\r\n                     },\r\n                     onClick: {\r\n                        check: _logic.check,\r\n                     },\r\n                  },\r\n               ],\r\n            },\r\n         },\r\n         {\r\n            name: \"showLabel\",\r\n            view: \"checkbox\",\r\n            label: L(\"Display Label\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n         },\r\n         {\r\n            name: \"labelPosition\",\r\n            view: \"richselect\",\r\n            label: L(\"Label Position\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n            options: [\r\n               {\r\n                  id: \"left\",\r\n                  value: L(\"Left\"),\r\n               },\r\n               {\r\n                  id: \"top\",\r\n                  value: L(\"Top\"),\r\n               },\r\n            ],\r\n         },\r\n         {\r\n            name: \"labelWidth\",\r\n            view: \"counter\",\r\n            label: L(\"Label Width\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n         },\r\n         {\r\n            view: \"counter\",\r\n            name: \"height\",\r\n            label: L(\"Height:\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n         },\r\n         {\r\n            name: \"clearOnLoad\",\r\n            view: \"checkbox\",\r\n            label: L(\"Clear on load\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n         },\r\n         {\r\n            name: \"clearOnSave\",\r\n            view: \"checkbox\",\r\n            label: L(\"Clear on save\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n         },\r\n         {\r\n            view: \"fieldset\",\r\n            label: L(\"Rules:\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n            body: {\r\n               type: \"clean\",\r\n               padding: 10,\r\n               rows: [\r\n                  {\r\n                     cols: [\r\n                        {\r\n                           view: \"label\",\r\n                           label: L(\"Submit Rules:\"),\r\n                           width: this.AB.UISettings.config().labelWidthLarge,\r\n                        },\r\n                        {\r\n                           view: \"button\",\r\n                           css: \"webix_primary\",\r\n                           name: \"buttonSubmitRules\",\r\n                           label: L(\"Settings\"),\r\n                           icon: \"fa fa-gear\",\r\n                           type: \"icon\",\r\n                           badge: 0,\r\n                           click: function () {\r\n                              _logic.submitRuleShow();\r\n                           },\r\n                        },\r\n                     ],\r\n                  },\r\n                  {\r\n                     cols: [\r\n                        {\r\n                           view: \"label\",\r\n                           label: L(\"Display Rules:\"),\r\n                           width: this.AB.UISettings.config().labelWidthLarge,\r\n                        },\r\n                        {\r\n                           view: \"button\",\r\n                           name: \"buttonDisplayRules\",\r\n                           css: \"webix_primary\",\r\n                           label: L(\"Settings\"),\r\n                           icon: \"fa fa-gear\",\r\n                           type: \"icon\",\r\n                           badge: 0,\r\n                           click: function () {\r\n                              _logic.displayRuleShow();\r\n                           },\r\n                        },\r\n                     ],\r\n                  },\r\n                  {\r\n                     cols: [\r\n                        {\r\n                           view: \"label\",\r\n                           label: L(\"Record Rules:\"),\r\n                           width: this.AB.UISettings.config().labelWidthLarge,\r\n                        },\r\n                        {\r\n                           view: \"button\",\r\n                           name: \"buttonRecordRules\",\r\n                           css: \"webix_primary\",\r\n                           label: L(\"Settings\"),\r\n                           icon: \"fa fa-gear\",\r\n                           type: \"icon\",\r\n                           badge: 0,\r\n                           click: function () {\r\n                              _logic.recordRuleShow();\r\n                           },\r\n                        },\r\n                     ],\r\n                  },\r\n               ],\r\n            },\r\n         },\r\n      ]);\r\n   }\r\n\r\n   static propertyEditorPopulate(App, ids, view, logic) {\r\n      super.propertyEditorPopulate(App, ids, view, logic);\r\n\r\n      var formCom = view.parentFormComponent();\r\n      var datacollectionId = formCom.settings.dataviewID\r\n         ? formCom.settings.dataviewID\r\n         : null;\r\n      var SourceSelector = $$(ids.datacollection);\r\n\r\n      // Pull data collections to options\r\n      var dcOptions = view.propertyDatacollections((dc) => {\r\n         var obj = dc.datasource;\r\n\r\n         return dc.sourceType == \"object\" && obj && !obj.isImported;\r\n      });\r\n      SourceSelector.define(\"options\", dcOptions);\r\n      SourceSelector.define(\"value\", datacollectionId);\r\n      SourceSelector.refresh();\r\n\r\n      this.propertyUpdateFieldOptions(ids, view, datacollectionId);\r\n\r\n      // update properties when a field component is deleted\r\n      view.views().forEach((v) => {\r\n         if (v instanceof ABViewFormComponent)\r\n            v.once(\"destroyed\", () =>\r\n               this.propertyEditorPopulate(App, ids, view)\r\n            );\r\n      });\r\n\r\n      SourceSelector.enable();\r\n      $$(ids.showLabel).setValue(view.settings.showLabel);\r\n      $$(ids.labelPosition).setValue(\r\n         view.settings.labelPosition ||\r\n            ABViewFormPropertyComponentDefaults.labelPosition\r\n      );\r\n      $$(ids.labelWidth).setValue(\r\n         view.settings.labelWidth ||\r\n            ABViewFormPropertyComponentDefaults.labelWidth\r\n      );\r\n      $$(ids.height).setValue(\r\n         view.settings.height || ABViewFormPropertyComponentDefaults.height\r\n      );\r\n      $$(ids.clearOnLoad).setValue(\r\n         view.settings.clearOnLoad ||\r\n            ABViewFormPropertyComponentDefaults.clearOnLoad\r\n      );\r\n      $$(ids.clearOnSave).setValue(\r\n         view.settings.clearOnSave ||\r\n            ABViewFormPropertyComponentDefaults.clearOnSave\r\n      );\r\n\r\n      this.propertyUpdateRules(ids, view, datacollectionId);\r\n      this.populateBadgeNumber(ids, view);\r\n\r\n      // when a change is made in the properties the popups need to reflect the change\r\n      this.updateEventIds = this.updateEventIds || {}; // { viewId: boolean, ..., viewIdn: boolean }\r\n      if (!this.updateEventIds[view.id]) {\r\n         this.updateEventIds[view.id] = true;\r\n\r\n         view.addListener(\"properties.updated\", () => {\r\n            this.populateBadgeNumber(ids, view);\r\n         });\r\n      }\r\n   }\r\n\r\n   static propertyEditorValues(ids, view) {\r\n      super.propertyEditorValues(ids, view);\r\n\r\n      view.settings.dataviewID = $$(ids.datacollection).getValue();\r\n      view.settings.showLabel = $$(ids.showLabel).getValue();\r\n      view.settings.labelPosition =\r\n         $$(ids.labelPosition).getValue() ||\r\n         ABViewFormPropertyComponentDefaults.labelPosition;\r\n      view.settings.labelWidth =\r\n         $$(ids.labelWidth).getValue() ||\r\n         ABViewFormPropertyComponentDefaults.labelWidth;\r\n      view.settings.height = $$(ids.height).getValue();\r\n      view.settings.clearOnLoad = $$(ids.clearOnLoad).getValue();\r\n      view.settings.clearOnSave = $$(ids.clearOnSave).getValue();\r\n   }\r\n\r\n   /**\r\n    * @method propertyUpdateFieldOptions\r\n    * Populate fields of object to select list in property\r\n    *\r\n    * @param {Object} ids\r\n    * @param {ABViewForm} view - the current component\r\n    * @param {string} dcId - id of ABDatacollection\r\n    */\r\n   static propertyUpdateFieldOptions(ids, view, dcId) {\r\n      var formComponent = view.parentFormComponent();\r\n      var existsFields = formComponent.fieldComponents();\r\n      var datacollection = view.AB.datacollectionByID(dcId);\r\n      var object = datacollection ? datacollection.datasource : null;\r\n\r\n      // Pull field list\r\n      var fieldOptions = [];\r\n      if (object != null) {\r\n         fieldOptions = object.fields().map((f) => {\r\n            f.selected =\r\n               existsFields.filter((com) => {\r\n                  return f.id == com.settings.fieldId;\r\n               }).length > 0;\r\n\r\n            return f;\r\n         });\r\n      }\r\n\r\n      $$(ids.fields).clearAll();\r\n      $$(ids.fields).parse(fieldOptions);\r\n   }\r\n\r\n   static propertyUpdateRules(ids, view, dcId) {\r\n      if (!view) return;\r\n\r\n      // Populate values to rules\r\n      var selectedDv = view.datacollection;\r\n      if (selectedDv) {\r\n         // PopupDisplayRule.objectLoad(selectedDv.datasource);\r\n         PopupRecordRule.objectLoad(selectedDv.datasource);\r\n         PopupSubmitRule.objectLoad(selectedDv.datasource);\r\n      }\r\n\r\n      // PopupDisplayRule.formLoad(view);\r\n      PopupRecordRule.formLoad(view);\r\n      PopupSubmitRule.formLoad(view);\r\n   }\r\n\r\n   static populateBadgeNumber(ids, view) {\r\n      if (!view) return;\r\n\r\n      if (view.settings.submitRules) {\r\n         $$(ids.buttonSubmitRules).define(\r\n            \"badge\",\r\n            view.settings.submitRules.length || null\r\n         );\r\n         $$(ids.buttonSubmitRules).refresh();\r\n      } else {\r\n         $$(ids.buttonSubmitRules).define(\"badge\", null);\r\n         $$(ids.buttonSubmitRules).refresh();\r\n      }\r\n\r\n      if (view.settings.displayRules) {\r\n         $$(ids.buttonDisplayRules).define(\r\n            \"badge\",\r\n            view.settings.displayRules.length || null\r\n         );\r\n         $$(ids.buttonDisplayRules).refresh();\r\n      } else {\r\n         $$(ids.buttonDisplayRules).define(\"badge\", null);\r\n         $$(ids.buttonDisplayRules).refresh();\r\n      }\r\n\r\n      if (view.settings.recordRules) {\r\n         $$(ids.buttonRecordRules).define(\r\n            \"badge\",\r\n            view.settings.recordRules.length || null\r\n         );\r\n         $$(ids.buttonRecordRules).refresh();\r\n      } else {\r\n         $$(ids.buttonRecordRules).define(\"badge\", null);\r\n         $$(ids.buttonRecordRules).refresh();\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method component()\r\n    * return a UI component based upon this view.\r\n    * @param {obj} App\r\n    * @return {obj} UI component\r\n    */\r\n   component(App) {\r\n      this.App = App;\r\n      var idBase = \"ABViewForm_\" + this.id;\r\n      this.uniqueInstanceID = webix.uid();\r\n      var myUnique = (key) => {\r\n         return App.unique(`${idBase}_${key}_${this.uniqueInstanceID}`);\r\n      };\r\n      var ids = {\r\n         component: myUnique(\"_component\"),\r\n         layout: myUnique(\"_form_layout\"),\r\n         filterComplex: myUnique(\"_filter_complex\"),\r\n      };\r\n\r\n      var component = super.component(App);\r\n\r\n      // Pull fields that have validation rules\r\n      var fieldValidations = [];\r\n      var validationUI = [];\r\n      // NOTE: this._currentObject can be set in the KanBan Side Panel\r\n      var object = this.datacollection?.datasource ?? this._currentObject;\r\n      if (object) {\r\n         var existsFields = this.fieldComponents();\r\n\r\n         object.fields().forEach((f) => {\r\n            var view = existsFields.filter((com) => {\r\n               return f.id == com.settings.fieldId;\r\n            })[0];\r\n\r\n            // check to see if field has validation rules\r\n            if (view && f.settings.validationRules) {\r\n               // parse the rules because they were stored as a string\r\n               // check if rules are still a string...if so lets parse them\r\n               if (typeof f.settings.validationRules === \"string\") {\r\n                  f.settings.validationRules = JSON.parse(\r\n                     f.settings.validationRules\r\n                  );\r\n               }\r\n               // there could be more than one so lets loop through and build the UI\r\n               f.settings.validationRules.forEach((rule) => {\r\n                  var Filter = this.AB.filterComplexNew(\r\n                     `${f.columnName}_${webix.uid()}`\r\n                  );\r\n                  // add the new ui to an array so we can add them all at the same time\r\n                  validationUI.push(Filter.ui);\r\n                  // store the filter's info so we can assign values and settings after the ui is rendered\r\n                  fieldValidations.push({\r\n                     filter: Filter,\r\n                     view: Filter.ids.querybuilder,\r\n                     columnName: f.columnName,\r\n                     validationRules: rule.rules,\r\n                     invalidMessage: rule.invalidMessage,\r\n                  });\r\n               });\r\n            }\r\n         });\r\n      }\r\n\r\n      var fieldValidationsHolder = [\r\n         {\r\n            hidden: true,\r\n            rows: validationUI,\r\n         },\r\n         // {},\r\n      ];\r\n\r\n      // an ABViewForm_ is a collection of rows:\r\n      var _ui = {\r\n         // view: \"scrollview\",\r\n         // height: this.settings.height || ABViewFormPropertyComponentDefaults.height,\r\n         // body: {\r\n         id: ids.component,\r\n         view: \"form\",\r\n         abid: this.id,\r\n         rows: component.ui.rows.concat(fieldValidationsHolder),\r\n         // elementsConfig: {\r\n         //    on: {\r\n         //       onChange: function(newv, oldv) {\r\n         //          this.validate();\r\n         //       }\r\n         //    }\r\n         // }\r\n         // }\r\n      };\r\n\r\n      // make sure each of our child views get .init() called\r\n      var _init = (options, accessLevel) => {\r\n         // register our callbacks:\r\n         if (options) {\r\n            for (var c in _logic.callbacks) {\r\n               _logic.callbacks[c] = options[c] || _logic.callbacks[c];\r\n            }\r\n         }\r\n\r\n         component.init(options, accessLevel);\r\n\r\n         var Form = $$(ids.component);\r\n         if (Form) {\r\n            webix.extend(Form, webix.ProgressBar);\r\n         }\r\n\r\n         if (accessLevel < 2) {\r\n            Form.disable();\r\n         }\r\n\r\n         // bind a data collection to form component\r\n         let dc = this.datacollection;\r\n         if (dc) {\r\n            // listen DC events\r\n            this.eventAdd({\r\n               emitter: dc,\r\n               eventName: \"changeCursor\",\r\n               listener: (...p) => _logic.displayData(...p),\r\n            });\r\n\r\n            this.eventAdd({\r\n               emitter: dc,\r\n               eventName: \"initializingData\",\r\n               listener: () => {\r\n                  let Form = $$(ids.component);\r\n                  if (Form) {\r\n                     Form.disable();\r\n                     if (Form.showProgress) Form.showProgress({ type: \"icon\" });\r\n                  }\r\n               },\r\n            });\r\n\r\n            this.eventAdd({\r\n               emitter: dc,\r\n               eventName: \"initializedData\",\r\n               listener: () => {\r\n                  let Form = $$(ids.component);\r\n                  if (Form) {\r\n                     Form.enable();\r\n                     if (Form.hideProgress) Form.hideProgress();\r\n                  }\r\n               },\r\n            });\r\n\r\n            this.eventAdd({\r\n               emitter: dc,\r\n               eventName: \"ab.datacollection.update\",\r\n               listener: (msg, data) => {\r\n                  if (!data || !data.objectId) return;\r\n\r\n                  let object = dc.datasource;\r\n                  if (!object) return;\r\n\r\n                  if (\r\n                     object.id == data.objectId ||\r\n                     object.fields(\r\n                        (f) => f.settings.linkObject == data.objectId\r\n                     ).length > 0\r\n                  ) {\r\n                     let currData = dc.getCursor();\r\n                     if (currData) _logic.displayData(currData);\r\n                  }\r\n               },\r\n            });\r\n\r\n            // bind the cursor event of the parent DC\r\n            var linkDv = dc.datacollectionLink;\r\n            if (linkDv) {\r\n               // update the value of link field when data of the parent dc is changed\r\n               this.eventAdd({\r\n                  emitter: linkDv,\r\n                  eventName: \"changeCursor\",\r\n                  listener: (...p) => _logic.displayParentData(...p),\r\n               });\r\n            }\r\n\r\n            if (fieldValidations.length) {\r\n               // we need to store the rules for use later so lets build a container array\r\n               var complexValidations = [];\r\n               fieldValidations.forEach((f) => {\r\n                  // init each ui to have the properties (app and fields) of the object we are editing\r\n                  // f.filter.applicationLoad(dc.datasource.application);\r\n                  f.filter.fieldsLoad(dc.datasource.fields());\r\n                  // now we can set the value because the fields are properly initialized\r\n                  f.filter.setValue(f.validationRules);\r\n                  // if there are validation rules present we need to store them in a lookup hash\r\n                  // so multiple rules can be stored on a single field\r\n                  if (!Array.isArray(complexValidations[f.columnName]))\r\n                     complexValidations[f.columnName] = [];\r\n\r\n                  // now we can push the rules into the hash\r\n                  complexValidations[f.columnName].push({\r\n                     filters: $$(f.view).getFilterHelper(),\r\n                     // values: $$(ids.component).getValues(),\r\n                     invalidMessage: f.invalidMessage,\r\n                  });\r\n               });\r\n               // use the lookup to build the validation rules\r\n               Object.keys(complexValidations).forEach(function (key) {\r\n                  // get our field that has validation rules\r\n                  var formField = $$(ids.component).queryView({\r\n                     name: key,\r\n                  });\r\n                  // store the rules in a data param to be used later\r\n                  formField.$view.complexValidations = complexValidations[key];\r\n                  // define validation rules\r\n                  formField.define(\"validate\", function (nval, oval, field) {\r\n                     // get field now that we are validating\r\n                     var fieldValidating = $$(ids.component).queryView({\r\n                        name: field,\r\n                     });\r\n                     // default valid is true\r\n                     var isValid = true;\r\n                     // check each rule that was stored previously on the element\r\n                     fieldValidating.$view.complexValidations.forEach(\r\n                        (filter) => {\r\n                           let object = dc.datasource;\r\n                           let data = this.getValues();\r\n                           // convert rowData from { colName : data } to { id : data }\r\n                           var newData = {};\r\n                           (object.fields() || []).forEach((field) => {\r\n                              newData[field.id] = data[field.columnName];\r\n                           });\r\n                           // for the case of \"this_object\" conditions:\r\n                           if (data.uuid) {\r\n                              newData[\"this_object\"] = data.uuid;\r\n                           }\r\n\r\n                           // use helper funtion to check if valid\r\n                           var ruleValid = filter.filters(newData);\r\n                           // if invalid we need to tell the field\r\n                           if (ruleValid == false) {\r\n                              isValid = false;\r\n                              // we also need to define an error message\r\n                              fieldValidating.define(\r\n                                 \"invalidMessage\",\r\n                                 filter.invalidMessage\r\n                              );\r\n                           }\r\n                        }\r\n                     );\r\n                     return isValid;\r\n                  });\r\n                  formField.refresh();\r\n               });\r\n            }\r\n         }\r\n\r\n         // init DC in record rules\r\n         if (\r\n            this.settings &&\r\n            this.settings.recordRules &&\r\n            this.settings.recordRules.length\r\n         ) {\r\n            this.settings.recordRules.forEach((rule) => {\r\n               if (\r\n                  !rule ||\r\n                  !rule.actionSettings ||\r\n                  !rule.actionSettings.valueRules ||\r\n                  !rule.actionSettings.valueRules.fieldOperations ||\r\n                  !rule.actionSettings.valueRules.fieldOperations.length\r\n               )\r\n                  return;\r\n               rule.actionSettings.valueRules.fieldOperations.forEach((op) => {\r\n                  if (op.valueType != \"exist\") return;\r\n\r\n                  let pullDataDC = this.AB.datacollectionByID(op.value);\r\n\r\n                  if (\r\n                     pullDataDC &&\r\n                     pullDataDC.dataStatus ==\r\n                        pullDataDC.dataStatusFlag.notInitial\r\n                  ) {\r\n                     pullDataDC.loadData();\r\n                  }\r\n               });\r\n            });\r\n         }\r\n\r\n         // _onShow();\r\n      };\r\n\r\n      this.timerId = undefined;\r\n\r\n      var _logic = (this._logic = {\r\n         callbacks: {\r\n            onBeforeSaveData: function () {\r\n               return true;\r\n            },\r\n            onSaveData: function (saveData) {},\r\n            clearOnLoad: function () {\r\n               return false;\r\n            },\r\n         },\r\n\r\n         displayData: (rowData) => {\r\n            var customFields = this.fieldComponents((comp) => {\r\n               return (\r\n                  comp instanceof ABViewFormCustom ||\r\n                  comp instanceof ABViewFormConnect ||\r\n                  // rich text\r\n                  (comp instanceof ABViewFormTextbox &&\r\n                     comp.settings.type == \"rich\")\r\n               );\r\n            });\r\n            // If setTimeout is already scheduled, no need to do anything\r\n            if (this.timerId) {\r\n               return;\r\n            }\r\n\r\n            this.timerId = setTimeout(() => {\r\n               var customFields = this.fieldComponents((comp) => {\r\n                  return (\r\n                     comp instanceof ABViewFormCustom ||\r\n                     comp instanceof ABViewFormConnect ||\r\n                     // rich text\r\n                     (comp instanceof ABViewFormTextbox &&\r\n                        comp.settings.type == \"rich\")\r\n                  );\r\n               });\r\n\r\n               // Set default values\r\n               if (rowData == null) {\r\n                  customFields.forEach((f) => {\r\n                     var field = f.field();\r\n                     if (!field) return;\r\n\r\n                     var comp = this.viewComponents[f.id];\r\n                     if (comp == null) return;\r\n\r\n                     // var colName = field.columnName;\r\n                     if (this._showed && comp.onShow) comp.onShow();\r\n\r\n                     // set value to each components\r\n                     var defaultRowData = {};\r\n                     field.defaultValue(defaultRowData);\r\n                     field.setValue(\r\n                        $$(comp.ui.inputId ? comp.ui.inputId : comp.ui.id),\r\n                        defaultRowData\r\n                     );\r\n\r\n                     comp.logic?.refresh?.(defaultRowData);\r\n                  });\r\n                  var normalFields = this.fieldComponents(\r\n                     (comp) =>\r\n                        comp instanceof ABViewFormComponent &&\r\n                        !(comp instanceof ABViewFormCustom)\r\n                  );\r\n                  normalFields.forEach((f) => {\r\n                     var field = f.field();\r\n                     if (!field) return;\r\n\r\n                     var comp = this.viewComponents[f.id];\r\n                     if (comp == null) return;\r\n\r\n                     if (f.key != \"button\") {\r\n                        var colName = field.columnName;\r\n\r\n                        // set value to each components\r\n                        var values = {};\r\n                        field.defaultValue(values);\r\n\r\n                        if ($$(comp.ui.id))\r\n                           $$(comp.ui.id).setValue?.(\r\n                              values[colName] == null ? \"\" : values[colName]\r\n                           );\r\n                     }\r\n                  });\r\n               }\r\n\r\n               // Populate value to custom fields\r\n               else {\r\n                  customFields.forEach((f) => {\r\n                     var comp = this.viewComponents[f.id];\r\n                     if (comp == null) return;\r\n\r\n                     if (this._showed) comp.onShow?.();\r\n\r\n                     // set value to each components\r\n                     if (f.field()) {\r\n                        if (comp.ui.inputId) {\r\n                           f.field().setValue($$(comp.ui.inputId), rowData);\r\n                        } else {\r\n                           f.field().setValue($$(comp.ui.id), rowData);\r\n                        }\r\n                     }\r\n\r\n                     comp.logic?.refresh?.(rowData);\r\n                  });\r\n               }\r\n               this.timerId = undefined;\r\n            }, 80);\r\n         },\r\n\r\n         displayParentData: (rowData) => {\r\n            let dv = this.datacollection;\r\n            var currCursor = dv.getCursor();\r\n\r\n            // If the cursor is selected, then it will not update value of the parent field\r\n            if (currCursor != null) return;\r\n\r\n            var Form = $$(ids.component),\r\n               relationField = dv.fieldLink;\r\n\r\n            if (relationField == null) return;\r\n\r\n            // Pull a component of relation field\r\n            var relationFieldCom = this.fieldComponents((comp) => {\r\n               if (!(comp instanceof ABViewFormComponent)) return false;\r\n\r\n               return comp.field() && comp.field().id == relationField.id;\r\n            })[0];\r\n\r\n            if (relationFieldCom == null) return;\r\n\r\n            var relationFieldView = this.viewComponents[relationFieldCom.id].ui\r\n               .inputId;\r\n            // if (\r\n            //    this.viewComponents[relationFieldCom.id].ui.rows &&\r\n            //    this.viewComponents[relationFieldCom.id].ui.rows[0] &&\r\n            //    this.viewComponents[relationFieldCom.id].ui.rows[0].id\r\n            // ) {\r\n            //    relationFieldView = this.viewComponents[relationFieldCom.id].ui\r\n            //       .rows[0].id;\r\n            // }\r\n            if (relationFieldView == null) return;\r\n\r\n            var relationElem = $$(relationFieldView),\r\n               relationName = relationField.relationName();\r\n\r\n            // pull data of parent's dc\r\n            var formData = {};\r\n            formData[relationName] = rowData;\r\n\r\n            // set data of parent to default value\r\n            relationField.setValue(relationElem, formData);\r\n         },\r\n      });\r\n\r\n      var _onShow = (data) => {\r\n         this._showed = true;\r\n\r\n         // call .onShow in the base component\r\n         component.onShow();\r\n\r\n         var Form = $$(ids.component);\r\n\r\n         // var customFields = this.fieldComponents((comp) => {\r\n         // \treturn (comp instanceof ABViewFormCustom) ||\r\n         // \t\t// rich text\r\n         // \t\t((comp instanceof ABViewFormTextbox) && comp.settings.type == 'rich')\r\n         // });\r\n         // customFields.forEach((f) => {\r\n\r\n         // \tvar field = f.field();\r\n         // \tif (!field) return;\r\n\r\n         // \tvar component = this.viewComponents[f.id];\r\n         // \tif (!component) return;\r\n\r\n         // \t// set value to each components\r\n         // \tvar rowData = {};\r\n         // \tfield.defaultValue(rowData);\r\n         // \tfield.setValue($$(component.ui.id), rowData);\r\n\r\n         // });\r\n\r\n         var dc = this.datacollection;\r\n         if (dc) {\r\n            if (Form) dc.bind(Form);\r\n\r\n            // clear current cursor on load\r\n            // if (this.settings.clearOnLoad || _logic.callbacks.clearOnLoad() ) {\r\n            if (this.settings.clearOnLoad) {\r\n               dc.setCursor(null);\r\n               _logic.displayData(null);\r\n            }\r\n            // if the cursor is cleared before or after we need to make\r\n            // sure the reload view button does not appear\r\n            if (this.settings.clearOnLoad || this.settings.clearOnSave) {\r\n               if ($$(ids.component + \"_reloadView\"))\r\n                  $$(ids.component + \"_reloadView\")\r\n                     .getParentView()\r\n                     .removeView(ids.component + \"_reloadView\");\r\n            }\r\n\r\n            // pull data of current cursor\r\n            data = dc.getCursor();\r\n\r\n            // do this for the initial form display so we can see defaults\r\n            _logic.displayData(data);\r\n\r\n            // select parent data to default value\r\n            var linkDv = dc.datacollectionLink;\r\n            if (data == null && linkDv) {\r\n               var parentData = linkDv.getCursor();\r\n               _logic.displayParentData(parentData);\r\n            }\r\n         } else {\r\n            // show blank data in the form\r\n            _logic.displayData(data);\r\n         }\r\n\r\n         //Focus on first focusable component\r\n         this.focusOnFirst();\r\n\r\n         if (Form) Form.adjust();\r\n      };\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: _init,\r\n         logic: _logic,\r\n\r\n         onShow: _onShow,\r\n      };\r\n   }\r\n\r\n   refreshDefaultButton(ids) {\r\n      // If default button is not exists, then skip this\r\n      let defaultButton = this.views(\r\n         (v) => v instanceof ABViewFormButton && v.settings.isDefault\r\n      )[0];\r\n\r\n      // Add a default button\r\n      if (defaultButton == null) {\r\n         defaultButton = ABViewFormButton.newInstance(this.application, this);\r\n         defaultButton.settings.isDefault = true;\r\n      }\r\n      // Remove default button from array, then we will add it to be the last item later (.push)\r\n      else {\r\n         this._views = this.views(\r\n            (v) => !(v instanceof ABViewFormButton) && !v.settings.isDefault\r\n         );\r\n      }\r\n\r\n      // Calculate position Y of the default button\r\n      let yList = this.views().map((v) => (v.position.y || 0) + 1);\r\n      yList.push(this._views.length || 0);\r\n      yList.push($$(ids.fields).length || 0);\r\n      let posY = Math.max(...yList);\r\n\r\n      // Update to be the last item\r\n      defaultButton.position.y = posY;\r\n\r\n      // Keep the default button is always the last item of array\r\n      this._views.push(defaultButton);\r\n\r\n      return defaultButton;\r\n   }\r\n\r\n   /**\r\n    * @method getFormValues\r\n    *\r\n    * @param {webix form} formView\r\n    * @param {ABObject} obj\r\n    * @param {ABDatacollection} dc\r\n    * @param {ABDatacollection} dcLink [optional]\r\n    */\r\n   getFormValues(formView, obj, dc, dcLink) {\r\n      // get the fields that are on this form\r\n      var visibleFields = [\"id\"]; // we always want the id so we can udpate records\r\n      var loopForm = formView.getValues(function (obj) {\r\n         visibleFields.push(obj.config.name);\r\n      });\r\n\r\n      // only get data passed from form\r\n      let allVals = formView.getValues();\r\n      let formVals = {};\r\n      visibleFields.forEach((val) => {\r\n         formVals[val] = allVals[val];\r\n      });\r\n\r\n      // get custom values\r\n      var customFields = this.fieldComponents(\r\n         (comp) =>\r\n            comp instanceof ABViewFormCustom ||\r\n            comp instanceof ABViewFormConnect ||\r\n            comp instanceof ABViewFormSelectMultiple\r\n      );\r\n      customFields.forEach((f) => {\r\n         var vComponent = this.viewComponents[f.id];\r\n         if (vComponent == null) return;\r\n\r\n         let field = f.field();\r\n         if (field) {\r\n            formVals[field.columnName] = vComponent.logic.getValue(formVals);\r\n         }\r\n      });\r\n\r\n      // remove connected fields if they were not on the form and they are present in the formVals because it is a datacollection\r\n      obj.connectFields().forEach((f) => {\r\n         if (\r\n            visibleFields.indexOf(f.columnName) == -1 &&\r\n            formVals[f.columnName]\r\n         ) {\r\n            delete formVals[f.columnName];\r\n            delete formVals[f.relationName()];\r\n         }\r\n      });\r\n\r\n      // clear undefined values or empty arrays\r\n      for (var prop in formVals) {\r\n         if (formVals[prop] == null || formVals[prop].length == 0)\r\n            formVals[prop] = \"\";\r\n      }\r\n\r\n      // Add parent's data collection cursor when a connect field does not show\r\n      let linkValues;\r\n\r\n      if (dcLink) {\r\n         linkValues = dcLink.getCursor();\r\n      }\r\n\r\n      if (linkValues) {\r\n         var objectLink = dcLink.datasource;\r\n\r\n         var connectFields = obj.connectFields();\r\n         connectFields.forEach((f) => {\r\n            var formFieldCom = this.fieldComponents((fComp) => {\r\n               return fComp.field && fComp.field().id == f.id;\r\n            });\r\n\r\n            if (\r\n               objectLink.id == f.settings.linkObject &&\r\n               formFieldCom.length < 1 && // check field does not show\r\n               formVals[f.columnName] === undefined\r\n            ) {\r\n               let linkColName = f.indexField\r\n                  ? f.indexField.columnName\r\n                  : objectLink.PK();\r\n\r\n               formVals[f.columnName] = {};\r\n               formVals[f.columnName][linkColName] =\r\n                  linkValues[linkColName] || linkValues.id;\r\n            }\r\n         });\r\n      }\r\n\r\n      // NOTE: need to pull data of current cursor to calculate Calculate & Formula fields\r\n      // .formVals variable does not include data that does not display in the Form widget\r\n      let cursorFormVals = Object.assign(dc.getCursor() || {}, formVals);\r\n\r\n      // Set value of calculate or formula fields to use in record rule\r\n      obj.fields((f) => f.key == \"calculate\" || f.key == \"formula\").forEach(\r\n         (f) => {\r\n            if (formVals[f.columnName] == null) {\r\n               formVals[f.columnName] = f.format(cursorFormVals, true);\r\n            }\r\n         }\r\n      );\r\n\r\n      return formVals;\r\n   }\r\n\r\n   /**\r\n    * @method validateData\r\n    *\r\n    * @param {webix form} formView\r\n    * @param {ABObject} object\r\n    * @param {object} formVals\r\n    *\r\n    * @return {boolean} isValid\r\n    */\r\n   validateData(formView, object, formVals) {\r\n      let isValid = true;\r\n\r\n      // validate required fields\r\n      let requiredFields = this.fieldComponents(\r\n         (fComp) =>\r\n            (fComp.field &&\r\n               fComp.field() &&\r\n               fComp.field().settings.required == true) ||\r\n            fComp.settings.required == true\r\n      ).map((fComp) => fComp.field());\r\n\r\n      // validate data\r\n      let validator;\r\n      if (isValid) {\r\n         validator = object.isValidData(formVals);\r\n         isValid = validator.pass();\r\n      }\r\n\r\n      $$(formView).validate();\r\n\r\n      // Display required messages\r\n      requiredFields.forEach((f) => {\r\n         if (f && !formVals[f.columnName] && formVals[f.columnName] != \"0\") {\r\n            formView.markInvalid(f.columnName, L(\"This is a required field.\"));\r\n            isValid = false;\r\n\r\n            // Fix position of invalid message\r\n            let $forminput = formView.elements[f.columnName];\r\n            if ($forminput) {\r\n               // Y position\r\n               let height = $forminput.$height;\r\n               if (height < 56) {\r\n                  $forminput.define(\"height\", 60);\r\n                  $forminput.resize();\r\n               }\r\n\r\n               // X position\r\n               let domInvalidMessage = $forminput.$view.getElementsByClassName(\r\n                  \"webix_inp_bottom_label\"\r\n               )[0];\r\n               if (\r\n                  domInvalidMessage &&\r\n                  !domInvalidMessage.style[\"margin-left\"]\r\n               ) {\r\n                  domInvalidMessage.style.marginLeft = `${\r\n                     this.settings.labelWidth ||\r\n                     ABViewFormPropertyComponentDefaults.labelWidth\r\n                  }px`;\r\n               }\r\n            }\r\n         }\r\n      });\r\n\r\n      // if data is invalid\r\n      if (!isValid) {\r\n         let saveButton = formView.queryView({\r\n            view: \"button\",\r\n            type: \"form\",\r\n         });\r\n\r\n         // error message\r\n         if (validator && validator.errors && validator.errors.length) {\r\n            validator.errors.forEach((err) => {\r\n               formView.markInvalid(err.name, err.message);\r\n            });\r\n\r\n            if (saveButton) saveButton.disable();\r\n         } else {\r\n            if (saveButton) saveButton.enable();\r\n         }\r\n      }\r\n\r\n      return isValid;\r\n   }\r\n\r\n   /**\r\n    * @method recordRulesReady()\r\n    * This returns a Promise that gets resolved when all record rules report\r\n    * that they are ready.\r\n    * @return {Promise}\r\n    */\r\n   async recordRulesReady() {\r\n      return this.RecordRule.rulesReady();\r\n   }\r\n\r\n   /**\r\n    * @method saveData\r\n    * save data in to database\r\n    * @param formView - webix's form element\r\n    *\r\n    * @return {Promise}\r\n    */\r\n   async saveData(formView) {\r\n      // call .onBeforeSaveData event\r\n      // if this function returns false, then it will not go on.\r\n      if (!this._logic.callbacks.onBeforeSaveData()) return;\r\n\r\n      // form validate\r\n      if (!formView || !formView.validate()) {\r\n         // TODO : error message\r\n         return;\r\n      }\r\n\r\n      formView.clearValidation();\r\n\r\n      // get ABDatacollection\r\n      var dv = this.datacollection;\r\n      if (dv == null) return;\r\n\r\n      // get ABObject\r\n      var obj = dv.datasource;\r\n      if (obj == null) return;\r\n\r\n      // get ABModel\r\n      var model = dv.model;\r\n      if (model == null) return;\r\n\r\n      // get update data\r\n      var formVals = this.getFormValues(\r\n         formView,\r\n         obj,\r\n         dv,\r\n         dv.datacollectionLink\r\n      );\r\n\r\n      // wait for our Record Rules to be ready before we continue.\r\n      await this.recordRulesReady();\r\n\r\n      // update value from the record rule (pre-update)\r\n      this.doRecordRulesPre(formVals);\r\n\r\n      // validate data\r\n      if (!this.validateData(formView, obj, formVals)) {\r\n         return;\r\n      }\r\n\r\n      // show progress icon\r\n      formView.showProgress?.({ type: \"icon\" });\r\n\r\n      // form ready function\r\n      var formReady = (newFormVals) => {\r\n         // clear cursor after saving.\r\n         if (dv) {\r\n            if (this.settings.clearOnSave) {\r\n               dv.setCursor(null);\r\n               formView.clear();\r\n            } else {\r\n               if (newFormVals && newFormVals.id) dv.setCursor(newFormVals.id);\r\n            }\r\n         }\r\n\r\n         formView.hideProgress?.();\r\n\r\n         // if there was saved data pass it up to the onSaveData callback\r\n         if (newFormVals) this._logic.callbacks.onSaveData(newFormVals);\r\n      };\r\n\r\n      let formError = (err) => {\r\n         let saveButton = formView.queryView({\r\n            view: \"button\",\r\n            type: \"form\",\r\n         });\r\n\r\n         // mark error\r\n         if (err) {\r\n            if (err.invalidAttributes) {\r\n               for (let attr in err.invalidAttributes) {\r\n                  let invalidAttrs = err.invalidAttributes[attr];\r\n                  if (invalidAttrs && invalidAttrs[0])\r\n                     invalidAttrs = invalidAttrs[0];\r\n\r\n                  formView.markInvalid(attr, invalidAttrs.message);\r\n               }\r\n            } else if (err.sqlMessage) {\r\n               webix.message({\r\n                  text: err.sqlMessage,\r\n                  type: \"error\",\r\n               });\r\n            } else {\r\n               webix.message({\r\n                  text: \"System could not save your data\",\r\n                  type: \"error\",\r\n               });\r\n               this.AB.notify.developer(err, {\r\n                  message: \"Could not save your data\",\r\n                  view: this.toObj(),\r\n               });\r\n            }\r\n         }\r\n\r\n         saveButton?.enable();\r\n\r\n         formView?.hideProgress?.();\r\n      };\r\n\r\n      let newFormVals;\r\n      // {obj}\r\n      // The fully populated values returned back from service call\r\n      // We use this in our post processing Rules\r\n\r\n      try {\r\n         // is this an update or create?\r\n         if (formVals.id) {\r\n            newFormVals = await model.update(formVals.id, formVals);\r\n         } else {\r\n            newFormVals = await model.create(formVals);\r\n         }\r\n      } catch (err) {\r\n         formError(err.data);\r\n         throw err;\r\n      }\r\n\r\n      try {\r\n         await this.doRecordRules(newFormVals);\r\n         // make sure any updates from RecordRules get passed along here.\r\n         this.doSubmitRules(newFormVals);\r\n         formReady(newFormVals);\r\n         return newFormVals;\r\n      } catch (err) {\r\n         this.AB.notify.developer(err, {\r\n            message: \"Error processing Record Rules.\",\r\n            view: this.toObj(),\r\n            newFormVals: newFormVals,\r\n         });\r\n         // Question:  how do we respond to an error?\r\n         // ?? just keep going ??\r\n         this.doSubmitRules(newFormVals);\r\n         formReady(newFormVals);\r\n         return;\r\n      }\r\n   }\r\n\r\n   focusOnFirst() {\r\n      var topPosition = 0;\r\n      var topPositionId = \"\";\r\n      this.views().forEach((item) => {\r\n         if (item.key == \"textbox\" || item.key == \"numberbox\") {\r\n            if (item.position.y == topPosition) {\r\n               topPosition = item.position.y;\r\n               topPositionId = item.id;\r\n            }\r\n         }\r\n      });\r\n      var childComponent = this.viewComponents[topPositionId];\r\n      if (childComponent && $$(childComponent.ui.id)) {\r\n         $$(childComponent.ui.id).focus();\r\n      }\r\n   }\r\n};\r\n","const ABViewFormButtonCore = require(\"../../core/views/ABViewFormButtonCore\");\r\n\r\nconst ABViewFormButtonPropertyComponentDefaults = ABViewFormButtonCore.defaultValues();\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABViewFormButton extends ABViewFormButtonCore {\r\n   // constructor(values, application, parent, defaultValues) {\r\n   //    super(values, application, parent, defaultValues);\r\n   // }\r\n\r\n   //\r\n   //\tEditor Related\r\n   //\r\n\r\n   /**\r\n    * @method editorComponent\r\n    * return the Editor for this UI component.\r\n    * the editor should display either a \"block\" view or \"preview\" of\r\n    * the current layout of the view.\r\n    * @param {string} mode what mode are we in ['block', 'preview']\r\n    * @return {Component}\r\n    */\r\n   editorComponent(App, mode) {\r\n      var idBase = \"ABViewFormButtonEditorComponent\";\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n      };\r\n\r\n      var button = this.component(App).ui;\r\n      button.id = ids.component;\r\n\r\n      var _ui = {\r\n         rows: [button, {}],\r\n      };\r\n\r\n      var _init = (options) => {};\r\n\r\n      var _logic = {};\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: _init,\r\n         logic: _logic,\r\n      };\r\n   }\r\n\r\n   //\r\n   // Property Editor\r\n   //\r\n\r\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\r\n      var commonUI = super.propertyEditorDefaultElements(\r\n         App,\r\n         ids,\r\n         _logic,\r\n         ObjectDefaults\r\n      );\r\n\r\n      // in addition to the common .label  values, we\r\n      // ask for:\r\n      return commonUI.concat([\r\n         {\r\n            name: \"includeSave\",\r\n            view: \"checkbox\",\r\n            label: L(\"Save\"),\r\n         },\r\n         {\r\n            name: \"saveLabel\",\r\n            view: \"text\",\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n            label: L(\"Save Label\"),\r\n            placeholder: L(\"Save Placeholder\"),\r\n         },\r\n         {\r\n            name: \"includeCancel\",\r\n            view: \"checkbox\",\r\n            label: L(\"Cancel\"),\r\n         },\r\n         {\r\n            name: \"cancelLabel\",\r\n            view: \"text\",\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n            label: L(\"Cancel Label\"),\r\n            placeholder: L(\"Cancel Placeholder\"),\r\n         },\r\n         {\r\n            name: \"includeReset\",\r\n            view: \"checkbox\",\r\n            label: L(\"Reset\"),\r\n         },\r\n         {\r\n            name: \"resetLabel\",\r\n            view: \"text\",\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n            label: L(\"Reset Label\"),\r\n            placeholder: L(\"Reset Placeholder\"),\r\n         },\r\n         {\r\n            name: \"afterCancel\",\r\n            view: \"richselect\",\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n            label: L(\"After Cancel\"),\r\n            // options: []\r\n         },\r\n         {\r\n            name: \"alignment\",\r\n            view: \"richselect\",\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n            label: L(\"Alignment\"),\r\n            options: [\r\n               {\r\n                  id: \"left\",\r\n                  value: L(\"Left\"),\r\n               },\r\n               {\r\n                  id: \"center\",\r\n                  value: L(\"Center\"),\r\n               },\r\n               {\r\n                  id: \"right\",\r\n                  value: L(\"Right\"),\r\n               },\r\n            ],\r\n         },\r\n      ]);\r\n   }\r\n\r\n   static propertyEditorPopulate(App, ids, view) {\r\n      super.propertyEditorPopulate(App, ids, view);\r\n\r\n      var pagesList = [];\r\n      var allPage = view.application.pages();\r\n      view.AddPagesToList(pagesList, view.application, view.pageRoot().id);\r\n\r\n      var opts = pagesList.map(function (opt) {\r\n         return {\r\n            id: opt.id,\r\n            value: opt.value,\r\n         };\r\n      });\r\n      $$(ids.afterCancel).define(\"options\", opts);\r\n\r\n      $$(ids.includeSave).setValue(\r\n         view.settings.includeSave != null\r\n            ? view.settings.includeSave\r\n            : ABViewFormButtonPropertyComponentDefaults.includeSave\r\n      );\r\n      $$(ids.includeCancel).setValue(\r\n         view.settings.includeCancel != null\r\n            ? view.settings.includeCancel\r\n            : ABViewFormButtonPropertyComponentDefaults.includeCancel\r\n      );\r\n      $$(ids.includeReset).setValue(\r\n         view.settings.includeReset != null\r\n            ? view.settings.includeReset\r\n            : ABViewFormButtonPropertyComponentDefaults.includeReset\r\n      );\r\n\r\n      $$(ids.saveLabel).setValue(view.settings.saveLabel || \"\");\r\n      $$(ids.cancelLabel).setValue(view.settings.cancelLabel || \"\");\r\n      $$(ids.resetLabel).setValue(view.settings.resetLabel || \"\");\r\n\r\n      $$(ids.afterCancel).setValue(\r\n         view.settings.afterCancel ||\r\n            ABViewFormButtonPropertyComponentDefaults.afterCancel\r\n      );\r\n      $$(ids.alignment).setValue(\r\n         view.settings.alignment ||\r\n            ABViewFormButtonPropertyComponentDefaults.alignment\r\n      );\r\n   }\r\n\r\n   static propertyEditorValues(ids, view) {\r\n      super.propertyEditorValues(ids, view);\r\n\r\n      view.settings.includeSave = $$(ids.includeSave).getValue();\r\n      view.settings.saveLabel = $$(ids.saveLabel).getValue();\r\n      view.settings.includeCancel = $$(ids.includeCancel).getValue();\r\n      view.settings.cancelLabel = $$(ids.cancelLabel).getValue();\r\n      view.settings.includeReset = $$(ids.includeReset).getValue();\r\n      view.settings.resetLabel = $$(ids.resetLabel).getValue();\r\n      view.settings.afterCancel = $$(ids.afterCancel).getValue();\r\n      view.settings.alignment = $$(ids.alignment).getValue();\r\n   }\r\n\r\n   /**\r\n    * @method component()\r\n    * return a UI component based upon this view.\r\n    * @param {obj} App\r\n    * @return {obj} UI component\r\n    */\r\n   component(App) {\r\n      var idBase = this.parentFormUniqueID(`ABViewFormButton_${this.id}_f_`);\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n      };\r\n\r\n      var form = this.parentFormComponent();\r\n\r\n      var _ui = {\r\n         id: ids.component,\r\n         cols: [],\r\n      };\r\n\r\n      var alignment =\r\n         this.settings.alignment ||\r\n         ABViewFormButtonPropertyComponentDefaults.alignment;\r\n\r\n      // spacer\r\n      if (alignment == \"center\" || alignment == \"right\") {\r\n         _ui.cols.push({});\r\n      }\r\n\r\n      // cancel button\r\n      if (this.settings.includeCancel) {\r\n         _ui.cols.push(\r\n            {\r\n               view: \"button\",\r\n               autowidth: true,\r\n               value: this.settings.cancelLabel || L(\"Cancel\"),\r\n               click: function () {\r\n                  _logic.onCancel(this);\r\n               },\r\n               on: {\r\n                  onAfterRender: function () {\r\n                     this.getInputNode().setAttribute(\r\n                        \"data-cy\",\r\n                        \"button cancel \" + form.id\r\n                     );\r\n                  },\r\n               },\r\n            },\r\n            {\r\n               width: 10,\r\n            }\r\n         );\r\n      }\r\n\r\n      // reset button\r\n      if (this.settings.includeReset) {\r\n         _ui.cols.push(\r\n            {\r\n               view: \"button\",\r\n               autowidth: true,\r\n               value: this.settings.resetLabel || L(\"Reset\"),\r\n               click: function () {\r\n                  _logic.onClear(this);\r\n               },\r\n               on: {\r\n                  onAfterRender: function () {\r\n                     this.getInputNode().setAttribute(\r\n                        \"data-cy\",\r\n                        \"button reset \" + form.id\r\n                     );\r\n                  },\r\n               },\r\n            },\r\n            {\r\n               width: 10,\r\n            }\r\n         );\r\n      }\r\n\r\n      // save button\r\n      if (this.settings.includeSave) {\r\n         _ui.cols.push({\r\n            view: \"button\",\r\n            type: \"form\",\r\n            css: \"webix_primary\",\r\n            autowidth: true,\r\n            value: this.settings.saveLabel || L(\"Save\"),\r\n            click: function () {\r\n               _logic.callbacks.onSaveClick(this);\r\n            },\r\n            on: {\r\n               onAfterRender: function () {\r\n                  this.getInputNode().setAttribute(\r\n                     \"data-cy\",\r\n                     \"button save \" + form.id\r\n                  );\r\n               },\r\n            },\r\n         });\r\n      }\r\n\r\n      // spacer\r\n      if (alignment == \"center\" || alignment == \"left\") {\r\n         _ui.cols.push({});\r\n      }\r\n\r\n      // make sure each of our child views get .init() called\r\n      var _init = (options) => {\r\n         // register our callbacks:\r\n         if (options) {\r\n            for (var c in _logic.callbacks) {\r\n               _logic.callbacks[c] = options[c] || _logic.callbacks[c];\r\n            }\r\n         }\r\n      };\r\n\r\n      var _logic = (this._logic = {\r\n         callbacks: {\r\n            onCancelClick: function () {\r\n               return true;\r\n            },\r\n            onSaveClick: function (saveButton) {\r\n               _logic.onSave(saveButton);\r\n            },\r\n         },\r\n\r\n         onCancel: (cancelButton) => {\r\n            // attempt to call onCancleClick callback...if no override is set we simply return false\r\n            var shouldContinue = _logic.callbacks.onCancelClick();\r\n\r\n            // if override was called we should have returned true so we can stop now\r\n            if (!shouldContinue) {\r\n               return false;\r\n            }\r\n\r\n            // get form component\r\n            var form = this.parentFormComponent();\r\n\r\n            // get ABDatacollection\r\n            var dc = form.datacollection;\r\n\r\n            // clear cursor of DC\r\n            if (dc) {\r\n               dc.setCursor(null);\r\n            }\r\n\r\n            if (cancelButton.getFormView()) cancelButton.getFormView().clear();\r\n\r\n            if (this.settings.afterCancel)\r\n               super.changePage(this.settings.afterCancel);\r\n            // If the redirect page is not defined, then redirect to parent page\r\n            else {\r\n               var noPopupFilter = (p) =>\r\n                  p.settings && p.settings.type != \"popup\";\r\n\r\n               var pageCurr = this.pageParent();\r\n               if (pageCurr) {\r\n                  var pageParent =\r\n                     pageCurr.pageParent(noPopupFilter) || pageCurr;\r\n\r\n                  if (pageParent) super.changePage(pageParent.id);\r\n               }\r\n            }\r\n         },\r\n\r\n         onClear: (resetButton) => {\r\n            // get form component\r\n            var form = this.parentFormComponent();\r\n\r\n            // get ABDatacollection\r\n            var dc = form.datacollection;\r\n\r\n            // clear cursor of DC\r\n            if (dc) {\r\n               dc.setCursor(null);\r\n            }\r\n\r\n            if (resetButton.getFormView()) resetButton.getFormView().clear();\r\n         },\r\n\r\n         onSave: (saveButton) => {\r\n            // get form component\r\n            var form = this.parentFormComponent();\r\n            var formView = saveButton.getFormView();\r\n\r\n            // disable the save button\r\n            saveButton.disable();\r\n\r\n            // save data\r\n            form\r\n               .saveData(formView)\r\n               .then(() => {\r\n                  if (saveButton && saveButton.$view) saveButton.enable();\r\n\r\n                  //Focus on first focusable component\r\n                  form.focusOnFirst();\r\n               })\r\n               .catch(() => {\r\n                  if (saveButton && saveButton.$view) saveButton.enable();\r\n               });\r\n         },\r\n      });\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: _init,\r\n         logic: _logic,\r\n      };\r\n   }\r\n\r\n   AddPagesToList(pagesList, parent, rootPageId) {\r\n      if (!parent || !parent.pages || !pagesList) return;\r\n\r\n      var pages = parent.pages() || [];\r\n\r\n      pages.forEach((page) => {\r\n         if (page.parent != null || page.id == rootPageId) {\r\n            pagesList.push({\r\n               id: page.id,\r\n               value: page.label,\r\n            });\r\n\r\n            this.AddPagesToList(pagesList, page, page.id);\r\n         }\r\n      });\r\n   }\r\n\r\n   /**\r\n    * @method parentFormUniqueID\r\n    * return a unique ID based upon the closest form object this component is on.\r\n    * @param {string} key  The basic id string we will try to make unique\r\n    * @return {string}\r\n    */\r\n   parentFormUniqueID(key) {\r\n      var form = this.parentFormComponent();\r\n      var uniqueInstanceID;\r\n      if (form) {\r\n         uniqueInstanceID = form.uniqueInstanceID;\r\n      } else {\r\n         uniqueInstanceID = webix.uid();\r\n      }\r\n\r\n      return key + uniqueInstanceID;\r\n   }\r\n};\r\n","const ABViewFormCheckboxCore = require(\"../../core/views/ABViewFormCheckboxCore\");\r\n\r\nmodule.exports = class ABViewFormCheckbox extends ABViewFormCheckboxCore {\r\n   // constructor(values, application, parent, defaultValues) {\r\n   //    super(values, application, parent, defaultValues);\r\n   // }\r\n\r\n   //\r\n   //\tEditor Related\r\n   //\r\n\r\n   /**\r\n    * @method editorComponent\r\n    * return the Editor for this UI component.\r\n    * the editor should display either a \"block\" view or \"preview\" of\r\n    * the current layout of the view.\r\n    * @param {string} mode what mode are we in ['block', 'preview']\r\n    * @return {Component}\r\n    */\r\n   editorComponent(App, mode) {\r\n      var idBase = \"ABViewFormCheckboxEditorComponent\";\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n      };\r\n\r\n      var checkboxElem = this.component(App).ui;\r\n      checkboxElem.id = ids.component;\r\n\r\n      var _ui = {\r\n         rows: [checkboxElem, {}],\r\n      };\r\n\r\n      var _init = (options) => {};\r\n\r\n      var _logic = {};\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: _init,\r\n         logic: _logic,\r\n      };\r\n   }\r\n\r\n   /**\r\n    * @method component()\r\n    * return a UI component based upon this view.\r\n    * @param {obj} App\r\n    * @return {obj} UI component\r\n    */\r\n   component(App) {\r\n      var component = super.component(App);\r\n\r\n      var idBase = this.parentFormUniqueID(`ABViewFormCheckbox_${this.id}_f_`);\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n      };\r\n\r\n      component.ui.id = ids.component;\r\n      component.ui.view = \"checkbox\";\r\n\r\n      // make sure each of our child views get .init() called\r\n      component.init = (options) => {};\r\n\r\n      return component;\r\n   }\r\n};\r\n","const ABViewFormComponentCore = require(\"../../core/views/ABViewFormComponentCore\");\r\n\r\nconst ABViewFormFieldPropertyComponentDefaults = ABViewFormComponentCore.defaultValues();\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABViewFormComponent extends ABViewFormComponentCore {\r\n   // constructor(values, application, parent, defaultValues) {\r\n   //    super(values, application, parent, defaultValues);\r\n   // }\r\n\r\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\r\n      var commonUI = super.propertyEditorDefaultElements(\r\n         App,\r\n         ids,\r\n         _logic,\r\n         ObjectDefaults\r\n      );\r\n\r\n      return commonUI.concat([\r\n         {\r\n            name: \"fieldLabel\",\r\n            view: \"text\",\r\n            disabled: true,\r\n            label: L(\"Field\"),\r\n         },\r\n         {\r\n            name: \"required\",\r\n            view: \"checkbox\",\r\n            labelWidth: this.AB.UISettings.config().labelWidthCheckbox,\r\n            labelRight: L(\"Required\"),\r\n         },\r\n         {\r\n            name: \"disable\",\r\n            view: \"checkbox\",\r\n            labelWidth: this.AB.UISettings.config().labelWidthCheckbox,\r\n            labelRight: L(\"Disable\"),\r\n         },\r\n      ]);\r\n   }\r\n\r\n   static propertyEditorPopulate(App, ids, view) {\r\n      super.propertyEditorPopulate(App, ids, view);\r\n\r\n      var field = view.field();\r\n\r\n      $$(ids.fieldLabel).setValue(field ? field.label : \"\");\r\n\r\n      if (field && field.settings.required == 1) {\r\n         $$(ids.required).setValue(field.settings.required);\r\n         $$(ids.required).disable();\r\n      } else {\r\n         $$(ids.required).setValue(\r\n            view.settings.required != null\r\n               ? view.settings.required\r\n               : ABViewFormFieldPropertyComponentDefaults.required\r\n         );\r\n      }\r\n\r\n      if (view && view.settings.disable == 1) {\r\n         $$(ids.disable).setValue(view.settings.disable);\r\n      } else {\r\n         $$(ids.disable).setValue(\r\n            ABViewFormFieldPropertyComponentDefaults.disable\r\n         );\r\n      }\r\n   }\r\n\r\n   static propertyEditorValues(ids, view) {\r\n      super.propertyEditorValues(ids, view);\r\n\r\n      // console.log(\"here\");\r\n      view.settings.required = $$(ids.required).getValue();\r\n      view.settings.disable = $$(ids.disable).getValue();\r\n      // console.log(view);\r\n   }\r\n\r\n   /*\r\n    * @component()\r\n    * return a UI component based upon this view.\r\n    * @param {obj} App\r\n    * @return {obj} UI component\r\n    */\r\n   component(App) {\r\n      // setup 'label' of the element\r\n      var form = this.parentFormComponent(),\r\n         field = this.field(),\r\n         label = \"\";\r\n\r\n      var settings = {};\r\n      if (form) settings = form.settings;\r\n\r\n      var _ui = {\r\n         labelPosition: settings.labelPosition,\r\n         labelWidth: settings.labelWidth,\r\n         label: label,\r\n      };\r\n\r\n      if (field != null) {\r\n         _ui.name = field.columnName;\r\n\r\n         // default value\r\n         var data = {};\r\n         field.defaultValue(data);\r\n         if (data[field.columnName]) _ui.value = data[field.columnName];\r\n\r\n         if (settings.showLabel == true) {\r\n            _ui.label = field.label;\r\n         }\r\n\r\n         if (\r\n            field.settings.required == true ||\r\n            this.settings.required == true\r\n         ) {\r\n            _ui.required = 1;\r\n         }\r\n\r\n         if (this.settings.disable == 1) {\r\n            _ui.disabled = true;\r\n         }\r\n\r\n         // add data-cy to form element for better testing code\r\n         _ui.on = {\r\n            onAfterRender() {\r\n               if (this.getList) {\r\n                  var popup = this.getPopup();\r\n                  if (!popup) return;\r\n                  this.getList().data.each((option) => {\r\n                     if (!option) return;\r\n                     var node = popup.$view.querySelector(\r\n                        \"[webix_l_id='\" + option.id + \"']\"\r\n                     );\r\n                     if (!node) return;\r\n                     node.setAttribute(\r\n                        \"data-cy\",\r\n                        `${field.key} options ${option.id} ${field.id} ${form.id}`\r\n                     );\r\n                  });\r\n               }\r\n               this.getInputNode().setAttribute(\r\n                  \"data-cy\",\r\n                  `${field.key} ${field.columnName} ${field.id} ${form.id}`\r\n               );\r\n            },\r\n         };\r\n\r\n         // this may be needed if we want to format data at this point\r\n         // if (field.format) data = field.format(data);\r\n\r\n         _ui.validate = (val, data, colName) => {\r\n            let validator = this.AB.Validation.validator();\r\n\r\n            field.isValidData(data, validator);\r\n\r\n            return validator.pass();\r\n         };\r\n      }\r\n\r\n      var _init = () => {};\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: _init,\r\n      };\r\n   }\r\n\r\n   /**\r\n    * @method parentFormUniqueID\r\n    * return a unique ID based upon the closest form object this component is on.\r\n    * @param {string} key  The basic id string we will try to make unique\r\n    * @return {string}\r\n    */\r\n   parentFormUniqueID(key) {\r\n      var form = this.parentFormComponent();\r\n      var uniqueInstanceID;\r\n      if (form) {\r\n         uniqueInstanceID = form.uniqueInstanceID;\r\n      } else {\r\n         uniqueInstanceID = webix.uid();\r\n      }\r\n\r\n      return key + uniqueInstanceID;\r\n   }\r\n};\r\n","const ABViewFormConnectCore = require(\"../../core/views/ABViewFormConnectCore\");\r\nconst ABViewPropertyAddPage = require(\"./viewProperties/ABViewPropertyAddPage\")\r\n   .default;\r\nconst ABViewPropertyEditPage = require(\"./viewProperties/ABViewPropertyEditPage\")\r\n   .default;\r\n\r\nconst ABViewFormConnectPropertyComponentDefaults = ABViewFormConnectCore.defaultValues();\r\n\r\nconst ABPopupSort = require(\"../../../ABDesigner/ab_work_object_workspace_popupSortFields\");\r\n\r\nlet FilterComponent = null;\r\nlet SortComponent = null;\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nfunction _onShow(App, compId, instance, component) {\r\n   const elem = $$(compId);\r\n\r\n   if (!elem) return;\r\n\r\n   const field = instance.field();\r\n\r\n   if (!field) return;\r\n\r\n   const node = elem.$view;\r\n\r\n   if (!node) return;\r\n\r\n   const $node = $$(node);\r\n\r\n   if (!$node) return;\r\n\r\n   const filterConditions = instance.settings.objectWorkspace\r\n      .filterConditions || { glue: \"and\", rules: [] };\r\n\r\n   const getFilterByConnectValues = (conditions, depth = 0) => {\r\n      return [\r\n         ...conditions.rules\r\n            .filter((e) => e.rule === \"filterByConnectValue\")\r\n            .map((e) => {\r\n               const filterByConnectValue = Object.assign({}, e);\r\n\r\n               filterByConnectValue.depth = depth;\r\n\r\n               return filterByConnectValue;\r\n            }),\r\n      ].concat(\r\n         ...conditions.rules\r\n            .filter((e) => e.glue)\r\n            .map((e) => getFilterByConnectValues(e, depth + 1))\r\n      );\r\n   };\r\n\r\n   const filterByConnectValues = getFilterByConnectValues(filterConditions).map(\r\n      (e) => {\r\n         for (const key in instance.parent.viewComponents) {\r\n            const $ui = $$(instance.parent.viewComponents[key].ui.inputId);\r\n\r\n            if ($ui?.config?.name === e.value) {\r\n               // we need to use the element id stored in the settings to find out what the\r\n               // ui component id is so later we can use it to look up its current value\r\n               e.filterValue = $ui;\r\n\r\n               break;\r\n            }\r\n         }\r\n\r\n         const field = instance.AB.objectByID(\r\n            instance.settings.objectId\r\n         ).fieldByID(instance.settings.fieldId);\r\n         const linkedObject = instance.AB.objectByID(field.settings.linkObject);\r\n         const linkedField = linkedObject.fieldByID(e.key);\r\n\r\n         if (linkedField.settings.isCustomFK) {\r\n            // finally if this is a custom foreign key we need the stored columnName by\r\n            // default uuid is passed for all non CFK\r\n            e.filterColumn = instance.AB.objectByID(\r\n               linkedField.settings.linkObject\r\n            ).fields(\r\n               (filter) =>\r\n                  filter.id === linkedField.settings.indexField ||\r\n                  linkedField.settings.indexField2\r\n            )[0].columnName;\r\n         } else e.filterColumn = null;\r\n\r\n         return e;\r\n      }\r\n   );\r\n\r\n   instance.options = {\r\n      formView: instance.settings.formView,\r\n      filters: filterConditions,\r\n      sort: instance.settings.objectWorkspace.sortFields,\r\n      editable: instance.settings.disable === 1 ? false : true,\r\n      editPage:\r\n         !instance.settings.editForm || instance.settings.editForm === \"none\"\r\n            ? false\r\n            : true,\r\n      filterByConnectValues,\r\n   };\r\n\r\n   // if this field's options are filtered off another field's value we need\r\n   // to make sure the UX helps the user know what to do.\r\n   // fetch the options and set placeholder text for this view\r\n   if (instance.options.editable) {\r\n      const parentFields = [];\r\n\r\n      for (let i = 0; i < filterByConnectValues?.length; i++) {\r\n         if (\r\n            filterByConnectValues[i].filterValue &&\r\n            filterByConnectValues[i].key\r\n         ) {\r\n            const $filterValueConfig = $$(\r\n               filterByConnectValues[i].filterValue.config.id\r\n            );\r\n\r\n            let parentField = null;\r\n\r\n            if (!$filterValueConfig) {\r\n               // this happens in the Interface Builder when only the single form UI is displayed\r\n               parentField = {\r\n                  id: \"perentElement\",\r\n                  label: L(\"PARENT ELEMENT\"),\r\n               };\r\n            } else {\r\n               const value = field.getValue($filterValueConfig);\r\n\r\n               if (!value) {\r\n                  // if there isn't a value on the parent select element set this one to readonly and change placeholder text\r\n                  parentField = {\r\n                     id: filterByConnectValues[i].filterValue.config.id,\r\n                     label: $filterValueConfig.config.label,\r\n                  };\r\n               }\r\n\r\n               $filterValueConfig.attachEvent(\r\n                  \"onChange\",\r\n                  (e) => {\r\n                     const parentVal = $filterValueConfig.getValue();\r\n\r\n                     if (parentVal) {\r\n                        $node.define(\"disabled\", false);\r\n                        $node.define(\"placeholder\", L(\"Select items\"));\r\n                        field.getAndPopulateOptions(\r\n                           $node,\r\n                           instance.options,\r\n                           field,\r\n                           instance.parentFormComponent()\r\n                        );\r\n                     } else {\r\n                        $node.define(\"disabled\", true);\r\n                        $node.define(\r\n                           \"placeholder\",\r\n                           L(\"Must select item from '{0}' first.\", [\r\n                              $filterValueConfig.config.label,\r\n                           ])\r\n                        );\r\n                     }\r\n\r\n                     $node.setValue(\"\");\r\n                     $node.refresh();\r\n                  },\r\n                  false\r\n               );\r\n            }\r\n\r\n            if (\r\n               parentField &&\r\n               parentFields.findIndex((e) => e.id === parentField.id) < 0\r\n            )\r\n               parentFields.push(parentField);\r\n         }\r\n      }\r\n\r\n      if (parentFields.length && !$node.getValue()) {\r\n         $node.define(\"disabled\", true);\r\n         $node.define(\r\n            \"placeholder\",\r\n            L(\r\n               `Must select item from ${parentFields\r\n                  .map((e, i) => `'{${i}}'`)\r\n                  .join(\", \")} first.`,\r\n               parentFields.map((e) => e.label)\r\n            )\r\n         );\r\n      } else {\r\n         $node.define(\"disabled\", false);\r\n         $node.define(\"placeholder\", L(\"Select items\"));\r\n      }\r\n   } else {\r\n      $node.define(\"placeholder\", \"\");\r\n      $node.define(\"disabled\", true);\r\n   }\r\n\r\n   $node.refresh();\r\n\r\n   field.getAndPopulateOptions(\r\n      $node,\r\n      instance.options,\r\n      field,\r\n      instance.parentFormComponent()\r\n   );\r\n}\r\n\r\nmodule.exports = class ABViewFormConnect extends ABViewFormConnectCore {\r\n   /**\r\n    * @param {obj} values  key=>value hash of ABView values\r\n    * @param {ABApplication} application the application object this view is under\r\n    * @param {ABView} parent the ABView this view is a child of. (can be null)\r\n    */\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(values, application, parent, defaultValues);\r\n\r\n      // Set filter value\r\n      this.__filterComponent = this.AB.filterComplexNew(\r\n         `${this.id}__filterComponent`\r\n      );\r\n      // this.__filterComponent.applicationLoad(application);\r\n      this.__filterComponent.fieldsLoad(\r\n         this.datasource ? this.datasource.fields() : [],\r\n         this.datasource ? this.datasource : null\r\n      );\r\n\r\n      if (\r\n         !this.settings.objectWorkspace ||\r\n         !this.settings.objectWorkspace.filterConditions\r\n      ) {\r\n         this.AB.error(\"Error: filter conditions do not exist\", {\r\n            error: \"filterConditions do not exist\",\r\n            viewLocation: {\r\n               application: this.application.name,\r\n               id: this.id,\r\n               name: this.label,\r\n            },\r\n            view: this,\r\n         });\r\n         // manually place an empty filter\r\n         this.settings[\"objectWorkspace\"] = {};\r\n         this.settings[\"objectWorkspace\"][\"filterConditions\"] = { glue: \"and\" };\r\n      }\r\n\r\n      this.__filterComponent.setValue(\r\n         this.settings.objectWorkspace.filterConditions ??\r\n            ABViewFormConnectPropertyComponentDefaults.filterConditions\r\n      );\r\n   }\r\n\r\n   //\r\n   //\tEditor Related\r\n   //\r\n\r\n   /**\r\n    * @method editorComponent\r\n    * return the Editor for this UI component.\r\n    * the editor should display either a \"block\" view or \"preview\" of\r\n    * the current layout of the view.\r\n    * @param {string} mode what mode are we in ['block', 'preview']\r\n    * @return {Component}\r\n    */\r\n   editorComponent(App, mode) {\r\n      let idBase = \"ABViewFormConnectEditorComponent\";\r\n      let ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n      };\r\n\r\n      let baseComp = this.component(App);\r\n      let templateElem = baseComp.ui;\r\n      templateElem.id = ids.component;\r\n\r\n      var _ui = {\r\n         rows: [templateElem, {}],\r\n      };\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: baseComp.init,\r\n         logic: baseComp.logic,\r\n         onShow: () => {\r\n            _onShow(App, ids.component, this, baseComp);\r\n         },\r\n      };\r\n   }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /**\r\n    * @method fromValues()\r\n    *\r\n    * initialze this object with the given set of values.\r\n    * @param {obj} values\r\n    */\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n\r\n      this.addPageTool.fromSettings(this.settings);\r\n      this.editPageTool.fromSettings(this.settings);\r\n   }\r\n\r\n   //\r\n   // Property Editor\r\n   //\r\n\r\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\r\n      var commonUI = super.propertyEditorDefaultElements(\r\n         App,\r\n         ids,\r\n         _logic,\r\n         ObjectDefaults\r\n      );\r\n\r\n      let idBase = \"ABViewFormConnectPropertyEditor\";\r\n      this.App = App;\r\n      this.idBase = idBase;\r\n\r\n      _logic.showFilterPopup = ($view) => {\r\n         this.filter_popup.show($view, null, { pos: \"top\" });\r\n      };\r\n\r\n      _logic.showSortPopup = ($button) => {\r\n         SortComponent.show($button, null, {\r\n            pos: \"top\",\r\n         });\r\n      };\r\n\r\n      _logic.onFilterChange = () => {\r\n         let view = _logic.currentEditObject();\r\n         let filterValues = FilterComponent.getValue() || {};\r\n\r\n         let allComplete = true;\r\n         (filterValues.rules || []).forEach((f) => {\r\n            // if all 3 fields are present, we are good.\r\n            if (f.key && f.rule && f.value) {\r\n               allComplete = allComplete && true;\r\n            } else {\r\n               // else, we found an entry that wasn't complete:\r\n               allComplete = false;\r\n            }\r\n         });\r\n\r\n         // only perform the update if a complete row is specified:\r\n         if (allComplete) {\r\n            // we want to call .save() but give webix a chance to properly update it's\r\n            // select boxes before this call causes them to be removed:\r\n            setTimeout(() => {\r\n               this.propertyEditorSave(ids, view);\r\n            }, 10);\r\n         }\r\n      };\r\n\r\n      _logic.onSortChange = () => {\r\n         let view = _logic.currentEditObject();\r\n         this.propertyEditorSave(ids, view);\r\n      };\r\n\r\n      // create filter & sort popups\r\n      this.initPopupEditors(App, ids, _logic);\r\n\r\n      let onSave = () => {\r\n         let currView = _logic.currentEditObject();\r\n         if (currView) {\r\n            // refresh settings\r\n            this.propertyEditorValues(ids, currView);\r\n\r\n            // trigger a save()\r\n            this.propertyEditorSave(ids, currView);\r\n         }\r\n      };\r\n\r\n      this.addPageProperty.init({\r\n         onSave: () => {\r\n            onSave();\r\n         },\r\n      });\r\n\r\n      this.editPageProperty.init({\r\n         onSave: () => {\r\n            onSave();\r\n         },\r\n      });\r\n\r\n      // in addition to the common .label  values, we\r\n      // ask for:\r\n      return commonUI.concat([\r\n         this.addPageProperty.ui,\r\n         this.editPageProperty.ui,\r\n         {\r\n            view: \"fieldset\",\r\n            name: \"addNewSettings\",\r\n            label: L(\"Add New Popup Settings:\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n            body: {\r\n               type: \"clean\",\r\n               padding: 10,\r\n               rows: [\r\n                  {\r\n                     view: \"text\",\r\n                     name: \"popupWidth\",\r\n                     placeholder: L(\"Set popup width\"),\r\n                     label: L(\"Width:\"),\r\n                     labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n                     validate: webix.rules.isNumber,\r\n                  },\r\n                  {\r\n                     view: \"text\",\r\n                     name: \"popupHeight\",\r\n                     placeholder: L(\"Set popup height\"),\r\n                     label: L(\"Height:\"),\r\n                     labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n                     validate: webix.rules.isNumber,\r\n                  },\r\n               ],\r\n            },\r\n         },\r\n         {\r\n            view: \"fieldset\",\r\n            name: \"advancedOption\",\r\n            label: L(\"Advanced Options:\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n            body: {\r\n               type: \"clean\",\r\n               padding: 10,\r\n               rows: [\r\n                  {\r\n                     cols: [\r\n                        {\r\n                           view: \"label\",\r\n                           label: L(\"Filter Options:\"),\r\n                           width: this.AB.UISettings.config().labelWidthLarge,\r\n                        },\r\n                        {\r\n                           view: \"button\",\r\n                           name: \"buttonFilter\",\r\n                           css: \"webix_primary\",\r\n                           label: L(\"Settings\"),\r\n                           icon: \"fa fa-gear\",\r\n                           type: \"icon\",\r\n                           badge: 0,\r\n                           click: function () {\r\n                              _logic.showFilterPopup(this.$view);\r\n                           },\r\n                        },\r\n                     ],\r\n                  },\r\n                  {\r\n                     rows: [\r\n                        {\r\n                           view: \"label\",\r\n                           label: L(\"Filter by Connected Field Value:\"),\r\n                        },\r\n                        {\r\n                           view: \"combo\",\r\n                           name: \"filterConnectedValue\",\r\n                           options: [], // we will add these in propertyEditorPopulate\r\n                        },\r\n                     ],\r\n                  },\r\n                  {\r\n                     height: 30,\r\n                  },\r\n                  {\r\n                     rows: [\r\n                        {\r\n                           cols: [\r\n                              {\r\n                                 view: \"label\",\r\n                                 label: L(\"Sort Options:\"),\r\n                                 width: App.config.labelWidthLarge,\r\n                              },\r\n                              {\r\n                                 view: \"button\",\r\n                                 name: \"buttonSort\",\r\n                                 css: \"webix_primary\",\r\n                                 label: L(\"Settings\"),\r\n                                 icon: \"fa fa-gear\",\r\n                                 type: \"icon\",\r\n                                 badge: 0,\r\n                                 click: function () {\r\n                                    _logic.showSortPopup(this.$view);\r\n                                 },\r\n                              },\r\n                           ],\r\n                        },\r\n                     ],\r\n                  },\r\n               ],\r\n            },\r\n         },\r\n      ]);\r\n   }\r\n\r\n   static propertyEditorPopulate(App, ids, view) {\r\n      super.propertyEditorPopulate(App, ids, view);\r\n\r\n      // Default set of options for filter connected combo\r\n      let filterConnectedOptions = [{ id: \"\", value: \"\" }];\r\n\r\n      // get the definitions for the connected field\r\n      let fieldDefs = view.AB.definitionForID(view.settings.fieldId);\r\n\r\n      // get the definition for the object that the field is related to\r\n      let objectDefs = view.AB.definitionForID(fieldDefs.settings.linkObject);\r\n\r\n      // we need these definitions later as we check to find out which field\r\n      // we are filtering by so push them into an array for later\r\n      let fieldsDefs = [];\r\n      objectDefs.fieldIDs.forEach((fld) => {\r\n         fieldsDefs.push(view.AB.definitionForID(fld));\r\n      });\r\n\r\n      // find out what connected objects this field has\r\n      let connectedObjs = view.application.connectedObjects(\r\n         fieldDefs.settings.linkObject\r\n      );\r\n\r\n      // loop through the form's elements (need to ensure that just looking at parent is okay in all cases)\r\n      view.parent.views().forEach((element) => {\r\n         // identify if element is a connected field\r\n         if (element.key == \"connect\") {\r\n            // we need to get the fields defs to find out what it is connected to\r\n            let formElementsDefs = view.AB.definitionForID(\r\n               element.settings.fieldId\r\n            );\r\n\r\n            // loop through the connected objects discovered above\r\n            connectedObjs.forEach((connObj) => {\r\n               // see if the connected object matches the connected object of the form element\r\n               if (connObj.id == formElementsDefs.settings.linkObject) {\r\n                  // get the ui id of this component that matches the link Object\r\n                  let fieldToCheck;\r\n                  fieldsDefs.forEach((fdefs) => {\r\n                     // if the field has a custom foreign key we need to store it\r\n                     // so selectivity later can know what value to get, otherwise\r\n                     // we just get the uuid of the record\r\n                     if (\r\n                        fdefs.settings.isCustomFK &&\r\n                        fdefs.settings.indexField != \"\" &&\r\n                        fdefs.settings.linkObject &&\r\n                        fdefs.settings.linkType == \"one\" &&\r\n                        fdefs.settings.linkObject ==\r\n                           formElementsDefs.settings.linkObject\r\n                     ) {\r\n                        fieldToCheck = fdefs.id;\r\n                        let customFK = view.application.definitionForID(\r\n                           fdefs.settings.indexField\r\n                        );\r\n\r\n                        // if the index definitions were found\r\n                        if (customFK) {\r\n                           fieldToCheck = `${fdefs.id}:${customFK.columnName}`;\r\n                        }\r\n                     } else if (\r\n                        fdefs.settings.linkObject &&\r\n                        fdefs.settings.linkType == \"one\" &&\r\n                        fdefs.settings.linkObject ==\r\n                           formElementsDefs.settings.linkObject\r\n                     ) {\r\n                        fieldToCheck = `${fdefs.id}:uuid`;\r\n                     }\r\n                  });\r\n\r\n                  // only add optinos that have a fieldToCheck\r\n                  if (fieldToCheck) {\r\n                     // get the component we are referencing so we can display its label\r\n                     let formComponent = view.parent.viewComponents[element.id]; // need to ensure that just looking at parent is okay in all cases\r\n                     filterConnectedOptions.push({\r\n                        id: `${formComponent.ui.name}:${fieldToCheck}`, // store the columnName name because the ui id changes on each load\r\n                        value: formComponent.ui.label, // should be the translated field label\r\n                     });\r\n                  }\r\n               }\r\n            });\r\n         }\r\n      });\r\n\r\n      // Set the options of the possible edit forms\r\n      this.addPageProperty.setSettings(view, view.settingsAddPage);\r\n      this.editPageProperty.setSettings(view, view.settingsEditPage);\r\n      $$(ids.filterConnectedValue).define(\"options\", filterConnectedOptions);\r\n      $$(ids.filterConnectedValue).setValue(view.settings.filterConnectedValue);\r\n\r\n      $$(ids.popupWidth).setValue(\r\n         view.settings.popupWidth ||\r\n            ABViewFormConnectPropertyComponentDefaults.popupWidth\r\n      );\r\n      $$(ids.popupHeight).setValue(\r\n         view.settings.popupHeight ||\r\n            ABViewFormConnectPropertyComponentDefaults.popupHeight\r\n      );\r\n\r\n      // initial populate of popups\r\n      this.populatePopupEditors(view);\r\n\r\n      // inform the user that some advanced settings have been set\r\n      this.populateBadgeNumber(ids, view);\r\n\r\n      // when a change is made in the properties the popups need to reflect the change\r\n      this.updateEventIds = this.updateEventIds || {}; // { viewId: boolean, ..., viewIdn: boolean }\r\n      if (!this.updateEventIds[view.id]) {\r\n         this.updateEventIds[view.id] = true;\r\n\r\n         view.addListener(\"properties.updated\", () => {\r\n            this.populatePopupEditors(view);\r\n            this.populateBadgeNumber(ids, view);\r\n         });\r\n      }\r\n   }\r\n\r\n   static propertyEditorValues(ids, view) {\r\n      super.propertyEditorValues(ids, view);\r\n\r\n      view.settings.popupWidth = $$(ids.popupWidth).getValue();\r\n      view.settings.popupHeight = $$(ids.popupHeight).getValue();\r\n      view.settings.filterConnectedValue = $$(\r\n         ids.filterConnectedValue\r\n      ).getValue();\r\n      view.settings.objectWorkspace = {\r\n         filterConditions: FilterComponent.getValue(),\r\n         sortFields: SortComponent.getValue(),\r\n      };\r\n\r\n      view.settingsAddPage = this.addPageProperty.getSettings(view);\r\n      view.settingsEditPage = this.editPageProperty.getSettings(view);\r\n\r\n      // refresh settings of app page tool\r\n      view.addPageTool.fromSettings(view.settingsAddPage);\r\n      view.editPageTool.fromSettings(view.settingsEditPage);\r\n   }\r\n\r\n   static populateBadgeNumber(ids, view) {\r\n      if (\r\n         view.settings.objectWorkspace &&\r\n         view.settings.objectWorkspace.filterConditions &&\r\n         view.settings.objectWorkspace.filterConditions.rules\r\n      ) {\r\n         $$(ids.buttonFilter).define(\r\n            \"badge\",\r\n            view.settings.objectWorkspace.filterConditions.rules.length || null\r\n         );\r\n         $$(ids.buttonFilter).refresh();\r\n      } else {\r\n         $$(ids.buttonFilter).define(\"badge\", null);\r\n         $$(ids.buttonFilter).refresh();\r\n      }\r\n\r\n      if (\r\n         view.settings.objectWorkspace &&\r\n         view.settings.objectWorkspace.sortFields &&\r\n         view.settings.objectWorkspace.sortFields.length\r\n      ) {\r\n         $$(ids.buttonSort).define(\r\n            \"badge\",\r\n            view.settings.objectWorkspace.sortFields.length || null\r\n         );\r\n         $$(ids.buttonSort).refresh();\r\n      } else {\r\n         $$(ids.buttonSort).define(\"badge\", null);\r\n         $$(ids.buttonSort).refresh();\r\n      }\r\n   }\r\n\r\n   static initPopupEditors(App, ids, _logic) {\r\n      var idBase = \"ABViewFormConnectPropertyEditor\";\r\n\r\n      FilterComponent = this.AB.filterComplexNew(`${idBase}_filter`);\r\n      FilterComponent.init();\r\n      // when we make a change in the popups we want to make sure we save the new workspace to the properties to do so just fire an onChange event\r\n      FilterComponent.on(\"change\", (val) => {\r\n         _logic.onFilterChange(val);\r\n      });\r\n\r\n      SortComponent = new ABPopupSort(this.App, `${idBase}_sort`);\r\n      SortComponent.init({\r\n         onChange: _logic.onSortChange,\r\n      });\r\n\r\n      this.filter_popup = webix.ui({\r\n         view: \"popup\",\r\n         width: 800,\r\n         hidden: true,\r\n         body: FilterComponent.ui,\r\n      });\r\n   }\r\n\r\n   static populatePopupEditors(view) {\r\n      let filterConditions =\r\n         ABViewFormConnectPropertyComponentDefaults.objectWorkspace\r\n            .filterConditions;\r\n\r\n      if (\r\n         view.settings.objectWorkspace &&\r\n         view.settings.objectWorkspace.filterConditions\r\n      )\r\n         filterConditions = view.settings.objectWorkspace.filterConditions;\r\n\r\n      // Populate data to popups\r\n      // FilterComponent.objectLoad(objectCopy);\r\n      let linkedObj;\r\n      let field = view.field();\r\n      if (field) {\r\n         linkedObj = field.datasourceLink;\r\n         if (linkedObj)\r\n            FilterComponent.fieldsLoad(linkedObj.fields(), linkedObj);\r\n      }\r\n\r\n      FilterComponent.setValue(filterConditions);\r\n\r\n      if (linkedObj) SortComponent.objectLoad(linkedObj);\r\n      SortComponent.setValue(view.settings.objectWorkspace.sortFields);\r\n   }\r\n\r\n   static get addPageProperty() {\r\n      return ABViewPropertyAddPage.propertyComponent(this.App, this.idBase);\r\n   }\r\n\r\n   static get editPageProperty() {\r\n      return ABViewPropertyEditPage.propertyComponent(this.App, this.idBase);\r\n   }\r\n\r\n   /**\r\n    * @method component()\r\n    * return a UI component based upon this view.\r\n    * @param {obj} App\r\n    * @return {obj} UI component\r\n    */\r\n   component(App, idPrefix) {\r\n      var field = this.field();\r\n      // this field may be deleted\r\n      if (!field) return super.component(App);\r\n\r\n      idPrefix = idPrefix ? idPrefix + \"_\" : \"\";\r\n\r\n      var component = super.component(App);\r\n      var form = this.parentFormComponent();\r\n      var idBase = this.parentFormUniqueID(\r\n         \"ABViewFormConnect_\" + this.id + \"_f_\"\r\n      );\r\n      var ids = {\r\n         component: App.unique(`${idPrefix}${idBase}_component`),\r\n         popup: App.unique(`${idPrefix}${idBase}_popup_add_new`),\r\n         editpopup: App.unique(\r\n            `${idPrefix}${idBase}_popup_edit_form_popup_add_new`\r\n         ),\r\n      };\r\n\r\n      var settings = {};\r\n      if (form) settings = form.settings;\r\n\r\n      let addPageComponent = this.addPageTool.component(App, idBase);\r\n      let editPageComponent;\r\n\r\n      component.init = (optionsParam) => {\r\n         var settings = {};\r\n         var options = optionsParam || {};\r\n         if (form) settings = form.settings;\r\n\r\n         addPageComponent.applicationLoad(this.application);\r\n         addPageComponent.init({\r\n            onSaveData: component.logic.callbackSaveData,\r\n            onCancelClick: component.logic.callbackCancel,\r\n            clearOnLoad: component.logic.callbackClearOnLoad,\r\n         });\r\n\r\n         editPageComponent = this.editPageTool.component(App, idBase);\r\n         editPageComponent.applicationLoad(this.application);\r\n         editPageComponent.init({\r\n            onSaveData: component.logic.callbackSaveData,\r\n            onCancelClick: component.logic.callbackCancel,\r\n            clearOnLoad: component.logic.callbackClearOnLoad,\r\n         });\r\n      };\r\n\r\n      component.logic = {\r\n         /**\r\n          * @function callbackSaveData\r\n          *\r\n          */\r\n         callbackSaveData: (saveData) => {\r\n            // find the selectivity component\r\n            var elem = $$(ids.component);\r\n            if (!elem) return;\r\n\r\n            field.once(\"option.data\", (data) => {\r\n               data.forEach((item) => {\r\n                  item.value = item.text;\r\n               });\r\n               $$(ids.component).getList().clearAll();\r\n               $$(ids.component).getList().define(\"data\", data);\r\n               if (field.settings.linkType == \"many\") {\r\n                  let currentVals = $$(ids.component).getValue();\r\n                  if (currentVals.indexOf(saveData.id) == -1) {\r\n                     $$(ids.component).setValue(\r\n                        currentVals\r\n                           ? currentVals + \",\" + saveData.id\r\n                           : saveData.id\r\n                     );\r\n                  }\r\n               } else {\r\n                  $$(ids.component).setValue(saveData.id);\r\n               }\r\n               // close the popup when we are finished\r\n               $$(ids.popup)?.close();\r\n               $$(ids.editpopup)?.close();\r\n            });\r\n\r\n            field\r\n               .getOptions(this.settings.objectWorkspace.filterConditions, \"\")\r\n               .then(function (data) {\r\n                  // we need new option that will be returned from server (above)\r\n                  // so we will not set this and then just reset it.\r\n               });\r\n         },\r\n\r\n         callbackCancel: () => {\r\n            $$(ids.popup).close();\r\n            return false;\r\n         },\r\n\r\n         callbackClearOnLoad: () => {\r\n            return true;\r\n         },\r\n\r\n         getValue: (rowData) => {\r\n            var elem = $$(ids.component);\r\n\r\n            return field.getValue(elem, rowData);\r\n         },\r\n\r\n         formBusy: ($form) => {\r\n            if (!$form) return;\r\n\r\n            if ($form.disable) $form.disable();\r\n\r\n            if ($form.showProgress) $form.showProgress({ type: \"icon\" });\r\n         },\r\n\r\n         formReady: ($form) => {\r\n            if (!$form) return;\r\n\r\n            if ($form.enable) $form.enable();\r\n\r\n            if ($form.hideProgress) $form.hideProgress();\r\n         },\r\n\r\n         goToEditPage: (rowId) => {\r\n            if (!this.settings.editForm) return;\r\n\r\n            let editForm = this.application.urlResolve(this.settings.editForm);\r\n            if (!editForm) return;\r\n\r\n            let $form;\r\n            let $elem = $$(ids.component);\r\n            if ($elem) {\r\n               $form = $elem.getFormView();\r\n            }\r\n\r\n            // Open the form popup\r\n            editPageComponent.onClick().then(() => {\r\n               let dc = editForm.datacollection;\r\n               if (dc) {\r\n                  dc.setCursor(rowId);\r\n\r\n                  if (!this.__editFormDcEvent) {\r\n                     this.__editFormDcEvent = dc.on(\"initializedData\", () => {\r\n                        dc.setCursor(rowId);\r\n                     });\r\n                  }\r\n               }\r\n            });\r\n         },\r\n      };\r\n\r\n      var multiselect = field.settings.linkType == \"many\";\r\n\r\n      component.ui.label = field.label;\r\n      component.ui.labelWidth = settings.labelWidth;\r\n      component.ui.id = ids.component;\r\n      component.ui.view = multiselect ? \"multicombo\" : \"combo\";\r\n      component.ui.on = {\r\n         onItemClick: (id, e) => {\r\n            if (\r\n               e.target.classList.contains(\"editConnectedPage\") &&\r\n               e.target.dataset.itemId\r\n            ) {\r\n               let rowId = e.target.dataset.itemId;\r\n               if (!rowId) return;\r\n               component.logic.goToEditPage(rowId);\r\n            }\r\n         },\r\n         onChange: (data) => {\r\n            let selectedValues;\r\n            if (Array.isArray(data)) {\r\n               selectedValues = [];\r\n               data.forEach((record) => {\r\n                  let recordObj = record;\r\n                  if (typeof record != \"object\") {\r\n                     // we need to convert either index or uuid to full data object\r\n                     recordObj = field.getItemFromVal(record);\r\n                  }\r\n                  if (recordObj && recordObj.id)\r\n                     selectedValues.push(recordObj.id);\r\n               });\r\n            } else {\r\n               selectedValues = data;\r\n               if (typeof data != \"object\") {\r\n                  // we need to convert either index or uuid to full data object\r\n                  selectedValues = field.getItemFromVal(data);\r\n               }\r\n               // selectedValues = field.pullRecordRelationValues(selectedValues);\r\n               if (selectedValues && selectedValues.id) {\r\n                  selectedValues = selectedValues.id;\r\n               } else {\r\n                  selectedValues = data;\r\n               }\r\n            }\r\n            // We can now set the new value but we need to block event listening\r\n            // so it doesn't trigger onChange again\r\n            const $$component = $$(ids.component);\r\n            if ($$component) {\r\n               $$component.blockEvent();\r\n               let prepedVals = selectedValues.join\r\n                  ? selectedValues.join()\r\n                  : selectedValues;\r\n               $$component.setValue(prepedVals);\r\n               $$component.unblockEvent();\r\n            }\r\n         },\r\n      };\r\n\r\n      component.ui.dataFieldId = field.id;\r\n\r\n      let editForm = \"\";\r\n      if (settings.editForm && settings.editForm != \"\") {\r\n         editForm =\r\n            '<i data-item-id=\"#id#\" class=\"fa fa-cog editConnectedPage\"></i>';\r\n      }\r\n      component.ui.suggest = {\r\n         button: true,\r\n         selectAll: multiselect ? true : false,\r\n         body: {\r\n            template: editForm + \"#value#\",\r\n         },\r\n         on: {\r\n            onShow: () => {\r\n               field.populateOptionsDataCy($$(ids.component), field, form);\r\n            },\r\n         },\r\n         // Support partial matches\r\n         filter: ({ value }, search) =>\r\n            value.toLowerCase().includes(search.toLowerCase()),\r\n      };\r\n\r\n      component.ui.onClick = {\r\n         customField: (id, e, trg) => {\r\n            if (this.settings.disable == 1) return;\r\n\r\n            var rowData = {};\r\n\r\n            if ($$(ids.component)) {\r\n               var node = $$(ids.component).$view;\r\n               field.customEdit(rowData, App, node);\r\n            }\r\n         },\r\n      };\r\n\r\n      if (addPageComponent.ui) {\r\n         // reset some component vals to make room for button\r\n         component.ui.label = \"\";\r\n         component.ui.labelWidth = 0;\r\n\r\n         // add click event to add new button\r\n         addPageComponent.ui.on = {\r\n            onItemClick: (id, evt) => {\r\n               let $form = $$(id).getFormView();\r\n\r\n               let dc = form.datacollection;\r\n\r\n               addPageComponent.onClick(dc);\r\n\r\n               return false;\r\n            },\r\n         };\r\n\r\n         component.ui = {\r\n            inputId: component.ui.id,\r\n            rows: [\r\n               {\r\n                  cols: [\r\n                     {\r\n                        view: \"label\",\r\n                        label: field.label,\r\n                        width: settings.labelWidth,\r\n                        align: \"left\",\r\n                     },\r\n                     addPageComponent.ui,\r\n                     component.ui,\r\n                  ],\r\n               },\r\n            ],\r\n         };\r\n      } else {\r\n         component.ui = {\r\n            inputId: component.ui.id,\r\n            rows: [component.ui],\r\n         };\r\n      }\r\n\r\n      component.onShow = () => {\r\n         _onShow(App, ids.component, this, component);\r\n         let elem = $$(ids.component);\r\n         if (!elem) return;\r\n\r\n         let node = elem.$view;\r\n\r\n         // Add data-cy attributes\r\n         const dataCy = `${field.key} ${field.columnName} ${field.id} ${this.parent.id}`;\r\n         node.setAttribute(\"data-cy\", dataCy);\r\n      };\r\n\r\n      return component;\r\n   }\r\n\r\n   get addPageTool() {\r\n      if (this.__addPageTool == null)\r\n         this.__addPageTool = new ABViewPropertyAddPage();\r\n\r\n      return this.__addPageTool;\r\n   }\r\n\r\n   get editPageTool() {\r\n      if (this.__editPageTool == null)\r\n         this.__editPageTool = new ABViewPropertyEditPage();\r\n\r\n      return this.__editPageTool;\r\n   }\r\n};\r\n","const ABViewFormCustomCore = require(\"../../core/views/ABViewFormCustomCore\");\r\n\r\nconst ABFieldImage = require(\"../dataFields/ABFieldImage\");\r\nconst DEFAULT_HEIGHT = 80;\r\n\r\nmodule.exports = class ABViewFormCustom extends ABViewFormCustomCore {\r\n   // constructor(values, application, parent, defaultValues) {\r\n   //    super(values, application, parent, defaultValues);\r\n   // }\r\n\r\n   //\r\n   //\tEditor Related\r\n   //\r\n\r\n   /**\r\n    * @method editorComponent\r\n    * return the Editor for this UI component.\r\n    * the editor should display either a \"block\" view or \"preview\" of\r\n    * the current layout of the view.\r\n    * @param {string} mode what mode are we in ['block', 'preview']\r\n    * @return {Component}\r\n    */\r\n   editorComponent(App, mode) {\r\n      var idBase = \"ABViewFormCustomEditorComponent\";\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n      };\r\n\r\n      var templateElem = this.component(App).ui;\r\n      templateElem.id = ids.component;\r\n\r\n      var _ui = {\r\n         rows: [templateElem, {}],\r\n      };\r\n\r\n      var _init = (options) => {};\r\n\r\n      var _logic = {};\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: _init,\r\n         logic: _logic,\r\n      };\r\n   }\r\n\r\n   /**\r\n    * @method component()\r\n    * return a UI component based upon this view.\r\n    * @param {obj} App\r\n    * @return {obj} UI component\r\n    */\r\n   component(App) {\r\n      var component = super.component(App);\r\n      var field = this.field();\r\n      var form = this.parentFormComponent();\r\n\r\n      // this field may be deleted\r\n      if (!field) return component;\r\n\r\n      var idBase = this.parentFormUniqueID(`ABViewFormCustom_${this.id}_f_`);\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n      };\r\n\r\n      var settings = {};\r\n      if (form) settings = form.settings;\r\n\r\n      var requiredClass = \"\";\r\n      if (field.settings.required || this.settings.required) {\r\n         requiredClass = \"webix_required\";\r\n      }\r\n\r\n      var templateLabel = \"\";\r\n      if (settings.showLabel) {\r\n         if (settings.labelPosition == \"top\")\r\n            templateLabel =\r\n               '<label style=\"display:block; text-align: left; margin: 0; padding:1px 7.5px 0 3px; text-overflow:ellipsis; overflow:hidden; white-space:nowrap;\" class=\"webix_inp_top_label ' +\r\n               requiredClass +\r\n               '\">#label#</label>';\r\n         else\r\n            templateLabel =\r\n               '<label style=\"width: #width#px; display: inline-block; line-height: 32px; float: left; margin: 0; padding:1px 7.5px 0 3px; text-overflow:ellipsis; overflow:hidden; white-space:nowrap;\" class=\"' +\r\n               requiredClass +\r\n               '\">#label#</label>';\r\n      }\r\n\r\n      var newWidth = settings.labelWidth;\r\n      if (this.settings.formView) newWidth += 40;\r\n      else if (settings.showLabel == true && settings.labelPosition == \"top\")\r\n         newWidth = 0;\r\n\r\n      let height = 38;\r\n      if (field instanceof ABFieldImage) {\r\n         if (field.settings.useHeight) {\r\n            if (settings.labelPosition == \"top\") {\r\n               height = parseInt(field.settings.imageHeight) || DEFAULT_HEIGHT;\r\n               height += 38;\r\n            } else {\r\n               height = parseInt(field.settings.imageHeight) || DEFAULT_HEIGHT;\r\n            }\r\n         } else if (settings.labelPosition == \"top\") {\r\n            height = DEFAULT_HEIGHT + 38;\r\n         } else {\r\n            if (DEFAULT_HEIGHT > 38) {\r\n               height = DEFAULT_HEIGHT;\r\n            }\r\n         }\r\n      } else if (\r\n         settings.showLabel == true &&\r\n         settings.labelPosition == \"top\"\r\n      ) {\r\n         height = DEFAULT_HEIGHT;\r\n      }\r\n\r\n      let template = `<div class=\"customField ${settings.labelPosition}\">${templateLabel}#template#</div>`\r\n         .replace(/#width#/g, settings.labelWidth)\r\n         .replace(/#label#/g, field.label)\r\n         .replace(\r\n            /#template#/g,\r\n            field\r\n               .columnHeader({\r\n                  width: newWidth,\r\n                  height: height,\r\n                  editable: true,\r\n               })\r\n               .template({})\r\n         );\r\n\r\n      component.ui = {\r\n         id: ids.component,\r\n         view: \"forminput\",\r\n         labelWidth: 0,\r\n         paddingY: 0,\r\n         paddingX: 0,\r\n         css: \"ab-custom-field\",\r\n         name: component.ui.name,\r\n         // label:  field.label,\r\n         // labelPosition: settings.labelPosition, // webix.forminput does not have .labelPosition T T\r\n         // labelWidth: settings.labelWidth,\r\n         body: {\r\n            // id: ids.component,\r\n            view: App.custom.focusabletemplate.view,\r\n            css: \"customFieldCls\",\r\n            borderless: true,\r\n            template: template,\r\n            height: height,\r\n            onClick: {\r\n               customField: (evt, e, trg) => {\r\n                  if (this.settings.disable == 1) return;\r\n\r\n                  let rowData = {};\r\n\r\n                  let formView = this.parentFormComponent();\r\n                  if (formView) {\r\n                     let dv = formView.datacollection;\r\n                     if (dv) rowData = dv.getCursor() || {};\r\n                  }\r\n\r\n                  // var node = $$(ids.component).$view;\r\n                  let node = $$(trg).getParentView().$view;\r\n                  field.customEdit(rowData, App, node, ids.component, evt);\r\n               },\r\n            },\r\n         },\r\n      };\r\n\r\n      component.onShow = () => {\r\n         let elem = $$(ids.component);\r\n         if (!elem) return;\r\n\r\n         let rowData = {},\r\n            node = elem.$view;\r\n\r\n         // Add data-cy attributes\r\n         const dataCy = `${this.key} ${field.key} ${field.columnName} ${this.id} ${this.parent.id}`;\r\n         node.setAttribute('data-cy', dataCy);\r\n\r\n         let options = {\r\n            formId: ids.component,\r\n            editable: this.settings.disable == 1 ? false : true,\r\n         };\r\n\r\n         if (field instanceof ABFieldImage) {\r\n            options.height = field.settings.useHeight\r\n               ? parseInt(field.settings.imageHeight) || DEFAULT_HEIGHT\r\n               : DEFAULT_HEIGHT;\r\n            options.width = field.settings.useWidth\r\n               ? parseInt(field.settings.imageWidth) || newWidth\r\n               : newWidth;\r\n         }\r\n\r\n         field.customDisplay(rowData, App, node, options);\r\n      };\r\n\r\n      // make sure each of our child views get .init() called\r\n      component.init = (options) => {\r\n         // component.onShow();\r\n      };\r\n\r\n      component.logic = {\r\n         getValue: (rowData) => {\r\n            let elem = $$(ids.component);\r\n\r\n            return field.getValue(elem, rowData);\r\n         },\r\n      };\r\n\r\n      return component;\r\n   }\r\n};\r\n","const ABViewFormDatepickerCore = require(\"../../core/views/ABViewFormDatepickerCore\");\r\n\r\nmodule.exports = class ABViewFormDatepicker extends ABViewFormDatepickerCore {\r\n   // constructor(values, application, parent, defaultValues) {\r\n   //    super(values, application, parent, defaultValues);\r\n   // }\r\n\r\n   //\r\n   //\tEditor Related\r\n   //\r\n\r\n   /**\r\n    * @method editorComponent\r\n    * return the Editor for this UI component.\r\n    * the editor should display either a \"block\" view or \"preview\" of\r\n    * the current layout of the view.\r\n    * @param {string} mode what mode are we in ['block', 'preview']\r\n    * @return {Component}\r\n    */\r\n   editorComponent(App, mode) {\r\n      var idBase = \"ABViewFormDatepickerEditorComponent\";\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n      };\r\n\r\n      var datepickerElem = this.component(App).ui;\r\n      datepickerElem.id = ids.component;\r\n\r\n      var _ui = {\r\n         rows: [datepickerElem, {}],\r\n      };\r\n\r\n      var _init = (options) => {};\r\n\r\n      var _logic = {};\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: _init,\r\n         logic: _logic,\r\n      };\r\n   }\r\n\r\n   /**\r\n    * @method component()\r\n    * return a UI component based upon this view.\r\n    * @param {obj} App\r\n    * @return {obj} UI component\r\n    */\r\n   component(App) {\r\n      var component = super.component(App);\r\n      var field = this.field();\r\n\r\n      var idBase = this.parentFormUniqueID(\r\n         `ABViewFormDatepicker_${this.id}_f_`\r\n      );\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n      };\r\n\r\n      component.ui.id = ids.component;\r\n      component.ui.view = \"datepicker\";\r\n      if (!field) return component;\r\n\r\n      // Ignore date - Only time picker\r\n      if (field.settings.dateFormat == 1) {\r\n         component.ui.type = \"time\";\r\n      }\r\n\r\n      // Date & Time picker\r\n      if (\r\n         field.key == \"datetime\" &&\r\n         field.settings &&\r\n         field.settings.timeFormat &&\r\n         field.settings.timeFormat != 1\r\n      ) {\r\n         component.ui.timepicker = true;\r\n      }\r\n\r\n      // allows entering characters in datepicker input, false by default\r\n      component.ui.editable = true;\r\n\r\n      // default value\r\n      if (component.ui.value && !(component.ui.value instanceof Date)) {\r\n         component.ui.value = new Date(component.ui.value);\r\n      }\r\n\r\n      // if we have webix locale set, will use the date format form there.\r\n      if (field != null && !window.webixLocale) {\r\n         component.ui.format = field.getFormat();\r\n      }\r\n\r\n      // make sure each of our child views get .init() called\r\n      component.init = (options) => {};\r\n\r\n      return component;\r\n   }\r\n};\r\n","const ABViewFormNumberCore = require(\"../../core/views/ABViewFormNumberCore\");\r\n\r\nconst ABViewFormNumberPropertyComponentDefaults = ABViewFormNumberCore.defaultValues();\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABViewFormNumber extends ABViewFormNumberCore {\r\n   // constructor(values, application, parent, defaultValues) {\r\n   //    super(values, application, parent, defaultValues);\r\n   // }\r\n\r\n   //\r\n   //\tEditor Related\r\n   //\r\n\r\n   /**\r\n    * @method editorComponent\r\n    * return the Editor for this UI component.\r\n    * the editor should display either a \"block\" view or \"preview\" of\r\n    * the current layout of the view.\r\n    * @param {string} mode what mode are we in ['block', 'preview']\r\n    * @return {Component}\r\n    */\r\n   editorComponent(App, mode) {\r\n      var idBase = \"ABViewFormNumberEditorComponent\";\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n      };\r\n\r\n      var numberElem = this.component(App).ui;\r\n      numberElem.id = ids.component;\r\n\r\n      var _ui = {\r\n         type: \"space\",\r\n         rows: [numberElem, {}],\r\n      };\r\n\r\n      var _init = (options) => {};\r\n\r\n      var _logic = {};\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: _init,\r\n         logic: _logic,\r\n      };\r\n   }\r\n\r\n   //\r\n   // Property Editor\r\n   //\r\n\r\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\r\n      var commonUI = super.propertyEditorDefaultElements(\r\n         App,\r\n         ids,\r\n         _logic,\r\n         ObjectDefaults\r\n      );\r\n\r\n      // in addition to the common .label  values, we\r\n      // ask for:\r\n      return commonUI.concat([\r\n         {\r\n            name: \"isStepper\",\r\n            view: \"checkbox\",\r\n            labelWidth: this.AB.UISettings.config().labelWidthCheckbox,\r\n            labelRight: L(\"Plus/Minus Buttons\"),\r\n         },\r\n      ]);\r\n   }\r\n\r\n   static propertyEditorPopulate(App, ids, view) {\r\n      super.propertyEditorPopulate(App, ids, view);\r\n\r\n      $$(ids.isStepper).setValue(\r\n         view.settings.isStepper != null\r\n            ? view.settings.isStepper\r\n            : ABViewFormNumberPropertyComponentDefaults.isStepper\r\n      );\r\n   }\r\n\r\n   static propertyEditorValues(ids, view) {\r\n      super.propertyEditorValues(ids, view);\r\n\r\n      view.settings.isStepper = $$(ids.isStepper).getValue();\r\n   }\r\n\r\n   /**\r\n    * @method component()\r\n    * return a UI component based upon this view.\r\n    * @param {obj} App\r\n    * @return {obj} UI component\r\n    */\r\n   component(App) {\r\n      var component = super.component(App);\r\n      var field = this.field();\r\n\r\n      var idBase = this.parentFormUniqueID(`ABViewFormNumber_${this.id}_f_`);\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n      };\r\n\r\n      var viewType = this.settings.isStepper\r\n         ? \"counter\"\r\n         : App.custom.numbertext.view;\r\n\r\n      component.ui.id = ids.component;\r\n      component.ui.view = viewType;\r\n      component.ui.type = \"number\";\r\n      component.ui.validate = (val) => {\r\n         return !isNaN(val * 1);\r\n      };\r\n\r\n      // make sure each of our child views get .init() called\r\n      component.init = (options) => {};\r\n\r\n      return component;\r\n   }\r\n};\r\n","const ABViewFormReadonlyCore = require(\"../../core/views/ABViewFormReadonlyCore\");\r\n\r\nmodule.exports = class ABViewFormReadonly extends ABViewFormReadonlyCore {\r\n   // constructor(values, application, parent, defaultValues) {\r\n   //    super(values, application, parent, defaultValues);\r\n   // }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   //\r\n   //\tEditor Related\r\n   //\r\n\r\n   /**\r\n    * @method editorComponent\r\n    * return the Editor for this UI component.\r\n    * the editor should display either a \"block\" view or \"preview\" of\r\n    * the current layout of the view.\r\n    * @param {string} mode what mode are we in ['block', 'preview']\r\n    * @return {Component}\r\n    */\r\n   editorComponent(App, mode) {\r\n      var idBase = \"ABViewFormReadonlyEditorComponent\";\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n      };\r\n\r\n      var templateElem = this.component(App).ui;\r\n      templateElem.id = ids.component;\r\n\r\n      var _ui = {\r\n         rows: [templateElem, {}],\r\n      };\r\n\r\n      var _init = (options) => {};\r\n\r\n      var _logic = {};\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: _init,\r\n         logic: _logic,\r\n      };\r\n   }\r\n\r\n   /**\r\n    * @method component()\r\n    * return a UI component based upon this view.\r\n    * @param {obj} App\r\n    * @return {obj} UI component\r\n    */\r\n   component(App) {\r\n      var component = super.component(App);\r\n      var field = this.field();\r\n      var form = this.parentFormComponent();\r\n\r\n      // this field may be deleted\r\n      if (!field) return component;\r\n\r\n      var idBase = this.parentFormUniqueID(\"ABViewFormReadonly_\" + this.id);\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n         template: App.unique(`${idBase}template`),\r\n      };\r\n\r\n      component.ui = {\r\n         id: ids.component,\r\n         view: \"forminput\",\r\n         labelWidth: 0,\r\n         paddingY: 0,\r\n         paddingX: 0,\r\n         readonly: true,\r\n         css: \"ab-readonly-field\",\r\n         // name: component.ui.name,\r\n         // label:  field.label,\r\n         // labelPosition: settings.labelPosition, // webix.forminput does not have .labelPosition T T\r\n         // labelWidth: settings.labelWidth,\r\n         body: {\r\n            id: ids.template,\r\n            view: \"label\",\r\n            borderless: true,\r\n            css: { \"background-color\": \"#fff\" },\r\n            label: \"\",\r\n         },\r\n      };\r\n\r\n      let settings = {};\r\n      if (form) settings = form.settings;\r\n\r\n      if (settings.showLabel == true && settings.labelPosition == \"top\") {\r\n         component.ui.body.height = 80;\r\n      } else if (field.settings.useHeight) {\r\n         component.ui.body.height = parseInt(field.settings.imageHeight) || 38;\r\n      } else {\r\n         component.ui.body.height = 38;\r\n      }\r\n\r\n      // make sure each of our child views get .init() called\r\n      component.init = (options) => {\r\n         let $elem = $$(ids.component);\r\n         if (!$elem) return;\r\n\r\n         let $form = $elem.getFormView();\r\n         if (!$form) return;\r\n\r\n         let rowData = $form.getValues();\r\n         component.logic.refresh(rowData);\r\n\r\n         $form.attachEvent(\"onChange\", function (newv, oldv) {\r\n            let rowData = $form.getValues();\r\n            component.logic.refresh(rowData);\r\n         });\r\n      };\r\n\r\n      component.onShow = () => {\r\n         var $elem = $$(ids.component);\r\n         if (!$elem) return;\r\n\r\n         let $form = $elem.getFormView();\r\n         if (!$form) return;\r\n\r\n         let rowData = $form.getValues();\r\n         component.logic.refresh(rowData);\r\n      };\r\n\r\n      component.logic = {\r\n         getValue: (rowData) => {\r\n            let field = this.field();\r\n            if (!field) return null;\r\n            return rowData[field.columnName];\r\n         },\r\n\r\n         refresh: (rowData) => {\r\n            let field = this.field(),\r\n               form = this.parentFormComponent();\r\n\r\n            let settings = {};\r\n            if (form) settings = form.settings;\r\n\r\n            let templateLabel = \"\";\r\n            if (settings.showLabel == true) {\r\n               if (settings.labelPosition == \"top\")\r\n                  templateLabel = `<label style=\"display:block; text-align: left; margin: 0; padding:1px 7.5px 0 3px; text-overflow:ellipsis; overflow:hidden; white-space:nowrap;\" class=\"webix_inp_top_label\">${field.label}</label>`;\r\n               else\r\n                  templateLabel = `<label style=\"width: ${settings.labelWidth}px; display: inline-block; line-height: 32px; float: left; margin: 0; padding:1px 7.5px 0 3px; text-overflow:ellipsis; overflow:hidden; white-space:nowrap;\">${field.label}</label>`;\r\n            }\r\n\r\n            let newWidth = settings.labelWidth;\r\n            if (this.settings.formView) newWidth += 40;\r\n            else if (\r\n               settings.showLabel == true &&\r\n               settings.labelPosition == \"top\"\r\n            )\r\n               newWidth = 0;\r\n\r\n            let template = `<div class=\"readonlyField\">${templateLabel}#template#</div>`.replace(\r\n               /#template#/g,\r\n               field\r\n                  .columnHeader({\r\n                     width: newWidth,\r\n                     editable: true,\r\n                  })\r\n                  .template(rowData)\r\n            );\r\n\r\n            // Re-build template element\r\n            if ($$(ids.template)) {\r\n               $$(ids.template).setHTML(template);\r\n            }\r\n         },\r\n      };\r\n\r\n      return component;\r\n   }\r\n};\r\n","const ABViewFormSelectMultipleCore = require(\"../../core/views/ABViewFormSelectMultipleCore\");\r\n\r\nconst ABViewFormSelectMultiplePropertyComponentDefaults = ABViewFormSelectMultipleCore.defaultValues();\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABViewFormSelectMultiple extends (\r\n   ABViewFormSelectMultipleCore\r\n) {\r\n   // constructor(values, application, parent, defaultValues) {\r\n   //    super(values, application, parent, defaultValues);\r\n   // }\r\n\r\n   //\r\n   //\tEditor Related\r\n   //\r\n\r\n   /**\r\n    * @method editorComponent\r\n    * return the Editor for this UI component.\r\n    * the editor should display either a \"block\" view or \"preview\" of\r\n    * the current layout of the view.\r\n    * @param {string} mode what mode are we in ['block', 'preview']\r\n    * @return {Component}\r\n    */\r\n   editorComponent(App, mode) {\r\n      var idBase = \"ABViewFormSelectMultipleEditorComponent\";\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n         options: App.unique(`${idBase}_option`),\r\n      };\r\n\r\n      var selectlist = this.component(App).ui;\r\n      selectlist.id = ids.component;\r\n\r\n      var _ui = {\r\n         rows: [selectlist, {}],\r\n      };\r\n\r\n      var _init = (options) => {};\r\n\r\n      var _logic = {};\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: _init,\r\n         logic: _logic,\r\n      };\r\n   }\r\n\r\n   //\r\n   // Property Editor\r\n   //\r\n\r\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\r\n      var commonUI = super.propertyEditorDefaultElements(\r\n         App,\r\n         ids,\r\n         _logic,\r\n         ObjectDefaults\r\n      );\r\n\r\n      // in addition to the common .label  values, we\r\n      // ask for:\r\n      return commonUI.concat([\r\n         {\r\n            name: \"type\",\r\n            view: \"richselect\",\r\n            label: L(\"Type\"),\r\n            options: [\r\n               {\r\n                  id: \"multicombo\",\r\n                  value: L(\"Multi Combo\"),\r\n               },\r\n\r\n               {\r\n                  id: \"checkbox\",\r\n                  value: L(\"Checkboxes\"),\r\n               },\r\n            ],\r\n         },\r\n      ]);\r\n   }\r\n\r\n   static propertyEditorPopulate(App, ids, view) {\r\n      super.propertyEditorPopulate(App, ids, view);\r\n\r\n      $$(ids.type).setValue(\r\n         view.settings.type ||\r\n            ABViewFormSelectMultiplePropertyComponentDefaults.type\r\n      );\r\n   }\r\n\r\n   static propertyEditorValues(ids, view) {\r\n      super.propertyEditorValues(ids, view);\r\n\r\n      view.settings.type = $$(ids.type).getValue();\r\n   }\r\n\r\n   /*\r\n    * @component()\r\n    * return a UI component based upon this view.\r\n    * @param {obj} App\r\n    * @return {obj} UI component\r\n    */\r\n   component(App) {\r\n      var component = super.component(App);\r\n      var field = this.field();\r\n\r\n      var idBase = this.parentFormUniqueID(\r\n         `ABViewFormSelectMultiple_${this.id}_f_`\r\n      );\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n      };\r\n\r\n      component.ui.view =\r\n         this.settings.type ||\r\n         ABViewFormSelectMultiplePropertyComponentDefaults.type;\r\n\r\n      var options = [];\r\n\r\n      if (field && field.key == \"user\") options = field.getUsers();\r\n      else if (field)\r\n         options = field.settings.options || this.settings.options || [];\r\n\r\n      component.ui.id = ids.component;\r\n      component.ui.options = options.map((opt) => {\r\n         return {\r\n            id: opt.id,\r\n            value: opt.text,\r\n            hex: opt.hex,\r\n         };\r\n      });\r\n\r\n      if (component.ui.view == \"multicombo\") {\r\n         component.ui.tagMode = false;\r\n         component.ui.css = \"hideWebixMulticomboTag\";\r\n         component.ui.tagTemplate = function (values) {\r\n            let selectedOptions = [];\r\n            values.forEach((val) => {\r\n               selectedOptions.push($$(ids.component).getList().getItem(val));\r\n            });\r\n            let vals = selectedOptions;\r\n            if (field.getSelectedOptions) {\r\n               vals = field.getSelectedOptions(field, selectedOptions);\r\n            }\r\n\r\n            var items = [];\r\n            vals.forEach((val) => {\r\n               var hasCustomColor = \"\";\r\n               var optionHex = \"\";\r\n               if (field.settings.hasColors && val.hex) {\r\n                  hasCustomColor = \"hascustomcolor\";\r\n                  optionHex = `background: ${val.hex};`;\r\n               }\r\n               let text = val.text ? val.text : val.value;\r\n               items.push(\r\n                  `<span class=\"webix_multicombo_value ${hasCustomColor}\" style=\"${optionHex}\" optvalue=\"${val.id}\"><span>${text}</span><span class=\"webix_multicombo_delete\" role=\"button\" aria-label=\"Remove item\"></span></span>`\r\n               );\r\n            });\r\n            return items.join(\"\");\r\n         };\r\n      }\r\n\r\n      // radio element could not be empty options\r\n      if (component.ui.view == \"checkbox\") {\r\n         component.ui.options.push({\r\n            id: \"temp\",\r\n            value: L(\"Option\"),\r\n         });\r\n      }\r\n\r\n      // make sure each of our child views get .init() called\r\n      component.init = (options) => {};\r\n\r\n      component.logic = {\r\n         getValue: (rowData) => {\r\n            var elem = $$(ids.component);\r\n\r\n            return field.getValue(elem, rowData);\r\n         },\r\n      };\r\n\r\n      return component;\r\n   }\r\n};\r\n","const ABViewFormSelectSingleCore = require(\"../../core/views/ABViewFormSelectSingleCore\");\r\n\r\nconst ABViewFormSelectSinglePropertyComponentDefaults = ABViewFormSelectSingleCore.defaultValues();\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABViewFormSelectSingle extends (\r\n   ABViewFormSelectSingleCore\r\n) {\r\n   // constructor(values, application, parent, defaultValues) {\r\n   //    super(values, application, parent, defaultValues);\r\n   // }\r\n\r\n   //\r\n   //\tEditor Related\r\n   //\r\n\r\n   /**\r\n    * @method editorComponent\r\n    * return the Editor for this UI component.\r\n    * the editor should display either a \"block\" view or \"preview\" of\r\n    * the current layout of the view.\r\n    * @param {string} mode what mode are we in ['block', 'preview']\r\n    * @return {Component}\r\n    */\r\n   editorComponent(App, mode) {\r\n      var idBase = \"ABViewFormSelectSingleEditorComponent\";\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n         options: App.unique(`${idBase}_option`),\r\n      };\r\n\r\n      var selectlist = this.component(App).ui;\r\n      selectlist.id = ids.component;\r\n\r\n      var _ui = {\r\n         rows: [selectlist, {}],\r\n      };\r\n\r\n      var _init = (options) => {};\r\n\r\n      var _logic = {};\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: _init,\r\n         logic: _logic,\r\n      };\r\n   }\r\n\r\n   //\r\n   // Property Editor\r\n   //\r\n\r\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\r\n      var commonUI = super.propertyEditorDefaultElements(\r\n         App,\r\n         ids,\r\n         _logic,\r\n         ObjectDefaults\r\n      );\r\n\r\n      // in addition to the common .label  values, we\r\n      // ask for:\r\n      return commonUI.concat([\r\n         {\r\n            name: \"type\",\r\n            view: \"richselect\",\r\n            label: L(\"Type\"),\r\n            options: [\r\n               {\r\n                  id: \"richselect\",\r\n                  value: L(\"Select list\"),\r\n               },\r\n               {\r\n                  id: \"radio\",\r\n                  value: L(\"Radio\"),\r\n               },\r\n            ],\r\n         },\r\n      ]);\r\n   }\r\n\r\n   static propertyEditorPopulate(App, ids, view) {\r\n      super.propertyEditorPopulate(App, ids, view);\r\n\r\n      $$(ids.type).setValue(\r\n         view.settings.type ||\r\n            ABViewFormSelectSinglePropertyComponentDefaults.type\r\n      );\r\n   }\r\n\r\n   static propertyEditorValues(ids, view) {\r\n      super.propertyEditorValues(ids, view);\r\n\r\n      view.settings.type = $$(ids.type).getValue();\r\n   }\r\n\r\n   /*\r\n    * @component()\r\n    * return a UI component based upon this view.\r\n    * @param {obj} App\r\n    * @return {obj} UI component\r\n    */\r\n   component(App) {\r\n      var component = super.component(App);\r\n      var field = this.field();\r\n\r\n      var idBase = this.parentFormUniqueID(\r\n         `ABViewFormSelectSingle_${this.id}_f_`\r\n      );\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n      };\r\n\r\n      component.ui.view =\r\n         this.settings.type ||\r\n         ABViewFormSelectSinglePropertyComponentDefaults.type;\r\n\r\n      var options = [];\r\n\r\n      if (field && field.key == \"user\") options = field.getUsers();\r\n      else if (field)\r\n         options = field.settings.options || this.settings.options || [];\r\n      else options = this.settings.options || [];\r\n\r\n      component.ui.id = ids.component;\r\n\r\n    if (field?.settings.hasColors) {\r\n         component.ui.css = \"combowithcolors\";\r\n         component.ui.options = {\r\n            view: \"suggest\",\r\n            body: {\r\n               view: \"list\",\r\n               data: options.map((opt) => {\r\n                  return {\r\n                     id: opt.id,\r\n                     value: opt.text || opt.value,\r\n                     hex: field.settings.hasColors ? opt.hex : \"\",\r\n                  };\r\n               }),\r\n               template: function (value) {\r\n                  var items = [];\r\n                  var hasCustomColor = \"\";\r\n                  var optionHex = \"\";\r\n                  if (value.hex) {\r\n                     hasCustomColor = \"hascustomcolor\";\r\n                     optionHex = `background: ${value.hex};`;\r\n                  }\r\n                  items.push(\r\n                     `<span class=\"webix_multicombo_value ${hasCustomColor}\" style=\"${optionHex}\" optvalue=\"${value.id}\"><span>${value.value}</span></span>`\r\n                  );\r\n                  return items.join(\"\");\r\n               },\r\n            },\r\n         };\r\n      } else {\r\n         component.ui.options = options.map((opt) => {\r\n            return {\r\n               id: opt.id,\r\n               value: opt.text || opt.value,\r\n            };\r\n         });\r\n      }\r\n\r\n      // radio element could not be empty options\r\n      if (component.ui.view == \"radio\" && component.ui.options.length < 1) {\r\n         component.ui.options.push({\r\n            id: \"temp\",\r\n            value: L(\"Option\"),\r\n         });\r\n      }\r\n\r\n      // component.ui = {\r\n      //    rows: [component.ui],\r\n      // };\r\n\r\n      // make sure each of our child views get .init() called\r\n      component.init = (options) => {};\r\n\r\n      return component;\r\n   }\r\n};\r\n","const ABViewFormTextboxCore = require(\"../../core/views/ABViewFormTextboxCore\");\r\n\r\nconst ABViewFormTextboxPropertyComponentDefaults = ABViewFormTextboxCore.defaultValues();\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABViewFormTextbox extends ABViewFormTextboxCore {\r\n   // constructor(values, application, parent, defaultValues) {\r\n   //    super(values, application, parent, defaultValues);\r\n   // }\r\n\r\n   //\r\n   //\tEditor Related\r\n   //\r\n\r\n   /**\r\n    * @method editorComponent\r\n    * return the Editor for this UI component.\r\n    * the editor should display either a \"block\" view or \"preview\" of\r\n    * the current layout of the view.\r\n    * @param {string} mode what mode are we in ['block', 'preview']\r\n    * @return {Component}\r\n    */\r\n   editorComponent(App, mode) {\r\n      var idBase = \"ABViewFormTextboxEditorComponent\";\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n      };\r\n      var textView = this.component(App);\r\n\r\n      var textUi = textView.ui;\r\n      textUi.id = ids.component;\r\n\r\n      var _ui = {\r\n         rows: [textUi, {}],\r\n      };\r\n\r\n      var _init = (options) => {\r\n         textView.init(options);\r\n      };\r\n\r\n      var _logic = {};\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: _init,\r\n         logic: _logic,\r\n      };\r\n   }\r\n\r\n   //\r\n   // Property Editor\r\n   //\r\n\r\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\r\n      var commonUI = super.propertyEditorDefaultElements(\r\n         App,\r\n         ids,\r\n         _logic,\r\n         ObjectDefaults\r\n      );\r\n\r\n      // in addition to the common .label  values, we\r\n      // ask for:\r\n      return commonUI.concat([\r\n         {\r\n            name: \"type\",\r\n            view: \"radio\",\r\n            label: L(\"Type\"),\r\n            vertical: true,\r\n            options: [\r\n               {\r\n                  id: \"single\",\r\n                  value: L(\"Single line\"),\r\n               },\r\n               {\r\n                  id: \"multiple\",\r\n                  value: L(\"Multiple lines\"),\r\n               },\r\n               {\r\n                  id: \"rich\",\r\n                  value: L(\"Rich editor\"),\r\n               },\r\n            ],\r\n         },\r\n      ]);\r\n   }\r\n\r\n   static propertyEditorPopulate(App, ids, view) {\r\n      super.propertyEditorPopulate(App, ids, view);\r\n\r\n      $$(ids.type).setValue(\r\n         view.settings.type || ABViewFormTextboxPropertyComponentDefaults.type\r\n      );\r\n   }\r\n\r\n   static propertyEditorValues(ids, view) {\r\n      super.propertyEditorValues(ids, view);\r\n\r\n      view.settings.type = $$(ids.type).getValue();\r\n   }\r\n\r\n   /*\r\n    * @component()\r\n    * return a UI component based upon this view.\r\n    * @param {obj} App\r\n    * @return {obj} UI component\r\n    */\r\n   component(App) {\r\n      var component = super.component(App);\r\n\r\n      var idBase = this.parentFormUniqueID(`ABViewFormTextbox_${this.id}_f_`);\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n      };\r\n\r\n      component.ui.id = ids.component;\r\n\r\n      switch (\r\n         this.settings.type ||\r\n         ABViewFormTextboxPropertyComponentDefaults.type\r\n      ) {\r\n         case \"single\":\r\n            component.ui.view = \"text\";\r\n            break;\r\n         case \"multiple\":\r\n            component.ui.view = \"textarea\";\r\n            component.ui.height = 200;\r\n            break;\r\n         case \"rich\":\r\n            component.ui.view = \"forminput\";\r\n            component.ui.height = 200;\r\n            component.ui.css = \"ab-rich-text\";\r\n            component.ui.body = {\r\n               view: \"tinymce-editor\",\r\n               value: \"\",\r\n               cdn: \"/js/webix/extras/tinymce\",\r\n               config: {\r\n                  plugins: \"link\",\r\n                  menubar: \"format edit\",\r\n                  toolbar:\r\n                     \"undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | fontsizeselect | link\",\r\n               },\r\n            };\r\n            break;\r\n      }\r\n\r\n      component.onShow = () => {\r\n         // WORKAROUND : to fix breaks TinyMCE when switch pages/tabs\r\n         // https://forum.webix.com/discussion/6772/switching-tabs-breaks-tinymce\r\n         if (\r\n            this.settings.type &&\r\n            this.settings.type == \"rich\" &&\r\n            $$(component.ui.id)\r\n         ) {\r\n            // recreate rich editor\r\n            webix.ui(component.ui, $$(component.ui.id));\r\n            // Add dataCy to TinyMCE text editor\r\n            $$(component.ui.id).getChildViews()[0].getEditor(true).then((editor) => {\r\n               const dataCy = `${this.key} rich ${component.ui.name} ${this.id} ${this.parent.id}`;\r\n               editor.contentAreaContainer.setAttribute('data-cy', dataCy);\r\n            });\r\n         }\r\n      };\r\n\r\n      return webix.copy(component);\r\n   }\r\n};\r\n","const ABViewFormTreeCore = require(\"../../core/views/ABViewFormTreeCore\");\r\n\r\nmodule.exports = class ABViewFormTree extends ABViewFormTreeCore {\r\n   // constructor(values, application, parent, defaultValues) {\r\n   //    super(values, application, parent, defaultValues);\r\n   // }\r\n\r\n   //\r\n   //\tEditor Related\r\n   //\r\n\r\n   /**\r\n    * @method editorComponent\r\n    * return the Editor for this UI component.\r\n    * the editor should display either a \"block\" view or \"preview\" of\r\n    * the current layout of the view.\r\n    * @param {string} mode what mode are we in ['block', 'preview']\r\n    * @return {Component}\r\n    */\r\n   editorComponent(App, mode) {\r\n      var idBase = \"ABViewFormTreeEditorComponent\";\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n         options: App.unique(`${idBase}_option`),\r\n      };\r\n\r\n      var selectlist = this.component(App).ui;\r\n      selectlist.id = ids.component;\r\n\r\n      var _ui = {\r\n         rows: [selectlist, {}],\r\n      };\r\n\r\n      var _init = (options) => {};\r\n\r\n      var _logic = {};\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: _init,\r\n         logic: _logic,\r\n      };\r\n   }\r\n\r\n   //\r\n   // Property Editor\r\n   //\r\n\r\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\r\n      var commonUI = super.propertyEditorDefaultElements(\r\n         App,\r\n         ids,\r\n         _logic,\r\n         ObjectDefaults\r\n      );\r\n      // var L = App.Label;\r\n\r\n      // in addition to the common .label  values, we\r\n      // ask for:\r\n      return commonUI.concat([\r\n         // {\r\n         // \tname: 'type',\r\n         // \tview: 'richselect',\r\n         // \tlabel: L('ab.component.selectsingle.type', '*Type'),\r\n         // \toptions: [\r\n         // \t\t{\r\n         // \t\t\tid: 'richselect',\r\n         // \t\t\tvalue: L('ab.component.selectsingle.selectlist', '*Select list')\r\n         // \t\t},\r\n         // \t\t{\r\n         // \t\t\tid: 'radio',\r\n         // \t\t\tvalue: L('ab.component.selectsingle.radio', '*Radio')\r\n         // \t\t}\r\n         // \t]\r\n         // }\r\n      ]);\r\n   }\r\n\r\n   static propertyEditorPopulate(App, ids, view) {\r\n      super.propertyEditorPopulate(App, ids, view);\r\n\r\n      // $$(ids.type).setValue(view.settings.type || ABViewFormTreePropertyComponentDefaults.type);\r\n   }\r\n\r\n   static propertyEditorValues(ids, view) {\r\n      super.propertyEditorValues(ids, view);\r\n\r\n      // view.settings.type = $$(ids.type).getValue();\r\n   }\r\n\r\n   /**\r\n    * @method component()\r\n    * return a UI component based upon this view.\r\n    * @param {obj} App\r\n    * @return {obj} UI component\r\n    */\r\n   component(App) {\r\n      var component = super.component(App);\r\n      var field = this.field();\r\n      var form = this.parentFormComponent();\r\n\r\n      // this field may be deleted\r\n      if (!field) return component;\r\n\r\n      var idBase = this.parentFormUniqueID(`ABViewFormTree_${this.id}_f_`);\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n      };\r\n\r\n      var settings = {};\r\n      if (form) settings = form.settings;\r\n\r\n      var requiredClass = \"\";\r\n      if (field.settings.required == 1) {\r\n         requiredClass = \"webix_required\";\r\n      }\r\n\r\n      var templateLabel = \"\";\r\n      if (settings.showLabel == true) {\r\n         if (settings.labelPosition == \"top\")\r\n            templateLabel =\r\n               '<label style=\"display:block; text-align: left; margin: 0; padding:1px 7.5px 0 3px; text-overflow:ellipsis; overflow:hidden; white-space:nowrap;\" class=\"webix_inp_top_label ' +\r\n               requiredClass +\r\n               '\">#label#</label>';\r\n         else\r\n            templateLabel =\r\n               '<label style=\"width: #width#px; display: inline-block; line-height: 32px; float: left; margin: 0; padding:1px 7.5px 0 3px; text-overflow:ellipsis; overflow:hidden; white-space:nowrap;\" class=\"' +\r\n               requiredClass +\r\n               '\">#label#</label>';\r\n      }\r\n\r\n      var newWidth = settings.labelWidth;\r\n      if (typeof this.settings.formView != \"undefined\") newWidth += 40;\r\n\r\n      var template = (templateLabel + \"#template#\")\r\n         .replace(/#width#/g, settings.labelWidth)\r\n         .replace(/#label#/g, field.label)\r\n         .replace(\r\n            /#template#/g,\r\n            field.columnHeader({\r\n               width: newWidth,\r\n            }).template\r\n         );\r\n\r\n      component.ui.id = ids.component;\r\n      component.ui.view = \"template\";\r\n      component.ui.css = \"webix_el_box\";\r\n      if (\r\n         typeof field.settings.useHeight != \"undefined\" &&\r\n         field.settings.useHeight == 1\r\n      ) {\r\n         component.ui.height = parseInt(field.settings.imageHeight);\r\n      } else {\r\n         component.ui.height = 38;\r\n      }\r\n      component.ui.borderless = true;\r\n\r\n      component.ui.template = '<div class=\"customField\">' + template + \"</div>\";\r\n\r\n      component.ui.onClick = {\r\n         customField: function (id, e, trg) {\r\n            var rowData = {},\r\n               node = $$(ids.component).$view;\r\n\r\n            rowData[field.columnName] = component.logic.getValue();\r\n            field.customEdit(rowData, App, node, component);\r\n         },\r\n      };\r\n\r\n      component.onShow = () => {};\r\n\r\n      // make sure each of our child views get .init() called\r\n      component.init = (options) => {};\r\n\r\n      component.logic = {\r\n         getValue: () => {\r\n            var vals = $$(ids.component).getValues();\r\n            // Pass empty string if the returned values is empty array\r\n            if (Array.isArray(vals) && vals.length == 0) vals = \"\";\r\n            return vals;\r\n         },\r\n      };\r\n\r\n      return component;\r\n   }\r\n};\r\n","const ABViewGanttCore = require(\"../../core/views/ABViewGanttCore\");\r\nimport ABViewComponent from \"./ABViewComponent\";\r\n\r\nlet L = null;\r\n\r\nconst DAY_SCALE = { unit: \"day\", format: \"%d\" },\r\n   WEEK_SCALE = {\r\n      unit: \"week\",\r\n      format: (start) => {\r\n         const parser = webix.Date.dateToStr(\"%d %M\");\r\n         const wstart = webix.Date.weekStart(start);\r\n         const wend = webix.Date.add(\r\n            webix.Date.add(wstart, 1, \"week\", true),\r\n            -1,\r\n            \"day\",\r\n            true\r\n         );\r\n         return parser(wstart) + \" - \" + parser(wend);\r\n      },\r\n   },\r\n   MONTH_SCALE = { unit: \"month\", format: \"%F\" },\r\n   YEAR_SCALE = { unit: \"year\", format: \"%Y\" };\r\n\r\nclass ABViewGanttComponent extends ABViewComponent {\r\n   constructor(viewGantt, idBase) {\r\n      var base = idBase || `ABViewGantt_${viewGantt.id}`;\r\n\r\n      super(base, {\r\n         menu: \"\",\r\n         gantt: \"\",\r\n      });\r\n\r\n      this.viewGantt = viewGantt;\r\n      this.AB = viewGantt.AB;\r\n\r\n      this.settings = viewGantt.settings;\r\n\r\n      this._tempDC = null;\r\n      // {ABDataCollection}\r\n      // A link to a DC that was passed in.  NOTE: this is only for\r\n      // the temp DCs created in the AppBuilder Designer and passed\r\n      // in.  Normal DCs are handled by the default CurrentDatacollection\r\n      // methods.\r\n\r\n      this.TitleField = null;\r\n      this.StartDateField = null;\r\n      this.EndDateField = null;\r\n      this.DurationField = null;\r\n      this.ProgressField = null;\r\n      this.NotesField = null;\r\n\r\n      this.originalStartDate = null;\r\n      this.originalEndDate = null;\r\n\r\n      this.pendingAdds = {};\r\n      // {Promise}  /* id : {Promise} */\r\n      // In order to prevent a race condition where multiple adds can be\r\n      // generated on the same item, we catch the repeats and just return\r\n      // the same data for each.\r\n\r\n      this.ganttElement = {\r\n         isExistsTask: (taskId) => {\r\n            let localService = $$(this.ids.gantt).getService(\"local\");\r\n            if (!localService) return false;\r\n\r\n            let tasksData = localService.tasks();\r\n            if (!tasksData || !tasksData.exists) return false;\r\n\r\n            return tasksData.exists(taskId);\r\n         },\r\n         removeTask: (taskId) => {\r\n            if (!this.ganttElement.isExistsTask(taskId)) return;\r\n\r\n            let opsService = $$(this.ids.gantt).getService(\"operations\");\r\n            if (!opsService) return;\r\n\r\n            return opsService.removeTask(taskId);\r\n         },\r\n      };\r\n\r\n      if (!L) {\r\n         L = (...params) => {\r\n            return this.AB.Multilingual.label(...params);\r\n         };\r\n      }\r\n   }\r\n\r\n   ui() {\r\n      var ids = this.ids;\r\n      var _this = this;\r\n\r\n      return {\r\n         id: ids.component,\r\n         rows: [\r\n            {\r\n               cols: [\r\n                  { fillspace: true },\r\n                  {\r\n                     view: \"menu\",\r\n                     id: ids.menu,\r\n                     layout: \"x\",\r\n                     width: 300,\r\n                     data: [\r\n                        {\r\n                           id: \"day\",\r\n                           value: L(\"Day\"),\r\n                        },\r\n                        {\r\n                           id: \"week\",\r\n                           value: L(\"Week\"),\r\n                        },\r\n                        {\r\n                           id: \"month\",\r\n                           value: L(\"Month\"),\r\n                        },\r\n                        {\r\n                           id: \"year\",\r\n                           value: L(\"Year\"),\r\n                        },\r\n                     ],\r\n                     on: {\r\n                        onItemClick: (id /* , e, node */) => {\r\n                           this.setScale(id);\r\n                        },\r\n                     },\r\n                  },\r\n               ],\r\n            },\r\n            {\r\n               id: ids.gantt,\r\n               view: \"gantt\",\r\n               scales: [YEAR_SCALE, MONTH_SCALE, DAY_SCALE],\r\n               override: new Map([\r\n                  [\r\n                     gantt.services.Backend,\r\n                     // global webix gantt object\r\n                     class MyBackend extends gantt.services.Backend {\r\n                        async tasks() {\r\n                           var DC = _this.CurrentDatacollection;\r\n                           if (!DC) return [];\r\n\r\n                           // if (DC.dataStatus != DC.dataStatusFlag.initialized) {\r\n                           //    await DC.loadData().catch((err) => {\r\n                           //       console.error(err);\r\n                           //    });\r\n                           // }\r\n                           return (DC.getData() || []).map((d, indx) =>\r\n                              _this.convertFormat(d, indx)\r\n                           );\r\n                        }\r\n                        links() {\r\n                           return Promise.resolve([]);\r\n                        }\r\n                        async addTask(obj, index, parent) {\r\n                           if (!_this.pendingAdds[obj.id]) {\r\n                              _this.pendingAdds[obj.id] = _this.taskAdd(obj);\r\n                           }\r\n                           let newTask = await _this.pendingAdds[obj.id];\r\n                           delete _this.pendingAdds[obj.id];\r\n                           return {\r\n                              id: (newTask || {}).id,\r\n                           };\r\n                        }\r\n                        async updateTask(id, obj) {\r\n                           await _this.taskUpdate(obj.id, obj);\r\n                           return {};\r\n                        }\r\n                        async removeTask(id) {\r\n                           await _this.taskRemove(id);\r\n                           return {};\r\n                        }\r\n                     },\r\n                  ],\r\n               ]),\r\n            },\r\n         ],\r\n      };\r\n   }\r\n\r\n   async init(AB) {\r\n      this.AB = AB;\r\n\r\n      // #HACK!: as of webix v.8.1.1 there is a visual glitch of the Gantt\r\n      // object if you replace a gantt widget with a new definition (like in\r\n      // the ABDesigner you can switch from Gantt1 to Gantt2 in the object\r\n      // workspace).  In that one case, the menu would disappear even though\r\n      // the data is present.  So this makes sure the menu is shown\r\n      let $menu = $$(this.ids.menu);\r\n      if ($menu) {\r\n         $menu.showItem(\"day\");\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method CurrentDatacollection()\r\n    * A helper to return the current ABDataCollection we are working with.\r\n    * @return {ABDataCollection}\r\n    */\r\n   get CurrentDatacollection() {\r\n      let DC = super.CurrentDatacollection;\r\n      if (!DC) {\r\n         DC = this._tempDC;\r\n      }\r\n      return DC;\r\n   }\r\n\r\n   /**\r\n    * @method convertFormat()\r\n    * Convert an ABObject's row value into a gantt task data format.\r\n    * @param {obj} row\r\n    *        The current row of data returned from an ABObject.\r\n    * @param {int} index\r\n    *        The order of this task.\r\n    * @return {obj}\r\n    *         A key=>value hash corresponding to the gantt task that\r\n    *         represents this row of data.\r\n    */\r\n   convertFormat(row, index = null) {\r\n      let data = {};\r\n      row = row || {};\r\n\r\n      if (!this.StartDateField || (!this.EndDateField && !this.DurationField))\r\n         return data;\r\n\r\n      let currDate = new Date();\r\n      data[\"id\"] = row.id || row.uuid;\r\n      data[\"type\"] = \"task\";\r\n      data[\"parent\"] = 0;\r\n      data[\"open\"] = true;\r\n      // define label\r\n      data[\"text\"] = this.TitleField\r\n         ? row[this.TitleField.columnName] || \"\"\r\n         : this.CurrentObject.displayData(row);\r\n      data[\"start_date\"] = row[this.StartDateField.columnName] || currDate;\r\n      data[\"progress\"] = this.ProgressField\r\n         ? parseFloat(row[this.ProgressField.columnName] || 0)\r\n         : 0;\r\n\r\n      if (this.NotesField)\r\n         data[\"details\"] = row[this.NotesField.columnName] || \"\";\r\n\r\n      if (this.EndDateField)\r\n         data[\"end_date\"] = row[this.EndDateField.columnName] || currDate;\r\n\r\n      if (this.DurationField)\r\n         data[\"duration\"] = row[this.DurationField.columnName] || 1;\r\n\r\n      // Default values\r\n      if (!data[\"end_date\"] && !data[\"duration\"]) {\r\n         data[\"end_date\"] = currDate;\r\n         data[\"duration\"] = 1;\r\n      }\r\n\r\n      if (index != null) data[\"order\"] = index;\r\n\r\n      return data;\r\n   }\r\n\r\n   /**\r\n    * @method convertValues()\r\n    * Convert a Gantt task into a set of values for our ABObject.\r\n    * @param {obj} task\r\n    *        The current gantt task data.\r\n    * @return {obj}\r\n    *         A key=>value hash corresponding to the ABObject that\r\n    *         is tied to this gantt.\r\n    */\r\n   convertValues(task) {\r\n      let patch = {};\r\n\r\n      if (this.TitleField)\r\n         patch[this.TitleField.columnName] = task[\"text\"] || \"\";\r\n\r\n      if (this.StartDateField)\r\n         patch[this.StartDateField.columnName] = task[\"start_date\"];\r\n\r\n      if (this.ProgressField)\r\n         patch[this.ProgressField.columnName] = parseFloat(\r\n            task[\"progress\"] || 0\r\n         );\r\n\r\n      if (this.NotesField) patch[this.NotesField.columnName] = task[\"details\"];\r\n\r\n      if (this.EndDateField)\r\n         patch[this.EndDateField.columnName] = task[\"end_date\"];\r\n\r\n      if (this.DurationField)\r\n         patch[this.DurationField.columnName] = task[\"duration\"];\r\n\r\n      return patch;\r\n   }\r\n\r\n   /**\r\n    * @method objectLoad\r\n    * @param {ABObject} object\r\n    */\r\n   objectLoad(object) {\r\n      super.objectLoad(object);\r\n      if (object) {\r\n         this.TitleField = object.fieldByID(this.settings.titleFieldID);\r\n         this.StartDateField = object.fieldByID(this.settings.startDateFieldID);\r\n         this.EndDateField = object.fieldByID(this.settings.endDateFieldID);\r\n         this.DurationField = object.fieldByID(this.settings.durationFieldID);\r\n         this.ProgressField = object.fieldByID(this.settings.progressFieldID);\r\n         this.NotesField = object.fieldByID(this.settings.notesFieldID);\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method datacollectionLoad\r\n    * @param {ABDatacollection} datacollection\r\n    */\r\n   datacollectionLoad(datacollection) {\r\n      super.datacollectionLoad(datacollection);\r\n\r\n      let DC = this.CurrentDatacollection;\r\n      if (!DC && datacollection) {\r\n         // NOTE: this can happen in the ABDesigner object workspace.\r\n         // we send in a temp DC with no .id\r\n         this._tempDC = datacollection;\r\n         DC = datacollection;\r\n      }\r\n\r\n      // NOTE: keep .objectLoad() before any .initData() is called.\r\n      this.objectLoad(DC.datasource);\r\n\r\n      if (DC.dataStatus == DC.dataStatusFlag.initialized) {\r\n         this.initData();\r\n      }\r\n\r\n      this.eventAdd({\r\n         emitter: DC,\r\n         eventName: \"initializedData\",\r\n         listener: () => {\r\n            this.initData();\r\n         },\r\n      });\r\n\r\n      // real-time update\r\n      this.eventAdd({\r\n         emitter: DC,\r\n         eventName: \"create\",\r\n         listener: () => {\r\n            this.initData();\r\n         },\r\n      });\r\n\r\n      this.eventAdd({\r\n         emitter: DC,\r\n         eventName: \"update\",\r\n         listener: () => {\r\n            this.initData();\r\n         },\r\n      });\r\n\r\n      this.eventAdd({\r\n         emitter: DC,\r\n         eventName: \"delete\",\r\n         listener: (taskId) => {\r\n            // remove this task in gantt\r\n            if (this.ganttElement.isExistsTask(taskId))\r\n               this.ganttElement.removeTask(taskId);\r\n         },\r\n      });\r\n   }\r\n\r\n   /**\r\n    * @function hide()\r\n    * hide this component.\r\n    */\r\n   hide() {\r\n      $$(this.ids.component)?.hide();\r\n   }\r\n\r\n   initData() {\r\n      let ganttElem = $$(this.ids.gantt);\r\n      if (!ganttElem) return;\r\n\r\n      let dataService = ganttElem.getService(\"local\");\r\n      if (!dataService) return;\r\n\r\n      let dcTasks = dataService.tasks();\r\n      if (!dcTasks) return;\r\n\r\n      // gantt v 8.1.1\r\n      // Note: there is a race condition that can happen here.\r\n      // dataService.tasks() calls the MyBackend.tasks() above which\r\n      // returns a Promise.\r\n      // when you call dcTasks.clearAll() before the promise\r\n      // is resolved, the gantt internally throws an error.\r\n      //\r\n      // So give webix some time to internally complete it's process\r\n      // before we do .clearAll();\r\n      setTimeout(() => {\r\n         dcTasks.clearAll();\r\n\r\n         let DC = this.CurrentDatacollection;\r\n         let gantt_data = {\r\n            data: DC\r\n               ? (DC.getData() || []).map((d, index) =>\r\n                    this.convertFormat(d, index)\r\n                 )\r\n               : [],\r\n         };\r\n\r\n         // check required fields before parse\r\n         if (this.StartDateField && (this.EndDateField || this.DurationField)) {\r\n            dcTasks.parse(gantt_data);\r\n         }\r\n\r\n         // Keep original start and end dates for calculate scale to display\r\n         const currScale = dataService.getScales();\r\n         this.originalStartDate = currScale.start;\r\n         this.originalEndDate = currScale.end;\r\n\r\n         this.sort();\r\n      }, 10);\r\n   }\r\n\r\n   setScale(scale) {\r\n      let ganttElem = $$(this.ids.gantt);\r\n      if (!ganttElem) return;\r\n\r\n      let ganttData = ganttElem.getService(\"local\");\r\n      if (!ganttData) return;\r\n\r\n      let newScales = [];\r\n\r\n      switch (scale) {\r\n         case \"day\":\r\n            newScales = [YEAR_SCALE, MONTH_SCALE, DAY_SCALE];\r\n            break;\r\n         case \"week\":\r\n            newScales = [YEAR_SCALE, MONTH_SCALE, WEEK_SCALE];\r\n            break;\r\n         case \"month\":\r\n            newScales = [YEAR_SCALE, MONTH_SCALE];\r\n            break;\r\n         case \"year\":\r\n            newScales = [YEAR_SCALE];\r\n            break;\r\n      }\r\n\r\n      const currScale = ganttElem.getService(\"local\").getScales(),\r\n         start = webix.Date.add(this.originalStartDate, -1, scale, true),\r\n         end = webix.Date.add(this.originalEndDate, 1, scale, true);\r\n\r\n      ganttData.setScales(\r\n         start,\r\n         end,\r\n         currScale.precise,\r\n         currScale.cellWidth,\r\n         currScale.cellHeight,\r\n         newScales\r\n      );\r\n      ganttElem.$app.refresh();\r\n      ganttElem.getState().$batch({ top: 0, left: 0 });\r\n   }\r\n\r\n   /**\r\n    * @function show()\r\n    * Show this component.\r\n    */\r\n   show() {\r\n      $$(this.ids.component)?.show();\r\n   }\r\n\r\n   sort() {\r\n      // TODO: sorting;\r\n      return;\r\n      // let gantt = $$(ids.gantt).getGantt();\r\n      // if (!gantt) return;\r\n\r\n      // // default sort\r\n      // let MAX_date = new Date(8640000000000000);\r\n      // gantt.sort(function(a, b) {\r\n      //    let aStartDate = a[\"start_date\"],\r\n      //       aEndDate = a[\"end_date\"],\r\n      //       aDuration = a[\"duration\"] || 1,\r\n      //       bStartDate = b[\"start_date\"],\r\n      //       bEndDate = b[\"end_date\"],\r\n      //       bDuration = b[\"duration\"] || 1;\r\n\r\n      //    // if no start date, then be a last item\r\n      //    if (\r\n      //       a[this.StartDateField.columnName] == null ||\r\n      //       b[this.StartDateField.columnName] == null\r\n      //    ) {\r\n      //       return (\r\n      //          (a[this.StartDateField.columnName] || MAX_date) -\r\n      //          (b[this.StartDateField.columnName] || MAX_date)\r\n      //       );\r\n      //    } else if (aStartDate != bStartDate) {\r\n      //       return aStartDate - bStartDate;\r\n      //    } else if (aEndDate != bEndDate) {\r\n      //       return aEndDate - bEndDate;\r\n      //    } else if (aDuration != bDuration) {\r\n      //       return bDuration - aDuration;\r\n      //    }\r\n      // }, false);\r\n   }\r\n\r\n   async taskAdd(taskData) {\r\n      let patch = this.convertValues(taskData);\r\n\r\n      try {\r\n         return await this.CurrentObject?.model().create(patch);\r\n      } catch (e) {\r\n         webix.alert({\r\n            title: L(\"Error Saving Item\"),\r\n            ok: L(\"Okay\"),\r\n            text: L(\"Unable to save this item.\"),\r\n         });\r\n         this.AB.notify.developer(e, {\r\n            context: \"ABViewGantt:taskAdd(): Error Saving Item\",\r\n            patch,\r\n         });\r\n         throw e;\r\n      }\r\n   }\r\n\r\n   async taskRemove(rowId) {\r\n      try {\r\n         await this.CurrentObject.model().delete(rowId);\r\n      } catch (e) {\r\n         webix.alert({\r\n            title: L(\"Error Removing Item\"),\r\n            ok: L(\"Okay\"),\r\n            text: L(\"Unable to remove this item.\"),\r\n         });\r\n         this.AB.notify.developer(e, {\r\n            context: \"ABViewGantt:taskRemove(): Error Removing Item\",\r\n            rowId,\r\n         });\r\n         throw e;\r\n      }\r\n   }\r\n\r\n   async taskUpdate(rowId, updatedTask) {\r\n      let patch = this.convertValues(updatedTask);\r\n      try {\r\n         await this.CurrentObject.model().update(rowId, patch);\r\n      } catch (e) {\r\n         webix.alert({\r\n            title: L(\"Error Updating Item\"),\r\n            ok: L(\"Okay\"),\r\n            text: L(\"Unable to update this item.\"),\r\n         });\r\n         this.AB.notify.developer(e, {\r\n            context: \"ABViewGantt:taskUpdate(): Error Updating Item\",\r\n            patch,\r\n         });\r\n         throw e;\r\n      }\r\n   }\r\n}\r\n\r\nexport default class ABViewGantt extends ABViewGanttCore {\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(values, application, parent, defaultValues);\r\n   }\r\n\r\n   //\r\n   //\tEditor Related\r\n   //\r\n\r\n   /**\r\n    * @method editorComponent\r\n    * return the Editor for this UI component.\r\n    * the editor should display either a \"block\" view or \"preview\" of\r\n    * the current layout of the view.\r\n    * @param {string} mode what mode are we in ['block', 'preview']\r\n    * @return {Component}\r\n    */\r\n   editorComponent(App, mode) {\r\n      return this.component(App);\r\n   }\r\n\r\n   /*\r\n    * @component()\r\n    * return a UI component based upon this view.\r\n    * @param {obj} App\r\n    * @return {obj} UI component\r\n    */\r\n   component(v1App = false) {\r\n      var component = new ABViewGanttComponent(this);\r\n\r\n      // if this is our v1Interface\r\n      if (v1App) {\r\n         var newComponent = component;\r\n         component = {\r\n            ui: component.ui(),\r\n            init: (/* options, accessLevel*/) => {\r\n               return newComponent.init(this.AB);\r\n            },\r\n            onShow: (...params) => {\r\n               return newComponent.onShow?.(...params);\r\n            },\r\n         };\r\n      }\r\n\r\n      return component;\r\n   }\r\n}\r\n","const ABViewGridCore = require(\"../../core/views/ABViewGridCore\");\r\nimport ABViewComponent from \"./ABViewComponent\";\r\n\r\nimport ABPopupExport from \"./ABViewGridPopupExport\";\r\nimport ABPopupMassUpdateClass from \"./ABViewGridPopupMassUpdate\";\r\nimport ABPopupSortField from \"./ABViewGridPopupSortFields\";\r\nimport ABViewGridFilter from \"./viewProperties/ABViewPropertyFilterData\";\r\nconst ABViewPropertyLinkPage =\r\n   require(\"./viewProperties/ABViewPropertyLinkPage\").default;\r\n\r\nconst KEY_STORAGE_SETTINGS = \"abviewgrid_settings\";\r\n// {string}\r\n// the unique key for ABViewGrids to store/retrieve their local settings\r\n\r\nvar GridSettings = null;\r\n// {hash} { grid.id : [ {columnHeader}, {columnHeader} ...]}\r\n// Keep a global copy of our local Grid settings, so we can optimize the header\r\n// sizes.\r\n\r\n// let PopupHideFieldComponent = null;\r\n// let PopupFrozenColumnsComponent = null;\r\n// let PopupFilterProperty = null;\r\n// let PopupSummaryColumnsComponent = null;\r\n// let PopupCountColumnsComponent = null;\r\n\r\nvar L = null;\r\n// multilingual Label fn()\r\n\r\nclass ABViewGridComponent extends ABViewComponent {\r\n   constructor(viewGrid, idBase) {\r\n      var base = idBase || `ABViewGrid_${viewGrid.id}`;\r\n\r\n      super(base, {\r\n         // component: `${base}_component`,\r\n         toolbar: \"\",\r\n         buttonDeleteSelected: \"\",\r\n\r\n         buttonFilter: \"\",\r\n         buttonMassUpdate: \"\",\r\n         buttonSort: \"\",\r\n         buttonExport: \"\",\r\n\r\n         globalSearchToolbar: \"\",\r\n\r\n         datatable: \"\",\r\n      });\r\n\r\n      this.viewGrid = viewGrid;\r\n      this.viewGrid.filterHelper.on(\"filter.data\", (fnFilter, filterRules) => {\r\n         this.callbackFilterData(fnFilter, filterRules); // be notified when there is a change in the filter\r\n      });\r\n\r\n      // derive these from viewGrid\r\n      this.AB = viewGrid.AB;\r\n      this.id = viewGrid.id;\r\n      this.settings = viewGrid.settings || {};\r\n\r\n      /////\r\n      ///// For TEsting:\r\n      /////\r\n      // this.settings.showToolbar = 1;\r\n      // this.settings.isEditable = 1;\r\n      // this.settings.isExportable = 1;\r\n      // this.settings.gridFilter = {\r\n      //    filterOption: 1,\r\n      //    userFilterPosition: \"form\",\r\n      //    isGlobalToolbar: 1,\r\n      // };\r\n\r\n      // this.settings.detailsPage = \"some-uuid\";\r\n      // this.settings.detailTab = \"some_uuid_2\";\r\n      // this.settings.trackView = 1;\r\n      /////\r\n      ///// end testing\r\n      /////\r\n\r\n      this.columnSplitLeft = 0;\r\n      // {integer}\r\n      // Which column to \"split\"/\"freeze\" from the left side of the grid.\r\n\r\n      this.columnSplitRight = 0;\r\n      // {integer}\r\n      // The # columns to the right to freeze.\r\n\r\n      this.datacollection = null;\r\n      // {ABDataCollection}\r\n      // The Webix DataCollection that manages the data we are displaying.\r\n\r\n      this.validationError = false;\r\n      // {bool}\r\n      // Has a Validation Error occured?\r\n\r\n      this.linkPage = this.viewGrid.linkPageHelper.component(\r\n         this.AB._App,\r\n         `${base}_gridlinkpage`\r\n      );\r\n      // {ABViewPropertyLinkPage}\r\n      //\r\n\r\n      this.PopupExport = new ABPopupExport(base);\r\n      this.PopupExport.init(this.AB);\r\n      // {ABViewGridPopupExport}\r\n      // Popup for managing how to export our data.\r\n\r\n      this.PopupMassUpdateComponent = new ABPopupMassUpdateClass(this, this.id);\r\n      this.PopupMassUpdateComponent.init(this.AB);\r\n      // this.PopupMassUpdateComponent.on(\"\")\r\n      // {}\r\n      // The popup for performing a Mass Edit operation.\r\n\r\n      this.PopupSortDataTableComponent = new ABPopupSortField(base);\r\n      this.PopupSortDataTableComponent.init(this.AB);\r\n      this.PopupSortDataTableComponent.on(\"changed\", (sortOptions) => {\r\n         this.callbackSortData(sortOptions);\r\n      });\r\n      // {ABViewGridPopupSortFields}\r\n      // The popup for adding sort criteria to our grid.\r\n\r\n      this.skippableColumns = [\r\n         \"appbuilder_select_item\",\r\n         \"appbuilder_view_detail\",\r\n         \"appbuilder_view_track\",\r\n         \"appbuilder_view_edit\",\r\n         \"appbuilder_trash\",\r\n      ];\r\n      // {array}\r\n      // An array of column names that should be skipped from some of our\r\n      // event handlers.\r\n\r\n      // this.EditField = null;\r\n      // // {ABFieldXXX}\r\n      // // Which ABField is the focus of our PopupHeader menu?\r\n\r\n      // this.EditNode = null;\r\n      // // {HTML DOM}\r\n      // // The webix.$node where the ABField Header is that our PopupHeader\r\n      // // should be displayed at.\r\n\r\n      this.handler_select = (...params) => {\r\n         this.selectRow(...params);\r\n      };\r\n      // {fn} .handler_select\r\n      // the callback fn for our selectRow()\r\n      // We want this called when the .datacollection we are linked to\r\n      // emits an \"onChange\" event.\r\n\r\n      if (!L) {\r\n         L = (...params) => {\r\n            return this.AB.Multilingual.label(...params);\r\n         };\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method getColumnIndex()\r\n    * return the Datatable.getColumnIndex() value\r\n    * @param {string} id\r\n    *        the uuid of the column we are referencing.\r\n    * @return {integer}\r\n    */\r\n   getColumnIndex(id) {\r\n      var indx = this.getDataTable().getColumnIndex(id);\r\n      if (!this.settings.massUpdate) {\r\n         // the index is 0 based. So if the massUpdate feature isn't\r\n         // enabled, we need to add 1 to the result so they look like\r\n         // a 1, 2, ...\r\n\r\n         indx++;\r\n      }\r\n      return indx;\r\n   }\r\n\r\n   uiDatatable() {\r\n      var ids = this.ids;\r\n      var settings = this.settings;\r\n      var self = this;\r\n\r\n      var view = \"datatable\";\r\n      if (settings.isTreeDatable || settings.groupBy) {\r\n         // switch datatable to support tree\r\n         view = \"treetable\";\r\n      }\r\n\r\n      var selectType = \"cell\";\r\n      if (!settings.isEditable && (settings.detailsPage || settings.editPage)) {\r\n         selectType = \"row\";\r\n      }\r\n\r\n      return {\r\n         view: view,\r\n         id: ids.datatable,\r\n         resizeColumn: { size: 10 },\r\n         resizeRow: { size: 10 },\r\n         prerender: false,\r\n         editable: settings.isEditable,\r\n         fixedRowHeight: false,\r\n         height: settings.height || 0,\r\n         editaction: \"custom\",\r\n         select: selectType,\r\n         footer:\r\n            // show footer when there are summary columns\r\n            settings.summaryColumns.length > 0 ||\r\n            settings.countColumns.length > 0,\r\n         tooltip: true,\r\n         // tooltip: {\r\n         //    // id: ids.tooltip,\r\n         //    template: (obj, common) => {\r\n         //       return this.toolTip(obj, common);\r\n         //    },\r\n         //    on: {\r\n         //       // When showing a larger image preview the tooltip sometime displays part of the image off the screen...this attempts to fix that problem\r\n         //       onBeforeRender: function () {\r\n         //          self.toolTipOnBeforeRender(this.getNode());\r\n         //       },\r\n         //       onAfterRender: function (data) {\r\n         //          self.toolTipOnAfterRender(this.getNode());\r\n         //       },\r\n         //    },\r\n         // },\r\n         dragColumn: true,\r\n         on: {\r\n            onBeforeSelect: function (data, preserve) {\r\n               if (self.skippableColumns.indexOf(data.column) != -1) {\r\n                  return false;\r\n               } else if (settings.isEditable) {\r\n                  var currObject = self.datacollection.datasource;\r\n                  var selectField = currObject.fields((f) => {\r\n                     return f.columnName == data.column;\r\n                  })[0];\r\n\r\n                  if (selectField == null) return true;\r\n\r\n                  var cellNode = this.getItemNode({\r\n                        row: data.row,\r\n                        column: data.column,\r\n                     }),\r\n                     rowData = this.getItem(data.row);\r\n\r\n                  console.error(\"TODO: field.customEdit() remove App param!\");\r\n                  return selectField.customEdit(\r\n                     rowData,\r\n                     self.AB._App,\r\n                     cellNode\r\n                  );\r\n               } else if (!settings.detailsPage && !settings.editPage) {\r\n                  return false;\r\n               }\r\n            },\r\n            onAfterSelect: (data, preserve) => {\r\n               // {ABObject} data\r\n               //            the selected object\r\n               // {bool} prevent\r\n               //        indicates whether the previous selection state should\r\n               //        be saved. (is multiselect and they are holding SHIFT)\r\n               if (this.settings.isEditable) {\r\n                  this.onAfterSelect(data, preserve);\r\n               }\r\n            },\r\n            onBeforeEditStart: function (id) {\r\n               if (!this.getItem(id) == \"appbuilder_select_item\") return false;\r\n            },\r\n            onCheck: function (row, col, val) {\r\n               // Update checkbox data\r\n               if (col == \"appbuilder_select_item\") {\r\n                  // do nothing because we will parse the table once we decide\r\n                  // if we are deleting or updating rows\r\n                  self.toggleUpdateDelete();\r\n               } else {\r\n                  if (self.settings.isEditable) {\r\n                     // if the colum is not the select item column move on to\r\n                     // the next step to save\r\n                     var state = {\r\n                        value: val,\r\n                     };\r\n\r\n                     var editor = {\r\n                        row: row,\r\n                        column: col,\r\n                        config: null,\r\n                     };\r\n                     self.onAfterEditStop(state, editor);\r\n                  } else {\r\n                     var node = this.getItemNode({\r\n                        row: row,\r\n                        column: col,\r\n                     });\r\n                     var checkbox = node.querySelector(\r\n                        'input[type=\"checkbox\"]'\r\n                     );\r\n                     if (val == 1) {\r\n                        checkbox.checked = false;\r\n                     } else {\r\n                        checkbox.checked = true;\r\n                     }\r\n                  }\r\n               }\r\n            },\r\n            onBeforeEditStop: function (state, editor) {\r\n               // console.warn(\"!! ToDo: onBeforeEditStop()\");\r\n            },\r\n            onAfterEditStop: (state, editor, ignoreUpdate) => {\r\n               if (this.validationError == false)\r\n                  this.onAfterEditStop(state, editor, ignoreUpdate);\r\n            },\r\n            onValidationError: function () {\r\n               this.validationError = true;\r\n            },\r\n            onValidationSuccess: function () {\r\n               this.validationError = false;\r\n            },\r\n\r\n            // We are sorting with server side requests now so we can remove this\r\n            // onAfterLoad: function () {\r\n            //    _logic.onAfterLoad();\r\n            // },\r\n            onColumnResize: function (\r\n               columnName,\r\n               newWidth,\r\n               oldWidth,\r\n               user_action\r\n            ) {\r\n               // if we resize the delete column we want to resize the last\r\n               // column but Webix will not allow since the column is split\r\n               var rightSplitItems = [\r\n                  \"appbuilder_view_detail\",\r\n                  \"appbuilder_view_track\",\r\n                  \"appbuilder_view_edit\",\r\n                  \"appbuilder_trash\",\r\n               ];\r\n               if (rightSplitItems.indexOf(columnName) != -1) {\r\n                  // Block events so we can leave the delete column alone\r\n                  this.blockEvent();\r\n                  // keeps original width\r\n                  this.setColumnWidth(columnName, oldWidth);\r\n                  this.unblockEvent();\r\n                  // Listen to events again\r\n\r\n                  // find the last column's config\r\n                  var column = self.getLastColumn();\r\n\r\n                  columnName = column.id;\r\n\r\n                  // determine if we are making the column larger or smaller\r\n                  if (newWidth < oldWidth) {\r\n                     newWidth = column.width + 40;\r\n                     // add 40 because there is not any more space to drag so we\r\n                     // will allow 40px increments\r\n                  } else {\r\n                     newWidth = column.width - (newWidth - 40);\r\n                     // take the column's width and subtrack the difference of\r\n                     // the expanded delet column drag\r\n                  }\r\n                  // we don't want columns to be smaller than 50 ?? do we ??\r\n                  // I could be wrong maybe a checkbox could be smaller so this\r\n                  // could change\r\n                  if (newWidth < 50) {\r\n                     newWidth = 50;\r\n                  }\r\n                  // minWidth is important because we are using fillspace:true\r\n                  column.minWidth = newWidth;\r\n                  // Sets the UI\r\n                  this.setColumnWidth(columnName, newWidth);\r\n               }\r\n               // Saves the new width\r\n               if (user_action) {\r\n                  self.onColumnResize(\r\n                     columnName,\r\n                     newWidth,\r\n                     oldWidth,\r\n                     user_action\r\n                  );\r\n               }\r\n            },\r\n            onRowResize: (rowId) => {\r\n               // V2: we no longer do anything onRowResize()\r\n               // before we saved the row height in the record.\r\n               // this.onRowResize(rowId);\r\n            },\r\n            onBeforeColumnDrag: (sourceId, event) => {\r\n               if (this.skippableColumns.indexOf(sourceId) != -1) return false;\r\n               else return true;\r\n            },\r\n            onBeforeColumnDrop: (sourceId, targetId, event) => {\r\n               // Make sure we are not trying to drop onto one of our special\r\n               // columns ...\r\n               if (this.skippableColumns.indexOf(targetId) != -1) return false;\r\n            },\r\n            onAfterColumnDrop: (sourceId, targetId, event) => {\r\n               this.onAfterColumnDrop(sourceId, targetId, event);\r\n            },\r\n            // onAfterColumnShow: function (id) {\r\n            //    // console.warn(\"!! ToDo: onAfterColumnShow()\");\r\n            //    // $$(self.webixUiId.visibleFieldsPopup).showField(id);\r\n            // },\r\n            // onAfterColumnHide: function (id) {\r\n            //    // console.warn(\"!! ToDo: onAfterColumnHide()\");\r\n            //    // $$(self.webixUiId.visibleFieldsPopup).hideField(id);\r\n            // },\r\n\r\n            onHeaderClick: (id, e, node) => {\r\n               /* if (settings.configureHeaders) */\r\n               this.onHeaderClick(id, e, node);\r\n            },\r\n         },\r\n      };\r\n   }\r\n\r\n   uiFilter() {\r\n      return this.viewGrid.filterHelper.ui();\r\n\r\n      // make sure onFilterData is now .emit()ed instead of passing in a callback.\r\n   }\r\n\r\n   /**\r\n    * @method uiToolbar()\r\n    * Return the webix definition for the toolbar row for our Grids.\r\n    * @return {json}\r\n    */\r\n   uiToolbar() {\r\n      var ids = this.ids;\r\n      var self = this;\r\n\r\n      return {\r\n         view: \"toolbar\",\r\n         id: ids.toolbar,\r\n         hidden: true,\r\n         css: \"ab-data-toolbar\",\r\n         cols: [\r\n            {\r\n               view: \"button\",\r\n               id: ids.buttonMassUpdate,\r\n               css: \"webix_transparent\",\r\n               label: L(\"Edit\"),\r\n               icon: \"fa fa-pencil-square-o\",\r\n               type: \"icon\",\r\n               disabled: true,\r\n               autowidth: true,\r\n               click: function () {\r\n                  self.toolbarMassUpdate(this.$view);\r\n               },\r\n            },\r\n            {\r\n               view: \"button\",\r\n               id: ids.buttonDeleteSelected,\r\n               css: \"webix_transparent\",\r\n               label: L(\"Delete\"),\r\n               icon: \"fa fa-trash\",\r\n               type: \"icon\",\r\n               disabled: true,\r\n               autowidth: true,\r\n               click: function () {\r\n                  self.toolbarDeleteSelected(this.$view);\r\n               },\r\n            },\r\n            {\r\n               view: \"button\",\r\n               id: ids.buttonFilter,\r\n               css: \"webix_transparent\",\r\n               label: L(\"Filters\"),\r\n               icon: \"fa fa-filter\",\r\n               type: \"icon\",\r\n               autowidth: true,\r\n               click: function () {\r\n                  self.toolbarFilter(this.$view);\r\n               },\r\n            },\r\n            {\r\n               view: \"button\",\r\n               id: ids.buttonSort,\r\n               css: \"webix_transparent\",\r\n               label: L(\"Sort\"),\r\n               icon: \"fa fa-sort\",\r\n               type: \"icon\",\r\n               autowidth: true,\r\n               click: function () {\r\n                  self.toolbarSort(this.$view);\r\n               },\r\n            },\r\n            {\r\n               view: \"button\",\r\n               id: ids.buttonExport,\r\n               css: \"webix_transparent\",\r\n               label: L(\"Export\"),\r\n               icon: \"fa fa-print\",\r\n               type: \"icon\",\r\n               autowidth: true,\r\n               click: function () {\r\n                  self.toolbarExport(this.$view);\r\n               },\r\n            },\r\n            {},\r\n            {\r\n               id: ids.globalSearchToolbar,\r\n               view: \"search\",\r\n               placeholder: L(\"Search...\"),\r\n               on: {\r\n                  onTimedKeyPress: () => {\r\n                     let searchText = $$(ids.globalSearchToolbar).getValue();\r\n                     this.viewGrid.filterHelper.externalSearchText(searchText);\r\n                  },\r\n               },\r\n            },\r\n         ],\r\n      };\r\n   }\r\n\r\n   ui() {\r\n      var tableUI = {\r\n         type: \"space\",\r\n         borderless: true,\r\n         rows: [\r\n            {},\r\n            {\r\n               view: \"label\",\r\n               label: L(\"Select an object to load.\"),\r\n               inputWidth: 200,\r\n               align: \"center\",\r\n            },\r\n            {},\r\n         ],\r\n      };\r\n\r\n      if (this.datacollection || this.settings.dataviewID != \"\") {\r\n         tableUI.padding = this.settings.padding;\r\n         tableUI.rows = [];\r\n         if (this.settings.showToolbar) {\r\n            tableUI.rows.push(this.uiToolbar());\r\n         }\r\n         if (this.settings.gridFilter.filterOption) {\r\n            tableUI.rows.push(this.uiFilter());\r\n         }\r\n\r\n         tableUI.rows.push(this.uiDatatable());\r\n      }\r\n\r\n      return tableUI;\r\n   }\r\n\r\n   async init(AB, accessLevel = 2) {\r\n      if (AB) {\r\n         this.AB = AB;\r\n      }\r\n      var self = this;\r\n      var ids = this.ids;\r\n\r\n      // WORKAROUND : Where should we define this ??\r\n      // For include PDF.js\r\n      webix.codebase = \"\";\r\n      webix.cdn = \"/js/webix\";\r\n\r\n      // this shows the options to Hide, Filter, sort , etc...\r\n      // only in Designer?\r\n      // PopupHeaderEditComponent.init({\r\n      //    onClick: _logic.callbackHeaderEdit, // be notified when there is a change in the hidden fields\r\n      // });\r\n\r\n      // NOTE: register the onAfterRender() here, so it only registers\r\n      // one.\r\n      var DataTable = this.getDataTable();\r\n      var throttleCustomDisplay = null;\r\n      var scrollStarted = null;\r\n\r\n      webix.extend(DataTable, webix.ProgressBar);\r\n\r\n      DataTable.config.accessLevel = accessLevel;\r\n      if (accessLevel < 2) {\r\n         DataTable.define(\"editable\", false);\r\n      }\r\n\r\n      let customDisplays = (data) => {\r\n         var CurrentObject = this.datacollection?.datasource;\r\n         if (!CurrentObject || !DataTable.data) return;\r\n\r\n         var displayRecords = [];\r\n\r\n         let verticalScrollState = DataTable.getScrollState().y,\r\n            rowHeight = DataTable.config.rowHeight,\r\n            height =\r\n               DataTable.$view.querySelector(\".webix_ss_body\").clientHeight,\r\n            startRecIndex = Math.floor(verticalScrollState / rowHeight),\r\n            endRecIndex = startRecIndex + DataTable.getVisibleCount(),\r\n            index = 0;\r\n\r\n         DataTable.data.order.each(function (id) {\r\n            if (id != null && startRecIndex <= index && index <= endRecIndex)\r\n               displayRecords.push(id);\r\n\r\n            index++;\r\n         });\r\n\r\n         var editable = this.settings.isEditable;\r\n         if (DataTable.config.accessLevel < 2) {\r\n            editable = false;\r\n         }\r\n         CurrentObject.customDisplays(\r\n            data,\r\n            this.AB._App,\r\n            DataTable,\r\n            displayRecords,\r\n            editable\r\n         );\r\n      };\r\n\r\n      DataTable.attachEvent(\"onAfterRender\", function (data) {\r\n         DataTable.resize();\r\n\r\n         if (throttleCustomDisplay) clearTimeout(throttleCustomDisplay);\r\n         throttleCustomDisplay = setTimeout(() => {\r\n            if (scrollStarted) clearTimeout(scrollStarted);\r\n            customDisplays(this.data);\r\n         }, 350);\r\n\r\n         AB.ClassUI.CYPRESS_REF(DataTable);\r\n         Object.keys(ids).forEach((key) => {\r\n            var $el = $$(ids[key]);\r\n            if ($el) {\r\n               AB.ClassUI.CYPRESS_REF($el);\r\n            }\r\n         });\r\n      });\r\n\r\n      // we have some data types that have custom displays that don't look\r\n      // right after scrolling large data sets we need to call customDisplays\r\n      // again\r\n      DataTable.attachEvent(\"onScroll\", function () {\r\n         if (scrollStarted) clearTimeout(scrollStarted);\r\n         if (throttleCustomDisplay) clearTimeout(throttleCustomDisplay);\r\n\r\n         scrollStarted = setTimeout(() => {\r\n            customDisplays(this.data);\r\n         }, 1500);\r\n      });\r\n      DataTable.attachEvent(\"onAfterScroll\", function () {\r\n         if (throttleCustomDisplay) clearTimeout(throttleCustomDisplay);\r\n\r\n         throttleCustomDisplay = setTimeout(() => {\r\n            if (scrollStarted) clearTimeout(scrollStarted);\r\n            customDisplays(this.data);\r\n         }, 350);\r\n      });\r\n\r\n      // Process our onItemClick events.\r\n      // this is a good place to check if our delete/trash icon was clicked.\r\n      DataTable.attachEvent(\"onItemClick\", function (id, e, node) {\r\n         // make sure we have an object selected before processing this.\r\n         var CurrentObject = self.datacollection?.datasource;\r\n         if (!CurrentObject) {\r\n            return;\r\n         }\r\n\r\n         if (self.settings.isEditable == 0) {\r\n            var items = DataTable.getItem(id);\r\n         }\r\n         // if this was our edit icon:\r\n         // console.log(e.target.className);\r\n         if (e == \"auto\" || e.target.className.indexOf(\"eye\") > -1) {\r\n            // View a Details Page:\r\n            self.changePage(dv, id, self.settings.detailsPage);\r\n            self.toggleTab(self.settings.detailsTab, this);\r\n         } else if (e.target.className.indexOf(\"pencil\") > -1) {\r\n            self.changePage(dv, id, self.settings.editPage);\r\n            self.toggleTab(self.settings.editTab, this);\r\n         } else if (e.target.className.indexOf(\"track\") > -1) {\r\n            self.emit(\"object.track\", CurrentObject, id.row);\r\n            // App.actions.openObjectTrack(CurrentObject, id.row);\r\n         } else if (e.target.className.indexOf(\"clear-combo-value\") > -1) {\r\n            let clearValue = {};\r\n            clearValue[id.column] = \"\";\r\n            CurrentObject.model()\r\n               .update(id.row, clearValue)\r\n               .then((response) => {\r\n                  // console.log(response);\r\n               })\r\n               .catch((err) => {\r\n                  self.AB.notify.developer(err, {\r\n                     context: \"ABViewGridComponent.onItemClick\",\r\n                     message: \"Error updating item\",\r\n                     obj: CurrentObject.toObj(),\r\n                     id: id.row,\r\n                  });\r\n               });\r\n         } else if (e.target.className.indexOf(\"trash\") > -1) {\r\n            // if this was our trash icon:\r\n\r\n            webix.confirm({\r\n               title: L(\"Delete data\"),\r\n               text: L(\"Do you want to delete this row?\"),\r\n               callback: function (result) {\r\n                  if (result) {\r\n                     CurrentObject.model()\r\n                        .delete(id.row)\r\n                        .then((response) => {\r\n                           if (response.numRows > 0) {\r\n                              DataTable.remove(id);\r\n                              DataTable.clearSelection();\r\n                           } else {\r\n                              webix.alert({\r\n                                 text: L(\r\n                                    \"No rows were effected.  This does not seem right.\"\r\n                                 ),\r\n                              });\r\n                           }\r\n                        })\r\n                        .catch((err) => {\r\n                           self.AB.notify.developer(err, {\r\n                              context: \"ABViewGridComponent.onItemClick\",\r\n                              message: \"Error deleting item\",\r\n                              obj: CurrentObject.toObj(),\r\n                              id: id.row,\r\n                           });\r\n\r\n                           //// TODO: what do we do here?\r\n                        });\r\n                  }\r\n\r\n                  DataTable.clearSelection();\r\n                  return true;\r\n               },\r\n            });\r\n         } else if (self.settings.detailsPage.length) {\r\n            // If an icon wasn't selected but a details page is set\r\n            // view the details page\r\n            self.changePage(dv, id, self.settings.detailsPage);\r\n            self.toggleTab(self.settings.detailsTab, this);\r\n         } else if (self.settings.editPage.length) {\r\n            // If an icon wasn't selected but an edit page is set\r\n            // view the edit page\r\n            self.changePage(dv, id, self.settings.editPage);\r\n            self.toggleTab(self.settings.editTab, this);\r\n         }\r\n      });\r\n\r\n      // ABViewGrid Original init();\r\n\r\n      if (this.settings.showToolbar) {\r\n         if (\r\n            this.settings.massUpdate ||\r\n            this.settings.isSortable ||\r\n            this.settings.isExportable ||\r\n            (this.settings.gridFilter &&\r\n               this.settings.gridFilter.filterOption &&\r\n               this.settings.gridFilter.userFilterPosition == \"toolbar\")\r\n         ) {\r\n            $$(ids.toolbar).show();\r\n         }\r\n\r\n         if (this.settings.massUpdate == false) {\r\n            $$(ids.buttonMassUpdate).hide();\r\n            $$(ids.buttonDeleteSelected).hide();\r\n         }\r\n\r\n         if (this.settings.allowDelete == false) {\r\n            $$(ids.buttonDeleteSelected).hide();\r\n         }\r\n\r\n         if (this.settings.gridFilter) {\r\n            if (\r\n               this.settings.gridFilter.filterOption != 1 ||\r\n               this.settings.gridFilter.userFilterPosition != \"toolbar\"\r\n            ) {\r\n               $$(ids.buttonFilter).hide();\r\n            }\r\n\r\n            if (\r\n               this.settings.gridFilter.filterOption == 3 &&\r\n               this.settings.gridFilter.globalFilterPosition == \"single\"\r\n            ) {\r\n               DataTable.hide();\r\n            }\r\n\r\n            if (this.settings.gridFilter.isGlobalToolbar)\r\n               $$(ids.globalSearchToolbar).show();\r\n            else $$(ids.globalSearchToolbar).hide();\r\n\r\n            if (this.settings.gridFilter.filterOption) {\r\n               this.viewGrid.filterHelper.init(this.AB);\r\n            }\r\n         }\r\n\r\n         if (this.settings.isSortable == false) {\r\n            $$(ids.buttonSort).hide();\r\n         }\r\n\r\n         if (this.settings.isExportable == false) {\r\n            $$(ids.buttonExport).hide();\r\n         }\r\n      }\r\n\r\n      if (this.settings.hideHeader == true) {\r\n         this.hideHeader();\r\n      }\r\n\r\n      if (!this.datacollection) {\r\n         if (this.settings.dataviewID) {\r\n            var dv = this.AB.datacollectionByID(this.settings.dataviewID);\r\n            this.datacollectionLoad(dv);\r\n         }\r\n      }\r\n\r\n      // Make sure\r\n      if (!GridSettings) {\r\n         GridSettings = (await this.AB.Storage.get(KEY_STORAGE_SETTINGS)) || {};\r\n      }\r\n\r\n      if (this.datacollection?.datasource) {\r\n         // TRANSITION: ABViewGrid_orig line 862 ...\r\n\r\n         this.linkPage.init({\r\n            view: this.viewGrid,\r\n            datacollection: this.datacollection,\r\n         });\r\n\r\n         this.refreshHeader();\r\n      }\r\n\r\n      return Promise.resolve();\r\n   }\r\n\r\n   /**\r\n    * @method busy()\r\n    * Indicate that our datatable is currently busy loading/processing\r\n    * data.\r\n    */\r\n   busy() {\r\n      this.getDataTable()?.showProgress?.({ type: \"icon\" });\r\n   }\r\n\r\n   /**\r\n    * @method callbackFilterData()\r\n    * Process the provided filter options from our filterHelper.\r\n    * @param {fn} fnFilter\r\n    *        A function that returns true/false for each row of data\r\n    *        to determine if is should exist.\r\n    * @param {array} filterRules\r\n    *        Any Filter Rules added by the user.\r\n    */\r\n   callbackFilterData(fnFilter, filterRules = []) {\r\n      var ids = this.ids;\r\n      var $ButtonFilter = $$(ids.buttonFilter);\r\n      if ($ButtonFilter) {\r\n         var badge = null;\r\n         var onlyFilterRules = this.viewGrid.filterHelper.filterRules();\r\n         if (onlyFilterRules?.rules?.length) {\r\n            badge = 1;\r\n         }\r\n         $ButtonFilter.define(\"badge\", badge);\r\n         $ButtonFilter.refresh();\r\n      }\r\n\r\n      this.datacollection.filterCondition(filterRules);\r\n      this.datacollection.reloadData();\r\n\r\n      /*\r\n      var $DataTable = $$(ids.datatable);\r\n      Promise.resolve()\r\n         .then(\r\n            () =>\r\n               new Promise((next, err) => {\r\n                  // if (\r\n                  //    !this.settings ||\r\n                  //    !this.settings.gridFilter ||\r\n                  //    this.settings.gridFilter.filterOption != 3\r\n                  // )\r\n                  //    // Global search\r\n                  //    return next();\r\n\r\n                  let dc = this.datacollection;\r\n                  if (\r\n                     !dc ||\r\n                     (dc.settings.loadAll &&\r\n                        dc.dataStatus != dc.dataStatusFlag.notInitial)\r\n                  )\r\n                     // Load all already\r\n                     return next();\r\n\r\n                  let limit = null;\r\n\r\n                  // Load all data\r\n                  // let gridElem = $$(this.ids.datatable);\r\n                  if (\r\n                     $DataTable.data.find({}).length < $DataTable.data.count()\r\n                  ) {\r\n                     dc.reloadData(0, limit)\r\n                        .then(() => {\r\n                           // Should set .loadAll to this data collection ?\r\n                           if (limit == null) dc.settings.loadAll = true;\r\n\r\n                           next();\r\n                        })\r\n                        .catch(err);\r\n                  } else {\r\n                     next();\r\n                  }\r\n               })\r\n         )\r\n         // client filter data\r\n         .then(\r\n            () =>\r\n               new Promise((next, err) => {\r\n                  if (!fnFilter) return next();\r\n\r\n                  // wait the data are parsed into webix.datatable\r\n                  setTimeout(() => {\r\n                     $DataTable.filter((rowData) => {\r\n                        // rowData is null when is not load from paging\r\n                        if (rowData == null) return false;\r\n\r\n                        return fnFilter(rowData);\r\n                     });\r\n\r\n                     if (\r\n                        this.settings.gridFilter.globalFilterPosition ==\r\n                        \"single\"\r\n                     ) {\r\n                        if ($DataTable.count() > 0) {\r\n                           $DataTable.show();\r\n                           $DataTable.select($DataTable.getFirstId(), false);\r\n                           $DataTable.callEvent(\"onItemClick\", [\r\n                              $DataTable.getFirstId(),\r\n                              \"auto\",\r\n                              null,\r\n                           ]);\r\n                        } else {\r\n                           $DataTable.hide();\r\n                        }\r\n                     }\r\n\r\n                     next();\r\n                  }, 500);\r\n               })\r\n         );\r\n         */\r\n   }\r\n\r\n   async callbackSortData(sortRules = []) {\r\n      $$(this.ids.buttonSort).define(\"badge\", sortRules.length || null);\r\n      $$(this.ids.buttonSort).refresh();\r\n\r\n      let gridElem = this.getDataTable();\r\n      if (gridElem.data.find({}).length < gridElem.data.count()) {\r\n         try {\r\n            // NOTE: Webix's client sorting does not support dynamic loading.\r\n            // If the data does not be loaded, then load all data.\r\n            await this.datacollection.reloadData(0, 0);\r\n         } catch (err) {\r\n            this.AB.notify.developer(err, {\r\n               context:\r\n                  \"ABViewGrid:callbackSortData(): Error perform datacollection.reloadData()\",\r\n            });\r\n         }\r\n      }\r\n      // wait until the grid component will done to repaint UI\r\n      setTimeout(() => {\r\n         gridElem.sort((a, b) => this.PopupSortDataTableComponent.sort(a, b));\r\n      }, 777);\r\n   }\r\n\r\n   /**\r\n    * @method changePage()\r\n    * Helper method to switch to another View.\r\n    * @param {ABDataCollection} dv\r\n    *        The DataCollection we are working with.\r\n    * @param {obj} rowItem\r\n    *        the { row:#, column:{string} } of the item that was clicked.\r\n    * @param {ABViewPage.uuid} page\r\n    *        The .uuid of the ABViewPage/ABViewTab we are to swtich to.\r\n    *\r\n    */\r\n   changePage(dv, rowItem, page) {\r\n      let rowId = rowItem?.row ?? null;\r\n\r\n      // Set cursor to data view\r\n      if (dv) {\r\n         dv.setCursor(rowId);\r\n      }\r\n\r\n      // Pass settings to link page module\r\n      // console.error(\"!!!! TODO: implement linkPageHelper() !!!!\");\r\n      if (this.linkPage) {\r\n         this.linkPage.changePage(page, rowId);\r\n      }\r\n\r\n      super.changePage(page);\r\n   }\r\n\r\n   columnConfig(headers = []) {\r\n      this.settings.columnConfig = headers;\r\n   }\r\n   /**\r\n    * @method datacollectionLoad()\r\n    * Assign an ABDataCollection to this component to use instead of any\r\n    * provided .dataviewID in our settings.\r\n    * NOTE: this primarily happens in the ABDesigner's Object Workspace.\r\n    * @param {ABDataCollection} dc\r\n    */\r\n   datacollectionLoad(dc) {\r\n      var oldDC = this.datacollection;\r\n      this.datacollection = dc;\r\n\r\n      var CurrentObject = dc?.datasource;\r\n      var $DataTable = this.getDataTable();\r\n      if ($DataTable) {\r\n         // preventing too many handlers\r\n         if (!this.__handler_dc_busy) {\r\n            this.__handler_dc_busy = () => {\r\n               this.busy();\r\n            };\r\n\r\n            this.__handler_dc_ready = () => {\r\n               this.ready();\r\n            };\r\n\r\n            this.__handler_dc_loadData = () => {\r\n               if (\r\n                  $DataTable.config.view == \"treetable\" &&\r\n                  CurrentObject &&\r\n                  !CurrentObject.isGroup\r\n               ) {\r\n                  $DataTable.clearAll();\r\n                  $DataTable.parse(dc.getData());\r\n\r\n                  this.grouping();\r\n                  this.ready();\r\n               }\r\n            };\r\n         }\r\n\r\n         if (oldDC) {\r\n            // remove our listeners from the previous DC\r\n            oldDC.removeListener(\"initializingData\", this.__handler_dc_busy);\r\n            oldDC.removeListener(\"initializedData\", this.__handler_dc_ready);\r\n            oldDC.removeListener(\"loadData\", this.__handler_dc_loadData);\r\n         }\r\n\r\n         if (dc) {\r\n            if (dc.datacollectionLink && dc.fieldLink) {\r\n               dc.bind($DataTable, dc.datacollectionLink, dc.fieldLink);\r\n            } else {\r\n               dc.bind($DataTable);\r\n            }\r\n            // making sure we only have 1 registered listener on this dc\r\n            dc.removeListener(\"initializingData\", this.__handler_dc_busy);\r\n            dc.on(\"initializingData\", this.__handler_dc_busy);\r\n            dc.removeListener(\"initializedData\", this.__handler_dc_ready);\r\n            dc.on(\"initializedData\", this.__handler_dc_ready);\r\n            dc.removeListener(\"loadData\", this.__handler_dc_loadData);\r\n            dc.on(\"loadData\", this.__handler_dc_loadData);\r\n            this.grouping();\r\n         } else {\r\n            $DataTable.unbind();\r\n         }\r\n\r\n         // Be sure to pass on our CurrentObject to our dependent components.\r\n         if (CurrentObject) {\r\n            this.viewGrid.filterHelper.objectLoad(CurrentObject);\r\n            this.PopupMassUpdateComponent.objectLoad(\r\n               CurrentObject,\r\n               this.getDataTable()\r\n            );\r\n            this.PopupSortDataTableComponent.objectLoad(CurrentObject);\r\n\r\n            this.PopupExport.objectLoad(CurrentObject);\r\n            this.PopupExport.dataCollectionLoad(dc);\r\n            this.PopupExport.setGridComponent(this.getDataTable());\r\n            this.PopupExport.setHiddenFields(this.settings.hiddenFields);\r\n            this.PopupExport.setFilename(this.viewGrid.label);\r\n         }\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @function enableUpdateDelete\r\n    *\r\n    * disable the update or delete buttons in the toolbar if there no items selected\r\n    * we will make this externally accessible so we can call it from within the datatable component\r\n    */\r\n   disableUpdateDelete() {\r\n      $$(this.ids.buttonMassUpdate)?.disable();\r\n      $$(this.ids.buttonDeleteSelected)?.disable();\r\n      // externally indicate that no rows are selected\r\n      this.emit(\"selection.cleared\");\r\n   }\r\n\r\n   /**\r\n    * @function enableUpdateDelete\r\n    *\r\n    * enable the update or delete buttons in the toolbar if there are any items selected\r\n    * we will make this externally accessible so we can call it from within the datatable component\r\n    */\r\n   enableUpdateDelete() {\r\n      $$(this.ids.buttonMassUpdate)?.enable();\r\n      $$(this.ids.buttonDeleteSelected)?.enable();\r\n      // externally indicate that a row has been selected\r\n      this.emit(\"selection\");\r\n   }\r\n\r\n   freezeDeleteColumn() {\r\n      // we are going to always freeze the delete column if the datatable\r\n      // is wider than the container so it is easy to get to\r\n      return this.getDataTable().define(\"rightSplit\", this.columnSplitRight);\r\n   }\r\n\r\n   /**\r\n    * @method getDataTable()\r\n    * return the webix grid component.\r\n    * @return {webix.grid}\r\n    */\r\n   getDataTable() {\r\n      return $$(this.ids.datatable);\r\n   }\r\n\r\n   /**\r\n    * @method getLastColumn\r\n    * return the last column of a datagrid that is resizeable\r\n    */\r\n   getLastColumn() {\r\n      var DataTable = this.getDataTable();\r\n      var lastColumn = {};\r\n\r\n      // Loop through each columns config to find out if it is in the split 1 region and set it as the last item...then it will be overwritten by next in line\r\n      DataTable.eachColumn(function (columnId) {\r\n         var columnConfig = DataTable.getColumnConfig(columnId);\r\n         if (columnConfig.split == 1) lastColumn = columnConfig;\r\n      });\r\n\r\n      return lastColumn;\r\n   }\r\n\r\n   /**\r\n    * @method grouping()\r\n    * perform any grouping operations\r\n    */\r\n   grouping() {\r\n      if (!this.settings.groupBy) return;\r\n\r\n      let $treetable = this.getDataTable();\r\n\r\n      // map: {\r\n      //     votes:[\"votes\", \"sum\"],\r\n      //     title:[\"year\"]\r\n      // }\r\n      let baseGroupMap = {};\r\n      let CurrentObject = this.datacollection.datasource;\r\n      CurrentObject.fields().forEach((f) => {\r\n         switch (f.key) {\r\n            case \"number\":\r\n               baseGroupMap[f.columnName] = [f.columnName, \"sum\"];\r\n               break;\r\n            case \"calculate\":\r\n            case \"formula\":\r\n               baseGroupMap[f.columnName] = [\r\n                  f.columnName,\r\n                  function (prop, listData) {\r\n                     if (!listData) return 0;\r\n\r\n                     let sum = 0;\r\n\r\n                     listData.forEach((r) => {\r\n                        sum += f.format(r) * 1;\r\n                     });\r\n\r\n                     return sum;\r\n                  },\r\n               ];\r\n               break;\r\n            case \"connectObject\":\r\n               baseGroupMap[f.columnName] = [\r\n                  f.columnName,\r\n                  function (prop, listData) {\r\n                     if (!listData || !listData.length) return 0;\r\n\r\n                     let count = 0;\r\n\r\n                     listData.forEach((r) => {\r\n                        var valRelation = r[f.relationName()];\r\n\r\n                        // array\r\n                        if (valRelation && valRelation.length != null)\r\n                           count += valRelation.length;\r\n                        // object\r\n                        else if (valRelation) count += 1;\r\n                     });\r\n\r\n                     return count;\r\n                  },\r\n               ];\r\n               break;\r\n            default:\r\n               baseGroupMap[f.columnName] = [\r\n                  f.columnName,\r\n                  function (prop, listData) {\r\n                     if (!listData || !listData.length) return 0;\r\n\r\n                     let count = 0;\r\n\r\n                     listData.forEach((r) => {\r\n                        var val = prop(r);\r\n\r\n                        // count only exists data\r\n                        if (val) {\r\n                           count += 1;\r\n                        }\r\n                     });\r\n\r\n                     return count;\r\n                  },\r\n               ];\r\n               break;\r\n         }\r\n      });\r\n\r\n      // set group definition\r\n      // DataTable.define(\"scheme\", {\r\n      //    $group: {\r\n      //       by: settings.groupBy,\r\n      //       map: groupMap\r\n      //    }\r\n      // });\r\n\r\n      // NOTE: https://snippet.webix.com/e3a2bf60\r\n      let groupBys = (this.settings.groupBy || \"\")\r\n         .split(\",\")\r\n         .map((g) => g.trim());\r\n      // Reverse the array NOTE: call .group from child to root\r\n      groupBys = groupBys.reverse();\r\n      groupBys.forEach((colName, gIndex) => {\r\n         let by;\r\n         let groupMap = this.AB.cloneDeep(baseGroupMap);\r\n\r\n         // Root\r\n         if (gIndex == groupBys.length - 1) {\r\n            by = colName;\r\n         }\r\n         // Sub groups\r\n         else {\r\n            by = (row) => {\r\n               let byValue = row[colName];\r\n               for (let i = gIndex + 1; i < groupBys.length; i++) {\r\n                  byValue = `${row[groupBys[i]]} - ${byValue}`;\r\n               }\r\n               return byValue;\r\n            };\r\n\r\n            // remove parent group data\r\n            groupBys.forEach((gColName) => {\r\n               if (gColName != colName) groupMap[gColName] = [gColName];\r\n            });\r\n         }\r\n\r\n         $treetable.data.group({\r\n            by: by,\r\n            map: groupMap,\r\n         });\r\n      });\r\n   }\r\n\r\n   hideHeader() {\r\n      var DataTable = this.getDataTable();\r\n      DataTable.define(\"header\", false);\r\n      DataTable.refresh();\r\n   }\r\n\r\n   /**\r\n    * @function onAfterColumnDrop\r\n    * When an editor drops a column to save a new column order\r\n    * @param {string} sourceId\r\n    *        the columnName of the item dragged\r\n    * @param {string} targetId\r\n    *        the columnName of the item dropped on\r\n    * @param {event} event\r\n    */\r\n   async onAfterColumnDrop(sourceId, targetId, event) {\r\n      var DataTable = this.getDataTable();\r\n      let CurrentObject = this.datacollection.datasource;\r\n      var settings = this.settings;\r\n      var columnConfig = this.localSettings();\r\n\r\n      // Reorder our current columnConfig\r\n      // We know what was moved and what item it has replaced/pushed forward\r\n      // so first we want to splice the item moved out of the array of fields\r\n      // and store it so we can put it somewhere else\r\n      let itemMoved = null;\r\n      let oPos = 0; // original position\r\n      for (var i = 0; i < columnConfig.length; i++) {\r\n         if (columnConfig[i].id == sourceId) {\r\n            itemMoved = columnConfig[i];\r\n            columnConfig.splice(i, 1);\r\n            oPos = i;\r\n            break;\r\n         }\r\n      }\r\n      // once we have removed/stored it we can find where its new position\r\n      // will be by looping back through the array and finding the item it\r\n      // is going to push forward\r\n      for (var j = 0; j < columnConfig.length; j++) {\r\n         if (columnConfig[j].id == targetId) {\r\n            // if the original position was before the new position we will\r\n            // follow webix's logic that the drop should go after the item\r\n            // it was placed on\r\n            if (oPos <= j) {\r\n               j++;\r\n            }\r\n            columnConfig.splice(j, 0, itemMoved);\r\n            break;\r\n         }\r\n      }\r\n\r\n      // special case: dropped on end and need to update .fillspace\r\n      // if (j == columnConfig.length - 1) {\r\n      //    if (columnConfig[j - 1].fillspace) {\r\n      //       columnConfig[j - 1].fillspace = false;\r\n      //       columnConfig[j].fillspace = true;\r\n      //    }\r\n      // }\r\n\r\n      // if we allow local changes\r\n      this.localSettings(columnConfig);\r\n      if (settings.saveLocal) {\r\n         this.localSettingsSave();\r\n      }\r\n\r\n      // Now emit this event, in case an external object is wanting to\r\n      // respond to this: ABDesigner.objectBuilder, Interface  Designer,\r\n      // we send back an array[ ABField.id, ...] in the order we have\r\n      // them.\r\n      this.emit(\r\n         \"column.order\",\r\n         columnConfig.map((c) => c.fieldID)\r\n      );\r\n\r\n      this.refreshHeader();\r\n\r\n      // CurrentObject.fieldReorder(sourceId, targetId)\r\n      //    .then(() => {\r\n      //       // reset each column after a drop so we do not have multiple fillspace and minWidth settings\r\n      //       var editiable = settings.isEditable;\r\n      //       if (DataTable.config.accessLevel < 2) {\r\n      //          editiable = false;\r\n      //       }\r\n      //       var columnHeaders = CurrentObject.columnHeaders(true, editiable);\r\n      //       columnHeaders.forEach(function (col) {\r\n      //          if (col.id == sourceId && col.fillspace == true) {\r\n      //             columnHeader.fillspace = false;\r\n      //             columnHeader.minWidth = columnHeader.width;\r\n      //          }\r\n      //       });\r\n\r\n      //       _logic.callbacks.onColumnOrderChange(CurrentObject);\r\n      //       // freeze columns:\r\n      //       let frozenColumnID =\r\n      //          settings.frozenColumnID != null\r\n      //             ? settings.frozenColumnID\r\n      //             : CurrentObject.workspaceFrozenColumnID;\r\n      //       if (frozenColumnID != \"\") {\r\n      //          DataTable.define(\r\n      //             \"leftSplit\",\r\n      //             DataTable.getColumnIndex(frozenColumnID) + columnSplitLeft\r\n      //          );\r\n      //       } else {\r\n      //          DataTable.define(\"leftSplit\", columnSplitLeft);\r\n      //       }\r\n      //       _logic.freezeDeleteColumn();\r\n      //       DataTable.refreshColumns();\r\n      //    })\r\n      //    .catch((err) => {\r\n      //       OP.Error.log(\"Error saving new column order:\", {\r\n      //          error: err,\r\n      //       });\r\n      //    });\r\n   }\r\n\r\n   /**\r\n    * @function onAfterEditStop\r\n    * When an editor is finished.\r\n    * @param {json} state\r\n    * @param {} editor\r\n    * @param {} ignoreUpdate\r\n    * @return\r\n    */\r\n   async onAfterEditStop(state, editor, ignoreUpdate) {\r\n      // state:   {value: \"new value\", old: \"old value\"}\r\n      // editor:  { column:\"columnName\", row:ID, value:'value', getInputNode:fn(), config:{}, focus: fn(), getValue: fn(), setValue: function, getInputNode: function, render: function…}\r\n\r\n      var DataTable = this.getDataTable();\r\n\r\n      // if you don't edit an empty cell we just need to move on\r\n      if (\r\n         (state.old == null && state.value === \"\") ||\r\n         (state.old === \"\" && state.value === \"\")\r\n      ) {\r\n         DataTable.clearSelection();\r\n         return false;\r\n      }\r\n\r\n      if (editor.config) {\r\n         switch (editor.config.editor) {\r\n            case \"number\":\r\n               state.value = parseFloat(state.value);\r\n               break;\r\n            case \"datetime\":\r\n               state.value = state.value.getTime();\r\n               if (state && state.old && state.old.getTime)\r\n                  state.old = state.old.getTime();\r\n               break;\r\n            default:\r\n            // code block\r\n         }\r\n      }\r\n\r\n      if (state.value != state.old) {\r\n         var item = DataTable.getItem(editor.row);\r\n         item[editor.column] = state.value;\r\n\r\n         DataTable.removeCellCss(item.id, editor.column, \"webix_invalid\");\r\n         DataTable.removeCellCss(item.id, editor.column, \"webix_invalid_cell\");\r\n\r\n         var CurrentObject = this.datacollection.datasource;\r\n         var validator = CurrentObject.isValidData(item);\r\n         if (validator.pass()) {\r\n            //// Question: do we submit full item updates?  or just patches?\r\n            // IF Patch:\r\n            // var patch = {};\r\n            // patch.id = item.id;\r\n            // patch[editor.column] = item[editor.column];\r\n            // await CurrentObject.model().update(item.id, patch)\r\n\r\n            try {\r\n               await CurrentObject.model().update(item.id, item);\r\n               if (DataTable.exists(editor.row)) {\r\n                  DataTable.updateItem(editor.row, item);\r\n                  DataTable.clearSelection();\r\n                  DataTable.refresh(editor.row);\r\n               }\r\n            } catch (err) {\r\n               this.AB.notify.developer(err, {\r\n                  context: \"ABViewGrid:onAfterEditStop(): Error saving item\",\r\n                  item,\r\n                  editor,\r\n                  state,\r\n                  object: CurrentObject.toObj(),\r\n               });\r\n\r\n               DataTable.clearSelection();\r\n               if (\r\n                  this.AB.Validation.isGridValidationError(\r\n                     err,\r\n                     editor.row,\r\n                     DataTable\r\n                  )\r\n               ) {\r\n                  // Do we reset the value?\r\n                  // item[editor.column] = state.old;\r\n                  // DataTable.updateItem(editor.row, item);\r\n               } else {\r\n                  // this was some other Error!\r\n               }\r\n            }\r\n            // CurrentObject.model()\r\n            //    .update(item.id, item)\r\n            //    .then(() => {\r\n            //       if (DataTable.exists(editor.row)) {\r\n            //          DataTable.updateItem(editor.row, item);\r\n            //          DataTable.clearSelection();\r\n            //          DataTable.refresh(editor.row);\r\n            //       }\r\n            //    })\r\n            //    .catch((err) => {\r\n            //       OP.Error.log(\"Error saving item:\", {\r\n            //          error: err\r\n            //       });\r\n\r\n            //       DataTable.clearSelection();\r\n            //       if (\r\n            //          OP.Validation.isGridValidationError(\r\n            //             err,\r\n            //             editor.row,\r\n            //             DataTable\r\n            //          )\r\n            //       ) {\r\n            //          // Do we reset the value?\r\n            //          // item[editor.column] = state.old;\r\n            //          // DataTable.updateItem(editor.row, item);\r\n            //       } else {\r\n            //          // this was some other Error!\r\n            //       }\r\n            //    });\r\n         } else {\r\n            validator.updateGrid(editor.row, DataTable);\r\n         }\r\n      } else {\r\n         DataTable.clearSelection();\r\n      }\r\n      return false;\r\n\r\n      // var item = $$(self.webixUiId.objectDatatable).getItem(editor.row);\r\n\r\n      // self.updateRowData(state, editor, ignoreUpdate)\r\n      //    .fail(function (err) { // Cached\r\n      //       item[editor.column] = state.old;\r\n      //       $$(self.webixUiId.objectDatatable).updateItem(editor.row, item);\r\n      //       $$(self.webixUiId.objectDatatable).refresh(editor.row);\r\n\r\n      //       // TODO : Message\r\n\r\n      //       $$(self.webixUiId.objectDatatable).hideProgress();\r\n      //    })\r\n      //    .then(function (result) {\r\n      //       if (item) {\r\n      //          item[editor.column] = state.value;\r\n\r\n      //          if (result && result.constructor.name === 'Cached' && result.isUnsync())\r\n      //             item.isUnsync = true;\r\n\r\n      //          $$(self.webixUiId.objectDatatable).updateItem(editor.row, item);\r\n      //       }\r\n\r\n      //       // TODO : Message\r\n\r\n      //       $$(self.webixUiId.objectDatatable).hideProgress();\r\n      //    });\r\n   }\r\n\r\n   /**\r\n    * @function onAfterSelect\r\n    * This is when a user clicks on a cell.  We use the onAfterSelect to\r\n    * trigger a normal .editCell() if there isn't a custom editor for this field.\r\n    * @param {json} data webix cell data\r\n    * @return\r\n    */\r\n   onAfterSelect(data /*, preserve */) {\r\n      // data: {row: 1, column: \"name\", id: \"1_name\", toString: function}\r\n      // data.row: ABObject.id\r\n      // data.column => columnName of the field\r\n\r\n      // Normal update data\r\n      this.getDataTable()?.editCell(data.row, data.column);\r\n   }\r\n\r\n   /**\r\n    * @function onColumnResizeResize\r\n    * This is when a user adjusts the size of a column\r\n    * @param {} columnName\r\n    * @param {int} newWidth\r\n    * @param {int} oldWidth\r\n    * @param {} user_action\r\n    * @return\r\n    */\r\n   async onColumnResize(columnName, newWidth, oldWidth, user_action) {\r\n      // update the settings\r\n\r\n      var requireRefresh = false;\r\n      if (newWidth < 30) {\r\n         newWidth = 30;\r\n         requireRefresh = true;\r\n         webix.message({\r\n            type: \"info\",\r\n            text: this.AB.Multilingual.label(\"minimum column width is {0}\", [\r\n               30,\r\n            ]),\r\n            expire: 1000,\r\n         });\r\n      }\r\n\r\n      var localSettings = this.localSettings();\r\n      if (localSettings) {\r\n         var header = localSettings.find((h) => h.id == columnName);\r\n         if (header) {\r\n            header.width = newWidth;\r\n            delete header.adjust;\r\n         }\r\n      }\r\n\r\n      this.localSettings(localSettings);\r\n      if (this.settings.saveLocal) {\r\n         this.localSettingsSave();\r\n         // for (const item in GridSettings) {\r\n         //    GridSettings[item].forEach((item) => {\r\n         //       // we cannot include field info because of the cicular structure\r\n         //       if (item?.footer?.field) {\r\n         //          delete item.footer.field;\r\n         //       }\r\n         //    });\r\n         // }\r\n         // await this.AB.Storage.set(KEY_STORAGE_SETTINGS, GridSettings);\r\n      }\r\n\r\n      // refresh the display\r\n      if (requireRefresh) {\r\n         this.refreshHeader();\r\n      }\r\n      this.freezeDeleteColumn();\r\n\r\n      // this.getDataTable().refreshColumns();\r\n\r\n      // TODO: allow external app to respond in special cases:\r\n      // eg: ABDesigner object workspace, interface builder, etc...\r\n      this.emit(\"column.resize\", columnName, newWidth, oldWidth);\r\n   }\r\n\r\n   /**\r\n    * @method onHeaderClick\r\n    * process the user clicking on the header for one of our columns.\r\n    */\r\n   onHeaderClick(id, e, node) {\r\n      if (this.skippableColumns.indexOf(id.column) != -1) return false;\r\n\r\n      // save our EditNode & EditField:\r\n      // this.EditNode = node;\r\n\r\n      var EditField = this.datacollection.datasource.fields(\r\n         (f) => f.columnName == id.column\r\n      )[0];\r\n      // if (this.EditField) {\r\n      //    // show the popup\r\n      //    PopupHeaderEditComponent.show(node, this.EditField);\r\n      // }\r\n\r\n      this.emit(\"column.header.clicked\", node, EditField);\r\n      return false;\r\n   }\r\n\r\n   /**\r\n    * @method onShow()\r\n    * perform any preparations necessary when showing this component.\r\n    */\r\n   onShow() {\r\n      super.onShow();\r\n\r\n      // make sure our grid is properly .adjust()ed to the screen.\r\n      this.getDataTable()?.adjust();\r\n\r\n      var dv = this.datacollection;\r\n      if (dv) {\r\n         this.eventAdd({\r\n            emitter: dv,\r\n            eventName: \"changeCursor\",\r\n            listener: this.handler_select,\r\n         });\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method ready()\r\n    * Indicate that our datatable is currently ready for operation.\r\n    */\r\n   ready() {\r\n      this.getDataTable()?.hideProgress?.();\r\n   }\r\n\r\n   /**\r\n    * @function refreshHeader()\r\n    *\r\n    * refresh the header for the table apart from the refresh() command\r\n    * @param {bool} ignoreLocal\r\n    *        Should we ignore our local settings and build directly from\r\n    *        our config settings?\r\n    */\r\n   refreshHeader(ignoreLocal = false) {\r\n      // columnSplitRight = 0;\r\n      // wait until we have an Object defined:\r\n      var CurrentObject = this.datacollection.datasource;\r\n      if (!CurrentObject) return;\r\n\r\n      var ids = this.ids;\r\n      var DataTable = $$(ids.datatable);\r\n      if (!DataTable) return;\r\n\r\n      var accessLevel = DataTable.config.accessLevel;\r\n      DataTable.define(\"leftSplit\", 0);\r\n      DataTable.define(\"rightSplit\", 0);\r\n\r\n      let rowHeight = 0;\r\n      CurrentObject.imageFields().forEach((image) => {\r\n         if (\r\n            image.settings.useHeight &&\r\n            image.settings.imageHeight > rowHeight\r\n         ) {\r\n            rowHeight = image.settings.imageHeight;\r\n         }\r\n      });\r\n      if (rowHeight) {\r\n         DataTable.define(\"rowHeight\", rowHeight);\r\n      }\r\n\r\n      // DataTable.clearAll();\r\n\r\n      var settings = this.settings;\r\n      var editable = settings.isEditable;\r\n      if (DataTable.config.accessLevel < 2) {\r\n         editable = false;\r\n      }\r\n\r\n      //// update DataTable structure:\r\n      // get column list from our local settings\r\n      var objColumnHeaders = CurrentObject.columnHeaders(\r\n         true,\r\n         editable,\r\n         // TRANSITION: moving these from .columnHeaders() to here:\r\n         [], //settings.summaryColumns,\r\n         [], //settings.countColumns,\r\n         [] //settings.hiddenFields\r\n      );\r\n      var columnHeaders = this.localSettings();\r\n      if (!columnHeaders || ignoreLocal) {\r\n         // if that is empty, pull from our settings.columnConfig\r\n         columnHeaders = this.AB.cloneDeep(this.settings.columnConfig);\r\n      }\r\n      if (columnHeaders.length == 0) {\r\n         // if that is empty for some reason, rebuild from our CurrentObject\r\n\r\n         columnHeaders = objColumnHeaders;\r\n      }\r\n\r\n      // sanity check:\r\n      // columnHeaders can't contain a column that doesn't exist in objColumHeaders:\r\n      // (eg: a field might have been removed but localStorage doesn't know that )\r\n      var objColumnHeaderIDs = objColumnHeaders.map((h) => h.fieldID);\r\n      columnHeaders = columnHeaders.filter(\r\n         (c) => objColumnHeaderIDs.indexOf(c.fieldID) > -1\r\n      );\r\n\r\n      // default our columnConfig values to our columnHeaders:\r\n      columnHeaders.forEach((c) => {\r\n         // we want to overwrite our default settings with anything stored\r\n         // in local storage\r\n         var origCol = objColumnHeaders.find((h) => h.fieldID == c.fieldID);\r\n\r\n         // none of our functions can be stored in localStorage, so scan\r\n         // the original column and attach any template functions to our\r\n         // stashed copy.\r\n         // also the suggest for selects and connected fields may contain a\r\n         // function so go ahead and copy the original suggest to the column\r\n         Object.keys(origCol).forEach((k) => {\r\n            if (typeof origCol[k] == \"function\" || k == \"suggest\") {\r\n               c[k] = origCol[k];\r\n            }\r\n         });\r\n\r\n         var f = CurrentObject.fieldByID(c.fieldID);\r\n         if (!f) return;\r\n\r\n         // if it's a hidden field:\r\n         if (settings.hiddenFields.indexOf(f.columnName) > -1) {\r\n            c.hidden = true;\r\n         }\r\n         // add summary footer:\r\n         if (settings.summaryColumns.indexOf(f.id) > -1) {\r\n            if (f.key == \"calculate\" || f.key == \"formula\") {\r\n               c.footer = { content: \"totalColumn\", field: f };\r\n            } else {\r\n               c.footer = { content: \"summColumn\" };\r\n            }\r\n         }\r\n         // or add the count footer\r\n         else if (settings.countColumns.indexOf(f.id) > -1)\r\n            c.footer = { content: \"countColumn\" };\r\n      });\r\n\r\n      var localSettings = this.localSettings();\r\n      if (!localSettings || ignoreLocal) {\r\n         this.localSettings(columnHeaders);\r\n         localSettings = columnHeaders;\r\n      }\r\n      columnHeaders = this.AB.cloneDeep(localSettings);\r\n\r\n      var fieldValidations = [];\r\n      var rulePops = [];\r\n\r\n      columnHeaders.forEach((col) => {\r\n         col.fillspace = false;\r\n\r\n         // parse the rules because they were stored as a string\r\n         // check if rules are still a string...if so lets parse them\r\n         if (col.validationRules) {\r\n            if (typeof col.validationRules === \"string\") {\r\n               col.validationRules = JSON.parse(col.validationRules);\r\n            }\r\n\r\n            if (col.validationRules.length) {\r\n               var validationUI = [];\r\n               // there could be more than one so lets loop through and build the UI\r\n               col.validationRules.forEach((rule) => {\r\n                  var Filter = this.AB.filterComplexNew(\r\n                     col.id /*+ \"_\" + webix.uid()*/\r\n                  );\r\n                  // add the new ui to an array so we can add them all at the same time\r\n                  validationUI.push(Filter.ui);\r\n                  // store the filter's info so we can assign values and settings after the ui is rendered\r\n                  fieldValidations.push({\r\n                     filter: Filter,\r\n                     view: Filter.ids.querybuilder,\r\n                     columnName: col.id,\r\n                     validationRules: rule.rules,\r\n                     invalidMessage: rule.invalidMessage,\r\n                  });\r\n               });\r\n               // create a unique view id for popup\r\n               var popUpId = ids.rules + \"_\" + col.id; /* + \"_\" + webix.uid() */\r\n               // store the popup ids so we can remove the later\r\n               rulePops.push(popUpId);\r\n               // add the popup to the UI but don't show it\r\n               webix.ui({\r\n                  view: \"popup\",\r\n                  css: \"ab-rules-popup\",\r\n                  id: popUpId,\r\n                  body: {\r\n                     rows: validationUI,\r\n                  },\r\n               });\r\n            }\r\n         }\r\n\r\n         // group header\r\n         if (\r\n            settings.groupBy &&\r\n            (settings.groupBy || \"\").indexOf(col.id) > -1\r\n         ) {\r\n            var groupField = CurrentObject.fieldByID(col.fieldID);\r\n            if (groupField) {\r\n               col.template = (obj, common) => {\r\n                  // return common.treetable(obj, common) + obj.value;\r\n                  if (obj.$group) {\r\n                     let rowData = this.AB.cloneDeep(obj);\r\n                     rowData[groupField.columnName] = rowData.value;\r\n\r\n                     return (\r\n                        common.treetable(obj, common) +\r\n                        groupField.format(rowData)\r\n                     );\r\n                  } else return groupField.format(obj);\r\n               };\r\n            }\r\n         }\r\n      });\r\n\r\n      if (fieldValidations.length) {\r\n         // we need to store the rules for use later so lets build a container array\r\n         var complexValidations = [];\r\n         fieldValidations.forEach((f) => {\r\n            // init each ui to have the properties (app and fields) of the object we are editing\r\n            // f.filter.applicationLoad(CurrentObject.application);\r\n            f.filter.fieldsLoad(CurrentObject.fields());\r\n            // now we can set the value because the fields are properly initialized\r\n            f.filter.setValue(f.validationRules);\r\n            // if there are validation rules present we need to store them in a lookup hash\r\n            // so multiple rules can be stored on a single field\r\n            if (!Array.isArray(complexValidations[f.columnName]))\r\n               complexValidations[f.columnName] = [];\r\n\r\n            // now we can push the rules into the hash\r\n            complexValidations[f.columnName].push({\r\n               filters: $$(f.view).getFilterHelper(),\r\n               values: DataTable.getSelectedItem(),\r\n               invalidMessage: f.invalidMessage,\r\n            });\r\n         });\r\n         var rules = {};\r\n\r\n         // store the rules in a data param to be used later\r\n         DataTable.$view.complexValidations = complexValidations;\r\n         // use the lookup to build the validation rules\r\n         Object.keys(complexValidations).forEach(function (key) {\r\n            rules[key] = function (value, data) {\r\n               // default valid is true\r\n               var isValid = true;\r\n               var invalidMessage = \"\";\r\n               DataTable.$view.complexValidations[key].forEach((filter) => {\r\n                  // convert rowData from { colName : data } to { id : data }\r\n                  var newData = {};\r\n                  (CurrentObject.fields() || []).forEach((field) => {\r\n                     newData[field.id] = data[field.columnName];\r\n                  });\r\n                  // for the case of \"this_object\" conditions:\r\n                  if (data.uuid) {\r\n                     newData[\"this_object\"] = data.uuid;\r\n                  }\r\n\r\n                  // use helper funtion to check if valid\r\n                  var ruleValid = filter.filters(newData);\r\n                  // if invalid we need to tell the field\r\n                  if (ruleValid == false) {\r\n                     isValid = false;\r\n                     invalidMessage = filter.invalidMessage;\r\n                  }\r\n               });\r\n               if (isValid == false) {\r\n                  // we also need to define an error message\r\n                  webix.message({\r\n                     type: \"error\",\r\n                     text: invalidMessage,\r\n                  });\r\n               }\r\n               return isValid;\r\n            };\r\n         });\r\n         // define validation rules\r\n         DataTable.define(\"rules\", rules);\r\n         // store the array of view ids on the webix object so we can get it later\r\n         DataTable.config.rulePops = rulePops;\r\n         DataTable.refresh();\r\n      } else {\r\n         // check if the previous datatable had rule popups and remove them\r\n         if (DataTable.config.rulePops) {\r\n            DataTable.config.rulePops.forEach((popup) => {\r\n               if ($$(popup)) $$(popup).destructor();\r\n            });\r\n         }\r\n         // remove any validation rules from the previous table\r\n         DataTable.define(\"rules\", {});\r\n         DataTable.refresh();\r\n      }\r\n\r\n      var addedColumns = [];\r\n      // {array} the .id of the columnHeaders we add based upon our settings.\r\n      // this will help us pick the lastColumn that is part of the\r\n      // object.\r\n\r\n      if (settings.labelAsField) {\r\n         // console.log(CurrentObject);\r\n         columnHeaders.unshift({\r\n            id: \"appbuilder_label_field\",\r\n            header: \"Label\",\r\n            fillspace: true,\r\n            template: function (obj) {\r\n               return CurrentObject.displayData(obj);\r\n            },\r\n            // css: { 'text-align': 'center' }\r\n         });\r\n         addedColumns.push(\"appbuilder_label_field\");\r\n      }\r\n\r\n      if (settings.massUpdate && accessLevel == 2) {\r\n         columnHeaders.unshift({\r\n            id: \"appbuilder_select_item\",\r\n            header: { content: \"masterCheckbox\", contentId: \"mch\" },\r\n            width: 40,\r\n            template: \"<div class='singleSelect'>{common.checkbox()}</div>\",\r\n            css: { \"text-align\": \"center\" },\r\n         });\r\n         this.columnSplitLeft = 1;\r\n         addedColumns.push(\"appbuilder_select_item\");\r\n      } else {\r\n         this.columnSplitLeft = 0;\r\n      }\r\n      if (settings.detailsPage != \"\" && !settings.hideButtons) {\r\n         columnHeaders.push({\r\n            id: \"appbuilder_view_detail\",\r\n            header: \"\",\r\n            width: 40,\r\n            template: function (obj, common) {\r\n               return \"<div class='detailsView'><span class='webix_icon fa fa-eye'></span></div>\";\r\n            },\r\n            css: { \"text-align\": \"center\" },\r\n         });\r\n         // columnSplitRight++;\r\n         addedColumns.push(\"appbuilder_view_detail\");\r\n      }\r\n      if (settings.trackView != 0 && accessLevel == 2) {\r\n         columnHeaders.push({\r\n            id: \"appbuilder_view_track\",\r\n            header: \"\",\r\n            width: 40,\r\n            template:\r\n               \"<div class='track'><span class='track fa fa-history'></span></div>\",\r\n            css: { \"text-align\": \"center\", cursor: \"pointer\" },\r\n         });\r\n         // columnSplitRight++;\r\n         addedColumns.push(\"appbuilder_view_track\");\r\n      }\r\n      if (\r\n         settings.editPage != \"\" &&\r\n         !settings.hideButtons &&\r\n         accessLevel == 2\r\n      ) {\r\n         columnHeaders.push({\r\n            id: \"appbuilder_view_edit\",\r\n            header: \"\",\r\n            width: 40,\r\n            template: \"<div class='edit'>{common.editIcon()}</div>\",\r\n            css: { \"text-align\": \"center\" },\r\n         });\r\n         // columnSplitRight++;\r\n         addedColumns.push(\"appbuilder_view_edit\");\r\n      }\r\n      if (settings.allowDelete && accessLevel == 2) {\r\n         columnHeaders.push({\r\n            id: \"appbuilder_trash\",\r\n            header: \"\",\r\n            width: 40,\r\n            template: \"<div class='trash'>{common.trashIcon()}</div>\",\r\n            css: { \"text-align\": \"center\" },\r\n         });\r\n         // columnSplitRight++;\r\n         addedColumns.push(\"appbuilder_trash\");\r\n      }\r\n\r\n      // find our last displayed column (that isn't one we added);\r\n      var lastCol = null;\r\n      for (var i = columnHeaders.length - 1; i >= 0; i--) {\r\n         if (!lastCol) {\r\n            var col = columnHeaders[i];\r\n            if (!col.hidden && addedColumns.indexOf(col.id) == -1) {\r\n               lastCol = col;\r\n               break;\r\n            }\r\n         }\r\n      }\r\n\r\n      if (lastCol) {\r\n         lastCol.fillspace = true;\r\n         lastCol.minWidth = lastCol.width;\r\n         lastCol.width = 150; // set a width for last column but by default it will fill the available space or use the minWidth to take up more\r\n      }\r\n\r\n      DataTable.refreshColumns(columnHeaders);\r\n\r\n      // the addedColumns represent the additional icons that can be added.\r\n      this.columnSplitRight = addedColumns.length;\r\n      // the .massUpdate gets added to Left so don't include that in split right:\r\n      if (addedColumns.indexOf(\"appbuilder_select_item\") > -1)\r\n         this.columnSplitRight -= 1;\r\n      // .columnSplitRight can't be < 0\r\n      if (this.columnSplitRight < 0) this.columnSplitRight = 0;\r\n\r\n      // freeze columns:\r\n      let frozenColumnID = settings.frozenColumnID;\r\n      if (frozenColumnID != \"\") {\r\n         DataTable.define(\r\n            \"leftSplit\",\r\n            DataTable.getColumnIndex(frozenColumnID) + 1\r\n         );\r\n      } else {\r\n         DataTable.define(\"leftSplit\", this.columnSplitLeft);\r\n      }\r\n      this.freezeDeleteColumn();\r\n      DataTable.refreshColumns();\r\n\r\n      // }\r\n   }\r\n\r\n   /**\r\n    * localSettingsSave()\r\n    * Persist our current working copy of our GridSettings to localStorage.\r\n    * @return {Promise}\r\n    */\r\n   async localSettingsSave() {\r\n      var savedLocalSettings =\r\n         (await this.AB.Storage.get(KEY_STORAGE_SETTINGS)) || {};\r\n\r\n      savedLocalSettings[this.settingsID()] = GridSettings[this.settingsID()]\r\n         ? GridSettings[this.settingsID()]\r\n         : [];\r\n\r\n      for (const item in savedLocalSettings) {\r\n         savedLocalSettings[item].forEach((item) => {\r\n            // we cannot include field info because of the cicular structure\r\n            if (item?.footer?.field) {\r\n               delete item.footer.field;\r\n            }\r\n         });\r\n      }\r\n\r\n      await this.AB.Storage.set(KEY_STORAGE_SETTINGS, savedLocalSettings);\r\n   }\r\n\r\n   /**\r\n    * @method localSettings()\r\n    * An interface method to handle get/set operations on our local GridSettings\r\n    * storage.\r\n    * .localStorage() : a getter to return the current value\r\n    * .localStorage(value) : a setter to save value as our current value.\r\n    * @param {various} value\r\n    *        the value to set to our settings.\r\n    * @return {various}\r\n    */\r\n   localSettings(value = null) {\r\n      if (value) {\r\n         GridSettings[this.settingsID()] = value;\r\n      } else {\r\n         return GridSettings[this.settingsID()];\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method selectRow()\r\n    * Select the grid row that correspondes to the provided rowData.\r\n    * @param {json} rowData\r\n    *        A key=>value hash of data that matches an entry in the grid.\r\n    *        rowData.id should match an existing entry.\r\n    */\r\n   selectRow(rowData) {\r\n      let $DataTable = this.getDataTable();\r\n      if (!$DataTable) return;\r\n\r\n      if (rowData == null) $DataTable.unselect();\r\n      else if (rowData?.id && $DataTable.exists(rowData.id))\r\n         $DataTable.select(rowData.id, false);\r\n      else $DataTable.select(null, false);\r\n   }\r\n\r\n   /**\r\n    * @method settingsID()\r\n    * return the unique key for this Grid + object combo to store data\r\n    * in our localStorage.\r\n    * @return {string}\r\n    */\r\n   settingsID() {\r\n      var CurrentObject = this.datacollection.datasource;\r\n      return `${this.id}-${CurrentObject ? CurrentObject.id : \"0\"}`;\r\n   }\r\n\r\n   /**\r\n    * @method toggleTab()\r\n    * recursively toggle tabs into view once a user chooses a detail/edit view\r\n    * to display.\r\n    * @param {ABView.id} parentTab\r\n    * @param {webix.view} wb\r\n    */\r\n   toggleTab(parentTab, wb) {\r\n      // find the tab\r\n      var tab = wb.getTopParentView().queryView({ id: parentTab });\r\n      // if we didn't pass and id we may have passed a domNode\r\n      if (tab == null) {\r\n         tab = $$(parentTab);\r\n      }\r\n\r\n      if (tab == null) return;\r\n\r\n      // set the tabbar to to the tab\r\n      var tabbar = tab.getParentView().getParentView();\r\n\r\n      if (tabbar == null) return;\r\n\r\n      if (tabbar.setValue) {\r\n         // if we have reached the top we won't have a tab\r\n         tabbar.setValue(parentTab);\r\n      }\r\n\r\n      // find if it is in a multiview of a tab\r\n      var nextTab = tabbar.queryView({ view: \"scrollview\" }, \"parent\");\r\n      // if so then do this again\r\n      if (nextTab) {\r\n         this.toggleTab(nextTab, wb);\r\n      }\r\n   }\r\n\r\n   toggleUpdateDelete() {\r\n      var DataTable = this.getDataTable();\r\n      var checkedItems = 0;\r\n      DataTable.data.each(function (obj) {\r\n         if (\r\n            typeof obj != \"undefined\" &&\r\n            obj.hasOwnProperty(\"appbuilder_select_item\") &&\r\n            obj.appbuilder_select_item == 1\r\n         ) {\r\n            checkedItems++;\r\n         }\r\n      });\r\n      if (checkedItems > 0) {\r\n         this.enableUpdateDelete();\r\n      } else {\r\n         this.disableUpdateDelete();\r\n      }\r\n   }\r\n\r\n   toolbarDeleteSelected($view) {\r\n      var DataTable = this.getDataTable();\r\n      let CurrentObject = this.datacollection.datasource;\r\n      var deleteTasks = [];\r\n      DataTable.data.each(function (row) {\r\n         if (\r\n            typeof row != \"undefined\" &&\r\n            // row.hasOwnProperty(\"appbuilder_select_item\") &&\r\n            Object.prototype.hasOwnProperty.call(\r\n               row,\r\n               \"appbuilder_select_item\"\r\n            ) &&\r\n            row.appbuilder_select_item == 1\r\n         ) {\r\n            // NOTE: store a fn() to run later.\r\n            deleteTasks.push(() => CurrentObject.model().delete(row.id));\r\n         }\r\n      });\r\n\r\n      if (deleteTasks.length > 0) {\r\n         webix.confirm({\r\n            title: L(\"Delete Multiple Records\"),\r\n            text: L(\"Are you sure you want to delete the selected records?\"),\r\n            callback: async (result) => {\r\n               if (result) {\r\n                  // Now run those functions\r\n                  await Promise.all(deleteTasks.map((t) => t()));\r\n\r\n                  // Anything we need to do after we are done.\r\n                  this.disableUpdateDelete();\r\n               }\r\n            },\r\n         });\r\n      } else {\r\n         webix.alert({\r\n            title: L(\"No Records Selected\"),\r\n            text: L(\r\n               \"You need to select at least one record...did you drink your coffee today?\"\r\n            ),\r\n         });\r\n      }\r\n   }\r\n\r\n   toolbarFilter($view) {\r\n      this.viewGrid.filterHelper.showPopup($view);\r\n   }\r\n\r\n   toolbarSort($view) {\r\n      this.PopupSortDataTableComponent.show($view);\r\n   }\r\n\r\n   toolbarExport($view) {\r\n      this.PopupExport.show($view);\r\n   }\r\n\r\n   toolbarMassUpdate($view) {\r\n      this.PopupMassUpdateComponent.show($view);\r\n   }\r\n\r\n   /**\r\n    * @function toolTip()\r\n    *\r\n    * Retrieve the items toolTip\r\n    */\r\n   toolTip(obj, common) {\r\n      let CurrentObject = this.datacollection.datasource;\r\n      var imageFieldColNames = CurrentObject.imageFields().map(\r\n         (f) => f.columnName\r\n      );\r\n      var tip = \"\";\r\n      var columnName = common.column.id.replace(\" \", \"\");\r\n      if (Array.isArray(obj[columnName])) {\r\n         obj[columnName].forEach(function (o) {\r\n            if (o.text) tip += o.text + \"<br/>\";\r\n         });\r\n      } else if (typeof obj[columnName + \"__relation\"] != \"undefined\") {\r\n         var relationData = obj[columnName + \"__relation\"];\r\n         if (!Array.isArray(relationData)) relationData = [relationData];\r\n\r\n         (relationData || []).forEach(function (o) {\r\n            if (o) tip += o.text + \"<br/>\";\r\n         });\r\n      } else if (\r\n         typeof obj[columnName + \"__relation\"] != \"undefined\" &&\r\n         typeof obj[columnName] == \"number\"\r\n      ) {\r\n         tip = obj[columnName + \"__relation\"].text;\r\n      } else if (imageFieldColNames.indexOf(columnName) != -1) {\r\n         if (obj[columnName] == null) {\r\n            return \"\";\r\n         } else {\r\n            // TODO: we need to get this URL from the ABFieldImage object!\r\n            tip = `<img style='max-width: 500px; max-height: 500px;' src='/file/${obj[columnName]}' />`;\r\n         }\r\n      } else if (common.column.editor == \"date\") {\r\n         tip = common.column.format(obj[columnName]);\r\n      } else if (common.column.editor == \"richselect\") {\r\n         CurrentObject.fields().forEach(function (f) {\r\n            if (f.columnName == columnName) {\r\n               if (f.settings.options) {\r\n                  f.settings.options.forEach(function (o) {\r\n                     if (o.id == obj[columnName]) {\r\n                        tip = o.text;\r\n                     }\r\n                  });\r\n               }\r\n            }\r\n         });\r\n      } else {\r\n         tip = obj[columnName];\r\n      }\r\n      if (tip == null) {\r\n         return \"\";\r\n      } else {\r\n         return tip;\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @function toolTipOnBeforeRender()\r\n    *\r\n    * Add visibility \"hidden\" to all tooltips before render so we can move to a new location without the visual jump\r\n    */\r\n   toolTipOnBeforeRender(node) {\r\n      // var node = $$(ids.tooltip).getNode();\r\n      node.style.visibility = \"hidden\";\r\n   }\r\n\r\n   /**\r\n    * @function toolTipOnAfterRender()\r\n    *\r\n    * If the tooltip is displaying off the screen we want to try to reposition it for a better experience\r\n    */\r\n   toolTipOnAfterRender(node) {\r\n      // var node = $$(ids.tooltip).getNode();\r\n      if (node.firstChild != null && node.firstChild.nodeName == \"IMG\") {\r\n         setTimeout(function () {\r\n            var imgBottom = parseInt(node.style.top.replace(\"px\", \"\")) + 500;\r\n            var imgRight = parseInt(node.style.left.replace(\"px\", \"\")) + 500;\r\n            if (imgBottom > window.innerHeight) {\r\n               var imgOffsetY = imgBottom - window.innerHeight;\r\n               var newTop =\r\n                  parseInt(node.style.top.replace(\"px\", \"\")) - imgOffsetY;\r\n               node.style.top = newTop + \"px\";\r\n            }\r\n            if (imgRight > window.innerWidth) {\r\n               var imgOffsetX = imgRight - window.innerWidth;\r\n               var newLeft =\r\n                  parseInt(node.style.left.replace(\"px\", \"\")) - imgOffsetX;\r\n               node.style.left = newLeft + \"px\";\r\n            }\r\n            node.style.visibility = \"visible\";\r\n         }, 250);\r\n      } else {\r\n         node.style.visibility = \"visible\";\r\n      }\r\n   }\r\n}\r\n\r\nexport default class ABViewGrid extends ABViewGridCore {\r\n   /**\r\n    * @param {obj} values  key=>value hash of ABView values\r\n    * @param {ABApplication} application the application object this view is under\r\n    * @param {ABViewWidget} parent the ABViewWidget this view is a child of. (can be null)\r\n    */\r\n   // constructor(values, application, parent, defaultValues) {\r\n   //    super(values, application, parent, defaultValues);\r\n   // }\r\n\r\n   ///\r\n   /// Instance Methods\r\n   ///\r\n\r\n   /**\r\n    * @method fromValues()\r\n    *\r\n    * initialze this object with the given set of values.\r\n    * @param {obj} values\r\n    */\r\n   fromValues(values) {\r\n      super.fromValues(values);\r\n\r\n      // filter property\r\n      this.filterHelper.fromSettings(this.settings.gridFilter);\r\n   }\r\n\r\n   //\r\n   // Editor Related\r\n   //\r\n\r\n   /**\r\n    * @method editorComponent\r\n    * return the Editor for this UI component.\r\n    * the editor should display either a \"block\" view or \"preview\" of\r\n    * the current layout of the view.\r\n    * @param {string} mode what mode are we in ['block', 'preview']\r\n    * @return {Component}\r\n    */\r\n   // editorComponent(App, mode) {\r\n   //    var idBase = \"ABViewGridEditorComponent\";\r\n\r\n   //    var DataTable = this.component(App, idBase);\r\n\r\n   //    return {\r\n   //       ui: DataTable.ui,\r\n   //       logic: DataTable.logic,\r\n   //       onShow: DataTable.onShow,\r\n\r\n   //       init: () => {\r\n   //          // remove id of the component in caching for refresh .bind of the data collection\r\n   //          let dv = this.datacollection;\r\n   //          if (dv) dv.removeComponent(DataTable.ui.id);\r\n\r\n   //          DataTable.init();\r\n   //       },\r\n   //    };\r\n   // }\r\n\r\n   //\r\n   // Property Editor\r\n   //\r\n\r\n   // static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\r\n   //    var commonUI = super.propertyEditorDefaultElements(\r\n   //       App,\r\n   //       ids,\r\n   //       _logic,\r\n   //       ObjectDefaults\r\n   //    );\r\n   //    var L = App.Label;\r\n\r\n   //    var idBase = \"ABViewGridPropertyEditor\";\r\n\r\n   //    // initialize our popup editors with unique names so we don't overwrite the previous editor each time\r\n   //    PopupHideFieldComponent = new ABPopupHideFields(App, idBase + \"_hide\");\r\n   //    PopupFrozenColumnsComponent = new ABPopupFrozenColumns(\r\n   //       App,\r\n   //       idBase + \"_freeze\"\r\n   //    );\r\n\r\n   //    PopupSummaryColumnsComponent = new ABPopupSummaryColumns(\r\n   //       App,\r\n   //       idBase + \"_summary\"\r\n   //    );\r\n   //    PopupCountColumnsComponent = new ABPopupCountColumns(\r\n   //       App,\r\n   //       idBase + \"_count\"\r\n   //    );\r\n\r\n   //    PopupFilterProperty = ABViewPropertyFilterData.propertyComponent(\r\n   //       App,\r\n   //       idBase + \"_gridfiltermenu\"\r\n   //    );\r\n   //    this.linkPageComponent = ABViewPropertyLinkPage.propertyComponent(\r\n   //       App,\r\n   //       idBase + \"_gridlinkpage\"\r\n   //    );\r\n\r\n   //    let filter_property_popup = webix.ui({\r\n   //       view: \"window\",\r\n   //       modal: true,\r\n   //       position: \"center\",\r\n   //       resize: true,\r\n   //       width: 700,\r\n   //       height: 450,\r\n   //       css: \"ab-main-container\",\r\n   //       head: {\r\n   //          view: \"toolbar\",\r\n   //          cols: [\r\n   //             {\r\n   //                view: \"label\",\r\n   //                label: L(\"ab.component.grid.filterMenu\", \"*Filter Menu\"),\r\n   //             },\r\n   //          ],\r\n   //       },\r\n   //       body: PopupFilterProperty.ui,\r\n   //    });\r\n\r\n   //    _logic.newObject = () => {\r\n   //       var currView = _logic.currentEditObject();\r\n   //       currView.settings.objectWorkspace = {\r\n   //          sortFields: [],\r\n   //          filterConditions: [],\r\n   //          frozenColumnID: \"\",\r\n   //          hiddenFields: [],\r\n   //          summaryColumns: [],\r\n   //          countColumns: [],\r\n   //       };\r\n   //       currView.populatePopupEditors(currView);\r\n   //    };\r\n\r\n   //    // Open our popup editors when their settings button is clicked\r\n   //    _logic.toolbarFieldsVisible = ($view) => {\r\n   //       PopupHideFieldComponent.show($view, { pos: \"top\" });\r\n   //    };\r\n\r\n   //    _logic.toolbarFrozen = ($view) => {\r\n   //       PopupFrozenColumnsComponent.show($view, { pos: \"top\" });\r\n   //    };\r\n\r\n   //    _logic.gridFilterMenuShow = () => {\r\n   //       let currView = _logic.currentEditObject();\r\n\r\n   //       // show filter popup\r\n   //       filter_property_popup.show();\r\n   //    };\r\n\r\n   //    _logic.summaryColumns = ($view) => {\r\n   //       PopupSummaryColumnsComponent.show($view, { pos: \"top\" });\r\n   //    };\r\n\r\n   //    _logic.countColumns = ($view) => {\r\n   //       PopupCountColumnsComponent.show($view, { pos: \"top\" });\r\n   //    };\r\n\r\n   //    _logic.callbackHideFields = (settings) => {\r\n   //       var currView = _logic.currentEditObject();\r\n\r\n   //       currView.objectWorkspace = currView.objectWorkspace || {};\r\n   //       currView.objectWorkspace.hiddenFields = settings;\r\n\r\n   //       _logic.onChange();\r\n   //    };\r\n\r\n   //    _logic.callbackFrozenFields = (settings) => {\r\n   //       var currView = _logic.currentEditObject();\r\n\r\n   //       currView.objectWorkspace = currView.objectWorkspace || {};\r\n   //       currView.objectWorkspace.frozenColumnID = settings || \"\";\r\n\r\n   //       _logic.onChange();\r\n   //    };\r\n\r\n   //    _logic.callbackSaveWorkspace = (data) => {\r\n   //       // when we make a change in the popups we want to make sure we save the new workspace to the properties to do so just fire an onChange event\r\n   //       _logic.onChange();\r\n   //    };\r\n\r\n   //    _logic.gridFilterSave = () => {\r\n   //       var currView = _logic.currentEditObject();\r\n   //       // currView.settings.isFilterable = settings.filterOption == 1 ? true : false;\r\n\r\n   //       // hide filter popup\r\n   //       filter_property_popup.hide();\r\n\r\n   //       // refresh settings\r\n   //       this.propertyEditorValues(ids, currView);\r\n\r\n   //       // trigger a save()\r\n   //       this.propertyEditorSave(ids, currView);\r\n   //    };\r\n\r\n   //    _logic.gridFilterCancel = () => {\r\n   //       // hide filter popup\r\n   //       filter_property_popup.hide();\r\n   //    };\r\n\r\n   //    _logic.callbackSaveSummaryColumns = (data) => {\r\n   //       var currObj = _logic.currentEditObject();\r\n   //       currObj.settings.objectWorkspace.summaryColumns = data;\r\n\r\n   //       // when we make a change in the popups we want to make sure we save the new workspace to the properties to do so just fire an onChange event\r\n   //       _logic.onChange();\r\n   //    };\r\n\r\n   //    _logic.callbackSaveCountColumns = (data) => {\r\n   //       var currObj = _logic.currentEditObject();\r\n   //       currObj.settings.objectWorkspace.countColumns = data;\r\n\r\n   //       // when we make a change in the popups we want to make sure we save the new workspace to the properties to do so just fire an onChange event\r\n   //       _logic.onChange();\r\n   //    };\r\n\r\n   //    PopupHideFieldComponent.init({\r\n   //       onChange: _logic.callbackHideFields, // be notified when there is a change in the hidden fields\r\n   //    });\r\n\r\n   //    PopupFrozenColumnsComponent.init({\r\n   //       onChange: _logic.callbackFrozenFields, // be notified when there is a change in the hidden fields\r\n   //    });\r\n\r\n   //    PopupFilterProperty.init({\r\n   //       onSave: _logic.gridFilterSave,\r\n   //       onCancel: _logic.gridFilterCancel,\r\n   //    });\r\n\r\n   //    PopupSummaryColumnsComponent.init({\r\n   //       onChange: _logic.callbackSaveSummaryColumns, // be notified when there is a change in the summary columns\r\n   //    });\r\n\r\n   //    PopupCountColumnsComponent.init({\r\n   //       onChange: _logic.callbackSaveCountColumns, // be notified when there is a change in the count columns\r\n   //    });\r\n\r\n   //    var view = \"button\";\r\n   //    // in addition to the common .label  values, we\r\n   //    // ask for:\r\n   //    return commonUI.concat([\r\n   //       {\r\n   //          view: \"fieldset\",\r\n   //          label: L(\"ab.component.label.gridProperties\", \"*Grid Properties:\"),\r\n   //          labelWidth: App.config.labelWidthLarge,\r\n   //          body: {\r\n   //             type: \"clean\",\r\n   //             padding: 10,\r\n   //             rows: [\r\n   //                {\r\n   //                   view: \"checkbox\",\r\n   //                   name: \"isEditable\",\r\n   //                   labelRight: L(\r\n   //                      \"ab.component.label.isEditable\",\r\n   //                      \"*User can edit in grid.\"\r\n   //                   ),\r\n   //                   labelWidth: App.config.labelWidthCheckbox,\r\n   //                },\r\n   //                {\r\n   //                   view: \"checkbox\",\r\n   //                   name: \"massUpdate\",\r\n   //                   labelRight: L(\r\n   //                      \"ab.component.label.massUpdate\",\r\n   //                      \"*User can edit multiple items at one time.\"\r\n   //                   ),\r\n   //                   labelWidth: App.config.labelWidthCheckbox,\r\n   //                },\r\n   //                {\r\n   //                   view: \"checkbox\",\r\n   //                   name: \"allowDelete\",\r\n   //                   labelRight: L(\r\n   //                      \"ab.component.label.allowDelete\",\r\n   //                      \"*User can delete records.\"\r\n   //                   ),\r\n   //                   labelWidth: App.config.labelWidthCheckbox,\r\n   //                },\r\n   //                {\r\n   //                   view: \"checkbox\",\r\n   //                   name: \"isSortable\",\r\n   //                   labelRight: L(\r\n   //                      \"ab.component.label.isSortable\",\r\n   //                      \"*User can sort records.\"\r\n   //                   ),\r\n   //                   labelWidth: App.config.labelWidthCheckbox,\r\n   //                },\r\n   //                {\r\n   //                   view: \"checkbox\",\r\n   //                   name: \"isExportable\",\r\n   //                   labelRight: L(\r\n   //                      \"ab.component.label.isExportable\",\r\n   //                      \"*User can export.\"\r\n   //                   ),\r\n   //                   labelWidth: App.config.labelWidthCheckbox,\r\n   //                },\r\n   //             ],\r\n   //          },\r\n   //       },\r\n   //       {\r\n   //          view: \"fieldset\",\r\n   //          label: L(\"ab.component.label.dataSource\", \"*Grid Data:\"),\r\n   //          labelWidth: App.config.labelWidthLarge,\r\n   //          body: {\r\n   //             type: \"clean\",\r\n   //             padding: 10,\r\n   //             rows: [\r\n   //                {\r\n   //                   view: \"select\",\r\n   //                   name: \"datacollection\",\r\n   //                   label: L(\"ab.component.label.dataSource\", \"*Object:\"),\r\n   //                   labelWidth: App.config.labelWidthLarge,\r\n   //                   on: {\r\n   //                      onChange: (newv, oldv) => {\r\n   //                         if (newv != oldv) {\r\n   //                            $$(ids.detailsPage).setValue(\"\");\r\n   //                            $$(ids.editPage).setValue(\"\");\r\n\r\n   //                            let editingGrid = _logic.currentEditObject();\r\n   //                            let currDC = editingGrid.AB.datacollections(\r\n   //                               (dc) => dc.id == newv\r\n   //                            )[0];\r\n   //                            // disallow edit data of query\r\n   //                            if (currDC && currDC.sourceType == \"query\") {\r\n   //                               $$(ids.isEditable).setValue(false);\r\n   //                               $$(ids.massUpdate).setValue(false);\r\n   //                               $$(ids.allowDelete).setValue(false);\r\n   //                               $$(ids.isEditable).disable();\r\n   //                               $$(ids.massUpdate).disable();\r\n   //                               $$(ids.allowDelete).disable();\r\n   //                            } else {\r\n   //                               $$(ids.isEditable).enable();\r\n   //                               $$(ids.massUpdate).enable();\r\n   //                               $$(ids.allowDelete).enable();\r\n   //                            }\r\n   //                         }\r\n   //                      },\r\n   //                   },\r\n   //                },\r\n   //             ],\r\n   //          },\r\n   //       },\r\n   //       {\r\n   //          view: \"fieldset\",\r\n   //          label: L(\"ab.component.grid.group\", \"*Group:\"),\r\n   //          labelWidth: App.config.labelWidthLarge,\r\n   //          body: {\r\n   //             type: \"clean\",\r\n   //             padding: 10,\r\n   //             rows: [\r\n   //                {\r\n   //                   view: \"multiselect\",\r\n   //                   name: \"groupBy\",\r\n   //                   label: L(\"ab.component.grid.groupBy\", \"*Group by:\"),\r\n   //                   labelWidth: App.config.labelWidthLarge,\r\n   //                   options: [],\r\n   //                   on: {\r\n   //                      onChange: (newV, oldV) => {\r\n   //                         let currView = _logic.currentEditObject();\r\n   //                         currView.propertyGroupByList(ids, newV);\r\n   //                      },\r\n   //                   },\r\n   //                },\r\n   //                {\r\n   //                   view: \"list\",\r\n   //                   name: \"groupByList\",\r\n   //                   drag: true,\r\n   //                   data: [],\r\n   //                   height: 200,\r\n   //                   template:\r\n   //                      \"<span class='fa fa-sort'></span>&nbsp;&nbsp; #value#\",\r\n   //                   on: {\r\n   //                      onAfterDrop: () => {\r\n   //                         let currView = _logic.currentEditObject();\r\n   //                         this.propertyEditorSave(ids, currView);\r\n   //                      },\r\n   //                   },\r\n   //                },\r\n   //             ],\r\n   //          },\r\n   //       },\r\n   //       this.linkPageComponent.ui,\r\n   //       {\r\n   //          view: \"fieldset\",\r\n   //          label: L(\r\n   //             \"ab.component.label.customizeDisplay\",\r\n   //             \"*Customize Display:\"\r\n   //          ),\r\n   //          labelWidth: App.config.labelWidthLarge,\r\n   //          body: {\r\n   //             type: \"clean\",\r\n   //             padding: 10,\r\n   //             rows: [\r\n   //                {\r\n   //                   cols: [\r\n   //                      {\r\n   //                         view: \"label\",\r\n   //                         label: L(\r\n   //                            \"ab.component.label.hiddenFields\",\r\n   //                            \"*Hidden Fields:\"\r\n   //                         ),\r\n   //                         css: \"ab-text-bold\",\r\n   //                         width: App.config.labelWidthXLarge,\r\n   //                      },\r\n   //                      {\r\n   //                         view: view,\r\n   //                         name: \"buttonFieldsVisible\",\r\n   //                         label: L(\"ab.component.label.settings\", \"*Settings\"),\r\n   //                         icon: \"fa fa-gear\",\r\n   //                         type: \"icon\",\r\n   //                         click: function () {\r\n   //                            _logic.toolbarFieldsVisible(this.$view);\r\n   //                         },\r\n   //                      },\r\n   //                   ],\r\n   //                },\r\n   //                {\r\n   //                   cols: [\r\n   //                      {\r\n   //                         view: \"label\",\r\n   //                         label: L(\r\n   //                            \"ab.component.label.filterData\",\r\n   //                            \"*Filter Option:\"\r\n   //                         ),\r\n   //                         css: \"ab-text-bold\",\r\n   //                         width: App.config.labelWidthXLarge,\r\n   //                      },\r\n   //                      {\r\n   //                         view: view,\r\n   //                         name: \"buttonFilterData\",\r\n   //                         label: L(\"ab.component.label.settings\", \"*Settings\"),\r\n   //                         icon: \"fa fa-gear\",\r\n   //                         type: \"icon\",\r\n   //                         click: function () {\r\n   //                            _logic.gridFilterMenuShow(this.$view);\r\n   //                         },\r\n   //                      },\r\n   //                   ],\r\n   //                },\r\n   //                {\r\n   //                   cols: [\r\n   //                      {\r\n   //                         view: \"label\",\r\n   //                         label: L(\r\n   //                            \"ab.component.label.freezeColumns\",\r\n   //                            \"*Freeze Columns:\"\r\n   //                         ),\r\n   //                         css: \"ab-text-bold\",\r\n   //                         width: App.config.labelWidthXLarge,\r\n   //                      },\r\n   //                      {\r\n   //                         view: view,\r\n   //                         name: \"buttonFieldsFreeze\",\r\n   //                         label: L(\"ab.component.label.settings\", \"*Settings\"),\r\n   //                         icon: \"fa fa-gear\",\r\n   //                         type: \"icon\",\r\n   //                         click: function () {\r\n   //                            _logic.toolbarFrozen(this.$view);\r\n   //                         },\r\n   //                      },\r\n   //                   ],\r\n   //                },\r\n\r\n   //                {\r\n   //                   cols: [\r\n   //                      {\r\n   //                         view: \"label\",\r\n   //                         label: L(\r\n   //                            \"ab.component.label.summaryFields\",\r\n   //                            \"*Summary Fields:\"\r\n   //                         ),\r\n   //                         css: \"ab-text-bold\",\r\n   //                         width: App.config.labelWidthXLarge,\r\n   //                      },\r\n   //                      {\r\n   //                         view: view,\r\n   //                         name: \"buttonSummaryFields\",\r\n   //                         label: L(\"ab.component.label.settings\", \"*Settings\"),\r\n   //                         icon: \"fa fa-gear\",\r\n   //                         type: \"icon\",\r\n   //                         click: function () {\r\n   //                            _logic.summaryColumns(this.$view);\r\n   //                         },\r\n   //                      },\r\n   //                   ],\r\n   //                },\r\n\r\n   //                {\r\n   //                   cols: [\r\n   //                      {\r\n   //                         view: \"label\",\r\n   //                         label: L(\r\n   //                            \"ab.component.label.countFields\",\r\n   //                            \"*Count Fields:\"\r\n   //                         ),\r\n   //                         css: \"ab-text-bold\",\r\n   //                         width: App.config.labelWidthXLarge,\r\n   //                      },\r\n   //                      {\r\n   //                         view: view,\r\n   //                         name: \"buttonCountFields\",\r\n   //                         label: L(\"ab.component.label.settings\", \"*Settings\"),\r\n   //                         icon: \"fa fa-gear\",\r\n   //                         type: \"icon\",\r\n   //                         click: function () {\r\n   //                            _logic.countColumns(this.$view);\r\n   //                         },\r\n   //                      },\r\n   //                   ],\r\n   //                },\r\n\r\n   //                {\r\n   //                   view: \"counter\",\r\n   //                   name: \"height\",\r\n   //                   label: L(\"ab.component.grid.height\", \"*Height:\"),\r\n   //                   labelWidth: App.config.labelWidthXLarge,\r\n   //                },\r\n\r\n   //                {\r\n   //                   view: \"checkbox\",\r\n   //                   name: \"hideHeader\",\r\n   //                   labelRight: L(\r\n   //                      \"ab.component.label.hideHeader\",\r\n   //                      \"*Hide table header\"\r\n   //                   ),\r\n   //                   labelWidth: App.config.labelWidthCheckbox,\r\n   //                },\r\n\r\n   //                {\r\n   //                   view: \"checkbox\",\r\n   //                   name: \"labelAsField\",\r\n   //                   labelRight: L(\r\n   //                      \"ab.component.label.labelAsField\",\r\n   //                      \"*Show a field using label template\"\r\n   //                   ),\r\n   //                   labelWidth: App.config.labelWidthCheckbox,\r\n   //                },\r\n\r\n   //                {\r\n   //                   view: \"checkbox\",\r\n   //                   name: \"hideButtons\",\r\n   //                   labelRight: L(\r\n   //                      \"ab.component.label.hideButtons\",\r\n   //                      \"*Hide edit and view buttons\"\r\n   //                   ),\r\n   //                   labelWidth: App.config.labelWidthCheckbox,\r\n   //                },\r\n   //             ],\r\n   //          },\r\n   //       },\r\n   //       {},\r\n   //    ]);\r\n   // }\r\n\r\n   // static propertyEditorPopulate(App, ids, view) {\r\n   //    super.propertyEditorPopulate(App, ids, view);\r\n\r\n   //    this.view = view;\r\n\r\n   //    $$(ids.datacollection).setValue(view.settings.dataviewID);\r\n   //    $$(ids.isEditable).setValue(view.settings.isEditable);\r\n   //    $$(ids.massUpdate).setValue(view.settings.massUpdate);\r\n   //    $$(ids.allowDelete).setValue(view.settings.allowDelete);\r\n   //    $$(ids.isSortable).setValue(view.settings.isSortable);\r\n   //    $$(ids.isExportable).setValue(view.settings.isExportable);\r\n   //    var details = view.settings.detailsPage;\r\n   //    if (view.settings.detailsTab != \"\") {\r\n   //       details += \":\" + view.settings.detailsTab;\r\n   //    }\r\n   //    $$(ids.detailsPage).setValue(details);\r\n   //    var edit = view.settings.editPage;\r\n   //    if (view.settings.editTab != \"\") {\r\n   //       edit += \":\" + view.settings.editTab;\r\n   //    }\r\n   //    $$(ids.editPage).setValue(edit);\r\n   //    $$(ids.height).setValue(view.settings.height);\r\n   //    $$(ids.hideHeader).setValue(view.settings.hideHeader);\r\n   //    $$(ids.labelAsField).setValue(view.settings.labelAsField);\r\n   //    $$(ids.hideButtons).setValue(view.settings.hideButtons);\r\n   //    $$(ids.groupBy).setValue(view.settings.groupBy);\r\n\r\n   //    // initial populate of properties and popups\r\n   //    view.populateEditor(ids, view);\r\n   //    view.populatePopupEditors(view);\r\n   //    view.populateBadgeNumber(ids, view);\r\n\r\n   //    // when a change is made in the properties the popups need to reflect the change\r\n   //    this.updateEventIds = this.updateEventIds || {}; // { viewId: boolean, ..., viewIdn: boolean }\r\n   //    if (!this.updateEventIds[view.id]) {\r\n   //       this.updateEventIds[view.id] = true;\r\n\r\n   //       view.addListener(\r\n   //          \"properties.updated\",\r\n   //          function () {\r\n   //             view.populateEditor(ids, view);\r\n   //             view.populatePopupEditors(view);\r\n   //             view.populateBadgeNumber(ids, view);\r\n   //          },\r\n   //          this\r\n   //       );\r\n   //    }\r\n\r\n   //    //Load ABDatacollection to QueryBuilder\r\n   //    this.propertyUpdateGridFilterObject(ids, view);\r\n\r\n   //    // Populate values to link page properties\r\n   //    this.linkPageComponent.viewLoad(view);\r\n   //    this.linkPageComponent.setSettings(view.settings);\r\n   // }\r\n\r\n   // static propertyEditorValues(ids, view) {\r\n   //    super.propertyEditorValues(ids, view);\r\n\r\n   //    // Retrive the values of your properties from Webix and store them in the view\r\n   //    view.settings.dataviewID = $$(ids.datacollection).getValue();\r\n   //    view.settings.isEditable = $$(ids.isEditable).getValue();\r\n   //    view.settings.massUpdate = $$(ids.massUpdate).getValue();\r\n   //    view.settings.allowDelete = $$(ids.allowDelete).getValue();\r\n   //    view.settings.isSortable = $$(ids.isSortable).getValue();\r\n   //    view.settings.isExportable = $$(ids.isExportable).getValue();\r\n\r\n   //    var detailsPage = $$(ids.detailsPage).getValue();\r\n   //    var detailsTab = \"\";\r\n   //    if (detailsPage.split(\":\").length > 1) {\r\n   //       var detailsVals = detailsPage.split(\":\");\r\n   //       detailsPage = detailsVals[0];\r\n   //       detailsTab = detailsVals[1];\r\n   //    }\r\n   //    view.settings.detailsPage = detailsPage;\r\n   //    view.settings.detailsTab = detailsTab;\r\n\r\n   //    var editPage = $$(ids.editPage).getValue();\r\n   //    var editTab = \"\";\r\n   //    if (editPage.split(\":\").length > 1) {\r\n   //       var editVals = editPage.split(\":\");\r\n   //       editPage = editVals[0];\r\n   //       editTab = editVals[1];\r\n   //    }\r\n   //    view.settings.editPage = editPage;\r\n   //    view.settings.editTab = editTab;\r\n\r\n   //    view.settings.height = $$(ids.height).getValue();\r\n   //    view.settings.hideHeader = $$(ids.hideHeader).getValue();\r\n   //    view.settings.labelAsField = $$(ids.labelAsField).getValue();\r\n   //    view.settings.hideButtons = $$(ids.hideButtons).getValue();\r\n   //    // view.settings.groupBy = $$(ids.groupBy).getValue();\r\n\r\n   //    // pull order groupBy list\r\n   //    let groupByList = $$(ids.groupByList).serialize() || [];\r\n   //    view.settings.groupBy = groupByList.map((item) => item.id).join(\",\");\r\n\r\n   //    view.settings.gridFilter = PopupFilterProperty.getSettings();\r\n\r\n   //    view.settings.objectWorkspace = view.settings.objectWorkspace || {};\r\n   //    view.settings.objectWorkspace.hiddenFields = PopupHideFieldComponent.getValue();\r\n   //    view.settings.objectWorkspace.frozenColumnID = PopupFrozenColumnsComponent.getValue();\r\n\r\n   //    // link pages\r\n   //    let linkSettings = this.linkPageComponent.getSettings();\r\n   //    for (let key in linkSettings) {\r\n   //       view.settings[key] = linkSettings[key];\r\n   //    }\r\n\r\n   //    // Populate values to link page properties\r\n   //    this.linkPageComponent.viewLoad(view);\r\n   //    this.linkPageComponent.setSettings(view.settings);\r\n   // }\r\n\r\n   // static propertyUpdateGridFilterObject(ids, view) {\r\n   //    if (!view) return;\r\n\r\n   //    // Populate values to QueryBuilder\r\n   //    var selectedDv = view.datacollection;\r\n\r\n   //    if (selectedDv) {\r\n   //       let object = selectedDv.datasource;\r\n   //       if (object) {\r\n   //          PopupFilterProperty.objectLoad(object, selectedDv.settings.loadAll);\r\n   //       }\r\n   //    }\r\n   // }\r\n\r\n   propertyGroupByList(ids, groupBy) {\r\n      let colNames = groupBy || [];\r\n      if (typeof colNames == \"string\") {\r\n         colNames = colNames.split(\",\");\r\n      }\r\n\r\n      let options = $$(ids.groupBy).getList().data.find({});\r\n\r\n      $$(ids.groupByList).clearAll();\r\n      colNames.forEach((colName) => {\r\n         let opt = options.filter((o) => o.id == colName)[0];\r\n         if (opt) {\r\n            $$(ids.groupByList).add(opt);\r\n         }\r\n      });\r\n   }\r\n\r\n   /**\r\n    * @method component()\r\n    * return a UI component based upon this view.\r\n    * @param {obj} App\r\n    * @return {obj} UI component\r\n    */\r\n   // component(App, objId) {\r\n   //    let baseCom = super.component(App);\r\n   //    var L = App.Label;\r\n\r\n   //    var idBase = objId || \"ABViewGrid_\" + this.id;\r\n   //    var ids = {\r\n   //       component: App.unique(idBase + \"_component\"),\r\n   //       toolbar: App.unique(idBase + \"_toolbar\"),\r\n   //       buttonDeleteSelected: App.unique(idBase + \"_deleteSelected\"),\r\n   //       // buttonExport: App.unique('buttonExport'),\r\n   //       buttonFilter: App.unique(idBase + \"_buttonFilter\"),\r\n   //       buttonMassUpdate: App.unique(idBase + \"_buttonMassUpdate\"),\r\n   //       buttonSort: App.unique(idBase + \"_buttonSort\"),\r\n   //       buttonExport: App.unique(idBase + \"_buttonExport\"),\r\n\r\n   //       globalSearchToolbar: App.unique(idBase + \"_globalSearchToolbar\"),\r\n   //    };\r\n\r\n   //    var labels = {\r\n   //       common: App.labels,\r\n   //    };\r\n\r\n   //    var CurrentObject = null;\r\n\r\n   //    var settings = {\r\n   //       allowDelete: this.settings.allowDelete,\r\n   //       detailsView: this.settings.detailsPage,\r\n   //       editView: this.settings.editPage,\r\n   //       isEditable: this.settings.isEditable,\r\n   //       massUpdate: this.settings.massUpdate,\r\n   //       configureHeaders: false,\r\n   //       summaryColumns: this.settings.summaryColumns,\r\n   //       countColumns: this.settings.countColumns,\r\n   //       hideHeader: this.settings.hideHeader,\r\n   //       labelAsField: this.settings.labelAsField,\r\n   //       hideButtons: this.settings.hideButtons,\r\n   //       groupBy: this.settings.groupBy,\r\n   //       hiddenFields: this.settings.hiddenFields,\r\n   //       frozenColumnID: this.settings.frozenColumnID || \"\",\r\n   //       isTreeDatable: this.datacollection && this.datacollection.isGroup,\r\n   //    };\r\n\r\n   //    let DataTable = new ABWorkspaceDatatable(App, idBase, settings);\r\n   //    let PopupMassUpdateComponent = new ABPopupMassUpdate(\r\n   //       App,\r\n   //       idBase + \"_mass\"\r\n   //    );\r\n   //    let PopupSortDataTableComponent = new ABPopupSortField(\r\n   //       App,\r\n   //       idBase + \"_sort\"\r\n   //    );\r\n   //    let exportPopup = new ABPopupExport(App, idBase + \"_export\");\r\n\r\n   //    let filterUI = this.filterHelper.component(App, idBase + \"_gridfilter\");\r\n   //    this.filterHelper.fromSettings(this.settings.gridFilter);\r\n\r\n   //    let linkPage = this.linkPageHelper.component(\r\n   //       App,\r\n   //       idBase + \"_gridlinkpage\"\r\n   //    );\r\n\r\n   //    let _init = (options, accessLevel) => {\r\n   //       if (this.settings.dataviewID != \"\") {\r\n   //          DataTable.init(\r\n   //             {\r\n   //                onCheckboxChecked: _logic.callbackCheckboxChecked,\r\n   //             },\r\n   //             accessLevel\r\n   //          );\r\n\r\n   //          PopupMassUpdateComponent.init({\r\n   //             // onSave:_logic.callbackAddFields        // be notified of something...who knows...\r\n   //          });\r\n\r\n   //          PopupSortDataTableComponent.init({\r\n   //             onChange: _logic.callbackSortData,\r\n   //          });\r\n\r\n   //          filterUI.init({\r\n   //             onFilterData: (fnFilter, filterRules) => {\r\n   //                _logic.callbackFilterData(fnFilter, filterRules); // be notified when there is a change in the filter\r\n   //             },\r\n   //          });\r\n\r\n   //          exportPopup.init({});\r\n\r\n   //          if (\r\n   //             this.settings.massUpdate ||\r\n   //             this.settings.isSortable ||\r\n   //             this.settings.isExportable ||\r\n   //             (this.settings.gridFilter &&\r\n   //                this.settings.gridFilter.filterOption &&\r\n   //                this.settings.gridFilter.userFilterPosition == \"toolbar\")\r\n   //          ) {\r\n   //             $$(ids.toolbar).show();\r\n   //          }\r\n\r\n   //          if (this.settings.massUpdate == false) {\r\n   //             $$(ids.buttonMassUpdate).hide();\r\n   //             $$(ids.buttonDeleteSelected).hide();\r\n   //          }\r\n\r\n   //          if (this.settings.allowDelete == false) {\r\n   //             $$(ids.buttonDeleteSelected).hide();\r\n   //          }\r\n\r\n   //          if (this.settings.gridFilter) {\r\n   //             if (\r\n   //                this.settings.gridFilter.filterOption != 1 ||\r\n   //                this.settings.gridFilter.userFilterPosition != \"toolbar\"\r\n   //             ) {\r\n   //                $$(ids.buttonFilter).hide();\r\n   //             }\r\n\r\n   //             if (\r\n   //                this.settings.gridFilter.filterOption == 3 &&\r\n   //                this.settings.gridFilter.globalFilterPosition == \"single\"\r\n   //             ) {\r\n   //                $$(DataTable.ui.id).hide();\r\n   //             }\r\n\r\n   //             if (this.settings.gridFilter.isGlobalToolbar)\r\n   //                $$(ids.globalSearchToolbar).show();\r\n   //             else $$(ids.globalSearchToolbar).hide();\r\n   //          }\r\n\r\n   //          if (this.settings.isSortable == false) {\r\n   //             $$(ids.buttonSort).hide();\r\n   //          }\r\n\r\n   //          if (this.settings.isExportable == false) {\r\n   //             $$(ids.buttonExport).hide();\r\n   //          }\r\n\r\n   //          if (this.settings.hideHeader == true) {\r\n   //             DataTable.hideHeader();\r\n   //          }\r\n\r\n   //          var dv = this.datacollection;\r\n   //          if (dv && dv.datasource) {\r\n   //             CurrentObject = dv.datasource;\r\n\r\n   //             DataTable.objectLoad(CurrentObject);\r\n   //             PopupMassUpdateComponent.objectLoad(CurrentObject, DataTable);\r\n   //             PopupSortDataTableComponent.objectLoad(CurrentObject);\r\n   //             PopupSortDataTableComponent.setValue(this.settings.sortFields);\r\n   //             this.filterHelper.objectLoad(CurrentObject);\r\n   //             this.filterHelper.viewLoad(this);\r\n   //             exportPopup.objectLoad(CurrentObject);\r\n   //             exportPopup.dataCollectionLoad(dv);\r\n   //             exportPopup.setGridComponent($$(DataTable.ui.id));\r\n   //             exportPopup.setHiddenFields(this.settings.hiddenFields);\r\n   //             exportPopup.setFilename(this.label);\r\n   //             DataTable.refreshHeader();\r\n\r\n   //             // link page helper\r\n   //             linkPage.init({\r\n   //                view: this,\r\n   //                datacollection: dv,\r\n   //             });\r\n\r\n   //             // dv.bind($$(DataTable.ui.id));\r\n   //             DataTable.datacollectionLoad(dv);\r\n\r\n   //             var editPage = this.settings.editPage;\r\n   //             var detailsPage = this.settings.detailsPage;\r\n   //             var editTab = this.settings.editTab;\r\n   //             var detailsTab = this.settings.detailsTab;\r\n   //             var isEditable = this.settings.isEditable;\r\n\r\n   //             // we need to recursivly look backwards to toggle tabs into view when a user choosed to select a tab for edit or details views\r\n   //             function toggleTab(parentTab, wb) {\r\n   //                // find the tab\r\n   //                var tab = wb.getTopParentView().queryView({ id: parentTab });\r\n   //                // if we didn't pass and id we may have passed a domNode\r\n   //                if (tab == null) {\r\n   //                   tab = $$(parentTab);\r\n   //                }\r\n\r\n   //                if (tab == null) return;\r\n\r\n   //                // set the tabbar to to the tab\r\n   //                var tabbar = tab.getParentView().getParentView();\r\n\r\n   //                if (tabbar == null) return;\r\n\r\n   //                if (tabbar.setValue) {\r\n   //                   // if we have reached the top we won't have a tab\r\n   //                   tabbar.setValue(parentTab);\r\n   //                }\r\n\r\n   //                // find if it is in a multiview of a tab\r\n   //                var nextTab = tabbar.queryView(\r\n   //                   { view: \"scrollview\" },\r\n   //                   \"parent\"\r\n   //                );\r\n   //                // if so then do this again\r\n   //                if (nextTab) {\r\n   //                   toggleTab(nextTab, wb);\r\n   //                }\r\n   //             }\r\n\r\n   //             $$(DataTable.ui.id).attachEvent(\r\n   //                \"onItemClick\",\r\n   //                function (id, e, node) {\r\n   //                   var item = id;\r\n\r\n   //                   if (e == \"auto\") {\r\n   //                      // automatically choose the details page if a record matches\r\n   //                      // later on we can decide if we want to have the choice to select the edit page intead.\r\n   //                      _logic.changePage(dv, item, detailsPage);\r\n   //                      toggleTab(detailsTab, this);\r\n   //                   } else if (e.target.className.indexOf(\"eye\") > -1) {\r\n   //                      _logic.changePage(dv, item, detailsPage);\r\n   //                      toggleTab(detailsTab, this);\r\n   //                   } else if (e.target.className.indexOf(\"pencil\") > -1) {\r\n   //                      _logic.changePage(dv, item, editPage);\r\n   //                      toggleTab(editTab, this);\r\n   //                   } else if (e.target.className.indexOf(\"trash\") > -1) {\r\n   //                      // don't do anything for delete it is handled elsewhere\r\n   //                   } else if (!isEditable && detailsPage.length) {\r\n   //                      _logic.changePage(dv, item, detailsPage);\r\n   //                      toggleTab(detailsTab, this);\r\n   //                   } else if (\r\n   //                      !isEditable &&\r\n   //                      !detailsPage.length &&\r\n   //                      editPage.length &&\r\n   //                      this.config.accessLevel == 2\r\n   //                   ) {\r\n   //                      _logic.changePage(dv, item, editPage);\r\n   //                      toggleTab(editTab, this);\r\n   //                   }\r\n   //                }\r\n   //             );\r\n\r\n   //             $$(DataTable.ui.id).attachEvent(\r\n   //                \"onAfterRender\",\r\n   //                function (data) {\r\n   //                   if ($$(DataTable.ui.id)) {\r\n   //                      //set cy data\r\n   //                      $$(DataTable.ui.id).$view.setAttribute(\r\n   //                         \"data-cy\",\r\n   //                         DataTable.idBase\r\n   //                      );\r\n   //                      for (const key in ids) {\r\n   //                         if (Object.hasOwnProperty.call(ids, key)) {\r\n   //                            let element = ids[key].toString();\r\n   //                            if ($$(element)) {\r\n   //                               $$(element).$view.setAttribute(\r\n   //                                  \"data-cy\",\r\n   //                                  element\r\n   //                               );\r\n   //                            }\r\n   //                         }\r\n   //                      }\r\n   //                   }\r\n   //                }\r\n   //             );\r\n\r\n   //             // $$(DataTable.ui.id).attachEvent('onBeforeRender', function (data) {\r\n   //             //    _logic.clientSideDataFilter();\r\n   //             // });\r\n\r\n   //             $$(DataTable.ui.id).adjust();\r\n   //          }\r\n\r\n   //          // Adjust grid based off Access Level of parent view\r\n   //          if (accessLevel < 2) {\r\n   //             $$(ids.buttonMassUpdate).hide();\r\n   //             $$(ids.buttonDeleteSelected).hide();\r\n   //          }\r\n   //       }\r\n   //    };\r\n\r\n   //    // specify height of the grid\r\n   //    if (this.settings.height) DataTable.ui.height = this.settings.height;\r\n\r\n   //    var tableUI = {\r\n   //       type: \"space\",\r\n   //       rows: [\r\n   //          {\r\n   //             view: \"label\",\r\n   //             label: \"Select an object to load.\",\r\n   //             inputWidth: 200,\r\n   //             align: \"center\",\r\n   //          },\r\n   //          {},\r\n   //       ],\r\n   //    };\r\n   //    if (this.settings.dataviewID != \"\") {\r\n   //       tableUI = {\r\n   //          type: \"space\",\r\n   //          padding: 17,\r\n   //          rows: [\r\n   //             {\r\n   //                view: \"toolbar\",\r\n   //                id: ids.toolbar,\r\n   //                hidden: true,\r\n   //                css: \"ab-data-toolbar\",\r\n   //                cols: [\r\n   //                   {\r\n   //                      view: \"button\",\r\n   //                      id: ids.buttonMassUpdate,\r\n   //                      css: \"webix_transparent\",\r\n   //                      label: L(\"ab.object.toolbar.massUpdate\", \"*Edit\"),\r\n   //                      icon: \"fa fa-pencil-square-o\",\r\n   //                      type: \"icon\",\r\n   //                      disabled: true,\r\n   //                      autowidth: true,\r\n   //                      click: function () {\r\n   //                         _logic.toolbarMassUpdate(this.$view);\r\n   //                      },\r\n   //                   },\r\n   //                   {\r\n   //                      view: \"button\",\r\n   //                      id: ids.buttonDeleteSelected,\r\n   //                      css: \"webix_transparent\",\r\n   //                      label: L(\"ab.object.toolbar.deleteRecords\", \"*Delete\"),\r\n   //                      icon: \"fa fa-trash\",\r\n   //                      type: \"icon\",\r\n   //                      disabled: true,\r\n   //                      autowidth: true,\r\n   //                      click: function () {\r\n   //                         _logic.toolbarDeleteSelected(this.$view);\r\n   //                      },\r\n   //                   },\r\n   //                   {\r\n   //                      view: \"button\",\r\n   //                      id: ids.buttonFilter,\r\n   //                      css: \"webix_transparent\",\r\n   //                      label: L(\"ab.object.toolbar.filterFields\", \"*Filters\"),\r\n   //                      icon: \"fa fa-filter\",\r\n   //                      type: \"icon\",\r\n   //                      autowidth: true,\r\n   //                      click: function () {\r\n   //                         _logic.toolbarFilter(this.$view);\r\n   //                      },\r\n   //                   },\r\n   //                   {\r\n   //                      view: \"button\",\r\n   //                      id: ids.buttonSort,\r\n   //                      css: \"webix_transparent\",\r\n   //                      label: L(\"ab.object.toolbar.sortFields\", \"*Sort\"),\r\n   //                      icon: \"fa fa-sort\",\r\n   //                      type: \"icon\",\r\n   //                      autowidth: true,\r\n   //                      click: function () {\r\n   //                         _logic.toolbarSort(this.$view);\r\n   //                      },\r\n   //                   },\r\n   //                   {\r\n   //                      view: \"button\",\r\n   //                      id: ids.buttonExport,\r\n   //                      css: \"webix_transparent\",\r\n   //                      label: L(\"ab.object.toolbar.export\", \"*Export\"),\r\n   //                      icon: \"fa fa-print\",\r\n   //                      type: \"icon\",\r\n   //                      autowidth: true,\r\n   //                      click: function () {\r\n   //                         _logic.toolbarExport(this.$view);\r\n   //                      },\r\n   //                   },\r\n   //                   /*\r\n   //             {\r\n   //                view: view,\r\n   //                id: ids.buttonExport,\r\n   //                label: labels.component.export,\r\n   //                icon: \"fa fa-download\",\r\n   //                type: \"icon\",\r\n   //                click: function() {\r\n   //                   _logic.toolbarButtonExport(this.$view);\r\n   //                }\r\n   //             }\r\n   //                          */\r\n   //                   {},\r\n   //                   {\r\n   //                      id: ids.globalSearchToolbar,\r\n   //                      view: \"search\",\r\n   //                      placeholder: \"Search...\",\r\n   //                      on: {\r\n   //                         onTimedKeyPress: () => {\r\n   //                            let searchText = $$(\r\n   //                               ids.globalSearchToolbar\r\n   //                            ).getValue();\r\n\r\n   //                            filterUI.searchText(searchText);\r\n   //                         },\r\n   //                      },\r\n   //                   },\r\n   //                ],\r\n   //             },\r\n   //             filterUI.ui,\r\n   //             DataTable.ui,\r\n   //          ],\r\n   //       };\r\n   //    }\r\n\r\n   //    // our internal business logic\r\n   //    var _logic = {\r\n   //       callbackCheckboxChecked: (state) => {\r\n   //          if (state == \"enable\") {\r\n   //             _logic.enableUpdateDelete();\r\n   //          } else {\r\n   //             _logic.disableUpdateDelete();\r\n   //          }\r\n   //       },\r\n\r\n   //       callbackSortData: (sort_settings) => {\r\n   //          let sortRules = sort_settings || [];\r\n\r\n   //          $$(ids.buttonSort).define(\"badge\", sortRules.length || null);\r\n   //          $$(ids.buttonSort).refresh();\r\n\r\n   //          let gridElem = $$(DataTable.ui.id);\r\n   //          Promise.resolve()\r\n   //             // NOTE: Webix's client sorting does not support dynamic loading.\r\n   //             // If the data does not be loaded, then load all data.\r\n   //             .then(() => {\r\n   //                if (gridElem.data.find({}).length < gridElem.data.count()) {\r\n   //                   return new Promise((next, bad) => {\r\n   //                      this.datacollection\r\n   //                         .reloadData(0, 0)\r\n   //                         .catch(bad)\r\n   //                         .then(() => {\r\n   //                            // wait until the grid component will done to repaint UI\r\n   //                            setTimeout(() => {\r\n   //                               next();\r\n   //                            }, 777);\r\n   //                         });\r\n   //                   });\r\n   //                } else {\r\n   //                   return Promise.resolve();\r\n   //                }\r\n   //             })\r\n   //             // client sort data\r\n   //             .then(() => {\r\n   //                gridElem.sort(PopupSortDataTableComponent.sort);\r\n   //             });\r\n   //       },\r\n\r\n   //       callbackFilterData: (fnFilter, filterRules) => {\r\n   //          filterRules = filterRules || [];\r\n\r\n   //          if ($$(ids.buttonFilter)) {\r\n   //             $$(ids.buttonFilter).define(\"badge\", filterRules.length || null);\r\n   //             $$(ids.buttonFilter).refresh();\r\n   //          }\r\n\r\n   //          Promise.resolve()\r\n   //             .then(\r\n   //                () =>\r\n   //                   new Promise((next, err) => {\r\n   //                      // if (\r\n   //                      //    !this.settings ||\r\n   //                      //    !this.settings.gridFilter ||\r\n   //                      //    this.settings.gridFilter.filterOption != 3\r\n   //                      // )\r\n   //                      //    // Global search\r\n   //                      //    return next();\r\n\r\n   //                      let dc = this.datacollection;\r\n   //                      if (\r\n   //                         !dc ||\r\n   //                         (dc.settings.loadAll &&\r\n   //                            dc.dataStatus != dc.dataStatusFlag.notInitial)\r\n   //                      )\r\n   //                         // Load all already\r\n   //                         return next();\r\n\r\n   //                      let limit = null;\r\n\r\n   //                      // limit pull data to reduce time and performance loading\r\n   //                      // if (dc.__dataCollection.count() > 300) limit = 300;\r\n\r\n   //                      // Load all data\r\n   //                      let gridElem = $$(DataTable.ui.id);\r\n   //                      if (\r\n   //                         gridElem.data.find({}).length < gridElem.data.count()\r\n   //                      ) {\r\n   //                         dc.reloadData(0, limit)\r\n   //                            .then(() => {\r\n   //                               // Should set .loadAll to this data collection ?\r\n   //                               if (limit == null) dc.settings.loadAll = true;\r\n\r\n   //                               next();\r\n   //                            })\r\n   //                            .catch(err);\r\n   //                      } else {\r\n   //                         next();\r\n   //                      }\r\n   //                   })\r\n   //             )\r\n   //             // client filter data\r\n   //             .then(\r\n   //                () =>\r\n   //                   new Promise((next, err) => {\r\n   //                      if (!fnFilter) return next();\r\n\r\n   //                      // wait the data are parsed into webix.datatable\r\n   //                      setTimeout(() => {\r\n   //                         let table = $$(DataTable.ui.id);\r\n   //                         table.filter((rowData) => {\r\n   //                            // rowData is null when is not load from paging\r\n   //                            if (rowData == null) return false;\r\n\r\n   //                            return fnFilter(rowData);\r\n   //                         });\r\n\r\n   //                         if (\r\n   //                            this.settings.gridFilter.globalFilterPosition ==\r\n   //                            \"single\"\r\n   //                         ) {\r\n   //                            if (table.count() > 0) {\r\n   //                               table.show();\r\n   //                               table.select(table.getFirstId(), false);\r\n   //                               table.callEvent(\"onItemClick\", [\r\n   //                                  table.getFirstId(),\r\n   //                                  \"auto\",\r\n   //                                  null,\r\n   //                               ]);\r\n   //                            } else {\r\n   //                               table.hide();\r\n   //                            }\r\n   //                         }\r\n\r\n   //                         next();\r\n   //                      }, 500);\r\n   //                   })\r\n   //             );\r\n   //       },\r\n\r\n   //       changePage: (dv, rowItem, page) => {\r\n   //          let rowId = rowItem && rowItem.row ? rowItem.row : null;\r\n\r\n   //          // Set cursor to data view\r\n   //          if (dv) {\r\n   //             dv.setCursor(rowId);\r\n   //          }\r\n\r\n   //          // Pass settings to link page module\r\n   //          if (linkPage) {\r\n   //             linkPage.changePage(page, rowId);\r\n   //          }\r\n\r\n   //          super.changePage(page);\r\n   //       },\r\n\r\n   //       selectRow: (rowData) => {\r\n   //          if (!$$(DataTable.ui.id)) return;\r\n\r\n   //          if (rowData == null) $$(DataTable.ui.id).unselect();\r\n   //          else if (\r\n   //             rowData &&\r\n   //             rowData.id &&\r\n   //             $$(DataTable.ui.id).exists(rowData.id)\r\n   //          )\r\n   //             $$(DataTable.ui.id).select(rowData.id, false);\r\n   //          else $$(DataTable.ui.id).select(null, false);\r\n   //       },\r\n\r\n   //       /**\r\n   //        * @function enableUpdateDelete\r\n   //        *\r\n   //        * enable the update or delete buttons in the toolbar if there are any items selected\r\n   //        * we will make this externally accessible so we can call it from within the datatable component\r\n   //        */\r\n   //       enableUpdateDelete: function () {\r\n   //          $$(ids.buttonMassUpdate).enable();\r\n   //          $$(ids.buttonDeleteSelected).enable();\r\n   //       },\r\n\r\n   //       /**\r\n   //        * @function enableUpdateDelete\r\n   //        *\r\n   //        * disable the update or delete buttons in the toolbar if there no items selected\r\n   //        * we will make this externally accessible so we can call it from within the datatable component\r\n   //        */\r\n   //       disableUpdateDelete: function () {\r\n   //          $$(ids.buttonMassUpdate).disable();\r\n   //          $$(ids.buttonDeleteSelected).disable();\r\n   //       },\r\n\r\n   //       toolbarDeleteSelected: function ($view) {\r\n   //          var deleteTasks = [];\r\n   //          $$(DataTable.ui.id).data.each(function (obj) {\r\n   //             if (\r\n   //                typeof obj != \"undefined\" &&\r\n   //                obj.hasOwnProperty(\"appbuilder_select_item\") &&\r\n   //                obj.appbuilder_select_item == 1\r\n   //             ) {\r\n   //                deleteTasks.push(function (next) {\r\n   //                   CurrentObject.model()\r\n   //                      .delete(obj.id)\r\n   //                      .then((response) => {\r\n   //                         next();\r\n   //                      }, next);\r\n   //                });\r\n   //             }\r\n   //          });\r\n\r\n   //          if (deleteTasks.length > 0) {\r\n   //             App.AB.Dialog.Confirm({\r\n   //                title: L(\"ab.massDelete.title\", \"*Delete Multiple Records\"),\r\n   //                text: L(\r\n   //                   \"ab.massDelete.description\",\r\n   //                   \"*Are you sure you want to delete the selected records?\"\r\n   //                ),\r\n   //                callback: function (result) {\r\n   //                   if (result) {\r\n   //                      async.parallel(deleteTasks, function (err) {\r\n   //                         if (err) {\r\n   //                            // TODO : Error message\r\n   //                         } else {\r\n   //                            // Anything we need to do after we are done.\r\n   //                            _logic.disableUpdateDelete();\r\n   //                         }\r\n   //                      });\r\n   //                   }\r\n   //                },\r\n   //             });\r\n   //          } else {\r\n   //             App.AB.Dialog.Alert({\r\n   //                title: L(\"key.no.records.selected\", \"No Records Selected\"),\r\n   //                text: L(\r\n   //                   \"key.select.one\",\r\n   //                   \"You need to select at least one record...did you drink your coffee today?\"\r\n   //                ),\r\n   //             });\r\n   //          }\r\n   //       },\r\n\r\n   //       toolbarFilter: ($view) => {\r\n   //          filterUI.showPopup($view);\r\n   //       },\r\n\r\n   //       toolbarSort: ($view) => {\r\n   //          PopupSortDataTableComponent.show($view);\r\n   //       },\r\n\r\n   //       toolbarExport: ($view) => {\r\n   //          exportPopup.show($view);\r\n   //       },\r\n\r\n   //       toolbarMassUpdate: function ($view) {\r\n   //          PopupMassUpdateComponent.show($view);\r\n   //       },\r\n   //    };\r\n\r\n   //    var _onShow = () => {\r\n   //       baseCom.onShow();\r\n\r\n   //       if ($$(DataTable.ui.id)) {\r\n   //          $$(DataTable.ui.id).adjust();\r\n   //       }\r\n\r\n   //       var dv = this.datacollection;\r\n   //       if (dv) {\r\n   //          this.eventAdd({\r\n   //             emitter: dv,\r\n   //             eventName: \"changeCursor\",\r\n   //             listener: _logic.selectRow,\r\n   //          });\r\n   //       }\r\n   //    };\r\n\r\n   //    return {\r\n   //       ui: tableUI,\r\n   //       init: _init,\r\n   //       logic: _logic,\r\n\r\n   //       onShow: _onShow,\r\n   //    };\r\n   // }\r\n\r\n   component(v1App = false) {\r\n      var component = new ABViewGridComponent(this);\r\n\r\n      // if this is our v1Interface\r\n      if (v1App) {\r\n         var newComponent = component;\r\n         component = {\r\n            ui: component.ui(),\r\n            init: (options, accessLevel) => {\r\n               return newComponent.init(this.AB, accessLevel);\r\n            },\r\n            onShow: (...params) => {\r\n               return newComponent.onShow?.(...params);\r\n            },\r\n         };\r\n      }\r\n\r\n      return component;\r\n   }\r\n\r\n   // populateEditor(ids, view) {\r\n   //    // Pull data collections to options\r\n   //    var objectOptions = view.propertyDatacollections();\r\n   //    $$(ids.datacollection).define(\"options\", objectOptions);\r\n   //    $$(ids.datacollection).refresh();\r\n   //    if (view.settings.datacollection != \"\") {\r\n   //       $$(ids.datacollection).setValue(view.settings.dataviewID);\r\n   //       // $$(ids.linkedObject).show();\r\n   //    } else {\r\n   //       $$(ids.datacollection).setValue(\"\");\r\n   //       // $$(ids.linkedObject).hide();\r\n   //    }\r\n\r\n   //    // Grouping options\r\n   //    let groupFields = [];\r\n   //    let dv = this.datacollection;\r\n   //    if (dv && dv.datasource) {\r\n   //       dv.datasource\r\n   //          .fields((f) => {\r\n   //             return (\r\n   //                !f.isConnection &&\r\n   //                view.settings.hiddenFields.indexOf(f.columnName) < 0\r\n   //             );\r\n   //          })\r\n   //          .forEach((f) => {\r\n   //             groupFields.push({\r\n   //                id: f.columnName,\r\n   //                value: f.label,\r\n   //             });\r\n   //          });\r\n   //    }\r\n   //    $$(ids.groupBy).define(\"options\", groupFields);\r\n   //    $$(ids.groupBy).refresh();\r\n\r\n   //    this.propertyGroupByList(ids, view.settings.groupBy);\r\n   // }\r\n\r\n   // populatePopupEditors(view, dataSource) {\r\n   //    var dv = this.datacollection;\r\n   //    if (!dv) return;\r\n\r\n   //    let object = dv.datasource;\r\n   //    if (!object) return;\r\n\r\n   //    PopupHideFieldComponent.objectLoad(object);\r\n   //    PopupHideFieldComponent.setValue(view.settings.hiddenFields || []);\r\n   //    PopupHideFieldComponent.setFrozenColumnID(\r\n   //       view.settings.frozenColumnID || \"\"\r\n   //    );\r\n   //    PopupFrozenColumnsComponent.objectLoad(object);\r\n   //    PopupFrozenColumnsComponent.setValue(view.settings.frozenColumnID || \"\");\r\n   //    PopupFrozenColumnsComponent.setHiddenFields(\r\n   //       view.settings.hiddenFields || []\r\n   //    );\r\n\r\n   //    PopupFilterProperty.objectLoad(object);\r\n   //    PopupFilterProperty.setSettings(view.settings.gridFilter);\r\n\r\n   //    PopupSummaryColumnsComponent.objectLoad(object, view);\r\n   //    PopupSummaryColumnsComponent.setValue(view.settings.summaryColumns || []);\r\n\r\n   //    PopupCountColumnsComponent.objectLoad(object, view);\r\n   //    PopupCountColumnsComponent.setValue(view.settings.countColumns || []);\r\n   // }\r\n\r\n   // populateBadgeNumber(ids, view) {\r\n   //    // set badge numbers to setting buttons\r\n   //    if (view.settings.hiddenFields) {\r\n   //       $$(ids.buttonFieldsVisible).define(\r\n   //          \"badge\",\r\n   //          view.settings.hiddenFields.length || null\r\n   //       );\r\n   //       $$(ids.buttonFieldsVisible).refresh();\r\n   //    } else {\r\n   //       $$(ids.buttonFieldsVisible).define(\"badge\", null);\r\n   //       $$(ids.buttonFieldsVisible).refresh();\r\n   //    }\r\n\r\n   //    if (view.settings.gridFilter && view.settings.gridFilter.filterOption) {\r\n   //       $$(ids.buttonFilterData).define(\"badge\", \"Y\");\r\n   //       $$(ids.buttonFilterData).refresh();\r\n   //    } else {\r\n   //       $$(ids.buttonFilterData).define(\"badge\", null);\r\n   //       $$(ids.buttonFilterData).refresh();\r\n   //    }\r\n\r\n   //    if (view.settings && view.settings.frozenColumnID) {\r\n   //       $$(ids.buttonFieldsFreeze).define(\"badge\", \"Y\");\r\n   //       $$(ids.buttonFieldsFreeze).refresh();\r\n   //    } else {\r\n   //       $$(ids.buttonFieldsFreeze).define(\"badge\", null);\r\n   //       $$(ids.buttonFieldsFreeze).refresh();\r\n   //    }\r\n\r\n   //    if (view.settings && view.settings.summaryColumns) {\r\n   //       $$(ids.buttonSummaryFields).define(\r\n   //          \"badge\",\r\n   //          view.settings.summaryColumns.length || null\r\n   //       );\r\n   //       $$(ids.buttonSummaryFields).refresh();\r\n   //    } else {\r\n   //       $$(ids.buttonSummaryFields).define(\"badge\", null);\r\n   //       $$(ids.buttonSummaryFields).refresh();\r\n   //    }\r\n\r\n   //    if (view.settings && view.settings.countColumns) {\r\n   //       $$(ids.buttonCountFields).define(\r\n   //          \"badge\",\r\n   //          view.settings.countColumns.length || null\r\n   //       );\r\n   //       $$(ids.buttonCountFields).refresh();\r\n   //    } else {\r\n   //       $$(ids.buttonCountFields).define(\"badge\", null);\r\n   //       $$(ids.buttonCountFields).refresh();\r\n   //    }\r\n   // }\r\n\r\n   get filterHelper() {\r\n      if (this.__filterHelper == null) {\r\n         this.__filterHelper = new ABViewGridFilter(\r\n            this.AB,\r\n            `${this.id}_filterHelper`\r\n         );\r\n      }\r\n\r\n      return this.__filterHelper;\r\n   }\r\n\r\n   get linkPageHelper() {\r\n      if (this.__linkPageHelper == null)\r\n         this.__linkPageHelper = new ABViewPropertyLinkPage();\r\n\r\n      return this.__linkPageHelper;\r\n   }\r\n}\r\n","/*\r\n * ABViewGridPopupExport.js\r\n * Manage the Popup that allows you to export data into one of our supported\r\n * formats.\r\n */\r\n\r\nimport ClassUI from \"../../../ui/ClassUI\";\r\n\r\nexport default class ABWorkObjectPopupExport extends ClassUI {\r\n   constructor(idBase) {\r\n      idBase = idBase || \"abviewgridpopupExport\";\r\n\r\n      super({\r\n         popupExport: `${idBase}_popupExport`,\r\n         list: `${idBase}_popupExport_list`,\r\n      });\r\n\r\n      this._currentObject = null;\r\n      // {ABObject}\r\n      // The ABObject of the data we will export.  We can find out the fields\r\n      // from the object.\r\n\r\n      this._dataCollection = null;\r\n      // {ABDatacCollection}\r\n      // The ABDataCollection that contains the data we are going to export.\r\n\r\n      this._grid = null;\r\n      // {webix.grid}\r\n      // the current webix.grid that contains the data we are going to export.\r\n\r\n      this._filename = null;\r\n      // {string}\r\n      // the name of the desired output file.\r\n\r\n      this._hiddenFields = [];\r\n      // {array}\r\n      // An array of ABField.columnName(s) that we are not wanting to export\r\n   }\r\n\r\n   ui() {\r\n      var self = this;\r\n\r\n      // webix UI definition:\r\n      return {\r\n         view: \"popup\",\r\n         id: this.ids.popupExport,\r\n         width: 160,\r\n         height: 0, //150,\r\n         select: false,\r\n         hidden: true,\r\n         body: {\r\n            id: this.ids.list,\r\n            view: \"list\",\r\n            autoheight: true,\r\n            data: [\r\n               { name: \"CSV\", icon: \"file-excel-o\" },\r\n               { name: \"Excel\", icon: \"file-excel-o\" },\r\n               { name: \"PDF\", icon: \"file-pdf-o\" },\r\n               { name: \"PNG\", icon: \"file-image-o\" },\r\n            ],\r\n            template:\r\n               \"<div><i class='fa fa-#icon# webix_icon_btn' aria-hidden='true'></i> #name#</div>\",\r\n            on: {\r\n               onItemClick: function (id /*, e, node */) {\r\n                  var component = this.getItem(id);\r\n                  self.export(component.name);\r\n               },\r\n            },\r\n         },\r\n      };\r\n   }\r\n\r\n   async init(AB) {\r\n      if (AB) {\r\n         this.AB = AB;\r\n      }\r\n      webix.ui(this.ui());\r\n      $$(this.ids.popupExport).resize();\r\n   }\r\n\r\n   // internal business logic\r\n\r\n   /**\r\n    * @method dataCollectionLoad()\r\n    * the current ABDataCollection we are working with.\r\n    * @param {ABDataCollection} dc\r\n    */\r\n   dataCollectionLoad(dc) {\r\n      this._dataCollection = dc;\r\n   }\r\n\r\n   /**\r\n    * @method objectLoad()\r\n    * The current ABObject we are working with.\r\n    * @param {ABObject} object\r\n    */\r\n   objectLoad(object) {\r\n      this._currentObject = object;\r\n   }\r\n\r\n   /**\r\n    * @method setHiddenFields\r\n    * Register Fields we don't want exported in our data.\r\n    * @param {array} fields\r\n    *        An array of ABField.columnName(s) to exclude from our export.\r\n    */\r\n   setHiddenFields(fields = []) {\r\n      this._hiddenFields = fields ?? [];\r\n   }\r\n\r\n   /**\r\n    * @method setFilename()\r\n    * Register the name of the file we want our data to export as.\r\n    * @param {string} filename\r\n    */\r\n   setFilename(filename) {\r\n      this._filename = filename;\r\n   }\r\n\r\n   /**\r\n    * @method setGridComponent()\r\n    * Register the webix.grid that currently stores the data we are\r\n    * exporting.\r\n    * @param {webix.grid} $grid\r\n    */\r\n   setGridComponent($grid) {\r\n      this._grid = $grid;\r\n   }\r\n\r\n   /**\r\n    * @function show()\r\n    * Show this component.\r\n    * @param {obj} $view\r\n    *        the webix.$view to hover the popup around.\r\n    */\r\n   show($view) {\r\n      $$(this.ids.popupExport).show($view);\r\n   }\r\n\r\n   async export(name) {\r\n      let fnExport;\r\n\r\n      let columns = {};\r\n\r\n      let dc = this._dataCollection;\r\n      let _currentObject = this._currentObject;\r\n      let _grid = this._grid;\r\n      let _filename = this._filename;\r\n\r\n      if (\r\n         dc &&\r\n         (!dc.settings.loadAll || dc.dataStatus == dc.dataStatusFlag.notInitial)\r\n      ) {\r\n         // Load all data\r\n         await dc.reloadData(0, null);\r\n         dc.settings.loadAll = true;\r\n      }\r\n\r\n      // client filter data\r\n      // template of report\r\n      if (_currentObject) {\r\n         _currentObject.fields().forEach((f) => {\r\n            // hidden fields\r\n            if (this._hiddenFields.indexOf(f.columnName) > -1) return;\r\n\r\n            columns[f.columnName] = {\r\n               template: (rowData) => {\r\n                  return f.format(rowData);\r\n               },\r\n            };\r\n         });\r\n      }\r\n\r\n      switch (name) {\r\n         case \"CSV\":\r\n            webix.csv.delimiter.cols = \",\";\r\n\r\n            fnExport = webix.toCSV(_grid, {\r\n               filename:\r\n                  _filename || (_currentObject ? _currentObject.label : null),\r\n               columns: columns,\r\n            });\r\n            break;\r\n         case \"Excel\":\r\n            fnExport = webix.toExcel(_grid, {\r\n               filename:\r\n                  _filename || (_currentObject ? _currentObject.label : null),\r\n               name:\r\n                  _filename || (_currentObject ? _currentObject.label : null),\r\n               columns: columns,\r\n               filterHTML: true,\r\n            });\r\n            break;\r\n         case \"PDF\":\r\n            fnExport = webix.toPDF(_grid, {\r\n               filename:\r\n                  _filename || (_currentObject ? _currentObject.label : null),\r\n               filterHTML: true,\r\n            });\r\n            break;\r\n         case \"PNG\":\r\n            fnExport = webix.toPNG(_grid, {\r\n               filename:\r\n                  _filename || (_currentObject ? _currentObject.label : null),\r\n            });\r\n            break;\r\n      }\r\n\r\n      try {\r\n         await fnExport;\r\n         $$(this.ids.popupExport).hide();\r\n      } catch (err) {\r\n         this.AB.notify.developer(err, {\r\n            message: `ABViewGridPopupExport:export(): System could not export: ${name}`,\r\n            exportType: name,\r\n            columns,\r\n            fileName: _filename,\r\n         });\r\n      }\r\n   }\r\n\r\n   // this.dataCollectionLoad = _logic.dataCollectionLoad;\r\n   // this.objectLoad = _logic.objectLoad;\r\n   // this.setGridComponent = _logic.setGridComponent;\r\n   // this.setFilename = _logic.setFilename;\r\n   // this.setHiddenFields = _logic.setHiddenFields;\r\n   // this.show = _logic.show;\r\n}\r\n","/*\r\n * ABViewGridPopupMassUpdate\r\n *\r\n * An ABViewGrid can offer a mass update feature.  This is a ui component\r\n * to help with the processing of the update.\r\n *\r\n */\r\n\r\nimport ClassUI from \"../../../ui/ClassUI\";\r\nimport RowUpdater from \"../RowUpdater\";\r\n\r\nvar L = null;\r\n\r\nexport default class ABViewGridPopupMassUpdate extends ClassUI {\r\n   //.extend(idBase, function(App) {\r\n\r\n   constructor(ABViewGridComponent, idBase) {\r\n      idBase = idBase || \"abviewgridpopupMassUpdate\";\r\n\r\n      super({\r\n         component: `${idBase}_popupMassUpdate`,\r\n         submit: `${idBase}_submitMassUpdate`,\r\n      });\r\n\r\n      this.CurrentObject = null;\r\n      // {ABObject}\r\n      // Which ABObject are we currently working with.\r\n\r\n      this.GridComponent = ABViewGridComponent;\r\n      // {ABViewGridComponent}\r\n      // The current ABViewGridComponent we are working with.\r\n\r\n      this.AB = ABViewGridComponent.AB;\r\n      // {ABFactory}\r\n\r\n      this.rowUpdater = new RowUpdater(idBase, this.AB);\r\n      // {RowUpdater}\r\n      // An instance of our RowUpdater form builder.\r\n\r\n      if (!L) {\r\n         L = (...params) => {\r\n            return this.AB.Multilingual.label(...params);\r\n         };\r\n      }\r\n   }\r\n\r\n   ui() {\r\n      var ids = this.ids;\r\n\r\n      // Our webix UI definition:\r\n      return {\r\n         view: \"popup\",\r\n         id: ids.component,\r\n         // modal: true,\r\n         body: {\r\n            width: 500,\r\n            rows: [\r\n               // Update panel\r\n               this.rowUpdater.ui(),\r\n               { height: 15 },\r\n               {\r\n                  cols: [\r\n                     {},\r\n                     {\r\n                        view: \"button\",\r\n                        value: L(\"Cancel\"),\r\n                        width: 100,\r\n                        click: () => {\r\n                           this.hide();\r\n                        },\r\n                     },\r\n                     {\r\n                        id: ids.submit,\r\n                        css: \"webix_primary\",\r\n                        view: \"button\",\r\n                        label: L(\"Update\"),\r\n                        type: \"form\",\r\n                        width: 120,\r\n                        click: () => {\r\n                           this.submit();\r\n                        },\r\n                     },\r\n                  ],\r\n               },\r\n            ],\r\n         },\r\n         on: {\r\n            onShow: () => {\r\n               this.onShow();\r\n            },\r\n         },\r\n      };\r\n   }\r\n\r\n   async init(AB) {\r\n      webix.ui(this.ui());\r\n\r\n      return Promise.resolve();\r\n   }\r\n\r\n   /**\r\n    * @method hide()\r\n    * Hide the popup.\r\n    */\r\n   hide() {\r\n      $$(this.ids.component).hide();\r\n   }\r\n\r\n   /**\r\n    * @function objectLoad\r\n    * Ready the Popup according to the current object & datatable\r\n    * @param {ABObject} object\r\n    *        the currently selected object.\r\n    * @param {webix.datatable} dataTable\r\n    *        the dataTable we need to run the mass update on...trust me this\r\n    *        will be good\r\n    */\r\n   objectLoad(object, dataTable) {\r\n      this.CurrentObject = object;\r\n      this.rowUpdater.objectLoad(object);\r\n      this.DataTable = dataTable;\r\n   }\r\n\r\n   onShow() {}\r\n\r\n   /**\r\n    * @method show()\r\n    * Show this component.\r\n    * @param {obj} $view\r\n    *        the webix.$view to hover the popup around.\r\n    * @param {json} options\r\n    *        Additional webix options related to the .show() method.\r\n    */\r\n   show($view, options = null) {\r\n      if (options != null) {\r\n         $$(this.ids.component).show($view, options);\r\n      } else {\r\n         $$(this.ids.component).show($view);\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method submit()\r\n    * Process the submit action by getting the values to change and then\r\n    * running a batchUpdate() on the items in our datatable that were selected.\r\n    */\r\n   submit() {\r\n      // Update values to records\r\n      let update_button = $$(this.ids.submit),\r\n         update_items = this.rowUpdater.getValue() || [];\r\n\r\n      update_button.disable();\r\n\r\n      if (!this.GridComponent) {\r\n         // TODO : Message\r\n         // console.log(\"no data collection to update\");\r\n         update_button.enable();\r\n         return;\r\n      } else if (update_items.length < 1) {\r\n         // TODO : Message\r\n         update_button.enable();\r\n         return;\r\n      }\r\n\r\n      let $datatable = this.GridComponent.getDataTable(); // $$(DataTable.ui.id);\r\n      let updatedRowIds = [];\r\n      $datatable.data.each(function (row) {\r\n         if (\r\n            row &&\r\n            row.hasOwnProperty(\"appbuilder_select_item\") &&\r\n            row.appbuilder_select_item == 1\r\n         ) {\r\n            updatedRowIds.push(row.id);\r\n         }\r\n      });\r\n\r\n      let vals = {};\r\n      update_items.forEach((item) => {\r\n         let fieldInfo = this.CurrentObject.fieldByID(item.fieldId);\r\n         if (!fieldInfo) return;\r\n\r\n         vals[fieldInfo.columnName] = item.value;\r\n      });\r\n\r\n      if (updatedRowIds.length > 0) {\r\n         webix.confirm({\r\n            title: L(\"Updating Multiple Records\"),\r\n            text: L(\"Are you sure you want to update the selected records?\"),\r\n            callback: (result) => {\r\n               if (result) {\r\n                  if ($datatable && $datatable.showProgress)\r\n                     $datatable.showProgress({ type: \"icon\" });\r\n\r\n                  let objModel = this.CurrentObject.model();\r\n                  objModel\r\n                     .batchUpdate({\r\n                        rowIds: updatedRowIds,\r\n                        values: vals,\r\n                     })\r\n                     .then(() => {\r\n                        // Anything we need to do after we are done.\r\n                        update_button.enable();\r\n                        this.hide();\r\n\r\n                        if ($datatable && $datatable.hideProgress)\r\n                           $datatable.hideProgress();\r\n                     })\r\n                     .catch((err) => {\r\n                        this.AB.notify.developer(err, {\r\n                           context:\r\n                              \"ABViewGridPopupMassUpdate:submit(): Error during batchUpdate\",\r\n                           rowIds: updatedRowIds,\r\n                           values: vals,\r\n                        });\r\n                     });\r\n               } else {\r\n                  update_button.enable();\r\n               }\r\n            },\r\n         });\r\n      } else {\r\n         webix.alert({\r\n            title: L(\"No Records Selected\"),\r\n            text: L(\r\n               \"You need to select at least one record...did you drink your coffee today?\"\r\n            ),\r\n         });\r\n         update_button.enable();\r\n         this.hide();\r\n      }\r\n   }\r\n}\r\n","/*\r\n * ABViewGridPopupSortFields\r\n *\r\n * Manage the Sort Fields popup.\r\n *\r\n */\r\n\r\nimport ClassUI from \"../../../ui/ClassUI\";\r\n\r\nvar L = null;\r\n\r\nexport default class AB_Work_Object_Workspace_PopupSortFields extends ClassUI {\r\n   constructor(idBase) {\r\n      idBase = idBase || \"abviewgridpopupSortFields\";\r\n\r\n      super({\r\n         component: `${idBase}_popupSort`,\r\n         list: `${idBase}_popupSort_list`,\r\n         form: `${idBase}_popupSort_form`,\r\n      });\r\n\r\n      this.CurrentObject = null;\r\n      // {ABObject}\r\n      // The current ABObject we are working with.\r\n\r\n      this._blockOnChange = false;\r\n      // {bool}\r\n      // Should we skip the onChange handler processing at this time?\r\n\r\n      this._settings = null;\r\n      // {json}\r\n      // default sort settings.\r\n\r\n      if (!L) {\r\n         L = (...params) => {\r\n            return this.AB.Multilingual.label(...params);\r\n         };\r\n      }\r\n   }\r\n\r\n   uiForm() {\r\n      return {\r\n         view: \"form\",\r\n         id: this.ids.form,\r\n         // autoheight: true,\r\n         borderless: true,\r\n         elements: [\r\n            {\r\n               view: \"button\",\r\n               type: \"form\",\r\n               css: \"webix_primary\",\r\n               value: L(\"Add new sort\"),\r\n               on: {\r\n                  onItemClick: (/* id, e, node */) => {\r\n                     this.clickAddNewSort();\r\n                     this.triggerOnChange();\r\n                  },\r\n               },\r\n            },\r\n         ],\r\n      };\r\n   }\r\n\r\n   ui() {\r\n      return {\r\n         view: \"popup\",\r\n         id: this.ids.component,\r\n         // autoheight:true,\r\n         width: 600,\r\n         body: this.uiForm(),\r\n         on: {\r\n            onShow: () => {\r\n               this.onShow();\r\n            },\r\n         },\r\n      };\r\n   }\r\n\r\n   // Our init() function for setting up our UI\r\n   async init(AB) {\r\n      if (AB) {\r\n         this.AB = AB;\r\n      }\r\n\r\n      webix.ui(this.ui());\r\n   }\r\n\r\n   /**\r\n    * @function clickAddNewSort\r\n    * When the user clicks the \"Add New Sort\" button, this routine will\r\n    * add another row to the sort form.\r\n    * @param {string} fieldId\r\n    *        The ABField.id of the field to auto select in this new row.\r\n    * @param {string} dir\r\n    *        The sort order to auto select in this new row.\r\n    */\r\n   // clickAddNewSort: function(by, dir, isMulti, id) {\r\n   clickAddNewSort(fieldId, dir) {\r\n      var self = this;\r\n      var sort_form = $$(this.ids.form);\r\n\r\n      var viewIndex = sort_form.getChildViews().length - 1;\r\n      var listFields = this.getFieldList(true);\r\n      sort_form.addView(\r\n         {\r\n            id: \"sort\" + webix.uid(),\r\n            cols: [\r\n               {\r\n                  view: \"combo\",\r\n                  width: 220,\r\n                  options: listFields,\r\n                  on: {\r\n                     onChange: function (columnId) {\r\n                        var el = this;\r\n                        self.onChangeCombo(columnId, el);\r\n                     },\r\n                  },\r\n               },\r\n               {\r\n                  view: \"segmented\",\r\n                  width: 200,\r\n                  options: [\r\n                     {\r\n                        id: \"\",\r\n                        value: L(\"Please select field\"),\r\n                     },\r\n                  ],\r\n                  on: {\r\n                     onChange: (/* newv, oldv */) => {\r\n                        // 'asc' or 'desc' values\r\n                        this.triggerOnChange();\r\n                     },\r\n                  },\r\n               },\r\n               {\r\n                  view: \"button\",\r\n                  css: \"webix_danger\",\r\n                  icon: \"fa fa-trash\",\r\n                  type: \"icon\",\r\n                  width: 30,\r\n                  on: {\r\n                     onItemClick: function () {\r\n                        sort_form.removeView(this.getParentView());\r\n                        self.refreshFieldList(true);\r\n                        self.triggerOnChange();\r\n                     },\r\n                  },\r\n               },\r\n            ],\r\n         },\r\n         viewIndex\r\n      );\r\n\r\n      // Select field\r\n      if (fieldId) {\r\n         var fieldsCombo = sort_form\r\n            .getChildViews()\r\n            [viewIndex].getChildViews()[0];\r\n         fieldsCombo.setValue(fieldId);\r\n      }\r\n      // select direction\r\n      if (dir) {\r\n         var segmentButton = sort_form\r\n            .getChildViews()\r\n            [viewIndex].getChildViews()[1];\r\n         segmentButton.setValue(dir);\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @function getFieldList\r\n    * return field list so we can present a custom UI for view\r\n    * @param {bool} excludeSelected\r\n    *        Should we ignore fields that already exist in the form?\r\n    * @return {array} [ { id, value } ]\r\n    *         an array that is compatible with the webix.list\r\n    *         widget.\r\n    */\r\n   getFieldList(excludeSelected) {\r\n      var sort_form = $$(this.ids.form),\r\n         listFields = [];\r\n\r\n      var allFields = this.CurrentObject.fields();\r\n      if (allFields.length == 0) return listFields;\r\n\r\n      // Get all fields include hidden fields\r\n      allFields.forEach((f) => {\r\n         if (f.fieldIsSortable()) {\r\n            listFields.push({\r\n               id: f.id,\r\n               value: f.label,\r\n            });\r\n         }\r\n      });\r\n\r\n      // Remove selected field\r\n      if (excludeSelected) {\r\n         var childViews = sort_form.getChildViews();\r\n         if (childViews.length > 1) {\r\n            // Ignore 'Add new sort' button\r\n            childViews.forEach(function (cView, index) {\r\n               if (childViews.length - 1 <= index) return false;\r\n\r\n               var selectedValue = cView.getChildViews()[0].getValue();\r\n               if (selectedValue) {\r\n                  listFields = listFields.filter((f) => f.id != selectedValue);\r\n               }\r\n            });\r\n         }\r\n      }\r\n      return listFields;\r\n   }\r\n\r\n   /**\r\n    * @function objectLoad\r\n    * Ready the Popup according to the current object\r\n    * @param {ABObject} object  the currently selected object.\r\n    */\r\n   objectLoad(object) {\r\n      this.CurrentObject = object;\r\n   }\r\n\r\n   /**\r\n    * @method setSettings\r\n    * Initialize the form with a set of conditions.\r\n    * @param {Array} settings\r\n    *        The default settings for this form.\r\n    *        [\r\n    *           {\r\n    *              key: uuid,     // ABField.id\r\n    *              dir: string,   // 'asc' or 'desc'\r\n    *           }\r\n    *        ]\r\n    */\r\n   setSettings(settings) {\r\n      this._settings = this.AB.cloneDeep(settings);\r\n   }\r\n\r\n   /**\r\n    * @method getSettings\r\n    * return the current sort settings stored by this form.\r\n    * @return {Array} -\r\n    *         [\r\n    *            {\r\n    *               key: uuid,     // ABField.id\r\n    *               dir: string,   // 'asc' or 'desc'\r\n    *            }\r\n    *         ]\r\n    */\r\n   getSettings() {\r\n      var sort_form = $$(this.ids.form),\r\n         sortFields = [];\r\n\r\n      var childViews = sort_form.getChildViews();\r\n      if (childViews.length > 1) {\r\n         // Ignore 'Add new sort' button\r\n         childViews.forEach(function (cView, index) {\r\n            if (childViews.length - 1 <= index) return false;\r\n\r\n            var fieldId = cView.getChildViews()[0].getValue();\r\n            var dir = cView.getChildViews()[1].getValue();\r\n            sortFields.push({\r\n               key: fieldId,\r\n               dir: dir,\r\n            });\r\n         });\r\n      }\r\n      return sortFields;\r\n   }\r\n\r\n   /**\r\n    * @method onChangeCombo()\r\n    * Update the display once they have chosen a field to sort by.\r\n    * We now need to offer the appropriate sort direction chooser.\r\n    * @param {string} fieldID\r\n    *        The value of the combo box now.\r\n    * @param {webix.$view} el\r\n    *        The current Webix.$view that was the combo box that just\r\n    *        changed.\r\n    */\r\n   onChangeCombo(fieldID, el) {\r\n      var allFields = this.CurrentObject.fields();\r\n      var chosenField = null,\r\n         sortDir = el.getParentView().getChildViews()[1],\r\n         // isMultiLingual = el.getParentView().getChildViews()[2],\r\n         // isMulti = 0,\r\n         options = null;\r\n\r\n      chosenField = allFields.find((f) => f.id == fieldID);\r\n      if (!chosenField) return;\r\n\r\n      switch (chosenField.key) {\r\n         case \"date\":\r\n            options = [\r\n               { id: \"asc\", value: L(\"Before -> After\") },\r\n               { id: \"desc\", value: L(\"After -> Before\") },\r\n            ];\r\n            break;\r\n         case \"number\":\r\n            options = [\r\n               { id: \"asc\", value: L(\"1 -> 9\") },\r\n               { id: \"desc\", value: L(\"9 -> 1\") },\r\n            ];\r\n            break;\r\n         case \"string\":\r\n         default:\r\n            options = [\r\n               { id: \"asc\", value: L(\"A -> Z\") },\r\n               { id: \"desc\", value: L(\"Z -> A\") },\r\n            ];\r\n            break;\r\n      }\r\n\r\n      sortDir.define(\"options\", options);\r\n      sortDir.refresh();\r\n\r\n      // if (columnConfig.settings.supportMultilingual)\r\n      //    isMulti = columnConfig.settings.supportMultilingual;\r\n\r\n      // isMultiLingual.setValue(isMulti);\r\n\r\n      this.refreshFieldList();\r\n      this.triggerOnChange();\r\n   }\r\n\r\n   /**\r\n    * @function onShow\r\n    * Rebuild the form when an onShow() is called.\r\n    */\r\n   onShow() {\r\n      var sort_form = $$(this.ids.form);\r\n\r\n      // clear field options in the form\r\n      webix.ui(this.uiForm(), sort_form);\r\n\r\n      var sorts = this._settings;\r\n      if (sorts && sorts.forEach) {\r\n         sorts.forEach((s) => {\r\n            this.clickAddNewSort(s.key, s.dir);\r\n         });\r\n      }\r\n\r\n      if (sorts == null || sorts.length == 0) {\r\n         this.clickAddNewSort();\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method refreshFieldList\r\n    * return an updated field list so you cannot duplicate a sort\r\n    * @param {bool} ignoreRemoveViews\r\n    *\r\n    */\r\n   refreshFieldList(ignoreRemoveViews) {\r\n      var sort_form = $$(this.ids.form),\r\n         listFields = this.getFieldList(false),\r\n         selectedFields = [],\r\n         removeChildViews = [];\r\n\r\n      var childViews = sort_form.getChildViews();\r\n      if (childViews.length > 1) {\r\n         // Ignore 'Add new sort' button\r\n         childViews.forEach(function (cView, index) {\r\n            if (childViews.length - 1 <= index) return false;\r\n\r\n            var fieldId = cView.getChildViews()[0].getValue(),\r\n               // fieldObj = $.grep(listFields, function (f) { return f.id == fieldId });\r\n               fieldObj = listFields.find((f) => f.id == fieldId);\r\n\r\n            if (fieldObj) {\r\n               // Add selected field to list\r\n               selectedFields.push(fieldObj);\r\n            } else {\r\n               // Add condition to remove\r\n               removeChildViews.push(cView);\r\n            }\r\n         });\r\n      }\r\n\r\n      // Remove filter conditions when column is deleted\r\n      if (!ignoreRemoveViews) {\r\n         removeChildViews.forEach(function (cView) {\r\n            sort_form.removeView(cView);\r\n         });\r\n      }\r\n\r\n      // Field list should not duplicate field items\r\n      childViews = sort_form.getChildViews();\r\n      if (childViews.length > 1) {\r\n         // Ignore 'Add new sort' button\r\n         childViews.forEach(function (cView, index) {\r\n            if (childViews.length - 1 <= index) return false;\r\n\r\n            var fieldId = cView.getChildViews()[0].getValue(),\r\n               // fieldObj = $.grep(listFields, function (f) { return f.id == fieldId }),\r\n               fieldObj = listFields.filter(function (f) {\r\n                  return f.id == fieldId;\r\n               });\r\n\r\n            // var selectedFieldsExcludeCurField = $(selectedFields).not(fieldObj);\r\n            var selectedFieldsExcludeCurField = selectedFields.filter(function (\r\n               x\r\n            ) {\r\n               if (Array.isArray(fieldObj) && fieldObj.indexOf(x) !== -1) {\r\n                  return false;\r\n               }\r\n               return true;\r\n            });\r\n\r\n            // var enableFields = $(listFields).not(selectedFieldsExcludeCurField).get();\r\n            var enableFields = listFields.filter(function (x) {\r\n               if (\r\n                  Array.isArray(selectedFieldsExcludeCurField) &&\r\n                  selectedFieldsExcludeCurField.indexOf(x) !== -1\r\n               ) {\r\n                  return false;\r\n               }\r\n               return true;\r\n            });\r\n\r\n            // Update field list\r\n            cView.getChildViews()[0].define(\"options\", enableFields);\r\n            cView.getChildViews()[0].refresh();\r\n         });\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @function triggerOnChange\r\n    * This parses the sort form to build in order the sorts then saves to the application object workspace\r\n    */\r\n   triggerOnChange() {\r\n      // block .onChange callback\r\n      if (this._blockOnChange) return;\r\n\r\n      this._settings = this.getSettings();\r\n\r\n      this.emit(\"changed\", this._settings);\r\n   }\r\n\r\n   blockOnChange() {\r\n      this._blockOnChange = true;\r\n   }\r\n\r\n   unblockOnChange() {\r\n      this._blockOnChange = false;\r\n   }\r\n\r\n   /**\r\n    * @function show()\r\n    * Show this component.\r\n    * @param {obj} $view\r\n    *        the webix.$view to hover the popup around.\r\n    * @param {uuid} fieldId\r\n    *        the ABField.id we want to prefill the sort with\r\n    * @param {json} options\r\n    *        Additional webix.show() options parameters.\r\n    */\r\n   show($view, fieldId, options) {\r\n      this.blockOnChange();\r\n\r\n      $$(this.ids.component).show($view, options || null);\r\n\r\n      if (fieldId) {\r\n         this.clickAddNewSort(fieldId);\r\n      }\r\n\r\n      this.unblockOnChange();\r\n   }\r\n\r\n   /**\r\n    * @function sort()\r\n    * client sort data in list\r\n    *\r\n    * @param {Object} a\r\n    * @param {Object} b\r\n    */\r\n   sort(a, b) {\r\n      let result = 0;\r\n\r\n      const childViews = $$(this.ids.form).getChildViews();\r\n      if (childViews.length > 1) {\r\n         // Ignore 'Add new sort' button\r\n         childViews.forEach((cView, index) => {\r\n            if (childViews.length - 1 <= index || result != 0) return;\r\n\r\n            const fieldId = cView.getChildViews()[0].getValue();\r\n            const dir = cView.getChildViews()[1].getValue();\r\n\r\n            const field = this.CurrentObject.fieldByID(fieldId);\r\n            if (!field) return;\r\n\r\n            const by = field.columnName; // column name\r\n\r\n            let aValue = a[by],\r\n               bValue = b[by];\r\n\r\n            if (Array.isArray(aValue)) {\r\n               aValue = (aValue || [])\r\n                  .map(function (item) {\r\n                     return item.text || item;\r\n                  })\r\n                  .join(\" \");\r\n            }\r\n\r\n            if (Array.isArray(bValue)) {\r\n               bValue = (bValue ?? [])\r\n                  .map((item) => item.text || item)\r\n                  .join(\" \");\r\n            }\r\n\r\n            if (aValue != bValue) {\r\n               if (dir == \"asc\") {\r\n                  result = aValue > bValue ? 1 : -1;\r\n               } else {\r\n                  result = aValue < bValue ? 1 : -1;\r\n               }\r\n            }\r\n         });\r\n      }\r\n\r\n      return result;\r\n   }\r\n}\r\n","const ABViewImageCore = require(\"../../core/views/ABViewImageCore\");\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABViewImage extends ABViewImageCore {\r\n   // constructor(values, application, parent, defaultValues) {\r\n   //    super(values, application, parent, defaultValues);\r\n   // }\r\n\r\n   //\r\n   //\tEditor Related\r\n   //\r\n\r\n   /**\r\n    * @method editorComponent\r\n    * return the Editor for this UI component.\r\n    * the editor should display either a \"block\" view or \"preview\" of\r\n    * the current layout of the view.\r\n    * @param {string} mode what mode are we in ['block', 'preview']\r\n    * @return {Component}\r\n    */\r\n   editorComponent(App, mode) {\r\n      var idBase = \"ABViewImageEditorComponent\";\r\n\r\n      var ImageComponent = this.component(App, idBase);\r\n\r\n      return ImageComponent;\r\n   }\r\n\r\n   //\r\n   // Property Editor\r\n   //\r\n\r\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\r\n      var commonUI = super.propertyEditorDefaultElements(\r\n         App,\r\n         ids,\r\n         _logic,\r\n         ObjectDefaults\r\n      );\r\n\r\n      _logic.validateType = (item) => {\r\n         // verify file type\r\n         var acceptableTypes = [\"jpg\", \"jpeg\", \"bmp\", \"png\", \"gif\"];\r\n         var type = item.type.toLowerCase();\r\n         if (acceptableTypes.indexOf(type) == -1) {\r\n            webix.message(\r\n               L(\"Only [{0}] images are supported\", [\r\n                  acceptableTypes.join(\", \"),\r\n               ])\r\n            );\r\n            return false;\r\n         } else {\r\n            // set upload url to uploader\r\n            var currView = _logic.currentEditObject();\r\n            let actionKey = `opstool.AB_${currView.application.name.replace(\r\n               \"_\",\r\n               \"\"\r\n            )}.view`;\r\n            let url = `/file/upload/${currView.application.name}/${actionKey}/1`;\r\n\r\n            $$(ids.file).define(\"upload\", url);\r\n            $$(ids.file).refresh();\r\n\r\n            return true;\r\n         }\r\n      };\r\n\r\n      _logic.uploadedFile = (fileInfo) => {\r\n         if (!fileInfo || !fileInfo.data) return;\r\n\r\n         var currView = _logic.currentEditObject();\r\n         currView.settings.filename = fileInfo.data.uuid;\r\n\r\n         // get width & height of images\r\n         if (fileInfo.file) {\r\n            let img = new Image();\r\n            img.onload = function () {\r\n               $$(ids.width).setValue(img.width);\r\n               $$(ids.height).setValue(img.height);\r\n            };\r\n            img.src = URL.createObjectURL(fileInfo.file);\r\n         }\r\n\r\n         // trigger a save()\r\n         this.propertyEditorSave(ids, currView);\r\n      };\r\n\r\n      // in addition to the common .label  values, we\r\n      // ask for:\r\n      return commonUI.concat([\r\n         {\r\n            cols: [\r\n               {\r\n                  view: \"label\",\r\n                  label: L(\"Image:\"),\r\n                  css: \"ab-text-bold\",\r\n                  width: this.AB.UISettings.config().labelWidthXLarge,\r\n               },\r\n               {\r\n                  view: \"uploader\",\r\n                  value: L(\"Upload image\"),\r\n                  name: \"file\",\r\n                  apiOnly: true,\r\n                  inputName: \"image\",\r\n                  multiple: false,\r\n                  on: {\r\n                     onBeforeFileAdd: (item) => {\r\n                        return _logic.validateType(item);\r\n                     },\r\n\r\n                     onFileUpload: (file, response) => {\r\n                        _logic.uploadedFile(file);\r\n                     },\r\n\r\n                     onFileUploadError: (file, response) => {},\r\n                  },\r\n               },\r\n            ],\r\n         },\r\n         {\r\n            view: \"counter\",\r\n            name: \"width\",\r\n            label: L(\"Width:\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthXLarge,\r\n         },\r\n         {\r\n            view: \"counter\",\r\n            name: \"height\",\r\n            label: L(\"Height:\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthXLarge,\r\n         },\r\n      ]);\r\n   }\r\n\r\n   static propertyEditorPopulate(App, ids, view) {\r\n      super.propertyEditorPopulate(App, ids, view);\r\n\r\n      $$(ids.width).setValue(view.settings.width);\r\n      $$(ids.height).setValue(view.settings.height);\r\n   }\r\n\r\n   static propertyEditorValues(ids, view) {\r\n      super.propertyEditorValues(ids, view);\r\n\r\n      view.settings.width = $$(ids.width).getValue();\r\n      view.settings.height = $$(ids.height).getValue();\r\n   }\r\n\r\n   /*\r\n    * @component()\r\n    * return a UI component based upon this view.\r\n    * @param {obj} App\r\n    * @return {obj} UI component\r\n    */\r\n   component(App) {\r\n      var idBase = `ABViewImage_${this.id}`;\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n      };\r\n\r\n      // an ABViewLabel is a simple Label\r\n      var _ui = {\r\n         cols: [\r\n            {\r\n               id: ids.component,\r\n               view: \"template\",\r\n               template: \"\",\r\n               height: this.settings.height,\r\n               width: this.settings.width,\r\n            },\r\n            {},\r\n         ],\r\n      };\r\n\r\n      // make sure each of our child views get .init() called\r\n      var _init = (options) => {\r\n         if (!$$(ids.component)) return;\r\n\r\n         if (this.settings.filename) {\r\n            let imgTag = `<img src=\"/file/${this.settings.filename}\" height=\"${this.settings.height}\" width=\"${this.settings.width}\">`;\r\n\r\n            $$(ids.component).define(\"template\", imgTag);\r\n         } else {\r\n            $$(ids.component).define(\"template\", \"\");\r\n         }\r\n\r\n         $$(ids.component).refresh();\r\n      };\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: _init,\r\n      };\r\n   }\r\n};\r\n","const ABViewKanbanCore = require(\"../../core/views/ABViewKanbanCore\");\r\nimport ABViewComponent from \"./ABViewComponent\";\r\n\r\nconst ABViewPropertyLinkPage = require(\"./viewProperties/ABViewPropertyLinkPage\")\r\n   .default;\r\n\r\nconst ABFormSidePanel = require(\"./ABViewKanbanFormSidePanel\");\r\n\r\nvar L = null;\r\n// multilingual Label fn()\r\n\r\nvar ABFieldConnect = null;\r\nvar ABFieldUser = null;\r\nvar ABFieldList = null;\r\n\r\nclass ABViewKanBanComponent extends ABViewComponent {\r\n   constructor(viewKanBan, idBase) {\r\n      var base = idBase || `ABViewKanBan_${viewKanBan.id}`;\r\n\r\n      super(base, {\r\n         // component: \"\",\r\n         kanban: \"\",\r\n         resizer: \"\",\r\n      });\r\n\r\n      this.viewKanBan = viewKanBan;\r\n      this.AB = viewKanBan.AB;\r\n\r\n      this.settings = viewKanBan.settings;\r\n\r\n      this.FormSide = new ABFormSidePanel(\r\n         this,\r\n         `${base}_formSidePanel`,\r\n         this.settings.editFields\r\n      );\r\n\r\n      this.CurrentVerticalField = null;\r\n      this.CurrentHorizontalField = null;\r\n      this.CurrentOwnerField = null;\r\n\r\n      this.TextTemplate = viewKanBan.TextTemplate;\r\n\r\n      this._updatingOwnerRowId = null;\r\n\r\n      if (!L) {\r\n         L = (...params) => {\r\n            return this.AB.Multilingual.label(...params);\r\n         };\r\n\r\n         ABFieldConnect = this.AB.Class.ABFieldManager.fieldByKey(\r\n            \"connectObject\"\r\n         );\r\n         ABFieldUser = this.AB.Class.ABFieldManager.fieldByKey(\"user\");\r\n         ABFieldList = this.AB.Class.ABFieldManager.fieldByKey(\"list\");\r\n      }\r\n   }\r\n\r\n   ui() {\r\n      var ids = this.ids;\r\n      var self = this;\r\n\r\n      return {\r\n         id: ids.component,\r\n         cols: [\r\n            {\r\n               id: ids.kanban,\r\n               view: \"kanban\",\r\n               cols: [],\r\n               userList: {\r\n                  view: \"menu\",\r\n                  // yCount: 8,\r\n                  // scroll: false,\r\n                  template: '<i class=\"fa fa-user\"></i> #value#',\r\n                  width: 150,\r\n                  on: {\r\n                     onSelectChange: function () {\r\n                        if (self._updatingOwnerRowId == null)\r\n                           // get this row id from onAvatarClick event\r\n                           return;\r\n\r\n                        let userId = this.getSelectedId(false);\r\n                        if (userId == null) return;\r\n\r\n                        self.updateOwner(self._updatingOwnerRowId, userId);\r\n                     },\r\n                  },\r\n               },\r\n               editor: false, // we use side bar\r\n               users: [],\r\n               tags: [],\r\n               data: [],\r\n               on: {\r\n                  onListAfterSelect: (itemId, list) => {\r\n                     this.CurrentDatacollection?.setCursor(itemId);\r\n                     this.emit(\"select\", itemId);\r\n\r\n                     if (itemId) {\r\n                        let data = $$(ids.kanban).getItem(itemId);\r\n                        this.FormSide.show(data);\r\n\r\n                        $$(ids.resizer)?.show();\r\n                     } else {\r\n                        this.FormSide.hide();\r\n\r\n                        $$(ids.resizer)?.hide();\r\n                     }\r\n                  },\r\n                  onAfterStatusChange: (rowId, status /*, list */) => {\r\n                     this.updateStatus(rowId, status);\r\n                  },\r\n                  onAvatarClick: (rowId /*, ev, node, list */) => {\r\n                     // keep this row id for update owner data in .userList\r\n                     this._updatingOwnerRowId = rowId;\r\n                  },\r\n               },\r\n            },\r\n            {\r\n               id: ids.resizer,\r\n               view: \"resizer\",\r\n               css: \"bg_gray\",\r\n               width: 11,\r\n               hidden: true,\r\n            },\r\n            this.FormSide.ui(),\r\n         ],\r\n      };\r\n   }\r\n\r\n   init(AB) {\r\n      this.AB = AB;\r\n\r\n      if (this.$kb) webix.extend(this.$kb, webix.ProgressBar);\r\n\r\n      this.FormSide.init(AB);\r\n      this.FormSide.on(\"add\", (newVals) => {\r\n         this.saveData(newVals);\r\n      });\r\n      this.FormSide.on(\"update\", (updateVals) => {\r\n         this.saveData(updateVals);\r\n      });\r\n   }\r\n\r\n   get $kb() {\r\n      if (!this._kb) {\r\n         this._kb = $$(this.ids.kanban);\r\n      }\r\n      return this._kb;\r\n   }\r\n\r\n   kanbanListTemplate() {\r\n      return {\r\n         icons: [\r\n            // { icon: \"mdi mdi-comment\", show: function (obj) { return !!obj.comments }, template: \"#comments.length#\" },\r\n            {\r\n               icon: \"fa fa-trash-o\",\r\n               click: (rowId /*, e */) => {\r\n                  this.removeCard(rowId);\r\n               },\r\n            },\r\n         ],\r\n         // avatar template\r\n         templateAvatar: (obj) => {\r\n            if (\r\n               this.CurrentOwnerField &&\r\n               obj[this.CurrentOwnerField.columnName]\r\n            ) {\r\n               return this.CurrentOwnerField.format(obj);\r\n            } else {\r\n               return \"<span class='webix_icon fa fa-user'></span>\";\r\n            }\r\n         },\r\n         // template for item body\r\n         // show item image and text\r\n         templateBody: (data) => {\r\n            if (!this.settings.template) {\r\n               return this.CurrentObject?.displayData(data);\r\n            }\r\n            // return our default text template\r\n            return this.TextTemplate.displayText(data);\r\n         },\r\n      };\r\n   }\r\n\r\n   /**\r\n    * @function hide()\r\n    *\r\n    * hide this component.\r\n    */\r\n   hide() {\r\n      $$(this.ids.component)?.hide();\r\n   }\r\n\r\n   /**\r\n    * @function show()\r\n    * Show this component.\r\n    */\r\n   async show() {\r\n      var ids = this.ids;\r\n      $$(ids.component)?.show();\r\n\r\n      this.FormSide.hide();\r\n\r\n      $$(ids.resizer)?.hide();\r\n\r\n      var CurrentObject = this.CurrentObject;\r\n      if (!CurrentObject) return;\r\n\r\n      // Get vertical grouping field and populate to kanban list\r\n      // NOTE: this field should be the select list type\r\n      var CurrentVerticalField = CurrentObject.fieldByID(\r\n         this.settings.verticalGroupingField\r\n      );\r\n      if (!CurrentVerticalField) return;\r\n      this.CurrentVerticalField = CurrentVerticalField;\r\n\r\n      let horizontalOptions = [];\r\n      var CurrentHorizontalField = CurrentObject.fieldByID(\r\n         this.settings.horizontalGroupingField\r\n      );\r\n      this.CurrentHorizontalField = CurrentHorizontalField;\r\n\r\n      if (\r\n         CurrentHorizontalField &&\r\n         CurrentHorizontalField instanceof ABFieldConnect\r\n      ) {\r\n         // Pull horizontal options\r\n         horizontalOptions = await CurrentHorizontalField.getOptions();\r\n      }\r\n\r\n      // Option format -  { id: \"1543563751920\", text: \"Normal\", hex: \"#4CAF50\" }\r\n      let verticalOptions = (CurrentVerticalField.settings.options || []).map(\r\n         (opt) => {\r\n            // Vertical & Horizontal fields\r\n            if (CurrentVerticalField && CurrentHorizontalField) {\r\n               let rows = [],\r\n                  // [{\r\n                  //    id: '',\r\n                  //    text: ''\r\n                  // }]\r\n                  horizontalVals = [];\r\n\r\n               // pull options of the Horizontal field\r\n               if (CurrentHorizontalField instanceof ABFieldList) {\r\n                  // make a copy of the settings.\r\n                  horizontalVals = (\r\n                     CurrentHorizontalField.settings.options || []\r\n                  ).map((o) => o);\r\n               } else if (CurrentHorizontalField instanceof ABFieldUser) {\r\n                  horizontalVals = CurrentHorizontalField.getUsers().map(\r\n                     (u) => {\r\n                        return {\r\n                           id: u.id,\r\n                           text: u.text || u.value,\r\n                        };\r\n                     }\r\n                  );\r\n               } else if (CurrentHorizontalField instanceof ABFieldConnect) {\r\n                  horizontalVals = horizontalOptions.map(({ id, text }) => ({\r\n                     id,\r\n                     text,\r\n                  }));\r\n               }\r\n\r\n               horizontalVals.push({\r\n                  id: null,\r\n                  text: L(\"Other\"),\r\n               });\r\n\r\n               horizontalVals.forEach((val) => {\r\n                  let statusOps = {};\r\n                  statusOps[CurrentVerticalField.columnName] = opt.id;\r\n                  statusOps[CurrentHorizontalField.columnName] = val.id;\r\n\r\n                  // Header\r\n                  rows.push({\r\n                     template: val.text,\r\n                     height: 20,\r\n                     css: \"progress_header\",\r\n                  });\r\n\r\n                  // Kanban list\r\n                  rows.push({\r\n                     view: \"kanbanlist\",\r\n                     status: statusOps,\r\n                     type: this.kanbanListTemplate(),\r\n                  });\r\n               });\r\n\r\n               return {\r\n                  header: opt.text,\r\n                  body: {\r\n                     margin: 0,\r\n                     rows: rows,\r\n                  },\r\n               };\r\n            }\r\n            // Vertical field only\r\n            else if (CurrentVerticalField) {\r\n               let statusOps = {};\r\n               statusOps[CurrentVerticalField.columnName] = opt.id;\r\n\r\n               return {\r\n                  header: opt.text,\r\n                  body: {\r\n                     view: \"kanbanlist\",\r\n                     status: statusOps,\r\n                     type: this.kanbanListTemplate(),\r\n                  },\r\n               };\r\n            }\r\n         }\r\n      );\r\n\r\n      // Rebuild kanban that contains options\r\n      // NOTE: webix kanban does not support dynamic vertical list\r\n      webix.ui(verticalOptions, $$(ids.kanban));\r\n      $$(ids.kanban).reconstruct();\r\n\r\n      // Owner field\r\n      var CurrentOwnerField = CurrentObject.fieldByID(this.settings.ownerField);\r\n      this.CurrentOwnerField = CurrentOwnerField;\r\n      if (CurrentOwnerField) {\r\n         let $menuUser = $$(ids.kanban).getUserList();\r\n         $menuUser.clearAll();\r\n\r\n         if (CurrentOwnerField instanceof ABFieldUser) {\r\n            let users = this.AB.Account.userList().map((u) => {\r\n               return {\r\n                  id: u.username,\r\n                  value: u.username,\r\n               };\r\n            });\r\n\r\n            $menuUser.parse(users);\r\n         } else if (CurrentOwnerField instanceof ABFieldConnect) {\r\n            let options = await CurrentOwnerField.getOptions();\r\n\r\n            $menuUser.parse(\r\n               options.map((opt) => {\r\n                  return {\r\n                     id: opt.id,\r\n                     value: opt.text,\r\n                  };\r\n               })\r\n            );\r\n         }\r\n      }\r\n   }\r\n\r\n   busy() {\r\n      this.$kb?.showProgress?.({ type: \"icon\" });\r\n   }\r\n\r\n   ready() {\r\n      this.$kb?.hideProgress?.();\r\n   }\r\n\r\n   objectLoad(object) {\r\n      super.objectLoad(object);\r\n\r\n      this.TextTemplate.objectLoad(object);\r\n      this.FormSide.objectLoad(object);\r\n   }\r\n\r\n   /**\r\n    * @method datacollectionLoad\r\n    *\r\n    * @param datacollection {ABDatacollection}\r\n    */\r\n   datacollectionLoad(datacollection) {\r\n      super.datacollectionLoad(datacollection);\r\n\r\n      var DC = this.CurrentDatacollection;\r\n      if (!DC) {\r\n         DC = datacollection;\r\n      }\r\n      if (DC) {\r\n         DC.bind(this.$kb);\r\n         var obj = DC.datasource;\r\n         if (obj) this.objectLoad(obj);\r\n         return;\r\n      }\r\n\r\n      this.$kb.unbind();\r\n   }\r\n\r\n   async updateStatus(rowId, status) {\r\n      if (!this.CurrentVerticalField) return;\r\n\r\n      // Show loading cursor\r\n      this.busy();\r\n\r\n      let patch = {};\r\n\r\n      // update multi-values\r\n      if (status instanceof Object) {\r\n         patch = status;\r\n      }\r\n      // update single value\r\n      else {\r\n         patch[this.CurrentVerticalField.columnName] = status;\r\n      }\r\n\r\n      // update empty value\r\n      let needRefresh = false;\r\n      for (let key in patch) {\r\n         if (patch[key] == null) {\r\n            patch[key] = \"\";\r\n\r\n            // WORKAROUND: if update data is empty, then it will need to refresh\r\n            // the kanban after update\r\n            needRefresh = true;\r\n         }\r\n      }\r\n\r\n      try {\r\n         await this.CurrentObject?.model().update(rowId, patch);\r\n\r\n         this.ready();\r\n\r\n         if (needRefresh) this.show();\r\n\r\n         // update form data\r\n         if (this.FormSide.isVisible()) {\r\n            let data = $$(ids.kanban).getItem(rowId);\r\n            this.FormSide.refresh(data);\r\n         }\r\n      } catch (err) {\r\n         this.AB.notify.developer(err, {\r\n            context: \"ABViewKanban:updateStatus(): Error saving item:\",\r\n            rowId,\r\n            patch,\r\n         });\r\n         this.ready();\r\n      }\r\n   }\r\n\r\n   async updateOwner(rowId, val) {\r\n      if (!this.CurrentOwnerField) return;\r\n\r\n      // Show loading cursor\r\n      this.busy();\r\n\r\n      let patch = {};\r\n      patch[this.CurrentOwnerField.columnName] = val;\r\n\r\n      try {\r\n         let updatedRow = await this.CurrentObject?.model().update(\r\n            rowId,\r\n            patch\r\n         );\r\n\r\n         // update card\r\n         this.$kb?.updateItem(rowId, updatedRow);\r\n\r\n         // update form data\r\n         if (this.FormSide.isVisible()) {\r\n            let data = this.$kb.getItem(rowId);\r\n            this.FormSide.refresh(data);\r\n         }\r\n\r\n         this.ready();\r\n      } catch (err) {\r\n         this.AB.notify.developer(err, {\r\n            context: \"ABViewKanban:updateOwner(): Error saving item:\",\r\n            rowId,\r\n            val,\r\n         });\r\n\r\n         this.ready();\r\n      }\r\n   }\r\n\r\n   saveData(data) {\r\n      // update\r\n      if (data.id && this.$kb.exists(data.id)) {\r\n         this.$kb.updateItem(data.id, data);\r\n      }\r\n      // insert\r\n      else {\r\n         this.$kb.add(data);\r\n      }\r\n   }\r\n\r\n   unselect() {\r\n      if (this.$kb) {\r\n         this.$kb.eachList(function (list /*, status*/) {\r\n            list?.unselect?.();\r\n         });\r\n      }\r\n   }\r\n\r\n   addCard() {\r\n      this.unselect();\r\n\r\n      // show the side form\r\n      this.FormSide.show();\r\n      $$(this.ids.resizer).show();\r\n   }\r\n\r\n   async removeCard(rowId) {\r\n      webix.confirm({\r\n         title: L(\"Remove card\"),\r\n         text: L(\"Do you want to delete this card?\"),\r\n         callback: async (result) => {\r\n            if (!result) return;\r\n\r\n            this.busy();\r\n\r\n            try {\r\n               let response = await this.CurrentObject?.model().delete(rowId);\r\n\r\n               if (response.numRows > 0) {\r\n                  this.$kb.remove(rowId);\r\n               } else {\r\n                  webix.alert({\r\n                     text: L(\r\n                        \"No rows were effected. This does not seem right.\"\r\n                     ),\r\n                  });\r\n               }\r\n            } catch (err) {\r\n               this.AB.notify.developer(err, {\r\n                  message: \"ABViewKanban:removeCard(): Error deleting item:\",\r\n                  rowId,\r\n               });\r\n            }\r\n            this.ready();\r\n         },\r\n      });\r\n   }\r\n\r\n   /**\r\n    * @method setFields()\r\n    * Save the current view options.\r\n    * @param options - {\r\n    *       verticalGrouping:    {ABField} - required\r\n    *       horizontalGrouping:  {ABField} - optional\r\n    *       ownerField:          {ABField} - optional\r\n    * }\r\n    */\r\n   setFields(options) {\r\n      this.CurrentVerticalField = options.verticalGrouping;\r\n      this.CurrentHorizontalField = options.horizontalGrouping;\r\n      this.CurrentOwnerField = options.ownerField;\r\n   }\r\n}\r\n\r\nexport default class ABViewKanban extends ABViewKanbanCore {\r\n   //\r\n   //\tEditor Related\r\n   //\r\n\r\n   /**\r\n    * @method editorComponent\r\n    * return the Editor for this UI component.\r\n    * the editor should display either a \"block\" view or \"preview\" of\r\n    * the current layout of the view.\r\n    * @param {string} mode what mode are we in ['block', 'preview']\r\n    * @return {Component}\r\n    */\r\n   editorComponent(App, mode) {\r\n      var idBase = \"ABViewKanbanEditorComponent\";\r\n\r\n      var Kanban = this.component(App, idBase);\r\n\r\n      return {\r\n         ui: Kanban.ui,\r\n         logic: Kanban.logic,\r\n         onShow: Kanban.onShow,\r\n\r\n         init: () => {\r\n            // remove id of the component in caching for refresh .bind of the data collection\r\n            let dv = this.datacollection;\r\n            if (dv) dv.removeComponent(Kanban.ui.id);\r\n\r\n            Kanban.init();\r\n         },\r\n      };\r\n   }\r\n\r\n   component(v1App = false) {\r\n      var component = new ABViewKanBanComponent(this);\r\n\r\n      // if this is our v1Interface\r\n      if (v1App) {\r\n         var newComponent = component;\r\n         component = {\r\n            ui: component.ui(),\r\n            init: (options, accessLevel) => {\r\n               return newComponent.init(this.AB);\r\n            },\r\n            onShow: (...params) => {\r\n               return newComponent.onShow?.(...params);\r\n            },\r\n         };\r\n      }\r\n\r\n      return component;\r\n   }\r\n\r\n   get linkPageHelper() {\r\n      if (this.__linkPageHelper == null)\r\n         this.__linkPageHelper = new ABViewPropertyLinkPage();\r\n\r\n      return this.__linkPageHelper;\r\n   }\r\n}\r\n","/*\r\n * ABViewKanbanFormSidePanel\r\n *\r\n * Provide a form area for editing data in the Kan Ban view.\r\n *\r\n */\r\n\r\nconst ABViewComponent = require(\"./ABViewComponent\").default;\r\nconst ABViewForm = require(\"./ABViewForm\");\r\nconst ABViewFormButton = require(\"./ABViewFormButton\");\r\n\r\nvar L = null;\r\n// multilingual Label fn()\r\n\r\nmodule.exports = class ABWorkObjectKanBan extends ABViewComponent {\r\n   constructor(comKanBan, idBase, editFields) {\r\n      idBase = idBase || `${comKanBan.id}_formSidePanel`;\r\n      super(idBase, {\r\n         form: \"\",\r\n      });\r\n\r\n      if (!L) {\r\n         L = (...params) => {\r\n            return this.AB.Multilingual.label(...params);\r\n         };\r\n      }\r\n\r\n      this.AB = comKanBan.AB;\r\n\r\n      this.CurrentObjectID = null;\r\n      // {string}\r\n      // the ABObject.id of the object we are working with.\r\n\r\n      this.editFields = editFields;\r\n      // {array}\r\n      // An array of {ABField.id} that determines which fields should show up\r\n      // in the editor.\r\n\r\n      this._mockApp = this.AB.applicationNew({});\r\n      // {ABApplication}\r\n      // Any ABViews we create are expected to be in relation to\r\n      // an ABApplication, so we create a \"mock\" app for our\r\n      // workspace views to use to display.\r\n   }\r\n\r\n   /**\r\n    * @method CurrentObject()\r\n    * A helper to return the current ABObject we are working with.\r\n    * @return {ABObject}\r\n    */\r\n   get CurrentObject() {\r\n      return this.AB.objectByID(this.CurrentObjectID);\r\n   }\r\n\r\n   ui() {\r\n      var ids = this.ids;\r\n\r\n      // Our webix UI definition:\r\n      return {\r\n         id: ids.component,\r\n         width: 300,\r\n         hidden: true,\r\n         rows: [\r\n            {\r\n               view: \"toolbar\",\r\n               css: \"webix_dark\",\r\n               cols: [\r\n                  {\r\n                     view: \"label\",\r\n                     label: L(\"Edit Record\"),\r\n                  },\r\n                  {\r\n                     view: \"icon\",\r\n                     icon: \"wxi-close\",\r\n                     align: \"right\",\r\n                     click: (/* id */) => {\r\n                        this.hide();\r\n                     },\r\n                  },\r\n               ],\r\n            },\r\n            {\r\n               view: \"scrollview\",\r\n               body: {\r\n                  rows: [\r\n                     {\r\n                        id: ids.form,\r\n                        view: \"form\",\r\n                        borderless: true,\r\n                        rows: [],\r\n                     },\r\n                  ],\r\n               },\r\n            },\r\n         ],\r\n      };\r\n   }\r\n\r\n   async init(AB) {\r\n      this.AB = AB;\r\n   }\r\n\r\n   /**\r\n    * @method CurrentObject()\r\n    * A helper to return the current ABObject we are working with.\r\n    * @return {ABObject}\r\n    */\r\n   get CurrentObject() {\r\n      return this.AB.objectByID(this.CurrentObjectID);\r\n   }\r\n\r\n   objectLoad(object) {\r\n      this.CurrentObjectID = object.id;\r\n   }\r\n\r\n   hide() {\r\n      $$(this.ids.component)?.hide();\r\n\r\n      this.emit(\"close\");\r\n   }\r\n\r\n   show(data) {\r\n      $$(this.ids.component)?.show();\r\n\r\n      this.refreshForm(data);\r\n   }\r\n\r\n   isVisible() {\r\n      return $$(this.ids.component)?.isVisible() ?? false;\r\n   }\r\n\r\n   refreshForm(data) {\r\n      var ids = this.ids;\r\n      let $formView = $$(ids.form);\r\n      let CurrentObject = this.CurrentObject;\r\n\r\n      if (!CurrentObject || !$formView) return;\r\n\r\n      data = data || {};\r\n\r\n      let formAttrs = {\r\n         id: `${this.ids.component}_sideform`,\r\n         key: ABViewForm.common().key,\r\n         settings: {\r\n            columns: 1,\r\n            labelPosition: \"top\",\r\n            showLabel: 1,\r\n            clearOnLoad: 0,\r\n            clearOnSave: 0,\r\n            labelWidth: 120,\r\n            height: 0,\r\n         },\r\n      };\r\n\r\n      // let form = new ABViewForm(formAttrs, this._mockApp);\r\n      let form = this.AB.viewNewDetatched(formAttrs);\r\n\r\n      form.objectLoad(CurrentObject);\r\n\r\n      // Populate child elements\r\n      CurrentObject.fields().forEach((f, index) => {\r\n         // if this is one of our .editFields\r\n         if (!this.editFields || this.editFields.indexOf(f.id) > -1) {\r\n            form.addFieldToForm(f, index);\r\n         }\r\n      });\r\n\r\n      // add default button (Save button)\r\n      form._views.push(\r\n         new ABViewFormButton(\r\n            {\r\n               settings: {\r\n                  includeSave: true,\r\n                  includeCancel: false,\r\n                  includeReset: false,\r\n               },\r\n               position: {\r\n                  y: CurrentObject.fields().length, // yPosition\r\n               },\r\n            },\r\n            this._mockApp,\r\n            form\r\n         )\r\n      );\r\n\r\n      // add temp id to views\r\n      form._views.forEach(\r\n         (v, index) => (v.id = `${form.id}_${v.key}_${index}`)\r\n      );\r\n\r\n      let formCom = form.component(this.AB._App);\r\n\r\n      // Rebuild form\r\n      webix.ui(formCom.ui.rows.concat({}), $formView);\r\n      webix.extend($formView, webix.ProgressBar);\r\n\r\n      formCom.init(\r\n         {\r\n            onBeforeSaveData: () => {\r\n               // get update data\r\n               var formVals = form.getFormValues($formView, CurrentObject);\r\n\r\n               // validate data\r\n               if (!form.validateData($formView, CurrentObject, formVals))\r\n                  return false;\r\n\r\n               // show progress icon\r\n               $formView?.showProgress({ type: \"icon\" });\r\n\r\n               if (formVals.id) {\r\n                  CurrentObject.model()\r\n                     .update(formVals.id, formVals)\r\n                     .then((updateVals) => {\r\n                        this.emit(\"update\", updateVals);\r\n                        // _logic.callbacks.onUpdateData(updateVals);\r\n\r\n                        $formView?.hideProgress({ type: \"icon\" });\r\n                     })\r\n                     .catch((err) => {\r\n                        // TODO : error message\r\n                        this.AB.notify.developer(err, {\r\n                           context:\r\n                              \"ABViewKanbanFormSidePanel:onBeforeSaveData():update(): Error updating value\",\r\n                           formVals,\r\n                        });\r\n                        $formView?.hideProgress({ type: \"icon\" });\r\n                     });\r\n               }\r\n               // else add new row\r\n               else {\r\n                  CurrentObject.model()\r\n                     .create(formVals)\r\n                     .then((newVals) => {\r\n                        // _logic.callbacks.onAddData(newVals);\r\n                        this.emit(\"add\", newVals);\r\n\r\n                        $formView?.hideProgress({ type: \"icon\" });\r\n                     })\r\n                     .catch((err) => {\r\n                        // TODO : error message\r\n                        this.AB.notify.developer(err, {\r\n                           context:\r\n                              \"ABViewKanbanFormSidePanel:onBeforeSaveData():.create(): Error creating value\",\r\n                           formVals,\r\n                        });\r\n\r\n                        $formView?.hideProgress({ type: \"icon\" });\r\n                     });\r\n               }\r\n\r\n               return false;\r\n            },\r\n         },\r\n         2 /* NOTE: if you can see this KanBan, you should be able to see the side form? */\r\n      );\r\n\r\n      // display data\r\n      $formView.clear();\r\n      $formView.parse(data);\r\n\r\n      formCom.onShow(data);\r\n   }\r\n};\r\n","const ABViewLabelCore = require(\"../../core/views/ABViewLabelCore\");\r\n\r\nconst ABViewLabelPropertyComponentDefaults = ABViewLabelCore.defaultValues();\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABViewLabel extends ABViewLabelCore {\r\n   // constructor(values, application, parent, defaultValues) {\r\n   //    super(values, application, parent, defaultValues);\r\n   // }\r\n\r\n   //\r\n   //\tEditor Related\r\n   //\r\n\r\n   /**\r\n    * @method editorComponent\r\n    * return the Editor for this UI component.\r\n    * the editor should display either a \"block\" view or \"preview\" of\r\n    * the current layout of the view.\r\n    * @param {string} mode what mode are we in ['block', 'preview']\r\n    * @return {Component}\r\n    */\r\n   editorComponent(App, mode) {\r\n      var idBase = \"ABViewLabelEditorComponent\";\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n      };\r\n\r\n      var _ui = {\r\n         type: \"form\",\r\n         margin: 10,\r\n         padding: 10,\r\n         borderless: true,\r\n         rows: [\r\n            {\r\n               id: ids.component,\r\n               view: \"label\",\r\n               label: this.text || \"\",\r\n               align: this.settings.alignment,\r\n            },\r\n            {},\r\n         ],\r\n      };\r\n\r\n      _ui = this.uiFormatting(_ui);\r\n\r\n      var _init = (options) => {};\r\n\r\n      // var _logic = {\r\n      // }\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: _init,\r\n      };\r\n   }\r\n\r\n   //\r\n   // Property Editor\r\n   //\r\n\r\n   // static propertyEditorComponent(App) {\r\n   // \treturn ABViewPropertyComponent.component(App);\r\n   // }\r\n\r\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\r\n      var commonUI = super.propertyEditorDefaultElements(\r\n         App,\r\n         ids,\r\n         _logic,\r\n         ObjectDefaults\r\n      );\r\n\r\n      // in addition to the common .label  values, we\r\n      // ask for:\r\n      return commonUI.concat([\r\n         // .text :  The Text displayed for this label\r\n         {\r\n            view: \"text\",\r\n            name: \"text\",\r\n            label: L(\"Text\"),\r\n            placeholder: L(\"Text Placeholder\"),\r\n            // labelWidth: this.AB.UISettings.config().labelWidthMedium,\r\n         },\r\n         {\r\n            view: \"fieldset\",\r\n            label: L(\"Format Options:\"),\r\n            body: {\r\n               type: \"clean\",\r\n               padding: 10,\r\n               rows: [\r\n                  {\r\n                     view: \"radio\",\r\n                     name: \"format\",\r\n                     vertical: true,\r\n                     value: ABViewLabelPropertyComponentDefaults.format,\r\n                     options: [\r\n                        {\r\n                           id: 0,\r\n                           value: L(\"normal\"),\r\n                        },\r\n                        {\r\n                           id: 1,\r\n                           value: L(\"title\"),\r\n                        },\r\n                        {\r\n                           id: 2,\r\n                           value: L(\"description\"),\r\n                        },\r\n                     ],\r\n                  },\r\n               ],\r\n            },\r\n         },\r\n         {\r\n            view: \"fieldset\",\r\n            label: L(\"Alignment:\"),\r\n            body: {\r\n               type: \"clean\",\r\n               padding: 10,\r\n               rows: [\r\n                  {\r\n                     view: \"radio\",\r\n                     name: \"alignment\",\r\n                     vertical: true,\r\n                     value: ABViewLabelPropertyComponentDefaults.alignment,\r\n                     options: [\r\n                        {\r\n                           id: \"left\",\r\n                           value: L(\"Left\"),\r\n                        },\r\n                        {\r\n                           id: \"center\",\r\n                           value: L(\"Center\"),\r\n                        },\r\n                        {\r\n                           id: \"right\",\r\n                           value: L(\"Right\"),\r\n                        },\r\n                     ],\r\n                  },\r\n               ],\r\n            },\r\n         },\r\n         {},\r\n      ]);\r\n   }\r\n\r\n   static propertyEditorPopulate(App, ids, view) {\r\n      super.propertyEditorPopulate(App, ids, view);\r\n\r\n      $$(ids.text).setValue(view.text);\r\n      $$(ids.format).setValue(view.settings.format);\r\n      $$(ids.alignment).setValue(view.settings.alignment);\r\n   }\r\n\r\n   static propertyEditorValues(ids, view) {\r\n      super.propertyEditorValues(ids, view);\r\n\r\n      view.text = $$(ids.text).getValue();\r\n      view.settings.format = $$(ids.format).getValue();\r\n      view.settings.alignment = $$(ids.alignment).getValue();\r\n   }\r\n\r\n   /*\r\n    * @component()\r\n    * return a UI component based upon this view.\r\n    * @param {obj} App\r\n    * @return {obj} UI component\r\n    */\r\n   component(App) {\r\n      // get a UI component for each of our child views\r\n      var viewComponents = [];\r\n      this.views().forEach((v) => {\r\n         viewComponents.push(v.component(App));\r\n      });\r\n\r\n      var idBase = `ABViewLabel_${this.id}`;\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n      };\r\n\r\n      // an ABViewLabel is a simple Label\r\n      var _ui = {\r\n         type: \"form\",\r\n         padding: 15,\r\n         borderless: true,\r\n         rows: [\r\n            {\r\n               id: ids.component,\r\n               view: \"label\",\r\n               // css: 'ab-component-header ab-ellipses-text',\r\n               label: this.text || \"*\",\r\n               align: this.settings.alignment,\r\n               type: {\r\n                  height: \"auto\",\r\n               },\r\n            },\r\n         ],\r\n      };\r\n      _ui = this.uiFormatting(_ui);\r\n\r\n      // make sure each of our child views get .init() called\r\n      var _init = (options) => {};\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: _init,\r\n      };\r\n   }\r\n\r\n   /**\r\n    * @method uiFormatting\r\n    * a common routine to properly update the displayed label\r\n    * UI with the css formatting for the given .settings\r\n    * @param {obj} _ui the current webix.ui definition\r\n    * @return {obj} a properly formatted webix.ui definition\r\n    */\r\n   uiFormatting(_ui) {\r\n      // add different css settings based upon it's format\r\n      // type.\r\n      switch (parseInt(this.settings.format)) {\r\n         // normal\r\n         case 0:\r\n            _ui.rows[0].css = \"ab-component-label ab-ellipses-text\";\r\n            break;\r\n\r\n         // title\r\n         case 1:\r\n            _ui.rows[0].css = \"ab-component-header ab-ellipses-text\";\r\n            break;\r\n\r\n         // description\r\n         case 2:\r\n            _ui.rows[0].css = \"ab-component-description ab-ellipses-text\";\r\n            break;\r\n      }\r\n\r\n      return _ui;\r\n   }\r\n};\r\n","const ABViewContainer = require(\"../../platform/views/ABViewContainer\");\r\nconst ABViewLayoutCore = require(\"../../core/views/ABViewLayoutCore\");\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABViewLayout extends ABViewLayoutCore {\r\n   // constructor(values, application, parent, defaultValues) {\r\n   //    super(values, application, parent, defaultValues);\r\n   // }\r\n\r\n   //\r\n   //\tEditor Related\r\n   //\r\n\r\n   /**\r\n    * @method editorComponent\r\n    * return the Editor for this UI component.\r\n    * the editor should display either a \"block\" view or \"preview\" of\r\n    * the current layout of the view.\r\n    * @param {string} mode what mode are we in ['block', 'preview']\r\n    * @return {Component}\r\n    */\r\n   editorComponent(App, mode) {\r\n      var idBase = \"ABViewLayoutEditorComponent\";\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n         view: App.unique(`${idBase}_view`),\r\n      };\r\n\r\n      var component = this.component(App);\r\n\r\n      /** Logic */\r\n      var _logic = {\r\n         templateButton: function (obj) {\r\n            return `<div class=\"ab-widget-header ab-layout-header\">\r\n               <i class=\"fa fa-${obj.icon} webix_icon_btn\"></i> ${obj.label}\r\n               <div class=\"ab-component-tools\">'\r\n               <i class=\"fa fa-trash ab-component-remove\"></i>\r\n               <i class=\"fa fa-edit ab-component-edit\"></i>\r\n               </div></div>`;\r\n         },\r\n\r\n         viewEdit: (e, id, trg) => {\r\n            var view = this.views(function (v) {\r\n               return v.id == id;\r\n            })[0];\r\n\r\n            if (!view) return false;\r\n\r\n            // NOTE: let webix finish this onClick event, before\r\n            // calling .populateInterfaceWorkspace() which will replace\r\n            // the interface elements with the edited view.  (apparently\r\n            // that causes errors.)\r\n            setTimeout(() => {\r\n               App.actions.populateInterfaceWorkspace(view);\r\n            }, 50);\r\n\r\n            e.preventDefault();\r\n            return false;\r\n         },\r\n\r\n         viewDelete: (e, id, trg) => {\r\n            var view = this.views(function (v) {\r\n               return v.id == id;\r\n            })[0];\r\n\r\n            webix.confirm({\r\n               title: L(\"Delete component\"),\r\n               text: L(\"Do you want to delete <b>{0}</b>?\", [view.label]),\r\n               callback: (result) => {\r\n                  if (result) {\r\n                     // this.viewDestroy(view)\r\n                     view.destroy().then(() => {\r\n                        // refresh the editor interface.\r\n                        console.error(\r\n                           \"ABViewLayout: convert App.actions.* to .emit()\"\r\n                        );\r\n                        App.actions.populateInterfaceWorkspace(this);\r\n                     });\r\n                  }\r\n               },\r\n            });\r\n            e.preventDefault();\r\n         },\r\n      };\r\n\r\n      /** UI */\r\n      var _ui = Object.assign(component.ui, {});\r\n      _ui.type = \"form\";\r\n\r\n      this.views().forEach((v, index) => {\r\n         _ui.cols[index] = {\r\n            rows: [\r\n               // Add action buttons\r\n               {\r\n                  type: \"template\",\r\n                  css: \"ab-layout-header\",\r\n                  height: 30,\r\n                  template: _logic.templateButton({\r\n                     icon: v.icon,\r\n                     label: v.label,\r\n                  }),\r\n                  onClick: {\r\n                     \"ab-component-edit\": (e, id, trg) => {\r\n                        _logic.viewEdit(e, v.id, trg);\r\n                     },\r\n                     \"ab-component-remove\": (e, id, trg) => {\r\n                        _logic.viewDelete(e, v.id, trg);\r\n                     },\r\n                  },\r\n               },\r\n               // Preview display here\r\n               _ui.cols[index],\r\n               {},\r\n            ],\r\n         };\r\n      });\r\n\r\n      if (this.views().length == 0) {\r\n         _ui.cols[0] = {};\r\n      }\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: component.init,\r\n         logic: _logic,\r\n      };\r\n   }\r\n\r\n   //\r\n   // Property Editor\r\n   //\r\n\r\n   /**\r\n    * @method addView\r\n    * called when the .propertyEditorDefaultElements() button is clicked.\r\n    * This method should find the current View instance and call it's .addColumn()\r\n    * method.\r\n    */\r\n   static addView(ids, _logic) {\r\n      // get current instance and .addColumn()\r\n      var LayoutView = _logic.currentEditObject();\r\n      LayoutView.addColumn();\r\n\r\n      var includeSubViews = true; // we ask later on down the save if we should save subviews...we do this time\r\n\r\n      // trigger a save()\r\n      this.propertyEditorSave(ids, LayoutView, includeSubViews);\r\n   }\r\n\r\n   /**\r\n    * @method propertyEditorDefaultElements\r\n    * return the input form used in the property editor for this View.\r\n    */\r\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\r\n      var commonUI = super.propertyEditorDefaultElements(\r\n         App,\r\n         ids,\r\n         _logic,\r\n         ObjectDefaults\r\n      );\r\n\r\n      // if I don't create my own propertyEditorComponent, then I need to\r\n      // create the onClick handler that will cause the current view instance\r\n      // to create a vew sub view/ column\r\n      if (!_logic.onClick) {\r\n         _logic.onClick = () => {\r\n            this.addView(ids, _logic);\r\n         };\r\n      }\r\n\r\n      // in addition to the common .label  values, we\r\n      // ask for:\r\n      return commonUI.concat([\r\n         // [button] : add column\r\n         {\r\n            view: \"button\",\r\n            css: \"webix_primary\",\r\n            value: L(\"Add Column \"),\r\n            click: _logic.onClick,\r\n         },\r\n      ]);\r\n   }\r\n\r\n   /**\r\n    * @method component()\r\n    * return a UI component based upon this view.\r\n    * @param {obj} App\r\n    * @param {string} idPrefix\r\n    *\r\n    * @return {obj} UI component\r\n    */\r\n   component(App, idPrefix) {\r\n      let idBase = `ABViewLayout_${idPrefix || \"\"}${this.id}`;\r\n      let ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n      };\r\n\r\n      this.viewComponents = this.viewComponents || {}; // { viewId: viewComponent, ..., viewIdn: viewComponent }\r\n\r\n      let _ui = {\r\n         id: ids.component,\r\n         view: \"layout\",\r\n         cols: [],\r\n      };\r\n\r\n      this.views().forEach((v) => {\r\n         this.viewComponents[v.id] = v.component(App, idPrefix);\r\n         _ui.cols.push(this.viewComponents[v.id].ui);\r\n\r\n         // Trigger 'changePage' event to parent\r\n         this.eventAdd({\r\n            emitter: v,\r\n            eventName: \"changePage\",\r\n            listener: (pageId) => {\r\n               this.changePage(pageId);\r\n            },\r\n         });\r\n      });\r\n\r\n      // make sure each of our child views get .init() called\r\n      var _init = (options, accessLevel) => {\r\n         this.views().forEach((v) => {\r\n            var component = this.viewComponents[v.id];\r\n\r\n            // initial sub-component\r\n            if (component && component.init) {\r\n               component.init(options, accessLevel);\r\n            }\r\n         });\r\n      };\r\n\r\n      var _onShow = () => {\r\n         // calll .onShow in child components\r\n         this.views().forEach((v) => {\r\n            var component = this.viewComponents[v.id];\r\n\r\n            if (component && component.onShow) {\r\n               component.onShow();\r\n            }\r\n         });\r\n      };\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: _init,\r\n         // logic: _logic,\r\n\r\n         onShow: _onShow,\r\n      };\r\n   }\r\n};\r\n","const ABViewListCore = require(\"../../core/views/ABViewListCore\");\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABViewList extends ABViewListCore {\r\n   // constructor(values, application, parent, defaultValues) {\r\n   //    super(values, application, parent, defaultValues);\r\n   // }\r\n\r\n   //\r\n   //\tEditor Related\r\n   //\r\n\r\n   /**\r\n    * @method editorComponent\r\n    * return the Editor for this UI component.\r\n    * the editor should display either a \"block\" view or \"preview\" of\r\n    * the current layout of the view.\r\n    * @param {string} mode what mode are we in ['block', 'preview']\r\n    * @return {Component}\r\n    */\r\n   editorComponent(App, mode) {\r\n      var idBase = \"ABViewListEditorComponent\";\r\n\r\n      var ListView = this.component(App, idBase);\r\n\r\n      return {\r\n         ui: ListView.ui,\r\n         logic: ListView.logic,\r\n         onShow: ListView.onShow,\r\n\r\n         init: () => {\r\n            // remove id of the component in caching for refresh .bind of the data collection\r\n            let dv = this.datacollection;\r\n            if (dv) dv.removeComponent(ListView.ui.id);\r\n\r\n            ListView.init();\r\n         },\r\n      };\r\n   }\r\n\r\n   //\r\n   // Property Editor\r\n   //\r\n\r\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\r\n      var commonUI = super.propertyEditorDefaultElements(\r\n         App,\r\n         ids,\r\n         _logic,\r\n         ObjectDefaults\r\n      );\r\n\r\n      // _logic functions\r\n\r\n      _logic.selectSource = (dcId, oldDcId) => {\r\n         var currView = _logic.currentEditObject();\r\n\r\n         // Update field options in property\r\n         this.propertyUpdateFieldOptions(ids, currView, dcId);\r\n      };\r\n\r\n      return commonUI.concat([\r\n         {\r\n            name: \"datacollection\",\r\n            view: \"richselect\",\r\n            label: L(\"Data Source\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n            on: {\r\n               onChange: _logic.selectSource,\r\n            },\r\n         },\r\n         {\r\n            name: \"field\",\r\n            view: \"richselect\",\r\n            label: L(\"Field\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n         },\r\n         {\r\n            view: \"counter\",\r\n            name: \"height\",\r\n            label: L(\"Height:\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n         },\r\n      ]);\r\n   }\r\n\r\n   /**\r\n    * @method propertyUpdateFieldOptions\r\n    * Populate fields of object to select list in property\r\n    *\r\n    * @param {Object} ids\r\n    * @param {ABViewForm} view - the current component\r\n    * @param {string} dvId - id of ABDatacollection\r\n    */\r\n   static propertyUpdateFieldOptions(ids, view, dvId) {\r\n      var datacollection = view.AB.datacollectionByID(dvId);\r\n      var object = datacollection ? datacollection.datasource : null;\r\n\r\n      // Pull field list\r\n      var fieldOptions = [];\r\n      if (object != null) {\r\n         fieldOptions = object.fields().map((f) => {\r\n            return {\r\n               id: f.id,\r\n               value: f.label,\r\n            };\r\n         });\r\n      }\r\n\r\n      $$(ids.field).define(\"options\", fieldOptions);\r\n      $$(ids.field).refresh();\r\n   }\r\n\r\n   static propertyEditorPopulate(App, ids, view) {\r\n      super.propertyEditorPopulate(App, ids, view);\r\n\r\n      var datacollectionId = view.settings.dataviewID\r\n         ? view.settings.dataviewID\r\n         : null;\r\n      var SourceSelector = $$(ids.datacollection);\r\n\r\n      // Pull data collections to options\r\n      var dcOptions = view.propertyDatacollections();\r\n      SourceSelector.define(\"options\", dcOptions);\r\n      SourceSelector.define(\"value\", datacollectionId);\r\n      SourceSelector.refresh();\r\n\r\n      this.propertyUpdateFieldOptions(ids, view, datacollectionId);\r\n\r\n      $$(ids.field).setValue(view.settings.field);\r\n      $$(ids.height).setValue(view.settings.height);\r\n   }\r\n\r\n   static propertyEditorValues(ids, view) {\r\n      super.propertyEditorValues(ids, view);\r\n\r\n      view.settings.dataviewID = $$(ids.datacollection).getValue();\r\n      view.settings.field = $$(ids.field).getValue();\r\n      view.settings.height = $$(ids.height).getValue();\r\n      view.settings.height =\r\n         parseInt(view.settings.height) || ABViewList.defaultValues().height;\r\n   }\r\n\r\n   /*\r\n    * @component()\r\n    * return a UI component based upon this view.\r\n    * @param {obj} App\r\n    * @return {obj} UI component\r\n    */\r\n   component(App) {\r\n      let baseCom = super.component(App);\r\n\r\n      var idBase = \"ABViewListEditorComponent\";\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n      };\r\n\r\n      var _ui = {\r\n         id: ids.component,\r\n         view: \"dataview\",\r\n         type: {\r\n            width: 1000,\r\n            height: 30,\r\n         },\r\n         template: (item) => {\r\n            var field = this.field();\r\n            if (!field) return \"\";\r\n\r\n            return field.format(item);\r\n         },\r\n      };\r\n\r\n      // set height or autoHeight\r\n      if (this.settings.height != 0) {\r\n         _ui.height = this.settings.height;\r\n      } else {\r\n         _ui.autoHeight = true;\r\n      }\r\n\r\n      var _init = (options) => {\r\n         var dv = this.datacollection;\r\n         if (!dv) return;\r\n\r\n         // bind dc to component\r\n         dv.bind($$(ids.component));\r\n         // $$(ids.component).sync(dv);\r\n      };\r\n\r\n      // var _logic = {\r\n      // }\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: _init,\r\n\r\n         onShow: baseCom.onShow,\r\n      };\r\n   }\r\n};\r\n","const ABViewMenuCore = require(\"../../core/views/ABViewMenuCore\");\r\nconst ABViewTab = require(\"./ABViewTab\");\r\n\r\nconst ABViewMenuPropertyComponentDefaults = ABViewMenuCore.defaultValues();\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABViewMenu extends ABViewMenuCore {\r\n   // constructor(values, application, parent, defaultValues) {\r\n   //    super(values, application, parent, defaultValues);\r\n   // }\r\n\r\n   //\r\n   //\tEditor Related\r\n   //\r\n\r\n   /**\r\n    * @method editorComponent\r\n    * return the Editor for this UI component.\r\n    * the editor should display either a \"block\" view or \"preview\" of\r\n    * the current layout of the view.\r\n    * @param {string} mode what mode are we in ['block', 'preview']\r\n    * @return {Component}\r\n    */\r\n   editorComponent(App, mode) {\r\n      var idBase = \"ABViewMenuEditorComponent\";\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n         pages: App.unique(`${idBase}_pages`),\r\n         tree: App.unique(`${idBase}_tree`),\r\n      };\r\n\r\n      var component = this.component(App);\r\n\r\n      var menu = component.ui;\r\n      if (component.ui.elements) {\r\n         var menuIndex = 0;\r\n         component.ui.elements.forEach((elem) => {\r\n            if (elem.view == \"menu\") {\r\n               menu = component.ui.elements[menuIndex];\r\n            }\r\n            menuIndex++;\r\n         });\r\n      }\r\n      menu.id = ids.component;\r\n\r\n      var _ui = {\r\n         type: \"space\",\r\n         rows: [menu, {}],\r\n      };\r\n\r\n      var _init = (options) => {\r\n         var Menu = $$(ids.component);\r\n\r\n         this.ClearPagesInView(Menu);\r\n         if (this.settings.order && this.settings.order.length) {\r\n            this.AddPagesToView(Menu, this.settings.order);\r\n            // } else if (this.settings.pages && this.settings.pages.length) {\r\n            //    this.AddPagesToView(Menu, this.settings.pages);\r\n         }\r\n      };\r\n\r\n      var _logic = {};\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: _init,\r\n         logic: _logic,\r\n      };\r\n   }\r\n\r\n   //\r\n   // Property Editor\r\n   //\r\n\r\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\r\n      var commonUI = super.propertyEditorDefaultElements(\r\n         App,\r\n         ids,\r\n         _logic,\r\n         ObjectDefaults\r\n      );\r\n\r\n      // _logic functions\r\n\r\n      _logic.updateTreeDnD = (id, state) => {\r\n         var currView = _logic.currentEditObject();\r\n\r\n         // var curPage = currView.settings.pages.filter((page) => {\r\n         //    return page.pageId == id || page.tabId == id;\r\n         // })[0];\r\n\r\n         var curPage = currView.application.pages(\r\n            (page) => page.id == id,\r\n            true\r\n         )[0];\r\n\r\n         // must not have been a page...lets check tabs\r\n         if (!curPage) {\r\n            curPage = currView.application.views(\r\n               (view) => view.id == id,\r\n               true\r\n            )[0];\r\n         }\r\n\r\n         if (state) {\r\n            let label = currView.getAliasname(curPage);\r\n            $$(ids.treeDnD).add({\r\n               id: curPage.id,\r\n               value: label,\r\n               type: curPage.type,\r\n               pageId: curPage.pageId || \"\",\r\n               tabId: curPage.tabId || \"\",\r\n            });\r\n            _logic.reorderPages();\r\n         } else {\r\n            // if this item exists in the tree and does not have a submenu you can remove it\r\n            // otherwise we will ask the user to move its submenu items out before deleting\r\n            if ($$(ids.treeDnD).exists(id) && !$$(ids.treeDnD).isBranch(id)) {\r\n               $$(ids.treeDnD).remove(id);\r\n               _logic.reorderPages();\r\n            } else if (\r\n               $$(ids.treeDnD).exists(id) &&\r\n               $$(ids.treeDnD).isBranch(id)\r\n            ) {\r\n               $$(ids.pages).blockEvent();\r\n               // we don't want to send a toggle event because it triggers saves to the database\r\n               $$(ids.pages).checkItem(id);\r\n               webix.message({\r\n                  text: L(\r\n                     \"Item comtains submenu, please remove items in submenu before removing.\"\r\n                  ),\r\n                  type: \"error\",\r\n                  expire: 10000,\r\n               });\r\n               //resume listening\r\n               $$(ids.pages).unblockEvent();\r\n            }\r\n         }\r\n      };\r\n\r\n      _logic.reorderPages = () => {\r\n         var currView = _logic.currentEditObject();\r\n\r\n         // add a new pages container\r\n         var pages = [];\r\n         // loop through tree to reorder pages\r\n         $$(ids.treeDnD).data.each((obj) => {\r\n            // find the page in settings that matches the item in the tree\r\n            // var curPage = currView.settings.pages.filter((page) => {\r\n            //    return page.pageId == obj.id || page.tabId == obj.id;\r\n            // })[0];\r\n\r\n            var curPage = currView.application.pages(\r\n               (page) => page.id == obj.id,\r\n               true\r\n            )[0];\r\n\r\n            // must not have been a page...lets check tabs\r\n            if (!curPage) {\r\n               curPage = currView.application.views(\r\n                  (view) => view.id == obj.id,\r\n                  true\r\n               )[0];\r\n            }\r\n\r\n            // put that page in the next possition of the page container\r\n            pages.push(curPage);\r\n         });\r\n\r\n         var newPageOrder = [];\r\n         // loop through pages\r\n         /*\r\n         {\r\n            \"pageId\": \"9b8a9458-3ad4-46c1-9ea8-6c96950e161d\",\r\n            \"tabId\": \"\",\r\n            \"type\": \"page\",\r\n            \"isChecked\": \"true\",\r\n            \"translations\": [\r\n               {\r\n                  \"language_code\": \"en\",\r\n                  \"label\": \"Sub Page 1\",\r\n                  \"aliasname\": \"Sub Page 1\"\r\n               }\r\n            ],\r\n            \"parent\": \"0\",\r\n            \"position\": \"0\"\r\n         }\r\n         */\r\n         pages.forEach((page) => {\r\n            if (page) {\r\n               var thisPage = {};\r\n               // get the id of the element we are clicking to\r\n               var id = page.id;\r\n               // get the object of the data with the id in the tree view\r\n               var treeItem = $$(ids.treeDnD).getItem(id);\r\n               // set the parent element in the page if the treeItem has one\r\n               thisPage.parent = treeItem.$parent;\r\n               // store the position so we can put it back in the right spot later\r\n               thisPage.position = $$(ids.treeDnD).getBranchIndex(id);\r\n               // store the icon\r\n               thisPage.icon = treeItem.icon;\r\n               // store the getAliasname\r\n               //thisPage.aliasname = currView.getAliasname(page);\r\n               // store the page types\r\n               thisPage.type = page.key == \"viewcontainer\" ? \"tab\" : \"page\";\r\n               if (thisPage.type == \"tab\") {\r\n                  thisPage.tabId = page.id;\r\n                  thisPage.pageId = currView.getParentPageId(page);\r\n               } else {\r\n                  thisPage.pageId = page.id;\r\n               }\r\n               thisPage.isChecked = \"true\";\r\n               thisPage.translations = page.translations;\r\n               newPageOrder.push(thisPage);\r\n            }\r\n         });\r\n         currView.settings.order = newPageOrder;\r\n\r\n         _logic.onChange();\r\n         $$(ids.treeDnD).openAll();\r\n      };\r\n\r\n      return commonUI.concat([\r\n         {\r\n            name: \"orientation\",\r\n            view: \"richselect\",\r\n            label: L(\"Orientation\"),\r\n            value: ABViewMenuPropertyComponentDefaults.orientation,\r\n            labelWidth: this.AB.UISettings.config().labelWidthXLarge,\r\n            options: [\r\n               {\r\n                  id: \"x\",\r\n                  value: L(\"Horizontal\"),\r\n               },\r\n               {\r\n                  id: \"y\",\r\n                  value: L(\"Vertical\"),\r\n               },\r\n            ],\r\n         },\r\n         {\r\n            name: \"buttonStyle\",\r\n            view: \"richselect\",\r\n            label: L(\"Button Style\"),\r\n            value: ABViewMenuPropertyComponentDefaults.buttonStyle,\r\n            labelWidth: this.AB.UISettings.config().labelWidthXLarge,\r\n            options: [\r\n               {\r\n                  id: \"ab-menu-default\",\r\n                  value: L(\"Default\"),\r\n               },\r\n               {\r\n                  id: \"ab-menu-link\",\r\n                  value: L(\"Link\"),\r\n               },\r\n            ],\r\n         },\r\n         {\r\n            name: \"menuAlignment\",\r\n            view: \"richselect\",\r\n            label: L(\"Menu Alignment\"),\r\n            value: ABViewMenuPropertyComponentDefaults.menuAlignment,\r\n            labelWidth: this.AB.UISettings.config().labelWidthXLarge,\r\n            options: [\r\n               {\r\n                  id: \"ab-menu-left\",\r\n                  value: L(\"Left\"),\r\n               },\r\n               {\r\n                  id: \"ab-menu-center\",\r\n                  value: L(\"Center\"),\r\n               },\r\n               {\r\n                  id: \"ab-menu-right\",\r\n                  value: L(\"Right\"),\r\n               },\r\n            ],\r\n         },\r\n         {\r\n            name: \"menuInToolbar\",\r\n            view: \"checkbox\",\r\n            labelRight: L(\"Put menu in toolbar\"),\r\n            value: ABViewMenuPropertyComponentDefaults.menuInToolbar,\r\n            labelWidth: this.AB.UISettings.config().labelWidthCheckbox,\r\n         },\r\n         {\r\n            name: \"toolbarFieldset\",\r\n            view: \"fieldset\",\r\n            label: L(\"Toolbar Settings:\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n            body: {\r\n               view: \"layout\",\r\n               type: \"clean\",\r\n               padding: 10,\r\n               rows: [\r\n                  {\r\n                     name: \"menuPadding\",\r\n                     view: \"counter\",\r\n                     label: L(\"Toolbar padding\"),\r\n                     value: ABViewMenuPropertyComponentDefaults.menuPadding,\r\n                     labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n                  },\r\n                  {\r\n                     name: \"menuTheme\",\r\n                     view: \"richselect\",\r\n                     label: L(\"Toolbar theme\"),\r\n                     value: ABViewMenuPropertyComponentDefaults.menuTheme,\r\n                     labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n                     options: [\r\n                        {\r\n                           id: \"white\",\r\n                           value: L(\"White (Default)\"),\r\n                        },\r\n                        {\r\n                           id: \"bg_gray\",\r\n                           value: L(\"Gray\"),\r\n                        },\r\n                        {\r\n                           id: \"webix_dark\",\r\n                           value: L(\"Dark\"),\r\n                        },\r\n                     ],\r\n                  },\r\n                  {\r\n                     name: \"menuPosition\",\r\n                     view: \"richselect\",\r\n                     label: L(\"Menu Position\"),\r\n                     value: ABViewMenuPropertyComponentDefaults.menuPosition,\r\n                     labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n                     options: [\r\n                        {\r\n                           id: \"left\",\r\n                           value: L(\"Left\"),\r\n                        },\r\n                        {\r\n                           id: \"center\",\r\n                           value: L(\"Center\"),\r\n                        },\r\n                        {\r\n                           id: \"right\",\r\n                           value: L(\"Right\"),\r\n                        },\r\n                     ],\r\n                  },\r\n                  {\r\n                     name: \"menuTextLeft\",\r\n                     view: \"text\",\r\n                     label: L(\"Text Left\"),\r\n                     placeholder: L(\"Place text in left region of toolbar.\"),\r\n                     labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n                     labelPosition: \"top\",\r\n                  },\r\n                  {\r\n                     name: \"menuTextCenter\",\r\n                     view: \"text\",\r\n                     label: L(\"Text Center\"),\r\n                     placeholder: L(\"Place text in center region of toolbar.\"),\r\n                     labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n                     labelPosition: \"top\",\r\n                  },\r\n                  {\r\n                     name: \"menuTextRight\",\r\n                     view: \"text\",\r\n                     label: L(\"Text Right\"),\r\n                     placeholder: L(\"Place text in right region of toolbar.\"),\r\n                     labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n                     labelPosition: \"top\",\r\n                  },\r\n               ],\r\n            },\r\n         },\r\n         {\r\n            name: \"pagesFieldset\",\r\n            view: \"fieldset\",\r\n            label: L(\"Page List:\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n            body: {\r\n               view: \"layout\",\r\n               type: \"clean\",\r\n               padding: 10,\r\n               rows: [\r\n                  {\r\n                     name: \"pages\",\r\n                     view: \"edittree\",\r\n                     borderless: true,\r\n                     css: \"transparent\",\r\n                     // editor: \"inline-text\",\r\n                     editable: true,\r\n                     editValue: \"aliasname\",\r\n                     editor: \"text\",\r\n                     template: function (item, common) {\r\n                        return `<div class='ab-page-list-item'>\r\n                           ${common.icon(item)} ${common.checkbox(\r\n                           item,\r\n                           false\r\n                        )} <div class=\"fa fa-${\r\n                           item.key == \"viewcontainer\"\r\n                              ? \"window-maximize\"\r\n                              : \"file\"\r\n                        }\"></div> \r\n                           ${item.label}</div>`;\r\n                     },\r\n                     on: {\r\n                        onItemCheck: function (id, state) {\r\n                           // trigger to save settings\r\n                           _logic.onChange();\r\n                           _logic.updateTreeDnD(id, state);\r\n                        },\r\n                        onBeforeEditStart: function (id) {\r\n                           var item = this.getItem(id);\r\n                           if (!item.aliasname) {\r\n                              item.aliasname = item.label;\r\n                              this.updateItem(item);\r\n                           }\r\n                        },\r\n                        onBeforeEditStop: function (state, editor) {\r\n                           var item = this.getItem(editor.id);\r\n                           if (item) {\r\n                              item.translations.forEach((t) => {\r\n                                 if (\r\n                                    t.language_code ==\r\n                                    App.AB.Multilingual.currentLanguage()\r\n                                 ) {\r\n                                    t.aliasname = state.value;\r\n                                 }\r\n                              });\r\n                              item.label = state.value;\r\n                              this.updateItem(editor.id, item);\r\n                           }\r\n\r\n                           if ($$(ids.treeDnD).exists(editor.id)) {\r\n                              // we need to update the drag and drop tree item as well so get it first\r\n                              var treeItem =\r\n                                 $$(ids.treeDnD).getItem(editor.id) || {};\r\n                              // change the value (since that is what is being displayed)\r\n                              treeItem.value = state.value;\r\n                              // then change the aliasname (since that property controls the final view)\r\n                              treeItem.aliasname = state.value;\r\n                              // trigger a save so when we update the preview it has the new data to work with\r\n                              _logic.onChange();\r\n                              // tell the tree to update with new alias (this will trigger a page reorder save and the values already saved will be used to rebuild the component)\r\n                              $$(ids.treeDnD).updateItem(editor.id, treeItem);\r\n                           }\r\n                        },\r\n                     },\r\n                  },\r\n               ],\r\n            },\r\n         },\r\n         {\r\n            name: \"pageOrderFieldset\",\r\n            view: \"fieldset\",\r\n            label: L(\"Drag & Drop to Reorder/Click to Add Icon:\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n            body: {\r\n               view: \"layout\",\r\n               type: \"clean\",\r\n               padding: 10,\r\n               rows: [\r\n                  {\r\n                     view: \"edittree\",\r\n                     borderless: true,\r\n                     name: \"treeDnD\",\r\n                     template:\r\n                        \"{common.icon()} <i class='fa fa-fw fa-#icon#'></i> <span>#value#</span>\",\r\n                     drag: true,\r\n                     editable: true,\r\n                     editValue: \"icon\",\r\n                     editor: \"combo\",\r\n                     options: App.icons,\r\n                     suggest: {\r\n                        template: \"#value#\",\r\n                        filter: function (item, value) {\r\n                           if (\r\n                              item.value\r\n                                 .toString()\r\n                                 .toLowerCase()\r\n                                 .indexOf(value.toLowerCase()) === 0\r\n                           )\r\n                              return true;\r\n                           return false;\r\n                        },\r\n                        body: {\r\n                           template:\r\n                              \"<i class='fa fa-fw fa-#value#'></i> #value#\",\r\n                        },\r\n                     },\r\n                     on: {\r\n                        onBeforeDrop: function (context) {\r\n                           context.parent = context.target; //drop as child\r\n                           context.index = -1; //as last child\r\n                        },\r\n                        onAfterDrop: function (context, native_event) {\r\n                           _logic.reorderPages();\r\n                        },\r\n                        onDataUpdate: function () {\r\n                           _logic.reorderPages();\r\n                        },\r\n                     },\r\n                  },\r\n               ],\r\n            },\r\n         },\r\n      ]);\r\n   }\r\n\r\n   static propertyEditorPopulate(App, ids, view) {\r\n      super.propertyEditorPopulate(App, ids, view);\r\n\r\n      $$(ids.orientation).setValue(\r\n         view.settings.orientation ||\r\n            ABViewMenuPropertyComponentDefaults.orientation\r\n      );\r\n      $$(ids.buttonStyle).setValue(\r\n         view.settings.buttonStyle ||\r\n            ABViewMenuPropertyComponentDefaults.buttonStyle\r\n      );\r\n      $$(ids.menuAlignment).setValue(\r\n         view.settings.menuAlignment ||\r\n            ABViewMenuPropertyComponentDefaults.menuAlignment\r\n      );\r\n      $$(ids.menuInToolbar).setValue(\r\n         parseInt(view.settings.menuInToolbar) ||\r\n            ABViewMenuPropertyComponentDefaults.menuInToolbar\r\n      );\r\n      $$(ids.menuPadding).setValue(\r\n         view.settings.menuPadding ||\r\n            ABViewMenuPropertyComponentDefaults.menuPadding\r\n      );\r\n      $$(ids.menuTheme).setValue(\r\n         view.settings.menuTheme ||\r\n            ABViewMenuPropertyComponentDefaults.menuTheme\r\n      );\r\n      $$(ids.menuPosition).setValue(\r\n         view.settings.menuPosition ||\r\n            ABViewMenuPropertyComponentDefaults.menuPosition\r\n      );\r\n      if (view.menuTextLeft == \"\" && view.settings.menuTextLeft) {\r\n         view.menuTextLeft = view.settings.menuTextLeft;\r\n      }\r\n      $$(ids.menuTextLeft).setValue(\r\n         view.menuTextLeft || ABViewMenuPropertyComponentDefaults.menuTextLeft\r\n      );\r\n      if (view.menuTextCenter == \"\" && view.settings.menuTextCenter) {\r\n         view.menuTextCenter = view.settings.menuTextCenter;\r\n      }\r\n      $$(ids.menuTextCenter).setValue(\r\n         view.menuTextCenter ||\r\n            ABViewMenuPropertyComponentDefaults.menuTextCenter\r\n      );\r\n      if (view.menuTextRight == \"\" && view.settings.menuTextRight) {\r\n         view.menuTextRight = view.settings.menuTextRight;\r\n      }\r\n      $$(ids.menuTextRight).setValue(\r\n         view.menuTextRight || ABViewMenuPropertyComponentDefaults.menuTextRight\r\n      );\r\n\r\n      var pageTree = new webix.TreeCollection();\r\n      var application = view.application;\r\n      var currentPage = view.pageParent();\r\n      var parentPage = currentPage.pageParent();\r\n      var rootPage = view.pageRoot();\r\n\r\n      /**\r\n       * @method addPage\r\n       *\r\n       * @param {ABView} page\r\n       * @param {integer} index\r\n       * @param {uuid} parentId\r\n       */\r\n      var addPage = function (page, index, parentId) {\r\n         // update .aliasname and .translations of the page\r\n         if (view.settings.order && view.settings.order.forEach) {\r\n            view.settings.order.forEach((localpage) => {\r\n               if (\r\n                  (localpage.pageId == page.id && !localpage.id) ||\r\n                  (parentId &&\r\n                     localpage.pageId == parentId &&\r\n                     localpage.tabId == page.id)\r\n               ) {\r\n                  page.translations = localpage.translations;\r\n               }\r\n            });\r\n         }\r\n         let alias = view.getAliasname(page);\r\n         page.label = alias ? alias : page.label;\r\n         // add to tree collection\r\n         pageTree.add(page, index, parentId);\r\n\r\n         // add sub-pages\r\n         var subPages = page.pages ? page.pages() : [];\r\n         subPages.forEach((childPage, childIndex) => {\r\n            addPage(childPage, childIndex, page.id);\r\n         });\r\n\r\n         // add tabs\r\n         page\r\n            .views((v) => v instanceof ABViewTab)\r\n            .forEach((tab, tabIndex) => {\r\n               // tab views\r\n               tab.views().forEach((tabView, tabViewIndex) => {\r\n                  // tab items will be below sub-page items\r\n                  var tIndex = subPages.length + tabIndex + tabViewIndex;\r\n\r\n                  addPage(tabView, tIndex, page.id);\r\n               });\r\n            });\r\n      };\r\n\r\n      application\r\n         .pages((p) => rootPage && rootPage.id == p.id, true)\r\n         .forEach((p, index) => {\r\n            addPage(p, index);\r\n         });\r\n\r\n      $$(ids.pages).clearAll();\r\n      $$(ids.pages).data.importData(pageTree);\r\n      $$(ids.pages).refresh();\r\n      $$(ids.pages).blockEvent();\r\n      $$(ids.pages).uncheckAll();\r\n      $$(ids.pages).unblockEvent();\r\n      $$(ids.pages).openAll();\r\n\r\n      // Select pages\r\n      // if (view.settings.pages && view.settings.pages.forEach) {\r\n      // $$(ids.treeDnD).clearAll();\r\n      // view.settings.pages.forEach((page) => {\r\n      //    if (page.isChecked) {\r\n      //       if ($$(ids.pages).exists(page.tabId || page.pageId)) {\r\n      //          //after this command all events will be ignored\r\n      //          $$(ids.pages).blockEvent();\r\n      //          // we don't want to send a toggle event because it triggers saves to the database\r\n      //          $$(ids.pages).checkItem(page.tabId || page.pageId);\r\n      //          //resume listening\r\n      //          $$(ids.pages).unblockEvent();\r\n      //       }\r\n      //    }\r\n      // });\r\n\r\n      $$(ids.treeDnD).clearAll();\r\n      if (view.settings.order && view.settings.order.forEach) {\r\n         view.settings.order.forEach((page) => {\r\n            if ($$(ids.pages).exists(page.tabId || page.pageId)) {\r\n               //after this command all events will be ignored\r\n               $$(ids.pages).blockEvent();\r\n               // we don't want to send a toggle event because it triggers saves to the database\r\n               $$(ids.pages).checkItem(page.tabId || page.pageId);\r\n               //resume listening\r\n               $$(ids.pages).unblockEvent();\r\n            }\r\n            let label = view.getAliasname(page);\r\n            $$(ids.treeDnD).add(\r\n               {\r\n                  id: page.tabId || page.pageId,\r\n                  value: label,\r\n                  type: page.type,\r\n                  pageId: page.pageId || \"\",\r\n                  tabId: page.tabId || \"\",\r\n                  icon: page.icon,\r\n               },\r\n               page.position ? parseInt(page.position) : 0,\r\n               page.parent && page.parent != \"0\" ? page.parent : \"\"\r\n            );\r\n         });\r\n         // } else if (view.settings.pages && view.settings.pages.forEach) {\r\n         //    view.settings.pages.forEach((page) => {\r\n         //       if (page.isChecked) {\r\n         //          let label = view.getAliasname(page);\r\n         //          $$(ids.treeDnD).add({\r\n         //             id: page.tabId || page.pageId,\r\n         //             value: label,\r\n         //             type: page.type,\r\n         //             pageId: page.pageId\r\n         //          });\r\n         //       }\r\n         //    });\r\n      }\r\n      $$(ids.treeDnD).openAll();\r\n      // }\r\n\r\n      // $$(ids.pagesFieldset).config.height = ($$(ids.pages).count()*28)+18; // Number of pages plus 9px of padding top and bottom\r\n      $$(ids.pagesFieldset).config.height =\r\n         $$(ids.pages).count() * 28 + 18 + 40; // Number of pages plus 9px of padding top and bottom\r\n      $$(ids.pagesFieldset).resize();\r\n      $$(ids.pageOrderFieldset).config.height =\r\n         $$(ids.pages).count() * 28 + 18 + 40; // Number of pages plus 9px of padding top and bottom\r\n      $$(ids.pageOrderFieldset).resize();\r\n   }\r\n\r\n   static propertyEditorValues(ids, view) {\r\n      super.propertyEditorValues(ids, view);\r\n\r\n      view.settings.orientation = $$(ids.orientation).getValue();\r\n      view.settings.buttonStyle = $$(ids.buttonStyle).getValue();\r\n      view.settings.menuAlignment = $$(ids.menuAlignment).getValue();\r\n      view.settings.menuInToolbar = $$(ids.menuInToolbar).getValue();\r\n      view.settings.menuPadding = $$(ids.menuPadding).getValue();\r\n      view.settings.menuTheme = $$(ids.menuTheme).getValue();\r\n      view.settings.menuPosition = $$(ids.menuPosition).getValue();\r\n      view.menuTextLeft = $$(ids.menuTextLeft).getValue();\r\n      view.menuTextCenter = $$(ids.menuTextCenter).getValue();\r\n      view.menuTextRight = $$(ids.menuTextRight).getValue();\r\n      // Legacy support: clear the old settings when new values are created\r\n      // otherwise leave them\r\n      if (view.menuTextLeft.length) {\r\n         view.settings.menuTextLeft = \"\";\r\n      }\r\n      if (view.menuTextCenter.length) {\r\n         view.settings.menuTextCenter = \"\";\r\n      }\r\n      if (view.menuTextCenter.length) {\r\n         view.settings.menuTextRight = \"\";\r\n      }\r\n\r\n      // var pagesIdList = [];\r\n      if ($$(ids.pages)) {\r\n         for (var i = 0; i < $$(ids.pages).data.count(); i++) {\r\n            var currentPageId = $$(ids.pages).getIdByIndex(i);\r\n            var currentItem = $$(ids.pages).getItem(currentPageId);\r\n\r\n            var type = \"page\",\r\n               tabId;\r\n            if (currentItem.key == \"viewcontainer\") {\r\n               type = \"tab\";\r\n               tabId = currentPageId;\r\n               currentPageId = currentItem.pageParent().id;\r\n            } else {\r\n               // if we have left the tabs we were looping through we need to reset the tabId\r\n               tabId = \"\";\r\n            }\r\n\r\n            // let pageInfo = view.settings.pages.filter(\r\n            //    (p) => p.pageId == currentPageId\r\n            // )[0];\r\n\r\n            let translations = [];\r\n\r\n            if (currentItem && currentItem.translations)\r\n               translations = currentItem.translations;\r\n            // else if (pageInfo && pageInfo.translations)\r\n            //    translations = AB.cloneDeep(pageInfo.translations);\r\n\r\n            // pagesIdList.push({\r\n            //    pageId: currentPageId,\r\n            //    tabId: tabId,\r\n            //    type: type,\r\n            //    aliasname: currentItem.aliasname,\r\n            //    isChecked: currentItem.checked,\r\n            //    translations: translations\r\n            // });\r\n         }\r\n         // view.settings.pages = pagesIdList;\r\n         if (view.settings.pages) delete view.settings.pages;\r\n      }\r\n   }\r\n\r\n   /*\r\n    * @component()\r\n    * return a UI component based upon this view.\r\n    * @param {obj} App\r\n    * @return {obj} UI component\r\n    */\r\n   component(App) {\r\n      var idBase = `ABMenuLabel_${this.id}`;\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n      };\r\n\r\n      var css = \"\";\r\n\r\n      if (this.settings.buttonStyle) {\r\n         css += this.settings.buttonStyle + \" \";\r\n      } else {\r\n         css += ABViewMenuPropertyComponentDefaults.buttonStyle + \" \";\r\n      }\r\n\r\n      if (this.settings.menuAlignment) {\r\n         css += this.settings.menuAlignment + \" \";\r\n      } else {\r\n         css += ABViewMenuPropertyComponentDefaults.menuAlignment + \" \";\r\n      }\r\n\r\n      var _ui = {\r\n         id: ids.component,\r\n         view: \"menu\",\r\n         autoheight: true,\r\n         autowidth: true,\r\n         datatype: \"json\",\r\n         css: css,\r\n         layout:\r\n            this.settings.orientation ||\r\n            ABViewMenuPropertyComponentDefaults.orientation,\r\n         on: {\r\n            onMenuItemClick: (id, e, node) => {\r\n               // switch tab view\r\n               var item = $$(ids.component).getMenuItem(id);\r\n               if (item.type == \"tab\") {\r\n                  this.changePage(item.pageId);\r\n\r\n                  var redirectPage = this.application.pages(\r\n                     (p) => p.id == item.pageId,\r\n                     true\r\n                  )[0];\r\n                  if (!redirectPage) return;\r\n\r\n                  var tabView = redirectPage.views(\r\n                     (v) => v.id == item.id,\r\n                     true\r\n                  )[0];\r\n                  if (!tabView) return;\r\n\r\n                  var tab = tabView.parent;\r\n                  if (!tab) return;\r\n\r\n                  toggleParent(tab);\r\n                  // if (!$$(tabView.id) || !$$(tabView.id).isVisible()) {\r\n                  let showIt = setInterval(function () {\r\n                     if ($$(tabView.id) && $$(tabView.id).isVisible()) {\r\n                        clearInterval(showIt);\r\n                        return;\r\n                     }\r\n                     tab.emit(\"changeTab\", tabView.id);\r\n                  }, 100);\r\n                  // }\r\n               }\r\n               // switch page\r\n               else {\r\n                  this.changePage(id);\r\n               }\r\n            },\r\n            onAfterRender: () => {\r\n               const Menu = $$(ids.component);\r\n               if (!Menu) return;\r\n               Menu?.data.each((item) => {\r\n                  const node = Menu.getItemNode(item.id);\r\n                  if (!node) return;\r\n                  // get linked page/tab info so we can use its name in the data-cy\r\n                  const viewInfo = this.AB.definitionByID(item.id);\r\n                  node.setAttribute(\r\n                     \"data-cy\",\r\n                     `menu-item ${viewInfo?.name} ${item.id} ${this.id}`\r\n                  );\r\n               });\r\n            },\r\n         },\r\n         type: {\r\n            subsign: true,\r\n         },\r\n      };\r\n\r\n      if (parseInt(this.settings.menuInToolbar)) {\r\n         var elems = [];\r\n         var menuIncluded = false;\r\n\r\n         // Legacy support: use old settings values if translated values are not set\r\n         if (this.menuTextLeft == \"\" && this.settings.menuTextLeft) {\r\n            this.menuTextLeft = this.settings.menuTextLeft;\r\n         }\r\n         if (this.menuTextCenter == \"\" && this.settings.menuTextCenter) {\r\n            this.menuTextCenter = this.settings.menuTextCenter;\r\n         }\r\n         if (this.menuTextRight == \"\" && this.settings.menuTextRight) {\r\n            this.menuTextRight = this.settings.menuTextRight;\r\n         }\r\n\r\n         if (\r\n            this.settings.menuPosition &&\r\n            this.settings.menuPosition == \"left\"\r\n         ) {\r\n            menuIncluded = true;\r\n            elems.push(_ui);\r\n         } else if (this.menuTextLeft && this.menuTextLeft.length) {\r\n            let width = this.menuTextLeft.length * 15;\r\n            elems.push({\r\n               view: \"label\",\r\n               label: this.menuTextLeft,\r\n               align: \"left\",\r\n               width: width,\r\n            });\r\n         } else {\r\n            elems.push({\r\n               view: \"label\",\r\n               label: \"\",\r\n               autowidth: true,\r\n            });\r\n         }\r\n\r\n         if (\r\n            this.settings.menuPosition &&\r\n            this.settings.menuPosition == \"center\"\r\n         ) {\r\n            menuIncluded = true;\r\n            elems.push(_ui);\r\n         } else if (this.menuTextCenter && this.menuTextCenter.length) {\r\n            let width = this.menuTextLeft.length * 15;\r\n            elems.push({});\r\n            elems.push({\r\n               view: \"label\",\r\n               label: this.menuTextCenter,\r\n               align: \"center\",\r\n               width: width,\r\n            });\r\n            elems.push({});\r\n         } else {\r\n            elems.push({\r\n               view: \"label\",\r\n               label: \"\",\r\n               autowidth: true,\r\n            });\r\n         }\r\n\r\n         if (\r\n            this.settings.menuPosition &&\r\n            this.settings.menuPosition == \"right\"\r\n         ) {\r\n            menuIncluded = true;\r\n            elems.push(_ui);\r\n         } else if (this.menuTextRight && this.menuTextRight.length) {\r\n            let width = this.menuTextLeft.length * 15;\r\n            elems.push({\r\n               view: \"label\",\r\n               label: this.menuTextRight,\r\n               align: \"right\",\r\n               width: width,\r\n            });\r\n         } else {\r\n            elems.push({\r\n               view: \"label\",\r\n               label: \"\",\r\n               autowidth: true,\r\n            });\r\n         }\r\n\r\n         if (menuIncluded == false) {\r\n            elems = [_ui];\r\n         }\r\n\r\n         _ui = {\r\n            view: \"toolbar\",\r\n            css: this.settings.menuTheme\r\n               ? this.settings.menuTheme\r\n               : ABViewMenuPropertyComponentDefaults.menuTheme,\r\n            padding: this.settings.menuPadding\r\n               ? parseInt(this.settings.menuPadding)\r\n               : ABViewMenuPropertyComponentDefaults.menuPadding,\r\n            elements: elems,\r\n         };\r\n      }\r\n\r\n      // make sure each of our child views get .init() called\r\n      var _init = (options) => {\r\n         var Menu = $$(ids.component);\r\n         if (Menu) {\r\n            this.ClearPagesInView(Menu);\r\n            if (this.settings.order && this.settings.order.length) {\r\n               this.AddPagesToView(Menu, this.settings.order);\r\n               // Force onAfterRender to fire\r\n               Menu.refresh();\r\n            }\r\n         }\r\n      };\r\n\r\n      var toggleParent = (element) => {\r\n         if (!element.parent) return false;\r\n         var parentElem = element.parent;\r\n         if (!parentElem.parent) return false;\r\n         parentElem.parent.emit(\"changeTab\", parentElem.id);\r\n         toggleParent(parentElem.parent);\r\n      };\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: _init,\r\n      };\r\n   }\r\n};\r\n","const ABViewPageCore = require(\"../../core/views/ABViewPageCore\");\r\n\r\nconst ABPropertyComponentDefaults = ABViewPageCore.defaultValues();\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABViewPage extends ABViewPageCore {\r\n   // constructor(values, application, parent, defaultValues) {\r\n   //    super(values, application, parent, defaultValues);\r\n   // }\r\n\r\n   //\r\n   //\tEditor Related\r\n   //\r\n\r\n   /**\r\n    * @method editorComponent\r\n    * return the Editor for this UI component.\r\n    * the editor should display either a \"block\" view or \"preview\" of\r\n    * the current layout of the view.\r\n    * @param {string} mode what mode are we in ['block', 'preview']\r\n    * @return {Component}\r\n    */\r\n   editorComponent(App, mode) {\r\n      var comp = super.editorComponent(App, mode);\r\n\r\n      var _init = (options) => {\r\n         comp.init(options);\r\n      };\r\n\r\n      return {\r\n         ui: comp.ui,\r\n         init: _init,\r\n         logic: comp.logic,\r\n\r\n         onShow: comp.onShow,\r\n      };\r\n   }\r\n\r\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\r\n      var commonUI = super.propertyEditorDefaultElements(\r\n         App,\r\n         ids,\r\n         _logic,\r\n         ObjectDefaults\r\n      );\r\n\r\n      _logic.permissionClick = (id, e, node, isRetry = false) => {\r\n         var List = $$(ids.permissions);\r\n         var item = List.getItem(id);\r\n\r\n         List.showProgress({ type: \"icon\" });\r\n\r\n         if (item.markCheckbox) {\r\n            console.warn(\"ABViewPage:check for depreciated role removal here:\");\r\n            App.AB.Network.delete({\r\n               url: \"/app_builder/page/\" + item.action_key + \"/role\",\r\n               data: {\r\n                  role_id: item.id,\r\n               },\r\n            })\r\n               .then((data) => {\r\n                  item.markCheckbox = false;\r\n                  List.updateItem(id, item);\r\n                  List.hideProgress();\r\n               })\r\n               .catch((err) => {\r\n                  console.error(err);\r\n                  if (err.code == \"E_NOACTIONKEY\") {\r\n                     // if this our second time through, then display an error:\r\n                     if (isRetry) {\r\n                        console.error(\"Error Saving Permisison: \", err);\r\n                        List.hideProgress();\r\n                        return;\r\n                     }\r\n\r\n                     // in the case where no ActionKey was present,\r\n                     // we can still mark that this is no longer connected:\r\n                     item.markCheckbox = false;\r\n                     List.updateItem(id, item);\r\n\r\n                     // Now if we got here, there is an issue with the data in our\r\n                     // Permissions.  These permissions get created when a Page is\r\n                     // .created/saved, so let's run through our pages again and\r\n                     // save() them\r\n                     var allSaves = [];\r\n                     item._view.application.pages().forEach((page) => {\r\n                        allSaves.push(page.save());\r\n                     });\r\n\r\n                     // once that is all done, try this again:\r\n                     Promise.all(allSaves).then(() => {\r\n                        _logic.permissionClick(id, e, node, true);\r\n                     });\r\n                  }\r\n               });\r\n         } else {\r\n            console.warn(\"ABViewPage:check for depreciated role operation\");\r\n            App.AB.Network.put({\r\n               url: \"/app_builder/page/\" + item.action_key + \"/role\",\r\n               data: {\r\n                  role_id: item.id,\r\n               },\r\n            })\r\n               .then((data) => {\r\n                  item.markCheckbox = true;\r\n                  List.updateItem(id, item);\r\n                  List.hideProgress();\r\n               })\r\n               .catch((err) => {\r\n                  console.error(err);\r\n                  if (err.code == \"E_NOACTIONKEY\") {\r\n                     // if this our second time through, then display an error:\r\n                     if (isRetry) {\r\n                        console.error(\"Error Saving Permisison: \", err);\r\n                        List.hideProgress();\r\n                        return;\r\n                     }\r\n\r\n                     // Now if we got here, there is an issue with the data in our\r\n                     // Permissions.  These permissions get created when a Page is\r\n                     // .created/saved, so let's run through our pages again and\r\n                     // save() them\r\n                     var allSaves = [];\r\n                     item._view.application.pages().forEach((page) => {\r\n                        allSaves.push(page.save());\r\n                     });\r\n\r\n                     // once that is all done, try this again:\r\n                     Promise.all(allSaves).then(() => {\r\n                        _logic.permissionClick(id, e, node, true);\r\n                     });\r\n                  }\r\n               });\r\n         }\r\n      };\r\n\r\n      // in addition to the common .label  values, we\r\n      // ask for:\r\n      return commonUI.concat([\r\n         {\r\n            name: \"type\",\r\n            view: \"richselect\",\r\n            label: L(\"Type\"),\r\n            options: [\r\n               { id: \"page\", value: L(\"Page\") },\r\n               { id: \"popup\", value: L(\"Popup\") },\r\n            ],\r\n            on: {\r\n               onChange: function (newv, oldv) {\r\n                  if (newv == \"page\") {\r\n                     $$(ids.popupSettings).hide();\r\n                     $$(ids.pageSettings).show();\r\n                  } else {\r\n                     $$(ids.popupSettings).show();\r\n                     $$(ids.pageSettings).hide();\r\n                  }\r\n               },\r\n            },\r\n         },\r\n         {\r\n            view: \"fieldset\",\r\n            name: \"popupSettings\",\r\n            label: L(\"Popup Settings\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n            body: {\r\n               type: \"clean\",\r\n               padding: 10,\r\n               rows: [\r\n                  {\r\n                     view: \"text\",\r\n                     name: \"popupWidth\",\r\n                     placeholder: L(\"Set popup width\"),\r\n                     label: L(\"Width:\"),\r\n                     labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n                     validate: webix.rules.isNumber,\r\n                  },\r\n                  {\r\n                     view: \"text\",\r\n                     name: \"popupHeight\",\r\n                     placeholder: L(\"Set popup height\"),\r\n                     label: L(\"Height:\"),\r\n                     labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n                     validate: webix.rules.isNumber,\r\n                  },\r\n               ],\r\n            },\r\n         },\r\n         {\r\n            view: \"fieldset\",\r\n            name: \"pageSettings\",\r\n            label: L(\"Page Settings\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n            body: {\r\n               type: \"clean\",\r\n               padding: 10,\r\n               rows: [\r\n                  {\r\n                     view: \"checkbox\",\r\n                     name: \"fixedPageWidth\",\r\n                     labelRight: L(\"Page has fixed width\"),\r\n                     labelWidth: this.AB.UISettings.config().labelWidthCheckbox,\r\n                     click: function (id, event) {\r\n                        if (this.getValue() == 1) {\r\n                           $$(ids.pageWidth).show();\r\n                        } else {\r\n                           $$(ids.pageWidth).hide();\r\n                        }\r\n                     },\r\n                  },\r\n                  {\r\n                     view: \"text\",\r\n                     name: \"pageWidth\",\r\n                     placeholder: L(\"Set page width\"),\r\n                     label: L(\"Page width:\"),\r\n                     labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n                  },\r\n                  {\r\n                     view: \"richselect\",\r\n                     name: \"pageBackground\",\r\n                     label: L(\"Page background:\"),\r\n                     labelWidth: this.AB.UISettings.config().labelWidthXLarge,\r\n                     options: [\r\n                        {\r\n                           id: \"ab-background-default\",\r\n                           value: L(\"White (default)\"),\r\n                        },\r\n                        {\r\n                           id: \"ab-background-gray\",\r\n                           value: L(\"Dark\"),\r\n                        },\r\n                        // { \"id\":\"ab-background-texture\", \"value\":L('ab.component.page.pageBackgroundTextured', '*Textured')}\r\n                     ],\r\n                  },\r\n               ],\r\n            },\r\n         },\r\n         {\r\n            view: \"fieldset\",\r\n            name: \"pagePermissionPanel\",\r\n            label: L(\"Page Permissions:\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n            body: {\r\n               type: \"clean\",\r\n               padding: 10,\r\n               rows: [\r\n                  {\r\n                     name: \"permissions\",\r\n                     view: \"list\",\r\n                     select: false,\r\n                     minHeight: 200,\r\n                     template: \"{common.markCheckbox()} #name#\",\r\n                     type: {\r\n                        markCheckbox: function (obj) {\r\n                           return `<span class='check webix_icon fa fa-${\r\n                              obj.markCheckbox ? \"check-\" : \"\"\r\n                           }square-o'></span>`;\r\n                        },\r\n                     },\r\n                     on: {\r\n                        onItemClick: function (id, e, node) {\r\n                           _logic.permissionClick(id, e, node);\r\n                        },\r\n                     },\r\n                  },\r\n               ],\r\n            },\r\n         },\r\n      ]);\r\n   }\r\n\r\n   static propertyEditorPopulate(App, ids, view, logic) {\r\n      super.propertyEditorPopulate(App, ids, view, logic);\r\n\r\n      $$(ids.type).setValue(\r\n         view.settings.type || ABPropertyComponentDefaults.type\r\n      );\r\n      $$(ids.popupWidth).setValue(\r\n         view.settings.popupWidth || ABPropertyComponentDefaults.popupWidth\r\n      );\r\n      $$(ids.popupHeight).setValue(\r\n         view.settings.popupHeight || ABPropertyComponentDefaults.popupHeight\r\n      );\r\n      $$(ids.pageWidth).setValue(\r\n         view.settings.pageWidth || ABPropertyComponentDefaults.pageWidth\r\n      );\r\n      $$(ids.fixedPageWidth).setValue(\r\n         view.settings.fixedPageWidth ||\r\n            ABPropertyComponentDefaults.fixedPageWidth\r\n      );\r\n      $$(ids.pageBackground).setValue(\r\n         view.settings.pageBackground ||\r\n            ABPropertyComponentDefaults.pageBackground\r\n      );\r\n\r\n      // Disable select type of page when this page is root\r\n      if (view.isRoot()) {\r\n         $$(ids.type).hide();\r\n\r\n         // Update permission options\r\n         $$(ids.pagePermissionPanel).show();\r\n         this.propertyUpdatePermissionsOptions(ids, view);\r\n      } else {\r\n         $$(ids.pagePermissionPanel).hide();\r\n         $$(ids.type).show();\r\n      }\r\n\r\n      if (view.settings.type == \"popup\") {\r\n         $$(ids.popupSettings).show();\r\n         $$(ids.pageSettings).hide();\r\n      } else {\r\n         $$(ids.popupSettings).hide();\r\n         $$(ids.pageSettings).show();\r\n      }\r\n\r\n      if (view.settings.fixedPageWidth == 1) {\r\n         $$(ids.pageWidth).show();\r\n      } else {\r\n         $$(ids.pageWidth).hide();\r\n      }\r\n   }\r\n\r\n   static propertyEditorValues(ids, view) {\r\n      super.propertyEditorValues(ids, view);\r\n\r\n      view.settings.type = $$(ids.type).getValue();\r\n      view.settings.popupWidth = $$(ids.popupWidth).getValue();\r\n      view.settings.popupHeight = $$(ids.popupHeight).getValue();\r\n      view.settings.pageWidth = $$(ids.pageWidth).getValue();\r\n      view.settings.fixedPageWidth = $$(ids.fixedPageWidth).getValue();\r\n      view.settings.pageBackground = $$(ids.pageBackground).getValue();\r\n   }\r\n\r\n   /**\r\n    * @method propertyUpdatePermissionsOptions\r\n    * Populate permissions of Ops Portal to select list in property\r\n    *\r\n    */\r\n   static propertyUpdatePermissionsOptions(ids, view) {\r\n      var action_key = this.getPageActionKey(view);\r\n      var roles = [];\r\n\r\n      var List = $$(ids.permissions);\r\n\r\n      // make sure our list has been made into a ProgressBar\r\n      if (!List.showProgress) {\r\n         webix.extend(List, webix.ProgressBar);\r\n      }\r\n\r\n      List.clearAll();\r\n      List.showProgress({ type: \"icon\" });\r\n\r\n      console.error(\r\n         \"ABViewPage: check for depreciated Permission checks here.\"\r\n      );\r\n      view.application\r\n         .getPermissions()\r\n         .then(function (selected_role_ids) {\r\n            var app_roles = selected_role_ids;\r\n\r\n            view.AB.Network.get({\r\n               url: \"/app_builder/page/\" + action_key + \"/role\",\r\n            }).then((data) => {\r\n               var selectedRoles = [];\r\n               data.selected.forEach((s) => {\r\n                  selectedRoles.push(s.id);\r\n               });\r\n\r\n               data.roles.forEach((r) => {\r\n                  if (app_roles.indexOf(r.id) != -1) {\r\n                     if (selectedRoles.indexOf(r.id) != -1) {\r\n                        r.markCheckbox = true;\r\n                     } else {\r\n                        r.markCheckbox = false;\r\n                     }\r\n                     r.action_key = action_key;\r\n                     r._view = view;\r\n                     roles.push(r);\r\n                  }\r\n               });\r\n\r\n               roles = view.AB.orderBy(roles, \"id\", \"asc\");\r\n\r\n               List.parse(roles);\r\n               List.hideProgress();\r\n            });\r\n         })\r\n         .catch(function (err) {\r\n            List.hideProgress();\r\n\r\n            console.error(err);\r\n         });\r\n   }\r\n\r\n   /*\r\n    * @component()\r\n    * return a UI component based upon this view.\r\n    * @param {obj} App\r\n    * @return {obj} UI component\r\n    */\r\n   component(App) {\r\n      var comp = super.component(App);\r\n      var _ui = {\r\n         view: \"scrollview\",\r\n         borderless: true,\r\n         css:\r\n            this.settings.pageBackground ||\r\n            ABPropertyComponentDefaults.pageBackground,\r\n         body: comp.ui,\r\n      };\r\n\r\n      var _init = (options) => {\r\n         var accessLevel = this.getUserAccess();\r\n         comp.init(options, accessLevel);\r\n      };\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: _init,\r\n         logic: comp.logic,\r\n\r\n         onShow: comp.onShow,\r\n      };\r\n   }\r\n};\r\n","const ABViewPivotCore = require(\"../../core/views/ABViewPivotCore\");\r\nconst ABFieldCalculate = require(\"../dataFields/ABFieldCalculate\");\r\nconst ABFieldFormula = require(\"../dataFields/ABFieldFormula\");\r\nconst ABFieldNumber = require(\"../dataFields/ABFieldNumber\");\r\nconst ABObjectQuery = require(\"../ABObjectQuery\");\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABViewPivot extends ABViewPivotCore {\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(values, application, parent, defaultValues);\r\n   }\r\n\r\n   //\r\n   //\tEditor Related\r\n   //\r\n\r\n   /**\r\n    * @method editorComponent\r\n    * return the Editor for this UI component.\r\n    * the editor should display either a \"block\" view or \"preview\" of\r\n    * the current layout of the view.\r\n    * @param {string} mode what mode are we in ['block', 'preview']\r\n    * @return {Component}\r\n    */\r\n   editorComponent(App, mode) {\r\n      var idBase = \"ABViewPivotEditorComponent\";\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n      };\r\n\r\n      var componentBase = this.component(App);\r\n      var component = App.AB.cloneDeep(componentBase);\r\n\r\n      component.ui.id = ids.component;\r\n      component.ui.readonly = false;\r\n      component.ui.on = {\r\n         onBeforeApply: (structure) => {\r\n            this.settings.structure = structure;\r\n            this.save();\r\n         },\r\n      };\r\n\r\n      component.init = (options) => {\r\n         componentBase.init({\r\n            componentId: ids.component,\r\n         });\r\n      };\r\n\r\n      return component;\r\n   }\r\n\r\n   //\r\n   // Property Editor\r\n   //\r\n\r\n   // static propertyEditorComponent(App) {\r\n   // \treturn ABViewPropertyComponent.component(App);\r\n   // }\r\n\r\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\r\n      let commonUI = super.propertyEditorDefaultElements(\r\n         App,\r\n         ids,\r\n         _logic,\r\n         ObjectDefaults\r\n      );\r\n\r\n      return commonUI.concat([\r\n         {\r\n            name: \"datacollection\",\r\n            view: \"richselect\",\r\n            label: L(\"Data Source\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n         },\r\n         {\r\n            view: \"counter\",\r\n            name: \"height\",\r\n            label: L(\"Height:\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n         },\r\n         {\r\n            view: \"checkbox\",\r\n            name: \"removeMissed\",\r\n            labelRight: L(\"Remove empty data.\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthCheckbox,\r\n         },\r\n         {\r\n            view: \"checkbox\",\r\n            name: \"totalColumn\",\r\n            labelRight: L(\"Show a total column.\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthCheckbox,\r\n         },\r\n         {\r\n            view: \"checkbox\",\r\n            name: \"separateLabel\",\r\n            labelRight: L(\"Separate header label.\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthCheckbox,\r\n         },\r\n         {\r\n            view: \"checkbox\",\r\n            name: \"min\",\r\n            labelRight: L(\r\n               \"Highlighting of a cell(s) with the least value in a row.\"\r\n            ),\r\n            labelWidth: this.AB.UISettings.config().labelWidthCheckbox,\r\n         },\r\n         {\r\n            view: \"checkbox\",\r\n            name: \"max\",\r\n            labelRight: L(\r\n               \"Highlighting of a cell(s) with the biggest value in a row.\"\r\n            ),\r\n            labelWidth: this.AB.UISettings.config().labelWidthCheckbox,\r\n         },\r\n         {\r\n            name: \"decimalPlaces\",\r\n            view: \"counter\",\r\n            min: 1,\r\n            label: L(\"Decimal Places\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthXLarge,\r\n         },\r\n      ]);\r\n   }\r\n\r\n   static propertyEditorPopulate(App, ids, view) {\r\n      super.propertyEditorPopulate(App, ids, view);\r\n\r\n      var datacollectionId = view.settings.dataviewID\r\n         ? view.settings.dataviewID\r\n         : null;\r\n      var SourceSelector = $$(ids.datacollection);\r\n\r\n      // Pull data collections to options\r\n      var dcOptions = view.propertyDatacollections();\r\n      SourceSelector.define(\"options\", dcOptions);\r\n      SourceSelector.define(\"value\", datacollectionId);\r\n      SourceSelector.refresh();\r\n\r\n      $$(ids.removeMissed).setValue(view.settings.removeMissed);\r\n      $$(ids.totalColumn).setValue(view.settings.totalColumn);\r\n      $$(ids.separateLabel).setValue(view.settings.separateLabel);\r\n      $$(ids.min).setValue(view.settings.min);\r\n      $$(ids.max).setValue(view.settings.max);\r\n      $$(ids.height).setValue(view.settings.height);\r\n      $$(ids.decimalPlaces).setValue(\r\n         view.settings.decimalPlaces == null ? 2 : view.settings.decimalPlaces\r\n      );\r\n   }\r\n\r\n   static propertyEditorValues(ids, view) {\r\n      super.propertyEditorValues(ids, view);\r\n\r\n      view.settings.dataviewID = $$(ids.datacollection).getValue();\r\n\r\n      view.settings.removeMissed = $$(ids.removeMissed).getValue();\r\n      view.settings.totalColumn = $$(ids.totalColumn).getValue();\r\n      view.settings.separateLabel = $$(ids.separateLabel).getValue();\r\n      view.settings.min = $$(ids.min).getValue();\r\n      view.settings.max = $$(ids.max).getValue();\r\n      view.settings.height = $$(ids.height).getValue();\r\n   }\r\n\r\n   /*\r\n    * @component()\r\n    * return a UI component based upon this view.\r\n    * @param {obj} App\r\n    * @return {obj} UI component\r\n    */\r\n   component(App) {\r\n      let baseCom = super.component(App);\r\n\r\n      var idBase = `ABViewPivot_${this.id}`;\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n      };\r\n\r\n      // an ABViewLabel is a simple Label\r\n      var _ui = {\r\n         id: ids.component,\r\n         view: \"pivot\",\r\n         readonly: true,\r\n         removeMissed: this.settings.removeMissed,\r\n         totalColumn: this.settings.totalColumn,\r\n         separateLabel: this.settings.separateLabel,\r\n         min: this.settings.min,\r\n         max: this.settings.max,\r\n         format: (value) => {\r\n            let decimalPlaces = this.settings.decimalPlaces || 2;\r\n            return value && value != \"0\"\r\n               ? parseFloat(value).toFixed(decimalPlaces || 0)\r\n               : value;\r\n         },\r\n      };\r\n\r\n      // make sure each of our child views get .init() called\r\n      var _init = (options) => {\r\n         options = options || {};\r\n         options.componentId = options.componentId || ids.component;\r\n\r\n         let dc = this.datacollection;\r\n         if (!dc) return Promise.resolve();\r\n\r\n         let object = dc.datasource;\r\n         if (!object) return Promise.resolve();\r\n\r\n         let $pivotComp = $$(ids.component);\r\n         if ($pivotComp && object instanceof ABObjectQuery) {\r\n            let customLabels = {};\r\n            object.fields().forEach((f) => {\r\n               customLabels[f.columnName] = f.label;\r\n            });\r\n\r\n            $pivotComp.define(\"fieldMap\", customLabels);\r\n         }\r\n\r\n         let populateData = () => {\r\n            let data = dc.getData();\r\n            let dataMapped = data.map((d) => {\r\n               let result = {};\r\n\r\n               object.fields().forEach((f) => {\r\n                  if (\r\n                     f instanceof ABFieldCalculate ||\r\n                     f instanceof ABFieldFormula ||\r\n                     f instanceof ABFieldNumber\r\n                  )\r\n                     result[f.columnName] = d[f.columnName];\r\n                  else result[f.columnName] = f.format(d);\r\n               });\r\n\r\n               return result;\r\n            });\r\n\r\n            $$(options.componentId).parse(dataMapped);\r\n\r\n            // set pivot configuration\r\n            if (this.settings.structure)\r\n               $$(options.componentId).setStructure(this.settings.structure);\r\n         };\r\n\r\n         this.eventAdd({\r\n            emitter: dc,\r\n            eventName: \"initializedData\",\r\n            listener: () => {\r\n               populateData();\r\n            },\r\n         });\r\n\r\n         return (\r\n            Promise.resolve()\r\n               // get data\r\n               .then(() => {\r\n                  return new Promise((next, err) => {\r\n                     switch (dc.dataStatus) {\r\n                        case dc.dataStatusFlag.notInitial:\r\n                           dc.loadData();\r\n                           break;\r\n                        case dc.dataStatusFlag.initialized:\r\n                           next();\r\n                           break;\r\n                     }\r\n                  });\r\n               })\r\n\r\n               // populate data into pivot\r\n               .then(() => {\r\n                  return new Promise((next, err) => {\r\n                     populateData();\r\n                     next();\r\n                  });\r\n               })\r\n         );\r\n      };\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: _init,\r\n\r\n         onShow: baseCom.onShow,\r\n      };\r\n   }\r\n};\r\n","const ABViewReportsManagerCore = require(\"../../core/views/ABViewReportsManagerCore\");\r\n\r\nmodule.exports = class ABViewReportsManager extends ABViewReportsManagerCore {\r\n   constructor(values, application, parent, defaultValues) {\r\n      super(values, application, parent, defaultValues);\r\n   }\r\n\r\n   //\r\n   //\tEditor Related\r\n   //\r\n\r\n   /**\r\n    * @method editorComponent\r\n    * return the Editor for this UI component.\r\n    * the editor should display either a \"block\" view or \"preview\" of\r\n    * the current layout of the view.\r\n    * @param {string} mode what mode are we in ['block', 'preview']\r\n    * @return {Component}\r\n    */\r\n   editorComponent(App, mode) {\r\n      let idBase = \"ABViewReportsManagerEditorComponent\";\r\n      let ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n      };\r\n\r\n      let component = this.component(App);\r\n\r\n      component.ui.id = ids.component;\r\n\r\n      component.init = (options) => {};\r\n\r\n      return component;\r\n   }\r\n\r\n   //\r\n   // Property Editor\r\n   //\r\n\r\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\r\n      var commonUI = super.propertyEditorDefaultElements(\r\n         App,\r\n         ids,\r\n         _logic,\r\n         ObjectDefaults\r\n      );\r\n\r\n      return commonUI.concat([]);\r\n   }\r\n\r\n   static propertyEditorPopulate(App, ids, view) {\r\n      super.propertyEditorPopulate(App, ids, view);\r\n   }\r\n\r\n   static propertyEditorValues(ids, view) {\r\n      super.propertyEditorValues(ids, view);\r\n\r\n      view.settings.dataviewID = $$(ids.datacollection).getValue();\r\n   }\r\n\r\n   /*\r\n    * @component()\r\n    * return a UI component based upon this view.\r\n    * @param {obj} App\r\n    * @return {obj} UI component\r\n    */\r\n   component(App) {\r\n      let baseCom = super.component(App);\r\n\r\n      let idBase = `ABViewReportManager_${this.id}`;\r\n      let ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n      };\r\n\r\n      let compInstance = this;\r\n\r\n      let _ui = {\r\n         id: ids.component,\r\n         view: \"reports\",\r\n         toolbar: true,\r\n         override: new Map([\r\n            [\r\n               reports.services.Backend,\r\n               class MyBackend extends reports.services.Backend {\r\n                  getModules() {\r\n                     return Promise.resolve(\r\n                        compInstance.settings.moduleList || []\r\n                     );\r\n                  }\r\n                  saveModule(id, data) {\r\n                     id = id || webix.uid();\r\n                     compInstance.settings.moduleList =\r\n                        compInstance.settings.moduleList || [];\r\n\r\n                     let indexOfModule = null;\r\n                     let module = compInstance.settings.moduleList.filter(\r\n                        (m, index) => {\r\n                           let isExists = m.id == id;\r\n                           if (isExists) indexOfModule = index;\r\n\r\n                           return isExists;\r\n                        }\r\n                     )[0];\r\n\r\n                     // Update\r\n                     if (module) {\r\n                        compInstance.settings.moduleList[indexOfModule] = data;\r\n                     }\r\n                     // Add\r\n                     else {\r\n                        compInstance.settings.moduleList.push(data);\r\n                     }\r\n\r\n                     return new Promise((resolve, reject) => {\r\n                        compInstance\r\n                           .save()\r\n                           .catch(reject)\r\n                           .then(() => {\r\n                              resolve({ id: id });\r\n                           });\r\n                     });\r\n                  }\r\n                  deleteModule(id) {\r\n                     compInstance.settings.moduleList =\r\n                        compInstance.settings.moduleList || [];\r\n\r\n                     compInstance.settings.moduleList = compInstance.settings.moduleList.filter(\r\n                        (m) => m.id != id\r\n                     );\r\n\r\n                     return new Promise((resolve, reject) => {\r\n                        compInstance\r\n                           .save()\r\n                           .catch(reject)\r\n                           .then(() => {\r\n                              resolve({ id: id });\r\n                           });\r\n                     });\r\n                  }\r\n\r\n                  getModels() {\r\n                     let reportModels = {};\r\n\r\n                     (compInstance.AB.datacollections() || []).forEach((dc) => {\r\n                        let obj = dc.datasource;\r\n                        if (!obj) return;\r\n\r\n                        let reportFields = _logic.getReportFields(dc);\r\n\r\n                        // get connected data collections\r\n                        // let linkedFields = [];\r\n                        // (obj.connectFields() || []).forEach((f, index) => {\r\n                        //    let connectedDcs = compInstance.AB.datacollections(\r\n                        //       (dColl) =>\r\n                        //          dColl &&\r\n                        //          dColl.datasource &&\r\n                        //          dColl.datasource.id == f.settings.linkObject\r\n                        //    );\r\n                        //    (connectedDcs || []).forEach((linkedDc) => {\r\n                        //       linkedFields.push({\r\n                        //          id: index + 1,\r\n                        //          name: linkedDc.label,\r\n                        //          source: dc.id,\r\n                        //          target: linkedDc.id\r\n                        //       });\r\n                        //    });\r\n                        // });\r\n\r\n                        // // MOCK UP for testing\r\n                        // let linkedFields = [\r\n                        //    {\r\n                        //       id: \"id\",\r\n                        //       name: \"id\",\r\n                        //       source: \"39378ee0-38f0-4b9d-a5aa-dddc61137fcd\", // Player\r\n                        //       target: \"0de82362-4ab5-4f0f-8cfa-d1288d173cba\" // Team\r\n                        //    }\r\n                        // ];\r\n\r\n                        reportModels[dc.id] = {\r\n                           id: dc.id,\r\n                           name: dc.label,\r\n                           data: reportFields,\r\n                           refs: [],\r\n                        };\r\n                     });\r\n\r\n                     return Promise.resolve(reportModels);\r\n                  }\r\n\r\n                  getQueries() {\r\n                     return Promise.resolve(\r\n                        compInstance.settings.queryList || []\r\n                     );\r\n                  }\r\n                  saveQuery(id, data) {\r\n                     id = id || webix.uid();\r\n                     compInstance.settings.queryList =\r\n                        compInstance.settings.queryList || [];\r\n\r\n                     let indexOfQuery = null;\r\n                     let query = compInstance.settings.queryList.filter(\r\n                        (m, index) => {\r\n                           let isExists = m.id == id;\r\n                           if (isExists) indexOfQuery = index;\r\n\r\n                           return isExists;\r\n                        }\r\n                     )[0];\r\n\r\n                     // Update\r\n                     if (query) {\r\n                        compInstance.settings.queryList[indexOfQuery] = data;\r\n                     }\r\n                     // Add\r\n                     else {\r\n                        compInstance.settings.queryList.push(data);\r\n                     }\r\n\r\n                     return new Promise((resolve, reject) => {\r\n                        compInstance\r\n                           .save()\r\n                           .catch(reject)\r\n                           .then(() => {\r\n                              resolve({ id: id });\r\n                           });\r\n                     });\r\n                  }\r\n                  deleteQuery(id) {\r\n                     compInstance.settings.queryList =\r\n                        compInstance.settings.queryList || [];\r\n\r\n                     compInstance.settings.queryList = compInstance.settings.queryList.filter(\r\n                        (m) => m.id != id\r\n                     );\r\n\r\n                     return new Promise((resolve, reject) => {\r\n                        compInstance\r\n                           .save()\r\n                           .catch(reject)\r\n                           .then(() => {\r\n                              resolve({ id: id });\r\n                           });\r\n                     });\r\n                  }\r\n\r\n                  getData(config) {\r\n                     let result = [];\r\n                     let pullDataTasks = [];\r\n                     let dcIds = [];\r\n                     let dcData = {};\r\n                     let reportFields = [];\r\n\r\n                     // pull data of the base and join DCs\r\n                     dcIds.push(config.data);\r\n                     (config.joins || []).forEach((j) => {\r\n                        dcIds.push(j.sid);\r\n                        dcIds.push(j.tid);\r\n                     });\r\n                     dcIds = compInstance.AB.uniq(dcIds);\r\n                     dcIds.forEach((dcId) => {\r\n                        pullDataTasks.push(\r\n                           new Promise((next, bad) => {\r\n                              _logic\r\n                                 .getData(dcId)\r\n                                 .catch(bad)\r\n                                 .then((data) => {\r\n                                    dcData[dcId] = data || [];\r\n                                    next();\r\n                                 });\r\n                           })\r\n                        );\r\n                     });\r\n\r\n                     dcIds.forEach((dcId) => {\r\n                        let dataCol = compInstance.AB.datacollectionByID(dcId);\r\n                        if (!dataCol) return;\r\n\r\n                        reportFields = reportFields.concat(\r\n                           _logic.getReportFields(dataCol).map((f) => {\r\n                              // change format of id to match the report widget\r\n                              f.id = `${dcId}.${f.id}`; // dc_id.field_id\r\n                              return f;\r\n                           })\r\n                        );\r\n                     });\r\n\r\n                     return (\r\n                        Promise.resolve()\r\n                           .then(() => Promise.all(pullDataTasks))\r\n                           .then(\r\n                              () =>\r\n                                 new Promise((next, bad) => {\r\n                                    // the data result equals data of the base DC\r\n                                    result = dcData[config.data] || [];\r\n\r\n                                    // no join settings\r\n                                    if (!config.joins || !config.joins.length) {\r\n                                       return next();\r\n                                    }\r\n\r\n                                    (config.joins || []).forEach((j) => {\r\n                                       let sourceDc = compInstance.AB.datacollectionByID(\r\n                                          j.sid\r\n                                       );\r\n                                       if (!sourceDc) return;\r\n\r\n                                       let sourceObj = sourceDc.datasource;\r\n                                       if (!sourceObj) return;\r\n\r\n                                       let targetDc = compInstance.AB.datacollectionByID(\r\n                                          j.tid\r\n                                       );\r\n                                       if (!targetDc) return;\r\n\r\n                                       let targetObj = targetDc.datasource;\r\n                                       if (!targetObj) return;\r\n\r\n                                       let sourceLinkField = sourceObj.fieldByID(\r\n                                          j.sf\r\n                                       );\r\n                                       let targetLinkField = targetObj.fieldByID(\r\n                                          j.tf\r\n                                       );\r\n                                       if (!sourceLinkField && !targetLinkField)\r\n                                          return;\r\n\r\n                                       let sourceData = dcData[j.sid] || [];\r\n                                       let targetData = dcData[j.tid] || [];\r\n                                       sourceData.forEach((sData) => {\r\n                                          targetData.forEach((tData) => {\r\n                                             let sVal =\r\n                                                sData[\r\n                                                   sourceLinkField\r\n                                                      ? `${j.sid}.${sourceLinkField.columnName}.id`\r\n                                                      : `${j.sid}.id`\r\n                                                ] || [];\r\n\r\n                                             let tVal =\r\n                                                tData[\r\n                                                   targetLinkField\r\n                                                      ? `${j.tid}.${targetLinkField.columnName}.id`\r\n                                                      : `${j.tid}.id`\r\n                                                ] || [];\r\n\r\n                                             if (!Array.isArray(sVal))\r\n                                                sVal = [sVal];\r\n                                             if (!Array.isArray(tVal))\r\n                                                tVal = [tVal];\r\n\r\n                                             // Add joined row to the result array\r\n                                             let matchedVal = sVal.filter(\r\n                                                (val) => tVal.indexOf(val) > -1\r\n                                             );\r\n                                             if (\r\n                                                matchedVal &&\r\n                                                matchedVal.length\r\n                                             ) {\r\n                                                let updateRows =\r\n                                                   result.filter(\r\n                                                      (r) =>\r\n                                                         r[`${j.sid}.id`] ==\r\n                                                            sData[\r\n                                                               `${j.sid}.id`\r\n                                                            ] &&\r\n                                                         r[`${j.tid}.id`] ==\r\n                                                            null\r\n                                                   ) || [];\r\n\r\n                                                if (\r\n                                                   updateRows &&\r\n                                                   updateRows.length\r\n                                                ) {\r\n                                                   (updateRows || []).forEach(\r\n                                                      (r) => {\r\n                                                         for (let key in tData) {\r\n                                                            if (key != \"id\")\r\n                                                               r[key] =\r\n                                                                  tData[key];\r\n                                                         }\r\n                                                      }\r\n                                                   );\r\n                                                } else {\r\n                                                   result.push(\r\n                                                      Object.assign(\r\n                                                         compInstance.AB.cloneDeep(\r\n                                                            sData\r\n                                                         ),\r\n                                                         compInstance.AB.cloneDeep(\r\n                                                            tData\r\n                                                         )\r\n                                                      )\r\n                                                   );\r\n                                                }\r\n                                             }\r\n                                          });\r\n                                       });\r\n                                    });\r\n\r\n                                    next();\r\n                                 })\r\n                           )\r\n                           // filter & sort\r\n                           .then(\r\n                              () =>\r\n                                 new Promise((next, bad) => {\r\n                                    let queryVal;\r\n                                    try {\r\n                                       queryVal = JSON.parse(\r\n                                          config.query || \"{}\"\r\n                                       );\r\n                                    } catch (err) {\r\n                                       bad(err);\r\n                                    }\r\n\r\n                                    if (\r\n                                       queryVal &&\r\n                                       queryVal.rules &&\r\n                                       queryVal.rules.length\r\n                                    ) {\r\n                                       queryVal.rules.forEach((r) => {\r\n                                          if (!r || !r.type || !r.condition)\r\n                                             return;\r\n\r\n                                          switch (r.type) {\r\n                                             case \"date\":\r\n                                             case \"datetime\":\r\n                                                // Convert string to Date object\r\n                                                if (r.condition.filter) {\r\n                                                   if (\r\n                                                      this.AB.isString(\r\n                                                         r.condition.filter\r\n                                                      )\r\n                                                   ) {\r\n                                                      r.condition.filter = this.AB.toDate(\r\n                                                         r.condition.filter\r\n                                                      );\r\n                                                   }\r\n\r\n                                                   if (\r\n                                                      r.condition.filter\r\n                                                         .start &&\r\n                                                      this.AB.isString(\r\n                                                         r.condition.filter\r\n                                                            .start\r\n                                                      )\r\n                                                   ) {\r\n                                                      r.condition.filter.start = this.AB.toDate(\r\n                                                         r.condition.filter\r\n                                                            .start\r\n                                                      );\r\n                                                   }\r\n\r\n                                                   if (\r\n                                                      r.condition.filter.end &&\r\n                                                      this.AB.isString(\r\n                                                         r.condition.filter.end\r\n                                                      )\r\n                                                   ) {\r\n                                                      r.condition.filter.end = this.AB.toDate(\r\n                                                         r.condition.filter.end\r\n                                                      );\r\n                                                   }\r\n                                                }\r\n                                                break;\r\n                                          }\r\n                                       });\r\n                                    }\r\n\r\n                                    // create a new query widget to get the filter function\r\n                                    let filterElem = webix.ui({\r\n                                       view: \"query\",\r\n                                       fields: reportFields,\r\n                                       value: queryVal,\r\n                                    });\r\n\r\n                                    // create a new data collection and apply the query filter\r\n                                    let tempDc = new webix.DataCollection();\r\n                                    tempDc.parse(result);\r\n\r\n                                    // filter\r\n                                    let filterFn;\r\n                                    try {\r\n                                       filterFn = filterElem.getFilterFunction();\r\n                                    } catch (error) {\r\n                                       // continue regardless of error\r\n                                    }\r\n                                    if (filterFn) tempDc.filter(filterFn);\r\n\r\n                                    // sorting\r\n                                    (config.sort || []).forEach((sort) => {\r\n                                       if (sort.id)\r\n                                          tempDc.sort({\r\n                                             as: \"string\",\r\n                                             dir: sort.mod || \"asc\",\r\n                                             by: `#${sort.id}#`,\r\n                                          });\r\n                                    });\r\n\r\n                                    result = tempDc.serialize();\r\n\r\n                                    // clear\r\n                                    filterElem.destructor();\r\n                                    tempDc.destructor();\r\n\r\n                                    // group by\r\n                                    if (config.group && config.group.length) {\r\n                                       (config.group || []).forEach(\r\n                                          (groupProp) => {\r\n                                             result = _(result).groupBy(\r\n                                                groupProp\r\n                                             );\r\n                                          }\r\n                                       );\r\n\r\n                                       result = result\r\n                                          .map((groupedData, id) => {\r\n                                             let groupedResult = {};\r\n\r\n                                             (config.columns || []).forEach(\r\n                                                (col) => {\r\n                                                   let agg = col.split(\".\")[0];\r\n                                                   let rawCol = col.replace(\r\n                                                      /sum.|avg.|count.|max.|min./g,\r\n                                                      \"\"\r\n                                                   );\r\n\r\n                                                   switch (agg) {\r\n                                                      case \"sum\":\r\n                                                         groupedResult[\r\n                                                            col\r\n                                                         ] = compInstance.AB.sumBy(\r\n                                                            groupedData,\r\n                                                            rawCol\r\n                                                         );\r\n                                                         break;\r\n                                                      case \"avg\":\r\n                                                         groupedResult[\r\n                                                            col\r\n                                                         ] = compInstance.AB.meanBy(\r\n                                                            groupedData,\r\n                                                            rawCol\r\n                                                         );\r\n                                                         break;\r\n                                                      case \"count\":\r\n                                                         groupedResult[col] = (\r\n                                                            groupedData || []\r\n                                                         ).length;\r\n                                                         break;\r\n                                                      case \"max\":\r\n                                                         groupedResult[col] =\r\n                                                            (compInstance.AB.maxBy(\r\n                                                               groupedData,\r\n                                                               rawCol\r\n                                                            ) || {})[rawCol] ||\r\n                                                            \"\";\r\n                                                         break;\r\n                                                      case \"min\":\r\n                                                         groupedResult[col] =\r\n                                                            (compInstance.AB.minBy(\r\n                                                               groupedData,\r\n                                                               rawCol\r\n                                                            ) || {})[rawCol] ||\r\n                                                            \"\";\r\n                                                         break;\r\n                                                      default:\r\n                                                         groupedResult[col] =\r\n                                                            groupedData[0][col];\r\n                                                         break;\r\n                                                   }\r\n                                                }\r\n                                             );\r\n\r\n                                             return groupedResult;\r\n                                          })\r\n                                          .value();\r\n                                    }\r\n\r\n                                    next();\r\n                                 })\r\n                           )\r\n                           .then(() => Promise.resolve(result))\r\n                     );\r\n                  }\r\n                  getOptions(fields) {\r\n                     // TODO\r\n                     // [\r\n                     //    {\"id\":\"1\",\"value\":\"South\"},\r\n                     //    {\"id\":\"2\",\"value\":\"North\"},\r\n                     //    // other options\r\n                     //  ]\r\n                     return Promise.resolve([]);\r\n                  }\r\n                  getFieldData(fieldId) {\r\n                     // TODO\r\n                     return Promise.resolve([]);\r\n                  }\r\n               },\r\n            ],\r\n            [\r\n               reports.views.table,\r\n               class MyTable extends reports.views.table {\r\n                  // NOTE: fix format of date column type\r\n                  GetColumnConfig(a) {\r\n                     if (a.type === \"date\") {\r\n                        return {\r\n                           id: a.id,\r\n                           header:\r\n                              !a.meta.header || a.meta.header === \"none\"\r\n                                 ? a.meta.name || a.name\r\n                                 : [\r\n                                      a.meta.name || a.name,\r\n                                      {\r\n                                         content:\r\n                                            a.header === \"text\"\r\n                                               ? \"textFilter\"\r\n                                               : \"richSelectFilter\",\r\n                                      },\r\n                                   ],\r\n                           type: a.type,\r\n                           sort: \"date\",\r\n                           width: a.width || 200,\r\n                           format: (val) => {\r\n                              // check valid date\r\n                              if (val && val.getTime && !isNaN(val.getTime())) {\r\n                                 return webix.i18n.dateFormatStr(val);\r\n                              } else {\r\n                                 return \"\";\r\n                              }\r\n                           },\r\n                        };\r\n                     } else {\r\n                        return super.GetColumnConfig(a);\r\n                     }\r\n                  }\r\n               },\r\n            ],\r\n         ]),\r\n      };\r\n\r\n      // make sure each of our child views get .init() called\r\n      let _init = (options) => {\r\n         options = options || {};\r\n         options.componentId = options.componentId || ids.component;\r\n\r\n         return Promise.resolve();\r\n      };\r\n\r\n      let _logic = {\r\n         getReportFields: (dc) => {\r\n            if (!dc) return [];\r\n\r\n            let object = dc.datasource;\r\n            if (!object) return [];\r\n\r\n            let fields = [];\r\n\r\n            object.fields().forEach((f) => {\r\n               let columnFormat = f.columnHeader();\r\n\r\n               fields.push({\r\n                  id: f.columnName,\r\n                  name: f.label,\r\n                  filter: f.fieldIsFilterable(),\r\n                  edit: false,\r\n                  type: columnFormat.editor || \"text\",\r\n                  format: columnFormat.format,\r\n                  options: columnFormat.options,\r\n                  ref: \"\",\r\n                  key: false,\r\n                  show: true,\r\n                  abField: f,\r\n               });\r\n\r\n               if (f.isConnection && f.settings.isSource) {\r\n                  let linkedDcs = compInstance.AB.datacollectionByID(f.settings.linkObject);\r\n                  (linkedDcs || []).forEach((linkDc) => {\r\n                     fields.push({\r\n                        id: f.id,\r\n                        name: f.label,\r\n                        filter: false,\r\n                        edit: false,\r\n                        type: \"reference\",\r\n                        ref: linkDc.id,\r\n                        key: false,\r\n                        show: false,\r\n                     });\r\n                  });\r\n               }\r\n            });\r\n\r\n            return fields;\r\n         },\r\n\r\n         getData: (datacollectionId) => {\r\n            let datacollection = compInstance.AB.datacollectionByID(\r\n               datacollectionId\r\n            );\r\n            if (!datacollection) return Promise.resolve([]);\r\n\r\n            let object = datacollection.datasource;\r\n            if (!object) return Promise.resolve([]);\r\n\r\n            return Promise.resolve()\r\n               .then(\r\n                  () =>\r\n                     new Promise((next, bad) => {\r\n                        if (\r\n                           datacollection.dataStatus ==\r\n                           datacollection.dataStatusFlag.notInitial\r\n                        ) {\r\n                           datacollection\r\n                              .loadData()\r\n                              .catch(bad)\r\n                              .then(() => next());\r\n                        } else {\r\n                           next();\r\n                        }\r\n                     })\r\n               )\r\n               .then(\r\n                  () =>\r\n                     new Promise((next, bad) => {\r\n                        let reportFields = _logic.getReportFields(\r\n                           datacollection\r\n                        );\r\n\r\n                        let reportData = [];\r\n                        let rawData = datacollection.getData();\r\n                        (rawData || []).forEach((row) => {\r\n                           let reportRow = { id: row.id };\r\n                           reportRow[`${datacollection.id}.id`] = row.id;\r\n\r\n                           object.fields().forEach((field) => {\r\n                              let columnName = field.columnName;\r\n                              let col = `${datacollection.id}.${columnName}`;\r\n\r\n                              reportRow[col] = field\r\n                                 ? field.format(row)\r\n                                 : row[columnName];\r\n\r\n                              // FK value of the connect field\r\n                              if (field && field.isConnection) {\r\n                                 if (Array.isArray(row[columnName])) {\r\n                                    reportRow[`${col}.id`] = row[\r\n                                       columnName\r\n                                    ].map(\r\n                                       (link) =>\r\n                                          link[field.datasourceLink.PK()] ||\r\n                                          link.id ||\r\n                                          link\r\n                                    );\r\n                                 } else if (row[columnName]) {\r\n                                    reportRow[`${col}.id`] =\r\n                                       row[columnName][\r\n                                          field.datasourceLink.PK()\r\n                                       ] ||\r\n                                       row[columnName].id ||\r\n                                       row[columnName];\r\n                                 }\r\n                              }\r\n\r\n                              let rField = reportFields.filter(\r\n                                 (f) => f.id == columnName\r\n                              )[0];\r\n                              if (!rField) return;\r\n\r\n                              switch (rField.type) {\r\n                                 case \"text\":\r\n                                 case \"reference\":\r\n                                    reportRow[col] = (\r\n                                       reportRow[col] || \"\"\r\n                                    ).toString();\r\n                                    break;\r\n                                 case \"number\":\r\n                                    reportRow[col] = parseFloat(\r\n                                       (reportRow[col] || 0)\r\n                                          .toString()\r\n                                          .replace(/[^\\d.-]/g, \"\")\r\n                                    );\r\n                                    break;\r\n                                 case \"date\":\r\n                                 case \"datetime\":\r\n                                    reportRow[col] = row[columnName];\r\n                                    if (reportRow[col]) {\r\n                                       if (!(reportRow[col] instanceof Date)) {\r\n                                          reportRow[\r\n                                             col\r\n                                          ] = compInstance.AB.toDate(\r\n                                             row[columnName]\r\n                                          );\r\n                                       }\r\n                                    } else {\r\n                                       reportRow[col] = \"\";\r\n                                    }\r\n                                    break;\r\n                              }\r\n                           });\r\n                           reportData.push(reportRow);\r\n                        });\r\n\r\n                        return next(reportData);\r\n                     })\r\n               );\r\n         },\r\n      };\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: _init,\r\n         logic: _logic,\r\n\r\n         onShow: baseCom.onShow,\r\n      };\r\n   }\r\n};\r\n","const ABViewTabCore = require(\"../../core/views/ABViewTabCore\");\r\n\r\nconst ABViewTabPropertyComponentDefaults = ABViewTabCore.defaultValues();\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABViewTab extends ABViewTabCore {\r\n   // constructor(values, application, parent, defaultValues) {\r\n   //    super(values, application, parent, defaultValues);\r\n   // }\r\n\r\n   //\r\n   //\tEditor Related\r\n   //\r\n\r\n   /**\r\n    * @method editorComponent\r\n    * return the Editor for this UI component.\r\n    * the editor should display either a \"block\" view or \"preview\" of\r\n    * the current layout of the view.\r\n    * @param {string} mode what mode are we in ['block', 'preview']\r\n    * @return {Component}\r\n    */\r\n   editorComponent(App, mode) {\r\n      var idBase = \"ABViewTabEditorComponent\";\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n         view: App.unique(`${idBase}_view`),\r\n      };\r\n      var component = this.component(App);\r\n\r\n      var tabElem = component.ui;\r\n\r\n      if (tabElem.rows) {\r\n         tabElem.rows[0].id = ids.component;\r\n         tabElem.rows[0].tabbar = {\r\n            height: 60,\r\n            type: \"bottom\",\r\n            css: this.settings.darkTheme ? \"webix_dark\" : \"\",\r\n            on: {\r\n               onItemClick: (id, e) => {\r\n                  var tabId = $$(ids.component).getValue(),\r\n                     tab = this.views((v) => v.id == tabId)[0],\r\n                     currIndex = this._views.findIndex((v) => v.id == tabId);\r\n\r\n                  // Rename\r\n                  if (e.target.classList.contains(\"rename\")) {\r\n                     ABViewTab.popupShow(tab);\r\n                  }\r\n                  // Reorder back\r\n                  else if (e.target.classList.contains(\"move-back\")) {\r\n                     this.viewReorder(tabId, currIndex - 1);\r\n\r\n                     // refresh editor view\r\n                     this.emit(\"properties.updated\", this);\r\n                  }\r\n                  // Reorder next\r\n                  else if (e.target.classList.contains(\"move-next\")) {\r\n                     this.viewReorder(tabId, currIndex + 1);\r\n\r\n                     // refresh editor view\r\n                     this.emit(\"properties.updated\", this);\r\n                  }\r\n               },\r\n            },\r\n         };\r\n\r\n         // Add action buttons\r\n         if (tabElem.rows[0].cells && tabElem.rows[0].cells.length > 0) {\r\n            tabElem.rows[0].cells.forEach((tabView) => {\r\n               // Add 'move back' icon\r\n               tabView.header =\r\n                  '<i class=\"fa fa-caret-left move-back ab-tab-back\"></i>' +\r\n                  tabView.header;\r\n               // Add 'edit' icon\r\n               tabView.header +=\r\n                  ' <i class=\"fa fa-pencil-square rename ab-tab-edit\"></i>';\r\n               // Add 'move next' icon\r\n               tabView.header +=\r\n                  ' <i class=\"fa fa-caret-right move-next ab-tab-next\"></i>';\r\n            });\r\n         }\r\n      } else if (tabElem.cols) {\r\n         // if we detect colums we are using sidebar and need to format the onItemClick event differently\r\n         var viewIndex = 1;\r\n         var tabIndex = 0;\r\n\r\n         if (this.settings.sidebarPos == \"right\") {\r\n            // the sidebar is in the second column now so we need to reference it properly\r\n            viewIndex = 0;\r\n            tabIndex = 1;\r\n         }\r\n\r\n         tabElem.cols[viewIndex].id = ids.component;\r\n         tabElem.cols[tabIndex].on = {\r\n            onItemClick: (id, e) => {\r\n               var tabId = id.replace(\"_menu\", \"\"),\r\n                  tab = this.views((v) => v.id == tabId)[0],\r\n                  currIndex = this._views.findIndex((v) => v.id == tabId);\r\n\r\n               component.onShow(tabId);\r\n\r\n               // Rename\r\n               if (e.target.classList.contains(\"rename\")) {\r\n                  ABViewTab.popupShow(tab);\r\n               }\r\n               // Reorder back\r\n               else if (e.target.classList.contains(\"move-back\")) {\r\n                  this.viewReorder(tabId, currIndex - 1);\r\n\r\n                  // refresh editor view\r\n                  this.emit(\"properties.updated\", this);\r\n               }\r\n               // Reorder next\r\n               else if (e.target.classList.contains(\"move-next\")) {\r\n                  this.viewReorder(tabId, currIndex + 1);\r\n\r\n                  // refresh editor view\r\n                  this.emit(\"properties.updated\", this);\r\n               }\r\n            },\r\n         };\r\n\r\n         // Add action buttons\r\n         if (\r\n            tabElem.cols[tabIndex].data &&\r\n            tabElem.cols[tabIndex].data.length > 0\r\n         ) {\r\n            tabElem.cols[tabIndex].data.forEach((sidebarItem) => {\r\n               // Add 'edit' icon\r\n               sidebarItem.value =\r\n                  sidebarItem.value +\r\n                  ' <i class=\"fa fa-pencil-square rename ab-tab-edit\"></i>';\r\n               // Add 'move up' icon\r\n               sidebarItem.value +=\r\n                  '<i class=\"fa fa-caret-up move-back ab-tab-up\"></i>';\r\n               // Add 'move down' icon\r\n               sidebarItem.value +=\r\n                  ' <i class=\"fa fa-caret-down move-next ab-tab-down\"></i>';\r\n            });\r\n         }\r\n      }\r\n\r\n      var _ui = {\r\n         rows: [tabElem],\r\n      };\r\n\r\n      var _init = (options) => {\r\n         component.init(options);\r\n\r\n         // Add actions buttons - Edit , Delete\r\n         if ($$(ids.component) && $$(ids.component).config.view == \"tabview\") {\r\n            webix.ui({\r\n               container: $$(ids.component).getMultiview().$view,\r\n               view: \"template\",\r\n               autoheight: false,\r\n               height: 1,\r\n               width: 0,\r\n               template:\r\n                  '<div class=\"ab-component-tools ab-layout-view ab-tab-tools\">' +\r\n                  '<i class=\"fa fa-trash ab-component-remove\"></i>' +\r\n                  '<i class=\"fa fa-edit ab-component-edit\"></i>' +\r\n                  \"</div>\",\r\n               onClick: {\r\n                  \"ab-component-edit\": function (e, id, trg) {\r\n                     _logic.tabEdit(e, id, trg);\r\n                  },\r\n                  \"ab-component-remove\": function (e, id, trg) {\r\n                     _logic.tabRemove(e, id, trg);\r\n                  },\r\n               },\r\n            });\r\n         } else if (\r\n            $$(ids.component) &&\r\n            $$(ids.component).config.view == \"multiview\"\r\n         ) {\r\n            webix.ui({\r\n               container: $$(ids.component).$view,\r\n               view: \"template\",\r\n               autoheight: false,\r\n               height: 1,\r\n               width: 0,\r\n               template:\r\n                  '<div class=\"ab-component-tools ab-layout-view ab-tab-tools\">' +\r\n                  '<i class=\"fa fa-trash ab-component-remove\"></i>' +\r\n                  '<i class=\"fa fa-edit ab-component-edit\"></i>' +\r\n                  \"</div>\",\r\n               onClick: {\r\n                  \"ab-component-edit\": function (e, id, trg) {\r\n                     _logic.tabEdit(e, id, trg);\r\n                  },\r\n                  \"ab-component-remove\": function (e, id, trg) {\r\n                     _logic.tabRemove(e, id, trg);\r\n                  },\r\n               },\r\n            });\r\n         }\r\n\r\n         component.onShow();\r\n      };\r\n\r\n      var _logic = {\r\n         // templateBlock: (tab) => {\r\n         // \tvar _template = [\r\n         // \t\t'<div class=\"ab-component-in-page\">',\r\n         // \t\t'<div id=\"' + ids.view + '_#objID#\" >',\r\n         // \t\t'<i class=\"fa fa-#icon#\"></i>',\r\n         // \t\t' #label#',\r\n         // \t\t'</div>',\r\n         // \t\t'</div>'\r\n         // \t].join('');\r\n\r\n         // \treturn _template\r\n         // \t\t.replace('#objID#', tab.id)\r\n         // \t\t.replace('#icon#', tab.icon)\r\n         // \t\t.replace('#label#', tab.label);\r\n         // },\r\n\r\n         tabEdit: (e, nodeId, trg) => {\r\n            var tabId = $$(ids.component).getValue();\r\n            var view = this.views(function (v) {\r\n               return v.id == tabId;\r\n            })[0];\r\n\r\n            if (!view) return false;\r\n\r\n            // NOTE: let webix finish this onClick event, before\r\n            // calling .populateInterfaceWorkspace() which will replace\r\n            // the interface elements with the edited view.  (apparently\r\n            // that causes errors.)\r\n            setTimeout(() => {\r\n               console.error(\"ABViewTab: refactor .actions to .emit\");\r\n               App.actions.populateInterfaceWorkspace(view);\r\n            }, 50);\r\n\r\n            e.preventDefault();\r\n            return false;\r\n         },\r\n\r\n         tabRemove: (e, nodeId, trg) => {\r\n            var tabId = $$(ids.component).getValue();\r\n            var deletedView = this.views((v) => v.id == tabId)[0];\r\n            if (deletedView) {\r\n               webix.confirm({\r\n                  title: L(\"Delete tab\"),\r\n                  text: L(\"Do you want to delete <b>{0}</b>?\", [\r\n                     deletedView.label,\r\n                  ]),\r\n                  callback: (result) => {\r\n                     if (result) {\r\n                        // this.viewDestroy(deletedView);\r\n                        deletedView.destroy();\r\n\r\n                        // remove tab option\r\n                        $$(ids.component).removeView(tabId);\r\n                     }\r\n                  },\r\n               });\r\n            }\r\n\r\n            e.preventDefault();\r\n            return false;\r\n         },\r\n      };\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: _init,\r\n         logic: _logic,\r\n      };\r\n   }\r\n\r\n   //\r\n   // Property Editor\r\n   //\r\n\r\n   static addTab(ids, _logic, tabName, tabIcon) {\r\n      // get current instance and .addTab()\r\n      var LayoutView = _logic.currentEditObject();\r\n      return LayoutView.addTab(tabName, tabIcon);\r\n\r\n      // trigger a save()\r\n      // this.propertyEditorSave(ids, LayoutView);\r\n   }\r\n\r\n   static editTab(ids, _logic, tabId, tabName, tabIcon) {\r\n      // get current instance and rename tab\r\n      var LayoutView = _logic.currentEditObject();\r\n      var editedTab = LayoutView.views((v) => v.id == tabId)[0];\r\n\r\n      if (!editedTab) return;\r\n\r\n      editedTab.label = tabName;\r\n      editedTab.tabicon = tabIcon;\r\n\r\n      // trigger a save()\r\n      // this.propertyEditorSave(ids, LayoutView);\r\n      return editedTab.save();\r\n   }\r\n\r\n   static popupShow(tab) {\r\n      var popup = $$(\"ab-component-tab-add-new-tab-popup\");\r\n      var form = $$(\"ab-component-tab-add-new-tab-form\");\r\n      var button = $$(\"ab-component-tab-save-button\");\r\n\r\n      if (popup) {\r\n         // Edit tab\r\n         if (tab) {\r\n            form.setValues({\r\n               id: tab.id,\r\n               label: tab.label,\r\n               tabicon: tab.tabicon,\r\n            });\r\n\r\n            popup.getHead().setHTML(L(\"Edit Tab\"));\r\n            button.setValue(L(\"Save\"));\r\n         }\r\n         // Add new tab\r\n         else {\r\n            form.setValues({\r\n               id: null,\r\n               label: \"\",\r\n            });\r\n\r\n            popup.getHead().setHTML(L(\"Add Tab\"));\r\n            button.setValue(L(\"Add\"));\r\n         }\r\n\r\n         button.refresh();\r\n\r\n         // show 'add new field' popup\r\n         popup.show();\r\n      }\r\n   }\r\n\r\n   static popupClose() {\r\n      var popup = $$(\"ab-component-tab-add-new-tab-popup\");\r\n\r\n      if (popup) popup.hide();\r\n   }\r\n\r\n   static popupBusy() {\r\n      var button = $$(\"ab-component-tab-save-button\");\r\n\r\n      if (button) button.disable();\r\n   }\r\n\r\n   static popupReady() {\r\n      var button = $$(\"ab-component-tab-save-button\");\r\n\r\n      if (button) button.enable();\r\n   }\r\n\r\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\r\n      var commonUI = super.propertyEditorDefaultElements(\r\n         App,\r\n         ids,\r\n         _logic,\r\n         ObjectDefaults\r\n      );\r\n\r\n      // create 'add new tab' popup\r\n      webix\r\n         .ui({\r\n            id: \"ab-component-tab-add-new-tab-popup\",\r\n            view: \"window\",\r\n            height: 250,\r\n            width: 300,\r\n            modal: true,\r\n            position: \"center\",\r\n            head: \" \",\r\n            body: {\r\n               id: \"ab-component-tab-add-new-tab-form\",\r\n               view: \"form\",\r\n               elements: [\r\n                  {\r\n                     view: \"text\",\r\n                     name: \"label\",\r\n                     id: \"ab-component-tab-name\",\r\n                     label: L(\"Label\"),\r\n                     required: true,\r\n                  },\r\n                  {\r\n                     view: \"combo\",\r\n                     id: \"ab-component-tab-icon\",\r\n                     name: \"tabicon\",\r\n                     label: L(\"Icon\"),\r\n                     options: {\r\n                        filter: function (item, value) {\r\n                           if (\r\n                              item.value\r\n                                 .toString()\r\n                                 .toLowerCase()\r\n                                 .indexOf(value.toLowerCase()) === 0\r\n                           )\r\n                              return true;\r\n                           return false;\r\n                        },\r\n                        body: {\r\n                           data: App.icons,\r\n                           template:\r\n                              \"<i class='fa fa-fw fa-#value#'></i> #value#\",\r\n                        },\r\n                     },\r\n                  },\r\n                  // action buttons\r\n                  {\r\n                     cols: [\r\n                        { fillspace: true },\r\n                        {\r\n                           view: \"button\",\r\n                           value: L(\"Cancel\"),\r\n                           css: \"ab-cancel-button\",\r\n                           autowidth: true,\r\n                           click: () => {\r\n                              this.popupClose();\r\n                           },\r\n                        },\r\n                        {\r\n                           id: \"ab-component-tab-save-button\",\r\n                           view: \"button\",\r\n                           css: \"webix_primary\",\r\n                           value: L(\"Add Tab\"),\r\n                           autowidth: true,\r\n                           type: \"form\",\r\n                           click: () => {\r\n                              let form = $$(\r\n                                 \"ab-component-tab-add-new-tab-form\"\r\n                              );\r\n                              if (form.validate()) {\r\n                                 this.popupBusy();\r\n\r\n                                 let vals = form.getValues();\r\n\r\n                                 let doneFn = () => {\r\n                                    this.popupReady();\r\n\r\n                                    this.popupClose();\r\n\r\n                                    // Refresh UI\r\n                                    let currView = _logic.currentEditObject();\r\n                                    currView.emit(\r\n                                       \"properties.updated\",\r\n                                       currView\r\n                                    );\r\n                                 };\r\n\r\n                                 // add\r\n                                 if (vals.id == null) {\r\n                                    this.addTab(\r\n                                       ids,\r\n                                       _logic,\r\n                                       vals.label,\r\n                                       vals.tabicon\r\n                                    ).then(() => doneFn());\r\n                                 }\r\n                                 // edit\r\n                                 else {\r\n                                    this.editTab(\r\n                                       ids,\r\n                                       _logic,\r\n                                       vals.id,\r\n                                       vals.label,\r\n                                       vals.tabicon\r\n                                    ).then(() => doneFn());\r\n                                 }\r\n                              }\r\n                           },\r\n                        },\r\n                     ],\r\n                  },\r\n               ],\r\n            },\r\n         })\r\n         .hide();\r\n\r\n      // in addition to the common .label  values, we\r\n      // ask for:\r\n      return commonUI.concat([\r\n         {\r\n            view: \"counter\",\r\n            name: \"height\",\r\n            label: L(\"Height\"),\r\n         },\r\n         {\r\n            view: \"counter\",\r\n            name: \"minWidth\",\r\n            label: L(\"Minimum width\"),\r\n         },\r\n         {\r\n            view: \"checkbox\",\r\n            name: \"stackTabs\",\r\n            labelRight: L(\"Stack Tabs Vertically\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthCheckbox,\r\n            on: {\r\n               onChange: (newv, oldv) => {\r\n                  if (newv == 1) {\r\n                     $$(ids.sidebarWidth).show();\r\n                     $$(ids.sidebarPos).show();\r\n                     $$(ids.iconOnTop).hide();\r\n                  } else {\r\n                     $$(ids.sidebarWidth).hide();\r\n                     $$(ids.sidebarPos).hide();\r\n                     $$(ids.iconOnTop).show();\r\n                  }\r\n               },\r\n            },\r\n         },\r\n         {\r\n            view: \"checkbox\",\r\n            name: \"iconOnTop\",\r\n            labelRight: L(\"Position icon above text\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthCheckbox,\r\n         },\r\n         {\r\n            view: \"checkbox\",\r\n            name: \"darkTheme\",\r\n            labelRight: L(\"Use Dark Theme\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthCheckbox,\r\n         },\r\n         {\r\n            view: \"counter\",\r\n            name: \"sidebarWidth\",\r\n            label: L(\"Width of Sidebar\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthXLarge,\r\n         },\r\n         {\r\n            view: \"richselect\",\r\n            name: \"sidebarPos\",\r\n            label: L(\"Position of Sidebar\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthXLarge,\r\n            options: [\r\n               { id: \"left\", value: L(\"Left\") },\r\n               { id: \"right\", value: L(\"Right\") },\r\n            ],\r\n         },\r\n         // [button] : add tab\r\n         {\r\n            view: \"button\",\r\n            css: \"webix_primary\",\r\n            value: L(\"Add Tab\"),\r\n            click: () => {\r\n               this.popupShow();\r\n            },\r\n         },\r\n      ]);\r\n   }\r\n\r\n   static propertyEditorPopulate(App, ids, view) {\r\n      super.propertyEditorPopulate(App, ids, view);\r\n\r\n      $$(ids.height).setValue(\r\n         view.settings.height || ABViewTabPropertyComponentDefaults.height\r\n      );\r\n      $$(ids.minWidth).setValue(\r\n         view.settings.minWidth || ABViewTabPropertyComponentDefaults.minWidth\r\n      );\r\n      $$(ids.stackTabs).setValue(\r\n         view.settings.stackTabs || ABViewTabPropertyComponentDefaults.stackTabs\r\n      );\r\n      $$(ids.darkTheme).setValue(\r\n         view.settings.darkTheme || ABViewTabPropertyComponentDefaults.darkTheme\r\n      );\r\n      $$(ids.sidebarWidth).setValue(\r\n         view.settings.sidebarWidth ||\r\n            ABViewTabPropertyComponentDefaults.sidebarWidth\r\n      );\r\n      $$(ids.sidebarPos).setValue(\r\n         view.settings.sidebarPos ||\r\n            ABViewTabPropertyComponentDefaults.sidebarPos\r\n      );\r\n      $$(ids.iconOnTop).setValue(\r\n         view.settings.iconOnTop || ABViewTabPropertyComponentDefaults.iconOnTop\r\n      );\r\n\r\n      if (view.settings.stackTabs) {\r\n         $$(ids.sidebarWidth).show();\r\n         $$(ids.sidebarPos).show();\r\n         $$(ids.iconOnTop).hide();\r\n      } else {\r\n         $$(ids.sidebarWidth).hide();\r\n         $$(ids.sidebarPos).hide();\r\n         $$(ids.iconOnTop).show();\r\n      }\r\n   }\r\n\r\n   static propertyEditorValues(ids, view) {\r\n      super.propertyEditorValues(ids, view);\r\n\r\n      view.settings.height = $$(ids.height).getValue();\r\n      view.settings.minWidth = $$(ids.minWidth).getValue();\r\n      view.settings.stackTabs = $$(ids.stackTabs).getValue();\r\n      view.settings.darkTheme = $$(ids.darkTheme).getValue();\r\n      view.settings.sidebarWidth = $$(ids.sidebarWidth).getValue();\r\n      view.settings.sidebarPos = $$(ids.sidebarPos).getValue();\r\n      view.settings.iconOnTop = $$(ids.iconOnTop).getValue();\r\n   }\r\n\r\n   /**\r\n    * @method component()\r\n    * return a UI component based upon this view.\r\n    * @param {obj} App\r\n    * @return {obj} UI component\r\n    */\r\n   component(App) {\r\n      var AB = this.AB;\r\n\r\n      var comp = super.component(App);\r\n      // get a UI component for each of our child views\r\n      this._viewComponents = [];\r\n      this.views().forEach((v) => {\r\n         var accessLevel = v.getUserAccess();\r\n         if (accessLevel > 0) {\r\n            this._viewComponents.push({\r\n               view: v,\r\n               // component: v.component(App)\r\n            });\r\n         }\r\n      });\r\n\r\n      var idBase = \"ABViewTab_\" + this.id;\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n         sidebar: App.unique(`${idBase}_sidebar`),\r\n         expandMenu: App.unique(`${idBase}_expand_menu`),\r\n         collapseMenu: App.unique(`${idBase}_collapse_menu`),\r\n      };\r\n\r\n      var _ui = {};\r\n\r\n      // We are going to make a custom icon using the first letter of a menu item for menu items that don't have an icon\r\n      // to do this we need to modify the default template with the method webix recommended form this snippet https://snippet.webix.com/b566d9f8\r\n      webix.type(webix.ui.tree, {\r\n         baseType: \"sideBar\", // inherit everything else from sidebar type\r\n         name: \"customIcons\",\r\n         icon: function (obj, common) {\r\n            if (obj.icon.length)\r\n               return (\r\n                  \"<span class='webix_icon webix_sidebar_icon fa fa-fw fa-\" +\r\n                  obj.icon +\r\n                  \"'></span>\"\r\n               );\r\n            return (\r\n               \"<span class='webix_icon webix_sidebar_icon sidebarCustomIcon'>\" +\r\n               obj.value.charAt(0).toUpperCase() +\r\n               \"</span>\"\r\n            );\r\n         },\r\n      });\r\n\r\n      if (this._viewComponents.length > 0) {\r\n         if (this.settings.stackTabs) {\r\n            // define your menu items from the view components\r\n            var menuItems = this.views((view) => {\r\n               var accessLevel = view.getUserAccess();\r\n               if (accessLevel > 0) {\r\n                  return view;\r\n               }\r\n            }).map((v) => {\r\n               return {\r\n                  id: v.id + \"_menu\",\r\n                  value: v.label,\r\n                  icon: v.tabicon ? v.tabicon : \"\",\r\n               };\r\n            });\r\n\r\n            if (menuItems.length) {\r\n               // create a menu item for the collapse option to use later\r\n               var collapseMenu = {\r\n                  id: ids.collapseMenu,\r\n                  value: L(\"Collapse Menu\"),\r\n                  icon: \"chevron-circle-left\",\r\n               };\r\n\r\n               // create a menu item from the expand option to use later\r\n               var expandMenu = {\r\n                  id: ids.expandMenu,\r\n                  value: L(\"Expand Menu\"),\r\n                  icon: \"chevron-circle-right\",\r\n                  hidden: true,\r\n               };\r\n\r\n               // find out what the first option is so we can set it later\r\n               var selectedItem = this._viewComponents[0].view.id + \"_menu\";\r\n\r\n               var sidebar = {\r\n                  view: \"sidebar\",\r\n                  type: \"customIcons\", // define the sidebar type with the new template created above\r\n                  id: ids.sidebar,\r\n                  width: this.settings.sidebarWidth\r\n                     ? this.settings.sidebarWidth\r\n                     : 0,\r\n                  scroll: true,\r\n                  position: this.settings.sidebarPos\r\n                     ? this.settings.sidebarPos\r\n                     : \"left\",\r\n                  css: this.settings.darkTheme ? \"webix_dark\" : \"\",\r\n                  data: menuItems.concat(collapseMenu), // add you menu items along with the collapse option to start\r\n                  on: {\r\n                     onItemClick: function (id, e, node) {\r\n                        // when a menu item is clicked\r\n                        if (id == ids.collapseMenu) {\r\n                           // if it was the collapse menu item\r\n                           setTimeout(function () {\r\n                              // remove the collapse option from the menu\r\n                              $$(ids.sidebar).remove(ids.collapseMenu);\r\n                              // add the expand option to the menu\r\n                              $$(ids.sidebar).add(expandMenu);\r\n                              // toggle the sidebar state\r\n                              $$(ids.sidebar).toggle();\r\n                              // we just clicked the collapse...but we don't wanted highlighted\r\n                              // so highlight the previously selected menu item\r\n                              $$(ids.sidebar).select(selectedItem);\r\n                              // store this state in local storage the user preference is\r\n                              // remembered next time they see this sidebar\r\n                              this.AB.Storage.set(\r\n                                 `${idBase}-state`,\r\n                                 $$(ids.sidebar).getState()\r\n                              );\r\n                           }, 0);\r\n                        } else if (id == ids.expandMenu) {\r\n                           setTimeout(function () {\r\n                              // remove the expand option from the menu\r\n                              $$(ids.sidebar).remove(ids.expandMenu);\r\n                              // add the collapse option to the menu\r\n                              $$(ids.sidebar).add(collapseMenu);\r\n                              // toggle the sidebar state\r\n                              $$(ids.sidebar).toggle();\r\n                              // we just clicked the collapse...but we don't wanted highlighted\r\n                              // so highlight the previously selected menu item\r\n                              $$(ids.sidebar).select(selectedItem);\r\n                              // store this state in local storage the user preference is\r\n                              // remembered next time they see this sidebar\r\n                              this.AB.Storage.set(\r\n                                 `${idBase}-state`,\r\n                                 $$(ids.sidebar).getState()\r\n                              );\r\n                           }, 0);\r\n                        } else {\r\n                           // store the selecte menu item just in case someone toggles the menu later\r\n                           selectedItem = id;\r\n                           // if the menu item is a regular menu item\r\n                           // call the onShow with the view id to load the view\r\n                           id = id.replace(\"_menu\", \"\");\r\n                           $$(id).show(false, false);\r\n                           // _onShow(id);\r\n                        }\r\n                     },\r\n                     onAfterRender: () => {\r\n                        // set ids of controller buttons\r\n                        let collapseNode = $$(ids.sidebar).$view.querySelector(\r\n                           `[webix_tm_id=\"${ids.collapseMenu}\"]`\r\n                        );\r\n                        if (collapseNode) {\r\n                           collapseNode.setAttribute(\r\n                              \"data-cy\",\r\n                              `tab-collapseMenu-${ids.collapseMenu}`\r\n                           );\r\n                        }\r\n                        let expandNode = $$(ids.sidebar).$view.querySelector(\r\n                           `[webix_tm_id=\"${ids.expandMenu}\"]`\r\n                        );\r\n                        if (expandNode) {\r\n                           expandNode.setAttribute(\r\n                              \"data-cy\",\r\n                              `tab-expandMenu-${ids.expandMenu}`\r\n                           );\r\n                        }\r\n                        this.views((view) => {\r\n                           var node = $$(ids.sidebar).$view.querySelector(\r\n                              `[webix_tm_id=\"${view.id}_menu\"]`\r\n                           );\r\n                           if (!node) return;\r\n                           node.setAttribute(\r\n                              \"data-cy\",\r\n                              `tab-${view.label.replace(\" \", \"\")}-${view.id}-${\r\n                                 this.id\r\n                              }`\r\n                           );\r\n                        });\r\n                     },\r\n                  },\r\n               };\r\n\r\n               var multiview = {\r\n                  view: \"multiview\",\r\n                  id: ids.component,\r\n                  keepViews: true,\r\n                  minWidth: this.settings.minWidth,\r\n                  height: this.settings.height,\r\n                  cells: this._viewComponents.map((v) => {\r\n                     var tabUi = {\r\n                        id: v.view.id,\r\n                        // ui will be loaded when its tab is opened\r\n                        view: \"layout\",\r\n                        rows: [],\r\n                     };\r\n\r\n                     return tabUi;\r\n                  }),\r\n                  on: {\r\n                     onViewChange: function (prevId, nextId) {\r\n                        _onShow(nextId);\r\n                     },\r\n                  },\r\n               };\r\n\r\n               var columns = [sidebar, multiview];\r\n               if (this.settings.sidebarPos == \"right\") {\r\n                  columns = [multiview, sidebar];\r\n               }\r\n\r\n               _ui = {\r\n                  cols: columns,\r\n               };\r\n            } else {\r\n               _ui = {\r\n                  view: \"spacer\",\r\n               };\r\n            }\r\n         } else {\r\n            var cells = this.views((view) => {\r\n               var accessLevel = view.getUserAccess();\r\n               if (accessLevel > 0) {\r\n                  return view;\r\n               }\r\n            }).map((v) => {\r\n               var tabUi = {\r\n                  id: v.id,\r\n                  // ui will be loaded when its tab is opened\r\n                  view: \"layout\",\r\n                  rows: [],\r\n               };\r\n\r\n               var tabTemplate = \"\";\r\n               // tab icon\r\n               if (v.tabicon) {\r\n                  if (this.settings.iconOnTop) {\r\n                     tabTemplate =\r\n                        \"<div class='ab-tabIconContainer'><span class='fa fa-lg fa-fw fa-\" +\r\n                        v.tabicon +\r\n                        \"'></span><br/>\" +\r\n                        v.label +\r\n                        \"</div>\";\r\n                  } else {\r\n                     tabTemplate =\r\n                        \"<span class='fa fa-lg fa-fw fa-\" +\r\n                        v.tabicon +\r\n                        \"'></span> \" +\r\n                        v.label;\r\n                  }\r\n               }\r\n               // no icon\r\n               else {\r\n                  tabTemplate = v.label;\r\n               }\r\n\r\n               return {\r\n                  header: tabTemplate,\r\n                  body: tabUi,\r\n               };\r\n            });\r\n\r\n            // if there are cells to display then return a tabview\r\n            if (cells.length) {\r\n               _ui = {\r\n                  rows: [\r\n                     {\r\n                        view: \"tabview\",\r\n                        id: ids.component,\r\n                        minWidth: this.settings.minWidth,\r\n                        tabbar: {\r\n                           height: 60,\r\n                           type: \"bottom\",\r\n                           css: this.settings.darkTheme ? \"webix_dark\" : \"\",\r\n                           on: {\r\n                              onAfterRender: () => {\r\n                                 this.views((view) => {\r\n                                    var node = $$(\r\n                                       ids.component\r\n                                    ).$view.querySelector(\r\n                                       '[button_id=\"' + view.id + '\"]'\r\n                                    );\r\n                                    if (!node) return;\r\n                                    node.setAttribute(\r\n                                       \"data-cy\",\r\n                                       \"tab \" +\r\n                                          view.name +\r\n                                          \" \" +\r\n                                          view.id +\r\n                                          \" \" +\r\n                                          this.id\r\n                                    );\r\n                                 });\r\n                              },\r\n                           },\r\n                        },\r\n                        multiview: {\r\n                           height: this.settings.height,\r\n                           on: {\r\n                              onViewChange: function (prevId, nextId) {\r\n                                 _onShow(nextId);\r\n                              },\r\n                           },\r\n                        },\r\n                        cells: cells,\r\n                     },\r\n                  ],\r\n               };\r\n            } else {\r\n               // else we return a spacer\r\n               _ui = {\r\n                  view: \"spacer\",\r\n               };\r\n            }\r\n         }\r\n      } else {\r\n         _ui = {\r\n            view: \"spacer\",\r\n         };\r\n      }\r\n\r\n      var _logic = {\r\n         changePage: (pageId) => {\r\n            $$(ids.component).blockEvent();\r\n            this.changePage(pageId);\r\n            $$(ids.component).unblockEvent();\r\n         },\r\n\r\n         changeTab: (tabViewId) => {\r\n            // switch tab view\r\n            _logic.toggleParent(this.parent);\r\n            if (this.settings.stackTabs) {\r\n               if (!$$(tabViewId).isVisible()) {\r\n                  var showIt = setInterval(function () {\r\n                     if ($$(tabViewId).isVisible()) {\r\n                        clearInterval(showIt);\r\n                     }\r\n                     $$(tabViewId).show(false, false);\r\n                  }, 200);\r\n               }\r\n            } else {\r\n               $$(ids.component).setValue(tabViewId);\r\n            }\r\n         },\r\n\r\n         toggleParent: (view) => {\r\n            if (\r\n               (view.key == \"tab\" || view.key == \"viewcontainer\") &&\r\n               $$(view.id) &&\r\n               $$(view.id).show\r\n            ) {\r\n               $$(view.id).show(false, false);\r\n            }\r\n            if (view.parent) {\r\n               _logic.toggleParent(view.parent);\r\n            }\r\n         },\r\n      };\r\n\r\n      // make sure each of our child views get .init() called\r\n      var _init = (options) => {\r\n         var parent = this;\r\n\r\n         if ($$(ids.component))\r\n            webix.extend($$(ids.component), webix.ProgressBar);\r\n\r\n         this._viewComponents.forEach((v) => {\r\n            // v.component.init(options);\r\n\r\n            // Trigger 'changePage' event to parent\r\n            this.eventAdd({\r\n               emitter: v.view,\r\n               eventName: \"changePage\",\r\n               listener: (...p) => _logic.changePage(...p),\r\n            });\r\n         });\r\n\r\n         // Trigger 'changeTab' event to parent\r\n         this.eventAdd({\r\n            emitter: this,\r\n            eventName: \"changeTab\",\r\n            listener: (...p) => _logic.changeTab(...p),\r\n         });\r\n\r\n         // initialize the sidebar and figure out if it should be collased or not\r\n         this.AB.Storage.get(`${idBase}-state`).then((state) => {\r\n            if (state) {\r\n               // this will collapse or expand the sidebar\r\n               $$(ids.sidebar).setState(state);\r\n\r\n               // if the state is collapsed we need to make sure the expand option is available\r\n               if (state.collapsed) {\r\n                  setTimeout(function () {\r\n                     $$(ids.sidebar).remove(ids.collapseMenu);\r\n                     $$(ids.sidebar).add(expandMenu);\r\n                  }, 0);\r\n               }\r\n            }\r\n         });\r\n      };\r\n\r\n      var _onShow = (viewId) => {\r\n         var parent = this;\r\n\r\n         var defaultViewIsSet = false;\r\n         // if no viewId is given, then try to get the currently selected ID\r\n         if (!viewId) {\r\n            var sidebar = $$(ids.sidebar);\r\n            if (sidebar) {\r\n               viewId = sidebar.getSelectedId().replace(\"_menu\", \"\");\r\n            }\r\n         }\r\n\r\n         this._viewComponents.forEach((v, index) => {\r\n            // set default view id\r\n            var currView = this.views((view) => {\r\n               return view.id == v.view.id;\r\n            });\r\n            var accessLevel = 0;\r\n            if (currView.length) {\r\n               accessLevel = currView[0].getUserAccess();\r\n            }\r\n            // choose the 1st View if we don't have one we are looking for.\r\n            if (!viewId && !defaultViewIsSet && accessLevel > 0) {\r\n               viewId = v.view.id;\r\n               defaultViewIsSet = true;\r\n            }\r\n\r\n            // create view's component once\r\n            if (v.component == null && v.view.id == viewId) {\r\n               // show loading cursor\r\n               if ($$(ids.component) && $$(ids.component).showProgress)\r\n                  $$(ids.component).showProgress({ type: \"icon\" });\r\n\r\n               v.component = v.view.component(App);\r\n\r\n               if (parent.settings.stackTabs) {\r\n                  // update multiview UI\r\n                  webix.ui(\r\n                     {\r\n                        // able to 'scroll' in tab view\r\n                        id: v.view.id,\r\n                        view: \"scrollview\",\r\n                        css: \"ab-multiview-scrollview\",\r\n                        body: v.component.ui,\r\n                     },\r\n                     $$(v.view.id)\r\n                  );\r\n               } else {\r\n                  // update tab UI\r\n                  webix.ui(\r\n                     {\r\n                        // able to 'scroll' in tab view\r\n                        id: v.view.id,\r\n                        view: \"scrollview\",\r\n                        css: \"ab-tabview-scrollview\",\r\n                        body: v.component.ui,\r\n                     },\r\n                     $$(v.view.id)\r\n                  );\r\n               }\r\n\r\n               // for tabs we need to look at the view's accessLevels\r\n               accessLevel = v.view.getUserAccess();\r\n               v.component.init(null, accessLevel);\r\n\r\n               // done\r\n               setTimeout(() => {\r\n                  // $$(v.view.id).adjust();\r\n\r\n                  if ($$(ids.component) && $$(ids.component).hideProgress)\r\n                     $$(ids.component).hideProgress();\r\n               }, 10);\r\n            }\r\n\r\n            // show UI\r\n            if (v.view.id == viewId && v.component && v.component.onShow)\r\n               v.component.onShow();\r\n\r\n            if (parent.settings.stackTabs && v.view.id == viewId) {\r\n               $$(viewId).show(false, false);\r\n               $$(ids.sidebar).select(viewId + \"_menu\");\r\n            }\r\n         });\r\n      };\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: _init,\r\n         logic: _logic,\r\n\r\n         onShow: _onShow,\r\n      };\r\n   }\r\n};\r\n","const ABViewTextCore = require(\"../../core/views/ABViewTextCore\");\r\n\r\nconst ABViewTextPropertyComponentDefaults = ABViewTextCore.defaultValues();\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABViewText extends ABViewTextCore {\r\n   // constructor(values, application, parent, defaultValues) {\r\n   //    super(values, application, parent, defaultValues);\r\n   // }\r\n\r\n   //\r\n   //\tEditor Related\r\n   //\r\n\r\n   /**\r\n    * @method editorComponent\r\n    * return the Editor for this UI component.\r\n    * the editor should display either a \"block\" view or \"preview\" of\r\n    * the current layout of the view.\r\n    * @param {string} mode what mode are we in ['block', 'preview']\r\n    * @return {Component}\r\n    */\r\n   editorComponent(App, mode) {\r\n      webix.codebase = \"/js/webix/extras/\";\r\n\r\n      var idBase = \"ABViewTextEditorComponent\";\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n      };\r\n\r\n      var _ui = {\r\n         id: ids.component,\r\n         view: \"tinymce-editor\",\r\n         value: this.text || ABViewTextPropertyComponentDefaults.text,\r\n         config: {\r\n            plugins: [\r\n               \"advlist autolink lists link image charmap print preview anchor\",\r\n               \"searchreplace visualblocks code fullscreen\",\r\n               \"insertdatetime media table contextmenu paste imagetools wordcount\",\r\n            ],\r\n            toolbar:\r\n               \"insertfile undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image\",\r\n            // menu: {\r\n            // \tfile: { title: 'File', items: 'newdocument' },\r\n            // \tedit: { title: 'Edit', items: 'undo redo | cut copy paste pastetext | selectall' },\r\n            // \tformat: { title: 'Format', items: 'formats | removeformat' }\r\n            // },\r\n            init_instance_callback: (editor) => {\r\n               editor.on(\"KeyUp\", (event) => {\r\n                  _logic.onChange();\r\n               });\r\n\r\n               editor.on(\"Change\", function (event) {\r\n                  _logic.onChange();\r\n               });\r\n            },\r\n         },\r\n      };\r\n\r\n      var _init = (options) => {};\r\n\r\n      var _logic = {\r\n         onChange: () => {\r\n            if (this.__onChangeFn) {\r\n               clearTimeout(this.__onChangeFn);\r\n\r\n               this.__onChangeFn = null;\r\n            }\r\n\r\n            this.__onChangeFn = setTimeout(() => {\r\n               this.text = $$(ids.component).getValue();\r\n               this.save();\r\n            }, 400);\r\n         },\r\n      };\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: _init,\r\n         logic: _logic,\r\n      };\r\n   }\r\n\r\n   //\r\n   // Property Editor\r\n   //\r\n\r\n   // static propertyEditorComponent(App) {\r\n   // \treturn ABViewPropertyComponent.component(App);\r\n   // }\r\n\r\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\r\n      var commonUI = super.propertyEditorDefaultElements(\r\n         App,\r\n         ids,\r\n         _logic,\r\n         ObjectDefaults\r\n      );\r\n\r\n      // _logic functions\r\n\r\n      _logic.selectSource = (dcId, oldDcId) => {\r\n         var currView = _logic.currentEditObject();\r\n\r\n         // Update field options in property\r\n         this.propertyUpdateFieldOptions(ids, currView, dcId);\r\n      };\r\n\r\n      _logic.selectField = (field) => {\r\n         let format = `{${field.label}}`;\r\n\r\n         // insert text to tinymce\r\n         tinymce.activeEditor.execCommand(\"mceInsertContent\", false, format);\r\n      };\r\n\r\n      // in addition to the common .label  values, we\r\n      // ask for:\r\n      return commonUI.concat([\r\n         {\r\n            view: \"counter\",\r\n            name: \"height\",\r\n            label: L(\"Height:\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n         },\r\n         {\r\n            name: \"datacollection\",\r\n            view: \"richselect\",\r\n            label: L(\"Data Source\"),\r\n            labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n            on: {\r\n               onChange: _logic.selectSource,\r\n            },\r\n         },\r\n         {\r\n            name: \"field\",\r\n            view: \"list\",\r\n            autoheight: true,\r\n            template: \"#label#\",\r\n            on: {\r\n               onItemClick: function (id, e, node) {\r\n                  var field = this.getItem(id);\r\n\r\n                  _logic.selectField(field);\r\n               },\r\n            },\r\n         },\r\n      ]);\r\n   }\r\n\r\n   /**\r\n    * @method propertyUpdateFieldOptions\r\n    * Populate fields of object to select list in property\r\n    *\r\n    * @param {Object} ids\r\n    * @param {ABViewForm} view - the current component\r\n    * @param {string} dvId - id of ABDatacollection\r\n    */\r\n   static propertyUpdateFieldOptions(ids, view, dvId) {\r\n      var datacollection = view.AB.datacollectionByID(dvId);\r\n\r\n      if (!datacollection && view.parent.key == \"dataview\") {\r\n         datacollection = view.AB.datacollectionByID(\r\n            view.parent.settings.dataviewID\r\n         );\r\n         $$(ids.datacollection).setValue(view.parent.settings.dataviewID);\r\n      }\r\n\r\n      var object = datacollection ? datacollection.datasource : null;\r\n\r\n      // Pull field list\r\n      $$(ids.field).clearAll();\r\n      if (object) $$(ids.field).parse(object.fields());\r\n      $$(ids.field).refresh();\r\n   }\r\n\r\n   static propertyEditorPopulate(App, ids, view) {\r\n      super.propertyEditorPopulate(App, ids, view);\r\n\r\n      $$(ids.height).setValue(view.settings.height);\r\n\r\n      var dataviewID = view.settings.dataviewID\r\n         ? view.settings.dataviewID\r\n         : null;\r\n      var SourceSelector = $$(ids.datacollection);\r\n\r\n      // Pull data collections to options\r\n      var dvOptions = view.propertyDatacollections();\r\n      SourceSelector.define(\"options\", dvOptions);\r\n      SourceSelector.define(\"value\", dataviewID);\r\n      SourceSelector.refresh();\r\n\r\n      this.propertyUpdateFieldOptions(ids, view, dataviewID);\r\n   }\r\n\r\n   static propertyEditorValues(ids, view) {\r\n      super.propertyEditorValues(ids, view);\r\n\r\n      view.settings.height = $$(ids.height).getValue();\r\n      view.settings.dataviewID = $$(ids.datacollection).getValue();\r\n   }\r\n\r\n   /**\r\n    * @method component()\r\n    * return a UI component based upon this view.\r\n    * @param {obj} App\r\n    * @return {obj} UI component\r\n    */\r\n   component(App, idPrefix) {\r\n      let baseCom = super.component(App);\r\n\r\n      var idBase = `ABViewText_${idPrefix ? idPrefix : \"\"}${this.id}`;\r\n      var ids = {\r\n         component: App.unique(`${idBase}_component`),\r\n      };\r\n\r\n      var _logic = {\r\n         displayText: (val) => {\r\n            var result = this.displayText(val, ids.component);\r\n\r\n            if ($$(ids.component)) {\r\n               $$(ids.component).define(\"template\", result);\r\n               $$(ids.component).refresh();\r\n            }\r\n         },\r\n      };\r\n\r\n      // an ABViewLabel is a simple Label\r\n      var _ui = {\r\n         id: ids.component,\r\n         view: \"template\",\r\n         autoheight: true,\r\n         minHeight: 10,\r\n         css: \"ab-custom-template\",\r\n         borderless: true,\r\n      };\r\n\r\n      // define height\r\n      if (this.settings.height) _ui.height = this.settings.height;\r\n      else _ui.autoheight = true;\r\n\r\n      // make sure each of our child views get .init() called\r\n      var _init = (options) => {};\r\n\r\n      var _onShow = (viewId) => {\r\n         baseCom.onShow(viewId);\r\n\r\n         // listen DC events\r\n         let dv = this.datacollection;\r\n         if (dv && this.parent.key != \"dataview\") {\r\n            this.eventAdd({\r\n               emitter: dv,\r\n               eventName: \"changeCursor\",\r\n               listener: (...p) => _logic.displayText(...p),\r\n            });\r\n         }\r\n\r\n         _logic.displayText();\r\n      };\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: _init,\r\n         logic: _logic,\r\n         onShow: _onShow,\r\n      };\r\n   }\r\n};\r\n","const ABViewWidgetCore = require(\"../../core/views/ABViewWidgetCore\");\r\n\r\nconst ABPropertyComponentDefaults = ABViewWidgetCore.defaultValues();\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABViewWidget extends ABViewWidgetCore {\r\n   // constructor(values, application, parent, defaultValues) {\r\n   //    super(values, application, parent, defaultValues);\r\n   // }\r\n\r\n   //\r\n   // Property Editor\r\n   //\r\n\r\n   static propertyEditorDefaultElements(App, ids, _logic, ObjectDefaults) {\r\n      var commonUI = super.propertyEditorDefaultElements(\r\n         App,\r\n         ids,\r\n         _logic,\r\n         ObjectDefaults\r\n      );\r\n\r\n      // in addition to the common .label  values, we\r\n      // ask for:\r\n      return commonUI.concat([\r\n         {\r\n            name: \"columnSpan\",\r\n            view: \"counter\",\r\n            min: 1,\r\n            label: L(\"Column Span\"),\r\n\r\n            hidden: true, // TODO\r\n         },\r\n         {\r\n            name: \"rowSpan\",\r\n            view: \"counter\",\r\n            min: 1,\r\n            label: L(\"Row Span\"),\r\n\r\n            hidden: true, // TODO\r\n         },\r\n      ]);\r\n   }\r\n\r\n   static propertyEditorPopulate(App, ids, view) {\r\n      super.propertyEditorPopulate(App, ids, view);\r\n\r\n      $$(ids.columnSpan).setValue(\r\n         view.position.dx || ABPropertyComponentDefaults.columnSpan\r\n      );\r\n      $$(ids.rowSpan).setValue(\r\n         view.position.dy || ABPropertyComponentDefaults.rowSpan\r\n      );\r\n   }\r\n\r\n   static propertyEditorValues(ids, view) {\r\n      super.propertyEditorValues(ids, view);\r\n\r\n      view.position.dx = $$(ids.columnSpan).getValue();\r\n      view.position.dy = $$(ids.rowSpan).getValue();\r\n   }\r\n\r\n   /**\r\n    * @function component()\r\n    * return a UI component based upon this view.\r\n    * @param {obj} App\r\n    * @return {obj} UI component\r\n    */\r\n   component(App) {\r\n      let base = super.component(App);\r\n\r\n      base.onShow = (viewId) => {\r\n         let dv = this.datacollection; // get from a function or a (get) property\r\n         if (dv && dv.dataStatus == dv.dataStatusFlag.notInitial) {\r\n            // load data when a widget is showing\r\n            dv.loadData();\r\n         }\r\n      };\r\n\r\n      return base;\r\n   }\r\n};\r\n","import ClassUI from \"../../../../ui/ClassUI\";\r\n\r\nexport default class ABViewProperty extends ClassUI {\r\n   // constructor() {}\r\n\r\n   /**\r\n    * @property default\r\n    * return default settings\r\n    *\r\n    * @return {Object}\r\n    */\r\n   static get default() {\r\n      return {};\r\n   }\r\n\r\n   /** == Property == */\r\n   /**\r\n    * @function propertyComponent\r\n    * return the view and logic to display in property panel\r\n    *\r\n    * @return {Object} - {\r\n    * \t\t\t\t\t\tui: webix element,\r\n    * \t\t\t\t\t\tinit: function,\r\n    * \t\t\t\t\t\tlogic: object\r\n    * \t\t\t\t\t}\r\n    */\r\n   static propertyComponent() {\r\n      let ui = {\r\n         view: \"template\",\r\n         template: \"No UI\",\r\n      };\r\n\r\n      let init = (options) => {\r\n         // register callbacks:\r\n         for (var c in logic.callbacks) {\r\n            logic.callbacks[c] = options[c] || logic.callbacks[c];\r\n         }\r\n      };\r\n\r\n      let logic = {\r\n         callbacks: {},\r\n      };\r\n\r\n      return {\r\n         ui: ui,\r\n         init: init,\r\n         logic: logic,\r\n      };\r\n   }\r\n\r\n   fromSettings(settings) {\r\n      this.settings = settings;\r\n   }\r\n\r\n   toSettings() {\r\n      return this.settings || {};\r\n   }\r\n\r\n   /** == UI == */\r\n   /**\r\n    * @function component\r\n    * return the view and logic to display in display widget\r\n    * @param {object} App\r\n    *      The shared App object that is created in OP.Component\r\n    * @param {string} idBase\r\n    *      Identifier for this component\r\n    *\r\n    * @return {Object} - {\r\n    * \t\t\t\t\t\tui: webix element,\r\n    * \t\t\t\t\t\tinit: function,\r\n    * \t\t\t\t\t\tlogic: object\r\n    * \t\t\t\t\t}\r\n    */\r\n   component(App, idBase) {\r\n      this.App = App;\r\n      this.idBase = idBase;\r\n\r\n      let ui = {\r\n         view: \"template\",\r\n         template: \"No UI\",\r\n      };\r\n\r\n      let init = (options) => {\r\n         // register callbacks:\r\n         for (var c in logic.callbacks) {\r\n            logic.callbacks[c] = options[c] || logic.callbacks[c];\r\n         }\r\n      };\r\n\r\n      let logic = {\r\n         callbacks: {},\r\n      };\r\n\r\n      return {\r\n         ui: ui,\r\n         init: init,\r\n         logic: logic,\r\n      };\r\n   }\r\n}\r\n","import ABViewProperty from \"./ABViewProperty\";\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nexport default class ABViewPropertyAddPage extends ABViewProperty {\r\n   /**\r\n    * @property default\r\n    * return default settings\r\n    *\r\n    * @return {Object}\r\n    */\r\n   static get default() {\r\n      return {\r\n         formView: \"none\", // id of form to add new data\r\n      };\r\n   }\r\n\r\n   static propertyComponent(App, idBase) {\r\n      let ids = {\r\n         formView: `${idBase}_formView`,\r\n      };\r\n\r\n      let ui = {\r\n         id: ids.formView,\r\n         name: \"formView\",\r\n         view: \"richselect\",\r\n         label: L(\"Add New Form\"),\r\n         labelWidth: this.AB.UISettings.config().labelWidthXLarge,\r\n         on: {\r\n            onChange: (newVal, oldVal) => {\r\n               if (newVal == L(\"No add new option\")) {\r\n                  $$(ids.formView).setValue(\"\");\r\n               }\r\n\r\n               _logic.callbacks.onSave();\r\n            },\r\n         },\r\n      };\r\n\r\n      let _init = (options) => {\r\n         for (let c in _logic.callbacks) {\r\n            _logic.callbacks[c] = options[c] || _logic.callbacks[c];\r\n         }\r\n      };\r\n\r\n      let _logic = {\r\n         callbacks: {\r\n            onSave: function () {\r\n               console.warn(\"NO onSave()!\");\r\n            },\r\n         },\r\n\r\n         setSettings: (view, settings = {}) => {\r\n            if (view == null) return;\r\n\r\n            // Set the options of the possible edit forms\r\n            let editForms = [\r\n               {\r\n                  id: \"none\",\r\n                  value: L(\"No add new option\"),\r\n               },\r\n            ];\r\n\r\n            let pagesHasForm = view\r\n               .pageRoot()\r\n               .pages((p) => {\r\n                  return p.views((v) => {\r\n                     return (\r\n                        v &&\r\n                        v.key == \"form\" &&\r\n                        v.datacollection &&\r\n                        v.datacollection.datasource &&\r\n                        v.datacollection.datasource.id ==\r\n                           view.field().settings.linkObject\r\n                     );\r\n                  }, true).length;\r\n               }, true)\r\n               .map((p) => {\r\n                  return {\r\n                     id: p.id,\r\n                     value: p.label,\r\n                  };\r\n               });\r\n\r\n            editForms = editForms.concat(pagesHasForm);\r\n\r\n            let $selector = $$(ids.formView);\r\n            if ($selector) {\r\n               $selector.define(\"options\", editForms);\r\n               $selector.define(\r\n                  \"value\",\r\n                  settings.formView || this.default.formView\r\n               );\r\n               $selector.refresh();\r\n            }\r\n         },\r\n\r\n         getSettings: (view) => {\r\n            let settings = view.settings || {};\r\n\r\n            settings.formView = $$(ids.formView).getValue();\r\n\r\n            return settings;\r\n         },\r\n      };\r\n\r\n      return {\r\n         ui: ui,\r\n         init: _init,\r\n         setSettings: _logic.setSettings,\r\n         getSettings: _logic.getSettings,\r\n      };\r\n   }\r\n\r\n   fromSettings(settings = {}) {\r\n      this.settings = this.settings || {};\r\n      this.settings.formView =\r\n         settings.formView || this.constructor.default.formView;\r\n   }\r\n\r\n   component(App, idBase) {\r\n      let ids = {\r\n         popup: App.unique(`${idBase}_popup_add_new`),\r\n         field: idBase.split(\"_\")[1],\r\n         button: App.unique(`${idBase}_popup_add_new_button`),\r\n      };\r\n\r\n      let ui = \"\";\r\n\r\n      if (\r\n         this.settings.formView &&\r\n         this.settings.formView != this.constructor.default.formView\r\n      ) {\r\n         // let iDiv = document.createElement(\"div\");\r\n         // iDiv.className = \"ab-connect-add-new\";\r\n         const dataCy = `add new CR button ${this.settings.formView} ${ids.field}`;\r\n         // iDiv.innerHTML = `<a href=\"javascript:void(0);\" class=\"fa fa-plus ab-connect-add-new-link\" data-cy=\"${dataCy}\"></a>`;\r\n         // iDiv.appendChild(node);\r\n         // ui = iDiv.outerHTML;\r\n         ui = {\r\n            id: ids.button,\r\n            view: \"button\",\r\n            type: \"icon\",\r\n            icon: \"fa fa-plus\",\r\n            width: 32,\r\n            height: 32,\r\n            css: \"webix_primary ab-connect-add-new-link\",\r\n            on: {\r\n               onAfterRender: () => {\r\n                  $$(ids.button)\r\n                     ?.$view.querySelector(\"button\")\r\n                     .setAttribute(\"data-cy\", dataCy);\r\n               },\r\n            },\r\n         };\r\n      }\r\n\r\n      let _logic = {\r\n         callbacks: {\r\n            onSaveData: (saveData) => {\r\n               if ($$(ids.popup)) $$(ids.popup).close();\r\n            },\r\n            onCancel: () => {\r\n               if ($$(ids.popup)) $$(ids.popup).close();\r\n\r\n               return false;\r\n            },\r\n            onClearOnLoad: () => {\r\n               return true;\r\n            },\r\n         },\r\n\r\n         applicationLoad: (application) => {\r\n            this._application = application;\r\n         },\r\n\r\n         onClick: (dc) => {\r\n            let pageId = this.settings.formView;\r\n            let page = this._application.pages((p) => p.id == pageId, true)[0];\r\n\r\n            return _logic.openFormPopup(page, dc);\r\n         },\r\n\r\n         /**\r\n          * @method openFormPopup\r\n          *\r\n          * @param page {ABViewPage}\r\n          * @param dc {ABDataCollection}\r\n          */\r\n         openFormPopup: (page, dc) => {\r\n            return new Promise((resolve, reject) => {\r\n               if (this._application == null) return resolve();\r\n\r\n               if ($$(ids.popup)) {\r\n                  $$(ids.popup).show();\r\n                  return resolve();\r\n               }\r\n\r\n               // Clone page so we modify without causing problems\r\n               let pageClone = page.clone(null, null, { ignoreSubPages: true });\r\n               pageClone.id = this._application.AB.uuid(); // lets take the stored id can create a new dynamic one so our views don't duplicate\r\n               // pageClone.id = pageClone.id + \"-\" + webix.uid(); // lets take the stored id can create a new dynamic one so our views don't duplicate\r\n               let popUpComp = pageClone.component(App);\r\n               let ui = popUpComp.ui;\r\n\r\n               let popupTemplate = {\r\n                  view: \"window\",\r\n                  id: ids.popup,\r\n                  modal: true,\r\n                  position: \"center\",\r\n                  // position:function(stthis.__addPageToolate){\r\n                  // \tstate.left = x + 20this.__addPageTool; // offset the popups\r\n                  // \tstate.top = y + 20;this.__addPageTool\r\n                  // },\r\n                  resize: true,\r\n                  width: parseInt(this.settings.popupWidth) || 700,\r\n                  height: parseInt(this.settings.popupHeight) + 44 || 450,\r\n                  css: \"ab-main-container\",\r\n                  head: {\r\n                     view: \"toolbar\",\r\n                     css: \"webix_dark\",\r\n                     cols: [\r\n                        {\r\n                           view: \"label\",\r\n                           label: page.label,\r\n                           css: \"modal_title\",\r\n                           align: \"center\",\r\n                        },\r\n                        {\r\n                           view: \"button\",\r\n                           label: L(\"Close\"),\r\n                           autowidth: true,\r\n                           align: \"center\",\r\n                           click: function () {\r\n                              var popup = this.getTopParentView();\r\n                              popup.close();\r\n                           },\r\n                        },\r\n                     ],\r\n                  },\r\n                  body: {\r\n                     view: \"scrollview\",\r\n                     scroll: true,\r\n                     body: ui,\r\n                  },\r\n               };\r\n\r\n               // Create popup\r\n               webix.ui(popupTemplate).show();\r\n\r\n               // Initial UI components\r\n               setTimeout(() => {\r\n                  popUpComp.init({\r\n                     onSaveData: _logic.callbacks.onSaveData,\r\n                     onCancelClick: _logic.callbacks.onCancel,\r\n                     clearOnLoad: _logic.callbacks.onClearOnLoad,\r\n                  });\r\n\r\n                  popUpComp.onShow();\r\n\r\n                  _logic.setDefaultValue(dc, pageClone);\r\n\r\n                  resolve();\r\n               }, 50);\r\n            });\r\n         },\r\n\r\n         setDefaultValue: (dc, page) => {\r\n            if (!dc) return;\r\n\r\n            let obj = dc.datasource;\r\n            if (!obj) return;\r\n\r\n            let linkedData = dc.getCursor();\r\n            if (!linkedData) return;\r\n\r\n            page.views().forEach((v) => {\r\n               if (!v || v.key != \"form\") return;\r\n\r\n               v.views().forEach((fView) => {\r\n                  if (fView.key != \"connect\" || fView.settings == null) return;\r\n\r\n                  let field = fView.field();\r\n                  if (field == null) return;\r\n\r\n                  let objLink = field.datasourceLink;\r\n                  if (objLink == null || objLink.id != obj.id) return;\r\n\r\n                  let data = {};\r\n                  let relationName = field.relationName();\r\n                  data[relationName] = {\r\n                     id: linkedData.id,\r\n                  };\r\n\r\n                  // Add custom index values\r\n                  let indexes = obj.indexes() || [];\r\n                  indexes.forEach((idx) => {\r\n                     (idx.fields || []).forEach((f) => {\r\n                        data[relationName][f.columnName] =\r\n                           linkedData[f.columnName];\r\n                     });\r\n                  });\r\n\r\n                  // Set label of selected item\r\n                  if (linkedData.text) {\r\n                     data[relationName].text = linkedData.text;\r\n                     data[relationName].value = data[relationName].text;\r\n                  } else {\r\n                     let rawData = {};\r\n                     rawData[relationName] = linkedData;\r\n                     data[relationName].text = field.format(rawData);\r\n                     data[relationName].value = data[relationName].text;\r\n                  }\r\n\r\n                  let comp = v.viewComponents[fView.id];\r\n                  if (!comp) return;\r\n\r\n                  field.setValue($$(comp.ui.inputId), data);\r\n               });\r\n            });\r\n         },\r\n      };\r\n\r\n      let init = (options) => {\r\n         for (let c in _logic.callbacks) {\r\n            _logic.callbacks[c] = options[c] || _logic.callbacks[c];\r\n         }\r\n      };\r\n\r\n      return {\r\n         ui: ui,\r\n         init: init,\r\n\r\n         applicationLoad: _logic.applicationLoad,\r\n         onClick: _logic.onClick,\r\n         openFormPopup: _logic.openFormPopup,\r\n      };\r\n   }\r\n}\r\n","import ABViewPropertyAddPage from \"./ABViewPropertyAddPage\";\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nexport default class ABViewPropertyEditPage extends ABViewPropertyAddPage {\r\n   /**\r\n    * @property default\r\n    * return default settings\r\n    *\r\n    * @return {Object}\r\n    */\r\n   static get default() {\r\n      return {\r\n         editForm: \"none\", // The url pointer of ABViewForm\r\n      };\r\n   }\r\n\r\n   static propertyComponent(App, idBase) {\r\n      let ids = {\r\n         formEdit: `${idBase}_editForm`,\r\n      };\r\n\r\n      let ui = {\r\n         id: ids.formEdit,\r\n         name: \"editForm\",\r\n         view: \"richselect\",\r\n         label: L(\"Edit Form\"),\r\n         labelWidth: this.AB.UISettings.config().labelWidthXLarge,\r\n         on: {\r\n            onChange: (newVal, oldVal) => {\r\n               if (newVal == L(\"No add new option\")) {\r\n                  $$(ids.formEdit).setValue(\"\");\r\n               }\r\n\r\n               _logic.callbacks.onSave();\r\n            },\r\n         },\r\n      };\r\n\r\n      let _init = (options) => {\r\n         for (let c in _logic.callbacks) {\r\n            _logic.callbacks[c] = options[c] || _logic.callbacks[c];\r\n         }\r\n      };\r\n\r\n      let _logic = {\r\n         callbacks: {\r\n            onSave: function () {\r\n               console.warn(\"NO onSave()!\");\r\n            },\r\n         },\r\n\r\n         setSettings: (view, settings = {}) => {\r\n            if (view == null) return;\r\n\r\n            // Set the options of the possible edit forms\r\n            let editForms = [\r\n               {\r\n                  id: \"none\",\r\n\r\n                  value: L(\"No add new option\"),\r\n               },\r\n            ];\r\n\r\n            (view.pageRoot().pages(() => true, true) || []).forEach((p) => {\r\n               if (!p) return;\r\n\r\n               p.views(() => true, true).forEach((v) => {\r\n                  if (\r\n                     v &&\r\n                     v.key == \"form\" &&\r\n                     v.datacollection &&\r\n                     v.datacollection.datasource &&\r\n                     v.datacollection.datasource.id ==\r\n                        view.field().settings.linkObject\r\n                  ) {\r\n                     editForms.push({\r\n                        id: v.urlPointer(),\r\n                        value: `${p.label} - ${v.label}`,\r\n                     });\r\n                  }\r\n               });\r\n            });\r\n\r\n            let $selector = $$(ids.formEdit);\r\n            if ($selector) {\r\n               $selector.define(\"options\", editForms);\r\n               $selector.define(\r\n                  \"value\",\r\n                  settings.editForm || this.default.editForm\r\n               );\r\n               $selector.refresh();\r\n            }\r\n         },\r\n\r\n         getSettings: (view) => {\r\n            let settings = view.settings || {};\r\n\r\n            let $selector = $$(ids.formEdit);\r\n            let $selectPopup = $selector.getPopup();\r\n            let selectedItem = ($selectPopup.config.body.data || []).filter(\r\n               (opt) => opt.id == $selector.getValue()\r\n            )[0];\r\n            if (selectedItem) {\r\n               settings.editForm = selectedItem.id; // The url pointer of ABViewForm\r\n            }\r\n\r\n            return settings;\r\n         },\r\n      };\r\n\r\n      return {\r\n         ui: ui,\r\n         init: _init,\r\n         setSettings: _logic.setSettings,\r\n         getSettings: _logic.getSettings,\r\n      };\r\n   }\r\n\r\n   fromSettings(settings = {}) {\r\n      this.settings = this.settings || {};\r\n      this.settings.editForm =\r\n         settings.editForm || this.constructor.default.editForm;\r\n   }\r\n\r\n   component(App, idBase) {\r\n      idBase = `${idBase}_popup_edit_form`;\r\n\r\n      let comp = super.component(App, idBase);\r\n\r\n      comp.onClick = () => {\r\n         if (\r\n            !this._application ||\r\n            !this.settings.editForm ||\r\n            this.settings.editForm == this.constructor.default.editForm\r\n         )\r\n            return Promise.resolve();\r\n\r\n         let form = this._application.urlResolve(this.settings.editForm);\r\n         if (!form) return Promise.resolve();\r\n\r\n         let page = form.pageParent();\r\n         if (!page) return Promise.resolve();\r\n\r\n         return comp.openFormPopup(page);\r\n      };\r\n\r\n      return comp;\r\n   }\r\n}\r\n","/*\r\n * ABViewPropertyFilterData\r\n * This is a displayable ui component that will manage displaying a\r\n * means of searching for the user.\r\n *\r\n * This component will emit: \"filter.data\" when one of the filter options\r\n * have been enabled.\r\n *    \"filter.data\" has 2 parameters: fnFilter, filterRules\r\n *       fnFilter {function} when passed a row of data from the grid,\r\n *                return true/false if it passes the filter.\r\n *       filterRules {array} of each of the filter rules that have been\r\n *                created. Note: the fnFilter still checks the validity\r\n *                of the row based on these rules.\r\n *                (this is used for the parent component to indicate how\r\n *                many rules are currently applied to the data being displayed)\r\n */\r\n\r\nimport ABViewProperty from \"./ABViewProperty\";\r\n// const ABViewGridFilterRule = require(\"../../../rules/ABViewGridFilterRule\");\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\n// var getRule = (object, App, idBase) => {\r\n//    var FilterRule = new ABViewGridFilterRule();\r\n//    FilterRule.objectLoad(object);\r\n\r\n//    // run .component because it need to have .getValue and .setValue functions to Rule\r\n//    // NOTE: ABViewQueryBuilderObjectFieldCondition - why does not return new object from .compnent ?\r\n//    if ((App, idBase)) FilterRule.component(App, idBase);\r\n\r\n//    return FilterRule;\r\n// };\r\n\r\n// var rowFilter = null;\r\n// var rowFilterForm = null;\r\n\r\nexport default class ABViewPropertyFilterData extends ABViewProperty {\r\n   constructor(AB, idBase) {\r\n      super({\r\n         filterPanel: `${idBase}_filterPanel`,\r\n         globalFilterFormContainer: `${idBase}__globalFilterFormContainer`,\r\n         globalFilterForm: `${idBase}_globalFilterForm`,\r\n         filterMenutoolbar: `${idBase}_filterMenuToolbar`,\r\n         resetFilterButton: `${idBase}_resetFilterButton`,\r\n         component: `${idBase}_filterData_popup`,\r\n      });\r\n\r\n      this.AB = AB;\r\n      this.idBase = idBase;\r\n      this.object = null;\r\n      // this.queryRules = [];\r\n\r\n      this.__externalSearchText = null;\r\n      // {string}\r\n      // External sources of text filters are stored here. This is most likely\r\n      // from the global search toolbar entry.\r\n\r\n      this.rowFilter = this.AB.filterComplexNew(`${this.ids.component}_filter`);\r\n      // {RowFilter}\r\n      // When .userFilterPosition == \"toolbar\" we use this RowFilter to\r\n      // display a form in a popup where the toolbar button is.\r\n\r\n      this.rowFilterForm = this.AB.filterComplexNew(\r\n         `${this.ids.component}_filter_form`\r\n      );\r\n      // {RowFilter}\r\n      // When .userFilterPosition == \"form\" we use this RowFilter to\r\n      // display a form under the toolbar.\r\n   }\r\n\r\n   /**\r\n    * @property default\r\n    * return default settings\r\n    *\r\n    * @return {Object}\r\n    */\r\n   static get default() {\r\n      return {\r\n         filterOption: 1,\r\n         // {integer}\r\n         // 0 - Not allow\r\n         // 1 - Enable user filter\r\n         // 2 - Predefined filter menu\r\n         // 3 - Global filter input\r\n\r\n         // filterOptions == 1 options\r\n         userFilterPosition: \"toolbar\",\r\n         // {string} the location of the filter:\r\n         //    \"toolbar\" : there will be an \"Add Filters\" button on\r\n         //                the toolbar that will trigger the form popup\r\n         //    \"form\"    : there will be a button under the toolbar that\r\n         //                will bring up the form popup.\r\n\r\n         isGlobalToolbar: 1,\r\n         // {boolean|truthy}\r\n         // when \"toolbar\" is chosen for userFilterPosition, this setting\r\n         // allows us to also include the search criteria specified in\r\n         // the search box on the toolbar.\r\n\r\n         // filterOptions == 2 options\r\n         // predefined filters created by the builders. There will be\r\n         // an area under the toolbar that displays buttons to choose\r\n         // between one of the predefined queryRules.\r\n         // queryRules: [], // An array of ABViewGridFilterRule object\r\n\r\n         // filterOptions == 3 options\r\n         // globalFilterPosition: \"default\",\r\n         // {string} [ \"default\", \"single\" ]\r\n         //    \"default\" : shows default grid with all potential matches\r\n         //    \"single\"  : grid only shows when it has a match.  only 1\r\n         //                match is shown. ( is this true?? )\r\n      };\r\n   }\r\n\r\n   // static propertyComponent(App, idBase) {\r\n   //    let base = super.propertyComponent();\r\n\r\n   //    let ids = {\r\n   //       /** Property */\r\n   //       filterRules: idBase + \"_rules\",\r\n   //       filterRulesScrollview: idBase + \"_filterRulesScrollview\",\r\n\r\n   //       filterOptionRadio: idBase + \"_filterOptionRadio\",\r\n   //       filterUserLayout: idBase + \"_filterUserLayout\",\r\n   //       filterUser: idBase + \"_filterUser\",\r\n   //       filterGlobal: idBase + \"_filterGlobal\",\r\n   //       filterMenuLayout: idBase + \"_filterMenuLayout\",\r\n\r\n   //       needLoadAllLabel: idBase + \"_needLoadAll\",\r\n   //       globalToolbar: idBase + \"_globalToolbar\",\r\n   //    };\r\n\r\n   //    let labels = {\r\n   //       common: App.labels,\r\n   //       component: {\r\n   //          header: L(\"ab.component.grid.filterMenu\", \"*Filter Menu\"),\r\n   //          addNewFilter: L(\r\n   //             \"ab.components.grid.addNewFilter\",\r\n   //             \"*Add new filter\"\r\n   //          ),\r\n   //       },\r\n   //    };\r\n\r\n   //    let ui = {\r\n   //       type: \"form\",\r\n   //       rows: [\r\n   //          {\r\n   //             view: \"radio\",\r\n   //             id: ids.filterOptionRadio,\r\n   //             value: 0,\r\n   //             options: [\r\n   //                { id: 0, value: \"Do not Allow User filters\" },\r\n   //                { id: 1, value: \"Enable User filters\" },\r\n   //                { id: 2, value: \"Use a filter menu\" },\r\n   //                { id: 3, value: \"Use a global filter input\" },\r\n   //             ],\r\n   //             vertical: true,\r\n   //             label: \"Filter Option\",\r\n   //             labelWidth: App.config.labelWidthLarge,\r\n   //             on: {\r\n   //                onChange: (newValue, oldValue) => {\r\n   //                   logic.setFilterOption(newValue);\r\n   //                },\r\n   //             },\r\n   //          },\r\n\r\n   //          {\r\n   //             view: \"radio\",\r\n   //             id: ids.filterGlobal,\r\n   //             hidden: true,\r\n   //             vertical: true,\r\n   //             label: \"Show\",\r\n   //             labelWidth: App.config.labelWidthLarge,\r\n   //             options: [\r\n   //                { id: \"default\", value: \"All matching records\" },\r\n   //                { id: \"single\", value: \"Single records only\" },\r\n   //             ],\r\n   //          },\r\n\r\n   //          {\r\n   //             view: \"layout\",\r\n   //             id: ids.filterUserLayout,\r\n   //             hidden: true,\r\n   //             cols: [\r\n   //                {\r\n   //                   view: \"radio\",\r\n   //                   vertical: true,\r\n   //                   id: ids.filterUser,\r\n   //                   value: \"toolbar\",\r\n   //                   label: \"Display\",\r\n   //                   labelWidth: App.config.labelWidthLarge,\r\n   //                   width: 200,\r\n   //                   options: [\r\n   //                      { id: \"toolbar\", value: \"Toolbar\" },\r\n   //                      { id: \"form\", value: \"Form\" },\r\n   //                   ],\r\n   //                   on: {\r\n   //                      onChange: (newValue) => {\r\n   //                         logic.setFilterUser(newValue);\r\n   //                      },\r\n   //                   },\r\n   //                },\r\n   //                {\r\n   //                   view: \"checkbox\",\r\n   //                   id: ids.globalToolbar,\r\n   //                   width: 350,\r\n   //                   labelRight: \"Include a global filter input\",\r\n   //                },\r\n   //                {},\r\n   //             ],\r\n   //          },\r\n\r\n   //          {\r\n   //             view: \"layout\",\r\n   //             id: ids.filterMenuLayout,\r\n   //             hidden: true,\r\n   //             rows: [\r\n   //                {\r\n   //                   css: { \"padding-bottom\": 10 },\r\n   //                   cols: [\r\n   //                      {\r\n   //                         view: \"button\",\r\n   //                         css: \"webix_primary\",\r\n   //                         icon: \"fa fa-plus\",\r\n   //                         type: \"iconButton\",\r\n   //                         label: labels.component.addNewFilter,\r\n   //                         width: 150,\r\n   //                         click: () => {\r\n   //                            logic.addFilterRule();\r\n   //                         },\r\n   //                      },\r\n   //                      {\r\n   //                         view: \"label\",\r\n   //                         label: '*need \"LoadAll\" from datasource',\r\n   //                         css: { color: \"red\" },\r\n   //                         id: ids.needLoadAllLabel,\r\n   //                         hidden: true,\r\n   //                      },\r\n   //                      { fillspace: true },\r\n   //                   ],\r\n   //                },\r\n   //                {\r\n   //                   view: \"scrollview\",\r\n   //                   id: ids.filterRulesScrollview,\r\n   //                   scroll: \"xy\",\r\n   //                   body: {\r\n   //                      view: \"layout\",\r\n   //                      id: ids.filterRules,\r\n   //                      margin: 20,\r\n   //                      padding: 10,\r\n   //                      rows: [],\r\n   //                   },\r\n   //                },\r\n   //             ],\r\n   //          },\r\n   //          {\r\n   //             css: { \"background-color\": \"#fff\" },\r\n   //             cols: [\r\n   //                { fillspace: true },\r\n   //                {\r\n   //                   view: \"button\",\r\n   //                   name: \"cancel\",\r\n   //                   value: labels.common.cancel,\r\n   //                   css: \"ab-cancel-button\",\r\n   //                   autowidth: true,\r\n   //                   click: function () {\r\n   //                      logic.buttonCancel();\r\n   //                   },\r\n   //                },\r\n   //                {\r\n   //                   view: \"button\",\r\n   //                   css: \"webix_primary\",\r\n   //                   name: \"save\",\r\n   //                   label: labels.common.save,\r\n   //                   type: \"form\",\r\n   //                   autowidth: true,\r\n   //                   click: function () {\r\n   //                      logic.buttonSave();\r\n   //                   },\r\n   //                },\r\n   //                { fillspace: true },\r\n   //             ],\r\n   //          },\r\n   //       ],\r\n   //    };\r\n\r\n   //    let init = (options) => {\r\n   //       // register callbacks:\r\n   //       for (var c in logic.callbacks) {\r\n   //          logic.callbacks[c] = options[c] || logic.callbacks[c];\r\n   //       }\r\n   //    };\r\n\r\n   //    let instance = this;\r\n   //    instance.queryRules = [];\r\n\r\n   //    let logic = {\r\n   //       callbacks: {\r\n   //          onCancel: function () {\r\n   //             console.warn(\"NO onCancel()!\");\r\n   //          },\r\n   //          onSave: function () {\r\n   //             console.warn(\"NO onSave()!\");\r\n   //          },\r\n   //       },\r\n\r\n   //       buttonCancel: function () {\r\n   //          logic.callbacks.onCancel();\r\n   //       },\r\n\r\n   //       buttonSave: () => {\r\n   //          logic.callbacks.onSave();\r\n   //       },\r\n\r\n   //       objectLoad(object, isLoadAll = false) {\r\n   //          instance.object = object;\r\n   //          instance.isLoadAll = isLoadAll;\r\n\r\n   //          //tell each of our rules about our object\r\n   //          if (instance.queryRules && instance.queryRules.length) {\r\n   //             instance.queryRules.forEach((r) => {\r\n   //                r.objectLoad(object);\r\n   //             });\r\n   //          }\r\n   //       },\r\n\r\n   //       setSettings(settings = {}) {\r\n   //          //Convert some condition from string to integer\r\n   //          (settings.queryRules || []).forEach((qr) => {\r\n   //             if (\r\n   //                qr &&\r\n   //                qr.queryRules &&\r\n   //                qr.queryRules[0] &&\r\n   //                qr.queryRules[0].rules\r\n   //             ) {\r\n   //                qr.queryRules[0].rules.forEach((rule) => {\r\n   //                   if (/^[+-]?\\d+(\\.\\d+)?$/.exec(rule.value)) {\r\n   //                      rule.value = JSON.parse(rule.value);\r\n   //                   }\r\n   //                });\r\n   //             }\r\n   //          });\r\n\r\n   //          $$(ids.filterOptionRadio).setValue(settings.filterOption);\r\n   //          $$(ids.filterUser).setValue(\r\n   //             settings.userFilterPosition ||\r\n   //                ABViewPropertyFilterData.default.userFilterPosition\r\n   //          );\r\n   //          $$(ids.globalToolbar).setValue(\r\n   //             typeof settings.isGlobalToolbar != \"undefined\"\r\n   //                ? settings.isGlobalToolbar\r\n   //                : ABViewPropertyFilterData.default.isGlobalToolbar\r\n   //          );\r\n\r\n   //          $$(ids.filterGlobal).setValue(\r\n   //             settings.globalFilterPosition ||\r\n   //                ABViewPropertyFilterData.default.globalFilterPosition\r\n   //          );\r\n\r\n   //          // clear any existing Rules:\r\n   //          if (instance.queryRules && instance.queryRules.length > 0) {\r\n   //             instance.queryRules.forEach((rule) => {\r\n   //                if ($$(ids.filterRules))\r\n   //                   $$(ids.filterRules).removeView(rule.ids.component);\r\n   //             });\r\n   //          }\r\n   //          instance.queryRules = [];\r\n\r\n   //          (settings.queryRules || []).forEach((ruleSettings) => {\r\n   //             logic.addFilterRule(ruleSettings);\r\n   //          });\r\n   //       },\r\n\r\n   //       getSettings() {\r\n   //          var settings = this.settings || {};\r\n   //          settings.filterOption = parseInt(\r\n   //             $$(ids.filterOptionRadio).getValue()\r\n   //          );\r\n   //          settings.queryRules = [];\r\n\r\n   //          switch (settings.filterOption) {\r\n   //             case 0: // Disable User filters\r\n   //                settings.isGlobalToolbar = 0;\r\n   //                break;\r\n   //             case 1: // Enable User filters\r\n   //                settings.userFilterPosition = $$(ids.filterUser).getValue();\r\n\r\n   //                settings.isGlobalToolbar = $$(ids.globalToolbar).getValue();\r\n   //                break;\r\n   //             case 2: // Use a filter menu\r\n   //                instance.queryRules.forEach((r) => {\r\n   //                   settings.queryRules.push(r.toSettings());\r\n   //                });\r\n   //                break;\r\n   //             case 3: // Use a global filter menu\r\n   //                settings.globalFilterPosition = $$(\r\n   //                   ids.filterGlobal\r\n   //                ).getValue();\r\n   //                break;\r\n   //          }\r\n\r\n   //          return settings;\r\n   //       },\r\n\r\n   //       /**\r\n   //        * @method addFilterRule\r\n   //        * Instantiate a new Rule in our list.\r\n   //        * @param {obj} settings  The settings object from the Rule we created in .toSettings()\r\n   //        */\r\n   //       addFilterRule(settings) {\r\n   //          if (instance.object == null) return;\r\n\r\n   //          var Rule = getRule(instance.object, App, idBase);\r\n   //          instance.queryRules.push(Rule);\r\n\r\n   //          // if we have tried to create our component:\r\n   //          if (ids) {\r\n   //             // if our actually exists, then populate it:\r\n   //             var RulesUI = $$(ids.filterRules);\r\n   //             if (RulesUI) {\r\n   //                // make sure Rule.ui is created before calling .init()\r\n   //                Rule.component(App, idBase); // prepare the UI component\r\n   //                var viewId = RulesUI.addView(Rule.ui);\r\n   //                Rule.showQueryBuilderContainer();\r\n   //                Rule.init({\r\n   //                   onDelete: (deletedRule) => {\r\n   //                      $$(ids.filterRules).removeView(Rule.ids.component);\r\n\r\n   //                      var index = instance.queryRules.indexOf(deletedRule);\r\n   //                      if (index !== -1) {\r\n   //                         instance.queryRules.splice(index, 1);\r\n   //                      }\r\n   //                   },\r\n   //                });\r\n   //             }\r\n   //          }\r\n\r\n   //          if (settings) {\r\n   //             Rule.fromSettings(settings);\r\n   //          }\r\n   //       },\r\n\r\n   //       onShow: function () {\r\n   //          if (!this.isLoadAll) {\r\n   //             $$(ids.needLoadAllLabel).show();\r\n   //          } else {\r\n   //             $$(ids.needLoadAllLabel).hide();\r\n   //          }\r\n   //       },\r\n\r\n   //       setFilterOption: function (value) {\r\n   //          switch (JSON.parse(value || 0)) {\r\n   //             case 1: // Enable User filters\r\n   //                $$(ids.filterMenuLayout).hide();\r\n   //                $$(ids.filterGlobal).hide();\r\n   //                $$(ids.filterUserLayout).show();\r\n   //                break;\r\n   //             case 2: // Use a filter menu\r\n   //                $$(ids.filterUserLayout).hide();\r\n   //                $$(ids.filterGlobal).hide();\r\n   //                $$(ids.filterMenuLayout).show();\r\n   //                break;\r\n   //             case 3: // Use a global filter menu\r\n   //                $$(ids.filterUserLayout).hide();\r\n   //                $$(ids.filterMenuLayout).hide();\r\n   //                $$(ids.filterGlobal).show();\r\n   //                break;\r\n   //             case 0:\r\n   //             default:\r\n   //                // Do not Allow User filters\r\n   //                $$(ids.filterUserLayout).hide();\r\n   //                $$(ids.filterMenuLayout).hide();\r\n   //                $$(ids.filterGlobal).hide();\r\n   //                break;\r\n   //          }\r\n   //       },\r\n\r\n   //       setFilterUser: (val) => {\r\n   //          switch (val) {\r\n   //             case \"toolbar\":\r\n   //                $$(ids.globalToolbar).show();\r\n   //                break;\r\n   //             case \"form\":\r\n   //                $$(ids.globalToolbar).hide();\r\n   //                break;\r\n   //          }\r\n   //       },\r\n   //    };\r\n\r\n   //    return {\r\n   //       ui: ui,\r\n   //       init: init,\r\n   //       logic: logic,\r\n   //       onShow: logic.onShow,\r\n   //       objectLoad: logic.objectLoad,\r\n   //       setSettings: logic.setSettings,\r\n   //       getSettings: logic.getSettings,\r\n   //    };\r\n   // }\r\n\r\n   /**\r\n    * @method fromSettings\r\n    * Create an initial set of default values based upon our settings object.\r\n    * @param {obj} settings  The settings object we created in .toSettings()\r\n    */\r\n   fromSettings(settings) {\r\n      settings = settings || {};\r\n\r\n      settings.filterOption =\r\n         typeof settings.filterOption != \"undefined\"\r\n            ? settings.filterOption\r\n            : ABViewPropertyFilterData.default.filterOption;\r\n\r\n      settings.isGlobalToolbar =\r\n         typeof settings.isGlobalToolbar != \"undefined\"\r\n            ? settings.isGlobalToolbar\r\n            : ABViewPropertyFilterData.default.isGlobalToolbar;\r\n\r\n      this.settings = settings;\r\n   }\r\n\r\n   /**\r\n    * @method objectLoad\r\n    * A rule is based upon a Form that was working with an Object.\r\n    * .objectLoad() is how we specify which object we are working with.\r\n    *\r\n    * @param {ABObject} The object that will be used to evaluate the Rules\r\n    */\r\n   objectLoad(object) {\r\n      this.object = object;\r\n\r\n      //tell each of our rules about our object\r\n      // if (this.queryRules &&\r\n      // \tthis.queryRules.length) {\r\n      // \tthis.queryRules.forEach((r) => {\r\n      // \t\tr.objectLoad(object);\r\n      // \t});\r\n      // }\r\n\r\n      if (this.rowFilter) {\r\n         // this.rowFilter.applicationLoad(object.application);\r\n         this.rowFilter.fieldsLoad(object.fields());\r\n      }\r\n\r\n      if (this.rowFilterForm) {\r\n         // this.rowFilterForm.applicationLoad(object.application);\r\n         this.rowFilterForm.fieldsLoad(object.fields());\r\n      }\r\n   }\r\n\r\n   viewLoad(view) {\r\n      this.view = view;\r\n   }\r\n\r\n   /** == UI == */\r\n   ui() {\r\n      var self = this;\r\n      var ids = this.ids;\r\n\r\n      return {\r\n         id: ids.filterPanel,\r\n         type: \"space\",\r\n         borderless: true,\r\n         padding: 0,\r\n         rows: [\r\n            {\r\n               id: ids.globalFilterFormContainer,\r\n               hidden: true,\r\n               cols: [\r\n                  {\r\n                     id: ids.globalFilterForm,\r\n                     view: \"text\",\r\n                     placeholder: L(\"Search or scan a barcode to see results\"),\r\n                     on: {\r\n                        onTimedKeyPress: () => {\r\n                           this.triggerCallback();\r\n                           // var searchText = this.getValue();\r\n\r\n                           // self.searchText(searchText);\r\n                        },\r\n                     },\r\n                  },\r\n                  {\r\n                     view: \"button\",\r\n                     css: \"webix_primary\",\r\n                     width: 28,\r\n                     type: \"icon\",\r\n                     icon: \"fa fa-times\",\r\n                     click: function () {\r\n                        var $form = $$(ids.globalFilterForm);\r\n                        $form.setValue(\"\");\r\n                        $form.focus();\r\n                        $form.callEvent(\"onTimedKeyPress\");\r\n                     },\r\n                  },\r\n               ],\r\n            },\r\n            this.rowFilterForm.ui,\r\n            {\r\n               view: \"toolbar\",\r\n               id: ids.filterMenutoolbar,\r\n               css: \"ab-data-toolbar\",\r\n               hidden: true,\r\n               cols: [\r\n                  {\r\n                     view: \"button\",\r\n                     css: \"webix_primary\",\r\n                     id: ids.resetFilterButton,\r\n                     label: L(\"Reset Filter\"),\r\n                     icon: \"fa fa-ban\",\r\n                     type: \"icon\",\r\n                     badge: 0,\r\n                     autowidth: true,\r\n                     click: function () {\r\n                        self.resetFilter();\r\n                     },\r\n                  },\r\n               ],\r\n            },\r\n         ],\r\n      };\r\n   }\r\n\r\n   async init(AB) {\r\n      if (AB) {\r\n         this.AB = AB;\r\n      }\r\n\r\n      var ids = this.ids;\r\n      // this.filter_popup = webix.ui({\r\n      //    view: \"popup\",\r\n      //    id: ids.component,\r\n      //    width: 600,\r\n      //    height: 400,\r\n      //    hidden: true,\r\n      //    body: this.rowFilter.ui,\r\n      // });\r\n\r\n      this.rowFilter.init();\r\n      this.rowFilter.on(\"changed\", (value) => {\r\n         let filterRules = value.rules || [];\r\n\r\n         // if ($$(ids.buttonFilter)) {\r\n         // \t$$(ids.buttonFilter).define('badge', filterRules.length || null);\r\n         // \t$$(ids.buttonFilter).refresh();\r\n         // }\r\n\r\n         // be notified when there is a change in the filter\r\n         this.triggerCallback((rowData) => {\r\n            return this.rowFilter.isValid(rowData);\r\n         }, filterRules);\r\n      });\r\n\r\n      this.rowFilterForm.init();\r\n      this.rowFilterForm.on(\"changed\", () => {\r\n         this.triggerCallback();\r\n      });\r\n\r\n      $$(ids.filterPanel)?.hide();\r\n      if ($$(this.rowFilterForm.ui.id)) $$(this.rowFilterForm.ui.id).hide();\r\n      $$(ids.filterMenutoolbar).hide();\r\n      $$(ids.globalFilterFormContainer).hide();\r\n\r\n      switch (this.settings.filterOption) {\r\n         case 0:\r\n            break;\r\n         case 1:\r\n            switch (this.settings.userFilterPosition) {\r\n               case \"form\":\r\n                  $$(this.rowFilterForm.ui.id).show();\r\n                  $$(ids.filterPanel).show();\r\n                  break;\r\n               case \"toolbar\":\r\n                  $$(ids.filterPanel).hide();\r\n                  break;\r\n            }\r\n            break;\r\n         case 2:\r\n            $$(ids.filterPanel).show();\r\n            var $filterMenutoolbar = $$(ids.filterMenutoolbar);\r\n            if ($filterMenutoolbar) {\r\n               $filterMenutoolbar.show();\r\n\r\n               // populate filter items\r\n               if (this.settings?.queryRules) {\r\n                  (this.settings.queryRules || []).forEach((qr) => {\r\n                     var filterRuleButton = {\r\n                        view: \"button\",\r\n                        css: \"webix_primary\",\r\n                        label: qr.ruleName,\r\n                        icon: \"fa fa-filter\",\r\n                        type: \"icon\",\r\n                        badge: 0,\r\n                        autowidth: true,\r\n                        click: () => {\r\n                           this.selectFilter(qr.queryRules);\r\n                        },\r\n                     };\r\n                     $filterMenutoolbar.addView(filterRuleButton);\r\n                  });\r\n               }\r\n            }\r\n            break;\r\n         case 3:\r\n            $$(ids.globalFilterFormContainer).show();\r\n            $$(ids.filterPanel).show();\r\n            break;\r\n      }\r\n   }\r\n\r\n   filterRules() {\r\n      let rowFilterRules = null;\r\n\r\n      switch (this.settings.userFilterPosition) {\r\n         case \"form\":\r\n            rowFilterRules = this.rowFilterForm.getValue();\r\n            break;\r\n         case \"toolbar\":\r\n            rowFilterRules = this.rowFilter.getValue();\r\n            break;\r\n      }\r\n\r\n      return rowFilterRules;\r\n   }\r\n\r\n   /**\r\n    * @method triggerCallback()\r\n    * We compile our current search options and emit them back to our\r\n    * parent container.\r\n    */\r\n   triggerCallback(/*fnFilter, filterRules*/) {\r\n      let searchRules = this.searchText(this.__externalSearchText);\r\n      let rowFilterRules = this.filterRules();\r\n\r\n      if (rowFilterRules?.rules?.length) {\r\n         if (searchRules) {\r\n            rowFilterRules = {\r\n               glue: \"and\",\r\n               rules: [rowFilterRules, searchRules],\r\n            };\r\n         }\r\n      } else {\r\n         rowFilterRules = searchRules;\r\n      }\r\n\r\n      this.emit(\"filter.data\", null, rowFilterRules);\r\n   }\r\n\r\n   resetFilter() {\r\n      this.triggerCallback(() => true, []);\r\n   }\r\n\r\n   /**\r\n    * @method externalSearchText()\r\n    * Save any search criteria established from outside this filterHelper.\r\n    * NOTE: The ABViewGrid has a toolbar search entry that will provide\r\n    * this value.\r\n    * @param {string} search\r\n    *        The typed in search criteria.\r\n    */\r\n   externalSearchText(search = null) {\r\n      this.__externalSearchText = search;\r\n      this.triggerCallback(); // update each time\r\n   }\r\n\r\n   /**\r\n    * @method searchText()\r\n    * Retrieve the typed in search terms from the user, and convert them\r\n    * into a set of Rules that will modify our results.\r\n    * If an external search param is provided, use that instead.\r\n    * @param {string} externalText\r\n    * @return {json} The QB Rule condition for the search criteria\r\n    */\r\n   searchText(externalText) {\r\n      var search;\r\n      if (externalText) {\r\n         search = externalText;\r\n      } else {\r\n         search = ($$(this.ids.globalFilterForm).getValue() || \"\").trim();\r\n      }\r\n      if (!search) return null; // <-- includes \"\"\r\n\r\n      // find the individual \"terms\" that we should search for\r\n      let terms = search.trim().toLowerCase().split(\" \");\r\n\r\n      // build a set of conditions for each term\r\n      var allTerms = [];\r\n\r\n      var allFields = this.object?.fields() || [];\r\n\r\n      terms.forEach((t) => {\r\n         var fieldTerms = [];\r\n\r\n         // for each field, add a match condition for that field\r\n         // (if the field applies)\r\n         allFields.forEach((f) => {\r\n            if (f.fieldIsFilterable()) {\r\n               switch (f.key) {\r\n                  case \"string\":\r\n                  case \"LongText\":\r\n                  case \"email\":\r\n                     fieldTerms.push({\r\n                        key: f.id,\r\n                        rule: \"contains\",\r\n                        value: t,\r\n                     });\r\n                     break;\r\n\r\n                  case \"list\":\r\n                     var options = f.options();\r\n                     options.forEach((o) => {\r\n                        if (o.text.indexOf(t) > -1) {\r\n                           fieldTerms.push({\r\n                              key: f.id,\r\n                              rule: \"equals\",\r\n                              value: o.id,\r\n                           });\r\n                        }\r\n                     });\r\n                     break;\r\n               }\r\n            }\r\n         });\r\n\r\n         if (fieldTerms.length > 0) {\r\n            allTerms.push({\r\n               glue: \"or\",\r\n               rules: fieldTerms,\r\n            });\r\n         }\r\n      });\r\n\r\n      if (allTerms.length > 0) {\r\n         var searchRules = {\r\n            glue: \"and\",\r\n            rules: allTerms,\r\n         };\r\n         return searchRules;\r\n      } else {\r\n         return null;\r\n      }\r\n\r\n      // let isTextValid = (rowData) => {\r\n      //    var isValid = false;\r\n\r\n      //    // if empty search text in global single mode, then no display rows\r\n      //    if (\r\n      //       this.settings.filterOption == 3 &&\r\n      //       this.settings.globalFilterPosition == \"single\" &&\r\n      //       search.replace(/ /g, \"\") == \"\"\r\n      //    ) {\r\n      //       return isValid;\r\n      //    }\r\n\r\n      //    for (let key in rowData || {}) {\r\n      //       if (isValid || key == \"uuid\" || key == \"id\") continue;\r\n\r\n      //       texts.forEach((text) => {\r\n      //          if (\r\n      //             rowData[key] &&\r\n      //             rowData[key].toString().toLowerCase().indexOf(text) > -1\r\n      //          )\r\n      //             isValid = true;\r\n      //       });\r\n      //    }\r\n\r\n      //    return isValid;\r\n      // };\r\n\r\n      // this.triggerCallback(isTextValid);\r\n\r\n      // var table = $$(DataTable.ui.id);\r\n      // var columns = table.config.columns;\r\n      // var count = 0;\r\n      // var matchArray = [];\r\n      // table.filter(function (obj) {\r\n      //    matchArray = [];\r\n      //    // console.log(\"filter\", obj);\r\n      //    for (var i = 0; i < columns.length; i++) {\r\n      //       for (var x = 0; x < text.length; x++) {\r\n      //          var searchFor = text[x];\r\n      //          if (obj[columns[i].id] && obj[columns[i].id].toString().toLowerCase().indexOf(searchFor) !== -1) {\r\n      //             // console.log(\"matched on:\", searchFor);\r\n      //             if (matchArray.indexOf(searchFor) == -1) {\r\n      //                matchArray.push(searchFor);\r\n      //             }\r\n      //          }\r\n      //       }\r\n      //    }\r\n\r\n      //    if (matchArray.length == text.length) {\r\n      //       count++;\r\n      //       return true;\r\n      //    } else {\r\n      //       return false;\r\n      //    }\r\n      // });\r\n      // if (globalFilterPosition == \"single\") {\r\n      //    if (count == 1) {\r\n      //       table.show();\r\n      //       table.select(table.getFirstId(), false);\r\n      //       table.callEvent(\"onItemClick\", [table.getFirstId(), \"auto\", null]);\r\n      //    } else {\r\n      //       table.hide();\r\n      //    }\r\n      // }\r\n   }\r\n\r\n   showPopup($view) {\r\n      // this.filter_popup.show($view, null, { pos: \"top\" });\r\n      this.rowFilter.popUp($view);\r\n   }\r\n\r\n   /**\r\n    * @param {object} App\r\n    *      The shared App object that is created in OP.Component\r\n    * @param {string} idBase\r\n    *      Identifier for this component\r\n    */\r\n   component(App, idBase) {\r\n      super.component(App, idBase);\r\n\r\n      this.App = App;\r\n      this.idBase = idBase;\r\n\r\n      this.rowFilter = this.AB.filterComplexNew(`${idBase}_filter`);\r\n      this.rowFilterForm = this.AB.filterComplexNew(`${idBase}_filter_form`);\r\n\r\n      if (this.object) {\r\n         // this.rowFilter.applicationLoad(this.object.application);\r\n         this.rowFilter.fieldsLoad(this.object.fields());\r\n\r\n         // this.rowFilterForm.applicationLoad(this.object.application);\r\n         this.rowFilterForm.fieldsLoad(this.object.fields());\r\n      }\r\n\r\n      let ids = {\r\n         /** UI */\r\n         filterPanel: App.unique(`${idBase}_filterPanel`),\r\n         globalFilterFormContainer: App.unique(\r\n            `${idBase}_globalFilterFormContainer`\r\n         ),\r\n         globalFilterForm: App.unique(`${idBase}_globalFilterForm`),\r\n         filterMenutoolbar: App.unique(`${idBase}_filterMenuToolbar`),\r\n         resetFilterButton: App.unique(`${idBase}_resetFilterButton`),\r\n         component: App.unique(`${idBase}_filterData_popup`),\r\n      };\r\n\r\n      let instance = this;\r\n\r\n      // hide filter form\r\n      this.rowFilterForm.ui.hidden = true;\r\n\r\n      let _ui = {\r\n         id: ids.filterPanel,\r\n         type: \"space\",\r\n         borderless: true,\r\n         padding: 0,\r\n         rows: [\r\n            {\r\n               id: ids.globalFilterFormContainer,\r\n               hidden: true,\r\n               cols: [\r\n                  {\r\n                     id: ids.globalFilterForm,\r\n                     view: \"text\",\r\n                     placeholder: L(\"Search or scan a barcode to see results\"),\r\n                     on: {\r\n                        onTimedKeyPress: function () {\r\n                           var searchText = this.getValue();\r\n\r\n                           logic.searchText(searchText);\r\n                        },\r\n                     },\r\n                  },\r\n                  {\r\n                     view: \"button\",\r\n                     css: \"webix_primary\",\r\n                     width: 28,\r\n                     type: \"icon\",\r\n                     icon: \"fa fa-times\",\r\n                     click: function () {\r\n                        $$(ids.globalFilterForm).setValue(\"\");\r\n                        $$(ids.globalFilterForm).focus();\r\n                        $$(ids.globalFilterForm).callEvent(\"onTimedKeyPress\");\r\n                     },\r\n                  },\r\n               ],\r\n            },\r\n            this.rowFilterForm.ui,\r\n            {\r\n               view: \"toolbar\",\r\n               id: ids.filterMenutoolbar,\r\n               css: \"ab-data-toolbar\",\r\n               hidden: true,\r\n               cols: [\r\n                  {\r\n                     view: \"button\",\r\n                     css: \"webix_primary\",\r\n                     id: ids.resetFilterButton,\r\n                     label: L(\"Reset Filter\"),\r\n                     icon: \"fa fa-ban\",\r\n                     type: \"icon\",\r\n                     badge: 0,\r\n                     autowidth: true,\r\n                     click: function () {\r\n                        logic.resetFilter();\r\n                     },\r\n                  },\r\n               ],\r\n            },\r\n         ],\r\n      };\r\n\r\n      let init = (options) => {\r\n         // this.filter_popup = webix.ui({\r\n         //    view: \"popup\",\r\n         //    id: ids.component,\r\n         //    width: 800,\r\n         //    hidden: true,\r\n         //    body: this.rowFilter.ui,\r\n         // });\r\n\r\n         // register callbacks:\r\n         for (var c in logic.callbacks) {\r\n            logic.callbacks[c] = options[c] || logic.callbacks[c];\r\n         }\r\n\r\n         this.rowFilter.init({\r\n            //    onChange: () => {\r\n            //       let filterRules = this.rowFilter.getValue().rules || [];\r\n            //       // if ($$(ids.buttonFilter)) {\r\n            //       // \t$$(ids.buttonFilter).define('badge', filterRules.length || null);\r\n            //       // \t$$(ids.buttonFilter).refresh();\r\n            //       // }\r\n            //       // be notified when there is a change in the filter\r\n            //       logic.triggerCallback((rowData) => {\r\n            //          return this.rowFilter.isValid(rowData);\r\n            //       }, filterRules);\r\n            //    },\r\n         });\r\n\r\n         this.rowFilterForm.init({\r\n            //    onChange: () => {\r\n            //       let filterRules = this.rowFilterForm.getValue().rules || [];\r\n            //       // be notified when there is a change in the filter\r\n            //       logic.triggerCallback((rowData) => {\r\n            //          return this.rowFilterForm.isValid(rowData);\r\n            //       }, filterRules);\r\n            //    },\r\n         });\r\n\r\n         $$(ids.filterPanel).hide();\r\n         if ($$(this.rowFilterForm.ui.id)) $$(this.rowFilterForm.ui.id).hide();\r\n         $$(ids.filterMenutoolbar).hide();\r\n         $$(ids.globalFilterFormContainer).hide();\r\n\r\n         switch (this.settings.filterOption) {\r\n            case 0:\r\n               break;\r\n            case 1:\r\n               switch (this.settings.userFilterPosition) {\r\n                  case \"form\":\r\n                     $$(this.rowFilterForm.ui.id).show();\r\n                     $$(ids.filterPanel).show();\r\n                     break;\r\n                  case \"toolbar\":\r\n                     $$(ids.filterPanel).hide();\r\n                     break;\r\n               }\r\n\r\n               break;\r\n            case 2:\r\n               $$(ids.filterPanel).show();\r\n               $$(ids.filterMenutoolbar).show();\r\n\r\n               // populate filter items\r\n               if (\r\n                  this.settings.queryRules &&\r\n                  this.settings.queryRules.length > 0\r\n               ) {\r\n                  this.settings.queryRules.forEach((qr) => {\r\n                     var filterRuleButton = {\r\n                        view: \"button\",\r\n                        css: \"webix_primary\",\r\n                        label: qr.ruleName,\r\n                        icon: \"fa fa-filter\",\r\n                        type: \"icon\",\r\n                        badge: 0,\r\n                        autowidth: true,\r\n                        click: function () {\r\n                           logic.selectFilter(qr.queryRules);\r\n                        },\r\n                     };\r\n                     $$(ids.filterMenutoolbar).addView(filterRuleButton);\r\n                  });\r\n               }\r\n               break;\r\n            case 3:\r\n               $$(ids.globalFilterFormContainer).show();\r\n               $$(ids.filterPanel).show();\r\n               break;\r\n         }\r\n      };\r\n\r\n      let logic = {\r\n         callbacks: {\r\n            /**\r\n             * @param {function} fnFilter\r\n             */\r\n            onFilterData: function (/*fnFilter, filterRules*/) {\r\n               console.warn(\"NO onFilterData()\");\r\n            },\r\n         },\r\n\r\n         triggerCallback: (fnFilter, filterRules) => {\r\n            instance.__currentFilter = fnFilter;\r\n            logic.callbacks.onFilterData(this.__currentFilter, filterRules);\r\n            //// TODO: this.emit(\"filter.data\", )\r\n         },\r\n\r\n         resetFilter: () => {\r\n            let showAllFn = function (/* rowData */) {\r\n                  return true;\r\n               },\r\n               filterRules = [];\r\n\r\n            logic.triggerCallback(showAllFn, filterRules);\r\n         },\r\n\r\n         selectFilter: (queryRules) => {\r\n            let id = \"hiddenQB_\" + webix.uid();\r\n\r\n            debugger;\r\n            console.error(\"::: TODO: refactor getRule()\");\r\n            let queryRule; /* = getRule(this.object, this.App, this.idBase); */\r\n\r\n            let ui = {\r\n               id: id,\r\n               hidden: true,\r\n               view: \"querybuilder\",\r\n               fields: queryRule?.conditionFields(),\r\n            };\r\n            let hiddenQB = webix.ui(ui);\r\n\r\n            hiddenQB.setValue(queryRules);\r\n\r\n            let QBHelper = hiddenQB.getFilterHelper();\r\n\r\n            hiddenQB.destructor(); // remove the QB\r\n\r\n            logic.triggerCallback(QBHelper);\r\n         },\r\n\r\n         getFilter() {\r\n            // default filter\r\n            if (instance.__currentFilter == null) {\r\n               // if empty search text in global single mode, then no display rows\r\n               if (\r\n                  instance.settings.filterOption == 3 &&\r\n                  instance.settings.globalFilterPosition == \"single\"\r\n               )\r\n                  instance.__currentFilter = (/* row */) => {\r\n                     return false;\r\n                  };\r\n               // always true, show every rows\r\n               else\r\n                  instance.__currentFilter = (/* row */) => {\r\n                     return true;\r\n                  };\r\n            }\r\n\r\n            return instance.__currentFilter;\r\n         },\r\n\r\n         showFilterPopup($view) {\r\n            instance.filter_popup.show($view, null, { pos: \"top\" });\r\n         },\r\n\r\n         closeFilterPopup() {\r\n            instance.filter_popup.hide();\r\n         },\r\n\r\n         // searchText(search) {\r\n         //    let texts = search.trim().toLowerCase().split(\" \");\r\n\r\n         //    let isTextValid = (rowData) => {\r\n         //       var isValid = false;\r\n\r\n         //       // if empty search text in global single mode, then no display rows\r\n         //       if (\r\n         //          instance.settings.filterOption == 3 &&\r\n         //          instance.settings.globalFilterPosition == \"single\" &&\r\n         //          search.replace(/ /g, \"\") == \"\"\r\n         //       ) {\r\n         //          return isValid;\r\n         //       }\r\n\r\n         //       for (let key in rowData || {}) {\r\n         //          if (isValid || key == \"uuid\" || key == \"id\") continue;\r\n\r\n         //          texts.forEach((text) => {\r\n         //             if (\r\n         //                rowData[key] &&\r\n         //                rowData[key].toString().toLowerCase().indexOf(text) > -1\r\n         //             )\r\n         //                isValid = true;\r\n         //          });\r\n         //       }\r\n\r\n         //       return isValid;\r\n         //    };\r\n\r\n         //    logic.triggerCallback(isTextValid);\r\n\r\n         //    // var table = $$(DataTable.ui.id);\r\n         //    // var columns = table.config.columns;\r\n         //    // var count = 0;\r\n         //    // var matchArray = [];\r\n         //    // table.filter(function (obj) {\r\n         //    // \tmatchArray = [];\r\n         //    // \t// console.log(\"filter\", obj);\r\n         //    // \tfor (var i = 0; i < columns.length; i++) {\r\n         //    // \t\tfor (var x = 0; x < text.length; x++) {\r\n         //    // \t\t\tvar searchFor = text[x];\r\n         //    // \t\t\tif (obj[columns[i].id] && obj[columns[i].id].toString().toLowerCase().indexOf(searchFor) !== -1) {\r\n         //    // \t\t\t\t// console.log(\"matched on:\", searchFor);\r\n         //    // \t\t\t\tif (matchArray.indexOf(searchFor) == -1) {\r\n         //    // \t\t\t\t\tmatchArray.push(searchFor);\r\n         //    // \t\t\t\t}\r\n         //    // \t\t\t}\r\n         //    // \t\t}\r\n         //    // \t}\r\n\r\n         //    // \tif (matchArray.length == text.length) {\r\n         //    // \t\tcount++;\r\n         //    // \t\treturn true;\r\n         //    // \t} else {\r\n         //    // \t\treturn false;\r\n         //    // \t}\r\n         //    // });\r\n         //    // if (globalFilterPosition == \"single\") {\r\n         //    // \tif (count == 1) {\r\n         //    // \t\ttable.show();\r\n         //    // \t\ttable.select(table.getFirstId(), false);\r\n         //    // \t\ttable.callEvent(\"onItemClick\", [table.getFirstId(), \"auto\", null]);\r\n         //    // \t} else {\r\n         //    // \t\ttable.hide();\r\n         //    // \t}\r\n         //    // }\r\n         // },\r\n      };\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: init,\r\n         logic: logic,\r\n\r\n         showPopup: logic.showFilterPopup,\r\n         closePopup: logic.closeFilterPopup,\r\n\r\n         getFilter: logic.getFilter,\r\n\r\n         searchText: logic.searchText,\r\n      };\r\n   }\r\n}\r\n","import ABViewProperty from \"./ABViewProperty\";\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nexport default class ABViewPropertyLinkPage extends ABViewProperty {\r\n   constructor() {\r\n      super();\r\n   }\r\n\r\n   /**\r\n    * @property default\r\n    * return default settings\r\n    *\r\n    * @return {Object}\r\n    */\r\n   static get default() {\r\n      return {\r\n         detailsPage: null, // uuid\r\n         detailsTab: null, // uuid\r\n         editPage: null, // uuid\r\n         editTab: null, // uuid\r\n      };\r\n   }\r\n\r\n   static propertyComponent(App, idBase) {\r\n      let base = super.propertyComponent();\r\n      const uiConfig = this.AB.Config.uiSettings();\r\n\r\n      let ids = {\r\n         detailsPage: idBase + \"_linkPage_detailsPage\",\r\n         editPage: idBase + \"_linkPage_editPage\",\r\n      };\r\n\r\n      let labels = {\r\n         common: App.labels,\r\n         component: {\r\n            // header: L(\"ab.component.grid.filterMenu\", \"*Filter Menu\")\r\n         },\r\n      };\r\n\r\n      let ui = {\r\n         view: \"fieldset\",\r\n         label: L(\"Linked Pages:\"),\r\n         labelWidth: uiConfig.labelWidthLarge,\r\n         body: {\r\n            type: \"clean\",\r\n            padding: 10,\r\n            rows: [\r\n               {\r\n                  id: ids.detailsPage,\r\n                  view: \"select\",\r\n                  name: \"detailsPage\",\r\n                  label: L(\"Details Page:\"),\r\n                  labelWidth: uiConfig.labelWidthLarge,\r\n               },\r\n               {\r\n                  id: ids.editPage,\r\n                  view: \"select\",\r\n                  name: \"editPage\",\r\n                  label: L(\"Edit Form:\"),\r\n                  labelWidth: uiConfig.labelWidthLarge,\r\n               },\r\n            ],\r\n         },\r\n      };\r\n\r\n      let init = (options) => {\r\n         // register callbacks:\r\n         for (var c in logic.callbacks) {\r\n            logic.callbacks[c] = options[c] || logic.callbacks[c];\r\n         }\r\n      };\r\n\r\n      let logic = {\r\n         callbacks: {\r\n            // onCancel: function () { console.warn('NO onCancel()!') },\r\n         },\r\n\r\n         viewLoad: (view) => {\r\n            this.view = view;\r\n\r\n            let filter = (v, widgetKey) => {\r\n               return (\r\n                  v.key == widgetKey &&\r\n                  v.settings.dataviewID == view.settings.dataviewID\r\n               );\r\n            };\r\n\r\n            // Set the options of the possible detail views\r\n            let pagesHasDetail = [];\r\n\r\n            pagesHasDetail = pagesHasDetail.concat(\r\n               view\r\n                  .pageRoot()\r\n                  .views((v) => {\r\n                     return filter(v, \"detail\");\r\n                  }, true)\r\n                  .map((p) => {\r\n                     return {\r\n                        id: p.id,\r\n                        value: p.label,\r\n                     };\r\n                  })\r\n            );\r\n\r\n            pagesHasDetail = pagesHasDetail.concat(\r\n               view\r\n                  .pageRoot()\r\n                  .pages((p) => {\r\n                     return p.views((v) => {\r\n                        return filter(v, \"detail\");\r\n                     }, true).length;\r\n                  }, true)\r\n                  .map((p) => {\r\n                     return {\r\n                        id: p.id,\r\n                        value: p.label,\r\n                     };\r\n                  })\r\n            );\r\n\r\n            pagesHasDetail.unshift({\r\n               id: \"\",\r\n               value: L(\"No linked view\"),\r\n            });\r\n            $$(ids.detailsPage).define(\"options\", pagesHasDetail);\r\n            $$(ids.detailsPage).refresh();\r\n\r\n            // Set the options of the possible edit forms\r\n            let pagesHasForm = [];\r\n\r\n            pagesHasForm = pagesHasForm.concat(\r\n               view\r\n                  .pageRoot()\r\n                  .views((v) => {\r\n                     return filter(v, \"form\");\r\n                  }, true)\r\n                  .map((p) => {\r\n                     return {\r\n                        id: p.id,\r\n                        value: p.label,\r\n                     };\r\n                  })\r\n            );\r\n\r\n            pagesHasForm = pagesHasForm.concat(\r\n               view\r\n                  .pageRoot()\r\n                  .pages((p) => {\r\n                     return p.views((v) => {\r\n                        return filter(v, \"form\");\r\n                     }, true).length;\r\n                  }, true)\r\n                  .map((p) => {\r\n                     return {\r\n                        id: p.id,\r\n                        value: p.label,\r\n                     };\r\n                  })\r\n            );\r\n\r\n            pagesHasForm.unshift({\r\n               id: \"\",\r\n               value: L(\"No linked form\"),\r\n            });\r\n            $$(ids.editPage).define(\"options\", pagesHasForm);\r\n            $$(ids.editPage).refresh();\r\n         },\r\n\r\n         setSettings: (settings) => {\r\n            var details = settings.detailsPage;\r\n            if (settings.detailsTab != \"\") {\r\n               details += \":\" + settings.detailsTab;\r\n            }\r\n            $$(ids.detailsPage).setValue(details);\r\n\r\n            var edit = settings.editPage;\r\n            if (settings.editTab != \"\") {\r\n               edit += \":\" + settings.editTab;\r\n            }\r\n            $$(ids.editPage).setValue(edit);\r\n         },\r\n\r\n         getSettings: () => {\r\n            let settings = {};\r\n\r\n            var detailsPage = $$(ids.detailsPage).getValue();\r\n            var detailsTab = \"\";\r\n            if (detailsPage.split(\":\").length > 1) {\r\n               var detailsVals = detailsPage.split(\":\");\r\n               detailsPage = detailsVals[0];\r\n               detailsTab = detailsVals[1];\r\n            }\r\n            settings.detailsPage = detailsPage;\r\n            settings.detailsTab = detailsTab;\r\n\r\n            var editPage = $$(ids.editPage).getValue();\r\n            var editTab = \"\";\r\n            if (editPage.split(\":\").length > 1) {\r\n               var editVals = editPage.split(\":\");\r\n               editPage = editVals[0];\r\n               editTab = editVals[1];\r\n            }\r\n            settings.editPage = editPage;\r\n            settings.editTab = editTab;\r\n\r\n            return settings;\r\n         },\r\n      };\r\n\r\n      return {\r\n         ui: ui,\r\n         init: init,\r\n         logic: logic,\r\n\r\n         viewLoad: logic.viewLoad,\r\n         setSettings: logic.setSettings,\r\n         getSettings: logic.getSettings,\r\n      };\r\n   }\r\n\r\n   /** == UI == */\r\n   /**\r\n    * @param {object} App\r\n    *      The shared App object that is created in OP.Component\r\n    * @param {string} idBase\r\n    *      Identifier for this component\r\n    */\r\n   component(App, idBase) {\r\n      let base = super.component(App, idBase);\r\n\r\n      /**\r\n       * @method init\r\n       * @param {Object} options - {\r\n       * \t\t\t\t\t\t\t\tview: {ABView},\r\n       * \t\t\t\t\t\t\t\tdatacollection: {ABDatacollection}\r\n       * \t\t\t\t\t\t\t}\r\n       */\r\n      let init = (options) => {\r\n         base.init(options);\r\n\r\n         if (options.view) this.view = options.view;\r\n\r\n         if (options.datacollection)\r\n            this.datacollection = options.datacollection;\r\n      };\r\n\r\n      let logic = {\r\n         changePage: (pageId, rowId) => {\r\n            if (this.datacollection) this.datacollection.setCursor(rowId);\r\n\r\n            if (this.view) this.view.changePage(pageId);\r\n         },\r\n      };\r\n\r\n      return {\r\n         ui: base.ui,\r\n         init: init,\r\n         logic: logic,\r\n\r\n         changePage: logic.changePage,\r\n      };\r\n   }\r\n}\r\n","// ABObjectWorkspaceView.js\r\n//\r\n// Manages the settings for a view in the AppBuilder Object Workspace\r\n\r\nmodule.exports = class ABObjectWorkspaceView {\r\n   constructor(attributes, object, defaultLabel) {\r\n      this.defaultLabel = defaultLabel || \"default view\";\r\n      /*\r\n\t{\r\n\t\tid:uuid(),\r\n\r\n\t}\r\n\r\n*/\r\n      // Note: keep this before .fromObj()\r\n      this.object = object;\r\n\r\n      this.fromObj(attributes || {});\r\n\r\n      // multilingual fields: label\r\n      this.object.translate(this, this, [\"label\"]);\r\n\r\n      // user ids.  if has user id, then only those users can see this.\r\n      // this.users = [];\r\n   }\r\n\r\n   /**\r\n    * unique key describing this View.\r\n    * @return {string}\r\n    */\r\n   static type() {\r\n      return \"view\";\r\n   }\r\n\r\n   /**\r\n    * @method fromObj\r\n    * take our persisted data, and properly load it\r\n    * into this object instance.\r\n    * @param {json} data  the persisted data\r\n    */\r\n   fromObj(data) {\r\n      this.id = data.id || this.object.AB.uuid();\r\n      this.isDefaultView = JSON.parse(data.isDefaultView || false);\r\n      this.translations =\r\n         data.translations ||\r\n         this.object.defaultTranslations([\"label\"], {\r\n            label: this.defaultLabel,\r\n         });\r\n   }\r\n\r\n   /**\r\n    * @method toObj()\r\n    * compile our current state into a {json} object\r\n    * that can be persisted.\r\n    */\r\n   toObj() {\r\n      this.object.unTranslate(this, this, [\"label\"]);\r\n      return {\r\n         id: this.id,\r\n         translations: this.translations,\r\n         isDefaultView: this.isDefaultView,\r\n      };\r\n   }\r\n\r\n   update(view) {\r\n      for (var key in view) {\r\n         this[key] = view[key];\r\n      }\r\n   }\r\n};\r\n","// ABObjectWorkspaceViewCollection.js\r\n//\r\n// Manages the settings for a collection of views in the AppBuilder Object Workspace\r\n\r\nconst ABObjectWorkspaceViewGrid = require(\"./ABObjectWorkspaceViewGrid\");\r\nconst ABObjectWorkspaceViewKanban = require(\"./ABObjectWorkspaceViewKanban\");\r\nconst ABObjectWorkspaceViewGantt = require(\"./ABObjectWorkspaceViewGantt\");\r\n\r\nvar hashViews = {};\r\nhashViews[ABObjectWorkspaceViewGrid.type()] = ABObjectWorkspaceViewGrid;\r\nhashViews[ABObjectWorkspaceViewKanban.type()] = ABObjectWorkspaceViewKanban;\r\nhashViews[ABObjectWorkspaceViewGantt.type()] = ABObjectWorkspaceViewGantt;\r\n\r\nconst defaultAttributes = {\r\n   currentViewID: undefined,\r\n   list: [],\r\n};\r\n\r\nmodule.exports = class ABObjectWorkspaceViewCollection {\r\n   constructor(attributes, object, AB) {\r\n      // link me to my parent ABObject\r\n      this.object = object;\r\n      this.AB = AB;\r\n\r\n      this.fromObj(attributes);\r\n   }\r\n\r\n   /**\r\n    * @method fromObj\r\n    * take our persisted data, and properly load it\r\n    * into this object instance.\r\n    * @param {json} data  the persisted data\r\n    */\r\n   fromObj(data) {\r\n      // import our Workspace View Objects\r\n      data.objectWorkspaceViews =\r\n         data.objectWorkspaceViews && data.objectWorkspaceViews.list\r\n            ? data.objectWorkspaceViews\r\n            : defaultAttributes;\r\n\r\n      // Temp\r\n      // data.objectWorkspaceViews = defaultAttributes;\r\n\r\n      if (\r\n         data.objectWorkspaceViews.list.filter((v) => v.isDefaultView)\r\n            .length === 0\r\n      ) {\r\n         // We should always have at least one default grid view. So if this list\r\n         // is empty we can assume we're 'upgrading' from the old single-view workspace...\r\n\r\n         /// So we import the 'old' format workspace settings\r\n         if (typeof data.objectWorkspace != \"undefined\") {\r\n            if (typeof data.objectWorkspace.sortFields == \"undefined\")\r\n               data.objectWorkspace.sortFields = [];\r\n            if (typeof data.objectWorkspace.filterConditions == \"undefined\")\r\n               data.objectWorkspace.filterConditions = [];\r\n            if (typeof data.objectWorkspace.frozenColumnID == \"undefined\")\r\n               data.objectWorkspace.frozenColumnID = \"\";\r\n            if (typeof data.objectWorkspace.hiddenFields == \"undefined\")\r\n               data.objectWorkspace.hiddenFields = [];\r\n         }\r\n\r\n         // ...and initialize our grid view attributes\r\n         var gridAttributes = data.objectWorkspace || {\r\n            sortFields: [], // array of columns with their sort configurations\r\n            filterConditions: [], // array of filters to apply to the data table\r\n            frozenColumnID: \"\", // id of column you want to stop freezing\r\n            hiddenFields: [], // array of [ids] to add hidden:true to\r\n         };\r\n         gridAttributes.isDefaultView = true;\r\n\r\n         var defaultGrid = new ABObjectWorkspaceViewGrid(\r\n            gridAttributes,\r\n            this.object\r\n         );\r\n         data.objectWorkspaceViews.list.unshift(defaultGrid);\r\n      }\r\n\r\n      this.importViews(data.objectWorkspaceViews);\r\n\r\n      this.currentViewID = data.objectWorkspaceViews.currentViewID;\r\n      if (!this.currentViewID) {\r\n         this.currentViewID = this.list()[0].id;\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method toObj()\r\n    *\r\n    * properly compile the current state of this ABApplication instance\r\n    * into the values needed for saving to the DB.\r\n    *\r\n    * Most of the instance data is stored in .json field, so be sure to\r\n    * update that from all the current values of our child fields.\r\n    *\r\n    * @return {json}\r\n    */\r\n   toObj() {\r\n      return {\r\n         currentViewID: this.currentViewID,\r\n         list: this.exportViews(),\r\n      };\r\n   }\r\n\r\n   list(fn = () => true) {\r\n      return this._views.filter(fn);\r\n   }\r\n\r\n   importViews(viewSettings) {\r\n      this._views = [];\r\n      viewSettings.list.forEach((view) => {\r\n         this.addView(view, false);\r\n      });\r\n   }\r\n\r\n   exportViews() {\r\n      var views = [];\r\n      this._views.forEach((view) => {\r\n         views.push(view.toObj());\r\n      });\r\n\r\n      return views;\r\n   }\r\n\r\n   setCurrentView(viewID) {\r\n      this.currentViewID = viewID;\r\n   }\r\n\r\n   getCurrentView() {\r\n      return this.list((v) => {\r\n         return v.id == this.currentViewID;\r\n      })[0];\r\n   }\r\n\r\n   addView(view, save = true) {\r\n      var newView = new hashViews[view.type](view, this.object);\r\n      this._views.push(newView);\r\n      if (save) {\r\n         this.object.save();\r\n      }\r\n      return newView;\r\n   }\r\n\r\n   removeView(view) {\r\n      var indexToRemove = this._views.indexOf(view);\r\n      this._views.splice(indexToRemove, 1);\r\n      if (view.id === this.currentViewID) {\r\n         this.currentViewID = this._views[0].id;\r\n      }\r\n      this.object.save();\r\n   }\r\n\r\n   updateView(viewToUpdate, view) {\r\n      var newView;\r\n      if (view.type === viewToUpdate.type) {\r\n         viewToUpdate.update(view);\r\n         newView = viewToUpdate;\r\n      } else {\r\n         newView = new hashViews[view.type](view, this.object);\r\n         var indexToRemove = this._views.indexOf(viewToUpdate);\r\n         this._views.splice(indexToRemove, 1, newView);\r\n         if (this.currentViewID === viewToUpdate.id) {\r\n            this.currentViewID = newView.id;\r\n         }\r\n      }\r\n      this.object.save();\r\n      return newView;\r\n   }\r\n};\r\n","// ABObjectWorkspaceViewComponent.js\r\n//\r\n\r\nmodule.exports = class ABObjectWorkspaceViewComponent {\r\n   constructor(options) {\r\n      this.elements =\r\n         options.elements ||\r\n         function () {\r\n            return [];\r\n         };\r\n      this.init = options.init || function () {};\r\n      this.validate =\r\n         options.validate ||\r\n         function () {\r\n            return true;\r\n         };\r\n      this.values =\r\n         options.values ||\r\n         function () {\r\n            return {};\r\n         };\r\n      this.logic = options.logic || {};\r\n   }\r\n};\r\n","// ABObjectWorkspaceViewGantt.js\r\n//\r\n// Manages the settings for a Gantt Chart View in the AppBuilder Object Workspace\r\n\r\nconst ABObjectWorkspaceView = require(\"./ABObjectWorkspaceView\");\r\nconst ABObjectWorkspaceViewComponent = require(\"./ABObjectWorkspaceViewComponent\");\r\n\r\nconst ABPopupNewDataField = require(\"../../../ABDesigner/ab_work_object_workspace_popupNewDataField\");\r\n\r\nconst ABFieldDate = require(\"../dataFields/ABFieldDate\");\r\nconst ABFieldNumber = require(\"../dataFields/ABFieldNumber\");\r\nconst ABFieldString = require(\"../dataFields/ABFieldString\");\r\nconst ABFieldLongText = require(\"../dataFields/ABFieldLongText\");\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nvar defaultValues = {\r\n   name: \"Default Gantt\",\r\n   filterConditions: [], // array of filters to apply to the data table\r\n   sortFields: [],\r\n   title: \"none\", // id of a ABFieldString, ABFieldLongText\r\n   startDate: null, // id of a ABFieldDate\r\n   endDate: \"none\", // id of a ABFieldDate\r\n   duration: \"none\", // id of a ABFieldNumber\r\n   progress: \"none\", // id of a ABFieldNumber\r\n   notes: \"none\", // id of a ABFieldString, ABFieldLongText\r\n};\r\n\r\nmodule.exports = class ABObjectWorkspaceViewGantt extends (\r\n   ABObjectWorkspaceView\r\n) {\r\n   constructor(attributes, object) {\r\n      super(attributes, object, \"gantt\");\r\n\r\n      /*\r\n         {\r\n            id:uuid(),\r\n            type:'gantt',  \r\n            filterConditions:[],\r\n         }\r\n      \r\n      */\r\n   }\r\n\r\n   /**\r\n    * unique key describing this View.\r\n    * @return {string}\r\n    */\r\n   static type() {\r\n      return \"gantt\";\r\n   }\r\n\r\n   /**\r\n    * @return {string}\r\n    */\r\n   static icon() {\r\n      return \"fa fa-tasks\";\r\n   }\r\n\r\n   static component(App, idBase) {\r\n      let ids = {\r\n         title: App.unique(`${idBase}_popupGanttTitle`),\r\n         startDate: App.unique(`${idBase}_popupGanttStartDate`),\r\n         endDate: App.unique(`${idBase}_popupGanttEndDate`),\r\n         duration: App.unique(`${idBase}_popupGanttDuration`),\r\n         progress: App.unique(`${idBase}_popupGanttProgress`),\r\n         notes: App.unique(`${idBase}_popupGanttNotes`),\r\n      };\r\n\r\n      let refreshOptions = (object, view) => {\r\n         let dateFields = object\r\n            .fields((f) => f instanceof ABFieldDate)\r\n            .map(({ id, label }) => ({ id, value: label }));\r\n\r\n         // Start date\r\n         $$(ids.startDate).define(\"options\", dateFields);\r\n\r\n         // Add default option\r\n         dateFields.unshift({\r\n            id: \"none\",\r\n            value: L(\"Select a date field\"),\r\n         });\r\n\r\n         // End date\r\n         $$(ids.endDate).define(\"options\", dateFields);\r\n\r\n         // Duration\r\n         let numberFields = object\r\n            .fields((f) => f instanceof ABFieldNumber)\r\n            .map(({ id, label }) => ({ id, value: label }));\r\n\r\n         // Add default option\r\n         numberFields.unshift({\r\n            id: \"none\",\r\n            value: L(\"Select a number field\"),\r\n         });\r\n         $$(ids.duration).define(\"options\", numberFields);\r\n\r\n         // Progress\r\n         let decimalFields = object\r\n            .fields((f) => f instanceof ABFieldNumber)\r\n            .map(({ id, label }) => ({ id, value: label }));\r\n\r\n         // Add default option\r\n         decimalFields.unshift({\r\n            id: \"none\",\r\n            value: L(\"Select a number field\"),\r\n         });\r\n         $$(ids.progress).define(\"options\", decimalFields);\r\n\r\n         // Title & Notes\r\n         let stringFields = object\r\n            .fields(\r\n               (f) => f instanceof ABFieldString || f instanceof ABFieldLongText\r\n            )\r\n            .map(({ id, label }) => ({ id, value: label }));\r\n\r\n         // Add default option\r\n         stringFields.unshift({\r\n            id: \"none\",\r\n            value: L(\"Select a string field\"),\r\n         });\r\n         $$(ids.title).define(\"options\", stringFields);\r\n         $$(ids.notes).define(\"options\", stringFields);\r\n\r\n         // Select view's values\r\n         if (view && view.title) {\r\n            $$(ids.title).define(\"value\", view.title);\r\n            $$(ids.title).refresh();\r\n         }\r\n\r\n         if (view && view.startDate) {\r\n            $$(ids.startDate).define(\"value\", view.startDate);\r\n            $$(ids.startDate).refresh();\r\n         }\r\n\r\n         if (view && view.endDate) {\r\n            $$(ids.endDate).define(\r\n               \"value\",\r\n               view.endDate || defaultValues.endDate\r\n            );\r\n            $$(ids.endDate).refresh();\r\n         }\r\n\r\n         if (view && view.duration) {\r\n            $$(ids.duration).define(\r\n               \"value\",\r\n               view.duration || defaultValues.duration\r\n            );\r\n            $$(ids.duration).refresh();\r\n         }\r\n\r\n         if (view && view.progress) {\r\n            $$(ids.progress).define(\"value\", view.progress);\r\n            $$(ids.progress).refresh();\r\n         }\r\n\r\n         if (view && view.notes) {\r\n            $$(ids.notes).define(\"value\", view.notes);\r\n            $$(ids.notes).refresh();\r\n         }\r\n      };\r\n\r\n      var PopupNewDataFieldComponent = new ABPopupNewDataField(\r\n         App,\r\n         `${idBase}_gantt`\r\n      );\r\n\r\n      let ViewComponent = new ABObjectWorkspaceViewComponent({\r\n         elements: () => {\r\n            return {\r\n               batch: \"gantt\",\r\n               rows: [\r\n                  {\r\n                     cols: [\r\n                        {\r\n                           id: ids.title,\r\n                           view: \"richselect\",\r\n                           label: `<span class='webix_icon fa fa-calendar'></span> ${L(\r\n                              \"Title\"\r\n                           )}`,\r\n                           placeholder: L(\"Select a string field\"),\r\n                           labelWidth: 130,\r\n                           name: \"title\",\r\n                           options: [],\r\n                        },\r\n                        {\r\n                           view: \"button\",\r\n                           css: \"webix_primary\",\r\n                           type: \"icon\",\r\n                           icon: \"fa fa-plus\",\r\n                           label: \"\",\r\n                           width: 20,\r\n                           click: () => {\r\n                              PopupNewDataFieldComponent.show(\r\n                                 null,\r\n                                 ABFieldString.defaults().key\r\n                              );\r\n                           },\r\n                        },\r\n                     ],\r\n                  },\r\n                  {\r\n                     cols: [\r\n                        {\r\n                           id: ids.startDate,\r\n                           view: \"richselect\",\r\n                           label: `<span class='webix_icon fa fa-calendar'></span> ${L(\r\n                              \"Start Date\"\r\n                           )}`,\r\n                           placeholder: L(\"Select a date field\"),\r\n                           labelWidth: 130,\r\n                           name: \"startDate\",\r\n                           required: true,\r\n                           options: [],\r\n                        },\r\n                        {\r\n                           view: \"button\",\r\n                           css: \"webix_primary\",\r\n                           type: \"icon\",\r\n                           icon: \"fa fa-plus\",\r\n                           label: \"\",\r\n                           width: 20,\r\n                           click: () => {\r\n                              PopupNewDataFieldComponent.show(\r\n                                 null,\r\n                                 ABFieldDate.defaults().key\r\n                              );\r\n                           },\r\n                        },\r\n                     ],\r\n                  },\r\n                  {\r\n                     cols: [\r\n                        {\r\n                           id: ids.endDate,\r\n                           view: \"richselect\",\r\n                           label: `<span class='webix_icon fa fa-calendar'></span> ${L(\r\n                              \"End Date\"\r\n                           )}`,\r\n                           placeholder: L(\"Select a date field\"),\r\n                           labelWidth: 130,\r\n                           name: \"endDate\",\r\n                           options: [],\r\n                        },\r\n                        {\r\n                           view: \"button\",\r\n                           css: \"webix_primary\",\r\n                           type: \"icon\",\r\n                           icon: \"fa fa-plus\",\r\n                           label: \"\",\r\n                           width: 20,\r\n                           click: () => {\r\n                              PopupNewDataFieldComponent.show(\r\n                                 null,\r\n                                 ABFieldDate.defaults().key\r\n                              );\r\n                           },\r\n                        },\r\n                     ],\r\n                  },\r\n                  {\r\n                     cols: [\r\n                        {\r\n                           id: ids.duration,\r\n                           view: \"richselect\",\r\n                           label: `<span class='webix_icon fa fa-hashtag'></span> ${L(\r\n                              \"Duration\"\r\n                           )}`,\r\n                           placeholder: L(\"Select a number field\"),\r\n                           labelWidth: 130,\r\n                           name: \"duration\",\r\n                           options: [],\r\n                        },\r\n                        {\r\n                           view: \"button\",\r\n                           css: \"webix_primary\",\r\n                           type: \"icon\",\r\n                           icon: \"fa fa-plus\",\r\n                           label: \"\",\r\n                           width: 20,\r\n                           click: () => {\r\n                              PopupNewDataFieldComponent.show(\r\n                                 null,\r\n                                 ABFieldNumber.defaults().key\r\n                              );\r\n                           },\r\n                        },\r\n                     ],\r\n                  },\r\n                  {\r\n                     cols: [\r\n                        {\r\n                           id: ids.progress,\r\n                           view: \"richselect\",\r\n                           label: `<span class='webix_icon fa fa-hashtag'></span> ${L(\r\n                              \"Progress\"\r\n                           )}`,\r\n                           placeholder: L(\"Select a number field\"),\r\n                           labelWidth: 130,\r\n                           name: \"progress\",\r\n                           required: false,\r\n                           options: [],\r\n                        },\r\n                        {\r\n                           view: \"button\",\r\n                           css: \"webix_primary\",\r\n                           type: \"icon\",\r\n                           icon: \"fa fa-plus\",\r\n                           label: \"\",\r\n                           width: 20,\r\n                           click: () => {\r\n                              PopupNewDataFieldComponent.show(\r\n                                 null,\r\n                                 ABFieldNumber.defaults().key\r\n                              );\r\n                           },\r\n                        },\r\n                     ],\r\n                  },\r\n                  {\r\n                     cols: [\r\n                        {\r\n                           id: ids.notes,\r\n                           view: \"richselect\",\r\n                           label: `<span class='webix_icon fa fa-align-right'></span> ${L(\r\n                              \"Notes\"\r\n                           )}`,\r\n                           placeholder: L(\"Select a string field\"),\r\n                           labelWidth: 130,\r\n                           name: \"notes\",\r\n                           required: false,\r\n                           options: [],\r\n                        },\r\n                        {\r\n                           view: \"button\",\r\n                           css: \"webix_primary\",\r\n                           type: \"icon\",\r\n                           icon: \"fa fa-plus\",\r\n                           label: \"\",\r\n                           width: 20,\r\n                           click: () => {\r\n                              PopupNewDataFieldComponent.show(\r\n                                 null,\r\n                                 ABFieldLongText.defaults().key\r\n                              );\r\n                           },\r\n                        },\r\n                     ],\r\n                  },\r\n               ],\r\n            };\r\n         },\r\n\r\n         init: (object, view) => {\r\n            if (!object) return;\r\n\r\n            refreshOptions(object, view);\r\n\r\n            PopupNewDataFieldComponent.applicationLoad(object.application);\r\n            PopupNewDataFieldComponent.objectLoad(object);\r\n            PopupNewDataFieldComponent.init({\r\n               onSave: () => {\r\n                  // be notified when a new Field is created & saved\r\n\r\n                  refreshOptions(object, view);\r\n               },\r\n            });\r\n         },\r\n\r\n         validate: function ($form) {\r\n            let endDate = $$(ids.endDate).getValue() || defaultValues.endDate,\r\n               duration = $$(ids.duration).getValue() || defaultValues.duration;\r\n\r\n            if (\r\n               endDate == defaultValues.endDate &&\r\n               duration == defaultValues.duration\r\n            ) {\r\n               $form.markInvalid(\"endDate\", \"Required\");\r\n               $form.markInvalid(\"duration\", \"Required\");\r\n\r\n               return false;\r\n            } else {\r\n               return true;\r\n            }\r\n         },\r\n\r\n         values: function () {\r\n            let result = {};\r\n\r\n            result.title = $$(ids.title).getValue() || defaultValues.title;\r\n            result.startDate =\r\n               $$(ids.startDate).getValue() || defaultValues.startDate;\r\n            result.endDate =\r\n               $$(ids.endDate).getValue() || defaultValues.endDate;\r\n            result.duration =\r\n               $$(ids.duration).getValue() || defaultValues.duration;\r\n            result.progress =\r\n               $$(ids.progress).getValue() || defaultValues.progress;\r\n            result.notes = $$(ids.notes).getValue() || defaultValues.notes;\r\n\r\n            return result;\r\n         },\r\n\r\n         logic: {},\r\n      });\r\n\r\n      return ViewComponent;\r\n   }\r\n\r\n   /**\r\n    * @method fromObj\r\n    * take our persisted data, and properly load it\r\n    * into this object instance.\r\n    * @param {json} data  the persisted data\r\n    */\r\n   fromObj(data) {\r\n      super.fromObj(data);\r\n\r\n      for (var v in defaultValues) {\r\n         this[v] = data[v] || defaultValues[v];\r\n      }\r\n\r\n      this.type = ABObjectWorkspaceViewGantt.type();\r\n   }\r\n\r\n   /**\r\n    * @method toObj()\r\n    * compile our current state into a {json} object\r\n    * that can be persisted.\r\n    */\r\n   toObj() {\r\n      var obj = super.toObj();\r\n\r\n      for (var v in defaultValues) {\r\n         obj[v] = this[v];\r\n      }\r\n\r\n      obj.type = ABObjectWorkspaceViewGantt.type();\r\n      return obj;\r\n   }\r\n\r\n   get titleField() {\r\n      let viewCollection = this.object, // Should use another name property ?\r\n         object = viewCollection.object;\r\n\r\n      return object.fieldByID(this.title);\r\n   }\r\n\r\n   get startDateField() {\r\n      let viewCollection = this.object, // Should use another name property ?\r\n         object = viewCollection.object;\r\n\r\n      return object.fieldByID(this.startDate);\r\n   }\r\n\r\n   get endDateField() {\r\n      let viewCollection = this.object, // Should use another name property ?\r\n         object = viewCollection.object;\r\n\r\n      return object.fieldByID(this.endDate);\r\n   }\r\n\r\n   get durationField() {\r\n      let viewCollection = this.object, // Should use another name property ?\r\n         object = viewCollection.object;\r\n\r\n      return object.fieldByID(this.duration);\r\n   }\r\n\r\n   get progressField() {\r\n      let viewCollection = this.object, // Should use another name property ?\r\n         object = viewCollection.object;\r\n\r\n      return object.fieldByID(this.progress);\r\n   }\r\n\r\n   get notesField() {\r\n      let viewCollection = this.object,\r\n         object = viewCollection.object;\r\n\r\n      return object.fieldByID(this.notes);\r\n   }\r\n};\r\n","// ABObjectWorkspaceViewGrid.js\r\n//\r\n// Manages the settings for a Data Grid View in the AppBuilder Object Workspace\r\n\r\nconst ABObjectWorkspaceView = require(\"./ABObjectWorkspaceView\");\r\n\r\nvar defaultValues = {\r\n   name: \"Default Grid\",\r\n   sortFields: [], // array of columns with their sort configurations\r\n   filterConditions: [], // array of filters to apply to the data table\r\n   frozenColumnID: \"\", // id of column you want to stop freezing\r\n   hiddenFields: [], // array of [ids] to add hidden:true to\r\n};\r\n\r\nmodule.exports = class ABObjectWorkspaceViewGrid extends ABObjectWorkspaceView {\r\n   constructor(attributes, object) {\r\n      super(attributes, object, \"grid\");\r\n\r\n      /*\r\n\t{\r\n\t\tid:uuid(),\r\n\t\ttype:'grid',  \r\n\t\tsortFields:[],\r\n\t\tfilterConditions:[],\r\n\t\tfrozenColumnID:\"\",\r\n\t\thiddenFields:[],\r\n\t}\r\n\r\n*/\r\n   }\r\n\r\n   /**\r\n    * unique key describing this View.\r\n    * @return {string}\r\n    */\r\n   static type() {\r\n      return \"grid\";\r\n   }\r\n\r\n   /**\r\n    * @return {string}\r\n    */\r\n   static icon() {\r\n      return \"fa fa-table\";\r\n   }\r\n\r\n   /**\r\n    * @method fromObj\r\n    * take our persisted data, and properly load it\r\n    * into this object instance.\r\n    * @param {json} data  the persisted data\r\n    */\r\n   fromObj(data) {\r\n      super.fromObj(data);\r\n\r\n      for (var v in defaultValues) {\r\n         this[v] = data[v] || defaultValues[v];\r\n      }\r\n\r\n      this.type = ABObjectWorkspaceViewGrid.type();\r\n   }\r\n\r\n   /**\r\n    * @method toObj()\r\n    * compile our current state into a {json} object\r\n    * that can be persisted.\r\n    */\r\n   toObj() {\r\n      var obj = super.toObj();\r\n\r\n      for (var v in defaultValues) {\r\n         obj[v] = this[v];\r\n      }\r\n\r\n      obj.type = \"grid\";\r\n      return obj;\r\n   }\r\n};\r\n","// ABObjectWorkspaceViewKanban.js\r\n//\r\n// Manages the settings for a Data Grid View in the AppBuilder Object Workspace\r\n\r\nconst ABObjectWorkspaceView = require(\"./ABObjectWorkspaceView\");\r\nconst ABObjectWorkspaceViewComponent = require(\"./ABObjectWorkspaceViewComponent\");\r\n\r\nconst ABPopupNewDataField = require(\"../../../ABDesigner/ab_work_object_workspace_popupNewDataField\");\r\n\r\nconst ABFieldConnect = require(\"../dataFields/ABFieldConnect\");\r\nconst ABFieldList = require(\"../dataFields/ABFieldList\");\r\nconst ABFieldUser = require(\"../dataFields/ABFieldUser\");\r\n\r\nvar defaultValues = {\r\n   name: \"Default Kanban\",\r\n   filterConditions: [], // array of filters to apply to the data table\r\n   sortFields: [],\r\n   verticalGroupingField: null,\r\n   horizontalGroupingField: null,\r\n   ownerField: null,\r\n};\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABObjectWorkspaceViewKanban extends (\r\n   ABObjectWorkspaceView\r\n) {\r\n   constructor(attributes, object) {\r\n      super(attributes, object, \"kanban\");\r\n\r\n      /*\r\n\t\t\t{\r\n\t\t\t\tid:uuid(),\r\n\t\t\t\ttype:'kanban',  \r\n\t\t\t\tfilterConditions:[],\r\n\t\t\t}\r\n\t\t\r\n\t\t*/\r\n   }\r\n\r\n   /**\r\n    * unique key describing this View.\r\n    * @return {string}\r\n    */\r\n   static type() {\r\n      return \"kanban\";\r\n   }\r\n\r\n   /**\r\n    * @return {string}\r\n    */\r\n   static icon() {\r\n      return \"fa fa-columns\";\r\n   }\r\n\r\n   static component(AB, idBase) {\r\n      let ids = {\r\n         vGroupInput: `${idBase}_popupAddViewVGroup`,\r\n         hGroupInput: `${idBase}_popupAddViewHGroup`,\r\n         ownerInput: `${idBase}_popupAddViewOwner`,\r\n      };\r\n\r\n      // let labels = {\r\n      //    common: App.labels,\r\n      //    component: {\r\n      //       vGroup: L(\"ab.add_view.kanban.vGroup\", \"*Vertical Grouping\"),\r\n      //       hGroup: L(\"ab.add_view.kanban.hGroup\", \"*Horizontal Grouping\"),\r\n      //       owner: L(\"ab.add_view.kanban.owner\", \"*Card Owner\"),\r\n      //       groupingPlaceholder: L(\r\n      //          \"ab.add_view.kanban.grouping_placeholder\",\r\n      //          \"*Select a field\"\r\n      //       ),\r\n      //       ownerPlaceholder: L(\r\n      //          \"ab.add_view.kanban.owner_placeholder\",\r\n      //          \"*Select a user field\"\r\n      //       ),\r\n      //       noneOption: L(\"ab.add_view.kanban.none_option\", \"*None\"),\r\n      //    },\r\n      // };\r\n\r\n      let refreshOptions = (object, view, options = {}) => {\r\n         // Utility function to initialize the options for a field select input\r\n         const initSelect = (\r\n            $option,\r\n            attribute,\r\n            filter = (f) => f.key === ABFieldList.defaults().key,\r\n            isRequired\r\n         ) => {\r\n            if ($option == null || object == null) return;\r\n\r\n            // populate options\r\n            var options = object\r\n               .fields()\r\n               .filter(filter)\r\n               .map(({ id, label }) => ({ id, value: label }));\r\n            if (!isRequired && options.length) {\r\n               options.unshift({\r\n                  id: 0,\r\n                  value: L(\"None\"),\r\n               });\r\n            }\r\n            $option.define(\"options\", options);\r\n\r\n            // select a value\r\n            if (view) {\r\n               if (view[attribute]) {\r\n                  $option.define(\"value\", view[attribute]);\r\n               } else if (!isRequired && options[0]) {\r\n                  $option.define(\"value\", options[0].id);\r\n               }\r\n            } else if (options.filter((o) => o.id).length === 1) {\r\n               // If there's just one (real) option, default to the first one\r\n               $option.define(\"value\", options[0].id);\r\n            }\r\n\r\n            $option.refresh();\r\n         };\r\n\r\n         const verticalGroupingFieldFilter = (field) =>\r\n            [ABFieldList.defaults().key, ABFieldUser.defaults().key].includes(\r\n               field.key\r\n            );\r\n\r\n         const horizontalGroupingFieldFilter = (field) =>\r\n            [\r\n               ABFieldConnect.defaults().key,\r\n               ABFieldList.defaults().key,\r\n               ABFieldUser.defaults().key,\r\n            ].includes(field.key);\r\n\r\n         initSelect(\r\n            options.vGroupInput || $$(ids.vGroupInput),\r\n            \"verticalGroupingField\",\r\n            verticalGroupingFieldFilter,\r\n            true\r\n         );\r\n         initSelect(\r\n            options.hGroupInput || $$(ids.hGroupInput),\r\n            \"horizontalGroupingField\",\r\n            horizontalGroupingFieldFilter,\r\n            false\r\n         );\r\n         initSelect(\r\n            options.ownerInput || $$(ids.ownerInput),\r\n            \"ownerField\",\r\n            (f) => {\r\n               // User field\r\n               return (\r\n                  f.key === ABFieldUser.defaults().key ||\r\n                  // Connected field : type 1:M\r\n                  (f.key === ABFieldConnect.defaults().key &&\r\n                     f.settings.linkType == \"one\" &&\r\n                     f.settings.linkViaType == \"many\")\r\n               );\r\n            },\r\n            false\r\n         );\r\n      };\r\n\r\n      var PopupNewDataFieldComponent = new ABPopupNewDataField(\r\n         AB,\r\n         `${idBase}_kanban`\r\n      );\r\n\r\n      return new ABObjectWorkspaceViewComponent({\r\n         elements: () => {\r\n            return {\r\n               batch: \"kanban\",\r\n               rows: [\r\n                  {\r\n                     cols: [\r\n                        {\r\n                           view: \"richselect\",\r\n                           label: `<span class='webix_icon fa fa-columns'></span> ${L(\r\n                              \"Vertical Grouping\"\r\n                           )}`,\r\n                           id: ids.vGroupInput,\r\n                           placeholder: L(\"Select a field\"),\r\n                           labelWidth: 180,\r\n                           name: \"vGroup\",\r\n                           required: true,\r\n                           options: [],\r\n                           on: {\r\n                              onChange: function (id) {\r\n                                 $$(ids.vGroupInput).validate();\r\n                                 $$(ids.hGroupInput).validate();\r\n                              },\r\n                           },\r\n                           invalidMessage: L(\"Required\"),\r\n                        },\r\n                        {\r\n                           view: \"button\",\r\n                           css: \"webix_primary\",\r\n                           type: \"icon\",\r\n                           icon: \"fa fa-plus\",\r\n                           label: \"\",\r\n                           width: 20,\r\n                           click: () => {\r\n                              PopupNewDataFieldComponent.show(\r\n                                 null,\r\n                                 ABFieldList.defaults().key\r\n                              );\r\n                           },\r\n                        },\r\n                     ],\r\n                  },\r\n                  {\r\n                     cols: [\r\n                        {\r\n                           view: \"richselect\",\r\n                           label: `<span class='webix_icon fa fa-list'></span> ${L(\r\n                              \"Horizontal Grouping\"\r\n                           )}`,\r\n                           id: ids.hGroupInput,\r\n                           placeholder: L(\"Select a field\"),\r\n                           labelWidth: 180,\r\n                           name: \"hGroup\",\r\n                           required: false,\r\n                           options: [],\r\n                           invalidMessage: L(\r\n                              \"Cannot be the same as vertical grouping field\"\r\n                           ),\r\n                           validate: (value) => {\r\n                              var vGroupValue = $$(ids.vGroupInput).getValue();\r\n                              return (\r\n                                 !vGroupValue || !value || vGroupValue !== value\r\n                              );\r\n                           },\r\n                           on: {\r\n                              onChange: function (id) {\r\n                                 $$(ids.hGroupInput).validate();\r\n                              },\r\n                           },\r\n                        },\r\n                        {\r\n                           view: \"button\",\r\n                           css: \"webix_primary\",\r\n                           type: \"icon\",\r\n                           icon: \"fa fa-plus\",\r\n                           label: \"\",\r\n                           width: 20,\r\n                           click: () => {\r\n                              PopupNewDataFieldComponent.show(\r\n                                 null,\r\n                                 ABFieldList.defaults().key\r\n                              );\r\n                           },\r\n                        },\r\n                     ],\r\n                  },\r\n                  {\r\n                     cols: [\r\n                        {\r\n                           view: \"richselect\",\r\n                           label: `<span class='webix_icon fa fa-user-circle'></span> ${L(\r\n                              \"Card Owner\"\r\n                           )}`,\r\n                           placeholder: L(\"Select a user field\"),\r\n                           id: ids.ownerInput,\r\n                           labelWidth: 180,\r\n                           name: \"owner\",\r\n                           options: [],\r\n                        },\r\n                        {\r\n                           view: \"button\",\r\n                           css: \"webix_primary\",\r\n                           type: \"icon\",\r\n                           icon: \"fa fa-plus\",\r\n                           label: \"\",\r\n                           width: 20,\r\n                           click: () => {\r\n                              PopupNewDataFieldComponent.show(\r\n                                 null,\r\n                                 ABFieldConnect.defaults().key\r\n                              );\r\n                           },\r\n                        },\r\n                     ],\r\n                  },\r\n               ],\r\n            };\r\n         },\r\n\r\n         init: (object, view) => {\r\n            refreshOptions(object, view);\r\n\r\n            PopupNewDataFieldComponent.applicationLoad(object.application);\r\n            PopupNewDataFieldComponent.objectLoad(object);\r\n            PopupNewDataFieldComponent.init({\r\n               onSave: () => {\r\n                  // be notified when a new Field is created & saved\r\n\r\n                  refreshOptions(object, view);\r\n               },\r\n            });\r\n         },\r\n\r\n         values: function () {\r\n            let result = {};\r\n\r\n            result.verticalGroupingField =\r\n               $$(ids.vGroupInput).getValue() || null;\r\n            result.horizontalGroupingField =\r\n               $$(ids.hGroupInput).getValue() || null;\r\n            result.ownerField = $$(ids.ownerInput).getValue() || null;\r\n\r\n            return result;\r\n         },\r\n\r\n         logic: {\r\n            refreshOptions: refreshOptions,\r\n         },\r\n      });\r\n   }\r\n\r\n   /**\r\n    * @method fromObj\r\n    * take our persisted data, and properly load it\r\n    * into this object instance.\r\n    * @param {json} data  the persisted data\r\n    */\r\n   fromObj(data) {\r\n      super.fromObj(data);\r\n\r\n      for (var v in defaultValues) {\r\n         this[v] = data[v] || defaultValues[v];\r\n      }\r\n\r\n      this.type = ABObjectWorkspaceViewKanban.type();\r\n   }\r\n\r\n   /**\r\n    * @method toObj()\r\n    * compile our current state into a {json} object\r\n    * that can be persisted.\r\n    */\r\n   toObj() {\r\n      var obj = super.toObj();\r\n\r\n      for (var v in defaultValues) {\r\n         obj[v] = this[v];\r\n      }\r\n\r\n      obj.type = ABObjectWorkspaceViewKanban.type();\r\n      return obj;\r\n   }\r\n\r\n   getHorizontalGroupingField() {\r\n      let viewCollection = this.object, // Should use another name property ?\r\n         object = viewCollection.object;\r\n\r\n      return object.fieldByID(this.horizontalGroupingField);\r\n   }\r\n\r\n   getVerticalGroupingField() {\r\n      let viewCollection = this.object, // Should use another name property ?\r\n         object = viewCollection.object;\r\n\r\n      return object.fieldByID(this.verticalGroupingField);\r\n   }\r\n\r\n   getOwnerField() {\r\n      let viewCollection = this.object, // Should use another name property ?\r\n         object = viewCollection.object;\r\n\r\n      return object.fieldByID(this.ownerField);\r\n   }\r\n};\r\n","//\r\n// ABViewQueryBuilderObjectFieldConditions\r\n//\r\n// A UI component that is responsible for displaying a QueryBuilder based upon\r\n// the fields of a given ABObject.\r\n//\r\n// This object is also responsible for saving it's state to a settings value,\r\n// and generating the settings value to be saved.\r\n\r\nmodule.exports = class ABViewQueryBuilderObjectFieldConditions {\r\n   /**\r\n    * @param {object} App\r\n    *      The shared App object that is created in OP.Component\r\n    * @param {string} idBase\r\n    *      Identifier for this component\r\n    */\r\n   constructor(label) {\r\n      this.label = label;\r\n      this.ui = null;\r\n   }\r\n\r\n   /**\r\n    * cleanRules\r\n    * walk through all the QueryBuilder (QB) rules and make conversions\r\n    * of the data into their proper formats.\r\n    * @param {obj} rules  the {rules} obj that is returned from the QB object\r\n    * @param {array} fields  an array of field definitions from the QB object\r\n    * @param {bool} dateToString  convert Dates to String format?\r\n    */\r\n   cleanRules(rules, fields, dateToString) {\r\n      if (typeof dateToString == \"undefined\") dateToString = true;\r\n\r\n      // walk the given condition rules / values, walk them and make sure\r\n      // any given rules have properly formatted values.\r\n      function processCondition(rule) {\r\n         // make sure rule is provided\r\n         if (rule) {\r\n            if (rule.glue && rule.rules) {\r\n               rule.rules.forEach((r) => {\r\n                  processCondition(r);\r\n               });\r\n            } else {\r\n               // converting a single rule:\r\n\r\n               var field = fields.filter((f) => {\r\n                  return f.id == rule.key;\r\n               })[0];\r\n               if (field) {\r\n                  switch (field.type) {\r\n                     case \"number\":\r\n                     case \"formula\":\r\n                        // when getting data from the server, the numbers are\r\n                        // sent back as strings (\"100.25\").\r\n                        // make sure to convert strings to numbers:\r\n                        if (typeof rule.value == \"string\") {\r\n                           if (rule.value.indexOf(\".\") == -1) {\r\n                              rule.value = parseInt(rule.value);\r\n                           } else {\r\n                              rule.value = parseFloat(rule.value);\r\n                           }\r\n                        }\r\n                        break;\r\n                     case \"date\":\r\n                        // in some cases we want to convert the Date() object returned\r\n                        // by QueryBuilder into a string for saving on the Server.\r\n                        if (dateToString) {\r\n                           // if we have a Date() obj returned from QueryBuilder,\r\n                           // convert to a string format:\r\n                           if (rule.value instanceof Date) {\r\n                              rule.value = webix.i18n.dateFormatStr(rule.value);\r\n                           }\r\n                        } else {\r\n                           // in other cases we want to convert the string returned\r\n                           // by the server into a Date() for the QB\r\n                           if (typeof rule.value == \"string\") {\r\n                              rule.value = new Date(rule.value);\r\n                           }\r\n                        }\r\n\r\n                        break;\r\n                  }\r\n               }\r\n            }\r\n         }\r\n      }\r\n      processCondition(rules);\r\n   }\r\n\r\n   // component\r\n   // initialize the UI display for this popup editor.\r\n   component(App, idBase) {\r\n      this.App = App;\r\n      this.idBase = idBase;\r\n\r\n      var L = App.Label;\r\n\r\n      var uniqueInstanceID = webix.uid();\r\n      var myUnique = (key) => {\r\n         // return this.unique(idBase + key ) + '_' + uniqueInstanceID;\r\n         return `${idBase}_${key}_${uniqueInstanceID}`;\r\n      };\r\n\r\n      // internal list of Webix IDs to reference our UI components.\r\n      var ids = (this.ids = {\r\n         component: myUnique(\"qbObjectFieldConditions\"),\r\n         queryBuilder: myUnique(\"qBuilder\"),\r\n         queryBuilderContainer: myUnique(\"qBuilderContainer\"),\r\n         queryBuilderLayout: myUnique(\"qBuilderLayout\"),\r\n         showQBButton: myUnique(\"showQBButton\"),\r\n      });\r\n\r\n      // webix UI definition:\r\n      this.ui = {\r\n         view: \"layout\",\r\n         id: ids.queryBuilderLayout,\r\n         hidden: true,\r\n         type: \"line\",\r\n         rows: [\r\n            {\r\n               id: ids.showQBButton,\r\n               cols: [\r\n                  { fillspace: true },\r\n                  {\r\n                     view: \"button\",\r\n                     css: \"webix_primary\",\r\n                     name: \"addqb\",\r\n                     value: L(\"Add Custom Conditions\"),\r\n                     autowidth: true,\r\n                     click: function () {\r\n                        $$(ids.queryBuilderContainer).show();\r\n                        $$(ids.showQBButton).hide();\r\n                        // _logic.buttonCancel();\r\n                     },\r\n                  },\r\n                  { fillspace: true },\r\n               ],\r\n            },\r\n            {\r\n               hidden: true,\r\n               id: ids.queryBuilderContainer,\r\n               cols: [\r\n                  {\r\n                     view: \"querybuilder\",\r\n                     id: ids.queryBuilder,\r\n                     fields: this.conditionFields(),\r\n                  },\r\n               ],\r\n            },\r\n         ],\r\n      };\r\n\r\n      // tack on a label if provided.\r\n      if (this.label) {\r\n         this.ui.rows[1].cols.unshift({\r\n            view: \"label\",\r\n            css: \"ab-text-bold\",\r\n            label: this.label,\r\n            width: this.AB.UISettings.config().labelWidthLarge,\r\n         });\r\n      }\r\n\r\n      // for setting up UI\r\n      this.init = (options) => {\r\n         options = options || {};\r\n\r\n         // register callbacks:\r\n         for (var c in _logic.callbacks) {\r\n            _logic.callbacks[c] = options[c] || _logic.callbacks[c];\r\n         }\r\n      };\r\n\r\n      // internal business logic\r\n      var _logic = (this._logic = {\r\n         callbacks: {\r\n            onCancel: function () {\r\n               console.warn(\"NO onCancel()!\");\r\n            },\r\n            onSave: function (field) {\r\n               console.warn(\"NO onSave()!\");\r\n            },\r\n         },\r\n\r\n         /**\r\n          * cleanRules\r\n          * walk through all the QueryBuilder (QB) rules and make conversions\r\n          * of the data into their proper formats.\r\n          * @param {obj} rules  the {rules} obj that is returned from the QB object\r\n          * @param {array} fields  an array of field definitions from the QB object\r\n          * @param {bool} dateToString  convert Dates to String format?\r\n          */\r\n         cleanRules: (rules, fields, dateToString) => {\r\n            this.cleanRules(rules, fields, dateToString);\r\n         },\r\n\r\n         getValue: () => {\r\n            var values = null;\r\n            var QB = $$(ids.queryBuilder);\r\n            if (QB) {\r\n               values = QB.getValue();\r\n            }\r\n\r\n            // convert dates to simpler format:\r\n            // by default we're getting long values: \"Mon Feb 2, 2018 GMT xxxxxxx\",\r\n            // and webix doesn't seem to understand them when we send them back.\r\n            // so save simple date values: \"mm/dd/yyyy\"\r\n            if (values) {\r\n               _logic.cleanRules(values[0], values[1], true);\r\n            }\r\n\r\n            return values;\r\n         },\r\n\r\n         setValue: (values) => {\r\n            values = values || [];\r\n            if (!Array.isArray(values)) values = [values];\r\n            if (values.length == 0) {\r\n               values.push({});\r\n            } // push default rules\r\n            if (values.length < 2) {\r\n               values.push(this.conditionFields());\r\n            }\r\n\r\n            // convert dates from our server side \"string\" format into\r\n            // Date() objects.\r\n            _logic.cleanRules(values[0], values[1], false);\r\n\r\n            var QB = $$(ids.queryBuilder);\r\n            if (QB) {\r\n               if (values[0] && values[0].rules && values[0].rules.length) {\r\n                  QB.setValue(values[0]);\r\n                  $$(ids.queryBuilderContainer).show();\r\n                  $$(ids.showQBButton).hide();\r\n               }\r\n            }\r\n         },\r\n      });\r\n\r\n      this.getValue = _logic.getValue;\r\n      this.show = _logic.show;\r\n      this.setValue = _logic.setValue;\r\n   }\r\n\r\n   objectLoad(object) {\r\n      this.currentObject = object;\r\n   }\r\n\r\n   // conditionFields()\r\n   // Return the list of fields we are able to update.\r\n   // @return {array} of querybuilder field definitions:\r\n   //\t\t\t\t\t[\r\n   // \t\t\t\t\t\t{ id:\"fname\",   value:\"First Name\", type:\"string\" },\r\n   //\t\t\t\t\t    { id:\"lname\",   value:\"Last Name\",  type:\"string\" },\r\n   //\t\t\t\t\t    { id:\"age\",     value:\"Age\",        type:\"number\" },\r\n   //\t\t\t\t\t    { id:\"bdate\",   value:\"Birth Date\", type:\"date\" }\r\n   //\t\t\t\t\t]\r\n   conditionFields() {\r\n      var fieldTypes = [\r\n         \"string\",\r\n         \"LongText\",\r\n         \"number\",\r\n         \"date\",\r\n         \"email\",\r\n         \"formula\",\r\n         \"calculate\",\r\n      ];\r\n\r\n      var currFields = [];\r\n\r\n      if (this.currentObject) {\r\n         this.currentObject.fields().forEach((f) => {\r\n            if (fieldTypes.indexOf(f.key) != -1) {\r\n               // NOTE: the .id value must match the obj[.id]  in the data set\r\n               // so if your object data looks like:\r\n               // \t{\r\n               //\t\tname_first:'Neo',\r\n               //\t\tname_last: 'The One'\r\n               //  },\r\n               // then the ids should be:\r\n               // { id:'name_first', value:'xxx', type:'string' }\r\n\r\n               let type = f.key;\r\n               if (f.key == \"formula\" || f.key == \"calculate\") type = \"number\";\r\n               else if (f.key == \"LongText\") type = \"string\";\r\n\r\n               currFields.push({\r\n                  id: f.columnName,\r\n                  value: f.label,\r\n                  type: type,\r\n               });\r\n            }\r\n         });\r\n      }\r\n\r\n      return currFields;\r\n   }\r\n\r\n   // process\r\n   // Take the provided data and process each of our rules.\r\n   // @param {obj} options\r\n   // @return {promise}\r\n   process(options) {\r\n      return new Promise((resolve, reject) => {\r\n         var numDone = 0;\r\n         var onDone = () => {\r\n            numDone++;\r\n            if (numDone >= this.listRules.length) {\r\n               resolve();\r\n            }\r\n         };\r\n\r\n         this.listRules.forEach((rule) => {\r\n            rule\r\n               .process(options)\r\n               .then(function () {\r\n                  onDone();\r\n               })\r\n               .catch((err) => {\r\n                  reject(err);\r\n               });\r\n         });\r\n\r\n         if (this.listRules.length == 0) {\r\n            resolve();\r\n         }\r\n      });\r\n   }\r\n\r\n   showQueryBuilderContainer() {\r\n      $$(this.ids.queryBuilderLayout).show();\r\n      $$(this.ids.queryBuilderContainer).show();\r\n      $$(this.ids.showQBButton).hide();\r\n   }\r\n\r\n   // // fromSettings\r\n   // // Create an initial set of default values based upon our settings object.\r\n   // // @param {obj} settings  The settings object we created in .toSettings()\r\n   // fromSettings (settings) {\r\n   // \t// settings: [\r\n   // \t//  { rule.settings },\r\n   // \t//  { rule.settings }\r\n   // \t// ]\r\n\r\n   // \t// clear any existing Rules:\r\n   // \tthis.listRules.forEach((rule)=>{\r\n   // \t\t$$(this.ids.rules).removeView(rule.ids.component);\r\n   // \t})\r\n   // \tthis.listRules = [];\r\n\r\n   // \tif (settings) {\r\n   // \t\tsettings.forEach((ruleSettings)=>{\r\n   // \t\t\tthis.addRule(ruleSettings);\r\n   // \t\t})\r\n   // \t}\r\n   // }\r\n\r\n   // // toSettings\r\n   // // create a settings object to be persisted with the application.\r\n   // // @return {array} of rule settings.\r\n   // toSettings () {\r\n   // \tvar settings = [];\r\n   // \tthis.listRules.forEach((r)=>{\r\n   // \t\tsettings.push(r.toSettings());\r\n   // \t})\r\n   // \treturn settings;\r\n   // }\r\n};\r\n","//\r\n// ABViewRule\r\n//\r\n// A component that manages an individual Rule in a Rule list.\r\n//\r\n// Each rule can manage a set of given Actions.  For each Rule, one Action\r\n// can be chosen, A condition for when that action is executed, and then\r\n// inputs for any additional data required by that action.\r\n//\r\n// Rules are used in the Interface Builder to present the designer an interface\r\n// for defining the Action+Condition:\r\n//\r\n//\r\n//\r\n// In live apps, Rules are used when processing events and determining if an\r\n// action is to be performed:\r\n//\r\n//\r\n//\r\n// A Rule needs to save it's current state to an objects settings, and to\r\n// initialize itself from those settings.\r\n//\r\nconst ObjectQueryBuilder = require(\"./ABViewQueryBuilderObjectFieldConditions\");\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABViewRule {\r\n   /**\r\n    * @param {object} App\r\n    *      The shared App object that is created in OP.Component\r\n    * @param {string} idBase\r\n    *      Identifier for this component\r\n    */\r\n   constructor(listActions) {\r\n      this.listActions = listActions || []; // the list of Actions this Rule manages\r\n\r\n      this.actionDropList = []; // the Webix UI droplist\r\n      this.listActions.forEach((a) => {\r\n         this.actionDropList.push({ id: a.key, value: a.label });\r\n      });\r\n\r\n      this.selectedAction = null; // the currently selected Action.key\r\n      if (this.actionDropList.length > 0) {\r\n         this.selectedAction = this.actionDropList[0].id;\r\n      }\r\n\r\n      this.removable = true; // can I delete this rule?\r\n\r\n      this.currentObject = null; // What ABObject is this associated with\r\n      // NOTE: this is important for Actions.\r\n\r\n      this.objectQB = null; // The QueryBuilder (QB) object\r\n\r\n      this.currentForm = null;\r\n   }\r\n\r\n   component(App, idBase) {\r\n      this.App = App;\r\n      this.idBase = idBase;\r\n\r\n      // this is different because multiple instances of this View can be displayed\r\n      // at the same time.  So make each instance Unique:\r\n      var uniqueInstanceID = webix.uid();\r\n      var myUnique = (key) => {\r\n         // return this.unique(idBase + key ) + '_' + uniqueInstanceID;\r\n         return `${idBase}_${key}_${uniqueInstanceID}`;\r\n      };\r\n\r\n      // internal list of Webix IDs to reference our UI components.\r\n      var ids = (this.ids = {\r\n         // each instance must be unique\r\n         component: myUnique(\"component\"),\r\n\r\n         selectAction: myUnique(\"chooseAction\"),\r\n\r\n         queryBuilder: myUnique(\"queryBuilder\"),\r\n\r\n         valueDisplay: myUnique(\"valueArea\"),\r\n      });\r\n\r\n      this.objectQB.label = L(\"When\");\r\n      this.objectQB.component(this.App, this.idBase);\r\n      this.ui = this._generateUI();\r\n\r\n      // for setting up UI\r\n      this.init = (options) => {\r\n         // register callbacks:\r\n         for (var c in _logic.callbacks) {\r\n            _logic.callbacks[c] = options[c] || _logic.callbacks[c];\r\n         }\r\n\r\n         this.objectQB.init();\r\n\r\n         // make sure the current Action's value display is initialized:\r\n         var Action = this.currentAction();\r\n         if (Action) {\r\n            Action.component(this.App, this.idBase);\r\n            var comp = Action.valueDisplay(ids.valueDisplay);\r\n\r\n            _logic.replaceValueDisplay(comp);\r\n\r\n            // webix.ui(comp.ui, $$(this.ids.valueDisplay));\r\n            comp.init();\r\n         }\r\n      };\r\n\r\n      // internal business logic\r\n      var _logic = (this._logic = {\r\n         callbacks: {\r\n            onDelete: function () {\r\n               console.warn(\"NO onDelete()!\");\r\n            },\r\n            onSave: function (field) {\r\n               console.warn(\"NO onSave()!\");\r\n            },\r\n         },\r\n\r\n         replaceValueDisplay: (component) => {\r\n            // remove current content area:\r\n            var $ValueDisplay = $$(this.ids.valueDisplay);\r\n            if (!$ValueDisplay) return;\r\n\r\n            var children = $ValueDisplay.getChildViews();\r\n            var cloneChildren = [];\r\n            children.forEach((c) => {\r\n               cloneChildren.push(c);\r\n            });\r\n            cloneChildren.forEach((c) => {\r\n               $ValueDisplay.removeView(c);\r\n            });\r\n\r\n            $ValueDisplay.addView(component.ui);\r\n         },\r\n\r\n         selectAction: (newValue, oldVal) => {\r\n            if (newValue) {\r\n               $$(this.ids.component)\r\n                  .getChildViews()\r\n                  .forEach((views) => {\r\n                     views.show();\r\n                  });\r\n            }\r\n            // bonus:  save current state of previous Action\r\n            var prevAction = this.getAction(oldVal);\r\n            if (prevAction) {\r\n               prevAction.stashCondition(this.objectQB.getValue());\r\n            }\r\n\r\n            // now switch to the new Action\r\n            this.selectedAction = newValue;\r\n            var currAction = this.currentAction();\r\n            if (currAction) {\r\n               // reset Condition filters.\r\n               this.objectQB.setValue(currAction.condition());\r\n\r\n               // have Action display it's values form\r\n               currAction.component(this.App, this.idBase);\r\n               var component = currAction.valueDisplay(ids.valueDisplay);\r\n               _logic.replaceValueDisplay(component);\r\n               component.init();\r\n               // currAction.valueDisplay(ids.valueDisplay);\r\n            }\r\n         },\r\n      });\r\n   }\r\n\r\n   // not intended to be called externally\r\n   _generateUI() {\r\n      return {\r\n         id: this.ids.component,\r\n         view: \"layout\",\r\n         css: \"ab-component-form-rules\",\r\n         padding: 20,\r\n         // margin: 10,\r\n\r\n         // this should be a CSS setting: this.AB.Config.xxxx\r\n         // width: 680,\r\n         type: \"line\",\r\n         rows: [\r\n            {\r\n               view: \"template\",\r\n               css: \"ab-component-form-rules-delete\",\r\n               template: '<i class=\"fa fa-trash ab-component-remove\"></i>',\r\n               height: 30,\r\n               borderless: true,\r\n               hidddatasourceen: this.removable == false,\r\n               onClick: {\r\n                  \"ab-component-remove\": (e, id, trg) => {\r\n                     this._logic.callbacks.onDelete(this);\r\n                  },\r\n               },\r\n            },\r\n            // Action\r\n            {\r\n               id: this.ids.selectAction,\r\n               view: \"richselect\",\r\n               label: L(\"Action\"),\r\n               placeholder: L(\"Choose an action\"),\r\n               labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n               options: this.actionDropList,\r\n               on: {\r\n                  onChange: (newVal, oldVal) => {\r\n                     this._logic.selectAction(newVal, oldVal);\r\n                  },\r\n               },\r\n            },\r\n\r\n            // Values\r\n            {\r\n               for: \"values\",\r\n               hidden: true,\r\n               cells: [\r\n                  {\r\n                     view: \"layout\",\r\n                     cols: [\r\n                        {\r\n                           view: \"label\",\r\n                           label: L(\"Values\"),\r\n                           css: \"ab-text-bold\",\r\n                           width: this.AB.UISettings.config().labelWidthLarge,\r\n                        },\r\n                        {\r\n                           id: this.ids.valueDisplay,\r\n                           view: \"layout\",\r\n                           rows: [\r\n                              {\r\n                                 label: L(\r\n                                    \" ABViewRule: This should be the Set Area\"\r\n                                 ),\r\n                                 css: \"ab-text-bold\",\r\n                                 height: 30,\r\n                              },\r\n                           ],\r\n                        },\r\n                     ],\r\n                  },\r\n               ],\r\n            },\r\n\r\n            // When\r\n            this.objectQB.ui,\r\n         ],\r\n      };\r\n   }\r\n\r\n   // return the QueryBuilder fields data for the currently selected Action.\r\n   conditionFields() {\r\n      var fields = [];\r\n\r\n      var selectedAction = this.currentAction();\r\n      if (selectedAction) {\r\n         fields = selectedAction.conditionFields();\r\n      }\r\n\r\n      return fields;\r\n   }\r\n\r\n   currentAction() {\r\n      return this.getAction(this.selectedAction);\r\n   }\r\n\r\n   getAction(key) {\r\n      return this.listActions.filter((a) => {\r\n         return a.key == key;\r\n      })[0];\r\n   }\r\n\r\n   objectLoad(object) {\r\n      this.currentObject = object;\r\n      this.listActions.forEach((a) => {\r\n         a.objectLoad(object);\r\n      });\r\n\r\n      var label = L(\"When\");\r\n\r\n      this.objectQB = new ObjectQueryBuilder(label);\r\n      this.objectQB.objectLoad(object);\r\n\r\n      // regenerate our UI when a new object is loaded.\r\n      if (this.ids) {\r\n         this.ui = this._generateUI();\r\n      }\r\n   }\r\n\r\n   formLoad(form) {\r\n      this.currentForm = form;\r\n      this.listActions.forEach((a) => {\r\n         a.formLoad(form);\r\n      });\r\n   }\r\n\r\n   processPre(options = {}) {\r\n      let isValid = this.isValid(options.data);\r\n      if (!isValid) return;\r\n\r\n      let currentAction = this.currentAction();\r\n      if (!currentAction) return;\r\n\r\n      currentAction.processUpdateObject({}, options.data);\r\n   }\r\n\r\n   // process\r\n   // Take the provided data and process this rule\r\n   // @param {obj} options\r\n   // @return {Promise}\r\n   process(options) {\r\n      var currentAction = this.currentAction();\r\n      if (!currentAction) return Promise.resolve();\r\n\r\n      let isValid = this.isValid(options.data);\r\n      if (isValid) {\r\n         return currentAction.process(options);\r\n      } else {\r\n         // else just resolve and continue on\r\n         return new Promise((resolve, reject) => {\r\n            resolve();\r\n         });\r\n      }\r\n   }\r\n\r\n   fromSettings(settings) {\r\n      settings = settings || {};\r\n\r\n      if (settings.selectedAction) {\r\n         // store our Query Rules\r\n         this.selectedAction = settings.selectedAction;\r\n         var selectedAction = this.currentAction();\r\n         if (!selectedAction) return;\r\n         selectedAction.stashCondition(settings.queryRules || {});\r\n\r\n         // if our UI components are present, populate them properly:\r\n         if (this.ids) {\r\n            // Trigger our UI to refresh with this selected Action:\r\n            // NOTE: this also populates the QueryBuilder\r\n            $$(this.ids.selectAction).setValue(this.selectedAction);\r\n            // this._logic.selectAction(this.selectedAction);\r\n         }\r\n\r\n         // now continue with setting up our settings:\r\n         selectedAction.fromSettings(settings.actionSettings);\r\n      }\r\n   }\r\n\r\n   toSettings() {\r\n      var settings = {};\r\n\r\n      if (this.selectedAction) {\r\n         settings.selectedAction = this.selectedAction;\r\n         settings.queryRules = this.objectQB.getValue();\r\n         let currentAction = this.currentAction();\r\n         if (currentAction) {\r\n            settings.actionSettings = currentAction.toSettings();\r\n         }\r\n      }\r\n\r\n      return settings;\r\n   }\r\n\r\n   // NOTE: Querybuilder v5.2 has a bug where it won't display the [and/or]\r\n   // choosers properly if it hasn't been shown before the .setValue() call.\r\n   // so this work around allows us to refresh the display after the .show()\r\n   // on the popup.\r\n   // When they've fixed the bug, we'll remove this workaround:\r\n   qbFixAfterShow() {\r\n      var currAction = this.currentAction();\r\n      if (currAction && this.objectQB) {\r\n         this.objectQB.setValue(currAction.condition());\r\n         currAction.qbFixAfterShow();\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method isReady()\r\n    * returns a promise that gets resolved once our action is ready to work.\r\n    * @return {Promise}\r\n    */\r\n   async isReady() {\r\n      let currentAction = this.currentAction();\r\n      if (currentAction) {\r\n         return currentAction.isReady();\r\n      }\r\n      return Promise.resolve();\r\n   }\r\n\r\n   isValid(data = {}) {\r\n      var id = \"hiddenQB_\" + webix.uid();\r\n\r\n      // if our data passes the QueryRules then tell Action to process\r\n      var ui = {\r\n         id: id,\r\n         hidden: true,\r\n         view: \"querybuilder\",\r\n      };\r\n      var hiddenQB = webix.ui(ui);\r\n\r\n      let currentAction = this.currentAction();\r\n      var QBCondition = currentAction.condition();\r\n\r\n      if (this.objectQB) {\r\n         this.objectQB.cleanRules(QBCondition[0], QBCondition[1], false);\r\n      }\r\n\r\n      let query = QBCondition[0] || {},\r\n         fields = QBCondition[1] || [];\r\n\r\n      let convertToNumber = (text = \"\") => {\r\n         // if we have multiple rules we need to check if value is already a number before converting.\r\n         if (typeof text == \"number\") return text;\r\n\r\n         return parseFloat(text.replace(/[^-0-9.]/g, \"\"));\r\n      };\r\n\r\n      // Fix string data in number type\r\n      // NOTE: \"1000\" > \"99\" = false    >_<!\r\n      fields\r\n         .filter(\r\n            (f) =>\r\n               f.type == \"number\" ||\r\n               f.type == \"calculate\" ||\r\n               f.type == \"formula\"\r\n         )\r\n         .forEach((f) => {\r\n            try {\r\n               // filter conditions\r\n               if (query && query.rules && Array.isArray(query.rules)) {\r\n                  query.rules.forEach((r) => {\r\n                     if (r.key != f.id) return;\r\n\r\n                     r.value = convertToNumber(r.value);\r\n                  });\r\n               }\r\n\r\n               // row data\r\n               if (data[f.id] && typeof data[f.id] === \"string\") {\r\n                  data[f.id] = convertToNumber(data[f.id]);\r\n               }\r\n            } catch (e) {\r\n               // continue regardless of error\r\n            }\r\n         });\r\n\r\n      // hiddenQB.setValue(QBCondition);\r\n      hiddenQB.setValue({\r\n         query: query,\r\n         fields: fields,\r\n      });\r\n\r\n      var QBHelper = hiddenQB.getFilterHelper();\r\n      var isValid = QBHelper(data);\r\n\r\n      hiddenQB.destructor(); // remove the QB\r\n\r\n      return isValid;\r\n   }\r\n\r\n   get isPreProcess() {\r\n      let currentAction = this.currentAction();\r\n      return currentAction.isPreProcess || false;\r\n   }\r\n};\r\n","//\r\n// ABViewRuleAction\r\n//\r\n// A component that manages an individual Action in a Rule.\r\n//\r\n// Each Action is responsible for figuring out when it can run, and what to do.\r\n//\r\n// Actions are used in the Interface Builder to present the designer an interface\r\n// for defining the a Condition and a set of data necessary to complete the Action:\r\n//\r\n//\r\n//\r\n// In live apps, Actions are used when processing events and determining if an\r\n// if and what is to be performed:\r\n//\r\n//\r\n//\r\n// An Action needs to save it's current state to an objects settings, and to\r\n// initialize itself from those settings.\r\n//\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABViewRuleAction {\r\n   /**\r\n    * @param {object} App\r\n    *      The shared App object that is created in OP.Component\r\n    * @param {string} idBase\r\n    *      Identifier for this component\r\n    * @param {ABViewForm} currentForm\tthe current form this Action is associated with.\r\n    */\r\n   constructor(App, idBase, currentForm) {\r\n      this.key = \"ABViewRuleAction\";\r\n\r\n      this.queryObject = null; // the current ABObject we use to create QueryBuilder information.\r\n\r\n      this.currentForm = null;\r\n\r\n      this.queryRules = {}; // default set of rules for the Query Builder condition\r\n\r\n      this.valueRules = {}; // the initial Value Rules for this Action\r\n      // The Action Subclass defines what this {} is.\r\n\r\n      this.currentForm = currentForm; // the ABViewForm object that this rule Action is tied to.\r\n   }\r\n\r\n   component(App, idBase) {\r\n      this.App = App;\r\n      this.idBase = idBase;\r\n\r\n      this.label = L(\"generic abviewruleaction\");\r\n\r\n      function myUnique(key) {\r\n         return App.unique(`${idBase}_${key}`);\r\n      }\r\n\r\n      // internal list of Webix IDs to reference our UI components.\r\n      var ids = (this.ids = {\r\n         // each instance must be unique\r\n         component: `${myUnique(\"component\")}_${webix.uid()}`,\r\n      });\r\n\r\n      this._ui = null; // internally track our UI Component value Rules\r\n\r\n      // for setting up UI\r\n      this.init = (options) => {\r\n         // register callbacks:\r\n         for (var c in _logic.callbacks) {\r\n            _logic.callbacks[c] = options[c] || _logic.callbacks[c];\r\n         }\r\n      };\r\n\r\n      // internal business logic\r\n      var _logic = (this._logic = {\r\n         callbacks: {\r\n            onDelete: function () {\r\n               console.warn(\"NO onDelete()!\");\r\n            },\r\n            onSave: function (field) {\r\n               console.warn(\"NO onSave()!\");\r\n            },\r\n         },\r\n      });\r\n   }\r\n\r\n   // condition\r\n   // Return the querybuilder setup structure for this Action.\r\n   // @return {array}  of querybuilder setup\r\n   //\t\t\t\t\t[\r\n   //\t\t\t\t\t\t{rules},\r\n   //\t\t\t\t\t\t[fields]\r\n   //\t\t\t\t\t]\r\n   condition() {\r\n      return [this.conditionRules(), this.conditionFields()];\r\n   }\r\n\r\n   // stashCondition\r\n   // capture the current set of rules provided by the QB object.\r\n   // This doesn't guarantee these will be saved to the App settings.\r\n   // Instead it is a temporary stash. Only the selected Action's\r\n   // values will be persisited to the App settings.\r\n   // @param {obj/Array} rules  The QueryBuilder rule value returned from\r\n   //\t\t\t\t\t\t\t .getValue()\r\n   //\t\t\t\t\t\t\t note: it is the first entry .getValue()[0]\r\n   //\r\n   stashCondition(rules) {\r\n      // check to see if they sent us the raw QueryBuilder values and only\r\n      // pull off the rules if they did\r\n      if (Array.isArray(rules)) {\r\n         rules = rules[0];\r\n      }\r\n\r\n      // sanity check on glue value: don't update if null or not given.\r\n      if (rules) {\r\n         // sometimes .glue is undefined  so default to 'and'\r\n         if (rules.glue != \"or\") rules.glue = \"and\";\r\n\r\n         this.queryRules = rules;\r\n      }\r\n   }\r\n\r\n   // conditionFields()\r\n   // Return the list of fields we are able to update.\r\n   // @return {array} of querybuilder field definitions:\r\n   //\t\t\t\t\t[\r\n   // \t\t\t\t\t\t{ id:\"fname\",   value:\"First Name\", type:\"string\" },\r\n   //\t\t\t\t\t    { id:\"lname\",   value:\"Last Name\",  type:\"string\" },\r\n   //\t\t\t\t\t    { id:\"age\",     value:\"Age\",        type:\"number\" },\r\n   //\t\t\t\t\t    { id:\"bdate\",   value:\"Birth Date\", type:\"date\" }\r\n   //\t\t\t\t\t]\r\n   conditionFields() {\r\n      var fieldTypes = [\"string\", \"number\", \"date\", \"formula\", \"calculate\"];\r\n\r\n      var currFields = [];\r\n\r\n      if (this.queryObject) {\r\n         this.queryObject.fields().forEach((f) => {\r\n            if (fieldTypes.indexOf(f.key) != -1) {\r\n               // NOTE: the .id value must match the obj[.id]  in the data set\r\n               // so if your object data looks like:\r\n               // \t{\r\n               //\t\tname_first:'Neo',\r\n               //\t\tname_last: 'The One'\r\n               //  },\r\n               // then the ids should be:\r\n               // { id:'name_first', value:'xxx', type:'string' }\r\n               currFields.push({\r\n                  id: f.columnName,\r\n                  value: f.label,\r\n                  type: f.key,\r\n               });\r\n            }\r\n         });\r\n      }\r\n\r\n      return currFields;\r\n   }\r\n\r\n   // conditionRules()\r\n   // Return the current rule definition object for this Action.\r\n   // @return {obj}\r\n   conditionRules() {\r\n      return this.queryRules;\r\n   }\r\n\r\n   // objectLoad\r\n   // save the current object this Action is associated with.\r\n   objectLoad(object) {\r\n      // this.currentObject = object;\t\t\t\t// DO WE NEED THIS?\r\n      this.queryObjectLoad(object);\r\n   }\r\n\r\n   // queryObjectLoad\r\n   // save the current object this Action is using to build query rules.\r\n   queryObjectLoad(object) {\r\n      this.queryObject = object;\r\n   }\r\n\r\n   formLoad(form) {\r\n      this.currentForm = form;\r\n   }\r\n\r\n   // process\r\n   // gets called when a form is submitted and the data passes the Query Builder Rules.\r\n   // @param {obj} options\r\n   // @return {Promise}\r\n   process(options) {\r\n      console.error(\r\n         \"!!! ABViewRuleAction.process() should be overridden by its child class.\"\r\n      );\r\n      return new Promise((resolve, reject) => {\r\n         reject(\r\n            new Error(\r\n               \"ABViewRuleAction.process() should be overridden by its child class.\"\r\n            )\r\n         );\r\n      });\r\n   }\r\n\r\n   // valueDisplay\r\n   // create the form to collect the specific data this Action needs to function.\r\n   // @param {string} webixID  the $$(webixID) of the area to insert our display.\r\n   valueDisplay(webixID) {\r\n      return this.valueDisplayComponent(webixID);\r\n   }\r\n\r\n   // valueDisplayComponent\r\n   // Return an ABView to display our values form.\r\n   //\r\n   valueDisplayComponent(idBase) {\r\n      return (this._ui = {\r\n         ui: {\r\n            template: \"ABViewRuleAction.valueDisplayComponent\",\r\n         },\r\n         init: (data) => {\r\n            console.error(\r\n               \"!!! ABViewRuleAction.valueDisplayComponent() should be overridden.\"\r\n            );\r\n            console.warn(\" --> passed in data:\", data);\r\n         },\r\n      });\r\n   }\r\n\r\n   // fromSettings\r\n   // initialize this Action from a given set of setting values.\r\n   // @param {obj}  settings\r\n   fromSettings(settings) {\r\n      // settings: {\r\n      //\tvalueRules:{}\r\n      // }\r\n      settings = settings || {};\r\n      this.valueRules = settings.valueRules || {};\r\n   }\r\n\r\n   // toSettings\r\n   // return an object that represents the current state of this Action\r\n   // @return {obj}\r\n   toSettings() {\r\n      var settings = {};\r\n\r\n      // require the child to insert the valueRules\r\n      return settings;\r\n   }\r\n\r\n   /**\r\n    * @method isReady()\r\n    * returns a promise that gets resolved once our action is ready to work.\r\n    * @return {Promise}\r\n    */\r\n   isReady() {\r\n      return Promise.resolve();\r\n   }\r\n\r\n   // NOTE: Querybuilder v5.2 has a bug where it won't display the [and/or]\r\n   // choosers properly if it hasn't been shown before the .setValue() call.\r\n   // so this work around allows us to refresh the display after the .show()\r\n   // on the popup.\r\n   // When they've fixed the bug, we'll remove this workaround:\r\n   qbFixAfterShow() {\r\n      // our child classes can implement this if needed.\r\n      // \t- ABViewRuleActionFormRecordRuleUpdateConnected\r\n   }\r\n};\r\n","//\r\n// ABViewRuleList\r\n//\r\n// A UI component that is responsible for displaying a list of current \"Rules\"\r\n// for a given purpose.  Some examples are the\r\n//\t\tForm -> Submit Rules,\r\n//\t\tForm -> Display Rules\r\n// \t\tForm -> Record Rules.\r\n//\r\n\r\n// ABViewRuleList is the parent object that manages displaying the common popup,\r\n// list, adding a rule, removing rules, etc...\r\n//\r\n// It is intending to be subclassed by a Specific List object that will load\r\n// up a given set of Actions for their list.\r\n//\r\n// When using it in the AppBuilder Interface Builder, this object provides:\r\n// \tvar PopupRecordList = new ABViewRuleList(App, idBase);\r\n//  PopupRecordList.fromSettings(CurrentObjectDefinition.rules); // populates List with current settings defined in CurrentObjectDefinition\r\n//  PopupRecordList.init({ onSave:()=>{}})\t// displays the popup for IB\r\n//  CurrentObjectDefinition.rules = PopupRecordList.toSettings(); // save the settings to store in json config\r\n//\r\n// When using on a live running App:\r\n//  PopupRecordList = new ABViewRuleList(App, idBase);\r\n//  PopupRecordList.fromSettings();\r\n//\r\n//  onFormSubmit(data) {\r\n//\t\t// note: this automatically validates and runs each rule:\r\n//\t\tPopupRecordList.process({data:data, view:{ current ABViewForm object }})\r\n//\t\t.then()\r\n//\t\t.catch();\r\n//  }\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABViewRuleList {\r\n   /**\r\n    * @param {object} App\r\n    *      The shared App object that is created in OP.Component\r\n    * @param {string} idBase\r\n    *      Identifier for this component\r\n    */\r\n   constructor(childSettings) {\r\n      this.listRules = [];\r\n      this.currentObject = null;\r\n\r\n      // ensure required values:\r\n      childSettings = childSettings || {};\r\n      childSettings.labels = childSettings.labels || {};\r\n      childSettings.labels.header =\r\n         childSettings.labels.header || \"ab.components.form.ruleList\";\r\n      childSettings.labels.headerDefault =\r\n         childSettings.labels.headerDefault || \"*Rule List\";\r\n      this.childSettings = childSettings;\r\n   }\r\n\r\n   /**\r\n    * @method component\r\n    * initialize the UI display for this popup editor.\r\n    * @param {obj} App  The common UI App object shared among our UI components\r\n    * @param {string} idBase A unique Key used the the base of our unique ids\r\n    */\r\n   component(App, idBase) {\r\n      this.App = this.App || App;\r\n      this.idBase = idBase;\r\n\r\n      App = App || this.App;\r\n\r\n      this.currentForm = null;\r\n\r\n      // internal list of Webix IDs to reference our UI components.\r\n      var ids = (this.ids = {\r\n         component: `${idBase}_component`,\r\n         rules: `${idBase}_rules`,\r\n         rulesScrollview: `${idBase}_rulesScrollview`,\r\n\r\n         action: `${idBase}_action`,\r\n         when: `${idBase}_when`,\r\n\r\n         values: `${idBase}_values`,\r\n         set: `${idBase}_set`,\r\n      });\r\n\r\n      // webix UI definition:\r\n      this.ui = {\r\n         view: \"window\",\r\n         id: ids.component,\r\n         modal: true,\r\n         position: \"center\",\r\n         resize: true,\r\n         width: 700,\r\n         height: 450,\r\n         css: \"ab-main-container\",\r\n         head: {\r\n            view: \"toolbar\",\r\n            css: \"webix_dark\",\r\n            cols: [\r\n               {\r\n                  view: \"label\",\r\n                  label: this.childSettings.labels.headerDefault,\r\n               },\r\n               {\r\n                  view: \"button\",\r\n                  css: \"webix_primary\",\r\n                  icon: \"fa fa-plus\",\r\n                  type: \"iconButton\",\r\n                  label: L(\"Add new rule\"),\r\n                  width: 150,\r\n                  click: () => {\r\n                     this.addRule();\r\n                     console.log($$(ids.rules).$height);\r\n                     $$(ids.rulesScrollview).scrollTo(0, $$(ids.rules).$height);\r\n                  },\r\n               },\r\n            ],\r\n         },\r\n         body: {\r\n            type: \"form\",\r\n            rows: [\r\n               {\r\n                  view: \"scrollview\",\r\n                  id: ids.rulesScrollview,\r\n                  scroll: \"xy\",\r\n                  body: {\r\n                     view: \"layout\",\r\n                     id: ids.rules,\r\n                     margin: 20,\r\n                     padding: 10,\r\n                     rows: [],\r\n                  },\r\n               },\r\n               // {\r\n               // \tcss: { 'background-color': '#fff' },\r\n               // \tcols: [\r\n               // \t\t{\r\n               // \t\t\tview: \"button\",\r\n               // \t\t\ticon: \"plus\",\r\n               // \t\t\ttype: \"iconButton\",\r\n               // \t\t\tlabel: labels.component.addNewRule,\r\n               // \t\t\twidth: 150,\r\n               // \t\t\tclick: () => {\r\n               // \t\t\t\tthis.addRule();\r\n               // \t\t\t}\r\n               // \t\t},\r\n               // \t\t{ fillspace: true }\r\n               // \t]\r\n               // },\r\n               {\r\n                  css: { \"background-color\": \"#fff\" },\r\n                  cols: [\r\n                     { fillspace: true },\r\n                     {\r\n                        view: \"button\",\r\n                        name: \"cancel\",\r\n                        value: L(\"Cancel\"),\r\n                        css: \"ab-cancel-button\",\r\n                        autowidth: true,\r\n                        click: function () {\r\n                           _logic.buttonCancel();\r\n                        },\r\n                     },\r\n                     {\r\n                        view: \"button\",\r\n                        css: \"webix_primary\",\r\n                        name: \"save\",\r\n                        label: L(\"Save\"),\r\n                        type: \"form\",\r\n                        autowidth: true,\r\n                        click: function () {\r\n                           _logic.buttonSave();\r\n                        },\r\n                     },\r\n                     { fillspace: true },\r\n                  ],\r\n               },\r\n            ],\r\n         },\r\n      };\r\n\r\n      // var _currentObject = null;\r\n      var _rules = [];\r\n\r\n      // for setting up UI\r\n      this.init = (options) => {\r\n         // register callbacks:\r\n         for (var c in _logic.callbacks) {\r\n            _logic.callbacks[c] = options[c] || _logic.callbacks[c];\r\n         }\r\n\r\n         webix.ui(this.ui);\r\n      };\r\n\r\n      // internal business logic\r\n      var _logic = (this._logic = {\r\n         buttonCancel: function () {\r\n            $$(ids.component).hide();\r\n         },\r\n\r\n         buttonSave: () => {\r\n            var results = this.toSettings();\r\n\r\n            _logic.callbacks.onSave(results);\r\n            _logic.hide();\r\n         },\r\n\r\n         callbacks: {\r\n            onCancel: function () {\r\n               console.warn(\"NO onCancel()!\");\r\n            },\r\n            onSave: function (field) {\r\n               console.warn(\"NO onSave()!\");\r\n            },\r\n         },\r\n\r\n         hide: function () {\r\n            $$(ids.component).hide();\r\n         },\r\n\r\n         show: function () {\r\n            $$(ids.component).show();\r\n         },\r\n      });\r\n\r\n      this.show = _logic.show;\r\n      this.setValue = _logic.setValue;\r\n   }\r\n\r\n   /**\r\n    * @method addRule\r\n    * Instantiate a new Rule in our list.\r\n    * @param {obj} settings  The settings object from the Rule we created in .toSettings()\r\n    */\r\n   addRule(settings) {\r\n      var Rule = this.getRule();\r\n      if (!Rule) return;\r\n\r\n      this.listRules.push(Rule);\r\n\r\n      // if we have tried to create our component:\r\n      if (this.ids) {\r\n         // if our actually exists, then populate it:\r\n         var RulesUI = $$(this.ids.rules);\r\n         if (RulesUI) {\r\n            // make sure Rule.ui is created before calling .init()\r\n            Rule.component(this.App, this.idBase); // prepare the UI component\r\n            var viewId = RulesUI.addView(Rule.ui);\r\n\r\n            Rule.init({\r\n               onDelete: (deletedRule) => {\r\n                  $$(this.ids.rules).removeView(Rule.ids.component);\r\n\r\n                  var index = this.listRules.indexOf(deletedRule);\r\n                  if (index !== -1) {\r\n                     this.listRules.splice(index, 1);\r\n                  }\r\n               },\r\n            });\r\n         }\r\n      }\r\n\r\n      if (settings) {\r\n         Rule.fromSettings(settings);\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method fromSettings\r\n    * Create an initial set of default values based upon our settings object.\r\n    * @param {obj} settings  The settings object we created in .toSettings()\r\n    */\r\n   fromSettings(settings) {\r\n      // settings: [\r\n      //  { rule.settings },\r\n      //  { rule.settings }\r\n      // ]\r\n\r\n      // clear any existing Rules:\r\n      this.listRules.forEach((rule) => {\r\n         if (\r\n            this.ids &&\r\n            this.ids.rules &&\r\n            rule &&\r\n            rule.ids &&\r\n            rule.ids.component\r\n         ) {\r\n            $$(this.ids.rules).removeView(rule.ids.component);\r\n         }\r\n      });\r\n      this.listRules = [];\r\n\r\n      if (settings) {\r\n         settings.forEach((ruleSettings) => {\r\n            this.addRule(ruleSettings);\r\n         });\r\n      }\r\n   }\r\n\r\n   /**\r\n    * @method objectLoad\r\n    * A rule is based upon a Form that was working with an Object.\r\n    * .objectLoad() is how we specify which object we are working with.\r\n    *\r\n    * @param {ABObject} The object that will be used to evaluate the Rules\r\n    */\r\n   objectLoad(object) {\r\n      this.currentObject = object;\r\n\r\n      // tell each of our rules about our object\r\n      this.listRules.forEach((r) => {\r\n         r.objectLoad(object);\r\n      });\r\n   }\r\n\r\n   processPre(options) {\r\n      (this.listRules || [])\r\n         .filter((rule) => rule.isPreProcess == true)\r\n         .forEach((rule) => {\r\n            rule.processPre(options, options.data);\r\n         });\r\n   }\r\n\r\n   /**\r\n    * @method process\r\n    * Take the provided data and process each of our rules.\r\n    * @param {obj} options\r\n    * @return {promise}\r\n    */\r\n   process(options) {\r\n      return new Promise((resolve, reject) => {\r\n         let listRules = (this.listRules || []).filter(\r\n            (rule) => !rule.isPreProcess\r\n         );\r\n\r\n         var numDone = 0;\r\n         var onDone = () => {\r\n            numDone++;\r\n            if (numDone >= listRules.length) {\r\n               resolve();\r\n            }\r\n         };\r\n\r\n         listRules.forEach((rule) => {\r\n            rule\r\n               .process(options)\r\n               .then(function () {\r\n                  onDone();\r\n               })\r\n               .catch((err) => {\r\n                  reject(err);\r\n               });\r\n         });\r\n\r\n         if (listRules.length == 0) {\r\n            resolve();\r\n         }\r\n      });\r\n   }\r\n\r\n   /**\r\n    * @method toSettings\r\n    * create a settings object to be persisted with the application.\r\n    * @return {array} of rule settings.\r\n    */\r\n   toSettings() {\r\n      var settings = [];\r\n      this.listRules.forEach((r) => {\r\n         settings.push(r.toSettings());\r\n      });\r\n      return settings;\r\n   }\r\n\r\n   getRule() {\r\n      console.error(\r\n         \"!!! ABViewRuleList.getRule() should be overridded by a child object.\"\r\n      );\r\n      return null;\r\n   }\r\n\r\n   formLoad(form) {\r\n      this.currentForm = form;\r\n      this.App = this.App || form.App;\r\n   }\r\n\r\n   /**\r\n    * @method isReady()\r\n    * returns a promise that gets resolved once our action is ready to work.\r\n    * @return {Promise}\r\n    */\r\n   rulesReady() {\r\n      // This base class should be overwritten by any subclass that needs\r\n      // to prepare:\r\n      return Promise.resolve();\r\n   }\r\n\r\n   // NOTE: Querybuilder v5.2 has a bug where it won't display the [and/or]\r\n   // choosers properly if it hasn't been shown before the .setValue() call.\r\n   // so this work around allows us to refresh the display after the .show()\r\n   // on the popup.\r\n   // When they've fixed the bug, we'll remove this workaround:\r\n   qbFixAfterShow() {\r\n      this.listRules.forEach((r) => {\r\n         r.qbFixAfterShow();\r\n      });\r\n   }\r\n};\r\n","//\r\n// ABViewRuleListFormRecordRules\r\n//\r\n// A component that is responsible for displaying the specific list of Record\r\n// Rules for a form.\r\n//\r\nconst ABViewRuleList = require(\"./ABViewRuleList\");\r\nconst ABViewRule = require(\"./ABViewRule\");\r\n\r\nconst RoleUpdateExisting = require(\"./ruleActions/ABViewRuleActionFormRecordRuleUpdate\");\r\nconst RoleInsertConnected = require(\"./ruleActions/ABViewRuleActionFormRecordRuleInsertConnected\");\r\nconst RoleUpdateConnected = require(\"./ruleActions/ABViewRuleActionFormRecordRuleUpdateConnected\");\r\nconst RoleRemoveConnected = require(\"./ruleActions/ABViewRuleActionFormRecordRuleRemoveConnected\");\r\n\r\nmodule.exports = class ABViewRuleListFormRecordRules extends ABViewRuleList {\r\n   /**\r\n    * @param {object} App\r\n    *      ?what is this?\r\n    * @param {string} idBase\r\n    *      Identifier for this component\r\n    */\r\n   constructor() {\r\n      var settings = {\r\n         labels: {\r\n            header: \"ab.components.form.recordRules\",\r\n            headerDefault: \"*Record Rules\",\r\n         },\r\n      };\r\n      super(settings);\r\n   }\r\n\r\n   // must return the actual Rule object.\r\n   getRule() {\r\n      var listActions = [\r\n         new RoleUpdateExisting(\r\n            this.App,\r\n            `${this.idBase}_ruleActionUpdate`,\r\n            this.currentForm\r\n         ),\r\n         new RoleInsertConnected(\r\n            this.App,\r\n            `${this.idBase}_ruleActionInsert`,\r\n            this.currentForm\r\n         ),\r\n         new RoleUpdateConnected(\r\n            this.App,\r\n            `${this.idBase}_ruleActionUpdateConnected`,\r\n            this.currentForm\r\n         ),\r\n         new RoleRemoveConnected(\r\n            this.App,\r\n            `${this.idBase}_ruleActionRemoveConnected`,\r\n            this.currentForm\r\n         ),\r\n      ];\r\n\r\n      var Rule = new ABViewRule(listActions);\r\n      if (this.currentObject) {\r\n         Rule.objectLoad(this.currentObject);\r\n      }\r\n      return Rule;\r\n   }\r\n\r\n   /**\r\n    * @method isReady()\r\n    * returns a promise that gets resolved once our list of Rules is\r\n    * ready to work.\r\n    * @return {Promise}\r\n    */\r\n   async rulesReady() {\r\n      var allReady = (this.listRules || []).map((r) => r.isReady());\r\n      await Promise.all(allReady);\r\n   }\r\n};\r\n","//\r\n// ABViewRuleListFormSubmitRules\r\n//\r\n// A component that is responsible for displaying the specific list of Submit\r\n// Rules for a form.\r\n//\r\nconst ABViewRuleList = require(\"./ABViewRuleList\");\r\nconst ABViewRule = require(\"./ABViewRule\");\r\n\r\nconst RoleConfirmMessage = require(\"./ruleActions/ABViewRuleActionFormSubmitRuleConfirmMessage\");\r\nconst RuleExistPage = require(\"./ruleActions/ABViewRuleActionFormSubmitRuleExistPage\");\r\nconst RuleParentPage = require(\"./ruleActions/ABViewRuleActionFormSubmitRuleParentPage\");\r\nconst RuleClosePopup = require(\"./ruleActions/ABViewRuleActionFormSubmitRuleClosePopup\");\r\nconst RuleWebsite = require(\"./ruleActions/ABViewRuleActionFormSubmitRuleWebsite\");\r\nconst RuleEmail = require(\"./ruleActions/ABViewRuleActionFormSubmitRuleEmail\");\r\n\r\nmodule.exports = class ABViewRuleListFormSubmitRules extends ABViewRuleList {\r\n   /**\r\n    * @param {object} App\r\n    *      ?what is this?\r\n    * @param {string} idBase\r\n    *      Identifier for this component\r\n    */\r\n   constructor() {\r\n      var settings = {\r\n         labels: {\r\n            header: \"ab.component.form.submitRule\",\r\n            headerDefault: \"*Submit Rules\",\r\n         },\r\n      };\r\n      super(settings);\r\n   }\r\n\r\n   // must return the actual Rule object.\r\n   getRule() {\r\n      var listActions = [\r\n         new RoleConfirmMessage(\r\n            this.App,\r\n            `${this.idBase}_ruleActionConfirmMessage`\r\n         ),\r\n         new RuleExistPage(this.App, `${this.idBase}_ruleActionExistPage`),\r\n         new RuleParentPage(this.App, `${this.idBase}_ruleActionParentPage`),\r\n         new RuleClosePopup(this.App, `${this.idBase}_ruleActionClosePopup`),\r\n         new RuleWebsite(this.App, `${this.idBase}_ruleActionWebsite`),\r\n         new RuleEmail(this.App, `${this.idBase}_ruleActionEmail`),\r\n      ];\r\n\r\n      var Rule = new ABViewRule(listActions);\r\n      Rule.objectLoad(this.currentObject);\r\n      Rule.formLoad(this.currentForm);\r\n      return Rule;\r\n   }\r\n};\r\n","//\r\n// ABViewRuleActionFormRecordRuleInsertConnected\r\n//\r\n// An action that allows you to insert a connected object.\r\n//\r\n// NOTE: this is very similar to the Update Connected Rule, so we subclass that one and\r\n// modify it to only Insert data.\r\n//\r\n//\r\nconst UpdateConnected = require(\"./ABViewRuleActionFormRecordRuleUpdateConnected\");\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABViewRuleActionFormRecordRuleInsertConnected extends (\r\n   UpdateConnected\r\n) {\r\n   /**\r\n    * @param {object} App\r\n    *      The shared App object that is created in OP.Component\r\n    * @param {string} idBase\r\n    *      Identifier for this component\r\n    */\r\n   constructor(App, idBase, currentForm) {\r\n      super(App, idBase, currentForm);\r\n\r\n      this.key = \"ABViewRuleActionFormRecordRuleInsertConnected\";\r\n      this.label = L(\"Insert Connected Object\");\r\n   }\r\n\r\n   /**\r\n    * valueDisplayChooser\r\n    * Our Values Display is a Select Box with a choice of connected fields.\r\n    * Once a field is chosen, then we display the Updater form.\r\n    * @param {string}  idBase  a unique webix id to base our sub components on.\r\n    */\r\n   valueDisplayChooser(idBase) {\r\n      var Component = super.valueDisplayChooser(idBase);\r\n\r\n      // in our case, there are no additional QB conditions:\r\n      // so overwrite the .showQBIfNeeded() routine to not show anything:\r\n      Component._logic.showQBIfNeeded = function () {};\r\n\r\n      return Component;\r\n   }\r\n\r\n   /**\r\n    * queryBuilderDisplay\r\n    * override our parent .queryBuilderDisplay to not create a new .objectQB\r\n    * @return {null}\r\n    */\r\n   queryBuilderDisplay() {\r\n      return null;\r\n   }\r\n\r\n   /**\r\n    * process\r\n    * gets called when a form is submitted and the data passes the Query Builder Rules.\r\n    * @param {obj} options\r\n    *\t\t\t\toptions.data : {obj} the key=>value of the data just entered by the form\r\n    *\t\t\t\toptions.form : {ABViewForm} the Form object that is processing this rule\r\n    * @return {Promise}\r\n    */\r\n   process(options) {\r\n      // get connected object\r\n      var connObj = this.connectedObject();\r\n      var model = connObj.model();\r\n\r\n      var connectionField = this.selectedField();\r\n\r\n      // var condition = null; // our lookup condition\r\n\r\n      // we are going to create a new instance of the connected object\r\n      // and make sure our .id is in the connected object's connectionField\r\n      // the server side will take care of making the proper relationship.\r\n\r\n      // first, create a new set of values:\r\n      var newObjectValues = {};\r\n\r\n      // update them according to our rules\r\n      this.processUpdateObject({}, newObjectValues);\r\n\r\n      if (newObjectValues.newRecords) {\r\n         // now add our .id to the proper field in newObjectValues\r\n         let connectedObjectField = connObj.fieldByID(\r\n            connectionField.settings.linkColumn\r\n         );\r\n\r\n         if (!connectedObjectField)\r\n            return Promise.reject(\"No connected object field\");\r\n\r\n         newObjectValues.newRecords.forEach((r) => {\r\n            r[connectedObjectField.columnName] = options.data.id;\r\n            // perform the update/insert\r\n            return model.create(r);\r\n         });\r\n      } else {\r\n         // now add our .id to the proper field in newObjectValues\r\n         let connectedObjectField = connObj.fieldByID(\r\n            connectionField.settings.linkColumn\r\n         );\r\n\r\n         if (!connectedObjectField)\r\n            return Promise.reject(\"No connected object field\");\r\n\r\n         newObjectValues[connectedObjectField.columnName] = options.data.id;\r\n\r\n         // perform the update/insert\r\n         return model.create(newObjectValues);\r\n      }\r\n   }\r\n\r\n   /**\r\n    * toSettings\r\n    * return an object that represents the current state of this Action\r\n    * @return {obj}\r\n    */\r\n   toSettings() {\r\n      // settings: {\r\n      // \tselectedFieldID: 'guid',\r\n      //\tvalueRules:{}\t\t// from ABViewRuleActionObjectUpdater\r\n      // }\r\n\r\n      // let our parent store our QB settings\r\n      var settings = super.toSettings();\r\n\r\n      // we don't use .qpCondition\r\n      delete settings.qbCondition;\r\n\r\n      return settings;\r\n   }\r\n};\r\n","//\r\n// ABViewRuleActionFormRecordRuleRemoveConnected\r\n//\r\n// An action that allows you to update fields on an object that is connected to\r\n// the current object we just Added/Updated\r\n//\r\n//\r\nconst ABViewRuleActionFormRecordRuleUpdateConnected = require(\"./ABViewRuleActionFormRecordRuleUpdateConnected\");\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABViewRuleActionFormRecordRuleRemoveConnected extends (\r\n   ABViewRuleActionFormRecordRuleUpdateConnected\r\n) {\r\n   constructor(App, idBase, currentForm) {\r\n      super(App, idBase, currentForm);\r\n\r\n      this.key = \"ABViewRuleActionFormRecordRuleRemoveConnected\";\r\n      this.label = L(\"Remove Connected Record\");\r\n\r\n      this.isUpdateValueDisabled = true; // disable update data of each fields\r\n   }\r\n\r\n   /**\r\n    * process\r\n    * gets called when a form is submitted and the data passes the Query Builder Rules.\r\n    * @param {obj} options\r\n    *\t\t\t\toptions.data : {obj} the key=>value of the data just entered by the form\r\n    *\t\t\t\toptions.form : {ABViewForm} the Form object that is processing this rule\r\n    * @return {Promise}\r\n    */\r\n   process(options) {\r\n      let selectedField = this.selectedField();\r\n      this._formData = options.data;\r\n\r\n      return new Promise((resolve, reject) => {\r\n         // get the model from the provided Form Obj:\r\n         let dc = options.form.datacollection;\r\n         if (!dc) return resolve();\r\n\r\n         let model = dc.model;\r\n         if (!model) return resolve();\r\n\r\n         let updatedVals = {};\r\n         updatedVals[selectedField.columnName] = \"\";\r\n\r\n         model\r\n            .update(options.data.id, updatedVals)\r\n            .then(resolve)\r\n            .catch((err) => {\r\n               this.AB.notify.developer(err, {\r\n                  message:\r\n                     \"!!! ABViewRuleActionFormRecordRuleUpdate.process(): update error:\",\r\n                  data: options.data,\r\n               });\r\n               reject(err);\r\n            });\r\n      });\r\n   }\r\n};\r\n","//\r\n// ABViewRuleActionFormRecordRuleUpdate\r\n//\r\n// An action that allows you to update fields on an object that was currently\r\n// Added/Updated.\r\n//\r\n//\r\nconst ABViewRuleActionObjectUpdater = require(\"./ABViewRuleActionObjectUpdater\");\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABViewRuleActionFormRecordRuleUpdate extends (\r\n   ABViewRuleActionObjectUpdater\r\n) {\r\n   /**\r\n    * @param {object} App\r\n    *      The shared App object that is created in OP.Component\r\n    * @param {string} idBase\r\n    *      Identifier for this component\r\n    */\r\n   constructor(App, idBase, currentForm) {\r\n      super(App, idBase, currentForm);\r\n\r\n      this.key = \"ABViewRuleActionFormRecordRuleUpdate\";\r\n      this.label = L(\"Update Record\");\r\n   }\r\n\r\n   get isPreProcess() {\r\n      return true;\r\n   }\r\n};\r\n","//\r\n// ABViewRuleActionFormRecordRuleUpdateConnected\r\n//\r\n// An action that allows you to update fields on an object that is connected to\r\n// the current object we just Added/Updated\r\n//\r\n//\r\nconst ABViewRuleActionObjectUpdater = require(\"./ABViewRuleActionObjectUpdater\");\r\nconst ABFieldConnect = require(\"../../platform/dataFields/ABFieldConnect\");\r\nconst ObjectQueryBuilder = require(\"../ABViewQueryBuilderObjectFieldConditions\");\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABViewRuleActionFormRecordRuleUpdateConnected extends (\r\n   ABViewRuleActionObjectUpdater\r\n) {\r\n   constructor(App, idBase, currentForm) {\r\n      super(App, idBase, currentForm);\r\n\r\n      this.key = \"ABViewRuleActionFormRecordRuleUpdateConnected\";\r\n      this.label = L(\"Update Connected Record\");\r\n\r\n      this.baseObject = null; // the object the current form is working with.\r\n      // Use this to find our connected fields.\r\n\r\n      this.selectedFieldID = null; // the selected field ID in the .baseObject that is\r\n      // used for updating.  This should be one of the connection Fields.\r\n\r\n      this.fieldDropList = []; // the list of fields to offer based upon the current .baseObject.\r\n\r\n      this.objectQB = null; // the QueryBuilder used for offering conditions based upon our connected Object.\r\n      this.qbCondition = null; // the QB condition entered for selecting which remote object.\r\n   }\r\n\r\n   // field\r\n\r\n   /**\r\n    * objectLoad\r\n    * save the current object this Action is associated with.\r\n    * in the case of the UpdateConnected Action, assigning us\r\n    * this object only impacts the queryObject.\r\n    *\r\n    * The Updater form will use another object we select in\r\n    * the form dropdown.\r\n    *\r\n    * @param {object} object\r\n    *\r\n    */\r\n   objectLoad(object) {\r\n      this.queryObjectLoad(object);\r\n      this.baseObject = object;\r\n\r\n      // now build our fieldDropList for the select\r\n      var connectionFields = this.connectedFieldList();\r\n      connectionFields.forEach((cf) => {\r\n         this.fieldDropList.push({\r\n            id: cf.id,\r\n            value: cf.label,\r\n         });\r\n      });\r\n   }\r\n\r\n   /**\r\n    * connectedFieldList\r\n    * return the fields in our .baseObject that are connections to other objects.\r\n    * @return {array} of {ABField}\r\n    */\r\n   connectedFieldList() {\r\n      var connectKey = ABFieldConnect.defaults().key;\r\n      if (this.baseObject && this.baseObject.fields) {\r\n         return this.baseObject.fields((f) => {\r\n            return f.key == connectKey;\r\n         });\r\n      } else {\r\n         return [];\r\n      }\r\n   }\r\n\r\n   /**\r\n    * connectedObject\r\n    * return the ABObject associated with the selected connection field.\r\n    * @return {ABObject}\r\n    */\r\n   connectedObject() {\r\n      if (this.selectedFieldID) {\r\n         var selectedField = this.selectedField();\r\n         if (selectedField) {\r\n            return selectedField.datasourceLink;\r\n         }\r\n      }\r\n\r\n      return null;\r\n   }\r\n\r\n   /**\r\n    * selectedField\r\n    * return the selected {ABField} object.\r\n    * @return {ABField}\r\n    */\r\n   selectedField() {\r\n      return this.connectedFieldList().filter((f) => {\r\n         return f.id == this.selectedFieldID;\r\n      })[0];\r\n   }\r\n\r\n   /**\r\n    * valueDisplayComponent\r\n    * Return an ABView to display our values form.\r\n    * @param {string}  idBase  a unique webix id to base our sub components on.\r\n    */\r\n   valueDisplayComponent(idBase) {\r\n      if (this._uiChooser == null) {\r\n         this._uiChooser = this.valueDisplayChooser(idBase);\r\n      }\r\n\r\n      return this._uiChooser;\r\n   }\r\n\r\n   /**\r\n    * valueDisplayChooser\r\n    * Our Values Display is a Select Box with a choice of connected fields.\r\n    * Once a field is chosen, then we display the Updater form.\r\n    * @param {string}  idBase  a unique webix id to base our sub components on.\r\n    */\r\n   valueDisplayChooser(idBase) {\r\n      var uniqueInstanceID = webix.uid();\r\n      var myUnique = (key) => {\r\n         // return idBase + '_' + key  + '_' + uniqueInstanceID;\r\n         return key + \"_\" + uniqueInstanceID;\r\n      };\r\n\r\n      var ids = {\r\n         component: myUnique(\"updateConnectedValues\"),\r\n         updateForm: myUnique(\"updateChooser\"),\r\n         selectConnectedField: myUnique(\"updateSelect\"),\r\n         updateFieldsForm: myUnique(\"updateForm\"),\r\n      };\r\n\r\n      var _ui = {\r\n         id: ids.component,\r\n         view: \"layout\",\r\n         css: \"ab-component-form-rule\",\r\n         rows: [\r\n            {\r\n               id: ids.selectConnectedField,\r\n               view: \"richselect\",\r\n               label: L(\"Select which connected object to update.\"),\r\n               labelWidth: 300,\r\n               value: this.selectedField,\r\n               options: this.fieldDropList,\r\n               on: {\r\n                  onChange: (newVal, oldVal) => {\r\n                     _logic.selectAction(newVal, oldVal);\r\n                  },\r\n               },\r\n            },\r\n         ],\r\n      };\r\n\r\n      var init = (valueRules) => {\r\n         valueRules = valueRules || this.valueRules;\r\n\r\n         // make sure our currently selected field is selected.\r\n         if (this.selectedFieldID) {\r\n            var select = $$(ids.selectConnectedField);\r\n            if (select) {\r\n               select.setValue(this.selectedFieldID);\r\n            }\r\n         }\r\n      };\r\n\r\n      var _logic = (this._logic = {\r\n         addDisplay: (view) => {\r\n            $$(ids.component).addView(view);\r\n         },\r\n\r\n         // removePreviousDisplays\r\n         // remove the previous components that reflected the conditions and\r\n         // update values of the previously selected field.\r\n         removePreviousDisplays: () => {\r\n            var allViews = $$(ids.component).getChildViews();\r\n            var cloneAllViews = [];\r\n            allViews.forEach((v) => {\r\n               cloneAllViews.push(v);\r\n            });\r\n            cloneAllViews.forEach((v) => {\r\n               // don't remove the field picker\r\n               if (v.config.id != ids.selectConnectedField) {\r\n                  $$(ids.component).removeView(v);\r\n               }\r\n            });\r\n         },\r\n\r\n         selectAction: (newVal, oldVal) => {\r\n            _logic.removePreviousDisplays(); // of the Query Builder and Update form for old selection:\r\n\r\n            this.selectedFieldID = newVal;\r\n            var connectedObject = this.connectedObject();\r\n\r\n            if (connectedObject) {\r\n               // it is the remote object that we are allowed to Update fields on.\r\n               this.updateObjectLoad(connectedObject);\r\n               ///// NOTE: important to call super.valueDisplayComponent()\r\n               this.updateComponent = super.valueDisplayComponent(\r\n                  ids.updateFieldsForm\r\n               ); // parent obj\r\n\r\n               _logic.showQBIfNeeded();\r\n\r\n               // create a new blank update form\r\n               _logic.addDisplay(this.updateComponent.ui);\r\n               this.updateComponent.init();\r\n\r\n               if (this.isUpdateValueDisabled) {\r\n                  let $updateForm = $$(this.updateComponent.ui.id);\r\n                  if ($updateForm) {\r\n                     $updateForm.disable();\r\n                     $updateForm.hide();\r\n                  }\r\n               }\r\n            } else {\r\n               this.AB.notify.builder(new Error(\"No connectedObject found.\"), {\r\n                  fieldID: this.selectedFieldID,\r\n               });\r\n            }\r\n         },\r\n\r\n         showQBIfNeeded: () => {\r\n            //// NOTE: we decided to go ahead and display the QB in ALL situations to give\r\n            //// the user the ability to set a condition on the update even if the field\r\n            //// is only a one to one.\r\n            //// If we want to remove the filter in case of a \"one\" linkType, then put\r\n            //// these conditions back in:\r\n\r\n            // var field = this.selectedField();\r\n\r\n            // // we don't need the QB if the destination object link type if 'one'.\r\n            // // there will only be one to get back, so no conditions needed.\r\n            // if (field.settings.linkType != 'one') {\r\n\r\n            var qbComponent = this.queryBuilderDisplay();\r\n\r\n            qbComponent.component(this.App, this.idBase);\r\n            _logic.addDisplay(qbComponent.ui);\r\n            qbComponent.init({});\r\n\r\n            // }\r\n         },\r\n\r\n         fromSettings: (settings) => {\r\n            // // first time through, be sure to set the connectedObject first\r\n            // this.selectedFieldID = settings.selectedFieldID;\r\n            // var connectedObject = this.connectedObject();\r\n\r\n            // this triggers the update of the display, creation of QB,\r\n            $$(ids.selectConnectedField).setValue(settings.selectedFieldID);\r\n\r\n            if (this.objectQB) {\r\n               this.objectQB.setValue(this.qbCondition);\r\n            }\r\n\r\n            if (this.updateComponent) {\r\n               this.updateComponent.fromSettings(settings);\r\n            }\r\n         },\r\n\r\n         toSettings: () => {\r\n            // valueRules = {\r\n            //\tfieldOperations:[\r\n            //\t\t{ fieldID:xxx, value:yyyy, type:zzz, op:aaa }\r\n            //\t]\r\n            // }\r\n            var settings = { fieldOperations: [] };\r\n\r\n            // for each of our formRows, decode the propery {}\r\n            this.formRows.forEach((fr) => {\r\n               var rowSettings = fr.toSettings();\r\n               if (rowSettings) {\r\n                  settings.fieldOperations.push(rowSettings);\r\n               }\r\n            });\r\n\r\n            return settings;\r\n         },\r\n      });\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: init,\r\n         fromSettings: (settings) => {\r\n            _logic.fromSettings(settings);\r\n         },\r\n         toSettings: () => {\r\n            return _logic.toSettings();\r\n         },\r\n         _logic: _logic,\r\n      };\r\n   }\r\n\r\n   /**\r\n    * queryBuilderDisplay\r\n    * returns our Query Builder object used in our display.\r\n    * It is called by the .showQBIfNeeded() method.\r\n    * @return {ABViewQueryBuilderObjectFieldConditions}\r\n    */\r\n   queryBuilderDisplay() {\r\n      if (!this.objectQB) {\r\n         this.objectQB = new ObjectQueryBuilder(\r\n            L(\"How to choose which object:\")\r\n         );\r\n\r\n         var connObj = this.connectedObject();\r\n         if (connObj) this.objectQB.objectLoad(connObj);\r\n      }\r\n      return this.objectQB;\r\n   }\r\n\r\n   /**\r\n    * process\r\n    * gets called when a form is submitted and the data passes the Query Builder Rules.\r\n    * @param {obj} options\r\n    *\t\t\t\toptions.data : {obj} the key=>value of the data just entered by the form\r\n    *\t\t\t\toptions.form : {ABViewForm} the Form object that is processing this rule\r\n    * @return {Promise}\r\n    */\r\n   process(options) {\r\n      this._formData = options.data;\r\n\r\n      // get connected object\r\n      var connObj = this.connectedObject();\r\n      var model = connObj.model();\r\n\r\n      var connectionField = this.selectedField();\r\n\r\n      var condition = null; // our lookup condition\r\n\r\n      // modifyCondition\r\n      // async fn() to fill out what the condition should be for limiting the remote\r\n      // objects to values in use by the current object.\r\n      // @param {fn} cb  the callback to use when we are finished:\r\n      //\t\t\t\t\tcb(err, )\r\n      var modifyCondition = (cb) => {\r\n         // So, let's get a copy of our current data, with all it's connected items\r\n         // attached.\r\n         var thisModel = this.baseObject.model();\r\n         thisModel\r\n            .findConnected(connectionField.columnName, options.data)\r\n            .then((items) => {\r\n               // if we didn't get any results, then simply return\r\n               // NOTE: this will leave condition == null and cancel this update.\r\n               if (!items || items.length == 0) {\r\n                  cb();\r\n                  return;\r\n               }\r\n\r\n               // then use these to limit the connected data of our Action:\r\n\r\n               // get all the ids\r\n               var ids = items.map((i) => {\r\n                  return i.id;\r\n               });\r\n\r\n               // resulting condition: { id in [listIDs]} AND { QB Condition }\r\n               condition = {\r\n                  glue: \"and\",\r\n                  rules: [\r\n                     {\r\n                        key: connObj.PK(),\r\n                        rule: \"in\",\r\n                        value: ids,\r\n                     },\r\n                  ],\r\n               };\r\n\r\n               // check to make sure qbCondition actually has a condition before adding it\r\n               // to our condition:\r\n               if (Object.keys(this.qbCondition).length > 0) {\r\n                  condition.rules.push(this.qbCondition);\r\n               }\r\n\r\n               cb();\r\n            })\r\n            .catch(cb);\r\n      };\r\n\r\n      // .process() returns a Promise\r\n      return new Promise((resolve, reject) => {\r\n         // upateIt()\r\n         // updates a given item with our changes.\r\n         // @param {obj} item  the item to update\r\n         // @param {fn}  cb    a callback function when update is complete.\r\n         var updateIt = (item, cb) => {\r\n            let isUpdated = this.processUpdateObject({}, item);\r\n            if (!isUpdated) {\r\n               cb();\r\n            } else {\r\n               model\r\n                  .update(item.id, item)\r\n                  .then(() => {\r\n                     cb();\r\n                  })\r\n                  .catch((err) => {\r\n                     this.AB.notify.developer(err, {\r\n                        message:\r\n                           \"!!! ABViewRuleActionFormRecordRuleUpdateConnected.process(): update error:\",\r\n                        data: options.data,\r\n                     });\r\n                     cb(err);\r\n                  });\r\n            }\r\n         };\r\n\r\n         // now figure out which elements belong to this object\r\n         // done in modifyCondition()\r\n         modifyCondition((err) => {\r\n            if (err) {\r\n               reject(err);\r\n               return;\r\n            }\r\n\r\n            if (condition === null) {\r\n               // this is the case where we didn't have the proper data to complete our\r\n               // update.  So let's just fail gracefully, and continue on.\r\n\r\n               // QUESTION: is this the right way to handle it?\r\n               resolve();\r\n            } else {\r\n               // get all the entries that match our condition:\r\n               model\r\n                  .findAll({ where: condition })\r\n                  .then((list) => {\r\n                     var done = 0;\r\n\r\n                     // list : {data: Array(4), total_count: 4, pos: null, offset: null, limit: null}\r\n                     if (list && list.data) {\r\n                        list = list.data;\r\n                     }\r\n\r\n                     // for each entry, update it with our values:\r\n                     list.forEach((item) => {\r\n                        updateIt(item, (err) => {\r\n                           if (err) {\r\n                              return reject(err);\r\n                           }\r\n                           done++;\r\n                           if (done >= list.length) {\r\n                              // now they are all updated, so continue.\r\n                              resolve();\r\n                           }\r\n                        });\r\n                     });\r\n\r\n                     // if there were no entries to update -> continue\r\n                     if (list.length == 0) {\r\n                        resolve();\r\n                     }\r\n                  })\r\n                  .catch(reject);\r\n            }\r\n         }); // end modifyCondition()\r\n      }); // end Promise()\r\n   }\r\n\r\n   /**\r\n    * fromSettings\r\n    * initialize this Action = require(a given set of setting values.\r\n    * @param {obj} settings  the settings {} returned = require(toSettings()\r\n    */\r\n   fromSettings(settings) {\r\n      settings = settings || {};\r\n\r\n      this.selectedFieldID = settings.selectedFieldID || null;\r\n      this.qbCondition = settings.qbCondition || {};\r\n\r\n      super.fromSettings(settings);\r\n\r\n      // if we have a display component, then populate it:\r\n      if (this._uiChooser) {\r\n         this._logic.fromSettings(settings);\r\n      }\r\n   }\r\n\r\n   /**\r\n    * toSettings\r\n    * return an object that represents the current state of this Action\r\n    * @return {obj}\r\n    */\r\n   toSettings() {\r\n      // settings: {\r\n      // \tselectedFieldID: 'guid',\r\n      //  qbCondition: [],\r\n      //\tvalueRules:{}\t\t// = require(ABViewRuleActionObjectUpdater\r\n      // }\r\n\r\n      // let our parent store our QB settings\r\n      var settings = super.toSettings();\r\n\r\n      settings.selectedFieldID = this.selectedFieldID;\r\n\r\n      var qbCond = null;\r\n      if (this.objectQB) {\r\n         qbCond = this.objectQB.getValue();\r\n         if (Array.isArray(qbCond)) {\r\n            qbCond = qbCond[0];\r\n         }\r\n\r\n         // FIX: make sure qbCond root element has a 'glue'\r\n         if (qbCond) {\r\n            qbCond.glue = qbCond.glue || \"and\";\r\n         }\r\n      }\r\n      settings.qbCondition = qbCond;\r\n\r\n      // if we have a display component, then request our details = require(it:\r\n      if (this._uiChooser) {\r\n         settings.valueRules = this._logic.toSettings();\r\n      }\r\n\r\n      return settings;\r\n   }\r\n\r\n   // NOTE: Querybuilder v5.2 has a bug where it won't display the [and/or]\r\n   // choosers properly if it hasn't been shown before the .setValue() call.\r\n   // so this work around allows us to refresh the display after the .show()\r\n   // on the popup.\r\n   // When they've fixed the bug, we'll remove this workaround:\r\n   qbFixAfterShow() {\r\n      if (this.objectQB) {\r\n         this.objectQB.setValue(this.qbCondition);\r\n      }\r\n   }\r\n};\r\n","//\r\n// ABViewRuleActionFormSubmitRuleClosePopup\r\n//\r\n//\r\n//\r\nconst ABViewRuleAction = require(\"../ABViewRuleAction\");\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABViewRuleActionFormSubmitRuleClosePopup extends (\r\n   ABViewRuleAction\r\n) {\r\n   /**\r\n    * @param {object} App\r\n    *      The shared App object that is created in OP.Component\r\n    * @param {string} idBase\r\n    *      Identifier for this component\r\n    */\r\n   constructor(App, idBase) {\r\n      super();\r\n\r\n      this.App = App;\r\n      this.key = \"ABViewRuleActionFormSubmitRuleClosePopup\";\r\n      this.label = L(\"Close the current popup\");\r\n\r\n      this.currentObject = null; // the object this Action is tied to.\r\n\r\n      this.formRows = []; // keep track of the Value Components being set\r\n      // [\r\n      //\t\t{ fieldId: xxx, value:yyy, type:key['string', 'number', 'date',...]}\r\n      // ]\r\n   }\r\n\r\n   // conditionFields() {\r\n   //    var fieldTypes = [\"string\", \"number\", \"date\", \"formula\", \"calculate\"];\r\n\r\n   //    var currFields = [];\r\n\r\n   //    if (this.currentObject) {\r\n   //       this.currentObject.fields().forEach((f) => {\r\n   //          if (fieldTypes.indexOf(f.key) != -1) {\r\n   //             // NOTE: the .id value must match the obj[.id]  in the data set\r\n   //             // so if your object data looks like:\r\n   //             // \t{\r\n   //             //\t\tname_first:'Neo',\r\n   //             //\t\tname_last: 'The One'\r\n   //             //  },\r\n   //             // then the ids should be:\r\n   //             // { id:'name_first', value:'xxx', type:'string' }\r\n   //             currFields.push({\r\n   //                id: f.columnName,\r\n   //                value: f.label,\r\n   //                type: f.key\r\n   //             });\r\n   //          }\r\n   //       });\r\n   //    }\r\n\r\n   //    return currFields;\r\n   // }\r\n\r\n   // valueDisplayComponent\r\n   // Return an ABView to display our values form.\r\n   //\r\n   valueDisplayComponent(idBase) {\r\n      this._ui = {\r\n         ui: {\r\n            view: \"layout\",\r\n            rows: [],\r\n         },\r\n\r\n         init: () => {},\r\n      };\r\n\r\n      return this._ui;\r\n   }\r\n\r\n   // process\r\n   // gets called when a form is submitted and the data passes the Query Builder Rules.\r\n   // @param {obj} options\r\n   process(options) {\r\n      return new Promise((resolve, reject) => {\r\n         let form = options.form;\r\n         if (!form) return;\r\n\r\n         let popup = form.pageParent((p) => p.settings.type == \"popup\");\r\n         if (!popup) return;\r\n\r\n         // get the dom id of page. it is dom id that is generated in ABLiveTool.js\r\n         // let pageDomId = [\"ab_live_page\", popup.application.id, popup.id].join(\r\n         //    \"_\"\r\n         // );\r\n\r\n         // close current popup\r\n         let $popup = $$(popup.id);\r\n         if ($popup) $popup.hide();\r\n\r\n         // this clears the UI's record of the current form.\r\n         options.form.changePage(null);\r\n\r\n         resolve();\r\n      });\r\n   }\r\n};\r\n","//\r\n// ABViewRuleActionFormSubmitRuleConfirmMessage\r\n//\r\n//\r\n//\r\nconst ABViewRuleAction = require(\"../ABViewRuleAction\");\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABViewRuleActionFormSubmitRuleConfirmMessage extends (\r\n   ABViewRuleAction\r\n) {\r\n   /**\r\n    * @param {object} App\r\n    *      The shared App object that is created in OP.Component\r\n    * @param {string} idBase\r\n    *      Identifier for this component\r\n    */\r\n   constructor(App, idBase) {\r\n      super();\r\n\r\n      this.App = App;\r\n      this.key = \"ABViewRuleActionFormSubmitRuleConfirmMessage\";\r\n      this.label = L(\"Show a confirmation message\");\r\n\r\n      this.currentObject = null; // the object this Action is tied to.\r\n\r\n      this.formRows = []; // keep track of the Value Components being set\r\n      // [\r\n      //\t\t{ fieldId: xxx, value:yyy, type:key['string', 'number', 'date',...]}\r\n      // ]\r\n   }\r\n\r\n   // conditionFields() {\r\n   //    var fieldTypes = [\"string\", \"number\", \"date\", \"formula\", \"calculate\"];\r\n\r\n   //    var currFields = [];\r\n\r\n   //    if (this.currentObject) {\r\n   //       this.currentObject.fields().forEach((f) => {\r\n   //          if (fieldTypes.indexOf(f.key) != -1) {\r\n   //             // NOTE: the .id value must match the obj[.id]  in the data set\r\n   //             // so if your object data looks like:\r\n   //             // \t{\r\n   //             //\t\tname_first:'Neo',\r\n   //             //\t\tname_last: 'The One'\r\n   //             //  },\r\n   //             // then the ids should be:\r\n   //             // { id:'name_first', value:'xxx', type:'string' }\r\n   //             currFields.push({\r\n   //                id: f.columnName,\r\n   //                value: f.label,\r\n   //                type: f.key\r\n   //             });\r\n   //          }\r\n   //       });\r\n   //    }\r\n\r\n   //    return currFields;\r\n   // }\r\n\r\n   // valueDisplayComponent\r\n   // Return an ABView to display our values form.\r\n   //\r\n   valueDisplayComponent(idBase) {\r\n      var ids = {\r\n         message: `${idBase}_message`,\r\n      };\r\n\r\n      this._ui = {\r\n         ui: {\r\n            id: ids.message,\r\n            view: \"textarea\",\r\n            // label: this.labels.component.message,\r\n            // labelWidth: this.AB.UISettings.config().labelWidthLarge,\r\n            height: 130,\r\n         },\r\n\r\n         init: () => {},\r\n\r\n         _logic: _logic,\r\n\r\n         fromSettings: (valueRules) => {\r\n            _logic.fromSettings(valueRules);\r\n         },\r\n         toSettings: () => {\r\n            return _logic.toSettings();\r\n         },\r\n      };\r\n\r\n      var _logic = {\r\n         fromSettings: (valueRules) => {\r\n            valueRules = valueRules || {};\r\n\r\n            $$(ids.message).setValue(valueRules.message || \"\");\r\n         },\r\n\r\n         toSettings: () => {\r\n            // return the confirm message\r\n            return {\r\n               message: $$(ids.message).getValue() || \"\",\r\n            };\r\n         },\r\n      };\r\n\r\n      return this._ui;\r\n   }\r\n\r\n   // process\r\n   // gets called when a form is submitted and the data passes the Query Builder Rules.\r\n   // @param {obj} options\r\n   process(options) {\r\n      return new Promise((resolve, reject) => {\r\n         var confirmMessage = this.valueRules.message || \"\";\r\n\r\n         webix.message({\r\n            text: confirmMessage,\r\n            type: \"info\",\r\n         });\r\n\r\n         resolve();\r\n      });\r\n   }\r\n\r\n   // fromSettings\r\n   // initialize this Action from a given set of setting values.\r\n   // @param {obj}  settings\r\n   fromSettings(settings) {\r\n      settings = settings || {};\r\n      super.fromSettings(settings); // let the parent handle the QB\r\n\r\n      // if we have a display component, then populate it:\r\n      if (this._ui) {\r\n         // now we handle our valueRules:{} object settings.\r\n         // pass the settings off to our DisplayList component:\r\n         this._ui.fromSettings(settings.valueRules);\r\n      }\r\n   }\r\n\r\n   // toSettings\r\n   // return an object that represents the current state of this Action\r\n   // @return {obj}\r\n   toSettings() {\r\n      // settings: {\r\n      //\tmessage:''\r\n      // }\r\n\r\n      // let our parent store our QB settings\r\n      var settings = super.toSettings();\r\n\r\n      settings.valueRules = this._ui.toSettings();\r\n\r\n      return settings;\r\n   }\r\n};\r\n","//\r\n// ABViewRuleActionFormSubmitRuleWebsite\r\n//\r\n//\r\n//\r\nconst ABViewRuleAction = require(\"../ABViewRuleAction\");\r\nconst ABFieldConnect = require(\"../../platform/dataFields/ABFieldConnect\");\r\nconst ABFieldEmail = require(\"../../platform/dataFields/ABFieldEmail\");\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABViewRuleActionFormSubmitRuleEmail extends (\r\n   ABViewRuleAction\r\n) {\r\n   /**\r\n    * @param {object} App\r\n    *      The shared App object that is created in OP.Component\r\n    * @param {string} idBase\r\n    *      Identifier for this component\r\n    */\r\n   constructor(App, idBase) {\r\n      super();\r\n\r\n      this.App = App;\r\n      this.key = \"ABViewRuleActionFormSubmitRuleEmail\";\r\n      this.label = L(\"Send a custom email\");\r\n\r\n      this.queryObject = null; // the object this Action is tied to.\r\n\r\n      this.formRows = []; // keep track of the Value Components being set\r\n      // [\r\n      //\t\t{ fieldId: xxx, value:yyy, type:key['string', 'number', 'date',...]}\r\n      // ]\r\n   }\r\n\r\n   // conditionFields() {\r\n   //    var fieldTypes = [\"string\", \"number\", \"date\", \"formula\", \"calculate\"];\r\n\r\n   //    var currFields = [];\r\n\r\n   //    if (this.queryObject) {\r\n   //       this.queryObject.fields().forEach((f) => {\r\n   //          if (fieldTypes.indexOf(f.key) != -1) {\r\n   //             // NOTE: the .id value must match the obj[.id]  in the data set\r\n   //             // so if your object data looks like:\r\n   //             // \t{\r\n   //             //\t\tname_first:'Neo',\r\n   //             //\t\tname_last: 'The One'\r\n   //             //  },\r\n   //             // then the ids should be:\r\n   //             // { id:'name_first', value:'xxx', type:'string' }\r\n   //             currFields.push({\r\n   //                id: f.columnName,\r\n   //                value: f.label,\r\n   //                type: f.key\r\n   //             });\r\n   //          }\r\n   //       });\r\n   //    }\r\n\r\n   //    return currFields;\r\n   // }\r\n\r\n   // valueDisplayComponent\r\n   // Return an ABView to display our values form.\r\n   //\r\n   valueDisplayComponent(idBase) {\r\n      var ids = {\r\n         form: `${idBase}_form`,\r\n         popup: `${idBase}_popup`,\r\n         list: `${idBase}_fieldList`,\r\n         toEmailsContainer: `${idBase}_toEmailsContainer`,\r\n         toEmails: `${idBase}_toEmails`,\r\n         message: `${idBase}_message`,\r\n      };\r\n\r\n      this._ui = {\r\n         ui: {\r\n            id: ids.form,\r\n            view: \"form\",\r\n            width: 450,\r\n            elementsConfig: {\r\n               labelPosition: \"top\",\r\n               labelWidth: 100,\r\n            },\r\n            cols: [\r\n               // email form\r\n               {\r\n                  width: 330,\r\n                  rows: [\r\n                     {\r\n                        view: \"text\",\r\n                        name: \"fromName\",\r\n                        label: L(\"From Name\"),\r\n                     },\r\n                     {\r\n                        view: \"text\",\r\n                        name: \"fromEmail\",\r\n                        label: L(\"From Email\"),\r\n                        validate: webix.rules.isEmail,\r\n                        on: {\r\n                           onChange: function (newVal, oldVal) {\r\n                              if (this.getValue() && !this.validate()) {\r\n                                 $$(ids.form).markInvalid(\r\n                                    \"fromEmail\",\r\n                                    \"Email is invalid\"\r\n                                 );\r\n                              } else {\r\n                                 $$(ids.form).markInvalid(\"fromEmail\", false);\r\n                              }\r\n                           },\r\n                        },\r\n                     },\r\n                     {\r\n                        id: ids.toEmailsContainer,\r\n                        view: \"forminput\",\r\n                        name: \"toEmails\",\r\n                        label: L(\"Send\"),\r\n                        css: \"ab-rich-text\",\r\n                        width: 320,\r\n                        body: {\r\n                           width: 320,\r\n                           rows: [\r\n                              {\r\n                                 height: 25,\r\n                              },\r\n                              {\r\n                                 id: ids.toEmails,\r\n                                 width: 320,\r\n                                 view: \"layout\",\r\n                                 rows: [],\r\n                              },\r\n                              {\r\n                                 view: \"button\",\r\n                                 css: \"webix_primary\",\r\n                                 type: \"icon\",\r\n                                 icon: \"fa fa-plus\",\r\n                                 label: L(\"Add a recipient\"),\r\n                                 width: 150,\r\n                                 click: () => {\r\n                                    _logic.toEmailAdd();\r\n                                 },\r\n                              },\r\n                           ],\r\n                        },\r\n                     },\r\n                     {\r\n                        view: \"text\",\r\n                        name: \"subject\",\r\n                        label: L(\"Subject\"),\r\n                     },\r\n                     {\r\n                        view: \"textarea\",\r\n                        id: ids.message,\r\n                        name: \"message\",\r\n                        label: L(\"Message\"),\r\n                        width: 320,\r\n                        height: 400,\r\n                     },\r\n                     // {\r\n                     // \tview: 'label',\r\n                     // \tlabel: 'Message',\r\n                     // \tcss: { 'font-weight': 'bold' }\r\n                     // },\r\n                     // {\r\n                     // \tview: 'forminput',\r\n                     // \tid: ids.message,\r\n                     // \tname: 'message',\r\n                     // \tlabel: 'Message',\r\n                     // \tcss: \"ab-rich-text\",\r\n                     // \twidth: 320,\r\n                     // \theight: 400,\r\n                     // \tbody: {\r\n                     // \t\tview: 'tinymce-editor'\r\n                     // \t}\r\n                     // }\r\n                  ],\r\n               },\r\n               // field list\r\n               {\r\n                  rows: [\r\n                     {\r\n                        view: \"template\",\r\n                        type: \"header\",\r\n                        template: \"Fields\",\r\n                     },\r\n                     {\r\n                        id: ids.list,\r\n                        view: \"list\",\r\n                        width: 120,\r\n                        css: { \"background-color\": \"#fff !important;\" },\r\n                        template: function (obj, common) {\r\n                           return _logic.fieldTemplate(obj, common);\r\n                        },\r\n                        on: {\r\n                           onItemClick: function (id, e, node) {\r\n                              var component = this.getItem(id);\r\n\r\n                              _logic.enterField(component);\r\n                           },\r\n                        },\r\n                     },\r\n                  ],\r\n               },\r\n            ],\r\n         },\r\n\r\n         init: () => {\r\n            if (this.queryObject) {\r\n               $$(ids.list).parse(\r\n                  this.queryObject.fields((f) => f.fieldUseAsLabel())\r\n               );\r\n               $$(ids.list).refresh();\r\n            }\r\n\r\n            _logic.refreshUI();\r\n         },\r\n\r\n         _logic: _logic,\r\n\r\n         fromSettings: (valueRules) => {\r\n            _logic.fromSettings(valueRules);\r\n         },\r\n         toSettings: () => {\r\n            return _logic.toSettings();\r\n         },\r\n      };\r\n\r\n      var _logic = {\r\n         fromSettings: (valueRules) => {\r\n            valueRules = valueRules || {};\r\n\r\n            $$(ids.form).setValues(valueRules);\r\n\r\n            // Populate recipients\r\n            var recipients = valueRules.toEmails || [];\r\n            recipients.forEach((r) => {\r\n               _logic.toEmailAdd({\r\n                  type: r.type, // 'to', 'cc' or 'bcc'\r\n                  emailType: r.emailType, // 'email' or 'field'\r\n                  value: r.value,\r\n               });\r\n            });\r\n\r\n            _logic.refreshUI();\r\n         },\r\n\r\n         toSettings: () => {\r\n            var formVals = $$(ids.form).getValues() || {};\r\n\r\n            // Get recipients\r\n            var recipients = [];\r\n            $$(ids.toEmails)\r\n               .getChildViews()\r\n               .forEach((e) => {\r\n                  // var type = e.queryView({ name: 'type' }).getValue();\r\n                  var type = \"to\"; // TODO\r\n                  var emailType = e.queryView({ name: \"emailType\" }).getValue();\r\n                  var value = e.queryView({ name: emailType }).getValue();\r\n\r\n                  recipients.push({\r\n                     type: type,\r\n                     emailType: emailType,\r\n                     value: value,\r\n                  });\r\n               });\r\n\r\n            // return the confirm message\r\n            return {\r\n               fromName: formVals[\"fromName\"],\r\n               fromEmail: formVals[\"fromEmail\"],\r\n               toEmails: recipients,\r\n               subject: formVals[\"subject\"],\r\n               message: formVals[\"message\"],\r\n            };\r\n         },\r\n\r\n         /**\r\n          * @method toEmailTemplate\r\n          *\r\n          * @param settings - {\r\n          * \t\t\ttype: string, // 'to', 'cc' or 'bcc'\r\n          * \t\t\temailType: string, // 'email' or 'field'\r\n          * \t\t\tvalue: string\r\n          * }\r\n          */\r\n         toEmailTemplate: (settings) => {\r\n            settings = settings || {};\r\n\r\n            return {\r\n               width: 320,\r\n               cols: [\r\n                  // {\r\n                  // \tview: 'richselect',\r\n                  // \tname: 'type',\r\n                  // \tvalue: settings.type || 'to',\r\n                  // \twidth: 80,\r\n                  // \toptions: [\r\n                  // \t\t{ id: 'to', value: \"To:\" },\r\n                  // \t\t// EmailNotification does not support cc, bcc and reply.\r\n                  // \t\t// { id: 'cc', value: \"Cc:\" },\r\n                  // \t\t// { id: 'bcc', value: \"Bcc:\" },\r\n                  // \t\t// { id: 'reply', value: \"Reply-To:\" }\r\n                  // \t]\r\n                  // },\r\n                  {\r\n                     view: \"richselect\",\r\n                     name: \"emailType\",\r\n                     value: settings.emailType || \"email\",\r\n                     width: 150,\r\n                     options: [\r\n                        {\r\n                           id: \"email\",\r\n                           value: L(\"A custom email address\"),\r\n                        },\r\n                        { id: \"field\", value: L(\"An email field\") },\r\n                        { id: \"query\", value: L(\"From query\") },\r\n                     ],\r\n                     on: {\r\n                        onChange: function (newVal, oldVal) {\r\n                           _logic.emailTypeChange(newVal, this);\r\n                        },\r\n                     },\r\n                  },\r\n                  {\r\n                     width: 150,\r\n                     name: \"emailValue\",\r\n                     visibleBatch: settings.emailType || \"email\",\r\n                     cols: [\r\n                        {\r\n                           view: \"text\",\r\n                           name: \"email\",\r\n                           batch: \"email\",\r\n                           value:\r\n                              settings.emailType == \"email\"\r\n                                 ? settings.value\r\n                                 : \"\",\r\n                           validate: webix.rules.isEmail,\r\n                           width: 150,\r\n                           on: {\r\n                              onChange: function (newVal, oldVal) {\r\n                                 _logic.toEmailValidate();\r\n                              },\r\n                           },\r\n                        },\r\n                        {\r\n                           view: \"richselect\",\r\n                           name: \"field\",\r\n                           batch: \"field\",\r\n                           value:\r\n                              settings.emailType == \"field\"\r\n                                 ? settings.value\r\n                                 : \"\",\r\n                           width: 150,\r\n                           suggest: {\r\n                              on: {\r\n                                 onBeforeShow: function () {\r\n                                    this.define(\"width\", 300);\r\n                                    this.resize();\r\n                                 },\r\n                              },\r\n                              data: _logic.emailFieldOptions(),\r\n                           },\r\n                        },\r\n                        {\r\n                           view: \"richselect\",\r\n                           name: \"query\",\r\n                           batch: \"query\",\r\n                           value:\r\n                              settings.emailType == \"query\"\r\n                                 ? settings.value\r\n                                 : \"\",\r\n                           width: 150,\r\n                           suggest: {\r\n                              on: {\r\n                                 onBeforeShow: function () {\r\n                                    this.define(\"width\", 300);\r\n                                    this.resize();\r\n                                 },\r\n                              },\r\n                              data: _logic.queryOptions(),\r\n                           },\r\n                        },\r\n                     ],\r\n                  },\r\n                  {\r\n                     view: \"button\",\r\n                     css: \"webix_danger\",\r\n                     type: \"icon\",\r\n                     icon: \"fa fa-trash-o\",\r\n                     width: 32,\r\n                     click: function () {\r\n                        var $toView = this.getParentView();\r\n\r\n                        _logic.toEmailRemove($toView);\r\n                     },\r\n                  },\r\n               ],\r\n            };\r\n         },\r\n\r\n         toEmailAdd: (settings) => {\r\n            var count = $$(ids.toEmails).getChildViews().length;\r\n\r\n            $$(ids.toEmails).addView(_logic.toEmailTemplate(settings), count);\r\n\r\n            _logic.refreshUI();\r\n         },\r\n\r\n         emailTypeChange: (type, $select) => {\r\n            var $recipient = $select.getParentView();\r\n            var $emailValue = $recipient.queryView({ name: \"emailValue\" });\r\n\r\n            switch (type) {\r\n               case \"field\":\r\n                  $emailValue.showBatch(\"field\");\r\n                  break;\r\n               case \"query\":\r\n                  $emailValue.showBatch(\"query\");\r\n                  break;\r\n               default:\r\n                  $emailValue.showBatch(\"email\");\r\n                  break;\r\n            }\r\n\r\n            $$(ids.toEmailsContainer).adjust();\r\n         },\r\n\r\n         toEmailRemove: ($toView) => {\r\n            $$(ids.toEmails).removeView($toView);\r\n\r\n            _logic.refreshUI();\r\n         },\r\n\r\n         toEmailValidate: () => {\r\n            var isAllValid = true;\r\n\r\n            $$(ids.toEmails)\r\n               .getChildViews()\r\n               .forEach((v) => {\r\n                  let emailText = v.queryView({ name: \"email\" });\r\n                  if (emailText.getValue() && !emailText.validate()) {\r\n                     isAllValid = false;\r\n                  }\r\n               });\r\n\r\n            if (isAllValid) $$(ids.form).markInvalid(\"toEmails\", false);\r\n            else $$(ids.form).markInvalid(\"toEmails\", \"Email is invalid\");\r\n         },\r\n\r\n         fieldTemplate: (field, common) => {\r\n            return `<i class='fa fa-${field.icon} webix_icon_btn' aria-hidden='true'></i> ${field.label}`;\r\n         },\r\n\r\n         emailFieldOptions: () => {\r\n            var existsFieldIds = [];\r\n            var options = [];\r\n\r\n            var fnAddOptions = (currObj, fLink) => {\r\n               var emailFields = currObj\r\n                  .fields((f) => f instanceof ABFieldEmail)\r\n                  .map((f) => {\r\n                     var optId = \"\",\r\n                        optLabel = \"\";\r\n\r\n                     if (fLink) {\r\n                        optId = `${fLink.id}|${f.urlPointer()}`;\r\n                        optLabel = `${currObj.label}.${f.label} (${fLink.label})`;\r\n                     } else {\r\n                        optId = `|${f.urlPointer()}`;\r\n                        optLabel = `${currObj.label}.${f.label}`;\r\n                     }\r\n\r\n                     return {\r\n                        id: optId, // linkFieldId|fieldUrl\r\n                        value: optLabel,\r\n                     };\r\n                  });\r\n\r\n               // TODO: prevent duplicate\r\n\r\n               options = options.concat(emailFields);\r\n            };\r\n\r\n            fnAddOptions(this.queryObject);\r\n\r\n            this.queryObject.connectFields().forEach((f) => {\r\n               // prevent looping\r\n               if (\r\n                  // - prevent include connect objects of the base object\r\n                  // f.datasourceLink.id == this.queryObject.id ||\r\n                  // - check duplicate include objects\r\n                  existsFieldIds.indexOf(f.id) > -1\r\n               )\r\n                  return;\r\n\r\n               // store\r\n               existsFieldIds.push(f.id);\r\n\r\n               // add email fields of link object\r\n               fnAddOptions(f.datasourceLink, f);\r\n            });\r\n\r\n            return options;\r\n         },\r\n\r\n         queryOptions: () => {\r\n            var options = [];\r\n\r\n            // get data collections who is query and contains email field\r\n            let dcQueries = this.currentForm.AB.datacollections((dc) => {\r\n               let obj = dc.datasource;\r\n               return (\r\n                  dc.settings.isQuery &&\r\n                  obj &&\r\n                  obj.fields((f) => f.key == \"email\").length > 0\r\n               );\r\n            });\r\n\r\n            dcQueries.forEach((dv) => {\r\n               if (dv.datasource) {\r\n                  dv.datasource\r\n                     .fields((f) => f.key == \"email\")\r\n                     .forEach((f) => {\r\n                        options.push({\r\n                           id: `${dv.id}|${f.id}`, // ABDatacollectionID|fieldID\r\n                           value: `${dv.label}.${f.label}`,\r\n                        });\r\n                     });\r\n               }\r\n            });\r\n\r\n            return options;\r\n         },\r\n\r\n         enterField: (field) => {\r\n            var focusElem = webix.UIManager.getFocus();\r\n            var val = \"\";\r\n\r\n            if (\r\n               focusElem.config.view != \"text\" ||\r\n               focusElem.config.view != \"textarea\"\r\n            ) {\r\n               if (focusElem.getValue) val = focusElem.getValue();\r\n\r\n               if (focusElem.setValue)\r\n                  focusElem.setValue(`${val}${field.label}`);\r\n\r\n               webix.UIManager.setFocus(focusElem);\r\n            }\r\n         },\r\n\r\n         refreshUI: () => {\r\n            $$(ids.toEmailsContainer).adjust();\r\n            $$(ids.message).adjust();\r\n         },\r\n      };\r\n\r\n      return this._ui;\r\n   }\r\n\r\n   // process\r\n   // gets called when a form is submitted and the data passes the Query Builder Rules.\r\n   // @param {obj} options - {\r\n   //\t\t\t\t\t\t\tdata: {obj} rowData,\r\n   //\t\t\t\t\t\t\tform: {ABViewForm}\r\n   //\t\t\t\t\t\t}\r\n   process(options) {\r\n      // validate sender's email is invalid\r\n      if (!webix.rules.isEmail(this.valueRules.fromEmail)) {\r\n         return Promise.resolve();\r\n      }\r\n\r\n      var recipients = [];\r\n\r\n      return Promise.resolve()\r\n         .then(() => {\r\n            // Pull recipients data\r\n            return new Promise((resolve, reject) => {\r\n               var tasks = [];\r\n\r\n               this.valueRules.toEmails.forEach((rec) => {\r\n                  tasks.push(\r\n                     new Promise((next, err) => {\r\n                        // TODO: Cc, Bcc\r\n\r\n                        // field\r\n                        if (rec.emailType == \"field\") {\r\n                           var emailFieldUrl = rec.value.split(\"|\")[1]; // linkFieldId|emailFieldUrl\r\n                           var emailField = this.queryObject.application.urlResolve(\r\n                              emailFieldUrl\r\n                           );\r\n                           if (emailField) {\r\n                              // Pull email source object\r\n                              if (emailField.object.id == this.queryObject.id) {\r\n                                 var emailData =\r\n                                    options.data[emailField.columnName];\r\n                                 if (emailData)\r\n                                    recipients = recipients.concat(emailData);\r\n                              }\r\n                              // Pull emails from link object\r\n                              else {\r\n                                 let linkFieldId = rec.value.split(\"|\")[0];\r\n                                 let linkFields = this.queryObject.fields(\r\n                                    (f) =>\r\n                                       f instanceof ABFieldConnect &&\r\n                                       f.id == linkFieldId\r\n                                 );\r\n                                 linkFields.forEach((f) => {\r\n                                    var linkedData =\r\n                                       options.data[f.relationName()] || [];\r\n\r\n                                    // convert to an array\r\n                                    if (\r\n                                       linkedData &&\r\n                                       !Array.isArray(linkedData)\r\n                                    )\r\n                                       linkedData = [linkedData];\r\n\r\n                                    // pull email address\r\n                                    linkedData.forEach((d) => {\r\n                                       var email = d[emailField.columnName];\r\n                                       if (email)\r\n                                          recipients = recipients.concat(email);\r\n                                    });\r\n                                 });\r\n                              }\r\n\r\n                              next();\r\n                           } else {\r\n                              next();\r\n                           }\r\n                        }\r\n\r\n                        // query\r\n                        else if (rec.emailType == \"query\") {\r\n                           var dvIdAndFieldId = rec.value; // ABDatacollectionId|fieldId\r\n                           if (!dvIdAndFieldId) return next();\r\n\r\n                           var dcId = dvIdAndFieldId.split(\"|\")[0];\r\n                           var fieldId = dvIdAndFieldId.split(\"|\")[1];\r\n\r\n                           var dcQuery = this.currentForm.AB.datacollectionByID(\r\n                              dcId\r\n                           );\r\n                           if (!dcQuery) return next();\r\n\r\n                           var field = dcQuery.datasource.fieldByID(fieldId);\r\n                           if (!field) return next();\r\n\r\n                           // get data of data collection\r\n                           dcQuery.getData().forEach((data) => {\r\n                              var emailAddr = data[field.columnName];\r\n                              if (emailAddr) recipients.push(emailAddr);\r\n                           });\r\n\r\n                           next();\r\n                        }\r\n\r\n                        // email\r\n                        else {\r\n                           recipients.push(rec.value);\r\n                           next();\r\n                        }\r\n                     })\r\n                  );\r\n               });\r\n\r\n               Promise.all(tasks).catch(reject).then(resolve);\r\n            });\r\n         })\r\n         .then(() => {\r\n            // send out\r\n            return new Promise((resolve, reject) => {\r\n               recipients = this.AB.uniq(recipients).filter((r) => r);\r\n\r\n               if (!recipients || recipients.length < 1) return resolve();\r\n\r\n               // replace form value to template\r\n               var fromName = this.valueRules.fromName,\r\n                  subject = this.valueRules.subject,\r\n                  message = this.valueRules.message;\r\n\r\n               this.queryObject\r\n                  .fields((f) => f.fieldUseAsLabel())\r\n                  .forEach((f) => {\r\n                     var template = new RegExp(`{${f.label}}`, \"g\"),\r\n                        data = f.format(options.data);\r\n\r\n                     fromName = fromName.replace(template, data);\r\n                     subject = subject.replace(template, data);\r\n                     message = message.replace(template, data);\r\n                  });\r\n\r\n               // send a email\r\n               this.AB.Network.post({\r\n                  url: \"/app_builder/email\",\r\n                  params: {\r\n                     fromName: fromName,\r\n                     fromEmail: this.valueRules.fromEmail,\r\n                     subject: subject,\r\n                     message: message,\r\n                     recipients: this.AB.uniq(recipients),\r\n                  },\r\n               })\r\n                  .then(() => {\r\n                     resolve();\r\n                  })\r\n                  .catch(reject);\r\n            });\r\n         });\r\n   }\r\n\r\n   // fromSettings\r\n   // initialize this Action from a given set of setting values.\r\n   // @param {obj}  settings\r\n   fromSettings(settings) {\r\n      settings = settings || {};\r\n      super.fromSettings(settings); // let the parent handle the QB\r\n\r\n      // if we have a display component, then populate it:\r\n      if (this._ui) {\r\n         // now we handle our valueRules:{} object settings.\r\n         // pass the settings off to our DisplayList component:\r\n         this._ui.fromSettings(settings.valueRules);\r\n      }\r\n   }\r\n\r\n   // toSettings\r\n   // return an object that represents the current state of this Action\r\n   // @return {obj}\r\n   toSettings() {\r\n      // settings: {\r\n      //\tmessage:''\r\n      // }\r\n\r\n      // let our parent store our QB settings\r\n      var settings = super.toSettings();\r\n\r\n      settings.valueRules = this._ui.toSettings();\r\n\r\n      return settings;\r\n   }\r\n};\r\n","//\r\n// ABViewRuleActionFormSubmitRuleExistPage\r\n//\r\n//\r\n//\r\nconst ABViewRuleAction = require(\"../ABViewRuleAction\");\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABViewRuleActionFormSubmitRuleExistPage extends (\r\n   ABViewRuleAction\r\n) {\r\n   /**\r\n    * @param {object} App\r\n    *      The shared App object that is created in OP.Component\r\n    * @param {string} idBase\r\n    *      Identifier for this component\r\n    */\r\n   constructor(App, idBase) {\r\n      super();\r\n\r\n      this.App = App;\r\n      this.key = \"ABViewRuleActionFormSubmitRuleExistPage\";\r\n      this.label = L(\"Redirect to an existing page\");\r\n\r\n      this.currentObject = null; // the object this Action is tied to.\r\n\r\n      this.formRows = []; // keep track of the Value Components being set\r\n      // [\r\n      //\t\t{ fieldId: xxx, value:yyy, type:key['string', 'number', 'date',...]}\r\n      // ]\r\n   }\r\n\r\n   // conditionFields() {\r\n   //    var fieldTypes = [\"string\", \"number\", \"date\", \"formula\", \"calculate\"];\r\n\r\n   //    var currFields = [];\r\n\r\n   //    if (this.currentObject) {\r\n   //       this.currentObject.fields().forEach((f) => {\r\n   //          if (fieldTypes.indexOf(f.key) != -1) {\r\n   //             // NOTE: the .id value must match the obj[.id]  in the data set\r\n   //             // so if your object data looks like:\r\n   //             // \t{\r\n   //             //\t\tname_first:'Neo',\r\n   //             //\t\tname_last: 'The One'\r\n   //             //  },\r\n   //             // then the ids should be:\r\n   //             // { id:'name_first', value:'xxx', type:'string' }\r\n   //             currFields.push({\r\n   //                id: f.columnName,\r\n   //                value: f.label,\r\n   //                type: f.key\r\n   //             });\r\n   //          }\r\n   //       });\r\n   //    }\r\n\r\n   //    return currFields;\r\n   // }\r\n\r\n   // valueDisplayComponent\r\n   // Return an ABView to display our values form.\r\n   //\r\n   valueDisplayComponent(idBase) {\r\n      var ids = {\r\n         pagesAndTabs: `${idBase}_PagesAndTabs`,\r\n      };\r\n\r\n      this._ui = {\r\n         ui: { id: ids.pagesAndTabs, view: \"richselect\", options: [] },\r\n\r\n         init: () => {\r\n            _logic.populateOptions();\r\n         },\r\n\r\n         _logic: _logic,\r\n\r\n         fromSettings: (valueRules) => {\r\n            _logic.fromSettings(valueRules);\r\n         },\r\n         toSettings: () => {\r\n            return _logic.toSettings();\r\n         },\r\n      };\r\n\r\n      var _logic = {\r\n         populateOptions: () => {\r\n            // Pull page list to \"Redirect to an existing page\"\r\n            var _pageOptions = [];\r\n\r\n            /**\r\n             * @param pageOrTab\t{Object}\t- ABViewPage or ABViewTab\r\n             * @param indent\t{integer}\r\n             * @param type\t\t{string}\t- 'page' or 'tab'\r\n             * @param pageId\t{uuid}\t\t- the id of page (only tab)\r\n             */\r\n            var addPage = (pageOrTab, indent, type, pageId) => {\r\n               indent = indent || \"\";\r\n\r\n               let icon = \"fa fa-file-o\";\r\n               if (type == \"tab\") icon = \"fa fa-window-maximize\";\r\n\r\n               let pageParent = pageOrTab.pageParent();\r\n\r\n               _pageOptions.push({\r\n                  id: pageOrTab.id,\r\n                  value: indent + pageOrTab.label,\r\n                  type: type,\r\n                  pageId: pageParent ? pageParent.id : null,\r\n\r\n                  icon: icon,\r\n               });\r\n\r\n               if (type == \"page\" || type == \"tab\") {\r\n                  if (pageOrTab.pages) {\r\n                     pageOrTab.pages().forEach(function (p) {\r\n                        addPage(p, indent + \"-\", \"page\");\r\n                     });\r\n                  }\r\n\r\n                  // add 'tab' options\r\n                  if (pageOrTab.views) {\r\n                     pageOrTab\r\n                        .views((v) => v.key == \"tab\")\r\n                        .forEach((tab) => {\r\n                           // add 'tab view' to options\r\n                           tab.views().forEach((tabView) => {\r\n                              addPage(\r\n                                 tabView,\r\n                                 indent + \"-\",\r\n                                 \"tab\",\r\n                                 pageOrTab.id\r\n                              );\r\n                           });\r\n                        });\r\n                  }\r\n               }\r\n            };\r\n\r\n            addPage(this.currentForm.pageRoot(), \"\", \"page\");\r\n\r\n            $$(ids.pagesAndTabs).define(\"options\", _pageOptions);\r\n            $$(ids.pagesAndTabs).refresh();\r\n         },\r\n\r\n         fromSettings: (valueRules) => {\r\n            valueRules = valueRules || {};\r\n\r\n            $$(ids.pagesAndTabs).setValue(\r\n               valueRules.tabId || valueRules.pageId || \"\"\r\n            );\r\n         },\r\n\r\n         toSettings: () => {\r\n            var result = {};\r\n\r\n            var selectedId = $$(ids.pagesAndTabs).getValue();\r\n            var selectedItem = $$(ids.pagesAndTabs)\r\n               .getPopup()\r\n               .getList()\r\n               .config.data.filter((opt) => opt.id == selectedId)[0];\r\n            if (selectedItem) {\r\n               if (selectedItem.type == \"tab\") {\r\n                  // store page id and tab id\r\n                  result = {\r\n                     pageId: selectedItem.pageId,\r\n                     tabId: selectedId,\r\n                  };\r\n               } else {\r\n                  // store only page id\r\n                  result = {\r\n                     pageId: selectedId,\r\n                  };\r\n               }\r\n            }\r\n\r\n            // return the confirm message\r\n            return result;\r\n         },\r\n      };\r\n\r\n      return this._ui;\r\n   }\r\n\r\n   // process\r\n   // gets called when a form is submitted and the data passes the Query Builder Rules.\r\n   // @param {obj} options\r\n   process(options) {\r\n      return new Promise((resolve, reject) => {\r\n         // redirect page\r\n         if (this.valueRules.pageId) {\r\n            options.form.changePage(this.valueRules.pageId);\r\n\r\n            if (this.valueRules.tabId) {\r\n               var curPage = options.form.application.pages(\r\n                  (p) => p.id == this.valueRules.pageId,\r\n                  true\r\n               )[0];\r\n               if (!curPage) return resolve();\r\n\r\n               // switch tab\r\n               var tabView = curPage.views(\r\n                  (v) => v.id == this.valueRules.tabId,\r\n                  true\r\n               )[0];\r\n               if (!tabView) return resolve();\r\n\r\n               var tab = tabView.parent;\r\n               if (!tab) return resolve();\r\n\r\n               var toggleParent = (element) => {\r\n                  if (!element.parent) return false;\r\n                  var parentElem = element.parent;\r\n                  if (!parentElem.parent) return false;\r\n                  parentElem.parent.emit(\"changeTab\", parentElem.id);\r\n                  toggleParent(parentElem.parent);\r\n               };\r\n\r\n               toggleParent(tab);\r\n               let showIt = setInterval(function () {\r\n                  if ($$(tabView.id) && $$(tabView.id).isVisible()) {\r\n                     clearInterval(showIt);\r\n                     return;\r\n                  }\r\n                  tab.emit(\"changeTab\", tabView.id);\r\n               }, 100);\r\n            }\r\n         }\r\n\r\n         resolve();\r\n      });\r\n   }\r\n\r\n   // fromSettings\r\n   // initialize this Action from a given set of setting values.\r\n   // @param {obj}  settings\r\n   fromSettings(settings) {\r\n      settings = settings || {};\r\n      super.fromSettings(settings); // let the parent handle the QB\r\n\r\n      // if we have a display component, then populate it:\r\n      if (this._ui) {\r\n         // now we handle our valueRules:{} object settings.\r\n         // pass the settings off to our DisplayList component:\r\n         this._ui.fromSettings(settings.valueRules);\r\n      }\r\n   }\r\n\r\n   // toSettings\r\n   // return an object that represents the current state of this Action\r\n   // @return {obj}\r\n   toSettings() {\r\n      // settings: {\r\n      //\tmessage:''\r\n      // }\r\n\r\n      // let our parent store our QB settings\r\n      var settings = super.toSettings();\r\n\r\n      settings.valueRules = this._ui.toSettings();\r\n\r\n      return settings;\r\n   }\r\n};\r\n","//\r\n// ABViewRuleActionFormSubmitRuleParentPage\r\n//\r\n//\r\n//\r\nconst ABViewRuleAction = require(\"../ABViewRuleAction\");\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABViewRuleActionFormSubmitRuleParentPage extends (\r\n   ABViewRuleAction\r\n) {\r\n   /**\r\n    * @param {object} App\r\n    *      The shared App object that is created in OP.Component\r\n    * @param {string} idBase\r\n    *      Identifier for this component\r\n    */\r\n   constructor(App, idBase) {\r\n      super();\r\n\r\n      this.App = App;\r\n      this.key = \"ABViewRuleActionFormSubmitRuleParentPage\";\r\n      this.label = L(\"Redirect to the parent page\");\r\n\r\n      this.currentObject = null; // the object this Action is tied to.\r\n\r\n      this.formRows = []; // keep track of the Value Components being set\r\n      // [\r\n      //\t\t{ fieldId: xxx, value:yyy, type:key['string', 'number', 'date',...]}\r\n      // ]\r\n   }\r\n\r\n   // conditionFields() {\r\n   //    var fieldTypes = [\"string\", \"number\", \"date\", \"formula\", \"calculate\"];\r\n\r\n   //    var currFields = [];\r\n\r\n   //    if (this.currentObject) {\r\n   //       this.currentObject.fields().forEach((f) => {\r\n   //          if (fieldTypes.indexOf(f.key) != -1) {\r\n   //             // NOTE: the .id value must match the obj[.id]  in the data set\r\n   //             // so if your object data looks like:\r\n   //             // \t{\r\n   //             //\t\tname_first:'Neo',\r\n   //             //\t\tname_last: 'The One'\r\n   //             //  },\r\n   //             // then the ids should be:\r\n   //             // { id:'name_first', value:'xxx', type:'string' }\r\n   //             currFields.push({\r\n   //                id: f.columnName,\r\n   //                value: f.label,\r\n   //                type: f.key\r\n   //             });\r\n   //          }\r\n   //       });\r\n   //    }\r\n\r\n   //    return currFields;\r\n   // }\r\n\r\n   // valueDisplayComponent\r\n   // Return an ABView to display our values form.\r\n   //\r\n   valueDisplayComponent(idBase) {\r\n      this._ui = {\r\n         ui: {\r\n            view: \"label\",\r\n            label: this.label,\r\n         },\r\n\r\n         init: () => {},\r\n\r\n         _logic: _logic,\r\n      };\r\n\r\n      var _logic = {};\r\n\r\n      return this._ui;\r\n   }\r\n\r\n   // process\r\n   // gets called when a form is submitted and the data passes the Query Builder Rules.\r\n   // @param {obj} options\r\n   process(options) {\r\n      return new Promise((resolve, reject) => {\r\n         var pageCurrent = options.form.pageParent();\r\n         var pageParent = pageCurrent.pageParent();\r\n\r\n         // redirect page\r\n         options.form.changePage(pageParent.id);\r\n\r\n         resolve();\r\n      });\r\n   }\r\n};\r\n","//\r\n// ABViewRuleActionFormSubmitRuleWebsite\r\n//\r\n//\r\n//\r\nconst ABViewRuleAction = require(\"../ABViewRuleAction\");\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nmodule.exports = class ABViewRuleActionFormSubmitRuleWebsite extends (\r\n   ABViewRuleAction\r\n) {\r\n   /**\r\n    * @param {object} App\r\n    *      The shared App object that is created in OP.Component\r\n    * @param {string} idBase\r\n    *      Identifier for this component\r\n    */\r\n   constructor(App, idBase) {\r\n      super();\r\n\r\n      this.App = App;\r\n      this.key = \"ABViewRuleActionFormSubmitRuleWebsite\";\r\n      this.label = L(\"Redirect to another website URL\");\r\n\r\n      this.currentObject = null; // the object this Action is tied to.\r\n\r\n      this.formRows = []; // keep track of the Value Components being set\r\n      // [\r\n      //\t\t{ fieldId: xxx, value:yyy, type:key['string', 'number', 'date',...]}\r\n      // ]\r\n   }\r\n\r\n   // conditionFields() {\r\n   //    var fieldTypes = [\"string\", \"number\", \"date\", \"formula\", \"calculate\"];\r\n\r\n   //    var currFields = [];\r\n\r\n   //    if (this.currentObject) {\r\n   //       this.currentObject.fields().forEach((f) => {\r\n   //          if (fieldTypes.indexOf(f.key) != -1) {\r\n   //             // NOTE: the .id value must match the obj[.id]  in the data set\r\n   //             // so if your object data looks like:\r\n   //             // \t{\r\n   //             //\t\tname_first:'Neo',\r\n   //             //\t\tname_last: 'The One'\r\n   //             //  },\r\n   //             // then the ids should be:\r\n   //             // { id:'name_first', value:'xxx', type:'string' }\r\n   //             currFields.push({\r\n   //                id: f.columnName,\r\n   //                value: f.label,\r\n   //                type: f.key\r\n   //             });\r\n   //          }\r\n   //       });\r\n   //    }\r\n\r\n   //    return currFields;\r\n   // }\r\n\r\n   // valueDisplayComponent\r\n   // Return an ABView to display our values form.\r\n   //\r\n   valueDisplayComponent(idBase) {\r\n      var ids = {\r\n         website: `${idBase}_website`,\r\n      };\r\n\r\n      this._ui = {\r\n         ui: {\r\n            id: ids.website,\r\n            view: \"text\",\r\n         },\r\n\r\n         init: () => {},\r\n\r\n         _logic: _logic,\r\n\r\n         fromSettings: (valueRules) => {\r\n            _logic.fromSettings(valueRules);\r\n         },\r\n         toSettings: () => {\r\n            return _logic.toSettings();\r\n         },\r\n      };\r\n\r\n      var _logic = {\r\n         fromSettings: (valueRules) => {\r\n            valueRules = valueRules || {};\r\n\r\n            $$(ids.website).setValue(valueRules.website || \"\");\r\n         },\r\n\r\n         toSettings: () => {\r\n            // return the confirm message\r\n            return {\r\n               website: $$(ids.website).getValue() || \"\",\r\n            };\r\n         },\r\n      };\r\n\r\n      return this._ui;\r\n   }\r\n\r\n   // process\r\n   // gets called when a form is submitted and the data passes the Query Builder Rules.\r\n   // @param {obj} options\r\n   process(options) {\r\n      return new Promise((resolve, reject) => {\r\n         // redirect to website\r\n         if (this.valueRules.website)\r\n            window.open(\r\n               `http://${this.valueRules.website.replace(\"http://\", \"\")}`,\r\n               \"_blank\"\r\n            );\r\n\r\n         resolve();\r\n      });\r\n   }\r\n\r\n   // fromSettings\r\n   // initialize this Action from a given set of setting values.\r\n   // @param {obj}  settings\r\n   fromSettings(settings) {\r\n      settings = settings || {};\r\n      super.fromSettings(settings); // let the parent handle the QB\r\n\r\n      // if we have a display component, then populate it:\r\n      if (this._ui) {\r\n         // now we handle our valueRules:{} object settings.\r\n         // pass the settings off to our DisplayList component:\r\n         this._ui.fromSettings(settings.valueRules);\r\n      }\r\n   }\r\n\r\n   // toSettings\r\n   // return an object that represents the current state of this Action\r\n   // @return {obj}\r\n   toSettings() {\r\n      // settings: {\r\n      //\tmessage:''\r\n      // }\r\n\r\n      // let our parent store our QB settings\r\n      var settings = super.toSettings();\r\n\r\n      settings.valueRules = this._ui.toSettings();\r\n\r\n      return settings;\r\n   }\r\n};\r\n","// ABViewRuleActionObjectUpdater\r\n//\r\n// An action that allows you to update fields on an object.\r\n//\r\n//\r\nconst ABViewRuleAction = require(\"../ABViewRuleAction\");\r\n\r\nlet L = (...params) => AB.Multilingual.label(...params);\r\n\r\nvar ABViewRuleActionObjectUpdaterDefaults = {\r\n   filterConditions: {\r\n      // array of filters to apply to the data table\r\n      glue: \"and\",\r\n      rules: [],\r\n   },\r\n};\r\n\r\nmodule.exports = class ABViewRuleActionObjectUpdater extends ABViewRuleAction {\r\n   /**\r\n    * @param {object} App\r\n    *      The shared App object that is created in OP.Component\r\n    * @param {string} idBase\r\n    *      Identifier for this component\r\n    */\r\n   constructor(App, idBase, currentForm) {\r\n      super(App, idBase, currentForm);\r\n\r\n      this.key = \"ABViewRuleActionFormRecordRuleUpdate\";\r\n      this.label = L(\"Update Record\");\r\n\r\n      this.updateObject = null; // the object this Action will Update.\r\n\r\n      this.formRows = []; // keep track of the Value Components being set\r\n      // [\r\n      //\t\t{ fieldId: xxx, value:yyy, type:key['string', 'number', 'date',...]}\r\n      // ]\r\n\r\n      this.stashRules = {}; // keep track of rule settings among our selected objects.\r\n   }\r\n\r\n   // valueDisplayComponent\r\n   // Return an ABView to display our values form.\r\n   //\r\n   valueDisplayComponent(idBase) {\r\n      if (this._uiUpdater == null) {\r\n         this._uiUpdater = this.valueDisplayList(idBase);\r\n      }\r\n\r\n      return this._uiUpdater;\r\n   }\r\n\r\n   // Our Values Display is a List of ValueRows\r\n   // Each ValueRow will display an additional set of [add] [delete] buttons.\r\n\r\n   valueDisplayList(idBase) {\r\n      var uniqueInstanceID = webix.uid();\r\n      var myUnique = (key) => {\r\n         // return idBase + '_' + key  + '_' + uniqueInstanceID;\r\n         return `${idBase}_${key}_${uniqueInstanceID}`;\r\n      };\r\n      var ids = {\r\n         updateForm: myUnique(\"updateForm\"),\r\n      };\r\n\r\n      var _ui = {\r\n         view: \"form\",\r\n         id: ids.updateForm,\r\n         elements: [],\r\n      };\r\n\r\n      var init = (valueRules) => {\r\n         valueRules = valueRules || this.valueRules;\r\n         _logic.setValues(valueRules);\r\n      };\r\n\r\n      var _logic = {\r\n         removeAddRow: () => {\r\n            // get our Form\r\n            var UpdateForm = _logic.formGet();\r\n            if (!UpdateForm) return;\r\n\r\n            // check row that's unselect a field\r\n            var rows = UpdateForm.getChildViews();\r\n\r\n            var addRow = rows.filter((r) => {\r\n               return r.queryView(function (view) {\r\n                  return view.config.name == \"field\" && !view.getValue();\r\n               });\r\n            })[0];\r\n            if (!addRow) return;\r\n\r\n            UpdateForm.removeView(addRow);\r\n         },\r\n\r\n         // addRow\r\n         // add a new data entry to this form.\r\n         // @param {obj} data  (optional) initial values for this row.\r\n         addRow: (data) => {\r\n            // get our Form\r\n            var UpdateForm = _logic.formGet();\r\n            if (!UpdateForm) return;\r\n\r\n            // check row that's unselect a field\r\n            var rows = UpdateForm.getChildViews();\r\n            if (\r\n               data == null &&\r\n               rows.filter((r) => {\r\n                  return r.queryView(function (view) {\r\n                     return view.config.name == \"field\" && !view.getValue();\r\n                  });\r\n               }).length > 0\r\n            )\r\n               return;\r\n\r\n            // get a new Row Component\r\n            var row = this.valueDisplayRow(idBase);\r\n\r\n            // add row to Form\r\n            UpdateForm.addView(row.ui);\r\n\r\n            // initialize row with any provided data:\r\n            row.init({\r\n               onAdd: () => {\r\n                  // add a new Row\r\n                  _logic.addRow();\r\n               },\r\n               onDelete: (rowId) => {\r\n                  // remove a row\r\n                  _logic.delRow(rowId);\r\n               },\r\n               data: data,\r\n            });\r\n\r\n            // store this row\r\n            this.formRows.push(row);\r\n         },\r\n\r\n         delRow: (rowId) => {\r\n            // store this row\r\n            this.formRows.forEach((r, index) => {\r\n               if (r.ui.id == rowId) this.formRows.splice(index, 0);\r\n            });\r\n\r\n            // get our Form\r\n            var UpdateForm = _logic.formGet();\r\n            if (!UpdateForm) return;\r\n\r\n            // remove UI\r\n            UpdateForm.removeView($$(rowId));\r\n         },\r\n\r\n         formClear: () => {\r\n            var UpdateForm = _logic.formGet();\r\n            if (!UpdateForm) return;\r\n\r\n            var children = UpdateForm.getChildViews();\r\n\r\n            // NOTE: need to clone this array, because it is connected with the UpdatForm's\r\n            // internal array of items.  Once we start .removeView() the element actually\r\n            // is removed from the internal array, which then upset's the .forEach() from\r\n            // properly iterating through the structure.  It results in missed items from\r\n            // being sent to the .forEach().\r\n            // So Clone it and use that for .forEach()\r\n            var cloneChildren = [];\r\n            children.forEach((c) => {\r\n               cloneChildren.push(c);\r\n            });\r\n            cloneChildren.forEach((c) => {\r\n               UpdateForm.removeView(c);\r\n            });\r\n\r\n            // clear our stored .formRows\r\n            this.formRows = [];\r\n         },\r\n\r\n         formGet: () => {\r\n            var UpdateForm = $$(ids.updateForm);\r\n            if (!UpdateForm) {\r\n               // this is a problem!\r\n               this.currentForm.AB.notify.developer(\r\n                  new Error(\"no webix form\"),\r\n                  {\r\n                     context:\r\n                        \"ABViewRuleActionObjectUpdater:formGet  could not find webix form\",\r\n                     id: ids.updateForm,\r\n                  }\r\n               );\r\n               return null;\r\n            }\r\n\r\n            return UpdateForm;\r\n         },\r\n\r\n         setValues: (valueRules) => {\r\n            // valueRules = {\r\n            //\tfieldOperations:[\r\n            //\t\t{ fieldID:xxx, value:yyyy, type:zzz, op:aaa }\r\n            //\t]\r\n            // }\r\n\r\n            valueRules = valueRules || {};\r\n            valueRules.fieldOperations = valueRules.fieldOperations || [];\r\n\r\n            // find the form\r\n            var UpdateForm = _logic.formGet();\r\n            if (!UpdateForm) return;\r\n\r\n            // clear form:\r\n            _logic.formClear();\r\n\r\n            // if there are values to\r\n            if (valueRules.fieldOperations.length > 0) {\r\n               valueRules.fieldOperations.forEach((r) => {\r\n                  _logic.addRow(r);\r\n               });\r\n            }\r\n\r\n            // our default operation will cause an empty row to\r\n            // appear after our first value entry.\r\n            // let's remove that one, and then add a new one\r\n            // at the end:\r\n            _logic.removeAddRow();\r\n\r\n            // display an empty row\r\n            _logic.addRow();\r\n         },\r\n\r\n         fromSettings: (settings) => {\r\n            // Note: we just want the { valueRules:[] } here:\r\n            var mySettings = settings.valueRules || settings;\r\n\r\n            _logic.setValues(mySettings);\r\n         },\r\n\r\n         toSettings: () => {\r\n            // valueRules = {\r\n            //\tfieldOperations:[\r\n            //\t\t{ fieldID:xxx, value:yyyy, type:zzz, op:aaa }\r\n            //\t]\r\n            // }\r\n            var settings = { fieldOperations: [] };\r\n\r\n            // for each of our formRows, decode the propery {}\r\n            this.formRows.forEach((fr) => {\r\n               var rowSettings = fr.toSettings();\r\n               if (rowSettings) {\r\n                  settings.fieldOperations.push(fr.toSettings());\r\n               }\r\n            });\r\n\r\n            return settings;\r\n         },\r\n      };\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: init,\r\n         fromSettings: (settings) => {\r\n            _logic.fromSettings(settings);\r\n         },\r\n         toSettings: () => {\r\n            return _logic.toSettings();\r\n         },\r\n         _logic: _logic,\r\n      };\r\n   }\r\n\r\n   valueDisplayRow(idBase) {\r\n      var uniqueInstanceID = webix.uid();\r\n      var myUnique = (key) => {\r\n         // return idBase + '_' + key  + '_' + uniqueInstanceID;\r\n         return key + \"_\" + uniqueInstanceID;\r\n      };\r\n\r\n      var ids = {\r\n         row: myUnique(\"row\"),\r\n         updateForm: myUnique(\"updateFormRow\"),\r\n         field: myUnique(\"field\"),\r\n         value: myUnique(\"value\"),\r\n         selectDc: myUnique(\"selectDc\"),\r\n         selectBy: myUnique(\"selectBy\"),\r\n         queryField: myUnique(\"queryField\"),\r\n         multiview: myUnique(\"multiview\"),\r\n         buttonAdd: myUnique(\"add\"),\r\n         buttonDelete: myUnique(\"delete\"),\r\n      };\r\n\r\n      var FilterComponent;\r\n\r\n      var _logic = {\r\n         callbacks: {\r\n            onAdd: () => {},\r\n            onDelete: () => {},\r\n         },\r\n\r\n         buttonsToggle: () => {\r\n            $$(ids.row).getChildViews()[0].getChildViews()[4].hide();\r\n            $$(ids.row).getChildViews()[0].getChildViews()[5].show();\r\n         },\r\n\r\n         getFieldList: (shouldFilter) => {\r\n            var options = [];\r\n            if (this.updateObject) {\r\n               options = (this.updateObject.fields() || []).map((f) => {\r\n                  return {\r\n                     id: f.id,\r\n                     value: f.label,\r\n                  };\r\n               });\r\n\r\n               // options = (this.updateObject.fields() || [])\r\n               // .filter(f => {\r\n               //\r\n               // \tif (f.key != 'connectObject') {\r\n               // \t\treturn true;\r\n               // \t} else {\r\n               // \t\t// if this is a connection field, only return\r\n               // \t\t// fields that are 1:x  where this field is the\r\n               // \t\t// source:\r\n               // \t\t// return ((f.linkType() == 'one') && (f.isSource()))\r\n               //\r\n               // \t\t// 6-14-2018 Changing from only 1:x to support many\r\n               // \t\t// if this is a connected field, only return\r\n               // \t\t// fields that this is the source\r\n               // \t\treturn (f.isSource())\r\n               // \t}\r\n               // })\r\n               // .map(f => {\r\n               // \treturn {\r\n               // \t\tid: f.id,\r\n               // \t\tvalue: f.label\r\n               // \t};\r\n               // });\r\n\r\n               // Remove fields who are selected\r\n               if (shouldFilter) {\r\n                  // store this row\r\n                  var usedHash = {};\r\n                  this.formRows.forEach((row) => {\r\n                     var rowView = $$(row.ui.id);\r\n                     if (rowView) {\r\n                        var field = rowView\r\n                           .getChildViews()[0]\r\n                           .getChildViews()[1];\r\n                        usedHash[field.getValue()] = true;\r\n                     }\r\n                  });\r\n                  options = options.filter((o) => {\r\n                     return !usedHash[o.id];\r\n                  });\r\n               }\r\n            }\r\n            return options;\r\n         },\r\n\r\n         isValid: () => {\r\n            var validator = this.currentForm.AB.Validation.validator();\r\n            var valueField = $$(ids.row).getChildViews()[0].getChildViews()[3];\r\n            var FormView = valueField.getParentView().getParentView();\r\n\r\n            var field = this.getUpdateObjectField($$(ids.field).getValue());\r\n            if (field) {\r\n               var value = field.getValue(valueField, {});\r\n\r\n               // // if a standard component that supports .getValue()\r\n               // if (valueField.getValue) {\r\n               // \tvalue = valueField.getValue();\r\n               // } else {\r\n               // \t// else use for field.getValue();\r\n               // \tvalue = field.getValue(valueField, {});\r\n               // }\r\n\r\n               // our .isValidData() wants value in an object:\r\n               var obj = {};\r\n               obj[field.columnName] = value;\r\n\r\n               field.isValidData(obj, validator);\r\n\r\n               // if value is empty, this is also an error:\r\n               if (\r\n                  value == \"\" ||\r\n                  value == null ||\r\n                  (Array.isArray(value) && value.length == 0)\r\n               ) {\r\n                  validator.addError(\r\n                     field.columnName,\r\n                     L(\"A value is required\")\r\n                  );\r\n               }\r\n\r\n               // field.getParentView()  ->  row\r\n               // row.getParentView()  -> Form\r\n               FormView.clearValidation();\r\n               validator.updateForm(FormView);\r\n\r\n               return validator.pass();\r\n            } else {\r\n               // if we didn't find an associated field ... then this isn't good\r\n               // data.\r\n\r\n               //// TODO: display error for our field picker.  Note, it doesn't have a unique .name\r\n               // field.\r\n               var fieldField = $$(ids.row)\r\n                  .getChildViews()[0]\r\n                  .getChildViews()[1];\r\n               fieldField.define(\"invalidMessage\", L(\"A value is required\"));\r\n               fieldField.define(\"invalid\", true);\r\n               fieldField.refresh();\r\n               // fieldField.markInvalid(this.labels.component.errorRequired);\r\n               return false;\r\n            }\r\n         },\r\n\r\n         selectField: (columnID) => {\r\n            var field = this.getUpdateObjectField(columnID);\r\n            if (!field) return;\r\n\r\n            var fieldComponent = field.formComponent(),\r\n               abView = fieldComponent.newInstance(field.object.application),\r\n               formFieldComponent = abView.component(this.App),\r\n               $componentView = formFieldComponent.ui,\r\n               $inputView;\r\n\r\n            $componentView.id = ids.value; // set our expected id\r\n\r\n            // find all the DataSources\r\n            var datasources = this.currentForm.AB.datacollections(\r\n               (dc) => dc.datasource\r\n            );\r\n\r\n            // create a droplist with those dataSources\r\n            var optionsDataSources = [];\r\n            datasources.forEach((dc) => {\r\n               optionsDataSources.push({ id: dc.id, value: dc.label });\r\n            });\r\n\r\n            // create a droplist with select options\r\n            var optionsSelectBy = [\r\n               { id: \"select-one\", value: L(\"Current selection\") },\r\n               {\r\n                  id: \"filter-select-one\",\r\n                  value: L(\"Select first after filter by...\"),\r\n               },\r\n            ];\r\n\r\n            var $optionUpdateExsits = {\r\n               type: \"clean\",\r\n               rows: [\r\n                  {\r\n                     cols: [\r\n                        {\r\n                           id: ids.selectDc,\r\n                           view: \"combo\",\r\n                           options: optionsDataSources,\r\n                           placeholder: L(\"Choose a data source\"),\r\n                           on: {\r\n                              onChange: (newv, oldv) => {\r\n                                 var selectedDC = this.currentForm.AB.datacollectionByID(\r\n                                    newv\r\n                                 );\r\n                                 if (\r\n                                    selectedDC &&\r\n                                    (selectedDC.sourceType == \"query\" ||\r\n                                       !field.isConnection)\r\n                                 ) {\r\n                                    var queryFieldOptions = [];\r\n                                    selectedDC.datasource\r\n                                       .fields()\r\n                                       .forEach((f) => {\r\n                                          queryFieldOptions.push({\r\n                                             id: f.id,\r\n                                             value: f.label,\r\n                                          });\r\n                                       });\r\n                                    $$(ids.queryField).define(\r\n                                       \"options\",\r\n                                       queryFieldOptions\r\n                                    );\r\n                                    $$(ids.queryField).refresh();\r\n                                    $$(ids.queryField).show();\r\n                                 } else {\r\n                                    $$(ids.queryField).hide();\r\n                                 }\r\n                              },\r\n                           },\r\n                        },\r\n                        // we will place a list of query fields if you choose a datasource that has a query source type\r\n                        {\r\n                           id: ids.queryField,\r\n                           view: \"combo\",\r\n                           hidden: true,\r\n                           placeholder: L(\"Choose value from...\"),\r\n                           options: [{ id: 1, value: \"figure this out\" }],\r\n                        },\r\n                     ],\r\n                  },\r\n                  {\r\n                     id: ids.selectBy,\r\n                     view: \"combo\",\r\n                     options: optionsSelectBy,\r\n                     placeholder: L(\"Choose select option\"),\r\n                     on: {\r\n                        onChange: (newv, oldv) => {\r\n                           var $row = $$(ids.row);\r\n                           $row.removeView($row.getChildViews()[1]);\r\n                           if (newv == \"select-one\") {\r\n                              $row.addView({}, 1);\r\n                           } else {\r\n                              var options = this.currentForm.datacollection.datasource\r\n                                 .fields()\r\n                                 .map(function (f) {\r\n                                    return {\r\n                                       id: f.id,\r\n                                       value: f.label,\r\n                                    };\r\n                                 });\r\n\r\n                              FilterComponent = this.AB.filterComplexNew(\r\n                                 `${idBase}_filter`\r\n                              );\r\n                              // FilterComponent.applicationLoad(\r\n                              //    this.currentForm.application\r\n                              // );\r\n                              FilterComponent.init({\r\n                                 isRecordRule: true,\r\n                                 fieldOptions: options,\r\n                              });\r\n                              FilterComponent.on(\"change\", (val) => {\r\n                                 _logic.onFilterChange(val);\r\n                              });\r\n\r\n                              $row.addView(FilterComponent.ui, 1);\r\n\r\n                              var dcId = $$(ids.selectDc).getValue();\r\n                              var dataCollection = this.currentForm.AB.datacollectionByID(\r\n                                 dcId\r\n                              );\r\n                              if (dataCollection) {\r\n                                 _logic.populateFilters(dataCollection);\r\n                              }\r\n                           }\r\n                        },\r\n                     },\r\n                  },\r\n               ],\r\n            };\r\n\r\n            // WORKAROUND: add '[Current User]' option to the user data field\r\n            if (field.key == \"user\") {\r\n               $componentView.options = $componentView.options || [];\r\n               $componentView.options.unshift({\r\n                  id: \"ab-current-user\",\r\n                  value: L(\"[Current User]\"),\r\n               });\r\n            }\r\n\r\n            // UPDATE: ok, in practice we have not had any use cases where\r\n            // we want individual values on connectedObject fields, but\r\n            // instead we want to insert the current selected element from\r\n            // a relevant data view.  So, replace the fieldComponet\r\n            // from a connectedObject field with a list of data views that\r\n            // are based upon the same object we are connected to:\r\n            if (field.isConnection) {\r\n               // find the ABObject this field connects to\r\n               var connectedObject = field.datasourceLink;\r\n\r\n               // find all the DataSources that are based upon this ABObject\r\n               // to do this, we find the root Page we are on, then ask that Page for datasources:\r\n               datasources = datasources.filter((dc) => {\r\n                  return dc.datasource.id == connectedObject.id;\r\n               });\r\n\r\n               var dcQueries = this.currentForm.AB.datacollections((dc) => {\r\n                  return (\r\n                     dc.sourceType == \"query\" &&\r\n                     dc.datasource &&\r\n                     dc.datasource.canFilterObject(connectedObject)\r\n                  );\r\n                  // return dc.datasource.id == connectedObject.id;\r\n               });\r\n\r\n               datasources = datasources.concat(dcQueries);\r\n\r\n               // refresh a droplist with those dataSources\r\n               optionsDataSources = [];\r\n               datasources.forEach((dc) => {\r\n                  optionsDataSources.push({ id: dc.id, value: dc.label });\r\n               });\r\n\r\n               // add select an array value option\r\n               optionsSelectBy.push({\r\n                  id: \"filter-select-all\",\r\n                  value: L(\"Select all after filter by...\"),\r\n               });\r\n\r\n               $inputView = $optionUpdateExsits;\r\n\r\n               // and the upcoming formFieldComponent.init()\r\n               // doesn't need to do anything:\r\n               formFieldComponent = {\r\n                  init: function () {},\r\n               };\r\n\r\n               // and we reset field so it's customDisplay isn't called:\r\n               // field = {};\r\n            } else {\r\n               $inputView = {\r\n                  id: ids.multiview,\r\n                  view: \"multiview\",\r\n                  cells: [\r\n                     {\r\n                        batch: \"custom\",\r\n                        rows: [\r\n                           $componentView,\r\n                           {\r\n                              view: \"label\",\r\n                              label: `<a>${L(\"Or exists value\")}</a>`,\r\n                              on: {\r\n                                 onItemClick: function () {\r\n                                    var $container = this.getParentView(),\r\n                                       $multiview = $container.getParentView();\r\n\r\n                                    $multiview.showBatch(\"exist\");\r\n                                 },\r\n                              },\r\n                           },\r\n                        ],\r\n                     },\r\n                     {\r\n                        // Update value from exists object\r\n                        batch: \"exist\",\r\n                        rows: [\r\n                           $optionUpdateExsits,\r\n                           {\r\n                              view: \"label\",\r\n                              label: `<a>${L(\"Or custom value\")}</a>`,\r\n                              on: {\r\n                                 onItemClick: function () {\r\n                                    var $container = this.getParentView(),\r\n                                       $multiview = $container.getParentView();\r\n\r\n                                    // clear filter view\r\n                                    $$(ids.selectBy).setValue(\"select-one\");\r\n\r\n                                    $multiview.showBatch(\"custom\");\r\n                                 },\r\n                              },\r\n                           },\r\n                        ],\r\n                     },\r\n                  ],\r\n               };\r\n            }\r\n\r\n            // Change component to display this field's form input\r\n            var $row = $$(ids.row).getChildViews()[0];\r\n            $row.removeView($row.getChildViews()[3]);\r\n            $row.addView($inputView, 3);\r\n\r\n            formFieldComponent.init();\r\n\r\n            // Show custom display of data field\r\n            if (!field.isConnection && field.customDisplay) {\r\n               // field.customDisplay(field, this.App, $row.getChildViews()[3].$view, {\r\n\r\n               var compNodeView = $$($componentView.id).$view;\r\n\r\n               // wait until render UI complete\r\n               setTimeout(() => {\r\n                  field.customDisplay(field, this.App, compNodeView, {\r\n                     editable: true,\r\n\r\n                     // tree\r\n                     isForm: true,\r\n                  });\r\n               }, 50);\r\n            }\r\n\r\n            // Show the remove button\r\n            var $buttonRemove = $row.getChildViews()[4];\r\n            $buttonRemove.show();\r\n\r\n            // Add a new row\r\n            if (columnID) _logic.callbacks.onAdd();\r\n         },\r\n\r\n         setValue: (data) => {\r\n            $$(ids.field).setValue(data.fieldID);\r\n            // note: this triggers our _logic.selectField() fn.\r\n            var field = this.getUpdateObjectField(data.fieldID);\r\n            if (field) {\r\n               var setValueFn = () => {\r\n                  $$(ids.selectDc).setValue(data.value);\r\n                  if (data.queryField) {\r\n                     $$(ids.queryField).setValue(data.queryField);\r\n                  }\r\n                  var selectBy = data.selectBy || \"select-one\";\r\n                  $$(ids.selectBy).setValue(selectBy);\r\n\r\n                  if (selectBy != \"select-one\") {\r\n                     var collectionId = data.value;\r\n                     var dataCollection = this.currentForm.AB.datacollectionByID(\r\n                        collectionId\r\n                     );\r\n                     if (dataCollection && data.filterConditions) {\r\n                        _logic.populateFilters(\r\n                           dataCollection,\r\n                           data.filterConditions\r\n                        );\r\n                     }\r\n                  }\r\n               };\r\n\r\n               // now handle our special connectedObject case:\r\n               if (field.isConnection) {\r\n                  setValueFn();\r\n               } else {\r\n                  if (data.valueType == \"exist\") {\r\n                     $$(ids.multiview).showBatch(\"exist\");\r\n\r\n                     setValueFn();\r\n                  } else {\r\n                     $$(ids.multiview).showBatch(\"custom\");\r\n\r\n                     // wait until render UI complete\r\n                     setTimeout(function () {\r\n                        // set value to custom field\r\n                        var rowData = {};\r\n                        rowData[field.columnName] = data.value;\r\n                        field.setValue($$(ids.value), rowData);\r\n                     }, 50);\r\n                  }\r\n               }\r\n            }\r\n         },\r\n\r\n         populateFilters: (dataView, filterConditions) => {\r\n            filterConditions =\r\n               filterConditions ||\r\n               ABViewRuleActionObjectUpdaterDefaults.filterConditions;\r\n\r\n            // Populate data to popups\r\n            // FilterComponent.objectLoad(objectCopy);\r\n            FilterComponent.fieldsLoad(\r\n               dataView.datasource ? dataView.datasource.fields() : []\r\n            );\r\n            FilterComponent.setValue(filterConditions);\r\n         },\r\n\r\n         toSettings: () => {\r\n            // if this isn't the last entry row\r\n            // * a row with valid data has the [delete] button showing.\r\n            var buttonDelete = $$(ids.buttonDelete);\r\n            if (buttonDelete && buttonDelete.isVisible()) {\r\n               var data = {};\r\n               data.fieldID = $$(ids.field).getValue();\r\n\r\n               var $valueField = $$(ids.value);\r\n               var field = this.getUpdateObjectField(data.fieldID);\r\n\r\n               var getValueFn = () => {\r\n                  data.value = $$(ids.selectDc).getValue();\r\n                  data.queryField = $$(ids.queryField).getValue();\r\n                  data.op = \"set\"; // possible to create other types of operations.\r\n                  data.type = field.key;\r\n                  data.selectBy = $$(ids.selectBy).getValue();\r\n                  data.valueType = \"exist\";\r\n                  if (FilterComponent) {\r\n                     data.filterConditions = FilterComponent.getValue();\r\n                  }\r\n               };\r\n\r\n               // now handle our special connectedObject case:\r\n               if (field.isConnection) {\r\n                  getValueFn();\r\n               } else {\r\n                  if ($$(ids.multiview).config.visibleBatch == \"exist\") {\r\n                     getValueFn();\r\n                  } else {\r\n                     data.value = field.getValue($valueField, {});\r\n                     data.op = \"set\"; // possible to create other types of operations.\r\n                     data.type = field.key;\r\n                     data.valueType = \"custom\";\r\n                  }\r\n               }\r\n\r\n               return data;\r\n            } else {\r\n               return null;\r\n            }\r\n         },\r\n      };\r\n\r\n      var _ui = {\r\n         id: ids.row,\r\n         view: \"layout\",\r\n         rows: [\r\n            {\r\n               cols: [\r\n                  {\r\n                     // Label\r\n                     view: \"label\",\r\n                     width: this.currentForm.AB.Config.labelWidthSmall,\r\n                     label: L(\"Set\"),\r\n                  },\r\n                  {\r\n                     // Field list\r\n                     view: \"combo\",\r\n                     name: \"field\",\r\n                     placeholder: L(\"Choose a field\"),\r\n                     id: ids.field,\r\n                     height: 32,\r\n                     options: _logic.getFieldList(true),\r\n                     on: {\r\n                        onChange: function (columnId) {\r\n                           _logic.selectField(columnId);\r\n                        },\r\n                     },\r\n                  },\r\n                  {\r\n                     // Label\r\n                     view: \"label\",\r\n                     width: this.currentForm.AB.Config.labelWidthSmall,\r\n                     label: L(\"To\"),\r\n                  },\r\n\r\n                  // Field value\r\n                  // NOTE: this view gets replaced each time a field is selected.\r\n                  // We replace it with a component associated with the Field\r\n                  {},\r\n\r\n                  {\r\n                     // \"Remove\" button\r\n                     view: \"button\",\r\n                     css: \"webix_danger\",\r\n                     id: ids.buttonDelete,\r\n                     icon: \"fa fa-trash\",\r\n                     type: \"icon\",\r\n                     width: 30,\r\n                     hidden: true,\r\n                     click: function () {\r\n                        _logic.callbacks.onDelete(ids.row);\r\n                     },\r\n                  },\r\n               ],\r\n            },\r\n            {}, // we will add filters here if we need them\r\n         ],\r\n      };\r\n\r\n      var init = (options) => {\r\n         for (var c in _logic.callbacks) {\r\n            _logic.callbacks[c] = options[c] || _logic.callbacks[c];\r\n         }\r\n\r\n         if (options.data) {\r\n            // options.data = { formID:xxx, value:yyy,  type:zzzz }\r\n            _logic.setValue(options.data);\r\n\r\n            // _logic.buttonsToggle();\r\n         }\r\n      };\r\n\r\n      return {\r\n         ui: _ui,\r\n         init: init,\r\n         toSettings: () => {\r\n            return _logic.toSettings();\r\n         },\r\n         _logic: _logic,\r\n      };\r\n   }\r\n\r\n   getUpdateObjectField(fieldID) {\r\n      return this.updateObject ? this.updateObject.fieldByID(fieldID) : null;\r\n   }\r\n\r\n   /**\r\n    * @method processUpdateObject\r\n    * Perform the specified update actions on the provided objectToUpdate\r\n    * @param {obj} options  Additional information required to make updates.\r\n    * @param {obj} objectToUpdate  The object to make the updates on.\r\n    * @return {boolean}   true if an update took place, false if no updates.\r\n    */\r\n   processUpdateObject(options, objectToUpdate) {\r\n      this._formData = objectToUpdate;\r\n      // return new Promise((resolve, reject) => {\r\n      var isUpdated = false;\r\n\r\n      this.valueRules = this.valueRules || {};\r\n      this.valueRules.fieldOperations = this.valueRules.fieldOperations || [];\r\n\r\n      // var allPromises = [];\r\n\r\n      // for each of our operations\r\n      this.valueRules.fieldOperations.forEach((op) => {\r\n         // op = {\r\n         // \tfieldID:'zzzzz',\r\n         //\tvalue: 'xxx',\r\n         //\top: 'set',\r\n         //  type:'',\r\n         //  queryField: '', // id of ABField\r\n         //  selectBy:'',   ['select-one', 'filter-select-one', 'filter-select-all']\r\n         //  valueType: \"\", ['custom', 'exist']\r\n         // \tfilterConditions: { // array of filters to apply to the data table\r\n         //\t\tglue: 'and',\r\n         // \t\trules: []\r\n         //  }\r\n         // }\r\n\r\n         var field = this.getUpdateObjectField(op.fieldID);\r\n         if (!field) return;\r\n\r\n         var value = op.value;\r\n\r\n         if (value == \"ab-current-user\") {\r\n            value = this.currentForm.AB.Account.username();\r\n\r\n         // in the case of a connected Field, we use op.value to get the\r\n         // datacollection, and find it's currently selected value:\r\n         } else if (field.isConnection || op.valueType == \"exist\") {\r\n            // NOTE: 30 May 2018 :current decision from Ric is to limit this\r\n            // to only handle 1:x connections where we update the current obj\r\n            // with the PK of the value from the DC.\r\n            //\r\n            // In the future, if we want to handle the other options,\r\n            // we need to modify this to handle the M:x connections where\r\n            // we insert our PK into the value from the DC.\r\n\r\n            // op.value is the ABDatacollection.id we need to find\r\n            var dataCollection = this.currentForm.AB.datacollectionByID(\r\n               op.value\r\n            );\r\n\r\n            // we don't want to mess with the dataView directly since it might\r\n            // be used by other parts of the system and this refresh might reset\r\n            // it's cursor.\r\n            // var clonedDataCollection = dataView.filteredClone(op.filterConditions);\r\n\r\n            // loop through rules to find \"same-as-field\" or \"not-same-as-field\"\r\n            // adjust operator and switch key value to actual value when found\r\n            var filterConditions = this.currentForm.AB.cloneDeep(\r\n               op.filterConditions\r\n            );\r\n            if (filterConditions && filterConditions.rules) {\r\n               filterConditions.rules\r\n                  .filter((r) => {\r\n                     return (\r\n                        r.rule == \"same_as_field\" ||\r\n                        r.rule == \"not_same_as_field\"\r\n                     );\r\n                  })\r\n                  .forEach((item) => {\r\n                     var valueField = this.currentForm.datacollection.datasource.fieldByID(\r\n                        item.value\r\n                     );\r\n                     if (valueField.isConnection) {\r\n                        item.value = valueField.format(this._formData);\r\n                     } else {\r\n                        item.value = this._formData[valueField.columnName];\r\n                     }\r\n\r\n                     if (item.rule == \"not_same_as_field\") {\r\n                        item.rule = \"not equals\";\r\n                     } else {\r\n                        item.rule = \"equals\";\r\n                     }\r\n                  });\r\n            }\r\n\r\n            let clonedDataCollection = dataCollection.filteredClone(\r\n               filterConditions\r\n            );\r\n\r\n            switch (op.selectBy) {\r\n               // the 'select-one' is getting the currently set cursor on this data collection\r\n               // and using that value.\r\n               // TODO: rename to 'select-cursor'\r\n               case \"select-one\":\r\n               default:\r\n                  value = clonedDataCollection.getCursor(); // dataView.getItem(dataView.getCursor());\r\n\r\n                  if (value) {\r\n                     // NOTE: webix documentation issue: .getCursor() is supposed to return\r\n                     // the .id of the item.  However it seems to be returning the {obj}\r\n\r\n                     if (op.valueType == \"exist\") {\r\n                        var fieldWithValue = clonedDataCollection.datasource.fieldByID(\r\n                           op.queryField\r\n                        );\r\n\r\n                        if (fieldWithValue)\r\n                           value = value[fieldWithValue.columnName];\r\n                     } else if (value.id) {\r\n                        value = value.id;\r\n                     }\r\n                  }\r\n\r\n                  // QUESTION: if value returns undefined should we do something else?\r\n                  switch (op.op) {\r\n                     case \"set\":\r\n                        if (!value) break;\r\n\r\n                        if (field.isConnection) {\r\n                           // if we are setting a connection we do not want to pass the full object because\r\n                           // batch creates payload gets too large\r\n                           objectToUpdate[field.columnName] = {};\r\n                           objectToUpdate[field.columnName].id =\r\n                              value[field.datasourceLink.PK()];\r\n                           objectToUpdate[field.columnName][\r\n                              field.datasourceLink.PK()\r\n                           ] = value[field.datasourceLink.PK()];\r\n\r\n                           // If the connect field use the custom FK, then it requires to pass value of the custom FK.\r\n                           if (field.settings.isCustomFK) {\r\n                              if (field.indexField) {\r\n                                 objectToUpdate[field.columnName][\r\n                                    field.indexField.columnName\r\n                                 ] = value[field.indexField.columnName];\r\n                              }\r\n                              if (field.indexField2) {\r\n                                 objectToUpdate[field.columnName][\r\n                                    field.indexField2.columnName\r\n                                 ] = value[field.indexField2.columnName];\r\n                              }\r\n                           }\r\n\r\n                           field.datasourceLink\r\n                              .fields(\r\n                                 (f) =>\r\n                                    f.key == \"combined\" || f.key == \"AutoIndex\"\r\n                              )\r\n                              .forEach((f) => {\r\n                                 objectToUpdate[field.columnName][\r\n                                    f.columnName\r\n                                 ] = value[f.columnName];\r\n                              });\r\n                        } else {\r\n                           objectToUpdate[field.columnName] = value;\r\n                        }\r\n\r\n                        break;\r\n                  }\r\n                  break;\r\n\r\n               // attempt to filter this data collection by the given filterConditions\r\n               case \"filter-select-all\":\r\n                  var newValues = [];\r\n\r\n                  var currRow = clonedDataCollection.getFirstRecord();\r\n                  while (currRow) {\r\n                     // do something there\r\n\r\n                     switch (clonedDataCollection.sourceType) {\r\n                        // case: datacollection is an object\r\n                        // we want to set our field to this values\r\n                        case \"object\":\r\n                           newValues.push(currRow.id);\r\n                           break;\r\n\r\n                        // case: datacollection is a query\r\n                        // our field is a pointer to an object. we want to pull out that object\r\n                        // from the query data.\r\n                        case \"query\":\r\n                           var fieldWithValue = clonedDataCollection.datasource.fieldByID(\r\n                              op.queryField\r\n                           );\r\n\r\n                           var newValue = currRow[fieldWithValue.columnName];\r\n\r\n                           if (typeof newValue == \"undefined\") {\r\n                              newValue = currRow[fieldWithValue.relationName()];\r\n\r\n                              if (Array.isArray(newValue)) {\r\n                                 newValue = newValue.map((v) => {\r\n                                    return v.id ? v.id : v;\r\n                                 });\r\n                              } else if (newValue.id) {\r\n                                 newValue = newValue.id;\r\n                              }\r\n                           }\r\n\r\n                           newValues = this.currentForm.AB.uniq(\r\n                              newValues.concat(newValue)\r\n                           );\r\n\r\n                           break;\r\n                     }\r\n\r\n                     currRow = clonedDataCollection.getNextRecord(currRow);\r\n                  }\r\n\r\n                  // QUESTION: if value returns undefined should we do something else?\r\n                  switch (op.op) {\r\n                     case \"set\":\r\n                        if (field.linkType() == \"one\") {\r\n                           var updates = [];\r\n                           newValues.forEach((v) => {\r\n                              var objectToUpdateClone = this.currentForm.AB.cloneDeep(\r\n                                 objectToUpdate\r\n                              );\r\n                              objectToUpdateClone[field.columnName] = v;\r\n                              updates.push(objectToUpdateClone);\r\n                           });\r\n                           objectToUpdate.newRecords = updates;\r\n                        } else {\r\n                           objectToUpdate[field.columnName] = newValues;\r\n                        }\r\n                        break;\r\n                  }\r\n                  break;\r\n\r\n               case \"filter-select-one\":\r\n                  newValues = [];\r\n\r\n                  value = clonedDataCollection.getFirstRecord();\r\n\r\n                  if (value) {\r\n                     // case: datacollection is a query\r\n                     // our field is a pointer to an object. we want to pull out that object\r\n                     // from the query data.\r\n                     if (\r\n                        clonedDataCollection.sourceType == \"query\" ||\r\n                        (op.valueType == \"exist\" && op.queryField)\r\n                     ) {\r\n                        fieldWithValue = clonedDataCollection.datasource.fieldByID(\r\n                           op.queryField\r\n                        );\r\n\r\n                        newValue = value[fieldWithValue.columnName];\r\n\r\n                        if (typeof newValue == \"undefined\") {\r\n                           newValue = value[fieldWithValue.relationName()];\r\n                           if (Array.isArray(newValue)) {\r\n                              newValue = newValue[0];\r\n                           }\r\n                           if (newValue.id) newValue = newValue.id;\r\n                        }\r\n\r\n                        value = newValue;\r\n                     }\r\n                     // case: datacollection is an object\r\n                     // we want to set our field to this values\r\n                     else if (clonedDataCollection.sourceType == \"object\") {\r\n                        // NOTE: webix documentation issue: .getCursor() is supposed to return\r\n                        // the .id of the item.  However it seems to be returning the {obj}\r\n\r\n                        // we need to use the objects indexField(2) if there is one\r\n                        // otherwise default to the id\r\n                        var lookup;\r\n                        if (field.indexField) {\r\n                           lookup = field.indexField.columnName;\r\n                        } else if (field.indexField2) {\r\n                           lookup = field.indexField2.columnName;\r\n                        }\r\n                        if (lookup && value[lookup]) {\r\n                           value = value[lookup];\r\n                        } else if (value.id) {\r\n                           value = value.id;\r\n                        }\r\n                     }\r\n                  }\r\n\r\n                  // QUESTION: if value returns undefined should we do something else?\r\n                  switch (op.op) {\r\n                     case \"set\":\r\n                        objectToUpdate[field.columnName] = value;\r\n                        break;\r\n                  }\r\n                  break;\r\n            }\r\n\r\n            isUpdated = true;\r\n\r\n            // allPromises.push(connectedPromise);\r\n         } else {\r\n            // var setPromise = new Promise((resolve, reject) => {\r\n            switch (op.op) {\r\n               case \"set\":\r\n                  objectToUpdate[field.columnName] = value;\r\n                  break;\r\n            }\r\n\r\n            isUpdated = true;\r\n\r\n            //    resolve(isUpdated);\r\n            // });\r\n\r\n            // allPromises.push(setPromise);\r\n\r\n            // console.log(\"finished\");\r\n         }\r\n      });\r\n\r\n      return isUpdated;\r\n      // Promise.all(allPromises).then(() => {\r\n      //    resolve(isUpdated);\r\n      // });\r\n      // });\r\n   }\r\n\r\n   // process\r\n   // gets called when a form is submitted and the data passes the Query Builder Rules.\r\n   // @param {obj} options\r\n   // @return {Promise}\r\n   process(options) {\r\n      this._formData = options.data;\r\n\r\n      return new Promise((resolve, reject) => {\r\n         let isUpdated = this.processUpdateObject({}, options.data);\r\n         if (!isUpdated) {\r\n            resolve();\r\n         } else {\r\n            // get the model from the provided Form Obj:\r\n            var dv = options.form.datacollection;\r\n            if (!dv) return resolve();\r\n\r\n            var model = dv.model;\r\n            model\r\n               .update(options.data.id, options.data)\r\n               .then(resolve)\r\n               .catch((err) => {\r\n                  this.currentForm.AB.notify.developer(err, {\r\n                     context:\r\n                        \"ABViewRuleActionObjectUpdater:process  update error\",\r\n                     id: options.data.id,\r\n                     data: options.data,\r\n                  });\r\n                  reject(err);\r\n               });\r\n         }\r\n      });\r\n   }\r\n\r\n   // objectLoad\r\n   // save the current object this Action is associated with.\r\n   objectLoad(object) {\r\n      super.objectLoad(object);\r\n      this.updateObjectLoad(object);\r\n   }\r\n\r\n   // updateObjectLoad\r\n   // save the given object as the object we will update.\r\n   updateObjectLoad(object) {\r\n      // stash rules for old object\r\n      if (this.updateObject) {\r\n         this.stashRules[this.updateObject.id] = this.valueRules;\r\n      }\r\n\r\n      this.updateObject = object;\r\n\r\n      // with a new updateObject, then reset our UI\r\n      this._uiUpdater = null;\r\n\r\n      // reload any stashed rules, or set to {}\r\n      this.valueRules = this.stashRules[this.updateObject.id] || {};\r\n   }\r\n\r\n   // fromSettings\r\n   // initialize this Action from a given set of setting values.\r\n   // @param {obj}  settings\r\n   fromSettings(settings) {\r\n      settings = settings || {};\r\n\r\n      super.fromSettings(settings); // let the parent handle the QB\r\n\r\n      // make sure UI is updated:\r\n      // set our updateObject\r\n      if (settings.updateObjectURL) {\r\n         var updateObject = this.currentForm.application.urlResolve(\r\n            settings.updateObjectURL\r\n         );\r\n         this.updateObject = updateObject;\r\n      }\r\n\r\n      // if we have a display component, then populate it:\r\n      if (this._uiUpdater) {\r\n         // now we handle our valueRules:{} object settings.\r\n         // pass the settings off to our DisplayList component:\r\n         this._uiUpdater.fromSettings(settings);\r\n      }\r\n   }\r\n\r\n   // toSettings\r\n   // return an object that represents the current state of this Action\r\n   // @return {obj}\r\n   toSettings() {\r\n      // settings: {\r\n      //\tvalueRules:{}\r\n      // }\r\n\r\n      // let our parent store our QB settings\r\n      var settings = super.toSettings();\r\n\r\n      settings.valueRules = this._uiUpdater.toSettings();\r\n      settings.updateObjectURL = this.updateObject.urlPointer();\r\n\r\n      return settings;\r\n   }\r\n\r\n   /**\r\n    * @method isReady()\r\n    * returns a promise that gets resolved once our action is ready to work.\r\n    * Here we need to scan each of our field operations, and verify all\r\n    * related data collections are initialized before we can continue.\r\n    * @return {Promise}\r\n    */\r\n   isReady() {\r\n      var allReady = [];\r\n      let fieldOps = this.valueRules?.fieldOperations ?? [];\r\n      fieldOps.forEach((op) => {\r\n         let field = this.getUpdateObjectField(op.fieldID);\r\n         if (!field) return;\r\n         if (!field.isConnection && op.valueType !== \"exist\") return;\r\n\r\n         // this references a DC\r\n         let DC = this.currentForm.AB.datacollectionByID(op.value);\r\n         if (DC?.dataStatus === DC?.dataStatusFlag.initialized) return;\r\n\r\n         // not ready yet, so wait until the 'initializedData' event\r\n         allReady.push(\r\n            new Promise((resolve /*, reject */) => {\r\n               DC.on(\"initializedData\", () => {\r\n                  resolve();\r\n               });\r\n            })\r\n         );\r\n      });\r\n      return Promise.all(allReady);\r\n   }\r\n};\r\n","/**\r\n * @class config\r\n *\r\n * Manage our configuration settings.\r\n */\r\n\r\nimport ConfigDesktop from \"./configDesktop\";\r\nimport ConfigMobile from \"./configMobile\";\r\nimport Icons from \"./icons\";\r\n\r\nexport default {\r\n   config: function () {\r\n      // TODO: decide which config file to return here:\r\n      if (window.innerWidth < 768) {\r\n         return ConfigMobile;\r\n      }\r\n      return ConfigDesktop;\r\n   },\r\n   icons: Icons.icons,\r\n};\r\n","/**\r\n * @class configDesktop\r\n *\r\n * Manage our configuration settings for Desktop styles.\r\n\r\n */\r\n\r\nexport default {\r\n   // Application List\r\n   appListRowHeight: 67,\r\n\r\n   // button types\r\n   buttonWidthLarge: 200,\r\n   buttonWidthMedium: 150,\r\n   buttonWidthSmall: 100,\r\n   buttonWidthExtraSmall: 50,\r\n\r\n   // tab types\r\n   tabWidthLarge: 200,\r\n   tabWidthMedium: 120,\r\n   tabWidthSmall: 100,\r\n   tabWidthExtraSmall: 50,\r\n\r\n   // column types\r\n   columnWidthXLarge: 350,\r\n   columnWidthLarge: 250,\r\n   columnWidthMedium: 200,\r\n   columnWidthSmall: 150,\r\n   columnWidthExtraSmall: 100,\r\n\r\n   // spacers\r\n   xSmallSpacer: 5,\r\n   smallSpacer: 10,\r\n   mediumSpacer: 25,\r\n   largeSpacer: 50,\r\n   xLargeSpacer: 100,\r\n   xxLargeSpacer: 200,\r\n   xxxLargeSpacer: 400,\r\n   appListSpacerRowHeight: 100,\r\n   appListSpacerColMinWidth: 100,\r\n   appListSpacerColMaxWidth: 200,\r\n   objectWorkspaceColWidth: 20,\r\n\r\n   // labels\r\n   labelWidthSmall: 50,\r\n   labelWidthMedium: 80,\r\n   labelWidthLarge: 120,\r\n   labelWidthXLarge: 150,\r\n   labelWidthXXLarge: 200,\r\n   labelWidthXXXLarge: 280,\r\n   labelWidthCheckbox: 0,\r\n\r\n   // show elements on desktop\r\n   hideMobile: false,\r\n};\r\n","/**\r\n * @class configMobile\r\n *\r\n * Manage our configuration settings for mobile styles.\r\n\r\n */\r\n\r\nexport default {\r\n   // Application List\r\n   appListRowHeight: 67,\r\n\r\n   // button types\r\n   buttonWidthLarge: 200,\r\n   buttonWidthMedium: 150,\r\n   buttonWidthSmall: 100,\r\n   buttonWidthExtraSmall: 50,\r\n\r\n   // tab types\r\n   tabWidthLarge: 200,\r\n   tabWidthMedium: 120,\r\n   tabWidthSmall: 100,\r\n   tabWidthExtraSmall: 50,\r\n\r\n   // column types\r\n   columnWidthLarge: 250,\r\n   columnWidthMedium: 200,\r\n   columnWidthSmall: 150,\r\n   columnWidthExtraSmall: 100,\r\n\r\n   // spacers\r\n   xSmallSpacer: 1,\r\n   smallSpacer: 1,\r\n   mediumSpacer: 10,\r\n   largeSpacer: 20,\r\n   xLargeSpacer: 50,\r\n   xxLargeSpacer: 100,\r\n   xxxLargeSpacer: 120,\r\n   appListSpacerRowHeight: 10,\r\n   appListSpacerColMinWidth: 1,\r\n   appListSpacerColMaxWidth: 1,\r\n   objectWorkspaceColWidth: 1,\r\n\r\n   // labels\r\n   labelWidthSmall: 50,\r\n   labelWidthMedium: 80,\r\n   labelWidthLarge: 120,\r\n   labelWidthXLarge: 120,\r\n   labelWidthXXLarge: 120,\r\n   labelWidthCheckbox: 0,\r\n\r\n   // hide elements for mobile\r\n   hideMobile: true,\r\n};\r\n","export default {\r\n   icons: [\r\n      \"500px\",\r\n      \"address-book\",\r\n      \"address-book-o\",\r\n      \"address-card\",\r\n      \"address-card-o\",\r\n      \"adjust\",\r\n      \"adn\",\r\n      \"align-center\",\r\n      \"align-justify\",\r\n      \"align-left\",\r\n      \"align-right\",\r\n      \"amazon\",\r\n      \"ambulance\",\r\n      \"american-sign-language-interpreting\",\r\n      \"anchor\",\r\n      \"android\",\r\n      \"angellist\",\r\n      \"angle-double-down\",\r\n      \"angle-double-left\",\r\n      \"angle-double-right\",\r\n      \"angle-double-up\",\r\n      \"angle-down\",\r\n      \"angle-left\",\r\n      \"angle-right\",\r\n      \"angle-up\",\r\n      \"apple\",\r\n      \"archive\",\r\n      \"area-chart\",\r\n      \"arrow-circle-down\",\r\n      \"arrow-circle-left\",\r\n      \"arrow-circle-o-down\",\r\n      \"arrow-circle-o-left\",\r\n      \"arrow-circle-o-right\",\r\n      \"arrow-circle-o-up\",\r\n      \"arrow-circle-right\",\r\n      \"arrow-circle-up\",\r\n      \"arrow-down\",\r\n      \"arrow-left\",\r\n      \"arrow-right\",\r\n      \"arrow-up\",\r\n      \"arrows\",\r\n      \"arrows-alt\",\r\n      \"arrows-h\",\r\n      \"arrows-v\",\r\n      \"asl-interpreting\",\r\n      \"assistive-listening-systems\",\r\n      \"asterisk\",\r\n      \"at\",\r\n      \"audio-description\",\r\n      \"automobile\",\r\n      \"backward\",\r\n      \"balance-scale\",\r\n      \"ban\",\r\n      \"bandcamp\",\r\n      \"bank\",\r\n      \"bar-chart\",\r\n      \"bar-chart-o\",\r\n      \"barcode\",\r\n      \"bars\",\r\n      \"bath\",\r\n      \"bathtub\",\r\n      \"battery\",\r\n      \"battery-0\",\r\n      \"battery-1\",\r\n      \"battery-2\",\r\n      \"battery-3\",\r\n      \"battery-4\",\r\n      \"battery-empty\",\r\n      \"battery-full\",\r\n      \"battery-half\",\r\n      \"battery-quarter\",\r\n      \"battery-three-quarters\",\r\n      \"bed\",\r\n      \"beer\",\r\n      \"behance\",\r\n      \"behance-square\",\r\n      \"bell\",\r\n      \"bell-o\",\r\n      \"bell-slash\",\r\n      \"bell-slash-o\",\r\n      \"bicycle\",\r\n      \"binoculars\",\r\n      \"birthday-cake\",\r\n      \"bitbucket\",\r\n      \"bitbucket-square\",\r\n      \"bitcoin\",\r\n      \"black-tie\",\r\n      \"blind\",\r\n      \"bluetooth\",\r\n      \"bluetooth-b\",\r\n      \"bold\",\r\n      \"bolt\",\r\n      \"bomb\",\r\n      \"book\",\r\n      \"bookmark\",\r\n      \"bookmark-o\",\r\n      \"braille\",\r\n      \"briefcase\",\r\n      \"btc\",\r\n      \"bug\",\r\n      \"building\",\r\n      \"building-o\",\r\n      \"bullhorn\",\r\n      \"bullseye\",\r\n      \"bus\",\r\n      \"buysellads\",\r\n      \"cab\",\r\n      \"calculator\",\r\n      \"calendar\",\r\n      \"calendar-check-o\",\r\n      \"calendar-minus-o\",\r\n      \"calendar-o\",\r\n      \"calendar-plus-o\",\r\n      \"calendar-times-o\",\r\n      \"camera\",\r\n      \"camera-retro\",\r\n      \"car\",\r\n      \"caret-down\",\r\n      \"caret-left\",\r\n      \"caret-right\",\r\n      \"caret-square-o-down\",\r\n      \"caret-square-o-left\",\r\n      \"caret-square-o-right\",\r\n      \"caret-square-o-up\",\r\n      \"caret-up\",\r\n      \"cart-arrow-down\",\r\n      \"cart-plus\",\r\n      \"cc\",\r\n      \"cc-amex\",\r\n      \"cc-diners-club\",\r\n      \"cc-discover\",\r\n      \"cc-jcb\",\r\n      \"cc-mastercard\",\r\n      \"cc-paypal\",\r\n      \"cc-stripe\",\r\n      \"cc-visa\",\r\n      \"certificate\",\r\n      \"chain\",\r\n      \"chain-broken\",\r\n      \"check\",\r\n      \"check-circle\",\r\n      \"check-circle-o\",\r\n      \"check-square\",\r\n      \"check-square-o\",\r\n      \"chevron-circle-down\",\r\n      \"chevron-circle-left\",\r\n      \"chevron-circle-right\",\r\n      \"chevron-circle-up\",\r\n      \"chevron-down\",\r\n      \"chevron-left\",\r\n      \"chevron-right\",\r\n      \"chevron-up\",\r\n      \"child\",\r\n      \"chrome\",\r\n      \"circle\",\r\n      \"circle-o\",\r\n      \"circle-o-notch\",\r\n      \"circle-thin\",\r\n      \"clipboard\",\r\n      \"clock-o\",\r\n      \"clone\",\r\n      \"close\",\r\n      \"cloud\",\r\n      \"cloud-download\",\r\n      \"cloud-upload\",\r\n      \"cny\",\r\n      \"code\",\r\n      \"code-fork\",\r\n      \"codepen\",\r\n      \"codiepie\",\r\n      \"coffee\",\r\n      \"cog\",\r\n      \"cogs\",\r\n      \"columns\",\r\n      \"comment\",\r\n      \"comment-o\",\r\n      \"commenting\",\r\n      \"commenting-o\",\r\n      \"comments\",\r\n      \"comments-o\",\r\n      \"compass\",\r\n      \"compress\",\r\n      \"connectdevelop\",\r\n      \"contao\",\r\n      \"copy\",\r\n      \"copyright\",\r\n      \"creative-commons\",\r\n      \"credit-card\",\r\n      \"credit-card-alt\",\r\n      \"crop\",\r\n      \"crosshairs\",\r\n      \"css3\",\r\n      \"cube\",\r\n      \"cubes\",\r\n      \"cut\",\r\n      \"cutlery\",\r\n      \"dashboard\",\r\n      \"dashcube\",\r\n      \"database\",\r\n      \"deaf\",\r\n      \"deafness\",\r\n      \"dedent\",\r\n      \"delicious\",\r\n      \"desktop\",\r\n      \"deviantart\",\r\n      \"diamond\",\r\n      \"digg\",\r\n      \"dollar\",\r\n      \"dot-circle-o\",\r\n      \"download\",\r\n      \"dribbble\",\r\n      \"drivers-license\",\r\n      \"drivers-license-o\",\r\n      \"dropbox\",\r\n      \"drupal\",\r\n      \"edge\",\r\n      \"edit\",\r\n      \"eercast\",\r\n      \"eject\",\r\n      \"ellipsis-h\",\r\n      \"ellipsis-v\",\r\n      \"empire\",\r\n      \"envelope\",\r\n      \"envelope-o\",\r\n      \"envelope-open\",\r\n      \"envelope-open-o\",\r\n      \"envelope-square\",\r\n      \"envira\",\r\n      \"eraser\",\r\n      \"etsy\",\r\n      \"eur\",\r\n      \"euro\",\r\n      \"exchange\",\r\n      \"exclamation\",\r\n      \"exclamation-circle\",\r\n      \"exclamation-triangle\",\r\n      \"expand\",\r\n      \"expeditedssl\",\r\n      \"external-link\",\r\n      \"external-link-square\",\r\n      \"eye\",\r\n      \"eye-slash\",\r\n      \"eyedropper\",\r\n      \"fa\",\r\n      \"facebook\",\r\n      \"facebook-f\",\r\n      \"facebook-official\",\r\n      \"facebook-square\",\r\n      \"fast-backward\",\r\n      \"fast-forward\",\r\n      \"fax\",\r\n      \"feed\",\r\n      \"female\",\r\n      \"fighter-jet\",\r\n      \"file\",\r\n      \"file-archive-o\",\r\n      \"file-audio-o\",\r\n      \"file-code-o\",\r\n      \"file-excel-o\",\r\n      \"file-image-o\",\r\n      \"file-movie-o\",\r\n      \"file-o\",\r\n      \"file-pdf-o\",\r\n      \"file-photo-o\",\r\n      \"file-picture-o\",\r\n      \"file-powerpoint-o\",\r\n      \"file-sound-o\",\r\n      \"file-text\",\r\n      \"file-text-o\",\r\n      \"file-video-o\",\r\n      \"file-word-o\",\r\n      \"file-zip-o\",\r\n      \"files-o\",\r\n      \"film\",\r\n      \"filter\",\r\n      \"fire\",\r\n      \"fire-extinguisher\",\r\n      \"firefox\",\r\n      \"first-order\",\r\n      \"flag\",\r\n      \"flag-checkered\",\r\n      \"flag-o\",\r\n      \"flash\",\r\n      \"flask\",\r\n      \"flickr\",\r\n      \"floppy-o\",\r\n      \"folder\",\r\n      \"folder-o\",\r\n      \"folder-open\",\r\n      \"folder-open-o\",\r\n      \"font\",\r\n      \"font-awesome\",\r\n      \"fonticons\",\r\n      \"fort-awesome\",\r\n      \"forumbee\",\r\n      \"forward\",\r\n      \"foursquare\",\r\n      \"free-code-camp\",\r\n      \"frown-o\",\r\n      \"futbol-o\",\r\n      \"gamepad\",\r\n      \"gavel\",\r\n      \"gbp\",\r\n      \"ge\",\r\n      \"gear\",\r\n      \"gears\",\r\n      \"genderless\",\r\n      \"get-pocket\",\r\n      \"gg\",\r\n      \"gg-circle\",\r\n      \"gift\",\r\n      \"git\",\r\n      \"git-square\",\r\n      \"github\",\r\n      \"github-alt\",\r\n      \"github-square\",\r\n      \"gitlab\",\r\n      \"gittip\",\r\n      \"glass\",\r\n      \"glide\",\r\n      \"glide-g\",\r\n      \"globe\",\r\n      \"google\",\r\n      \"google-plus\",\r\n      \"google-plus-circle\",\r\n      \"google-plus-official\",\r\n      \"google-plus-square\",\r\n      \"google-wallet\",\r\n      \"graduation-cap\",\r\n      \"gratipay\",\r\n      \"grav\",\r\n      \"group\",\r\n      \"h-square\",\r\n      \"hacker-news\",\r\n      \"hand-grab-o\",\r\n      \"hand-lizard-o\",\r\n      \"hand-o-down\",\r\n      \"hand-o-left\",\r\n      \"hand-o-right\",\r\n      \"hand-o-up\",\r\n      \"hand-paper-o\",\r\n      \"hand-peace-o\",\r\n      \"hand-pointer-o\",\r\n      \"hand-rock-o\",\r\n      \"hand-scissors-o\",\r\n      \"hand-spock-o\",\r\n      \"hand-stop-o\",\r\n      \"handshake-o\",\r\n      \"hard-of-hearing\",\r\n      \"hashtag\",\r\n      \"hdd-o\",\r\n      \"header\",\r\n      \"headphones\",\r\n      \"heart\",\r\n      \"heart-o\",\r\n      \"heartbeat\",\r\n      \"history\",\r\n      \"home\",\r\n      \"hospital-o\",\r\n      \"hotel\",\r\n      \"hourglass\",\r\n      \"hourglass-1\",\r\n      \"hourglass-2\",\r\n      \"hourglass-3\",\r\n      \"hourglass-end\",\r\n      \"hourglass-half\",\r\n      \"hourglass-o\",\r\n      \"hourglass-start\",\r\n      \"houzz\",\r\n      \"html5\",\r\n      \"i-cursor\",\r\n      \"id-badge\",\r\n      \"id-card\",\r\n      \"id-card-o\",\r\n      \"ils\",\r\n      \"image\",\r\n      \"imdb\",\r\n      \"inbox\",\r\n      \"indent\",\r\n      \"industry\",\r\n      \"info\",\r\n      \"info-circle\",\r\n      \"inr\",\r\n      \"instagram\",\r\n      \"institution\",\r\n      \"internet-explorer\",\r\n      \"intersex\",\r\n      \"ioxhost\",\r\n      \"italic\",\r\n      \"joomla\",\r\n      \"jpy\",\r\n      \"jsfiddle\",\r\n      \"key\",\r\n      \"keyboard-o\",\r\n      \"krw\",\r\n      \"language\",\r\n      \"laptop\",\r\n      \"lastfm\",\r\n      \"lastfm-square\",\r\n      \"leaf\",\r\n      \"leanpub\",\r\n      \"legal\",\r\n      \"lemon-o\",\r\n      \"level-down\",\r\n      \"level-up\",\r\n      \"life-bouy\",\r\n      \"life-buoy\",\r\n      \"life-ring\",\r\n      \"life-saver\",\r\n      \"lightbulb-o\",\r\n      \"line-chart\",\r\n      \"link\",\r\n      \"linkedin\",\r\n      \"linkedin-square\",\r\n      \"linode\",\r\n      \"linux\",\r\n      \"list\",\r\n      \"list-alt\",\r\n      \"list-ol\",\r\n      \"list-ul\",\r\n      \"location-arrow\",\r\n      \"lock\",\r\n      \"long-arrow-down\",\r\n      \"long-arrow-left\",\r\n      \"long-arrow-right\",\r\n      \"long-arrow-up\",\r\n      \"low-vision\",\r\n      \"magic\",\r\n      \"magnet\",\r\n      \"mail-forward\",\r\n      \"mail-reply\",\r\n      \"mail-reply-all\",\r\n      \"male\",\r\n      \"map\",\r\n      \"map-marker\",\r\n      \"map-o\",\r\n      \"map-pin\",\r\n      \"map-signs\",\r\n      \"mars\",\r\n      \"mars-double\",\r\n      \"mars-stroke\",\r\n      \"mars-stroke-h\",\r\n      \"mars-stroke-v\",\r\n      \"maxcdn\",\r\n      \"meanpath\",\r\n      \"medium\",\r\n      \"medkit\",\r\n      \"meetup\",\r\n      \"meh-o\",\r\n      \"mercury\",\r\n      \"microchip\",\r\n      \"microphone\",\r\n      \"microphone-slash\",\r\n      \"minus\",\r\n      \"minus-circle\",\r\n      \"minus-square\",\r\n      \"minus-square-o\",\r\n      \"mixcloud\",\r\n      \"mobile\",\r\n      \"mobile-phone\",\r\n      \"modx\",\r\n      \"money\",\r\n      \"moon-o\",\r\n      \"mortar-board\",\r\n      \"motorcycle\",\r\n      \"mouse-pointer\",\r\n      \"music\",\r\n      \"navicon\",\r\n      \"neuter\",\r\n      \"newspaper-o\",\r\n      \"object-group\",\r\n      \"object-ungroup\",\r\n      \"odnoklassniki\",\r\n      \"odnoklassniki-square\",\r\n      \"opencart\",\r\n      \"openid\",\r\n      \"opera\",\r\n      \"optin-monster\",\r\n      \"outdent\",\r\n      \"pagelines\",\r\n      \"paint-brush\",\r\n      \"paper-plane\",\r\n      \"paper-plane-o\",\r\n      \"paperclip\",\r\n      \"paragraph\",\r\n      \"paste\",\r\n      \"pause\",\r\n      \"pause-circle\",\r\n      \"pause-circle-o\",\r\n      \"paw\",\r\n      \"paypal\",\r\n      \"pencil\",\r\n      \"pencil-square\",\r\n      \"pencil-square-o\",\r\n      \"percent\",\r\n      \"phone\",\r\n      \"phone-square\",\r\n      \"photo\",\r\n      \"picture-o\",\r\n      \"pie-chart\",\r\n      \"pied-piper\",\r\n      \"pied-piper-alt\",\r\n      \"pied-piper-pp\",\r\n      \"pinterest\",\r\n      \"pinterest-p\",\r\n      \"pinterest-square\",\r\n      \"plane\",\r\n      \"play\",\r\n      \"play-circle\",\r\n      \"play-circle-o\",\r\n      \"plug\",\r\n      \"plus\",\r\n      \"plus-circle\",\r\n      \"plus-square\",\r\n      \"plus-square-o\",\r\n      \"podcast\",\r\n      \"power-off\",\r\n      \"print\",\r\n      \"product-hunt\",\r\n      \"puzzle-piece\",\r\n      \"qq\",\r\n      \"qrcode\",\r\n      \"question\",\r\n      \"question-circle\",\r\n      \"question-circle-o\",\r\n      \"quora\",\r\n      \"quote-left\",\r\n      \"quote-right\",\r\n      \"ra\",\r\n      \"random\",\r\n      \"ravelry\",\r\n      \"rebel\",\r\n      \"recycle\",\r\n      \"reddit\",\r\n      \"reddit-alien\",\r\n      \"reddit-square\",\r\n      \"refresh\",\r\n      \"registered\",\r\n      \"remove\",\r\n      \"renren\",\r\n      \"reorder\",\r\n      \"repeat\",\r\n      \"reply\",\r\n      \"reply-all\",\r\n      \"resistance\",\r\n      \"retweet\",\r\n      \"rmb\",\r\n      \"road\",\r\n      \"rocket\",\r\n      \"rotate-left\",\r\n      \"rotate-right\",\r\n      \"rouble\",\r\n      \"rss\",\r\n      \"rss-square\",\r\n      \"rub\",\r\n      \"ruble\",\r\n      \"rupee\",\r\n      \"s15\",\r\n      \"safari\",\r\n      \"save\",\r\n      \"scissors\",\r\n      \"scribd\",\r\n      \"search\",\r\n      \"search-minus\",\r\n      \"search-plus\",\r\n      \"sellsy\",\r\n      \"send\",\r\n      \"send-o\",\r\n      \"server\",\r\n      \"share\",\r\n      \"share-alt\",\r\n      \"share-alt-square\",\r\n      \"share-square\",\r\n      \"share-square-o\",\r\n      \"shekel\",\r\n      \"sheqel\",\r\n      \"shield\",\r\n      \"ship\",\r\n      \"shirtsinbulk\",\r\n      \"shopping-bag\",\r\n      \"shopping-basket\",\r\n      \"shopping-cart\",\r\n      \"shower\",\r\n      \"sign-in\",\r\n      \"sign-language\",\r\n      \"sign-out\",\r\n      \"signal\",\r\n      \"signing\",\r\n      \"simplybuilt\",\r\n      \"sitemap\",\r\n      \"skyatlas\",\r\n      \"skype\",\r\n      \"slack\",\r\n      \"sliders\",\r\n      \"slideshare\",\r\n      \"smile-o\",\r\n      \"snapchat\",\r\n      \"snapchat-ghost\",\r\n      \"snapchat-square\",\r\n      \"snowflake-o\",\r\n      \"soccer-ball-o\",\r\n      \"sort\",\r\n      \"sort-alpha-asc\",\r\n      \"sort-alpha-desc\",\r\n      \"sort-amount-asc\",\r\n      \"sort-amount-desc\",\r\n      \"sort-asc\",\r\n      \"sort-desc\",\r\n      \"sort-down\",\r\n      \"sort-numeric-asc\",\r\n      \"sort-numeric-desc\",\r\n      \"sort-up\",\r\n      \"soundcloud\",\r\n      \"space-shuttle\",\r\n      \"spinner\",\r\n      \"spoon\",\r\n      \"spotify\",\r\n      \"square\",\r\n      \"square-o\",\r\n      \"stack-exchange\",\r\n      \"stack-overflow\",\r\n      \"star\",\r\n      \"star-half\",\r\n      \"star-half-empty\",\r\n      \"star-half-full\",\r\n      \"star-half-o\",\r\n      \"star-o\",\r\n      \"steam\",\r\n      \"steam-square\",\r\n      \"step-backward\",\r\n      \"step-forward\",\r\n      \"stethoscope\",\r\n      \"sticky-note\",\r\n      \"sticky-note-o\",\r\n      \"stop\",\r\n      \"stop-circle\",\r\n      \"stop-circle-o\",\r\n      \"street-view\",\r\n      \"strikethrough\",\r\n      \"stumbleupon\",\r\n      \"stumbleupon-circle\",\r\n      \"subscript\",\r\n      \"subway\",\r\n      \"suitcase\",\r\n      \"sun-o\",\r\n      \"superpowers\",\r\n      \"superscript\",\r\n      \"support\",\r\n      \"table\",\r\n      \"tablet\",\r\n      \"tachometer\",\r\n      \"tag\",\r\n      \"tags\",\r\n      \"tasks\",\r\n      \"taxi\",\r\n      \"telegram\",\r\n      \"television\",\r\n      \"tencent-weibo\",\r\n      \"terminal\",\r\n      \"text-height\",\r\n      \"text-width\",\r\n      \"th\",\r\n      \"th-large\",\r\n      \"th-list\",\r\n      \"themeisle\",\r\n      \"thermometer\",\r\n      \"thermometer-0\",\r\n      \"thermometer-1\",\r\n      \"thermometer-2\",\r\n      \"thermometer-3\",\r\n      \"thermometer-4\",\r\n      \"thermometer-empty\",\r\n      \"thermometer-full\",\r\n      \"thermometer-half\",\r\n      \"thermometer-quarter\",\r\n      \"thermometer-three-quarters\",\r\n      \"thumb-tack\",\r\n      \"thumbs-down\",\r\n      \"thumbs-o-down\",\r\n      \"thumbs-o-up\",\r\n      \"thumbs-up\",\r\n      \"ticket\",\r\n      \"times\",\r\n      \"times-circle\",\r\n      \"times-circle-o\",\r\n      \"times-rectangle\",\r\n      \"times-rectangle-o\",\r\n      \"tint\",\r\n      \"toggle-down\",\r\n      \"toggle-left\",\r\n      \"toggle-off\",\r\n      \"toggle-on\",\r\n      \"toggle-right\",\r\n      \"toggle-up\",\r\n      \"trademark\",\r\n      \"train\",\r\n      \"transgender\",\r\n      \"transgender-alt\",\r\n      \"trash\",\r\n      \"trash-o\",\r\n      \"tree\",\r\n      \"trello\",\r\n      \"tripadvisor\",\r\n      \"trophy\",\r\n      \"truck\",\r\n      \"try\",\r\n      \"tty\",\r\n      \"tumblr\",\r\n      \"tumblr-square\",\r\n      \"turkish-lira\",\r\n      \"tv\",\r\n      \"twitch\",\r\n      \"twitter\",\r\n      \"twitter-square\",\r\n      \"umbrella\",\r\n      \"underline\",\r\n      \"undo\",\r\n      \"universal-access\",\r\n      \"university\",\r\n      \"unlink\",\r\n      \"unlock\",\r\n      \"unlock-alt\",\r\n      \"unsorted\",\r\n      \"upload\",\r\n      \"usb\",\r\n      \"usd\",\r\n      \"user\",\r\n      \"user-circle\",\r\n      \"user-circle-o\",\r\n      \"user-md\",\r\n      \"user-o\",\r\n      \"user-plus\",\r\n      \"user-secret\",\r\n      \"user-times\",\r\n      \"users\",\r\n      \"vcard\",\r\n      \"vcard-o\",\r\n      \"venus\",\r\n      \"venus-double\",\r\n      \"venus-mars\",\r\n      \"viacoin\",\r\n      \"viadeo\",\r\n      \"viadeo-square\",\r\n      \"video-camera\",\r\n      \"vimeo\",\r\n      \"vimeo-square\",\r\n      \"vine\",\r\n      \"vk\",\r\n      \"volume-control-phone\",\r\n      \"volume-down\",\r\n      \"volume-off\",\r\n      \"volume-up\",\r\n      \"warning\",\r\n      \"wechat\",\r\n      \"weibo\",\r\n      \"weixin\",\r\n      \"whatsapp\",\r\n      \"wheelchair\",\r\n      \"wheelchair-alt\",\r\n      \"wifi\",\r\n      \"wikipedia-w\",\r\n      \"window-close\",\r\n      \"window-close-o\",\r\n      \"window-maximize\",\r\n      \"window-minimize\",\r\n      \"window-restore\",\r\n      \"windows\",\r\n      \"won\",\r\n      \"wordpress\",\r\n      \"wpbeginner\",\r\n      \"wpexplorer\",\r\n      \"wpforms\",\r\n      \"wrench\",\r\n      \"xing\",\r\n      \"xing-square\",\r\n      \"y-combinator\",\r\n      \"y-combinator-square\",\r\n      \"yahoo\",\r\n      \"yc\",\r\n      \"yc-square\",\r\n      \"yelp\",\r\n      \"yen\",\r\n      \"yoast\",\r\n      \"youtube\",\r\n      \"youtube-play\",\r\n      \"youtube-square\",\r\n   ],\r\n};\r\n","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.ImageModule=f()}})(function(){var define,module,exports;return function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}({1:[function(require,module,exports){\"use strict\";var DocUtils=require(\"docxtemplater\").DocUtils;DocUtils.convertPixelsToEmus=function(pixel){return Math.round(pixel*9525)};module.exports=DocUtils},{docxtemplater:5}],2:[function(require,module,exports){\"use strict\";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\")}}var DocUtils=require(\"./docUtils\");var extensionRegex=/[^.]+\\.([^.]+)/;var rels={getPrefix:function getPrefix(fileType){return fileType===\"docx\"?\"word\":\"ppt\"},getFileTypeName:function getFileTypeName(fileType){return fileType===\"docx\"?\"document\":\"presentation\"},getRelsFileName:function getRelsFileName(fileName){return fileName.replace(/^.*?([a-zA-Z0-9]+)\\.xml$/,\"$1\")+\".xml.rels\"},getRelsFilePath:function getRelsFilePath(fileName,fileType){var relsFileName=rels.getRelsFileName(fileName);var prefix=fileType===\"pptx\"?\"ppt/slides\":\"word\";return prefix+\"/_rels/\"+relsFileName}};module.exports=function(){function ImgManager(zip,fileName,xmlDocuments,fileType){_classCallCheck(this,ImgManager);this.fileName=fileName;this.prefix=rels.getPrefix(fileType);this.zip=zip;this.xmlDocuments=xmlDocuments;this.fileTypeName=rels.getFileTypeName(fileType);this.mediaPrefix=fileType===\"pptx\"?\"../media\":\"media\";var relsFilePath=rels.getRelsFilePath(fileName,fileType);this.relsDoc=xmlDocuments[relsFilePath]||this.createEmptyRelsDoc(xmlDocuments,relsFilePath)}_createClass(ImgManager,[{key:\"createEmptyRelsDoc\",value:function createEmptyRelsDoc(xmlDocuments,relsFileName){var mainRels=this.prefix+\"/_rels/\"+this.fileTypeName+\".xml.rels\";var doc=xmlDocuments[mainRels];if(!doc){var err=new Error(\"Could not copy from empty relsdoc\");err.properties={mainRels:mainRels,relsFileName:relsFileName,files:Object.keys(this.zip.files)};throw err}var relsDoc=DocUtils.str2xml(DocUtils.xml2str(doc));var relationships=relsDoc.getElementsByTagName(\"Relationships\")[0];var relationshipChilds=relationships.getElementsByTagName(\"Relationship\");for(var i=0,l=relationshipChilds.length;i<l;i++){relationships.removeChild(relationshipChilds[i])}xmlDocuments[relsFileName]=relsDoc;return relsDoc}},{key:\"loadImageRels\",value:function loadImageRels(){var iterable=this.relsDoc.getElementsByTagName(\"Relationship\");return Array.prototype.reduce.call(iterable,function(max,relationship){var id=relationship.getAttribute(\"Id\");if(/^rId[0-9]+$/.test(id)){return Math.max(max,parseInt(id.substr(3),10))}return max},0)}},{key:\"addExtensionRels\",value:function addExtensionRels(contentType,extension){var contentTypeDoc=this.xmlDocuments[\"[Content_Types].xml\"];var defaultTags=contentTypeDoc.getElementsByTagName(\"Default\");var extensionRegistered=Array.prototype.some.call(defaultTags,function(tag){return tag.getAttribute(\"Extension\")===extension});if(extensionRegistered){return}var types=contentTypeDoc.getElementsByTagName(\"Types\")[0];var newTag=contentTypeDoc.createElement(\"Default\");newTag.namespaceURI=null;newTag.setAttribute(\"ContentType\",contentType);newTag.setAttribute(\"Extension\",extension);types.appendChild(newTag)}},{key:\"addImageRels\",value:function addImageRels(imageName,imageData,i){if(i==null){i=0}var realImageName=i===0?imageName:imageName+(\"(\"+i+\")\");var imagePath=this.prefix+\"/media/\"+realImageName;if(this.zip.files[imagePath]!=null){return this.addImageRels(imageName,imageData,i+1)}var image={name:imagePath,data:imageData,options:{binary:true}};this.zip.file(image.name,image.data,image.options);var extension=realImageName.replace(extensionRegex,\"$1\");this.addExtensionRels(\"image/\"+extension,extension);var relationships=this.relsDoc.getElementsByTagName(\"Relationships\")[0];var newTag=this.relsDoc.createElement(\"Relationship\");newTag.namespaceURI=null;var maxRid=this.loadImageRels()+1;newTag.setAttribute(\"Id\",\"rId\"+maxRid);newTag.setAttribute(\"Type\",\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\");newTag.setAttribute(\"Target\",this.mediaPrefix+\"/\"+realImageName);relationships.appendChild(newTag);return maxRid}}]);return ImgManager}()},{\"./docUtils\":1}],3:[function(require,module,exports){\"use strict\";module.exports={getImageXml:function getImageXml(rId,size){return('<w:drawing>\\n\\t\\t<wp:inline distT=\"0\" distB=\"0\" distL=\"0\" distR=\"0\">\\n\\t\\t\\t<wp:extent cx=\"'+size[0]+'\" cy=\"'+size[1]+'\"/>\\n\\t\\t\\t<wp:effectExtent l=\"0\" t=\"0\" r=\"0\" b=\"0\"/>\\n\\t\\t\\t<wp:docPr id=\"2\" name=\"Image 2\" descr=\"image\"/>\\n\\t\\t\\t<wp:cNvGraphicFramePr>\\n\\t\\t\\t\\t<a:graphicFrameLocks xmlns:a=\"http://schemas.openxmlformats.org/drawingml/2006/main\" noChangeAspect=\"1\"/>\\n\\t\\t\\t</wp:cNvGraphicFramePr>\\n\\t\\t\\t<a:graphic xmlns:a=\"http://schemas.openxmlformats.org/drawingml/2006/main\">\\n\\t\\t\\t\\t<a:graphicData uri=\"http://schemas.openxmlformats.org/drawingml/2006/picture\">\\n\\t\\t\\t\\t\\t<pic:pic xmlns:pic=\"http://schemas.openxmlformats.org/drawingml/2006/picture\">\\n\\t\\t\\t\\t\\t\\t<pic:nvPicPr>\\n\\t\\t\\t\\t\\t\\t\\t<pic:cNvPr id=\"0\" name=\"Picture 1\" descr=\"image\"/>\\n\\t\\t\\t\\t\\t\\t\\t<pic:cNvPicPr>\\n\\t\\t\\t\\t\\t\\t\\t\\t<a:picLocks noChangeAspect=\"1\" noChangeArrowheads=\"1\"/>\\n\\t\\t\\t\\t\\t\\t\\t</pic:cNvPicPr>\\n\\t\\t\\t\\t\\t\\t</pic:nvPicPr>\\n\\t\\t\\t\\t\\t\\t<pic:blipFill>\\n\\t\\t\\t\\t\\t\\t\\t<a:blip r:embed=\"rId'+rId+'\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<a:extLst>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<a:ext uri=\"{28A0092B-C50C-407E-A947-70E740481C1C}\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<a14:useLocalDpi xmlns:a14=\"http://schemas.microsoft.com/office/drawing/2010/main\" val=\"0\"/>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</a:ext>\\n\\t\\t\\t\\t\\t\\t\\t\\t</a:extLst>\\n\\t\\t\\t\\t\\t\\t\\t</a:blip>\\n\\t\\t\\t\\t\\t\\t\\t<a:srcRect/>\\n\\t\\t\\t\\t\\t\\t\\t<a:stretch>\\n\\t\\t\\t\\t\\t\\t\\t\\t<a:fillRect/>\\n\\t\\t\\t\\t\\t\\t\\t</a:stretch>\\n\\t\\t\\t\\t\\t\\t</pic:blipFill>\\n\\t\\t\\t\\t\\t\\t<pic:spPr bwMode=\"auto\">\\n\\t\\t\\t\\t\\t\\t\\t<a:xfrm>\\n\\t\\t\\t\\t\\t\\t\\t\\t<a:off x=\"0\" y=\"0\"/>\\n\\t\\t\\t\\t\\t\\t\\t\\t<a:ext cx=\"'+size[0]+'\" cy=\"'+size[1]+'\"/>\\n\\t\\t\\t\\t\\t\\t\\t</a:xfrm>\\n\\t\\t\\t\\t\\t\\t\\t<a:prstGeom prst=\"rect\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<a:avLst/>\\n\\t\\t\\t\\t\\t\\t\\t</a:prstGeom>\\n\\t\\t\\t\\t\\t\\t\\t<a:noFill/>\\n\\t\\t\\t\\t\\t\\t\\t<a:ln>\\n\\t\\t\\t\\t\\t\\t\\t\\t<a:noFill/>\\n\\t\\t\\t\\t\\t\\t\\t</a:ln>\\n\\t\\t\\t\\t\\t\\t</pic:spPr>\\n\\t\\t\\t\\t\\t</pic:pic>\\n\\t\\t\\t\\t</a:graphicData>\\n\\t\\t\\t</a:graphic>\\n\\t\\t</wp:inline>\\n\\t</w:drawing>\\n\\t\\t').replace(/\\t|\\n/g,\"\")},getImageXmlCentered:function getImageXmlCentered(rId,size){return('<w:p>\\n\\t\\t\\t<w:pPr>\\n\\t\\t\\t\\t<w:jc w:val=\"center\"/>\\n\\t\\t\\t</w:pPr>\\n\\t\\t\\t<w:r>\\n\\t\\t\\t\\t<w:rPr/>\\n\\t\\t\\t\\t<w:drawing>\\n\\t\\t\\t\\t\\t<wp:inline distT=\"0\" distB=\"0\" distL=\"0\" distR=\"0\">\\n\\t\\t\\t\\t\\t<wp:extent cx=\"'+size[0]+'\" cy=\"'+size[1]+'\"/>\\n\\t\\t\\t\\t\\t<wp:docPr id=\"0\" name=\"Picture\" descr=\"\"/>\\n\\t\\t\\t\\t\\t<a:graphic xmlns:a=\"http://schemas.openxmlformats.org/drawingml/2006/main\">\\n\\t\\t\\t\\t\\t\\t<a:graphicData uri=\"http://schemas.openxmlformats.org/drawingml/2006/picture\">\\n\\t\\t\\t\\t\\t\\t<pic:pic xmlns:pic=\"http://schemas.openxmlformats.org/drawingml/2006/picture\">\\n\\t\\t\\t\\t\\t\\t\\t<pic:nvPicPr>\\n\\t\\t\\t\\t\\t\\t\\t<pic:cNvPr id=\"0\" name=\"Picture\" descr=\"\"/>\\n\\t\\t\\t\\t\\t\\t\\t<pic:cNvPicPr>\\n\\t\\t\\t\\t\\t\\t\\t\\t<a:picLocks noChangeAspect=\"1\" noChangeArrowheads=\"1\"/>\\n\\t\\t\\t\\t\\t\\t\\t</pic:cNvPicPr>\\n\\t\\t\\t\\t\\t\\t\\t</pic:nvPicPr>\\n\\t\\t\\t\\t\\t\\t\\t<pic:blipFill>\\n\\t\\t\\t\\t\\t\\t\\t<a:blip r:embed=\"rId'+rId+'\"/>\\n\\t\\t\\t\\t\\t\\t\\t<a:stretch>\\n\\t\\t\\t\\t\\t\\t\\t\\t<a:fillRect/>\\n\\t\\t\\t\\t\\t\\t\\t</a:stretch>\\n\\t\\t\\t\\t\\t\\t\\t</pic:blipFill>\\n\\t\\t\\t\\t\\t\\t\\t<pic:spPr bwMode=\"auto\">\\n\\t\\t\\t\\t\\t\\t\\t<a:xfrm>\\n\\t\\t\\t\\t\\t\\t\\t\\t<a:off x=\"0\" y=\"0\"/>\\n\\t\\t\\t\\t\\t\\t\\t\\t<a:ext cx=\"'+size[0]+'\" cy=\"'+size[1]+'\"/>\\n\\t\\t\\t\\t\\t\\t\\t</a:xfrm>\\n\\t\\t\\t\\t\\t\\t\\t<a:prstGeom prst=\"rect\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<a:avLst/>\\n\\t\\t\\t\\t\\t\\t\\t</a:prstGeom>\\n\\t\\t\\t\\t\\t\\t\\t<a:noFill/>\\n\\t\\t\\t\\t\\t\\t\\t<a:ln w=\"9525\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<a:noFill/>\\n\\t\\t\\t\\t\\t\\t\\t\\t<a:miter lim=\"800000\"/>\\n\\t\\t\\t\\t\\t\\t\\t\\t<a:headEnd/>\\n\\t\\t\\t\\t\\t\\t\\t\\t<a:tailEnd/>\\n\\t\\t\\t\\t\\t\\t\\t</a:ln>\\n\\t\\t\\t\\t\\t\\t\\t</pic:spPr>\\n\\t\\t\\t\\t\\t\\t</pic:pic>\\n\\t\\t\\t\\t\\t\\t</a:graphicData>\\n\\t\\t\\t\\t\\t</a:graphic>\\n\\t\\t\\t\\t\\t</wp:inline>\\n\\t\\t\\t\\t</w:drawing>\\n\\t\\t\\t</w:r>\\n\\t\\t</w:p>\\n\\t\\t').replace(/\\t|\\n/g,\"\")},getPptxImageXml:function getPptxImageXml(rId,size,offset){return('<p:pic>\\n\\t\\t\\t<p:nvPicPr>\\n\\t\\t\\t\\t<p:cNvPr id=\"6\" name=\"Picture 2\"/>\\n\\t\\t\\t\\t<p:cNvPicPr>\\n\\t\\t\\t\\t\\t<a:picLocks noChangeAspect=\"1\" noChangeArrowheads=\"1\"/>\\n\\t\\t\\t\\t</p:cNvPicPr>\\n\\t\\t\\t\\t<p:nvPr/>\\n\\t\\t\\t</p:nvPicPr>\\n\\t\\t\\t<p:blipFill>\\n\\t\\t\\t\\t<a:blip r:embed=\"rId'+rId+'\" cstate=\"print\">\\n\\t\\t\\t\\t\\t<a:extLst>\\n\\t\\t\\t\\t\\t\\t<a:ext uri=\"{28A0092B-C50C-407E-A947-70E740481C1C}\">\\n\\t\\t\\t\\t\\t\\t\\t<a14:useLocalDpi xmlns:a14=\"http://schemas.microsoft.com/office/drawing/2010/main\" val=\"0\"/>\\n\\t\\t\\t\\t\\t\\t</a:ext>\\n\\t\\t\\t\\t\\t</a:extLst>\\n\\t\\t\\t\\t</a:blip>\\n\\t\\t\\t\\t<a:srcRect/>\\n\\t\\t\\t\\t<a:stretch>\\n\\t\\t\\t\\t\\t<a:fillRect/>\\n\\t\\t\\t\\t</a:stretch>\\n\\t\\t\\t</p:blipFill>\\n\\t\\t\\t<p:spPr bwMode=\"auto\">\\n\\t\\t\\t\\t<a:xfrm>\\n\\t\\t\\t\\t\\t<a:off x=\"'+offset.x+'\" y=\"'+offset.y+'\"/>\\n\\t\\t\\t\\t\\t<a:ext cx=\"'+size[0]+'\" cy=\"'+size[1]+'\"/>\\n\\t\\t\\t\\t</a:xfrm>\\n\\t\\t\\t\\t<a:prstGeom prst=\"rect\">\\n\\t\\t\\t\\t\\t<a:avLst/>\\n\\t\\t\\t\\t</a:prstGeom>\\n\\t\\t\\t\\t<a:noFill/>\\n\\t\\t\\t\\t<a:ln>\\n\\t\\t\\t\\t\\t<a:noFill/>\\n\\t\\t\\t\\t</a:ln>\\n\\t\\t\\t\\t<a:effectLst/>\\n\\t\\t\\t\\t<a:extLst>\\n\\t\\t\\t\\t\\t<a:ext uri=\"{909E8E84-426E-40DD-AFC4-6F175D3DCCD1}\">\\n\\t\\t\\t\\t\\t\\t<a14:hiddenFill xmlns:a14=\"http://schemas.microsoft.com/office/drawing/2010/main\">\\n\\t\\t\\t\\t\\t\\t\\t<a:solidFill>\\n\\t\\t\\t\\t\\t\\t\\t\\t<a:schemeClr val=\"accent1\"/>\\n\\t\\t\\t\\t\\t\\t\\t</a:solidFill>\\n\\t\\t\\t\\t\\t\\t</a14:hiddenFill>\\n\\t\\t\\t\\t\\t</a:ext>\\n\\t\\t\\t\\t\\t<a:ext uri=\"{91240B29-F687-4F45-9708-019B960494DF}\">\\n\\t\\t\\t\\t\\t\\t<a14:hiddenLine xmlns:a14=\"http://schemas.microsoft.com/office/drawing/2010/main\" w=\"9525\">\\n\\t\\t\\t\\t\\t\\t\\t<a:solidFill>\\n\\t\\t\\t\\t\\t\\t\\t\\t<a:schemeClr val=\"tx1\"/>\\n\\t\\t\\t\\t\\t\\t\\t</a:solidFill>\\n\\t\\t\\t\\t\\t\\t\\t<a:miter lim=\"800000\"/>\\n\\t\\t\\t\\t\\t\\t\\t<a:headEnd/>\\n\\t\\t\\t\\t\\t\\t\\t<a:tailEnd/>\\n\\t\\t\\t\\t\\t\\t</a14:hiddenLine>\\n\\t\\t\\t\\t\\t</a:ext>\\n\\t\\t\\t\\t\\t<a:ext uri=\"{AF507438-7753-43E0-B8FC-AC1667EBCBE1}\">\\n\\t\\t\\t\\t\\t\\t<a14:hiddenEffects xmlns:a14=\"http://schemas.microsoft.com/office/drawing/2010/main\">\\n\\t\\t\\t\\t\\t\\t\\t<a:effectLst>\\n\\t\\t\\t\\t\\t\\t\\t\\t<a:outerShdw dist=\"35921\" dir=\"2700000\" algn=\"ctr\" rotWithShape=\"0\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<a:schemeClr val=\"bg2\"/>\\n\\t\\t\\t\\t\\t\\t\\t\\t</a:outerShdw>\\n\\t\\t\\t\\t\\t\\t\\t</a:effectLst>\\n\\t\\t\\t\\t\\t\\t</a14:hiddenEffects>\\n\\t\\t\\t\\t\\t</a:ext>\\n\\t\\t\\t\\t</a:extLst>\\n\\t\\t\\t</p:spPr>\\n\\t\\t</p:pic>\\n\\t\\t').replace(/\\t|\\n/g,\"\")}}},{}],4:[function(require,module,exports){\"use strict\";function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true})}else{obj[key]=value}return obj}var memoize=require(\"./memoize\");var DOMParser=require(\"xmldom\").DOMParser;var XMLSerializer=require(\"xmldom\").XMLSerializer;var Errors=require(\"./errors\");var DocUtils={};function parser(tag){return _defineProperty({},\"get\",function get(scope){if(tag===\".\"){return scope}return scope[tag]})}DocUtils.defaults={nullGetter:function nullGetter(part){if(!part.module){return\"undefined\"}if(part.module===\"rawxml\"){return\"\"}return\"\"},parser:memoize(parser),fileType:\"docx\",delimiters:{start:\"{\",end:\"}\"}};DocUtils.mergeObjects=function(){var resObj={};var obj=void 0,keys=void 0;for(var i=0;i<arguments.length;i+=1){obj=arguments[i];keys=Object.keys(obj);for(var j=0;j<keys.length;j+=1){resObj[keys[j]]=obj[keys[j]]}}return resObj};DocUtils.xml2str=function(xmlNode){var a=new XMLSerializer;return a.serializeToString(xmlNode)};DocUtils.decodeUtf8=function(s){try{if(s===undefined){return undefined}return decodeURIComponent(escape(DocUtils.convertSpaces(s)))}catch(e){var err=new Error(\"End\");err.properties.data=s;err.properties.explanation=\"Could not decode string to UTF8\";throw err}};DocUtils.encodeUtf8=function(s){return unescape(encodeURIComponent(s))};DocUtils.str2xml=function(str,errorHandler){var parser=new DOMParser({errorHandler:errorHandler});return parser.parseFromString(str,\"text/xml\")};DocUtils.charMap={\"&\":\"&amp;\",\"'\":\"&apos;\",\"<\":\"&lt;\",\">\":\"&gt;\"};var regexStripRegexp=/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g;DocUtils.escapeRegExp=function(str){return str.replace(regexStripRegexp,\"\\\\$&\")};DocUtils.charMapRegexes=Object.keys(DocUtils.charMap).map(function(endChar){var startChar=DocUtils.charMap[endChar];return{rstart:new RegExp(DocUtils.escapeRegExp(startChar),\"g\"),rend:new RegExp(DocUtils.escapeRegExp(endChar),\"g\"),start:startChar,end:endChar}});DocUtils.wordToUtf8=function(string){var r=void 0;for(var i=0,l=DocUtils.charMapRegexes.length;i<l;i++){r=DocUtils.charMapRegexes[i];string=string.replace(r.rstart,r.end)}return string};DocUtils.utf8ToWord=function(string){if(typeof string!==\"string\"){string=string.toString()}var r=void 0;for(var i=0,l=DocUtils.charMapRegexes.length;i<l;i++){r=DocUtils.charMapRegexes[i];string=string.replace(r.rend,r.start)}return string};DocUtils.cloneDeep=function(obj){return JSON.parse(JSON.stringify(obj))};DocUtils.concatArrays=function(arrays){return arrays.reduce(function(result,array){Array.prototype.push.apply(result,array);return result},[])};var spaceRegexp=new RegExp(String.fromCharCode(160),\"g\");DocUtils.convertSpaces=function(s){return s.replace(spaceRegexp,\" \")};DocUtils.pregMatchAll=function(regex,content){var matchArray=[];var match=void 0;while((match=regex.exec(content))!=null){matchArray.push({array:match,offset:match.index})}return matchArray};DocUtils.sizeOfObject=function(obj){return Object.keys(obj).length};function throwXmlTagNotFound(options){var err=new Errors.XTTemplateError(\"No tag '\"+options.element+\"' was found at the \"+options.position);err.properties={id:\"no_xml_tag_found_at_\"+options.position,explanation:\"No tag '\"+options.element+\"' was found at the \"+options.position,parsed:options.parsed,index:options.index,element:options.element};throw err}DocUtils.getRight=function(parsed,element,index){for(var i=index,l=parsed.length;i<l;i++){var part=parsed[i];if(part.value===\"</\"+element+\">\"){return i}}throwXmlTagNotFound({position:\"right\",element:element,parsed:parsed,index:index})};DocUtils.getLeft=function(parsed,element,index){var parts=parsed.slice(0,index);for(var i=parts.length-1;i>=0;i--){var part=parts[i];if(part.value.indexOf(\"<\"+element)===0&&[\">\",\" \"].indexOf(part.value[element.length+1])!==-1){return i}}throwXmlTagNotFound({position:\"left\",element:element,parsed:parsed,index:index})};module.exports=DocUtils;DocUtils.traits=require(\"./traits\");DocUtils.moduleWrapper=require(\"./module-wrapper\")},{\"./errors\":6,\"./memoize\":9,\"./module-wrapper\":11,\"./traits\":20,xmldom:23}],5:[function(require,module,exports){\"use strict\";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\")}}var DocUtils=require(\"./doc-utils\");var wrapper=DocUtils.moduleWrapper;var Docxtemplater=function(){function Docxtemplater(){_classCallCheck(this,Docxtemplater);if(arguments.length>0){throw new Error(\"The constructor with parameters have been removed in docxtemplater 3.0, please check the upgrade guide.\")}this.compiled={};this.modules=[];this.setOptions({})}_createClass(Docxtemplater,[{key:\"attachModule\",value:function attachModule(module){this.modules.push(wrapper(module));return this}},{key:\"setOptions\",value:function setOptions(options){var _this=this;this.options=options;Object.keys(DocUtils.defaults).forEach(function(key){var defaultValue=DocUtils.defaults[key];_this[key]=_this.options[key]!=null?_this.options[key]:defaultValue});if(this.fileType===\"docx\"||this.fileType===\"pptx\"){this.fileTypeConfig=Docxtemplater.FileTypeConfig[this.fileType]}this.fileTypeConfig=this.options.fileTypeConfig||this.fileTypeConfig;this.options.xmlFileNames=[];return this}},{key:\"loadZip\",value:function loadZip(zip){if(zip.loadAsync){throw new Error(\"Docxtemplater doesn't handle JSZip version >=3, see changelog\")}this.zip=zip;return this}},{key:\"compileFile\",value:function compileFile(fileName){var currentFile=this.createTemplateClass(fileName);currentFile.parse();this.compiled[fileName]=currentFile}},{key:\"compile\",value:function compile(){this.templatedFiles=this.fileTypeConfig.getTemplatedFiles(this.zip)}},{key:\"render\",value:function render(){var _this2=this;this.modules=this.fileTypeConfig.baseModules.map(function(moduleFunction){return moduleFunction()}).concat(this.modules);this.options=this.modules.reduce(function(options,module){return module.optionsTransformer(options,_this2)},this.options);this.xmlDocuments=this.options.xmlFileNames.reduce(function(xmlDocuments,fileName){var content=_this2.zip.files[fileName].asText();xmlDocuments[fileName]=DocUtils.str2xml(content);return xmlDocuments},{});this.modules.forEach(function(module){module.set({zip:_this2.zip,xmlDocuments:_this2.xmlDocuments,data:_this2.data})});this.compile();this.modules.forEach(function(module){module.set({compiled:_this2.compiled})});this.templatedFiles.forEach(function(fileName){if(_this2.zip.files[fileName]!=null){_this2.compileFile(fileName)}});this.mapper=this.modules.reduce(function(value,module){return module.getRenderedMap(value)},{});Object.keys(this.mapper).forEach(function(to){var mapped=_this2.mapper[to];var from=mapped.from;var currentFile=_this2.compiled[from];currentFile.setTags(mapped.data);currentFile.render();_this2.zip.file(to,currentFile.content)});Object.keys(this.xmlDocuments).forEach(function(fileName){_this2.zip.remove(fileName);var content=DocUtils.encodeUtf8(DocUtils.xml2str(_this2.xmlDocuments[fileName]));return _this2.zip.file(fileName,content,{})});return this}},{key:\"setData\",value:function setData(data){this.data=data;return this}},{key:\"getZip\",value:function getZip(){return this.zip}},{key:\"createTemplateClass\",value:function createTemplateClass(path){var usedData=this.zip.files[path].asText();return this.createTemplateClassFromContent(usedData,path)}},{key:\"createTemplateClassFromContent\",value:function createTemplateClassFromContent(content,filePath){var _this3=this;var xmltOptions={filePath:filePath};Object.keys(DocUtils.defaults).forEach(function(key){xmltOptions[key]=_this3[key]});xmltOptions.fileTypeConfig=this.fileTypeConfig;xmltOptions.modules=this.modules;return new Docxtemplater.XmlTemplater(content,xmltOptions)}},{key:\"getFullText\",value:function getFullText(path){return this.createTemplateClass(path||this.fileTypeConfig.textPath).getFullText()}},{key:\"getTemplatedFiles\",value:function getTemplatedFiles(){this.compile();return this.templatedFiles}}]);return Docxtemplater}();Docxtemplater.DocUtils=require(\"./doc-utils\");Docxtemplater.Errors=require(\"./errors\");Docxtemplater.XmlTemplater=require(\"./xml-templater\");Docxtemplater.FileTypeConfig=require(\"./file-type-config\");Docxtemplater.XmlMatcher=require(\"./xml-matcher\");module.exports=Docxtemplater},{\"./doc-utils\":4,\"./errors\":6,\"./file-type-config\":7,\"./xml-matcher\":21,\"./xml-templater\":22}],6:[function(require,module,exports){\"use strict\";function XTError(message){this.name=\"GenericError\";this.message=message;this.stack=new Error(message).stack}XTError.prototype=Error.prototype;function XTTemplateError(message){this.name=\"TemplateError\";this.message=message;this.stack=new Error(message).stack}XTTemplateError.prototype=new XTError;function XTScopeParserError(message){this.name=\"ScopeParserError\";this.message=message;this.stack=new Error(message).stack}XTScopeParserError.prototype=new XTError;function XTInternalError(message){this.name=\"InternalError\";this.properties={explanation:\"InternalError\"};this.message=message;this.stack=new Error(message).stack}XTInternalError.prototype=new XTError;module.exports={XTError:XTError,XTTemplateError:XTTemplateError,XTInternalError:XTInternalError,XTScopeParserError:XTScopeParserError}},{}],7:[function(require,module,exports){\"use strict\";var loopModule=require(\"./modules/loop\");var spacePreserveModule=require(\"./modules/space-preserve\");var rawXmlModule=require(\"./modules/rawxml\");var expandPairTrait=require(\"./modules/expand-pair-trait\");var render=require(\"./modules/render\");var PptXFileTypeConfig={getTemplatedFiles:function getTemplatedFiles(zip){var slideTemplates=zip.file(/ppt\\/(slides|slideMasters)\\/(slide|slideMaster)\\d+\\.xml/).map(function(file){return file.name});return slideTemplates.concat([\"ppt/presentation.xml\"])},textPath:\"ppt/slides/slide1.xml\",tagsXmlTextArray:[\"a:t\",\"m:t\"],tagsXmlLexedArray:[\"p:sp\",\"a:tc\",\"a:tr\",\"a:table\",\"a:p\",\"a:r\"],tagRawXml:\"p:sp\",tagTextXml:\"a:t\",baseModules:[render,expandPairTrait,rawXmlModule,loopModule]};var DocXFileTypeConfig={getTemplatedFiles:function getTemplatedFiles(zip){var slideTemplates=zip.file(/word\\/(header|footer)\\d+\\.xml/).map(function(file){return file.name});return slideTemplates.concat([\"word/document.xml\"])},textPath:\"word/document.xml\",tagsXmlTextArray:[\"w:t\",\"m:t\"],tagsXmlLexedArray:[\"w:tc\",\"w:tr\",\"w:table\",\"w:p\",\"w:r\"],tagRawXml:\"w:p\",tagTextXml:\"w:t\",baseModules:[render,spacePreserveModule,expandPairTrait,rawXmlModule,loopModule]};module.exports={docx:DocXFileTypeConfig,pptx:PptXFileTypeConfig}},{\"./modules/expand-pair-trait\":12,\"./modules/loop\":13,\"./modules/rawxml\":14,\"./modules/render\":15,\"./modules/space-preserve\":16}],8:[function(require,module,exports){\"use strict\";var Errors=require(\"./errors\");var DocUtils=require(\"./doc-utils\");function inRange(range,match){return range[0]<=match.offset&&match.offset<range[1]}function updateInTextTag(part,inTextTag){if(part.type===\"tag\"&&part.position===\"start\"&&part.text){if(inTextTag){throw new Error(\"Malformed xml : Already in text tag\")}return true}if(part.type===\"tag\"&&part.position===\"end\"&&part.text){if(!inTextTag){throw new Error(\"Malformed xml : Already not in text tag\")}return false}return inTextTag}function offsetSort(a,b){return a.offset-b.offset}function getTag(tag){var start=1;if(tag[1]===\"/\"){start=2}var index=tag.indexOf(\" \");var end=index===-1?tag.length-1:index;return{tag:tag.slice(start,end),position:start===1?\"start\":\"end\"}}function tagMatcher(content,textMatchArray,othersMatchArray){var cursor=0;var contentLength=content.length;var allMatches=DocUtils.concatArrays([textMatchArray.map(function(tag){return{tag:tag,text:true}}),othersMatchArray.map(function(tag){return{tag:tag,text:false}})]).reduce(function(allMatches,t){allMatches[t.tag]=t.text;return allMatches},{});var totalMatches=[];while(cursor<contentLength){cursor=content.indexOf(\"<\",cursor);if(cursor===-1){break}var offset=cursor;cursor=content.indexOf(\">\",cursor);var tagText=content.slice(offset,cursor+1);var _getTag=getTag(tagText),tag=_getTag.tag,position=_getTag.position;var text=allMatches[tag];if(text==null){continue}totalMatches.push({type:\"tag\",position:position,text:text,offset:offset,value:tagText})}return totalMatches}function throwUnopenedTagException(options){var err=new Errors.XTTemplateError(\"Unopened tag\");err.properties={xtag:options.xtag.split(\" \")[0],id:\"unopened_tag\",context:options.xtag,explanation:\"The tag beginning with '\"+options.xtag.substr(0,10)+\"' is unclosed\"};throw err}function throwUnclosedTagException(options){var err=new Errors.XTTemplateError(\"Unclosed tag\");err.properties={xtag:options.xtag.split(\" \")[0].substr(1),id:\"unclosed_tag\",context:options.xtag,explanation:\"The tag beginning with '\"+options.xtag.substr(0,10)+\"' is unclosed\"};throw err}function assertDelimiterOrdered(delimiterMatches,fullText){var inDelimiter=false;var lastDelimiterMatch={offset:0};var xtag=void 0;delimiterMatches.forEach(function(delimiterMatch){xtag=fullText.substr(lastDelimiterMatch.offset,delimiterMatch.offset-lastDelimiterMatch.offset);if(delimiterMatch.position===\"start\"&&inDelimiter||delimiterMatch.position===\"end\"&&!inDelimiter){if(delimiterMatch.position===\"start\"){throwUnclosedTagException({xtag:xtag})}else{throwUnopenedTagException({xtag:xtag})}}inDelimiter=!inDelimiter;lastDelimiterMatch=delimiterMatch});var delimiterMatch={offset:fullText.length};xtag=fullText.substr(lastDelimiterMatch.offset,delimiterMatch.offset-lastDelimiterMatch.offset);if(inDelimiter){throwUnclosedTagException({xtag:xtag})}}function getAllIndexes(arr,val,position){var indexes=[];var offset=-1;do{offset=arr.indexOf(val,offset+1);if(offset!==-1){indexes.push({offset:offset,position:position})}}while(offset!==-1);return indexes}function Reader(innerContentParts){var _this=this;this.innerContentParts=innerContentParts;this.full=\"\";this.parseDelimiters=function(delimiters){_this.full=_this.innerContentParts.join(\"\");var offset=0;_this.ranges=_this.innerContentParts.map(function(part){offset+=part.length;return offset-part.length});var delimiterMatches=DocUtils.concatArrays([getAllIndexes(_this.full,delimiters.start,\"start\"),getAllIndexes(_this.full,delimiters.end,\"end\")]).sort(offsetSort);assertDelimiterOrdered(delimiterMatches,_this.full);var delimiterLength={start:delimiters.start.length,end:delimiters.end.length};var cutNext=0;var delimiterIndex=0;_this.parsed=_this.ranges.map(function(offset,i){var range=[offset,offset+this.innerContentParts[i].length];var partContent=this.innerContentParts[i];var delimitersInOffset=[];while(delimiterIndex<delimiterMatches.length&&inRange(range,delimiterMatches[delimiterIndex])){delimitersInOffset.push(delimiterMatches[delimiterIndex]);delimiterIndex++}var parts=[];var cursor=0;if(cutNext>0){cursor=cutNext;cutNext=0}delimitersInOffset.forEach(function(delimiterInOffset){var value=partContent.substr(cursor,delimiterInOffset.offset-offset-cursor);if(value.length>0){parts.push({type:\"content\",value:value})}parts.push({type:\"delimiter\",position:delimiterInOffset.position});cursor=delimiterInOffset.offset-offset+delimiterLength[delimiterInOffset.position]});cutNext=cursor-partContent.length;var value=partContent.substr(cursor);if(value.length>0){parts.push({type:\"content\",value:value})}return parts},_this)}}module.exports={parse:function parse(xmlparsed,delimiters){var inTextTag=false;var innerContentParts=[];xmlparsed.forEach(function(part){inTextTag=updateInTextTag(part,inTextTag);if(inTextTag&&part.type===\"content\"){innerContentParts.push(part.value)}});var reader=new Reader(innerContentParts);reader.parseDelimiters(delimiters);var newArray=[];var index=0;xmlparsed.forEach(function(part){inTextTag=updateInTextTag(part,inTextTag);if(part.type===\"content\"){part.position=inTextTag?\"insidetag\":\"outsidetag\"}if(inTextTag&&part.type===\"content\"){Array.prototype.push.apply(newArray,reader.parsed[index].map(function(p){if(p.type===\"content\"){p.position=\"insidetag\"}return p}));index++}else{newArray.push(part)}});return newArray},xmlparse:function xmlparse(content,xmltags){var matches=tagMatcher(content,xmltags.text,xmltags.other);var cursor=0;var parsed=matches.reduce(function(parsed,match){var value=content.substr(cursor,match.offset-cursor);if(value.length>0){parsed.push({type:\"content\",value:value})}cursor=match.offset+match.value.length;delete match.offset;if(match.value.length>0){parsed.push(match)}return parsed},[]);var value=content.substr(cursor);if(value.length>0){parsed.push({type:\"content\",value:value})}return parsed}}},{\"./doc-utils\":4,\"./errors\":6}],9:[function(require,module,exports){\"use strict\";function memoize(func){var stringifyJson=JSON.stringify,cache={};function cachedfun(){var hash=stringifyJson(arguments);return hash in cache?cache[hash]:cache[hash]=func.apply(this,arguments)}return cachedfun}module.exports=memoize},{}],10:[function(require,module,exports){\"use strict\";function getMinFromArrays(arrays,state){var minIndex=-1;for(var i=0,l=arrays.length;i<l;i++){if(state[i]>=arrays[i].length){continue}if(minIndex===-1||arrays[i][state[i]].offset<arrays[minIndex][state[minIndex]].offset){minIndex=i}}if(minIndex===-1){throw new Error(\"minIndex negative\")}return minIndex}module.exports=function(arrays){var totalLength=arrays.reduce(function(sum,array){return sum+array.length},0);arrays=arrays.filter(function(array){return array.length>0});var resultArray=new Array(totalLength);var state=arrays.map(function(){return 0});var i=0;while(i<=totalLength-1){var arrayIndex=getMinFromArrays(arrays,state);resultArray[i]=arrays[arrayIndex][state[arrayIndex]];state[arrayIndex]++;i++}return resultArray}},{}],11:[function(require,module,exports){\"use strict\";function emptyFun(){}function identity(i){return i}module.exports=function(module){var defaults={set:emptyFun,parse:emptyFun,render:emptyFun,getTraits:emptyFun,optionsTransformer:identity,getRenderedMap:identity,postparse:identity};if(Object.keys(defaults).every(function(key){return!module[key]})){throw new Error(\"This module cannot be wrapped, because it doesn't define any of the necessary functions\")}Object.keys(defaults).forEach(function(key){module[key]=module[key]||defaults[key]});return module}},{}],12:[function(require,module,exports){\"use strict\";var traitName=\"expandPair\";var mergeSort=require(\"../mergesort\");var DocUtils=require(\"../doc-utils\");var wrapper=require(\"../module-wrapper\");var _require=require(\"../traits\"),getExpandToDefault=_require.getExpandToDefault;var Errors=require(\"../errors\");function throwUnmatchedLoopException(options){var location=options.location;var t=location===\"start\"?\"unclosed\":\"unopened\";var T=location===\"start\"?\"Unclosed\":\"Unopened\";var err=new Errors.XTTemplateError(T+\" loop\");var tag=options.part.value;err.properties={id:t+\"_loop\",explanation:\"The loop with tag \"+tag+\" is \"+t,xtag:tag};throw err}function throwClosingTagNotMatchOpeningTag(options){var tags=options.tags;var err=new Errors.XTTemplateError(\"Closing tag does not match opening tag\");err.properties={id:\"closing_tag_does_not_match_opening_tag\",explanation:'The tag \"'+tags[0].value+'\" is closed by the tag \"'+tags[1].value+'\"',openingtag:tags[0].value,closingtag:tags[1].value};throw err}function getOpenCountChange(part){switch(part.location){case\"start\":return 1;case\"end\":return-1;default:throw new Error(\"Location should be one of 'start' or 'end' (given : \"+part.location+\")\")}}function getPairs(traits){if(traits.length===0){return[]}var countOpen=1;var firstTrait=traits[0];for(var i=1;i<traits.length;i++){var currentTrait=traits[i];countOpen+=getOpenCountChange(currentTrait.part);if(countOpen===0){if(currentTrait.part.value!==firstTrait.part.value&&currentTrait.part.value!==\"\"){throwClosingTagNotMatchOpeningTag({tags:[firstTrait.part,currentTrait.part]})}var outer=getPairs(traits.slice(i+1));\r\nreturn[[firstTrait,currentTrait]].concat(outer)}}var part=firstTrait.part;throwUnmatchedLoopException({part:part,location:part.location})}var expandPairTrait={name:\"ExpandPairTrait\",postparse:function postparse(parsed,_ref){var getTraits=_ref.getTraits,_postparse=_ref.postparse;var traits=getTraits(traitName,parsed);traits=traits.map(function(trait){return trait||[]});traits=mergeSort(traits);var pairs=getPairs(traits);var expandedPairs=pairs.map(function(pair){var expandTo=pair[0].part.expandTo;if(expandTo===\"auto\"){expandTo=getExpandToDefault(parsed.slice(pair[0].offset,pair[1].offset))}if(!expandTo){return[pair[0].offset,pair[1].offset]}var left=DocUtils.getLeft(parsed,expandTo,pair[0].offset);var right=DocUtils.getRight(parsed,expandTo,pair[1].offset);return[left,right]});var currentPairIndex=0;var innerParts=void 0;return parsed.reduce(function(newParsed,part,i){var inPair=currentPairIndex<pairs.length&&expandedPairs[currentPairIndex][0]<=i;var pair=pairs[currentPairIndex];var expandedPair=expandedPairs[currentPairIndex];if(!inPair){newParsed.push(part);return newParsed}if(expandedPair[0]===i){innerParts=[]}if(pair[0].offset!==i&&pair[1].offset!==i){innerParts.push(part)}if(expandedPair[1]===i){var basePart=parsed[pair[0].offset];delete basePart.location;delete basePart.expandTo;basePart.subparsed=_postparse(innerParts);newParsed.push(basePart);currentPairIndex++}return newParsed},[])}};module.exports=function(){return wrapper(expandPairTrait)}},{\"../doc-utils\":4,\"../errors\":6,\"../mergesort\":10,\"../module-wrapper\":11,\"../traits\":20}],13:[function(require,module,exports){\"use strict\";var DocUtils=require(\"../doc-utils\");var dashInnerRegex=/^-([^\\s]+)\\s(.+)$/;var wrapper=require(\"../module-wrapper\");var moduleName=\"loop\";var loopModule={name:\"LoopModule\",parse:function parse(placeHolderContent){var module=moduleName;var type=\"placeholder\";if(placeHolderContent[0]===\"#\"){return{type:type,value:placeHolderContent.substr(1),expandTo:\"auto\",module:module,location:\"start\",inverted:false}}if(placeHolderContent[0]===\"^\"){return{type:type,value:placeHolderContent.substr(1),expandTo:\"auto\",module:module,location:\"start\",inverted:true}}if(placeHolderContent[0]===\"/\"){return{type:type,value:placeHolderContent.substr(1),module:module,location:\"end\"}}if(placeHolderContent[0]===\"-\"){var value=placeHolderContent.replace(dashInnerRegex,\"$2\");var expandTo=placeHolderContent.replace(dashInnerRegex,\"$1\");return{type:type,value:value,expandTo:expandTo,module:module,location:\"start\",inverted:false}}return null},getTraits:function getTraits(traitName,parsed){if(traitName!==\"expandPair\"){return}return parsed.reduce(function(tags,part,offset){if(part.type===\"placeholder\"&&part.module===moduleName){tags.push({part:part,offset:offset})}return tags},[])},render:function render(part,options){if(!part.type===\"placeholder\"||part.module!==moduleName){return null}var totalValue=[];function loopOver(scope){var scopeManager=options.scopeManager.createSubScopeManager(scope,part.value);totalValue.push(options.render(DocUtils.mergeObjects({},options,{compiled:part.subparsed,tags:{},scopeManager:scopeManager})))}options.scopeManager.loopOver(part.value,loopOver,part.inverted);return{value:totalValue.join(\"\")}}};module.exports=function(){return wrapper(loopModule)}},{\"../doc-utils\":4,\"../module-wrapper\":11}],14:[function(require,module,exports){\"use strict\";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\")}}var DocUtils=require(\"../doc-utils\");var Errors=require(\"../errors\");var moduleName=\"rawxml\";var wrapper=require(\"../module-wrapper\");function throwRawTagShouldBeOnlyTextInParagraph(options){var err=new Errors.XTTemplateError(\"Raw tag should be the only text in paragraph\");var tag=options.part.value;err.properties={id:\"raw_xml_tag_should_be_only_text_in_paragraph\",explanation:\"The tag \"+tag,xtag:options.part.value,paragraphParts:options.paragraphParts};throw err}function getInner(_ref){var part=_ref.part,left=_ref.left,right=_ref.right,postparsed=_ref.postparsed,index=_ref.index;var paragraphParts=postparsed.slice(left+1,right);paragraphParts.forEach(function(p,i){if(i===index-left-1){return}if(p.type===\"placeholder\"||p.type===\"content\"&&p.position===\"insidetag\"){throwRawTagShouldBeOnlyTextInParagraph({paragraphParts:paragraphParts,part:part})}});return part}var RawXmlModule=function(){function RawXmlModule(){_classCallCheck(this,RawXmlModule);this.name=\"RawXmlModule\"}_createClass(RawXmlModule,[{key:\"optionsTransformer\",value:function optionsTransformer(options,docxtemplater){this.fileTypeConfig=docxtemplater.fileTypeConfig;return options}},{key:\"parse\",value:function parse(placeHolderContent){var type=\"placeholder\";if(placeHolderContent[0]!==\"@\"){return null}return{type:type,value:placeHolderContent.substr(1),module:moduleName}}},{key:\"postparse\",value:function postparse(parsed){return DocUtils.traits.expandToOne(parsed,{moduleName:moduleName,getInner:getInner,expandTo:this.fileTypeConfig.tagRawXml})}},{key:\"render\",value:function render(part,options){if(part.module!==moduleName){return null}var value=options.scopeManager.getValue(part.value);if(value==null){value=options.nullGetter(part)}return{value:value}}}]);return RawXmlModule}();module.exports=function(){return wrapper(new RawXmlModule)}},{\"../doc-utils\":4,\"../errors\":6,\"../module-wrapper\":11}],15:[function(require,module,exports){\"use strict\";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\")}}var wrapper=require(\"../module-wrapper\");var Render=function(){function Render(){_classCallCheck(this,Render);this.name=\"Render\"}_createClass(Render,[{key:\"set\",value:function set(obj){if(obj.compiled){this.compiled=obj.compiled}if(obj.data!=null){this.data=obj.data}}},{key:\"getRenderedMap\",value:function getRenderedMap(mapper){var _this=this;return Object.keys(this.compiled).reduce(function(mapper,from){mapper[from]={from:from,data:_this.data};return mapper},mapper)}}]);return Render}();module.exports=function(){return wrapper(new Render)}},{\"../module-wrapper\":11}],16:[function(require,module,exports){\"use strict\";var wrapper=require(\"../module-wrapper\");var spacePreserve={name:\"SpacePreserveModule\",postparse:function postparse(parsed){var chunk=[];var inChunk=false;var result=parsed.reduce(function(parsed,part){if(part.type===\"tag\"&&part.position===\"start\"&&part.text&&part.value===\"<w:t>\"){inChunk=true}if(inChunk){if(part.type===\"placeholder\"&&!part.module){chunk[0].value='<w:t xml:space=\"preserve\">'}chunk.push(part)}else{parsed.push(part)}if(part.type===\"tag\"&&part.position===\"end\"&&part.text&&part.value===\"</w:t>\"){Array.prototype.push.apply(parsed,chunk);inChunk=false;chunk=[]}return parsed},[]);Array.prototype.push.apply(result,chunk);return result}};module.exports=function(){return wrapper(spacePreserve)}},{\"../module-wrapper\":11}],17:[function(require,module,exports){\"use strict\";var DocUtils=require(\"./doc-utils\");var parser={postparse:function postparse(parsed,modules){function getTraits(traitName,parsed){return modules.map(function(module){return module.getTraits(traitName,parsed)})}function postparse(parsed){return modules.reduce(function(parsed,module){return module.postparse(parsed,{postparse:postparse,getTraits:getTraits})},parsed)}return postparse(parsed)},parse:function parse(lexed,modules){function moduleParse(placeHolderContent,parsed){var moduleParsed=void 0;for(var i=0,l=modules.length;i<l;i++){var _module=modules[i];moduleParsed=_module.parse(placeHolderContent);if(moduleParsed){parsed.push(moduleParsed);return moduleParsed}}return null}var inPlaceHolder=false;var placeHolderContent=void 0;var tailParts=[];return lexed.reduce(function(parsed,token){if(token.type===\"delimiter\"){inPlaceHolder=token.position===\"start\";if(token.position===\"end\"){placeHolderContent=DocUtils.wordToUtf8(placeHolderContent);if(!moduleParse(placeHolderContent,parsed)){parsed.push({type:\"placeholder\",value:placeHolderContent})}Array.prototype.push.apply(parsed,tailParts);tailParts=[];return parsed}placeHolderContent=\"\";return parsed}if(inPlaceHolder){if(token.type===\"content\"&&token.position===\"insidetag\"){placeHolderContent+=token.value}else{tailParts.push(token)}return parsed}parsed.push(token);return parsed},[])}};module.exports=parser},{\"./doc-utils\":4}],18:[function(require,module,exports){\"use strict\";var ScopeManager=require(\"./scope-manager\");var DocUtils=require(\"./doc-utils\");function moduleRender(part,options){var moduleRendered=void 0;for(var i=0,l=options.modules.length;i<l;i++){var _module=options.modules[i];moduleRendered=_module.render(part,options);if(moduleRendered){return moduleRendered}}return false}function render(options){options.render=render;options.modules=options.modules;if(!options.scopeManager){options.scopeManager=ScopeManager.createBaseScopeManager(options)}return options.compiled.map(function(part){var moduleRendered=moduleRender(part,options);if(moduleRendered){return moduleRendered.value}if(part.type===\"placeholder\"){var value=options.scopeManager.getValue(part.value);if(value==null){value=options.nullGetter(part)}return DocUtils.utf8ToWord(value)}if(part.type===\"content\"||part.type===\"tag\"){return part.value}throw new Error('Unimplemented tag type \"'+part.type+'\"')}).join(\"\")}module.exports=render},{\"./doc-utils\":4,\"./scope-manager\":19}],19:[function(require,module,exports){\"use strict\";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\")}}var Errors=require(\"./errors\");var ScopeManager=function(){function ScopeManager(options){_classCallCheck(this,ScopeManager);this.scopePath=options.scopePath;this.scopeList=options.scopeList;this.parser=options.parser}_createClass(ScopeManager,[{key:\"loopOver\",value:function loopOver(tag,callback,inverted){inverted=inverted||false;return this.loopOverValue(this.getValue(tag),callback,inverted)}},{key:\"functorIfInverted\",value:function functorIfInverted(inverted,functor,value){if(inverted){functor(value)}}},{key:\"isValueFalsy\",value:function isValueFalsy(value,type){return value==null||!value||type===\"[object Array]\"&&value.length===0}},{key:\"loopOverValue\",value:function loopOverValue(value,functor,inverted){var type=Object.prototype.toString.call(value);var currentValue=this.scopeList[this.num];if(this.isValueFalsy(value,type)){return this.functorIfInverted(inverted,functor,currentValue)}if(type===\"[object Array]\"){for(var i=0,scope;i<value.length;i++){scope=value[i];this.functorIfInverted(!inverted,functor,scope)}return}if(type===\"[object Object]\"){return this.functorIfInverted(!inverted,functor,value)}if(value===true){return this.functorIfInverted(!inverted,functor,currentValue)}}},{key:\"getValue\",value:function getValue(tag,num){this.num=num==null?this.scopeList.length-1:num;var err=void 0;var parser=void 0;var result=void 0;var scope=this.scopeList[this.num];try{parser=this.parser(tag)}catch(error){err=new Errors.XTScopeParserError(\"Scope parser compilation failed\");err.properties={id:\"scopeparser_compilation_failed\",tag:tag,explanation:\"The scope parser for the tag \"+tag+\" failed to compile\",rootError:error};throw err}try{result=parser.get(scope,{num:this.num,scopeList:this.scopeList})}catch(error){err=new Errors.XTScopeParserError(\"Scope parser execution failed\");err.properties={id:\"scopeparser_execution_failed\",explanation:\"The scope parser for the tag \"+tag+\" failed to execute\",scope:scope,tag:tag,rootError:error};throw err}if(result==null&&this.num>0){return this.getValue(tag,this.num-1)}return result}},{key:\"createSubScopeManager\",value:function createSubScopeManager(scope,tag){var options={scopePath:this.scopePath.slice(0),scopeList:this.scopeList.slice(0)};options.parser=this.parser;options.scopeList=this.scopeList.concat(scope);options.scopePath=this.scopePath.concat(tag);return new ScopeManager(options)}}]);return ScopeManager}();ScopeManager.createBaseScopeManager=function(_ref){var parser=_ref.parser,tags=_ref.tags;var options={parser:parser,tags:tags};options.scopePath=[];options.scopeList=[tags];return new ScopeManager(options)};module.exports=ScopeManager},{\"./errors\":6}],20:[function(require,module,exports){\"use strict\";var DocUtils=require(\"./doc-utils\");var Errors=require(\"./errors\");function throwRawTagNotInParagraph(options){var err=new Errors.XTTemplateError(\"Raw tag not in paragraph\");var tag=options.part.value;err.properties={id:\"raw_tag_outerxml_invalid\",explanation:'The tag \"'+tag+'\"',rootError:options.rootError,xtag:tag};throw err}function lastTagIsOpenTag(array,tag){if(array.length===0){return false}var lastTag=array[array.length-1];var innerLastTag=lastTag.tag.substr(1);var innerCurrentTag=tag.substr(2,tag.length-3);return innerLastTag.indexOf(innerCurrentTag)===0}function addTag(array,tag){array.push({tag:tag});return array}function getListXmlElements(parts){var tags=parts.filter(function(part){return part.type===\"tag\"}).map(function(part){return part.value});var result=[];for(var i=0,tag;i<tags.length;i++){tag=tags[i];if(tag[1]===\"/\"){if(lastTagIsOpenTag(result,tag)){result.pop()}else{result=addTag(result,tag)}}else if(tag[tag.length-1]!==\"/\"){result=addTag(result,tag)}}return result}function getExpandToDefault(parts){var xmlElements=getListXmlElements(parts);for(var i=0;i<xmlElements.length;i++){var xmlElement=xmlElements[i];if(xmlElement.tag.indexOf(\"<w:tc\")===0){return\"w:tr\"}}return false}function expandOne(part,postparsed,options){var expandTo=part.expandTo||options.expandTo;var index=postparsed.indexOf(part);if(!expandTo){return postparsed}var right=void 0,left=void 0;try{right=DocUtils.getRight(postparsed,expandTo,index);left=DocUtils.getLeft(postparsed,expandTo,index)}catch(rootError){throwRawTagNotInParagraph({part:part,rootError:rootError})}var leftParts=postparsed.slice(left,index);var rightParts=postparsed.slice(index+1,right+1);var inner=options.getInner({index:index,part:part,leftParts:leftParts,rightParts:rightParts,left:left,right:right,postparsed:postparsed});var type=Object.prototype.toString.call(inner);if(type===\"[object Array]\"){inner=DocUtils.concatArrays(inner)}return DocUtils.concatArrays([postparsed.slice(0,left),[inner],postparsed.slice(right+1)])}function expandToOne(postparsed,options){var expandToElements=postparsed.reduce(function(elements,part){if(part.type===\"placeholder\"&&part.module===options.moduleName){elements.push(part)}return elements},[]);expandToElements.forEach(function(part){postparsed=expandOne(part,postparsed,options)});return postparsed}module.exports={expandToOne:expandToOne,getExpandToDefault:getExpandToDefault}},{\"./doc-utils\":4,\"./errors\":6}],21:[function(require,module,exports){\"use strict\";var DocUtils=require(\"./doc-utils\");var memoize=require(\"./memoize\");function handleRecursiveCase(res){function replacerUnshift(){var pn={array:Array.prototype.slice.call(arguments)};pn.array.shift();var match=pn.array[0]+pn.array[1];pn.array.unshift(match);pn.array.pop();var offset=pn.array.pop();pn.offset=offset;pn.first=true;res.matches.unshift(pn);res.charactersAdded.unshift(0);return res.charactersAddedCumulative.unshift(0)}if(res.content.indexOf(\"<\")===-1&&res.content.indexOf(\">\")===-1){res.content.replace(/^()([^<>]*)$/,replacerUnshift)}var r=new RegExp(\"^()([^<]+)</(?:\"+res.tagsXmlArrayJoined+\")>\");res.content.replace(r,replacerUnshift);function replacerPush(){var pn={array:Array.prototype.slice.call(arguments)};pn.array.pop();var offset=pn.array.pop();pn.offset=offset;pn.last=true;res.matches.push(pn);res.charactersAdded.push(0);return res.charactersAddedCumulative.push(0)}r=new RegExp(\"(<(?:\"+res.tagsXmlArrayJoined+\")[^>]*>)([^>]+)$\");res.content.replace(r,replacerPush);return res}function xmlMatcher(content,tagsXmlArray){var res={};res.content=content;res.tagsXmlArray=tagsXmlArray;res.tagsXmlArrayJoined=res.tagsXmlArray.join(\"|\");var regexp=new RegExp(\"(<(?:\"+res.tagsXmlArrayJoined+\")[^>]*>)([^<>]*)</(?:\"+res.tagsXmlArrayJoined+\")>\",\"g\");res.matches=DocUtils.pregMatchAll(regexp,res.content);res.charactersAddedCumulative=res.matches.map(function(){return 0});res.charactersAdded=res.matches.map(function(){return 0});return handleRecursiveCase(res)}var memoized=memoize(xmlMatcher);module.exports=function(content,tagsXmlArray){return DocUtils.cloneDeep(memoized(content,tagsXmlArray))}},{\"./doc-utils\":4,\"./memoize\":9}],22:[function(require,module,exports){\"use strict\";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\")}}var DocUtils=require(\"./doc-utils\");var ScopeManager=require(\"./scope-manager\");var xmlMatcher=require(\"./xml-matcher\");var Errors=require(\"./errors\");var Lexer=require(\"./lexer\");var Parser=require(\"./parser.js\");var _render=require(\"./render.js\");function _getFullText(content,tagsXmlArray){var matcher=xmlMatcher(content,tagsXmlArray);var result=matcher.matches.map(function(match){return match.array[2]});return DocUtils.wordToUtf8(DocUtils.convertSpaces(result.join(\"\")))}module.exports=function(){function XmlTemplater(content,options){_classCallCheck(this,XmlTemplater);this.fromJson(options);this.setModules({inspect:{filePath:this.filePath}});this.load(content)}_createClass(XmlTemplater,[{key:\"load\",value:function load(content){if(typeof content!==\"string\"){var err=new Errors.XTInternalError(\"Content must be a string\");err.properties.id=\"xmltemplater_content_must_be_string\";throw err}this.content=content}},{key:\"setTags\",value:function setTags(tags){this.tags=tags!=null?tags:{};this.scopeManager=ScopeManager.createBaseScopeManager({tags:this.tags,parser:this.parser});return this}},{key:\"fromJson\",value:function fromJson(options){this.filePath=options.filePath;this.modules=options.modules;this.fileTypeConfig=options.fileTypeConfig;Object.keys(DocUtils.defaults).map(function(key){this[key]=options[key]!=null?options[key]:DocUtils.defaults[key]},this)}},{key:\"getFullText\",value:function getFullText(){return _getFullText(this.content,this.fileTypeConfig.tagsXmlTextArray)}},{key:\"setModules\",value:function setModules(obj){this.modules.forEach(function(module){module.set(obj)})}},{key:\"parse\",value:function parse(){this.xmllexed=Lexer.xmlparse(this.content,{text:this.fileTypeConfig.tagsXmlTextArray,other:this.fileTypeConfig.tagsXmlLexedArray});this.setModules({inspect:{xmllexed:this.xmllexed}});this.lexed=Lexer.parse(this.xmllexed,this.delimiters);this.setModules({inspect:{lexed:this.lexed}});this.parsed=Parser.parse(this.lexed,this.modules);this.setModules({inspect:{parsed:this.parsed}});this.postparsed=Parser.postparse(this.parsed,this.modules);return this}},{key:\"render\",value:function render(){this.setModules({inspect:{postparsed:this.postparsed}});this.content=_render({compiled:this.postparsed,tags:this.tags,modules:this.modules,parser:this.parser,nullGetter:this.nullGetter,filePath:this.filePath});this.setModules({inspect:{content:this.content}});return this}}]);return XmlTemplater}()},{\"./doc-utils\":4,\"./errors\":6,\"./lexer\":8,\"./parser.js\":17,\"./render.js\":18,\"./scope-manager\":19,\"./xml-matcher\":21}],23:[function(require,module,exports){function DOMParser(options){this.options=options||{locator:{}}}DOMParser.prototype.parseFromString=function(source,mimeType){var options=this.options;var sax=new XMLReader;var domBuilder=options.domBuilder||new DOMHandler;var errorHandler=options.errorHandler;var locator=options.locator;var defaultNSMap=options.xmlns||{};var entityMap={lt:\"<\",gt:\">\",amp:\"&\",quot:'\"',apos:\"'\"};if(locator){domBuilder.setDocumentLocator(locator)}sax.errorHandler=buildErrorHandler(errorHandler,domBuilder,locator);sax.domBuilder=options.domBuilder||domBuilder;if(/\\/x?html?$/.test(mimeType)){entityMap.nbsp=\" \";entityMap.copy=\"©\";defaultNSMap[\"\"]=\"http://www.w3.org/1999/xhtml\"}defaultNSMap.xml=defaultNSMap.xml||\"http://www.w3.org/XML/1998/namespace\";if(source){sax.parse(source,defaultNSMap,entityMap)}else{sax.errorHandler.error(\"invalid doc source\")}return domBuilder.doc};function buildErrorHandler(errorImpl,domBuilder,locator){if(!errorImpl){if(domBuilder instanceof DOMHandler){return domBuilder}errorImpl=domBuilder}var errorHandler={};var isCallback=errorImpl instanceof Function;locator=locator||{};function build(key){var fn=errorImpl[key];if(!fn&&isCallback){fn=errorImpl.length==2?function(msg){errorImpl(key,msg)}:errorImpl}errorHandler[key]=fn&&function(msg){fn(\"[xmldom \"+key+\"]\\t\"+msg+_locator(locator))}||function(){}}build(\"warning\");build(\"error\");build(\"fatalError\");return errorHandler}function DOMHandler(){this.cdata=false}function position(locator,node){node.lineNumber=locator.lineNumber;node.columnNumber=locator.columnNumber}DOMHandler.prototype={startDocument:function(){this.doc=(new DOMImplementation).createDocument(null,null,null);if(this.locator){this.doc.documentURI=this.locator.systemId}},startElement:function(namespaceURI,localName,qName,attrs){var doc=this.doc;var el=doc.createElementNS(namespaceURI,qName||localName);var len=attrs.length;appendElement(this,el);this.currentElement=el;this.locator&&position(this.locator,el);for(var i=0;i<len;i++){var namespaceURI=attrs.getURI(i);var value=attrs.getValue(i);var qName=attrs.getQName(i);var attr=doc.createAttributeNS(namespaceURI,qName);this.locator&&position(attrs.getLocator(i),attr);attr.value=attr.nodeValue=value;el.setAttributeNode(attr)}},endElement:function(namespaceURI,localName,qName){var current=this.currentElement;var tagName=current.tagName;this.currentElement=current.parentNode},startPrefixMapping:function(prefix,uri){},endPrefixMapping:function(prefix){},processingInstruction:function(target,data){var ins=this.doc.createProcessingInstruction(target,data);this.locator&&position(this.locator,ins);appendElement(this,ins)},ignorableWhitespace:function(ch,start,length){},characters:function(chars,start,length){chars=_toString.apply(this,arguments);if(chars){if(this.cdata){var charNode=this.doc.createCDATASection(chars)}else{var charNode=this.doc.createTextNode(chars)}if(this.currentElement){this.currentElement.appendChild(charNode)}else if(/^\\s*$/.test(chars)){this.doc.appendChild(charNode)}this.locator&&position(this.locator,charNode)}},skippedEntity:function(name){},endDocument:function(){this.doc.normalize()},setDocumentLocator:function(locator){if(this.locator=locator){locator.lineNumber=0}},comment:function(chars,start,length){chars=_toString.apply(this,arguments);var comm=this.doc.createComment(chars);this.locator&&position(this.locator,comm);appendElement(this,comm)},startCDATA:function(){this.cdata=true},endCDATA:function(){this.cdata=false},startDTD:function(name,publicId,systemId){var impl=this.doc.implementation;if(impl&&impl.createDocumentType){var dt=impl.createDocumentType(name,publicId,systemId);this.locator&&position(this.locator,dt);appendElement(this,dt)}},warning:function(error){console.warn(\"[xmldom warning]\\t\"+error,_locator(this.locator))},error:function(error){console.error(\"[xmldom error]\\t\"+error,_locator(this.locator))},fatalError:function(error){console.error(\"[xmldom fatalError]\\t\"+error,_locator(this.locator));throw error}};function _locator(l){if(l){return\"\\n@\"+(l.systemId||\"\")+\"#[line:\"+l.lineNumber+\",col:\"+l.columnNumber+\"]\"}}function _toString(chars,start,length){if(typeof chars==\"string\"){return chars.substr(start,length)}else{if(chars.length>=start+length||start){return new java.lang.String(chars,start,length)+\"\"}return chars}}\"endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl\".replace(/\\w+/g,function(key){DOMHandler.prototype[key]=function(){return null}});function appendElement(hander,node){if(!hander.currentElement){hander.doc.appendChild(node)}else{hander.currentElement.appendChild(node)}}var XMLReader=require(\"./sax\").XMLReader;var DOMImplementation=exports.DOMImplementation=require(\"./dom\").DOMImplementation;exports.XMLSerializer=require(\"./dom\").XMLSerializer;exports.DOMParser=DOMParser},{\"./dom\":24,\"./sax\":25}],24:[function(require,module,exports){function copy(src,dest){for(var p in src){dest[p]=src[p]}}function _extends(Class,Super){var pt=Class.prototype;if(Object.create){var ppt=Object.create(Super.prototype);pt.__proto__=ppt}if(!(pt instanceof Super)){function t(){}t.prototype=Super.prototype;t=new t;copy(pt,t);Class.prototype=pt=t}if(pt.constructor!=Class){if(typeof Class!=\"function\"){console.error(\"unknow Class:\"+Class)}pt.constructor=Class}}var htmlns=\"http://www.w3.org/1999/xhtml\";var NodeType={};var ELEMENT_NODE=NodeType.ELEMENT_NODE=1;var ATTRIBUTE_NODE=NodeType.ATTRIBUTE_NODE=2;var TEXT_NODE=NodeType.TEXT_NODE=3;var CDATA_SECTION_NODE=NodeType.CDATA_SECTION_NODE=4;var ENTITY_REFERENCE_NODE=NodeType.ENTITY_REFERENCE_NODE=5;var ENTITY_NODE=NodeType.ENTITY_NODE=6;var PROCESSING_INSTRUCTION_NODE=NodeType.PROCESSING_INSTRUCTION_NODE=7;var COMMENT_NODE=NodeType.COMMENT_NODE=8;var DOCUMENT_NODE=NodeType.DOCUMENT_NODE=9;var DOCUMENT_TYPE_NODE=NodeType.DOCUMENT_TYPE_NODE=10;var DOCUMENT_FRAGMENT_NODE=NodeType.DOCUMENT_FRAGMENT_NODE=11;var NOTATION_NODE=NodeType.NOTATION_NODE=12;var ExceptionCode={};var ExceptionMessage={};var INDEX_SIZE_ERR=ExceptionCode.INDEX_SIZE_ERR=(ExceptionMessage[1]=\"Index size error\",1);var DOMSTRING_SIZE_ERR=ExceptionCode.DOMSTRING_SIZE_ERR=(ExceptionMessage[2]=\"DOMString size error\",2);var HIERARCHY_REQUEST_ERR=ExceptionCode.HIERARCHY_REQUEST_ERR=(ExceptionMessage[3]=\"Hierarchy request error\",3);var WRONG_DOCUMENT_ERR=ExceptionCode.WRONG_DOCUMENT_ERR=(ExceptionMessage[4]=\"Wrong document\",4);var INVALID_CHARACTER_ERR=ExceptionCode.INVALID_CHARACTER_ERR=(ExceptionMessage[5]=\"Invalid character\",5);var NO_DATA_ALLOWED_ERR=ExceptionCode.NO_DATA_ALLOWED_ERR=(ExceptionMessage[6]=\"No data allowed\",6);var NO_MODIFICATION_ALLOWED_ERR=ExceptionCode.NO_MODIFICATION_ALLOWED_ERR=(ExceptionMessage[7]=\"No modification allowed\",7);var NOT_FOUND_ERR=ExceptionCode.NOT_FOUND_ERR=(ExceptionMessage[8]=\"Not found\",8);var NOT_SUPPORTED_ERR=ExceptionCode.NOT_SUPPORTED_ERR=(ExceptionMessage[9]=\"Not supported\",9);var INUSE_ATTRIBUTE_ERR=ExceptionCode.INUSE_ATTRIBUTE_ERR=(ExceptionMessage[10]=\"Attribute in use\",10);var INVALID_STATE_ERR=ExceptionCode.INVALID_STATE_ERR=(ExceptionMessage[11]=\"Invalid state\",11);var SYNTAX_ERR=ExceptionCode.SYNTAX_ERR=(ExceptionMessage[12]=\"Syntax error\",12);var INVALID_MODIFICATION_ERR=ExceptionCode.INVALID_MODIFICATION_ERR=(ExceptionMessage[13]=\"Invalid modification\",13);var NAMESPACE_ERR=ExceptionCode.NAMESPACE_ERR=(ExceptionMessage[14]=\"Invalid namespace\",14);var INVALID_ACCESS_ERR=ExceptionCode.INVALID_ACCESS_ERR=(ExceptionMessage[15]=\"Invalid access\",15);function DOMException(code,message){if(message instanceof Error){var error=message}else{error=this;Error.call(this,ExceptionMessage[code]);this.message=ExceptionMessage[code];if(Error.captureStackTrace)Error.captureStackTrace(this,DOMException)}error.code=code;if(message)this.message=this.message+\": \"+message;return error}DOMException.prototype=Error.prototype;copy(ExceptionCode,DOMException);function NodeList(){}NodeList.prototype={length:0,item:function(index){return this[index]||null},toString:function(isHTML,nodeFilter){for(var buf=[],i=0;i<this.length;i++){serializeToString(this[i],buf,isHTML,nodeFilter)}return buf.join(\"\")}};function LiveNodeList(node,refresh){this._node=node;this._refresh=refresh;_updateLiveList(this)}function _updateLiveList(list){var inc=list._node._inc||list._node.ownerDocument._inc;if(list._inc!=inc){var ls=list._refresh(list._node);__set__(list,\"length\",ls.length);copy(ls,list);list._inc=inc}}LiveNodeList.prototype.item=function(i){_updateLiveList(this);return this[i]};_extends(LiveNodeList,NodeList);function NamedNodeMap(){}function _findNodeIndex(list,node){var i=list.length;while(i--){if(list[i]===node){return i}}}function _addNamedNode(el,list,newAttr,oldAttr){if(oldAttr){list[_findNodeIndex(list,oldAttr)]=newAttr}else{list[list.length++]=newAttr}if(el){newAttr.ownerElement=el;var doc=el.ownerDocument;if(doc){oldAttr&&_onRemoveAttribute(doc,el,oldAttr);_onAddAttribute(doc,el,newAttr)}}}function _removeNamedNode(el,list,attr){var i=_findNodeIndex(list,attr);if(i>=0){var lastIndex=list.length-1;while(i<lastIndex){list[i]=list[++i]}list.length=lastIndex;if(el){var doc=el.ownerDocument;if(doc){_onRemoveAttribute(doc,el,attr);attr.ownerElement=null}}}else{throw DOMException(NOT_FOUND_ERR,new Error(el.tagName+\"@\"+attr))}}NamedNodeMap.prototype={length:0,item:NodeList.prototype.item,getNamedItem:function(key){var i=this.length;while(i--){var attr=this[i];if(attr.nodeName==key){return attr}}},setNamedItem:function(attr){var el=attr.ownerElement;if(el&&el!=this._ownerElement){throw new DOMException(INUSE_ATTRIBUTE_ERR)}var oldAttr=this.getNamedItem(attr.nodeName);_addNamedNode(this._ownerElement,this,attr,oldAttr);return oldAttr},setNamedItemNS:function(attr){var el=attr.ownerElement,oldAttr;if(el&&el!=this._ownerElement){throw new DOMException(INUSE_ATTRIBUTE_ERR)}oldAttr=this.getNamedItemNS(attr.namespaceURI,attr.localName);_addNamedNode(this._ownerElement,this,attr,oldAttr);return oldAttr},removeNamedItem:function(key){var attr=this.getNamedItem(key);_removeNamedNode(this._ownerElement,this,attr);return attr},removeNamedItemNS:function(namespaceURI,localName){var attr=this.getNamedItemNS(namespaceURI,localName);_removeNamedNode(this._ownerElement,this,attr);return attr},getNamedItemNS:function(namespaceURI,localName){var i=this.length;while(i--){var node=this[i];if(node.localName==localName&&node.namespaceURI==namespaceURI){return node}}return null}};function DOMImplementation(features){this._features={};if(features){for(var feature in features){this._features=features[feature]}}}DOMImplementation.prototype={hasFeature:function(feature,version){var versions=this._features[feature.toLowerCase()];if(versions&&(!version||version in versions)){\r\nreturn true}else{return false}},createDocument:function(namespaceURI,qualifiedName,doctype){var doc=new Document;doc.implementation=this;doc.childNodes=new NodeList;doc.doctype=doctype;if(doctype){doc.appendChild(doctype)}if(qualifiedName){var root=doc.createElementNS(namespaceURI,qualifiedName);doc.appendChild(root)}return doc},createDocumentType:function(qualifiedName,publicId,systemId){var node=new DocumentType;node.name=qualifiedName;node.nodeName=qualifiedName;node.publicId=publicId;node.systemId=systemId;return node}};function Node(){}Node.prototype={firstChild:null,lastChild:null,previousSibling:null,nextSibling:null,attributes:null,parentNode:null,childNodes:null,ownerDocument:null,nodeValue:null,namespaceURI:null,prefix:null,localName:null,insertBefore:function(newChild,refChild){return _insertBefore(this,newChild,refChild)},replaceChild:function(newChild,oldChild){this.insertBefore(newChild,oldChild);if(oldChild){this.removeChild(oldChild)}},removeChild:function(oldChild){return _removeChild(this,oldChild)},appendChild:function(newChild){return this.insertBefore(newChild,null)},hasChildNodes:function(){return this.firstChild!=null},cloneNode:function(deep){return cloneNode(this.ownerDocument||this,this,deep)},normalize:function(){var child=this.firstChild;while(child){var next=child.nextSibling;if(next&&next.nodeType==TEXT_NODE&&child.nodeType==TEXT_NODE){this.removeChild(next);child.appendData(next.data)}else{child.normalize();child=next}}},isSupported:function(feature,version){return this.ownerDocument.implementation.hasFeature(feature,version)},hasAttributes:function(){return this.attributes.length>0},lookupPrefix:function(namespaceURI){var el=this;while(el){var map=el._nsMap;if(map){for(var n in map){if(map[n]==namespaceURI){return n}}}el=el.nodeType==ATTRIBUTE_NODE?el.ownerDocument:el.parentNode}return null},lookupNamespaceURI:function(prefix){var el=this;while(el){var map=el._nsMap;if(map){if(prefix in map){return map[prefix]}}el=el.nodeType==ATTRIBUTE_NODE?el.ownerDocument:el.parentNode}return null},isDefaultNamespace:function(namespaceURI){var prefix=this.lookupPrefix(namespaceURI);return prefix==null}};function _xmlEncoder(c){return c==\"<\"&&\"&lt;\"||c==\">\"&&\"&gt;\"||c==\"&\"&&\"&amp;\"||c=='\"'&&\"&quot;\"||\"&#\"+c.charCodeAt()+\";\"}copy(NodeType,Node);copy(NodeType,Node.prototype);function _visitNode(node,callback){if(callback(node)){return true}if(node=node.firstChild){do{if(_visitNode(node,callback)){return true}}while(node=node.nextSibling)}}function Document(){}function _onAddAttribute(doc,el,newAttr){doc&&doc._inc++;var ns=newAttr.namespaceURI;if(ns==\"http://www.w3.org/2000/xmlns/\"){el._nsMap[newAttr.prefix?newAttr.localName:\"\"]=newAttr.value}}function _onRemoveAttribute(doc,el,newAttr,remove){doc&&doc._inc++;var ns=newAttr.namespaceURI;if(ns==\"http://www.w3.org/2000/xmlns/\"){delete el._nsMap[newAttr.prefix?newAttr.localName:\"\"]}}function _onUpdateChild(doc,el,newChild){if(doc&&doc._inc){doc._inc++;var cs=el.childNodes;if(newChild){cs[cs.length++]=newChild}else{var child=el.firstChild;var i=0;while(child){cs[i++]=child;child=child.nextSibling}cs.length=i}}}function _removeChild(parentNode,child){var previous=child.previousSibling;var next=child.nextSibling;if(previous){previous.nextSibling=next}else{parentNode.firstChild=next}if(next){next.previousSibling=previous}else{parentNode.lastChild=previous}_onUpdateChild(parentNode.ownerDocument,parentNode);return child}function _insertBefore(parentNode,newChild,nextChild){var cp=newChild.parentNode;if(cp){cp.removeChild(newChild)}if(newChild.nodeType===DOCUMENT_FRAGMENT_NODE){var newFirst=newChild.firstChild;if(newFirst==null){return newChild}var newLast=newChild.lastChild}else{newFirst=newLast=newChild}var pre=nextChild?nextChild.previousSibling:parentNode.lastChild;newFirst.previousSibling=pre;newLast.nextSibling=nextChild;if(pre){pre.nextSibling=newFirst}else{parentNode.firstChild=newFirst}if(nextChild==null){parentNode.lastChild=newLast}else{nextChild.previousSibling=newLast}do{newFirst.parentNode=parentNode}while(newFirst!==newLast&&(newFirst=newFirst.nextSibling));_onUpdateChild(parentNode.ownerDocument||parentNode,parentNode);if(newChild.nodeType==DOCUMENT_FRAGMENT_NODE){newChild.firstChild=newChild.lastChild=null}return newChild}function _appendSingleChild(parentNode,newChild){var cp=newChild.parentNode;if(cp){var pre=parentNode.lastChild;cp.removeChild(newChild);var pre=parentNode.lastChild}var pre=parentNode.lastChild;newChild.parentNode=parentNode;newChild.previousSibling=pre;newChild.nextSibling=null;if(pre){pre.nextSibling=newChild}else{parentNode.firstChild=newChild}parentNode.lastChild=newChild;_onUpdateChild(parentNode.ownerDocument,parentNode,newChild);return newChild}Document.prototype={nodeName:\"#document\",nodeType:DOCUMENT_NODE,doctype:null,documentElement:null,_inc:1,insertBefore:function(newChild,refChild){if(newChild.nodeType==DOCUMENT_FRAGMENT_NODE){var child=newChild.firstChild;while(child){var next=child.nextSibling;this.insertBefore(child,refChild);child=next}return newChild}if(this.documentElement==null&&newChild.nodeType==ELEMENT_NODE){this.documentElement=newChild}return _insertBefore(this,newChild,refChild),newChild.ownerDocument=this,newChild},removeChild:function(oldChild){if(this.documentElement==oldChild){this.documentElement=null}return _removeChild(this,oldChild)},importNode:function(importedNode,deep){return importNode(this,importedNode,deep)},getElementById:function(id){var rtv=null;_visitNode(this.documentElement,function(node){if(node.nodeType==ELEMENT_NODE){if(node.getAttribute(\"id\")==id){rtv=node;return true}}});return rtv},createElement:function(tagName){var node=new Element;node.ownerDocument=this;node.nodeName=tagName;node.tagName=tagName;node.childNodes=new NodeList;var attrs=node.attributes=new NamedNodeMap;attrs._ownerElement=node;return node},createDocumentFragment:function(){var node=new DocumentFragment;node.ownerDocument=this;node.childNodes=new NodeList;return node},createTextNode:function(data){var node=new Text;node.ownerDocument=this;node.appendData(data);return node},createComment:function(data){var node=new Comment;node.ownerDocument=this;node.appendData(data);return node},createCDATASection:function(data){var node=new CDATASection;node.ownerDocument=this;node.appendData(data);return node},createProcessingInstruction:function(target,data){var node=new ProcessingInstruction;node.ownerDocument=this;node.tagName=node.target=target;node.nodeValue=node.data=data;return node},createAttribute:function(name){var node=new Attr;node.ownerDocument=this;node.name=name;node.nodeName=name;node.localName=name;node.specified=true;return node},createEntityReference:function(name){var node=new EntityReference;node.ownerDocument=this;node.nodeName=name;return node},createElementNS:function(namespaceURI,qualifiedName){var node=new Element;var pl=qualifiedName.split(\":\");var attrs=node.attributes=new NamedNodeMap;node.childNodes=new NodeList;node.ownerDocument=this;node.nodeName=qualifiedName;node.tagName=qualifiedName;node.namespaceURI=namespaceURI;if(pl.length==2){node.prefix=pl[0];node.localName=pl[1]}else{node.localName=qualifiedName}attrs._ownerElement=node;return node},createAttributeNS:function(namespaceURI,qualifiedName){var node=new Attr;var pl=qualifiedName.split(\":\");node.ownerDocument=this;node.nodeName=qualifiedName;node.name=qualifiedName;node.namespaceURI=namespaceURI;node.specified=true;if(pl.length==2){node.prefix=pl[0];node.localName=pl[1]}else{node.localName=qualifiedName}return node}};_extends(Document,Node);function Element(){this._nsMap={}}Element.prototype={nodeType:ELEMENT_NODE,hasAttribute:function(name){return this.getAttributeNode(name)!=null},getAttribute:function(name){var attr=this.getAttributeNode(name);return attr&&attr.value||\"\"},getAttributeNode:function(name){return this.attributes.getNamedItem(name)},setAttribute:function(name,value){var attr=this.ownerDocument.createAttribute(name);attr.value=attr.nodeValue=\"\"+value;this.setAttributeNode(attr)},removeAttribute:function(name){var attr=this.getAttributeNode(name);attr&&this.removeAttributeNode(attr)},appendChild:function(newChild){if(newChild.nodeType===DOCUMENT_FRAGMENT_NODE){return this.insertBefore(newChild,null)}else{return _appendSingleChild(this,newChild)}},setAttributeNode:function(newAttr){return this.attributes.setNamedItem(newAttr)},setAttributeNodeNS:function(newAttr){return this.attributes.setNamedItemNS(newAttr)},removeAttributeNode:function(oldAttr){return this.attributes.removeNamedItem(oldAttr.nodeName)},removeAttributeNS:function(namespaceURI,localName){var old=this.getAttributeNodeNS(namespaceURI,localName);old&&this.removeAttributeNode(old)},hasAttributeNS:function(namespaceURI,localName){return this.getAttributeNodeNS(namespaceURI,localName)!=null},getAttributeNS:function(namespaceURI,localName){var attr=this.getAttributeNodeNS(namespaceURI,localName);return attr&&attr.value||\"\"},setAttributeNS:function(namespaceURI,qualifiedName,value){var attr=this.ownerDocument.createAttributeNS(namespaceURI,qualifiedName);attr.value=attr.nodeValue=\"\"+value;this.setAttributeNode(attr)},getAttributeNodeNS:function(namespaceURI,localName){return this.attributes.getNamedItemNS(namespaceURI,localName)},getElementsByTagName:function(tagName){return new LiveNodeList(this,function(base){var ls=[];_visitNode(base,function(node){if(node!==base&&node.nodeType==ELEMENT_NODE&&(tagName===\"*\"||node.tagName==tagName)){ls.push(node)}});return ls})},getElementsByTagNameNS:function(namespaceURI,localName){return new LiveNodeList(this,function(base){var ls=[];_visitNode(base,function(node){if(node!==base&&node.nodeType===ELEMENT_NODE&&(namespaceURI===\"*\"||node.namespaceURI===namespaceURI)&&(localName===\"*\"||node.localName==localName)){ls.push(node)}});return ls})}};Document.prototype.getElementsByTagName=Element.prototype.getElementsByTagName;Document.prototype.getElementsByTagNameNS=Element.prototype.getElementsByTagNameNS;_extends(Element,Node);function Attr(){}Attr.prototype.nodeType=ATTRIBUTE_NODE;_extends(Attr,Node);function CharacterData(){}CharacterData.prototype={data:\"\",substringData:function(offset,count){return this.data.substring(offset,offset+count)},appendData:function(text){text=this.data+text;this.nodeValue=this.data=text;this.length=text.length},insertData:function(offset,text){this.replaceData(offset,0,text)},appendChild:function(newChild){throw new Error(ExceptionMessage[HIERARCHY_REQUEST_ERR])},deleteData:function(offset,count){this.replaceData(offset,count,\"\")},replaceData:function(offset,count,text){var start=this.data.substring(0,offset);var end=this.data.substring(offset+count);text=start+text+end;this.nodeValue=this.data=text;this.length=text.length}};_extends(CharacterData,Node);function Text(){}Text.prototype={nodeName:\"#text\",nodeType:TEXT_NODE,splitText:function(offset){var text=this.data;var newText=text.substring(offset);text=text.substring(0,offset);this.data=this.nodeValue=text;this.length=text.length;var newNode=this.ownerDocument.createTextNode(newText);if(this.parentNode){this.parentNode.insertBefore(newNode,this.nextSibling)}return newNode}};_extends(Text,CharacterData);function Comment(){}Comment.prototype={nodeName:\"#comment\",nodeType:COMMENT_NODE};_extends(Comment,CharacterData);function CDATASection(){}CDATASection.prototype={nodeName:\"#cdata-section\",nodeType:CDATA_SECTION_NODE};_extends(CDATASection,CharacterData);function DocumentType(){}DocumentType.prototype.nodeType=DOCUMENT_TYPE_NODE;_extends(DocumentType,Node);function Notation(){}Notation.prototype.nodeType=NOTATION_NODE;_extends(Notation,Node);function Entity(){}Entity.prototype.nodeType=ENTITY_NODE;_extends(Entity,Node);function EntityReference(){}EntityReference.prototype.nodeType=ENTITY_REFERENCE_NODE;_extends(EntityReference,Node);function DocumentFragment(){}DocumentFragment.prototype.nodeName=\"#document-fragment\";DocumentFragment.prototype.nodeType=DOCUMENT_FRAGMENT_NODE;_extends(DocumentFragment,Node);function ProcessingInstruction(){}ProcessingInstruction.prototype.nodeType=PROCESSING_INSTRUCTION_NODE;_extends(ProcessingInstruction,Node);function XMLSerializer(){}XMLSerializer.prototype.serializeToString=function(node,isHtml,nodeFilter){return nodeSerializeToString.call(node,isHtml,nodeFilter)};Node.prototype.toString=nodeSerializeToString;function nodeSerializeToString(isHtml,nodeFilter){var buf=[];var refNode=this.nodeType==9?this.documentElement:this;var prefix=refNode.prefix;var uri=refNode.namespaceURI;if(uri&&prefix==null){var prefix=refNode.lookupPrefix(uri);if(prefix==null){var visibleNamespaces=[{namespace:uri,prefix:null}]}}serializeToString(this,buf,isHtml,nodeFilter,visibleNamespaces);return buf.join(\"\")}function needNamespaceDefine(node,isHTML,visibleNamespaces){var prefix=node.prefix||\"\";var uri=node.namespaceURI;if(!prefix&&!uri){return false}if(prefix===\"xml\"&&uri===\"http://www.w3.org/XML/1998/namespace\"||uri==\"http://www.w3.org/2000/xmlns/\"){return false}var i=visibleNamespaces.length;while(i--){var ns=visibleNamespaces[i];if(ns.prefix==prefix){return ns.namespace!=uri}}return true}function serializeToString(node,buf,isHTML,nodeFilter,visibleNamespaces){if(nodeFilter){node=nodeFilter(node);if(node){if(typeof node==\"string\"){buf.push(node);return}}else{return}}switch(node.nodeType){case ELEMENT_NODE:if(!visibleNamespaces)visibleNamespaces=[];var startVisibleNamespaces=visibleNamespaces.length;var attrs=node.attributes;var len=attrs.length;var child=node.firstChild;var nodeName=node.tagName;isHTML=htmlns===node.namespaceURI||isHTML;buf.push(\"<\",nodeName);for(var i=0;i<len;i++){var attr=attrs.item(i);if(attr.prefix==\"xmlns\"){visibleNamespaces.push({prefix:attr.localName,namespace:attr.value})}else if(attr.nodeName==\"xmlns\"){visibleNamespaces.push({prefix:\"\",namespace:attr.value})}}for(var i=0;i<len;i++){var attr=attrs.item(i);if(needNamespaceDefine(attr,isHTML,visibleNamespaces)){var prefix=attr.prefix||\"\";var uri=attr.namespaceURI;var ns=prefix?\" xmlns:\"+prefix:\" xmlns\";buf.push(ns,'=\"',uri,'\"');visibleNamespaces.push({prefix:prefix,namespace:uri})}serializeToString(attr,buf,isHTML,nodeFilter,visibleNamespaces)}if(needNamespaceDefine(node,isHTML,visibleNamespaces)){var prefix=node.prefix||\"\";var uri=node.namespaceURI;var ns=prefix?\" xmlns:\"+prefix:\" xmlns\";buf.push(ns,'=\"',uri,'\"');visibleNamespaces.push({prefix:prefix,namespace:uri})}if(child||isHTML&&!/^(?:meta|link|img|br|hr|input)$/i.test(nodeName)){buf.push(\">\");if(isHTML&&/^script$/i.test(nodeName)){while(child){if(child.data){buf.push(child.data)}else{serializeToString(child,buf,isHTML,nodeFilter,visibleNamespaces)}child=child.nextSibling}}else{while(child){serializeToString(child,buf,isHTML,nodeFilter,visibleNamespaces);child=child.nextSibling}}buf.push(\"</\",nodeName,\">\")}else{buf.push(\"/>\")}return;case DOCUMENT_NODE:case DOCUMENT_FRAGMENT_NODE:var child=node.firstChild;while(child){serializeToString(child,buf,isHTML,nodeFilter,visibleNamespaces);child=child.nextSibling}return;case ATTRIBUTE_NODE:return buf.push(\" \",node.name,'=\"',node.value.replace(/[<&\"]/g,_xmlEncoder),'\"');case TEXT_NODE:return buf.push(node.data.replace(/[<&]/g,_xmlEncoder));case CDATA_SECTION_NODE:return buf.push(\"<![CDATA[\",node.data,\"]]>\");case COMMENT_NODE:return buf.push(\"<!--\",node.data,\"-->\");case DOCUMENT_TYPE_NODE:var pubid=node.publicId;var sysid=node.systemId;buf.push(\"<!DOCTYPE \",node.name);if(pubid){buf.push(' PUBLIC \"',pubid);if(sysid&&sysid!=\".\"){buf.push('\" \"',sysid)}buf.push('\">')}else if(sysid&&sysid!=\".\"){buf.push(' SYSTEM \"',sysid,'\">')}else{var sub=node.internalSubset;if(sub){buf.push(\" [\",sub,\"]\")}buf.push(\">\")}return;case PROCESSING_INSTRUCTION_NODE:return buf.push(\"<?\",node.target,\" \",node.data,\"?>\");case ENTITY_REFERENCE_NODE:return buf.push(\"&\",node.nodeName,\";\");default:buf.push(\"??\",node.nodeName)}}function importNode(doc,node,deep){var node2;switch(node.nodeType){case ELEMENT_NODE:node2=node.cloneNode(false);node2.ownerDocument=doc;case DOCUMENT_FRAGMENT_NODE:break;case ATTRIBUTE_NODE:deep=true;break}if(!node2){node2=node.cloneNode(false)}node2.ownerDocument=doc;node2.parentNode=null;if(deep){var child=node.firstChild;while(child){node2.appendChild(importNode(doc,child,deep));child=child.nextSibling}}return node2}function cloneNode(doc,node,deep){var node2=new node.constructor;for(var n in node){var v=node[n];if(typeof v!=\"object\"){if(v!=node2[n]){node2[n]=v}}}if(node.childNodes){node2.childNodes=new NodeList}node2.ownerDocument=doc;switch(node2.nodeType){case ELEMENT_NODE:var attrs=node.attributes;var attrs2=node2.attributes=new NamedNodeMap;var len=attrs.length;attrs2._ownerElement=node2;for(var i=0;i<len;i++){node2.setAttributeNode(cloneNode(doc,attrs.item(i),true))}break;case ATTRIBUTE_NODE:deep=true}if(deep){var child=node.firstChild;while(child){node2.appendChild(cloneNode(doc,child,deep));child=child.nextSibling}}return node2}function __set__(object,key,value){object[key]=value}try{if(Object.defineProperty){Object.defineProperty(LiveNodeList.prototype,\"length\",{get:function(){_updateLiveList(this);return this.$$length}});Object.defineProperty(Node.prototype,\"textContent\",{get:function(){return getTextContent(this)},set:function(data){switch(this.nodeType){case ELEMENT_NODE:case DOCUMENT_FRAGMENT_NODE:while(this.firstChild){this.removeChild(this.firstChild)}if(data||String(data)){this.appendChild(this.ownerDocument.createTextNode(data))}break;default:this.data=data;this.value=data;this.nodeValue=data}}});function getTextContent(node){switch(node.nodeType){case ELEMENT_NODE:case DOCUMENT_FRAGMENT_NODE:var buf=[];node=node.firstChild;while(node){if(node.nodeType!==7&&node.nodeType!==8){buf.push(getTextContent(node))}node=node.nextSibling}return buf.join(\"\");default:return node.nodeValue}}__set__=function(object,key,value){object[\"$$\"+key]=value}}}catch(e){}exports.DOMImplementation=DOMImplementation;exports.XMLSerializer=XMLSerializer},{}],25:[function(require,module,exports){var nameStartChar=/[A-Z_a-z\\xC0-\\xD6\\xD8-\\xF6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/;var nameChar=new RegExp(\"[\\\\-\\\\.0-9\"+nameStartChar.source.slice(1,-1)+\"\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040]\");var tagNamePattern=new RegExp(\"^\"+nameStartChar.source+nameChar.source+\"*(?::\"+nameStartChar.source+nameChar.source+\"*)?$\");var S_TAG=0;var S_ATTR=1;var S_ATTR_SPACE=2;var S_EQ=3;var S_ATTR_NOQUOT_VALUE=4;var S_ATTR_END=5;var S_TAG_SPACE=6;var S_TAG_CLOSE=7;function XMLReader(){}XMLReader.prototype={parse:function(source,defaultNSMap,entityMap){var domBuilder=this.domBuilder;domBuilder.startDocument();_copy(defaultNSMap,defaultNSMap={});parse(source,defaultNSMap,entityMap,domBuilder,this.errorHandler);domBuilder.endDocument()}};function parse(source,defaultNSMapCopy,entityMap,domBuilder,errorHandler){function fixedFromCharCode(code){if(code>65535){code-=65536;var surrogate1=55296+(code>>10),surrogate2=56320+(code&1023);return String.fromCharCode(surrogate1,surrogate2)}else{return String.fromCharCode(code)}}function entityReplacer(a){var k=a.slice(1,-1);if(k in entityMap){return entityMap[k]}else if(k.charAt(0)===\"#\"){return fixedFromCharCode(parseInt(k.substr(1).replace(\"x\",\"0x\")))}else{errorHandler.error(\"entity not found:\"+a);return a}}function appendText(end){if(end>start){var xt=source.substring(start,end).replace(/&#?\\w+;/g,entityReplacer);locator&&position(start);domBuilder.characters(xt,0,end-start);start=end}}function position(p,m){while(p>=lineEnd&&(m=linePattern.exec(source))){lineStart=m.index;lineEnd=lineStart+m[0].length;locator.lineNumber++}locator.columnNumber=p-lineStart+1}var lineStart=0;var lineEnd=0;var linePattern=/.*(?:\\r\\n?|\\n)|.*$/g;var locator=domBuilder.locator;var parseStack=[{currentNSMap:defaultNSMapCopy}];var closeMap={};var start=0;while(true){try{var tagStart=source.indexOf(\"<\",start);if(tagStart<0){if(!source.substr(start).match(/^\\s*$/)){var doc=domBuilder.doc;var text=doc.createTextNode(source.substr(start));doc.appendChild(text);domBuilder.currentElement=text}return}if(tagStart>start){appendText(tagStart)}switch(source.charAt(tagStart+1)){case\"/\":var end=source.indexOf(\">\",tagStart+3);var tagName=source.substring(tagStart+2,end);var config=parseStack.pop();if(end<0){tagName=source.substring(tagStart+2).replace(/[\\s<].*/,\"\");errorHandler.error(\"end tag name: \"+tagName+\" is not complete:\"+config.tagName);end=tagStart+1+tagName.length}else if(tagName.match(/\\s</)){tagName=tagName.replace(/[\\s<].*/,\"\");errorHandler.error(\"end tag name: \"+tagName+\" maybe not complete\");end=tagStart+1+tagName.length}var localNSMap=config.localNSMap;var endMatch=config.tagName==tagName;var endIgnoreCaseMach=endMatch||config.tagName&&config.tagName.toLowerCase()==tagName.toLowerCase();if(endIgnoreCaseMach){domBuilder.endElement(config.uri,config.localName,tagName);if(localNSMap){for(var prefix in localNSMap){domBuilder.endPrefixMapping(prefix)}}if(!endMatch){errorHandler.fatalError(\"end tag name: \"+tagName+\" is not match the current start tagName:\"+config.tagName)}}else{parseStack.push(config)}end++;break;case\"?\":locator&&position(tagStart);end=parseInstruction(source,tagStart,domBuilder);break;case\"!\":locator&&position(tagStart);end=parseDCC(source,tagStart,domBuilder,errorHandler);break;default:locator&&position(tagStart);var el=new ElementAttributes;var currentNSMap=parseStack[parseStack.length-1].currentNSMap;var end=parseElementStartPart(source,tagStart,el,currentNSMap,entityReplacer,errorHandler);var len=el.length;if(!el.closed&&fixSelfClosed(source,end,el.tagName,closeMap)){el.closed=true;if(!entityMap.nbsp){errorHandler.warning(\"unclosed xml attribute\")}}if(locator&&len){var locator2=copyLocator(locator,{});for(var i=0;i<len;i++){var a=el[i];position(a.offset);a.locator=copyLocator(locator,{})}domBuilder.locator=locator2;if(appendElement(el,domBuilder,currentNSMap)){parseStack.push(el)}domBuilder.locator=locator}else{if(appendElement(el,domBuilder,currentNSMap)){parseStack.push(el)}}if(el.uri===\"http://www.w3.org/1999/xhtml\"&&!el.closed){end=parseHtmlSpecialContent(source,end,el.tagName,entityReplacer,domBuilder)}else{end++}}}catch(e){errorHandler.error(\"element parse error: \"+e);end=-1}if(end>start){start=end}else{appendText(Math.max(tagStart,start)+1)}}}function copyLocator(f,t){t.lineNumber=f.lineNumber;t.columnNumber=f.columnNumber;return t}function parseElementStartPart(source,start,el,currentNSMap,entityReplacer,errorHandler){var attrName;var value;var p=++start;var s=S_TAG;while(true){var c=source.charAt(p);switch(c){case\"=\":if(s===S_ATTR){attrName=source.slice(start,p);s=S_EQ}else if(s===S_ATTR_SPACE){s=S_EQ}else{throw new Error(\"attribute equal must after attrName\")}break;case\"'\":case'\"':if(s===S_EQ||s===S_ATTR){if(s===S_ATTR){errorHandler.warning('attribute value must after \"=\"');attrName=source.slice(start,p)}start=p+1;p=source.indexOf(c,start);if(p>0){value=source.slice(start,p).replace(/&#?\\w+;/g,entityReplacer);el.add(attrName,value,start-1);s=S_ATTR_END}else{throw new Error(\"attribute value no end '\"+c+\"' match\")}}else if(s==S_ATTR_NOQUOT_VALUE){value=source.slice(start,p).replace(/&#?\\w+;/g,entityReplacer);el.add(attrName,value,start);errorHandler.warning('attribute \"'+attrName+'\" missed start quot('+c+\")!!\");start=p+1;s=S_ATTR_END}else{throw new Error('attribute value must after \"=\"')}break;case\"/\":switch(s){case S_TAG:el.setTagName(source.slice(start,p));case S_ATTR_END:case S_TAG_SPACE:case S_TAG_CLOSE:s=S_TAG_CLOSE;el.closed=true;case S_ATTR_NOQUOT_VALUE:case S_ATTR:case S_ATTR_SPACE:break;default:throw new Error(\"attribute invalid close char('/')\")}break;case\"\":errorHandler.error(\"unexpected end of input\");if(s==S_TAG){el.setTagName(source.slice(start,p))}return p;case\">\":switch(s){case S_TAG:el.setTagName(source.slice(start,p));case S_ATTR_END:case S_TAG_SPACE:case S_TAG_CLOSE:break;case S_ATTR_NOQUOT_VALUE:case S_ATTR:value=source.slice(start,p);if(value.slice(-1)===\"/\"){el.closed=true;value=value.slice(0,-1)}case S_ATTR_SPACE:if(s===S_ATTR_SPACE){value=attrName}if(s==S_ATTR_NOQUOT_VALUE){errorHandler.warning('attribute \"'+value+'\" missed quot(\")!!');el.add(attrName,value.replace(/&#?\\w+;/g,entityReplacer),start)}else{if(currentNSMap[\"\"]!==\"http://www.w3.org/1999/xhtml\"||!value.match(/^(?:disabled|checked|selected)$/i)){errorHandler.warning('attribute \"'+value+'\" missed value!! \"'+value+'\" instead!!')}el.add(value,value,start)}break;case S_EQ:throw new Error(\"attribute value missed!!\")}return p;case\"\":c=\" \";default:if(c<=\" \"){switch(s){case S_TAG:el.setTagName(source.slice(start,p));s=S_TAG_SPACE;break;case S_ATTR:attrName=source.slice(start,p);s=S_ATTR_SPACE;break;case S_ATTR_NOQUOT_VALUE:var value=source.slice(start,p).replace(/&#?\\w+;/g,entityReplacer);errorHandler.warning('attribute \"'+value+'\" missed quot(\")!!');el.add(attrName,value,start);case S_ATTR_END:s=S_TAG_SPACE;break}}else{switch(s){case S_ATTR_SPACE:var tagName=el.tagName;if(currentNSMap[\"\"]!==\"http://www.w3.org/1999/xhtml\"||!attrName.match(/^(?:disabled|checked|selected)$/i)){errorHandler.warning('attribute \"'+attrName+'\" missed value!! \"'+attrName+'\" instead2!!')}el.add(attrName,attrName,start);start=p;s=S_ATTR;break;case S_ATTR_END:errorHandler.warning('attribute space is required\"'+attrName+'\"!!');case S_TAG_SPACE:s=S_ATTR;start=p;break;case S_EQ:s=S_ATTR_NOQUOT_VALUE;start=p;break;case S_TAG_CLOSE:throw new Error(\"elements closed character '/' and '>' must be connected to\")}}}p++}}function appendElement(el,domBuilder,currentNSMap){var tagName=el.tagName;var localNSMap=null;var i=el.length;while(i--){var a=el[i];var qName=a.qName;var value=a.value;var nsp=qName.indexOf(\":\");if(nsp>0){var prefix=a.prefix=qName.slice(0,nsp);var localName=qName.slice(nsp+1);var nsPrefix=prefix===\"xmlns\"&&localName}else{localName=qName;prefix=null;nsPrefix=qName===\"xmlns\"&&\"\"}a.localName=localName;if(nsPrefix!==false){if(localNSMap==null){localNSMap={};_copy(currentNSMap,currentNSMap={})}currentNSMap[nsPrefix]=localNSMap[nsPrefix]=value;a.uri=\"http://www.w3.org/2000/xmlns/\";domBuilder.startPrefixMapping(nsPrefix,value)}}var i=el.length;while(i--){a=el[i];var prefix=a.prefix;if(prefix){if(prefix===\"xml\"){a.uri=\"http://www.w3.org/XML/1998/namespace\"}if(prefix!==\"xmlns\"){a.uri=currentNSMap[prefix||\"\"]}}}var nsp=tagName.indexOf(\":\");if(nsp>0){prefix=el.prefix=tagName.slice(0,nsp);localName=el.localName=tagName.slice(nsp+1)}else{prefix=null;localName=el.localName=tagName}var ns=el.uri=currentNSMap[prefix||\"\"];domBuilder.startElement(ns,localName,tagName,el);if(el.closed){domBuilder.endElement(ns,localName,tagName);if(localNSMap){for(prefix in localNSMap){domBuilder.endPrefixMapping(prefix)}}}else{el.currentNSMap=currentNSMap;el.localNSMap=localNSMap;return true}}function parseHtmlSpecialContent(source,elStartEnd,tagName,entityReplacer,domBuilder){if(/^(?:script|textarea)$/i.test(tagName)){var elEndStart=source.indexOf(\"</\"+tagName+\">\",elStartEnd);var text=source.substring(elStartEnd+1,elEndStart);if(/[&<]/.test(text)){if(/^script$/i.test(tagName)){domBuilder.characters(text,0,text.length);return elEndStart}text=text.replace(/&#?\\w+;/g,entityReplacer);domBuilder.characters(text,0,text.length);return elEndStart}}return elStartEnd+1}function fixSelfClosed(source,elStartEnd,tagName,closeMap){var pos=closeMap[tagName];if(pos==null){pos=source.lastIndexOf(\"</\"+tagName+\">\");if(pos<elStartEnd){pos=source.lastIndexOf(\"</\"+tagName)}closeMap[tagName]=pos}return pos<elStartEnd}function _copy(source,target){for(var n in source){target[n]=source[n]}}function parseDCC(source,start,domBuilder,errorHandler){var next=source.charAt(start+2);switch(next){case\"-\":if(source.charAt(start+3)===\"-\"){var end=source.indexOf(\"-->\",start+4);if(end>start){domBuilder.comment(source,start+4,end-start-4);return end+3}else{errorHandler.error(\"Unclosed comment\");return-1}}else{return-1}default:if(source.substr(start+3,6)==\"CDATA[\"){var end=source.indexOf(\"]]>\",start+9);domBuilder.startCDATA();domBuilder.characters(source,start+9,end-start-9);domBuilder.endCDATA();return end+3}var matchs=split(source,start);var len=matchs.length;if(len>1&&/!doctype/i.test(matchs[0][0])){var name=matchs[1][0];var pubid=len>3&&/^public$/i.test(matchs[2][0])&&matchs[3][0];var sysid=len>4&&matchs[4][0];var lastMatch=matchs[len-1];domBuilder.startDTD(name,pubid&&pubid.replace(/^(['\"])(.*?)\\1$/,\"$2\"),sysid&&sysid.replace(/^(['\"])(.*?)\\1$/,\"$2\"));domBuilder.endDTD();return lastMatch.index+lastMatch[0].length}}return-1}function parseInstruction(source,start,domBuilder){var end=source.indexOf(\"?>\",start);if(end){var match=source.substring(start,end).match(/^<\\?(\\S*)\\s*([\\s\\S]*?)\\s*$/);if(match){var len=match[0].length;domBuilder.processingInstruction(match[1],match[2]);return end+2}else{return-1}}return-1}function ElementAttributes(source){}ElementAttributes.prototype={setTagName:function(tagName){if(!tagNamePattern.test(tagName)){throw new Error(\"invalid tagName:\"+tagName)}this.tagName=tagName},add:function(qName,value,offset){if(!tagNamePattern.test(qName)){throw new Error(\"invalid attribute:\"+qName)}this[this.length++]={qName:qName,value:value,offset:offset}},length:0,getLocalName:function(i){return this[i].localName},getLocator:function(i){return this[i].locator},getQName:function(i){return this[i].qName},getURI:function(i){return this[i].uri},getValue:function(i){return this[i].value}};function _set_proto_(thiz,parent){thiz.__proto__=parent;return thiz}if(!(_set_proto_({},_set_proto_.prototype)instanceof _set_proto_)){_set_proto_=function(thiz,parent){function p(){}p.prototype=parent;p=new p;for(parent in thiz){p[parent]=thiz[parent]}return p}}function split(source,start){var match;var buf=[];var reg=/'[^']+'|\"[^\"]+\"|[^\\s<>\\/=]+=?|(\\/?\\s*>|<)/g;reg.lastIndex=start;reg.exec(source);while(match=reg.exec(source)){buf.push(match);if(match[1])return buf}}exports.XMLReader=XMLReader},{}],\"/src/js/index.js\":[function(require,module,exports){\"use strict\";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\")}}var templates=require(\"./templates\");var DocUtils=require(\"docxtemplater\").DocUtils;var DOMParser=require(\"xmldom\").DOMParser;function isNaN(number){return!(number===number)}var ImgManager=require(\"./imgManager\");var moduleName=\"open-xml-templating/docxtemplater-image-module\";function getInnerDocx(_ref){var part=_ref.part;return part}function getInnerPptx(_ref2){var part=_ref2.part,left=_ref2.left,right=_ref2.right,postparsed=_ref2.postparsed;var xmlString=postparsed.slice(left+1,right).reduce(function(concat,item){return concat+item.value},\"\");var xmlDoc=(new DOMParser).parseFromString(\"<xml>\"+xmlString+\"</xml>\");var offset=xmlDoc.getElementsByTagName(\"a:off\");var ext=xmlDoc.getElementsByTagName(\"a:ext\");part.ext={cx:parseInt(ext[0].getAttribute(\"cx\"),10),cy:parseInt(ext[0].getAttribute(\"cy\"),10)};part.offset={x:parseInt(offset[0].getAttribute(\"x\"),10),y:parseInt(offset[0].getAttribute(\"y\"),10)};return part}var ImageModule=function(){function ImageModule(options){_classCallCheck(this,ImageModule);this.name=\"ImageModule\";this.options=options||{};this.imgManagers={};if(this.options.centered==null){this.options.centered=false}if(this.options.getImage==null){throw new Error(\"You should pass getImage\")}if(this.options.getSize==null){throw new Error(\"You should pass getSize\")}this.imageNumber=1}_createClass(ImageModule,[{key:\"optionsTransformer\",value:function optionsTransformer(options,docxtemplater){\r\nvar relsFiles=docxtemplater.zip.file(/\\.xml\\.rels/).concat(docxtemplater.zip.file(/\\[Content_Types\\].xml/)).map(function(file){return file.name});this.fileTypeConfig=docxtemplater.fileTypeConfig;this.fileType=docxtemplater.fileType;this.zip=docxtemplater.zip;options.xmlFileNames=options.xmlFileNames.concat(relsFiles);return options}},{key:\"set\",value:function set(options){if(options.zip){this.zip=options.zip}if(options.xmlDocuments){this.xmlDocuments=options.xmlDocuments}}},{key:\"parse\",value:function parse(placeHolderContent){var module=moduleName;var type=\"placeholder\";if(placeHolderContent.substring(0,2)===\"%%\"){return{type:type,value:placeHolderContent.substr(2),module:module,centered:true}}if(placeHolderContent.substring(0,1)===\"%\"){return{type:type,value:placeHolderContent.substr(1),module:module,centered:false}}return null}},{key:\"postparse\",value:function postparse(parsed){var expandTo=void 0;var getInner=void 0;if(this.fileType===\"pptx\"){expandTo=\"p:sp\";getInner=getInnerPptx}else{expandTo=this.options.centered?\"w:p\":\"w:t\";getInner=getInnerDocx}return DocUtils.traits.expandToOne(parsed,{moduleName:moduleName,getInner:getInner,expandTo:expandTo})}},{key:\"render\",value:function render(part,options){this.imgManagers[options.filePath]=this.imgManagers[options.filePath]||new ImgManager(this.zip,options.filePath,this.xmlDocuments,this.fileType);var imgManager=this.imgManagers[options.filePath];if(!part.type===\"placeholder\"||part.module!==moduleName){return null}try{var tagValue=options.scopeManager.getValue(part.value);if(!tagValue){throw new Error(\"tagValue is empty\")}var imgBuffer=this.options.getImage(tagValue,part.value);var rId=imgManager.addImageRels(this.getNextImageName(),imgBuffer);var sizePixel=this.options.getSize(imgBuffer,tagValue,part.value);return this.getRenderedPart(part,rId,sizePixel)}catch(e){return{value:this.fileTypeConfig.tagTextXml}}}},{key:\"getRenderedPart\",value:function getRenderedPart(part,rId,sizePixel){if(isNaN(rId)){throw new Error(\"rId is NaN, aborting\")}var size=[DocUtils.convertPixelsToEmus(sizePixel[0]),DocUtils.convertPixelsToEmus(sizePixel[1])];var centered=this.options.centered||part.centered;var newText=void 0;if(this.fileType===\"pptx\"){newText=this.getRenderedPartPptx(part,rId,size,centered)}else{newText=this.getRenderedPartDocx(rId,size,centered)}return{value:newText}}},{key:\"getRenderedPartPptx\",value:function getRenderedPartPptx(part,rId,size,centered){var offset={x:part.offset.x,y:part.offset.y};var cellCX=part.ext.cx;var cellCY=part.ext.cy;var imgW=size[0];var imgH=size[1];if(centered){offset.x+=cellCX/2-imgW/2;offset.y+=cellCY/2-imgH/2}return templates.getPptxImageXml(rId,[imgW,imgH],offset)}},{key:\"getRenderedPartDocx\",value:function getRenderedPartDocx(rId,size,centered){return centered?templates.getImageXmlCentered(rId,size):templates.getImageXml(rId,size)}},{key:\"getNextImageName\",value:function getNextImageName(){var name=\"image_generated_\"+this.imageNumber+\".png\";this.imageNumber++;return name}}]);return ImageModule}();module.exports=ImageModule},{\"./imgManager\":2,\"./templates\":3,docxtemplater:5,xmldom:23}]},{},[])(\"/src/js/index.js\")});","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.Docxtemplater=f()}})(function(){var define,module,exports;return function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}({1:[function(require,module,exports){\"use strict\";function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true})}else{obj[key]=value}return obj}var memoize=require(\"./memoize\");var DOMParser=require(\"xmldom\").DOMParser;var XMLSerializer=require(\"xmldom\").XMLSerializer;var Errors=require(\"./errors\");var DocUtils={};function parser(tag){return _defineProperty({},\"get\",function get(scope){if(tag===\".\"){return scope}return scope[tag]})}DocUtils.defaults={nullGetter:function nullGetter(part){if(!part.module){return\"undefined\"}if(part.module===\"rawxml\"){return\"\"}return\"\"},parser:memoize(parser),delimiters:{start:\"{\",end:\"}\"}};DocUtils.mergeObjects=function(){var resObj={};var obj=void 0,keys=void 0;for(var i=0;i<arguments.length;i+=1){obj=arguments[i];keys=Object.keys(obj);for(var j=0;j<keys.length;j+=1){resObj[keys[j]]=obj[keys[j]]}}return resObj};DocUtils.xml2str=function(xmlNode){var a=new XMLSerializer;return a.serializeToString(xmlNode)};DocUtils.decodeUtf8=function(s){try{if(s===undefined){return undefined}return decodeURIComponent(escape(DocUtils.convertSpaces(s)))}catch(e){var err=new Error(\"End\");err.properties.data=s;err.properties.explanation=\"Could not decode string to UTF8\";throw err}};DocUtils.encodeUtf8=function(s){return unescape(encodeURIComponent(s))};DocUtils.str2xml=function(str,errorHandler){var parser=new DOMParser({errorHandler:errorHandler});return parser.parseFromString(str,\"text/xml\")};DocUtils.charMap={\"&\":\"&amp;\",\"'\":\"&apos;\",\"<\":\"&lt;\",\">\":\"&gt;\"};var regexStripRegexp=/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g;DocUtils.escapeRegExp=function(str){return str.replace(regexStripRegexp,\"\\\\$&\")};DocUtils.charMapRegexes=Object.keys(DocUtils.charMap).map(function(endChar){var startChar=DocUtils.charMap[endChar];return{rstart:new RegExp(DocUtils.escapeRegExp(startChar),\"g\"),rend:new RegExp(DocUtils.escapeRegExp(endChar),\"g\"),start:startChar,end:endChar}});DocUtils.wordToUtf8=function(string){var r=void 0;for(var i=0,l=DocUtils.charMapRegexes.length;i<l;i++){r=DocUtils.charMapRegexes[i];string=string.replace(r.rstart,r.end)}return string};DocUtils.utf8ToWord=function(string){if(typeof string!==\"string\"){string=string.toString()}var r=void 0;for(var i=0,l=DocUtils.charMapRegexes.length;i<l;i++){r=DocUtils.charMapRegexes[i];string=string.replace(r.rend,r.start)}return string};DocUtils.cloneDeep=function(obj){return JSON.parse(JSON.stringify(obj))};DocUtils.concatArrays=function(arrays){return arrays.reduce(function(result,array){Array.prototype.push.apply(result,array);return result},[])};var spaceRegexp=new RegExp(String.fromCharCode(160),\"g\");DocUtils.convertSpaces=function(s){return s.replace(spaceRegexp,\" \")};DocUtils.pregMatchAll=function(regex,content){var matchArray=[];var match=void 0;while((match=regex.exec(content))!=null){matchArray.push({array:match,offset:match.index})}return matchArray};DocUtils.sizeOfObject=function(obj){return Object.keys(obj).length};function throwXmlTagNotFound(options){var err=new Errors.XTTemplateError(\"No tag '\"+options.element+\"' was found at the \"+options.position);err.properties={id:\"no_xml_tag_found_at_\"+options.position,explanation:\"No tag '\"+options.element+\"' was found at the \"+options.position,parsed:options.parsed,index:options.index,element:options.element};throw err}DocUtils.getRight=function(parsed,element,index){for(var i=index,l=parsed.length;i<l;i++){var part=parsed[i];if(part.value===\"</\"+element+\">\"){return i}}throwXmlTagNotFound({position:\"right\",element:element,parsed:parsed,index:index})};DocUtils.getLeft=function(parsed,element,index){for(var i=index;i>=0;i--){var part=parsed[i];if(part.value.indexOf(\"<\"+element)===0&&[\">\",\" \"].indexOf(part.value[element.length+1])!==-1){return i}}throwXmlTagNotFound({position:\"left\",element:element,parsed:parsed,index:index})};module.exports=DocUtils},{\"./errors\":2,\"./memoize\":5,xmldom:19}],2:[function(require,module,exports){\"use strict\";function XTError(message){this.name=\"GenericError\";this.message=message;this.stack=new Error(message).stack}XTError.prototype=Error.prototype;function XTTemplateError(message){this.name=\"TemplateError\";this.message=message;this.stack=new Error(message).stack}XTTemplateError.prototype=new XTError;function XTScopeParserError(message){this.name=\"ScopeParserError\";this.message=message;this.stack=new Error(message).stack}XTScopeParserError.prototype=new XTError;function XTInternalError(message){this.name=\"InternalError\";this.properties={explanation:\"InternalError\"};this.message=message;this.stack=new Error(message).stack}XTInternalError.prototype=new XTError;module.exports={XTError:XTError,XTTemplateError:XTTemplateError,XTInternalError:XTInternalError,XTScopeParserError:XTScopeParserError}},{}],3:[function(require,module,exports){\"use strict\";var loopModule=require(\"./modules/loop\");var spacePreserveModule=require(\"./modules/space-preserve\");var rawXmlModule=require(\"./modules/rawxml\");var expandPairTrait=require(\"./modules/expand-pair-trait\");var render=require(\"./modules/render\");var PptXFileTypeConfig={getTemplatedFiles:function getTemplatedFiles(zip){var slideTemplates=zip.file(/ppt\\/(slides|slideMasters)\\/(slide|slideMaster)\\d+\\.xml/).map(function(file){return file.name});return slideTemplates.concat([\"ppt/presentation.xml\"])},textPath:\"ppt/slides/slide1.xml\",tagsXmlTextArray:[\"a:t\",\"m:t\"],tagsXmlLexedArray:[\"p:sp\",\"a:tc\",\"a:tr\",\"a:table\",\"a:p\",\"a:r\"],tagRawXml:\"p:sp\",tagTextXml:\"a:t\",baseModules:[render,expandPairTrait,rawXmlModule,loopModule]};var DocXFileTypeConfig={getTemplatedFiles:function getTemplatedFiles(zip){var slideTemplates=zip.file(/word\\/(header|footer)\\d+\\.xml/).map(function(file){return file.name});return slideTemplates.concat([\"word/document.xml\"])},textPath:\"word/document.xml\",tagsXmlTextArray:[\"w:t\",\"m:t\"],tagsXmlLexedArray:[\"w:tc\",\"w:tr\",\"w:table\",\"w:p\",\"w:r\"],tagRawXml:\"w:p\",tagTextXml:\"w:t\",baseModules:[render,spacePreserveModule,expandPairTrait,rawXmlModule,loopModule]};module.exports={docx:DocXFileTypeConfig,pptx:PptXFileTypeConfig}},{\"./modules/expand-pair-trait\":8,\"./modules/loop\":9,\"./modules/rawxml\":10,\"./modules/render\":11,\"./modules/space-preserve\":12}],4:[function(require,module,exports){\"use strict\";var Errors=require(\"./errors\");var DocUtils=require(\"./doc-utils\");function inRange(range,match){return range[0]<=match.offset&&match.offset<range[1]}function updateInTextTag(part,inTextTag){if(part.type===\"tag\"&&part.position===\"start\"&&part.text){if(inTextTag){throw new Error(\"Malformed xml : Already in text tag\")}return true}if(part.type===\"tag\"&&part.position===\"end\"&&part.text){if(!inTextTag){throw new Error(\"Malformed xml : Already not in text tag\")}return false}return inTextTag}function offsetSort(a,b){return a.offset-b.offset}function getTag(tag){var start=1;if(tag[1]===\"/\"){start=2}var index=tag.indexOf(\" \");var end=index===-1?tag.length-1:index;return{tag:tag.slice(start,end),position:start===1?\"start\":\"end\"}}function tagMatcher(content,textMatchArray,othersMatchArray){var cursor=0;var contentLength=content.length;var allMatches=DocUtils.concatArrays([textMatchArray.map(function(tag){return{tag:tag,text:true}}),othersMatchArray.map(function(tag){return{tag:tag,text:false}})]).reduce(function(allMatches,t){allMatches[t.tag]=t.text;return allMatches},{});var totalMatches=[];while(cursor<contentLength){cursor=content.indexOf(\"<\",cursor);if(cursor===-1){break}var offset=cursor;cursor=content.indexOf(\">\",cursor);var tagText=content.slice(offset,cursor+1);var _getTag=getTag(tagText),tag=_getTag.tag,position=_getTag.position;var text=allMatches[tag];if(text==null){continue}totalMatches.push({type:\"tag\",position:position,text:text,offset:offset,value:tagText})}return totalMatches}function throwUnopenedTagException(options){var err=new Errors.XTTemplateError(\"Unopened tag\");err.properties={xtag:options.xtag.split(\" \")[0],id:\"unopened_tag\",context:options.xtag,explanation:\"The tag beginning with '\"+options.xtag.substr(0,10)+\"' is unclosed\"};throw err}function throwUnclosedTagException(options){var err=new Errors.XTTemplateError(\"Unclosed tag\");err.properties={xtag:options.xtag.split(\" \")[0].substr(1),id:\"unclosed_tag\",context:options.xtag,explanation:\"The tag beginning with '\"+options.xtag.substr(0,10)+\"' is unclosed\"};throw err}function assertDelimiterOrdered(delimiterMatches,fullText){var inDelimiter=false;var lastDelimiterMatch={offset:0};var xtag=void 0;delimiterMatches.forEach(function(delimiterMatch){xtag=fullText.substr(lastDelimiterMatch.offset,delimiterMatch.offset-lastDelimiterMatch.offset);if(delimiterMatch.position===\"start\"&&inDelimiter||delimiterMatch.position===\"end\"&&!inDelimiter){if(delimiterMatch.position===\"start\"){throwUnclosedTagException({xtag:xtag})}else{throwUnopenedTagException({xtag:xtag})}}inDelimiter=!inDelimiter;lastDelimiterMatch=delimiterMatch});var delimiterMatch={offset:fullText.length};xtag=fullText.substr(lastDelimiterMatch.offset,delimiterMatch.offset-lastDelimiterMatch.offset);if(inDelimiter){throwUnclosedTagException({xtag:xtag})}}function getAllIndexes(arr,val,position){var indexes=[];var offset=-1;do{offset=arr.indexOf(val,offset+1);if(offset!==-1){indexes.push({offset:offset,position:position})}}while(offset!==-1);return indexes}function Reader(innerContentParts){var _this=this;this.innerContentParts=innerContentParts;this.full=\"\";this.parseDelimiters=function(delimiters){_this.full=_this.innerContentParts.join(\"\");var offset=0;_this.ranges=_this.innerContentParts.map(function(part){offset+=part.length;return offset-part.length});var delimiterMatches=DocUtils.concatArrays([getAllIndexes(_this.full,delimiters.start,\"start\"),getAllIndexes(_this.full,delimiters.end,\"end\")]).sort(offsetSort);assertDelimiterOrdered(delimiterMatches,_this.full);var delimiterLength={start:delimiters.start.length,end:delimiters.end.length};var cutNext=0;var delimiterIndex=0;_this.parsed=_this.ranges.map(function(offset,i){var range=[offset,offset+this.innerContentParts[i].length];var partContent=this.innerContentParts[i];var delimitersInOffset=[];while(delimiterIndex<delimiterMatches.length&&inRange(range,delimiterMatches[delimiterIndex])){delimitersInOffset.push(delimiterMatches[delimiterIndex]);delimiterIndex++}var parts=[];var cursor=0;if(cutNext>0){cursor=cutNext;cutNext=0}delimitersInOffset.forEach(function(delimiterInOffset){var value=partContent.substr(cursor,delimiterInOffset.offset-offset-cursor);if(value.length>0){parts.push({type:\"content\",value:value})}parts.push({type:\"delimiter\",position:delimiterInOffset.position});cursor=delimiterInOffset.offset-offset+delimiterLength[delimiterInOffset.position]});cutNext=cursor-partContent.length;var value=partContent.substr(cursor);if(value.length>0){parts.push({type:\"content\",value:value})}return parts},_this)}}module.exports={parse:function parse(xmlparsed,delimiters){var inTextTag=false;var innerContentParts=[];xmlparsed.forEach(function(part){inTextTag=updateInTextTag(part,inTextTag);if(inTextTag&&part.type===\"content\"){innerContentParts.push(part.value)}});var reader=new Reader(innerContentParts);reader.parseDelimiters(delimiters);var newArray=[];var index=0;xmlparsed.forEach(function(part){inTextTag=updateInTextTag(part,inTextTag);if(part.type===\"content\"){part.position=inTextTag?\"insidetag\":\"outsidetag\"}if(inTextTag&&part.type===\"content\"){Array.prototype.push.apply(newArray,reader.parsed[index].map(function(p){if(p.type===\"content\"){p.position=\"insidetag\"}return p}));index++}else{newArray.push(part)}});return newArray},xmlparse:function xmlparse(content,xmltags){var matches=tagMatcher(content,xmltags.text,xmltags.other);var cursor=0;var parsed=matches.reduce(function(parsed,match){var value=content.substr(cursor,match.offset-cursor);if(value.length>0){parsed.push({type:\"content\",value:value})}cursor=match.offset+match.value.length;delete match.offset;if(match.value.length>0){parsed.push(match)}return parsed},[]);var value=content.substr(cursor);if(value.length>0){parsed.push({type:\"content\",value:value})}return parsed}}},{\"./doc-utils\":1,\"./errors\":2}],5:[function(require,module,exports){\"use strict\";function memoize(func){var stringifyJson=JSON.stringify,cache={};function cachedfun(){var hash=stringifyJson(arguments);return hash in cache?cache[hash]:cache[hash]=func.apply(this,arguments)}return cachedfun}module.exports=memoize},{}],6:[function(require,module,exports){\"use strict\";function getMinFromArrays(arrays,state){var minIndex=-1;for(var i=0,l=arrays.length;i<l;i++){if(state[i]>=arrays[i].length){continue}if(minIndex===-1||arrays[i][state[i]].offset<arrays[minIndex][state[minIndex]].offset){minIndex=i}}if(minIndex===-1){throw new Error(\"minIndex negative\")}return minIndex}module.exports=function(arrays){var totalLength=arrays.reduce(function(sum,array){return sum+array.length},0);arrays=arrays.filter(function(array){return array.length>0});var resultArray=new Array(totalLength);var state=arrays.map(function(){return 0});var i=0;while(i<=totalLength-1){var arrayIndex=getMinFromArrays(arrays,state);resultArray[i]=arrays[arrayIndex][state[arrayIndex]];state[arrayIndex]++;i++}return resultArray}},{}],7:[function(require,module,exports){\"use strict\";function emptyFun(){}function identity(i){return i}module.exports=function(module){var defaults={set:emptyFun,parse:emptyFun,render:emptyFun,getTraits:emptyFun,optionsTransformer:identity,getRenderedMap:identity,postparse:identity};if(Object.keys(defaults).every(function(key){return!module[key]})){throw new Error(\"This module cannot be wrapped, because it doesn't define any of the necessary functions\")}Object.keys(defaults).forEach(function(key){module[key]=module[key]||defaults[key]});return module}},{}],8:[function(require,module,exports){\"use strict\";var traitName=\"expandPair\";var mergeSort=require(\"../mergesort\");var DocUtils=require(\"../doc-utils\");var wrapper=require(\"../module-wrapper\");var _require=require(\"../traits\"),getExpandToDefault=_require.getExpandToDefault;var Errors=require(\"../errors\");function throwUnmatchedLoopException(options){var location=options.location;var t=location===\"start\"?\"unclosed\":\"unopened\";var T=location===\"start\"?\"Unclosed\":\"Unopened\";var err=new Errors.XTTemplateError(T+\" loop\");var tag=options.part.value;err.properties={id:t+\"_loop\",explanation:\"The loop with tag \"+tag+\" is \"+t,xtag:tag};throw err}function throwClosingTagNotMatchOpeningTag(options){var tags=options.tags;var err=new Errors.XTTemplateError(\"Closing tag does not match opening tag\");err.properties={id:\"closing_tag_does_not_match_opening_tag\",explanation:'The tag \"'+tags[0].value+'\" is closed by the tag \"'+tags[1].value+'\"',openingtag:tags[0].value,closingtag:tags[1].value};throw err}function getOpenCountChange(part){switch(part.location){case\"start\":return 1;case\"end\":return-1;default:throw new Error(\"Location should be one of 'start' or 'end' (given : \"+part.location+\")\")}}function getPairs(traits){if(traits.length===0){return[]}var countOpen=1;var firstTrait=traits[0];for(var i=1;i<traits.length;i++){var currentTrait=traits[i];countOpen+=getOpenCountChange(currentTrait.part);if(countOpen===0){if(currentTrait.part.value!==firstTrait.part.value&&currentTrait.part.value!==\"\"){throwClosingTagNotMatchOpeningTag({tags:[firstTrait.part,currentTrait.part]})}var outer=getPairs(traits.slice(i+1));return[[firstTrait,currentTrait]].concat(outer)}}var part=firstTrait.part;throwUnmatchedLoopException({part:part,location:part.location})}var expandPairTrait={name:\"ExpandPairTrait\",postparse:function postparse(parsed,_ref){var getTraits=_ref.getTraits,_postparse=_ref.postparse;var traits=getTraits(traitName,parsed);traits=traits.map(function(trait){return trait||[]});traits=mergeSort(traits);var pairs=getPairs(traits);var expandedPairs=pairs.map(function(pair){var expandTo=pair[0].part.expandTo;if(expandTo===\"auto\"){expandTo=getExpandToDefault(parsed.slice(pair[0].offset,pair[1].offset))}if(!expandTo){return[pair[0].offset,pair[1].offset]}var left=DocUtils.getLeft(parsed,expandTo,pair[0].offset);var right=DocUtils.getRight(parsed,expandTo,pair[1].offset);return[left,right]});var currentPairIndex=0;var innerParts=void 0;return parsed.reduce(function(newParsed,part,i){var inPair=currentPairIndex<pairs.length&&expandedPairs[currentPairIndex][0]<=i;var pair=pairs[currentPairIndex];var expandedPair=expandedPairs[currentPairIndex];if(!inPair){newParsed.push(part);return newParsed}if(expandedPair[0]===i){innerParts=[]}if(pair[0].offset!==i&&pair[1].offset!==i){innerParts.push(part)}if(expandedPair[1]===i){var basePart=parsed[pair[0].offset];delete basePart.location;delete basePart.expandTo;basePart.subparsed=_postparse(innerParts);newParsed.push(basePart);currentPairIndex++}return newParsed},[])}};module.exports=function(){return wrapper(expandPairTrait)}},{\"../doc-utils\":1,\"../errors\":2,\"../mergesort\":6,\"../module-wrapper\":7,\"../traits\":16}],9:[function(require,module,exports){\"use strict\";var DocUtils=require(\"../doc-utils\");var dashInnerRegex=/^-([^\\s]+)\\s(.+)$/;var wrapper=require(\"../module-wrapper\");var moduleName=\"loop\";var loopModule={name:\"LoopModule\",parse:function parse(placeHolderContent){var module=moduleName;var type=\"placeholder\";if(placeHolderContent[0]===\"#\"){return{type:type,value:placeHolderContent.substr(1),expandTo:\"auto\",module:module,location:\"start\",inverted:false}}if(placeHolderContent[0]===\"^\"){return{type:type,value:placeHolderContent.substr(1),expandTo:\"auto\",module:module,location:\"start\",inverted:true}}if(placeHolderContent[0]===\"/\"){return{type:type,value:placeHolderContent.substr(1),module:module,location:\"end\"}}if(placeHolderContent[0]===\"-\"){var value=placeHolderContent.replace(dashInnerRegex,\"$2\");var expandTo=placeHolderContent.replace(dashInnerRegex,\"$1\");return{type:type,value:value,expandTo:expandTo,module:module,location:\"start\",inverted:false}}return null},getTraits:function getTraits(traitName,parsed){if(traitName!==\"expandPair\"){return}return parsed.reduce(function(tags,part,offset){if(part.type===\"placeholder\"&&part.module===moduleName){tags.push({part:part,offset:offset})}return tags},[])},render:function render(part,options){if(!part.type===\"placeholder\"||part.module!==moduleName){return null}var totalValue=[];function loopOver(scope){var scopeManager=options.scopeManager.createSubScopeManager(scope,part.value);totalValue.push(options.render(DocUtils.mergeObjects({},options,{compiled:part.subparsed,tags:{},scopeManager:scopeManager})))}options.scopeManager.loopOver(part.value,loopOver,part.inverted);return{value:totalValue.join(\"\")}}};module.exports=function(){return wrapper(loopModule)}},{\"../doc-utils\":1,\"../module-wrapper\":7}],10:[function(require,module,exports){\"use strict\";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\")}}var DocUtils=require(\"../doc-utils\");var Errors=require(\"../errors\");var moduleName=\"rawxml\";var wrapper=require(\"../module-wrapper\");function throwRawTagShouldBeOnlyTextInParagraph(options){var err=new Errors.XTTemplateError(\"Raw tag should be the only text in paragraph\");var tag=options.part.value;err.properties={id:\"raw_xml_tag_should_be_only_text_in_paragraph\",explanation:\"The tag \"+tag,xtag:options.part.value,paragraphParts:options.paragraphParts};throw err}function getInner(_ref){var part=_ref.part,left=_ref.left,right=_ref.right,postparsed=_ref.postparsed,index=_ref.index;var paragraphParts=postparsed.slice(left+1,right);paragraphParts.forEach(function(p,i){if(i===index-left-1){return}if(p.type===\"placeholder\"||p.type===\"content\"&&p.position===\"insidetag\"){throwRawTagShouldBeOnlyTextInParagraph({paragraphParts:paragraphParts,part:part})}});return part}var RawXmlModule=function(){function RawXmlModule(){_classCallCheck(this,RawXmlModule);this.name=\"RawXmlModule\"}_createClass(RawXmlModule,[{key:\"optionsTransformer\",value:function optionsTransformer(options,docxtemplater){this.fileTypeConfig=docxtemplater.fileTypeConfig;return options}},{key:\"parse\",value:function parse(placeHolderContent){var type=\"placeholder\";if(placeHolderContent[0]!==\"@\"){return null}return{type:type,value:placeHolderContent.substr(1),module:moduleName}}},{key:\"postparse\",value:function postparse(parsed){return DocUtils.traits.expandToOne(parsed,{moduleName:moduleName,getInner:getInner,expandTo:this.fileTypeConfig.tagRawXml})}},{key:\"render\",value:function render(part,options){if(part.module!==moduleName){return null}var value=options.scopeManager.getValue(part.value);if(value==null){value=options.nullGetter(part)}return{value:value}}}]);return RawXmlModule}();module.exports=function(){return wrapper(new RawXmlModule)}},{\"../doc-utils\":1,\"../errors\":2,\"../module-wrapper\":7}],11:[function(require,module,exports){\"use strict\";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\")}}var wrapper=require(\"../module-wrapper\");var Render=function(){function Render(){_classCallCheck(this,Render);this.name=\"Render\"}_createClass(Render,[{key:\"set\",value:function set(obj){if(obj.compiled){this.compiled=obj.compiled}if(obj.data!=null){this.data=obj.data}}},{key:\"getRenderedMap\",value:function getRenderedMap(mapper){var _this=this;return Object.keys(this.compiled).reduce(function(mapper,from){mapper[from]={from:from,data:_this.data};return mapper},mapper)}}]);return Render}();module.exports=function(){return wrapper(new Render)}},{\"../module-wrapper\":7}],12:[function(require,module,exports){\"use strict\";var wrapper=require(\"../module-wrapper\");var spacePreserve={name:\"SpacePreserveModule\",postparse:function postparse(parsed){var chunk=[];var inChunk=false;var result=parsed.reduce(function(parsed,part){if(part.type===\"tag\"&&part.position===\"start\"&&part.text&&part.value===\"<w:t>\"){inChunk=true}if(inChunk){if(part.type===\"placeholder\"&&!part.module){chunk[0].value='<w:t xml:space=\"preserve\">'}chunk.push(part)}else{parsed.push(part)}if(part.type===\"tag\"&&part.position===\"end\"&&part.text&&part.value===\"</w:t>\"){Array.prototype.push.apply(parsed,chunk);inChunk=false;chunk=[]}return parsed},[]);Array.prototype.push.apply(result,chunk);return result}};module.exports=function(){return wrapper(spacePreserve)}},{\"../module-wrapper\":7}],13:[function(require,module,exports){\"use strict\";var DocUtils=require(\"./doc-utils\");var parser={postparse:function postparse(parsed,modules){function getTraits(traitName,parsed){return modules.map(function(module){return module.getTraits(traitName,parsed)})}function postparse(parsed){return modules.reduce(function(parsed,module){return module.postparse(parsed,{postparse:postparse,getTraits:getTraits})},parsed)}return postparse(parsed)},parse:function parse(lexed,modules){function moduleParse(placeHolderContent,parsed){var moduleParsed=void 0;for(var i=0,l=modules.length;i<l;i++){var _module=modules[i];moduleParsed=_module.parse(placeHolderContent);if(moduleParsed){parsed.push(moduleParsed);return moduleParsed}}return null}var inPlaceHolder=false;var placeHolderContent=void 0;var tailParts=[];return lexed.reduce(function(parsed,token){if(token.type===\"delimiter\"){inPlaceHolder=token.position===\"start\";if(token.position===\"end\"){placeHolderContent=DocUtils.wordToUtf8(placeHolderContent);if(!moduleParse(placeHolderContent,parsed)){parsed.push({type:\"placeholder\",value:placeHolderContent})}Array.prototype.push.apply(parsed,tailParts);tailParts=[];return parsed}placeHolderContent=\"\";return parsed}if(inPlaceHolder){if(token.type===\"content\"&&token.position===\"insidetag\"){placeHolderContent+=token.value}else{tailParts.push(token)}return parsed}parsed.push(token);return parsed},[])}};module.exports=parser},{\"./doc-utils\":1}],14:[function(require,module,exports){\"use strict\";var ScopeManager=require(\"./scope-manager\");var DocUtils=require(\"./doc-utils\");function moduleRender(part,options){var moduleRendered=void 0;for(var i=0,l=options.modules.length;i<l;i++){var _module=options.modules[i];moduleRendered=_module.render(part,options);if(moduleRendered){return moduleRendered}}return false}function render(options){options.render=render;options.modules=options.modules;if(!options.scopeManager){options.scopeManager=ScopeManager.createBaseScopeManager(options)}return options.compiled.map(function(part){var moduleRendered=moduleRender(part,options);if(moduleRendered){return moduleRendered.value}if(part.type===\"placeholder\"){var value=options.scopeManager.getValue(part.value);if(value==null){value=options.nullGetter(part)}return DocUtils.utf8ToWord(value)}if(part.type===\"content\"||part.type===\"tag\"){return part.value}throw new Error('Unimplemented tag type \"'+part.type+'\"')}).join(\"\")}module.exports=render},{\"./doc-utils\":1,\"./scope-manager\":15}],15:[function(require,module,exports){\"use strict\";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\")}}var Errors=require(\"./errors\");var ScopeManager=function(){function ScopeManager(options){_classCallCheck(this,ScopeManager);this.scopePath=options.scopePath;this.scopeList=options.scopeList;this.parser=options.parser}_createClass(ScopeManager,[{key:\"loopOver\",value:function loopOver(tag,callback,inverted){inverted=inverted||false;return this.loopOverValue(this.getValue(tag),callback,inverted)}},{key:\"functorIfInverted\",value:function functorIfInverted(inverted,functor,value){if(inverted){functor(value)}}},{key:\"isValueFalsy\",value:function isValueFalsy(value,type){return value==null||!value||type===\"[object Array]\"&&value.length===0}},{key:\"loopOverValue\",value:function loopOverValue(value,functor,inverted){var type=Object.prototype.toString.call(value);var currentValue=this.scopeList[this.num];if(this.isValueFalsy(value,type)){return this.functorIfInverted(inverted,functor,currentValue)}if(type===\"[object Array]\"){for(var i=0,scope;i<value.length;i++){scope=value[i];this.functorIfInverted(!inverted,functor,scope)}return}if(type===\"[object Object]\"){return this.functorIfInverted(!inverted,functor,value)}if(value===true){return this.functorIfInverted(!inverted,functor,currentValue)}}},{key:\"getValue\",value:function getValue(tag,num){this.num=num==null?this.scopeList.length-1:num;var err=void 0;var parser=void 0;var result=void 0;var scope=this.scopeList[this.num];try{parser=this.parser(tag)}catch(error){err=new Errors.XTScopeParserError(\"Scope parser compilation failed\");err.properties={id:\"scopeparser_compilation_failed\",tag:tag,explanation:\"The scope parser for the tag \"+tag+\" failed to compile\",rootError:error};throw err}try{result=parser.get(scope,{num:this.num,scopeList:this.scopeList})}catch(error){err=new Errors.XTScopeParserError(\"Scope parser execution failed\");err.properties={id:\"scopeparser_execution_failed\",explanation:\"The scope parser for the tag \"+tag+\" failed to execute\",scope:scope,tag:tag,rootError:error};throw err}if(result==null&&this.num>0){return this.getValue(tag,this.num-1)}return result}},{key:\"createSubScopeManager\",value:function createSubScopeManager(scope,tag){var options={scopePath:this.scopePath.slice(0),scopeList:this.scopeList.slice(0)};options.parser=this.parser;options.scopeList=this.scopeList.concat(scope);options.scopePath=this.scopePath.concat(tag);return new ScopeManager(options)}}]);return ScopeManager}();ScopeManager.createBaseScopeManager=function(_ref){var parser=_ref.parser,tags=_ref.tags;var options={parser:parser,tags:tags};options.scopePath=[];options.scopeList=[tags];return new ScopeManager(options)};module.exports=ScopeManager},{\"./errors\":2}],16:[function(require,module,exports){\"use strict\";var DocUtils=require(\"./doc-utils\");var Errors=require(\"./errors\");function throwRawTagNotInParagraph(options){var err=new Errors.XTTemplateError(\"Raw tag not in paragraph\");var tag=options.part.value;err.properties={id:\"raw_tag_outerxml_invalid\",explanation:'The tag \"'+tag+'\"',rootError:options.rootError,xtag:tag,postparsed:options.postparsed,expandTo:options.expandTo,index:options.index};throw err}function lastTagIsOpenTag(array,tag){if(array.length===0){return false}var lastTag=array[array.length-1];var innerLastTag=lastTag.tag.substr(1);var innerCurrentTag=tag.substr(2,tag.length-3);return innerLastTag.indexOf(innerCurrentTag)===0}function addTag(array,tag){array.push({tag:tag});return array}function getListXmlElements(parts){var tags=parts.filter(function(part){return part.type===\"tag\"}).map(function(part){return part.value});var result=[];for(var i=0,tag;i<tags.length;i++){tag=tags[i];if(tag[1]===\"/\"){if(lastTagIsOpenTag(result,tag)){result.pop()}else{result=addTag(result,tag)}}else if(tag[tag.length-1]!==\"/\"){result=addTag(result,tag)}}return result}function getExpandToDefault(parts){var xmlElements=getListXmlElements(parts);for(var i=0;i<xmlElements.length;i++){var xmlElement=xmlElements[i];if(xmlElement.tag.indexOf(\"<w:tc\")===0){return\"w:tr\"}if(xmlElement.tag.indexOf(\"<a:tc\")===0){return\"a:tr\"}}return false}function expandOne(part,postparsed,options){var expandTo=part.expandTo||options.expandTo;var index=postparsed.indexOf(part);if(!expandTo){return postparsed}var right=void 0,left=void 0;try{right=DocUtils.getRight(postparsed,expandTo,index);left=DocUtils.getLeft(postparsed,expandTo,index)}catch(rootError){if(rootError instanceof Errors.XTTemplateError){throwRawTagNotInParagraph({part:part,rootError:rootError,postparsed:postparsed,expandTo:expandTo,index:index})}throw rootError}var leftParts=postparsed.slice(left,index);var rightParts=postparsed.slice(index+1,right+1);var inner=options.getInner({index:index,part:part,leftParts:leftParts,rightParts:rightParts,left:left,right:right,postparsed:postparsed});if(!inner.length){inner.expanded=[leftParts,rightParts];inner=[inner]}return DocUtils.concatArrays([postparsed.slice(0,left),inner,postparsed.slice(right+1)])}function expandToOne(postparsed,options){var expandToElements=postparsed.reduce(function(elements,part){if(part.type===\"placeholder\"&&part.module===options.moduleName){elements.push(part)}return elements},[]);expandToElements.forEach(function(part){postparsed=expandOne(part,postparsed,options)});return postparsed}module.exports={expandToOne:expandToOne,getExpandToDefault:getExpandToDefault}},{\"./doc-utils\":1,\"./errors\":2}],17:[function(require,module,exports){\"use strict\";var DocUtils=require(\"./doc-utils\");var memoize=require(\"./memoize\");function handleRecursiveCase(res){function replacerUnshift(){var pn={array:Array.prototype.slice.call(arguments)};pn.array.shift();var match=pn.array[0]+pn.array[1];pn.array.unshift(match);pn.array.pop();var offset=pn.array.pop();pn.offset=offset;pn.first=true;res.matches.unshift(pn);res.charactersAdded.unshift(0);return res.charactersAddedCumulative.unshift(0)}if(res.content.indexOf(\"<\")===-1&&res.content.indexOf(\">\")===-1){res.content.replace(/^()([^<>]*)$/,replacerUnshift)}var r=new RegExp(\"^()([^<]+)</(?:\"+res.tagsXmlArrayJoined+\")>\");res.content.replace(r,replacerUnshift);function replacerPush(){var pn={array:Array.prototype.slice.call(arguments)};pn.array.pop();var offset=pn.array.pop();pn.offset=offset;pn.last=true;res.matches.push(pn);res.charactersAdded.push(0);return res.charactersAddedCumulative.push(0)}r=new RegExp(\"(<(?:\"+res.tagsXmlArrayJoined+\")[^>]*>)([^>]+)$\");res.content.replace(r,replacerPush);return res}function xmlMatcher(content,tagsXmlArray){var res={};res.content=content;res.tagsXmlArray=tagsXmlArray;res.tagsXmlArrayJoined=res.tagsXmlArray.join(\"|\");var regexp=new RegExp(\"(<(?:\"+res.tagsXmlArrayJoined+\")[^>]*>)([^<>]*)</(?:\"+res.tagsXmlArrayJoined+\")>\",\"g\");res.matches=DocUtils.pregMatchAll(regexp,res.content);res.charactersAddedCumulative=res.matches.map(function(){return 0});res.charactersAdded=res.matches.map(function(){return 0});return handleRecursiveCase(res)}var memoized=memoize(xmlMatcher);module.exports=function(content,tagsXmlArray){return DocUtils.cloneDeep(memoized(content,tagsXmlArray))}},{\"./doc-utils\":1,\"./memoize\":5}],18:[function(require,module,exports){\"use strict\";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\")}}var DocUtils=require(\"./doc-utils\");var ScopeManager=require(\"./scope-manager\");var xmlMatcher=require(\"./xml-matcher\");var Errors=require(\"./errors\");var Lexer=require(\"./lexer\");var Parser=require(\"./parser.js\");var _render=require(\"./render.js\");function _getFullText(content,tagsXmlArray){var matcher=xmlMatcher(content,tagsXmlArray);var result=matcher.matches.map(function(match){return match.array[2]});return DocUtils.wordToUtf8(DocUtils.convertSpaces(result.join(\"\")))}module.exports=function(){function XmlTemplater(content,options){_classCallCheck(this,XmlTemplater);this.fromJson(options);this.setModules({inspect:{filePath:this.filePath}});this.load(content)}_createClass(XmlTemplater,[{key:\"load\",value:function load(content){if(typeof content!==\"string\"){var err=new Errors.XTInternalError(\"Content must be a string\");err.properties.id=\"xmltemplater_content_must_be_string\";throw err}this.content=content}},{key:\"setTags\",value:function setTags(tags){this.tags=tags!=null?tags:{};this.scopeManager=ScopeManager.createBaseScopeManager({tags:this.tags,parser:this.parser});return this}},{key:\"fromJson\",value:function fromJson(options){this.filePath=options.filePath;this.modules=options.modules;this.fileTypeConfig=options.fileTypeConfig;Object.keys(DocUtils.defaults).map(function(key){this[key]=options[key]!=null?options[key]:DocUtils.defaults[key]},this)}},{key:\"getFullText\",value:function getFullText(){return _getFullText(this.content,this.fileTypeConfig.tagsXmlTextArray)}},{key:\"setModules\",value:function setModules(obj){this.modules.forEach(function(module){module.set(obj)})}},{key:\"parse\",value:function parse(){this.xmllexed=Lexer.xmlparse(this.content,{text:this.fileTypeConfig.tagsXmlTextArray,other:this.fileTypeConfig.tagsXmlLexedArray});this.setModules({inspect:{xmllexed:this.xmllexed}});this.lexed=Lexer.parse(this.xmllexed,this.delimiters);this.setModules({inspect:{lexed:this.lexed}});this.parsed=Parser.parse(this.lexed,this.modules);this.setModules({inspect:{parsed:this.parsed}});this.postparsed=Parser.postparse(this.parsed,this.modules);return this}},{key:\"render\",value:function render(to){this.filePath=to;this.setModules({inspect:{postparsed:this.postparsed}});this.content=_render({compiled:this.postparsed,tags:this.tags,modules:this.modules,parser:this.parser,nullGetter:this.nullGetter,filePath:this.filePath});this.setModules({inspect:{content:this.content}});return this}}]);return XmlTemplater}()},{\"./doc-utils\":1,\"./errors\":2,\"./lexer\":4,\"./parser.js\":13,\"./render.js\":14,\"./scope-manager\":15,\"./xml-matcher\":17}],19:[function(require,module,exports){function DOMParser(options){this.options=options||{locator:{}}}DOMParser.prototype.parseFromString=function(source,mimeType){var options=this.options;var sax=new XMLReader;var domBuilder=options.domBuilder||new DOMHandler;var errorHandler=options.errorHandler;var locator=options.locator;var defaultNSMap=options.xmlns||{};var entityMap={lt:\"<\",gt:\">\",amp:\"&\",quot:'\"',apos:\"'\"};if(locator){domBuilder.setDocumentLocator(locator)}sax.errorHandler=buildErrorHandler(errorHandler,domBuilder,locator);sax.domBuilder=options.domBuilder||domBuilder;if(/\\/x?html?$/.test(mimeType)){entityMap.nbsp=\" \";entityMap.copy=\"©\";defaultNSMap[\"\"]=\"http://www.w3.org/1999/xhtml\"}defaultNSMap.xml=defaultNSMap.xml||\"http://www.w3.org/XML/1998/namespace\";if(source){sax.parse(source,defaultNSMap,entityMap)}else{sax.errorHandler.error(\"invalid doc source\")}return domBuilder.doc};function buildErrorHandler(errorImpl,domBuilder,locator){if(!errorImpl){if(domBuilder instanceof DOMHandler){return domBuilder}errorImpl=domBuilder}var errorHandler={};var isCallback=errorImpl instanceof Function;locator=locator||{};function build(key){var fn=errorImpl[key];if(!fn&&isCallback){fn=errorImpl.length==2?function(msg){errorImpl(key,msg)}:errorImpl}errorHandler[key]=fn&&function(msg){fn(\"[xmldom \"+key+\"]\\t\"+msg+_locator(locator))}||function(){}}build(\"warning\");build(\"error\");build(\"fatalError\");return errorHandler}function DOMHandler(){this.cdata=false}function position(locator,node){node.lineNumber=locator.lineNumber;node.columnNumber=locator.columnNumber}DOMHandler.prototype={startDocument:function(){this.doc=(new DOMImplementation).createDocument(null,null,null);if(this.locator){this.doc.documentURI=this.locator.systemId}},startElement:function(namespaceURI,localName,qName,attrs){var doc=this.doc;var el=doc.createElementNS(namespaceURI,qName||localName);var len=attrs.length;appendElement(this,el);this.currentElement=el;this.locator&&position(this.locator,el);for(var i=0;i<len;i++){var namespaceURI=attrs.getURI(i);var value=attrs.getValue(i);var qName=attrs.getQName(i);var attr=doc.createAttributeNS(namespaceURI,qName);this.locator&&position(attrs.getLocator(i),attr);attr.value=attr.nodeValue=value;el.setAttributeNode(attr)}},endElement:function(namespaceURI,localName,qName){var current=this.currentElement;var tagName=current.tagName;this.currentElement=current.parentNode},startPrefixMapping:function(prefix,uri){},endPrefixMapping:function(prefix){},processingInstruction:function(target,data){var ins=this.doc.createProcessingInstruction(target,data);this.locator&&position(this.locator,ins);appendElement(this,ins)},ignorableWhitespace:function(ch,start,length){},characters:function(chars,start,length){chars=_toString.apply(this,arguments);if(chars){if(this.cdata){var charNode=this.doc.createCDATASection(chars)}else{var charNode=this.doc.createTextNode(chars)}if(this.currentElement){this.currentElement.appendChild(charNode)}else if(/^\\s*$/.test(chars)){this.doc.appendChild(charNode)}this.locator&&position(this.locator,charNode)}},skippedEntity:function(name){},endDocument:function(){this.doc.normalize()},setDocumentLocator:function(locator){if(this.locator=locator){locator.lineNumber=0}},comment:function(chars,start,length){chars=_toString.apply(this,arguments);var comm=this.doc.createComment(chars);this.locator&&position(this.locator,comm);appendElement(this,comm)},startCDATA:function(){this.cdata=true},endCDATA:function(){this.cdata=false},startDTD:function(name,publicId,systemId){var impl=this.doc.implementation;if(impl&&impl.createDocumentType){var dt=impl.createDocumentType(name,publicId,systemId);this.locator&&position(this.locator,dt);appendElement(this,dt)}},warning:function(error){console.warn(\"[xmldom warning]\\t\"+error,_locator(this.locator))},error:function(error){console.error(\"[xmldom error]\\t\"+error,_locator(this.locator))},fatalError:function(error){console.error(\"[xmldom fatalError]\\t\"+error,_locator(this.locator));throw error}};function _locator(l){if(l){return\"\\n@\"+(l.systemId||\"\")+\"#[line:\"+l.lineNumber+\",col:\"+l.columnNumber+\"]\"}}function _toString(chars,start,length){if(typeof chars==\"string\"){return chars.substr(start,length)}else{if(chars.length>=start+length||start){return new java.lang.String(chars,start,length)+\"\"}return chars}}\"endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl\".replace(/\\w+/g,function(key){DOMHandler.prototype[key]=function(){return null}});function appendElement(hander,node){if(!hander.currentElement){hander.doc.appendChild(node)}else{hander.currentElement.appendChild(node)}}var XMLReader=require(\"./sax\").XMLReader;var DOMImplementation=exports.DOMImplementation=require(\"./dom\").DOMImplementation;exports.XMLSerializer=require(\"./dom\").XMLSerializer;exports.DOMParser=DOMParser},{\"./dom\":20,\"./sax\":21}],20:[function(require,module,exports){function copy(src,dest){for(var p in src){dest[p]=src[p]}}function _extends(Class,Super){var pt=Class.prototype;if(Object.create){var ppt=Object.create(Super.prototype);pt.__proto__=ppt}if(!(pt instanceof Super)){function t(){}t.prototype=Super.prototype;t=new t;copy(pt,t);Class.prototype=pt=t}if(pt.constructor!=Class){if(typeof Class!=\"function\"){console.error(\"unknow Class:\"+Class)}pt.constructor=Class}}var htmlns=\"http://www.w3.org/1999/xhtml\";var NodeType={};var ELEMENT_NODE=NodeType.ELEMENT_NODE=1;var ATTRIBUTE_NODE=NodeType.ATTRIBUTE_NODE=2;var TEXT_NODE=NodeType.TEXT_NODE=3;var CDATA_SECTION_NODE=NodeType.CDATA_SECTION_NODE=4;var ENTITY_REFERENCE_NODE=NodeType.ENTITY_REFERENCE_NODE=5;var ENTITY_NODE=NodeType.ENTITY_NODE=6;var PROCESSING_INSTRUCTION_NODE=NodeType.PROCESSING_INSTRUCTION_NODE=7;var COMMENT_NODE=NodeType.COMMENT_NODE=8;var DOCUMENT_NODE=NodeType.DOCUMENT_NODE=9;var DOCUMENT_TYPE_NODE=NodeType.DOCUMENT_TYPE_NODE=10;var DOCUMENT_FRAGMENT_NODE=NodeType.DOCUMENT_FRAGMENT_NODE=11;var NOTATION_NODE=NodeType.NOTATION_NODE=12;var ExceptionCode={};var ExceptionMessage={};var INDEX_SIZE_ERR=ExceptionCode.INDEX_SIZE_ERR=(ExceptionMessage[1]=\"Index size error\",1);var DOMSTRING_SIZE_ERR=ExceptionCode.DOMSTRING_SIZE_ERR=(ExceptionMessage[2]=\"DOMString size error\",2);var HIERARCHY_REQUEST_ERR=ExceptionCode.HIERARCHY_REQUEST_ERR=(ExceptionMessage[3]=\"Hierarchy request error\",3);var WRONG_DOCUMENT_ERR=ExceptionCode.WRONG_DOCUMENT_ERR=(ExceptionMessage[4]=\"Wrong document\",4);var INVALID_CHARACTER_ERR=ExceptionCode.INVALID_CHARACTER_ERR=(ExceptionMessage[5]=\"Invalid character\",5);var NO_DATA_ALLOWED_ERR=ExceptionCode.NO_DATA_ALLOWED_ERR=(ExceptionMessage[6]=\"No data allowed\",6);var NO_MODIFICATION_ALLOWED_ERR=ExceptionCode.NO_MODIFICATION_ALLOWED_ERR=(ExceptionMessage[7]=\"No modification allowed\",7);var NOT_FOUND_ERR=ExceptionCode.NOT_FOUND_ERR=(ExceptionMessage[8]=\"Not found\",8);var NOT_SUPPORTED_ERR=ExceptionCode.NOT_SUPPORTED_ERR=(ExceptionMessage[9]=\"Not supported\",9);var INUSE_ATTRIBUTE_ERR=ExceptionCode.INUSE_ATTRIBUTE_ERR=(ExceptionMessage[10]=\"Attribute in use\",10);var INVALID_STATE_ERR=ExceptionCode.INVALID_STATE_ERR=(ExceptionMessage[11]=\"Invalid state\",11);var SYNTAX_ERR=ExceptionCode.SYNTAX_ERR=(ExceptionMessage[12]=\"Syntax error\",12);var INVALID_MODIFICATION_ERR=ExceptionCode.INVALID_MODIFICATION_ERR=(ExceptionMessage[13]=\"Invalid modification\",13);var NAMESPACE_ERR=ExceptionCode.NAMESPACE_ERR=(ExceptionMessage[14]=\"Invalid namespace\",14);var INVALID_ACCESS_ERR=ExceptionCode.INVALID_ACCESS_ERR=(ExceptionMessage[15]=\"Invalid access\",15);function DOMException(code,message){if(message instanceof Error){var error=message}else{error=this;Error.call(this,ExceptionMessage[code]);this.message=ExceptionMessage[code];if(Error.captureStackTrace)Error.captureStackTrace(this,DOMException)}error.code=code;if(message)this.message=this.message+\": \"+message;return error}DOMException.prototype=Error.prototype;copy(ExceptionCode,DOMException);function NodeList(){}NodeList.prototype={length:0,item:function(index){return this[index]||null},toString:function(isHTML,nodeFilter){for(var buf=[],i=0;i<this.length;i++){serializeToString(this[i],buf,isHTML,nodeFilter)}return buf.join(\"\")}};function LiveNodeList(node,refresh){this._node=node;this._refresh=refresh;_updateLiveList(this)}function _updateLiveList(list){var inc=list._node._inc||list._node.ownerDocument._inc;if(list._inc!=inc){var ls=list._refresh(list._node);__set__(list,\"length\",ls.length);copy(ls,list);list._inc=inc}}LiveNodeList.prototype.item=function(i){_updateLiveList(this);return this[i]};_extends(LiveNodeList,NodeList);function NamedNodeMap(){}function _findNodeIndex(list,node){var i=list.length;while(i--){if(list[i]===node){return i}}}function _addNamedNode(el,list,newAttr,oldAttr){if(oldAttr){list[_findNodeIndex(list,oldAttr)]=newAttr}else{list[list.length++]=newAttr}if(el){newAttr.ownerElement=el;var doc=el.ownerDocument;if(doc){oldAttr&&_onRemoveAttribute(doc,el,oldAttr);_onAddAttribute(doc,el,newAttr)}}}function _removeNamedNode(el,list,attr){var i=_findNodeIndex(list,attr);if(i>=0){var lastIndex=list.length-1;while(i<lastIndex){list[i]=list[++i]}list.length=lastIndex;if(el){var doc=el.ownerDocument;if(doc){_onRemoveAttribute(doc,el,attr);attr.ownerElement=null}}}else{throw DOMException(NOT_FOUND_ERR,new Error(el.tagName+\"@\"+attr))}}NamedNodeMap.prototype={length:0,item:NodeList.prototype.item,getNamedItem:function(key){var i=this.length;while(i--){var attr=this[i];if(attr.nodeName==key){return attr}}},setNamedItem:function(attr){var el=attr.ownerElement;if(el&&el!=this._ownerElement){throw new DOMException(INUSE_ATTRIBUTE_ERR)}var oldAttr=this.getNamedItem(attr.nodeName);_addNamedNode(this._ownerElement,this,attr,oldAttr);return oldAttr},setNamedItemNS:function(attr){var el=attr.ownerElement,oldAttr;if(el&&el!=this._ownerElement){throw new DOMException(INUSE_ATTRIBUTE_ERR)}oldAttr=this.getNamedItemNS(attr.namespaceURI,attr.localName);_addNamedNode(this._ownerElement,this,attr,oldAttr);return oldAttr},removeNamedItem:function(key){var attr=this.getNamedItem(key);_removeNamedNode(this._ownerElement,this,attr);return attr},removeNamedItemNS:function(namespaceURI,localName){var attr=this.getNamedItemNS(namespaceURI,localName);_removeNamedNode(this._ownerElement,this,attr);return attr},getNamedItemNS:function(namespaceURI,localName){var i=this.length;while(i--){var node=this[i];if(node.localName==localName&&node.namespaceURI==namespaceURI){return node}}return null}};function DOMImplementation(features){this._features={};if(features){for(var feature in features){this._features=features[feature]}}}DOMImplementation.prototype={hasFeature:function(feature,version){var versions=this._features[feature.toLowerCase()];if(versions&&(!version||version in versions)){return true}else{return false}},createDocument:function(namespaceURI,qualifiedName,doctype){var doc=new Document;doc.implementation=this;doc.childNodes=new NodeList;doc.doctype=doctype;if(doctype){doc.appendChild(doctype)}if(qualifiedName){var root=doc.createElementNS(namespaceURI,qualifiedName);doc.appendChild(root)}return doc},createDocumentType:function(qualifiedName,publicId,systemId){var node=new DocumentType;node.name=qualifiedName;node.nodeName=qualifiedName;node.publicId=publicId;node.systemId=systemId;return node}};function Node(){}Node.prototype={firstChild:null,lastChild:null,previousSibling:null,nextSibling:null,attributes:null,parentNode:null,childNodes:null,ownerDocument:null,nodeValue:null,namespaceURI:null,prefix:null,localName:null,insertBefore:function(newChild,refChild){return _insertBefore(this,newChild,refChild)},replaceChild:function(newChild,oldChild){this.insertBefore(newChild,oldChild);if(oldChild){this.removeChild(oldChild)}},removeChild:function(oldChild){return _removeChild(this,oldChild)},appendChild:function(newChild){return this.insertBefore(newChild,null)},hasChildNodes:function(){return this.firstChild!=null},cloneNode:function(deep){return cloneNode(this.ownerDocument||this,this,deep)},normalize:function(){var child=this.firstChild;while(child){var next=child.nextSibling;if(next&&next.nodeType==TEXT_NODE&&child.nodeType==TEXT_NODE){this.removeChild(next);child.appendData(next.data)}else{child.normalize();child=next}}},isSupported:function(feature,version){return this.ownerDocument.implementation.hasFeature(feature,version)},hasAttributes:function(){return this.attributes.length>0},lookupPrefix:function(namespaceURI){var el=this;while(el){var map=el._nsMap;if(map){for(var n in map){if(map[n]==namespaceURI){return n}}}el=el.nodeType==ATTRIBUTE_NODE?el.ownerDocument:el.parentNode}return null},lookupNamespaceURI:function(prefix){var el=this;while(el){var map=el._nsMap;if(map){if(prefix in map){return map[prefix]}}el=el.nodeType==ATTRIBUTE_NODE?el.ownerDocument:el.parentNode}return null},isDefaultNamespace:function(namespaceURI){var prefix=this.lookupPrefix(namespaceURI);return prefix==null}};function _xmlEncoder(c){return c==\"<\"&&\"&lt;\"||c==\">\"&&\"&gt;\"||c==\"&\"&&\"&amp;\"||c=='\"'&&\"&quot;\"||\"&#\"+c.charCodeAt()+\";\"}copy(NodeType,Node);copy(NodeType,Node.prototype);function _visitNode(node,callback){if(callback(node)){return true}if(node=node.firstChild){do{if(_visitNode(node,callback)){return true}}while(node=node.nextSibling)}}function Document(){}function _onAddAttribute(doc,el,newAttr){doc&&doc._inc++;var ns=newAttr.namespaceURI;if(ns==\"http://www.w3.org/2000/xmlns/\"){el._nsMap[newAttr.prefix?newAttr.localName:\"\"]=newAttr.value}}function _onRemoveAttribute(doc,el,newAttr,remove){doc&&doc._inc++;var ns=newAttr.namespaceURI;if(ns==\"http://www.w3.org/2000/xmlns/\"){delete el._nsMap[newAttr.prefix?newAttr.localName:\"\"]}}function _onUpdateChild(doc,el,newChild){if(doc&&doc._inc){doc._inc++;var cs=el.childNodes;if(newChild){cs[cs.length++]=newChild}else{var child=el.firstChild;var i=0;while(child){cs[i++]=child;child=child.nextSibling}cs.length=i}}}function _removeChild(parentNode,child){var previous=child.previousSibling;var next=child.nextSibling;if(previous){previous.nextSibling=next}else{parentNode.firstChild=next}if(next){next.previousSibling=previous}else{parentNode.lastChild=previous}_onUpdateChild(parentNode.ownerDocument,parentNode);return child}function _insertBefore(parentNode,newChild,nextChild){var cp=newChild.parentNode;if(cp){cp.removeChild(newChild)}if(newChild.nodeType===DOCUMENT_FRAGMENT_NODE){var newFirst=newChild.firstChild;if(newFirst==null){return newChild}var newLast=newChild.lastChild}else{newFirst=newLast=newChild}var pre=nextChild?nextChild.previousSibling:parentNode.lastChild;newFirst.previousSibling=pre;newLast.nextSibling=nextChild;if(pre){pre.nextSibling=newFirst}else{parentNode.firstChild=newFirst}if(nextChild==null){parentNode.lastChild=newLast}else{nextChild.previousSibling=newLast}do{newFirst.parentNode=parentNode}while(newFirst!==newLast&&(newFirst=newFirst.nextSibling));_onUpdateChild(parentNode.ownerDocument||parentNode,parentNode);if(newChild.nodeType==DOCUMENT_FRAGMENT_NODE){newChild.firstChild=newChild.lastChild=null}return newChild}function _appendSingleChild(parentNode,newChild){var cp=newChild.parentNode;if(cp){var pre=parentNode.lastChild;cp.removeChild(newChild);var pre=parentNode.lastChild}var pre=parentNode.lastChild;newChild.parentNode=parentNode;newChild.previousSibling=pre;newChild.nextSibling=null;if(pre){pre.nextSibling=newChild}else{parentNode.firstChild=newChild}parentNode.lastChild=newChild;_onUpdateChild(parentNode.ownerDocument,parentNode,newChild);return newChild}Document.prototype={nodeName:\"#document\",nodeType:DOCUMENT_NODE,doctype:null,documentElement:null,_inc:1,insertBefore:function(newChild,refChild){if(newChild.nodeType==DOCUMENT_FRAGMENT_NODE){var child=newChild.firstChild;while(child){var next=child.nextSibling;this.insertBefore(child,refChild);child=next}return newChild}if(this.documentElement==null&&newChild.nodeType==ELEMENT_NODE){this.documentElement=newChild}return _insertBefore(this,newChild,refChild),newChild.ownerDocument=this,newChild},removeChild:function(oldChild){if(this.documentElement==oldChild){this.documentElement=null}return _removeChild(this,oldChild)},importNode:function(importedNode,deep){return importNode(this,importedNode,deep)},getElementById:function(id){var rtv=null;_visitNode(this.documentElement,function(node){if(node.nodeType==ELEMENT_NODE){if(node.getAttribute(\"id\")==id){rtv=node;return true}}});return rtv},createElement:function(tagName){var node=new Element;node.ownerDocument=this;node.nodeName=tagName;node.tagName=tagName;node.childNodes=new NodeList;var attrs=node.attributes=new NamedNodeMap;attrs._ownerElement=node;return node},createDocumentFragment:function(){var node=new DocumentFragment;node.ownerDocument=this;node.childNodes=new NodeList;return node},createTextNode:function(data){var node=new Text;node.ownerDocument=this;node.appendData(data);return node},createComment:function(data){var node=new Comment;node.ownerDocument=this;node.appendData(data);return node},createCDATASection:function(data){var node=new CDATASection;node.ownerDocument=this;node.appendData(data);return node},createProcessingInstruction:function(target,data){var node=new ProcessingInstruction;node.ownerDocument=this;node.tagName=node.target=target;node.nodeValue=node.data=data;return node},createAttribute:function(name){var node=new Attr;node.ownerDocument=this;node.name=name;node.nodeName=name;node.localName=name;node.specified=true;return node},createEntityReference:function(name){var node=new EntityReference;node.ownerDocument=this;node.nodeName=name;return node},createElementNS:function(namespaceURI,qualifiedName){var node=new Element;var pl=qualifiedName.split(\":\");var attrs=node.attributes=new NamedNodeMap;node.childNodes=new NodeList;node.ownerDocument=this;node.nodeName=qualifiedName;node.tagName=qualifiedName;node.namespaceURI=namespaceURI;if(pl.length==2){node.prefix=pl[0];node.localName=pl[1]}else{node.localName=qualifiedName}attrs._ownerElement=node;return node},createAttributeNS:function(namespaceURI,qualifiedName){var node=new Attr;var pl=qualifiedName.split(\":\");node.ownerDocument=this;node.nodeName=qualifiedName;node.name=qualifiedName;node.namespaceURI=namespaceURI;node.specified=true;if(pl.length==2){node.prefix=pl[0];node.localName=pl[1]}else{node.localName=qualifiedName}return node}};_extends(Document,Node);function Element(){this._nsMap={}}Element.prototype={nodeType:ELEMENT_NODE,hasAttribute:function(name){return this.getAttributeNode(name)!=null},getAttribute:function(name){var attr=this.getAttributeNode(name);return attr&&attr.value||\"\"},getAttributeNode:function(name){return this.attributes.getNamedItem(name)},setAttribute:function(name,value){var attr=this.ownerDocument.createAttribute(name);attr.value=attr.nodeValue=\"\"+value;this.setAttributeNode(attr)},removeAttribute:function(name){var attr=this.getAttributeNode(name);attr&&this.removeAttributeNode(attr)},appendChild:function(newChild){if(newChild.nodeType===DOCUMENT_FRAGMENT_NODE){return this.insertBefore(newChild,null)}else{return _appendSingleChild(this,newChild)}},setAttributeNode:function(newAttr){return this.attributes.setNamedItem(newAttr)},setAttributeNodeNS:function(newAttr){return this.attributes.setNamedItemNS(newAttr)},removeAttributeNode:function(oldAttr){return this.attributes.removeNamedItem(oldAttr.nodeName)},removeAttributeNS:function(namespaceURI,localName){var old=this.getAttributeNodeNS(namespaceURI,localName);old&&this.removeAttributeNode(old)},hasAttributeNS:function(namespaceURI,localName){return this.getAttributeNodeNS(namespaceURI,localName)!=null},getAttributeNS:function(namespaceURI,localName){var attr=this.getAttributeNodeNS(namespaceURI,localName);return attr&&attr.value||\"\"},setAttributeNS:function(namespaceURI,qualifiedName,value){var attr=this.ownerDocument.createAttributeNS(namespaceURI,qualifiedName);attr.value=attr.nodeValue=\"\"+value;this.setAttributeNode(attr)},getAttributeNodeNS:function(namespaceURI,localName){return this.attributes.getNamedItemNS(namespaceURI,localName)},getElementsByTagName:function(tagName){return new LiveNodeList(this,function(base){var ls=[];_visitNode(base,function(node){if(node!==base&&node.nodeType==ELEMENT_NODE&&(tagName===\"*\"||node.tagName==tagName)){ls.push(node)}});return ls})},getElementsByTagNameNS:function(namespaceURI,localName){return new LiveNodeList(this,function(base){var ls=[];_visitNode(base,function(node){if(node!==base&&node.nodeType===ELEMENT_NODE&&(namespaceURI===\"*\"||node.namespaceURI===namespaceURI)&&(localName===\"*\"||node.localName==localName)){ls.push(node)}});return ls})}};Document.prototype.getElementsByTagName=Element.prototype.getElementsByTagName;Document.prototype.getElementsByTagNameNS=Element.prototype.getElementsByTagNameNS;_extends(Element,Node);function Attr(){}Attr.prototype.nodeType=ATTRIBUTE_NODE;_extends(Attr,Node);function CharacterData(){}CharacterData.prototype={data:\"\",substringData:function(offset,count){return this.data.substring(offset,offset+count)},appendData:function(text){text=this.data+text;this.nodeValue=this.data=text;this.length=text.length},insertData:function(offset,text){this.replaceData(offset,0,text)},appendChild:function(newChild){throw new Error(ExceptionMessage[HIERARCHY_REQUEST_ERR])},deleteData:function(offset,count){this.replaceData(offset,count,\"\")},replaceData:function(offset,count,text){var start=this.data.substring(0,offset);var end=this.data.substring(offset+count);text=start+text+end;this.nodeValue=this.data=text;this.length=text.length}};_extends(CharacterData,Node);function Text(){}Text.prototype={nodeName:\"#text\",nodeType:TEXT_NODE,splitText:function(offset){var text=this.data;var newText=text.substring(offset);text=text.substring(0,offset);this.data=this.nodeValue=text;this.length=text.length;var newNode=this.ownerDocument.createTextNode(newText);if(this.parentNode){this.parentNode.insertBefore(newNode,this.nextSibling)}return newNode}};_extends(Text,CharacterData);function Comment(){}Comment.prototype={nodeName:\"#comment\",nodeType:COMMENT_NODE};_extends(Comment,CharacterData);function CDATASection(){}CDATASection.prototype={nodeName:\"#cdata-section\",nodeType:CDATA_SECTION_NODE};_extends(CDATASection,CharacterData);function DocumentType(){}DocumentType.prototype.nodeType=DOCUMENT_TYPE_NODE;_extends(DocumentType,Node);function Notation(){}Notation.prototype.nodeType=NOTATION_NODE;_extends(Notation,Node);function Entity(){}Entity.prototype.nodeType=ENTITY_NODE;_extends(Entity,Node);function EntityReference(){}EntityReference.prototype.nodeType=ENTITY_REFERENCE_NODE;_extends(EntityReference,Node);function DocumentFragment(){}DocumentFragment.prototype.nodeName=\"#document-fragment\";DocumentFragment.prototype.nodeType=DOCUMENT_FRAGMENT_NODE;_extends(DocumentFragment,Node);function ProcessingInstruction(){}ProcessingInstruction.prototype.nodeType=PROCESSING_INSTRUCTION_NODE;_extends(ProcessingInstruction,Node);function XMLSerializer(){}XMLSerializer.prototype.serializeToString=function(node,isHtml,nodeFilter){return nodeSerializeToString.call(node,isHtml,nodeFilter)};Node.prototype.toString=nodeSerializeToString;function nodeSerializeToString(isHtml,nodeFilter){var buf=[];var refNode=this.nodeType==9?this.documentElement:this;var prefix=refNode.prefix;var uri=refNode.namespaceURI;if(uri&&prefix==null){var prefix=refNode.lookupPrefix(uri);if(prefix==null){var visibleNamespaces=[{namespace:uri,prefix:null}]}}serializeToString(this,buf,isHtml,nodeFilter,visibleNamespaces);return buf.join(\"\")}function needNamespaceDefine(node,isHTML,visibleNamespaces){var prefix=node.prefix||\"\";var uri=node.namespaceURI;if(!prefix&&!uri){return false}if(prefix===\"xml\"&&uri===\"http://www.w3.org/XML/1998/namespace\"||uri==\"http://www.w3.org/2000/xmlns/\"){return false}var i=visibleNamespaces.length;while(i--){var ns=visibleNamespaces[i];if(ns.prefix==prefix){return ns.namespace!=uri}}return true}function serializeToString(node,buf,isHTML,nodeFilter,visibleNamespaces){if(nodeFilter){node=nodeFilter(node);if(node){if(typeof node==\"string\"){buf.push(node);return}}else{return}}switch(node.nodeType){case ELEMENT_NODE:if(!visibleNamespaces)visibleNamespaces=[];var startVisibleNamespaces=visibleNamespaces.length;var attrs=node.attributes;var len=attrs.length;var child=node.firstChild;var nodeName=node.tagName;isHTML=htmlns===node.namespaceURI||isHTML;buf.push(\"<\",nodeName);for(var i=0;i<len;i++){var attr=attrs.item(i);if(attr.prefix==\"xmlns\"){visibleNamespaces.push({prefix:attr.localName,namespace:attr.value})}else if(attr.nodeName==\"xmlns\"){visibleNamespaces.push({prefix:\"\",namespace:attr.value})}}for(var i=0;i<len;i++){var attr=attrs.item(i);if(needNamespaceDefine(attr,isHTML,visibleNamespaces)){var prefix=attr.prefix||\"\";var uri=attr.namespaceURI;var ns=prefix?\" xmlns:\"+prefix:\" xmlns\";buf.push(ns,'=\"',uri,'\"');visibleNamespaces.push({prefix:prefix,namespace:uri})}serializeToString(attr,buf,isHTML,nodeFilter,visibleNamespaces)}if(needNamespaceDefine(node,isHTML,visibleNamespaces)){var prefix=node.prefix||\"\";var uri=node.namespaceURI;var ns=prefix?\" xmlns:\"+prefix:\" xmlns\";buf.push(ns,'=\"',uri,'\"');visibleNamespaces.push({prefix:prefix,namespace:uri})}if(child||isHTML&&!/^(?:meta|link|img|br|hr|input)$/i.test(nodeName)){buf.push(\">\");if(isHTML&&/^script$/i.test(nodeName)){while(child){if(child.data){buf.push(child.data)}else{serializeToString(child,buf,isHTML,nodeFilter,visibleNamespaces)}child=child.nextSibling}}else{while(child){serializeToString(child,buf,isHTML,nodeFilter,visibleNamespaces);child=child.nextSibling}}buf.push(\"</\",nodeName,\">\")}else{buf.push(\"/>\")}return;case DOCUMENT_NODE:case DOCUMENT_FRAGMENT_NODE:var child=node.firstChild;while(child){serializeToString(child,buf,isHTML,nodeFilter,visibleNamespaces);child=child.nextSibling}return;case ATTRIBUTE_NODE:return buf.push(\" \",node.name,'=\"',node.value.replace(/[<&\"]/g,_xmlEncoder),'\"');case TEXT_NODE:return buf.push(node.data.replace(/[<&]/g,_xmlEncoder));case CDATA_SECTION_NODE:return buf.push(\"<![CDATA[\",node.data,\"]]>\");case COMMENT_NODE:return buf.push(\"\\x3c!--\",node.data,\"--\\x3e\");case DOCUMENT_TYPE_NODE:var pubid=node.publicId;var sysid=node.systemId;buf.push(\"<!DOCTYPE \",node.name);if(pubid){buf.push(' PUBLIC \"',pubid);if(sysid&&sysid!=\".\"){buf.push('\" \"',sysid)}buf.push('\">')}else if(sysid&&sysid!=\".\"){buf.push(' SYSTEM \"',sysid,'\">')}else{var sub=node.internalSubset;if(sub){buf.push(\" [\",sub,\"]\")}buf.push(\">\")}return;case PROCESSING_INSTRUCTION_NODE:return buf.push(\"<?\",node.target,\" \",node.data,\"?>\");case ENTITY_REFERENCE_NODE:return buf.push(\"&\",node.nodeName,\";\");default:buf.push(\"??\",node.nodeName)}}function importNode(doc,node,deep){var node2;switch(node.nodeType){case ELEMENT_NODE:node2=node.cloneNode(false);node2.ownerDocument=doc;case DOCUMENT_FRAGMENT_NODE:break;case ATTRIBUTE_NODE:deep=true;break}if(!node2){node2=node.cloneNode(false)}node2.ownerDocument=doc;node2.parentNode=null;if(deep){var child=node.firstChild;while(child){node2.appendChild(importNode(doc,child,deep));child=child.nextSibling}}return node2}function cloneNode(doc,node,deep){var node2=new node.constructor;for(var n in node){var v=node[n];if(typeof v!=\"object\"){if(v!=node2[n]){node2[n]=v}}}if(node.childNodes){node2.childNodes=new NodeList}node2.ownerDocument=doc;switch(node2.nodeType){case ELEMENT_NODE:var attrs=node.attributes;var attrs2=node2.attributes=new NamedNodeMap;var len=attrs.length;attrs2._ownerElement=node2;for(var i=0;i<len;i++){node2.setAttributeNode(cloneNode(doc,attrs.item(i),true))}break;case ATTRIBUTE_NODE:deep=true}if(deep){var child=node.firstChild;while(child){node2.appendChild(cloneNode(doc,child,deep));child=child.nextSibling}}return node2}function __set__(object,key,value){object[key]=value}try{if(Object.defineProperty){Object.defineProperty(LiveNodeList.prototype,\"length\",{get:function(){_updateLiveList(this);return this.$$length}});Object.defineProperty(Node.prototype,\"textContent\",{get:function(){return getTextContent(this)},set:function(data){switch(this.nodeType){case ELEMENT_NODE:case DOCUMENT_FRAGMENT_NODE:while(this.firstChild){this.removeChild(this.firstChild)}if(data||String(data)){this.appendChild(this.ownerDocument.createTextNode(data))}break;default:this.data=data;this.value=data;this.nodeValue=data}}});function getTextContent(node){switch(node.nodeType){case ELEMENT_NODE:case DOCUMENT_FRAGMENT_NODE:var buf=[];node=node.firstChild;while(node){if(node.nodeType!==7&&node.nodeType!==8){buf.push(getTextContent(node))}node=node.nextSibling}return buf.join(\"\");default:return node.nodeValue}}__set__=function(object,key,value){object[\"$$\"+key]=value}}}catch(e){}exports.DOMImplementation=DOMImplementation;exports.XMLSerializer=XMLSerializer},{}],21:[function(require,module,exports){var nameStartChar=/[A-Z_a-z\\xC0-\\xD6\\xD8-\\xF6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/;var nameChar=new RegExp(\"[\\\\-\\\\.0-9\"+nameStartChar.source.slice(1,-1)+\"\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040]\");var tagNamePattern=new RegExp(\"^\"+nameStartChar.source+nameChar.source+\"*(?::\"+nameStartChar.source+nameChar.source+\"*)?$\");var S_TAG=0;var S_ATTR=1;var S_ATTR_SPACE=2;var S_EQ=3;var S_ATTR_NOQUOT_VALUE=4;var S_ATTR_END=5;var S_TAG_SPACE=6;var S_TAG_CLOSE=7;function XMLReader(){}XMLReader.prototype={parse:function(source,defaultNSMap,entityMap){var domBuilder=this.domBuilder;domBuilder.startDocument();_copy(defaultNSMap,defaultNSMap={});parse(source,defaultNSMap,entityMap,domBuilder,this.errorHandler);domBuilder.endDocument()}};function parse(source,defaultNSMapCopy,entityMap,domBuilder,errorHandler){function fixedFromCharCode(code){if(code>65535){code-=65536;var surrogate1=55296+(code>>10),surrogate2=56320+(code&1023);return String.fromCharCode(surrogate1,surrogate2)}else{return String.fromCharCode(code)}}function entityReplacer(a){var k=a.slice(1,-1);if(k in entityMap){return entityMap[k]}else if(k.charAt(0)===\"#\"){return fixedFromCharCode(parseInt(k.substr(1).replace(\"x\",\"0x\")))}else{errorHandler.error(\"entity not found:\"+a);return a}}function appendText(end){if(end>start){var xt=source.substring(start,end).replace(/&#?\\w+;/g,entityReplacer);locator&&position(start);domBuilder.characters(xt,0,end-start);start=end}}function position(p,m){while(p>=lineEnd&&(m=linePattern.exec(source))){lineStart=m.index;lineEnd=lineStart+m[0].length;locator.lineNumber++}locator.columnNumber=p-lineStart+1}var lineStart=0;var lineEnd=0;var linePattern=/.*(?:\\r\\n?|\\n)|.*$/g;var locator=domBuilder.locator;var parseStack=[{currentNSMap:defaultNSMapCopy}];var closeMap={};var start=0;while(true){try{var tagStart=source.indexOf(\"<\",start);if(tagStart<0){if(!source.substr(start).match(/^\\s*$/)){var doc=domBuilder.doc;var text=doc.createTextNode(source.substr(start));doc.appendChild(text);domBuilder.currentElement=text}return}if(tagStart>start){appendText(tagStart)}switch(source.charAt(tagStart+1)){case\"/\":var end=source.indexOf(\">\",tagStart+3);var tagName=source.substring(tagStart+2,end);var config=parseStack.pop();if(end<0){tagName=source.substring(tagStart+2).replace(/[\\s<].*/,\"\");errorHandler.error(\"end tag name: \"+tagName+\" is not complete:\"+config.tagName);end=tagStart+1+tagName.length}else if(tagName.match(/\\s</)){tagName=tagName.replace(/[\\s<].*/,\"\");errorHandler.error(\"end tag name: \"+tagName+\" maybe not complete\");end=tagStart+1+tagName.length}var localNSMap=config.localNSMap;var endMatch=config.tagName==tagName;var endIgnoreCaseMach=endMatch||config.tagName&&config.tagName.toLowerCase()==tagName.toLowerCase();if(endIgnoreCaseMach){domBuilder.endElement(config.uri,config.localName,tagName);if(localNSMap){for(var prefix in localNSMap){domBuilder.endPrefixMapping(prefix)}}if(!endMatch){errorHandler.fatalError(\"end tag name: \"+tagName+\" is not match the current start tagName:\"+config.tagName)}}else{parseStack.push(config)}end++;break;case\"?\":locator&&position(tagStart);end=parseInstruction(source,tagStart,domBuilder);break;case\"!\":locator&&position(tagStart);end=parseDCC(source,tagStart,domBuilder,errorHandler);break;default:locator&&position(tagStart);var el=new ElementAttributes;var currentNSMap=parseStack[parseStack.length-1].currentNSMap;var end=parseElementStartPart(source,tagStart,el,currentNSMap,entityReplacer,errorHandler);var len=el.length;if(!el.closed&&fixSelfClosed(source,end,el.tagName,closeMap)){el.closed=true;if(!entityMap.nbsp){errorHandler.warning(\"unclosed xml attribute\")}}if(locator&&len){var locator2=copyLocator(locator,{});for(var i=0;i<len;i++){var a=el[i];position(a.offset);a.locator=copyLocator(locator,{})}domBuilder.locator=locator2;if(appendElement(el,domBuilder,currentNSMap)){parseStack.push(el)}domBuilder.locator=locator}else{if(appendElement(el,domBuilder,currentNSMap)){parseStack.push(el)}}if(el.uri===\"http://www.w3.org/1999/xhtml\"&&!el.closed){end=parseHtmlSpecialContent(source,end,el.tagName,entityReplacer,domBuilder)}else{end++}}}catch(e){errorHandler.error(\"element parse error: \"+e);end=-1}if(end>start){start=end}else{appendText(Math.max(tagStart,start)+1)}}}function copyLocator(f,t){t.lineNumber=f.lineNumber;t.columnNumber=f.columnNumber;return t}function parseElementStartPart(source,start,el,currentNSMap,entityReplacer,errorHandler){var attrName;var value;var p=++start;var s=S_TAG;while(true){var c=source.charAt(p);switch(c){case\"=\":if(s===S_ATTR){attrName=source.slice(start,p);s=S_EQ}else if(s===S_ATTR_SPACE){s=S_EQ}else{throw new Error(\"attribute equal must after attrName\")}break;case\"'\":case'\"':if(s===S_EQ||s===S_ATTR){if(s===S_ATTR){errorHandler.warning('attribute value must after \"=\"');attrName=source.slice(start,p)}start=p+1;p=source.indexOf(c,start);if(p>0){value=source.slice(start,p).replace(/&#?\\w+;/g,entityReplacer);el.add(attrName,value,start-1);s=S_ATTR_END}else{throw new Error(\"attribute value no end '\"+c+\"' match\")}}else if(s==S_ATTR_NOQUOT_VALUE){value=source.slice(start,p).replace(/&#?\\w+;/g,entityReplacer);el.add(attrName,value,start);errorHandler.warning('attribute \"'+attrName+'\" missed start quot('+c+\")!!\");start=p+1;s=S_ATTR_END}else{throw new Error('attribute value must after \"=\"')}break;case\"/\":switch(s){case S_TAG:el.setTagName(source.slice(start,p));case S_ATTR_END:case S_TAG_SPACE:case S_TAG_CLOSE:s=S_TAG_CLOSE;el.closed=true;case S_ATTR_NOQUOT_VALUE:case S_ATTR:case S_ATTR_SPACE:break;default:throw new Error(\"attribute invalid close char('/')\")}break;case\"\":errorHandler.error(\"unexpected end of input\");if(s==S_TAG){el.setTagName(source.slice(start,p))}return p;case\">\":switch(s){case S_TAG:el.setTagName(source.slice(start,p));case S_ATTR_END:case S_TAG_SPACE:case S_TAG_CLOSE:break;case S_ATTR_NOQUOT_VALUE:case S_ATTR:value=source.slice(start,p);if(value.slice(-1)===\"/\"){el.closed=true;value=value.slice(0,-1)}case S_ATTR_SPACE:if(s===S_ATTR_SPACE){value=attrName}if(s==S_ATTR_NOQUOT_VALUE){errorHandler.warning('attribute \"'+value+'\" missed quot(\")!!');el.add(attrName,value.replace(/&#?\\w+;/g,entityReplacer),start)}else{if(currentNSMap[\"\"]!==\"http://www.w3.org/1999/xhtml\"||!value.match(/^(?:disabled|checked|selected)$/i)){errorHandler.warning('attribute \"'+value+'\" missed value!! \"'+value+'\" instead!!')}el.add(value,value,start)}break;case S_EQ:throw new Error(\"attribute value missed!!\")}return p;case\"\":c=\" \";default:if(c<=\" \"){switch(s){case S_TAG:el.setTagName(source.slice(start,p));s=S_TAG_SPACE;break;case S_ATTR:attrName=source.slice(start,p);s=S_ATTR_SPACE;break;case S_ATTR_NOQUOT_VALUE:var value=source.slice(start,p).replace(/&#?\\w+;/g,entityReplacer);errorHandler.warning('attribute \"'+value+'\" missed quot(\")!!');el.add(attrName,value,start);case S_ATTR_END:s=S_TAG_SPACE;break}}else{switch(s){case S_ATTR_SPACE:var tagName=el.tagName;if(currentNSMap[\"\"]!==\"http://www.w3.org/1999/xhtml\"||!attrName.match(/^(?:disabled|checked|selected)$/i)){errorHandler.warning('attribute \"'+attrName+'\" missed value!! \"'+attrName+'\" instead2!!')}el.add(attrName,attrName,start);start=p;s=S_ATTR;break;case S_ATTR_END:errorHandler.warning('attribute space is required\"'+attrName+'\"!!');case S_TAG_SPACE:s=S_ATTR;start=p;break;case S_EQ:s=S_ATTR_NOQUOT_VALUE;start=p;break;case S_TAG_CLOSE:throw new Error(\"elements closed character '/' and '>' must be connected to\")}}}p++}}function appendElement(el,domBuilder,currentNSMap){var tagName=el.tagName;var localNSMap=null;var i=el.length;while(i--){var a=el[i];var qName=a.qName;var value=a.value;var nsp=qName.indexOf(\":\");if(nsp>0){var prefix=a.prefix=qName.slice(0,nsp);var localName=qName.slice(nsp+1);var nsPrefix=prefix===\"xmlns\"&&localName}else{localName=qName;prefix=null;nsPrefix=qName===\"xmlns\"&&\"\"}a.localName=localName;if(nsPrefix!==false){if(localNSMap==null){localNSMap={};_copy(currentNSMap,currentNSMap={})}currentNSMap[nsPrefix]=localNSMap[nsPrefix]=value;a.uri=\"http://www.w3.org/2000/xmlns/\";domBuilder.startPrefixMapping(nsPrefix,value)}}var i=el.length;while(i--){a=el[i];var prefix=a.prefix;if(prefix){if(prefix===\"xml\"){a.uri=\"http://www.w3.org/XML/1998/namespace\"}if(prefix!==\"xmlns\"){a.uri=currentNSMap[prefix||\"\"]}}}var nsp=tagName.indexOf(\":\");if(nsp>0){prefix=el.prefix=tagName.slice(0,nsp);localName=el.localName=tagName.slice(nsp+1)}else{prefix=null;localName=el.localName=tagName}var ns=el.uri=currentNSMap[prefix||\"\"];domBuilder.startElement(ns,localName,tagName,el);if(el.closed){domBuilder.endElement(ns,localName,tagName);if(localNSMap){for(prefix in localNSMap){domBuilder.endPrefixMapping(prefix)}}}else{el.currentNSMap=currentNSMap;el.localNSMap=localNSMap;return true}}function parseHtmlSpecialContent(source,elStartEnd,tagName,entityReplacer,domBuilder){if(/^(?:script|textarea)$/i.test(tagName)){var elEndStart=source.indexOf(\"</\"+tagName+\">\",elStartEnd);var text=source.substring(elStartEnd+1,elEndStart);if(/[&<]/.test(text)){if(/^script$/i.test(tagName)){domBuilder.characters(text,0,text.length);return elEndStart}text=text.replace(/&#?\\w+;/g,entityReplacer);domBuilder.characters(text,0,text.length);return elEndStart}}return elStartEnd+1}function fixSelfClosed(source,elStartEnd,tagName,closeMap){var pos=closeMap[tagName];if(pos==null){pos=source.lastIndexOf(\"</\"+tagName+\">\");if(pos<elStartEnd){pos=source.lastIndexOf(\"</\"+tagName)}closeMap[tagName]=pos}return pos<elStartEnd}function _copy(source,target){for(var n in source){target[n]=source[n]}}function parseDCC(source,start,domBuilder,errorHandler){var next=source.charAt(start+2);switch(next){case\"-\":if(source.charAt(start+3)===\"-\"){var end=source.indexOf(\"--\\x3e\",start+4);if(end>start){domBuilder.comment(source,start+4,end-start-4);return end+3}else{errorHandler.error(\"Unclosed comment\");return-1}}else{return-1}default:if(source.substr(start+3,6)==\"CDATA[\"){var end=source.indexOf(\"]]>\",start+9);domBuilder.startCDATA();domBuilder.characters(source,start+9,end-start-9);domBuilder.endCDATA();return end+3}var matchs=split(source,start);var len=matchs.length;if(len>1&&/!doctype/i.test(matchs[0][0])){var name=matchs[1][0];var pubid=len>3&&/^public$/i.test(matchs[2][0])&&matchs[3][0];var sysid=len>4&&matchs[4][0];var lastMatch=matchs[len-1];domBuilder.startDTD(name,pubid&&pubid.replace(/^(['\"])(.*?)\\1$/,\"$2\"),sysid&&sysid.replace(/^(['\"])(.*?)\\1$/,\"$2\"));domBuilder.endDTD();return lastMatch.index+lastMatch[0].length}}return-1}function parseInstruction(source,start,domBuilder){var end=source.indexOf(\"?>\",start);if(end){var match=source.substring(start,end).match(/^<\\?(\\S*)\\s*([\\s\\S]*?)\\s*$/);if(match){var len=match[0].length;domBuilder.processingInstruction(match[1],match[2]);return end+2}else{return-1}}return-1}function ElementAttributes(source){}ElementAttributes.prototype={setTagName:function(tagName){if(!tagNamePattern.test(tagName)){throw new Error(\"invalid tagName:\"+tagName)}this.tagName=tagName},add:function(qName,value,offset){if(!tagNamePattern.test(qName)){throw new Error(\"invalid attribute:\"+qName)}this[this.length++]={qName:qName,value:value,offset:offset}},length:0,getLocalName:function(i){return this[i].localName},getLocator:function(i){return this[i].locator},getQName:function(i){return this[i].qName},getURI:function(i){return this[i].uri},getValue:function(i){return this[i].value}};function _set_proto_(thiz,parent){thiz.__proto__=parent;return thiz}if(!(_set_proto_({},_set_proto_.prototype)instanceof _set_proto_)){_set_proto_=function(thiz,parent){function p(){}p.prototype=parent;p=new p;for(parent in thiz){p[parent]=thiz[parent]}return p}}function split(source,start){var match;var buf=[];var reg=/'[^']+'|\"[^\"]+\"|[^\\s<>\\/=]+=?|(\\/?\\s*>|<)/g;reg.lastIndex=start;reg.exec(source);while(match=reg.exec(source)){buf.push(match);if(match[1])return buf}}exports.XMLReader=XMLReader},{}],\"/src/js/docxtemplater.js\":[function(require,module,exports){\"use strict\";var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\")}}var DocUtils=require(\"./doc-utils\");DocUtils.traits=require(\"./traits\");DocUtils.moduleWrapper=require(\"./module-wrapper\");var wrapper=DocUtils.moduleWrapper;var Docxtemplater=function(){function Docxtemplater(){_classCallCheck(this,Docxtemplater);if(arguments.length>0){throw new Error(\"The constructor with parameters have been removed in docxtemplater 3.0, please check the upgrade guide.\")}this.compiled={};this.modules=[];this.setOptions({})}_createClass(Docxtemplater,[{key:\"attachModule\",value:function attachModule(module){this.modules.push(wrapper(module));return this}},{key:\"setOptions\",value:function setOptions(options){var _this=this;this.options=options;Object.keys(DocUtils.defaults).forEach(function(key){var defaultValue=DocUtils.defaults[key];_this[key]=_this.options[key]!=null?_this.options[key]:defaultValue});if(this.zip){this.updateFileTypeConfig()}return this}},{key:\"loadZip\",value:function loadZip(zip){if(zip.loadAsync){throw new Error(\"Docxtemplater doesn't handle JSZip version >=3, see changelog\")}this.zip=zip;this.updateFileTypeConfig();return this}},{key:\"compileFile\",value:function compileFile(fileName){var currentFile=this.createTemplateClass(fileName);currentFile.parse();this.compiled[fileName]=currentFile}},{key:\"compile\",value:function compile(){this.templatedFiles=this.fileTypeConfig.getTemplatedFiles(this.zip);return this}},{key:\"updateFileTypeConfig\",value:function updateFileTypeConfig(){this.fileType=this.zip.files[\"word/document.xml\"]?\"docx\":\"pptx\";this.fileTypeConfig=this.options.fileTypeConfig||Docxtemplater.FileTypeConfig[this.fileType];return this}},{key:\"render\",value:function render(){var _this2=this;this.options.xmlFileNames=[];this.modules=this.fileTypeConfig.baseModules.map(function(moduleFunction){return moduleFunction()}).concat(this.modules);this.options=this.modules.reduce(function(options,module){return module.optionsTransformer(options,_this2)},this.options);this.xmlDocuments=this.options.xmlFileNames.reduce(function(xmlDocuments,fileName){var content=_this2.zip.files[fileName].asText();xmlDocuments[fileName]=DocUtils.str2xml(content);return xmlDocuments},{});this.modules.forEach(function(module){module.set({zip:_this2.zip,xmlDocuments:_this2.xmlDocuments,data:_this2.data})});this.compile();this.modules.forEach(function(module){module.set({compiled:_this2.compiled})});this.templatedFiles.forEach(function(fileName){if(_this2.zip.files[fileName]!=null){_this2.compileFile(fileName)}});this.mapper=this.modules.reduce(function(value,module){return module.getRenderedMap(value)},{});Object.keys(this.mapper).forEach(function(to){var mapped=_this2.mapper[to];var from=mapped.from;var currentFile=_this2.compiled[from];currentFile.setTags(mapped.data);currentFile.render(to);_this2.zip.file(to,currentFile.content)});Object.keys(this.xmlDocuments).forEach(function(fileName){_this2.zip.remove(fileName);var content=DocUtils.xml2str(_this2.xmlDocuments[fileName]);return _this2.zip.file(fileName,content,{})});return this}},{key:\"setData\",value:function setData(data){this.data=data;return this}},{key:\"getZip\",value:function getZip(){return this.zip}},{key:\"createTemplateClass\",value:function createTemplateClass(path){var usedData=this.zip.files[path].asText();return this.createTemplateClassFromContent(usedData,path)}},{key:\"createTemplateClassFromContent\",value:function createTemplateClassFromContent(content,filePath){var _this3=this;var xmltOptions={filePath:filePath};Object.keys(DocUtils.defaults).forEach(function(key){xmltOptions[key]=_this3[key]});xmltOptions.fileTypeConfig=this.fileTypeConfig;xmltOptions.modules=this.modules;return new Docxtemplater.XmlTemplater(content,xmltOptions)}},{key:\"getFullText\",value:function getFullText(path){return this.createTemplateClass(path||this.fileTypeConfig.textPath).getFullText()}},{key:\"getTemplatedFiles\",value:function getTemplatedFiles(){this.compile();return this.templatedFiles}}]);return Docxtemplater}();Docxtemplater.DocUtils=require(\"./doc-utils\");Docxtemplater.Errors=require(\"./errors\");Docxtemplater.XmlTemplater=require(\"./xml-templater\");Docxtemplater.FileTypeConfig=require(\"./file-type-config\");Docxtemplater.XmlMatcher=require(\"./xml-matcher\");module.exports=Docxtemplater},{\"./doc-utils\":1,\"./errors\":2,\"./file-type-config\":3,\"./module-wrapper\":7,\"./traits\":16,\"./xml-matcher\":17,\"./xml-templater\":18}]},{},[])(\"/src/js/docxtemplater.js\")});","/*!\r\n\r\nJSZip - A Javascript class for generating and reading zip files\r\n<http://stuartk.com/jszip>\r\n\r\n(c) 2009-2014 Stuart Knightley <stuart [at] stuartk.com>\r\nDual licenced under the MIT license or GPLv3. See https://raw.github.com/Stuk/jszip/master/LICENSE.markdown.\r\n\r\nJSZip uses the library pako released under the MIT license :\r\nhttps://github.com/nodeca/pako/blob/master/LICENSE\r\n*/\r\n!function(a){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=a();else if(\"function\"==typeof define&&define.amd)define([],a);else{var b;b=\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:this,b.JSZip=a()}}(function(){return function a(b,c,d){function e(g,h){if(!c[g]){if(!b[g]){var i=\"function\"==typeof require&&require;if(!h&&i)return i(g,!0);if(f)return f(g,!0);var j=new Error(\"Cannot find module '\"+g+\"'\");throw j.code=\"MODULE_NOT_FOUND\",j}var k=c[g]={exports:{}};b[g][0].call(k.exports,function(a){var c=b[g][1][a];return e(c?c:a)},k,k.exports,a,b,c,d)}return c[g].exports}for(var f=\"function\"==typeof require&&require,g=0;g<d.length;g++)e(d[g]);return e}({1:[function(a,b,c){\"use strict\";function d(a){if(a){this.data=a,this.length=this.data.length,this.index=0,this.zero=0;for(var b=0;b<this.data.length;b++)a[b]=255&a[b]}}var e=a(\"./dataReader\");d.prototype=new e,d.prototype.byteAt=function(a){return this.data[this.zero+a]},d.prototype.lastIndexOfSignature=function(a){for(var b=a.charCodeAt(0),c=a.charCodeAt(1),d=a.charCodeAt(2),e=a.charCodeAt(3),f=this.length-4;f>=0;--f)if(this.data[f]===b&&this.data[f+1]===c&&this.data[f+2]===d&&this.data[f+3]===e)return f-this.zero;return-1},d.prototype.readData=function(a){if(this.checkOffset(a),0===a)return[];var b=this.data.slice(this.zero+this.index,this.zero+this.index+a);return this.index+=a,b},b.exports=d},{\"./dataReader\":6}],2:[function(a,b,c){\"use strict\";var d=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";c.encode=function(a,b){for(var c,e,f,g,h,i,j,k=\"\",l=0;l<a.length;)c=a.charCodeAt(l++),e=a.charCodeAt(l++),f=a.charCodeAt(l++),g=c>>2,h=(3&c)<<4|e>>4,i=(15&e)<<2|f>>6,j=63&f,isNaN(e)?i=j=64:isNaN(f)&&(j=64),k=k+d.charAt(g)+d.charAt(h)+d.charAt(i)+d.charAt(j);return k},c.decode=function(a,b){var c,e,f,g,h,i,j,k=\"\",l=0;for(a=a.replace(/[^A-Za-z0-9\\+\\/\\=]/g,\"\");l<a.length;)g=d.indexOf(a.charAt(l++)),h=d.indexOf(a.charAt(l++)),i=d.indexOf(a.charAt(l++)),j=d.indexOf(a.charAt(l++)),c=g<<2|h>>4,e=(15&h)<<4|i>>2,f=(3&i)<<6|j,k+=String.fromCharCode(c),64!=i&&(k+=String.fromCharCode(e)),64!=j&&(k+=String.fromCharCode(f));return k}},{}],3:[function(a,b,c){\"use strict\";function d(){this.compressedSize=0,this.uncompressedSize=0,this.crc32=0,this.compressionMethod=null,this.compressedContent=null}d.prototype={getContent:function(){return null},getCompressedContent:function(){return null}},b.exports=d},{}],4:[function(a,b,c){\"use strict\";c.STORE={magic:\"\\0\\0\",compress:function(a,b){return a},uncompress:function(a){return a},compressInputType:null,uncompressInputType:null},c.DEFLATE=a(\"./flate\")},{\"./flate\":9}],5:[function(a,b,c){\"use strict\";var d=a(\"./utils\"),e=[0,1996959894,3993919788,2567524794,124634137,1886057615,3915621685,2657392035,249268274,2044508324,3772115230,2547177864,162941995,2125561021,3887607047,2428444049,498536548,1789927666,4089016648,2227061214,450548861,1843258603,4107580753,2211677639,325883990,1684777152,4251122042,2321926636,335633487,1661365465,4195302755,2366115317,997073096,1281953886,3579855332,2724688242,1006888145,1258607687,3524101629,2768942443,901097722,1119000684,3686517206,2898065728,853044451,1172266101,3705015759,2882616665,651767980,1373503546,3369554304,3218104598,565507253,1454621731,3485111705,3099436303,671266974,1594198024,3322730930,2970347812,795835527,1483230225,3244367275,3060149565,1994146192,31158534,2563907772,4023717930,1907459465,112637215,2680153253,3904427059,2013776290,251722036,2517215374,3775830040,2137656763,141376813,2439277719,3865271297,1802195444,476864866,2238001368,4066508878,1812370925,453092731,2181625025,4111451223,1706088902,314042704,2344532202,4240017532,1658658271,366619977,2362670323,4224994405,1303535960,984961486,2747007092,3569037538,1256170817,1037604311,2765210733,3554079995,1131014506,879679996,2909243462,3663771856,1141124467,855842277,2852801631,3708648649,1342533948,654459306,3188396048,3373015174,1466479909,544179635,3110523913,3462522015,1591671054,702138776,2966460450,3352799412,1504918807,783551873,3082640443,3233442989,3988292384,2596254646,62317068,1957810842,3939845945,2647816111,81470997,1943803523,3814918930,2489596804,225274430,2053790376,3826175755,2466906013,167816743,2097651377,4027552580,2265490386,503444072,1762050814,4150417245,2154129355,426522225,1852507879,4275313526,2312317920,282753626,1742555852,4189708143,2394877945,397917763,1622183637,3604390888,2714866558,953729732,1340076626,3518719985,2797360999,1068828381,1219638859,3624741850,2936675148,906185462,1090812512,3747672003,2825379669,829329135,1181335161,3412177804,3160834842,628085408,1382605366,3423369109,3138078467,570562233,1426400815,3317316542,2998733608,733239954,1555261956,3268935591,3050360625,752459403,1541320221,2607071920,3965973030,1969922972,40735498,2617837225,3943577151,1913087877,83908371,2512341634,3803740692,2075208622,213261112,2463272603,3855990285,2094854071,198958881,2262029012,4057260610,1759359992,534414190,2176718541,4139329115,1873836001,414664567,2282248934,4279200368,1711684554,285281116,2405801727,4167216745,1634467795,376229701,2685067896,3608007406,1308918612,956543938,2808555105,3495958263,1231636301,1047427035,2932959818,3654703836,1088359270,936918e3,2847714899,3736837829,1202900863,817233897,3183342108,3401237130,1404277552,615818150,3134207493,3453421203,1423857449,601450431,3009837614,3294710456,1567103746,711928724,3020668471,3272380065,1510334235,755167117];b.exports=function(a,b){if(\"undefined\"==typeof a||!a.length)return 0;var c=\"string\"!==d.getTypeOf(a);\"undefined\"==typeof b&&(b=0);var f=0,g=0,h=0;b^=-1;for(var i=0,j=a.length;i<j;i++)h=c?a[i]:a.charCodeAt(i),g=255&(b^h),f=e[g],b=b>>>8^f;return b^-1}},{\"./utils\":22}],6:[function(a,b,c){\"use strict\";function d(a){this.data=null,this.length=0,this.index=0,this.zero=0}var e=a(\"./utils\");d.prototype={checkOffset:function(a){this.checkIndex(this.index+a)},checkIndex:function(a){if(this.length<this.zero+a||a<0)throw new Error(\"End of data reached (data length = \"+this.length+\", asked index = \"+a+\"). Corrupted zip ?\")},setIndex:function(a){this.checkIndex(a),this.index=a},skip:function(a){this.setIndex(this.index+a)},byteAt:function(a){},readInt:function(a){var b,c=0;for(this.checkOffset(a),b=this.index+a-1;b>=this.index;b--)c=(c<<8)+this.byteAt(b);return this.index+=a,c},readString:function(a){return e.transformTo(\"string\",this.readData(a))},readData:function(a){},lastIndexOfSignature:function(a){},readDate:function(){var a=this.readInt(4);return new Date((a>>25&127)+1980,(a>>21&15)-1,a>>16&31,a>>11&31,a>>5&63,(31&a)<<1)}},b.exports=d},{\"./utils\":22}],7:[function(a,b,c){\"use strict\";c.base64=!1,c.binary=!1,c.dir=!1,c.createFolders=!1,c.date=null,c.compression=null,c.compressionOptions=null,c.comment=null,c.unixPermissions=null,c.dosPermissions=null},{}],8:[function(a,b,c){\"use strict\";var d=a(\"./utils\");c.string2binary=function(a){return d.string2binary(a)},c.string2Uint8Array=function(a){return d.transformTo(\"uint8array\",a)},c.uint8Array2String=function(a){return d.transformTo(\"string\",a)},c.string2Blob=function(a){var b=d.transformTo(\"arraybuffer\",a);return d.arrayBuffer2Blob(b)},c.arrayBuffer2Blob=function(a){return d.arrayBuffer2Blob(a)},c.transformTo=function(a,b){return d.transformTo(a,b)},c.getTypeOf=function(a){return d.getTypeOf(a)},c.checkSupport=function(a){return d.checkSupport(a)},c.MAX_VALUE_16BITS=d.MAX_VALUE_16BITS,c.MAX_VALUE_32BITS=d.MAX_VALUE_32BITS,c.pretty=function(a){return d.pretty(a)},c.findCompression=function(a){return d.findCompression(a)},c.isRegExp=function(a){return d.isRegExp(a)}},{\"./utils\":22}],9:[function(a,b,c){\"use strict\";var d=\"undefined\"!=typeof Uint8Array&&\"undefined\"!=typeof Uint16Array&&\"undefined\"!=typeof Uint32Array,e=a(\"pako\");c.uncompressInputType=d?\"uint8array\":\"array\",c.compressInputType=d?\"uint8array\":\"array\",c.magic=\"\\b\\0\",c.compress=function(a,b){return e.deflateRaw(a,{level:b.level||-1})},c.uncompress=function(a){return e.inflateRaw(a)}},{pako:25}],10:[function(a,b,c){\"use strict\";function d(a,b){return this instanceof d?(this.files={},this.comment=null,this.root=\"\",a&&this.load(a,b),void(this.clone=function(){var a=new d;for(var b in this)\"function\"!=typeof this[b]&&(a[b]=this[b]);return a})):new d(a,b)}var e=a(\"./base64\");d.prototype=a(\"./object\"),d.prototype.load=a(\"./load\"),d.support=a(\"./support\"),d.defaults=a(\"./defaults\"),d.utils=a(\"./deprecatedPublicUtils\"),d.base64={encode:function(a){return e.encode(a)},decode:function(a){return e.decode(a)}},d.compressions=a(\"./compressions\"),b.exports=d},{\"./base64\":2,\"./compressions\":4,\"./defaults\":7,\"./deprecatedPublicUtils\":8,\"./load\":11,\"./object\":14,\"./support\":18}],11:[function(a,b,c){\"use strict\";var d=a(\"./base64\"),e=a(\"./utf8\"),f=a(\"./utils\"),g=a(\"./zipEntries\");b.exports=function(a,b){var c,h,i,j;for(b=f.extend(b||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:e.utf8decode}),b.base64&&(a=d.decode(a)),h=new g(a,b),c=h.files,i=0;i<c.length;i++)j=c[i],this.file(j.fileNameStr,j.decompressed,{binary:!0,optimizedBinaryString:!0,date:j.date,dir:j.dir,comment:j.fileCommentStr.length?j.fileCommentStr:null,unixPermissions:j.unixPermissions,dosPermissions:j.dosPermissions,createFolders:b.createFolders});return h.zipComment.length&&(this.comment=h.zipComment),this}},{\"./base64\":2,\"./utf8\":21,\"./utils\":22,\"./zipEntries\":23}],12:[function(a,b,c){(function(a){\"use strict\";b.exports=function(b,c){return new a(b,c)},b.exports.test=function(b){return a.isBuffer(b)}}).call(this,\"undefined\"!=typeof Buffer?Buffer:void 0)},{}],13:[function(a,b,c){\"use strict\";function d(a){this.data=a,this.length=this.data.length,this.index=0,this.zero=0}var e=a(\"./uint8ArrayReader\");d.prototype=new e,d.prototype.readData=function(a){this.checkOffset(a);var b=this.data.slice(this.zero+this.index,this.zero+this.index+a);return this.index+=a,b},b.exports=d},{\"./uint8ArrayReader\":19}],14:[function(a,b,c){\"use strict\";var d=a(\"./support\"),e=a(\"./utils\"),f=a(\"./crc32\"),g=a(\"./signature\"),h=a(\"./defaults\"),i=a(\"./base64\"),j=a(\"./compressions\"),k=a(\"./compressedObject\"),l=a(\"./nodeBuffer\"),m=a(\"./utf8\"),n=a(\"./stringWriter\"),o=a(\"./uint8ArrayWriter\"),p=function(a){if(a._data instanceof k&&(a._data=a._data.getContent(),a.options.binary=!0,a.options.base64=!1,\"uint8array\"===e.getTypeOf(a._data))){var b=a._data;a._data=new Uint8Array(b.length),0!==b.length&&a._data.set(b,0)}return a._data},q=function(a){var b=p(a),c=e.getTypeOf(b);return\"string\"===c?!a.options.binary&&d.nodebuffer?l(b,\"utf-8\"):a.asBinary():b},r=function(a){var b=p(this);return null===b||\"undefined\"==typeof b?\"\":(this.options.base64&&(b=i.decode(b)),b=a&&this.options.binary?D.utf8decode(b):e.transformTo(\"string\",b),a||this.options.binary||(b=e.transformTo(\"string\",D.utf8encode(b))),b)},s=function(a,b,c){this.name=a,this.dir=c.dir,this.date=c.date,this.comment=c.comment,this.unixPermissions=c.unixPermissions,this.dosPermissions=c.dosPermissions,this._data=b,this.options=c,this._initialMetadata={dir:c.dir,date:c.date}};s.prototype={asText:function(){return r.call(this,!0)},asBinary:function(){return r.call(this,!1)},asNodeBuffer:function(){var a=q(this);return e.transformTo(\"nodebuffer\",a)},asUint8Array:function(){var a=q(this);return e.transformTo(\"uint8array\",a)},asArrayBuffer:function(){return this.asUint8Array().buffer}};var t=function(a,b){var c,d=\"\";for(c=0;c<b;c++)d+=String.fromCharCode(255&a),a>>>=8;return d},u=function(a){return a=a||{},a.base64!==!0||null!==a.binary&&void 0!==a.binary||(a.binary=!0),a=e.extend(a,h),a.date=a.date||new Date,null!==a.compression&&(a.compression=a.compression.toUpperCase()),a},v=function(a,b,c){var d,f=e.getTypeOf(b);if(c=u(c),\"string\"==typeof c.unixPermissions&&(c.unixPermissions=parseInt(c.unixPermissions,8)),c.unixPermissions&&16384&c.unixPermissions&&(c.dir=!0),c.dosPermissions&&16&c.dosPermissions&&(c.dir=!0),c.dir&&(a=x(a)),c.createFolders&&(d=w(a))&&y.call(this,d,!0),c.dir||null===b||\"undefined\"==typeof b)c.base64=!1,c.binary=!1,b=null,f=null;else if(\"string\"===f)c.binary&&!c.base64&&c.optimizedBinaryString!==!0&&(b=e.string2binary(b));else{if(c.base64=!1,c.binary=!0,!(f||b instanceof k))throw new Error(\"The data of '\"+a+\"' is in an unsupported format !\");\"arraybuffer\"===f&&(b=e.transformTo(\"uint8array\",b))}var g=new s(a,b,c);return this.files[a]=g,g},w=function(a){\"/\"==a.slice(-1)&&(a=a.substring(0,a.length-1));var b=a.lastIndexOf(\"/\");return b>0?a.substring(0,b):\"\"},x=function(a){return\"/\"!=a.slice(-1)&&(a+=\"/\"),a},y=function(a,b){return b=\"undefined\"!=typeof b&&b,a=x(a),this.files[a]||v.call(this,a,null,{dir:!0,createFolders:b}),this.files[a]},z=function(a,b,c){var d,g=new k;return a._data instanceof k?(g.uncompressedSize=a._data.uncompressedSize,g.crc32=a._data.crc32,0===g.uncompressedSize||a.dir?(b=j.STORE,g.compressedContent=\"\",g.crc32=0):a._data.compressionMethod===b.magic?g.compressedContent=a._data.getCompressedContent():(d=a._data.getContent(),g.compressedContent=b.compress(e.transformTo(b.compressInputType,d),c))):(d=q(a),d&&0!==d.length&&!a.dir||(b=j.STORE,d=\"\"),g.uncompressedSize=d.length,g.crc32=f(d),g.compressedContent=b.compress(e.transformTo(b.compressInputType,d),c)),g.compressedSize=g.compressedContent.length,g.compressionMethod=b.magic,g},A=function(a,b){var c=a;return a||(c=b?16893:33204),(65535&c)<<16},B=function(a,b){return 63&(a||0)},C=function(a,b,c,d,h,i){var j,k,l,n,o=(c.compressedContent,i!==m.utf8encode),p=e.transformTo(\"string\",i(b.name)),q=e.transformTo(\"string\",m.utf8encode(b.name)),r=b.comment||\"\",s=e.transformTo(\"string\",i(r)),u=e.transformTo(\"string\",m.utf8encode(r)),v=q.length!==b.name.length,w=u.length!==r.length,x=b.options,y=\"\",z=\"\",C=\"\";l=b._initialMetadata.dir!==b.dir?b.dir:x.dir,n=b._initialMetadata.date!==b.date?b.date:x.date;var D=0,E=0;l&&(D|=16),\"UNIX\"===h?(E=798,D|=A(b.unixPermissions,l)):(E=20,D|=B(b.dosPermissions,l)),j=n.getHours(),j<<=6,j|=n.getMinutes(),j<<=5,j|=n.getSeconds()/2,k=n.getFullYear()-1980,k<<=4,k|=n.getMonth()+1,k<<=5,k|=n.getDate(),v&&(z=t(1,1)+t(f(p),4)+q,y+=\"up\"+t(z.length,2)+z),w&&(C=t(1,1)+t(this.crc32(s),4)+u,y+=\"uc\"+t(C.length,2)+C);var F=\"\";F+=\"\\n\\0\",F+=o||!v&&!w?\"\\0\\0\":\"\\0\\b\",F+=c.compressionMethod,F+=t(j,2),F+=t(k,2),F+=t(c.crc32,4),F+=t(c.compressedSize,4),F+=t(c.uncompressedSize,4),F+=t(p.length,2),F+=t(y.length,2);var G=g.LOCAL_FILE_HEADER+F+p+y,H=g.CENTRAL_FILE_HEADER+t(E,2)+F+t(s.length,2)+\"\\0\\0\\0\\0\"+t(D,4)+t(d,4)+p+y+s;return{fileRecord:G,dirRecord:H,compressedObject:c}},D={load:function(a,b){throw new Error(\"Load method is not defined. Is the file jszip-load.js included ?\")},filter:function(a){var b,c,d,f,g=[];for(b in this.files)this.files.hasOwnProperty(b)&&(d=this.files[b],f=new s(d.name,d._data,e.extend(d.options)),c=b.slice(this.root.length,b.length),b.slice(0,this.root.length)===this.root&&a(c,f)&&g.push(f));return g},file:function(a,b,c){if(1===arguments.length){if(e.isRegExp(a)){var d=a;return this.filter(function(a,b){return!b.dir&&d.test(a)})}return this.filter(function(b,c){return!c.dir&&b===a})[0]||null}return a=this.root+a,v.call(this,a,b,c),this},folder:function(a){if(!a)return this;if(e.isRegExp(a))return this.filter(function(b,c){return c.dir&&a.test(b)});var b=this.root+a,c=y.call(this,b),d=this.clone();return d.root=c.name,d},remove:function(a){a=this.root+a;var b=this.files[a];if(b||(\"/\"!=a.slice(-1)&&(a+=\"/\"),b=this.files[a]),b&&!b.dir)delete this.files[a];else for(var c=this.filter(function(b,c){return c.name.slice(0,a.length)===a}),d=0;d<c.length;d++)delete this.files[c[d].name];return this},generate:function(a){a=e.extend(a||{},{base64:!0,compression:\"STORE\",compressionOptions:null,type:\"base64\",platform:\"DOS\",comment:null,mimeType:\"application/zip\",encodeFileName:m.utf8encode}),e.checkSupport(a.type),\"darwin\"!==a.platform&&\"freebsd\"!==a.platform&&\"linux\"!==a.platform&&\"sunos\"!==a.platform||(a.platform=\"UNIX\"),\"win32\"===a.platform&&(a.platform=\"DOS\");var b,c,d=[],f=0,h=0,k=e.transformTo(\"string\",a.encodeFileName(a.comment||this.comment||\"\"));for(var l in this.files)if(this.files.hasOwnProperty(l)){var p=this.files[l],q=p.options.compression||a.compression.toUpperCase(),r=j[q];if(!r)throw new Error(q+\" is not a valid compression method !\");var s=p.options.compressionOptions||a.compressionOptions||{},u=z.call(this,p,r,s),v=C.call(this,l,p,u,f,a.platform,a.encodeFileName);f+=v.fileRecord.length+u.compressedSize,h+=v.dirRecord.length,d.push(v)}var w=\"\";w=g.CENTRAL_DIRECTORY_END+\"\\0\\0\\0\\0\"+t(d.length,2)+t(d.length,2)+t(h,4)+t(f,4)+t(k.length,2)+k;var x=a.type.toLowerCase();for(b=\"uint8array\"===x||\"arraybuffer\"===x||\"blob\"===x||\"nodebuffer\"===x?new o(f+h+w.length):new n(f+h+w.length),c=0;c<d.length;c++)b.append(d[c].fileRecord),b.append(d[c].compressedObject.compressedContent);for(c=0;c<d.length;c++)b.append(d[c].dirRecord);b.append(w);var y=b.finalize();switch(a.type.toLowerCase()){case\"uint8array\":case\"arraybuffer\":case\"nodebuffer\":return e.transformTo(a.type.toLowerCase(),y);case\"blob\":return e.arrayBuffer2Blob(e.transformTo(\"arraybuffer\",y),a.mimeType);case\"base64\":return a.base64?i.encode(y):y;default:return y}},crc32:function(a,b){return f(a,b)},utf8encode:function(a){return e.transformTo(\"string\",m.utf8encode(a))},utf8decode:function(a){return m.utf8decode(a)}};b.exports=D},{\"./base64\":2,\"./compressedObject\":3,\"./compressions\":4,\"./crc32\":5,\"./defaults\":7,\"./nodeBuffer\":12,\"./signature\":15,\"./stringWriter\":17,\"./support\":18,\"./uint8ArrayWriter\":20,\"./utf8\":21,\"./utils\":22}],15:[function(a,b,c){\"use strict\";c.LOCAL_FILE_HEADER=\"PK\u0003\u0004\",c.CENTRAL_FILE_HEADER=\"PK\u0001\u0002\",c.CENTRAL_DIRECTORY_END=\"PK\u0005\u0006\",c.ZIP64_CENTRAL_DIRECTORY_LOCATOR=\"PK\u0006\u0007\",c.ZIP64_CENTRAL_DIRECTORY_END=\"PK\u0006\u0006\",c.DATA_DESCRIPTOR=\"PK\u0007\\b\"},{}],16:[function(a,b,c){\"use strict\";function d(a,b){this.data=a,b||(this.data=f.string2binary(this.data)),this.length=this.data.length,this.index=0,this.zero=0}var e=a(\"./dataReader\"),f=a(\"./utils\");d.prototype=new e,d.prototype.byteAt=function(a){return this.data.charCodeAt(this.zero+a)},d.prototype.lastIndexOfSignature=function(a){return this.data.lastIndexOf(a)-this.zero},d.prototype.readData=function(a){this.checkOffset(a);var b=this.data.slice(this.zero+this.index,this.zero+this.index+a);return this.index+=a,b},b.exports=d},{\"./dataReader\":6,\"./utils\":22}],17:[function(a,b,c){\"use strict\";var d=a(\"./utils\"),e=function(){this.data=[]};e.prototype={append:function(a){a=d.transformTo(\"string\",a),this.data.push(a)},finalize:function(){return this.data.join(\"\")}},b.exports=e},{\"./utils\":22}],18:[function(a,b,c){(function(a){\"use strict\";if(c.base64=!0,c.array=!0,c.string=!0,c.arraybuffer=\"undefined\"!=typeof ArrayBuffer&&\"undefined\"!=typeof Uint8Array,c.nodebuffer=\"undefined\"!=typeof a,c.uint8array=\"undefined\"!=typeof Uint8Array,\"undefined\"==typeof ArrayBuffer)c.blob=!1;else{var b=new ArrayBuffer(0);try{c.blob=0===new Blob([b],{type:\"application/zip\"}).size}catch(d){try{var e=window.BlobBuilder||window.WebKitBlobBuilder||window.MozBlobBuilder||window.MSBlobBuilder,f=new e;f.append(b),c.blob=0===f.getBlob(\"application/zip\").size}catch(d){c.blob=!1}}}}).call(this,\"undefined\"!=typeof Buffer?Buffer:void 0)},{}],19:[function(a,b,c){\"use strict\";function d(a){a&&(this.data=a,this.length=this.data.length,this.index=0,this.zero=0)}var e=a(\"./arrayReader\");d.prototype=new e,d.prototype.readData=function(a){if(this.checkOffset(a),0===a)return new Uint8Array(0);var b=this.data.subarray(this.zero+this.index,this.zero+this.index+a);return this.index+=a,b},b.exports=d},{\"./arrayReader\":1}],20:[function(a,b,c){\"use strict\";var d=a(\"./utils\"),e=function(a){this.data=new Uint8Array(a),this.index=0};e.prototype={append:function(a){0!==a.length&&(a=d.transformTo(\"uint8array\",a),this.data.set(a,this.index),this.index+=a.length)},finalize:function(){return this.data}},b.exports=e},{\"./utils\":22}],21:[function(a,b,c){\"use strict\";for(var d=a(\"./utils\"),e=a(\"./support\"),f=a(\"./nodeBuffer\"),g=new Array(256),h=0;h<256;h++)g[h]=h>=252?6:h>=248?5:h>=240?4:h>=224?3:h>=192?2:1;g[254]=g[254]=1;var i=function(a){var b,c,d,f,g,h=a.length,i=0;for(f=0;f<h;f++)c=a.charCodeAt(f),55296===(64512&c)&&f+1<h&&(d=a.charCodeAt(f+1),56320===(64512&d)&&(c=65536+(c-55296<<10)+(d-56320),f++)),i+=c<128?1:c<2048?2:c<65536?3:4;for(b=e.uint8array?new Uint8Array(i):new Array(i),g=0,f=0;g<i;f++)c=a.charCodeAt(f),55296===(64512&c)&&f+1<h&&(d=a.charCodeAt(f+1),56320===(64512&d)&&(c=65536+(c-55296<<10)+(d-56320),f++)),c<128?b[g++]=c:c<2048?(b[g++]=192|c>>>6,b[g++]=128|63&c):c<65536?(b[g++]=224|c>>>12,b[g++]=128|c>>>6&63,b[g++]=128|63&c):(b[g++]=240|c>>>18,b[g++]=128|c>>>12&63,b[g++]=128|c>>>6&63,b[g++]=128|63&c);return b},j=function(a,b){var c;for(b=b||a.length,b>a.length&&(b=a.length),c=b-1;c>=0&&128===(192&a[c]);)c--;return c<0?b:0===c?b:c+g[a[c]]>b?c:b},k=function(a){var b,c,e,f,h=a.length,i=new Array(2*h);for(c=0,b=0;b<h;)if(e=a[b++],e<128)i[c++]=e;else if(f=g[e],f>4)i[c++]=65533,b+=f-1;else{for(e&=2===f?31:3===f?15:7;f>1&&b<h;)e=e<<6|63&a[b++],f--;f>1?i[c++]=65533:e<65536?i[c++]=e:(e-=65536,i[c++]=55296|e>>10&1023,i[c++]=56320|1023&e)}return i.length!==c&&(i.subarray?i=i.subarray(0,c):i.length=c),d.applyFromCharCode(i)};c.utf8encode=function(a){return e.nodebuffer?f(a,\"utf-8\"):i(a)},c.utf8decode=function(a){if(e.nodebuffer)return d.transformTo(\"nodebuffer\",a).toString(\"utf-8\");a=d.transformTo(e.uint8array?\"uint8array\":\"array\",a);for(var b=[],c=0,f=a.length,g=65536;c<f;){var h=j(a,Math.min(c+g,f));e.uint8array?b.push(k(a.subarray(c,h))):b.push(k(a.slice(c,h))),c=h}return b.join(\"\")}},{\"./nodeBuffer\":12,\"./support\":18,\"./utils\":22}],22:[function(a,b,c){\"use strict\";function d(a){return a}function e(a,b){for(var c=0;c<a.length;++c)b[c]=255&a.charCodeAt(c);return b}function f(a){var b=65536,d=[],e=a.length,f=c.getTypeOf(a),g=0,h=!0;try{switch(f){case\"uint8array\":String.fromCharCode.apply(null,new Uint8Array(0));break;case\"nodebuffer\":String.fromCharCode.apply(null,j(0))}}catch(i){h=!1}if(!h){for(var k=\"\",l=0;l<a.length;l++)k+=String.fromCharCode(a[l]);return k}for(;g<e&&b>1;)try{\"array\"===f||\"nodebuffer\"===f?d.push(String.fromCharCode.apply(null,a.slice(g,Math.min(g+b,e)))):d.push(String.fromCharCode.apply(null,a.subarray(g,Math.min(g+b,e)))),g+=b}catch(i){b=Math.floor(b/2)}return d.join(\"\")}function g(a,b){for(var c=0;c<a.length;c++)b[c]=a[c];return b}var h=a(\"./support\"),i=a(\"./compressions\"),j=a(\"./nodeBuffer\");c.string2binary=function(a){for(var b=\"\",c=0;c<a.length;c++)b+=String.fromCharCode(255&a.charCodeAt(c));return b},c.arrayBuffer2Blob=function(a,b){c.checkSupport(\"blob\"),b=b||\"application/zip\";try{return new Blob([a],{type:b})}catch(d){try{var e=window.BlobBuilder||window.WebKitBlobBuilder||window.MozBlobBuilder||window.MSBlobBuilder,f=new e;return f.append(a),f.getBlob(b)}catch(d){throw new Error(\"Bug : can't construct the Blob.\")}}},c.applyFromCharCode=f;var k={};k.string={string:d,array:function(a){return e(a,new Array(a.length))},arraybuffer:function(a){return k.string.uint8array(a).buffer},uint8array:function(a){return e(a,new Uint8Array(a.length))},nodebuffer:function(a){return e(a,j(a.length))}},k.array={string:f,array:d,arraybuffer:function(a){return new Uint8Array(a).buffer},uint8array:function(a){return new Uint8Array(a)},nodebuffer:function(a){return j(a)}},k.arraybuffer={string:function(a){return f(new Uint8Array(a))},array:function(a){return g(new Uint8Array(a),new Array(a.byteLength))},arraybuffer:d,uint8array:function(a){return new Uint8Array(a)},nodebuffer:function(a){return j(new Uint8Array(a))}},k.uint8array={string:f,array:function(a){return g(a,new Array(a.length))},arraybuffer:function(a){return a.buffer},uint8array:d,nodebuffer:function(a){return j(a)}},k.nodebuffer={string:f,array:function(a){return g(a,new Array(a.length))},arraybuffer:function(a){return k.nodebuffer.uint8array(a).buffer},uint8array:function(a){return g(a,new Uint8Array(a.length))},nodebuffer:d},c.transformTo=function(a,b){if(b||(b=\"\"),!a)return b;c.checkSupport(a);var d=c.getTypeOf(b),e=k[d][a](b);return e},c.getTypeOf=function(a){return\"string\"==typeof a?\"string\":\"[object Array]\"===Object.prototype.toString.call(a)?\"array\":h.nodebuffer&&j.test(a)?\"nodebuffer\":h.uint8array&&a instanceof Uint8Array?\"uint8array\":h.arraybuffer&&a instanceof ArrayBuffer?\"arraybuffer\":void 0},c.checkSupport=function(a){var b=h[a.toLowerCase()];if(!b)throw new Error(a+\" is not supported by this browser\")},c.MAX_VALUE_16BITS=65535,c.MAX_VALUE_32BITS=-1,c.pretty=function(a){var b,c,d=\"\";for(c=0;c<(a||\"\").length;c++)b=a.charCodeAt(c),d+=\"\\\\x\"+(b<16?\"0\":\"\")+b.toString(16).toUpperCase();return d},c.findCompression=function(a){for(var b in i)if(i.hasOwnProperty(b)&&i[b].magic===a)return i[b];return null},c.isRegExp=function(a){return\"[object RegExp]\"===Object.prototype.toString.call(a)},c.extend=function(){var a,b,c={};for(a=0;a<arguments.length;a++)for(b in arguments[a])arguments[a].hasOwnProperty(b)&&\"undefined\"==typeof c[b]&&(c[b]=arguments[a][b]);return c}},{\"./compressions\":4,\"./nodeBuffer\":12,\"./support\":18}],23:[function(a,b,c){\"use strict\";function d(a,b){this.files=[],this.loadOptions=b,a&&this.load(a)}var e=a(\"./stringReader\"),f=a(\"./nodeBufferReader\"),g=a(\"./uint8ArrayReader\"),h=a(\"./arrayReader\"),i=a(\"./utils\"),j=a(\"./signature\"),k=a(\"./zipEntry\"),l=a(\"./support\");a(\"./object\");d.prototype={checkSignature:function(a){var b=this.reader.readString(4);if(b!==a)throw new Error(\"Corrupted zip or bug : unexpected signature (\"+i.pretty(b)+\", expected \"+i.pretty(a)+\")\")},isSignature:function(a,b){var c=this.reader.index;this.reader.setIndex(a);var d=this.reader.readString(4),e=d===b;return this.reader.setIndex(c),e},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var a=this.reader.readData(this.zipCommentLength),b=l.uint8array?\"uint8array\":\"array\",c=i.transformTo(b,a);this.zipComment=this.loadOptions.decodeFileName(c)},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.versionMadeBy=this.reader.readString(2),this.versionNeeded=this.reader.readInt(2),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var a,b,c,d=this.zip64EndOfCentralSize-44,e=0;e<d;)a=this.reader.readInt(2),b=this.reader.readInt(4),c=this.reader.readString(b),this.zip64ExtensibleData[a]={id:a,length:b,value:c}},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),this.disksCount>1)throw new Error(\"Multi-volumes zip are not supported\")},readLocalFiles:function(){var a,b;for(a=0;a<this.files.length;a++)b=this.files[a],this.reader.setIndex(b.localHeaderOffset),this.checkSignature(j.LOCAL_FILE_HEADER),b.readLocalPart(this.reader),b.handleUTF8(),b.processAttributes()},readCentralDir:function(){var a;for(this.reader.setIndex(this.centralDirOffset);this.reader.readString(4)===j.CENTRAL_FILE_HEADER;)a=new k({zip64:this.zip64},this.loadOptions),a.readCentralPart(this.reader),this.files.push(a);if(this.centralDirRecords!==this.files.length&&0!==this.centralDirRecords&&0===this.files.length)throw new Error(\"Corrupted zip or bug: expected \"+this.centralDirRecords+\" records in central dir, got \"+this.files.length)},readEndOfCentral:function(){var a=this.reader.lastIndexOfSignature(j.CENTRAL_DIRECTORY_END);if(a<0){var b=!this.isSignature(0,j.LOCAL_FILE_HEADER);throw b?new Error(\"Can't find end of central directory : is this a zip file ? If it is, see http://stuk.github.io/jszip/documentation/howto/read_zip.html\"):new Error(\"Corrupted zip : can't find end of central directory\")}this.reader.setIndex(a);var c=a;if(this.checkSignature(j.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===i.MAX_VALUE_16BITS||this.diskWithCentralDirStart===i.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===i.MAX_VALUE_16BITS||this.centralDirRecords===i.MAX_VALUE_16BITS||this.centralDirSize===i.MAX_VALUE_32BITS||this.centralDirOffset===i.MAX_VALUE_32BITS){if(this.zip64=!0,a=this.reader.lastIndexOfSignature(j.ZIP64_CENTRAL_DIRECTORY_LOCATOR),a<0)throw new Error(\"Corrupted zip : can't find the ZIP64 end of central directory locator\");if(this.reader.setIndex(a),this.checkSignature(j.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,j.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(j.ZIP64_CENTRAL_DIRECTORY_END),this.relativeOffsetEndOfZip64CentralDir<0))throw new Error(\"Corrupted zip : can't find the ZIP64 end of central directory\");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(j.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral()}var d=this.centralDirOffset+this.centralDirSize;this.zip64&&(d+=20,d+=12+this.zip64EndOfCentralSize);var e=c-d;if(e>0)this.isSignature(c,j.CENTRAL_FILE_HEADER)||(this.reader.zero=e);else if(e<0)throw new Error(\"Corrupted zip: missing \"+Math.abs(e)+\" bytes.\")},prepareReader:function(a){var b=i.getTypeOf(a);if(i.checkSupport(b),\"string\"!==b||l.uint8array)if(\"nodebuffer\"===b)this.reader=new f(a);else if(l.uint8array)this.reader=new g(i.transformTo(\"uint8array\",a));else{if(!l.array)throw new Error(\"Unexpected error: unsupported type '\"+b+\"'\");this.reader=new h(i.transformTo(\"array\",a))}else this.reader=new e(a,this.loadOptions.optimizedBinaryString)},load:function(a){this.prepareReader(a),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles()}},b.exports=d},{\"./arrayReader\":1,\"./nodeBufferReader\":13,\"./object\":14,\"./signature\":15,\"./stringReader\":16,\"./support\":18,\"./uint8ArrayReader\":19,\"./utils\":22,\"./zipEntry\":24}],24:[function(a,b,c){\"use strict\";function d(a,b){this.options=a,this.loadOptions=b}var e=a(\"./stringReader\"),f=a(\"./utils\"),g=a(\"./compressedObject\"),h=a(\"./object\"),i=a(\"./support\"),j=0,k=3;d.prototype={isEncrypted:function(){return 1===(1&this.bitFlag)},useUTF8:function(){return 2048===(2048&this.bitFlag)},prepareCompressedContent:function(a,b,c){return function(){var d=a.index;a.setIndex(b);var e=a.readData(c);return a.setIndex(d),e}},prepareContent:function(a,b,c,d,e){return function(){var a=f.transformTo(d.uncompressInputType,this.getCompressedContent()),b=d.uncompress(a);if(b.length!==e)throw new Error(\"Bug : uncompressed data size mismatch\");return b}},readLocalPart:function(a){var b,c;if(a.skip(22),this.fileNameLength=a.readInt(2),c=a.readInt(2),this.fileName=a.readData(this.fileNameLength),a.skip(c),this.compressedSize==-1||this.uncompressedSize==-1)throw new Error(\"Bug or corrupted zip : didn't get enough informations from the central directory (compressedSize == -1 || uncompressedSize == -1)\");if(b=f.findCompression(this.compressionMethod),null===b)throw new Error(\"Corrupted zip : compression \"+f.pretty(this.compressionMethod)+\" unknown (inner file : \"+f.transformTo(\"string\",this.fileName)+\")\");if(this.decompressed=new g,this.decompressed.compressedSize=this.compressedSize,this.decompressed.uncompressedSize=this.uncompressedSize,this.decompressed.crc32=this.crc32,this.decompressed.compressionMethod=this.compressionMethod,this.decompressed.getCompressedContent=this.prepareCompressedContent(a,a.index,this.compressedSize,b),this.decompressed.getContent=this.prepareContent(a,a.index,this.compressedSize,b,this.uncompressedSize),this.loadOptions.checkCRC32&&(this.decompressed=f.transformTo(\"string\",this.decompressed.getContent()),h.crc32(this.decompressed)!==this.crc32))throw new Error(\"Corrupted zip : CRC32 mismatch\");\r\n},readCentralPart:function(a){if(this.versionMadeBy=a.readInt(2),this.versionNeeded=a.readInt(2),this.bitFlag=a.readInt(2),this.compressionMethod=a.readString(2),this.date=a.readDate(),this.crc32=a.readInt(4),this.compressedSize=a.readInt(4),this.uncompressedSize=a.readInt(4),this.fileNameLength=a.readInt(2),this.extraFieldsLength=a.readInt(2),this.fileCommentLength=a.readInt(2),this.diskNumberStart=a.readInt(2),this.internalFileAttributes=a.readInt(2),this.externalFileAttributes=a.readInt(4),this.localHeaderOffset=a.readInt(4),this.isEncrypted())throw new Error(\"Encrypted zip are not supported\");this.fileName=a.readData(this.fileNameLength),this.readExtraFields(a),this.parseZIP64ExtraField(a),this.fileComment=a.readData(this.fileCommentLength)},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var a=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),a===j&&(this.dosPermissions=63&this.externalFileAttributes),a===k&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||\"/\"!==this.fileNameStr.slice(-1)||(this.dir=!0)},parseZIP64ExtraField:function(a){if(this.extraFields[1]){var b=new e(this.extraFields[1].value);this.uncompressedSize===f.MAX_VALUE_32BITS&&(this.uncompressedSize=b.readInt(8)),this.compressedSize===f.MAX_VALUE_32BITS&&(this.compressedSize=b.readInt(8)),this.localHeaderOffset===f.MAX_VALUE_32BITS&&(this.localHeaderOffset=b.readInt(8)),this.diskNumberStart===f.MAX_VALUE_32BITS&&(this.diskNumberStart=b.readInt(4))}},readExtraFields:function(a){var b,c,d,e=a.index;for(this.extraFields=this.extraFields||{};a.index<e+this.extraFieldsLength;)b=a.readInt(2),c=a.readInt(2),d=a.readString(c),this.extraFields[b]={id:b,length:c,value:d}},handleUTF8:function(){var a=i.uint8array?\"uint8array\":\"array\";if(this.useUTF8())this.fileNameStr=h.utf8decode(this.fileName),this.fileCommentStr=h.utf8decode(this.fileComment);else{var b=this.findExtraFieldUnicodePath();if(null!==b)this.fileNameStr=b;else{var c=f.transformTo(a,this.fileName);this.fileNameStr=this.loadOptions.decodeFileName(c)}var d=this.findExtraFieldUnicodeComment();if(null!==d)this.fileCommentStr=d;else{var e=f.transformTo(a,this.fileComment);this.fileCommentStr=this.loadOptions.decodeFileName(e)}}},findExtraFieldUnicodePath:function(){var a=this.extraFields[28789];if(a){var b=new e(a.value);return 1!==b.readInt(1)?null:h.crc32(this.fileName)!==b.readInt(4)?null:h.utf8decode(b.readString(a.length-5))}return null},findExtraFieldUnicodeComment:function(){var a=this.extraFields[25461];if(a){var b=new e(a.value);return 1!==b.readInt(1)?null:h.crc32(this.fileComment)!==b.readInt(4)?null:h.utf8decode(b.readString(a.length-5))}return null}},b.exports=d},{\"./compressedObject\":3,\"./object\":14,\"./stringReader\":16,\"./support\":18,\"./utils\":22}],25:[function(a,b,c){\"use strict\";var d=a(\"./lib/utils/common\").assign,e=a(\"./lib/deflate\"),f=a(\"./lib/inflate\"),g=a(\"./lib/zlib/constants\"),h={};d(h,e,f,g),b.exports=h},{\"./lib/deflate\":26,\"./lib/inflate\":27,\"./lib/utils/common\":28,\"./lib/zlib/constants\":31}],26:[function(a,b,c){\"use strict\";function d(a){if(!(this instanceof d))return new d(a);this.options=i.assign({level:s,method:u,chunkSize:16384,windowBits:15,memLevel:8,strategy:t,to:\"\"},a||{});var b=this.options;b.raw&&b.windowBits>0?b.windowBits=-b.windowBits:b.gzip&&b.windowBits>0&&b.windowBits<16&&(b.windowBits+=16),this.err=0,this.msg=\"\",this.ended=!1,this.chunks=[],this.strm=new l,this.strm.avail_out=0;var c=h.deflateInit2(this.strm,b.level,b.method,b.windowBits,b.memLevel,b.strategy);if(c!==p)throw new Error(k[c]);if(b.header&&h.deflateSetHeader(this.strm,b.header),b.dictionary){var e;if(e=\"string\"==typeof b.dictionary?j.string2buf(b.dictionary):\"[object ArrayBuffer]\"===m.call(b.dictionary)?new Uint8Array(b.dictionary):b.dictionary,c=h.deflateSetDictionary(this.strm,e),c!==p)throw new Error(k[c]);this._dict_set=!0}}function e(a,b){var c=new d(b);if(c.push(a,!0),c.err)throw c.msg;return c.result}function f(a,b){return b=b||{},b.raw=!0,e(a,b)}function g(a,b){return b=b||{},b.gzip=!0,e(a,b)}var h=a(\"./zlib/deflate\"),i=a(\"./utils/common\"),j=a(\"./utils/strings\"),k=a(\"./zlib/messages\"),l=a(\"./zlib/zstream\"),m=Object.prototype.toString,n=0,o=4,p=0,q=1,r=2,s=-1,t=0,u=8;d.prototype.push=function(a,b){var c,d,e=this.strm,f=this.options.chunkSize;if(this.ended)return!1;d=b===~~b?b:b===!0?o:n,\"string\"==typeof a?e.input=j.string2buf(a):\"[object ArrayBuffer]\"===m.call(a)?e.input=new Uint8Array(a):e.input=a,e.next_in=0,e.avail_in=e.input.length;do{if(0===e.avail_out&&(e.output=new i.Buf8(f),e.next_out=0,e.avail_out=f),c=h.deflate(e,d),c!==q&&c!==p)return this.onEnd(c),this.ended=!0,!1;0!==e.avail_out&&(0!==e.avail_in||d!==o&&d!==r)||(\"string\"===this.options.to?this.onData(j.buf2binstring(i.shrinkBuf(e.output,e.next_out))):this.onData(i.shrinkBuf(e.output,e.next_out)))}while((e.avail_in>0||0===e.avail_out)&&c!==q);return d===o?(c=h.deflateEnd(this.strm),this.onEnd(c),this.ended=!0,c===p):d!==r||(this.onEnd(p),e.avail_out=0,!0)},d.prototype.onData=function(a){this.chunks.push(a)},d.prototype.onEnd=function(a){a===p&&(\"string\"===this.options.to?this.result=this.chunks.join(\"\"):this.result=i.flattenChunks(this.chunks)),this.chunks=[],this.err=a,this.msg=this.strm.msg},c.Deflate=d,c.deflate=e,c.deflateRaw=f,c.gzip=g},{\"./utils/common\":28,\"./utils/strings\":29,\"./zlib/deflate\":33,\"./zlib/messages\":38,\"./zlib/zstream\":40}],27:[function(a,b,c){\"use strict\";function d(a){if(!(this instanceof d))return new d(a);this.options=h.assign({chunkSize:16384,windowBits:0,to:\"\"},a||{});var b=this.options;b.raw&&b.windowBits>=0&&b.windowBits<16&&(b.windowBits=-b.windowBits,0===b.windowBits&&(b.windowBits=-15)),!(b.windowBits>=0&&b.windowBits<16)||a&&a.windowBits||(b.windowBits+=32),b.windowBits>15&&b.windowBits<48&&0===(15&b.windowBits)&&(b.windowBits|=15),this.err=0,this.msg=\"\",this.ended=!1,this.chunks=[],this.strm=new l,this.strm.avail_out=0;var c=g.inflateInit2(this.strm,b.windowBits);if(c!==j.Z_OK)throw new Error(k[c]);this.header=new m,g.inflateGetHeader(this.strm,this.header)}function e(a,b){var c=new d(b);if(c.push(a,!0),c.err)throw c.msg;return c.result}function f(a,b){return b=b||{},b.raw=!0,e(a,b)}var g=a(\"./zlib/inflate\"),h=a(\"./utils/common\"),i=a(\"./utils/strings\"),j=a(\"./zlib/constants\"),k=a(\"./zlib/messages\"),l=a(\"./zlib/zstream\"),m=a(\"./zlib/gzheader\"),n=Object.prototype.toString;d.prototype.push=function(a,b){var c,d,e,f,k,l,m=this.strm,o=this.options.chunkSize,p=this.options.dictionary,q=!1;if(this.ended)return!1;d=b===~~b?b:b===!0?j.Z_FINISH:j.Z_NO_FLUSH,\"string\"==typeof a?m.input=i.binstring2buf(a):\"[object ArrayBuffer]\"===n.call(a)?m.input=new Uint8Array(a):m.input=a,m.next_in=0,m.avail_in=m.input.length;do{if(0===m.avail_out&&(m.output=new h.Buf8(o),m.next_out=0,m.avail_out=o),c=g.inflate(m,j.Z_NO_FLUSH),c===j.Z_NEED_DICT&&p&&(l=\"string\"==typeof p?i.string2buf(p):\"[object ArrayBuffer]\"===n.call(p)?new Uint8Array(p):p,c=g.inflateSetDictionary(this.strm,l)),c===j.Z_BUF_ERROR&&q===!0&&(c=j.Z_OK,q=!1),c!==j.Z_STREAM_END&&c!==j.Z_OK)return this.onEnd(c),this.ended=!0,!1;m.next_out&&(0!==m.avail_out&&c!==j.Z_STREAM_END&&(0!==m.avail_in||d!==j.Z_FINISH&&d!==j.Z_SYNC_FLUSH)||(\"string\"===this.options.to?(e=i.utf8border(m.output,m.next_out),f=m.next_out-e,k=i.buf2string(m.output,e),m.next_out=f,m.avail_out=o-f,f&&h.arraySet(m.output,m.output,e,f,0),this.onData(k)):this.onData(h.shrinkBuf(m.output,m.next_out)))),0===m.avail_in&&0===m.avail_out&&(q=!0)}while((m.avail_in>0||0===m.avail_out)&&c!==j.Z_STREAM_END);return c===j.Z_STREAM_END&&(d=j.Z_FINISH),d===j.Z_FINISH?(c=g.inflateEnd(this.strm),this.onEnd(c),this.ended=!0,c===j.Z_OK):d!==j.Z_SYNC_FLUSH||(this.onEnd(j.Z_OK),m.avail_out=0,!0)},d.prototype.onData=function(a){this.chunks.push(a)},d.prototype.onEnd=function(a){a===j.Z_OK&&(\"string\"===this.options.to?this.result=this.chunks.join(\"\"):this.result=h.flattenChunks(this.chunks)),this.chunks=[],this.err=a,this.msg=this.strm.msg},c.Inflate=d,c.inflate=e,c.inflateRaw=f,c.ungzip=e},{\"./utils/common\":28,\"./utils/strings\":29,\"./zlib/constants\":31,\"./zlib/gzheader\":34,\"./zlib/inflate\":36,\"./zlib/messages\":38,\"./zlib/zstream\":40}],28:[function(a,b,c){\"use strict\";var d=\"undefined\"!=typeof Uint8Array&&\"undefined\"!=typeof Uint16Array&&\"undefined\"!=typeof Int32Array;c.assign=function(a){for(var b=Array.prototype.slice.call(arguments,1);b.length;){var c=b.shift();if(c){if(\"object\"!=typeof c)throw new TypeError(c+\"must be non-object\");for(var d in c)c.hasOwnProperty(d)&&(a[d]=c[d])}}return a},c.shrinkBuf=function(a,b){return a.length===b?a:a.subarray?a.subarray(0,b):(a.length=b,a)};var e={arraySet:function(a,b,c,d,e){if(b.subarray&&a.subarray)return void a.set(b.subarray(c,c+d),e);for(var f=0;f<d;f++)a[e+f]=b[c+f]},flattenChunks:function(a){var b,c,d,e,f,g;for(d=0,b=0,c=a.length;b<c;b++)d+=a[b].length;for(g=new Uint8Array(d),e=0,b=0,c=a.length;b<c;b++)f=a[b],g.set(f,e),e+=f.length;return g}},f={arraySet:function(a,b,c,d,e){for(var f=0;f<d;f++)a[e+f]=b[c+f]},flattenChunks:function(a){return[].concat.apply([],a)}};c.setTyped=function(a){a?(c.Buf8=Uint8Array,c.Buf16=Uint16Array,c.Buf32=Int32Array,c.assign(c,e)):(c.Buf8=Array,c.Buf16=Array,c.Buf32=Array,c.assign(c,f))},c.setTyped(d)},{}],29:[function(a,b,c){\"use strict\";function d(a,b){if(b<65537&&(a.subarray&&g||!a.subarray&&f))return String.fromCharCode.apply(null,e.shrinkBuf(a,b));for(var c=\"\",d=0;d<b;d++)c+=String.fromCharCode(a[d]);return c}var e=a(\"./common\"),f=!0,g=!0;try{String.fromCharCode.apply(null,[0])}catch(h){f=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(h){g=!1}for(var i=new e.Buf8(256),j=0;j<256;j++)i[j]=j>=252?6:j>=248?5:j>=240?4:j>=224?3:j>=192?2:1;i[254]=i[254]=1,c.string2buf=function(a){var b,c,d,f,g,h=a.length,i=0;for(f=0;f<h;f++)c=a.charCodeAt(f),55296===(64512&c)&&f+1<h&&(d=a.charCodeAt(f+1),56320===(64512&d)&&(c=65536+(c-55296<<10)+(d-56320),f++)),i+=c<128?1:c<2048?2:c<65536?3:4;for(b=new e.Buf8(i),g=0,f=0;g<i;f++)c=a.charCodeAt(f),55296===(64512&c)&&f+1<h&&(d=a.charCodeAt(f+1),56320===(64512&d)&&(c=65536+(c-55296<<10)+(d-56320),f++)),c<128?b[g++]=c:c<2048?(b[g++]=192|c>>>6,b[g++]=128|63&c):c<65536?(b[g++]=224|c>>>12,b[g++]=128|c>>>6&63,b[g++]=128|63&c):(b[g++]=240|c>>>18,b[g++]=128|c>>>12&63,b[g++]=128|c>>>6&63,b[g++]=128|63&c);return b},c.buf2binstring=function(a){return d(a,a.length)},c.binstring2buf=function(a){for(var b=new e.Buf8(a.length),c=0,d=b.length;c<d;c++)b[c]=a.charCodeAt(c);return b},c.buf2string=function(a,b){var c,e,f,g,h=b||a.length,j=new Array(2*h);for(e=0,c=0;c<h;)if(f=a[c++],f<128)j[e++]=f;else if(g=i[f],g>4)j[e++]=65533,c+=g-1;else{for(f&=2===g?31:3===g?15:7;g>1&&c<h;)f=f<<6|63&a[c++],g--;g>1?j[e++]=65533:f<65536?j[e++]=f:(f-=65536,j[e++]=55296|f>>10&1023,j[e++]=56320|1023&f)}return d(j,e)},c.utf8border=function(a,b){var c;for(b=b||a.length,b>a.length&&(b=a.length),c=b-1;c>=0&&128===(192&a[c]);)c--;return c<0?b:0===c?b:c+i[a[c]]>b?c:b}},{\"./common\":28}],30:[function(a,b,c){\"use strict\";function d(a,b,c,d){for(var e=65535&a|0,f=a>>>16&65535|0,g=0;0!==c;){g=c>2e3?2e3:c,c-=g;do e=e+b[d++]|0,f=f+e|0;while(--g);e%=65521,f%=65521}return e|f<<16|0}b.exports=d},{}],31:[function(a,b,c){\"use strict\";b.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],32:[function(a,b,c){\"use strict\";function d(){for(var a,b=[],c=0;c<256;c++){a=c;for(var d=0;d<8;d++)a=1&a?3988292384^a>>>1:a>>>1;b[c]=a}return b}function e(a,b,c,d){var e=f,g=d+c;a^=-1;for(var h=d;h<g;h++)a=a>>>8^e[255&(a^b[h])];return a^-1}var f=d();b.exports=e},{}],33:[function(a,b,c){\"use strict\";function d(a,b){return a.msg=I[b],b}function e(a){return(a<<1)-(a>4?9:0)}function f(a){for(var b=a.length;--b>=0;)a[b]=0}function g(a){var b=a.state,c=b.pending;c>a.avail_out&&(c=a.avail_out),0!==c&&(E.arraySet(a.output,b.pending_buf,b.pending_out,c,a.next_out),a.next_out+=c,b.pending_out+=c,a.total_out+=c,a.avail_out-=c,b.pending-=c,0===b.pending&&(b.pending_out=0))}function h(a,b){F._tr_flush_block(a,a.block_start>=0?a.block_start:-1,a.strstart-a.block_start,b),a.block_start=a.strstart,g(a.strm)}function i(a,b){a.pending_buf[a.pending++]=b}function j(a,b){a.pending_buf[a.pending++]=b>>>8&255,a.pending_buf[a.pending++]=255&b}function k(a,b,c,d){var e=a.avail_in;return e>d&&(e=d),0===e?0:(a.avail_in-=e,E.arraySet(b,a.input,a.next_in,e,c),1===a.state.wrap?a.adler=G(a.adler,b,e,c):2===a.state.wrap&&(a.adler=H(a.adler,b,e,c)),a.next_in+=e,a.total_in+=e,e)}function l(a,b){var c,d,e=a.max_chain_length,f=a.strstart,g=a.prev_length,h=a.nice_match,i=a.strstart>a.w_size-la?a.strstart-(a.w_size-la):0,j=a.window,k=a.w_mask,l=a.prev,m=a.strstart+ka,n=j[f+g-1],o=j[f+g];a.prev_length>=a.good_match&&(e>>=2),h>a.lookahead&&(h=a.lookahead);do if(c=b,j[c+g]===o&&j[c+g-1]===n&&j[c]===j[f]&&j[++c]===j[f+1]){f+=2,c++;do;while(j[++f]===j[++c]&&j[++f]===j[++c]&&j[++f]===j[++c]&&j[++f]===j[++c]&&j[++f]===j[++c]&&j[++f]===j[++c]&&j[++f]===j[++c]&&j[++f]===j[++c]&&f<m);if(d=ka-(m-f),f=m-ka,d>g){if(a.match_start=b,g=d,d>=h)break;n=j[f+g-1],o=j[f+g]}}while((b=l[b&k])>i&&0!==--e);return g<=a.lookahead?g:a.lookahead}function m(a){var b,c,d,e,f,g=a.w_size;do{if(e=a.window_size-a.lookahead-a.strstart,a.strstart>=g+(g-la)){E.arraySet(a.window,a.window,g,g,0),a.match_start-=g,a.strstart-=g,a.block_start-=g,c=a.hash_size,b=c;do d=a.head[--b],a.head[b]=d>=g?d-g:0;while(--c);c=g,b=c;do d=a.prev[--b],a.prev[b]=d>=g?d-g:0;while(--c);e+=g}if(0===a.strm.avail_in)break;if(c=k(a.strm,a.window,a.strstart+a.lookahead,e),a.lookahead+=c,a.lookahead+a.insert>=ja)for(f=a.strstart-a.insert,a.ins_h=a.window[f],a.ins_h=(a.ins_h<<a.hash_shift^a.window[f+1])&a.hash_mask;a.insert&&(a.ins_h=(a.ins_h<<a.hash_shift^a.window[f+ja-1])&a.hash_mask,a.prev[f&a.w_mask]=a.head[a.ins_h],a.head[a.ins_h]=f,f++,a.insert--,!(a.lookahead+a.insert<ja)););}while(a.lookahead<la&&0!==a.strm.avail_in)}function n(a,b){var c=65535;for(c>a.pending_buf_size-5&&(c=a.pending_buf_size-5);;){if(a.lookahead<=1){if(m(a),0===a.lookahead&&b===J)return ua;if(0===a.lookahead)break}a.strstart+=a.lookahead,a.lookahead=0;var d=a.block_start+c;if((0===a.strstart||a.strstart>=d)&&(a.lookahead=a.strstart-d,a.strstart=d,h(a,!1),0===a.strm.avail_out))return ua;if(a.strstart-a.block_start>=a.w_size-la&&(h(a,!1),0===a.strm.avail_out))return ua}return a.insert=0,b===M?(h(a,!0),0===a.strm.avail_out?wa:xa):a.strstart>a.block_start&&(h(a,!1),0===a.strm.avail_out)?ua:ua}function o(a,b){for(var c,d;;){if(a.lookahead<la){if(m(a),a.lookahead<la&&b===J)return ua;if(0===a.lookahead)break}if(c=0,a.lookahead>=ja&&(a.ins_h=(a.ins_h<<a.hash_shift^a.window[a.strstart+ja-1])&a.hash_mask,c=a.prev[a.strstart&a.w_mask]=a.head[a.ins_h],a.head[a.ins_h]=a.strstart),0!==c&&a.strstart-c<=a.w_size-la&&(a.match_length=l(a,c)),a.match_length>=ja)if(d=F._tr_tally(a,a.strstart-a.match_start,a.match_length-ja),a.lookahead-=a.match_length,a.match_length<=a.max_lazy_match&&a.lookahead>=ja){a.match_length--;do a.strstart++,a.ins_h=(a.ins_h<<a.hash_shift^a.window[a.strstart+ja-1])&a.hash_mask,c=a.prev[a.strstart&a.w_mask]=a.head[a.ins_h],a.head[a.ins_h]=a.strstart;while(0!==--a.match_length);a.strstart++}else a.strstart+=a.match_length,a.match_length=0,a.ins_h=a.window[a.strstart],a.ins_h=(a.ins_h<<a.hash_shift^a.window[a.strstart+1])&a.hash_mask;else d=F._tr_tally(a,0,a.window[a.strstart]),a.lookahead--,a.strstart++;if(d&&(h(a,!1),0===a.strm.avail_out))return ua}return a.insert=a.strstart<ja-1?a.strstart:ja-1,b===M?(h(a,!0),0===a.strm.avail_out?wa:xa):a.last_lit&&(h(a,!1),0===a.strm.avail_out)?ua:va}function p(a,b){for(var c,d,e;;){if(a.lookahead<la){if(m(a),a.lookahead<la&&b===J)return ua;if(0===a.lookahead)break}if(c=0,a.lookahead>=ja&&(a.ins_h=(a.ins_h<<a.hash_shift^a.window[a.strstart+ja-1])&a.hash_mask,c=a.prev[a.strstart&a.w_mask]=a.head[a.ins_h],a.head[a.ins_h]=a.strstart),a.prev_length=a.match_length,a.prev_match=a.match_start,a.match_length=ja-1,0!==c&&a.prev_length<a.max_lazy_match&&a.strstart-c<=a.w_size-la&&(a.match_length=l(a,c),a.match_length<=5&&(a.strategy===U||a.match_length===ja&&a.strstart-a.match_start>4096)&&(a.match_length=ja-1)),a.prev_length>=ja&&a.match_length<=a.prev_length){e=a.strstart+a.lookahead-ja,d=F._tr_tally(a,a.strstart-1-a.prev_match,a.prev_length-ja),a.lookahead-=a.prev_length-1,a.prev_length-=2;do++a.strstart<=e&&(a.ins_h=(a.ins_h<<a.hash_shift^a.window[a.strstart+ja-1])&a.hash_mask,c=a.prev[a.strstart&a.w_mask]=a.head[a.ins_h],a.head[a.ins_h]=a.strstart);while(0!==--a.prev_length);if(a.match_available=0,a.match_length=ja-1,a.strstart++,d&&(h(a,!1),0===a.strm.avail_out))return ua}else if(a.match_available){if(d=F._tr_tally(a,0,a.window[a.strstart-1]),d&&h(a,!1),a.strstart++,a.lookahead--,0===a.strm.avail_out)return ua}else a.match_available=1,a.strstart++,a.lookahead--}return a.match_available&&(d=F._tr_tally(a,0,a.window[a.strstart-1]),a.match_available=0),a.insert=a.strstart<ja-1?a.strstart:ja-1,b===M?(h(a,!0),0===a.strm.avail_out?wa:xa):a.last_lit&&(h(a,!1),0===a.strm.avail_out)?ua:va}function q(a,b){for(var c,d,e,f,g=a.window;;){if(a.lookahead<=ka){if(m(a),a.lookahead<=ka&&b===J)return ua;if(0===a.lookahead)break}if(a.match_length=0,a.lookahead>=ja&&a.strstart>0&&(e=a.strstart-1,d=g[e],d===g[++e]&&d===g[++e]&&d===g[++e])){f=a.strstart+ka;do;while(d===g[++e]&&d===g[++e]&&d===g[++e]&&d===g[++e]&&d===g[++e]&&d===g[++e]&&d===g[++e]&&d===g[++e]&&e<f);a.match_length=ka-(f-e),a.match_length>a.lookahead&&(a.match_length=a.lookahead)}if(a.match_length>=ja?(c=F._tr_tally(a,1,a.match_length-ja),a.lookahead-=a.match_length,a.strstart+=a.match_length,a.match_length=0):(c=F._tr_tally(a,0,a.window[a.strstart]),a.lookahead--,a.strstart++),c&&(h(a,!1),0===a.strm.avail_out))return ua}return a.insert=0,b===M?(h(a,!0),0===a.strm.avail_out?wa:xa):a.last_lit&&(h(a,!1),0===a.strm.avail_out)?ua:va}function r(a,b){for(var c;;){if(0===a.lookahead&&(m(a),0===a.lookahead)){if(b===J)return ua;break}if(a.match_length=0,c=F._tr_tally(a,0,a.window[a.strstart]),a.lookahead--,a.strstart++,c&&(h(a,!1),0===a.strm.avail_out))return ua}return a.insert=0,b===M?(h(a,!0),0===a.strm.avail_out?wa:xa):a.last_lit&&(h(a,!1),0===a.strm.avail_out)?ua:va}function s(a,b,c,d,e){this.good_length=a,this.max_lazy=b,this.nice_length=c,this.max_chain=d,this.func=e}function t(a){a.window_size=2*a.w_size,f(a.head),a.max_lazy_match=D[a.level].max_lazy,a.good_match=D[a.level].good_length,a.nice_match=D[a.level].nice_length,a.max_chain_length=D[a.level].max_chain,a.strstart=0,a.block_start=0,a.lookahead=0,a.insert=0,a.match_length=a.prev_length=ja-1,a.match_available=0,a.ins_h=0}function u(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=$,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new E.Buf16(2*ha),this.dyn_dtree=new E.Buf16(2*(2*fa+1)),this.bl_tree=new E.Buf16(2*(2*ga+1)),f(this.dyn_ltree),f(this.dyn_dtree),f(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new E.Buf16(ia+1),this.heap=new E.Buf16(2*ea+1),f(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new E.Buf16(2*ea+1),f(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function v(a){var b;return a&&a.state?(a.total_in=a.total_out=0,a.data_type=Z,b=a.state,b.pending=0,b.pending_out=0,b.wrap<0&&(b.wrap=-b.wrap),b.status=b.wrap?na:sa,a.adler=2===b.wrap?0:1,b.last_flush=J,F._tr_init(b),O):d(a,Q)}function w(a){var b=v(a);return b===O&&t(a.state),b}function x(a,b){return a&&a.state?2!==a.state.wrap?Q:(a.state.gzhead=b,O):Q}function y(a,b,c,e,f,g){if(!a)return Q;var h=1;if(b===T&&(b=6),e<0?(h=0,e=-e):e>15&&(h=2,e-=16),f<1||f>_||c!==$||e<8||e>15||b<0||b>9||g<0||g>X)return d(a,Q);8===e&&(e=9);var i=new u;return a.state=i,i.strm=a,i.wrap=h,i.gzhead=null,i.w_bits=e,i.w_size=1<<i.w_bits,i.w_mask=i.w_size-1,i.hash_bits=f+7,i.hash_size=1<<i.hash_bits,i.hash_mask=i.hash_size-1,i.hash_shift=~~((i.hash_bits+ja-1)/ja),i.window=new E.Buf8(2*i.w_size),i.head=new E.Buf16(i.hash_size),i.prev=new E.Buf16(i.w_size),i.lit_bufsize=1<<f+6,i.pending_buf_size=4*i.lit_bufsize,i.pending_buf=new E.Buf8(i.pending_buf_size),i.d_buf=1*i.lit_bufsize,i.l_buf=3*i.lit_bufsize,i.level=b,i.strategy=g,i.method=c,w(a)}function z(a,b){return y(a,b,$,aa,ba,Y)}function A(a,b){var c,h,k,l;if(!a||!a.state||b>N||b<0)return a?d(a,Q):Q;if(h=a.state,!a.output||!a.input&&0!==a.avail_in||h.status===ta&&b!==M)return d(a,0===a.avail_out?S:Q);if(h.strm=a,c=h.last_flush,h.last_flush=b,h.status===na)if(2===h.wrap)a.adler=0,i(h,31),i(h,139),i(h,8),h.gzhead?(i(h,(h.gzhead.text?1:0)+(h.gzhead.hcrc?2:0)+(h.gzhead.extra?4:0)+(h.gzhead.name?8:0)+(h.gzhead.comment?16:0)),i(h,255&h.gzhead.time),i(h,h.gzhead.time>>8&255),i(h,h.gzhead.time>>16&255),i(h,h.gzhead.time>>24&255),i(h,9===h.level?2:h.strategy>=V||h.level<2?4:0),i(h,255&h.gzhead.os),h.gzhead.extra&&h.gzhead.extra.length&&(i(h,255&h.gzhead.extra.length),i(h,h.gzhead.extra.length>>8&255)),h.gzhead.hcrc&&(a.adler=H(a.adler,h.pending_buf,h.pending,0)),h.gzindex=0,h.status=oa):(i(h,0),i(h,0),i(h,0),i(h,0),i(h,0),i(h,9===h.level?2:h.strategy>=V||h.level<2?4:0),i(h,ya),h.status=sa);else{var m=$+(h.w_bits-8<<4)<<8,n=-1;n=h.strategy>=V||h.level<2?0:h.level<6?1:6===h.level?2:3,m|=n<<6,0!==h.strstart&&(m|=ma),m+=31-m%31,h.status=sa,j(h,m),0!==h.strstart&&(j(h,a.adler>>>16),j(h,65535&a.adler)),a.adler=1}if(h.status===oa)if(h.gzhead.extra){for(k=h.pending;h.gzindex<(65535&h.gzhead.extra.length)&&(h.pending!==h.pending_buf_size||(h.gzhead.hcrc&&h.pending>k&&(a.adler=H(a.adler,h.pending_buf,h.pending-k,k)),g(a),k=h.pending,h.pending!==h.pending_buf_size));)i(h,255&h.gzhead.extra[h.gzindex]),h.gzindex++;h.gzhead.hcrc&&h.pending>k&&(a.adler=H(a.adler,h.pending_buf,h.pending-k,k)),h.gzindex===h.gzhead.extra.length&&(h.gzindex=0,h.status=pa)}else h.status=pa;if(h.status===pa)if(h.gzhead.name){k=h.pending;do{if(h.pending===h.pending_buf_size&&(h.gzhead.hcrc&&h.pending>k&&(a.adler=H(a.adler,h.pending_buf,h.pending-k,k)),g(a),k=h.pending,h.pending===h.pending_buf_size)){l=1;break}l=h.gzindex<h.gzhead.name.length?255&h.gzhead.name.charCodeAt(h.gzindex++):0,i(h,l)}while(0!==l);h.gzhead.hcrc&&h.pending>k&&(a.adler=H(a.adler,h.pending_buf,h.pending-k,k)),0===l&&(h.gzindex=0,h.status=qa)}else h.status=qa;if(h.status===qa)if(h.gzhead.comment){k=h.pending;do{if(h.pending===h.pending_buf_size&&(h.gzhead.hcrc&&h.pending>k&&(a.adler=H(a.adler,h.pending_buf,h.pending-k,k)),g(a),k=h.pending,h.pending===h.pending_buf_size)){l=1;break}l=h.gzindex<h.gzhead.comment.length?255&h.gzhead.comment.charCodeAt(h.gzindex++):0,i(h,l)}while(0!==l);h.gzhead.hcrc&&h.pending>k&&(a.adler=H(a.adler,h.pending_buf,h.pending-k,k)),0===l&&(h.status=ra)}else h.status=ra;if(h.status===ra&&(h.gzhead.hcrc?(h.pending+2>h.pending_buf_size&&g(a),h.pending+2<=h.pending_buf_size&&(i(h,255&a.adler),i(h,a.adler>>8&255),a.adler=0,h.status=sa)):h.status=sa),0!==h.pending){if(g(a),0===a.avail_out)return h.last_flush=-1,O}else if(0===a.avail_in&&e(b)<=e(c)&&b!==M)return d(a,S);if(h.status===ta&&0!==a.avail_in)return d(a,S);if(0!==a.avail_in||0!==h.lookahead||b!==J&&h.status!==ta){var o=h.strategy===V?r(h,b):h.strategy===W?q(h,b):D[h.level].func(h,b);if(o!==wa&&o!==xa||(h.status=ta),o===ua||o===wa)return 0===a.avail_out&&(h.last_flush=-1),O;if(o===va&&(b===K?F._tr_align(h):b!==N&&(F._tr_stored_block(h,0,0,!1),b===L&&(f(h.head),0===h.lookahead&&(h.strstart=0,h.block_start=0,h.insert=0))),g(a),0===a.avail_out))return h.last_flush=-1,O}return b!==M?O:h.wrap<=0?P:(2===h.wrap?(i(h,255&a.adler),i(h,a.adler>>8&255),i(h,a.adler>>16&255),i(h,a.adler>>24&255),i(h,255&a.total_in),i(h,a.total_in>>8&255),i(h,a.total_in>>16&255),i(h,a.total_in>>24&255)):(j(h,a.adler>>>16),j(h,65535&a.adler)),g(a),h.wrap>0&&(h.wrap=-h.wrap),0!==h.pending?O:P)}function B(a){var b;return a&&a.state?(b=a.state.status,b!==na&&b!==oa&&b!==pa&&b!==qa&&b!==ra&&b!==sa&&b!==ta?d(a,Q):(a.state=null,b===sa?d(a,R):O)):Q}function C(a,b){var c,d,e,g,h,i,j,k,l=b.length;if(!a||!a.state)return Q;if(c=a.state,g=c.wrap,2===g||1===g&&c.status!==na||c.lookahead)return Q;for(1===g&&(a.adler=G(a.adler,b,l,0)),c.wrap=0,l>=c.w_size&&(0===g&&(f(c.head),c.strstart=0,c.block_start=0,c.insert=0),k=new E.Buf8(c.w_size),E.arraySet(k,b,l-c.w_size,c.w_size,0),b=k,l=c.w_size),h=a.avail_in,i=a.next_in,j=a.input,a.avail_in=l,a.next_in=0,a.input=b,m(c);c.lookahead>=ja;){d=c.strstart,e=c.lookahead-(ja-1);do c.ins_h=(c.ins_h<<c.hash_shift^c.window[d+ja-1])&c.hash_mask,c.prev[d&c.w_mask]=c.head[c.ins_h],c.head[c.ins_h]=d,d++;while(--e);c.strstart=d,c.lookahead=ja-1,m(c)}return c.strstart+=c.lookahead,c.block_start=c.strstart,c.insert=c.lookahead,c.lookahead=0,c.match_length=c.prev_length=ja-1,c.match_available=0,a.next_in=i,a.input=j,a.avail_in=h,c.wrap=g,O}var D,E=a(\"../utils/common\"),F=a(\"./trees\"),G=a(\"./adler32\"),H=a(\"./crc32\"),I=a(\"./messages\"),J=0,K=1,L=3,M=4,N=5,O=0,P=1,Q=-2,R=-3,S=-5,T=-1,U=1,V=2,W=3,X=4,Y=0,Z=2,$=8,_=9,aa=15,ba=8,ca=29,da=256,ea=da+1+ca,fa=30,ga=19,ha=2*ea+1,ia=15,ja=3,ka=258,la=ka+ja+1,ma=32,na=42,oa=69,pa=73,qa=91,ra=103,sa=113,ta=666,ua=1,va=2,wa=3,xa=4,ya=3;D=[new s(0,0,0,0,n),new s(4,4,8,4,o),new s(4,5,16,8,o),new s(4,6,32,32,o),new s(4,4,16,16,p),new s(8,16,32,32,p),new s(8,16,128,128,p),new s(8,32,128,256,p),new s(32,128,258,1024,p),new s(32,258,258,4096,p)],c.deflateInit=z,c.deflateInit2=y,c.deflateReset=w,c.deflateResetKeep=v,c.deflateSetHeader=x,c.deflate=A,c.deflateEnd=B,c.deflateSetDictionary=C,c.deflateInfo=\"pako deflate (from Nodeca project)\"},{\"../utils/common\":28,\"./adler32\":30,\"./crc32\":32,\"./messages\":38,\"./trees\":39}],34:[function(a,b,c){\"use strict\";function d(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name=\"\",this.comment=\"\",this.hcrc=0,this.done=!1}b.exports=d},{}],35:[function(a,b,c){\"use strict\";var d=30,e=12;b.exports=function(a,b){var c,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C;c=a.state,f=a.next_in,B=a.input,g=f+(a.avail_in-5),h=a.next_out,C=a.output,i=h-(b-a.avail_out),j=h+(a.avail_out-257),k=c.dmax,l=c.wsize,m=c.whave,n=c.wnext,o=c.window,p=c.hold,q=c.bits,r=c.lencode,s=c.distcode,t=(1<<c.lenbits)-1,u=(1<<c.distbits)-1;a:do{q<15&&(p+=B[f++]<<q,q+=8,p+=B[f++]<<q,q+=8),v=r[p&t];b:for(;;){if(w=v>>>24,p>>>=w,q-=w,w=v>>>16&255,0===w)C[h++]=65535&v;else{if(!(16&w)){if(0===(64&w)){v=r[(65535&v)+(p&(1<<w)-1)];continue b}if(32&w){c.mode=e;break a}a.msg=\"invalid literal/length code\",c.mode=d;break a}x=65535&v,w&=15,w&&(q<w&&(p+=B[f++]<<q,q+=8),x+=p&(1<<w)-1,p>>>=w,q-=w),q<15&&(p+=B[f++]<<q,q+=8,p+=B[f++]<<q,q+=8),v=s[p&u];c:for(;;){if(w=v>>>24,p>>>=w,q-=w,w=v>>>16&255,!(16&w)){if(0===(64&w)){v=s[(65535&v)+(p&(1<<w)-1)];continue c}a.msg=\"invalid distance code\",c.mode=d;break a}if(y=65535&v,w&=15,q<w&&(p+=B[f++]<<q,q+=8,q<w&&(p+=B[f++]<<q,q+=8)),y+=p&(1<<w)-1,y>k){a.msg=\"invalid distance too far back\",c.mode=d;break a}if(p>>>=w,q-=w,w=h-i,y>w){if(w=y-w,w>m&&c.sane){a.msg=\"invalid distance too far back\",c.mode=d;break a}if(z=0,A=o,0===n){if(z+=l-w,w<x){x-=w;do C[h++]=o[z++];while(--w);z=h-y,A=C}}else if(n<w){if(z+=l+n-w,w-=n,w<x){x-=w;do C[h++]=o[z++];while(--w);if(z=0,n<x){w=n,x-=w;do C[h++]=o[z++];while(--w);z=h-y,A=C}}}else if(z+=n-w,w<x){x-=w;do C[h++]=o[z++];while(--w);z=h-y,A=C}for(;x>2;)C[h++]=A[z++],C[h++]=A[z++],C[h++]=A[z++],x-=3;x&&(C[h++]=A[z++],x>1&&(C[h++]=A[z++]))}else{z=h-y;do C[h++]=C[z++],C[h++]=C[z++],C[h++]=C[z++],x-=3;while(x>2);x&&(C[h++]=C[z++],x>1&&(C[h++]=C[z++]))}break}}break}}while(f<g&&h<j);x=q>>3,f-=x,q-=x<<3,p&=(1<<q)-1,a.next_in=f,a.next_out=h,a.avail_in=f<g?5+(g-f):5-(f-g),a.avail_out=h<j?257+(j-h):257-(h-j),c.hold=p,c.bits=q}},{}],36:[function(a,b,c){\"use strict\";function d(a){return(a>>>24&255)+(a>>>8&65280)+((65280&a)<<8)+((255&a)<<24)}function e(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new s.Buf16(320),this.work=new s.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function f(a){var b;return a&&a.state?(b=a.state,a.total_in=a.total_out=b.total=0,a.msg=\"\",b.wrap&&(a.adler=1&b.wrap),b.mode=L,b.last=0,b.havedict=0,b.dmax=32768,b.head=null,b.hold=0,b.bits=0,b.lencode=b.lendyn=new s.Buf32(pa),b.distcode=b.distdyn=new s.Buf32(qa),b.sane=1,b.back=-1,D):G}function g(a){var b;return a&&a.state?(b=a.state,b.wsize=0,b.whave=0,b.wnext=0,f(a)):G}function h(a,b){var c,d;return a&&a.state?(d=a.state,b<0?(c=0,b=-b):(c=(b>>4)+1,b<48&&(b&=15)),b&&(b<8||b>15)?G:(null!==d.window&&d.wbits!==b&&(d.window=null),d.wrap=c,d.wbits=b,g(a))):G}function i(a,b){var c,d;return a?(d=new e,a.state=d,d.window=null,c=h(a,b),c!==D&&(a.state=null),c):G}function j(a){return i(a,sa)}function k(a){if(ta){var b;for(q=new s.Buf32(512),r=new s.Buf32(32),b=0;b<144;)a.lens[b++]=8;for(;b<256;)a.lens[b++]=9;for(;b<280;)a.lens[b++]=7;for(;b<288;)a.lens[b++]=8;for(w(y,a.lens,0,288,q,0,a.work,{bits:9}),b=0;b<32;)a.lens[b++]=5;w(z,a.lens,0,32,r,0,a.work,{bits:5}),ta=!1}a.lencode=q,a.lenbits=9,a.distcode=r,a.distbits=5}function l(a,b,c,d){var e,f=a.state;return null===f.window&&(f.wsize=1<<f.wbits,f.wnext=0,f.whave=0,f.window=new s.Buf8(f.wsize)),d>=f.wsize?(s.arraySet(f.window,b,c-f.wsize,f.wsize,0),f.wnext=0,f.whave=f.wsize):(e=f.wsize-f.wnext,e>d&&(e=d),s.arraySet(f.window,b,c-d,e,f.wnext),d-=e,d?(s.arraySet(f.window,b,c-d,d,0),f.wnext=d,f.whave=f.wsize):(f.wnext+=e,f.wnext===f.wsize&&(f.wnext=0),f.whave<f.wsize&&(f.whave+=e))),0}function m(a,b){var c,e,f,g,h,i,j,m,n,o,p,q,r,pa,qa,ra,sa,ta,ua,va,wa,xa,ya,za,Aa=0,Ba=new s.Buf8(4),Ca=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!a||!a.state||!a.output||!a.input&&0!==a.avail_in)return G;c=a.state,c.mode===W&&(c.mode=X),h=a.next_out,f=a.output,j=a.avail_out,g=a.next_in,e=a.input,i=a.avail_in,m=c.hold,n=c.bits,o=i,p=j,xa=D;a:for(;;)switch(c.mode){case L:if(0===c.wrap){c.mode=X;break}for(;n<16;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if(2&c.wrap&&35615===m){c.check=0,Ba[0]=255&m,Ba[1]=m>>>8&255,c.check=u(c.check,Ba,2,0),m=0,n=0,c.mode=M;break}if(c.flags=0,c.head&&(c.head.done=!1),!(1&c.wrap)||(((255&m)<<8)+(m>>8))%31){a.msg=\"incorrect header check\",c.mode=ma;break}if((15&m)!==K){a.msg=\"unknown compression method\",c.mode=ma;break}if(m>>>=4,n-=4,wa=(15&m)+8,0===c.wbits)c.wbits=wa;else if(wa>c.wbits){a.msg=\"invalid window size\",c.mode=ma;break}c.dmax=1<<wa,a.adler=c.check=1,c.mode=512&m?U:W,m=0,n=0;break;case M:for(;n<16;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if(c.flags=m,(255&c.flags)!==K){a.msg=\"unknown compression method\",c.mode=ma;break}if(57344&c.flags){a.msg=\"unknown header flags set\",c.mode=ma;break}c.head&&(c.head.text=m>>8&1),512&c.flags&&(Ba[0]=255&m,Ba[1]=m>>>8&255,c.check=u(c.check,Ba,2,0)),m=0,n=0,c.mode=N;case N:for(;n<32;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}c.head&&(c.head.time=m),512&c.flags&&(Ba[0]=255&m,Ba[1]=m>>>8&255,Ba[2]=m>>>16&255,Ba[3]=m>>>24&255,c.check=u(c.check,Ba,4,0)),m=0,n=0,c.mode=O;case O:for(;n<16;){if(0===i)break a;i--,m+=e[g++]<<n,\r\nn+=8}c.head&&(c.head.xflags=255&m,c.head.os=m>>8),512&c.flags&&(Ba[0]=255&m,Ba[1]=m>>>8&255,c.check=u(c.check,Ba,2,0)),m=0,n=0,c.mode=P;case P:if(1024&c.flags){for(;n<16;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}c.length=m,c.head&&(c.head.extra_len=m),512&c.flags&&(Ba[0]=255&m,Ba[1]=m>>>8&255,c.check=u(c.check,Ba,2,0)),m=0,n=0}else c.head&&(c.head.extra=null);c.mode=Q;case Q:if(1024&c.flags&&(q=c.length,q>i&&(q=i),q&&(c.head&&(wa=c.head.extra_len-c.length,c.head.extra||(c.head.extra=new Array(c.head.extra_len)),s.arraySet(c.head.extra,e,g,q,wa)),512&c.flags&&(c.check=u(c.check,e,q,g)),i-=q,g+=q,c.length-=q),c.length))break a;c.length=0,c.mode=R;case R:if(2048&c.flags){if(0===i)break a;q=0;do wa=e[g+q++],c.head&&wa&&c.length<65536&&(c.head.name+=String.fromCharCode(wa));while(wa&&q<i);if(512&c.flags&&(c.check=u(c.check,e,q,g)),i-=q,g+=q,wa)break a}else c.head&&(c.head.name=null);c.length=0,c.mode=S;case S:if(4096&c.flags){if(0===i)break a;q=0;do wa=e[g+q++],c.head&&wa&&c.length<65536&&(c.head.comment+=String.fromCharCode(wa));while(wa&&q<i);if(512&c.flags&&(c.check=u(c.check,e,q,g)),i-=q,g+=q,wa)break a}else c.head&&(c.head.comment=null);c.mode=T;case T:if(512&c.flags){for(;n<16;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if(m!==(65535&c.check)){a.msg=\"header crc mismatch\",c.mode=ma;break}m=0,n=0}c.head&&(c.head.hcrc=c.flags>>9&1,c.head.done=!0),a.adler=c.check=0,c.mode=W;break;case U:for(;n<32;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}a.adler=c.check=d(m),m=0,n=0,c.mode=V;case V:if(0===c.havedict)return a.next_out=h,a.avail_out=j,a.next_in=g,a.avail_in=i,c.hold=m,c.bits=n,F;a.adler=c.check=1,c.mode=W;case W:if(b===B||b===C)break a;case X:if(c.last){m>>>=7&n,n-=7&n,c.mode=ja;break}for(;n<3;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}switch(c.last=1&m,m>>>=1,n-=1,3&m){case 0:c.mode=Y;break;case 1:if(k(c),c.mode=ca,b===C){m>>>=2,n-=2;break a}break;case 2:c.mode=_;break;case 3:a.msg=\"invalid block type\",c.mode=ma}m>>>=2,n-=2;break;case Y:for(m>>>=7&n,n-=7&n;n<32;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if((65535&m)!==(m>>>16^65535)){a.msg=\"invalid stored block lengths\",c.mode=ma;break}if(c.length=65535&m,m=0,n=0,c.mode=Z,b===C)break a;case Z:c.mode=$;case $:if(q=c.length){if(q>i&&(q=i),q>j&&(q=j),0===q)break a;s.arraySet(f,e,g,q,h),i-=q,g+=q,j-=q,h+=q,c.length-=q;break}c.mode=W;break;case _:for(;n<14;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if(c.nlen=(31&m)+257,m>>>=5,n-=5,c.ndist=(31&m)+1,m>>>=5,n-=5,c.ncode=(15&m)+4,m>>>=4,n-=4,c.nlen>286||c.ndist>30){a.msg=\"too many length or distance symbols\",c.mode=ma;break}c.have=0,c.mode=aa;case aa:for(;c.have<c.ncode;){for(;n<3;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}c.lens[Ca[c.have++]]=7&m,m>>>=3,n-=3}for(;c.have<19;)c.lens[Ca[c.have++]]=0;if(c.lencode=c.lendyn,c.lenbits=7,ya={bits:c.lenbits},xa=w(x,c.lens,0,19,c.lencode,0,c.work,ya),c.lenbits=ya.bits,xa){a.msg=\"invalid code lengths set\",c.mode=ma;break}c.have=0,c.mode=ba;case ba:for(;c.have<c.nlen+c.ndist;){for(;Aa=c.lencode[m&(1<<c.lenbits)-1],qa=Aa>>>24,ra=Aa>>>16&255,sa=65535&Aa,!(qa<=n);){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if(sa<16)m>>>=qa,n-=qa,c.lens[c.have++]=sa;else{if(16===sa){for(za=qa+2;n<za;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if(m>>>=qa,n-=qa,0===c.have){a.msg=\"invalid bit length repeat\",c.mode=ma;break}wa=c.lens[c.have-1],q=3+(3&m),m>>>=2,n-=2}else if(17===sa){for(za=qa+3;n<za;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}m>>>=qa,n-=qa,wa=0,q=3+(7&m),m>>>=3,n-=3}else{for(za=qa+7;n<za;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}m>>>=qa,n-=qa,wa=0,q=11+(127&m),m>>>=7,n-=7}if(c.have+q>c.nlen+c.ndist){a.msg=\"invalid bit length repeat\",c.mode=ma;break}for(;q--;)c.lens[c.have++]=wa}}if(c.mode===ma)break;if(0===c.lens[256]){a.msg=\"invalid code -- missing end-of-block\",c.mode=ma;break}if(c.lenbits=9,ya={bits:c.lenbits},xa=w(y,c.lens,0,c.nlen,c.lencode,0,c.work,ya),c.lenbits=ya.bits,xa){a.msg=\"invalid literal/lengths set\",c.mode=ma;break}if(c.distbits=6,c.distcode=c.distdyn,ya={bits:c.distbits},xa=w(z,c.lens,c.nlen,c.ndist,c.distcode,0,c.work,ya),c.distbits=ya.bits,xa){a.msg=\"invalid distances set\",c.mode=ma;break}if(c.mode=ca,b===C)break a;case ca:c.mode=da;case da:if(i>=6&&j>=258){a.next_out=h,a.avail_out=j,a.next_in=g,a.avail_in=i,c.hold=m,c.bits=n,v(a,p),h=a.next_out,f=a.output,j=a.avail_out,g=a.next_in,e=a.input,i=a.avail_in,m=c.hold,n=c.bits,c.mode===W&&(c.back=-1);break}for(c.back=0;Aa=c.lencode[m&(1<<c.lenbits)-1],qa=Aa>>>24,ra=Aa>>>16&255,sa=65535&Aa,!(qa<=n);){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if(ra&&0===(240&ra)){for(ta=qa,ua=ra,va=sa;Aa=c.lencode[va+((m&(1<<ta+ua)-1)>>ta)],qa=Aa>>>24,ra=Aa>>>16&255,sa=65535&Aa,!(ta+qa<=n);){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}m>>>=ta,n-=ta,c.back+=ta}if(m>>>=qa,n-=qa,c.back+=qa,c.length=sa,0===ra){c.mode=ia;break}if(32&ra){c.back=-1,c.mode=W;break}if(64&ra){a.msg=\"invalid literal/length code\",c.mode=ma;break}c.extra=15&ra,c.mode=ea;case ea:if(c.extra){for(za=c.extra;n<za;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}c.length+=m&(1<<c.extra)-1,m>>>=c.extra,n-=c.extra,c.back+=c.extra}c.was=c.length,c.mode=fa;case fa:for(;Aa=c.distcode[m&(1<<c.distbits)-1],qa=Aa>>>24,ra=Aa>>>16&255,sa=65535&Aa,!(qa<=n);){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if(0===(240&ra)){for(ta=qa,ua=ra,va=sa;Aa=c.distcode[va+((m&(1<<ta+ua)-1)>>ta)],qa=Aa>>>24,ra=Aa>>>16&255,sa=65535&Aa,!(ta+qa<=n);){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}m>>>=ta,n-=ta,c.back+=ta}if(m>>>=qa,n-=qa,c.back+=qa,64&ra){a.msg=\"invalid distance code\",c.mode=ma;break}c.offset=sa,c.extra=15&ra,c.mode=ga;case ga:if(c.extra){for(za=c.extra;n<za;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}c.offset+=m&(1<<c.extra)-1,m>>>=c.extra,n-=c.extra,c.back+=c.extra}if(c.offset>c.dmax){a.msg=\"invalid distance too far back\",c.mode=ma;break}c.mode=ha;case ha:if(0===j)break a;if(q=p-j,c.offset>q){if(q=c.offset-q,q>c.whave&&c.sane){a.msg=\"invalid distance too far back\",c.mode=ma;break}q>c.wnext?(q-=c.wnext,r=c.wsize-q):r=c.wnext-q,q>c.length&&(q=c.length),pa=c.window}else pa=f,r=h-c.offset,q=c.length;q>j&&(q=j),j-=q,c.length-=q;do f[h++]=pa[r++];while(--q);0===c.length&&(c.mode=da);break;case ia:if(0===j)break a;f[h++]=c.length,j--,c.mode=da;break;case ja:if(c.wrap){for(;n<32;){if(0===i)break a;i--,m|=e[g++]<<n,n+=8}if(p-=j,a.total_out+=p,c.total+=p,p&&(a.adler=c.check=c.flags?u(c.check,f,p,h-p):t(c.check,f,p,h-p)),p=j,(c.flags?m:d(m))!==c.check){a.msg=\"incorrect data check\",c.mode=ma;break}m=0,n=0}c.mode=ka;case ka:if(c.wrap&&c.flags){for(;n<32;){if(0===i)break a;i--,m+=e[g++]<<n,n+=8}if(m!==(4294967295&c.total)){a.msg=\"incorrect length check\",c.mode=ma;break}m=0,n=0}c.mode=la;case la:xa=E;break a;case ma:xa=H;break a;case na:return I;case oa:default:return G}return a.next_out=h,a.avail_out=j,a.next_in=g,a.avail_in=i,c.hold=m,c.bits=n,(c.wsize||p!==a.avail_out&&c.mode<ma&&(c.mode<ja||b!==A))&&l(a,a.output,a.next_out,p-a.avail_out)?(c.mode=na,I):(o-=a.avail_in,p-=a.avail_out,a.total_in+=o,a.total_out+=p,c.total+=p,c.wrap&&p&&(a.adler=c.check=c.flags?u(c.check,f,p,a.next_out-p):t(c.check,f,p,a.next_out-p)),a.data_type=c.bits+(c.last?64:0)+(c.mode===W?128:0)+(c.mode===ca||c.mode===Z?256:0),(0===o&&0===p||b===A)&&xa===D&&(xa=J),xa)}function n(a){if(!a||!a.state)return G;var b=a.state;return b.window&&(b.window=null),a.state=null,D}function o(a,b){var c;return a&&a.state?(c=a.state,0===(2&c.wrap)?G:(c.head=b,b.done=!1,D)):G}function p(a,b){var c,d,e,f=b.length;return a&&a.state?(c=a.state,0!==c.wrap&&c.mode!==V?G:c.mode===V&&(d=1,d=t(d,b,f,0),d!==c.check)?H:(e=l(a,b,f,f))?(c.mode=na,I):(c.havedict=1,D)):G}var q,r,s=a(\"../utils/common\"),t=a(\"./adler32\"),u=a(\"./crc32\"),v=a(\"./inffast\"),w=a(\"./inftrees\"),x=0,y=1,z=2,A=4,B=5,C=6,D=0,E=1,F=2,G=-2,H=-3,I=-4,J=-5,K=8,L=1,M=2,N=3,O=4,P=5,Q=6,R=7,S=8,T=9,U=10,V=11,W=12,X=13,Y=14,Z=15,$=16,_=17,aa=18,ba=19,ca=20,da=21,ea=22,fa=23,ga=24,ha=25,ia=26,ja=27,ka=28,la=29,ma=30,na=31,oa=32,pa=852,qa=592,ra=15,sa=ra,ta=!0;c.inflateReset=g,c.inflateReset2=h,c.inflateResetKeep=f,c.inflateInit=j,c.inflateInit2=i,c.inflate=m,c.inflateEnd=n,c.inflateGetHeader=o,c.inflateSetDictionary=p,c.inflateInfo=\"pako inflate (from Nodeca project)\"},{\"../utils/common\":28,\"./adler32\":30,\"./crc32\":32,\"./inffast\":35,\"./inftrees\":37}],37:[function(a,b,c){\"use strict\";var d=a(\"../utils/common\"),e=15,f=852,g=592,h=0,i=1,j=2,k=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],l=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],m=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],n=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];b.exports=function(a,b,c,o,p,q,r,s){var t,u,v,w,x,y,z,A,B,C=s.bits,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=null,O=0,P=new d.Buf16(e+1),Q=new d.Buf16(e+1),R=null,S=0;for(D=0;D<=e;D++)P[D]=0;for(E=0;E<o;E++)P[b[c+E]]++;for(H=C,G=e;G>=1&&0===P[G];G--);if(H>G&&(H=G),0===G)return p[q++]=20971520,p[q++]=20971520,s.bits=1,0;for(F=1;F<G&&0===P[F];F++);for(H<F&&(H=F),K=1,D=1;D<=e;D++)if(K<<=1,K-=P[D],K<0)return-1;if(K>0&&(a===h||1!==G))return-1;for(Q[1]=0,D=1;D<e;D++)Q[D+1]=Q[D]+P[D];for(E=0;E<o;E++)0!==b[c+E]&&(r[Q[b[c+E]]++]=E);if(a===h?(N=R=r,y=19):a===i?(N=k,O-=257,R=l,S-=257,y=256):(N=m,R=n,y=-1),M=0,E=0,D=F,x=q,I=H,J=0,v=-1,L=1<<H,w=L-1,a===i&&L>f||a===j&&L>g)return 1;for(var T=0;;){T++,z=D-J,r[E]<y?(A=0,B=r[E]):r[E]>y?(A=R[S+r[E]],B=N[O+r[E]]):(A=96,B=0),t=1<<D-J,u=1<<I,F=u;do u-=t,p[x+(M>>J)+u]=z<<24|A<<16|B|0;while(0!==u);for(t=1<<D-1;M&t;)t>>=1;if(0!==t?(M&=t-1,M+=t):M=0,E++,0===--P[D]){if(D===G)break;D=b[c+r[E]]}if(D>H&&(M&w)!==v){for(0===J&&(J=H),x+=F,I=D-J,K=1<<I;I+J<G&&(K-=P[I+J],!(K<=0));)I++,K<<=1;if(L+=1<<I,a===i&&L>f||a===j&&L>g)return 1;v=M&w,p[v]=H<<24|I<<16|x-q|0}}return 0!==M&&(p[x+M]=D-J<<24|64<<16|0),s.bits=H,0}},{\"../utils/common\":28}],38:[function(a,b,c){\"use strict\";b.exports={2:\"need dictionary\",1:\"stream end\",0:\"\",\"-1\":\"file error\",\"-2\":\"stream error\",\"-3\":\"data error\",\"-4\":\"insufficient memory\",\"-5\":\"buffer error\",\"-6\":\"incompatible version\"}},{}],39:[function(a,b,c){\"use strict\";function d(a){for(var b=a.length;--b>=0;)a[b]=0}function e(a,b,c,d,e){this.static_tree=a,this.extra_bits=b,this.extra_base=c,this.elems=d,this.max_length=e,this.has_stree=a&&a.length}function f(a,b){this.dyn_tree=a,this.max_code=0,this.stat_desc=b}function g(a){return a<256?ia[a]:ia[256+(a>>>7)]}function h(a,b){a.pending_buf[a.pending++]=255&b,a.pending_buf[a.pending++]=b>>>8&255}function i(a,b,c){a.bi_valid>X-c?(a.bi_buf|=b<<a.bi_valid&65535,h(a,a.bi_buf),a.bi_buf=b>>X-a.bi_valid,a.bi_valid+=c-X):(a.bi_buf|=b<<a.bi_valid&65535,a.bi_valid+=c)}function j(a,b,c){i(a,c[2*b],c[2*b+1])}function k(a,b){var c=0;do c|=1&a,a>>>=1,c<<=1;while(--b>0);return c>>>1}function l(a){16===a.bi_valid?(h(a,a.bi_buf),a.bi_buf=0,a.bi_valid=0):a.bi_valid>=8&&(a.pending_buf[a.pending++]=255&a.bi_buf,a.bi_buf>>=8,a.bi_valid-=8)}function m(a,b){var c,d,e,f,g,h,i=b.dyn_tree,j=b.max_code,k=b.stat_desc.static_tree,l=b.stat_desc.has_stree,m=b.stat_desc.extra_bits,n=b.stat_desc.extra_base,o=b.stat_desc.max_length,p=0;for(f=0;f<=W;f++)a.bl_count[f]=0;for(i[2*a.heap[a.heap_max]+1]=0,c=a.heap_max+1;c<V;c++)d=a.heap[c],f=i[2*i[2*d+1]+1]+1,f>o&&(f=o,p++),i[2*d+1]=f,d>j||(a.bl_count[f]++,g=0,d>=n&&(g=m[d-n]),h=i[2*d],a.opt_len+=h*(f+g),l&&(a.static_len+=h*(k[2*d+1]+g)));if(0!==p){do{for(f=o-1;0===a.bl_count[f];)f--;a.bl_count[f]--,a.bl_count[f+1]+=2,a.bl_count[o]--,p-=2}while(p>0);for(f=o;0!==f;f--)for(d=a.bl_count[f];0!==d;)e=a.heap[--c],e>j||(i[2*e+1]!==f&&(a.opt_len+=(f-i[2*e+1])*i[2*e],i[2*e+1]=f),d--)}}function n(a,b,c){var d,e,f=new Array(W+1),g=0;for(d=1;d<=W;d++)f[d]=g=g+c[d-1]<<1;for(e=0;e<=b;e++){var h=a[2*e+1];0!==h&&(a[2*e]=k(f[h]++,h))}}function o(){var a,b,c,d,f,g=new Array(W+1);for(c=0,d=0;d<Q-1;d++)for(ka[d]=c,a=0;a<1<<ba[d];a++)ja[c++]=d;for(ja[c-1]=d,f=0,d=0;d<16;d++)for(la[d]=f,a=0;a<1<<ca[d];a++)ia[f++]=d;for(f>>=7;d<T;d++)for(la[d]=f<<7,a=0;a<1<<ca[d]-7;a++)ia[256+f++]=d;for(b=0;b<=W;b++)g[b]=0;for(a=0;a<=143;)ga[2*a+1]=8,a++,g[8]++;for(;a<=255;)ga[2*a+1]=9,a++,g[9]++;for(;a<=279;)ga[2*a+1]=7,a++,g[7]++;for(;a<=287;)ga[2*a+1]=8,a++,g[8]++;for(n(ga,S+1,g),a=0;a<T;a++)ha[2*a+1]=5,ha[2*a]=k(a,5);ma=new e(ga,ba,R+1,S,W),na=new e(ha,ca,0,T,W),oa=new e(new Array(0),da,0,U,Y)}function p(a){var b;for(b=0;b<S;b++)a.dyn_ltree[2*b]=0;for(b=0;b<T;b++)a.dyn_dtree[2*b]=0;for(b=0;b<U;b++)a.bl_tree[2*b]=0;a.dyn_ltree[2*Z]=1,a.opt_len=a.static_len=0,a.last_lit=a.matches=0}function q(a){a.bi_valid>8?h(a,a.bi_buf):a.bi_valid>0&&(a.pending_buf[a.pending++]=a.bi_buf),a.bi_buf=0,a.bi_valid=0}function r(a,b,c,d){q(a),d&&(h(a,c),h(a,~c)),G.arraySet(a.pending_buf,a.window,b,c,a.pending),a.pending+=c}function s(a,b,c,d){var e=2*b,f=2*c;return a[e]<a[f]||a[e]===a[f]&&d[b]<=d[c]}function t(a,b,c){for(var d=a.heap[c],e=c<<1;e<=a.heap_len&&(e<a.heap_len&&s(b,a.heap[e+1],a.heap[e],a.depth)&&e++,!s(b,d,a.heap[e],a.depth));)a.heap[c]=a.heap[e],c=e,e<<=1;a.heap[c]=d}function u(a,b,c){var d,e,f,h,k=0;if(0!==a.last_lit)do d=a.pending_buf[a.d_buf+2*k]<<8|a.pending_buf[a.d_buf+2*k+1],e=a.pending_buf[a.l_buf+k],k++,0===d?j(a,e,b):(f=ja[e],j(a,f+R+1,b),h=ba[f],0!==h&&(e-=ka[f],i(a,e,h)),d--,f=g(d),j(a,f,c),h=ca[f],0!==h&&(d-=la[f],i(a,d,h)));while(k<a.last_lit);j(a,Z,b)}function v(a,b){var c,d,e,f=b.dyn_tree,g=b.stat_desc.static_tree,h=b.stat_desc.has_stree,i=b.stat_desc.elems,j=-1;for(a.heap_len=0,a.heap_max=V,c=0;c<i;c++)0!==f[2*c]?(a.heap[++a.heap_len]=j=c,a.depth[c]=0):f[2*c+1]=0;for(;a.heap_len<2;)e=a.heap[++a.heap_len]=j<2?++j:0,f[2*e]=1,a.depth[e]=0,a.opt_len--,h&&(a.static_len-=g[2*e+1]);for(b.max_code=j,c=a.heap_len>>1;c>=1;c--)t(a,f,c);e=i;do c=a.heap[1],a.heap[1]=a.heap[a.heap_len--],t(a,f,1),d=a.heap[1],a.heap[--a.heap_max]=c,a.heap[--a.heap_max]=d,f[2*e]=f[2*c]+f[2*d],a.depth[e]=(a.depth[c]>=a.depth[d]?a.depth[c]:a.depth[d])+1,f[2*c+1]=f[2*d+1]=e,a.heap[1]=e++,t(a,f,1);while(a.heap_len>=2);a.heap[--a.heap_max]=a.heap[1],m(a,b),n(f,j,a.bl_count)}function w(a,b,c){var d,e,f=-1,g=b[1],h=0,i=7,j=4;for(0===g&&(i=138,j=3),b[2*(c+1)+1]=65535,d=0;d<=c;d++)e=g,g=b[2*(d+1)+1],++h<i&&e===g||(h<j?a.bl_tree[2*e]+=h:0!==e?(e!==f&&a.bl_tree[2*e]++,a.bl_tree[2*$]++):h<=10?a.bl_tree[2*_]++:a.bl_tree[2*aa]++,h=0,f=e,0===g?(i=138,j=3):e===g?(i=6,j=3):(i=7,j=4))}function x(a,b,c){var d,e,f=-1,g=b[1],h=0,k=7,l=4;for(0===g&&(k=138,l=3),d=0;d<=c;d++)if(e=g,g=b[2*(d+1)+1],!(++h<k&&e===g)){if(h<l){do j(a,e,a.bl_tree);while(0!==--h)}else 0!==e?(e!==f&&(j(a,e,a.bl_tree),h--),j(a,$,a.bl_tree),i(a,h-3,2)):h<=10?(j(a,_,a.bl_tree),i(a,h-3,3)):(j(a,aa,a.bl_tree),i(a,h-11,7));h=0,f=e,0===g?(k=138,l=3):e===g?(k=6,l=3):(k=7,l=4)}}function y(a){var b;for(w(a,a.dyn_ltree,a.l_desc.max_code),w(a,a.dyn_dtree,a.d_desc.max_code),v(a,a.bl_desc),b=U-1;b>=3&&0===a.bl_tree[2*ea[b]+1];b--);return a.opt_len+=3*(b+1)+5+5+4,b}function z(a,b,c,d){var e;for(i(a,b-257,5),i(a,c-1,5),i(a,d-4,4),e=0;e<d;e++)i(a,a.bl_tree[2*ea[e]+1],3);x(a,a.dyn_ltree,b-1),x(a,a.dyn_dtree,c-1)}function A(a){var b,c=4093624447;for(b=0;b<=31;b++,c>>>=1)if(1&c&&0!==a.dyn_ltree[2*b])return I;if(0!==a.dyn_ltree[18]||0!==a.dyn_ltree[20]||0!==a.dyn_ltree[26])return J;for(b=32;b<R;b++)if(0!==a.dyn_ltree[2*b])return J;return I}function B(a){pa||(o(),pa=!0),a.l_desc=new f(a.dyn_ltree,ma),a.d_desc=new f(a.dyn_dtree,na),a.bl_desc=new f(a.bl_tree,oa),a.bi_buf=0,a.bi_valid=0,p(a)}function C(a,b,c,d){i(a,(L<<1)+(d?1:0),3),r(a,b,c,!0)}function D(a){i(a,M<<1,3),j(a,Z,ga),l(a)}function E(a,b,c,d){var e,f,g=0;a.level>0?(a.strm.data_type===K&&(a.strm.data_type=A(a)),v(a,a.l_desc),v(a,a.d_desc),g=y(a),e=a.opt_len+3+7>>>3,f=a.static_len+3+7>>>3,f<=e&&(e=f)):e=f=c+5,c+4<=e&&b!==-1?C(a,b,c,d):a.strategy===H||f===e?(i(a,(M<<1)+(d?1:0),3),u(a,ga,ha)):(i(a,(N<<1)+(d?1:0),3),z(a,a.l_desc.max_code+1,a.d_desc.max_code+1,g+1),u(a,a.dyn_ltree,a.dyn_dtree)),p(a),d&&q(a)}function F(a,b,c){return a.pending_buf[a.d_buf+2*a.last_lit]=b>>>8&255,a.pending_buf[a.d_buf+2*a.last_lit+1]=255&b,a.pending_buf[a.l_buf+a.last_lit]=255&c,a.last_lit++,0===b?a.dyn_ltree[2*c]++:(a.matches++,b--,a.dyn_ltree[2*(ja[c]+R+1)]++,a.dyn_dtree[2*g(b)]++),a.last_lit===a.lit_bufsize-1}var G=a(\"../utils/common\"),H=4,I=0,J=1,K=2,L=0,M=1,N=2,O=3,P=258,Q=29,R=256,S=R+1+Q,T=30,U=19,V=2*S+1,W=15,X=16,Y=7,Z=256,$=16,_=17,aa=18,ba=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],ca=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],da=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],ea=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],fa=512,ga=new Array(2*(S+2));d(ga);var ha=new Array(2*T);d(ha);var ia=new Array(fa);d(ia);var ja=new Array(P-O+1);d(ja);var ka=new Array(Q);d(ka);var la=new Array(T);d(la);var ma,na,oa,pa=!1;c._tr_init=B,c._tr_stored_block=C,c._tr_flush_block=E,c._tr_tally=F,c._tr_align=D},{\"../utils/common\":28}],40:[function(a,b,c){\"use strict\";function d(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg=\"\",this.state=null,this.data_type=2,this.adler=0}b.exports=d},{}]},{},[10])(10)});\r\n","var map = {\n\t\"./af\": 42786,\n\t\"./af.js\": 42786,\n\t\"./ar\": 30867,\n\t\"./ar-dz\": 14130,\n\t\"./ar-dz.js\": 14130,\n\t\"./ar-kw\": 96135,\n\t\"./ar-kw.js\": 96135,\n\t\"./ar-ly\": 56440,\n\t\"./ar-ly.js\": 56440,\n\t\"./ar-ma\": 47702,\n\t\"./ar-ma.js\": 47702,\n\t\"./ar-sa\": 16040,\n\t\"./ar-sa.js\": 16040,\n\t\"./ar-tn\": 37100,\n\t\"./ar-tn.js\": 37100,\n\t\"./ar.js\": 30867,\n\t\"./az\": 31083,\n\t\"./az.js\": 31083,\n\t\"./be\": 9808,\n\t\"./be.js\": 9808,\n\t\"./bg\": 68338,\n\t\"./bg.js\": 68338,\n\t\"./bm\": 67438,\n\t\"./bm.js\": 67438,\n\t\"./bn\": 8905,\n\t\"./bn-bd\": 76225,\n\t\"./bn-bd.js\": 76225,\n\t\"./bn.js\": 8905,\n\t\"./bo\": 11560,\n\t\"./bo.js\": 11560,\n\t\"./br\": 1278,\n\t\"./br.js\": 1278,\n\t\"./bs\": 80622,\n\t\"./bs.js\": 80622,\n\t\"./ca\": 2468,\n\t\"./ca.js\": 2468,\n\t\"./cs\": 5822,\n\t\"./cs.js\": 5822,\n\t\"./cv\": 50877,\n\t\"./cv.js\": 50877,\n\t\"./cy\": 47373,\n\t\"./cy.js\": 47373,\n\t\"./da\": 24780,\n\t\"./da.js\": 24780,\n\t\"./de\": 59740,\n\t\"./de-at\": 60217,\n\t\"./de-at.js\": 60217,\n\t\"./de-ch\": 60894,\n\t\"./de-ch.js\": 60894,\n\t\"./de.js\": 59740,\n\t\"./dv\": 5300,\n\t\"./dv.js\": 5300,\n\t\"./el\": 50837,\n\t\"./el.js\": 50837,\n\t\"./en-au\": 78348,\n\t\"./en-au.js\": 78348,\n\t\"./en-ca\": 77925,\n\t\"./en-ca.js\": 77925,\n\t\"./en-gb\": 22243,\n\t\"./en-gb.js\": 22243,\n\t\"./en-ie\": 46436,\n\t\"./en-ie.js\": 46436,\n\t\"./en-il\": 47207,\n\t\"./en-il.js\": 47207,\n\t\"./en-in\": 44175,\n\t\"./en-in.js\": 44175,\n\t\"./en-nz\": 76319,\n\t\"./en-nz.js\": 76319,\n\t\"./en-sg\": 31662,\n\t\"./en-sg.js\": 31662,\n\t\"./eo\": 92915,\n\t\"./eo.js\": 92915,\n\t\"./es\": 55655,\n\t\"./es-do\": 55251,\n\t\"./es-do.js\": 55251,\n\t\"./es-mx\": 96112,\n\t\"./es-mx.js\": 96112,\n\t\"./es-us\": 71146,\n\t\"./es-us.js\": 71146,\n\t\"./es.js\": 55655,\n\t\"./et\": 5603,\n\t\"./et.js\": 5603,\n\t\"./eu\": 77763,\n\t\"./eu.js\": 77763,\n\t\"./fa\": 76959,\n\t\"./fa.js\": 76959,\n\t\"./fi\": 11897,\n\t\"./fi.js\": 11897,\n\t\"./fil\": 42549,\n\t\"./fil.js\": 42549,\n\t\"./fo\": 94694,\n\t\"./fo.js\": 94694,\n\t\"./fr\": 94470,\n\t\"./fr-ca\": 63049,\n\t\"./fr-ca.js\": 63049,\n\t\"./fr-ch\": 52330,\n\t\"./fr-ch.js\": 52330,\n\t\"./fr.js\": 94470,\n\t\"./fy\": 5044,\n\t\"./fy.js\": 5044,\n\t\"./ga\": 29295,\n\t\"./ga.js\": 29295,\n\t\"./gd\": 2101,\n\t\"./gd.js\": 2101,\n\t\"./gl\": 38794,\n\t\"./gl.js\": 38794,\n\t\"./gom-deva\": 27884,\n\t\"./gom-deva.js\": 27884,\n\t\"./gom-latn\": 23168,\n\t\"./gom-latn.js\": 23168,\n\t\"./gu\": 95349,\n\t\"./gu.js\": 95349,\n\t\"./he\": 24206,\n\t\"./he.js\": 24206,\n\t\"./hi\": 30094,\n\t\"./hi.js\": 30094,\n\t\"./hr\": 30316,\n\t\"./hr.js\": 30316,\n\t\"./hu\": 22138,\n\t\"./hu.js\": 22138,\n\t\"./hy-am\": 11423,\n\t\"./hy-am.js\": 11423,\n\t\"./id\": 29218,\n\t\"./id.js\": 29218,\n\t\"./is\": 90135,\n\t\"./is.js\": 90135,\n\t\"./it\": 90626,\n\t\"./it-ch\": 10150,\n\t\"./it-ch.js\": 10150,\n\t\"./it.js\": 90626,\n\t\"./ja\": 39183,\n\t\"./ja.js\": 39183,\n\t\"./jv\": 24286,\n\t\"./jv.js\": 24286,\n\t\"./ka\": 12105,\n\t\"./ka.js\": 12105,\n\t\"./kk\": 47772,\n\t\"./kk.js\": 47772,\n\t\"./km\": 18758,\n\t\"./km.js\": 18758,\n\t\"./kn\": 79282,\n\t\"./kn.js\": 79282,\n\t\"./ko\": 33730,\n\t\"./ko.js\": 33730,\n\t\"./ku\": 1408,\n\t\"./ku.js\": 1408,\n\t\"./ky\": 33291,\n\t\"./ky.js\": 33291,\n\t\"./lb\": 36841,\n\t\"./lb.js\": 36841,\n\t\"./lo\": 55466,\n\t\"./lo.js\": 55466,\n\t\"./lt\": 57010,\n\t\"./lt.js\": 57010,\n\t\"./lv\": 37595,\n\t\"./lv.js\": 37595,\n\t\"./me\": 39861,\n\t\"./me.js\": 39861,\n\t\"./mi\": 35493,\n\t\"./mi.js\": 35493,\n\t\"./mk\": 95966,\n\t\"./mk.js\": 95966,\n\t\"./ml\": 87341,\n\t\"./ml.js\": 87341,\n\t\"./mn\": 5115,\n\t\"./mn.js\": 5115,\n\t\"./mr\": 10370,\n\t\"./mr.js\": 10370,\n\t\"./ms\": 9847,\n\t\"./ms-my\": 41237,\n\t\"./ms-my.js\": 41237,\n\t\"./ms.js\": 9847,\n\t\"./mt\": 72126,\n\t\"./mt.js\": 72126,\n\t\"./my\": 56165,\n\t\"./my.js\": 56165,\n\t\"./nb\": 64924,\n\t\"./nb.js\": 64924,\n\t\"./ne\": 16744,\n\t\"./ne.js\": 16744,\n\t\"./nl\": 93901,\n\t\"./nl-be\": 59814,\n\t\"./nl-be.js\": 59814,\n\t\"./nl.js\": 93901,\n\t\"./nn\": 83877,\n\t\"./nn.js\": 83877,\n\t\"./oc-lnc\": 92135,\n\t\"./oc-lnc.js\": 92135,\n\t\"./pa-in\": 15858,\n\t\"./pa-in.js\": 15858,\n\t\"./pl\": 64495,\n\t\"./pl.js\": 64495,\n\t\"./pt\": 89520,\n\t\"./pt-br\": 57971,\n\t\"./pt-br.js\": 57971,\n\t\"./pt.js\": 89520,\n\t\"./ro\": 96459,\n\t\"./ro.js\": 96459,\n\t\"./ru\": 21793,\n\t\"./ru.js\": 21793,\n\t\"./sd\": 40950,\n\t\"./sd.js\": 40950,\n\t\"./se\": 10490,\n\t\"./se.js\": 10490,\n\t\"./si\": 90124,\n\t\"./si.js\": 90124,\n\t\"./sk\": 64249,\n\t\"./sk.js\": 64249,\n\t\"./sl\": 14985,\n\t\"./sl.js\": 14985,\n\t\"./sq\": 51104,\n\t\"./sq.js\": 51104,\n\t\"./sr\": 49131,\n\t\"./sr-cyrl\": 79915,\n\t\"./sr-cyrl.js\": 79915,\n\t\"./sr.js\": 49131,\n\t\"./ss\": 85893,\n\t\"./ss.js\": 85893,\n\t\"./sv\": 98760,\n\t\"./sv.js\": 98760,\n\t\"./sw\": 91172,\n\t\"./sw.js\": 91172,\n\t\"./ta\": 27333,\n\t\"./ta.js\": 27333,\n\t\"./te\": 23110,\n\t\"./te.js\": 23110,\n\t\"./tet\": 52095,\n\t\"./tet.js\": 52095,\n\t\"./tg\": 27321,\n\t\"./tg.js\": 27321,\n\t\"./th\": 9041,\n\t\"./th.js\": 9041,\n\t\"./tk\": 19005,\n\t\"./tk.js\": 19005,\n\t\"./tl-ph\": 75768,\n\t\"./tl-ph.js\": 75768,\n\t\"./tlh\": 89444,\n\t\"./tlh.js\": 89444,\n\t\"./tr\": 72397,\n\t\"./tr.js\": 72397,\n\t\"./tzl\": 28254,\n\t\"./tzl.js\": 28254,\n\t\"./tzm\": 51106,\n\t\"./tzm-latn\": 30699,\n\t\"./tzm-latn.js\": 30699,\n\t\"./tzm.js\": 51106,\n\t\"./ug-cn\": 9288,\n\t\"./ug-cn.js\": 9288,\n\t\"./uk\": 67691,\n\t\"./uk.js\": 67691,\n\t\"./ur\": 13795,\n\t\"./ur.js\": 13795,\n\t\"./uz\": 6791,\n\t\"./uz-latn\": 60588,\n\t\"./uz-latn.js\": 60588,\n\t\"./uz.js\": 6791,\n\t\"./vi\": 65666,\n\t\"./vi.js\": 65666,\n\t\"./x-pseudo\": 14378,\n\t\"./x-pseudo.js\": 14378,\n\t\"./yo\": 75805,\n\t\"./yo.js\": 75805,\n\t\"./zh-cn\": 83839,\n\t\"./zh-cn.js\": 83839,\n\t\"./zh-hk\": 55726,\n\t\"./zh-hk.js\": 55726,\n\t\"./zh-mo\": 99807,\n\t\"./zh-mo.js\": 99807,\n\t\"./zh-tw\": 74152,\n\t\"./zh-tw.js\": 74152\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 46700;","var EventEmitter = require(\"events\").EventEmitter;\r\n\r\nclass Account extends EventEmitter {\r\n   constructor() {\r\n      super();\r\n\r\n      this.isAuthenticated = false;\r\n      this._config = null;\r\n\r\n      this._listRoles = null;\r\n      // {array}\r\n      // a list of all the Defined Roles in the Tenant's system.\r\n\r\n      this._listScopes = null;\r\n      // {array | null}\r\n      // a list of all the Defined Scopes in the Tenant's sytem.\r\n\r\n      this._listUsers = null;\r\n      // {array | null}\r\n      // a list of all the Defined Users in the Tenant's system.\r\n   }\r\n\r\n   init(AB) {\r\n      // {ABFactory} AB\r\n\r\n      this.AB = AB;\r\n      var UserConfig = this.AB.Config.userConfig();\r\n      if (UserConfig) {\r\n         this.isAuthenticated = true;\r\n         this._config = UserConfig;\r\n      }\r\n\r\n      var MetaConfig = this.AB.Config.metaConfig();\r\n      if (MetaConfig) {\r\n         this._listRoles = MetaConfig.roles || [];\r\n         this._listScopes = MetaConfig.scopes || [];\r\n         this._listUsers = MetaConfig.users || [];\r\n      }\r\n\r\n      this.AB.Network.on(\"account.logout\", (context, err, data) => {\r\n         if (err) {\r\n            console.error(err);\r\n            return;\r\n         }\r\n         this.emit(\"logout\", data);\r\n      });\r\n\r\n      return Promise.resolve();\r\n   }\r\n\r\n   isSystemDesigner() {\r\n      return (\r\n         this.roles((r) => r.uuid === \"6cc04894-a61b-4fb5-b3e5-b8c3f78bd331\")\r\n            .length > 0\r\n      );\r\n   }\r\n\r\n   email() {\r\n      return this._config?.email ?? \"\";\r\n   }\r\n\r\n   language() {\r\n      return this._config?.languageCode ?? \"en\";\r\n   }\r\n\r\n   logout() {\r\n      return this.AB.Network.post(\r\n         {\r\n            url: \"/auth/logout\",\r\n            data: { tenantUrl: this.AB.Tenant.setting(\"url\") },\r\n         },\r\n         {\r\n            key: \"account.logout\",\r\n            context: {},\r\n         }\r\n      );\r\n   }\r\n\r\n   roles(fn = () => true) {\r\n      return (this._config?.roles || []).filter(fn);\r\n   }\r\n   rolesAll() {\r\n      return this._listRoles;\r\n   }\r\n\r\n   scopes() {\r\n      return this._listScopes;\r\n   }\r\n\r\n   username() {\r\n      return this._config?.username;\r\n   }\r\n\r\n   userList() {\r\n      return this._listUsers;\r\n   }\r\n\r\n   uuid() {\r\n      return this._config?.uuid;\r\n   }\r\n\r\n   imageID() {\r\n      return this._config?.image_id;\r\n   }\r\n\r\n   sendEmailNotifications() {\r\n      return this._config?.sendEmailNotifications;\r\n   }\r\n}\r\n\r\nexport default new Account();\r\n","/*\r\n * Multilingual\r\n * manage our multilingual Translations/Labels/etc.\r\n */\r\n\r\nvar MLClass = require(\"../AppBuilder/platform/ABMLClass\");\r\n\r\nclass Multilingual extends MLClass {\r\n   constructor() {\r\n      super([], {});\r\n      // super()\r\n      //    [] = no labels\r\n      //    {} = placeholder ABFactory entry until .init() is called.\r\n\r\n      this.isAuthenticated = false;\r\n      this._config = null;\r\n\r\n      this._missingLabelID = false;\r\n      this._missingLabels = {};\r\n      this._pluginLabelsMissing = {};\r\n   }\r\n\r\n   init(AB) {\r\n      // {ABFactory} AB\r\n\r\n      this.AB = AB;\r\n\r\n      this.labels = this.AB.Config.labelConfig();\r\n\r\n      this.pluginLabels = {};\r\n\r\n      // this isn't actually an Async operation, so just resolve()\r\n      return Promise.resolve();\r\n   }\r\n\r\n   currentLanguage() {\r\n      return this.AB.Account.language();\r\n   }\r\n\r\n   label(key, altText, values = [], postMissing = true) {\r\n      // part of our transition: L(\"single string\") should start to work:\r\n      if (typeof altText == \"undefined\" && key) {\r\n         altText = key;\r\n      }\r\n\r\n      // other case: L(\"single string {0}\", [])\r\n      if (arguments.length == 2 && Array.isArray(altText)) {\r\n         values = altText;\r\n         altText = key;\r\n      }\r\n\r\n      // We need to escape \" characters or else they will get added to the the lang.js\r\n      // then we get errors next time we try to parse it as JSON (see appbuilder.label-missing)\r\n      altText = altText.replace(/\"/g, '\\\\\"');\r\n      key = key.replace(/\"/g, '\\\\\"');\r\n\r\n      // NOTE: transition to new Labels\r\n      // currently our code still uses the L(key, altText, values) format, but\r\n      // the labels we get back are in L(altText, values) format.\r\n      //\r\n      // we are going to keep this like this until we have a well functioning\r\n      // UI display of our Apps, which should flesh out most of the missing\r\n      // labels to our files.\r\n      //\r\n      // After that, convert our L(k, t, v) to L(t, v)\r\n\r\n      var newKey = altText;\r\n      if (newKey[0] == \"*\") {\r\n         newKey = newKey.slice(1);\r\n      }\r\n      var label = this.labels[newKey];\r\n      if (!label) {\r\n         if (postMissing) {\r\n            this.postMissingLabel(key, altText);\r\n         }\r\n         label = altText;\r\n      }\r\n\r\n      values.forEach((v, i) => {\r\n         var sub = `{${i}}`;\r\n         label = label.replaceAll(sub, v);\r\n      });\r\n      label = label.replace(/\\\\\"/g, '\"'); // unescape \" in the label\r\n      return label;\r\n   }\r\n\r\n   labelPlugin(plugin, altText, values = []) {\r\n      // 1st check to see if it is a common label from platform:\r\n      var label = this.label(altText, altText, values, false);\r\n      if (!label) {\r\n         // ok, so check to see if it is a Plugin Label:\r\n         label = this.pluginLabels[plugin][altText];\r\n      }\r\n      if (!label) {\r\n         // !! record it missing.\r\n         this._pluginLabelsMissing[plugin] =\r\n            this._pluginLabelsMissing[plugin] || {};\r\n         this._pluginLabelsMissing[plugin][altText] = altText;\r\n         label = altText;\r\n      }\r\n      values.forEach((v, i) => {\r\n         var sub = `{${i}}`;\r\n         label = label.replaceAll(sub, v);\r\n      });\r\n      return label;\r\n   }\r\n\r\n   languages() {\r\n      console.error(\r\n         \"Multilingual:languages(): Implement Language Storage/Retrieval.\"\r\n      );\r\n      return [];\r\n   }\r\n\r\n   pluginLoadLabels(key, labels) {\r\n      this.pluginLabels[key] = labels;\r\n   }\r\n   pluginLabelReport(key) {\r\n      console.warn(\"missing labels for plugin: \", key);\r\n      console.warn(\"current language:\", this.currentLanguage());\r\n      var labels = JSON.stringify(this._pluginLabelsMissing[key], null, 3);\r\n      console.warn(labels);\r\n   }\r\n\r\n   postMissingLabel(key, altText) {\r\n      if (this._missingLabelID) {\r\n         clearTimeout(this._missingLabelID);\r\n      }\r\n      var batchLength = 50;\r\n      var sendBatch = () => {\r\n         var batchLabels = [];\r\n         let missingLabels = Object.keys(this._missingLabels).map(\r\n            (k) => this._missingLabels[k]\r\n         );\r\n         if (missingLabels.length <= batchLength) {\r\n            batchLabels = missingLabels;\r\n            this._missingLabels = {};\r\n         } else {\r\n            for (var i = 0; i <= batchLength; i++) {\r\n               var l = missingLabels.shift();\r\n               batchLabels.push(l);\r\n               delete this._missingLabels[l.key];\r\n            }\r\n         }\r\n         this.AB.Network.post({\r\n            url: \"/multilingual/label-missing\",\r\n            data: { labels: JSON.stringify(batchLabels) },\r\n         }).then(() => {\r\n            if (Object.keys(this._missingLabels).length > 0) {\r\n               sendBatch();\r\n            }\r\n         });\r\n      };\r\n      this._missingLabelID = setTimeout(() => {\r\n         sendBatch();\r\n      }, 1000);\r\n\r\n      this._missingLabels[key] = { key, altText };\r\n   }\r\n   ///\r\n   /// Disable un-needed ABMLClass functionality\r\n   ///\r\n   /// NOTE: we are mainly Piggybacking on ABMLClass for it's\r\n   /// .translate() and .unTranslate() capabilities. So disable these\r\n   /// for good measure.\r\n   destroy() {\r\n      console.error(\"Multilingual:destroy(): Should not be called.\");\r\n      return Promise.resolve();\r\n   }\r\n   save() {\r\n      console.error(\"Multilingual:save(): Should not be called.\");\r\n      return Promise.resolve();\r\n   }\r\n   toObj() {\r\n      console.error(\"Multilingual:toObj(): Should not be called.\");\r\n      return {};\r\n   }\r\n   toDefinition() {\r\n      console.error(\"Multilingual:toDefinition(): Should not be called.\");\r\n      return {};\r\n   }\r\n}\r\n\r\nexport default new Multilingual();\r\n","/*\r\n * Network.js\r\n * A network manager for interfacing with our AppBuilder server.\r\n */\r\nvar EventEmitter = require(\"events\").EventEmitter;\r\nimport NetworkRest from \"./NetworkRest\";\r\nimport NetworkRestSocket from \"./NetworkRestSocket\";\r\n// import NetworkRelay from \"./NetworkRelay\";\r\n\r\nclass Network extends EventEmitter {\r\n   constructor() {\r\n      super();\r\n\r\n      this.setMaxListeners(0);\r\n      // we'll have > 10 for sure!\r\n\r\n      this.queueLock = null;\r\n      // {Lock} .queueLock\r\n      // our semaphore for coordinating our access to our local storage.\r\n\r\n      this._config = null;\r\n      this._network = null;\r\n      // {NetworkRelay | NetworkRest | NetworkSocket}\r\n      // the underlying Network connection object actually performing the\r\n      // communications with the Server.\r\n      // Which one is specified in the config.appbuilder.networkType setting\r\n\r\n      this._queueCount = 0;\r\n      // {int} _queueCount\r\n      // the # of network operations currently queued, pending Network\r\n      // reconnect.\r\n   }\r\n\r\n   init(AB) {\r\n      // {ABFactory} AB\r\n\r\n      this.AB = AB;\r\n\r\n      this.queueLock = new this.AB.Lock();\r\n\r\n      this._config = this.AB.Config.siteConfig();\r\n      if (this._config) {\r\n         switch (this._config.appbuilder.networkType) {\r\n            case \"relay\":\r\n               // this._network = new NetworkRelay();\r\n               break;\r\n\r\n            case \"socket\":\r\n               this._network = new NetworkRestSocket(this);\r\n               break;\r\n\r\n            case \"rest\":\r\n            default:\r\n               this._network = new NetworkRest(this);\r\n               break;\r\n         }\r\n\r\n         return this._network.init(AB);\r\n      } else {\r\n         console.error(\"??? Why No site config ???\");\r\n      }\r\n\r\n      //\r\n      // Handle reconnections and flushing the Queue:\r\n      //\r\n      if (io && io.socket) {\r\n         // When our Socket reconnects, be sure to flush any pending transactions.\r\n         io.socket.on(\"connected\", () => {\r\n            this.queueFlush();\r\n            if (this.idConnectionCheck) {\r\n               clearTimeout(this.idConnectionCheck);\r\n               this.idConnectionCheck = null;\r\n            }\r\n         });\r\n      } else {\r\n         console.error(\"!!! Network.init() : Did not find io.socket\");\r\n         window.addEventListener(\"online\", () => this.queueFlush());\r\n      }\r\n\r\n      return Promise.resolve();\r\n   }\r\n\r\n   //\r\n   // Interface API\r\n   //\r\n   /**\r\n    * Network.isRealTime\r\n    * indicates wether or not the current network connection supports\r\n    * RealTime updates.\r\n    * @return {bool}\r\n    */\r\n   get isRealTime() {\r\n      return this._network.isRealTime;\r\n   }\r\n\r\n   /**\r\n    * Network.get(options, jobResponse)\r\n    * perform a GET request back to the AppBuilder server.\r\n    * @param {obj} params the request parameters that need to be executed on\r\n    *              the AppBuilder Server\r\n    * @param {obj} jobResponse the callback info for handling the response.\r\n    *              {\r\n    *                  key:'unique.key',\r\n    *                  context:{ obj data }\r\n    *              }\r\n    * @return {Promise}\r\n    */\r\n   get(...params) {\r\n      return this._network.get(...params).then((data) => {\r\n         return this.normalizeData(data);\r\n      });\r\n   }\r\n\r\n   /**\r\n    * Network.post()\r\n    * perform an AJAX POST request to the AppBuilder server.\r\n    * this is a CREATE operation.\r\n    * @param {obj} params the request parameters that need to be executed on\r\n    *              the AppBuilder Server\r\n    * @param {obj} jobResponse the callback info for handling the response.\r\n    *              {\r\n    *                  key:'unique.key',\r\n    *                  context:{ obj data }\r\n    *              }\r\n    * @return {Promise}\r\n    */\r\n   post(...params) {\r\n      return this._network.post(...params).then((data) => {\r\n         return this.normalizeData(data);\r\n      });\r\n   }\r\n\r\n   /**\r\n    * Network.put()\r\n    * perform a PUT request to the AppBuilder server.\r\n    * This is for UPDATE/REPLACE operations to data on the server.\r\n    * @param {obj} params the request parameters that need to be executed on\r\n    *              the AppBuilder Server\r\n    * @param {obj} jobResponse the callback info for handling the response.\r\n    *              {\r\n    *                  key:'unique.key',\r\n    *                  context:{ obj data }\r\n    *              }\r\n    * @return {Promise}\r\n    */\r\n   put(...params) {\r\n      return this._network.put(...params).then((data) => {\r\n         return this.normalizeData(data);\r\n      });\r\n   }\r\n\r\n   /**\r\n    * Network.delete()\r\n    * perform an AJAX DELETE request to the AppBuilder server.\r\n    * @param {obj} params the request parameters that need to be executed on\r\n    *              the AppBuilder Server\r\n    * @param {obj} jobResponse the callback info for handling the response.\r\n    *              {\r\n    *                  key:'unique.key',\r\n    *                  context:{ obj data }\r\n    *              }\r\n    * @return {Promise}\r\n    */\r\n   delete(...params) {\r\n      return this._network.delete(...params).then((data) => {\r\n         return this.normalizeData(data);\r\n      });\r\n   }\r\n\r\n   ////\r\n   //// Network Utilities\r\n   ////\r\n\r\n   _connectionCheck() {\r\n      // if (!this.idConnectionCheck) {\r\n      if (this.isNetworkConnected()) {\r\n         this.queueFlush().catch(() => {\r\n            // on an error, we are still having connection issues\r\n            this.idConnectionCheck = setTimeout(() => {\r\n               this._connectionCheck();\r\n            }, 250);\r\n         });\r\n         this.idConnectionCheck = null;\r\n      } else {\r\n         this.idConnectionCheck = setTimeout(() => {\r\n            this._connectionCheck();\r\n         }, 250);\r\n      }\r\n      // }\r\n   }\r\n\r\n   /**\r\n    * @method networkStatus\r\n    * return the connection type currently registered with the network\r\n    * plugin.\r\n    * @return {string}\r\n    */\r\n   networkStatus() {\r\n      return navigator.connection.type;\r\n   }\r\n\r\n   /**\r\n    * @method isNetworkConnected\r\n    * return true/false if the device is currently connected to the\r\n    * internet.\r\n    * @return {bool}\r\n    */\r\n   isNetworkConnected() {\r\n      // if this is a Web Client and using sails.socket.io\r\n      if (io && io.socket && io.socket.isConnected) {\r\n         return io.socket.isConnected();\r\n      }\r\n\r\n      // if this isn't a Cordova Plugin, then return navigator data:\r\n      if (typeof Connection == \"undefined\") {\r\n         // NOTE: this technically only detects if we are connected to a\r\n         // network.  It doesn't guarantee we can communicate across the 'net\r\n         return navigator.onLine;\r\n      }\r\n\r\n      // Cordova Plugin:\r\n      return this.networkStatus() != Connection.NONE;\r\n   }\r\n\r\n   /**\r\n    * publishResponse()\r\n    * emit the requested response for this network operation.\r\n    * @param {obj} jobResponse\r\n    * @param {obj} error\r\n    * @param {obj} data\r\n    */\r\n   publishResponse(jobResponse, error, data) {\r\n      if (data) {\r\n         data = this.normalizeData(data);\r\n      }\r\n      this.emit(jobResponse.key, jobResponse.context, error, data);\r\n   }\r\n\r\n   normalizeData(data) {\r\n      // Data returning from our server is wrapped in an outer layer of\r\n      // information that is for our Networking API.\r\n      // the outer wrapper should be:\r\n      // on success :\r\n      // {\r\n      //   status: \"success\",\r\n      //   data:{Data For App}\r\n      // }\r\n      // on Error:\r\n      // {\r\n      //   status: \"error\",\r\n      //   id: {int} error code\r\n      //   ... other data here\r\n      // }\r\n\r\n      // we have physically received a data packet from the server,\r\n      // but we are informed that our transaction was problematic\r\n      // (400 level USER problem?)\r\n      if (data.status === \"error\") {\r\n         // TODO: review Error procedure here\r\n         return data;\r\n      }\r\n\r\n      // on success\r\n      // make sure we return the Application Level Data packet:\r\n      return data.data || data;\r\n   }\r\n\r\n   ////\r\n   //// Queued Requests\r\n   ////\r\n\r\n   /**\r\n    * refQueue()\r\n    * sub classes can override this for their own separate Queue Data\r\n    * @return {string}\r\n    */\r\n   refQueue() {\r\n      return \"networkQueue\";\r\n   }\r\n\r\n   /**\r\n    * queueCount()\r\n    * return the # of messages in the queue.\r\n    * @return {int}\r\n    */\r\n   queueCount() {\r\n      return this._queueCount;\r\n   }\r\n\r\n   /**\r\n    * Adds a request to the outgoing queue.\r\n    *\r\n    * @param {object} data\r\n    * @param {object} jobResponse\r\n    * @return {Promise}\r\n    */\r\n   queue(data, jobResponse) {\r\n      var refQueue = this.refQueue();\r\n\r\n      return new Promise((resolve, reject) => {\r\n         this.queueLock\r\n            .acquire()\r\n            .then(() => {\r\n               return this.AB.Storage.get(refQueue);\r\n            })\r\n            .then((queue) => {\r\n               queue = queue || [];\r\n               queue.push({ data, jobResponse });\r\n               this.AB.log(\r\n                  `:::: ${queue.length} request${\r\n                     queue.length > 1 ? \"s\" : \"\"\r\n                  } queued`\r\n               );\r\n               this._queueCount = queue.length;\r\n               return this.AB.Storage.set(refQueue, queue);\r\n            })\r\n            .then(() => {\r\n               this.emit(\"queued\");\r\n               // if we are not already polling the network, start\r\n               if (!this.idConnectionCheck) {\r\n                  this._connectionCheck();\r\n               }\r\n               this.queueLock.release();\r\n               resolve();\r\n            })\r\n            .catch((err) => {\r\n               this.AB.notify.developer(err, {\r\n                  message: \"Error while queueing data\",\r\n               });\r\n               this.AB.Analytics.logError(err);\r\n               reject(err);\r\n\r\n               this.queueLock.release();\r\n            });\r\n      });\r\n   }\r\n\r\n   /**\r\n    * queueFlush()\r\n    * Flush the queue and send the contents to the relay server.\r\n    */\r\n   queueFlush() {\r\n      var refQueue = this.refQueue();\r\n\r\n      // if we are not connected, then stop\r\n      if (!this.isNetworkConnected()) {\r\n         var error = new Error(\"Not connected to the internet.\");\r\n         error.code = \"E_NOTCONNECTED\";\r\n         return Promise.reject(error);\r\n      }\r\n\r\n      // otherwise, attempt to flush the queue:\r\n      return new Promise((resolve, reject) => {\r\n         this.queueLock\r\n            .acquire()\r\n\r\n            //\r\n            // Get queue contents\r\n            //\r\n            .then(() => {\r\n               return this.AB.Storage.get(refQueue);\r\n            })\r\n\r\n            //\r\n            // Send off each queued request\r\n            //\r\n            .then((queue) => {\r\n               // default to [] if not found\r\n               queue = queue || [];\r\n\r\n               // recursively process each pending queue request\r\n               var processRequest = (cb) => {\r\n                  if (queue.length == 0) {\r\n                     cb();\r\n                  } else {\r\n                     var entry = queue.shift();\r\n                     var params = entry.data;\r\n                     var job = entry.jobResponse;\r\n                     this._network\r\n                        .resend(params, job)\r\n                        .then(() => {\r\n                           processRequest(cb);\r\n                        })\r\n                        .catch((err) => {\r\n                           // if the err was due to a network connection error\r\n                           if (err && err.code == \"E_TOMANYRETRIES\") {\r\n                              cb(err);\r\n                              return;\r\n                           }\r\n                           // otherwise, try the next\r\n                           processRequest(cb);\r\n                        });\r\n                  }\r\n               };\r\n\r\n               return new Promise((res, rej) => {\r\n                  processRequest((err) => {\r\n                     if (err) {\r\n                        rej(err);\r\n                     } else {\r\n                        res();\r\n                     }\r\n                  });\r\n               });\r\n            })\r\n\r\n            //\r\n            // Clear queue contents\r\n            //\r\n            .then(() => {\r\n               this._queueCount = 0;\r\n               return this.AB.Storage.set(refQueue, []);\r\n            })\r\n\r\n            // release the Lock\r\n            .then(() => {\r\n               this.emit(\"queue.synced\");\r\n               return this.queueLock.release();\r\n            })\r\n\r\n            // all done.\r\n            .then(() => {\r\n               resolve();\r\n            })\r\n\r\n            // respond to errors:\r\n            .catch((err) => {\r\n               this.AB.notify.developer(err, {\r\n                  message: \"commAPI queueFlush error\",\r\n               });\r\n               this.AB.Analytics.logError(err);\r\n\r\n               this.queueLock.release().then(() => {\r\n                  reject(err);\r\n               });\r\n            });\r\n      });\r\n   }\r\n\r\n   /**\r\n    * Reset credentials to a blank state.\r\n    * @return {Promise}\r\n    */\r\n   reset() {\r\n      return Promise.resolve();\r\n   }\r\n\r\n   /**\r\n    * type()\r\n    * return the type of network connection we are using.\r\n    * [\"rest\", \"socket\", \"relay\"]\r\n    * @return {string}\r\n    */\r\n   type() {\r\n      return this._config.appbuilder.networkType;\r\n   }\r\n\r\n   // uuid() {\r\n   //    return this.AB.uuid();\r\n   // }\r\n\r\n   getTokens() {\r\n      // called in appPage.js : openRelayLoader()\r\n      return {};\r\n   }\r\n}\r\n\r\nexport default new Network();\r\n","/*\r\n * NetworkRest.js\r\n * The base Networking class.  This class is responsible for job submissions\r\n * and outlines the basic Network interface.\r\n */\r\n\r\n/* global navigator Connection */\r\n// import Account from \"./Account\";\r\n// import analytics from \"./Analytics\";\r\n// import EventEmitter from \"eventemitter2\";\r\nvar EventEmitter = require(\"events\").EventEmitter;\r\n// import Lock from \"./Lock\";\r\n\r\n// import { storage } from \"./Storage\";\r\n// import Tenant from \"./Tenant\";\r\n// import { v4 as uuidv4 } from \"uuid\";\r\n\r\n// Temp placeholders until Resources are implemented:\r\n\r\n// End Temp\r\n\r\nconst Atomic = require(\"atomicjs/dist/atomic.min.js\");\r\n// Atomic : a small $.ajax() replacement\r\n\r\nvar Config = null;\r\n// {} Config\r\n// the site specific configuration information\r\n\r\nclass NetworkRest extends EventEmitter {\r\n   constructor(parent) {\r\n      // {Network} parent\r\n\r\n      super({\r\n         wildcard: true,\r\n         newListener: false,\r\n         maxListeners: 0,\r\n      });\r\n\r\n      this.baseURL = null;\r\n      // {string} .baseURL\r\n      // the url of our site.\r\n\r\n      this.numRetries = 3;\r\n      // {int} .numRetries\r\n      // the number or times we should attempt to issue a network request.\r\n\r\n      this._network = parent;\r\n      // {Network} ._network\r\n      // the Parent Network Resource that the rest of the Platform actually\r\n      // works with.\r\n\r\n      this.isRealTime = false;\r\n      // {bool}\r\n      // does this Network type support RealTime updates. (socket = true);\r\n   }\r\n\r\n   /**\r\n    * @method init\r\n    * @param {ABFactory} AB\r\n    * @param {object} options\r\n    * @param {string} options.baseURL\r\n    * @return {Promise}\r\n    */\r\n   init(AB, options) {\r\n      this.AB = AB;\r\n\r\n      Config = this.AB.Config.siteConfig();\r\n      options = options || {};\r\n      if (options) {\r\n         this.baseURL = options.baseURL || Config.appbuilder.urlCoreServer;\r\n         this.numRetries =\r\n            options.networkNumRetries || Config.appbuilder.networkNumRetries;\r\n      }\r\n      return Promise.resolve();\r\n   }\r\n\r\n   //\r\n   // Interface API\r\n   //\r\n   /**\r\n    * Network.get(options, jobResponse)\r\n    * perform a GET request back to the AppBuilder server.\r\n    * @param {obj} params the request parameters that need to be executed on\r\n    *              the AppBuilder Server\r\n    * @param {obj} jobResponse the callback info for handling the response.\r\n    *              {\r\n    *                  key:'unique.key',\r\n    *                  context:{ obj data }\r\n    *              }\r\n    * @return {Promise}\r\n    */\r\n   get(params, jobResponse) {\r\n      params.type = params.type || \"GET\";\r\n\r\n      // data sent to params on a \"GET\" request need to be converted to\r\n      // uri querystring values:\r\n      var data = params.data || params.params;\r\n      if (data) {\r\n         var useThese = [\"string\", \"number\", \"boolean\"];\r\n         var search = Object.keys(data)\r\n            .map(function (key) {\r\n               var val = data[key];\r\n               if (useThese.indexOf(typeof val) == -1) {\r\n                  val = JSON.stringify(val);\r\n               }\r\n               return key + \"=\" + encodeURIComponent(val);\r\n            })\r\n            .join(\"&\");\r\n\r\n         var join = \"?\";\r\n         if (params.url.indexOf(\"?\") > -1) {\r\n            join = \"&\";\r\n         }\r\n         params.url = [params.url, search].join(join);\r\n      }\r\n\r\n      return this._request(params, jobResponse);\r\n   }\r\n\r\n   /**\r\n    * Network.post()\r\n    * perform an AJAX POST request to the AppBuilder server.\r\n    * @param {obj} params the request parameters that need to be executed on\r\n    *              the AppBuilder Server\r\n    * @param {obj} jobResponse the callback info for handling the response.\r\n    *              {\r\n    *                  key:'unique.key',\r\n    *                  context:{ obj data }\r\n    *              }\r\n    * @return {Promise}\r\n    */\r\n   post(params, jobResponse) {\r\n      params.type = params.type || \"POST\";\r\n      return this._request(params, jobResponse);\r\n   }\r\n\r\n   /**\r\n    * Network.put()\r\n    * perform a PUT request to the AppBuilder server.\r\n    * @param {obj} params the request parameters that need to be executed on\r\n    *              the AppBuilder Server\r\n    * @param {obj} jobResponse the callback info for handling the response.\r\n    *              {\r\n    *                  key:'unique.key',\r\n    *                  context:{ obj data }\r\n    *              }\r\n    * @return {Promise}\r\n    */\r\n   put(params, jobResponse) {\r\n      params.type = params.type || \"PUT\";\r\n      return this._request(params, jobResponse);\r\n   }\r\n\r\n   /**\r\n    * Network.delete()\r\n    * perform an AJAX DELETE request to the AppBuilder server.\r\n    * @param {obj} params the request parameters that need to be executed on\r\n    *              the AppBuilder Server\r\n    * @param {obj} jobResponse the callback info for handling the response.\r\n    *              {\r\n    *                  key:'unique.key',\r\n    *                  context:{ obj data }\r\n    *              }\r\n    * @return {Promise}\r\n    */\r\n   delete(params, jobResponse) {\r\n      params.type = params.type || \"DELETE\";\r\n      return this._request(params, jobResponse);\r\n   }\r\n\r\n   ////\r\n   //// Network Utilities\r\n   ////\r\n\r\n   isNetworkConnected() {\r\n      return this._network.isNetworkConnected();\r\n   }\r\n\r\n   salSend(params) {\r\n      return Atomic(params.url, params).then((packet) => {\r\n         // {json} packet\r\n         // the response from Atomic is in format:\r\n         // {data: {…}, xhr: XMLHttpRequest}\r\n         // we just want to send back our { status:\"\", data:xxx } packet.\r\n         return packet.data;\r\n      });\r\n   }\r\n\r\n   /**\r\n    * _request()\r\n    * perform the actual AJAX request for this operation.\r\n    * @param {obj} params  the jQuery.ajax() formatted params\r\n    * @param {obj} jobRequest  the information about the request's response.\r\n    * @return {Promise}\r\n    */\r\n   _request(params, jobResponse) {\r\n      // make sure we don't process too many retries:\r\n      params._retry = params._retry || 0;\r\n      if (params._retry >= this.numRetries) {\r\n         var err = new Error(\r\n            `Too many retries (${this.numRetries}) for ${params.url}`\r\n         );\r\n         err.code = \"E_TOMANYRETRIES\";\r\n         this.AB.notify.developer(err, {\r\n            context: \"NetworkRest:_request: Too Many Retries\",\r\n         });\r\n         // this.AB.Analytics.logError(err);\r\n         if (jobResponse) {\r\n            this._network.publishResponse(jobResponse, err);\r\n         }\r\n\r\n         return Promise.reject(err);\r\n      }\r\n\r\n      return new Promise((resolve, reject) => {\r\n         params.url = params.url || \"/\";\r\n         if (params.url[0] == \"/\") {\r\n            params.url = this.baseURL + params.url;\r\n         }\r\n\r\n         params.headers = params.headers || {};\r\n         if (this.AB.Account.authToken) {\r\n            params.headers.Authorization = this.AB.Account.authToken;\r\n         }\r\n         params.headers[\"Content-type\"] = \"application/json\";\r\n\r\n         var tenantID = this.AB.Tenant.id();\r\n         if (tenantID) {\r\n            params.headers[\"tenant-token\"] = tenantID;\r\n         }\r\n\r\n         // params.timeout = params.timeout || 6000;\r\n\r\n         if (this.isNetworkConnected()) {\r\n            params.method = params.method || params.type;\r\n            params.timeout = 6000; // ??\r\n            params.data = params.data || params.params;\r\n            delete params.params;\r\n\r\n            this.salSend(params)\r\n               .then((packet) => {\r\n                  // TODO: check if packet.status == \"error\"\r\n                  // and then .publishResponse() as an error\r\n\r\n                  //\r\n                  var data = packet;\r\n                  if (jobResponse) {\r\n                     this._network.publishResponse(jobResponse, null, data);\r\n                  }\r\n                  resolve(data);\r\n               })\r\n               .catch((err) => {\r\n                  // err.status\r\n                  // err.statusText\r\n                  // err.responseText\r\n                  // err.message  {socket}\r\n                  // err.stack    {socket}\r\n\r\n                  // if this is a network connection error, send the attempt again:\r\n                  if (\r\n                     err.statusText == \"Request timeout\" ||\r\n                     (err.message && err.message.indexOf(\"disconnected\") > -1)\r\n                  ) {\r\n                     //// Network Error: conneciton refused, access denied, etc...\r\n                     this.AB.Analytics.log(\r\n                        \"NetworkRest._request():network connection error detected. Trying again\"\r\n                     );\r\n\r\n                     params._retry++;\r\n\r\n                     // retry the attempt:\r\n                     this._request(params)\r\n                        .then((data) => {\r\n                           // console.log('--- timeout.then():',data);\r\n                           this.AB.warn(\r\n                              \"*** NetworkRest._request().then(): attempt resolved.\"\r\n                           );\r\n                           resolve(data);\r\n                        })\r\n                        .catch((_err) => {\r\n                           this.AB.notify.developer(_err, {\r\n                              message: \"*** NetworkRest._request().catch(): retry failed:\",\r\n                           });\r\n                           reject(_err);\r\n                        });\r\n\r\n                     return;\r\n                  } else {\r\n                     // Else attempt to emit() some common Error types for\r\n                     // additional Platform Handling.\r\n                     if (err.status == 403) {\r\n                        this.emit(\"error.badAuth\", err);\r\n                     } else if (err.status >= 400 && err.status < 500) {\r\n                        this.emit(\"error.badRequest\", err);\r\n                     } else if (err.status >= 500) {\r\n                        this.emit(\"error.badServer\", err);\r\n                     }\r\n                  }\r\n\r\n                  var packet = null;\r\n                  if (err.responseText) {\r\n                     try {\r\n                        packet = JSON.parse(err.responseText);\r\n                     } catch (e) {}\r\n                  }\r\n                  // if this is an req.ab.error() response:\r\n                  if (packet && packet.status == \"error\") {\r\n                     // check if REAUTH Error:\r\n                     if (packet.id == 5 || packet.code == \"E_REAUTH\") {\r\n                        this._network.emit(\"reauth\");\r\n                        return;\r\n                     }\r\n\r\n                     this.AB.notify.developer(packet, {\r\n                        context:\r\n                           \"NetworkRest:_request:Error returned from Server (req.ab.error())\",\r\n                        data: packet.data,\r\n                     });\r\n                     // this.AB.Analytics.logError(packet.data);\r\n                     // this.AB.error(packet.data);\r\n                     if (jobResponse) {\r\n                        this._network.publishResponse(\r\n                           jobResponse,\r\n                           packet,\r\n                           null\r\n                        );\r\n                     }\r\n                     return reject(packet.data);\r\n                  } else {\r\n                     // unknown/unexpected error:\r\n                     var error = new Error(\r\n                        `${err.status} ${err.statusText || err.message}: ${\r\n                           params.method\r\n                        } ${params.url}`\r\n                     );\r\n                     error.response = err.responseText;\r\n                     error.text = err.statusText;\r\n                     error.err = err;\r\n                     error.url = `${params.method} ${params.url}`;\r\n                     this.AB.notify.developer(error, {\r\n                        context:\r\n                           \"NetworkRest:_request:Unknown Error returned from server\",\r\n                     });\r\n                     // this.AB.Analytics.logError(error);\r\n                     // this.AB.error(error);\r\n                     if (jobResponse) {\r\n                        this._network.publishResponse(jobResponse, error);\r\n                     }\r\n                     return reject(error);\r\n                  }\r\n               });\r\n         } else {\r\n            // now Queue this request params.\r\n            this.AB.Analytics.log(\r\n               \"NetworkRest:_request(): Network is offline. Queuing request.\"\r\n            );\r\n            this._network\r\n               .queue(params, jobResponse)\r\n               .then(() => {\r\n                  resolve({ status: \"queued\" });\r\n               })\r\n               .catch(reject);\r\n         }\r\n      });\r\n   }\r\n\r\n   /**\r\n    * resend()\r\n    * processes messages that were queued due to network connectivity\r\n    * issues.\r\n    * @param {obj} params  the jQuery.ajax() formatted params\r\n    * @param {obj} jobRequest  the information about the request's response.\r\n    * @return {Promise}\r\n    */\r\n   resend(params, jobResponse) {\r\n      // var op = params.type.toLowerCase();\r\n      return this._request(params, jobResponse);\r\n   }\r\n}\r\n\r\nexport default NetworkRest;\r\n","/*\r\n * NetworkRest.js\r\n * The base Networking class.  This class is responsible for job submissions\r\n * and outlines the basic Network interface.\r\n */\r\n\r\nimport NetworkRest from \"./NetworkRest\";\r\n\r\nconst listSocketEvents = [\r\n   // NOTE: ABFactory.definitionXXX() will manage emitting these\r\n   // events internally:\r\n   // \"ab.abdefinition.create\",\r\n   // \"ab.abdefinition.update\",\r\n   // \"ab.abdefinition.delete\",\r\n   \"ab.datacollection.create\",\r\n   \"ab.datacollection.update\",\r\n   \"ab.datacollection.stale\",\r\n   \"ab.datacollection.delete\",\r\n   \"ab.inbox.create\",\r\n   // \"ab.object.update\",\r\n];\r\n// {array}\r\n// The io.socket.* events we are listening for that relate to our datacollection\r\n// maintainence.\r\n\r\nclass NetworkRestSocket extends NetworkRest {\r\n   constructor(parent) {\r\n      // {Network} parent\r\n\r\n      super(parent);\r\n\r\n      this.isRealTime = true;\r\n      // {bool}\r\n      // does this Network type support RealTime updates. (socket = true);\r\n\r\n      // Pass the io.socket.on(*) events to our AB factory.\r\n      listSocketEvents.forEach((ev) => {\r\n         io.socket.on(ev, (data) => {\r\n            // check if the ev contains 'datacollection'\r\n            // and do a single normalizeData() on the incoming data here\r\n            // before sending it off to be processed.\r\n            if (ev.indexOf(\"ab.datacollection\") > -1) {\r\n               let values = data.data;\r\n               if (values) {\r\n                  let obj = this.AB.objectByID(data.objectId);\r\n                  if (obj) {\r\n                     let model = obj.model();\r\n                     if (ev != \"ab.datacollection.delete\")\r\n                        model.normalizeData(data.data);\r\n                  }\r\n               }\r\n            }\r\n            this.AB.emit(ev, data);\r\n         });\r\n      });\r\n   }\r\n\r\n   //\r\n   // Interface API\r\n   //\r\n\r\n   ////\r\n   //// Network Utilities\r\n   ////\r\n\r\n   isNetworkConnected() {\r\n      return io.socket.isConnected();\r\n   }\r\n\r\n   salSend(params) {\r\n      return new Promise((resolve, reject) => {\r\n         params.method = params.method.toLowerCase();\r\n\r\n         io.socket.request(params, (data, jwres) => {\r\n            // {json} data\r\n            // the data response from the request\r\n            // {json} jwres\r\n            // A JSON WebSocket Response object.\r\n            //    {json} jwres.headers :  header values\r\n            //    {int}  jwres.statusCode : http response code\r\n            //    {json} jwres.body === resData\r\n\r\n            // if this is an  error\r\n            if (jwres.statusCode >= 400) {\r\n               // Our NetworkRest.error( err ) should be in this format:\r\n               // err.status\r\n               // err.statusText\r\n               // err.responseText\r\n\r\n               var errStr = jwres.error ? jwres.error.toString() : jwres.body;\r\n\r\n               var err = new Error(`Socket Error: ${errStr}`);\r\n               err.status = jwres.statusCode;\r\n               err.statusText = errStr;\r\n               err.responseText = jwres.body;\r\n\r\n               // on RequestTimeout:\r\n               // err.statusText == \"Request timeout\"\r\n\r\n               reject(err);\r\n            } else {\r\n               // some errors like socket disconnected return an Error for data\r\n               if (data instanceof Error) {\r\n                  reject(data);\r\n                  return;\r\n               }\r\n\r\n               if (typeof data == \"string\") {\r\n                  data = JSON.parse(data);\r\n               }\r\n\r\n               // Got a JSON response but was the service response an error?\r\n               // this would be a strange case where the .statusCode < 400\r\n               if (data.status && data.status == \"error\") {\r\n                  // make sure to reject an err.responseText = data\r\n                  reject({\r\n                     status: jwres.statusCode,\r\n                     responseText: JSON.Stringify(data),\r\n                  });\r\n               }\r\n               // Success!\r\n               else {\r\n                  resolve(data);\r\n               }\r\n            }\r\n         });\r\n      });\r\n   }\r\n}\r\n\r\nexport default NetworkRestSocket;\r\n","var EventEmitter = require(\"events\").EventEmitter;\r\n\r\nimport StorageLocal from \"./StorageLocal.js\";\r\n\r\nclass Storage extends EventEmitter {\r\n   constructor() {\r\n      super();\r\n\r\n      this.tenantStorage = null;\r\n      this._config = null;\r\n      this._storage = null;\r\n   }\r\n\r\n   init(AB) {\r\n      // {ABFactory} AB\r\n\r\n      this.AB = AB;\r\n      var config = this.AB.Config.siteConfig();\r\n      if (config) {\r\n         if (config.storage && config.storage.encrypted) {\r\n            console.error(\"TODO: Implement Encrypted Storage\");\r\n            // this._storage = StorageEncrypted;\r\n            this._storage = StorageLocal;\r\n         } else {\r\n            this._storage = StorageLocal;\r\n         }\r\n\r\n         return this._storage.init(AB);\r\n      } else {\r\n         console.error(\"??? Why No site config ???\");\r\n      }\r\n\r\n      return Promise.resolve();\r\n   }\r\n\r\n   set(...params) {\r\n      return this._storage.set(...params);\r\n   }\r\n\r\n   get(...params) {\r\n      return this._storage.get(...params);\r\n   }\r\n\r\n   clear(...params) {\r\n      return this._storage.clear(...params);\r\n   }\r\n\r\n   clearAll(...params) {\r\n      return this._storage.clearAll(...params);\r\n   }\r\n}\r\n\r\nexport default new Storage();\r\n","/*\r\n * StorageLocal\r\n *\r\n * An interface for storing and retrieving Client Side data.  Data stored\r\n * in StorageLoacal is NOT encrypted.\r\n *\r\n * This implementation is based upon the webix.storage.local library.\r\n * See: https://docs.webix.com/api__refs__storage.local.html\r\n *\r\n */\r\n\r\nvar EventEmitter = require(\"events\").EventEmitter;\r\n\r\nclass StorageLocal extends EventEmitter {\r\n   constructor() {\r\n      super();\r\n\r\n      this.tenantStorage = null;\r\n      // {Webix.storage} object.\r\n      // We divide the storage data according to the tenant we are working\r\n      // with.  This way Users who can move between different Tenants can\r\n      // keep their local data separated.\r\n   }\r\n\r\n   init(AB) {\r\n      // {ABFactory} AB\r\n\r\n      this.AB = AB;\r\n      var tenantID = this.AB.Tenant.id();\r\n      if (!tenantID) {\r\n         tenantID = \"noAuth\";\r\n         // \"noAuth\" is considered the tenant on our Login sequence\r\n         // which should have a minimum of data stored (language maybe?)\r\n      }\r\n\r\n      this.tenantStorage = this.AB.Webix.storage.prefix(\r\n         tenantID,\r\n         this.AB.Webix.storage.local\r\n      );\r\n\r\n      // this isn't actually an Async operation, so just resolve()\r\n      return Promise.resolve();\r\n   }\r\n\r\n   set(key, value /* , options = {} */) {\r\n      return Promise.resolve().then(() => {\r\n         return this.tenantStorage.put(key, value);\r\n      });\r\n   }\r\n\r\n   get(key /*, options = {} */) {\r\n      return Promise.resolve().then(() => {\r\n         return this.tenantStorage.get(key);\r\n      });\r\n   }\r\n\r\n   clear(key) {\r\n      return Promise.resolve().then(() => {\r\n         return this.tenantStorage.remove(key);\r\n      });\r\n   }\r\n\r\n   clearAll() {\r\n      return Promise.resolve().then(() => {\r\n         return this.tenantStorage.clear();\r\n      });\r\n   }\r\n}\r\n\r\nexport default new StorageLocal();\r\n","var EventEmitter = require(\"events\").EventEmitter;\r\n\r\nimport Config from \"../config/Config.js\";\r\n\r\nclass Tenant extends EventEmitter {\r\n   constructor() {\r\n      super();\r\n\r\n      this.text = false;\r\n      this._config = null;\r\n      this.textClickToEnter = null;\r\n   }\r\n\r\n   init() {\r\n      var config = Config.tenantConfig();\r\n      if (config) {\r\n         // check if we have options that are stored as a string\r\n         if (\r\n            typeof config.options === \"string\" ||\r\n            config.options instanceof String\r\n         ) {\r\n            // if we do try to parse them into a JSON object\r\n            try {\r\n               config.options = JSON.parse(config.options);\r\n            } catch (error) {\r\n               console.error(error);\r\n            }\r\n         }\r\n         this._config = config;\r\n         this.textClickToEnter = config.options.textClickToEnter;\r\n      }\r\n\r\n      // this isn't actually an Async operation, so just resolve()\r\n      return Promise.resolve();\r\n   }\r\n\r\n   id() {\r\n      if (this._config.id == \"??\") {\r\n         return null;\r\n      }\r\n      return this._config.id;\r\n   }\r\n\r\n   setting(key, value) {\r\n      if (value) {\r\n         this._config.options[key] = value;\r\n         return;\r\n      }\r\n      return this._config.options[key];\r\n   }\r\n}\r\n\r\nexport default new Tenant();\r\n","/*\r\n * custom_activelist\r\n *\r\n * Create a custom webix component.\r\n *\r\n */\r\n\r\nmodule.exports = class ABCustomActiveList {\r\n   get key() {\r\n      return \"activelist\";\r\n   }\r\n\r\n   constructor(App, key) {\r\n      // App \t{obj}\tour application instance object.\r\n      // key {string}\tthe destination key in App.custom[componentKey] for the instance of this component:\r\n\r\n      // super(App, key);\r\n\r\n      var L = App.Label;\r\n\r\n      var labels = {\r\n         common: App.labels,\r\n\r\n         component: {}\r\n      };\r\n\r\n      // internal list of Webix IDs to reference our UI components.\r\n      var ids = {\r\n         component: App.unique(this.key)\r\n      };\r\n\r\n      // Our webix UI definition:\r\n      var _ui = {\r\n         name: this.key\r\n      };\r\n      this.view = this.key;\r\n\r\n      // our internal business logic\r\n      var _logic = {};\r\n      this._logic = _logic;\r\n\r\n      // Tell Webix to create an INSTANCE of our custom component:\r\n      webix.protoUI(_ui, webix.ui.list, webix.ActiveContent);\r\n   }\r\n};\r\n","/*\r\n * countfooter\r\n *\r\n * Add the count footer to the webix's datatable.\r\n *\r\n */\r\n\r\nmodule.exports = class ABCountFooter {\r\n   get key() {\r\n      return \"countfooter\";\r\n   }\r\n\r\n   constructor(App, key) {\r\n      // App \t{obj}\tour application instance object.\r\n      // key {string}\tthe destination key in App.custom[componentKey] for the instance of this component:\r\n\r\n      // super(App, key);\r\n\r\n      var L = App.Label;\r\n\r\n      var labels = {};\r\n\r\n      // internal list of Webix IDs to reference our UI components.\r\n      var ids = {};\r\n\r\n      // Our webix UI definition:\r\n      var _ui = {};\r\n      this.view = this.key;\r\n\r\n      // our internal business logic\r\n      var _logic = {};\r\n      this._logic = _logic;\r\n\r\n      // Tell Webix :\r\n      webix.ui.datafilter.countColumn = webix.extend(\r\n         {\r\n            refresh: function (datatable, node, info) {\r\n               var result = 0;\r\n\r\n               var rowData = datatable.find({}) || [];\r\n               rowData.forEach((row) => {\r\n                  if (row == null) return;\r\n\r\n                  var data =\r\n                     row[info.columnId] || row[info.columnId + \"__relation\"];\r\n\r\n                  // array\r\n                  if (data && Array.isArray(data)) {\r\n                     result += data.length;\r\n                  } else if (\r\n                     data != null &&\r\n                     data != \"\" &&\r\n                     data != false &&\r\n                     data != \"false\" &&\r\n                     data != \"0\"\r\n                  ) {\r\n                     result += 1;\r\n                  }\r\n               });\r\n\r\n               node.innerHTML = result;\r\n            },\r\n         },\r\n         webix.ui.datafilter.summColumn\r\n      );\r\n   }\r\n};\r\n","/*\r\n * Custom Component Manager\r\n * Make sure our {ABComponent}s are initialized with our custom\r\n * Webix Components.\r\n */\r\n\r\n// Import our Custom Components here:\r\nvar componentList = [\r\n   require(\"./activelist\"),\r\n   require(\"./countfooter\"),\r\n   require(\"./datetimepicker\"),\r\n   require(\"./editlist\"),\r\n   require(\"./edittree\"),\r\n   require(\"./editunitlist\"),\r\n   require(\"./focusableTemplate\"),\r\n   require(\"./formioBuilder\"),\r\n   require(\"./formioPreview\"),\r\n   require(\"./numbertext\"),\r\n   require(\"./timepicker\"),\r\n   require(\"./totalfooter\"),\r\n   require(\"./treesuggest\"),\r\n   // require('./savablelayout')\r\n];\r\n\r\nmodule.exports = class ABCustomComponentManager {\r\n   constructor() {}\r\n\r\n   initComponents(App) {\r\n      App.custom = App.custom || {};\r\n\r\n      componentList.forEach((Component) => {\r\n         var component = new Component(App);\r\n         App.custom[component.key] = component;\r\n      });\r\n\r\n      // Transition to v2:\r\n      App.AB.custom = App.custom;\r\n   }\r\n};\r\n","/*\r\n * custom_datetimepicker\r\n *\r\n * Create a custom webix component.\r\n *\r\n */\r\n\r\nmodule.exports = class ABCustomDateTimePicker {\r\n   //.extend(ComponentKey, function(App, componentKey ) {\r\n\r\n   get key() {\r\n      return \"datetimepicker\";\r\n   }\r\n\r\n   constructor(App) {\r\n      // App \t{obj}\tour application instance object.\r\n      // componentKey {string}\tthe destination key in App.custom[componentKey] for the instance of this component:\r\n\r\n      // super(App, key);\r\n\r\n      var L = App.Label;\r\n\r\n      var labels = {\r\n         common: App.labels,\r\n\r\n         component: {}\r\n      };\r\n\r\n      // internal list of Webix IDs to reference our UI components.\r\n      var ids = {\r\n         component: App.unique(this.key)\r\n      };\r\n\r\n      // Our webix UI definition:\r\n      var _ui = {\r\n         name: App.unique(\"custom_datetimepicker\") // keep this unique for this App instance.\r\n      };\r\n      this.view = this.key;\r\n\r\n      // our internal business logic\r\n      var _logic = {};\r\n      this._logic = _logic;\r\n\r\n      // Tell Webix to create an INSTANCE of our custom component:\r\n      webix.editors.$popup.datetime = {\r\n         view: \"popup\",\r\n         width: 250,\r\n         height: 250,\r\n         padding: 0,\r\n         body: {\r\n            view: \"calendar\",\r\n            icons: true,\r\n            borderless: true,\r\n            timepicker: true\r\n         }\r\n      };\r\n\r\n      webix.editors.datetime = webix.extend(\r\n         {\r\n            popupType: \"datetime\"\r\n         },\r\n         webix.editors.date\r\n      );\r\n   }\r\n};\r\n","/*\r\n * custom_editlist\r\n *\r\n * Create a custom webix component.\r\n *\r\n */\r\n\r\nmodule.exports = class ABCustomEditList {\r\n   // .extend(ComponentKey, function(App, componentKey ) {\r\n\r\n   get key() {\r\n      return \"editlist\";\r\n   }\r\n\r\n   constructor(App) {\r\n      // App \t{obj}\tour application instance object.\r\n      // key {string}\tthe destination key in App.custom[componentKey] for the instance of this component:\r\n\r\n      // super(App, key);\r\n\r\n      var L = App.Label;\r\n\r\n      var labels = {\r\n         common: App.labels,\r\n\r\n         component: {}\r\n      };\r\n\r\n      // internal list of Webix IDs to reference our UI components.\r\n      var ids = {\r\n         component: App.unique(this.key)\r\n      };\r\n\r\n      // Our webix UI definition:\r\n      var _ui = {\r\n         name: this.key\r\n      };\r\n      this.view = this.key;\r\n\r\n      // our internal business logic\r\n      var _logic = {};\r\n      this._logic = _logic;\r\n\r\n      // Tell Webix to create an INSTANCE of our custom component:\r\n      webix.protoUI(_ui, webix.EditAbility, webix.ui.list);\r\n   }\r\n};\r\n","/*\r\n * custom_edittree\r\n *\r\n * Create a custom webix component.\r\n *\r\n */\r\n\r\nmodule.exports = class ABCustomEditTree {\r\n   // .extend(ComponentKey, function(App, componentKey ) {\r\n\r\n   get key() {\r\n      return \"edittree\";\r\n   }\r\n\r\n   constructor(App) {\r\n      // App \t{obj}\tour application instance object.\r\n      // key {string}\tthe destination key in App.custom[componentKey] for the instance of this component:\r\n\r\n      // super(App, key);\r\n\r\n      var L = App.Label;\r\n\r\n      var labels = {\r\n         common: App.labels,\r\n\r\n         component: {}\r\n      };\r\n\r\n      // internal list of Webix IDs to reference our UI components.\r\n      var ids = {\r\n         component: App.unique(this.key)\r\n      };\r\n\r\n      // Our webix UI definition:\r\n      var _ui = {\r\n         name: this.key\r\n      };\r\n      this.view = this.key;\r\n\r\n      // our internal business logic\r\n      var _logic = {};\r\n      this._logic = _logic;\r\n\r\n      // Tell Webix to create an INSTANCE of our custom component:\r\n      webix.protoUI(_ui, webix.EditAbility, webix.ui.tree);\r\n   }\r\n};\r\n","/*\r\n * custom_editunitlist\r\n *\r\n * Create a custom webix component.\r\n *\r\n */\r\n\r\nmodule.exports = class ABCustomEditUnitList {\r\n   // .extend(ComponentKey, function(App, componentKey ) {\r\n\r\n   get key() {\r\n      return \"editunitlist\";\r\n   }\r\n\r\n   constructor(App) {\r\n      // App \t{obj}\tour application instance object.\r\n      // key {string}\tthe destination key in App.custom[componentKey] for the instance of this component:\r\n\r\n      // super(App, key);\r\n      /*\r\n      var L = App.Label;\r\n\r\n      var labels = {\r\n         common: App.labels,\r\n\r\n         component: {},\r\n      };\r\n\r\n      // internal list of Webix IDs to reference our UI components.\r\n      var ids = {\r\n         component: App.unique(this.key),\r\n      };\r\n*/\r\n      // Our webix UI definition:\r\n      var _ui = {\r\n         name: this.key,\r\n      };\r\n      this.view = this.key;\r\n\r\n      // our internal business logic\r\n      var _logic = {};\r\n      this._logic = _logic;\r\n\r\n      // Tell Webix to create an INSTANCE of our custom component:\r\n      webix.protoUI(_ui, webix.EditAbility, webix.ui.unitlist);\r\n   }\r\n};\r\n","/*\r\n * custom_activelist\r\n *\r\n * Create a custom webix component.\r\n *\r\n */\r\n\r\nmodule.exports = class ABCustomFocusableTemplate {\r\n   get key() {\r\n      return \"focusabletemplate\";\r\n   }\r\n\r\n   constructor(App) {\r\n      // App \t{obj}\tour application instance object.\r\n      // key {string}\tthe destination key in App.custom[componentKey] for the instance of this component:\r\n\r\n      // super(App, key);\r\n\r\n      var L = App.Label;\r\n\r\n      var labels = {\r\n         common: App.labels,\r\n\r\n         component: {}\r\n      };\r\n\r\n      // internal list of Webix IDs to reference our UI components.\r\n      var ids = {\r\n         component: App.unique(this.key)\r\n      };\r\n\r\n      // Our webix UI definition:\r\n      var _ui = {\r\n         name: this.key,\r\n         focus: function() {\r\n            return false;\r\n         }\r\n      };\r\n      this.view = this.key;\r\n\r\n      // our internal business logic\r\n      var _logic = {};\r\n      this._logic = _logic;\r\n\r\n      // Tell Webix to create an INSTANCE of our custom component:\r\n      webix.protoUI(_ui, webix.ui.template, webix.UIManager);\r\n   }\r\n};\r\n","/*\r\n * formioBuilder\r\n *\r\n * Create a custom webix component.\r\n *\r\n */\r\n\r\nmodule.exports = class ABCustomFormIOBuilder {\r\n   get key() {\r\n      return \"formiobuilder\";\r\n   }\r\n\r\n   constructor(App) {\r\n      // App \t{obj}\tour application instance object.\r\n      // key {string}\tthe destination key in App.custom[componentKey] for the instance of this component:\r\n\r\n      // super(App, key);\r\n\r\n      var L = App.Label;\r\n\r\n      var labels = {\r\n         common: App.labels,\r\n\r\n         component: {},\r\n      };\r\n\r\n      // internal list of Webix IDs to reference our UI components.\r\n      var ids = {\r\n         component: App.unique(this.key),\r\n      };\r\n\r\n      // We need to reference this on the save so lets put it in a global var\r\n      var formBuilder;\r\n\r\n      // Our webix UI definition:\r\n      var _ui = {\r\n         name: this.key,\r\n         defaults: {\r\n            css: \"scrolly forceOpen\",\r\n            hidden: false,\r\n            autofit: true,\r\n         },\r\n         $init: function (config) {\r\n            var comp = _logic.parseDataFields(config.dataFields);\r\n            var formComponents = config.formComponents\r\n               ? config.formComponents\r\n               : {};\r\n            Formio.builder(this.$view, formComponents, {\r\n               builder: {\r\n                  basic: false,\r\n                  advanced: false,\r\n                  // data: false,\r\n                  customBasic: false,\r\n                  premium: false,\r\n                  custom: {\r\n                     title: \"Fields\",\r\n                     weight: 0,\r\n                     default: true,\r\n                     components: comp,\r\n                  },\r\n                  layout: {\r\n                     components: {\r\n                        table: true,\r\n                     },\r\n                  },\r\n               },\r\n            }).then(function (builder) {\r\n               // now that it is set up we can push it into the global var\r\n               // builder.submission = {\r\n               //     data: {\r\n               //         Name: \"James\",\r\n               //         \"Number Field\": 3\r\n               //     }\r\n               // };\r\n               formBuilder = builder;\r\n            });\r\n         },\r\n         // set up a function that can be called to request the form schema\r\n         getFormData: () => {\r\n            return formBuilder.schema;\r\n         },\r\n      };\r\n      this.view = this.key;\r\n\r\n      // our internal business logic\r\n      var _logic = {\r\n         /**\r\n          * @method parseDataObjects\r\n          *\r\n          * @param store {webix.TreeCollection}\r\n          * @param elem {Object} the webix element\r\n          * @param parentId {integer - nullable} id of parent id\r\n          */\r\n         parseDataFields: (fields) => {\r\n            var components = {};\r\n            // objects.forEach((obj) => {\r\n            //     var fields = obj.fields();\r\n            //     console.log(fields);\r\n            fields.forEach((entry) => {\r\n               if (!entry.field) return;\r\n               switch (entry.field.key) {\r\n                  case \"boolean\":\r\n                     components[entry.key] = {\r\n                        title: entry.label,\r\n                        key: entry.key,\r\n                        icon: entry.field.icon,\r\n                        schema: {\r\n                           abFieldID: entry.field.id,\r\n                           label: entry.field.label,\r\n                           type: \"checkbox\",\r\n                           disabled: true,\r\n                           key: entry.key,\r\n                           _key: entry.key,\r\n                           input: true,\r\n                        },\r\n                     };\r\n                     break;\r\n                  case \"calculate\":\r\n                     components[entry.key] = {\r\n                        title: entry.label,\r\n                        key: entry.key,\r\n                        icon: entry.field.icon,\r\n                        schema: {\r\n                           abFieldID: entry.field.id,\r\n                           label: entry.field.label,\r\n                           type: \"textfield\",\r\n                           key: entry.key,\r\n                           _key: entry.key,\r\n                           input: true,\r\n                           inputType: \"text\",\r\n                           disabled: true,\r\n                           calculateValue:\r\n                              \"value = \" +\r\n                              entry.field.settings.formula\r\n                                 .replace(/{/g, \"data['\")\r\n                                 .replace(/}/g, \"']\"),\r\n                        },\r\n                     };\r\n                     break;\r\n                  case \"connectObject\":\r\n                     components[entry.key] = {\r\n                        title: entry.label,\r\n                        key: entry.key,\r\n                        icon: entry.field.icon,\r\n                        schema: {\r\n                           abFieldID: entry.field.id,\r\n                           label: entry.field.label,\r\n                           type: \"textfield\",\r\n                           key: entry.key,\r\n                           _key: entry.key,\r\n                           input: true,\r\n                           inputType: \"text\",\r\n                           disabled: true,\r\n                           calculateValue: `value = data['${entry.key}.format']`,\r\n                           // ,calculateValue: `value = '${entry.field.settings.textFormula}'`\r\n                        },\r\n                     };\r\n                     break;\r\n\r\n                  case \"date\":\r\n                     components[entry.key] = {\r\n                        title: entry.label,\r\n                        key: entry.key,\r\n                        icon: entry.field.icon,\r\n                        schema: {\r\n                           abFieldID: entry.field.id,\r\n                           label: entry.field.label,\r\n                           type: \"datetime\",\r\n                           disabled: true,\r\n                           key: entry.key,\r\n                           _key: entry.key,\r\n                           input: true,\r\n                           format:\r\n                              entry.field.settings.timeFormat == 1\r\n                                 ? \"MMMM d, yyyy\"\r\n                                 : \"MMMM d, yyyy h:mm a\",\r\n                        },\r\n                     };\r\n                     break;\r\n                  case \"email\":\r\n                     components[entry.key] = {\r\n                        title: entry.label,\r\n                        key: entry.key,\r\n                        icon: entry.field.icon,\r\n                        schema: {\r\n                           abFieldID: entry.field.id,\r\n                           label: entry.field.label,\r\n                           disabled: true,\r\n                           type: \"email\",\r\n                           key: entry.key,\r\n                           _key: entry.key,\r\n                           input: true,\r\n                        },\r\n                     };\r\n                     break;\r\n                  case \"file\":\r\n                     components[entry.key] = {\r\n                        title: entry.label,\r\n                        key: entry.key,\r\n                        icon: entry.field.icon,\r\n                        schema: {\r\n                           abFieldID: entry.field.id,\r\n                           label: entry.field.label,\r\n                           type: \"htmlelement\",\r\n                           tag: \"a\",\r\n                           className: \"btn btn-primary btn-block\",\r\n                           content:\r\n                              \"<i class='fa fa-paperclip'></i>  \" +\r\n                              \"{{JSON.parse(data['\" +\r\n                              entry.key +\r\n                              \"']).filename}}\",\r\n                           attrs: [\r\n                              {\r\n                                 attr: \"href\",\r\n                                 value:\r\n                                    \"/opsportal/file/\" +\r\n                                    entry.field.object.application.name +\r\n                                    \"/\" +\r\n                                    \"{{JSON.parse(data['\" +\r\n                                    entry.key +\r\n                                    \"']).uuid}}\",\r\n                              },\r\n                              {\r\n                                 attr: \"target\",\r\n                                 value: \"_blank\",\r\n                              },\r\n                           ],\r\n                           refreshOnChange: true,\r\n                           key: entry.key,\r\n                           _key: entry.key,\r\n                           disabled: true,\r\n                           input: false,\r\n                        },\r\n                     };\r\n                     break;\r\n                  case \"image\":\r\n                     components[entry.key] = {\r\n                        title: entry.label,\r\n                        key: entry.key,\r\n                        icon: entry.field.icon,\r\n                        schema: {\r\n                           abFieldID: entry.field.id,\r\n                           label: entry.field.label,\r\n                           type: \"htmlelement\",\r\n                           tag: \"img\",\r\n                           className: \"img-thumbnail max100\",\r\n                           content: \"\",\r\n                           attrs: [\r\n                              {\r\n                                 attr: \"src\",\r\n                                 value:\r\n                                    \"/opsportal/image/\" +\r\n                                    entry.field.object.application.name +\r\n                                    \"/\" +\r\n                                    \"{{data['\" +\r\n                                    entry.key +\r\n                                    \"']}}\",\r\n                              },\r\n                           ],\r\n                           refreshOnChange: true,\r\n                           key: entry.key,\r\n                           _key: entry.key,\r\n                           input: false,\r\n                        },\r\n                     };\r\n                     break;\r\n                  case \"list\":\r\n                     var vals = [];\r\n                     entry.field.settings.options.forEach((opt) => {\r\n                        vals.push({\r\n                           label: opt.text,\r\n                           value: opt.id,\r\n                        });\r\n                     });\r\n                     components[entry.key] = {\r\n                        title: entry.label,\r\n                        key: entry.key,\r\n                        icon: entry.field.icon,\r\n                        schema: {\r\n                           abFieldID: entry.field.id,\r\n                           label: entry.field.label,\r\n                           type: \"select\",\r\n                           key: entry.key,\r\n                           _key: entry.key,\r\n                           disabled: true,\r\n                           input: true,\r\n                           data: {\r\n                              values: vals,\r\n                           },\r\n                           multiple: entry.field.settings.isMultiple,\r\n                        },\r\n                     };\r\n                     break;\r\n                  case \"LongText\":\r\n                     components[entry.key] = {\r\n                        title: entry.label,\r\n                        key: entry.key,\r\n                        icon: entry.field.icon,\r\n                        schema: {\r\n                           abFieldID: entry.field.id,\r\n                           label: entry.field.label,\r\n                           type: \"textarea\",\r\n                           disabled: true,\r\n                           key: entry.key,\r\n                           _key: entry.key,\r\n                           input: true,\r\n                        },\r\n                     };\r\n                     break;\r\n                  case \"number\":\r\n                     components[entry.key] = {\r\n                        title: entry.label,\r\n                        key: entry.key,\r\n                        icon: entry.field.icon,\r\n                        schema: {\r\n                           abFieldID: entry.field.id,\r\n                           label: entry.field.label,\r\n                           disabled: true,\r\n                           type: \"number\",\r\n                           key: entry.key,\r\n                           _key: entry.key,\r\n                           input: true,\r\n                        },\r\n                     };\r\n                     break;\r\n                  case \"TextFormula\":\r\n                     components[entry.key] = {\r\n                        title: entry.label,\r\n                        key: entry.key,\r\n                        icon: entry.field.icon,\r\n                        schema: {\r\n                           abFieldID: entry.field.id,\r\n                           label: entry.field.label,\r\n                           type: \"textfield\",\r\n                           key: entry.key,\r\n                           _key: entry.key,\r\n                           input: true,\r\n                           inputType: \"text\",\r\n                           disabled: true,\r\n                           calculateValue:\r\n                              \"value = '\" +\r\n                              entry.field.settings.textFormula +\r\n                              \"'\",\r\n                        },\r\n                     };\r\n                     break;\r\n                  default:\r\n                     components[entry.key] = {\r\n                        title: entry.label,\r\n                        key: entry.key,\r\n                        icon: entry.field.icon,\r\n                        schema: {\r\n                           abFieldID: entry.field.id,\r\n                           label: entry.field.label,\r\n                           type: \"textfield\",\r\n                           disabled: true,\r\n                           key: entry.key,\r\n                           _key: entry.key,\r\n                           input: true,\r\n                        },\r\n                     };\r\n                     break;\r\n               }\r\n            });\r\n            // });\r\n            components[\"approveButton\"] = {\r\n               title: \"Approve Button\",\r\n               key: \"approve\",\r\n               icon: \"check-square\",\r\n               schema: {\r\n                  label: \"Approve\",\r\n                  type: \"button\",\r\n                  key: \"approve\",\r\n                  event: \"approve\",\r\n                  block: true,\r\n                  size: \"lg\",\r\n                  input: false,\r\n                  leftIcon: \"fa fa-thumbs-up\",\r\n                  action: \"event\",\r\n                  theme: \"success\",\r\n               },\r\n            };\r\n            components[\"denyButton\"] = {\r\n               title: \"Deny Button\",\r\n               key: \"deny\",\r\n               icon: \"ban\",\r\n               schema: {\r\n                  label: \"Deny\",\r\n                  type: \"button\",\r\n                  key: \"deny\",\r\n                  event: \"deny\",\r\n                  block: true,\r\n                  size: \"lg\",\r\n                  input: false,\r\n                  leftIcon: \"fa fa-thumbs-down\",\r\n                  action: \"event\",\r\n                  theme: \"danger\",\r\n               },\r\n            };\r\n            components[\"customButton\"] = {\r\n               title: \"Custom Action Button\",\r\n               key: \"custom\",\r\n               icon: \"cog\",\r\n               schema: {\r\n                  label: \"Custom Name\",\r\n                  type: \"button\",\r\n                  key: \"custom\",\r\n                  event: \"yourEvent\",\r\n                  block: true,\r\n                  size: \"lg\",\r\n                  input: false,\r\n                  leftIcon: \"fa fa-cog\",\r\n                  action: \"event\",\r\n                  theme: \"primary\",\r\n               },\r\n            };\r\n            return components;\r\n         },\r\n      };\r\n      this._logic = _logic;\r\n\r\n      // Tell Webix to create an INSTANCE of our custom component:\r\n      webix.protoUI(_ui, webix.ui.popup);\r\n   }\r\n};\r\n","/*\r\n * formioBuilder\r\n *\r\n * Create a custom webix component.\r\n *\r\n */\r\nvar ABEmitter = require(\"../AppBuilder/platform/ABEmitter.js\");\r\nmodule.exports = class ABCustomFormIOPreview extends ABEmitter {\r\n   get key() {\r\n      return \"formiopreview\";\r\n   }\r\n\r\n   constructor(App) {\r\n      super();\r\n\r\n      // App \t{obj}\tour application instance object.\r\n      // key {string}\tthe destination key in App.custom[componentKey] for the instance of this component:\r\n\r\n      // super(App, key);\r\n\r\n      var _this = this;\r\n      var L = App.Label;\r\n\r\n      var labels = {\r\n         common: App.labels,\r\n\r\n         component: {},\r\n      };\r\n\r\n      // internal list of Webix IDs to reference our UI components.\r\n      var ids = {\r\n         component: App.unique(this.key),\r\n      };\r\n\r\n      // Our webix UI definition:\r\n      var _ui = {\r\n         name: this.key,\r\n         defaults: {\r\n            css: \"scrolly\",\r\n            borderless: true,\r\n         },\r\n         $init: function (config) {\r\n            var formComponents = config.formComponents\r\n               ? config.formComponents\r\n               : {};\r\n            var formData = config.formData ? config.formData : {};\r\n            // we need to find out when we are passing an array of objects and reduce it down to an array of IDs\r\n            for (var data in formData) {\r\n               if (\r\n                  Array.isArray(formData[data]) &&\r\n                  typeof formData[data][0] == \"object\"\r\n               ) {\r\n                  var newD = [];\r\n                  formData[data].forEach((item) => {\r\n                     if (item.id) newD.push(item.id);\r\n                  });\r\n                  formData[data] = newD;\r\n               }\r\n            }\r\n\r\n            Formio.createForm(this.$view, formComponents, {\r\n               // readOnly: true\r\n               // sanitizeConfig: {\r\n               //     addTags: [\"a\", \"label\", \"img\", \"i\"],\r\n               //     addAttr: [\"src\", \"href\", \"class\", \"target\"]\r\n               // }\r\n            }).then(function (form) {\r\n               // now that it is set up we can push it into the global var\r\n               // formBuilder = builder;\r\n               // Provide a default submission.\r\n               form.submission = {\r\n                  data: formData,\r\n               };\r\n               (formComponents.components || []).forEach((comp) => {\r\n                  if (\r\n                     comp.type == \"button\" &&\r\n                     comp.action == \"event\" &&\r\n                     comp.event\r\n                  ) {\r\n                     form.once(comp.event, function (click) {\r\n                        config.onButton ? config.onButton(comp.event) : null;\r\n                        // _this.emit(\"button\", comp.event);\r\n                     });\r\n                  }\r\n               });\r\n               // form.submission = {\r\n               //     data: {\r\n               //         Name: \"Item #5\",\r\n               //         Image: \"4f2be24f-6ad0-4687-abbb-1a87ce7bc1d6\",\r\n               //         \"Long text\": \"This is a long text field.\",\r\n               //         \"Number Field\": 3,\r\n               //         \"Date Field\": \"2020-02-03\",\r\n               //         \"Date and Time\": \"2020-02-19 00:00:00\",\r\n               //         \"Checkbox field\": 1,\r\n               //         \"Items to select\": 1580782610224,\r\n               //         \"Multiple Items\": [1580786381276, 1580786381494],\r\n               //         \"Email Field\": \"james@digiserve.org\",\r\n               //         \"Image Field\":\r\n               //             \"d5063af3-06b0-44d0-ae9d-c88a74b81e21\",\r\n               //         \"File Attachment\":\r\n               //             '{\"uuid\":\"2d3708eb-d567-483b-9b1e-7cbd6d654866\",\"filename\":\"2018-01-12 09-44 copy.pdf\"}',\r\n               //         \"User Field\": \"James\"\r\n               //     }\r\n               // };\r\n            });\r\n         },\r\n      };\r\n      this.view = this.key;\r\n\r\n      // our internal business logic\r\n      var _logic = {};\r\n      this._logic = _logic;\r\n\r\n      // Tell Webix to create an INSTANCE of our custom component:\r\n      webix.protoUI(_ui, webix.ui.view);\r\n   }\r\n};\r\n","/*\r\n * numbertext\r\n *\r\n * Create a custom webix component.\r\n *\r\n */\r\n\r\nmodule.exports = class ABCustomNumberText {\r\n   get key() {\r\n      return \"numbertext\";\r\n   }\r\n\r\n   constructor(App) {\r\n      // App \t{obj}\tour application instance object.\r\n      // key {string}\tthe destination key in App.custom[componentKey] for the instance of this component:\r\n\r\n      // super(App, key);\r\n\r\n      var L = App.Label;\r\n\r\n      var labels = {\r\n         common: App.labels,\r\n\r\n         component: {}\r\n      };\r\n\r\n      // internal list of Webix IDs to reference our UI components.\r\n      var ids = {\r\n         component: App.unique(this.key)\r\n      };\r\n\r\n      // Our webix UI definition:\r\n      var _ui = {\r\n         name: this.key,\r\n\r\n         defaults: {\r\n            css: \"webix_el_text\"\r\n         },\r\n\r\n         // override this function to return number value type\r\n         $getValue: function() {\r\n            var val = this.getInputNode().value;\r\n            if (val) return JSON.parse(val);\r\n            // Convert to number\r\n            else return \"\";\r\n         }\r\n      };\r\n      this.view = this.key;\r\n\r\n      // our internal business logic\r\n      var _logic = {};\r\n      this._logic = _logic;\r\n\r\n      // Tell Webix to create an INSTANCE of our custom component:\r\n      webix.protoUI(_ui, webix.ui.text);\r\n   }\r\n};\r\n","/*\r\n * custom_timepicker\r\n *\r\n * Create a custom webix component.\r\n *\r\n */\r\n\r\nmodule.exports = class ABCustomTimePicker {\r\n   //.extend(ComponentKey, function(App, componentKey ) {\r\n\r\n   get key() {\r\n      return \"timepicker\";\r\n   }\r\n\r\n   constructor(App) {\r\n      // App \t{obj}\tour application instance object.\r\n      // componentKey {string}\tthe destination key in App.custom[componentKey] for the instance of this component:\r\n\r\n      // super(App, key);\r\n\r\n      var L = App.Label;\r\n\r\n      var labels = {\r\n         common: App.labels,\r\n\r\n         component: {}\r\n      };\r\n\r\n      // internal list of Webix IDs to reference our UI components.\r\n      var ids = {\r\n         component: App.unique(this.key)\r\n      };\r\n\r\n      // Our webix UI definition:\r\n      var _ui = {\r\n         name: App.unique(\"custom_timepicker\") // keep this unique for this App instance.\r\n      };\r\n      this.view = this.key;\r\n\r\n      // our internal business logic\r\n      var _logic = {};\r\n      this._logic = _logic;\r\n\r\n      // Tell Webix to create an INSTANCE of our custom component:\r\n      webix.editors.$popup.time = {\r\n         view: \"popup\",\r\n         body: {\r\n            view: \"calendar\",\r\n            width: 220,\r\n            height: 200,\r\n            type: \"time\"\r\n         }\r\n      };\r\n\r\n      webix.editors.time = webix.extend(\r\n         {\r\n            popupType: \"time\"\r\n         },\r\n         webix.editors.date\r\n      );\r\n   }\r\n};\r\n","/*\r\n * totalfooter\r\n *\r\n * Add the contents of records to show in footer of the webix's datatable.\r\n *\r\n */\r\n\r\nmodule.exports = class ABTotalFooter {\r\n   get key() {\r\n      return \"totalfooter\";\r\n   }\r\n\r\n   constructor(App, key) {\r\n      // App \t{obj}\tour application instance object.\r\n      // key {string}\tthe destination key in App.custom[componentKey] for the instance of this component:\r\n\r\n      // super(App, key);\r\n\r\n      var L = App.Label;\r\n\r\n      var labels = {};\r\n\r\n      // internal list of Webix IDs to reference our UI components.\r\n      var ids = {};\r\n\r\n      // Our webix UI definition:\r\n      var _ui = {};\r\n      this.view = this.key;\r\n\r\n      // our internal business logic\r\n      var _logic = {};\r\n      this._logic = _logic;\r\n\r\n      // Tell Webix :\r\n      webix.ui.datafilter.totalColumn = webix.extend(\r\n         {\r\n            refresh: function (datatable, node, info) {\r\n               var result = 0;\r\n\r\n               datatable.eachRow(function (row) {\r\n                  var record = datatable.getItem(row);\r\n\r\n                  var data = info.field.format(record);\r\n\r\n                  // array\r\n                  if (data) {\r\n                     result += parseFloat(data); // we need to use parseFloat because numbers could be decimals\r\n                  }\r\n               });\r\n\r\n               node.innerHTML = result;\r\n            },\r\n         },\r\n         webix.ui.datafilter.summColumn\r\n      );\r\n   }\r\n};\r\n","/*\r\n * custom_editlist\r\n *\r\n * Create a custom webix component.\r\n *\r\n */\r\n\r\nmodule.exports = class ABCustomEditList {\r\n   // .extend(ComponentKey, function(App, componentKey ) {\r\n\r\n   get key() {\r\n      return \"treesuggest\";\r\n   }\r\n\r\n   constructor(App) {\r\n      // App \t{obj}\tour application instance object.\r\n      // key {string}\tthe destination key in App.custom[componentKey] for the instance of this component:\r\n\r\n      // super(App, key);\r\n\r\n      var L = App.Label;\r\n\r\n      var labels = {\r\n         common: App.labels,\r\n\r\n         component: {}\r\n      };\r\n\r\n      // internal list of Webix IDs to reference our UI components.\r\n      var ids = {\r\n         component: App.unique(this.key)\r\n      };\r\n\r\n      // Our webix UI definition:\r\n      var _ui = {\r\n         name: this.key,\r\n         defaults: {\r\n            type: \"tree\",\r\n            width: 0,\r\n            body: {\r\n               borderless: true,\r\n               select: true,\r\n               template: function(obj, common) {\r\n                  return (\r\n                     \"<span>\" +\r\n                     (obj.$count ? \"<b>\" + obj.value + \"</b>\" : obj.value) +\r\n                     \"</span>\"\r\n                  );\r\n               },\r\n               ready: function() {\r\n                  this.openAll();\r\n               },\r\n               on: {\r\n                  onAfterSelect: function(id, e) {\r\n                     if (this.getItem(id).$count) {\r\n                        this.getParentView().setMasterValue(\"\");\r\n                        this.show(\r\n                           $$(this.getParentView().config.master).getInputNode()\r\n                        );\r\n                     }\r\n                  }\r\n               }\r\n            }\r\n         }\r\n      };\r\n      this.view = this.key;\r\n\r\n      // our internal business logic\r\n      var _logic = {};\r\n      this._logic = _logic;\r\n\r\n      // Tell Webix to create an INSTANCE of our custom component:\r\n      webix.protoUI(_ui, webix.ui.suggest);\r\n   }\r\n};\r\n"],"names":[],"sourceRoot":""}