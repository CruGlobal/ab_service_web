{"version":3,"file":"mobile_app.ab30a4eeb768c07e0aff.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACkC;AACW;AACI;AACF;AACF;AACQ;AACZ;AACI;AACI;AACY;AACJ;AACV;AACN;AAE1B,MAAMa,UAAU,CAAC;EAC7B,CAACC,EAAE;EACH,CAACC,QAAQ;EACTC,WAAWA,CAACF,EAAE,EAAEC,QAAQ,EAAE;IACvB,IAAI,CAAC,CAACD,EAAE,GAAGA,EAAE;IACb,IAAI,CAAC,CAACC,QAAQ,GAAGA,QAAQ;IAEzB,IAAI,CAACE,MAAM,GAAG,IAAI;IAClB,IAAI,CAACC,SAAS,GAAG,KAAK;IAEtB,MAAMC,WAAW,GAAG,IAAI,CAACC,cAAc,CAACC,UAAU,CAC9CC,MAAM,CAAC,CAAC,CACRC,GAAG,CAAEC,CAAC,KAAM;MACVC,EAAE,EAAED,CAAC,CAACC,EAAE;MACRC,GAAG,EAAEF,CAAC,CAACG,aAAa,CAAC,CAAC,CAACC,MAAM,CAAC,CAAC,CAACF,GAAG;MACnCG,KAAK,EAAEL,CAAC,CAACM,UAAU;MACnBC,SAAS,EAAEP,CAAC,CAACE,GAAG;MAChBM,KAAK,EAAER,CAAC,CAACQ,KAAK;MACd;MACAjB,QAAQ,EAAES,CAAC,CAACT;IACf,CAAC,CAAC,CAAC,CACFkB,MAAM,CAAC;MACLR,EAAE,EAAE,YAAY;MAChBC,GAAG,EAAE,QAAQ;MACbG,KAAK,EAAE,IAAI;MACXE,SAAS,EAAE,IAAI;MACfC,KAAK,EAAE;MACP;IACH,CAAC,CAAC;;IAEL,IAAI,CAACE,KAAK,GAAGf,WAAW,CAACI,GAAG,CAAEY,UAAU,IAAK;MAC1C,IAAIA,UAAU,CAACpB,QAAQ,EAAEoB,UAAU,CAACpB,QAAQ,CAACqB,QAAQ,GAAG,CAAC;MAEzD,QAAQD,UAAU,CAACT,GAAG;QACnB,KAAK,QAAQ;UACV,OAAO,IAAIzB,0DAAU,CAACa,EAAE,EAAE,IAAI,EAAEqB,UAAU,CAAC;QAE9C,KAAK,UAAU;UACZ,OAAO,IAAIjC,4DAAY,CAACY,EAAE,EAAE,IAAI,EAAEqB,UAAU,CAAC;QAEhD,KAAK,SAAS;UACX,OAAO,IAAIhC,2DAAW,CAACW,EAAE,EAAE,IAAI,EAAEqB,UAAU,CAAC;QAE/C,KAAK,aAAa;UACf,OAAO,IAAI/B,0DAAU,CAACU,EAAE,EAAE,IAAI,EAAEqB,UAAU,CAAC;QAE9C,KAAK,YAAY;UACd,OAAO,IAAI9B,8DAAc,CAACS,EAAE,EAAE,IAAI,EAAEqB,UAAU,CAAC;QAElD,KAAK,MAAM;UACR,OAAO,IAAI7B,wDAAQ,CAACQ,EAAE,EAAE,IAAI,EAAEqB,UAAU,CAAC;QAE5C,KAAK,WAAW;UACb,OAAO,IAAI5B,0DAAU,CAACO,EAAE,EAAE,IAAI,EAAEqB,UAAU,CAAC;QAE9C,KAAK,eAAe;UACjB,OAAO,IAAI3B,4DAAY,CAACM,EAAE,EAAE,IAAI,EAAEqB,UAAU,CAAC;QAEhD,KAAK,gBAAgB;UAClB,OAAO,IAAI1B,kEAAkB,CAACK,EAAE,EAAE,IAAI,EAAEqB,UAAU,CAAC;QAEtD,KAAK,cAAc;UAChB,OAAO,IAAIzB,gEAAgB,CAACI,EAAE,EAAE,IAAI,EAAEqB,UAAU,CAAC;QAEpD,KAAK,UAAU;UACZ,OAAO,IAAIvB,yDAAQ,CAACE,EAAE,EAAE,IAAI,EAAEqB,UAAU,CAAC;QAE5C;UACG,OAAO,IAAIxB,4DAAW,CAACG,EAAE,EAAE,IAAI,EAAEqB,UAAU,CAAC;MAClD;IACH,CAAC,CAAC;EACL;EAEA,IAAIV,EAAEA,CAAA,EAAG;IACN,OAAO,IAAI,CAAC,CAACV,QAAQ,CAACU,EAAE;EAC3B;EAEA,IAAIL,cAAcA,CAAA,EAAG;IAClB,OAAO,IAAI,CAAC,CAACN,EAAE,CAACuB,kBAAkB,CAAC,IAAI,CAAC,CAACtB,QAAQ,CAACuB,IAAI,CAAC;EAC1D;;EAEA;AACH;AACA;AACA;AACA;AACA;AACA;AACA;EACG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAkBG,MAAMC,IAAIA,CAAA,EAAG;IACV,MAAMC,EAAE,GAAG,IAAI,CAAC,CAAC1B,EAAE;IAEnB,MAAMG,MAAM,GAAI,IAAI,CAACA,MAAM,GAAG,IAAI,CAACG,cAAc,CAACqB,SAAS,CAAC,CAAE;IAE9D,IAAIxB,MAAM,IAAI,IAAI,EAAE;;IAEpB;IACA,MAAMyB,YAAY,GAAG,CAAC,CAAC;IAEvB,IAAI,CAACR,KAAK,CAACS,OAAO,CAAEC,IAAI,IAAK;MAC1B,IAAIA,IAAI,CAACT,UAAU,CAACJ,SAAS,IAAI,IAAI,IAAIa,IAAI,YAAY3C,0DAAU,EAChE;MAEH,QAAQ2C,IAAI,CAACT,UAAU,CAACJ,SAAS;QAC9B,KAAK,SAAS;UACXW,YAAY,CAACE,IAAI,CAACT,UAAU,CAACN,KAAK,CAAC,GAChCZ,MAAM,CAAC2B,IAAI,CAACT,UAAU,CAACN,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE;UAEpD;QAEH,KAAK,MAAM;UACR;YACG,MAAMgB,IAAI,GAAG5B,MAAM,CAAC2B,IAAI,CAACT,UAAU,CAACN,KAAK,CAAC;YAE1Ca,YAAY,CAACE,IAAI,CAACT,UAAU,CAACN,KAAK,CAAC,GAAI,GACpCgB,IAAI,CAACC,QAAQ,CAAC,CAAC,GAAG,CACpB,IAAGD,IAAI,CAACE,OAAO,CAAC,CAAE,IAAGF,IAAI,CAACG,WAAW,CAAC,CAAE,EAAC;UAC7C;UAEA;QAEH,KAAK,UAAU;UACZ;YACG,MAAMC,QAAQ,GAAG,IAAIC,IAAI,CAACjC,MAAM,CAAC2B,IAAI,CAACT,UAAU,CAACN,KAAK,CAAC,CAAC;YACxD,MAAMsB,KAAK,GAAGF,QAAQ,CAACG,QAAQ,CAAC,CAAC;YACjC,MAAMC,OAAO,GAAGJ,QAAQ,CAACK,UAAU,CAAC,CAAC;YAErCZ,YAAY,CAACE,IAAI,CAACT,UAAU,CAACN,KAAK,CAAC,GAAI,GACpCoB,QAAQ,CAACH,QAAQ,CAAC,CAAC,GAAG,CACxB,IAAGG,QAAQ,CAACF,OAAO,CAAC,CAAE,IAAGE,QAAQ,CAACD,WAAW,CAAC,CAAE,KAC9CG,KAAK,IAAI,EAAE,GAAGA,KAAK,GAAGA,KAAK,GAAG,EAChC,IACEE,OAAO,GAAG,EAAE,GACN,IAAGA,OAAO,CAACE,QAAQ,CAAC,CAAE,EAAC,GACxBF,OAAO,CAACE,QAAQ,CAAC,CACxB,IAAGJ,KAAK,GAAG,EAAE,GAAG,IAAI,GAAG,IAAK,EAAC;UACjC;UAEA;QAEH,KAAK,QAAQ;UACVT,YAAY,CAACE,IAAI,CAACT,UAAU,CAACN,KAAK,CAAC,GAChCZ,MAAM,CAAC2B,IAAI,CAACT,UAAU,CAACN,KAAK,CAAC,CAAC0B,QAAQ,CAAC,CAAC;UAE3C;QAEH;UACGb,YAAY,CAACE,IAAI,CAACT,UAAU,CAACN,KAAK,CAAC,GAChCZ,MAAM,CAAC2B,IAAI,CAACT,UAAU,CAACN,KAAK,CAAC;UAEhC;MACN;IACH,CAAC,CAAC;;IAEF;IACAW,EAAE,CAACgB,GAAG,CAACC,IAAI,CAACC,YAAY,CAAE,IAAG,IAAI,CAACjC,EAAG,EAAC,EAAEiB,YAAY,CAAC;;IAErD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACH;;EAEAiB,QAAQA,CAAA,EAAG;IACR,MAAMC,UAAU,GAAG,EAAE;IAErB,IAAItC,MAAM,GAAG,EAAE;IAEf,IAAI,CAACY,KAAK,CAACS,OAAO,CAAEC,IAAI,IAAK;MAC1B,IAAIA,IAAI,CAACT,UAAU,CAACJ,SAAS,IAAI,IAAI,EAAE;QACpC,IAAIa,IAAI,YAAY3C,0DAAU,EAAE;UAC7B,MAAM4D,qBAAqB,GAAG,CAAC,GAAGvC,MAAM,CAAC;UAEzC,IAAIA,MAAM,CAACwC,MAAM,GAAG,CAAC,EAClBF,UAAU,CAACG,IAAI,CAAC,MAAM/D,uDAAA,aAAK6D,qBAA0B,CAAC,CAAC;UAE1DD,UAAU,CAACG,IAAI,CAACnB,IAAI,CAACoB,IAAI,CAAC,CAAC,CAAC;UAE5B1C,MAAM,GAAG,EAAE;QACd;QAEA;MACH;MAEA,QAAQsB,IAAI,CAACT,UAAU,CAACJ,SAAS;QAC9B,KAAK,UAAU;UACZT,MAAM,CAACyC,IAAI,CAAC/D,uDAAA;YAAIiE,KAAK,EAAC;UAAW,GAAErB,IAAI,CAACoB,IAAI,CAAC,CAAC,CAAC,CAAM,CAAC,CAAC;UAEvD;QAEH;UACG1C,MAAM,CAACyC,IAAI,CAAC/D,uDAAA,aAAK4C,IAAI,CAACoB,IAAI,CAAC,CAAC,CAAC,CAAM,CAAC,CAAC;UAErC;MACN;IACH,CAAC,CAAC;IAEF,IAAI1C,MAAM,CAACwC,MAAM,GAAG,CAAC,EAClBF,UAAU,CAACG,IAAI,CAAC,MAAM/D,uDAAA,aAAKsB,MAAM,CAACC,GAAG,CAAE2C,CAAC,IAAKA,CAAC,CAAC,CAAC,CAAM,CAAC,CAAC;IAE3D,OAAON,UAAU,CAACrC,GAAG,CAAE2C,CAAC,IAAKA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACtC;;EAEAF,IAAIA,CAAA,EAAG;IACJ,OAAO,MACJhE,uDAAA;MACGiE,KAAK,EAAC,oEAAoE;MAC1ExC,EAAE,EAAE,IAAI,CAACA;IAAG,GAEX,IAAI,CAACkC,QAAQ,CAAC,CACZ,CACR;EACJ;AACH;;;;;;;;;;;;;;;;;AC5VA;AACkC;AACO;AAE1B,MAAMS,gBAAgB,SAASD,wDAAQ,CAAC;EACpD,CAACrD,EAAE;EACH,CAAC2C,IAAI;EACLzC,WAAWA,CAACF,EAAE,EAAE2C,IAAI,EAAEtB,UAAU,EAAE;IAC/B,KAAK,CAACA,UAAU,CAAC;IAEjB,IAAI,CAAC,CAACrB,EAAE,GAAGA,EAAE;IACb,IAAI,CAAC,CAAC2C,IAAI,GAAGA,IAAI;EACpB;EAEA,MAAM,CAACY,IAAIC,CAAA,EAAG;IACX,MAAM9B,EAAE,GAAG,IAAI,CAAC,CAAC1B,EAAE;IACnB,MAAM2C,IAAI,GAAG,IAAI,CAAC,CAACA,IAAI;IACvB,MAAMtB,UAAU,GAAG,IAAI,CAACA,UAAU;IAElCK,EAAE,CAAC+B,CAAC,CAAE,IAAGpC,UAAU,CAACV,EAAG,EAAC,CAAC,CAAC+C,QAAQ,CAAC,gBAAgB,CAAC;IAEpD,MAAMC,QAAQ,GAAGjC,EAAE,CAACgB,GAAG,CAACC,IAAI,CAACiB,aAAa,CAAE,IAAGjB,IAAI,CAAChC,EAAG,EAAC,CAAC;IAEzD,IAAI,CAACe,EAAE,CAACgB,GAAG,CAACmB,KAAK,CAACC,cAAc,CAAE,IAAGnB,IAAI,CAAChC,EAAG,EAAC,CAAC,EAAE;MAC9Ce,EAAE,CAAC+B,CAAC,CAAE,IAAGpC,UAAU,CAACV,EAAG,EAAC,CAAC,CAACoD,WAAW,CAAC,gBAAgB,CAAC;MAEvD;IACH;IAEA,MAAMC,cAAc,GAAG,CAAC,CAAC;IAEzBrB,IAAI,CAACvB,KAAK,CAACS,OAAO,CAAEC,IAAI,IAAK;MAC1B,MAAMf,KAAK,GAAGe,IAAI,CAACT,UAAU,CAACN,KAAK;MAEnC,QAAQe,IAAI,CAACT,UAAU,CAACJ,SAAS;QAC9B,KAAK,SAAS;UACX,IAAI0C,QAAQ,CAAC5C,KAAK,CAAC,CAACiC,MAAM,KAAK,CAAC,EAAE;YAC/BgB,cAAc,CAACjD,KAAK,CAAC,GAAG,CAAC;YAEzB;UACH;UAEAiD,cAAc,CAACjD,KAAK,CAAC,GAAG,CAAC;UAEzB;QAEH,KAAK,UAAU;UACZiD,cAAc,CAACjD,KAAK,CAAC,GAAG,IAAIqB,IAAI,CAACuB,QAAQ,CAAC5C,KAAK,CAAC,CAAC,CAACkD,WAAW,CAAC,CAAC;UAE/D;QAEH,KAAK,QAAQ;UACVD,cAAc,CAACjD,KAAK,CAAC,GAAGmD,QAAQ,CAACP,QAAQ,CAAC5C,KAAK,CAAC,CAAC;UAEjD;QAEH;UACGiD,cAAc,CAACjD,KAAK,CAAC,GAAG4C,QAAQ,CAAC5C,KAAK,CAAC;UAEvC;MACN;IACH,CAAC,CAAC;IAEF,MAAMoD,EAAE,GAAGxB,IAAI,CAACrC,cAAc;IAE9B,IAAI;MACD,IAAIqC,IAAI,CAACxC,MAAM,IAAI,IAAI,EAAE,MAAMgE,EAAE,CAACC,KAAK,CAACC,MAAM,CAACL,cAAc,CAAC,CAAC,KAE5D,MAAMG,EAAE,CAACC,KAAK,CAACE,MAAM,CAClB3B,IAAI,CAACxC,MAAM,CAACgE,EAAE,CAAC5D,UAAU,CAACgE,EAAE,CAAC,CAAC,CAAC,EAC/BP,cACH,CAAC;;MAEJ;MACAtC,EAAE,CAACgB,GAAG,CAACtB,KAAK,CAACoD,OAAO,CAACC,MAAM,CAACC,IAAI,CAAC,CAAC;IACrC,CAAC,CAAC,OAAOC,CAAC,EAAE;MACTC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;;MAEhB;MACA,MAAMG,CAAC,GAAGpD,EAAE,CAACqD,KAAK,CAAC,CAAC;MAEpB,IAAIC,IAAI,GAAGF,CAAC,CAAC,aAAa,CAAC;;MAE3B;MACA;;MAEA,IAAIH,CAAC,CAACM,MAAM,EAAE;QACX,IAAI;UACD,IAAI,QAAQ,IAAI,OAAON,CAAC,CAACM,MAAM,EAAEN,CAAC,CAACM,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACR,CAAC,CAACM,MAAM,CAAC;QACnE,CAAC,CAAC,OAAON,CAAC,EAAE;UACT;QAAA;QAGH,CAACA,CAAC,CAACM,MAAM,IAAI,EAAE,EAAEpD,OAAO,CAAEuD,QAAQ,IAAK;UACpCJ,IAAI,GAAI,GAAEA,IAAK,OAAMI,QAAQ,CAACC,IAAK,KAAID,QAAQ,CAACE,OAAQ,EAAC;QAC5D,CAAC,CAAC;MACL;MAEA5D,EAAE,CAACgB,GAAG,CAAC6C,KAAK,CACRlB,MAAM,CAAC;QACLmB,IAAI,EAAE,qCAAqC;QAC3CR,IAAI;QACJS,QAAQ,EAAE,QAAQ;QAClBC,YAAY,EAAE;MACjB,CAAC,CAAC,CACDC,IAAI,CAAC,CAAC;IACb;IAEAjE,EAAE,CAAC+B,CAAC,CAAE,IAAGpC,UAAU,CAACV,EAAG,EAAC,CAAC,CAACoD,WAAW,CAAC,gBAAgB,CAAC;;IAEvD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACH;;EAEAb,IAAIA,CAAA,EAAG;IACJ,MAAM7B,UAAU,GAAG,IAAI,CAACA,UAAU;IAElC,OAAO,MACJnC,sDAAA;MAAKiE,KAAK,EAAC;IAAO,GACfjE,sDAAA;MACG0G,OAAO,EAAEA,CAAA,KAAM,IAAI,CAAC,CAACrC,IAAI,CAAC,CAAE;MAC5B5C,EAAE,EAAEU,UAAU,CAACV,EAAG;MAClBwC,KAAK,EAAC,kDAAkD;MACxD0C,IAAI,EAAC;IAAG,GAER3G,sDAAA;MAAMiE,KAAK,EAAC;IAAW,CAAO,CAAC,EAC/BjE,sDAAA,eAAOmC,UAAU,CAACH,KAAY,CAC9B,CACD,CACP;EACJ;AACH;;;;;;;;;;;;;;;;;ACzIA;AACkC;AACO;AAE1B,MAAM4E,kBAAkB,SAASzC,wDAAQ,CAAC;EACtD,CAACrD,EAAE;EACH,CAAC2C,IAAI;EACLzC,WAAWA,CAACF,EAAE,EAAE2C,IAAI,EAAEtB,UAAU,EAAE;IAC/B,KAAK,CAACA,UAAU,CAAC;IAEjB,IAAI,CAAC,CAACrB,EAAE,GAAGA,EAAE;IACb,IAAI,CAAC,CAAC2C,IAAI,GAAGA,IAAI;EACpB;EAEAO,IAAIA,CAAA,EAAG;IACJ,MAAM7B,UAAU,GAAG,IAAI,CAACA,UAAU;IAElC,OAAO,MACJnC,sDAAA;MAAKiE,KAAK,EAAC;IAAc,GACtBjE,sDAAA;MAAKiE,KAAK,EAAC;IAAY,GACpBjE,sDAAA;MAAKiE,KAAK,EAAC;IAAY,GAAE9B,UAAU,CAACH,KAAW,CAAC,EAChDhC,sDAAA;MAAKiE,KAAK,EAAC;IAAY,GACpBjE,sDAAA;MAAOiE,KAAK,EAAC;IAAoB,GAC7B9B,UAAU,CAACpB,QAAQ,CAACqB,QAAQ,KAAK,CAAC,GAChCpC,sDAAA;MACGmG,IAAI,EAAEhE,UAAU,CAACN,KAAM;MACvBgF,IAAI,EAAC,UAAU;MACfzE,QAAQ;MACR0E,QAAQ;IAAA,CACV,CAAC,GAEF9G,sDAAA;MAAOmG,IAAI,EAAEhE,UAAU,CAACN,KAAM;MAACgF,IAAI,EAAC;IAAU,CAAE,CAClD,EACD7G,sDAAA;MAAGiE,KAAK,EAAC;IAAa,CAAI,CACtB,CACL,CACH,CACH,CACP;EACJ;AACH;;;;;;;;;;;;;;;;ACxCA;AACkC;AACO;AAE1B,MAAM8C,iBAAiB,SAAS5C,wDAAQ,CAAC;EACrD,CAACrD,EAAE;EACH,CAAC2C,IAAI;EACLzC,WAAWA,CAACF,EAAE,EAAE2C,IAAI,EAAEtB,UAAU,EAAE;IAC/B,KAAK,CAACA,UAAU,CAAC;IAEjB,IAAI,CAAC,CAACrB,EAAE,GAAGA,EAAE;IACb,IAAI,CAAC,CAAC2C,IAAI,GAAGA,IAAI;EACpB;EAEAO,IAAIA,CAAA,EAAG;IACJ,MAAMgD,aAAa,GAAG,cAAc,IAAI,CAAgB;IAExD,OAAO,MAAM,CAAC,CAAC;EAClB;AACH;;;;;;;;;;;;;;;;ACnBA;AACkC;AACO;AAE1B,MAAMC,gBAAgB,SAAS9C,wDAAQ,CAAC;EACpD,CAACrD,EAAE;EACH,CAAC2C,IAAI;EACLzC,WAAWA,CAACF,EAAE,EAAE2C,IAAI,EAAEtB,UAAU,EAAE;IAC/B,KAAK,CAACA,UAAU,CAAC;IAEjB,IAAI,CAAC,CAACrB,EAAE,GAAGA,EAAE;IACb,IAAI,CAAC,CAAC2C,IAAI,GAAGA,IAAI;EACpB;EAEAO,IAAIA,CAAA,EAAG;IACJ,OAAO,MAAM,CAAC,CAAC;EAClB;AACH;;;;;;;;;;;;;;;;;ACjBA;AACkC;AACO;AAE1B,MAAMkD,oBAAoB,SAAS/C,wDAAQ,CAAC;EACxD,CAACrD,EAAE;EACH,CAAC2C,IAAI;EACLzC,WAAWA,CAACF,EAAE,EAAE2C,IAAI,EAAEtB,UAAU,EAAE;IAC/B,KAAK,CAACA,UAAU,CAAC;IAEjB,IAAI,CAAC,CAACrB,EAAE,GAAGA,EAAE;IACb,IAAI,CAAC,CAAC2C,IAAI,GAAGA,IAAI;EACpB;EAEAE,QAAQA,CAAA,EAAG;IACR,MAAMxB,UAAU,GAAG,IAAI,CAACA,UAAU;IAElC,QAAQA,UAAU,CAACJ,SAAS;MACzB,KAAK,UAAU;QACZ,OAAOI,UAAU,CAACpB,QAAQ,CAACqB,QAAQ,KAAK,CAAC,GACtCpC,sDAAA;UACG6G,IAAI,EAAC,MAAM;UACXV,IAAI,EAAEhE,UAAU,CAACN,KAAM;UACvBoC,KAAK,EAAC,0BAA0B;UAChCkD,WAAW,EAAEhF,UAAU,CAACgF,WAAY;UACpCC,QAAQ,EAAC,UAAU;UACnBhF,QAAQ;UACR0E,QAAQ;QAAA,CACV,CAAC,GAEF9G,sDAAA;UACG6G,IAAI,EAAC,MAAM;UACXV,IAAI,EAAEhE,UAAU,CAACN,KAAM;UACvBoC,KAAK,EAAC,0BAA0B;UAChCkD,WAAW,EAAEhF,UAAU,CAACgF,WAAY;UACpCC,QAAQ,EAAC;QAAU,CACrB,CACH;MAEJ;QACG,OAAOjF,UAAU,CAACpB,QAAQ,CAACqB,QAAQ,KAAK,CAAC,GACtCpC,sDAAA;UACG6G,IAAI,EAAC,MAAM;UACXV,IAAI,EAAEhE,UAAU,CAACN,KAAM;UACvBoC,KAAK,EAAC,sBAAsB;UAC5BkD,WAAW,EAAEhF,UAAU,CAACgF,WAAY;UACpCC,QAAQ,EAAC,UAAU;UACnBhF,QAAQ;UACR0E,QAAQ;QAAA,CACV,CAAC,GAEF9G,sDAAA;UACG6G,IAAI,EAAC,MAAM;UACXV,IAAI,EAAEhE,UAAU,CAACN,KAAM;UACvBoC,KAAK,EAAC,sBAAsB;UAC5BkD,WAAW,EAAEhF,UAAU,CAACgF,WAAY;UACpCC,QAAQ,EAAC;QAAU,CACrB,CACH;IACP;EACH;EAEApD,IAAIA,CAAA,EAAG;IACJ,OAAO,MACJhE,sDAAA;MAAKiE,KAAK,EAAC;IAAyB,GACjCjE,sDAAA;MAAKiE,KAAK,EAAC;IAAY,GACpBjE,sDAAA;MAAKiE,KAAK,EAAC;IAAuB,GAAE,IAAI,CAAC9B,UAAU,CAACH,KAAW,CAAC,EAChEhC,sDAAA;MAAKiE,KAAK,EAAC;IAAiB,GAAE,IAAI,CAACN,QAAQ,CAAC,CAAO,CACjD,CACH,CACP;EACJ;AACH;;;;;;;;;;;;;;;ACxEA;AACkC;AACnB,MAAM0D,cAAc,CAAC;EACjC,CAAClF,UAAU;EACXnB,WAAWA,CAACmB,UAAU,EAAE;IACrB,IAAI,CAAC,CAACA,UAAU,GAAGA,UAAU;EAChC;EAEA,IAAIA,UAAUA,CAAA,EAAG;IACd,OAAO,IAAI,CAAC,CAACA,UAAU;EAC1B;EAEA6B,IAAIA,CAAA,EAAG;IACJ,OAAO,MAAM,CAAC,CAAC;EAClB;AACH;;;;;;;;;;;;;;;;ACfA;AACkC;AACO;AAE1B,MAAMsD,cAAc,SAASnD,wDAAQ,CAAC;EAClD,CAACrD,EAAE;EACH,CAAC2C,IAAI;EACLzC,WAAWA,CAACF,EAAE,EAAE2C,IAAI,EAAEtB,UAAU,EAAE;IAC/B,KAAK,CAACA,UAAU,CAAC;IAEjB,IAAI,CAAC,CAACrB,EAAE,GAAGA,EAAE;IACb,IAAI,CAAC,CAAC2C,IAAI,GAAGA,IAAI;EACpB;EAEAO,IAAIA,CAAA,EAAG;IACJ,OAAO,MAAM,CAAC,CAAC;EAClB;AACH;;;;;;;;;;;;;;;;;ACjBA;AACkC;AACO;AAE1B,MAAMuD,gBAAgB,SAASpD,wDAAQ,CAAC;EACpD,CAACrD,EAAE;EACH,CAAC2C,IAAI;EACLzC,WAAWA,CAACF,EAAE,EAAE2C,IAAI,EAAEtB,UAAU,EAAE;IAC/B,KAAK,CAACA,UAAU,CAAC;IAEjB,IAAI,CAAC,CAACrB,EAAE,GAAGA,EAAE;IACb,IAAI,CAAC,CAAC2C,IAAI,GAAGA,IAAI;EACpB;EAEAO,IAAIA,CAAA,EAAG;IACJ,MAAM7B,UAAU,GAAG,IAAI,CAACA,UAAU;IAClC,MAAMqF,YAAY,GAAG,IAAI,CAAC,CAAC1G,EAAE,CAAC+E,KAAK,CAAC,sBAAsB,CAAC;IAE3D,OAAO,MACJ7F,sDAAA;MAAKiE,KAAK,EAAC;IAAyB,GACjCjE,sDAAA;MAAKiE,KAAK,EAAC;IAAY,GACpBjE,sDAAA;MAAKiE,KAAK,EAAC;IAAuB,GAAE9B,UAAU,CAACH,KAAW,CAAC,EAC3DhC,sDAAA;MAAKiE,KAAK,EAAC;IAAiB,GACzBjE,sDAAA;MAAKiE,KAAK,EAAC,gCAAgC;MAAC,cAAW;IAAM,GACzD9B,UAAU,CAACpB,QAAQ,CAACqB,QAAQ,KAAK,CAAC,GAChCpC,sDAAA;MACGmG,IAAI,EAAEhE,UAAU,CAACN,KAAM;MACvBgF,IAAI,EAAC,OAAO;MACZY,KAAK,EAAC,IAAI;MACVC,GAAG,EAAC,GAAG;MACPC,GAAG,EAAC,KAAK;MACTC,IAAI,EAAC,GAAG;MACRxF,QAAQ;MACR0E,QAAQ;MACRe,OAAO,EAAC,QAAQ;MAChB,sBAAoBL;IAAa,CACnC,CAAC,GAEFxH,sDAAA;MACGmG,IAAI,EAAEhE,UAAU,CAACN,KAAM;MACvBgF,IAAI,EAAC,OAAO;MACZY,KAAK,EAAC,IAAI;MACVC,GAAG,EAAC,GAAG;MACPC,GAAG,EAAC,KAAK;MACTC,IAAI,EAAC,GAAG;MACRC,OAAO,EAAC,QAAQ;MAChB,sBAAoBL;IAAa,CACnC,CAEF,CACH,CACH,CACH,CACP;EACJ;AACH;;;;;;;;;;;;;;;;ACvDA;AACkC;AACO;AAE1B,MAAMM,kBAAkB,SAAS3D,wDAAQ,CAAC;EACtD,CAACrD,EAAE;EACH,CAAC2C,IAAI;EACLzC,WAAWA,CAACF,EAAE,EAAE2C,IAAI,EAAEtB,UAAU,EAAE;IAC/B,KAAK,CAACA,UAAU,CAAC;IAEjB,IAAI,CAAC,CAACrB,EAAE,GAAGA,EAAE;IACb,IAAI,CAAC,CAAC2C,IAAI,GAAGA,IAAI;EACpB;EAEAO,IAAIA,CAAA,EAAG;IACJ,OAAO,MAAM,CAAC,CAAC;EAClB;AACH;;;;;;;;;;;;;;;;;ACjBA;AACkC;AACO;AAE1B,MAAM+D,wBAAwB,SAAS5D,wDAAQ,CAAC;EAC5D,CAACrD,EAAE;EACH,CAAC2C,IAAI;EACLzC,WAAWA,CAACF,EAAE,EAAE2C,IAAI,EAAEtB,UAAU,EAAE;IAC/B,KAAK,CAACA,UAAU,CAAC;IAEjB,IAAI,CAAC,CAACrB,EAAE,GAAGA,EAAE;IACb,IAAI,CAAC,CAAC2C,IAAI,GAAGA,IAAI;EACpB;EAEAO,IAAIA,CAAA,EAAG;IACJ,MAAM7B,UAAU,GAAG,IAAI,CAACA,UAAU;IAElC,OAAO,MACJnC,sDAAA;MAAG2G,IAAI,EAAC,GAAG;MAAC1C,KAAK,EAAC;IAA0C,GACzDjE,sDAAA;MACGmG,IAAI,EAAEhE,UAAU,CAACgE,IAAK;MACtBgB,WAAW,EAAEhF,UAAU,CAACgF,WAAY;MACpCa,QAAQ;IAAA,GAEP7F,UAAU,CAACpB,QAAQ,CAACkH,OAAO,CAAC1G,GAAG,CAAE2G,IAAI,IACnClI,sDAAA;MAAQyH,KAAK,EAAES,IAAI,CAACzG;IAAG,GAAEyG,IAAI,CAACpC,IAAa,CAC7C,CACI,CAAC,EACT9F,sDAAA;MAAKiE,KAAK,EAAC;IAAc,GACtBjE,sDAAA;MAAKiE,KAAK,EAAC;IAAY,GACpBjE,sDAAA;MAAKiE,KAAK,EAAC;IAAY,GAAE9B,UAAU,CAACH,KAAW,CAAC,EAChDhC,sDAAA;MAAKiE,KAAK,EAAC;IAAY,CAAM,CAC3B,CACH,CACL,CACL;EACJ;AACH;;;;;;;;;;;;;;;;;ACrCA;AACkC;AACO;AAE1B,MAAMkE,sBAAsB,SAAShE,wDAAQ,CAAC;EAC1D,CAACrD,EAAE;EACH,CAAC2C,IAAI;EACLzC,WAAWA,CAACF,EAAE,EAAE2C,IAAI,EAAEtB,UAAU,EAAE;IAC/B,KAAK,CAACA,UAAU,CAAC;IAEjB,IAAI,CAAC,CAACrB,EAAE,GAAGA,EAAE;IACb,IAAI,CAAC,CAAC2C,IAAI,GAAGA,IAAI;EACpB;EAEAO,IAAIA,CAAA,EAAG;IACJ,MAAM7B,UAAU,GAAG,IAAI,CAACA,UAAU;IAElC,OAAO,MACJnC,sDAAA;MAAKiE,KAAK,EAAC;IAAyB,GACjCjE,sDAAA;MAAKiE,KAAK,EAAC;IAAY,GACpBjE,sDAAA;MAAKiE,KAAK,EAAC;IAAuB,GAAE9B,UAAU,CAACH,KAAW,CAAC,EAC3DhC,sDAAA;MAAKiE,KAAK,EAAC;IAAiB,GACzBjE,sDAAA;MAAQmG,IAAI,EAAEhE,UAAU,CAACN;IAAM,GAC3BM,UAAU,CAACpB,QAAQ,CAACkH,OAAO,CAAC1G,GAAG,CAAE2G,IAAI,IACnClI,sDAAA;MAAQyH,KAAK,EAAES,IAAI,CAACzG;IAAG,GAAEyG,IAAI,CAACpC,IAAa,CAC7C,CACI,CACN,CACH,CACH,CACP;EACJ;AACH;;;;;;;;;;;;;;;;;AChCA;AACkC;AACO;AAE1B,MAAMsC,iBAAiB,SAASjE,wDAAQ,CAAC;EACrD,CAACrD,EAAE;EACH,CAAC2C,IAAI;EACLzC,WAAWA,CAACF,EAAE,EAAE2C,IAAI,EAAEtB,UAAU,EAAE;IAC/B,KAAK,CAACA,UAAU,CAAC;IAEjB,IAAI,CAAC,CAACrB,EAAE,GAAGA,EAAE;IACb,IAAI,CAAC,CAAC2C,IAAI,GAAGA,IAAI;EACpB;EAEAO,IAAIA,CAAA,EAAG;IACJ,MAAM7B,UAAU,GAAG,IAAI,CAACA,UAAU;IAElC,IAAIkG,aAAa,GAAG,EAAE;IAEtB,QAAQlG,UAAU,CAACJ,SAAS;MACzB,KAAK,UAAU;QACZsG,aAAa,GACVlG,UAAU,CAACpB,QAAQ,CAACqB,QAAQ,KAAK,CAAC,GAC/BpC,sDAAA;UACGmG,IAAI,EAAEhE,UAAU,CAACN,KAAM;UACvBsF,WAAW,EAAEhF,UAAU,CAACgF,WAAY;UACpClD,KAAK,EAAC,WAAW;UACjB7B,QAAQ;UACR0E,QAAQ;QAAA,CACA,CAAC,GAEZ9G,sDAAA;UACGmG,IAAI,EAAEhE,UAAU,CAACN,KAAM;UACvBsF,WAAW,EAAEhF,UAAU,CAACgF,WAAY;UACpClD,KAAK,EAAC;QAAW,CACT,CACb;QAEJ;MAEH,KAAK,OAAO;QACToE,aAAa,GACVlG,UAAU,CAACpB,QAAQ,CAACqB,QAAQ,KAAK,CAAC,GAC/BpC,sDAAA;UACG6G,IAAI,EAAC,OAAO;UACZV,IAAI,EAAEhE,UAAU,CAACN,KAAM;UACvBsF,WAAW,EAAEhF,UAAU,CAACgF,WAAY;UACpC/E,QAAQ;UACR0E,QAAQ;QAAA,CACH,CAAC,GAET9G,sDAAA;UACG6G,IAAI,EAAC,OAAO;UACZV,IAAI,EAAEhE,UAAU,CAACN,KAAM;UACvBsF,WAAW,EAAEhF,UAAU,CAACgF,WAAY;UACpC/E,QAAQ;UACR0E,QAAQ;QAAA,CACH,CACV;QAEJ;MAEH;QACGuB,aAAa,GACVlG,UAAU,CAACpB,QAAQ,CAACqB,QAAQ,KAAK,CAAC,GAC/BpC,sDAAA;UACGmG,IAAI,EAAEhE,UAAU,CAACN,KAAM;UACvBgF,IAAI,EAAC,MAAM;UACXM,WAAW,EAAEhF,UAAU,CAACgF,WAAY;UACpC/E,QAAQ;UACR0E,QAAQ;QAAA,CACV,CAAC,GAEF9G,sDAAA;UACGmG,IAAI,EAAEhE,UAAU,CAACN,KAAM;UACvBgF,IAAI,EAAC,MAAM;UACXM,WAAW,EAAEhF,UAAU,CAACgF;QAAY,CACtC,CACH;QAEJ;IACN;IAEA,OAAO,MACJnH,sDAAA;MAAKiE,KAAK,EAAC;IAAyB,GACjCjE,sDAAA;MAAKiE,KAAK,EAAC;IAAY,GACpBjE,sDAAA;MAAKiE,KAAK,EAAC;IAAuB,GAAE9B,UAAU,CAACH,KAAW,CAAC,EAC3DhC,sDAAA;MAAKiE,KAAK,EAAC;IAAiB,GAAEoE,aAAmB,CAC/C,CACH,CACP;EACJ;AACH;;;;;;;;;;;;;;;;AC5FA;AACkC;AACO;AAE1B,MAAMC,cAAc,SAASnE,wDAAQ,CAAC;EAClD,CAACrD,EAAE;EACH,CAAC2C,IAAI;EACLzC,WAAWA,CAACF,EAAE,EAAE2C,IAAI,EAAEtB,UAAU,EAAE;IAC/B,KAAK,CAACA,UAAU,CAAC;IAEjB,IAAI,CAAC,CAACrB,EAAE,GAAGA,EAAE;IACb,IAAI,CAAC,CAAC2C,IAAI,GAAGA,IAAI;EACpB;EAEAO,IAAIA,CAAA,EAAG;IACJ,OAAO,MAAM,CAAC,CAAC;EAClB;AACH;;;;;;;;;;;;;;;;ACjBA;AACkC;AACnB,MAAMuE,UAAU,CAAC;EAC7B,CAACzH,EAAE;EACH,CAACC,QAAQ;EACTC,WAAWA,CAACF,EAAE,EAAEC,QAAQ,EAAE;IACvB,IAAI,CAAC,CAACD,EAAE,GAAGA,EAAE;IACb,IAAI,CAAC,CAACC,QAAQ,GAAGA,QAAQ;EAC5B;EAEA,IAAIU,EAAEA,CAAA,EAAG;IACN,OAAO,IAAI,CAAC,CAACV,QAAQ,CAACU,EAAE;EAC3B;EAEA,IAAIL,cAAcA,CAAA,EAAG;IAClB,OAAO,IAAI,CAAC,CAACN,EAAE,CAACuB,kBAAkB,CAAC,IAAI,CAAC,CAACtB,QAAQ,CAACuB,IAAI,CAAC;EAC1D;EAEA,MAAMC,IAAIA,CAAA,EAAG,CAAC;EAEdiG,YAAYA,CAACN,IAAI,EAAE;IAChB;IACA,IAAI,IAAI,CAAC,CAACnH,QAAQ,CAAC0H,UAAU,EAAE;MAC5B,IAAI,CAAC,CAAC3H,EAAE,CAAC0C,GAAG,CAACZ,IAAI,CAAC8F,IAAI,CAACnD,MAAM,CAACoD,QAAQ,CAAC,OAAO,EAAE;QAC7CC,KAAK,EAAE;UACJC,UAAU,EAAE;QACf,CAAC;QACDC,WAAW,EAAE;MAChB,CAAC,CAAC;IACL;;IAEA;IACA,MAAM7D,EAAE,GAAG,IAAI,CAAC7D,cAAc;IAE9B,IAAI6D,EAAE,EAAE;MACLA,EAAE,CAAC8D,SAAS,CAACb,IAAI,CAACjD,EAAE,CAAC5D,UAAU,CAACgE,EAAE,CAAC,CAAC,CAAC,IAAI6C,IAAI,CAACzG,EAAE,IAAIyG,IAAI,CAACc,IAAI,CAAC;IACjE;EACH;;EAEA;EACAC,QAAQA,CAACC,IAAI,EAAE;IACZ,IAAI,CAAC,CAACpI,EAAE,CAAC0C,GAAG,CAACZ,IAAI,CAAC8F,IAAI,CAACnD,MAAM,CAACoD,QAAQ,CAAC,OAAO,EAAE;MAC7CC,KAAK,EAAE;QACJM,IAAI,EAAEA;MACT,CAAC;MACDJ,WAAW,EAAE;IAChB,CAAC,CAAC;EACL;EAEAK,QAAQA,CAAA,EAAG;IACR;IACA,IAAI,IAAI,CAAC/H,cAAc,CAACgI,OAAO,CAAC,CAAC,EAAE;MAChC,IAAI,CAAC,CAACtI,EAAE,CAACuI,MAAM,CAACC,QAAQ,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAACvI,QAAQ,CAACuB,IAAI,CAAC;IACrE;EACH;EAEA8G,OAAOA,CAAA,EAAG;IACP,IAAI,IAAI,CAAChI,cAAc,CAACgI,OAAO,CAAC,CAAC,EAAE;MAChC,OAAOpJ,sDAAA;QAAKiE,KAAK,EAAC;MAAqC,CAAM,CAAC;IACjE;EACH;EAEAN,QAAQA,CAAA,EAAG;IACR,OAAO,IAAI,CAAC,CAAC7C,EAAE,CAACuI,MAAM,CAACE,OAAO,CAAC,IAAI,CAAC,CAACxI,QAAQ,CAACuB,IAAI,CAAC,CAACmF,KAAK,CAAClG,GAAG,CAAE2G,IAAI,IAChElI,sDAAA;MAAIyB,EAAE,EAAEyG,IAAI,CAACc,IAAK;MAAC/E,KAAK,EAAC;IAA2B,GACjDjE,sDAAA;MACGiE,KAAK,EAAC,+BAA+B;MACrCyC,OAAO,EAAEA,CAAA,KAAM,IAAI,CAAC8B,YAAY,CAACN,IAAI;IAAE,GAEvClI,sDAAA;MAAKiE,KAAK,EAAC;IAAY,GACpBjE,sDAAA;MAAKiE,KAAK,EAAC;IAAY,GAAEiE,IAAI,CAACsB,IAAU,CACtC,CACH,CAAC,EACNxJ,sDAAA;MAAKiE,KAAK,EAAC;IAAwB,GAChCjE,sDAAA;MACG2G,IAAI,EAAC,GAAG;MACR1C,KAAK,EAAC,iBAAiB;MACvB,gBAAa,wCAAwC;MACrD,sBAAmB;IAAS,GAC9B,QAEE,CACD,CACJ,CACN,CAAC;EACL;EAEAD,IAAIA,CAAA,EAAG;IACJ,IAAI,IAAI,CAAC,CAAClD,EAAE,CAACuI,MAAM,CAACE,OAAO,CAAC,IAAI,CAAC,CAACxI,QAAQ,CAACuB,IAAI,CAAC,CAACmF,KAAK,CAAC3D,MAAM,KAAK,CAAC,EAChE,OAAO,MACJ9D,sDAAA;MAAKiE,KAAK,EAAC;IAAsC,GAC9CjE,sDAAA;MAAKiE,KAAK,EAAC;IAA2F,GACnGjE,sDAAA,aACI,CAAC,GAAGyJ,KAAK,CAAC,EAAE,CAAC,CAAC,CAAClI,GAAG,CAAC,CAACmI,CAAC,EAAEC,CAAC,KACtB3J,sDAAA,aACGA,sDAAA;MAAG2G,IAAI,EAAC;IAAG,GAAC,4BAA6B,CACxC,CACN,CACA,CACF,CACH,CACP;IAEJ,OAAO,MACJ3G,sDAAA;MACGiE,KAAK,EAAC,sCAAsC;MAC5C2F,UAAU,EAAEA,CAAA,KAAM,IAAI,CAACT,QAAQ,CAAC;IAAE,GAElCnJ,sDAAA;MAAKiE,KAAK,EAAC;IAAwD,GAChEjE,sDAAA,aAAK,IAAI,CAAC2D,QAAQ,CAAC,CAAM,CACvB,CAAC,EACL,IAAI,CAACyF,OAAO,CAAC,CACZ,CACP;EACJ;AACH;;;;;;;;;;;;;;;;ACnHA;AACkC;AAClC,iEAAgBtI,EAAE,IAAK;EACpB,OAAO,CAAC8H,KAAK,EAAE;IAAErE,CAAC;IAAEsF,EAAE;IAAErG,GAAG;IAAEsG,GAAG;IAAET,MAAM;IAAEU;EAAQ,CAAC,KAAK;IACrD,OAAO,MACJ/J,sDAAA;MAAKiE,KAAK,EAAC;IAAM,GACdjE,sDAAA;MAAKiE,KAAK,EAAC;IAAQ,GAChBjE,sDAAA;MAAKiE,KAAK,EAAC;IAAW,CAAM,CAAC,EAC7BjE,sDAAA;MAAKiE,KAAK,EAAC;IAAsB,GAC9BjE,sDAAA;MAAKiE,KAAK,EAAC;IAAM,GACdjE,sDAAA;MAAG2G,IAAI,EAAC,GAAG;MAAC1C,KAAK,EAAC;IAAW,GAC1BjE,sDAAA;MAAGiE,KAAK,EAAC;IAAgB,CAAI,CAAC,EAC9BjE,sDAAA;MAAMiE,KAAK,EAAC;IAAW,GAAC,MAAU,CAClC,CACD,CAAC,EACNjE,sDAAA;MAAKiE,KAAK,EAAC;IAAO,GAAC,WAAc,CAC/B,CACH,CAAC,EACNjE,sDAAA;MAAKiE,KAAK,EAAC;IAAc,GACtBjE,sDAAA;MAAKiE,KAAK,EAAC;IAA0B,GAClCjE,sDAAA,iBACGA,sDAAA,aAAI,OAAS,CAAC,EACdA,sDAAA,YAAG,8BAA+B,CAC7B,CACN,CACH,CACH,CACP;EACJ,CAAC;AACJ,CAAC;;;;;;;;;;;;;;;;AC7BD;AACkC;AAClC,iEAAgBc,EAAE,IAAK;EACpB,MAAMkJ,WAAW,GAAGlJ,EAAE,CAACmJ,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC1C,MAAMrE,CAAC,GAAG9E,EAAE,CAAC+E,KAAK,CAAC,CAAC;EAEpB,OAAO,CAAC+C,KAAK,EAAE;IAAErE,CAAC;IAAEsF,EAAE;IAAErG,GAAG;IAAEsG,GAAG;IAAET,MAAM;IAAEU;EAAQ,CAAC,KAAK;IACrD;IACA;IACA,IAAIG,WAAW,GAAG,GAAG;IACrB,IAAIC,QAAQ,GAAG,EAAE;IACjB,IAAIC,QAAQ,GAAG,EAAE;IACjB,IAAIC,aAAa,GAAGL,WAAW,CAACM,OAAO;IACvC,IAAIC,aAAa,GAAG,KAAK;IACzB,IAAIC,MAAM,GAAGC,QAAQ,EAAEC,QAAQ,EAAEC,MAAM,IAAI,uBAAuB;IAClE;IACA;IACA;;IAEAtB,MAAM,CAACC,QAAQ,CAAC,YAAY,CAAC;IAE7BQ,GAAG,CAAC,UAAU,EAAE,MAAM;MACnB;IAAA,CACF,CAAC;IAEFW,QAAQ,CAACG,gBAAgB,CAAC,kBAAkB,EAAGnF,CAAC,IAAK;MAClD,IAAIgF,QAAQ,CAACI,eAAe,IAAI,SAAS,EAAE;QACxCC,cAAc,CAAC,CAAC;MACnB;IACH,CAAC,CAAC;IAEF,MAAMC,cAAc,GAAItF,CAAC,IAAK;MAC3B2E,QAAQ,GAAG7F,CAAC,CAAC,GAAG,GAAGkB,CAAC,CAAC,CAACgC,KAAK,CAAC,CAAC;MAC7BsC,OAAO,CAAC,CAAC;IACZ,CAAC;IAED,MAAMiB,KAAK,GAAIvF,CAAC,IAAK;MAClBjC,GAAG,CAACyH,WAAW,CAACD,KAAK,CAAC,kBAAkB,CAAC;IAC5C,CAAC;IAED,MAAME,MAAM,GAAGA,CAAA,KAAM;MAClB1H,GAAG,CAACyH,WAAW,CAACxE,IAAI,CAAC,kBAAkB,CAAC;MACxC;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACH,CAAC;;IAED,MAAM0E,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC9B5G,CAAC,CAAC,mBAAmB,CAAC,CAACC,QAAQ,CAAC,gBAAgB,CAAC;MACjD,IAAI4G,QAAQ,GAAG7G,CAAC,CAAC,WAAW,CAAC,CAACkD,KAAK,CAAC,CAAC;MACrC,IAAI;QACD,IAAIyB,IAAI,GAAG,MAAMpI,EAAE,CAACuK,OAAO,CAACC,IAAI,CAAC;UAC9BC,GAAG,EAAEf,MAAM,GAAG,aAAa;UAC3BgB,MAAM,EAAE;YACLC,KAAK,EAAEL,QAAQ;YACfhB,QAAQ,EAAE7F,CAAC,CAAC,WAAW,CAAC,CAACkD,KAAK,CAAC;UAClC;QACH,CAAC,CAAC;QAEF4B,MAAM,CAACC,QAAQ,CAAC,SAAS,EAAEJ,IAAI,CAACwC,IAAI,CAAC;QACrC;;QAEA;QACA;QACA;QACA;;QAEAnH,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAACkD,KAAK,GAAG,EAAE;QAC5BjE,GAAG,CAACyH,WAAW,CAACD,KAAK,CAAC,CAAC;QACvBzG,CAAC,CAAC,mBAAmB,CAAC,CAACM,WAAW,CAAC,gBAAgB,CAAC;QAEpD/D,EAAE,CAAC6K,aAAa,GAAG,IAAI;QAEvB,MAAMb,cAAc,CAAC,CAAC;;QAEtB;QACA;QACA;QACAtH,GAAG,CAACZ,IAAI,CAAC8F,IAAI,CAACnD,MAAM,CAACoD,QAAQ,CAAC,OAAO,EAAE;UACpCiD,UAAU,EAAE;QACf,CAAC,CAAC;MACL,CAAC,CAAC,OAAOC,GAAG,EAAE;QACXrI,GAAG,CAAC6C,KAAK,CACLlB,MAAM,CAAC;UACLmB,IAAI,EAAE,qCAAqC;UAC3CR,IAAI,EAAG,cAAa;UACpBS,QAAQ,EAAE,QAAQ;UAClBC,YAAY,EAAE;QACjB,CAAC,CAAC,CACDC,IAAI,CAAC,CAAC;QACVlC,CAAC,CAAC,mBAAmB,CAAC,CAACM,WAAW,CAAC,gBAAgB,CAAC;MACvD;IACH,CAAC;IAED,MAAMiH,mBAAmB,GAAIrG,CAAC,IAAK;MAChClB,CAAC,CAAC,wBAAwB,CAAC,CAACwH,IAAI,CAAC,CAAC;MAClCxH,CAAC,CAAC,iBAAiB,CAAC,CAACyH,IAAI,CAAC,CAAC;MAC3BzH,CAAC,CAAC,kBAAkB,CAAC,CAAC0H,KAAK,CAAC,CAAC;IAChC,CAAC;IAED,MAAMC,YAAY,GAAIzG,CAAC,IAAK;MACzBlB,CAAC,CAAC,iBAAiB,CAAC,CAACwH,IAAI,CAAC,CAAC;MAC3BxH,CAAC,CAAC,wBAAwB,CAAC,CAACyH,IAAI,CAAC,CAAC;MAClCzH,CAAC,CAAC,WAAW,CAAC,CAAC0H,KAAK,CAAC,CAAC;IACzB,CAAC;IAED,eAAenB,cAAcA,CAAA,EAAG;MAC7B,IAAI,CAACP,aAAa,EAAE;QACjB,IAAI4B,cAAc,GAAI,GAAE3B,MAAO,GAAER,WAAW,CAACoC,iBAAkB,EAAC;QAEhE,MAAMC,QAAQ,GAAG,MAAMvL,EAAE,CAACuK,OAAO,CAACiB,GAAG,CAAC;UAAEf,GAAG,EAAEY;QAAe,CAAC,CAAC;QAC9D,MAAM7B,OAAO,GAAG+B,QAAQ,EAAE/B,OAAO,IAAI,OAAO;QAC5C,MAAMiC,WAAW,GAAGvC,WAAW,CAACM,OAAO;QACvC5E,OAAO,CAAC8G,GAAG,CAAC,kBAAkB,EAAElC,OAAO,CAAC;QACxC5E,OAAO,CAAC8G,GAAG,CAAC,kBAAkB,EAAED,WAAW,CAAC;QAC5C,IAAIA,WAAW,CAACE,IAAI,CAAC,CAAC,IAAInC,OAAO,CAACmC,IAAI,CAAC,CAAC,EAAE;UACvClC,aAAa,GAAG,IAAI;UACpB,IAAI,eAAe,IAAImC,SAAS,EAAE;YAC/BlJ,GAAG,CAACmJ,MAAM,CACNxH,MAAM,CAAC;cACLyH,KAAK,EAAEhH,CAAC,CAAE,kBAAiB,CAAC;cAC5BiH,OAAO,EAAEjH,CAAC,CACN,0EACJ,CAAC;cACDkH,OAAO,EAAE,CACN;gBACGhH,IAAI,EAAEF,CAAC,CAAC,QAAQ,CAAC;gBACjBc,OAAO,EAAE,SAAAA,CAAUiG,MAAM,EAAElH,CAAC,EAAE;kBAC3B8E,aAAa,GAAG,KAAK;gBACxB;cACH,CAAC,EACD;gBACGzE,IAAI,EAAEF,CAAC,CAAE,uBAAsB,EAAE,CAAC0E,OAAO,CAAC,CAAC;gBAC3CyC,IAAI,EAAE,IAAI;gBACVC,QAAQ,EAAE,mCAAmC;gBAC7CtG,OAAO,EAAE,SAAAA,CAAUiG,MAAM,EAAElH,CAAC,EAAE;kBAC3BjC,GAAG,CAACyJ,WAAW,CAAClB,IAAI,CAAC,CAAC;kBACtBW,SAAS,CAACQ,aAAa,CACnBC,gBAAgB,CAAC,CAAC,CAClBC,IAAI,CAAC,UAAUC,aAAa,EAAE;oBAC5B,IAAIC,QAAQ,GAAGD,aAAa,CAACvJ,MAAM;oBACnC,IAAIyJ,KAAK,GAAG,CAAC;oBACb,KAAK,IAAIC,YAAY,IAAIH,aAAa,EAAE;sBACrCG,YAAY,CACRC,UAAU,CAAC,CAAC,CACZL,IAAI,CAAEM,OAAO,IAAK;wBAChBH,KAAK,EAAE;wBACP,IAAIA,KAAK,IAAID,QAAQ,EAAE;0BACpB/C,aAAa,GAAG,KAAK;0BACrBoD,MAAM,CAACjD,QAAQ,CAACkD,MAAM,CAAC,IAAI,CAAC;wBAC/B;sBACH,CAAC,CAAC;oBACR;oBACA,IAAIN,QAAQ,IAAI,CAAC,EAAE;sBAChB/C,aAAa,GAAG,KAAK;sBACrBoD,MAAM,CAACjD,QAAQ,CAACkD,MAAM,CAAC,IAAI,CAAC;oBAC/B;kBACH,CAAC,CAAC;gBACR;cACH,CAAC,CACH;cACDC,eAAe,EAAE;YACpB,CAAC,CAAC,CACDpH,IAAI,CAAC,CAAC;UACb;QACH,CAAC,MAAM;UACJ;QAAA;MAEN;IACH;IAEA,OAAO,MACJzG,sDAAA;MAAKyB,EAAE,EAAC;IAAK,GAEVzB,sDAAA;MAAKiE,KAAK,EAAC;IAA8C,GACtDjE,sDAAA;MAAKiE,KAAK,EAAC;IAAM,GACdjE,sDAAA;MAAKiE,KAAK,EAAC;IAAuB,GAC/BjE,sDAAA;MAAKiE,KAAK,EAAC;IAAQ,GAChBjE,sDAAA;MAAKiE,KAAK,EAAC;IAAW,CAAM,CAAC,EAC7BjE,sDAAA;MAAKiE,KAAK,EAAC;IAAc,GACtBjE,sDAAA;MAAKiE,KAAK,EAAC;IAAO,GACd+F,WAAW,CAAChI,KAAK,IAAI4D,CAAC,CAAC,KAAK,CAC3B,CACH,CACH,CAAC,EACN5F,sDAAA;MAAKiE,KAAK,EAAC;IAAc,GACtBjE,sDAAA;MAAKiE,KAAK,EAAC;IAA0C,GAElDjE,sDAAA;MACG8N,GAAG,EAAC,yCAAyC;MAC7CC,KAAK,EAAC,KAAK;MACX9J,KAAK,EAAC;IAAc,CACtB,CAAC,EACFjE,sDAAA,UAAM,CACJ,CAAC,EACNA,sDAAA;MAAKiE,KAAK,EAAC;IAA8D,GACtEjE,sDAAA,aACGA,sDAAA,aACGA,sDAAA;MACG2G,IAAI,EAAC,OAAO;MACZ1C,KAAK,EAAC;IAAoC,GAE1CjE,sDAAA;MAAKiE,KAAK,EAAC;IAAY,GACpBjE,sDAAA;MAAGiE,KAAK,EAAC;IAAgB,GACrB2B,CAAC,CAAC,UAAU,CACb,CACD,CAAC,EACN5F,sDAAA;MAAKiE,KAAK,EAAC;IAAY,GACpBjE,sDAAA;MAAKiE,KAAK,EAAC;IAAY,GACnB2B,CAAC,CAAC,gBAAgB,CACjB,CACH,CACL,CACF,CAAC,EACJoE,WAAW,CAACgE,KAAK,CAAC,CAAC,CAACzM,GAAG,CAAE0M,CAAC,IAAK;MAC7B,OACGjO,sDAAA,aACGA,sDAAA;QACG2G,IAAI,EAAG,IAAGsH,CAAC,CAACC,KAAM,EAAE;QACpBjK,KAAK,EAAC;MAAoC,GAE1CjE,sDAAA;QAAKiE,KAAK,EAAC;MAAY,GACpBjE,sDAAA;QAAGiE,KAAK,EAAC;MAAgB,GACrBgK,CAAC,CAACjM,KACH,CACD,CAAC,EACNhC,sDAAA;QAAKiE,KAAK,EAAC;MAAY,GACpBjE,sDAAA;QAAKiE,KAAK,EAAC;MAAY,GACnBgK,CAAC,CAACjM,KACD,CACH,CACL,CACF,CAAC;IAEX,CAAC,CAAC,EAEFhC,sDAAA,aACGA,sDAAA;MACG2G,IAAI,EAAC,GAAG;MACR1C,KAAK,EAAC,wBAAwB;MAC9ByC,OAAO,EAAEA,CAAA,KAAMwE,MAAM,CAAC;IAAE,GAExBlL,sDAAA;MAAKiE,KAAK,EAAC;IAAY,GACpBjE,sDAAA;MAAGiE,KAAK,EAAC;IAAgB,GACrB2B,CAAC,CAAC,QAAQ,CACX,CACD,CAAC,EACN5F,sDAAA;MAAKiE,KAAK,EAAC;IAAY,GACpBjE,sDAAA;MAAKiE,KAAK,EAAC;IAAY,GACnB2B,CAAC,CAAC,SAAS,CACV,CACH,CACL,CACF,CACH,CACF,CAAC,EACN5F,sDAAA;MACGiE,KAAK,EAAC,yBAAyB;MAC/BkK,KAAK,EAAC;IAAoE,GAE1EnO,sDAAA,YACGA,sDAAA;MACG8N,GAAG,EAAC,yCAAyC;MAC7CC,KAAK,EAAC;IAAK,CACb,CAAC,EACF/N,sDAAA,WAAK,CAAC,EACNA,sDAAA;MAAMiE,KAAK,EAAC;IAAS,GAAC,GAAC,EAACoG,aAAoB,CAC5C,CACD,CACH,CACH,CACH,CACH,CAAC,EAGNrK,sDAAA;MACGiE,KAAK,EAAC,qCAAqC;MAC3C,YAAUiG;IAAY,CACnB,CAAC,EAGPlK,sDAAA;MAAKiE,KAAK,EAAC,cAAc;MAACxC,EAAE,EAAC;IAAiB,GAC3CzB,sDAAA;MAAKiE,KAAK,EAAC;IAAM,GACdjE,sDAAA;MAAKiE,KAAK,EAAC;IAA4B,GACpCjE,sDAAA;MAAKiE,KAAK,EAAC;IAAoD,GAC5DjE,sDAAA;MAAKiE,KAAK,EAAC;IAA0C,GAClDjE,sDAAA;MACG8N,GAAG,EAAC,yCAAyC;MAC7CC,KAAK,EAAC,KAAK;MACX9J,KAAK,EAAC;IAAc,CACtB,CACC,CAAC,EACNjE,sDAAA;MACGoO,MAAM,EAAC,mBAAmB;MAC1BC,QAAQ,EAAEA,CAAA,KAAMlD,YAAY,CAAC;IAAE,GAE/BnL,sDAAA;MAAKiE,KAAK,EAAC;IAAM,GACdjE,sDAAA,aACGA,sDAAA;MAAIiE,KAAK,EAAC;IAAyB,GAChCjE,sDAAA;MAAKiE,KAAK,EAAC;IAAY,GACpBjE,sDAAA;MAAKiE,KAAK,EAAC;IAAuB,GAC9B2B,CAAC,CAAC,QAAQ,CACT,CAAC,EACN5F,sDAAA;MAAKiE,KAAK,EAAC;IAAiB,GACzBjE,sDAAA;MACGsO,WAAW,EAAC,KAAK;MACjBC,YAAY,EAAC,UAAU;MACvBC,UAAU,EAAC,OAAO;MAClB3H,IAAI,EAAC,MAAM;MACXpF,EAAE,EAAC,UAAU;MACb0E,IAAI,EAAC,UAAU;MACfgB,WAAW,EAAEvB,CAAC,CACX,qBACH;IAAE,CACJ,CAAC,EACF5F,sDAAA;MAAMiE,KAAK,EAAC;IAAoB,CAAO,CACrC,CACH,CACJ,CAAC,EACLjE,sDAAA;MACGyB,EAAE,EAAC,gBAAgB;MACnBwC,KAAK,EAAC;IAAyB,GAE/BjE,sDAAA;MAAKiE,KAAK,EAAC;IAAY,GACpBjE,sDAAA;MAAKiE,KAAK,EAAC;IAAuB,GAC9B2B,CAAC,CAAC,UAAU,CACX,CAAC,EACN5F,sDAAA;MAAKiE,KAAK,EAAC;IAAiB,GACzBjE,sDAAA;MACG0G,OAAO,EAAEA,CAAA,KACNoF,mBAAmB,CAAC,CACtB;MACDqC,KAAK,EAAC,gIAAgI;MACtIxH,IAAI,EAAC;IAAG,GAER3G,sDAAA;MAAGiE,KAAK,EAAC;IAAgB,GAAC,gBAEvB,CACH,CAAC,EACJjE,sDAAA;MACG6G,IAAI,EAAC,UAAU;MACfpF,EAAE,EAAC,UAAU;MACb0E,IAAI,EAAC,UAAU;MACfgB,WAAW,EAAEvB,CAAC,CAAC,eAAe,CAAE;MAChC6B,KAAK,EAAE2C,QAAS;MAChBqE,OAAO,EAAEA,CAAA,KACN1D,cAAc,CAAC,UAAU,CAC3B;MACDwD,YAAY,EAAC,kBAAkB;MAC/BD,WAAW,EAAC,KAAK;MACjBE,UAAU,EAAC;IAAO,CACpB,CACC,CACH,CACJ,CAAC,EACLxO,sDAAA;MACGyB,EAAE,EAAC,uBAAuB;MAC1B0M,KAAK,EAAC,gBAAgB;MACtBlK,KAAK,EAAC;IAAyB,GAE/BjE,sDAAA;MAAKiE,KAAK,EAAC;IAAY,GACpBjE,sDAAA;MAAKiE,KAAK,EAAC;IAAuB,GAC9B2B,CAAC,CAAC,UAAU,CACX,CAAC,EACN5F,sDAAA;MAAKiE,KAAK,EAAC;IAAiB,GACzBjE,sDAAA;MACG0G,OAAO,EAAEA,CAAA,KAAMwF,YAAY,CAAC,CAAE;MAC9BiC,KAAK,EAAC,gIAAgI;MACtIxH,IAAI,EAAC;IAAG,GAER3G,sDAAA;MAAGiE,KAAK,EAAC;IAAgB,GAAC,YAEvB,CACH,CAAC,EACJjE,sDAAA;MACG6G,IAAI,EAAC,MAAM;MACXpF,EAAE,EAAC,iBAAiB;MACpB0E,IAAI,EAAC,iBAAiB;MACtBgB,WAAW,EAAEvB,CAAC,CAAC,eAAe,CAAE;MAChC6B,KAAK,EAAE2C,QAAS;MAChBqE,OAAO,EAAEA,CAAA,KACN1D,cAAc,CACX,iBACH,CACF;MACDwD,YAAY,EAAC,kBAAkB;MAC/BD,WAAW,EAAC,KAAK;MACjBE,UAAU,EAAC;IAAO,CACpB,CACC,CACH,CACJ,CAAC,EACLxO,sDAAA;MAAIiE,KAAK,EAAC;IAAyB,CAAK,CACvC,CACF,CAAC,EACNjE,sDAAA;MAAKiE,KAAK,EAAC;IAAO,GACfjE,sDAAA;MAAQiE,KAAK,EAAC;IAA4G,GACvHjE,sDAAA;MAAKiE,KAAK,EAAC;IAAW,GACnBjE,sDAAA;MAAMiE,KAAK,EAAC;IAAiB,GAC1BjE,sDAAA;MAAMiE,KAAK,EAAC;IAAQ,GACjBjE,sDAAA;MAAMiE,KAAK,EAAC;IAAsB,CAAO,CAAC,EAC1CjE,sDAAA;MAAMiE,KAAK,EAAC;IAAsB,CAAO,CAAC,EAC1CjE,sDAAA;MAAMiE,KAAK,EAAC;IAAsB,CAAO,CAAC,EAC1CjE,sDAAA;MAAMiE,KAAK,EAAC;IAAsB,CAAO,CAAC,EAC1CjE,sDAAA;MAAMiE,KAAK,EAAC;IAAsB,CAAO,CAAC,EAC1CjE,sDAAA;MAAMiE,KAAK,EAAC;IAAsB,CAAO,CAAC,EAC1CjE,sDAAA;MAAMiE,KAAK,EAAC;IAAsB,CAAO,CAAC,EAC1CjE,sDAAA;MAAMiE,KAAK,EAAC;IAAsB,CAAO,CACtC,CAAC,EACPjE,sDAAA;MAAMiE,KAAK,EAAC;IAAO,GAChBjE,sDAAA;MAAK0O,OAAO,EAAC;IAAW,GACrB1O,sDAAA;MACG2O,EAAE,EAAC,IAAI;MACPC,EAAE,EAAC,IAAI;MACP1K,CAAC,EAAC;IAAI,CACA,CACP,CACF,CAAC,EACPlE,sDAAA;MAAMiE,KAAK,EAAC;IAAW,GACpBjE,sDAAA;MAAMiE,KAAK,EAAC;IAAwB,CAAO,CACxC,CACH,CACJ,CAAC,EACNjE,sDAAA,eAAO4F,CAAC,CAAC,SAAS,CAAQ,CACrB,CACN,CACF,CACJ,CACH,CACH,CACH,CACH,CACP;EACJ,CAAC;AACJ,CAAC;;;;;;;;;;;;;;;;;AC9bD;AACkC;AACS;AAE3C,iEAAgB9E,EAAE,IAAK;EACpB,MAAM8E,CAAC,GAAG9E,EAAE,CAAC+E,KAAK,CAAC,CAAC;EAEpB,OAAO,CAAC+C,KAAK,EAAE;IAAErE,CAAC;IAAEsF,EAAE;IAAErG,GAAG;IAAEsG,GAAG;IAAET,MAAM;IAAEU;EAAQ,CAAC,KAAK;IACrD,MAAM6C,KAAK,GAAGhE,KAAK,CAACC,UAAU,GAAGjD,CAAC,CAAC,aAAa,CAAC,GAAGA,CAAC,CAAC,YAAY,CAAC;;IAEnE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA,MAAMkJ,QAAQ,GAAGzF,MAAM,CAACE,OAAO,CAAC,sCAAsC,CAAC;IAEvE,MAAMrH,KAAK,GAAG,CACX;MACGT,EAAE,EAAE,SAAS;MACbC,GAAG,EAAE,MAAM;MACXY,IAAI,EAAE;IACT,CAAC,CACH;;IAED;IACA,MAAMyM,QAAQ,GAAG,EAAE;;IAEnB;IACA;IACA;IACA;IACA7M,KAAK,CAACS,OAAO,CAAEC,IAAI,IAAK;MACrB,QAAQA,IAAI,CAAClB,GAAG;QACb,KAAK,MAAM;UAAE;YACV,IAAI+B,IAAI,GAAG,IAAIoL,6DAAI,CAAC/N,EAAE,EAAE8B,IAAI,CAAC;YAC7B;AACf;AACA;AACA;AACA;AACA;AACA;AACA;YACemM,QAAQ,CAAChL,IAAI,CAACN,IAAI,CAAC;YACnB;UACH;QACA;QACA;MACH;IACH,CAAC,CAAC;;IAEF,IAAIuL,kBAAkB,GAAG,IAAI;IAC7B,IAAIC,sBAAsB,GAAG,IAAI;IAEjCnF,GAAG,CAAC,UAAU,EAAE,OAAOrE,CAAC,EAAEyJ,IAAI,KAAK;MAChC,MAAMC,WAAW,GAAG,EAAE;MAEtBJ,QAAQ,CAACpM,OAAO,CAAEC,IAAI,IAAK;QACxB,MAAMqC,EAAE,GAAGrC,IAAI,CAACxB,cAAc;QAE9B6D,EAAE,EAAE1C,IAAI,CAAC,CAAC;QAEV,MAAM6M,QAAQ,GAAG,MAAAA,CAAOxM,IAAI,EAAEyM,QAAQ,KAAK;UACxC,MAAMzM,IAAI,CAACL,IAAI,CAAC,CAAC;UAEjB8M,QAAQ,CAAC,CAAC;QACb,CAAC;QACD,MAAM9M,IAAI,GAAGA,CAAA,KACV,IAAI+M,OAAO,CAAEC,OAAO,IAAK;UACtB,IAAItK,EAAE,IAAI,CAACA,EAAE,CAACuK,iBAAiB,EAAE;YAC9BnG,MAAM,CAACC,QAAQ,CAAC,mBAAmB,EAAErE,EAAE,CAACxD,EAAE,CAAC;YAE3C,MAAMgO,UAAU,GAAGC,WAAW,CAAC,YAAY;cACxC,IAAIzK,EAAE,CAACuK,iBAAiB,EAAE;gBACvBG,aAAa,CAACF,UAAU,CAAC;gBAEzB,MAAML,QAAQ,CAACxM,IAAI,EAAE2M,OAAO,CAAC;cAChC;YACH,CAAC,EAAE,IAAI,CAAC;YAER;UACH;UAEAH,QAAQ,CAACxM,IAAI,EAAE2M,OAAO,CAAC;QAC1B,CAAC,CAAC;QAELJ,WAAW,CAACpL,IAAI,CAACxB,IAAI,CAAC,CAAC,CAAC;MAC3B,CAAC,CAAC;MAEF,MAAM+M,OAAO,CAACM,GAAG,CAACT,WAAW,CAAC;MAE9BH,kBAAkB,GAAGxL,GAAG,CAACqM,QAAQ,CAAC1K,MAAM,CAAC;QACtC2K,OAAO,EAAE;MACZ,CAAC,CAAC;MACFb,sBAAsB,GAAGzL,GAAG,CAACqM,QAAQ,CAAC1K,MAAM,CAAC;QAC1C2K,OAAO,EAAE,2BAA2B;QACpCC,UAAU,EAAE,IAAI;QAChBC,UAAU,EAAE;UACTC,KAAK,EAAE,SAAS;UAChBC,GAAG,EAAE,SAAS;UACdC,IAAI,EAAE,SAAS;UACfC,IAAI,EAAE,SAAS;UACfC,MAAM,EAAE;QACX;MACH,CAAC,CAAC;IACL,CAAC,CAAC;IAEFvG,GAAG,CAAC,kBAAkB,EAAE,MAAM;MAC3BkF,kBAAkB,CAACsB,OAAO,CAAC,CAAC;MAC5BrB,sBAAsB,CAACqB,OAAO,CAAC,CAAC;IACnC,CAAC,CAAC;IAEF,SAAS3M,QAAQA,CAAA,EAAG;MACjB,MAAM4M,OAAO,GAAG,EAAE;MAElBxB,QAAQ,CAACpM,OAAO,CAAEC,IAAI,IAAK;QACxB2N,OAAO,CAACxM,IAAI,CAACnB,IAAI,CAACoB,IAAI,CAAC,CAAC,CAAC;MAC5B,CAAC,CAAC;MAEF,OAAOuM,OAAO,CAAChP,GAAG,CAAE2C,CAAC,IAAKA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACnC;;IAEA,OAAO,MACJlE,sDAAA;MAAKiE,KAAK,EAAC,MAAM;MAAC,aAAU;IAAM,GAC/BjE,sDAAA;MAAKiE,KAAK,EAAC;IAAQ,GAChBjE,sDAAA;MAAKiE,KAAK,EAAC;IAAW,CAAM,CAAC,EAC7BjE,sDAAA;MAAKiE,KAAK,EAAC;IAAsB,GAC9BjE,sDAAA;MAAKiE,KAAK,EAAC;IAAM,GACdjE,sDAAA;MAAG2G,IAAI,EAAC,GAAG;MAAC1C,KAAK,EAAC;IAAW,GAC1BjE,sDAAA;MAAGiE,KAAK,EAAC;IAAgB,CAAI,CAAC,EAC9BjE,sDAAA;MAAMiE,KAAK,EAAC;IAAW,GAAE2B,CAAC,CAAC,MAAM,CAAQ,CACzC,CACD,CAAC,EACN5F,sDAAA;MAAKiE,KAAK,EAAC;IAAO,GAAE2I,KAAW,CAC7B,CACH,CAAC,EACN5M,sDAAA;MAAKiE,KAAK,EAAC;IAAc,GAAEN,QAAQ,CAAC,CAAO,CACzC,CACP;EACJ,CAAC;AACJ,CAAC;;;;;;;;;;;;;;;;ACvJD;AACkC;AAClC,iEAAgB7C,EAAE,IAAK;EACpB,MAAMyB,IAAI,GAAG,MAAAA,CAAA,KAAY;IACtB,IAAI,CAACzB,EAAE,CAAC6K,aAAa,EAAE;MACpB,IAAI;QACD,MAAMD,IAAI,GAAG,MAAM5K,EAAE,CAACuK,OAAO,CAACiB,GAAG,CAAC;UAAEf,GAAG,EAAE;QAAiB,CAAC,CAAC;QAE5DzK,EAAE,CAAC6K,aAAa,GAAG,IAAI;QACvB7K,EAAE,CAAC0C,GAAG,CAACZ,IAAI,CAAC8F,IAAI,CAACnD,MAAM,CAACoD,QAAQ,CAAC,OAAO,EAAE;UACvCiD,UAAU,EAAE;QACf,CAAC,CAAC;MACL,CAAC,CAAC,OAAOnG,CAAC,EAAE;QACT;QACA;QACA3E,EAAE,CAAC0C,GAAG,CAACyH,WAAW,CAACxE,IAAI,CAAC,kBAAkB,CAAC;MAC9C;IACH,CAAC,MAAM;MACJf,OAAO,CAAC8K,IAAI,CAAC,mDAAmD,CAAC;IACpE;EACH,CAAC;EAED,OAAO,CAAC5H,KAAK,EAAE;IAAErE,CAAC;IAAEsF,EAAE;IAAErG,GAAG;IAAEsG,GAAG;IAAET,MAAM;IAAEU;EAAQ,CAAC,KAAK;IACrDjJ,EAAE,CAACyD,CAAC,GAAGA,CAAC;IACRzD,EAAE,CAAC0C,GAAG,GAAGA,GAAG;IACZ1C,EAAE,CAACuI,MAAM,GAAGA,MAAM;IAElBS,GAAG,CAAC,UAAU,EAAE,OAAOrE,CAAC,EAAEyJ,IAAI,KAAK;MAChC;MACA;MACA,MAAM3M,IAAI,CAAC,CAAC;IACf,CAAC,CAAC;IAEF,OAAO,MACJvC,sDAAA;MAAKiE,KAAK,EAAC;IAAM,GACdjE,sDAAA;MAAKiE,KAAK,EAAC;IAAsD,GAC9DjE,sDAAA;MAAKiE,KAAK,EAAC;IAA2B,CAAM,CAC1C,CACH,CACP;EACJ,CAAC;AACJ,CAAC;;;;;;;;;;;;;;;;;ACzCD;AACkC;AACS;AAE3C,iEAAgBnD,EAAE,IAAK;EACpB,MAAM8E,CAAC,GAAG9E,EAAE,CAAC+E,KAAK,CAAC,CAAC;EAEpB,OAAO,CAAC+C,KAAK,EAAE;IAAErE,CAAC;IAAEsF,EAAE;IAAErG,GAAG;IAAEsG,GAAG;IAAET,MAAM;IAAEU;EAAQ,CAAC,KAAK;IACrD,MAAM6C,KAAK,GAAGhH,CAAC,CAAC,gBAAgB,CAAC;IACjC,IAAI8K,UAAU,GAAG,CAAC,CAAC;;IAEnB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,MAAM5B,QAAQ,GAAGzF,MAAM,CAACE,OAAO,CAAC,sCAAsC,CAAC;IACvE,MAAMwF,QAAQ,GAAG,EAAE;IAEnBjF,GAAG,CAAC,UAAU,EAAE,OAAOrE,CAAC,EAAEyJ,IAAI,KAAK;MAChC,MAAMC,WAAW,GAAG,EAAE;MAEtBJ,QAAQ,CAACpM,OAAO,CAAEC,IAAI,IAAK;QACxB,MAAMqC,EAAE,GAAGrC,IAAI,CAACxB,cAAc;QAE9B6D,EAAE,EAAE1C,IAAI,CAAC,CAAC;QAEV,MAAM6M,QAAQ,GAAG,MAAAA,CAAOxM,IAAI,EAAEyM,QAAQ,KAAK;UACxC,MAAMzM,IAAI,CAACL,IAAI,CAAC,CAAC;UAEjB8M,QAAQ,CAAC,CAAC;QACb,CAAC;QACD,MAAM9M,IAAI,GAAGA,CAAA,KACV,IAAI+M,OAAO,CAAEC,OAAO,IAAK;UACtB,IAAItK,EAAE,IAAI,CAACA,EAAE,CAACuK,iBAAiB,EAAE;YAC9BnG,MAAM,CAACC,QAAQ,CAAC,mBAAmB,EAAErE,EAAE,CAACxD,EAAE,CAAC;YAE3C,MAAMgO,UAAU,GAAGC,WAAW,CAAC,YAAY;cACxC,IAAIzK,EAAE,CAACuK,iBAAiB,EAAE;gBACvBG,aAAa,CAACF,UAAU,CAAC;gBAEzB,MAAML,QAAQ,CAACxM,IAAI,EAAE2M,OAAO,CAAC;cAChC;YACH,CAAC,EAAE,IAAI,CAAC;YAER;UACH;UAEAH,QAAQ,CAACxM,IAAI,EAAE2M,OAAO,CAAC;QAC1B,CAAC,CAAC;QAELJ,WAAW,CAACpL,IAAI,CAACxB,IAAI,CAAC,CAAC,CAAC;MAC3B,CAAC,CAAC;MAEF,MAAM+M,OAAO,CAACM,GAAG,CAACT,WAAW,CAAC;MAE9B5K,CAAC,CAAC,mBAAmB,CAAC,CAACoM,EAAE,CAAC,kBAAkB,EAAE,gBAAgBlJ,KAAK,EAAE;QAClE,MAAMmJ,OAAO,CAAC,IAAI,CAACC,YAAY,CAAC,IAAI,CAAC,CAAC;MACzC,CAAC,CAAC;IACL,CAAC,CAAC;IAEF,IAAI3O,KAAK,GAAG,CACT;MACGT,EAAE,EAAE,SAAS;MACbC,GAAG,EAAE,MAAM;MACXY,IAAI,EAAE,sCAAsC;MAC5CmG,UAAU,EAAE;IACf,CAAC,CACH;IACD,SAAS9E,QAAQA,CAAA,EAAG;MACjB,MAAMC,UAAU,GAAG,EAAE;;MAErB;MACA;MACA;;MAEA1B,KAAK,CAACS,OAAO,CAAEC,IAAI,IAAK;QACrB,QAAQA,IAAI,CAAClB,GAAG;UACb,KAAK,MAAM;YACR,IAAIoP,IAAI,GAAG,IAAIL,6DAAI,CAAC3P,EAAE,EAAE8B,IAAI,CAAC;YAC7BgB,UAAU,CAACG,IAAI,CAAC+M,IAAI,CAAC9M,IAAI,CAAC,CAAC,CAAC;YAC5B+K,QAAQ,CAAChL,IAAI,CAAC+M,IAAI,CAAC;YACnB;UACH;UACA;QACH;MACH,CAAC,CAAC;;MAEF,OAAOlN,UAAU,CAACrC,GAAG,CAAE2C,CAAC,IAAKA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACtC;;IAEA,eAAe0M,OAAOA,CAACnP,EAAE,EAAE;MACxB,IAAIwD,EAAE,GAAG8J,QAAQ,CAAC,CAAC,CAAC,CAAC3N,cAAc;MACnC,IAAI8G,IAAI,GAAGzG,EAAE,GAAGwD,EAAE,CAAC8L,GAAG,CAACC,OAAO,CAACvP,EAAE,CAAC,GAAGwD,EAAE,CAACxC,SAAS,CAAC,CAAC;MACnD,IAAI,CAACyF,IAAI,EAAE;QACRA,IAAI,GAAGjD,EAAE,CAACgM,cAAc,CAAC,CAAC;MAC7B;MAEAvL,OAAO,CAAC8G,GAAG,CAAC,mBAAmB,EAAEtE,IAAI,CAAC;MACtC,IAAI;QACD,MAAMjD,EAAE,CAAC5D,UAAU,CACf6D,KAAK,CAAC,CAAC,CACPgM,MAAM,CAAChJ,IAAI,CAACjD,EAAE,CAAC5D,UAAU,CAACgE,EAAE,CAAC,CAAC,CAAC,IAAI6C,IAAI,CAACzG,EAAE,IAAIyG,IAAI,CAACc,IAAI,CAAC;MAC/D,CAAC,CAAC,OAAOvD,CAAC,EAAE;QACTC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;MACnB;IACH;;IAEA;IACA,OAAO,MACJzF,sDAAA;MAAKiE,KAAK,EAAC;IAAM,GACdjE,sDAAA;MAAKiE,KAAK,EAAC;IAAQ,GAChBjE,sDAAA;MAAKiE,KAAK,EAAC;IAAW,CAAM,CAAC,EAC7BjE,sDAAA;MAAKiE,KAAK,EAAC;IAAc,GACtBjE,sDAAA;MAAKiE,KAAK,EAAC;IAAM,GACdjE,sDAAA;MACG2G,IAAI,EAAC,GAAG;MACR,cAAW,aAAa;MACxB1C,KAAK,EAAC;IAA2B,GAEjCjE,sDAAA;MAAGiE,KAAK,EAAC;IAAqB,GAAC,MAAO,CACtC,CACD,CAAC,EACNjE,sDAAA;MAAKiE,KAAK,EAAC;IAAO,GAAE2I,KAAW,CAAC,EAChC5M,sDAAA;MAAKiE,KAAK,EAAC;IAAa,GACrBjE,sDAAA;MAAKiE,KAAK,EAAC;IAAkB,GAAE2I,KAAW,CACxC,CAAC,EACN5M,sDAAA;MAAKiE,KAAK,EAAC;IAAO,GACfjE,sDAAA;MACGiE,KAAK,EAAC,gBAAgB;MACtB0C,IAAI,EAAC,GAAG;MACRwK,OAAO,EAAEA,CAAA,KAAM;QACZrQ,EAAE,CAAC0C,GAAG,CAACZ,IAAI,CAAC8F,IAAI,CAACnD,MAAM,CAACoD,QAAQ,CAAC,OAAO,EAAE;UACvCC,KAAK,EAAE;YACJC,UAAU,EAAE;UACf,CAAC;UACDC,WAAW,EAAE;QAChB,CAAC,CAAC;MACL;IAAE,GAEF9I,sDAAA;MAAGiE,KAAK,EAAC;IAAyB,GAAC,MAAO,CAAC,EAC3CjE,sDAAA;MAAGiE,KAAK,EAAC;IAA6B,GAAC,KAAM,CAC7C,CACD,CACH,CACH,CAAC,EACLN,QAAQ,CAAC,CACR,CACP;EACJ,CAAC;AACJ,CAAC;;;;;;;;;;;;;;;;;;;AC/JD;AACyH;AAC7B;AAC5F,8BAA8B,mFAA2B,CAAC,wGAAqC;AAC/F;AACA,8KAA8K,mBAAmB,GAAG,YAAY,oGAAoG,oBAAoB,GAAG,qBAAqB,sIAAsI,6FAA6F,qFAAqF,GAAG,wBAAwB,6CAA6C,GAAG,+cAA+c,cAAc,qCAAqC,qDAAqD,8DAA8D,sDAAsD,GAAG,uBAAuB,uBAAuB,kBAAkB,GAAG,oBAAoB,cAAc,uBAAuB,aAAa,oCAAoC,gCAAgC,GAAG,SAAS,0FAA0F,WAAW,MAAM,UAAU,KAAK,KAAK,KAAK,MAAM,UAAU,KAAK,KAAK,WAAW,WAAW,WAAW,KAAK,KAAK,WAAW,KAAK,YAAY,kBAAkB,UAAU,WAAW,WAAW,WAAW,WAAW,KAAK,KAAK,WAAW,UAAU,KAAK,KAAK,UAAU,WAAW,UAAU,WAAW,WAAW,6JAA6J,mBAAmB,GAAG,YAAY,oGAAoG,oBAAoB,GAAG,qBAAqB,qJAAqJ,kGAAkG,qFAAqF,GAAG,wBAAwB,6CAA6C,GAAG,+cAA+c,cAAc,qCAAqC,qDAAqD,8DAA8D,sDAAsD,GAAG,uBAAuB,uBAAuB,kBAAkB,GAAG,oBAAoB,cAAc,uBAAuB,aAAa,oCAAoC,gCAAgC,GAAG,qBAAqB;AAC9mH;AACA,iEAAe,uBAAuB,EAAC;;;;;;;;;;;;;;;;;;;;ACPvC;AACyH;AAC7B;AAC5F,8BAA8B,mFAA2B,CAAC,wGAAqC;AAC/F;AACA,gGAAgG,kCAAkC,uBAAuB,qBAAqB,yMAAyM,GAAG,mBAAmB,kCAAkC,wBAAwB,uBAAuB,oBAAoB,0BAA0B,mBAAmB,yBAAyB,2BAA2B,sBAAsB,wBAAwB,mBAAmB,wCAAwC,uCAAuC,uCAAuC,kCAAkC,GAAG,6DAA6D,oCAAoC,uBAAuB,qBAAqB,iKAAiK,GAAG,aAAa,oCAAoC,wBAAwB,uBAAuB,oBAAoB,mBAAmB,2BAA2B,yBAAyB,0BAA0B,wBAAwB,sBAAsB,mBAAmB,wCAAwC,uCAAuC,uCAAuC,0CAA0C,yCAAyC,uCAAuC,kCAAkC,uBAAuB,GAAG,SAAS,2FAA2F,MAAM,YAAY,aAAa,aAAa,OAAO,OAAO,MAAM,KAAK,YAAY,aAAa,aAAa,WAAW,YAAY,WAAW,YAAY,aAAa,aAAa,aAAa,WAAW,YAAY,aAAa,aAAa,aAAa,OAAO,YAAY,MAAM,YAAY,aAAa,aAAa,MAAM,OAAO,MAAM,KAAK,YAAY,aAAa,aAAa,WAAW,UAAU,YAAY,aAAa,aAAa,aAAa,aAAa,WAAW,YAAY,aAAa,aAAa,aAAa,aAAa,aAAa,aAAa,aAAa,gFAAgF,kCAAkC,uBAAuB,qBAAqB,yMAAyM,GAAG,mBAAmB,kCAAkC,wBAAwB,uBAAuB,oBAAoB,0BAA0B,mBAAmB,yBAAyB,2BAA2B,sBAAsB,wBAAwB,mBAAmB,wCAAwC,uCAAuC,uCAAuC,kCAAkC,GAAG,6DAA6D,oCAAoC,uBAAuB,qBAAqB,iKAAiK,GAAG,aAAa,oCAAoC,wBAAwB,uBAAuB,oBAAoB,mBAAmB,2BAA2B,yBAAyB,0BAA0B,wBAAwB,sBAAsB,mBAAmB,wCAAwC,uCAAuC,uCAAuC,0CAA0C,yCAAyC,uCAAuC,kCAAkC,uBAAuB,GAAG,qBAAqB;AAC/+H;AACA,iEAAe,uBAAuB,EAAC;;;;;;;;;;;ACPvnS4F;AAC5F,YAAoI;;AAEpI;;AAEA;AACA;;AAEA,aAAa,0GAAG,CAAC,0HAAO;;;;AAIxB,iEAAe,0HAAO,aAAa;;;;;;;;;;;;;;;;;;ACZyD;AAC5F,YAAoG;;AAEpG;;AAEA;AACA;;AAEA,aAAa,0GAAG,CAAC,gGAAO;;;;AAIxB,iEAAe,gGAAO,aAAa;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZnC;AACiD;;AAE1B;;AAEK;AAC5B;;AAEgC;AACI;;AAEpC;AACqD;;AAET;;AAE5C;AACA;AACA;AAC4C;AAC5C;;AAE8C;AAC9C;;AAEA;;AAEA;AACA;;AAEwD;AACxD;;AAE8C;AAC9C;;AAE8C;AAC9C;;AAEqD;;AAET;AAC5C;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,yBAAyB,8BAA8B;AACvD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,8BAA8B;AAC9B;;AAEA;;AAEA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,wBAAwB,2DAAa;AACrC;AACA;;AAEA;AACA,oBAAoB,4DAAM;AAC1B;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,6DAAO;AAC5B;AACA,0BAA0B,kEAAY;AACtC,qBAAqB,6DAAO;AAC5B,qBAAqB,8DAAO;AAC5B,oBAAoB,6DAAM;AAC1B;;AAEA;AACA;;AAEA;AACA,iCAAiC,+DAAa;AAC9C,iCAAiC,gEAAa;;AAE9C;AACA;AACA,sBAAsB;AACtB,2BAA2B;AAC3B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,yBAAyB;AAC5F;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,oBAAoB,KAAK;AACzB;AACA,oBAAoB,KAAK;AACzB;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,gBAAgB,MAAM;;AAEtB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;;AAE5B;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,yBAAyB;AAC5F;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA,oBAAoB,SAAS;AAC7B;AACA,oBAAoB,iBAAiB;AACrC;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB;;AAEzB;AACA;AACA,yBAAyB;;AAEzB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA,gCAAgC,iBAAiB;;AAEjD;AACA,UAAU,KAAK;AACf;AACA;;AAEA;AACA;AACA;AACA,OAAO;;AAEP;AACA,UAAU,OAAO;;AAEjB;AACA,UAAU,QAAQ,QAAQ;AAC1B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA,qBAAqB;AACrB;AACA,6CAA6C;AAC7C;;AAEA;;AAEA;AACA,iBAAiB,6CAAM;AACvB,iBAAiB,6CAAM;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,6CAAM;AACjC,aAAa;;AAEb;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,MAAM;AAC1B,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA,4BAA4B,6CAAM;;AAElC;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,MAAM;AAC1B,oBAAoB,QAAQ;AAC5B,oBAAoB,QAAQ;AAC5B;AACA,qBAAqB;AACrB;AACA;AACA,mBAAmB,6CAAM;AACzB,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,MAAM;AAC1B,oBAAoB,QAAQ;AAC5B,oBAAoB,QAAQ;AAC5B;AACA,qBAAqB;AACrB;AACA;AACA,mBAAmB,6CAAM;AACzB,UAAU;AACV;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA,gBAAgB;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA,gBAAgB;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA,gBAAgB;;AAEhB;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA,eAAe;AACf,kCAAkC,cAAc;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,mCAAmC,GAAG;AACtC,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,KAAK;AACnB;AACA,eAAe;AACf,kCAAkC,cAAc;AAChD;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,mCAAmC,GAAG;AACtC;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA,cAAc,sBAAsB;AACpC;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,OAAO;AACrB;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,uDAAW;AACxB;;AAEA;AACA;AACA,+BAA+B,iBAAiB,IAAI,mBAAmB;AACvE;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA,aAAa,+CAAM;AACnB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA,oBAAoB,EAAE,UAAU,EAAE,eAAe,EAAE,gBAAgB,EAAE,UAAU,GAAG;AAClF;AACA;AACA;AACA;;AAEA;AACA,aAAa,mDAAO;AACpB;;AAEA;AACA,aAAa,qDAAS;AACtB;;AAEA;AACA,aAAa,kDAAM;AACnB;;AAEA;AACA,aAAa,uDAAW;AACxB;;AAEA;AACA,aAAa,mDAAO;AACpB;;AAEA;AACA,aAAa,oDAAQ;AACrB;;AAEA;AACA,aAAa,mDAAO;AACpB;;AAEA;AACA,aAAa,mDAAO;AACpB;;AAEA;AACA,aAAa,wCAAM;AACnB;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA,aAAa,sDAAU;AACvB;AACA;AACA,yBAAyB,uDAAW;AACpC;AACA;;AAEA,iEAAe,EAAE,EAAC;;;;;;;;;;;;;;;;;;;;;;;AC79BlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACsD;;AAEtD;AAC8C;;AAE9C;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEe,gCAAgC,2DAAS;AACxD;AACA;;AAEA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;AACA,UAAU,QAAQ;;AAElB;AACA,UAAU,QAAQ;AAClB;;AAEA;AACA,UAAU,QAAQ;AAClB;;AAEA;AACA;AACA,UAAU,KAAK;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;;AAEA;AACA;AACA,UAAU,KAAK;AACf;;AAEA;AACA,UAAU,QAAQ;AAClB;AACA;AACA;;AAEA;AACA,UAAU,QAAQ;AAClB;AACA;AACA;AACA;;AAEA;AACA,UAAU,MAAM;AAChB;AACA;AACA,yEAAyE;AACzE;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,cAAc,cAAc;AAC5B;;AAEA;AACA,UAAU,MAAM;AAChB;AACA;AACA,UAAU,MAAM;AAChB;AACA,UAAU,MAAM;AAChB;;AAEA;AACA;AACA;AACA,UAAU,IAAI;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU,OAAO;AACjB,kBAAkB,WAAW;AAC7B;AACA,0BAA0B,OAAO;AACjC;;AAEA;AACA,UAAU,OAAO;AACjB,kBAAkB,aAAa;AAC/B;AACA,0BAA0B,SAAS;;AAEnC;AACA,UAAU,OAAO;AACjB,kBAAkB,kBAAkB;AACpC;AACA,0BAA0B,gBAAgB;AAC1C;;AAEA;AACA,UAAU,OAAO;AACjB,kBAAkB,qBAAqB;AACvC;AACA,0BAA0B,iBAAiB;AAC3C;;AAEA,yBAAyB,WAAW;AACpC;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,sBAAsB,QAAQ,oCAAoC,GAAG;AACrE;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,QAAQ,oCAAoC,GAAG;AACxE;AACA;AACA,OAAO;AACP;AACA,UAAU,OAAO;AACjB,8BAA8B,aAAa;AAC3C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,OAAO;;AAEP;AACA,UAAU,OAAO;AACjB,8BAA8B,aAAa;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,aAAa,+DAAa;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,eAAe;AAC7B,0BAA0B,QAAQ;AAClC,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,eAAe,SAAS;AACxB,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,QAAQ;AACtB;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,kCAAkC;AAC/D,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,IAAI;AAClB;AACA;AACA,cAAc,SAAS;AACvB;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,IAAI;AAClB;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,IAAI;AAClB;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,gBAAgB;AAChB;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gCAAgC,WAAW;AAC3C,eAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,IAAI;AAClB;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA,cAAc,IAAI;AAClB;AACA,cAAc,IAAI;AAClB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,IAAI;AAClB;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,mCAAmC;AACnC,cAAc,QAAQ;AACtB;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA,gCAAgC,QAAQ;AACxC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACv9BA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,mBAAO,CAAC,sCAA2B;AACT;;AAEvC,sCAAsC,+DAAa;AAClE;AACA;AACA,+BAA+B;AAC/B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC8C;;AAE9C;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;;AAEA;AACA,IAAI;AACJ;;AAEA;AACA,IAAI,OAAO;AACX;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,aAAa;AACxC;AACA;AACA;AACA;;AAEe,mCAAmC,2DAAS;AAC3D;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,UAAU;AACV,iEAAiE;AACjE;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA,UAAU,QAAQ;AAClB;;AAEA;AACA,UAAU,QAAQ;AAClB;;AAEA;AACA,UAAU,QAAQ;AAClB;;AAEA;AACA;AACA,UAAU,KAAK;AACf;;AAEA;AACA;AACA;AACA,UAAU,QAAQ;AAClB;AACA;;AAEA;AACA;AACA,UAAU,QAAQ;AAClB;AACA;;AAEA;AACA;AACA;AACA,UAAU,QAAQ;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU,KAAK;AACf;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,UAAU,MAAM;AAChB;;AAEA;AACA;AACA;AACA,UAAU,MAAM;AAChB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX,OAAO;AACP,UAAU,cAAc;AACxB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU,KAAK;AACf;AACA;;AAEA;AACA,UAAU,KAAK;AACf;AACA;;AAEA;AACA;AACA,UAAU,QAAQ;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA,mCAAmC,UAAU,IAAI,QAAQ,+BAA+B,2BAA2B;AACnH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,+BAA+B;;AAE/B;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,sBAAsB,MAAM;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;;AAEb;AACA,gBAAgB;AAChB,UAAU;AACV;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,UAAU,IAAI,QAAQ;AACvD;AACA,6CAA6C,8BAA8B;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,wBAAwB;AACtC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;;AAEpC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,eAAe;AAC7B;AACA;AACA;AACA;AACA;AACA,oCAAoC,YAAY;AAChD;AACA;AACA;AACA;AACA;AACA,qCAAqC,6BAA6B;AAClE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,gBAAgB;;AAEhB;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,+BAA+B;AAC/B;;AAEA,gBAAgB;;AAEhB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,qDAAqD,OAAO;AAC5D;;AAEA;AACA,mCAAmC,iCAAiC,GAAG,OAAO;AAC9E;AACA;AACA,yBAAyB;AACzB,sBAAsB;;AAEtB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,4BAA4B;;AAE5B;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uCAAuC,SAAS;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA,uCAAuC,SAAS;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC,qCAAqC;AACrC;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,mBAAmB;;AAEnB;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kDAAkD;AAClD;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;;AAEzB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb,OAAO;;AAEP;AACA,aAAa,MAAM;AACnB;AACA,2BAA2B,QAAQ;AACnC,uBAAuB,MAAM;;AAE7B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA,mCAAmC,GAAG,OAAO;AAC7C;AACA;AACA,yBAAyB;AACzB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA,sCAAsC,GAAG,OAAO;AAChD;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,gBAAgB;;AAEhB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB;;AAEnB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4CAA4C;AAC5C;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;;AAEnB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;;AAEA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;;AAEA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,QAAQ,GAAG,OAAO;AAC5D,yBAAyB;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA,6CAA6C,QAAQ,GAAG,OAAO;AAC/D,4BAA4B;AAC5B;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yCAAyC;AACzC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;;AAEhB;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,sBAAsB;AACpC;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;;AAEtD;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;;AAEnB;AACA;AACA;AACA,sBAAsB;AACtB;AACA,gBAAgB;AAChB,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA,cAAc,UAAU;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA,uBAAuB,aAAa,GAAG,aAAa;AACpD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4CAA4C;AAC5C;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,uCAAuC;AACvC;;AAEA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA,UAAU;AACV,OAAO;AACP;;AAEA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA,cAAc,KAAK;AACnB;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,UAAU;AACV;AACA;;AAEA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,UAAU;AACV,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,mBAAmB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iDAAiD;AACjD,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gCAAgC;AAChC;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,mCAAmC;;AAEnC;AACA;AACA;AACA;;AAEA,oCAAoC;;AAEpC;;AAEA;;AAEA,+BAA+B,MAAM,kBAAkB,MAAM;AAC7D;;AAEA;AACA;AACA,iCAAiC,YAAY,kBAAkB,YAAY;AAC3E;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA,sCAAsC;;AAEtC;;AAEA;AACA,qCAAqC,MAAM;AAC3C;AACA;;AAEA,YAAY;;AAEZ;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA,UAAU;;AAEV;AACA;AACA;AACA,UAAU;;AAEV;;AAEA;AACA;;AAEA;AACA;AACA;AACA,oCAAoC,cAAc;;AAElD,QAAQ;;AAER;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,QAAQ;AACR;;AAEA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,QAAQ;AACtB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,2BAA2B,MAAM,GAAG,IAAI;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,yCAAyC,MAAM,GAAG,QAAQ;AAC1D,mBAAmB;;AAEnB;AACA,gBAAgB;AAChB;AACA,UAAU;AACV,OAAO;;AAEP;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,wEAAwE;AACxE;;AAEA;AACA;;AAEA;;AAEA;AACA,gBAAgB;AAChB;AACA,UAAU;AACV;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,uBAAuB;AACvB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACjmFA;;AAEe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf,yBAAyB,MAAM;AAC/B;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzFA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;;AAEA;AACA;;AAEA;AACsD;;AAEY;;AAElE;AACoD;;AAEpD;AACkD;;AAElD;AAC8C;;AAE9C;AAC0C;;AAE1C;AAC4C;;AAE5C;AAC4D;AAC5D;AACwD;AACxD;AAC4D;AAC5D;AACsD;;AAEtD;AACwC;;AAExC;AAC8C;;AAE9C;AAC4E;;AAE5E;AAC8D;;AAE9D;AACkE;;AAElE;AACwC;;AAExC;AACkE;;AAElE;AAC8D;;AAE9D;AACA;AACA;;AAEA;AAC8C;;AAE9C;AACsD;;AAEtD;AAC8C;;AAE9C;AACiD;;AAEjD,wBAAwB,4DAAY;AACpC;AACA;AACA,iBAAiB,MAAM;AACvB,kBAAkB,mBAAmB;AACrC;AACA;;AAEA;AACA;;AAEA;AACA,UAAU,SAAS,mBAAmB;AACtC,yCAAyC,MAAM;AAC/C;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,UAAU,OAAO;;AAEjB;AACA,UAAU,OAAO;;AAEjB;AACA,UAAU,OAAO;;AAEjB;AACA,UAAU,OAAO;;AAEjB;AACA,UAAU,OAAO;;AAEjB;AACA,UAAU,OAAO;;AAEjB;AACA,UAAU,OAAO;;AAEjB;AACA;AACA;AACA;AACA,sBAAsB;AACtB,oBAAoB;AACpB,qBAAqB;AACrB,uBAAuB;AACvB,gBAAgB;AAChB,kBAAkB;AAClB,iBAAiB;AACjB,yBAAyB;AACzB,uBAAuB;AACvB,sBAAsB;AACtB,6BAA6B;AAC7B;;AAEA;AACA;AACA;;AAEA,6BAA6B;;AAE7B,yBAAyB;AACzB,uBAAuB;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B,qBAAqB;AACrB;AACA;AACA;AACA,0BAA0B,EAAE,UAAU,EAAE,eAAe,EAAE,gBAAgB,EAAE,UAAU,GAAG;AACxF;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA,qBAAqB;AACrB;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA,oBAAoB,QAAQ;AAC5B;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA,oBAAoB,QAAQ;AAC5B;AACA,oBAAoB,QAAQ;AAC5B;AACA,oBAAoB,QAAQ;AAC5B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,qBAAqB,QAAQ,EAAE,WAAW,EAAE,WAAW,EAAE,QAAQ;AACjE,0BAA0B,QAAQ;AAClC,0BAA0B,WAAW;AACrC,0BAA0B,WAAW;AACrC,0BAA0B,QAAQ;AAClC,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B,wBAAwB,SAAS;AACjC,qBAAqB;AACrB;AACA;AACA,yBAAyB,4BAA4B;AACrD,UAAU;AACV;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,cAAc;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,qDAAqD,KAAK;AAC1D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU,OAAO;;AAEjB,uDAAuD;AACvD;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,iBAAiB;AACnC;AACA;AACA;AACA,UAAU;AACV,OAAO;;AAEP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA,gBAAgB;AAChB,uBAAuB,SAAS;AAChC;AACA,qBAAqB,QAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;;AAErB;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB;;AAErB;AACA,qBAAqB;;AAErB;AACA,qBAAqB;;AAErB;AACA,qBAAqB;;AAErB;AACA,qBAAqB;;AAErB;AACA;AACA,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA,eAAe;AACf;AACA;AACA,iBAAiB,8DAAY;AAC7B;;AAEA;AACA;AACA;AACA;AACA,cAAc,sBAAsB;AACpC;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA,cAAc,MAAM;AACpB;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA,YAAY,iBAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,IAAI;AAClB;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA,eAAe;AACf;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,+DAAa;AAC9B;;AAEA;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA;AACA,eAAe;AACf;AACA;AACA,iBAAiB,qEAAmB;AACpC;;AAEA;AACA;AACA;AACA,cAAc,IAAI;AAClB;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA,eAAe;AACf;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA,eAAe;AACf;AACA;AACA,mBAAmB,kEAAgB;AACnC;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,yBAAyB,MAAM,OAAO,GAAG;AACzC,cAAc,UAAU;AACxB,eAAe;AACf;AACA;AACA;AACA,aAAa,uDAAc;AAC3B;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,iBAAiB,yDAAO;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,GAAG;AAC7B;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA,wBAAwB,EAAE,GAAG;AAC7B;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,IAAI;AAClB;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;;AAEA;AACA,sBAAsB,kEAAgB;AACtC;AACA,sBAAsB,gEAAc;AACpC,wBAAwB,0DAAQ;;AAEhC;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,IAAI;AAClB;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,wBAAwB,yDAAM;;AAE9B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,IAAI;AAClB;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,2BAA2B,yDAAM;AACjC;AACA,QAAQ;AACR;AACA;AACA;AACA,aAAa;AACb;AACA,2BAA2B,yDAAM;AACjC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,IAAI;AAClB;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA;AACA,eAAe;AACf;AACA;AACA,iBAAiB,4DAAS;AAC1B;;AAEA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,WAAW;AACzB;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,iBAAiB,+EAAoB;AACrC,0BAA0B,+EAAoB;AAC9C;;AAEA,iBAAiB,wEAAa;AAC9B,0BAA0B,wEAAa;AACvC;;AAEA;AACA;AACA,sBAAsB,sEAAoB;AAC1C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,cAAc;AAC5B;AACA,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA,6BAA6B,+EAAoB,GAAG;AACpD;;AAEA;AACA,6BAA6B,wEAAa,GAAG;AAC7C;;AAEA;AACA,6BAA6B,sEAAoB;AACjD;AACA,4BAA4B,sEAAoB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,IAAI;AAClB;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,iBAAiB,gEAAa;AAC9B;;AAEA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,iBAAiB,4DAAS;AAC1B;;AAEA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,wCAAwC;AACxC,iBAAiB,gEAAa;AAC9B;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,OAAO;AACrB;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,MAAM;AACpB,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;;AAEA,iEAAe,SAAS,EAAC;;;;;;;;;;;;;;;;;;;ACjnCzB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS,+RAA8C;AACvD,SAAS,mSAAgD;AACzD,SAAS,+RAA8C;AACvD,SAAS,0WAA4C;AACrD,SAAS,kXAAgD;AACzD,SAAS,iSAA+C;AACxD,SAAS,2RAA4C;AACrD,SAAS,iXAA4C;AACrD,SAAS,6RAA6C;AACtD,SAAS,0RAA4C;AACrD,SAAS,6RAA6C;AACtD,SAAS,6WAA4C;AACrD,SAAS,iSAA+C;AACxD,SAAS,qSAAiD;AAC1D,SAAS,ySAAmD;AAC5D,SAAS,iSAA+C;AACxD,SAAS,qSAAiD;AAC1D,SAAS,0RAA4C;AACrD,SAAS,iSAA+C;AACxD,SAAS,ySAAmD;AAC5D;;AAEA;AACA;AACA;AACA,CAAC;;AAEc;AACf;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,YAAY,IAAI,WAAW,eAAe,YAAY;AACnH;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC9FA;;AAE8C;AAC9C;;AAEe,yBAAyB,2DAAS;AACjD;AACA;;AAEA;;AAEA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,QAAQ;AAC1B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,oDAAoD;AACpD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,IAAI;AAClB;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,QAAQ;AAC1B,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,IAAI;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC7I8C;;AAE/B,0BAA0B,2DAAS;AAClD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,UAAU,IAAI,QAAQ,oCAAoC,EAAE;AACvF;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA,qBAAqB,UAAU,IAAI,QAAQ;AAC3C;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;;AAEA;AACA,gBAAgB,UAAU,GAAG,UAAU;AACvC;;AAEA;AACA;;AAEA,gBAAgB,UAAU;AAC1B;AACA;;;;;;;;;;;;;;;;;ACpHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC8C;AAC/B,4BAA4B,2DAAS;AACpD;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,eAAe,QAAQ;AACvB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,MAAM;AACpB,kEAAkE,WAAW;AAC7E;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,2BAA2B;AAC3B,4BAA4B;;AAE5B;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,uCAAuC;AACvC,gBAAgB;AAChB;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,aAAa,GAAG,SAAS;AACxD,iCAAiC;AACjC,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,MAAM;AACpB,kEAAkE,WAAW;AAC7E;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;;AAEhB;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACnPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+BAA+B;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA,WAAW;AACX;;AAEA;;AAEA;AACA;AACA;AACA,cAAc,SAAS;AACvB,eAAe;AACf;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,WAAW;AACX;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,0GAA0G,4BAA4B;AACtI;;AAEA;AACA,4GAA4G,4BAA4B;AACxI;AACA;;AAEA;AACA;AACA,aAAa;;AAEb;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA,iGAAiG,4BAA4B;;AAE7H;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe;AACf;AACA;AACA,0BAA0B,QAAQ,UAAU;AAC5C;;AAEA,6BAA6B,2BAA2B;AACxD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,MAAM;AACzB;AACA,mBAAmB;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,cAAc;AAC7C,mBAAmB;;AAEnB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,UAAU;AAChC;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA,wCAAwC,KAAK;AAC7C;AACA,wBAAwB,KAAK,GAAG,KAAK,OAAO,KAAK;AACjD,WAAW;AACX;AACA;AACA,kDAAkD,MAAM;AACxD;AACA;AACA;AACA,4BAA4B,KAAK,GAAG,KAAK,OAAO,KAAK;AACrD,4BAA4B,KAAK,GAAG,KAAK,OAAO,KAAK;AACrD;AACA,WAAW;AACX;AACA;AACA,gCAAgC,MAAM;AACtC;AACA;AACA;AACA,yCAAyC,KAAK,GAAG,KAAK,OAAO,KAAK;AAClE,yCAAyC,KAAK,GAAG,KAAK,OAAO,KAAK;AAClE;AACA,yCAAyC,KAAK,GAAG,KAAK,OAAO,KAAK;AAClE;AACA,WAAW;;AAEX,eAAe,cAAc;AAC7B,eAAe,KAAK;AACpB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;;AAEA;AACA,4BAA4B;AAC5B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,6BAA6B;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,mBAAmB;AACnB;;AAEA;AACA;AACA;AACA;AACA,gBAAgB;;AAEhB;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb,OAAO;AACP;;AAEA;AACA;AACA;AACA,iBAAiB,WAAW;AAC5B;AACA;;AAEA;AACA;;AAEA;AACA,2CAA2C;;AAE3C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC,cAAc;;AAE9C;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;;AAEA,eAAe;;AAEf,0BAA0B;AAC1B,WAAW;;AAEX;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,cAAc;;AAE1C;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,aAAa;AACb;;AAEA;AACA;;AAEA,WAAW;AACX;AACA;AACA,WAAW;;AAEX;;AAEA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B,kBAAkB,SAAS;AAC3B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B,kBAAkB,SAAS;AAC3B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA,aAAa;AACb;AACA;AACA,aAAa;;AAEb;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA,cAAc,MAAM;AACpB,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,MAAM;AACpB,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,oBAAoB;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,8CAA8C,KAAK;AACnD,sDAAsD,QAAQ;AAC9D,wDAAwD,aAAa;AACrE,oDAAoD,aAAa;AACjE;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,2CAA2C,KAAK;AAChD,mDAAmD,QAAQ;AAC3D,qDAAqD,aAAa;AAClE,iDAAiD,aAAa;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,UAAU;AACV,OAAO;AACP;AACA;;;;;;;;;;;;;;;;;;ACn4BA;AACA;AACA;AACA;AACA;AACA;;AAE0C;AACI;;AAE/B,2BAA2B,2DAAS;AACnD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA,UAAU,QAAQ;AAClB;;AAEA;AACA,UAAU,QAAQ;AAClB;;AAEA,wDAAwD;AACxD,UAAU,QAAQ;AAClB;AACA,sBAAsB,UAAU;;AAEhC;AACA,UAAU,QAAQ;AAClB;AACA;;AAEA;AACA,UAAU,QAAQ;AAClB;AACA;;AAEA;AACA,UAAU,QAAQ;;AAElB;AACA;AACA;AACA,UAAU,MAAM;;AAEhB;AACA,UAAU;AACV,UAAU,MAAM;AAChB;AACA;;AAEA;AACA,UAAU,MAAM;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mDAAmD;AACnD,UAAU,QAAQ;AAClB,eAAe,SAAS,EAAE,UAAU;AACpC;AACA;AACA;AACA;;AAEA,mEAAmE;AACnE,UAAU,QAAQ;AAClB;AACA;AACA;;AAEA,+DAA+D;AAC/D,UAAU,QAAQ;AAClB;;AAEA;;AAEA;;AAEA;AACA,UAAU,MAAM;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU,QAAQ;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,KAAK;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU,QAAQ;AAClB;AACA;AACA;;AAEA;AACA,UAAU,OAAO;AACjB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,oBAAoB,UAAU,wCAAwC,GAAG;AACzE;AACA;AACA,wBAAwB,cAAc,gCAAgC;AACtE,aAAa;AACb;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,oBAAoB,UAAU,wCAAwC,GAAG;AACzE;AACA;AACA,wBAAwB,cAAc,gCAAgC;AACtE,aAAa;AACb;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe,OAAO;AACtB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,IAAI;AAClB,6CAA6C,MAAM;AACnD,8BAA8B,OAAO;AACrC,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA,gDAAgD;AAChD,cAAc,QAAQ;AACtB;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,IAAI;AAClB,6CAA6C,MAAM;AACnD,8BAA8B,OAAO;AACrC,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,oBAAoB,UAAU,qCAAqC,GAAG;AACtE;AACA;AACA,wBAAwB,cAAc,gCAAgC;AACtE,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,sBAAsB,yBAAyB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,yBAAyB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,IAAI;AAClB,6CAA6C,MAAM;AACnD,8BAA8B,OAAO;AACrC,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA,gDAAgD;AAChD,cAAc,QAAQ;AACtB;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,yDAAO;;AAE7B;AACA;AACA,4BAA4B,aAAa;;AAEzC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,mCAAmC,QAAQ;AAC3C;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,yCAAyC,QAAQ;AACjD;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,mCAAmC,QAAQ,GAAG,GAAG;AACjD;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,oCAAoC,QAAQ;AAC5C;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,iDAAiD,QAAQ;AACzD;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,yCAAyC,QAAQ;AACjD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA,eAAe;AACf;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA,eAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,4BAA4B,OAAO;AACnC,YAAY,OAAO,UAAU,OAAO;AACpC,sCAAsC,GAAG,IAAI;;AAE7C;AACA;AACA,iDAAiD,iBAAiB;;AAElE;AACA;;AAEA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,yCAAyC,wBAAwB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,mBAAmB,EAAE,WAAW;AAChC;AACA;AACA;AACA;;AAEA,4BAA4B,OAAO;AACnC,YAAY,OAAO,UAAU,OAAO;AACpC,sCAAsC,GAAG,IAAI;;AAE7C;AACA;AACA,iDAAiD,iBAAiB;;AAElE;AACA;;AAEA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,2BAA2B,+CAA+C;AAC1E;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;AC5+BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAE4C;AACQ;;AAErC,gCAAgC,0DAAQ;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,EAAE;;;AAGF,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA,UAAU,OAAO;AACjB;;AAEA;AACA,UAAU,OAAO,IAAI,gBAAgB;AACrC;;AAEA;AACA,UAAU,OAAO,GAAG,iBAAiB;AACrC;;AAEA;AACA,UAAU,OAAO,GAAG,UAAU;AAC9B;;AAEA;AACA,UAAU,OAAO,IAAI,eAAe;AACpC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,2BAA2B;AAC3B,WAAW;AACX;AACA;;AAEA;AACA,UAAU,QAAQ;AAClB;AACA;;AAEA;AACA,UAAU;AACV;AACA;;AAEA;AACA,6CAA6C;;AAE7C;AACA;AACA;AACA,UAAU,OAAO,IAAI,aAAa,IAAI;AACtC;AACA;AACA,sBAAsB,QAAQ;AAC9B;AACA,sBAAsB,YAAY;;AAElC;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;;AAEA;;AAEA;AACA;AACA,iCAAiC;;AAEjC;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA,qCAAqC,kBAAkB;AACvD;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,0CAA0C,WAAW;AACrD;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,OAAO;;AAEP;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;;AAEA,sCAAsC;AACtC;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,4BAA4B,SAAS;AACrC,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW;AACX;AACA;;AAEA;AACA,UAAU,OAAO;AACjB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;;AAEhB;AACA;AACA;AACA,8DAA8D,aAAa;AAC3E;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB;AACA;;AAEA;AACA;AACA;AACA;AACA,+EAA+E,8BAA8B;AAC7G;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB;AACA;;AAEA;;AAEA;;AAEA;AACA,UAAU;AACV;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA,gDAAgD;AAChD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8DAAY;;AAElC;AACA;AACA,4BAA4B,aAAa,GAAG;;AAE5C;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,UAAU;AACxB,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,UAAU;AACxB,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC3qBA;;AAE8C;AACd;AAChC;AACA,gBAAgB,0CAAM;;AAEkE;;AAEzE,4BAA4B,2DAAS;AACpD;AACA;;AAEA;;AAEA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,uBAAuB,UAAU,iDAAiD,IAAI;AACtF,oBAAoB;AACpB;AACA;AACA;AACA,OAAO;;AAEP;;AAEA,oCAAoC;AACpC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,6XAA6X,QAAQ;AACrY;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,IAAI;AAClB;AACA,gBAAgB,oBAAoB;AACpC;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA,cAAc,gBAAgB;AAC9B,kBAAkB,SAAS;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,gBAAgB;AAC9B,kBAAkB,SAAS;AAC3B,eAAe;AACf,oBAAoB,QAAQ;AAC5B,sBAAsB,QAAQ;AAC9B,sBAAsB,QAAQ;AAC9B,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,gBAAgB;AAC9B,kBAAkB,SAAS;AAC3B;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,IAAI;AAClB;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,cAAc,kBAAkB;AAChC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,kBAAkB;AACpC,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA,cAAc,sBAAsB;AACpC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,kBAAkB;AAChC,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,kBAAkB;AAChC,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,kBAAkB;AAChC;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,kBAAkB;AAChC;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,+BAA+B;AAC/B,cAAc,YAAY;AAC1B,cAAc,MAAM;AACpB,eAAe;AACf,eAAe;AACf;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;;AAEA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,kBAAkB;AAChC;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB,kBAAkB;AAClB;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,+BAA+B,uFAAuB;AACtD;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACtnBA;;AAE8C;;AAE/B,yBAAyB,2DAAS;AACjD;AACA;;AAEA;;AAEA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oCAAoC;AACpC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB,QAAQ;AAC7B,iBAAiB,QAAQ;AACzB,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACtHA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,2HAAkC;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAEc;AACf;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,QAAQ;AACR,kDAAkD,WAAW;AAC7D,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wCAAwC,IAAI;AAC5C;AACA;AACA;;;;;;;;;;;;;;;;;;;ACvJkD;AAClD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,gCAAgC,6DAAW;AAC1D;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,uBAAuB;AACvB;AACA;AACA,0BAA0B;;AAE1B;AACA;;AAEA;AACA;AACA;AACA,8BAA8B;AAC9B,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;;AAEA;AACA,UAAU;AACV,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB,QAAQ;AAC9B,wBAAwB,QAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,+CAA+C;AAC/C;AACA,cAAc;AACd;;AAEA;;AAEA;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW;AACX;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;;AAEA;AACA,iDAAiD;;AAEjD;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACbsBAAsB,OAAO,cAAc,GAAG;AAC9C,uBAAuB,OAAO;AAC9B,uBAAuB,GAAG;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,sBAAsB,OAAO,QAAQ,GAAG;AACxC,uBAAuB,OAAO;AAC9B,uBAAuB,GAAG;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,6BAA6B,MAAM,GAAG,IAAI;AAC1C,aAAa;;AAEb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,qBAAqB,UAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,eAAe,GAAG,QAAQ;;AAEjD;AACA;AACA;;AAEA;AACA,cAAc;AACd,wBAAwB,QAAQ;AAChC;AACA;AACA;AACA,kBAAkB;AAClB,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,eAAe,GAAG,QAAQ;;AAEjD,4BAA4B;AAC5B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;;AAEA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd,wBAAwB,QAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,eAAe;AACf;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,eAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;ACvzCkD;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEe,4BAA4B,6DAAW;AACtD;AACA;;AAEA;;AAEA,uBAAuB;AACvB;AACA;AACA,wBAAwB;;AAExB;AACA;;AAEA;AACA;AACA;AACA,8BAA8B;AAC9B,UAAU;;AAEV;AACA;AACA;AACA,qBAAqB,MAAM;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;;AAEA;AACA,kDAAkD;;AAElD;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,4BAA4B,OAAO,cAAc,GAAG;AACpD,6BAA6B,OAAO;AACpC,6BAA6B,GAAG;AAChC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,4BAA4B,OAAO,QAAQ,GAAG;AAC9C,6BAA6B,OAAO;AACpC,6BAA6B,GAAG;AAChC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,mCAAmC,MAAM,GAAG,IAAI;AAChD,mBAAmB;;AAEnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,UAAU;AACV,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB,QAAQ;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA,cAAc;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW;AACX;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA,cAAc,UAAU;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,IAAI;AAClB,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC3yBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAE8D;AAC9D;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;;AAEe,+BAA+B,qEAAY;AAC1D;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,0BAA0B;AAC1B,WAAW;;AAEX;AACA;;AAEA,0BAA0B;AAC1B,UAAU,KAAK;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU,SAAS;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,sBAAsB,sBAAsB,IAAI,oBAAoB,UAAU,UAAU,IAAI,QAAQ,+BAA+B,GAAG;AACtI;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA,UAAU;AACV;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA,eAAe;AACf,yBAAyB,MAAM;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,IAAI;AAClB;AACA,cAAc,SAAS;AACvB;AACA,eAAe,SAAS;AACxB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,cAAc;AAC5B,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,cAAc;AAC5B,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,KAAK;AACnB,kBAAkB,gBAAgB;AAClC;AACA,cAAc,SAAS;AACvB;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,+BAA+B,gBAAgB;AAC/C;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,kBAAkB,gBAAgB;AAClC;AACA,cAAc,SAAS;AACvB;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,+BAA+B,gBAAgB;AAC/C;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACnZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEiD;;AAEjD;AACA,2BAA2B,QAAQ;AACnC,gCAAgC,QAAQ;AACxC,yBAAyB,QAAQ;AACjC;AACA;;AAEA;AACA;AACA;;AAEe,+BAA+B,2DAAS;AACvD;AACA,cAAc,KAAK;AACnB,cAAc,eAAe;AAC7B,cAAc,QAAQ;AACtB;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,UAAU;AACV;;AAEA;AACA,UAAU;AACV;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,eAAe;AAC7B,cAAc,sBAAsB;AACpC,eAAe;AACf;AACA;AACA;AACA;AACA,WAAW,wBAAwB;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA,2BAA2B;AAC3B,UAAU,QAAQ;AAClB;;AAEA;AACA,UAAU,QAAQ;AAClB;;AAEA;AACA,UAAU,QAAQ;AAClB;AACA;;AAEA;AACA,UAAU,QAAQ;AAClB;AACA;;AAEA;;AAEA;AACA,UAAU,QAAQ;AAClB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,UAAU,KAAK;AACf;;AAEA;AACA;;AAEA;AACA,UAAU,KAAK;AACf,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB,8BAA8B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,OAAO;AACP;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,YAAY;AAC3B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,eAAe;AAC7B,0BAA0B,QAAQ;AAClC,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,WAAW;AACX;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,cAAc;AAC9B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,wDAAwD,SAAS;AACjE;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,SAAS;AACpF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0BAA0B,WAAW,IAAI,QAAQ;AACjD;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,QAAQ;AACtB;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,IAAI;AAClB;AACA,cAAc,SAAS;AACvB;AACA,eAAe,QAAQ;AACvB;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,QAAQ;AACR;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA,eAAe;AACf,kBAAkB,MAAM;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA,cAAc,KAAK;AACnB,kBAAkB,gBAAgB;AAClC;AACA,cAAc,SAAS;AACvB;AACA;AACA,cAAc,KAAK;AACnB;AACA,qCAAqC;AACrC;AACA,eAAe;AACf;AACA;AACA,wCAAwC;AACxC;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;AACV;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,kBAAkB,gBAAgB;AAClC;AACA,cAAc,SAAS;AACvB;AACA;AACA,cAAc,KAAK;AACnB;AACA,qCAAqC;AACrC;AACA,8BAA8B;AAC9B;AACA,eAAe;AACf;AACA;AACA,uCAAuC;AACvC;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,YAAY,UAAU,2BAA2B;;AAEhE,+CAA+C,cAAc;AAC7D;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,qBAAqB;;AAEzE;AACA;AACA;AACA;AACA;AACA,+CAA+C,KAAK;AACpD;AACA;AACA;AACA;;AAEA;AACA;AACA,yBAAyB;AACzB;AACA,gBAAgB;AAChB;;AAEA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,gBAAgB;AAChB;;AAEA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;;;;;;;;;;;;;;;;;ACz6BA;AACA;AACA;AACA;AACA;AACA;AAC+E;;AAE/E;AACA;AACA,OAAO,QAAQ;AACf;;AAEA;AACA,OAAO,QAAQ;AACf;AACA;;AAEe,gCAAgC,8EAAoB;AACnE;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,KAAK;AACzB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA;;;;;;;;;;;;;;;;;AC1EA;AACA;AACA;AACA;AACA;AACA;AACiD;;AAEjD;AACA;AACA,OAAO,QAAQ;AACf;;AAEA;AACA;;AAEe,uCAAuC,2DAAS;AAC/D;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,KAAK;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,oCAAoC;AACpC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC9JA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS,6MAAmD;AAC5D,SAAS,uOAAgE;AACzE,SAAS,yNAAyD;AAClE,SAAS,6NAA2D;AACpE,SAAS,+QAAoF;AAC7F,SAAS,+PAA4E;AACrF,SAAS,uQAAgF;AACzF,SAAS,mQAA8E;AACvF,SAAS,+OAAoE;AAC7E,SAAS,qPAAuE;AAChF,SAAS,uOAAgE;AACzE,SAAS,mQAA8E;AACvF,SAAS,uJAA8D;AACvE,SAAS,uNAAwD;AACjE,SAAS,+YAAgE;AACzE,SAAS,uOAAgE;AACzE,SAAS,qNAAuD;AAChE,SAAS,uOAAgE;AACzE,SAAS,+NAA4D;AACrE;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED,iEAAe;AACf;AACA;AACA;AACA,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,IAAI;;AAEJ;AACA;AACA,IAAI;;AAEJ;AACA;AACA,IAAI;;AAEJ;AACA;AACA,IAAI;;AAEJ;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,IAAI;AACJ,CAAC,EAAC;;;;;;;;;;;;;;;;;;;ACvIkD;;AAErC,gCAAgC,2DAAS;AACxD;AACA;;AAEA,yCAAyC;AACzC,UAAU,KAAK;AACf;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,UAAU,WAAW;AACrB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,KAAK;AACzB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,sBAAsB,cAAc;AAC9D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA,oCAAoC;AACpC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,eAAe;AAC7B;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,+BAA+B,UAAU,IAAI,IAAI;AACjD,mBAAmB;AACnB;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA,cAAc,KAAK;AACnB;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,KAAK;AACnB;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA,QAAQ,IAAI,kBAAkB;AAC9B;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,QAAQ,yBAAyB,MAAM;AACtD;AACA;AACA;;AAEA;AACA;AACA;AACA,uEAAuE,eAAe;AACtF;AACA;AACA;AACA;;AAEA;AACA;AACA,iCAAiC,iCAAiC;AAClE,6BAA6B,mBAAmB;AAChD;AACA;;AAEA;AACA;AACA;AACA;AACA,4EAA4E,eAAe;AAC3F;AACA,yCAAyC,YAAY;AACrD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,gFAAgF,IAAI;AACpF;AACA,+CAA+C,YAAY;AAC3D;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,OAAO;AACrB;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;AChfmF;;AAEnF;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa;AACb;;AAEA;AACA,uBAAuB;AACvB;;AAEA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEe,6BAA6B,mFAAgB;AAC5D;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,OAAO;;AAEP;AACA,8BAA8B,eAAe,SAAS,WAAW,0CAA0C,IAAI;AAC/G;AACA;AACA,0CAA0C,2BAA2B;AACrE;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,kBAAkB;AAChC;AACA,eAAe,OAAO;AACtB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B,sBAAsB,WAAW;AACjC;AACA,UAAU;;AAEV;AACA;AACA,uBAAuB,QAAQ,GAAG,KAAK;AACvC,yBAAyB,WAAW,gBAAgB,QAAQ;AAC5D;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,oBAAoB,QAAQ,GAAG,sBAAsB;AACrD,oBAAoB,QAAQ;AAC5B,sBAAsB,WAAW;AACjC;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA,oBAAoB,kBAAkB;AACtC,2CAA2C,UAAU;AACrD;AACA;AACA,UAAU;AACV,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,kBAAkB;AAChC;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,IAAI;AAClB;AACA,gBAAgB,oBAAoB;AACpC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAc,gBAAgB;AAC9B,kBAAkB,SAAS;AAC3B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,gBAAgB;AAC9B,kBAAkB,SAAS;AAC3B,eAAe;AACf,oBAAoB,QAAQ;AAC5B,sBAAsB,QAAQ;AAC9B,sBAAsB,QAAQ;AAC9B,oBAAoB,QAAQ;AAC5B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAc,gBAAgB;AAC9B,kBAAkB,SAAS;AAC3B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,kBAAkB;AAChC,eAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,IAAI;AAClB;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,kBAAkB;AAChC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAc,sBAAsB;AACpC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;ACpbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEiD;;AAEjD;AACA;AACA;;AAEA;AACA,6BAA6B,QAAQ;AACrC,wBAAwB,QAAQ;AAChC,8BAA8B,QAAQ;AACtC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEe,kCAAkC,8DAAM;AACvD;AACA,cAAc,KAAK;AACnB,cAAc,eAAe;AAC7B,cAAc,QAAQ;AACtB,cAAc,KAAK;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA,wEAAwE;AACxE,QAAQ;AACR;AACA;;AAEA;AACA,oEAAoE;AACpE,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC3FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEiD;;AAEjD;AACA,oBAAoB,QAAQ;AAC5B,gCAAgC,QAAQ;AACxC,uCAAuC,QAAQ;AAC/C;AACA;;AAEA;AACA;AACA;;AAEe,yBAAyB,2DAAS;AACjD;AACA,cAAc,KAAK;AACnB,cAAc,eAAe;AAC7B,cAAc,QAAQ;AACtB;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,UAAU;AACV;;AAEA;AACA,UAAU;AACV;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,eAAe;AAC7B,cAAc,sBAAsB;AACpC,eAAe;AACf;AACA;AACA;AACA;AACA,WAAW,wBAAwB;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA,2BAA2B;AAC3B,UAAU,QAAQ;AAClB;;AAEA;AACA,UAAU,QAAQ;AAClB;;AAEA;AACA,UAAU,QAAQ;AAClB;AACA;;AAEA;AACA,UAAU,QAAQ;AAClB;AACA;;AAEA;;AAEA;AACA,UAAU,QAAQ;AAClB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,UAAU,KAAK;AACf;;AAEA;AACA;;AAEA;AACA,UAAU,KAAK;AACf,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB,8BAA8B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,YAAY;AAC3B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,eAAe;AAC7B,0BAA0B,QAAQ;AAClC,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,QAAQ;AACR;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,cAAc;AAC9B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,wDAAwD,SAAS;AACjE;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,SAAS;AACpF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oBAAoB,WAAW,IAAI,QAAQ;AAC3C;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,QAAQ;AACtB;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,IAAI;AAClB;AACA,cAAc,SAAS;AACvB;AACA,eAAe,QAAQ;AACvB;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,QAAQ;AACR;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA,eAAe;AACf,kBAAkB,MAAM;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA,cAAc,KAAK;AACnB,kBAAkB,gBAAgB;AAClC;AACA,cAAc,SAAS;AACvB;AACA;AACA,cAAc,KAAK;AACnB;AACA,qCAAqC;AACrC;AACA,eAAe;AACf;AACA;AACA,wCAAwC;AACxC;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;AACV;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,kBAAkB,gBAAgB;AAClC;AACA,cAAc,SAAS;AACvB;AACA;AACA,cAAc,KAAK;AACnB;AACA,qCAAqC;AACrC;AACA,8BAA8B;AAC9B;AACA,eAAe;AACf;AACA;AACA,uCAAuC;AACvC;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,YAAY,UAAU,2BAA2B;;AAEhE,+CAA+C,cAAc;AAC7D;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,qBAAqB;;AAEzE;AACA;AACA;AACA;AACA;AACA,+CAA+C,KAAK;AACpD;AACA;AACA;AACA;;AAEA;AACA;AACA,yBAAyB;AACzB;AACA,gBAAgB;AAChB;;AAEA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,gBAAgB;AAChB;;AAEA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;;;;;;;;;;;;;;;;;AC38B6D;;AAE9C,mCAAmC,oEAAY;AAC9D;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AChFiD;;AAEjD;AACA;AACA;AACA;;AAEe,sCAAsC,8DAAM;AAC3D;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,QAAQ;AACR;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEmE;AACnE;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,6BAA6B,uEAAe;AAC3D;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,0BAA0B;AAC1B,WAAW;;AAEX;AACA;;AAEA,0BAA0B;AAC1B,UAAU,KAAK;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,sBAAsB,sBAAsB,IAAI,oBAAoB,UAAU,UAAU,IAAI,QAAQ,+BAA+B,GAAG;AACtI;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA,UAAU;AACV;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;;AAEA;AACA,mBAAmB;AACnB;AACA,cAAc;AACd,0BAA0B;AAC1B;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA,eAAe;AACf,yBAAyB,MAAM;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,IAAI;AAClB;AACA,cAAc,SAAS;AACvB;AACA,eAAe,SAAS;AACxB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,YAAY;AAC1B,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,YAAY;AAC1B,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,KAAK;AACnB,kBAAkB,gBAAgB;AAClC;AACA,cAAc,SAAS;AACvB;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,+BAA+B,gBAAgB;AAC/C;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,kBAAkB,gBAAgB;AAClC;AACA,cAAc,SAAS;AACvB;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,+BAA+B,gBAAgB;AAC/C;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACxciD;;AAEjD;AACA,0BAA0B,QAAQ;AAClC,gCAAgC,QAAQ;AACxC,yCAAyC,QAAQ;AACjD;;AAEA;AACA;AACA;AACA;;AAEe,+BAA+B,8DAAM;AACpD;AACA,cAAc,KAAK;AACnB,cAAc,eAAe;AAC7B,cAAc,QAAQ;AACtB,cAAc,KAAK;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACjDA;;AAEA;AACA;AAC6D;;AAE7D;AAC4C;;AAE5C;AACA;;AAEe,iCAAiC,kEAAiB;AACjE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qCAAqC,UAAU;AAC/C;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,QAAQ;AACtB;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,kBAAkB;AAChC,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,kBAAkB;AAChC,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,UAAU;AACxB,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,UAAU;AACxB,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,WAAW;AACzB,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,WAAW;AACzB,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,eAAe;AAC7B,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,eAAe;AAC7B,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,iBAAiB,yDAAU;AAC3B;;AAEA;AACA;AACA;AACA,cAAc,YAAY;AAC1B;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,YAAY;AAC1B,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iEAAiE,UAAU;AAC3E;AACA;AACA,gBAAgB;AAChB;AACA,UAAU;AACV,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yCAAyC,EAAE;AAC3C,iBAAiB;AACjB;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,OAAO;;AAEP;AACA;;AAEA,iCAAiC;AACjC,mCAAmC,WAAW,KAAK,IAAI;AACvD,4BAA4B,eAAe;AAC3C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACxZA,UAAU,mBAAO,CAAC,mBAAQ;;AAE1B;AACyE;;AAEpB;AACrD,sBAAsB,mBAAO,CAAC,4BAAiB;;AAEhC,uCAAuC,wEAAuB;AAC7E;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,iBAAiB,4DAAgB;AACjC;AACA;;;;;;;;;;;;;;;;;;;AC3BoC;;AAEpC;;AAEA;;AAEe,0BAA0B,kDAAS;AAClD;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,WAAW;AACxB;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA,uBAAuB,WAAW;AAClC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;;AAE1B;AACA;AACA;AACA;AACA,yBAAyB;;AAEzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB;;AAExB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,wEAAwE,EAAE;AAC1E,kDAAkD,EAAE;AACpD,wEAAwE,EAAE;AAC1E,iDAAiD,EAAE;AACnD,wEAAwE,EAAE;AAC1E,kDAAkD,EAAE;AACpD,wEAAwE,EAAE;AAC1E,kDAAkD,EAAE;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;;AAEhB;AACA;AACA;AACA,0BAA0B,QAAQ;AAClC,2BAA2B;AAC3B;AACA;AACA,4BAA4B,IAAI,EAAE,UAAU;AAC5C,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC,YAAY,GAAG,IAAI;AACnD;AACA;;;;;;;;;;;;;;;;;;;;ACnK4C;AACoB;;AAE5B;AACE;;AAEtC,iBAAiB,kDAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEe,+BAA+B,kEAAoB;AAClE;AACA;AACA;;AAEA;AACA,UAAU,kBAAkB;AAC5B;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,mCAAmC;;AAEnC;;AAEA;;AAEA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;AACA,uBAAuB,aAAa,GAAG,aAAa;AACpD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,cAAc;AACtD;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,4CAA4C;AAC5C;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,cAAc;;AAElE;AACA;;AAEA,sCAAsC;AACtC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;;AAEA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;;AAEA;;AAEA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,cAAc,OAAO;AACrB;AACA;AACA;;AAEA;AACA,mBAAmB,mDAAU;AAC7B;AACA;AACA,OAAO;;AAEP;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,gCAAgC;AAChC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gCAAgC;AAChC;AACA,wCAAwC,sDAAa;AACrD;AACA;AACA;AACA;;AAEA,mCAAmC;AACnC;;AAEA;AACA,gCAAgC,MAAM,kBAAkB,MAAM;AAC9D;;AAEA;AACA;AACA;AACA,sBAAsB,YAAY,kBAAkB,YAAY;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA,uCAAuC;;AAEvC;AACA;AACA,uCAAuC,MAAM;AAC7C;AACA;AACA,aAAa;;AAEb;;AAEA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA,qCAAqC,cAAc;;AAEnD;AACA,OAAO;;AAEP;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;;AAEA;AACA;AACA,qDAAqD,0BAA0B;AAC/E;AACA;AACA;;AAEA,iCAAiC;AACjC,sCAAsC,WAAW,KAAK,IAAI;AAC1D,4BAA4B,eAAe;AAC3C;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC/jBwD;;AAEzC,2BAA2B,8DAAgB;AAC1D;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;;AAEyC;;AAE1B,wBAAwB,sDAAY;AACnD;AACA,gBAAgB,iBAAiB;AACjC;AACA;;;;;;;;;;;;;;;;;ACb4C;;AAE7B,qBAAqB,wDAAU;AAC9C;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB,UAAU;AACV,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,gCAAgC,MAAM;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iDAAiD,EAAE;AACnD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,OAAO,IAAI,sCAAsC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,+BAA+B,gDAAgD;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,wBAAwB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,uBAAuB;AACvB,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uFAAuF,qBAAqB,EAAE;AAC9G;AACA,yBAAyB;AACzB,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;AACb,UAAU;AACV;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;ACvQ8C;;AAE/B,sBAAsB,yDAAW;AAChD;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA,oEAAoE,GAAG;AACvE,OAAO;;AAEP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA,cAAc,MAAM;AACpB;AACA;AACA,iCAAiC;AACjC,6BAA6B,WAAW,KAAK,IAAI;AACjD,4BAA4B,eAAe;AAC3C;;AAEA;AACA;AACA;;AAEA;AACA;AACA,4CAA4C,eAAe,SAAS,QAAQ;AAC5E;AACA,OAAO;AACP;;AAEA;AACA;AACA,4CAA4C,eAAe,SAAS,QAAQ;AAC5E,OAAO;AACP;AACA;;;;;;;;;;;;;;;;;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACkD;;AAEnC,wBAAwB,2DAAa;AACpD;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;AACA,sBAAsB,QAAQ;AAC9B,mBAAmB,MAAM;AACzB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,kBAAkB,eAAe;AACjC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,OAAO;AAC9E;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA,sCAAsC,OAAO;AAC7C,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC1GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEoC;;AAErB,yBAAyB,kDAAS;AACjD;AACA,gBAAgB,iBAAiB;;AAEjC;AACA;;AAEA;;AAEA;AACA;AACA,qBAAqB;AACrB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA,mCAAmC;AACnC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kDAAkD,aAAa;AAC/D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA;;AAEA;;AAEA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;AChS8C;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA,WAAW,QAAQ;AACnB;AACA,WAAW,MAAM;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEe,sBAAsB,yDAAW;AAChD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kBAAkB,QAAQ;AAC1B;AACA,uBAAuB,KAAK;AAC5B;AACA,kBAAkB,OAAO;AACzB,mBAAmB,KAAK;AACxB,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,0BAA0B,iBAAiB;AAC3C;AACA;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP;;AAEA;AACA;AACA;AACA,cAAc,cAAc;AAC5B,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,0BAA0B,qBAAqB;AAC/C;AACA;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,oDAAoD,QAAQ,sBAAsB;AAClF;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,0BAA0B,iBAAiB;AAC3C;AACA;AACA;AACA;;AAEA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,aAAa;AACb,OAAO;AACP;;AAEA;AACA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA,yCAAyC;;AAEzC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sDAAsD,cAAc;;AAEpE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA,gBAAgB;;AAEhB,6BAA6B;AAC7B;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C,cAAc;;AAE3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;;AAEA;;AAEA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA,cAAc,MAAM;AACpB;AACA,qBAAqB,QAAQ;AAC7B,yBAAyB,QAAQ;AACjC,wBAAwB,QAAQ;AAChC,yBAAyB,MAAM;AAC/B,uBAAuB,MAAM;AAC7B,qBAAqB,SAAS;AAC9B,qBAAqB,SAAS;AAC9B,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,0BAA0B,iBAAiB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,UAAU;AACV,OAAO;AACP;;AAEA;AACA;AACA;AACA,cAAc,SAAS;AACvB,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,SAAS;AACvB,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,cAAc,uBAAuB;AACrC;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,gBAAgB;AAChB;AACA;AACA;AACA,aAAa;AACb,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb,cAAc;AACd;AACA;AACA;AACA,gBAAgB;AAChB;AACA,OAAO;AACP;AACA;;;;;;;;;;;;;;;;;ACvjBA;AACA;AACA;AACA;;AAEgC;;AAEjB,2BAA2B,gDAAO;AACjD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,cAAc;AAC5B,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACpEgD;AAChD;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP,KAAK;AACL;AACA;;AAEA;AACA,IAAI;;AAEW,uBAAuB,0DAAY;AAClD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA,UAAU;AACV,OAAO;;AAEP;AACA;AACA;AACA,UAAU;;AAEV;AACA,UAAU,QAAQ,QAAQ;AAC1B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,6CAA6C,EAAE;AAC/C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,aAAa,MAAM,OAAO,GAAG;AAC7B,eAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;;AAErB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,qBAAqB;AACrB,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6BAA6B;;AAE7B;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa;;AAEb;AACA,UAAU;AACV;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;;AAEA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;;AAEA;AACA;AACA,mBAAmB;AACnB;;AAEA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,mBAAmB;AACnB,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,sBAAsB,MAAM;AAC5B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA,kDAAkD,QAAQ;AAC1D,aAAa;AACb;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA,kDAAkD,QAAQ;AAC1D,aAAa;AACb;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,cAAc,KAAK;AACnB,cAAc,KAAK;AACnB,eAAe;AACf;AACA;AACA;AACA,sBAAsB,yBAAyB;AAC/C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA,8CAA8C;AAC9C;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iCAAiC;AACjC,cAAc;AACd,iCAAiC;AACjC;AACA;AACA;AACA;AACA,8BAA8B;;AAE9B;AACA,wDAAwD;AACxD,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc,iBAAiB;AAC/B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB;AACA,UAAU;AACV,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,yCAAyC,EAAE,iBAAiB;AAC5D;AACA,2BAA2B,yCAAyC;AACpE;AACA,aAAa,GAAG;AAChB;;AAEA,4BAA4B,OAAO;AACnC,YAAY,OAAO,UAAU,OAAO;AACpC,sCAAsC,GAAG,IAAI;;AAE7C;AACA;AACA,iDAAiD,iBAAiB;;AAElE;AACA;;AAEA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,2BAA2B,yCAAyC;AACpE;AACA,aAAa;AACb;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,oEAAoE,GAAG;AACvE,OAAO;;AAEP;AACA,oEAAoE,GAAG;AACvE,OAAO;;AAEP;AACA;AACA,OAAO;;AAEP;AACA;AACA,OAAO;AACP;;AAEA,iCAAiC;AACjC,8BAA8B,WAAW,KAAK,IAAI;AAClD,4BAA4B,eAAe;AAC3C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC3wBkC;;AAElC;AACA;AACA;AACA;AACA;AACe,+BAA+B,iDAAQ;;;;;;;;;;;;;;;;;ACPpB;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACe,6BAA6B,iDAAQ;;;;;;;;;;;;;;;;;ACTpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAE0D;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,EAAE;AACF;AACA;;AAEA;AACA,IAAI;;AAEW,4BAA4B,+DAAiB;AAC5D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,sBAAsB,MAAM;AAC5B;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA,iCAAiC,UAAU,EAAE;AAC7C;AACA,0CAA0C,iBAAiB,GAAG,4BAA4B;AAC1F,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,cAAc,KAAK;AACnB,cAAc,KAAK;AACnB,eAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;;AAEA,iCAAiC,UAAU,EAAE;AAC7C;AACA,mBAAmB,MAAM,GAAG,iBAAiB;;AAE7C;AACA;AACA,0BAA0B,kBAAkB;AAC5C,WAAW;AACX,0BAA0B,yBAAyB,GAAG,kBAAkB;AACxE;;AAEA;AACA;AACA,wDAAwD,kBAAkB;AAC1E;AACA,aAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA,aAAa,eAAe;AAC5B;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,qBAAqB,kBAAkB;AACpD;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,qCAAqC,QAAQ;AAC7C;AACA,aAAa,qBAAqB,4BAA4B;AAC9D;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,qBAAqB,WAAW,+BAA+B;AAC/D;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA,aAAa,+BAA+B;AAC5C;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,OAAO;AACP;;AAEA,iCAAiC;AACjC,6BAA6B,WAAW,KAAK,IAAI;AACjD,4BAA4B,eAAe;AAC3C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACjWkD;;AAEnC,wBAAwB,2DAAa;AACpD;AACA;;AAEA;AACA,UAAU,OAAO;AACjB;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,sBAAsB;AACtB;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB,UAAU;AACV,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,sBAAsB,MAAM;AAC5B;AACA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;;AAEhB;AACA;AACA;AACA,aAAa;AACb,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,8CAA8C,EAAE;AAChD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,cAAc;AAC5B;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,YAAY;AAC1B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,YAAY;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,OAAO,IAAI,sCAAsC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA,4BAA4B,gDAAgD;AAC5E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,wBAAwB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA,oBAAoB;AACpB,UAAU;AACV;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;ACnQ4C;;AAE5C;;AAEe,qBAAqB,wDAAU;AAC9C;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,yBAAyB;AACzB;AACA,mBAAmB;AACnB;AACA;AACA,mBAAmB;AACnB,aAAa;AACb,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,gCAAgC,MAAM;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iDAAiD,EAAE;AACnD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,OAAO,IAAI,sCAAsC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,+BAA+B,gDAAgD;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,wBAAwB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,uBAAuB;AACvB,aAAa;AACb;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC9L0D;;AAE3C,4BAA4B,+DAAiB;;;;;;;;;;;;;;;;;;;ACFF;;AAE1D;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,8BAA8B;AAC7D,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB;AACA;AACA;AACA;AACA,8CAA8C,8BAA8B;AAC5E,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEe,4BAA4B,+DAAiB;AAC5D,uCAAuC;AACvC;;AAEA;;AAEA;;AAEA;;AAEA;AACA,UAAU;AACV;AACA;;AAEA;AACA,UAAU;AACV;AACA;;AAEA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,OAAO;;AAEP;AACA;AACA,+BAA+B,OAAO;AACtC,sCAAsC,OAAO;AAC7C,8BAA8B,OAAO;AACrC,OAAO;;AAEP;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB,QAAQ;AAC9B,wBAAwB,QAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA,sCAAsC,uBAAuB;AAC7D;AACA;AACA;AACA,6CAA6C;AAC7C,eAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,SAAS,EAAE,OAAO;AAClC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,0BAA0B,GAAG,6BAA6B;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,gBAAgB;AAChB,aAAa;AACb,UAAU;AACV;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA;AACA,kCAAkC,EAAE;AACpC;AACA,UAAU;;AAEV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,wCAAwC;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,WAAW;AACX;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,aAAa;AAC3B,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACr5BkD;;AAEnC,wBAAwB,2DAAa;AACpD;AACA;;AAEA;;AAEA;AACA;AACA,mCAAmC,OAAO;AAC1C,oCAAoC,OAAO;AAC3C,sCAAsC,OAAO;;AAE7C,8BAA8B,OAAO;AACrC,+BAA+B,OAAO;AACtC,8BAA8B,OAAO;AACrC,oCAAoC,OAAO;;AAE3C,oCAAoC,OAAO;AAC3C,yCAAyC,OAAO;AAChD;AACA,eAAe,OAAO;AACtB;AACA;AACA,eAAe,OAAO;AACtB;AACA,oCAAoC,OAAO;;AAE3C,wCAAwC,OAAO;;AAE/C,qCAAqC,OAAO;;AAE5C,oCAAoC,OAAO;AAC3C,OAAO;;AAEP;AACA;;AAEA,qBAAqB;;AAErB;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,sBAAsB;AACtB,mBAAmB;AACnB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA,sBAAsB;AACtB,mBAAmB;AACnB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB,sBAAsB;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB,sBAAsB;AACtB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;;AAEtB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kCAAkC;AAClC,+BAA+B;AAC/B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,4BAA4B;AAC5B;AACA,sBAAsB;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB;AACzB,sBAAsB;AACtB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,mBAAmB;AACnB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,4BAA4B,gBAAgB;AAC5C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gBAAgB;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB,MAAM;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kCAAkC,gBAAgB;AAClD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kCAAkC,iBAAiB;AACnD;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA,oBAAoB;AACpB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,4BAA4B,gBAAgB;AAC5C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,4BAA4B,iBAAiB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,eAAe,mBAAmB;AAClC;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;ACnwCkE;;AAEnD,2BAA2B,qEAAgB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA,mBAAmB,WAAW;AAC9B,8BAA8B,kCAAkC;AAChE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B;;AAE5B;AACA;;AAEA;AACA,sBAAsB;;AAEtB;AACA,gBAAgB;;AAEhB;;AAEA;AACA;;AAEA;AACA;AACA,mBAAmB;;AAEnB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA;AACA,gBAAgB;;AAEhB;AACA;AACA;AACA,uDAAuD,aAAa;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;;AAEnB,kDAAkD;AAClD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;;AAEnB,oCAAoC,aAAa,GAAG,WAAW;AAC/D;;AAEA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,MAAM;AAC7C;AACA,qDAAqD,MAAM;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,UAAU;AACV;AACA;AACA;;;;;;;;;;;;;;;;;ACjMqE;;AAEtD,2BAA2B,wEAAgB;AAC1D;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA,cAAc,MAAM;AACpB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,yDAAyD,GAAG;AAC5D,OAAO;;AAEP;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,gDAAgD,yBAAyB;AACzE;AACA;AACA;AACA;;AAEA,iCAAiC;AACjC,uBAAuB,SAAS,GAAG,UAAU,KAAK,IAAI;AACtD,4BAA4B,eAAe;AAC3C;AACA;;;;;;;;;;;;;;;;;ACxGA;AACA;AACA;AACA;AACA;AACA;AACqE;;AAEtD,4BAA4B,uEAAiB;AAC5D;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;AChJA;AACA;AACA;AACA;AACA;AACA;AACA;AACmF;;AAEpE,mCAAmC,8EAAwB;AAC1E;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;;;;;;;;;;;;;;;;;AC1GuF;;AAExE,+BAA+B,mFAAoB;AAClE;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,qDAAqD,UAAU;AAC/D;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,gBAAgB;AAC9B;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gCAAgC;AAChC,uBAAuB,kBAAkB;AACzC;AACA,OAAO,KAAK,IAAI;AAChB,4BAA4B,eAAe;AAC3C;AACA;;;;;;;;;;;;;;;;;AC5RwF;;AAEzE,yBAAyB,0FAAc;AACtD;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB,GAAG;AACrB,sBAAsB,GAAG;AACzB,yBAAyB,GAAG;AAC5B;AACA;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,0BAA0B;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe;AACf,sBAAsB,MAAM;AAC5B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,cAAc;AAC5B;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,4DAA4D,IAAI;AAChE,cAAc;AACd;AACA,OAAO;AACP;AACA;;;;;;;;;;;;;;;;;;AC3LwD;AACM;;AAE/C,qBAAqB,iEAAU;AAC9C;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,KAAK;AACpB;AACA;AACA,iBAAiB,sEAAe;AAChC;;AAEA;AACA;AACA;AACA,cAAc,MAAM;AACpB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sDAAsD;AACtD;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,yDAAyD,GAAG;AAC5D,OAAO;;AAEP;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,gDAAgD,yBAAyB;AACzE;AACA;AACA;AACA;;AAEA,iCAAiC;AACjC,uBAAuB,SAAS,GAAG,UAAU,KAAK,IAAI;AACtD,4BAA4B,eAAe;AAC3C;AACA;;;;;;;;;;;;;;;;;;ACnHuE;AACS;;AAEjE,8BAA8B,uEAAmB;AAChE;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,KAAK;AACpB;AACA;AACA,iBAAiB,+EAAwB;AACzC;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;;;;;;;;;;;;;;;;;AC/ByE;AACzE;;AAEe,+BAA+B,wEAAoB;AAClE;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACpBqE;AACrE;;AAEA;AACA;;AAEe,6BAA6B,sEAAkB;AAC9D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;ACnD6D;;AAE7D,oCAAoC,kEAAc;;AAEnC,yBAAyB,kEAAc;AACtD;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,KAAK;AACpB;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;;;;;;;;;;;;;;;;;AC/DiE;;AAEjE,oCAAoC,oEAAgB;;AAErC,2BAA2B,oEAAgB;AAC1D;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,KAAK;AACnB,eAAe,KAAK;AACpB;AACA;AACA;;AAEA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;;AAEe;AACf;AACA,mCAAmC,YAAY;;AAE/C;AACA;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;AACA,uBAAuB,cAAc;AACrC,uBAAuB,QAAQ;AAC/B,uBAAuB,IAAI;AAC3B;;AAEA;AACA,UAAU;AACV;;AAEA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA,4BAA4B,cAAc;AAC1C,4BAA4B,QAAQ;AACpC,6BAA6B,IAAI;AACjC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC3JgD;;AAEjC,uCAAuC,wDAAe;AACrE;AACA,mDAAmD,YAAY;;AAE/D;;AAEA;AACA,uBAAuB,eAAe;AACtC;AACA,UAAU;AACV;;AAEA;AACA,uBAAuB,eAAe;AACtC;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,+CAA+C;AAC/C;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2DAA2D,YAAY;;AAEvE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW;AACX;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,4BAA4B,eAAe;AAC3C;AACA;AACA;AACA;AACA,gBAAgB;;AAEhB;AACA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B,QAAQ,GAAG,OAAO;;AAE7C;;AAEA;AACA;AACA,4BAA4B,0BAA0B,6BAA6B,oCAAoC;AACvH;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACzLqB;AACsB;;AAE3C;AACA;AACA,aAAa,mBAAO,CAAC,sCAA2B;AAChD,YAAY,mBAAO,CAAC,0BAAe;AACnC;;AAEA;AAC+B;;AAE/B;AAC0B;AACD;;AAEzB;AACiC;AACjC;AAC+B;;AAE/B;AACsC;;AAEtC;AACwC;;AAExC;;AAEA,cAAc,yDAAU;AACxB;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA,cAAc,6DAAG,CAAC,6DAAE;AACpB;AACA,UAAU,qDAAK,CAAC,6DAAE;AAClB;AACA,WAAW,sDAAM,CAAC,6DAAE;AACpB;;AAEA;AACA;AACA,MAAM,MAAqC;AAC3C,WAAW,CAEC;AACZ,aAAa;AACb,CAAC;;;;;;;;;;;;;ACpDD;AACA,gBAAgB,KAAoD,oBAAoB,CAAgE,CAAC,mBAAmB,aAAa,cAAc,2BAA2B,8CAA8C,2DAA2D,uCAAuC,0CAA0C,sDAAsD,gIAAgI,uIAAuI,aAAa,iBAAiB,kBAAkB,eAAe,qBAAqB,aAAa,YAAY,IAAI,MAAM,2CAA2C,IAAI,qBAAqB,gBAAgB,qCAAqC,oBAAoB,eAAe,MAAM,qBAAqB,cAAc,0BAA0B,GAAG,gBAAgB,SAAS,cAAc,wDAAwD,kBAAkB,gBAAgB,eAAe,2BAA2B,8DAA8D,iBAAiB,eAAe,eAAe,2DAA2D,8BAA8B,4BAA4B,UAAc,aAAa,IAAI,iDAAiD,2DAA2D,KAAK,KAAK,SAAS,YAAY,QAAQ,8CAA8C,cAAc,wBAAwB,YAAY,cAAc,IAAI,cAAc,SAAS,oBAAoB,kBAAkB,+EAA+E,gFAAgF,cAAc,eAAe,cAAc,GAAG,iFAAiF,eAAe,8BAA8B,IAAI,cAAc,SAAS,UAAU,mBAAmB,8BAA8B,eAAe,iBAAiB,YAAY,qBAAqB,KAAK,gBAAgB,gBAAgB,QAAQ,+IAA+I,cAAc,uCAAuC,gBAAgB,yEAAyE,gBAAgB,8CAA8C,oBAAoB,gCAAgC,iEAAiE,cAAc,gCAAgC,iBAAiB,0CAA0C,WAAW,uCAAuC,yBAAyB,oBAAoB,+CAA+C,MAAM,qBAAqB,IAAI,YAAY,SAAS,oBAAoB,4IAA4I,cAAc,gEAAgE,QAAQ,cAAc,4DAA4D,kBAAkB,gBAAgB,gYAAgY,0CAA0C,YAAY,4BAA4B,4BAA4B,sCAAsC,4CAA4C,UAAU,WAAW,6DAA6D,iEAAiE,eAAe,eAAe,iCAAiC,0CAA0C,YAAY,KAAK,gCAAgC,wCAAwC,mBAAmB,wGAAwG,yCAAyC,WAAW,wBAAwB,2BAA2B,eAAe,2BAA2B,GAAG,GAAG,IAAI,kBAAkB,cAAc,2GAA2G,0GAA0G,qCAAqC,IAAI,eAAe,OAAO,eAAe,OAAO,GAAG,SAAS,QAAQ,sBAAsB,6IAA6I,KAAK,qCAAqC,yBAAyB,iCAAiC,uBAAuB,8BAA8B,uCAAuC,SAAS,GAAG,eAAe,uCAAuC,QAAQ,GAAG,GAAG,GAAG,IAAI,4CAA4C,6BAA6B,oBAAoB,WAAW,gCAAgC,uBAAuB,IAAI,8BAA8B,sBAAsB,2DAA2D,EAAE,kCAAkC,kBAAkB,gBAAgB,6BAA6B,IAAI,wBAAwB,IAAI,iCAAiC,aAAa,uBAAuB,qBAAM,GAAG,qBAAM,CAAC,wCAAwC,SAAS,4BAA4B,SAAS,4FAA4F,gBAAgB,MAAM,WAAW,IAAI,8CAA8C,UAAU,0CAA0C,YAAY,eAAe,kBAAkB,KAAqC,CAAC,iCAAO,EAAE,mCAAE,WAAW,YAAY;AAAA,kGAAE,CAAC,CAA+D,CAAC,sBAAsB,qBAAM,CAAC,qBAAM,qDAAqD,aAAa,SAAS,gDAAgD,UAAU,mDAAmD,qDAAqD,cAAc,YAAY,eAAe,2HAA2H,KAAK,mBAAmB,KAAK,gBAAgB,SAAS,eAAe,qDAAqD,6CAA6C,uEAAuE,MAAM,uDAAuD,uBAAuB,IAAI,6BAA6B,SAAS,iBAAiB,OAAO,cAAc,QAAQ,oEAAoE,GAAG,qJAAqJ,wDAAwD,GAAG,wCAAwC,EAAE,+DAA+D,wFAAwF,uIAAuI,SAAS,+FAA+F,mBAAmB,UAAU,EAAE,2BAA2B,UAAU,IAAI,qBAAqB,oIAAoI,kBAAkB,QAAQ;;;;;;;;;;;;;;;ACD1jQ,iEAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,OAAO;AACP,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,IAAI;AACJ;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,qBAAqB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,qBAAqB,4CAA4C;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,oCAAoC;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL,IAAI;AACJ;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,qBAAqB,oCAAoC;AACzD,IAAI;AACJ;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,qBAAqB,qCAAqC;AAC1D,IAAI;AACJ;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,qBAAqB,mCAAmC;AACxD,IAAI;AACJ;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,qBAAqB,qCAAqC;AAC1D,IAAI;AACJ;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,mCAAmC;AAC7C;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,UAAU,qCAAqC;AAC/C;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL,qBAAqB,sCAAsC;AAC3D,IAAI;AACJ;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,qBAAqB,wCAAwC;AAC7D,IAAI;AACJ;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,qBAAqB,sCAAsC;AAC3D,IAAI;AACJ;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,qBAAqB,sCAAsC;AAC3D,IAAI;AACJ;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,qBAAqB,mCAAmC;AACxD,IAAI;AACJ;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,wBAAwB;AAClD;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,qBAAqB,sCAAsC;AAC3D,IAAI;AACJ;AACA;AACA,GAAG;AACH;AACA,0BAA0B;AAC1B;AACA,CAAC,EAAC;;;;;;;;;;;;;;;;;AClbF;AACA,YAAY,eAAe;AACiC;;AAE5D,sBAAsB,sEAAY;AAClC;AACA;;AAEA;AACA;;AAEA;AACA,UAAU;AACV;;AAEA;AACA,UAAU;AACV;;AAEA;AACA,UAAU;AACV;AACA;;AAEA;AACA,UAAU,WAAW;;AAErB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,0CAA0C;AAC9D,UAAU;AACV;AACA;AACA,uBAAuB;AACvB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,iEAAe,aAAa,EAAC;;;;;;;;;;;;;;;;;;AC3H7B;AACA;;AAEA;AACsC;;AAEtC;AACA;AACA,OAAO,MAAM;AACb;AACA;;AAEA;AACA,OAAO,MAAM;AACb;AACA;;AAEA;AACA,OAAO,QAAQ;AACf;;AAEA;AACA,OAAO,QAAQ;AACf;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,aAAa,MAAM;AACnB,OAAO;AACP,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,UAAU,KAAK;AACf;AACA;;AAEA;AACA,UAAU,KAAK;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM,oDAAY;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;;AAEA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf,iBAAiB,mBAAmB,iBAAiB;AACrD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iEAAe,YAAY,EAAC;;;;;;;;;;;;;;;;;AC/L5B;AACA;AACA;AACA;;AAEuD;;AAEvD,2BAA2B,sEAAO;AAClC;AACA,kBAAkB;AAClB;AACA;AACA,eAAe;;AAEf;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,UAAU,WAAW;;AAErB;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,uCAAuC,EAAE;AACzC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,EAAE,GAAG;AAC1B;AACA,OAAO;AACP,0CAA0C;AAC1C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE,GAAG;AAC1B;AACA,OAAO;AACP;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,4BAA4B,kBAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,qCAAqC;AACzD,UAAU;AACV;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,OAAO;;AAEP,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,kBAAkB,EAAC;;;;;;;;;;;;;;;;;;;ACnMlC;AACA;AACA;AACA;AAC4D;AACpB;AACY;AACpD;;AAEA,sBAAsB,sEAAY;AAClC;AACA;;AAEA;AACA;;AAEA;AACA,UAAU,MAAM;AAChB;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA,UAAU,KAAK;AACf;AACA;AACA;;AAEA;AACA,UAAU,WAAW;;AAErB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mCAAmC,0DAAiB;AACpD;;AAEA;AACA;AACA,mCAAmC,oDAAW;AAC9C;AACA;;AAEA;AACA,QAAQ;AACR;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,QAAQ;AACR;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA,cAAc,KAAK;AACnB;AACA;AACA,iCAAiC;AACjC;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA,cAAc,KAAK;AACnB;AACA;AACA,iCAAiC;AACjC;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA,cAAc,KAAK;AACnB;AACA;AACA,iCAAiC;AACjC;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA,cAAc,KAAK;AACnB;AACA;AACA,iCAAiC;AACjC;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA,QAAQ;AACR;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,KAAK;AACnB,cAAc,KAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,gBAAgB,KAAK;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,4BAA4B,mBAAmB;AAC/C;AACA,0BAA0B,cAAc;AACxC;AACA,oBAAoB;AACpB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,gBAAgB;AAChB;AACA;;AAEA;AACA,aAAa;AACb,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA,mBAAmB;AACnB,gBAAgB;AAChB,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb,OAAO;AACP;;AAEA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,aAAa,EAAC;;;;;;;;;;;;;;;;;AC7d7B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAC4D;AAC5D;;AAEA,YAAY,UAAU;AACtB;AACA,YAAY,eAAe;;AAE3B;;AAEA;AACA;AACA;AACA;;AAEA;AACA,MAAM;AACN;;AAEA,0BAA0B,sEAAY;AACtC;AACA,UAAU,SAAS;;AAEnB;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA,UAAU,QAAQ;AAClB;;AAEA;AACA,UAAU,KAAK;AACf;;AAEA;AACA,UAAU,SAAS;AACnB;AACA;;AAEA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA,cAAc,KAAK;AACnB;AACA;AACA,iCAAiC;AACjC;AACA,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA,cAAc,KAAK;AACnB;AACA;AACA,iCAAiC;AACjC;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA,cAAc,KAAK;AACnB;AACA;AACA,iCAAiC;AACjC;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA,cAAc,KAAK;AACnB;AACA;AACA,iCAAiC;AACjC;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,aAAa,MAAM;AACnB;AACA,aAAa,OAAO,EAAE;AACtB,4CAA4C,sBAAsB;AAClE;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,KAAK;AACnB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,gBAAgB,QAAQ,WAAW;AACpE;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,mCAAmC;AACnC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,mCAAmC;AACnC,mCAAmC;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA,yBAAyB;;AAEzB;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA,uBAAuB;AACvB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,2BAA2B,YAAY,EAAE,8BAA8B;AACvE;AACA,0BAA0B,EAAE,WAAW;AACvC;AACA;AACA;AACA;AACA,oCAAoC,eAAe,EAAE,WAAW;AAChE;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,kBAAkB;AAC9C,gBAAgB;AAChB;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,KAAK;AACnB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,WAAW,EAAC;;;;;;;;;;;;;;;;;AC9X3B;AACA;AACA;AACA;AACA;;AAEwC;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA,gCAAgC,oDAAW;AAC3C;AACA,UAAU,SAAS;;AAEnB;;AAEA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,OAAO,IAAI,GAAG;AACrD;AACA;AACA;AACA;AACA,8BAA8B,OAAO,IAAI,GAAG;AAC5C;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,gBAAgB,MAAM;AACtB;AACA,gBAAgB,MAAM;AACtB;AACA,mBAAmB,MAAM;AACzB,mBAAmB,MAAM;AACzB,mBAAmB,MAAM;;AAEzB;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,oDAAoD,OAAO;AAC3D;AACA;AACA;;AAEA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP;AACA;;AAEA,iEAAe,iBAAiB,EAAC;;;;;;;;;;;;;;;;;;AC7I2B;;AAEf;;AAE7C,sBAAsB,sEAAY;AAClC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,UAAU,WAAW;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,wDAAY;AACxC,WAAW;AACX,4BAA4B,wDAAY;AACxC;;AAEA;AACA,QAAQ;AACR;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,iEAAe,aAAa,EAAC;;;;;;;;;;;;;;;;;ACpD7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAE4D;;AAE5D,2BAA2B,sEAAY;AACvC;AACA;;AAEA;AACA,UAAU,eAAe;AACzB;AACA;AACA;AACA;;AAEA;AACA,UAAU,WAAW;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0DAA0D;AAC1D;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,oCAAoC;AACpC;AACA;AACA;AACA,OAAO;AACP;;AAEA,4BAA4B;AAC5B;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA,iEAAe,kBAAkB,EAAC;;;;;;;;;;;;;;;;;;AC7E0B;AAC3B;;AAEjC,qBAAqB,sEAAY;AACjC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,kDAAM;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,kDAAM;AACtB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,YAAY,EAAC;;;;;;;;;;;;;;;;;;;;ACrDmB;AACH;AACA;AACA;;AAE5C,iEAAe;AACf,6CAA6C;;AAE7C;;AAEA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA,oBAAoB,8DAAQ;AAC5B,OAAO;AACP;AACA;AACA,oBAAoB,8DAAQ;AAC5B,OAAO;AACP;AACA;AACA,oBAAoB,8DAAQ;AAC5B,OAAO;AACP;AACA;AACA,oBAAoB,6DAAY;AAChC,OAAO;AACP;;AAEA;;AAEA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA,iBAAiB,6DAAY;AAC7B,IAAI;;AAEJ;AACA,CAAC,EAAC;;;;;;;;;;;AC/CF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,EAAE,KAAuD;AACzD;AACA,MAAM,CAIY;AAClB,CAAC;AACD;AACA;AACA;AACA,wBAAwB,WAAW,qBAAqB;AACxD;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA,8GAA8G,IAAI,GAAG,IAAI,SAAS,IAAI;AACtI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA,4CAA4C,UAAU,KAAK;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,WAAW;AACX;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,GAAG;AACpC,gCAAgC,SAAS;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,sBAAsB;AAChD;AACA,OAAO;AACP;AACA;AACA,SAAS;AACT;AACA;AACA,mBAAmB;AACnB;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,cAAc;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,OAAO;AAC/C;AACA,wCAAwC,OAAO;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,KAAK;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,KAAK;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA,6BAA6B,cAAc;AAC3C;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,OAAO;AACjD;AACA;AACA,SAAS;AACT;AACA;AACA,oDAAoD;AACpD;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,0CAA0C,OAAO;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,qDAAqD,cAAc;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,cAAc;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,SAAS;AACT;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,gBAAgB,+BAA+B,cAAc;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,cAAc;AAChD;AACA;AACA,iBAAiB;AACjB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gDAAgD,OAAO;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE;AACtE,yEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,6BAA6B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,iBAAiB;AACzD;AACA;AACA;AACA;AACA,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,UAAU;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,OAAO;AAC/D;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,WAAW;AACX;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,kDAAkD,OAAO;AACzD;AACA;AACA,WAAW;AACX,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,iCAAiC,sCAAsC;AACvE;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,eAAe;AACf;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA,kBAAkB;AAClB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,qBAAqB;AACrB;AACA;AACA,cAAc;AACd;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,aAAa;AACnC;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,YAAY;AACZ,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,kDAAkD,eAAe;AACjE;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,cAAc;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,YAAY;AAC1C,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,gBAAgB,qCAAqC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,YAAY;AACzD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA,WAAW;AACX;AACA;AACA,6BAA6B,iBAAiB;AAC9C;AACA,4DAA4D;AAC5D,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,wDAAwD,OAAO;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,cAAc;AAC3E;AACA,qBAAqB;AACrB;AACA;AACA,iBAAiB;AACjB;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA,oCAAoC,kBAAkB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,kCAAkC,cAAc;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,wDAAwD,OAAO;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,SAAS;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,mBAAmB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,WAAW;AACX;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,OAAO;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA,0BAA0B,cAAc;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,cAAc;AACxC;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,yBAAyB,yCAAyC,OAAO;AACzE;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,cAAc;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,iBAAiB;AACjB;AACA,WAAW;AACX,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,eAAe;AACf;AACA;AACA,eAAe;AACf;AACA;AACA,eAAe;AACf,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iDAAiD,OAAO;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,iBAAiB;AACjB,eAAe;AACf,WAAW;AACX;AACA;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL,qBAAqB;AACrB;AACA;AACA;AACA;AACA,wBAAwB,cAAc;AACtC;AACA;AACA,KAAK;AACL;AACA;AACA,yBAAyB;AACzB,8CAA8C,EAAE;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kBAAkB;AAClB;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,2BAA2B;AACzD,cAAc,mBAAmB,iBAAiB;AAClD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,6BAA6B;AAC9E;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,sBAAsB,+BAA+B;AACrD;AACA,+CAA+C,4BAA4B;AAC3E;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,4BAA4B,sBAAsB;AAClD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,4BAA4B,oBAAoB;AAChD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,0CAA0C;AAC1C;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA,6BAA6B,cAAc;AAC3C;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,UAAU,KAA0B;AACpC;AACA,QAAQ;AACR;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,4HAA4H,iBAAiB,gBAAgB;AAC9N;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,UAAU;AACvB,eAAe,eAAe;AAC9B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mIAAmI;AACnI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,cAAc;AAC9B;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,UAAU;AAC1B,gBAAgB,UAAU;AAC1B,gBAAgB;AAChB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,aAAa;AAC7B,gBAAgB,QAAQ;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,wFAAwF;AACxF;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF,oBAAoB;AACtG;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,QAAQ;AACxB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,UAAU;AAC1B,gBAAgB,UAAU;AAC1B,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,UAAU;AAC1B,gBAAgB,UAAU;AAC1B,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,UAAU;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,UAAU;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,UAAU;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,UAAU;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,UAAU;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB,gBAAgB,QAAQ;AACxB,gBAAgB,QAAQ;AACxB,gBAAgB,UAAU;AAC1B,gBAAgB,QAAQ;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,kCAAkC;AACpE;AACA,mCAAmC,qCAAqC;AACxE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,kDAAkD;;AAElD;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,UAAU;AAC1B,gBAAgB,UAAU;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB,gBAAgB,QAAQ;AACxB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK,MAAM;;AAEX;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,IAA0C;AACrD,IAAI,iCAAO,EAAE,mCAAE;AACf;AACA,KAAK;AAAA,kGAAC;AACN,IAAI,KAAK,EAQN;AACH,CAAC;;AAED;;;;;;;;;;;;;;;;;ACnkKyC;;AAEzC,iEAAe;AACf;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,cAAc;AAC/B;AACA,OAAO;AACP;AACA,qDAAqD,OAAO;AAC5D;AACA,aAAa;AACb,qDAAqD,OAAO;AAC5D;AACA,aAAa;AACb,gBAAgB,OAAO;AACvB;AACA,UAAU;AACV,mBAAmB,OAAO;AAC1B;AACA,UAAU;AACV,OAAO;AACP;AACA,6BAA6B,OAAO;AACpC;AACA;AACA;AACA,UAAU;AACV,mBAAmB,OAAO;AAC1B;AACA,UAAU;AACV,wBAAwB,OAAO;AAC/B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,sBAAsB,OAAO;AAC7B;AACA,UAAU;AACV,OAAO;AACP;;AAEA;AACA;AACA,+CAA+C,OAAO;AACtD;AACA;AACA,IAAI;;AAEJ,iBAAiB,sDAAW;;AAE5B;AACA,CAAC,EAAC","sources":["webpack://appbuilder-pwa/./src/js/views/form.f7.jsx","webpack://appbuilder-pwa/./src/js/views/formButton.f7.jsx","webpack://appbuilder-pwa/./src/js/views/formCheckbox.f7.jsx","webpack://appbuilder-pwa/./src/js/views/formConnect.f7.jsx","webpack://appbuilder-pwa/./src/js/views/formCustom.f7.jsx","webpack://appbuilder-pwa/./src/js/views/formDatepicker.f7.jsx","webpack://appbuilder-pwa/./src/js/views/formItem.f7.jsx","webpack://appbuilder-pwa/./src/js/views/formJSON.f7.jsx","webpack://appbuilder-pwa/./src/js/views/formNumber.f7.jsx","webpack://appbuilder-pwa/./src/js/views/formReadonly.f7.jsx","webpack://appbuilder-pwa/./src/js/views/formSelectMultiple.f7.jsx","webpack://appbuilder-pwa/./src/js/views/formSelectSingle.f7.jsx","webpack://appbuilder-pwa/./src/js/views/formTextbox.f7.jsx","webpack://appbuilder-pwa/./src/js/views/formTree.f7.jsx","webpack://appbuilder-pwa/./src/js/views/list.f7.jsx","webpack://appbuilder-pwa/./src/pages/404.f7.jsx","webpack://appbuilder-pwa/./src/pages/app.f7.jsx","webpack://appbuilder-pwa/./src/pages/form.f7.jsx","webpack://appbuilder-pwa/./src/pages/home.f7.jsx","webpack://appbuilder-pwa/./src/pages/list.f7.jsx","webpack://appbuilder-pwa/./src/css/app.less","webpack://appbuilder-pwa/./src/css/icons.css","webpack://appbuilder-pwa/./node_modules/moment/locale/ sync ^\\.\\/.*$","webpack://appbuilder-pwa/./src/css/app.less?9b45","webpack://appbuilder-pwa/./src/css/icons.css?ff86","webpack://appbuilder-pwa/./src/js/AppBuilder/ABFactory.js","webpack://appbuilder-pwa/./src/js/AppBuilder/core/ABApplicationCore.js","webpack://appbuilder-pwa/./src/js/AppBuilder/core/ABApplicationMobileCore.js","webpack://appbuilder-pwa/./src/js/AppBuilder/core/ABDataCollectionCore.js","webpack://appbuilder-pwa/./src/js/AppBuilder/core/ABDefinitionCore.js","webpack://appbuilder-pwa/./src/js/AppBuilder/core/ABFactoryCore.js","webpack://appbuilder-pwa/./src/js/AppBuilder/core/ABFieldManager.js","webpack://appbuilder-pwa/./src/js/AppBuilder/core/ABHintCore.js","webpack://appbuilder-pwa/./src/js/AppBuilder/core/ABIndexCore.js","webpack://appbuilder-pwa/./src/js/AppBuilder/core/ABMLClassCore.js","webpack://appbuilder-pwa/./src/js/AppBuilder/core/ABModelCore.js","webpack://appbuilder-pwa/./src/js/AppBuilder/core/ABObjectCore.js","webpack://appbuilder-pwa/./src/js/AppBuilder/core/ABObjectQueryCore.js","webpack://appbuilder-pwa/./src/js/AppBuilder/core/ABProcessCore.js","webpack://appbuilder-pwa/./src/js/AppBuilder/core/ABStepCore.js","webpack://appbuilder-pwa/./src/js/AppBuilder/core/ABViewManagerCore.js","webpack://appbuilder-pwa/./src/js/AppBuilder/core/FilterComplexCore.js","webpack://appbuilder-pwa/./src/js/AppBuilder/core/RowFilterCore.js","webpack://appbuilder-pwa/./src/js/AppBuilder/core/mobile/ABMobilePageCore.js","webpack://appbuilder-pwa/./src/js/AppBuilder/core/mobile/ABMobileViewCore.js","webpack://appbuilder-pwa/./src/js/AppBuilder/core/process/ABProcessLaneCore.js","webpack://appbuilder-pwa/./src/js/AppBuilder/core/process/ABProcessParticipantCore.js","webpack://appbuilder-pwa/./src/js/AppBuilder/core/process/ABProcessTaskManager.js","webpack://appbuilder-pwa/./src/js/AppBuilder/core/process/tasks/ABProcessElementCore.js","webpack://appbuilder-pwa/./src/js/AppBuilder/core/process/tasks/ABProcessTaskSubProcessCore.js","webpack://appbuilder-pwa/./src/js/AppBuilder/core/views/ABViewContainerCore.js","webpack://appbuilder-pwa/./src/js/AppBuilder/core/views/ABViewCore.js","webpack://appbuilder-pwa/./src/js/AppBuilder/core/views/ABViewDetailItemCore.js","webpack://appbuilder-pwa/./src/js/AppBuilder/core/views/ABViewFormItemCore.js","webpack://appbuilder-pwa/./src/js/AppBuilder/core/views/ABViewPageCore.js","webpack://appbuilder-pwa/./src/js/AppBuilder/core/views/ABViewWidgetCore.js","webpack://appbuilder-pwa/./src/js/AppBuilder/platform/ABApplication.js","webpack://appbuilder-pwa/./src/js/AppBuilder/platform/ABApplicationMobile.js","webpack://appbuilder-pwa/./src/js/AppBuilder/platform/ABComponent.js","webpack://appbuilder-pwa/./src/js/AppBuilder/platform/ABDataCollection.js","webpack://appbuilder-pwa/./src/js/AppBuilder/platform/ABDefinition.js","webpack://appbuilder-pwa/./src/js/AppBuilder/platform/ABEmitter.js","webpack://appbuilder-pwa/./src/js/AppBuilder/platform/ABHint.js","webpack://appbuilder-pwa/./src/js/AppBuilder/platform/ABIndex.js","webpack://appbuilder-pwa/./src/js/AppBuilder/platform/ABMLClass.js","webpack://appbuilder-pwa/./src/js/AppBuilder/platform/ABMobileDC.js","webpack://appbuilder-pwa/./src/js/AppBuilder/platform/ABModel.js","webpack://appbuilder-pwa/./src/js/AppBuilder/platform/ABModelQuery.js","webpack://appbuilder-pwa/./src/js/AppBuilder/platform/ABObject.js","webpack://appbuilder-pwa/./src/js/AppBuilder/platform/ABObjectExternal.js","webpack://appbuilder-pwa/./src/js/AppBuilder/platform/ABObjectImport.js","webpack://appbuilder-pwa/./src/js/AppBuilder/platform/ABObjectQuery.js","webpack://appbuilder-pwa/./src/js/AppBuilder/platform/ABProcess.js","webpack://appbuilder-pwa/./src/js/AppBuilder/platform/ABStep.js","webpack://appbuilder-pwa/./src/js/AppBuilder/platform/ABViewManager.js","webpack://appbuilder-pwa/./src/js/AppBuilder/platform/FilterComplex.js","webpack://appbuilder-pwa/./src/js/AppBuilder/platform/RowFilter.js","webpack://appbuilder-pwa/./src/js/AppBuilder/platform/mobile/ABMobilePage.js","webpack://appbuilder-pwa/./src/js/AppBuilder/platform/mobile/ABMobileView.js","webpack://appbuilder-pwa/./src/js/AppBuilder/platform/process/ABProcessLane.js","webpack://appbuilder-pwa/./src/js/AppBuilder/platform/process/ABProcessParticipant.js","webpack://appbuilder-pwa/./src/js/AppBuilder/platform/process/tasks/ABProcessElement.js","webpack://appbuilder-pwa/./src/js/AppBuilder/platform/process/tasks/ABProcessTaskSubProcess.js","webpack://appbuilder-pwa/./src/js/AppBuilder/platform/views/ABView.js","webpack://appbuilder-pwa/./src/js/AppBuilder/platform/views/ABViewContainer.js","webpack://appbuilder-pwa/./src/js/AppBuilder/platform/views/ABViewDetailItem.js","webpack://appbuilder-pwa/./src/js/AppBuilder/platform/views/ABViewFormItem.js","webpack://appbuilder-pwa/./src/js/AppBuilder/platform/views/ABViewPage.js","webpack://appbuilder-pwa/./src/js/AppBuilder/platform/views/ABViewWidget.js","webpack://appbuilder-pwa/./src/js/AppBuilder/platform/views/viewComponent/ABViewComponent.js","webpack://appbuilder-pwa/./src/js/AppBuilder/platform/views/viewComponent/ABViewContainerComponent.js","webpack://appbuilder-pwa/./src/js/app.js","webpack://appbuilder-pwa/./src/js/atomic.polyfills.min.js","webpack://appbuilder-pwa/./src/js/definitions.js","webpack://appbuilder-pwa/./src/js/resources/Account.js","webpack://appbuilder-pwa/./src/js/resources/Config.js","webpack://appbuilder-pwa/./src/js/resources/Multilingual.js","webpack://appbuilder-pwa/./src/js/resources/Network.js","webpack://appbuilder-pwa/./src/js/resources/NetworkRest.js","webpack://appbuilder-pwa/./src/js/resources/NetworkRestSocket.js","webpack://appbuilder-pwa/./src/js/resources/Storage.js","webpack://appbuilder-pwa/./src/js/resources/StorageLocal.js","webpack://appbuilder-pwa/./src/js/resources/Tenant.js","webpack://appbuilder-pwa/./src/js/routes.js","webpack://appbuilder-pwa/./src/js/sails.io.js","webpack://appbuilder-pwa/./src/js/store.js"],"sourcesContent":["/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nimport FormButton from \"./formButton.f7.jsx\";\nimport FormCheckbox from \"./formCheckbox.f7.jsx\";\nimport FormConnect from \"./formConnect.f7.jsx\";\nimport FormCustom from \"./formCustom.f7.jsx\";\nimport FormDatepicker from \"./formDatepicker.f7.jsx\";\nimport FormJSON from \"./formJSON.f7.jsx\";\nimport FormNumber from \"./formNumber.f7.jsx\";\nimport FormReadonly from \"./formReadonly.f7.jsx\";\nimport FormSelectMultiple from \"./formSelectMultiple.f7.jsx\";\nimport FormSelectSingle from \"./formSelectSingle.f7.jsx\";\nimport FormTextbox from \"./formTextbox.f7.jsx\";\nimport FormTree from \"./formTree.f7.jsx\";\n\nexport default class F7ViewForm {\n   #AB;\n   #settings;\n   constructor(AB, settings) {\n      this.#AB = AB;\n      this.#settings = settings;\n\n      this.record = null;\n      this.isLoading = false;\n\n      const definitions = this.datacollection.datasource\n         .fields()\n         .map((f) => ({\n            id: f.id,\n            key: f.formComponent().common().key,\n            field: f.columnName,\n            fieldType: f.key,\n            label: f.label,\n            // placeholder: f.placeholder,\n            settings: f.settings,\n         }))\n         .concat({\n            id: \"saveButton\",\n            key: \"button\",\n            field: null,\n            fieldType: null,\n            label: \"Save\",\n            // placeholder: null,\n         });\n\n      this.views = definitions.map((definition) => {\n         if (definition.settings) definition.settings.required = 1;\n\n         switch (definition.key) {\n            case \"button\":\n               return new FormButton(AB, this, definition);\n\n            case \"checkbox\":\n               return new FormCheckbox(AB, this, definition);\n\n            case \"connect\":\n               return new FormConnect(AB, this, definition);\n\n            case \"fieldcustom\":\n               return new FormCustom(AB, this, definition);\n\n            case \"datepicker\":\n               return new FormDatepicker(AB, this, definition);\n\n            case \"json\":\n               return new FormJSON(AB, this, definition);\n\n            case \"numberbox\":\n               return new FormNumber(AB, this, definition);\n\n            case \"fieldreadonly\":\n               return new FormReadonly(AB, this, definition);\n\n            case \"selectmultiple\":\n               return new FormSelectMultiple(AB, this, definition);\n\n            case \"selectsingle\":\n               return new FormSelectSingle(AB, this, definition);\n\n            case \"formtree\":\n               return new FormTree(AB, this, definition);\n\n            default:\n               return new FormTextbox(AB, this, definition);\n         }\n      });\n   }\n\n   get id() {\n      return this.#settings.id;\n   }\n\n   get datacollection() {\n      return this.#AB.datacollectionByID(this.#settings.dcID);\n   }\n\n   /**\n    * @method getFormValues\n    *\n    * @param {webix form} formView\n    * @param {ABObject} obj\n    * @param {ABDatacollection} dc\n    * @param {ABDatacollection} dcLink [optional]\n    */\n   /*   getFormValues(formView, obj, dc, dcLink) {\n      // get the fields that are on this form\n      const visibleFields = [\"id\"]; // we always want the id so we can udpate records\n      formView.getValues(function (obj) {\n         visibleFields.push(obj.config.name);\n      });\n\n      // only get data passed from form\n      const allVals = formView.getValues();\n      const formVals = {};\n      visibleFields.forEach((val) => {\n         formVals[val] = allVals[val];\n      });\n\n      // get custom values\n      this.fieldComponents(\n         (comp) =>\n            comp instanceof ABViewFormCustom ||\n            comp instanceof ABViewFormConnect ||\n            comp instanceof ABViewFormDatepicker ||\n            comp instanceof ABViewFormSelectMultiple ||\n            (comp instanceof ABViewFormJson && comp.settings.type == \"filter\")\n      ).forEach((f) => {\n         const vComponent = this.viewComponents[f.id];\n         if (vComponent == null) return;\n\n         const field = f.field();\n         if (field) {\n            const getValue = vComponent.getValue ?? vComponent.logic.getValue;\n            if (getValue)\n               formVals[field.columnName] = getValue.call(vComponent, formVals);\n         }\n      });\n\n      // remove connected fields if they were not on the form and they are present in the formVals because it is a datacollection\n      obj.connectFields().forEach((f) => {\n         if (\n            visibleFields.indexOf(f.columnName) == -1 &&\n            formVals[f.columnName]\n         ) {\n            delete formVals[f.columnName];\n            delete formVals[f.relationName()];\n         }\n      });\n\n      // clear undefined values or empty arrays\n      for (const prop in formVals) {\n         if (formVals[prop] == null || formVals[prop].length == 0)\n            formVals[prop] = \"\";\n      }\n\n      // Add parent's data collection cursor when a connect field does not show\n      let linkValues;\n\n      if (dcLink) {\n         linkValues = dcLink.getCursor();\n      }\n\n      if (linkValues) {\n         const objectLink = dcLink.datasource;\n\n         const connectFields = obj.connectFields();\n         connectFields.forEach((f) => {\n            const formFieldCom = this.fieldComponents(\n               (fComp) => fComp?.field?.()?.id === f?.id\n            );\n\n            if (\n               objectLink.id == f.settings.linkObject &&\n               formFieldCom.length < 1 && // check field does not show\n               formVals[f.columnName] === undefined\n            ) {\n               const linkColName = f.indexField\n                  ? f.indexField.columnName\n                  : objectLink.PK();\n\n               formVals[f.columnName] = {};\n               formVals[f.columnName][linkColName] =\n                  linkValues[linkColName] ?? linkValues.id;\n            }\n         });\n      }\n\n      // NOTE: need to pull data of current cursor to calculate Calculate & Formula fields\n      // .formVals variable does not include data that does not display in the Form widget\n      const cursorFormVals = Object.assign(dc.getCursor() ?? {}, formVals);\n\n      // Set value of calculate or formula fields to use in record rule\n      obj.fields((f) => f.key == \"calculate\" || f.key == \"formula\").forEach(\n         (f) => {\n            if (formVals[f.columnName] == null) {\n               let reCalculate = true;\n\n               // WORKAROUND: If \"Formula\" field will have Filter conditions,\n               // Then it is not able to re-calculate on client side\n               // because relational data is not full data so FilterComplex will not have data to check\n               if (f.key == \"formula\" && f.settings?.where?.rules?.length > 0) {\n                  reCalculate = false;\n               }\n\n               formVals[f.columnName] = f.format(cursorFormVals, reCalculate);\n            }\n         }\n      );\n\n      return formVals;\n   }\n   */\n\n   async init() {\n      const ab = this.#AB;\n\n      const record = (this.record = this.datacollection.getCursor());\n\n      if (record == null) return;\n\n      //convert boolean for toggle UI\n      const parsedRecord = {};\n\n      this.views.forEach((view) => {\n         if (view.definition.fieldType == null || view instanceof FormButton)\n            return;\n\n         switch (view.definition.fieldType) {\n            case \"boolean\":\n               parsedRecord[view.definition.field] =\n                  record[view.definition.field] === 1 ? [\"on\"] : [];\n\n               break;\n\n            case \"date\":\n               {\n                  const date = record[view.definition.field];\n\n                  parsedRecord[view.definition.field] = `${\n                     date.getMonth() + 1\n                  }/${date.getDate()}/${date.getFullYear()}`;\n               }\n\n               break;\n\n            case \"datetime\":\n               {\n                  const datetime = new Date(record[view.definition.field]);\n                  const hours = datetime.getHours();\n                  const minutes = datetime.getMinutes();\n\n                  parsedRecord[view.definition.field] = `${\n                     datetime.getMonth() + 1\n                  }/${datetime.getDate()}/${datetime.getFullYear()}, ${\n                     hours <= 12 ? hours : hours % 12\n                  }:${\n                     minutes < 10\n                        ? `0${minutes.toString()}`\n                        : minutes.toString()\n                  } ${hours < 12 ? \"AM\" : \"PM\"}`;\n               }\n\n               break;\n\n            case \"number\":\n               parsedRecord[view.definition.field] =\n                  record[view.definition.field].toString();\n\n               break;\n\n            default:\n               parsedRecord[view.definition.field] =\n                  record[view.definition.field];\n\n               break;\n         }\n      });\n\n      //fill in form\n      ab.$f7.form.fillFromData(`#${this.id}`, parsedRecord);\n\n      // // listen for when we remove the preloader on the smart select then set the value to the select\n      // // this is just a hack to get the value of the smart select set we may be able to take this out\n      // if (ab.$f7.$(\".smartSelectCountry .item-after .preloader\").length) {\n      //    ab.$(\n      //       \".smartSelectCountry .item-after .preloader\"\n      //    )[0].addEventListener(\"DOMNodeRemoved\", () => {\n      //       ab.$f7\n      //          .$(\n      //             \"select[name='Country'] option[value='\" +\n      //                this.#record.Country +\n      //                \"']\"\n      //          )\n      //          .prop(\"selected\", \"selected\");\n      //    });\n      // }\n   }\n\n   viewHTML() {\n      const allResults = [];\n\n      let fields = [];\n\n      this.views.forEach((view) => {\n         if (view.definition.fieldType == null) {\n            if (view instanceof FormButton) {\n               const renderedFieldElements = [...fields];\n\n               if (fields.length > 0)\n                  allResults.push(() => <ul>{renderedFieldElements}</ul>);\n\n               allResults.push(view.html());\n\n               fields = [];\n            }\n\n            return;\n         }\n\n         switch (view.definition.fieldType) {\n            case \"LongText\":\n               fields.push(<li class=\"align-top\">{view.html()()}</li>);\n\n               break;\n\n            default:\n               fields.push(<li>{view.html()()}</li>);\n\n               break;\n         }\n      });\n\n      if (fields.length > 0)\n         allResults.push(() => <ul>{fields.map((r) => r())}</ul>);\n\n      return allResults.map((r) => r()); // render each jsx template\n   }\n\n   html() {\n      return () => (\n         <form\n            class=\"list list-inset list-strong-ios list-dividers-ios list-outline-ios\"\n            id={this.id}\n         >\n            {this.viewHTML()}\n         </form>\n      );\n   }\n}\n","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nimport formItem from \"./formItem.f7.jsx\";\n\nexport default class F7ViewFormButton extends formItem {\n   #AB;\n   #form;\n   constructor(AB, form, definition) {\n      super(definition);\n\n      this.#AB = AB;\n      this.#form = form;\n   }\n\n   async #save() {\n      const ab = this.#AB;\n      const form = this.#form;\n      const definition = this.definition;\n\n      ab.$(`#${definition.id}`).addClass(\"button-loading\");\n\n      const formData = ab.$f7.form.convertToData(`#${form.id}`);\n\n      if (!ab.$f7.input.validateInputs(`#${form.id}`)) {\n         ab.$(`#${definition.id}`).removeClass(\"button-loading\");\n\n         return;\n      }\n\n      const parsedFormData = {};\n\n      form.views.forEach((view) => {\n         const field = view.definition.field;\n\n         switch (view.definition.fieldType) {\n            case \"boolean\":\n               if (formData[field].length === 0) {\n                  parsedFormData[field] = 0;\n\n                  break;\n               }\n\n               parsedFormData[field] = 1;\n\n               break;\n\n            case \"datetime\":\n               parsedFormData[field] = new Date(formData[field]).toISOString();\n\n               break;\n\n            case \"number\":\n               parsedFormData[field] = parseInt(formData[field]);\n\n               break;\n\n            default:\n               parsedFormData[field] = formData[field];\n\n               break;\n         }\n      });\n\n      const dc = form.datacollection;\n\n      try {\n         if (form.record == null) await dc.model.create(parsedFormData);\n         else\n            await dc.model.update(\n               form.record[dc.datasource.PK()],\n               parsedFormData\n            );\n\n         // on success, go back to list page\n         ab.$f7.views.current.router.back();\n      } catch (e) {\n         console.error(e);\n\n         // TODO: popup here:\n         const L = ab.Label();\n\n         let text = L(\"Save Failed\");\n\n         // @TODO: instead of stuffing errors into popup message, find the input controls\n         // and set them to invalid markers, and add the message to them if possible.\n\n         if (e.errors) {\n            try {\n               if (\"string\" == typeof e.errors) e.errors = JSON.parse(e.errors);\n            } catch (e) {\n               // ignore\n            }\n\n            (e.errors || []).forEach((valError) => {\n               text = `${text}<br>${valError.name}: ${valError.message}`;\n            });\n         }\n\n         ab.$f7.toast\n            .create({\n               icon: '<i class=\"material-icons\">error</i>',\n               text,\n               position: \"center\",\n               closeTimeout: 2000,\n            })\n            .open();\n      }\n\n      ab.$(`#${definition.id}`).removeClass(\"button-loading\");\n\n      // this.$store.dispatch(\"updateRecord\", {\n      //    dcID: \"faa9905e-dea8-4c7f-8eb4-98f1e6e66506\",\n      //    recordID: form.record.uuid,\n      //    record: parsedFormData,\n      // });\n      // setTimeout(() => {\n      //    this.$(\"#\" + btn).removeClass(\"button-loading\");\n      // }, 1000);\n   }\n\n   html() {\n      const definition = this.definition;\n\n      return () => (\n         <div class=\"block\">\n            <a\n               onClick={() => this.#save()}\n               id={definition.id}\n               class=\"button button-large button-fill button-preloader\"\n               href=\"#\"\n            >\n               <span class=\"preloader\"></span>\n               <span>{definition.label}</span>\n            </a>\n         </div>\n      );\n   }\n}\n","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nimport formItem from \"./formItem.f7.jsx\";\n\nexport default class F7ViewFormCheckbox extends formItem {\n   #AB;\n   #form;\n   constructor(AB, form, definition) {\n      super(definition);\n\n      this.#AB = AB;\n      this.#form = form;\n   }\n\n   html() {\n      const definition = this.definition;\n\n      return () => (\n         <div class=\"item-content\">\n            <div class=\"item-inner\">\n               <div class=\"item-title\">{definition.label}</div>\n               <div class=\"item-after\">\n                  <label class=\"toggle toggle-init\">\n                     {definition.settings.required === 1 ? (\n                        <input\n                           name={definition.field}\n                           type=\"checkbox\"\n                           required\n                           validate\n                        />\n                     ) : (\n                        <input name={definition.field} type=\"checkbox\" />\n                     )}\n                     <i class=\"toggle-icon\"></i>\n                  </label>\n               </div>\n            </div>\n         </div>\n      );\n   }\n}\n","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nimport formItem from \"./formItem.f7.jsx\";\n\nexport default class F7ViewFormConnect extends formItem {\n   #AB;\n   #form;\n   constructor(AB, form, definition) {\n      super(definition);\n\n      this.#AB = AB;\n      this.#form = form;\n   }\n\n   html() {\n      const connectedType = \"selectsingle\" || \"selectmultiple\";\n\n      return () => {};\n   }\n}\n","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nimport formItem from \"./formItem.f7.jsx\";\n\nexport default class F7ViewFormCustom extends formItem {\n   #AB;\n   #form;\n   constructor(AB, form, definition) {\n      super(definition);\n\n      this.#AB = AB;\n      this.#form = form;\n   }\n\n   html() {\n      return () => {};\n   }\n}\n","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nimport formItem from \"./formItem.f7.jsx\";\n\nexport default class F7ViewFormDatepicker extends formItem {\n   #AB;\n   #form;\n   constructor(AB, form, definition) {\n      super(definition);\n\n      this.#AB = AB;\n      this.#form = form;\n   }\n\n   viewHTML() {\n      const definition = this.definition;\n\n      switch (definition.fieldType) {\n         case \"datetime\":\n            return definition.settings.required === 1 ? (\n               <input\n                  type=\"text\"\n                  name={definition.field}\n                  class=\"form-datepicker-datetime\"\n                  placeholder={definition.placeholder}\n                  readonly=\"readonly\"\n                  required\n                  validate\n               />\n            ) : (\n               <input\n                  type=\"text\"\n                  name={definition.field}\n                  class=\"form-datepicker-datetime\"\n                  placeholder={definition.placeholder}\n                  readonly=\"readonly\"\n               />\n            );\n\n         default:\n            return definition.settings.required === 1 ? (\n               <input\n                  type=\"text\"\n                  name={definition.field}\n                  class=\"form-datepicker-date\"\n                  placeholder={definition.placeholder}\n                  readonly=\"readonly\"\n                  required\n                  validate\n               />\n            ) : (\n               <input\n                  type=\"text\"\n                  name={definition.field}\n                  class=\"form-datepicker-date\"\n                  placeholder={definition.placeholder}\n                  readonly=\"readonly\"\n               />\n            );\n      }\n   }\n\n   html() {\n      return () => (\n         <div class=\"item-content item-input\">\n            <div class=\"item-inner\">\n               <div class=\"item-title item-label\">{this.definition.label}</div>\n               <div class=\"item-input-wrap\">{this.viewHTML()}</div>\n            </div>\n         </div>\n      );\n   }\n}\n","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nexport default class F7ViewFormItem {\n   #definition;\n   constructor(definition) {\n      this.#definition = definition;\n   }\n\n   get definition() {\n      return this.#definition;\n   }\n\n   html() {\n      return () => {};\n   }\n}\n","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nimport formItem from \"./formItem.f7.jsx\";\n\nexport default class F7ViewFormJSON extends formItem {\n   #AB;\n   #form;\n   constructor(AB, form, definition) {\n      super(definition);\n\n      this.#AB = AB;\n      this.#form = form;\n   }\n\n   html() {\n      return () => {};\n   }\n}\n","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nimport formItem from \"./formItem.f7.jsx\";\n\nexport default class F7ViewFormNumber extends formItem {\n   #AB;\n   #form;\n   constructor(AB, form, definition) {\n      super(definition);\n\n      this.#AB = AB;\n      this.#form = form;\n   }\n\n   html() {\n      const definition = this.definition;\n      const errorMessage = this.#AB.Label(\"Only numbers please!\");\n\n      return () => (\n         <div class=\"item-content item-input\">\n            <div class=\"item-inner\">\n               <div class=\"item-title item-label\">{definition.label}</div>\n               <div class=\"item-input-wrap\">\n                  <div class=\"range-slider range-slider-init\" data-label=\"true\">\n                     {definition.settings.required === 1 ? (\n                        <input\n                           name={definition.field}\n                           type=\"range\"\n                           value=\"50\"\n                           min=\"0\"\n                           max=\"100\"\n                           step=\"1\"\n                           required\n                           validate\n                           pattern=\"[0-9]*\"\n                           data-error-message={errorMessage}\n                        />\n                     ) : (\n                        <input\n                           name={definition.field}\n                           type=\"range\"\n                           value=\"50\"\n                           min=\"0\"\n                           max=\"100\"\n                           step=\"1\"\n                           pattern=\"[0-9]*\"\n                           data-error-message={errorMessage}\n                        />\n                     )}\n                  </div>\n               </div>\n            </div>\n         </div>\n      );\n   }\n}\n","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nimport formItem from \"./formItem.f7.jsx\";\n\nexport default class F7ViewFormReadonly extends formItem {\n   #AB;\n   #form;\n   constructor(AB, form, definition) {\n      super(definition);\n\n      this.#AB = AB;\n      this.#form = form;\n   }\n\n   html() {\n      return () => {};\n   }\n}\n","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nimport formItem from \"./formItem.f7.jsx\";\n\nexport default class F7ViewFormSelectMultiple extends formItem {\n   #AB;\n   #form;\n   constructor(AB, form, definition) {\n      super(definition);\n\n      this.#AB = AB;\n      this.#form = form;\n   }\n\n   html() {\n      const definition = this.definition;\n\n      return () => (\n         <a href=\"#\" class=\"item-link smart-select smart-select-init\">\n            <select\n               name={definition.name}\n               placeholder={definition.placeholder}\n               multiple\n            >\n               {definition.settings.options.map((item) => (\n                  <option value={item.id}>{item.text}</option>\n               ))}\n            </select>\n            <div class=\"item-content\">\n               <div class=\"item-inner\">\n                  <div class=\"item-title\">{definition.label}</div>\n                  <div class=\"item-after\"></div>\n               </div>\n            </div>\n         </a>\n      );\n   }\n}\n","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nimport formItem from \"./formItem.f7.jsx\";\n\nexport default class F7ViewFormSelectSingle extends formItem {\n   #AB;\n   #form;\n   constructor(AB, form, definition) {\n      super(definition);\n\n      this.#AB = AB;\n      this.#form = form;\n   }\n\n   html() {\n      const definition = this.definition;\n\n      return () => (\n         <div class=\"item-content item-input\">\n            <div class=\"item-inner\">\n               <div class=\"item-title item-label\">{definition.label}</div>\n               <div class=\"item-input-wrap\">\n                  <select name={definition.field}>\n                     {definition.settings.options.map((item) => (\n                        <option value={item.id}>{item.text}</option>\n                     ))}\n                  </select>\n               </div>\n            </div>\n         </div>\n      );\n   }\n}\n","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nimport formItem from \"./formItem.f7.jsx\";\n\nexport default class F7ViewFormTextbox extends formItem {\n   #AB;\n   #form;\n   constructor(AB, form, definition) {\n      super(definition);\n\n      this.#AB = AB;\n      this.#form = form;\n   }\n\n   html() {\n      const definition = this.definition;\n\n      let $inputElement = \"\";\n\n      switch (definition.fieldType) {\n         case \"LongText\":\n            $inputElement =\n               definition.settings.required === 1 ? (\n                  <textarea\n                     name={definition.field}\n                     placeholder={definition.placeholder}\n                     class=\"resizable\"\n                     required\n                     validate\n                  ></textarea>\n               ) : (\n                  <textarea\n                     name={definition.field}\n                     placeholder={definition.placeholder}\n                     class=\"resizable\"\n                  ></textarea>\n               );\n\n            break;\n\n         case \"email\":\n            $inputElement =\n               definition.settings.required === 1 ? (\n                  <input\n                     type=\"email\"\n                     name={definition.field}\n                     placeholder={definition.placeholder}\n                     required\n                     validate\n                  ></input>\n               ) : (\n                  <input\n                     type=\"email\"\n                     name={definition.field}\n                     placeholder={definition.placeholder}\n                     required\n                     validate\n                  ></input>\n               );\n\n            break;\n\n         default:\n            $inputElement =\n               definition.settings.required === 1 ? (\n                  <input\n                     name={definition.field}\n                     type=\"text\"\n                     placeholder={definition.placeholder}\n                     required\n                     validate\n                  />\n               ) : (\n                  <input\n                     name={definition.field}\n                     type=\"text\"\n                     placeholder={definition.placeholder}\n                  />\n               );\n\n            break;\n      }\n\n      return () => (\n         <div class=\"item-content item-input\">\n            <div class=\"item-inner\">\n               <div class=\"item-title item-label\">{definition.label}</div>\n               <div class=\"item-input-wrap\">{$inputElement}</div>\n            </div>\n         </div>\n      );\n   }\n}\n","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nimport formItem from \"./formItem.f7.jsx\";\n\nexport default class F7ViewFormTree extends formItem {\n   #AB;\n   #form;\n   constructor(AB, form, definition) {\n      super(definition);\n\n      this.#AB = AB;\n      this.#form = form;\n   }\n\n   html() {\n      return () => {};\n   }\n}\n","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nexport default class F7ViewList {\n   #AB;\n   #settings;\n   constructor(AB, settings) {\n      this.#AB = AB;\n      this.#settings = settings;\n   }\n\n   get id() {\n      return this.#settings.id;\n   }\n\n   get datacollection() {\n      return this.#AB.datacollectionByID(this.#settings.dcID);\n   }\n\n   async init() {}\n\n   itemSelected(item) {\n      // if there is a detailPage set, then transition there:\n      if (this.#settings.detailPage) {\n         this.#AB.$f7.view.main.router.navigate(\"/form\", {\n            props: {\n               isEditMode: true,\n            },\n            ignoreCache: true,\n         });\n      }\n\n      // Make sure our DC registers which item was just selected.\n      const dc = this.datacollection;\n\n      if (dc) {\n         dc.setCursor(item[dc.datasource.PK()] || item.id || item.uuid);\n      }\n   }\n\n   // NOTE: this now means OPEN THIS VIEW.\n   openView(data) {\n      this.#AB.$f7.view.main.router.navigate(\"/list\", {\n         props: {\n            data: data,\n         },\n         ignoreCache: true,\n      });\n   }\n\n   loadMore() {\n      // if (this.$store.getters[this.#settings.dcID].value.hasMore) {\n      if (this.datacollection.hasMore()) {\n         this.#AB.$store.dispatch(\"getAppBuilderData\", this.#settings.dcID);\n      }\n   }\n\n   hasMore() {\n      if (this.datacollection.hasMore()) {\n         return <div class=\"preloader infinite-scroll-preloader\"></div>;\n      }\n   }\n\n   viewHTML() {\n      return this.#AB.$store.getters[this.#settings.dcID].value.map((item) => (\n         <li id={item.uuid} class=\"swipeout deleted-callback\">\n            <div\n               class=\"swipeout-content item-content\"\n               onClick={() => this.itemSelected(item)}\n            >\n               <div class=\"item-inner\">\n                  <div class=\"item-title\">{item.Name}</div>\n               </div>\n            </div>\n            <div class=\"swipeout-actions-right\">\n               <a\n                  href=\"#\"\n                  class=\"swipeout-delete\"\n                  data-confirm=\"Are you sure want to delete this item?\"\n                  data-confirm-title=\"Delete?\"\n               >\n                  Delete\n               </a>\n            </div>\n         </li>\n      ));\n   }\n\n   html() {\n      if (this.#AB.$store.getters[this.#settings.dcID].value.length === 0)\n         return () => (\n            <div class=\"page-content infinite-scroll-content\">\n               <div class=\"list links-list list-outline list-strong list-dividers skeleton-text skeleton-effect-fade\">\n                  <ul>\n                     {[...Array(20)].map((x, i) => (\n                        <li>\n                           <a href=\"#\">Skeleton text will go here</a>\n                        </li>\n                     ))}\n                  </ul>\n               </div>\n            </div>\n         );\n\n      return () => (\n         <div\n            class=\"page-content infinite-scroll-content\"\n            onInfinite={() => this.loadMore()}\n         >\n            <div class=\"list links-list list-outline list-strong list-dividers\">\n               <ul>{this.viewHTML()}</ul>\n            </div>\n            {this.hasMore()}\n         </div>\n      );\n   }\n}\n","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nexport default (AB) => {\n   return (props, { $, $h, $f7, $on, $store, $update }) => {\n      return () => (\n         <div class=\"page\">\n            <div class=\"navbar\">\n               <div class=\"navbar-bg\"></div>\n               <div class=\"navbar-inner sliding\">\n                  <div class=\"left\">\n                     <a href=\"#\" class=\"link back\">\n                        <i class=\"icon icon-back\"></i>\n                        <span class=\"if-not-md\">Back</span>\n                     </a>\n                  </div>\n                  <div class=\"title\">Not found</div>\n               </div>\n            </div>\n            <div class=\"page-content\">\n               <div class=\"block block-strong inset\">\n                  <center>\n                     <h1>Sorry</h1>\n                     <p>Requested content not found.</p>\n                  </center>\n               </div>\n            </div>\n         </div>\n      );\n   };\n};\n","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nexport default (AB) => {\n   const Application = AB.applications()[0]; // AB.applicationByID(\"4b7a489a-5fe5-4044-8565-aaa3654300f2\");\n   const L = AB.Label();\n\n   return (props, { $, $h, $f7, $on, $store, $update }) => {\n      // Login screen demo data\n      // let path = document?.location?.pathname ? document.location.pathname : \"/\";\n      let defaultPath = \"/\";\n      let username = \"\";\n      let password = \"\";\n      let versionNumber = Application.version;\n      let showingUpdate = false;\n      let apiUrl = document?.location?.origin ?? \"http://localhost:8080\";\n      // process.env.NODE_ENV === \"production\"\n      //    ? \"https://design.digiserve.org\"\n      //    : \"http://localhost:8010/proxy\";\n\n      $store.dispatch(\"getVersion\");\n\n      $on(\"pageInit\", () => {\n         // checkForUpdate();\n      });\n\n      document.addEventListener(\"visibilitychange\", (e) => {\n         if (document.visibilityState == \"visible\") {\n            checkForUpdate();\n         }\n      });\n\n      const updatePassword = (e) => {\n         password = $(\"#\" + e).value();\n         $update();\n      };\n\n      const close = (e) => {\n         $f7.loginScreen.close(\"#my-login-screen\");\n      };\n\n      const logout = () => {\n         $f7.loginScreen.open(\"#my-login-screen\");\n         // $f7.preloader.show();\n         // password = \"\";\n         // $update();\n         // fetchJson(Api.urls.logout, { method: 'GET' })\n         //   .then(data => {\n         //     store.dispatch('addCsrfToken', \"\");\n         //     $f7.loginScreen.open(\"#my-login-screen\");\n         //     $f7.preloader.hide();\n         //   })\n         //   .catch(err => {\n         //     console.error(\"logout failed but pretending it didn't\");\n         //     store.dispatch('addCsrfToken', \"\");\n         //     $f7.loginScreen.open(\"#my-login-screen\");\n         //     $f7.preloader.hide();\n         //   });\n      };\n\n      const authenticate = async () => {\n         $(\".button-preloader\").addClass(\"button-loading\");\n         let tempUser = $(\"#username\").value();\n         try {\n            var data = await AB.Network.post({\n               url: apiUrl + \"/auth/login\",\n               params: {\n                  email: tempUser,\n                  password: $(\"#password\").value(),\n               },\n            });\n\n            $store.dispatch(\"setUser\", data.user);\n            // $store.dispatch(\"setUsername\", $(\"#username\").value());\n\n            // Now attempt to ensure our cookie is set:\n            // var result = await AB.Network.get({\n            //    url: `${apiUrl}/__getCookie`,\n            // });\n\n            $(\"#password\")[0].value = \"\";\n            $f7.loginScreen.close();\n            $(\".button-preloader\").removeClass(\"button-loading\");\n\n            AB.isInitialized = true;\n\n            await checkForUpdate();\n\n            // NOTE: replace this with:\n            // const Page = Application.pageByID(LastViewedPageID);\n            // Page.openView();\n            $f7.view.main.router.navigate(\"/list\", {\n               transition: \"f7-fade\",\n            });\n         } catch (err) {\n            $f7.toast\n               .create({\n                  icon: '<i class=\"material-icons\">error</i>',\n                  text: `Login Failed`,\n                  position: \"center\",\n                  closeTimeout: 2000,\n               })\n               .open();\n            $(\".button-preloader\").removeClass(\"button-loading\");\n         }\n      };\n\n      const showPasswordPreview = (e) => {\n         $(\"#passwordPreviewHolder\").show();\n         $(\"#passwordHolder\").hide();\n         $(\"#passwordPreview\").focus();\n      };\n\n      const showPassword = (e) => {\n         $(\"#passwordHolder\").show();\n         $(\"#passwordPreviewHolder\").hide();\n         $(\"#password\").focus();\n      };\n\n      async function checkForUpdate() {\n         if (!showingUpdate) {\n            let getVersionPath = `${apiUrl}${Application.urlCurrentVersion}`;\n\n            const response = await AB.Network.get({ url: getVersionPath });\n            const version = response?.version ?? \"0.0.0\";\n            const currVersion = Application.version;\n            console.log(\"getVersionPath: \", version);\n            console.log(\"getCurrVersion: \", currVersion);\n            if (currVersion.trim() != version.trim()) {\n               showingUpdate = true;\n               if (\"serviceWorker\" in navigator) {\n                  $f7.dialog\n                     .create({\n                        title: L(`Update Available`),\n                        content: L(\n                           `There is an app update avaiable, tap \"Update\" to get the latest version.`\n                        ),\n                        buttons: [\n                           {\n                              text: L(\"Cancel\"),\n                              onClick: function (dialog, e) {\n                                 showingUpdate = false;\n                              },\n                           },\n                           {\n                              text: L(`Update to version {0}`, [version]),\n                              bold: true,\n                              cssClass: \"bg-color-primary text-color-white\",\n                              onClick: function (dialog, e) {\n                                 $f7.progressbar.show();\n                                 navigator.serviceWorker\n                                    .getRegistrations()\n                                    .then(function (registrations) {\n                                       let complete = registrations.length;\n                                       let index = 0;\n                                       for (let registration of registrations) {\n                                          registration\n                                             .unregister()\n                                             .then((boolean) => {\n                                                index++;\n                                                if (index == complete) {\n                                                   showingUpdate = false;\n                                                   window.location.reload(true);\n                                                }\n                                             });\n                                       }\n                                       if (complete == 0) {\n                                          showingUpdate = false;\n                                          window.location.reload(true);\n                                       }\n                                    });\n                              },\n                           },\n                        ],\n                        verticalButtons: true,\n                     })\n                     .open();\n               }\n            } else {\n               // alert(\"up to date\");\n            }\n         }\n      }\n\n      return () => (\n         <div id=\"app\">\n            {/* Left panel with cover effect */}\n            <div class=\"panel panel-left panel-cover dark panel-init\">\n               <div class=\"view\">\n                  <div class=\"page bg-color-primary\">\n                     <div class=\"navbar\">\n                        <div class=\"navbar-bg\"></div>\n                        <div class=\"navbar-inner\">\n                           <div class=\"title\">\n                              {Application.label ?? L(\"PWA\")}\n                           </div>\n                        </div>\n                     </div>\n                     <div class=\"page-content\">\n                        <div class=\"block text-align-center no-margin-bottom\">\n                           {/* block content */}\n                           <img\n                              src=\"assets/mobile/images/digiServe_logo.png\"\n                              width=\"70%\"\n                              class=\"sidebar_logo\"\n                           />\n                           <p></p>\n                        </div>\n                        <div class=\"list list-outline list-strong list-dividers list-translucent\">\n                           <ul>\n                              <li>\n                                 <a\n                                    href=\"/list\"\n                                    class=\"item-link item-content panel-close\"\n                                 >\n                                    <div class=\"item-media\">\n                                       <i class=\"material-icons\">\n                                          {L(\"contacts\")}\n                                       </i>\n                                    </div>\n                                    <div class=\"item-inner\">\n                                       <div class=\"item-title\">\n                                          {L(\"List of People\")}\n                                       </div>\n                                    </div>\n                                 </a>\n                              </li>\n                              {Application.pages().map((p) => {\n                                 return (\n                                    <li>\n                                       <a\n                                          href={`/${p.route}`}\n                                          class=\"item-link item-content panel-close\"\n                                       >\n                                          <div class=\"item-media\">\n                                             <i class=\"material-icons\">\n                                                {p.label}\n                                             </i>\n                                          </div>\n                                          <div class=\"item-inner\">\n                                             <div class=\"item-title\">\n                                                {p.label}\n                                             </div>\n                                          </div>\n                                       </a>\n                                    </li>\n                                 );\n                              })}\n\n                              <li>\n                                 <a\n                                    href=\"#\"\n                                    class=\"item-link item-content\"\n                                    onClick={() => logout()}\n                                 >\n                                    <div class=\"item-media\">\n                                       <i class=\"material-icons\">\n                                          {L(\"logout\")}\n                                       </i>\n                                    </div>\n                                    <div class=\"item-inner\">\n                                       <div class=\"item-title\">\n                                          {L(\"Log out\")}\n                                       </div>\n                                    </div>\n                                 </a>\n                              </li>\n                           </ul>\n                        </div>\n                        <div\n                           class=\"block text-align-center\"\n                           style=\"position: absolute; width: 100%; margin-bottom: 15px; bottom: 0px;\"\n                        >\n                           <p>\n                              <img\n                                 src=\"assets/mobile/images/digiServe_logo.png\"\n                                 width=\"30%\"\n                              />\n                              <br />\n                              <span class=\"version\">v{versionNumber}</span>\n                           </p>\n                        </div>\n                     </div>\n                  </div>\n               </div>\n            </div>\n\n            {/* Your main view, should have \"view-main\" class */}\n            <div\n               class=\"view view-main view-init safe-areas\"\n               data-url={defaultPath}\n            ></div>\n\n            {/* Login Screen */}\n            <div class=\"login-screen\" id=\"my-login-screen\">\n               <div class=\"view\">\n                  <div class=\"page bg-color-primary dark\">\n                     <div class=\"page-content login-screen-content bg-color-primary\">\n                        <div class=\"block text-align-center no-margin-bottom\">\n                           <img\n                              src=\"assets/mobile/images/digiServe_logo.png\"\n                              width=\"60%\"\n                              class=\"sidebar_logo\"\n                           />\n                        </div>\n                        <form\n                           action=\"javascript: null;\"\n                           onSubmit={() => authenticate()}\n                        >\n                           <div class=\"list\">\n                              <ul>\n                                 <li class=\"item-content item-input\">\n                                    <div class=\"item-inner\">\n                                       <div class=\"item-title item-label\">\n                                          {L(\"E-mail\")}\n                                       </div>\n                                       <div class=\"item-input-wrap\">\n                                          <input\n                                             autocorrect=\"off\"\n                                             autocomplete=\"username\"\n                                             spellcheck=\"false\"\n                                             type=\"text\"\n                                             id=\"username\"\n                                             name=\"username\"\n                                             placeholder={L(\n                                                \"Your e-mail address\"\n                                             )}\n                                          />\n                                          <span class=\"input-clear-button\"></span>\n                                       </div>\n                                    </div>\n                                 </li>\n                                 <li\n                                    id=\"passwordHolder\"\n                                    class=\"item-content item-input\"\n                                 >\n                                    <div class=\"item-inner\">\n                                       <div class=\"item-title item-label\">\n                                          {L(\"Password\")}\n                                       </div>\n                                       <div class=\"item-input-wrap\">\n                                          <a\n                                             onClick={() =>\n                                                showPasswordPreview()\n                                             }\n                                             style=\"color: var(--f7-input-clear-button-color); position: absolute; right: 0; padding: 10px; margin-right: -15px; margin-top: -5px;\"\n                                             href=\"#\"\n                                          >\n                                             <i class=\"material-icons\">\n                                                visibility_off\n                                             </i>\n                                          </a>\n                                          <input\n                                             type=\"password\"\n                                             id=\"password\"\n                                             name=\"password\"\n                                             placeholder={L(\"Your password\")}\n                                             value={password}\n                                             onInput={() =>\n                                                updatePassword(\"password\")\n                                             }\n                                             autocomplete=\"current-password\"\n                                             autocorrect=\"off\"\n                                             spellcheck=\"false\"\n                                          />\n                                       </div>\n                                    </div>\n                                 </li>\n                                 <li\n                                    id=\"passwordPreviewHolder\"\n                                    style=\"display: none;\"\n                                    class=\"item-content item-input\"\n                                 >\n                                    <div class=\"item-inner\">\n                                       <div class=\"item-title item-label\">\n                                          {L(\"Password\")}\n                                       </div>\n                                       <div class=\"item-input-wrap\">\n                                          <a\n                                             onClick={() => showPassword()}\n                                             style=\"color: var(--f7-input-clear-button-color); position: absolute; right: 0; padding: 10px; margin-right: -15px; margin-top: -5px;\"\n                                             href=\"#\"\n                                          >\n                                             <i class=\"material-icons\">\n                                                visibility\n                                             </i>\n                                          </a>\n                                          <input\n                                             type=\"text\"\n                                             id=\"passwordPreview\"\n                                             name=\"passwordPreview\"\n                                             placeholder={L(\"Your password\")}\n                                             value={password}\n                                             onInput={() =>\n                                                updatePassword(\n                                                   \"passwordPreview\"\n                                                )\n                                             }\n                                             autocomplete=\"current-password\"\n                                             autocorrect=\"off\"\n                                             spellcheck=\"false\"\n                                          />\n                                       </div>\n                                    </div>\n                                 </li>\n                                 <li class=\"item-content item-input\"></li>\n                              </ul>\n                           </div>\n                           <div class=\"block\">\n                              <button class=\"button color-primary button-outline button-round bg-color-white button-large login-button button-preloader\">\n                                 <div class=\"preloader\">\n                                    <span class=\"preloader-inner\">\n                                       <span class=\"if-ios\">\n                                          <span class=\"preloader-inner-line\"></span>\n                                          <span class=\"preloader-inner-line\"></span>\n                                          <span class=\"preloader-inner-line\"></span>\n                                          <span class=\"preloader-inner-line\"></span>\n                                          <span class=\"preloader-inner-line\"></span>\n                                          <span class=\"preloader-inner-line\"></span>\n                                          <span class=\"preloader-inner-line\"></span>\n                                          <span class=\"preloader-inner-line\"></span>\n                                       </span>\n                                       <span class=\"if-md\">\n                                          <svg viewBox=\"0 0 36 36\">\n                                             <circle\n                                                cx=\"18\"\n                                                cy=\"18\"\n                                                r=\"16\"\n                                             ></circle>\n                                          </svg>\n                                       </span>\n                                       <span class=\"if-aurora\">\n                                          <span class=\"preloader-inner-circle\"></span>\n                                       </span>\n                                    </span>\n                                 </div>\n                                 <span>{L(\"Sign In\")}</span>\n                              </button>\n                           </div>\n                        </form>\n                     </div>\n                  </div>\n               </div>\n            </div>\n         </div>\n      );\n   };\n};\n","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nimport Form from \"../js/views/form.f7.jsx\";\n\nexport default (AB) => {\n   const L = AB.Label();\n\n   return (props, { $, $h, $f7, $on, $store, $update }) => {\n      const title = props.isEditMode ? L(\"Edit Person\") : L(\"Add Person\");\n\n      // // NOTE: Programming Quirk:\n      // // We seem to need to access our getters for this Page from\n      // // within this PageComponent definition.  (maybe) this is how\n      // // it registers the components that need to be redrawn when the\n      // // related state is updated.\n      // let pageID = \"ABPage.id\";\n      // let Page = AB.pageByID(pageID);\n      // let allViews = Page.views();\n      // allViews.forEach((v) => {\n      //    let dc = v.datacollection;\n      //    if (dc) {\n      //       allGetters[dc.id] = $store.getters[dc.id];\n      //    }\n      // })\n\n      const dcGetter = $store.getters[\"0e9f5f6f-cd0b-4b93-b0c8-d51bd9852322\"];\n\n      const views = [\n         {\n            id: \"my-form\",\n            key: \"form\",\n            dcID: \"0e9f5f6f-cd0b-4b93-b0c8-d51bd9852322\",\n         },\n      ];\n\n      // for each view on this Page, do:\n      const allViews = [];\n\n      // let views = Page.views();\n      // views.forEach((v) => {\n      // allViews.push(v.html(...));\n      // })\n      views.forEach((view) => {\n         switch (view.key) {\n            case \"form\": {\n               let form = new Form(AB, view);\n               /* new Form(\n                  view.dcID,\n                  allDCs,\n                  $,\n                  $f7,\n                  $store,\n                  person\n               ); */\n               allViews.push(form);\n               break;\n            }\n            default:\n            // code block\n         }\n      });\n\n      let formDatepickerDate = null;\n      let formDatepickerDatetime = null;\n\n      $on(\"pageInit\", async (e, page) => {\n         const pendingInit = [];\n\n         allViews.forEach((view) => {\n            const dc = view.datacollection;\n\n            dc?.init();\n\n            const viewInit = async (view, callback) => {\n               await view.init();\n\n               callback();\n            };\n            const init = () =>\n               new Promise((resolve) => {\n                  if (dc && !dc.isDataInitialized) {\n                     $store.dispatch(\"getAppBuilderData\", dc.id);\n\n                     const waitDCInit = setInterval(async () => {\n                        if (dc.isDataInitialized) {\n                           clearInterval(waitDCInit);\n\n                           await viewInit(view, resolve);\n                        }\n                     }, 1000);\n\n                     return;\n                  }\n\n                  viewInit(view, resolve);\n               });\n\n            pendingInit.push(init());\n         });\n\n         await Promise.all(pendingInit);\n\n         formDatepickerDate = $f7.calendar.create({\n            inputEl: \".form-datepicker-date\",\n         });\n         formDatepickerDatetime = $f7.calendar.create({\n            inputEl: \".form-datepicker-datetime\",\n            timePicker: true,\n            dateFormat: {\n               month: \"numeric\",\n               day: \"numeric\",\n               year: \"numeric\",\n               hour: \"numeric\",\n               minute: \"numeric\",\n            },\n         });\n      });\n\n      $on(\"pageBeforeRemove\", () => {\n         formDatepickerDate.destroy();\n         formDatepickerDatetime.destroy();\n      });\n\n      function viewHTML() {\n         const allHTML = [];\n\n         allViews.forEach((view) => {\n            allHTML.push(view.html());\n         });\n\n         return allHTML.map((r) => r()); // render each jsx template\n      }\n\n      return () => (\n         <div class=\"page\" data-name=\"form\">\n            <div class=\"navbar\">\n               <div class=\"navbar-bg\"></div>\n               <div class=\"navbar-inner sliding\">\n                  <div class=\"left\">\n                     <a href=\"#\" class=\"link back\">\n                        <i class=\"icon icon-back\"></i>\n                        <span class=\"if-not-md\">{L(\"Back\")}</span>\n                     </a>\n                  </div>\n                  <div class=\"title\">{title}</div>\n               </div>\n            </div>\n            <div class=\"page-content\">{viewHTML()}</div>\n         </div>\n      );\n   };\n};\n","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nexport default (AB) => {\n   const init = async () => {\n      if (!AB.isInitialized) {\n         try {\n            const user = await AB.Network.get({ url: \"/mobile/whoami\" });\n\n            AB.isInitialized = true;\n            AB.$f7.view.main.router.navigate(\"/list\", {\n               transition: \"f7-fade\",\n            });\n         } catch (e) {\n            // NOTE: this will catch errors OTHER than the \"Reauth\" notification\n            // errors.  Those will be caught by listening to the AB.Network object\n            AB.$f7.loginScreen.open(\"#my-login-screen\");\n         }\n      } else {\n         console.warn(\"Why is page(/).onPageInit() still getting called?\");\n      }\n   };\n\n   return (props, { $, $h, $f7, $on, $store, $update }) => {\n      AB.$ = $;\n      AB.$f7 = $f7;\n      AB.$store = $store;\n\n      $on(\"pageInit\", async (e, page) => {\n         // var panel = $f7.panel.get(\".panel-left\");\n         // panel.open();\n         await init();\n      });\n\n      return () => (\n         <div class=\"page\">\n            <div class=\"block no-margin text-align-center vertical-container\">\n               <div class=\"preloader vertical-center\"></div>\n            </div>\n         </div>\n      );\n   };\n};\n","/** @jsx $jsx */\nimport { $jsx } from 'framework7';\nimport List from \"../js/views/list.f7.jsx\";\n\nexport default (AB) => {\n   const L = AB.Label();\n\n   return (props, { $, $h, $f7, $on, $store, $update }) => {\n      const title = L(\"List of People\");\n      let allGetters = {};\n\n      // // NOTE: Programming Quirk:\n      // // We seem to need to access our getters for this Page from\n      // // within this PageComponent definition.  (maybe) this is how\n      // // it registers the components that need to be redrawn when the\n      // // related state is updated.\n      // let pageID = \"ABPage.id\";\n      // let Page = AB.pageByID(pageID);\n      // let allViews = Page.views();\n      // allViews.forEach((v) => {\n      //    let dc = v.datacollection;\n      //    if (dc) {\n      //       allGetters[dc.id] = $store.getters[dc.id];\n      //    }\n      // })\n      const dcGetter = $store.getters[\"0e9f5f6f-cd0b-4b93-b0c8-d51bd9852322\"];\n      const allViews = [];\n\n      $on(\"pageInit\", async (e, page) => {\n         const pendingInit = [];\n\n         allViews.forEach((view) => {\n            const dc = view.datacollection;\n\n            dc?.init();\n\n            const viewInit = async (view, callback) => {\n               await view.init();\n\n               callback();\n            };\n            const init = () =>\n               new Promise((resolve) => {\n                  if (dc && !dc.isDataInitialized) {\n                     $store.dispatch(\"getAppBuilderData\", dc.id);\n\n                     const waitDCInit = setInterval(async () => {\n                        if (dc.isDataInitialized) {\n                           clearInterval(waitDCInit);\n\n                           await viewInit(view, resolve);\n                        }\n                     }, 1000);\n\n                     return;\n                  }\n\n                  viewInit(view, resolve);\n               });\n\n            pendingInit.push(init());\n         });\n\n         await Promise.all(pendingInit);\n\n         $(\".deleted-callback\").on(\"swipeout:deleted\", async function (value) {\n            await delItem(this.getAttribute(\"id\"));\n         });\n      });\n\n      let views = [\n         {\n            id: \"my-list\",\n            key: \"list\",\n            dcID: \"0e9f5f6f-cd0b-4b93-b0c8-d51bd9852322\",\n            detailPage: \"ABPage.id\",\n         },\n      ];\n      function viewHTML() {\n         const allResults = [];\n\n         // allViews.forEach((v) => {\n         //    allResults.push(v.html(...));\n         // })\n\n         views.forEach((view) => {\n            switch (view.key) {\n               case \"list\":\n                  var list = new List(AB, view);\n                  allResults.push(list.html());\n                  allViews.push(list);\n                  break;\n               default:\n               // code block\n            }\n         });\n\n         return allResults.map((r) => r()); // render each jsx template\n      }\n\n      async function delItem(id) {\n         let dc = allViews[0].datacollection;\n         let item = id ? dc.$dc.getItem(id) : dc.getCursor();\n         if (!item) {\n            item = dc.getFirstRecord();\n         }\n\n         console.log(\"record to delete:\", item);\n         try {\n            await dc.datasource\n               .model()\n               .delete(item[dc.datasource.PK()] || item.id || item.uuid);\n         } catch (e) {\n            console.error(e);\n         }\n      }\n\n      //\n      return () => (\n         <div class=\"page\">\n            <div class=\"navbar\">\n               <div class=\"navbar-bg\"></div>\n               <div class=\"navbar-inner\">\n                  <div class=\"left\">\n                     <a\n                        href=\"#\"\n                        data-panel=\".panel-left\"\n                        class=\"link icon-only panel-open\"\n                     >\n                        <i class=\"icon material-icons\">menu</i>\n                     </a>\n                  </div>\n                  <div class=\"title\">{title}</div>\n                  <div class=\"title-large\">\n                     <div class=\"title-large-text\">{title}</div>\n                  </div>\n                  <div class=\"right\">\n                     <a\n                        class=\"link icon-only\"\n                        href=\"#\"\n                        onclick={() => {\n                           AB.$f7.view.main.router.navigate(\"/form\", {\n                              props: {\n                                 isEditMode: false,\n                              },\n                              ignoreCache: true,\n                           });\n                        }}\n                     >\n                        <i class=\"icon f7-icons if-not-md\">plus</i>\n                        <i class=\"icon material-icons md-only\">add</i>\n                     </a>\n                  </div>\n               </div>\n            </div>\n            {viewHTML()}\n         </div>\n      );\n   };\n};\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"/* Your app custom styles here */\\n/* login */\\n.md .item-input-focused .item-label,\\n.md .item-input-focused .item-floating-label {\\n  color: inherit;\\n}\\n.version {\\n  font-family: roboto mono, source code pro, Menlo, Monaco, Consolas,\\n\\t\\tcourier new, monospace;\\n  font-size: 10px;\\n}\\n.list-translucent {\\n  background-color: rgba(var(--f7-navbar-bg-color-rgb, var(--f7-bars-bg-color-rgb)), var(--f7-bars-translucent-opacity)) !important;\\n  -webkit-backdrop-filter: saturate(180%) blur(var(--f7-bars-translucent-blur)) !important;\\n  backdrop-filter: saturate(180%) blur(var(--f7-bars-translucent-blur)) !important;\\n}\\n.list-translucent ul {\\n  background-color: transparent !important;\\n}\\n/* Change Autocomplete styles in Chrome*/\\ninput:autofill,\\ninput:-webkit-autofill-strong-password,\\ninput:-webkit-autofill-strong-password-viewable,\\ninput:-webkit-autofill-and-obscured,\\ninput:-webkit-autofill,\\ninput:-webkit-autofill:hover,\\ninput:-webkit-autofill:focus,\\ntextarea:-webkit-autofill,\\ntextarea:-webkit-autofill:hover,\\ntextarea:-webkit-autofill:focus,\\nselect:-webkit-autofill,\\nselect:-webkit-autofill:hover,\\nselect:-webkit-autofill:focus {\\n  border: 0;\\n  -webkit-text-fill-color: #f0582b;\\n  -webkit-box-shadow: 0 0 0px 1000px #366889 inset;\\n  -webkit-transition: background-color 5000s ease-in-out 0s;\\n  transition: background-color 5000s ease-in-out 0s;\\n}\\n.vertical-container {\\n  position: relative;\\n  height: 100vh;\\n}\\n.vertical-center {\\n  margin: 0;\\n  position: absolute;\\n  top: 50%;\\n  -ms-transform: translateY(-50%);\\n  transform: translateY(-50%);\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/css/app.less\"],\"names\":[],\"mappings\":\"AAAA,gCAAgC;AAChC,UAAU;AACV;;EAEC,cAAA;AACD;AACA;EACC;wBAAA;EAEA,eAAA;AACD;AACA;EACC,iIAAA;EAIA,wFAAA;EAEA,gFAAA;AAHD;AAKA;EACC,wCAAA;AAHD;AACA,wCAAwC;AAKxC;;;;;;;;;;;;;EAaC,SAAA;EACA,gCAAA;EACA,gDAAA;EACA,yDAAA;EACA,iDAAA;AAHD;AAKA;EACC,kBAAA;EACA,aAAA;AAHD;AAKA;EACC,SAAA;EACA,kBAAA;EACA,QAAA;EACA,+BAAA;EACA,2BAAA;AAHD\",\"sourcesContent\":[\"/* Your app custom styles here */\\n/* login */\\n.md .item-input-focused .item-label,\\n.md .item-input-focused .item-floating-label {\\n\\tcolor: inherit;\\n}\\n.version {\\n\\tfont-family: roboto mono, source code pro, Menlo, Monaco, Consolas,\\n\\t\\tcourier new, monospace;\\n\\tfont-size: 10px;\\n}\\n.list-translucent {\\n\\tbackground-color: rgba(\\n\\t\\tvar(--f7-navbar-bg-color-rgb, var(--f7-bars-bg-color-rgb)),\\n\\t\\tvar(--f7-bars-translucent-opacity)\\n\\t) !important;\\n\\t-webkit-backdrop-filter: saturate(180%)\\n\\t\\tblur(var(--f7-bars-translucent-blur)) !important;\\n\\tbackdrop-filter: saturate(180%) blur(var(--f7-bars-translucent-blur)) !important;\\n}\\n.list-translucent ul {\\n\\tbackground-color: transparent !important;\\n}\\n/* Change Autocomplete styles in Chrome*/\\ninput:autofill,\\ninput:-webkit-autofill-strong-password,\\ninput:-webkit-autofill-strong-password-viewable,\\ninput:-webkit-autofill-and-obscured,\\ninput:-webkit-autofill,\\ninput:-webkit-autofill:hover,\\ninput:-webkit-autofill:focus,\\ntextarea:-webkit-autofill,\\ntextarea:-webkit-autofill:hover,\\ntextarea:-webkit-autofill:focus,\\nselect:-webkit-autofill,\\nselect:-webkit-autofill:hover,\\nselect:-webkit-autofill:focus {\\n\\tborder: 0;\\n\\t-webkit-text-fill-color: #f0582b;\\n\\t-webkit-box-shadow: 0 0 0px 1000px #366889 inset;\\n\\t-webkit-transition: background-color 5000s ease-in-out 0s;\\n\\ttransition: background-color 5000s ease-in-out 0s;\\n}\\n.vertical-container {\\n\\tposition: relative;\\n\\theight: 100vh;\\n}\\n.vertical-center {\\n\\tmargin: 0;\\n\\tposition: absolute;\\n\\ttop: 50%;\\n\\t-ms-transform: translateY(-50%);\\n\\ttransform: translateY(-50%);\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"/* Material Icons Font (for MD theme) */\\n@font-face {\\n  font-family: 'Material Icons';\\n  font-style: normal;\\n  font-weight: 400;\\n  src: local('Material Icons'), local('MaterialIcons-Regular'),\\n    url(/assets/mobile/fonts/material-icons.woff2) format('woff2'),\\n    url(/assets/mobile/fonts/material-icons.woff) format('woff');\\n}\\n.material-icons {\\n  font-family: 'Material Icons';\\n  font-weight: normal;\\n  font-style: normal;\\n  font-size: 24px;\\n  display: inline-block;\\n  line-height: 1;\\n  text-transform: none;\\n  letter-spacing: normal;\\n  word-wrap: normal;\\n  white-space: nowrap;\\n  direction: ltr;\\n  -webkit-font-smoothing: antialiased;\\n  text-rendering: optimizeLegibility;\\n  -moz-osx-font-smoothing: grayscale;\\n  font-feature-settings: 'liga';\\n}\\n\\n/* Framework7 Icons Font (for iOS theme) */\\n@font-face {\\n  font-family: 'Framework7 Icons';\\n  font-style: normal;\\n  font-weight: 400;\\n  src: url('/assets/mobile/fonts/Framework7Icons-Regular.woff2') format('woff2'),\\n    url('/assets/mobile/fonts/Framework7Icons-Regular.woff') format('woff');\\n}\\n.f7-icons {\\n  font-family: 'Framework7 Icons';\\n  font-weight: normal;\\n  font-style: normal;\\n  font-size: 28px;\\n  line-height: 1;\\n  letter-spacing: normal;\\n  text-transform: none;\\n  display: inline-block;\\n  white-space: nowrap;\\n  word-wrap: normal;\\n  direction: ltr;\\n  -webkit-font-smoothing: antialiased;\\n  text-rendering: optimizeLegibility;\\n  -moz-osx-font-smoothing: grayscale;\\n  -webkit-font-feature-settings: 'liga';\\n  -moz-font-feature-settings: 'liga=1';\\n  -moz-font-feature-settings: 'liga';\\n  font-feature-settings: 'liga';\\n  text-align: center;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/css/icons.css\"],\"names\":[],\"mappings\":\"AAAA,uCAAuC;AACvC;EACE,6BAA6B;EAC7B,kBAAkB;EAClB,gBAAgB;EAChB;;gEAE8D;AAChE;AACA;EACE,6BAA6B;EAC7B,mBAAmB;EACnB,kBAAkB;EAClB,eAAe;EACf,qBAAqB;EACrB,cAAc;EACd,oBAAoB;EACpB,sBAAsB;EACtB,iBAAiB;EACjB,mBAAmB;EACnB,cAAc;EACd,mCAAmC;EACnC,kCAAkC;EAClC,kCAAkC;EAClC,6BAA6B;AAC/B;;AAEA,0CAA0C;AAC1C;EACE,+BAA+B;EAC/B,kBAAkB;EAClB,gBAAgB;EAChB;2EACyE;AAC3E;AACA;EACE,+BAA+B;EAC/B,mBAAmB;EACnB,kBAAkB;EAClB,eAAe;EACf,cAAc;EACd,sBAAsB;EACtB,oBAAoB;EACpB,qBAAqB;EACrB,mBAAmB;EACnB,iBAAiB;EACjB,cAAc;EACd,mCAAmC;EACnC,kCAAkC;EAClC,kCAAkC;EAClC,qCAAqC;EACrC,oCAAoC;EACpC,kCAAkC;EAClC,6BAA6B;EAC7B,kBAAkB;AACpB\",\"sourcesContent\":[\"/* Material Icons Font (for MD theme) */\\n@font-face {\\n  font-family: 'Material Icons';\\n  font-style: normal;\\n  font-weight: 400;\\n  src: local('Material Icons'), local('MaterialIcons-Regular'),\\n    url(/assets/mobile/fonts/material-icons.woff2) format('woff2'),\\n    url(/assets/mobile/fonts/material-icons.woff) format('woff');\\n}\\n.material-icons {\\n  font-family: 'Material Icons';\\n  font-weight: normal;\\n  font-style: normal;\\n  font-size: 24px;\\n  display: inline-block;\\n  line-height: 1;\\n  text-transform: none;\\n  letter-spacing: normal;\\n  word-wrap: normal;\\n  white-space: nowrap;\\n  direction: ltr;\\n  -webkit-font-smoothing: antialiased;\\n  text-rendering: optimizeLegibility;\\n  -moz-osx-font-smoothing: grayscale;\\n  font-feature-settings: 'liga';\\n}\\n\\n/* Framework7 Icons Font (for iOS theme) */\\n@font-face {\\n  font-family: 'Framework7 Icons';\\n  font-style: normal;\\n  font-weight: 400;\\n  src: url('/assets/mobile/fonts/Framework7Icons-Regular.woff2') format('woff2'),\\n    url('/assets/mobile/fonts/Framework7Icons-Regular.woff') format('woff');\\n}\\n.f7-icons {\\n  font-family: 'Framework7 Icons';\\n  font-weight: normal;\\n  font-style: normal;\\n  font-size: 28px;\\n  line-height: 1;\\n  letter-spacing: normal;\\n  text-transform: none;\\n  display: inline-block;\\n  white-space: nowrap;\\n  word-wrap: normal;\\n  direction: ltr;\\n  -webkit-font-smoothing: antialiased;\\n  text-rendering: optimizeLegibility;\\n  -moz-osx-font-smoothing: grayscale;\\n  -webkit-font-feature-settings: 'liga';\\n  -moz-font-feature-settings: 'liga=1';\\n  -moz-font-feature-settings: 'liga';\\n  font-feature-settings: 'liga';\\n  text-align: center;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","var map = {\n\t\"./af\": 42786,\n\t\"./af.js\": 42786,\n\t\"./ar\": 30867,\n\t\"./ar-dz\": 14130,\n\t\"./ar-dz.js\": 14130,\n\t\"./ar-kw\": 96135,\n\t\"./ar-kw.js\": 96135,\n\t\"./ar-ly\": 56440,\n\t\"./ar-ly.js\": 56440,\n\t\"./ar-ma\": 47702,\n\t\"./ar-ma.js\": 47702,\n\t\"./ar-sa\": 16040,\n\t\"./ar-sa.js\": 16040,\n\t\"./ar-tn\": 37100,\n\t\"./ar-tn.js\": 37100,\n\t\"./ar.js\": 30867,\n\t\"./az\": 31083,\n\t\"./az.js\": 31083,\n\t\"./be\": 9808,\n\t\"./be.js\": 9808,\n\t\"./bg\": 68338,\n\t\"./bg.js\": 68338,\n\t\"./bm\": 67438,\n\t\"./bm.js\": 67438,\n\t\"./bn\": 8905,\n\t\"./bn-bd\": 76225,\n\t\"./bn-bd.js\": 76225,\n\t\"./bn.js\": 8905,\n\t\"./bo\": 11560,\n\t\"./bo.js\": 11560,\n\t\"./br\": 1278,\n\t\"./br.js\": 1278,\n\t\"./bs\": 80622,\n\t\"./bs.js\": 80622,\n\t\"./ca\": 2468,\n\t\"./ca.js\": 2468,\n\t\"./cs\": 5822,\n\t\"./cs.js\": 5822,\n\t\"./cv\": 50877,\n\t\"./cv.js\": 50877,\n\t\"./cy\": 47373,\n\t\"./cy.js\": 47373,\n\t\"./da\": 24780,\n\t\"./da.js\": 24780,\n\t\"./de\": 59740,\n\t\"./de-at\": 60217,\n\t\"./de-at.js\": 60217,\n\t\"./de-ch\": 60894,\n\t\"./de-ch.js\": 60894,\n\t\"./de.js\": 59740,\n\t\"./dv\": 5300,\n\t\"./dv.js\": 5300,\n\t\"./el\": 50837,\n\t\"./el.js\": 50837,\n\t\"./en-au\": 78348,\n\t\"./en-au.js\": 78348,\n\t\"./en-ca\": 77925,\n\t\"./en-ca.js\": 77925,\n\t\"./en-gb\": 22243,\n\t\"./en-gb.js\": 22243,\n\t\"./en-ie\": 46436,\n\t\"./en-ie.js\": 46436,\n\t\"./en-il\": 47207,\n\t\"./en-il.js\": 47207,\n\t\"./en-in\": 44175,\n\t\"./en-in.js\": 44175,\n\t\"./en-nz\": 76319,\n\t\"./en-nz.js\": 76319,\n\t\"./en-sg\": 31662,\n\t\"./en-sg.js\": 31662,\n\t\"./eo\": 92915,\n\t\"./eo.js\": 92915,\n\t\"./es\": 55655,\n\t\"./es-do\": 55251,\n\t\"./es-do.js\": 55251,\n\t\"./es-mx\": 96112,\n\t\"./es-mx.js\": 96112,\n\t\"./es-us\": 71146,\n\t\"./es-us.js\": 71146,\n\t\"./es.js\": 55655,\n\t\"./et\": 5603,\n\t\"./et.js\": 5603,\n\t\"./eu\": 77763,\n\t\"./eu.js\": 77763,\n\t\"./fa\": 76959,\n\t\"./fa.js\": 76959,\n\t\"./fi\": 11897,\n\t\"./fi.js\": 11897,\n\t\"./fil\": 42549,\n\t\"./fil.js\": 42549,\n\t\"./fo\": 94694,\n\t\"./fo.js\": 94694,\n\t\"./fr\": 94470,\n\t\"./fr-ca\": 63049,\n\t\"./fr-ca.js\": 63049,\n\t\"./fr-ch\": 52330,\n\t\"./fr-ch.js\": 52330,\n\t\"./fr.js\": 94470,\n\t\"./fy\": 5044,\n\t\"./fy.js\": 5044,\n\t\"./ga\": 29295,\n\t\"./ga.js\": 29295,\n\t\"./gd\": 2101,\n\t\"./gd.js\": 2101,\n\t\"./gl\": 38794,\n\t\"./gl.js\": 38794,\n\t\"./gom-deva\": 27884,\n\t\"./gom-deva.js\": 27884,\n\t\"./gom-latn\": 23168,\n\t\"./gom-latn.js\": 23168,\n\t\"./gu\": 95349,\n\t\"./gu.js\": 95349,\n\t\"./he\": 24206,\n\t\"./he.js\": 24206,\n\t\"./hi\": 30094,\n\t\"./hi.js\": 30094,\n\t\"./hr\": 30316,\n\t\"./hr.js\": 30316,\n\t\"./hu\": 22138,\n\t\"./hu.js\": 22138,\n\t\"./hy-am\": 11423,\n\t\"./hy-am.js\": 11423,\n\t\"./id\": 29218,\n\t\"./id.js\": 29218,\n\t\"./is\": 90135,\n\t\"./is.js\": 90135,\n\t\"./it\": 90626,\n\t\"./it-ch\": 10150,\n\t\"./it-ch.js\": 10150,\n\t\"./it.js\": 90626,\n\t\"./ja\": 39183,\n\t\"./ja.js\": 39183,\n\t\"./jv\": 24286,\n\t\"./jv.js\": 24286,\n\t\"./ka\": 12105,\n\t\"./ka.js\": 12105,\n\t\"./kk\": 47772,\n\t\"./kk.js\": 47772,\n\t\"./km\": 18758,\n\t\"./km.js\": 18758,\n\t\"./kn\": 79282,\n\t\"./kn.js\": 79282,\n\t\"./ko\": 33730,\n\t\"./ko.js\": 33730,\n\t\"./ku\": 1408,\n\t\"./ku.js\": 1408,\n\t\"./ky\": 33291,\n\t\"./ky.js\": 33291,\n\t\"./lb\": 36841,\n\t\"./lb.js\": 36841,\n\t\"./lo\": 55466,\n\t\"./lo.js\": 55466,\n\t\"./lt\": 57010,\n\t\"./lt.js\": 57010,\n\t\"./lv\": 37595,\n\t\"./lv.js\": 37595,\n\t\"./me\": 39861,\n\t\"./me.js\": 39861,\n\t\"./mi\": 35493,\n\t\"./mi.js\": 35493,\n\t\"./mk\": 95966,\n\t\"./mk.js\": 95966,\n\t\"./ml\": 87341,\n\t\"./ml.js\": 87341,\n\t\"./mn\": 5115,\n\t\"./mn.js\": 5115,\n\t\"./mr\": 10370,\n\t\"./mr.js\": 10370,\n\t\"./ms\": 9847,\n\t\"./ms-my\": 41237,\n\t\"./ms-my.js\": 41237,\n\t\"./ms.js\": 9847,\n\t\"./mt\": 72126,\n\t\"./mt.js\": 72126,\n\t\"./my\": 56165,\n\t\"./my.js\": 56165,\n\t\"./nb\": 64924,\n\t\"./nb.js\": 64924,\n\t\"./ne\": 16744,\n\t\"./ne.js\": 16744,\n\t\"./nl\": 93901,\n\t\"./nl-be\": 59814,\n\t\"./nl-be.js\": 59814,\n\t\"./nl.js\": 93901,\n\t\"./nn\": 83877,\n\t\"./nn.js\": 83877,\n\t\"./oc-lnc\": 92135,\n\t\"./oc-lnc.js\": 92135,\n\t\"./pa-in\": 15858,\n\t\"./pa-in.js\": 15858,\n\t\"./pl\": 64495,\n\t\"./pl.js\": 64495,\n\t\"./pt\": 89520,\n\t\"./pt-br\": 57971,\n\t\"./pt-br.js\": 57971,\n\t\"./pt.js\": 89520,\n\t\"./ro\": 96459,\n\t\"./ro.js\": 96459,\n\t\"./ru\": 21793,\n\t\"./ru.js\": 21793,\n\t\"./sd\": 40950,\n\t\"./sd.js\": 40950,\n\t\"./se\": 10490,\n\t\"./se.js\": 10490,\n\t\"./si\": 90124,\n\t\"./si.js\": 90124,\n\t\"./sk\": 64249,\n\t\"./sk.js\": 64249,\n\t\"./sl\": 14985,\n\t\"./sl.js\": 14985,\n\t\"./sq\": 51104,\n\t\"./sq.js\": 51104,\n\t\"./sr\": 49131,\n\t\"./sr-cyrl\": 79915,\n\t\"./sr-cyrl.js\": 79915,\n\t\"./sr.js\": 49131,\n\t\"./ss\": 85893,\n\t\"./ss.js\": 85893,\n\t\"./sv\": 98760,\n\t\"./sv.js\": 98760,\n\t\"./sw\": 91172,\n\t\"./sw.js\": 91172,\n\t\"./ta\": 27333,\n\t\"./ta.js\": 27333,\n\t\"./te\": 23110,\n\t\"./te.js\": 23110,\n\t\"./tet\": 52095,\n\t\"./tet.js\": 52095,\n\t\"./tg\": 27321,\n\t\"./tg.js\": 27321,\n\t\"./th\": 9041,\n\t\"./th.js\": 9041,\n\t\"./tk\": 19005,\n\t\"./tk.js\": 19005,\n\t\"./tl-ph\": 75768,\n\t\"./tl-ph.js\": 75768,\n\t\"./tlh\": 89444,\n\t\"./tlh.js\": 89444,\n\t\"./tr\": 72397,\n\t\"./tr.js\": 72397,\n\t\"./tzl\": 28254,\n\t\"./tzl.js\": 28254,\n\t\"./tzm\": 51106,\n\t\"./tzm-latn\": 30699,\n\t\"./tzm-latn.js\": 30699,\n\t\"./tzm.js\": 51106,\n\t\"./ug-cn\": 9288,\n\t\"./ug-cn.js\": 9288,\n\t\"./uk\": 67691,\n\t\"./uk.js\": 67691,\n\t\"./ur\": 13795,\n\t\"./ur.js\": 13795,\n\t\"./uz\": 6791,\n\t\"./uz-latn\": 60588,\n\t\"./uz-latn.js\": 60588,\n\t\"./uz.js\": 6791,\n\t\"./vi\": 65666,\n\t\"./vi.js\": 65666,\n\t\"./x-pseudo\": 14378,\n\t\"./x-pseudo.js\": 14378,\n\t\"./yo\": 75805,\n\t\"./yo.js\": 75805,\n\t\"./zh-cn\": 83839,\n\t\"./zh-cn.js\": 83839,\n\t\"./zh-hk\": 55726,\n\t\"./zh-hk.js\": 55726,\n\t\"./zh-mo\": 99807,\n\t\"./zh-mo.js\": 99807,\n\t\"./zh-tw\": 74152,\n\t\"./zh-tw.js\": 74152\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 46700;","import api from \"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../node_modules/css-loader/dist/cjs.js!../../node_modules/less-loader/dist/cjs.js!./app.less\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import api from \"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../node_modules/css-loader/dist/cjs.js?url=false!./icons.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","// const ABFactoryCore = require(\"./core/ABFactoryCore\");\nimport ABFactoryCore from \"./core/ABFactoryCore\";\n\nimport _ from \"lodash\";\n\nimport moment from \"moment\";\n// @TODO: what is F7 method of working with dates?  can we swap libraries with moment?\n\nimport { nanoid } from \"nanoid\";\nimport { v4 as uuidv4 } from \"uuid\";\n\n// import FilterComplex from \"./platform/FilterComplex\";\nimport FilterComplex from \"./platform/FilterComplex\";\n\nimport Definitions from \"../definitions.js\";\n\n//\n// Our Common Resources\n//\nimport Config from \"../resources/Config.js\";\n// Config : responsible for all the configuration/settings of our instance.\n\nimport Account from \"../resources/Account.js\";\n// Account : manages the current Logged in User and Account information.\n\n// import ClassUI from \"../ui/ClassUI.js\";\n\n// import Dialog from \"./_factory_utils/Dialog.js\";\n// // Dialog : common UI dialogs.\n\nimport Multilingual from \"../resources/Multilingual.js\";\n// Multilingual: our interface Labels and language options\n\nimport Network from \"../resources/Network.js\";\n// Network: our interface for communicating to our server\n\nimport Storage from \"../resources/Storage.js\";\n// Storage: manages our interface for local storage\n\nimport ABViewManager from \"./core/ABViewManagerCore\";\n\nimport Tenant from \"../resources/Tenant.js\";\n// Tenant: manages the Tenant information of the current instance\n\n// import UISettings from \"./uiSettings/config.js\";\n// // UISettings: detailed settings for our common UI elements\n\n// import Webix from \"../js/webix/webix.js\";\n// // NOTE: moved to require() because using import with webix_debug.js\n// // really messed things up!\n// // var Webix = require(\"../js/webix/webix-debug.js\");\n\nclass ABValidator {\n   constructor(AB) {\n      this.AB = AB;\n      this.errors = [];\n   }\n\n   addError(name, message) {\n      this.errors.push({ name: name, message: message });\n   }\n\n   pass() {\n      return this.errors.length == 0;\n   }\n\n   fail() {\n      return this.errors.length > 0;\n   }\n\n   toValidationObject() {\n      var obj = {\n         error: \"E_VALIDATION\",\n         invalidAttributes: {},\n      };\n\n      var attr = obj.invalidAttributes;\n\n      this.errors.forEach((e) => {\n         attr[e.name] = attr[e.name] || [];\n         attr[e.name].push(e);\n      });\n\n      return obj;\n   }\n\n   updateForm(form) {\n      var vObj = this.toValidationObject();\n      this.AB.Validation.isFormValidationError(vObj, form);\n   }\n\n   updateGrid(rowID, grid) {\n      var vObj = this.toValidationObject();\n      this.AB.Validation.isGridValidationError(vObj, rowID, grid);\n   }\n}\n\n//\n// AppBuilder Objects\n//\n\nclass ABFactory extends ABFactoryCore {\n   constructor(definitions) {\n      super(definitions);\n\n      // Common Reference to Configuration Values\n      this.Config = Config;\n      let appDiv = document.querySelector(\"#app\");\n      this.Config.settingsFromDiv(appDiv);\n\n      //\n      // Resources\n      //\n      this.Account = Account;\n      // this.Dialog = Dialog;\n      this.Multilingual = Multilingual;\n      this.Network = Network;\n      this.Storage = Storage;\n      this.Tenant = Tenant;\n      // this.Webix = Webix;\n\n      // Plugin Classes\n      // this.ClassUI = ClassUI;\n\n      // additional Class definitions\n      this.Class.FilterComplex = FilterComplex;\n      this.Class.ABViewManager = ABViewManager;\n\n      // Temp placeholders until Resources are implemented:\n      this.Analytics = {\n         log: () => {},\n         logError: () => {},\n      };\n      this.Lock = class Lock {\n         constructor() {}\n\n         acquire() {\n            return Promise.resolve();\n         }\n         release() {\n            return Promise.resolve();\n         }\n      };\n\n      // this.UISettings = UISettings;\n\n      this.Validation = {\n         validator: () => {\n            return new ABValidator(this);\n         },\n\n         errorSailsCleanup: function (error) {\n            if (error) {\n               //// if the error obj is provided by Sails response,\n               //// do some clean up on the error object:\n\n               // dig down to sails provided error object:\n               if (\n                  error.error &&\n                  error.error == \"E_UNKNOWN\" &&\n                  error.raw &&\n                  error.raw.length > 0\n               ) {\n                  error = error.raw[0];\n               }\n\n               // drill down to the embedded .err object if it exists\n               if (error.err) {\n                  error = error.err;\n               }\n\n               // if this is from our server response:\n               if (\n                  error.data &&\n                  error.data.error &&\n                  error.data.error == \"E_VALIDATION\"\n               ) {\n                  error = error.data;\n               }\n            }\n\n            return error;\n         },\n\n         /**\n          * @function AB.Validation.isFormValidationError\n          *\n          * scans the given error to see if it is a sails' response about an invalid\n          * value from one of the form elements.\n          *\n          * @codestart\n          * var form = $$('formID');\n          * var values = form.getValues();\n          * model.attr(values);\n          * model.save()\n          * .fail(function(err){\n          *     if (!OP.Form.isFormValidationError(err, form)) {\n          *         OP.error.log('Error saving current model ()', {error:err, values:values});\n          *     }\n          * })\n          * .then(function(newData){\n          *\n          * });\n          * @codeend\n          *\n          * @param {obj} error\n          *        the error response object\n          * @param {obj} form\n          *        the webix form instance (or reference)\n          * @return {bool}\n          *         true if error was about a form element.\n          *         false otherwise.\n          */\n         isFormValidationError: function (error, form) {\n            var hasFocused = false;\n            // {bool} have we set focus to form component?\n\n            // if we have an error object:\n            if (error) {\n               //// if the error obj is provided by Sails response,\n               //// do some clean up on the error object:\n\n               error = this.errorSailsCleanup(error);\n\n               //// Now process the error object\n               ////\n               if (\n                  (error.error && error.error == \"E_VALIDATION\") ||\n                  (error.code && error.code == \"E_VALIDATION\")\n               ) {\n                  var attrs = error.invalidAttributes;\n                  if (attrs) {\n                     var wasForm = false;\n                     for (var attr in attrs) {\n                        // if this is a field in the form:\n                        if (form.elements[attr]) {\n                           var errors = attrs[attr];\n                           var msg = [];\n                           errors.forEach(function (err) {\n                              msg.push(err.message);\n                           });\n\n                           // set the invalid error message\n                           form.markInvalid(attr, msg.join(\", \"));\n\n                           // set focus to the 1st form element we mark:\n                           if (!hasFocused) {\n                              form.elements[attr].focus();\n                              hasFocused = true;\n                           }\n\n                           wasForm = true;\n                        }\n                     }\n\n                     if (wasForm) {\n                        return true;\n                     }\n                  }\n               }\n            }\n\n            // if we missed updating our form with an error\n            // this was not a validation error so return false\n            return false;\n         },\n\n         /**\n          * @method AB.Validation.isGridValidationError\n          *\n          * scans the given error to see if it is a sails' response about an invalid\n          * value from one of our grid columns.\n          *\n          * @codestart\n          * var grid = $$('myGrid');\n          * model.attr(values);\n          * model.save()\n          * .fail(function(err){\n          *     if (!OP.Validation.isGridValidationError(err, editor, grid)) {\n          *         OP.error.log('Error saving current model ()', {error:err, values:values});\n          *     }\n          * })\n          * .then(function(newData){\n          *\n          * });\n          * @codeend\n          *\n          * @param {Error} error\n          *        the error response object\n          * @param {integer} row\n          *        the row id of the Grid to update.\n          * @param {webix.datatable} Grid\n          *        the webix grid instance (or reference)\n          * @return {bool}\n          *         true if error was about a grid column.\n          *         false otherwise.\n          */\n         isGridValidationError: function (error, row, Grid) {\n            // if we have an error object:\n            if (error) {\n               //// if the error obj is provided by Sails response,\n               //// do some clean up on the error object:\n\n               error = this.errorSailsCleanup(error);\n\n               //// Now process the error object\n               ////\n               if (\n                  (error.error && error.error == \"E_VALIDATION\") ||\n                  (error.code && error.code == \"E_VALIDATION\")\n               ) {\n                  var attrs = error.invalidAttributes;\n                  if (attrs) {\n                     var wasGrid = false;\n                     for (var attr in attrs) {\n                        Grid.addCellCss(row, attr, \"webix_invalid\");\n                        Grid.addCellCss(row, attr, \"webix_invalid_cell\");\n\n                        var msg = [];\n                        attrs[attr].forEach((e) => {\n                           msg.push(e.message);\n                        });\n\n                        webix.alert({\n                           text: attr + \": \" + msg.join(\", \"),\n                        });\n\n                        wasGrid = true;\n                     }\n\n                     Grid.refresh(row);\n                     Grid.clearSelection();\n\n                     if (wasGrid) {\n                        return true;\n                     }\n                  }\n               }\n            }\n\n            // if we missed updating our Grid with an error\n            // this was not a validation error so return false\n            return false;\n         },\n      };\n\n      // TODO: make sure \"error\" s are handled and sent to logs\n      // this.on(\"error\", ()=>{ Analytics.error })\n\n      this.Definitions = {};\n      // {obj} the provided interface for working with the ABDefinition table.\n      // NOTE: on the web client, we simply perform web API calls to perform\n      // the actions.  These are defined below.\n\n      this.on(\"error\", (err) => {\n         // this simply prevents thrown errors if there are no listeners.\n         console.error(err);\n      });\n\n      this._plugins = [];\n      // {array} of loaded Plugin.applications.\n\n      this._pendingNetworkRequests = {};\n      // {hash}   uuid : {Promise}\n      // convert our definitionsXXXX() operations to be Relay/offline compatible.\n      // if a queued operation is sent after a web browser refresh, then\n      // we will NOT have a pending promise to .resolve()/.reject()\n\n      this.Network.on(\"definition.create\", (context, err, fullDef) => {\n         var pending = this._pendingNetworkRequests[context.uuid];\n         if (err) {\n            // this.error(err);\n            pending?.reject(err);\n            return;\n         }\n\n         // for immediate feedback to our UI:\n         // simulate the RT update from our sockets:\n         var pkt = {\n            id: fullDef.id,\n            data: fullDef,\n         };\n         this.emit(\"ab.abdefinition.create\", pkt);\n\n         let newDef = this.definitionNew(fullDef);\n         pending?.resolve(newDef);\n      });\n\n      this.Network.on(\"definition.update\", (context, err, serverDef) => {\n         var pending = this._pendingNetworkRequests[context.uuid];\n         if (err) {\n            if (err.toString().indexOf(\"Not Found\") > -1) {\n               return this.definitionCreate(context.values)\n                  .then(pending?.resolve)\n                  .catch(pending?.reject);\n            }\n            // log the error\n            // this.error(err);\n            pending?.reject(err);\n            return;\n         }\n\n         this._definitions[context.id] = serverDef;\n\n         // for immediate feedback to our UI:\n         // simulate the RT update from our sockets:\n         var pkt = {\n            id: serverDef.id,\n            data: serverDef,\n         };\n         this.emit(\"ab.abdefinition.update\", pkt);\n\n         pending?.resolve(serverDef);\n      });\n\n      this.Network.on(\"definition.delete\", (context, err, serverDef) => {\n         var pending = this._pendingNetworkRequests[context.uuid];\n         if (err) {\n            // log the error\n            // this.error(err);\n            pending?.reject(err);\n            return;\n         }\n\n         delete this._definitions[context.id];\n\n         // for immediate feedback to our UI:\n         // simulate the RT update from our sockets:\n         var pkt = {\n            id: context.id,\n            data: serverDef,\n         };\n         this.emit(\"ab.abdefinition.delete\", pkt);\n\n         pending?.resolve();\n      });\n\n      //\n      // Rules\n      //\n      const platformRules = {\n         /**\n          * @method toDate\n          *\n          * @param {string} dateText\n          * @param {Object} options - {\n          *                               format: \"string\",\n          *                               ignoreTime: boolean\n          *                            }\n          * @return {Date}\n          */\n         toDate: (dateText = \"\", options = {}) => {\n            if (!dateText) return;\n\n            if (options.ignoreTime) dateText = dateText.replace(/T.*/, \"\");\n\n            let result = options.format\n               ? moment(dateText, options.format)\n               : moment(dateText);\n\n            let supportFormats = [\n               \"YYYY-MM-DD\",\n               \"YYYY/MM/DD\",\n               \"DD/MM/YYYY\",\n               \"MM/DD/YYYY\",\n               \"DD-MM-YYYY\",\n               \"MM-DD-YYYY\",\n            ];\n\n            supportFormats.forEach((format) => {\n               if (!result || !result.isValid())\n                  result = moment(dateText, format);\n            });\n\n            return new Date(result);\n         },\n\n         /**\n          * @method toDateFormat\n          *\n          * @param {Date} date\n          * @param {Object} options - {\n          *           format: \"string\",\n          *           localeCode: \"string\"\n          *         }\n          *\n          * @return {string}\n          */\n         toDateFormat: (date, options) => {\n            if (!date) return \"\";\n\n            let momentObj = moment(date);\n\n            if (options.localeCode) momentObj.locale(options.localeCode);\n\n            return momentObj.format(options.format);\n         },\n\n         /**\n          * @method subtractDate\n          *\n          * @param {Date} date\n          * @param {number} number\n          * @param {string} unit\n          *\n          * @return {Date}\n          */\n         subtractDate: (date, number, unit) => {\n            return moment(date).subtract(number, unit).toDate();\n         },\n\n         /**\n          * @method addDate\n          *\n          * @param {Date} date\n          * @param {number} number\n          * @param {string} unit\n          *\n          * @return {Date}\n          */\n         addDate: (date, number, unit) => {\n            return moment(date).add(number, unit).toDate();\n         },\n      };\n      (Object.keys(platformRules) || []).forEach((k) => {\n         this.rules[k] = platformRules[k];\n      });\n   }\n\n   /**\n    * init()\n    * prepare the ABFactory for operation. This includes parsing the\n    * definitions into useable objects, preparing the System Resources, etc.\n    * @return {Promise}\n    */\n   async init() {\n      //\n      // Prepare our Resources First\n      //\n      var allInits = [];\n\n      allInits.push(this.Account.init(this));\n      allInits.push(this.Multilingual.init(this));\n      allInits.push(this.Network.init(this));\n      allInits.push(this.Tenant.init(this));\n\n      await Promise.all(allInits);\n      await this.Storage.init(this);\n      var data = await this.Storage.get(\"local_settings\");\n      this._localSettings = data || {};\n\n      //\n      // Real Time Update Handlers\n      //\n\n      // new ABDefinition created:\n      this.on(\"ab.abdefinition.create\", (pkt) => {\n         // pkt.id : definition.id\n         // pkt.data : definition\n\n         if (typeof pkt.data.json == \"string\") {\n            try {\n               pkt.data.json = JSON.parse(pkt.data.json);\n            } catch (e) {\n               console.log(e);\n            }\n         }\n         this._definitions[pkt.id] = pkt.data;\n         this.definitionSync(\"created\", pkt.id, pkt.data);\n      });\n\n      // ABDefinition updated:\n      this.on(\"ab.abdefinition.update\", (pkt) => {\n         // pkt.id : definition.id\n         // pkt.data : definition\n         if (typeof pkt.data.json == \"string\") {\n            try {\n               pkt.data.json = JSON.parse(pkt.data.json);\n            } catch (e) {\n               console.log(e);\n            }\n         }\n         this._definitions[pkt.id] = pkt.data;\n         this.definitionSync(\"updated\", pkt.id, pkt.data);\n      });\n\n      // ABDefinition delete:\n      this.on(\"ab.abdefinition.delete\", (pkt) => {\n         // pkt.id : definition.id\n         // pkt.data : definition\n         if (typeof pkt.data.json == \"string\") {\n            try {\n               pkt.data.json = JSON.parse(pkt.data.json);\n            } catch (e) {\n               console.log(e);\n            }\n         }\n         delete this._definitions[pkt.id];\n         this.definitionSync(\"destroyed\", pkt.id, pkt.data);\n      });\n\n      return super.init();\n\n      // return Promise.all(allInits)\n      //    .then(() => {\n      //       // some Resources depend on the above to be .init() before they can\n      //       // .init() themselves.\n      //       return this.Storage.init(this).then(() => {\n      //          return this.Storage.get(\"local_settings\").then((data) => {\n      //             this._localSettings = data || {};\n      //          });\n      //       });\n      //    })\n      //    .then(() => {\n      //       //\n      //       // RealTime Updates of our ABDefinitions\n      //       //\n\n      //       // new ABDefinition created:\n      //       this.on(\"ab.abdefinition.create\", (pkt) => {\n      //          // pkt.id : definition.id\n      //          // pkt.data : definition\n\n      //          if (typeof pkt.data.json == \"string\") {\n      //             try {\n      //                pkt.data.json = JSON.parse(pkt.data.json);\n      //             } catch (e) {\n      //                console.log(e);\n      //             }\n      //          }\n      //          this._definitions[pkt.id] = pkt.data;\n      //          this.definitionSync(\"created\", pkt.id, pkt.data);\n      //       });\n\n      //       // ABDefinition updated:\n      //       this.on(\"ab.abdefinition.update\", (pkt) => {\n      //          // pkt.id : definition.id\n      //          // pkt.data : definition\n      //          if (typeof pkt.data.json == \"string\") {\n      //             try {\n      //                pkt.data.json = JSON.parse(pkt.data.json);\n      //             } catch (e) {\n      //                console.log(e);\n      //             }\n      //          }\n      //          this._definitions[pkt.id] = pkt.data;\n      //          this.definitionSync(\"updated\", pkt.id, pkt.data);\n      //       });\n\n      //       // ABDefinition delete:\n      //       this.on(\"ab.abdefinition.delete\", (pkt) => {\n      //          // pkt.id : definition.id\n      //          // pkt.data : definition\n      //          if (typeof pkt.data.json == \"string\") {\n      //             try {\n      //                pkt.data.json = JSON.parse(pkt.data.json);\n      //             } catch (e) {\n      //                console.log(e);\n      //             }\n      //          }\n      //          delete this._definitions[pkt.id];\n      //          this.definitionSync(\"destroyed\", pkt.id, pkt.data);\n      //       });\n\n      //       return super.init();\n      //    });\n   }\n\n   /**\n    * definiitonCreate(def)\n    * create a new ABDefinition\n    * @param {obj} def\n    *        the value hash of the new definition entry\n    * @return {Promise}\n    *        resolved with a new {ABDefinition} for the entry.\n    */\n   async definitionCreate(def) {\n      // we will set our uuid\n      if (typeof def.id == \"undefined\") {\n         def.id = this.uuid();\n         def.json.id = def.id;\n      }\n\n      return new Promise((resolve, reject) => {\n         var uuid = this.uuid();\n         this._pendingNetworkRequests[uuid] = { resolve, reject };\n         var jobResponse = {\n            key: \"definition.create\",\n            context: {\n               uuid,\n            },\n         };\n         this.Network.post(\n            {\n               url: `/definition/create`,\n               data: def,\n            },\n            jobResponse\n         ).catch((err) => {\n            var message = \"Error attempting to CREATE definitions\";\n            if (err.code == \"E_NOPERM\") {\n               message = \"User Doesn't have permission to CREATE definitions\";\n            }\n            this.notify.developer(err, {\n               context: \"ABFactory.definitionCreate()\",\n               message,\n               def,\n            });\n\n            // NOTE: when using jobResponse type calls, expect that\n            // handler to be handling the errors.\n            // don't keep propagating them here.\n         });\n      });\n   }\n\n   /**\n    * definitionDestroy(id)\n    * delete an ABDefinition\n    * @param {string} id\n    *        the uuid of the ABDefinition to delete\n    * @return {Promise}\n    */\n   async definitionDestroy(id) {\n      return new Promise((resolve, reject) => {\n         var uuid = this.uuid();\n         this._pendingNetworkRequests[uuid] = { resolve, reject };\n         var jobResponse = {\n            key: \"definition.delete\",\n            context: {\n               id,\n               uuid,\n            },\n         };\n         this.Network.delete(\n            {\n               url: `/definition/${id}`,\n            },\n            jobResponse\n         ).catch((err) => {\n            var message = \"Error attempting to DESTROY definitions\";\n            if (err.code == \"E_NOPERM\") {\n               message = \"User Doesn't have permission to DELETE definitions\";\n            }\n            this.notify.developer(err, {\n               context: \"ABFactory.definitionDestroy()\",\n               message,\n               id,\n            });\n\n            // NOTE: when using jobResponse type calls, expect that\n            // handler to be handling the errors.\n            // don't keep propagating them here.\n         });\n      });\n   }\n\n   /**\n    * definitionUpdate(id, def)\n    * update an existing ABDefinition\n    * @param {string} id\n    *        the uuid of the ABDefinition to update.\n    * @param {obj} values\n    *        the value hash of the new definition values\n    * @return {Promise}\n    *        resolved with a new {ABDefinition} for the entry.\n    */\n   async definitionUpdate(id, values) {\n      return new Promise((resolve, reject) => {\n         var uuid = this.uuid();\n         this._pendingNetworkRequests[uuid] = { resolve, reject };\n         var jobResponse = {\n            key: \"definition.update\",\n            context: {\n               id,\n               uuid,\n               values,\n            },\n         };\n         this.Network.put(\n            {\n               url: `/definition/${id}`,\n               data: values,\n            },\n            jobResponse\n         ).catch((err) => {\n            var message = \"Error attempting to UPDATE definitions\";\n            if (err.code == \"E_NOPERM\") {\n               message = \"User Doesn't have permission to UPDATE definitions\";\n            }\n            this.notify.developer(err, {\n               context: \"ABFactory.definitionUpdate()\",\n               message,\n            });\n\n            // NOTE: when using jobResponse type calls, expect that\n            // handler to be handling the errors.\n            // don't keep propagating them here.\n         });\n      });\n   }\n\n   /**\n    * definitionsParse()\n    * include the incoming definitions into our ABFactory. These new\n    * definitions will replace any existing ones with the same .id.\n    * @param {array[ABDefinitioin]} defs\n    *     the incoming array of ABDefinitions to parse.\n    * @return {Promise}\n    */\n   // definitionsParse(defs = []) {\n   //    if (!Array.isArray(defs)) {\n   //       defs = [defs];\n   //    }\n\n   //    // store/replace the incoming definitions\n   //    // 1st: insert ALL our definitions internally\n   //    defs.forEach((d) => {\n   //       this._definitions[d.id] = d;\n   //    });\n   //    // 2nd: Now we can then go through and signal the \"updates\"\n   //    // and the related objects can find their dependent definitions.\n   //    defs.forEach((d) => {\n   //       this.definitionSync(\"updated\", d.id, d);\n   //    });\n\n   //    return Promise.resolve();\n   // }\n\n   /**\n    * notify()\n    * will send alerts to a group of people. These alerts are usually about\n    * configuration errors, or software problems.\n    * @param {string} domain\n    *     which group of people we are sending a notification to.\n    * @param {Error} error\n    *     An error object generated at the point of issue.\n    * @param {json} info\n    *     Additional related information concerning the issue.\n    */\n   notify(domain, error, info) {\n      console.error(\"TODO: ABFactory.notify(): pass error off to analytics\");\n      console.error(error);\n      console.error(info);\n   }\n\n   plugins() {\n      return this._plugins;\n   }\n   pluginLoad(p) {\n      this._plugins.push(p);\n   }\n\n   //\n   // Utilities\n   //\n   alert(options) {\n      console.error(\"ABFactory.alert(): Who is calling this!\");\n      // Webix.alert(options);\n   }\n\n   cloneDeep(value) {\n      return _.cloneDeep(value);\n   }\n\n   error(message, ...rest) {\n      var emitData = {\n         message: `ABFactory[${this.Tenant.id()}]:${message.toString()}`,\n      };\n\n      console.error(emitData.message);\n      if (message instanceof Error) {\n         emitData.error = message;\n         // this dumps the error.stack\n         console.error(message);\n      }\n\n      if (rest && rest.length > 0) {\n         rest.forEach((r) => {\n            if (r instanceof Error) {\n               emitData.error = r;\n               // this dumps the error.stack\n               console.error(r);\n            }\n\n            if (typeof r == \"object\") {\n               for (var k in r) {\n                  emitData[k] = r[k];\n                  console.error(k, r[k]);\n               }\n            }\n         });\n      }\n      this.emit(\"error\", emitData);\n   }\n\n   jobID() {\n      return nanoid();\n   }\n\n   Label() {\n      return (...params) => {\n         return this.Multilingual.labelPlugin(\"mobile\", ...params);\n      };\n   }\n\n   localSettings(key, value) {\n      if (typeof value == \"undefined\") {\n         // this is a getter:\n         return this._localSettings[key];\n      } else {\n         // setting a value:\n         this._localSettings[key] = value;\n         return this.Storage.set(`local_settings`, this._localSettings);\n      }\n   }\n\n   log(message, ...rest) {\n      console.log(message);\n      rest.forEach((r) => {\n         console.log(r);\n      });\n   }\n\n   /**\n    * @method rules.isUUID\n    * evaluate a given value to see if it matches the format of a uuid\n    * @param {string} key\n    * @return {boolean}\n    */\n   isUUID(key) {\n      var checker = RegExp(\n         \"^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\",\n         \"i\"\n      );\n      return checker.test(key);\n   }\n\n   merge(...params) {\n      return _.merge(...params);\n   }\n\n   orderBy(...params) {\n      return _.orderBy(...params);\n   }\n\n   uniq(...params) {\n      return _.uniq(...params);\n   }\n\n   kebabCase(...params) {\n      return _.kebabCase(...params);\n   }\n\n   sumBy(...params) {\n      return _.sumBy(...params);\n   }\n\n   meanBy(...params) {\n      return _.meanBy(...params);\n   }\n\n   maxBy(...params) {\n      return _.maxBy(...params);\n   }\n\n   minBy(...params) {\n      return _.minBy(...params);\n   }\n\n   uuid() {\n      return uuidv4();\n   }\n\n   warn(message, ...rest) {\n      console.warn(message);\n      rest.forEach((r) => {\n         console.warn(r);\n      });\n   }\n\n   isString(...params) {\n      return _.isString(params);\n   }\n}\nconst AB = new ABFactory(Definitions.definitions);\nAB.Config.config(Window.__ab_config);\nawait AB.init();\n\nexport default AB;\n","/**\n * ABApplicationCore\n *\n * This is the core ABApplication class that manages the common operations\n * of an ABApplication across platforms.\n *\n * It's primary responsibility is to decode a given set of attributes into\n * a working instance of an ABApplication that can return instances of\n * it's defined sub objects.\n *\n * Platform Specific versions of those objects should be defined in a peer\n * directory named platform. These versions of the objects should override\n * these Core objects with platform specific methods of operation (like\n * .save()).\n *\n * Initially your target application should load your platform/ABApplication.js\n * file, which will include this file and sub class it.\n *\n * However, this file will include the remaining files from your platform/*\n * versions.\n */\n\n// webpack can handle 'require()' statements, but node can't handle import\n// so let's use require():\n// const ABViewManager = require(\"../platform/ABViewManager\");\nimport ABViewManager from \"../platform/ABViewManager\";\n\n// var ABMLClass = require(\"../platform/ABMLClass\");\nimport ABMLClass from \"../platform/ABMLClass\";\n\nfunction toBool(val) {\n   if (typeof val == \"undefined\") {\n      return false;\n   }\n\n   if (val === \"\" || val === \"false\" || val === \"0\") {\n      return false;\n   }\n\n   if (val === \"true\" || val === \"1\") {\n      return true;\n   }\n\n   return val;\n}\n\nexport default class ABApplicationCore extends ABMLClass {\n   constructor(attributes, AB) {\n      super([\"label\", \"description\"], AB);\n\n      // attributes should be in format:\n      // {\n      //    id:##,\n      //    json:{},\n      //    name:\"XYZ\"\n      // }\n      attributes.json = attributes.json || {};\n\n      // ABApplication Attributes\n      this.id = attributes.id;\n      // {string} uuid\n\n      this.type = attributes.type || \"application\";\n      // {string} .type\n      // the ABDefinition.type of this object.\n\n      this.appType = attributes.appType || \"web\";\n      // {string} .appType\n      // the kind of Application this is. [\"web\", \"mobile\"]\n\n      this.json = attributes.json;\n      if (typeof this.json == \"string\") this.json = JSON.parse(this.json);\n      // {obj} .json\n      // the full settings of this ABApplication\n\n      this.json[\"versionData\"] = attributes.json?.versionData || {\n         versionNumber: \"1.0.0\",\n         changeLog: {\n            \"1.0.0\": {\n               author: \"N/A\",\n               version: \"1.0.0\",\n               keepVersion: 0,\n               commitMessage: \"Initial Version\",\n               timestamp: new Date().toISOString(),\n            },\n         },\n      };\n\n      if (typeof this.json.versionData == \"string\")\n         this.json.versionData = JSON.parse(this.json.versionData);\n      // {obj} .json\n      // the full version log data of this ABApplication\n\n      this.name = attributes.name || this.json.name || \"\";\n      // {string} .name\n      // the hard coded name of this ABDefinition Object, not to be confused\n      // with the .label.  The .name is created at design time and is a text\n      // reference for this object.\n\n      this.icon = attributes.icon || \"fa-rocket\";\n      // {string} .icon\n      // this is a reference to a font awesome icon including the `fa-`\n      // example `fa-child` should be stored for the `child` icon to be used\n      // if user wants to get creative they can add more to this field following\n      // these examples https://fontawesome.com/v4/examples/\n\n      this.isSystemObject = toBool(attributes.isSystemObject);\n      // {bool} .isSystemObject\n      // is this one of the integrated System Objects used by our framework?\n      // Some ABApplications and ABObjects are central to the running of the\n      // AppBuilder site.  They are marked with .isSystemObject = true;  It\n      // requires the role \"System Designer\" in order to edit/modify them.\n\n      this.roleAccess = attributes.roleAccess || [];\n      if (!Array.isArray(this.roleAccess)) {\n         this.roleAccess = [this.roleAccess];\n      }\n      this.roleAccess = this.roleAccess.filter((r) => r);\n      // {array}\n      // the {ABSiteRole.id}s of the roles allowed to work with this\n      // ABApplication. (see .isAccessManaged for more info)\n\n      this.isAccessManaged = JSON.parse(attributes.isAccessManaged || false);\n      // {bool} .isAccessManaged\n      // does this Application imploy the more sophisticated  Access\n      // permissions, or the simpler Role access permissions.\n      // {true} : allows an administrator to set which role can View|Edit|Delete\n      //          elements of an application.\n      // {false}: indicates users having one of the .roleAccess values can have\n      //          full access to this application\n\n      this.accessManagers = attributes.accessManagers;\n      if (typeof this.accessManagers == \"string\")\n         this.accessManagers = JSON.parse(this.accessManagers);\n      // {??} .accessManagers\n      // if .isAccessManaged == true, then .accessManagers contain the definitions\n      // of the detailed access permissions.\n\n      this.isTranslationManaged = JSON.parse(\n         attributes.isTranslationManaged || false\n      );\n      this.translationManagers = attributes.translationManagers;\n      if (typeof this.translationManagers == \"string\")\n         this.translationManagers = JSON.parse(this.translationManagers);\n\n      this.isTutorialManaged = JSON.parse(\n         attributes.isTutorialManaged || false\n      );\n      this.tutorialManagers = attributes.tutorialManagers;\n      if (typeof this.tutorialManagers == \"string\")\n         this.tutorialManagers = JSON.parse(this.tutorialManagers);\n\n      this.hintIDs = attributes.json.hintIDs || [];\n      // {array} .hintIDs\n      // All the {ABHint.id} values that have been pulled into this\n      // ABApplication for use in it's design environment.  This is how we\n      // determine which {ABHint}s are included or excluded from\n      // this app.\n\n      this.objectIDs = attributes.json.objectIDs || [];\n      // {array} .objectIDs\n      // All the {ABObject.id} values that have been pulled into this\n      // ABApplication for use in it's design environment.  This is how we\n      // determine which {ABObject}s are included or excluded from this app.\n\n      this.queryIDs = attributes.json.queryIDs || [];\n      // {array} .queryIDs\n      // All the {ABObjectQuery.id} values that have been pulled into this\n      // ABApplication for use in it's design environment.  This is how we\n      // determine which {ABObjectQueries}s are included or excluded from\n      // this app.\n\n      this.datacollectionIDs = attributes.json.datacollectionIDs || [];\n      // {array} .datacollectionIDs\n      // All the {ABDataCollection.id} values that have been pulled into this\n      // ABApplication for use in it's design environment.  This is how we\n      // determine which {ABDataCollection}s are included or excluded from\n      // this app.\n\n      // import all our {ABViewPage}s\n      let newPages = [];\n      (attributes.json.pageIDs || []).forEach((id) => {\n         var def = this.AB.definitionByID(id);\n         if (def) {\n            newPages.push(this.pageNew(def));\n         } else {\n            this.emit(\n               \"warning\",\n               `App[${this.id}] is referenceing an unknown Page[${id}]`,\n               {\n                  appID: this.id,\n                  pageID: id,\n               }\n            );\n            // console.error(\n            //    `App[${this.id}] is referenceing an unknown Page[${id}]`\n            // );\n         }\n      });\n      this._pages = newPages;\n      // {array} ._pages\n      // an array of all the {ABViewPages} this ABApplication offers as\n      // interfaces for working with our Data.\n      // ABViewPages operate within the confines of an ABApplication so\n      // they are created/stored/accessed from within an ABApplication\n\n      (attributes.json.processIDs || []).forEach((pID) => {\n         var p = this.AB.processByID(pID);\n         if (!p) {\n            this.emit(\n               \"warning\",\n               `Application is referencing an unknown process.`,\n               { appID: this.id, processID: pID }\n            );\n         }\n      });\n\n      this.processIDs = attributes.json.processIDs || [];\n      // {array} .processIDs\n      // an array of all the {ABProcess.id}s referenced by this Application.\n\n      // Object List Settings\n      attributes.json.objectListSettings =\n         attributes.json.objectListSettings || {};\n      this.objectListSettings = this.objectListSettings || {};\n      this.objectListSettings.isOpen = JSON.parse(\n         attributes.json.objectListSettings.isOpen || false\n      );\n      this.objectListSettings.searchText =\n         attributes.json.objectListSettings.searchText || \"\";\n      this.objectListSettings.sortDirection =\n         attributes.json.objectListSettings.sortDirection || \"asc\";\n      this.objectListSettings.isGroup = JSON.parse(\n         attributes.json.objectListSettings.isGroup || false\n      );\n\n      // let the MLClass now process the translations:\n      // transition issues:\n      attributes.translations =\n         attributes.translations || attributes.json.translations;\n\n      super.fromValues(attributes);\n   }\n\n   ///\n   /// Static Methods\n   ///\n   /// Available to the Class level object.  These methods are not dependent\n   /// on the instance values of the Application.\n   ///\n\n   ///\n   /// Instance Methods\n   ///\n\n   get ViewManager() {\n      return ABViewManager;\n   }\n\n   /// ABApplication data methods\n   /**\n    * @method isAccessibleForRoles()\n    * return true/false if this ABApplication is accessible for one of the\n    * passed in ABRoles.\n    * @param {array[ABRole]} roles\n    *        an array of {ABRole} instances.\n    * @return {bool}\n    */\n   isAccessibleForRoles(roles) {\n      var foundRole = false;\n\n      // if we are on the basic Role assignments:\n      if (!this.isAccessManaged) {\n         (roles || []).forEach((r) => {\n            if (this.roleAccess.indexOf(r.uuid || r) > -1) {\n               foundRole = true;\n            }\n         });\n         return foundRole;\n      }\n\n      // isAccessManaged has been set, so 2 kinds of ppl can\n      // see this App\n      // 1) an AccessManager\n      if (parseInt(this.accessManagers.useRole)) {\n         (roles || []).forEach((r) => {\n            if (this.accessManagers.role.indexOf(r.uuid || r) > -1) {\n               foundRole = true;\n            }\n         });\n      }\n\n      // stop here if found.\n      if (foundRole) return foundRole;\n\n      // 2) someone who has a role that can see one of it's pages.\n      // scan each Page of this Application\n      (this.pages() || []).forEach((p) => {\n         // check to see if that page.isAccessibleForRoles()\n         if (p.isAccessibleForRoles(roles)) {\n            foundRole = true;\n         }\n      });\n      return foundRole;\n   }\n\n   get isWebApp() {\n      return this.appType == \"web\";\n   }\n\n   get isMobile() {\n      return this.appType == \"mobile\";\n   }\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABApplication instance\n    * into the values needed for saving to the DB.\n    *\n    * Most of the instance data is stored in .json field, so be sure to\n    * update that from all the current values of our child fields.\n    *\n    * @return {json}\n    */\n   toObj() {\n      // MLClass translation\n      let versionData = this.json.versionData;\n\n      this.json = super.toObj();\n\n      this.json.name = this.name;\n\n      this.json.versionData = versionData;\n\n      this.json.objectIDs = this.objectIDs;\n\n      this.json.objectListSettings = this.objectListSettings;\n\n      this.json.hintIDs = this.hintIDs;\n\n      this.json.queryIDs = this.queryIDs;\n\n      this.json.datacollectionIDs = this.datacollectionIDs;\n\n      this.json.pageIDs = (this._pages || []).map((p) => p.id);\n\n      this.json.processIDs = this.processIDs || [];\n\n      // // for each MobileApp: compile to json\n      // var currApps = [];\n      // this._mobileApps.forEach((app) => {\n      //    currApps.push(app.toObj())\n      // })\n      // this.json.mobileApps = currApps;\n\n      return {\n         id: this.id,\n         type: this.type || \"application\",\n         appType: this.appType || \"web\",\n         name: this.name,\n         icon: this.icon,\n         isSystemObject: this.isSystemObject,\n         json: this.json,\n         roleAccess: this.roleAccess,\n         translations: this.json.translations,\n         isAccessManaged: this.isAccessManaged,\n         isTranslationManaged: this.isTranslationManaged,\n         isTutorialManaged: this.isTutorialManaged,\n         accessManagers: this.accessManagers,\n         translationManagers: this.translationManagers,\n         tutorialManagers: this.tutorialManagers,\n      };\n   }\n\n   ///\n   /// Mobile Apps\n   ///\n\n   ///\n   /// Datacollections\n   ///\n\n   // datacollectionNew(values) {\n   //    return new ABDataCollectionCore(values, this);\n   // }\n\n   datacollectionsExcluded(filter = () => true) {\n      return this.AB.datacollections((o) => {\n         return this.datacollectionIDs.indexOf(o.id) == -1;\n      }).filter(filter);\n   }\n\n   datacollectionsIncluded(filter = () => true, sort) {\n      // by default sort by label\n      const sortFn = sort ?? ((a, b) => a.label.localeCompare(b.label));\n      return this.AB.datacollections((o) => {\n         return this.datacollectionIDs.indexOf(o.id) > -1;\n      })\n         .filter(filter)\n         .sort(sortFn);\n   }\n\n   ///\n   /// Objects\n   ///\n\n   objectsExcluded(filter = () => true) {\n      return this.AB.objects((o) => {\n         return this.objectIDs.indexOf(o.id) == -1;\n      }).filter(filter);\n   }\n\n   objectsIncluded(filter = () => true, sort) {\n      // by default sort by label\n      const sortFn = sort ?? ((a, b) => a.label.localeCompare(b.label));\n      return this.AB.objects((o) => {\n         return this.objectIDs.indexOf(o.id) > -1;\n      })\n         .filter(filter)\n         .sort(sortFn);\n   }\n\n   ///\n   /// Hints\n   ///\n\n   hintsExcluded(filter = () => true) {\n      return this.AB.hints((h) => {\n         return this.hintIDs.indexOf(h.id) == -1;\n      }).filter(filter);\n   }\n\n   hintsIncluded(filter = () => true, sort) {\n      // by default sort by label\n      const sortFn = sort ?? ((a, b) => a.label.localeCompare(b.label));\n      return this.AB.hints((h) => {\n         return this.hintIDs.indexOf(h.id) > -1;\n      })\n         .filter(filter)\n         .sort(sortFn);\n   }\n\n   /**\n    * @method connectedObjects()\n    *\n    * return an array of all the connected ABObjects for a given ABObject.\n    *\n    * @param {string} id\n    *        an ID of an ABObject\n    * @return {array}   array of options for webix select\n    *         [ {id, value}, ... ]\n    */\n   connectedObjects(id) {\n      console.error(\n         \"ABApplicationCore.connectedObjects(): who is calling this?\"\n      );\n\n      if (id == \"\") return [];\n\n      // Determine the object from the ID\n      var myObj = this.AB.objectByID(id);\n\n      // Get all the connected Fields for that object\n      var connectedFields = myObj.connectFields();\n      // Store the related fields associatively inside their related Objects ID\n      var connectedObj = {};\n      connectedFields.forEach((f) => {\n         connectedObj[f.settings.linkObject] = this.AB.objectByID(\n            f.settings.linkObject\n         );\n      });\n      // Look up the objects by their ID and push them in an options array\n      var linkedObjects = [];\n      Object.keys(connectedObj).forEach(function (key /*, index */) {\n         linkedObjects.push({\n            id: this[key].id,\n            value: this[key].label,\n         });\n      }, connectedObj /* = this. inside fn */);\n\n      return linkedObjects;\n   }\n\n   /**\n    * @method connectedFields()\n    * return an array of all the connected ABFields for a given ABObject\n    * @param {string} currObjID\n    *        an ID of the current ABObject\n    * @param {string} linkedObjectID\n    *        an ID of the linked ABObject\n    * @return {array}\n    *        array of options for webix select\n    */\n   connectedFields(currObjID, linkedObjectID) {\n      console.error(\"!!! Who is calling this?\");\n\n      // Determine the object from the currObjID\n      var myObj = this.AB.objectByID(currObjID);\n\n      // Get all the connected Fields for our object that match the linkedObjectID\n      var connectedFields = myObj.connectFields(\n         (f) => f.settings.linkObject == linkedObjectID\n      );\n      // Build an arry of options for the webix select\n      var linkedFields = [];\n      connectedFields.forEach((f) => {\n         linkedFields.push({ id: f.columnName, value: f.label });\n      });\n\n      return linkedFields;\n   }\n\n   ///\n   /// Pages\n   ///\n\n   /**\n    * @method pages()\n    * return an array of all the ABViewPages for this ABApplication.\n    * @param {fn} filter\n    *        a filter fn to return a set of ABViewPages that this fn\n    *        returns true for.\n    * @param {boolean} deep\n    *        flag to search in sub pages\n    * @return {array}\n    *        array of ABViewPages\n    */\n   pages(filter = () => true, deep = false) {\n      var result = [];\n\n      if (!this._pages || this._pages.length < 1) return result;\n\n      // find into sub-pages recursively\n      if (filter && deep) {\n         result = this._pages.filter(filter);\n\n         if (result.length < 1) {\n            this._pages.forEach((p) => {\n               var subPages = p.pages(filter, deep);\n               if (subPages && subPages.length > 0) {\n                  result = subPages;\n               }\n            });\n         }\n      }\n      // find root pages\n      else {\n         result = (this._pages || []).filter(filter);\n      }\n\n      return result;\n   }\n\n   ///\n   /// Processes\n   ///\n\n   /**\n    * @method processes()\n    * return an array of all the ABProcesses for this ABApplication.\n    * @param {fn} filter\n    *        a filter fn to return a set of ABProcesses that\n    *        this fn returns true for.\n    * @return {array}\n    *        array of ABProcesses\n    */\n   processes(filter = () => true) {\n      return this.AB.processes((p) => {\n         return this.processIDs.indexOf(p.id) > -1;\n      }).filter(filter);\n   }\n\n   hasProcess(process) {\n      if (process && process.id) {\n         return this.processIDs.indexOf(process.id) > -1;\n      } else {\n         return false;\n      }\n   }\n\n   ///\n   /// Views\n   ///\n\n   /**\n    * @method views()\n    * return an array of all the Views for this ABApplication.\n    * @param {fn} filter\n    *        a filter fn to return a set of Views that this fn\n    *        returns true for.\n    * @return {array}\n    *        array of Views\n    */\n   views(filter) {\n      var result = [];\n      var views = [];\n      var pages = [];\n\n      if (\n         (!this._pages || this._pages.length < 1) &&\n         (!this._views || this._views.length < 1)\n      )\n         return result;\n\n      function lookDeep(view) {\n         if (view._pages && view._pages.length) {\n            view._pages.forEach((p) => {\n               // check the page views recusively\n               var pageViews = p.views(filter, true);\n               // if there was a match store it\n               if (pageViews && pageViews.length > 0) {\n                  result = pageViews;\n               }\n               // if no match move on to the subpages\n               if (result.length < 1) {\n                  // loop through each subpage recursively\n                  var subPages = p.pages(filter, true);\n                  // if there was a match store it\n                  if (subPages && subPages.length > 0) {\n                     result = subPages;\n                  }\n                  if (result.length < 1) {\n                     lookDeep(p);\n                  }\n               }\n            });\n         }\n      }\n\n      // look at views recursively\n      if (filter) {\n         // look at views recursively (views can have subviews and so on)\n         if (this._views) {\n            views = this._views.filter(filter);\n\n            if (views.length < 1) {\n               this._views.forEach((v) => {\n                  var subViews = v.views(filter, true);\n                  if (subViews && subViews.length > 0) {\n                     views = subViews;\n                  }\n               });\n            }\n         }\n\n         // if no views of the root page match now look at the sub pages and their views\n         if (views.length) {\n            result = views;\n         } else {\n            // check the first level subpages\n            result = this._pages.filter(filter);\n\n            // if no match check each pages views and subpages\n            if (result.length < 1) {\n               // looping through pages\n               lookDeep(this);\n            }\n         }\n      }\n      // find all views\n      else {\n         // recusively gather all views on this view\n         if (this._views) {\n            views = this._views;\n            if (views.length) {\n               views.forEach((v) => {\n                  var subViews = v.views(() => true, true);\n                  if (subViews && subViews.length) {\n                     views = views.concat(subViews);\n                  }\n               });\n            }\n         }\n\n         // recursively gather all pages and their views\n         if (this._pages) {\n            pages = this._pages;\n            if (pages.length) {\n               pages.forEach((p) => {\n                  // grab all views on this page\n                  var pageViews = p.views(() => true, true);\n                  if (pageViews && pageViews.length) {\n                     views = views.concat(pageViews);\n                  }\n                  // grab all subpages on this page\n                  var subPages = p.pages(() => true, true);\n                  if (subPages && subPages.length) {\n                     pages = pages.concat(subPages);\n                     subPages.forEach((sub) => {\n                        var subViews = sub.views(() => true, true);\n                        if (subViews && subViews.length) {\n                           views = views.concat(subViews);\n                        }\n                     });\n                  }\n               });\n            }\n         }\n\n         result = result.concat(pages, views);\n      }\n\n      return result;\n   }\n\n   /**\n    * @method viewAll()\n    * return a list of all the {ABViewxxx} classes available.\n    * @return {array} of ABView objects\n    */\n   viewAll(fn = () => true) {\n      return this.ViewManager.allViews(fn);\n   }\n\n   ///\n   /// Queries\n   ///\n\n   /**\n    * queriesExcluded()\n    * return a list of ABObjectQuery(s) that are not included in this\n    * ABApplication.\n    * @param {fn} filter\n    *        a filter fn to further reduce which queries to return.\n    * @return {array}\n    */\n   queriesExcluded(filter = () => true) {\n      return this.AB.queries((q) => {\n         return this.queryIDs.indexOf(q.id) == -1;\n      }).filter(filter);\n   }\n\n   /**\n    * queriesIncluded()\n    * return a list of ABObjectQuery(s) that are included in this\n    * ABApplication.\n    * @param {fn} filter\n    *        a filter fn to further reduce which queries to return.\n    * @param {fn} [sort] function to sort by, default is .label\n    * @return {array}\n    */\n   queriesIncluded(filter = () => true, sort) {\n      // by default sort by label\n      const sortFn = sort ?? ((a, b) => a.label.localeCompare(b.label));\n      return this.AB.queries((q) => {\n         return this.queryIDs.indexOf(q.id) > -1;\n      })\n         .filter(filter)\n         .sort(sortFn);\n   }\n\n   ///\n   /// Roles\n   ///\n\n   /**\n    * @method roles()\n    * return an array of all the ABRole for this ABApplication.\n    * @param {fn} filter\n    *        a filter fn to further reduce which roles to return.\n    * @return {array}   array of ABRole\n    */\n   // roles(filter = () => true) {\n   //    return (this.role || []).filter(filter);\n   // }\n\n   /**\n    * @method urlResolve()\n    * given an object pointer, return the specific object referenced.\n    * pointer must start with a '#', use '/' as delimiters, and either\n    * reference an object's .id, or an object's .property.\n    * for example:\n    * #/_objects   : resolves to the array of ._objects pointed to by this\n    *               application.\n    * #/_objects/[object.id] : reolved to a specific object\n    * #/_objects/[object.id]/_fields/[field.id] : resolves to a specific data field\n    *               refereced by object.id.\n    *\n    * @param {string} pointer : the string url referencing the object you want\n    *                       to retrieve.\n    * @return {obj}\n    */\n   urlResolve(pointer) {\n      var parts = pointer.split(\"/\");\n\n      var parseStep = (obj, steps) => {\n         // we're done.  obj is what we are looking for:\n         if (steps.length == 0) {\n            return obj;\n         }\n\n         // pull the next step key:\n         var key = steps.shift();\n\n         // special case, \"#\" makes sure we are talking about the\n         // Application object\n         if (key == \"#\") {\n            return parseStep(this, steps);\n         }\n\n         // if obj is an [], then key should be an .id reference to\n         // lookup:\n         if (Array.isArray(obj)) {\n            obj = obj.filter(function (o) {\n               return o.id == key;\n            })[0];\n            return parseStep(obj, steps);\n         }\n\n         // otherwise obj should be an {} and key a property:\n         if (obj && obj[key]) {\n            return parseStep(obj[key], steps);\n         }\n\n         if (key == \"_objects\") {\n            console.error(new Error(\"REFACTOR: old objectBy url reference:\"));\n\n            // This can be gotten from our AB\n            var id = steps.shift();\n            return parseStep(this.AB.objectByID(id), steps);\n         }\n\n         // if we got here, there is an error!\n         // console.error('!!! failed to lookup url:'+pointer);\n         console.error(\"!!! failed to lookup url:\" + pointer);\n         return null;\n      };\n\n      return parseStep(this, parts);\n   }\n\n   /**\n    * @method urlPointer()\n    * return the url pointer for this application.\n    *\n    * @param {boolean} acrossApp - flag to include application id to url\n    *\n    * @return {string}\n    */\n   urlPointer(acrossApp) {\n      // NOTE: if we need to expand this to search across\n      // applications, then add in this application.id here:\n      if (acrossApp) return \"#/\" + this.id + \"/\";\n      else return \"#/\";\n   }\n\n   /**\n    * @method urlObject()\n    * return the url pointer for objects in this application.\n    *\n    * @param {boolean} acrossApp - flag to include application id to url\n    *\n    * @return {string}\n    */\n   urlObject(acrossApp) {\n      return this.urlPointer(acrossApp) + \"_objects/\";\n   }\n\n   /**\n    * @method urlView()\n    * return the url pointer for pages in this application.\n    *\n    * @param {boolean} acrossApp - flag to include application id to url\n    *\n    * @return {string}\n    */\n   urlPage(acrossApp) {\n      return this.urlPointer(acrossApp) + \"_pages/\";\n   }\n\n   /**\n    * @method urlQuery()\n    * return the url pointer for queries in this application.\n    *\n    * @param {boolean} acrossApp - flag to include application id to url\n    *\n    * @return {string}\n    */\n   urlQuery(acrossApp) {\n      return this.urlPointer(acrossApp) + \"_queries/\";\n   }\n\n   ///\n   ///   Object List Settings\n   ///\n   get objectlistIsOpen() {\n      return this.objectListSettings.isOpen;\n   }\n\n   set objectlistIsOpen(isOpen) {\n      this.objectListSettings.isOpen = isOpen;\n   }\n\n   get objectlistSearchText() {\n      return this.objectListSettings.searchText;\n   }\n\n   set objectlistSearchText(searchText) {\n      this.objectListSettings.searchText = searchText;\n   }\n\n   get objectlistSortDirection() {\n      return this.objectListSettings.sortDirection;\n   }\n\n   set objectlistSortDirection(sortDirection) {\n      this.objectListSettings.sortDirection = sortDirection;\n   }\n\n   get objectlistIsGroup() {\n      return this.objectListSettings.isGroup;\n   }\n\n   set objectlistIsGroup(isGroup) {\n      this.objectListSettings.isGroup = isGroup;\n   }\n\n   ///\n   /// Instance generators\n   ///\n\n   /**\n    * @method pageNew()\n    *\n    * return an instance of a new (unsaved) ABViewPage that is tied to this\n    * ABApplication.\n    *\n    * NOTE: this new page is not included in our this.pages until a .save()\n    * is performed on the page.\n    *\n    * @return {ABViewPage}\n    */\n   pageNew(values) {\n      // make sure this is an ABViewPage description\n      // values.key = ABViewPageCore.common().key;\n      values.key = \"page\";\n\n      return this.ViewManager.newView(values, this, null);\n   }\n\n   /**\n    * @method pageByID()\n    * return pages from the given {id}\n    * @param {string} id\n    *        the uuid of the page to return.\n    * @return {ABViewPage}\n    */\n   pageByID(id) {\n      return this.pages((f) => f.id == id)[0];\n   }\n\n   get urlCurrentVersion() {\n      return `/mobile/version/${this.id}`;\n   }\n\n   get version() {\n      return this.json.versionData?.versionNumber || \"0.0.0\";\n   }\n\n   /**\n    * @method viewNew()\n    *\n    * return an instance of a new (unsaved) ABView.\n    *\n    * @return {ABView}\n    */\n   viewNew(values, application, parent) {\n      return this.ViewManager.newView(values, application, parent);\n   }\n\n   ///\n   /// Utilities\n   ///\n\n   cloneDeep(/* object */) {\n      var errorDepreciated = new Error(\n         \"ABApplicationCore.cloneDeep(): Depreciated!  Use AB.cloneDeep() instead.\"\n      );\n      throw errorDepreciated;\n\n      // return JSON.parse(JSON.stringify(object));\n   }\n}\n","/**\n * ABApplicationMobileCore\n *\n * This is the core ABApplicationMobile class that manages the common operations\n * of a Mobile PWA ABApplication.\n */\n\n// webpack can handle 'require()' statements, but node can't handle import\n// so let's use require():\nconst ABViewManagerMobile = require(\"../platform/ABViewManager\");\nimport ABApplication from \"../platform/ABApplication\";\n\nexport default class ABApplicationMobileCore extends ABApplication {\n   constructor(attributes, AB) {\n      super(attributes, AB);\n      this.appType = \"mobile\"; // Just making sure.\n      this.networkType = attributes.networkType;\n   }\n\n   ///\n   /// Static Methods\n   ///\n   /// Available to the Class level object.  These methods are not dependent\n   /// on the instance values of the Application.\n   ///\n\n   ///\n   /// Instance Methods\n   ///\n\n   get ViewManager() {\n      return ABViewManagerMobile;\n   }\n\n   pageNew(def) {\n      console.error(\"TODO: pageNew for ApplicationMobile\");\n      return null;\n   }\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABApplication instance\n    * into the values needed for saving to the DB.\n    *\n    * Most of the instance data is stored in .json field, so be sure to\n    * update that from all the current values of our child fields.\n    *\n    * @return {json}\n    */\n   toObj() {\n      var json = super.toObj();\n      json.appType = \"mobile\";\n      json.networkType = this.networkType;\n\n      return json;\n   }\n}\n","/*\n * ABDataCollection\n * Defines a set of data that other parts of the Application can work with.\n * it can point to either an ABObject, or ABObjectQuery, and can have an\n * filter, and sorts defined.\n *\n *\n *\n */\n// const ABEmitter = require(\"../platform/ABEmitter\");\nimport ABMLClass from \"../platform/ABMLClass\";\n\n// const ABObject = require(\"../platform/ABObject\");\n// const ABObjectQuery = require(\"../platform/ABObjectQuery\");\n// const RowFilter = require(\"../platform/RowFilter\");\n\nvar DefaultValues = {\n   id: \"uuid\",\n   label: \"\", // label\n   object: {}, // json of ABObject\n   query: {}, // json of ABObjectQuery\n   settings: {\n      datasourceID: \"\", // id of ABObject or ABObjectQuery\n      linkDatacollectionID: \"\", // id of ABDatacollection\n      linkFieldID: \"\", // id of ABField\n      followDatacollectionID: \"\", // id of ABDatacollection\n      objectWorkspace: {\n         filterConditions: {\n            // array of filters to apply to the data table\n            glue: \"and\",\n            rules: [],\n         },\n         sortFields: [], // array of columns with their sort configurations\n      },\n      loadAll: false,\n      // preventPopulate: false, depreciating in favour of populate\n      populate: true, // true/false or array of columns to populate.\n      isQuery: false, // if true it is a query, otherwise it is a object.\n\n      fixSelect: \"\", // _CurrentUser, _FirstRecord, _FirstRecordDefault or row id\n\n      syncType: 1, // 1 (Server), 2 (Client)\n   },\n};\n\nconst QueuedOperations = [];\n// {array} of operations that we want to perform but allow some space\n// between operations.\nvar _queueTimer = null;\n\nfunction runQueue() {\n   // if (!_queueTimer) {\n   //    _queueTimer = setInterval(() => {\n   //       runQueue();\n   //    }, 20);\n   // }\n   if (QueuedOperations.length == 0) {\n      // stop\n      // clearInterval(_queueTimer);\n      _queueTimer = null;\n      return;\n   }\n   var op = QueuedOperations.shift();\n   op.fn();\n   _queueTimer = setTimeout(runQueue, op.timeout);\n}\nfunction queueOperation(fn, timeout = 20) {\n   QueuedOperations.push({ fn, timeout });\n   if (!_queueTimer) {\n      runQueue();\n   }\n}\n\nexport default class ABDataCollectionCore extends ABMLClass {\n   constructor(attributes, AB) {\n      super([\"label\"], AB);\n\n      attributes = attributes || {};\n\n      // this.application = application;\n\n      this.fromValues(attributes);\n\n      this.__dataCollection = this._dataCollectionNew([]);\n      // {DataCollection}\n      // This is a working instance of a DataCollection, not an {ABDatacCollection}\n      // On web/mobile this is a webix component.  So keep the creation as part of\n      // the platform/ABDataCollection implementation.\n\n      // Set filter value\n      this.refreshFilterConditions();\n\n      this.__bindComponentIds = [];\n      this.__flexComponentIds = [];\n\n      // refresh a data collection\n      // this.init();\n\n      // mark data status does not be initialized\n      this._dataStatus = this.dataStatusFlag.notInitial;\n\n      this.__filterCond = null;\n      // {QueryCondition}\n      // A passed in Query Condition for filtering our DataCollection.\n      // This value is ANDed with our normal filter conditions.\n   }\n\n   /**\n    * contextKey()\n    *\n    * return a unique key that represents data from/for this type of object.\n    *\n    * used when creating Network jobs and needing to be notified when a job\n    * is complete.  We send a contextKey() to the Network job and then listen\n    * for it to know when it is complete.\n    * @return {string}\n    */\n   static contextKey() {\n      return \"datacollection\";\n   }\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      this.id = values.id;\n      // {string} .id\n      // the uuid of this ABDataCollection Definition.\n\n      this.name = values.name || null;\n      // {string} .name\n      // the unchanging name of this ABDataCollection\n\n      this.type = values.type || \"datacollection\";\n      // {string} .type\n      // the type of ABDefinition this is.\n\n      values.settings = values.settings || {};\n      this.settings = this.settings || {};\n      // {obj} .settings\n      // the specific operation values for this ABDataCollection\n\n      this.settings.linkDatacollectionID =\n         values.settings.linkDatacollectionID ||\n         DefaultValues.settings.linkDatacollectionID;\n      // {string} .settings.linkDaacollectionID\n      // the uuid of another ABDataCollection that provides the link/trigger\n      // for filtering the values of this ABDataCollection.\n\n      this.settings.linkFieldID =\n         values.settings.linkFieldID || DefaultValues.settings.linkFieldID;\n      // {string} .settings.linkFieldID\n      // the uuid of the ABDataField of the .linkDatacollection ABObject\n      // whose value is the trigger value for this ABDataCollection\n\n      this.settings.followDatacollectionID =\n         values.settings.followDatacollectionID ||\n         DefaultValues.settings.followDatacollectionID;\n      // {string} .settings.followDatacollectionID\n      // the uuid of another ABDataCollection that provides the follow cursor data collection\n\n      this.settings.objectWorkspace = values.settings.objectWorkspace || {\n         filterConditions:\n            DefaultValues.settings.objectWorkspace.filterConditions,\n         sortFields: DefaultValues.settings.objectWorkspace.sortFields,\n      };\n      // {obj} .settings.objectWorkspace\n      // the default settings for what is shown in the AppBuilder's\n      // DataCollection workspace\n\n      this.settings.fixSelect = values.settings.fixSelect;\n\n      // Convert to boolean\n      this.settings.loadAll = JSON.parse(\n         values.settings.loadAll || DefaultValues.settings.loadAll\n      );\n      // {bool} .settings.loadAll\n      // do we load all the data at one time? false == load by pages.\n\n      this.settings.isQuery = JSON.parse(\n         values.settings.isQuery || DefaultValues.settings.isQuery\n      );\n      // {bool} .settings.isQuery\n      // is the data source for this ABDataCollection based upon an\n      // ABObjectQuery?\n\n      this.settings.populate = (() => {\n         // First check .populate\n         if (values.settings.populate != undefined) {\n            return values.settings.populate;\n            // Then check legacy .preventPopulate\n         } else if (\n            values.settings.preventPopulate == true ||\n            values.settings.preventPopulate == \"1\"\n         ) {\n            return false;\n         } else return DefaultValues.settings.populate;\n      })();\n      // {bool | array} populate\n      // Control whcih related connections to populate. Default, true, populates\n      // all connections. False loads no connnections. Also accepts an array of\n      // column names to load specefic connections.\n\n      // Convert to number\n      this.settings.syncType = parseInt(\n         values.settings.syncType || DefaultValues.settings.syncType\n      );\n      // {int} .settings.syncType\n      // how is the data between this ABDataCollection and it's\n      // .datasource synced?\n\n      this.__datasource = null;\n      // {obj} .__datasource\n      // the reference to the ABObject/ABObjectQuery that this ABDataCollection\n      // is based off of.\n\n      this.settings.datasourceID =\n         values.settings.datasourceID || DefaultValues.settings.datasourceID;\n      // {string} .settings.datasourceID\n      // the uuid of the .__datasource object to use\n\n      // now lookup and reference the proper datasource\n      if (this.settings.datasourceID) {\n         // check for an ABObject\n         var obj = this.AB.objectByID(this.settings.datasourceID);\n         if (!obj) {\n            // this must be an ABObjectQuery then ...\n            obj = this.AB.queryByID(this.settings.datasourceID);\n         }\n\n         if (obj) {\n            this.__datasource = obj;\n            this.settings.isQuery = obj.type === \"query\";\n            if (this.settings.isQuery) {\n               if (this.__datasource.isGroup) {\n                  if (!this.__treeCollection)\n                     this.__treeCollection = this._treeCollectionNew();\n                  // {TreeCollection}\n                  // This is a webix TreeCollection (or similar)\n                  // keep it's implementation as part of the platform\n\n                  this.__isGroup = true;\n               }\n            }\n         } else {\n            console.error(\n               `ABDataCollection[${this.name}][${this.id}] unable to find datasource [${this.settings.datasourceID}]`\n            );\n         }\n      }\n\n      // // Populate data source: ABObject or ABObjectQuery\n      // if (values.query && values.query[0]) {\n      //    this.__datasource = new ABObjectQuery(\n      //       values.query[0],\n      //       this.application\n      //    );\n      //    this.settings.isQuery = true;\n\n      //    if (this.__datasource.isGroup) {\n      //       if (!this.__treeCollection)\n      //          this.__treeCollection = this._treeCollectionNew();\n\n      //       this.__isGroup = true;\n      //    }\n      // } else if (values.object && values.object[0]) {\n      //    this.__datasource = new ABObject(values.object[0], this.application);\n      //    this.settings.isQuery = false;\n      // }\n\n      // let the MLClass now process the translations:\n      super.fromValues(values);\n   }\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABApplication instance\n    * into the values needed for saving to the DB.\n    *\n    * Most of the instance data is stored in .json field, so be sure to\n    * update that from all the current values of our child fields.\n    *\n    * @return {json}\n    */\n   toObj() {\n      var obj = super.toObj(); // untranslate the object\n\n      return {\n         id: this.id,\n         name: this.name || this.label,\n         type: this.type || \"datacollection\",\n         settings: this.AB.cloneDeep(this.settings || {}),\n         translations: obj.translations,\n      };\n   }\n\n   /**\n    * @method save()\n    *\n    * persist this instance of ABDatacollection with it's parent\n    *\n    *\n    * @return {Promise}\n    *      .resolve( {this} )\n    */\n   async save() {\n      if (!this.id) {\n         this.label = this.label || this.name;\n      }\n      await super.save();\n      return this;\n   }\n\n   /**\n    * @method destroy()\n    *\n    * destroy the current instance of ABDatacollection\n    *\n    * also remove it from our parent application\n    *\n    * @return {Promise}\n    */\n   destroy() {\n      var removeFromApplications = () => {\n         return new Promise((next, err) => {\n            // this.AB.applications().then((apps) => {\n\n            const apps = this.AB.applications();\n            // NOTE: apps is a webix datacollection\n\n            var allRemoves = [];\n\n            var appsWithObject = apps.filter((a) => {\n               return a.datacollectionsIncluded((o) => o.id == this.id);\n            });\n            appsWithObject.forEach((app) => {\n               allRemoves.push(app.datacollectionRemove(this));\n            });\n\n            return Promise.all(allRemoves).then(next).catch(err);\n            // });\n         });\n      };\n\n      return Promise.resolve()\n         .then(() => {\n            return removeFromApplications();\n         })\n         .then(() => {\n            return super.destroy();\n         })\n         .then(() => {\n            this.emit(\"destroyed\");\n         });\n   }\n\n   /**\n    * @property $dc\n    * return the underlying webix datacollection\n    * @return {webix.datacollection}\n    */\n   get $dc() {\n      return this.__dataCollection;\n   }\n\n   /**\n    * @property datasource\n    * return a object of this component.\n    *\n    * @return {ABObject|ABObjectQuery}\n    */\n   get datasource() {\n      if (!this.__datasource) {\n         if (this.id && this.name) {\n            // occassionally we have blank DCs (without .id or .name)\n            // and I don't want to see errors for those\n            var err = new Error(\n               `DataCollection[${this.name}][${this.id}] missing reference datasource`\n            );\n            this.AB.notify(\"builder\", err, { datacollection: this.toObj() });\n         }\n         return null;\n      }\n      var obj = this.AB.objectByID(this.__datasource.id);\n      if (!obj) {\n         obj = this.AB.queryByID(this.__datasource.id);\n      }\n      return obj;\n   }\n\n   /**\n    * @property datasource\n    * set a object to data collection\n    *\n    * @param {ABObject|ABObjectQuery} object\n    */\n   set datasource(object) {\n      this.__datasource = object;\n\n      this.refreshFilterConditions();\n   }\n\n   /**\n    * @property sourceType\n    * return type of source.\n    *\n    * @return {string} - 'object' or 'query'\n    */\n   get sourceType() {\n      return this.settings.isQuery ? \"query\" : \"object\";\n   }\n\n   /**\n    * @method datacollectionLink\n    * return a ABDatacollection that link of this.\n    *\n    * @return {ABDatacollection}\n    */\n   get datacollectionLink() {\n      if (!this.AB) return null;\n\n      return this.AB.datacollectionByID(this.settings.linkDatacollectionID);\n   }\n\n   /**\n    * @property fieldLink\n    * return a ABFieldConnect field that link of this.\n    *\n    * @return {ABFieldConnect}\n    */\n   get fieldLink() {\n      let object = this.datasource;\n      if (!object) return null;\n\n      return object.fieldByID(this.settings.linkFieldID);\n   }\n\n   /**\n    * @property model\n    * return a source model\n    *\n    * @return ABModel\n    */\n   get model() {\n      let object = this.datasource; // already notified\n\n      return object ? object.model() : null;\n   }\n\n   get dataStatusFlag() {\n      return {\n         notInitial: 0,\n         initializing: 1,\n         initialized: 2,\n      };\n   }\n\n   get dataStatus() {\n      return this._dataStatus;\n   }\n\n   get isDataInitialized() {\n      return this.dataStatus == this.dataStatusFlag.initialized;\n   }\n\n   dataInitialized() {\n      this.dataStatus = this.dataStatusFlag.initialized;\n   }\n\n   ///\n   /// Cursor\n   ///\n\n   setCursor(itemId) {\n      // If the static cursor is set, then this DC could not set cursor to other rows\n      if (\n         this.settings.fixSelect &&\n         (this.settings.fixSelect != \"_FirstRecordDefault\" ||\n            this.settings.fixSelect == itemId)\n      )\n         return;\n\n      if (this.__treeCollection) {\n         // set cursor of tree collection\n         this.setCursorTree(itemId);\n\n         // pull current row id\n         let currTreeId = this.__treeCollection.getCursor();\n         if (currTreeId) {\n            let currTreeItem = this.__treeCollection.getItem(currTreeId);\n            if (currTreeItem) itemId = currTreeItem._itemId;\n         }\n      }\n\n      let dc = this.__dataCollection;\n      if (dc) {\n         // clear cursor\n         if (itemId == null) {\n            dc.setCursor(null);\n         }\n         // If set rowId equal current cursor, it will not trigger .onAfterCursorChange event\n         else if (dc.getCursor() == itemId) {\n            this.emit(\"changeCursor\", this.getCursor());\n         }\n         // set new cursor\n         else if (dc.exists(itemId)) {\n            dc.setCursor(itemId);\n         }\n      }\n   }\n\n   /**\n    *\n    * @param {string|number} itemId - Id of item or Id of row data\n    */\n   setCursorTree(itemId) {\n      let tc = this.__treeCollection;\n      if (tc && tc.getCursor() != itemId) {\n         // If it is id of tree collection, then find row id of data\n         let treeCursor = tc.find({ id: itemId }, true);\n         if (treeCursor) {\n            tc.setCursor(itemId);\n         }\n         // If it is not id of tree collection, then find/set root of data\n         else {\n            let treeItem = tc.find({ _itemId: itemId, $parent: 0 }, true);\n            if (treeItem) tc.setCursor(treeItem.id);\n            else tc.setCursor(null);\n         }\n      }\n   }\n\n   getCursor(treeCursor = false) {\n      // Cursor of tree collection\n      if (treeCursor && this.__treeCollection) {\n         let currId = this.__treeCollection.getCursor();\n         if (currId) {\n            let currItem = this.__treeCollection.getItem(currId);\n\n            // filter current id for serialize\n            this.__treeCollection.filter(\n               (item) => item._itemId == currItem._itemId\n            );\n\n            // pull item with child items\n            let currItemAndChilds =\n               this.__treeCollection.serialize()[0] || null;\n\n            // refresh filter\n            this.refreshLinkCursor();\n\n            return currItemAndChilds;\n         }\n      }\n\n      let dc = this.__dataCollection;\n      if (dc == null) return null;\n\n      let currId = dc.getCursor();\n      let currItem = dc.getItem(currId);\n\n      return currItem;\n   }\n\n   getFirstRecord() {\n      var dc = this.__dataCollection;\n      if (dc == null) return null;\n\n      var currId = dc.getFirstId();\n      var currItem = dc.getItem(currId);\n\n      return currItem;\n   }\n\n   getNextRecord(record) {\n      var dc = this.__dataCollection;\n      if (dc == null) return null;\n\n      var currId = dc.getNextId(record.id);\n      var currItem = dc.getItem(currId);\n\n      return currItem;\n   }\n\n   /**\n    * @method refreshLinkCursor\n    *    If the data collection is bound to another and it is the child connection\n    *    it finds it's parents current set cursor and then filters its data\n    *    based off of the cursor.\n    */\n   refreshLinkCursor() {\n      // do not set the filter unless this dc is initialized \"dataStatusFlag==2\"\n      // if (this.dataStatus != this.dataStatusFlag.initialized) return;\n\n      // filter the data in the data collection\n      // using its parents current cursor because all the data in this child\n      // data collection has been loaded and the frontend can decide what is\n      // seen or not seen\n      let linkCursor;\n      let dvLink = this.datacollectionLink;\n      if (dvLink) {\n         linkCursor = dvLink.getCursor();\n      }\n\n      let filterData = (rowData) => {\n         // if link dc cursor is null, then show all data\n         if (linkCursor == null) return true;\n         else return this.isParentFilterValid(rowData);\n      };\n\n      if (this.__dataCollection) this.__dataCollection.filter(filterData);\n      if (this.__treeCollection) this.__treeCollection.filter(filterData);\n   }\n\n   setStaticCursor() {\n      if (this.settings.fixSelect) {\n         // set cursor to the current user\n         if (this.settings.fixSelect == \"_CurrentUser\") {\n            var username = this.currentUserUsername();\n            var userFields = this.datasource.fields((f) => f.key == \"user\");\n\n            // find a row that contains the current user\n            var row = this.__dataCollection.find((r) => {\n               var found = false;\n\n               userFields.forEach((f) => {\n                  if (found || r[f.columnName] == null) return;\n\n                  if (r[f.columnName].filter) {\n                     // Array - isMultiple\n                     found =\n                        r[f.columnName].filter((data) => data.id == username)\n                           .length > 0;\n                  } else if (r[f.columnName] == username) {\n                     found = true;\n                  }\n               });\n\n               return found;\n            }, true);\n\n            // set a first row of current user to cursor\n            if (row) {\n               this.__dataCollection.setCursor(row.id);\n\n               this.setCursorTree(row.id);\n            }\n         } else if (\n            this.settings.fixSelect == \"_FirstRecord\" ||\n            this.settings.fixSelect == \"_FirstRecordDefault\"\n         ) {\n            // // find a row that contains the current user\n            // var row = this.__dataCollection.find((r) => {\n\n            //  var found = false;\n            //  if (!found) {\n            //    found = true;\n            //    return true; // just give us the first record\n            //  }\n\n            // }, true);\n\n            // // set a first row of current user to cursor\n            // if (row)\n            //  this.__dataCollection.setCursor(row.id);\n\n            let currRowId = this.__dataCollection.getCursor();\n            if (\n               !currRowId ||\n               (currRowId && !this.__dataCollection.exists(currRowId))\n            ) {\n               // If current cursor is filtered by parent DC, then select new cursor\n\n               // set a first row to cursor\n               let rowId = this.__dataCollection.getFirstId();\n               // if (rowId) {\n               this.__dataCollection.setCursor(rowId || null);\n\n               this.setCursorTree(rowId);\n               // }\n            }\n         } else {\n            this.__dataCollection.setCursor(this.settings.fixSelect);\n\n            this.setCursorTree(this.settings.fixSelect);\n         }\n      }\n\n      // Set the cursor to the first row\n      if (this.isCursorFollow) {\n         const rowId = this.__dataCollection.getFirstId();\n         this.setCursor(rowId || null);\n         this.setCursorTree(rowId || null);\n      }\n   }\n\n   ///\n   /// Data\n   ///\n\n   /**\n    * @method filterCondition()\n    * Provide a temporary filter condition to modify the data we are returning.\n    * Used by User search criterias.\n    * @param {json} cond\n    *        A valid QueryCondition to filter the response.\n    */\n   filterCondition(cond = null) {\n      this.__filterCond = cond;\n   }\n\n   init() {\n      // prevent initialize many times\n      if (this.initialized) return;\n      this.initialized = true;\n\n      if (!this.__dataCollection.___AD.onAfterCursorChange) {\n         this.__dataCollection.___AD.onAfterCursorChange =\n            this.__dataCollection.attachEvent(\"onAfterCursorChange\", () => {\n               // debugger;\n               var currData = this.getCursor();\n\n               this.emit(\"changeCursor\", currData);\n            });\n      }\n\n      // relate data functions\n      let isRelated = (relateData, rowId, PK = \"id\") => {\n         if (Array.isArray(relateData)) {\n            return relateData.filter((v) => (v[PK] || v) == rowId).length > 0;\n         } else {\n            return relateData && (relateData[PK] || relateData) == rowId;\n         }\n      };\n\n      // events\n      this.on(\"ab.datacollection.create\", (data) => {\n         // If this DC is following cursor for other DC, then it should not add the new item to their list.\n         if (this.isCursorFollow) return;\n\n         let obj = this.datasource;\n         if (!obj) return;\n\n         if (!data || !data.data) return;\n\n         let needAdd = false;\n         let updatedVals = [];\n\n         Promise.resolve()\n            .then(() => {\n               return new Promise((next, bad) => {\n                  // Query\n                  if (obj instanceof this.AB.Class.ABObjectQuery) {\n                     let objList =\n                        obj.objects((o) => o.id == data.objectId) || [];\n\n                     needAdd = objList.length > 0;\n\n                     if (!needAdd) return next();\n\n                     let where = {\n                        glue: \"or\",\n                        rules: [],\n                     };\n\n                     objList.forEach((o) => {\n                        let newDataId = data.data[`${o.PK()}`];\n                        if (!newDataId) return;\n\n                        where.rules.push({\n                           key: `${o.alias || obj.objectAlias(o.id)}.${o.PK()}`,\n                           rule: \"equals\",\n                           value: newDataId,\n                        });\n                     });\n\n                     obj.model()\n                        .findAll({\n                           where: where,\n                        })\n                        .then((newQueryData) => {\n                           updatedVals = newQueryData.data || [];\n                           updatedVals.forEach((v) => {\n                              delete v.id;\n                           });\n\n                           next();\n                        })\n                        .catch(bad);\n                  }\n                  // Object\n                  else {\n                     needAdd = obj.id == data.objectId;\n                     updatedVals = [data.data];\n                     next();\n                  }\n               });\n            })\n            .then(() => {\n               if (needAdd) {\n                  // normalize data before add to data collection\n                  var model = obj.model();\n\n                  // UPDATE: this should already have happened in NetworkRestSocket\n                  // when the initial data is received.\n                  //model.normalizeData(updatedVals);\n\n                  (updatedVals || []).forEach((updatedV) => {\n                     // filter condition before add\n                     if (!this.isValidData(updatedV)) return;\n\n                     // check to see if item already exisits in data collection\n                     // and check to see that we are not loading the data serverside from cursor\n                     if (\n                        !this.__dataCollection.exists(\n                           updatedV[`${obj.PK()}`]\n                        ) &&\n                        !this.__reloadWheres\n                     ) {\n                        this.__dataCollection.add(updatedV, 0);\n                        this.emit(\"create\", updatedV);\n                        // this.__dataCollection.setCursor(rowData.id);\n                     } else if (\n                        !this.__dataCollection.exists(\n                           updatedV[`${obj.PK()}`]\n                        ) &&\n                        this.__reloadWheres\n                     ) {\n                        // debugger;\n                        if (this.isParentFilterValid(updatedV)) {\n                           // we track bound components and flexlayout components\n                           var attachedComponents =\n                              this.__bindComponentIds.concat(\n                                 this.__flexComponentIds\n                              );\n                           attachedComponents.forEach((bcids) => {\n                              // if the reload button already exisits move on\n                              if ($$(bcids + \"_reloadView\")) {\n                                 return false;\n                              }\n\n                              // find the position of the data view\n                              var pos = 0;\n                              var parent = $$(bcids).getParentView();\n                              if ($$(bcids).getParentView().index) {\n                                 pos = $$(bcids)\n                                    .getParentView()\n                                    .index($$(bcids));\n                              } else if (\n                                 $$(bcids).getParentView().getParentView().index\n                              ) {\n                                 // this is a data view and it is inside a\n                                 // scroll view that is inside an accodion\n                                 // so we need to go deeper to add the button\n                                 parent = $$(bcids)\n                                    .getParentView()\n                                    .getParentView();\n                                 pos = $$(bcids)\n                                    .getParentView()\n                                    .getParentView()\n                                    .index($$(bcids).getParentView());\n                              }\n\n                              // store the datacollection so we can pass it to the button later\n                              var DC = this;\n                              // add a button that reloads the view when clicked\n                              if (parent.addView) {\n                                 var L = this.AB.Label();\n                                 parent.addView(\n                                    {\n                                       id: bcids + \"_reloadView\",\n                                       view: \"button\",\n                                       value: L(\n                                          \"New data available. Click to reload.\"\n                                       ),\n                                       css: \"webix_primary webix_warn\",\n                                       click: function (id, event) {\n                                          DC.reloadData();\n                                          $$(id).getParentView().removeView(id);\n                                       },\n                                    },\n                                    pos\n                                 );\n                              }\n                           });\n                           // this.emit(\"create\", updatedV);\n                        }\n                     }\n                  });\n\n                  if (\n                     this.__treeCollection // && this.__treeCollection.exists(updatedVals.id)\n                  ) {\n                     this.parseTreeCollection({\n                        data: updatedVals,\n                     });\n                  }\n               }\n\n               // ABObject only\n               if (!(obj instanceof this.AB.Class.ABObjectQuery)) {\n                  // if it is a linked object\n                  let connectedFields = this.datasource.connectFields(\n                     (f) =>\n                        f.datasourceLink && f.datasourceLink.id == data.objectId\n                  );\n\n                  // It should always be only one item for ABObject\n                  updatedVals = updatedVals[0];\n\n                  // update relation data\n                  if (\n                     updatedVals &&\n                     connectedFields &&\n                     connectedFields.length > 0\n                  ) {\n                     // various PK name\n                     let PK = connectedFields[0].object.PK();\n                     if (!updatedVals.id && PK != \"id\")\n                        updatedVals.id = updatedVals[PK];\n\n                     this.__dataCollection.find({}).forEach((d) => {\n                        let updateItemData = {};\n\n                        connectedFields.forEach((f) => {\n                           var updateRelateVal = {};\n                           if (f && f.fieldLink) {\n                              updateRelateVal =\n                                 updatedVals[f.fieldLink.relationName()] || {};\n                           }\n\n                           let rowRelateVal = d[f.relationName()] || {};\n\n                           let valIsRelated = isRelated(\n                              updateRelateVal,\n                              d.id,\n                              PK\n                           );\n\n                           // Relate data\n                           if (\n                              Array.isArray(rowRelateVal) &&\n                              rowRelateVal.filter(\n                                 (v) =>\n                                    v == updatedVals.id ||\n                                    v.id == updatedVals.id ||\n                                    v[PK] == updatedVals.id\n                              ).length < 1 &&\n                              valIsRelated\n                           ) {\n                              rowRelateVal.push(updatedVals);\n\n                              updateItemData[f.relationName()] = rowRelateVal;\n                              updateItemData[f.columnName] = updateItemData[\n                                 f.relationName()\n                              ].map((v) => v.id || v[PK] || v);\n                           } else if (\n                              !Array.isArray(rowRelateVal) &&\n                              (rowRelateVal != updatedVals.id ||\n                                 rowRelateVal.id != updatedVals.id ||\n                                 rowRelateVal[PK] != updatedVals.id) &&\n                              valIsRelated\n                           ) {\n                              updateItemData[f.relationName()] = updatedVals;\n                              updateItemData[f.columnName] =\n                                 updatedVals.id || updatedVals;\n                           }\n                        });\n\n                        // If this item needs to update\n                        if (Object.keys(updateItemData).length > 0) {\n                           // normalize data before add to data collection\n                           var model = obj.model();\n\n                           // UPDATE: this should already have happened in NetworkRestSocket\n                           // when the initial data is received.\n                           // model.normalizeData(updateItemData);\n\n                           this.__dataCollection.updateItem(\n                              d.id,\n                              updateItemData\n                           );\n\n                           if (this.__treeCollection)\n                              this.__treeCollection.updateItem(\n                                 d.id,\n                                 updateItemData\n                              );\n\n                           this.emit(\n                              \"update\",\n                              this.__dataCollection.getItem(d.id)\n                           );\n                        }\n                     });\n                  }\n               }\n\n               // filter link data collection's cursor\n               this.refreshLinkCursor();\n               this.setStaticCursor();\n            });\n      });\n\n      this.on(\"ab.datacollection.update\", (data) => {\n         // {json} data\n         // incoming socket payload:\n         // data.objectId {string} uuid of the ABObject that was updated\n         // data.data {json} the new updated value of that row entry.\n\n         // debugger;\n         let obj = this.datasource;\n         if (!obj) return;\n\n         // updated values\n         let values = data.data;\n         if (!values) return;\n\n         // DC who is following cursor should update only current cursor.\n         if (\n            this.isCursorFollow &&\n            this.getCursor()?.id != (values[obj.PK()] ?? values.id)\n         ) {\n            return;\n         }\n\n         let needUpdate = false;\n         let isExists = false;\n         let updatedIds = [];\n         // {array}\n         // an array of the row indexs in our DataCollection that have values\n         // that need to be updated.\n\n         let updatedTreeIds = [];\n         let updatedVals = {};\n\n         // Query\n         if (obj instanceof this.AB.Class.ABObjectQuery) {\n            let objList = obj.objects((o) => o.id == data.objectId) || [];\n            needUpdate = objList.length > 0;\n            if (needUpdate) {\n               (objList || []).forEach((o) => {\n                  updatedIds = updatedIds.concat(\n                     this.__dataCollection\n                        .find((item) => {\n                           return (\n                              item[\n                                 `${this.datasource.objectAlias(\n                                    o.id\n                                 )}.${o.PK()}`\n                              ] == (values[o.PK()] || values.id)\n                           );\n                        })\n                        .map((o) => o.id) || []\n                  );\n\n                  // grouped queries\n                  if (this.__treeCollection) {\n                     updatedTreeIds = updatedTreeIds.concat(\n                        this.__treeCollection\n                           .find((item) => {\n                              return (\n                                 item[\n                                    `${this.datasource.objectAlias(\n                                       o.id\n                                    )}.${o.PK()}`\n                                 ] == (values[o.PK()] || values.id)\n                              );\n                           })\n                           .map((o) => o.id) || []\n                     );\n                  }\n               });\n\n               isExists = updatedIds.length > 0;\n\n               updatedVals = this._queryUpdateData(objList, values);\n            }\n         }\n         // Object\n         else {\n            needUpdate = obj.id == data.objectId;\n            if (needUpdate) {\n               // various PK name\n               if (!values.id && obj.PK() != \"id\") values.id = values[obj.PK()];\n\n               updatedIds.push(values.id);\n\n               isExists = this.__dataCollection.exists(values.id);\n               updatedVals = values;\n            }\n         }\n\n         // if it is the source object\n         if (needUpdate) {\n            if (isExists) {\n               if (this.isValidData(updatedVals)) {\n                  // NOTE: this is now done in NetworkRestSocket before\n                  // we start the update events.\n                  // normalize data before update data collection\n                  // var model = obj.model();\n                  // model.normalizeData(updatedVals);\n\n                  if (this.__dataCollection) {\n                     updatedIds = this.AB.uniq(updatedIds);\n                     updatedIds.forEach((itemId) => {\n                        this.__dataCollection.updateItem(itemId, updatedVals);\n                     });\n                  }\n\n                  if (this.__treeCollection) {\n                     // update data in tree\n                     updatedTreeIds = this.AB.uniq(updatedTreeIds);\n                     updatedTreeIds.forEach((itemId) => {\n                        this.__treeCollection.updateItem(itemId, updatedVals);\n                     });\n                  }\n\n                  this.emit(\"update\", updatedVals);\n\n                  // If the update item is current cursor, then should tell components to update.\n                  let currData = this.getCursor();\n                  if (currData && currData.id == updatedVals.id) {\n                     this.emit(\"changeCursor\", currData);\n                  }\n               } else {\n                  // Johnny: Here we are simply removing the DataCollection Entries that are\n                  // no longer valid.\n                  // Just cycle through the collected updatedIds and remove them.\n                  updatedIds.forEach((id) => {\n                     // If the item is current cursor, then the current cursor should be cleared.\n                     let currData = this.getCursor();\n                     if (currData && currData.id == id)\n                        this.emit(\"changeCursor\", null);\n\n                     this.__dataCollection.remove(id);\n\n                     // TODO: update tree list\n                     // if (this.__treeCollection) {\n                     //  this.__treeCollection.remove(id);\n                     // }\n\n                     this.emit(\"delete\", id);\n                  });\n               }\n            }\n            // filter before add new record\n            else if (this.isValidData(updatedVals)) {\n               // this means the updated record was not loaded yet so we are adding it to the top of the grid\n               // the placement will probably change on the next load of the data\n               this.__dataCollection.add(updatedVals, 0);\n\n               if (this.__treeCollection)\n                  this.parseTreeCollection({\n                     data: [updatedVals],\n                  });\n\n               this.emit(\"create\", updatedVals);\n            }\n         }\n\n         // if it is a linked object\n         let connectedFields = obj.connectFields(\n            (f) => f.datasourceLink && f.datasourceLink.id == data.objectId\n         );\n\n         // update relation data\n         if (\n            obj instanceof this.AB.Class.ABObject &&\n            connectedFields &&\n            connectedFields.length > 0\n         ) {\n            // various PK name\n            let PK = connectedFields[0].object.PK();\n            if (!values.id && PK != \"id\") values.id = values[PK];\n\n            if (this.__dataCollection.count() > 0) {\n               this.__dataCollection.find({}).forEach((d) => {\n                  let updateItemData = {\n                     id: d.id,\n                  };\n\n                  connectedFields.forEach((f) => {\n                     if (!f) return;\n\n                     let updateRelateVal = {};\n                     let rowRelateVal = d[f.relationName()] || {};\n\n                     if (f.fieldLink)\n                        updateRelateVal =\n                           values[f.fieldLink.relationName()] || {};\n\n                     let valIsRelated = isRelated(updateRelateVal, d.id, PK);\n\n                     // Unrelate data\n                     if (\n                        Array.isArray(rowRelateVal) &&\n                        rowRelateVal.filter(\n                           (v) =>\n                              v == values.id ||\n                              v.id == values.id ||\n                              v[PK] == values.id\n                        ).length > 0 &&\n                        !valIsRelated\n                     ) {\n                        updateItemData[f.relationName()] = rowRelateVal.filter(\n                           (v) => (v.id || v[PK] || v) != values.id\n                        );\n                        updateItemData[f.columnName] = updateItemData[\n                           f.relationName()\n                        ].map((v) => v.id || v[PK] || v);\n                     } else if (\n                        !Array.isArray(rowRelateVal) &&\n                        (rowRelateVal == values.id ||\n                           rowRelateVal.id == values.id ||\n                           rowRelateVal[PK] == values.id) &&\n                        !valIsRelated\n                     ) {\n                        updateItemData[f.relationName()] = null;\n                        updateItemData[f.columnName] = null;\n                     }\n\n                     // Relate data or Update\n                     if (Array.isArray(rowRelateVal) && valIsRelated) {\n                        // update relate data\n                        if (\n                           rowRelateVal.filter(\n                              (v) =>\n                                 v == values.id ||\n                                 v.id == values.id ||\n                                 v[PK] == values.id\n                           ).length > 0\n                        ) {\n                           rowRelateVal.forEach((v, index) => {\n                              if (\n                                 v == values.id ||\n                                 v.id == values.id ||\n                                 v[PK] == values.id\n                              )\n                                 rowRelateVal[index] = values;\n                           });\n                        }\n                        // add new relate\n                        else {\n                           rowRelateVal.push(values);\n                        }\n\n                        updateItemData[f.relationName()] = rowRelateVal;\n                        updateItemData[f.columnName] = updateItemData[\n                           f.relationName()\n                        ].map((v) => v.id || v[PK] || v);\n                     } else if (\n                        !Array.isArray(rowRelateVal) &&\n                        (rowRelateVal != values.id ||\n                           rowRelateVal.id != values.id ||\n                           rowRelateVal[PK] != values.id) &&\n                        valIsRelated\n                     ) {\n                        updateItemData[f.relationName()] = values;\n                        updateItemData[f.columnName] = values.id || values;\n                     }\n                  });\n\n                  // If this item needs to update\n                  if (Object.keys(updateItemData).length > 0) {\n                     // normalize data before add to data collection\n                     // UPDATE: this should already have happened in NetworkRestSocket\n                     // when the initial data is received.\n\n                     // NOTE: We could not normalize relational data because they are not full data\n                     // Merge update data to exists data instead\n\n                     if (this.__treeCollection?.exists(d.id)) {\n                        const treeItem = Object.assign(\n                           this.__treeCollection.getItem(d.id),\n                           updateItemData\n                        );\n                        this.__treeCollection.updateItem(d.id, treeItem);\n                     }\n\n                     if (this.__dataCollection?.exists(d.id)) {\n                        const dcItem = Object.assign(\n                           this.__dataCollection.getItem(d.id),\n                           updateItemData\n                        );\n                        this.__dataCollection.updateItem(d.id, dcItem);\n                        this.emit(\n                           \"update\",\n                           this.__dataCollection.getItem(d.id)\n                        );\n                     }\n                  }\n               });\n            }\n         }\n\n         this.refreshLinkCursor();\n         this.setStaticCursor();\n      });\n\n      // We are subscribing to notifications from the server that an item may be stale and needs updating\n      // We will improve this later and verify that it needs updating before attempting the update on the client side\n      this.on(\"ab.datacollection.stale\", (data) => {\n         // debugger;\n         // if we don't have a datasource or model, there is nothing we can do here:\n         // Verify the datasource has the object we are listening for if not just stop here\n         if (\n            !this.datasource ||\n            !this.model ||\n            this.datasource.id != data.objectId\n         ) {\n            return;\n         }\n\n         // updated values\n         var values = data.data;\n\n         if (!values) return;\n\n         // use the Object's defined Primary Key:\n         var PK = this.model.object.PK();\n         if (!values[PK]) {\n            PK = \"id\";\n         }\n\n         // DC who is following cursor should update only current cursor.\n         if (\n            this.isCursorFollow &&\n            this.getCursor()?.[PK] != (values[PK] ?? values.id)\n         ) {\n            return;\n         }\n\n         if (values) {\n            if (this.__dataCollection.exists(values[PK])) {\n               var cond = { where: {} };\n               cond.where[PK] = values[PK];\n               // this data collection has the record so we need to query the server to find out what it's latest data is so we can update all instances\n               this.model.staleRefresh(cond).then((res) => {\n                  // check to make sure there is data to work with\n                  if (Array.isArray(res.data) && res.data.length) {\n                     // debugger;\n                     let obj = this.datasource;\n                     if (!obj) return;\n                     // normalize data before add to data collection\n\n                     // UPDATE: this should already have happened in NetworkRestSocket\n                     // when the initial data is received.\n                     //var model = obj.model();\n                     // model.normalizeData(res.data[0]);\n\n                     // tell the webix data collection to update using their API with the row id (values.id) and content (res.data[0])\n                     if (this.__dataCollection.exists(values[PK])) {\n                        this.__dataCollection.updateItem(\n                           values[PK],\n                           res.data[0]\n                        );\n                     }\n\n                     // If the update item is current cursor, then should tell components to update.\n                     var currData = this.getCursor();\n                     if (currData && currData[PK] == values[PK]) {\n                        this.emit(\"changeCursor\", currData);\n                     }\n                  } else {\n                     // If there is no data in the object then it was deleted...lets clean things up\n                     // If the deleted item is current cursor, then the current cursor should be cleared.\n                     var currId = this.getCursor();\n                     if (currId == values[PK]) this.emit(\"changeCursor\", null);\n\n                     this.__dataCollection.remove(values[PK]);\n                     this.emit(\"delete\", values[PK]);\n                  }\n               });\n            }\n         }\n\n         // filter link data collection's cursor\n         this.refreshLinkCursor();\n         this.setStaticCursor();\n      });\n\n      this.on(\"ab.datacollection.delete\", (data) => {\n         // debugger;\n         let obj = this.datasource;\n         if (!obj) return;\n\n         let deleteId = data.data;\n         let needDelete = false;\n         let deletedIds = [];\n         let deletedTreeIds = [];\n\n         if (this.isCursorFollow && this.getCursor()?.id != deleteId) {\n            return;\n         }\n\n         // Query\n         if (obj instanceof this.AB.Class.ABObjectQuery) {\n            let objList = obj.objects((o) => o.id == data.objectId) || [];\n            needDelete = objList.length > 0;\n            if (needDelete) {\n               (objList || []).forEach((o) => {\n                  deletedIds =\n                     this.__dataCollection\n                        .find((item) => {\n                           return item[`${o.alias}.${o.PK()}`] == deleteId;\n                        })\n                        .map((o) => o.id) || [];\n\n                  // grouped queries\n                  if (this.__treeCollection) {\n                     deletedTreeIds =\n                        this.__treeCollection\n                           .find((item) => {\n                              return item[`${o.alias}.${o.PK()}`] == deleteId;\n                           })\n                           .map((o) => o.id) || [];\n                  }\n               });\n            }\n         }\n         // Object\n         else {\n            needDelete = obj.id == data.objectId;\n            if (needDelete) {\n               deletedIds.push(deleteId);\n            }\n         }\n\n         // if it is the source object\n         if (needDelete) {\n            // If the deleted item is current cursor, then the current cursor should be cleared.\n            var currData = this.getCursor();\n\n            deletedIds.forEach((delId) => {\n               if (currData && currData[obj.PK()] == delId)\n                  this.emit(\"changeCursor\", null);\n\n               if (this.__dataCollection.exists(delId))\n                  this.__dataCollection.remove(delId);\n            });\n\n            if (this.__treeCollection) {\n               deletedTreeIds.forEach((delId) => {\n                  if (this.__treeCollection.exists(delId))\n                     this.__treeCollection.remove(delId);\n               });\n            }\n\n            if (deletedIds[0]) this.emit(\"delete\", deletedIds[0]);\n         }\n\n         // if it is a linked object\n         let connectedFields = obj.connectFields(\n            (f) => f.datasourceLink && f.datasourceLink.id == data.objectId\n         );\n\n         // update relation data\n         if (\n            obj instanceof this.AB.Class.ABObject &&\n            connectedFields &&\n            connectedFields.length > 0\n         ) {\n            // various PK name\n            let PK = connectedFields[0].object.PK();\n\n            this.__dataCollection.find({}).forEach((d) => {\n               let updateRelateVals = {};\n\n               connectedFields.forEach((f) => {\n                  let relateVal = d[f.relationName()];\n                  if (relateVal == null) return;\n\n                  if (\n                     Array.isArray(relateVal)\n                     // JOHNNY: for speed improvements, don't make this check:\n                     // just do it and that will reduce 1x through the array.\n                     // &&\n                     // relateVal.filter(\n                     //    (v) =>\n                     //       v == deleteId ||\n                     //       v.id == deleteId ||\n                     //       v[PK] == deleteId\n                     // ).length > 0\n                  ) {\n                     updateRelateVals[f.relationName()] = relateVal.filter(\n                        (v) => (v.id || v[PK] || v) != deleteId\n                     );\n                     updateRelateVals[f.columnName] = updateRelateVals[\n                        f.relationName()\n                     ].map((v) => v.id || v[PK] || v);\n                  } else if (\n                     relateVal == deleteId ||\n                     relateVal.id == deleteId ||\n                     relateVal[PK] == deleteId\n                  ) {\n                     updateRelateVals[f.relationName()] = null;\n                     updateRelateVals[f.columnName] = null;\n                  }\n               });\n\n               // If this item needs to update\n               if (Object.keys(updateRelateVals).length > 0) {\n                  // normalize data before add to data collection\n\n                  // var model = obj.model();\n                  // model.normalizeData(updateRelateVals);\n\n                  this.__dataCollection.updateItem(d.id, updateRelateVals);\n\n                  if (this.__treeCollection)\n                     this.__treeCollection.updateItem(d.id, updateRelateVals);\n\n                  this.emit(\"update\", this.__dataCollection.getItem(d.id));\n               }\n            });\n         }\n      });\n\n      // add listeners when cursor of link data collection is changed\n      let linkDv = this.datacollectionLink;\n      if (linkDv && this.settings.loadAll) {\n         this.eventAdd({\n            emitter: linkDv,\n            eventName: \"changeCursor\",\n            listener: () => {\n               this.refreshLinkCursor();\n               this.setStaticCursor();\n            },\n         });\n      }\n\n      // add listeners when cursor of the followed data collection is changed\n      const followDC = this.datacollectionFollow;\n      if (followDC) {\n         this.eventAdd({\n            emitter: followDC,\n            eventName: \"changeCursor\",\n            listener: () => {\n               this.clearAll();\n               this.loadData();\n            },\n         });\n      }\n   }\n\n   /*\n    * waitForDataCollectionToInitialize()\n    * there are certain situations where this datacollection shouldn't\n    * load until another one has loaded.  In those cases, the fn()\n    * will wait for the required datacollection to emit \"initializedData\"\n    * before continuing on.\n    * @param {ABViewDataCollection} DC\n    *      the DC this datacollection depends on.\n    * @returns {Promise}\n    */\n   waitForDataCollectionToInitialize(DC, msg) {\n      return new Promise((resolve, reject) => {\n         switch (DC.dataStatus) {\n            // if that DC hasn't started initializing yet, start it!\n            case DC.dataStatusFlag.notInitial:\n               DC.loadData().catch(reject);\n            // no break;\n\n            // once in the process of initializing\n            /* eslint-disable no-fallthrough*/\n            case DC.dataStatusFlag.initializing:\n               /* eslint-enable no-fallthrough*/\n               // listen for \"initializedData\" event from the DC\n               // then we can continue.\n               this.eventAdd({\n                  emitter: DC,\n                  eventName: \"initializedData\",\n                  listener: () => {\n                     // go next\n                     resolve();\n                  },\n               });\n               break;\n\n            // if it is already initialized, we can continue:\n            case DC.dataStatusFlag.initialized:\n               resolve();\n               break;\n\n            // just in case, if the status is not known, just continue\n            default:\n               resolve();\n               break;\n         }\n      });\n   }\n\n   loadData(start, limit) {\n      // mark data status is initializing\n      if (this._dataStatus == this.dataStatusFlag.notInitial) {\n         this._dataStatus = this.dataStatusFlag.initializing;\n         this.emit(\"initializingData\", {});\n      }\n\n      var obj = this.datasource;\n      if (obj == null) {\n         this._dataStatus = this.dataStatusFlag.initialized;\n         return Promise.resolve([]);\n      }\n\n      var model = obj.model();\n      if (model == null) {\n         this._dataStatus = this.dataStatusFlag.initialized;\n         return Promise.resolve([]);\n      }\n\n      // pull the defined sort values\n      var sorts = this.settings.objectWorkspace.sortFields || [];\n\n      // pull filter conditions\n      let wheres = this.AB.cloneDeep(\n         this.settings.objectWorkspace.filterConditions ?? null\n      );\n      // if we pass new wheres with a reload use them instead\n      if (this.__reloadWheres) {\n         wheres = this.__reloadWheres;\n      }\n\n      const __additionalWheres = {\n         glue: \"and\",\n         rules: [],\n      };\n\n      if (this.__filterCond) {\n         __additionalWheres.rules.push(this.__filterCond);\n      }\n\n      // Filter by a selected cursor of a link DC\n      const dataCollectionLink = this.datacollectionLink;\n      const fieldLink = this.fieldLink;\n      if (!this.settings.loadAll && dataCollectionLink && fieldLink) {\n         const linkCursorId = dataCollectionLink?.getCursor()?.id;\n         if (linkCursorId) {\n            __additionalWheres.rules.push({\n               alias: fieldLink.alias, // ABObjectQuery\n               key: fieldLink.id,\n               rule: fieldLink.alias ? \"contains\" : \"equals\", // NOTE: If object is query, then use \"contains\" because ABOBjectQuery return JSON\n               value: fieldLink.getRelationValue(\n                  dataCollectionLink.__dataCollection.getItem(linkCursorId)\n               ),\n            });\n         }\n      }\n      // pull data rows following the follow data collection\n      else if (this.datacollectionFollow) {\n         const followCursor = this.datacollectionFollow.getCursor();\n         // store the PK as a variable\n         let PK = this.datasource.PK();\n         // if the datacollection we are following is a query\n         // add \"BASE_OBJECT.\" to the PK so we can select the\n         // right value to report the cursor change to\n         if (this.datacollectionFollow.settings.isQuery) {\n            PK = \"BASE_OBJECT.\" + PK;\n         }\n         if (followCursor) {\n            start = 0;\n            limit = null;\n            wheres = {\n               glue: \"and\",\n               rules: [\n                  {\n                     key: this.datasource.PK(),\n                     rule: \"equals\",\n                     value: followCursor[PK],\n                  },\n               ],\n            };\n         }\n         // Set no return rows\n         else {\n            wheres = {\n               glue: \"and\",\n               rules: [\n                  {\n                     key: this.datasource.PK(),\n                     rule: \"equals\",\n                     value: \"NO RESULT ROW\",\n                  },\n               ],\n            };\n         }\n      }\n\n      // Combine setting & program filters\n      if (__additionalWheres.rules.length) {\n         __additionalWheres.rules.unshift(wheres);\n         wheres = __additionalWheres;\n      }\n\n      // remove any null in the .rules\n      if (wheres?.rules?.filter) wheres.rules = wheres.rules.filter((r) => r);\n\n      // set query condition\n      var cond = {\n         where: wheres || {},\n         // limit: limit || 20,\n         skip: start || 0,\n         sort: sorts,\n         populate:\n            this.settings.populate ??\n            (this.settings.preventPopulate ? false : true),\n      };\n\n      //// NOTE: we no longer set a default limit on loadData() but\n      //// require the platform.loadData() to pass in a default limit.\n      if (limit != null) {\n         cond.limit = limit;\n      }\n\n      // if settings specify loadAll, then remove the limit\n      if (this.settings.loadAll && !this.isCursorFollow) {\n         delete cond.limit;\n      }\n\n      return (\n         Promise.resolve()\n            //\n            // Step 1: make sure any DataCollections we are linked to are\n            // initialized first.  Then proceed with our initialization.\n            //\n            .then(() => {\n               // If we are linked to another datacollection then wait for it\n               let linkDc = this.datacollectionLink;\n               if (!linkDc) return Promise.resolve(); // TODO: refactor in v2\n\n               return this.waitForDataCollectionToInitialize(linkDc);\n            })\n            //\n            // Step 2: if we have any filter rules that depend on other DataCollections,\n            // then wait for them to be initialized first.\n            // eg: \"(not_)in_data_collection\" rule filters\n            .then(() => {\n               return new Promise((resolve, reject) => {\n                  if (\n                     wheres == null ||\n                     wheres.rules == null ||\n                     !wheres.rules.length\n                  )\n                     return resolve();\n\n                  var dcFilters = [];\n\n                  wheres.rules.forEach((rule) => {\n                     // if this collection is filtered by data collections we need to load them in case we need to validate from them later\n                     if (\n                        rule.rule == \"in_data_collection\" ||\n                        rule.rule == \"not_in_data_collection\"\n                     ) {\n                        var dv = this.AB.datacollectionByID(rule.value);\n                        if (dv) {\n                           dcFilters.push(\n                              this.waitForDataCollectionToInitialize(dv)\n                           );\n                        }\n                     }\n                  });\n\n                  Promise.all(dcFilters)\n                     .then(() => {\n                        resolve();\n                     })\n                     .catch(reject);\n               });\n            })\n\n            // pull data to data collection\n            .then(() => {\n               return new Promise((resolve, reject) => {\n                  // we will keep track of the resolve, reject for this\n                  // operation.\n                  // the actual resolve() should happen in the\n                  // .processIncomingData() after the  data is processed.\n                  this._pendingLoadDataResolve = {\n                     resolve: resolve,\n                     reject: reject,\n                  };\n\n                  this.platformFind(model, cond).catch((err) => {\n                     reject(err);\n                  });\n               });\n            })\n      );\n   }\n\n   platformFind(model, cond) {\n      //// Core Migration Note:\n      //// the ABViewDataCollectionCore now manages data in a different way:\n      //// local data  vs  Remote Data\n      //// this will need to be updated to reflect that management:\n      //// (and also explains why we refactored things into .processIncomingData())\n      return model.findAll(cond).then((data) => {\n         console.error(\"TODO: parse returned data and figure out paging\");\n         console.error(data);\n         // parse out the total and figure out if we need to track loading more:\n         return this.processIncomingData(data);\n      });\n   }\n\n   /**\n    * @method queuedParse()\n    * This is an attempt at loading very large datasets into a Webix DC without locking up\n    * the display.\n    * @param {array} data\n    *        The data to load into the __dataCollection\n    * @param {callback} cb\n    *        A callback to call when the data has been fully loaded.\n    */\n   async queuedParse(incomingData, cb) {\n      const data = incomingData?.data || incomingData;\n      if (!data?.length) {\n         cb?.();\n         return Promise.resolve();\n      }\n\n      const total_count = incomingData.total_count;\n\n      let nextData;\n      if (data.length > 250) {\n         let pos = this.__dataCollection.count();\n         let remain = data.splice(250);\n         nextData = {\n            data: remain,\n            pos: pos + data.length,\n            total_count,\n         };\n      }\n\n      const parsedData = {\n         data,\n         pos: incomingData.pos,\n         total_count,\n      };\n      this.__dataCollection.parse(parsedData);\n\n      return new Promise((resolve) => {\n         setTimeout(async () => {\n            await this.queuedParse(nextData);\n            cb?.();\n            resolve();\n         }, 15);\n      });\n   }\n\n   /**\n    * processIncomingData()\n    * is called from loadData() once the data is returned.  This method\n    * allows the platform to make adjustments to the data based upon any\n    * platform defined criteria.\n    * @param {obj} data  the data as it was returned from the Server\n    *        which should be in following format:\n    *        {\n    *          status: \"success\", // or \"error\"\n    *          data:[ {ABObjectData}, {ABObjectData}, ...]\n    *        }\n    */\n   processIncomingData(data) {\n      return Promise.resolve().then(() => {\n         // store total count\n         this.__totalCount = data.total_count;\n\n         // Need to .parse it the first time\n         if (!this.__dataCollection?.find({}).length) {\n            this.__dataCollection?.clearAll();\n            // this.__dataCollection?.parse(data);\n         }\n\n         if (this.__throttleIncoming) clearTimeout(this.__throttleIncoming);\n         this.__throttleIncoming = setTimeout(async () => {\n            // using queuedParse() to responsively handle large datasets.\n            await this.queuedParse(data);\n\n            // In order to get the total_count updated I had to use .load()\n            this.__dataCollection.load(async () => {\n               if (this.settings.loadAll) {\n                  setTimeout(() => {\n                     this.refreshLinkCursor();\n                  }, 250);\n               }\n\n               return {\n                  // NOTE: return a empty array to prevent render items in DataTable twice. (Items are rendered in .queuedParse function)\n                  data: [],\n                  pos: data.pos,\n                  total_count: data.total_count,\n               };\n            });\n\n            // this does nothing???\n            this.parseTreeCollection(data);\n\n            // if we are linked, then refresh our cursor\n            var linkDv = this.datacollectionLink;\n            if (linkDv) {\n               // filter data by match link data collection\n               this.refreshLinkCursor();\n               this.setStaticCursor();\n            } else {\n               // set static cursor\n               this.setStaticCursor();\n            }\n\n            // now we close out our .loadData() promise.resolve() :\n            if (this._pendingLoadDataResolve) {\n               this._pendingLoadDataResolve.resolve();\n\n               // after we call .resolve() stop tracking this:\n               this._pendingLoadDataResolve = null;\n            }\n\n            // If dc set load all, then it will not trigger .loadData in dc at\n            // .onAfterLoad event\n            if (this.settings.loadAll) {\n               this.emit(\"loadData\", {});\n            }\n\n            // mark initialized data\n            if (this._dataStatus != this.dataStatusFlag.initialized) {\n               this._dataStatus = this.dataStatusFlag.initialized;\n               this.emit(\"initializedData\", {});\n            }\n         }, 100);\n      });\n   }\n\n   /**\n    * @method reloadData()\n    * Trigger the DataCollection to reload its data from the server.\n    * @param {int} start\n    *        Start position of where we want the data to load.\n    * @param {int} limit\n    *        How many entries to load at a time.\n    * @return {Promise}\n    */\n   reloadData(start, limit) {\n      // var waitForDataCollectionToInitialize = (DC) => {\n      //    return new Promise((resolve, reject) => {\n      //       switch (DC.dataStatus) {\n      //          // if that DC hasn't started initializing yet, start it!\n      //          case DC.dataStatusFlag.notInitial:\n      //             DC.loadData().catch(reject);\n      //          // no break;\n\n      //          // once in the process of initializing\n      //          /* eslint-disable no-fallthrough*/\n      //          case DC.dataStatusFlag.initializing:\n      //             /* eslint-enable no-fallthrough*/\n      //             // listen for \"initializedData\" event from the DC\n      //             // then we can continue.\n      //             this.eventAdd({\n      //                emitter: DC,\n      //                eventName: \"initializedData\",\n      //                listener: () => {\n      //                   // go next\n      //                   resolve();\n      //                },\n      //             });\n      //             break;\n\n      //          // if it is already initialized, we can continue:\n      //          case DC.dataStatusFlag.initialized:\n      //             resolve();\n      //             break;\n\n      //          // just in case, if the status is not known, just continue\n      //          default:\n      //             resolve();\n      //             break;\n      //       }\n      //    });\n      // };\n\n      return Promise.resolve().then(() => {\n         // check if we are currently waiting for more data requests on this datacollection before continuing\n         if (this.reloadTimer) {\n            // if we are already waiting delete the current timer\n            clearTimeout(this.reloadTimer);\n            delete this.reloadTimer;\n         }\n\n         // return a promise\n         if (!this.reloadPromise) {\n            this.reloadPromise = new Promise((resolve, reject) => {\n               this.reloadPromise__resolve = resolve;\n               this.reloadPromise__reject = reject;\n            });\n         }\n\n         // then create a new timeout to delete current timeout, clear data\n         // and load new\n         this.reloadTimer = setTimeout(() => {\n            // clear the data from the dataCollection,\n            this.clearAll();\n            // then loads new data from the server\n            return this.loadData(start, limit)\n               .then(() => {\n                  if (this.reloadPromise) {\n                     this.reloadPromise__resolve();\n                     delete this.reloadPromise;\n                     delete this.reloadPromise__resolve;\n                     delete this.reloadPromise__reject;\n                  }\n\n                  // delete the current setTimeout\n                  clearTimeout(this.reloadTimer);\n                  delete this.reloadTimer;\n               })\n               .catch((err) => {\n                  if (this.reloadPromise) {\n                     this.reloadPromise__reject(err);\n                     delete this.reloadPromise;\n                     delete this.reloadPromise__resolve;\n                     delete this.reloadPromise__reject;\n                  }\n                  // delete the current setTimeout\n                  clearTimeout(this.reloadTimer);\n                  delete this.reloadTimer;\n               });\n         }, 50);\n         // setting to 50ms because right now we do not see many\n         // concurrent calls,  we need to increase this if we begin to\n\n         return this.reloadPromise;\n      });\n   }\n\n   /**\n    * reloadWheres()\n    * stores the child data collections filters for subsequent loads.\n    * It is called from bindParentDc() when child data collections that are not\n    * marked to load all data are initializing. To do this we use webix\n    * server side binding by setting the param of \"dataFeed\".\n    * @param {obj} wheres  the new filters for the data collection\n    *        This is a combination of any exisiting filters the data collection\n    *        alreay had as well as the filter for the current cursor set by the\n    *        master data collection. We store this in __reloadWheres for when\n    *        the data needs to be updated.\n    *        The format of the wheres is our Query Builder Format\n    *        ex: {\n    *              \"glue\": \"and\",\n    *              \"rules\": [{\n    *                \"key\": \"33ba8957-6b9c-4ddb-9533-c46b13878ae1\",\n    *                \"rule\": \"contains\",\n    *                \"value\": \"1594176994894\"\n    *              }]\n    *            }\n    */\n   reloadWheres(wheres) {\n      this.__reloadWheres = wheres;\n   }\n\n   getData(filter) {\n      var dc = this.__dataCollection;\n      if (dc) {\n         return dc.find((row) => {\n            let isValid = true;\n\n            // data collection filter\n            // isValid = this.isValidData(row);\n\n            // NOTE: data are filtered from the server side (webix.dataFeed)\n            // parent dc filter\n            let linkDv = this.datacollectionLink;\n            if (linkDv && this.settings.loadAll && isValid) {\n               isValid = this.isParentFilterValid(row);\n            }\n\n            // addition filter\n            if (isValid && filter) {\n               isValid = filter(row);\n            }\n\n            return isValid;\n         });\n      } else {\n         return [];\n      }\n   }\n\n   isParentFilterValid(rowData) {\n      // data is empty\n      if (rowData == null) return false;\n\n      var linkDv = this.datacollectionLink;\n      if (linkDv == null) return true;\n\n      const linkObj = linkDv.datasource;\n      if (linkObj == null) return true;\n\n      var fieldLink = this.fieldLink;\n      if (fieldLink == null) return true;\n\n      // if the parent's cursor is not set we have not filted this collection\n      // yet so the data that comes back should be valid\n      var linkCursor = linkDv.getCursor();\n      if (linkCursor == null) {\n         return true;\n      }\n\n      var linkVal = rowData[fieldLink.relationName()];\n      if (linkVal == null) {\n         // try to get relation value(id) again\n         if (rowData[fieldLink.columnName]) {\n            linkVal = rowData[fieldLink.columnName];\n         } else {\n            return false;\n         }\n      }\n\n      let PK = fieldLink.object.PK();\n\n      // array - 1:M , M:N\n      if (linkVal.filter) {\n         return (\n            linkVal.filter(\n               (val) =>\n                  (val[PK] || val.id || val) ==\n                  (linkCursor[linkObj.PK()] || linkCursor.id || linkCursor)\n            ).length > 0\n         );\n      } else {\n         return (\n            (linkVal[PK] || linkVal.id || linkVal) ==\n            (linkCursor[linkObj.PK()] || linkCursor.id || linkCursor)\n         );\n      }\n   }\n\n   clearAll() {\n      if (this.__dataCollection) this.__dataCollection.clearAll();\n\n      if (this.__treeCollection) this.__treeCollection.clearAll();\n\n      this._dataStatus = this.dataStatusFlag.notInitial;\n   }\n\n   get totalCount() {\n      return this.__totalCount || 0;\n   }\n\n   ///\n   /// Components\n   ///\n\n   /**\n    * @method bind\n    * @param {Object} component - a webix element instance\n    */\n   bind(/* component */) {\n      console.error(\"Platform.ABDataCollection.bind() Not implemented\");\n   }\n\n   unbind(/* component */) {\n      console.error(\"Platform.ABDataCollection.unbind() Not implemented\");\n   }\n\n   removeComponent(comId) {\n      // get index\n      let index = this.__bindComponentIds.indexOf(comId);\n\n      // delete\n      this.__bindComponentIds.splice(index, 1);\n   }\n\n   /**\n    * @method refreshFilterConditions()\n    * This is called in two primary cases:\n    *    - on initialization of a DC to setup our filters.\n    *    - in the operation of the ABDesigner when using a DC to display data\n    *      in the Work_object_grid and the datacollection_work(?)\n    * In the case of the ABDesigner, new temporary where conditions are provided\n    * from the possible filters we can set, and those need to effect the data\n    * we display.\n    * @param {ABRowFilter.where} wheres\n    *        The filter condition from the ABRowFilter values we are storing.\n    */\n   refreshFilterConditions(wheres = null) {\n      // There are 3 Filters that help us know if our data is Valid:\n      // 1) A filter for any ABObjectQuery we are managing.\n      // 2) A filter for our own filter condition\n      // 3) A filter that represents what our scopes allows\n\n      // Set filter of ABObject\n      if (this.__filterDatasource == null)\n         this.__filterDatasource = this.AB.filterComplexNew(\n            `${this.id}_filterDatasource`\n         );\n\n      if (this.datasource) {\n         // this.__filterDatasource.applicationLoad(this.datasource.application);\n         this.__filterDatasource.fieldsLoad(this.datasource.fields());\n\n         let filterConditions;\n\n         // Query\n         if (this.datasource instanceof this.AB.Class.ABObjectQuery) {\n            filterConditions = this.datasource.where;\n         }\n         // Apr 29, 2021 Removed this because we do not want Object filters to\n         // effect validation of DataCollections\n         // Object\n\n         // else if (this.datasource instanceof ABObject) {\n         //    let currentView = this.datasource.currentView();\n         //    if (currentView && currentView.filterConditions)\n         //       filterConditions = currentView.filterConditions;\n         // }\n\n         if (filterConditions)\n            this.__filterDatasource.setValue(filterConditions);\n         else this.__filterDatasource.setValue({});\n      } else {\n         this.__filterDatasource.fieldsLoad([]);\n         this.__filterDatasource.setValue(\n            DefaultValues.settings.objectWorkspace.filterConditions\n         );\n      }\n\n      // Set filter of data view\n      // Apr 29, 2021 Added this code back to validate with DataCollection Filters\n      if (this.__filterDatacollection == null)\n         this.__filterDatacollection = this.AB.filterComplexNew(\n            `${this.id}_filterDatacollection`\n         );\n\n      // this.__filterDatacollection.applicationLoad(\n      //    this.datasource ? this.datasource.application : null\n      // );\n      this.__filterDatacollection.fieldsLoad(\n         this.datasource ? this.datasource.fields() : []\n      );\n\n      if (wheres) this.settings.objectWorkspace.filterConditions = wheres;\n\n      if (\n         this.settings &&\n         this.settings.objectWorkspace &&\n         this.settings.objectWorkspace.filterConditions\n      ) {\n         this.__filterDatacollection.setValue(\n            this.settings.objectWorkspace.filterConditions\n         );\n      } else {\n         this.__filterDatacollection.setValue(\n            DefaultValues.settings.objectWorkspace.filterConditions\n         );\n      }\n\n      // Set filter of user's scope\n      if (this.__filterScope == null)\n         this.__filterScope = this.AB.filterComplexNew(\n            `${this.id}_filterScope`\n         );\n\n      if (this.datasource) {\n         let scopeList = (this.userScopes || []).filter(\n            (s) =>\n               !s.allowAll &&\n               (s.objectIds || []).indexOf(this.datasource.id) > -1\n         );\n         if (scopeList && scopeList.length > 0) {\n            // this.__filterScope.applicationLoad(this.datasource.application);\n            this.__filterScope.fieldsLoad(this.datasource.fields() || []);\n\n            // concat all rules of scopes\n            let scopeRules = [];\n            scopeList\n               .filter(\n                  (s) => s.filter && s.filter.rules && s.filter.rules.length\n               )\n               .forEach((s) => {\n                  let sRules = (s.filter.rules || []).filter(\n                     (r) =>\n                        this.datasource.fields((f) => f.id == r.key).length > 0\n                  );\n\n                  scopeRules = scopeRules.concat(sRules);\n               });\n\n            let scopeWhere = {\n               glue: \"or\",\n               rules: scopeRules,\n            };\n            this.__filterScope.setValue(scopeWhere);\n         }\n      }\n   }\n\n   get isGroup() {\n      return this.__isGroup || false;\n   }\n\n   ///\n   /// Sync type\n   ///\n\n   get syncTypeFlag() {\n      return {\n         server: 1,\n         client: 2,\n      };\n   }\n\n   get syncType() {\n      return this.settings.syncType || DefaultValues.syncType;\n   }\n\n   /** Private methods */\n\n   /**\n    * @method _dataCollectionNew\n    * Get webix.DataCollection\n    *\n    * @return {webix.DataCollection}\n    *\n    * @param {Array} data - initial data\n    */\n   _dataCollectionNew(/*data*/) {\n      var error = new Error(\n         \"the platform.ABDataCollection._dataCollectionNew() is expected to return a proper DataCollection!\"\n      );\n      console.error(error);\n      return null;\n   }\n\n   /**\n    * @method _treeCollectionNew\n    * Get webix.TreeCollection\n    *\n    * @return {webix.TreeCollection}\n    *\n    */\n   _treeCollectionNew() {\n      console.error(\n         \"the platform.ABDataCollection._treeCollectionNew() is expected to return a proper TreeCollection!\"\n      );\n      return null;\n   }\n\n   parseTreeCollection(data = {}) {\n      // TODO all this does is log \"is missing?\"\n      if (data === {}) {\n         console.log(\n            \"Platform.ABDataCollection.parseTreeCollection() missing!\"\n         );\n      }\n   }\n   // parseTreeCollection(data = {}) {\n\n   //  if (!(this.__datasource instanceof ABObjectQuery) ||\n   //    !this.__datasource.isGroup ||\n   //    !this.__treeCollection)\n   //    return;\n\n   //  let addRowToTree = (join = {}, parentAlias = null) => {\n\n   //    let alias = join.alias;\n\n   //    (data.data || []).forEach(row => {\n\n   //      let dataId = row[`${alias}.uuid`] || row[`${alias}.id`];\n   //      if (!dataId) return;\n\n   //      // find parent nodes\n   //      let parentItemIds = [];\n   //      let parentId = row[`${parentAlias}.uuid`] || row[`${parentAlias}.id`];\n   //      if (parentId) {\n   //        parentItemIds = this.__treeCollection\n   //          .find(item => item._alias == parentAlias && item._dataId == parentId)\n   //          .map(item => item.id);\n   //      }\n\n   //      // check exists\n   //      let exists = this.__treeCollection.find(item => {\n   //        return item._alias == alias &&\n   //          item._dataId == dataId &&\n   //          (parentItemIds.length == 0 || parentItemIds.indexOf(item.$parent) > -1);\n   //      }, true);\n   //      if (exists) return;\n\n   //      let treeNode = {};\n   //      treeNode._alias = alias;\n   //      treeNode._dataId = dataId;\n   //      treeNode._itemId = row.id; // Keep row id for set cursor to data collection\n\n   //      Object.keys(row).forEach(propName => {\n\n   //        // Pull value from alias\n   //        if (propName.indexOf(`${alias}.`) == 0) {\n   //          treeNode[propName] = row[propName];\n   //        }\n\n   //      });\n\n   //      if (row.translations)\n   //        treeNode.translations = row.translations;\n\n   //      // child nodes\n   //      if (parentItemIds.length > 0)\n   //        parentItemIds.forEach(parentItemId => {\n   //          this.__treeCollection.add(treeNode, null, parentItemId);\n   //        });\n   //      // root node\n   //      else\n   //        this.__treeCollection.add(treeNode, null);\n\n   //    });\n\n   //    // Sub-joins\n   //    (join.links || []).forEach(link => {\n   //      addRowToTree(link, alias);\n   //    });\n\n   //  };\n\n   //  // Show loading cursor\n   //  (this.__bindComponentIds || []).forEach(comId => {\n\n   //    let boundComp = $$(comId);\n   //    if (boundComp &&\n   //      boundComp.showProgress)\n   //      boundComp.showProgress({ type: \"icon\" });\n\n   //  });\n\n   //  addRowToTree(this.__datasource.joins());\n\n   //  // Hide loading cursor\n   //  (this.__bindComponentIds || []).forEach(comId => {\n\n   //    let boundComp = $$(comId);\n   //    if (boundComp &&\n   //      boundComp.hideProgress)\n   //      boundComp.hideProgress();\n\n   //  })\n   // }\n\n   /**\n    * @method _queryUpdateData\n    *\n    * @param {Array} objList - List of ABObject\n    * @param {Object} values\n    */\n   _queryUpdateData(objList, values) {\n      let updatedVals = {};\n\n      // Add alias to properties of update data\n      Object.keys(values).forEach((key) => {\n         objList.forEach((oItem) => {\n            let alias = this.datasource.objectAlias(oItem.id);\n\n            updatedVals[`${alias}.${key}`] = values[key];\n\n            // Add alias to properties of .translations\n            if (\n               key == \"translations\" &&\n               values[\"translations\"] &&\n               values[\"translations\"].length\n            ) {\n               updatedVals.translations = [];\n\n               values[\"translations\"].forEach((tran) => {\n                  let updatedTran = {};\n\n                  Object.keys(tran).forEach((tranKey) => {\n                     if (tranKey == \"language_code\")\n                        updatedTran[\"language_code\"] = tran[\"language_code\"];\n                     else updatedTran[`${alias}.${tranKey}`] = tran[tranKey];\n                  });\n\n                  updatedVals.translations.push(updatedTran);\n               });\n            }\n         });\n      });\n\n      return updatedVals;\n   }\n\n   isValidData(rowData) {\n      let result = true;\n\n      // NOTE: should we use filter of the current view of object to filter\n      //        if yes, update .wheres condition in .loadData too\n      if (this.__filterDatasource)\n         result = result && this.__filterDatasource.isValid(rowData);\n\n      if (this.__filterDatacollection)\n         result = result && this.__filterDatacollection.isValid(rowData);\n\n      if (result && this.__filterScope)\n         result = result && this.__filterScope.isValid(rowData);\n\n      return result;\n   }\n\n   // Clone\n\n   clone(settings) {\n      settings = settings || this.toObj();\n      var clonedDatacollection = new this.constructor(settings, this.AB);\n      clonedDatacollection.__datasource = this.__datasource;\n      clonedDatacollection._dataStatus = this._dataStatus;\n\n      // clonedDatacollection.__dataCollection = this.__dataCollection.copy();\n      clonedDatacollection.__filterDatacollection.setValue(\n         settings.settings.objectWorkspace.filterConditions\n      );\n\n      var parseMe = () => {\n         if (clonedDatacollection.__dataCollection) {\n            clonedDatacollection.__dataCollection.parse(\n               this.__dataCollection\n                  .find({})\n                  .filter((row) =>\n                     clonedDatacollection.__filterDatacollection.isValid(row)\n                  )\n            );\n         }\n         if (clonedDatacollection.__treeCollection) {\n            clonedDatacollection.__treeCollection.parse(\n               this.__treeCollection\n                  .find({})\n                  .filter((row) =>\n                     clonedDatacollection.__filterDatacollection.isValid(row)\n                  )\n            );\n         }\n      };\n\n      parseMe();\n\n      // return new Promise((resolve, reject) => {\n      //    // load the data\n      //    clonedDatacollection\n      //       .loadData()\n      //       .then(() => {\n\n      // set the cursor\n      clonedDatacollection.setStaticCursor();\n\n      var cursorID = this.getCursor();\n      if (cursorID) {\n         // NOTE: webix documentation issue: .getCursor() is supposed to return\n         // the .id of the item.  However it seems to be returning the {obj}\n         if (cursorID.id) cursorID = cursorID.id;\n\n         clonedDatacollection.setCursor(cursorID);\n      }\n\n      return clonedDatacollection;\n\n      // resolve(clonedDatacollection);\n      //       })\n      //       .catch(reject);\n      // });\n   }\n\n   filteredClone(filters) {\n      var obj = this.toObj();\n\n      // check to see that filters are set (this is sometimes helpful to select the first record without doing so at the data collection level)\n      if (filters?.rules?.length) {\n         if (obj.settings.objectWorkspace.filterConditions?.rules?.length) {\n            obj.settings.objectWorkspace.filterConditions.rules =\n               obj.settings.objectWorkspace.filterConditions.rules.concat(\n                  filters.rules\n               );\n         } else {\n            obj.settings.objectWorkspace.filterConditions = filters;\n         }\n      }\n      let clonedDC = this.clone(obj);\n      return clonedDC; // new ABViewDataCollection(settings, this.application, this.parent);\n   }\n\n   //\n   // Event handles\n   //\n\n   /**\n    * @method eventAdd()\n    *\n    *\n    *\n    * @param {object} evt - {\n    *              emitter: object,\n    *              eventName: string,\n    *              listener: function\n    *            }\n    */\n   eventAdd(evt) {\n      if (!evt || !evt.emitter || !evt.listener) return;\n\n      this.__events = this.__events || [];\n\n      let exists = this.__events.find((e) => {\n         return e.emitter == evt.emitter && e.eventName == evt.eventName;\n         // && e.listener == evt.listener;\n      });\n\n      if (!exists || exists.length < 1) {\n         // add to array\n         this.__events.push({\n            emitter: evt.emitter,\n            eventName: evt.eventName,\n            listener: evt.listener,\n         });\n\n         // listening this event\n         evt.emitter.on(evt.eventName, evt.listener);\n      }\n   }\n\n   /**\n    * @method eventClear()\n    * unsubscribe all events.\n    * should do it before destroy a component\n    *\n    */\n   eventClear() {\n      if (this.__events && this.__events.length > 0) {\n         this.__events.forEach((e) => {\n            e.emitter.removeListener(e.eventName, e.listener);\n         });\n      }\n   }\n\n   get userScopes() {\n      return [];\n   }\n\n   get isCursorFollow() {\n      return (\n         this.settings.followDatacollectionID &&\n         (!this.settings.linkDatacollectionID || !this.settings.linkFieldID)\n      );\n   }\n\n   get datacollectionFollow() {\n      if (!this.isCursorFollow) return null;\n\n      return (this.AB ?? AB).datacollectionByID(\n         this.settings.followDatacollectionID\n      );\n   }\n}\n","// import ABApplication from \"./ABApplication\"\n\nexport default class ABDefinitionCore {\n   constructor(attributes, AB) {\n      this.AB = AB;\n      this.fromValues(attributes);\n   }\n\n   ///\n   /// Static Methods\n   ///\n   /// Available to the Class level object.  These methods are not dependent\n   /// on the instance values of the Application.\n   ///\n\n   fromValues(attributes) {\n      /*\n\t\t{\n\t\t\tid: uuid(),\n\t\t\tname: 'name',\n\t\t\ttype: 'xxxxx',\n\t\t\tjson: \"{json}\"\n\t\t}\n\t\t*/\n      if (attributes.id) {\n         this.id = attributes.id;\n      }\n      this.name =\n         attributes?.name ||\n         attributes?.json?.name ||\n         attributes?.json?.label ||\n         attributes?.json?.translations?.[0]?.label ||\n         \"\";\n      if (!this.name) {\n         this.AB.notify.builder(\n            new Error(\"Attributes for definition had no 'name'\"),\n            {\n               context: \"ABDefinitionCore.fromValues()\",\n               attributes,\n            }\n         );\n      }\n      this.type = attributes.type || attributes?.json?.type || \"\";\n      this.json = attributes.json || null;\n   }\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABApplication instance\n    * into the values needed for saving to the DB.\n    *\n    * Most of the instance data is stored in .json field, so be sure to\n    * update that from all the current values of our child fields.\n    *\n    * @return {json}\n    */\n   toObj() {\n      return {\n         id: this.id,\n         name: this.name,\n         type: this.type,\n         json: this.json,\n      };\n   }\n\n   /**\n    * @method destroy()\n    * destroy the current instance of ABDefinition\n    * Also remove it from our parent application\n    * @return {Promise}\n    */\n   destroy() {\n      return this.AB.definitionDestroy(this.id);\n   }\n\n   /**\n    * @method save()\n    * persist this instance of ABObject with it's parent ABApplication\n    * @return {Promise}\n    *         .resolve( {this} )\n    */\n   async save() {\n      if (this.id) {\n         return this.AB.definitionUpdate(this.id, this.toObj());\n      } else {\n         return this.AB.definitionCreate(this.toObj());\n      }\n   }\n}\n","/*\n * ABFactoryCore\n * an object that contains the definitions and references for a single tenant.\n * It is expected that an instance of this should be returned from an\n * ABBootstrap.init(req).then((AB)=>{}) call.\n */\n\n// const _ = require(\"lodash\");\n// const uuidv4 = require(\"uuid\");\n\n// const ABApplication = require(\"../platform/ABApplication\");\nimport ABApplication from \"../platform/ABApplication\";\n\nimport ABApplicationMobile from \"../platform/ABApplicationMobile\";\n\n// const ABDefinition = require(\"../platform/ABDefinition\");\nimport ABDefinition from \"../platform/ABDefinition\";\n\n// const ABComponent = require(\"../platform/ABComponent\");\nimport ABComponent from \"../platform/ABComponent\";\n\n// const ABFieldManager = require(\"./ABFieldManager\");\nimport ABFieldManager from \"./ABFieldManager\";\n\n// const ABIndex = require(\"../platform/ABIndex\");\nimport ABIndex from \"../platform/ABIndex\";\n\n// const ABObject = require(\"../platform/ABObject\");\nimport ABObject from \"../platform/ABObject\";\n\n// const ABObjectExternal = require(\"../platform/ABObjectExternal\");\nimport ABObjectExternal from \"../platform/ABObjectExternal\";\n// const ABObjectImport = require(\"../platform/ABObjectImport\");\nimport ABObjectImport from \"../platform/ABObjectImport\";\n// const ABDataCollection = require(\"../platform/ABDataCollection\");\nimport ABDataCollection from \"../platform/ABDataCollection\";\n// const ABObjectQuery = require(\"../platform/ABObjectQuery\");\nimport ABObjectQuery from \"../platform/ABObjectQuery\";\n\n// const ABHint = require(\"../platform/ABHint\");\nimport ABHint from \"../platform/ABHint\";\n\n// const ABProcess = require(\"../platform/ABProcess\");\nimport ABProcess from \"../platform/ABProcess\";\n\n// const ABProcessParticipant = require(\"../platform/process/ABProcessParticipant\");\nimport ABProcessParticipant from \"../platform/process/ABProcessParticipant\";\n\n// const ABProcessLane = require(\"../platform/process/ABProcessLane\");\nimport ABProcessLane from \"../platform/process/ABProcessLane\";\n\n// const ABProcessTaskManager = require(\"./process/ABProcessTaskManager\");\nimport ABProcessTaskManager from \"./process/ABProcessTaskManager\";\n\n// const ABStep = require(\"../platform/ABStep\");\nimport ABStep from \"../platform/ABStep\";\n\n// const ABViewDetailItem = require(\"../platform/views/ABViewDetailItem\");\nimport ABViewDetailItem from \"../platform/views/ABViewDetailItem\";\n\n// const ABViewFormItem = require(\"../platform/views/ABViewFormItem\");\nimport ABViewFormItem from \"../platform/views/ABViewFormItem\";\n\n// const ABObjectWorkspaceViewGrid = require(\"../platform/workspaceViews/ABObjectWorkspaceViewGrid\");\n// const ABObjectWorkspaceViewKanban = require(\"../platform/workspaceViews/ABObjectWorkspaceViewKanban\");\n// const ABObjectWorkspaceViewGantt = require(\"../platform/workspaceViews/ABObjectWorkspaceViewGantt\");\n\n// const RowFilter = require(\"../platform/RowFilter\");\nimport RowFilter from \"../platform/RowFilter\";\n\n// const FilterComplex = require(\"../platform/FilterComplex\");\nimport FilterComplex from \"../platform/FilterComplex\";\n\n// const ABMLClass = require(\"../platform/ABMLClass\");\nimport ABMLClass from \"../platform/ABMLClass\";\n\n// const EventEmitter = require(\"../platform/ABEmitter\");\nimport EventEmitter from \"../platform/ABEmitter\";\n\nclass ABFactory extends EventEmitter {\n   constructor(definitions) {\n      /**\n       * @param {hash} definitions\n       *        { ABDefinition.id : {ABDefinition} }\n       *        of all the definitions defined for the current Tenant\n       */\n\n      super();\n      this.setMaxListeners(0);\n\n      this._definitions = definitions || {};\n      // {hash}  { ABDefinition.id : {ABDefinition} }\n      // ensure ._definitions is a HASH{ ID : {ABDefinition}}\n      if (Array.isArray(definitions)) {\n         var hash = {};\n         definitions.forEach((d) => {\n            hash[d.id] = d;\n         });\n         this._definitions = hash;\n      }\n\n      //\n      //\n      // Manage our working objects\n      //\n\n      this._allApplications = [];\n      // {array} of all the ABApplication(s) in our site.\n\n      this._allObjects = [];\n      // {array} of all the ABObject(s) in our site.\n\n      this._allHints = [];\n      // {array} of all the ABHint(s) in our site.\n\n      this._allProcesses = [];\n      // {array} of all the ABProcess(s) in our site.\n\n      this._allQueries = [];\n      // {array} of all the ABObjectQuery(s) in our site.\n\n      this._allSteps = [];\n      // {array} of all the ABStep(s) in our site.\n\n      this._allDatacollections = [];\n      // {array} of all the ABDataCollection(s) in our site.\n\n      //\n      // Class References\n      //\n      this.Class = {\n         ABApplication,\n         ABComponent,\n         ABDefinition,\n         ABFieldManager,\n         ABIndex,\n         ABMLClass,\n         ABObject,\n         ABObjectExternal,\n         ABObjectImport,\n         ABObjectQuery,\n         ABProcessParticipant,\n         // ABRole      // Do we need this anymore?\n\n         // ABObjectWorkspaceViewGrid,\n         // ABObjectWorkspaceViewKanban,\n         // ABObjectWorkspaceViewGantt,\n\n         ABProcessTaskManager,\n\n         ABViewDetailItem,\n         ABViewFormItem,\n      };\n\n      //\n      // Rules\n      // These are a common set of \"rules\" for all platforms.\n      //\n      this.rules = {\n         /**\n          * @method AB.rules.isUUID\n          * evaluate a given value to see if it matches the format of a uuid\n          * @param {string} key\n          * @return {boolean}\n          */\n         isUUID: function (key) {\n            var checker = RegExp(\n               \"^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\",\n               \"i\"\n            );\n            return checker.test(key);\n         },\n\n         /**\n          * @method AB.rules.nameFilter()\n          * return a properly formatted name for an AppBuilder object.\n          * @param {string} name\n          *        The name of the object we are conditioning.\n          * @return {string}\n          */\n         nameFilter: function (name) {\n            return String(name).replace(/[^a-z0-9_.]/gi, \"\");\n         },\n\n         /**\n          * @method AB.rules.toApplicationNameFormat()\n          * return a properly formatted Application Name\n          * @param {string} name\n          *        The name of the Application we are conditioning.\n          * @return {string}\n          */\n         toApplicationNameFormat: function (name) {\n            return \"AB_\" + this.nameFilter(name);\n         },\n\n         /**\n          * @method AB.rules.toFieldRelationFormat()\n          * This function uses for define relation name of Knex Objection\n          * return a relation name of column\n          * @param {string} colName\n          *        The name of the Column\n          * @return {string}\n          */\n         toFieldRelationFormat: function (colName) {\n            return this.nameFilter(colName) + \"__relation\";\n         },\n\n         /**\n          * @method AB.rules.toJunctionTableFK()\n          * return foriegnkey (FK) column name for a junction table name\n          * @param {string} objectName\n          *        The name of the Object with a connection\n          * @param {string} columnName\n          *        The name of the connection columnName.\n          * @return {string}\n          */\n         toJunctionTableFK: function (objectName, columnName) {\n            var fkName = objectName + \"_\" + columnName;\n\n            if (fkName.length > 64) fkName = fkName.substring(0, 64);\n\n            return fkName;\n         },\n\n         /**\n          * @method AB.rules.toJunctionTableNameFormat()\n          * return many-to-many junction table name\n          * @param {string} appName\n          *        The name of the Application for this object\n          * @param {string} sourceTableName\n          *        The name of the source object we are conditioning.\n          * @param {string} targetTableName\n          *        The name of the target object we are conditioning.\n          * @param {string} colName\n          * @return {string}\n          */\n         toJunctionTableNameFormat: function (\n            appName,\n            sourceTableName,\n            targetTableName,\n            colName\n         ) {\n            // The maximum length of a table name in MySql is 64 characters\n            appName = this.toApplicationNameFormat(appName);\n            if (appName.length > 17) appName = appName.substring(0, 17);\n\n            if (sourceTableName.length > 15)\n               sourceTableName = sourceTableName.substring(0, 15);\n\n            if (targetTableName.length > 15)\n               targetTableName = targetTableName.substring(0, 15);\n\n            colName = this.nameFilter(colName);\n            if (colName.length > 14) colName = colName.substring(0, 14);\n\n            return \"{appName}_{sourceName}_{targetName}_{colName}\"\n               .replace(\"{appName}\", appName)\n               .replace(\"{sourceName}\", sourceTableName)\n               .replace(\"{targetName}\", targetTableName)\n               .replace(\"{colName}\", colName);\n         },\n\n         /**\n          * @method AB.rules.toObjectNameFormat\n          * return a properly formatted Object/Table Name\n          * @param {string} objectName\n          *        The {ABObject}.name of the Object we are conditioning.\n          * @return {string}\n          */\n         toObjectNameFormat: function (objectName) {\n            return `AB_${this.nameFilter(objectName)}`;\n         },\n      };\n\n      // Notify Helpers\n      this.notify.builder = (...params) => {\n         this.notify(\"builder\", ...params);\n      };\n\n      this.notify.developer = (...params) => {\n         this.notify(\"developer\", ...params);\n      };\n   }\n\n   /**\n    * @method definitionClean()\n    * make sure the provided ABDefinition values are properly formatted\n    * @param {ABDefinition} d\n    *        The json settings of an ABDefinition object.\n    */\n   definitionClean(d) {\n      if (typeof d.json == \"string\") {\n         try {\n            d.json = JSON.parse(d.json);\n         } catch (e) {\n            console.log(e);\n            console.error(` Error on definition id[${d.id}]`);\n         }\n      }\n   }\n\n   init() {\n      let allDefinitions = Object.keys(this._definitions).map(\n         (k) => this._definitions[k]\n      );\n      // {array} all our definitions in an Array format.\n\n      // make sure our definitions.json field is an {} and not string\n      allDefinitions.forEach((d) => {\n         this.definitionClean(d);\n      });\n\n      // perform these in order:\n      [\n         \"object\",\n         \"query\",\n         \"datacollection\",\n         \"process\",\n         \"hint\",\n         \"step\",\n         \"application\",\n      ].forEach((type) => {\n         var objTypes = allDefinitions.filter((d) => d.type == type);\n         objTypes.forEach((def) => {\n            let { keyList, keyFn } = this.objectKeysByDef(def);\n            if (keyList) {\n               this[keyList].push(this[keyFn](def.json));\n            }\n         });\n      });\n\n      this.emit(\"init.objects_ready\");\n      return Promise.resolve();\n   }\n\n   /**\n    * @method objectKeysByDef()\n    * Analyze the provided ABDefinition json and return which set of list and\n    * functions are used to create a new instance of this definition.\n    * @param {json} def\n    *        the ABDefinition json of the definition we are evaluating\n    * @return { keyList, keyFn }\n    *        keyList: {string}  which of our internal lists to store this new\n    *                 object.\n    *        keyFn: {string} which of our methods to call with the def.json\n    *               as the param that will create the new object.\n    *\n    *        ex:  this[keyList].push( this[keyFn](def.json));\n    *\n    *        if this def is not one of the types we track,\n    *        keyList = keyFn = null;\n    */\n   objectKeysByDef(def) {\n      switch (def.type) {\n         case \"application\":\n            return { keyList: \"_allApplications\", keyFn: \"applicationNew\" };\n\n         case \"datacollection\":\n            return {\n               keyList: \"_allDatacollections\",\n               keyFn: \"datacollectionNew\",\n            };\n\n         case \"hint\":\n            return { keyList: \"_allHints\", keyFn: \"hintNew\" };\n\n         case \"steps\":\n            return { keyList: \"_allSteps\", keyFn: \"stepNew\" };\n\n         case \"object\":\n            return { keyList: \"_allObjects\", keyFn: \"objectNew\" };\n\n         case \"process\":\n            return { keyList: \"_allProcesses\", keyFn: \"processNew\" };\n\n         case \"query\":\n            return { keyList: \"_allQueries\", keyFn: \"queryNew\" };\n\n         default:\n            // we don't manage any other\n            return { keyList: null, keyFn: null };\n      }\n   }\n\n   //\n   // Definitions\n   //\n\n   /**\n    * definitionByID(id)\n    * return an ABDefinition.json value ready for our objects to use.\n    * @param {string} id\n    *        the uuid of the ABDefinition to delete\n    * @param {bool} isRaw\n    *        indicates if we want the full ABDefinition, or the .json param\n    *        true : returns full ABDefinition value.\n    *        false: returns the .json parameter used by most ABObjects.\n    * @return {Promise}\n    */\n   definitionByID(id, isRaw = false) {\n      if (this._definitions[id]) {\n         if (isRaw) {\n            return this._definitions[id];\n         } else {\n            return this._definitions[id].json;\n         }\n      }\n      return null;\n   }\n\n   /**\n    * definitionNew(values)\n    * return an ABDefinition object tied to this Tenant.\n    * @param {obj} values\n    *        The value hash of the ABDefinition object to create.\n    * @return {ABDefinition}\n    */\n   definitionNew(values) {\n      return new ABDefinition(values, this);\n   }\n\n   /**\n    * definitionsParse()\n    * include the incoming definitions into our ABFactory. These new\n    * definitions will replace any existing ones with the same .id.\n    * @param {array[ABDefinitioin]} defs\n    *     the incoming array of ABDefinitions to parse.\n    * @return {Promise}\n    */\n   definitionsParse(defs = []) {\n      if (!Array.isArray(defs)) {\n         defs = [defs];\n      }\n\n      // store/replace the incoming definitions\n      // 1st: insert ALL our definitions internally\n      defs.forEach((d) => {\n         this.definitionClean(d);\n         this._definitions[d.id] = d;\n      });\n      // 2nd: Now we can then go through and signal the \"updates\"\n      // and the related objects can find their dependent definitions.\n      defs.forEach((d) => {\n         this.definitionSync(\"updated\", d.id, d);\n      });\n\n      return Promise.resolve();\n   }\n\n   /**\n    * definitionSync()\n    * Synchronize an individual definition into our repository of definitions.\n    * @param {string} op\n    *        the type of synchronization this is\n    *        [ \"created\", \"updated\", \"destroyed\"]\n    * @param {uuid} id\n    *        the definition.id of the definition we are synchronizing\n    * @param {json} def\n    *        the ABDefinition attributes we are storing.\n    */\n   definitionSync(op, id, def) {\n      var { keyList, keyFn } = this.objectKeysByDef(def);\n      if (keyList) {\n         var curr;\n         switch (op) {\n            case \"created\":\n               this[keyList].push(this[keyFn](def.json));\n               this.emit(\"definition.created\", def.json);\n               break;\n\n            case \"updated\":\n               // get the current object\n               curr = this[keyList].find((d) => d.id == id);\n\n               // remove from list\n               this[keyList] = this[keyList].filter((d) => d.id != id);\n               // add new one:\n               this[keyList].push(this[keyFn](def.json));\n\n               // signal this object needs to be updated:\n               // NOTE: if this is one of the objects we are tracking,\n               // we don't need to this.emit() the message.\n               if (curr) {\n                  curr.emit(\"definition.updated\", def.json);\n               } else {\n                  this.emit(\"definition.updated\", def.json);\n               }\n               break;\n\n            case \"destroyed\":\n               // get the current object\n               curr = this[keyList].find((d) => d.id == id);\n               if (curr) {\n                  // remove from list\n                  this[keyList] = this[keyList].filter((d) => d.id != id);\n\n                  // signal this object needs to be updated:\n                  curr.emit(\"definition.deleted\", def.json);\n\n                  this.emit(\"definition.deleted\", def.json);\n               }\n               break;\n         }\n      }\n   }\n\n   //\n   // ABObjects\n   //\n   /**\n    * @method applications()\n    * return all the ABApplications that match the provided filter.\n    * @param {fn} fn\n    *        A filter function to select specific ABApplications.\n    *        Must return true to include the entry.\n    * @return {array}\n    */\n   applications(fn = () => true) {\n      return (this._allApplications || []).filter(fn);\n   }\n\n   /**\n    * @method applicationByID()\n    * returns a single ABApplication that matches the given ID.\n    * @param {string} ID\n    *        the .id/.name/.label of the ABApplication we are searching\n    *        for.\n    * @return {ABApplication}\n    *        the matching ABApplication object if found\n    *        {null} if not found.\n    */\n   applicationByID(ID) {\n      return this.applications((a) => a.id == ID)[0];\n   }\n\n   /**\n    * @method applicationNew()\n    * Return a new instance of an ABApplication object.\n    * @param {json} values\n    *        the ABDefinition.json of the ABApplication object we are\n    *        creating.\n    * @return {ABApplication}\n    */\n   applicationNew(values) {\n      // just in case we got here by mistake:\n      if (values.appType == \"mobile\") {\n         return this.applicationMobileNew(values);\n      }\n\n      return new ABApplication(values, this);\n   }\n\n   /**\n    * @method applicationMobileNew()\n    * Return a new instance of an ABApplicationMobile object.\n    * @param {json} values\n    *        the ABDefinition.json of the ABApplicationMobile object we are\n    *        creating.\n    * @return {ABApplicationMobile}\n    */\n   applicationMobileNew(values) {\n      return new ABApplicationMobile(values, this);\n   }\n\n   /**\n    * @method datacollections()\n    * return an array of all the ABDataCollection for this ABApplication.\n    * @param {fn} filter\n    *        a filter fn to return a set of ABDataCollection that\n    *        this fn returns true for.\n    * @return {array}\n    *        array of ABDataCollection\n    */\n   datacollections(filter = () => true) {\n      return (this._allDatacollections || []).filter(filter);\n   }\n\n   /**\n    * @method datacollectionByID()\n    * returns a single ABDatacollection that matches the given ID.\n    * @param {string} ID\n    *        the .id/.name/.label of the ABDatacollection we are searching\n    *        for.\n    * @return {ABDatacollection}\n    *        the matching ABDatacollection object if found\n    *        {null} if not found.\n    */\n   datacollectionByID(ID) {\n      // an undefined or null ID should not match any DC.\n      if (!ID) return null;\n\n      return this.datacollections((dc) => {\n         return dc.id == ID || dc.name == ID || dc.label == ID;\n      })[0];\n   }\n\n   /**\n    * @method datacollectionNew()\n    * create a new instance of ABDataCollection\n    * @param {obj} values\n    *        the initial values for the DC\n    * @return {ABDatacollection}\n    */\n   datacollectionNew(values) {\n      var dc = new ABDataCollection(values, this);\n      dc.on(\"destroyed\", () => {\n         // make sure it is no longer in our internal list\n         this._allDatacollections = this._allDatacollections.filter(\n            (d) => d.id != dc.id\n         );\n      });\n      return dc;\n   }\n\n   /**\n    * @method fieldNew()\n    * return an instance of a new (unsaved) ABField that is tied to a given\n    * ABObject.\n    * NOTE: this new field is not included in our this.fields until a .save()\n    * is performed on the field.\n    * @param {obj} values  the initial values for this field.\n    *                - { key:'{string}'} is required\n    * @param {ABObject} object  the parent object this field belongs to.\n    * @return {ABField}\n    */\n   fieldNew(values, object) {\n      // NOTE: ABFieldManager returns the proper ABFieldXXXX instance.\n      return ABFieldManager.newField(values, object);\n   }\n\n   /**\n    * @method indexNew()\n    * return an instance of a new (unsaved) ABIndex.\n    * @return {ABIndex}\n    */\n   indexNew(values, object) {\n      return new ABIndex(values, object);\n   }\n\n   /**\n    * @method Label()\n    * a simple label factory.\n    * It is expected to be called like this:\n    * @codestart\n    *    var L = AB.Label();\n    *    var outputText = L(\"Hello World\");\n    *    var o2 = L(\"I'm {0} years old\", [5]);\n    * @codeend\n    * @return {fn}\n    */\n   Label() {\n      return (key, altText, values = []) => {\n         var label = key;\n         if (altText) {\n            if (Array.isArray(altText)) {\n               values = altText;\n            } else {\n               label = altText;\n            }\n         }\n\n         values.forEach((v, i) => {\n            var sub = `{${i}}`;\n            label = label.replaceAll(sub, v);\n         });\n\n         return label;\n      };\n   }\n\n   /**\n    * @method objects()\n    * return an array of all the ABObjects for this ABApplication.\n    * @param {fn} filter\n    *        a filter fn to return a set of ABObjects that this fn\n    *        returns true for.\n    * @return {array}\n    *        array of ABObject\n    */\n   objects(filter = () => true) {\n      return (this._allObjects || []).filter(filter);\n   }\n\n   /**\n    * @method objectByID()\n    * return the specific object requested by the provided id.\n    * @param {string} ID\n    * @return {obj}\n    */\n   objectByID(ID) {\n      return this.objects((o) => {\n         return o.id == ID || o.name == ID || o.label == ID;\n      })[0];\n   }\n\n   /**\n    * @method objectNew()\n    * return an instance of a new (unsaved) ABObject that is tied to this\n    * ABApplication.\n    * NOTE: this new object is not included in our this.objects until a .save()\n    * is performed on the object.\n    * @return {ABObject}\n    */\n   objectNew(values) {\n      var newObj = null;\n\n      if (values.isExternal == true)\n         newObj = new ABObjectExternal(values, this);\n      else if (values.isImported == true)\n         newObj = new ABObjectImport(values, this);\n      else newObj = new ABObject(values, this);\n\n      /*\n      // IS THIS CORRECT?\n      newObj.on(\"destroyed\", () => {\n         // make sure it is no longer in our internal list\n         this._allObjects = this._allObjects.filter((o) => o.id != newObj.id);\n      });\n      */\n\n      return newObj;\n   }\n\n   objectFile() {\n      return this.objectByID(\"4a9d89c9-f4eb-41af-91e4-909eff389f3e\");\n   }\n\n   objectLanguage() {\n      return this.objectByID(\"d84cd351-d96c-490f-9afb-2a0b880ca0ec\");\n   }\n\n   objectProcessForm() {\n      return this.objectByID(\"d36ae4c8-edef-48d8-bd9c-79a0edcaa067\");\n   }\n\n   objectProcessInstance() {\n      return this.objectByID(\"2ba85be0-78db-4eda-ba43-c2c4e3831849\");\n   }\n\n   objectRole() {\n      return this.objectByID(\"c33692f3-26b7-4af3-a02e-139fb519296d\");\n   }\n\n   objectScope() {\n      return this.objectByID(\"af10e37c-9b3a-4dc6-a52a-85d52320b659\");\n   }\n\n   objectToken() {\n      return this.objectByID(\"08826ac7-4b33-4745-a3d7-f7831ca4ff59\");\n   }\n\n   objectUser() {\n      return this.objectByID(\"228e3d91-5e42-49ec-b37c-59323ae433a1\");\n   }\n\n   //\n   // Hints\n   //\n   /**\n    * @method hints()\n    * return all the ABHints that match the provided filter.\n    * @param {fn} fn\n    *        A filter function to select specific ABHints.\n    *        Must return true to include the entry.\n    * @return {array}\n    */\n   hints(filter = () => true) {\n      return (this._allHints || []).filter(filter);\n   }\n\n   /**\n    * @method hintByID()\n    * return the specific hint requested by the provided id.\n    * @param {string} ID\n    * @return {obj}\n    */\n   hintID(ID) {\n      return this.hints((h) => {\n         return h.id == ID || h.name == ID || h.label == ID;\n      })[0];\n   }\n\n   /**\n    * @method hintNew()\n    * return an instance of a new (unsaved) ABHint that is tied to this\n    * ABApplication.\n    * NOTE: this new hint is not included in our this.hints until a .save()\n    * is performed on the object.\n    * @return {ABHint}\n    */\n   hintNew(values) {\n      var newHint = new ABHint(values, this);\n\n      return newHint;\n   }\n\n   //\n   // Steps\n   //\n   /**\n    * @method steps()\n    * return all the ABSteps that match the provided filter.\n    * @param {fn} fn\n    *        A filter function to select specific ABSteps.\n    *        Must return true to include the entry.\n    * @return {array}\n    */\n   steps(filter = () => true) {\n      return (this._allSteps || []).filter(filter);\n   }\n\n   /**\n    * @method stepByID()\n    * return the specific step requested by the provided id.\n    * @param {string} ID\n    * @return {obj}\n    */\n   stepID(ID) {\n      return this.steps((s) => {\n         return s.id == ID || s.name == ID || s.label == ID;\n      })[0];\n   }\n\n   /**\n    * @method stepNew()\n    * return an instance of a new (unsaved) ABStep that is tied to this\n    * ABApplication.\n    * NOTE: this new step is not included in our this.steps until a .save()\n    * is performed on the object.\n    * @return {ABHint}\n    */\n   stepNew(id, hintID) {\n      var stepDef = this.definitionByID(id);\n      if (stepDef) {\n         var getStep = new ABStep(stepDef, this);\n         return getStep;\n      } else {\n         var params = {\n            settings: {\n               hint: hintID,\n            },\n         };\n         var newStep = new ABStep(params, this);\n         return newStep;\n      }\n   }\n\n   //\n   // Processes\n   //\n   /**\n    * @method processes()\n    * return all the ABProcess that match the provided filter.\n    * @param {fn} fn\n    *        A filter function to select specific ABProcess.\n    *        Must return true to include the entry.\n    * @return {array}\n    */\n   processes(filter = () => true) {\n      return (this._allProcesses || []).filter(filter);\n   }\n\n   /**\n    * @method processByID()\n    * return the specific process requested by the provided id.\n    * @param {string} ID\n    * @return {obj}\n    */\n   processByID(ID) {\n      return this.processes((p) => {\n         return p.id == ID || p.name == ID || p.label == ID;\n      })[0];\n   }\n\n   /**\n    * @method processNew()\n    * Return a new instance of an ABProcess object.\n    * @param {json} values\n    *        the ABDefinition.json of the ABProcess object we are\n    *        creating.\n    * @return {ABProcess}\n    */\n   processNew(values) {\n      return new ABProcess(values, this);\n   }\n\n   /**\n    * @method processElementNew(id)\n    * return an instance of a new ABProcessOBJ that is tied to a given\n    * ABProcess.\n    * @param {string} id\n    *        the ABDefinition.id of the element we are creating\n    * @param {ABProcess} process\n    *        the process this task is a part of.\n    * @return {ABProcessTask}\n    */\n   processElementNew(id, process) {\n      var taskDef = this.definitionByID(id);\n      if (taskDef) {\n         switch (taskDef.type) {\n            case ABProcessParticipant.defaults().type:\n               return new ABProcessParticipant(taskDef, process, this);\n            // break;\n\n            case ABProcessLane.defaults().type:\n               return new ABProcessLane(taskDef, process, this);\n            // break;\n\n            default:\n               // default to a Task\n               return ABProcessTaskManager.newTask(taskDef, process, this);\n            // break;\n         }\n      }\n      return null;\n   }\n\n   /**\n    * @method processElementNewForModelDefinition(def)\n    *\n    * return an instance of a new ABProcess[OBJ] that is tied to the given\n    * BPMI:Element definition.\n    *\n    * @param {BPMI:Element} element the element definition from our BPMI\n    *              modler.\n    * @return {ABProcess[OBJ]}\n    */\n   processElementNewForModelDefinition(element, process) {\n      var newElement = null;\n\n      switch (element.type) {\n         case \"bpmn:Participant\":\n            newElement = new ABProcessParticipant({}, process, this);\n            break;\n\n         case \"bpmn:Lane\":\n            newElement = new ABProcessLane({}, process, this);\n            break;\n\n         default:\n            var defaultDef = ABProcessTaskManager.definitionForElement(element);\n            if (defaultDef) {\n               newElement = ABProcessTaskManager.newTask(\n                  defaultDef,\n                  process,\n                  this\n               );\n            }\n            break;\n      }\n\n      // now make sure this new Obj pulls any relevant info from the\n      // diagram element\n      if (newElement) {\n         newElement.fromElement(element);\n      }\n      return newElement;\n   }\n\n   /**\n    * @method queries()\n    * return an array of all the ABObjectQuery(s).\n    * @param {fn} filter\n    *        a filter fn to return a set of ABObjectQuery(s) that this fn\n    *        returns true for.\n    * @return {array}\n    *        array of ABObjectQuery\n    */\n   queries(filter = () => true) {\n      return (this._allQueries || []).filter(filter);\n   }\n   // queriesAll() {\n   //    console.error(\n   //       \"ABFactory.queriesAll() Depreciated! Use .queries() instead. \"\n   //    );\n   //    return this.queries();\n   // }\n\n   /**\n    * @method queryByID()\n    * return the specific query requested by the provided id.\n    * NOTE: this method has been extended to allow .name and .label\n    * as possible lookup values.\n    * @param {string} ID\n    * @return {ABObjectQuery}\n    */\n   queryByID(ID) {\n      return this.queries((q) => {\n         return q.id == ID || q.name == ID || q.label == ID;\n      })[0];\n   }\n\n   /**\n    * @method queryNew()\n    * return an instance of a new (unsaved) ABObjectQuery that is tied to this\n    * ABFactory.\n    * @return {ABObjectQuery}\n    */\n   queryNew(values) {\n      return new ABObjectQuery(values, this);\n   }\n\n   /**\n    * @method rowfilterNew()\n    * return an instance of a new RowFilter that is tied to this\n    * ABFactory.\n    * @return {RowFilter}\n    */\n   rowfilterNew(App, idBase) {\n      if (App) {\n         console.error(\"!! Who is calling this with an App?\");\n      }\n      return new RowFilter(App || this._App, idBase, this);\n   }\n\n   /**\n    * @method filterComplexNew()\n    * return an instance of a new FilterComplex that is tied to this\n    * ABFactory.\n    * @return {FilterComplex}\n    */\n   filterComplexNew(idBase, options = {}) {\n      return new FilterComplex(idBase, this, options);\n   }\n\n   /**\n    * @method viewNewDetatched()\n    * Return an instance of a View that is NOT attached to an ABApplication.\n    * @return {ABViewXXX}\n    */\n   viewNewDetatched(values) {\n      if (!this._mockApp) {\n         this._mockApp = this.applicationNew({});\n      }\n      return this._mockApp.viewNew(values, this._mockApp);\n   }\n\n   //\n   // Utilities\n   //\n\n   /**\n    * notify()\n    * will send alerts to a group of people. These alerts are usually about\n    * configuration errors, or software problems.\n    * @param {string} domain\n    *     which group of people we are sending a notification to.\n    * @param {Error} error\n    *     An error object generated at the point of issue.\n    * @param {json} info\n    *     Additional related information concerning the issue.\n    */\n   notify(/* ...params */) {\n      console.error(\n         \"ABFactory.notify() is expected to be overwritten by the platform!\"\n      );\n   }\n\n   /**\n    * notifyInfo()\n    * a common routine to parse the info parameter provided to .notify() into\n    * a more detailed set of data.\n    * @param {json} info\n    * @return {json}\n    */\n   _notifyInfo(info) {\n      var moreInfo = {};\n\n      if (info) {\n         Object.keys(info).forEach((k) => {\n            switch (k) {\n               case \"field\":\n                  moreInfo.objectID = info[k].object?.id;\n                  moreInfo.objectName = info[k].object?.name;\n                  moreInfo.fieldID = info[k].id;\n                  moreInfo.fieldName = info[k].label || info[k].name;\n                  break;\n\n               case \"object\":\n                  moreInfo.objectID = info[k].id;\n                  moreInfo.objectName = info[k].name;\n                  break;\n\n               case \"datacollection\":\n                  moreInfo.datacollectionID = info[k].id;\n                  moreInfo.datacollectionName = info[k].label || info[k].name;\n                  var ds = info[k].datasource;\n                  if (ds) {\n                     moreInfo.datacollectionDSID = ds.id;\n                     moreInfo.datacollectionDSName = ds.name;\n                  }\n                  break;\n\n               case \"process\":\n                  moreInfo.processID = info[k].id;\n                  moreInfo.processName = info[k].label || info[k].name;\n                  break;\n\n               case \"req\":\n                  moreInfo.req = {\n                     jobID: info[k].jobID,\n                     tenantID: info[k]._tenantID,\n                     user: info[k]._user,\n                  };\n                  break;\n\n               case \"task\":\n                  if (info[k].process) {\n                     moreInfo.processID = info[k].process.id;\n                     moreInfo.processName =\n                        info[k].process.label || info[k].process.name;\n                  }\n                  moreInfo.taskID = info[k].id;\n                  moreInfo.taskName = info[k].label || info[k].name;\n                  break;\n\n               case \"view\":\n                  if (info[k].application) {\n                     moreInfo.applicationID = info[k].application.id;\n                     moreInfo.applicationName =\n                        info[k].application.label || info[k].application.name;\n                  }\n                  moreInfo.viewID = info[k].id;\n                  moreInfo.viewName = info[k].label || info[k].name;\n                  moreInfo.viewKey = info[k].key;\n                  break;\n               default:\n                  moreInfo[k] = info[k];\n                  break;\n            }\n         });\n      }\n\n      return moreInfo;\n   }\n}\n\nexport default ABFactory;\n","/*\n * ABFieldManager\n *\n * An interface for managing the different ABFields available in our AppBuilder.\n *\n */\n\n/*\n * Fields\n * A name => ABField  hash of the different ABFields available.\n */\nvar Fields = {};\n\nvar AllFieldClasses = [\n   await import(\"../platform/dataFields/ABFieldString\"),\n   await import(\"../platform/dataFields/ABFieldLongText\"),\n   await import(\"../platform/dataFields/ABFieldNumber\"),\n   await import(\"../platform/dataFields/ABFieldDate\"),\n   await import(\"../platform/dataFields/ABFieldDateTime\"),\n   await import(\"../platform/dataFields/ABFieldBoolean\"),\n   await import(\"../platform/dataFields/ABFieldList\"),\n   await import(\"../platform/dataFields/ABFieldTree\"),\n   await import(\"../platform/dataFields/ABFieldEmail\"),\n   await import(\"../platform/dataFields/ABFieldFile\"),\n   await import(\"../platform/dataFields/ABFieldImage\"),\n   await import(\"../platform/dataFields/ABFieldUser\"),\n   await import(\"../platform/dataFields/ABFieldConnect\"),\n   await import(\"../platform/dataFields/ABFieldCalculate\"),\n   await import(\"../platform/dataFields/ABFieldTextFormula\"),\n   await import(\"../platform/dataFields/ABFieldFormula\"),\n   await import(\"../platform/dataFields/ABFieldAutoIndex\"),\n   await import(\"../platform/dataFields/ABFieldJson\"),\n   await import(\"../platform/dataFields/ABFieldCombine\"),\n   await import(\"../platform/dataFields/ABFieldSelectivity\"),\n];\n\nAllFieldClasses.forEach((FIELD) => {\n   FIELD = FIELD.default;\n   Fields[FIELD.defaults().key] = FIELD;\n});\n\nexport default class ABFieldManager {\n   /*\n    * @function allFields\n    * return all the currently defined ABFields in an array.\n    * @return [{ABField},...]\n    */\n   static allFields() {\n      var fields = [];\n      for (var f in Fields) {\n         fields.push(Fields[f]);\n      }\n      return fields;\n   }\n\n   /**\n    * @function fieldByKey()\n    * Return a specific ABField that matches the given key\n    * @param {string} key\n    *        The ABField.key value we are looking for.\n    * @return {ABFieldXXX || undefined}\n    */\n   static fieldByKey(key) {\n      return Fields[key];\n   }\n\n   /*\n    * @function newField\n    * return an instance of an ABField based upon the values.key value.\n    * @return {ABField}\n    */\n   static newField(values, object) {\n      if (values.key) {\n         try {\n            return new Fields[values.key](values, object);\n         } catch (err) {\n            console.log(\"Error\", err);\n            console.log(\"Available fields\", Fields);\n            console.log(\"Requested field\", values.key);\n         }\n      } else {\n         console.log(\"-------\");\n         console.log(\"values:\");\n         console.error(values);\n         console.log();\n         console.error(\"object:\");\n         console.error(object);\n         console.log(\"-------\");\n         throw new Error(\n            `ABFieldManager.newField(): Unknown Field Key [${values.name}][${values.key}] for object[${object.name}]`\n         );\n         //// TODO: what to do here?\n      }\n   }\n}\n","// import ABApplication from \"./ABApplication\"\n\nimport ABMLClass from \"../platform/ABMLClass\";\n// const _concat = require(\"lodash/concat\");\n\nexport default class ABHintCore extends ABMLClass {\n   constructor(attributes, AB) {\n      super([\"name\", \"description\"], AB);\n\n      this.fromValues(attributes);\n\n      // indicate we are ready.\n      // this.elements().forEach((e) => {\n      //    e.onProcessReady();\n      // });\n   }\n\n   ///\n   /// Static Methods\n   ///\n   /// Available to the Class level object.  These methods are not dependent\n   /// on the instance values of the Application.\n   ///\n\n   fromValues(attributes) {\n      /*\n    {\n      id: uuid(),\n      name: 'name',\n      description: 'description',\n      type: 'hint',\n      settings: {\n         active: {boolean},\n         view: uuid\n      }\n    }\n    */\n      let active = attributes?.settings?.active ?? \"1\";\n\n      this.id = attributes?.id || \"\";\n      this.name = attributes?.name || \"New Tutorial\";\n      this.description = attributes?.description || \"\";\n      this.type = attributes?.type || \"hint\";\n      this.settings = {};\n      this.settings.active = active;\n      this.settings.transition = attributes?.settings?.transition;\n      this.settings.showIntroStep = attributes?.settings?.showIntroStep;\n      this.settings.view = attributes?.settings?.view || \"\";\n      this.stepIDs = attributes?.stepIDs || [];\n\n      let currSteps = this?._steps || {};\n      this._steps = {};\n      (attributes?.stepIDs || []).forEach((sID) => {\n         if (!sID) return;\n         var ele = this.AB.stepNew(sID, this.id);\n         if (ele) {\n            this._steps[sID] = ele;\n         }\n      });\n      if (attributes) super.fromValues(attributes); // perform translation on this object.\n      // NOTE: keep this at the end of .fromValues();\n\n      if (!this.label) {\n         this.label = this.name;\n      }\n   }\n\n   /**\n    * @method toObj()\n    * properly compile the current state of this ABProcess instance\n    * into the values needed for saving to the DB.\n    * @return {json}\n    */\n   toObj() {\n      // default label value\n      if (!this.label) {\n         this.label = this.name;\n      }\n\n      // OP.Multilingual.unTranslate(this, this, [\"label\"]);\n      var data = super.toObj();\n\n      var fieldsToSave = [\"type\", \"settings\", \"stepIDs\", \"id\", \"name\"];\n      fieldsToSave.forEach((f) => {\n         data[f] = this[f];\n      });\n\n      return data;\n   }\n\n   /**\n    * steps()\n    * return an array of steps that match the given filter (or all steps\n    * if no filter is provided).\n    * @param {fn} fn an iterator that returns true if the provided element\n    *                should be returned.\n    * @return {[ABStep]}\n    */\n   steps(fn = () => true) {\n      var allSteps = Object.keys(this._steps).map((e) => {\n         return this._steps[e];\n      });\n      return allSteps.filter(fn);\n   }\n\n   /**\n    * stepAdd()\n    * insert a step to be added to this hint.\n    * @param {ABStep} element\n    *        the full instance of an ABStep to track.\n    */\n   stepAdd(step) {\n      this._steps[step.id] = step;\n   }\n\n   /**\n    * stepByID()\n    * return the {ABStep} that has the given .id\n    * @param {string} id\n    * @return {ABStep[OBJ]}\n    */\n   stepByID(id) {\n      return this._steps[id] ?? null;\n   }\n\n   /**\n    * stepRemove()\n    * remove a step from being displayed by this hint.\n    * @param {id} ABStep ID\n    *        an ID of a step\n    *        to remove.\n    */\n   stepRemove(id) {\n      // remove from stepIDs array\n      let stepIndex = this.stepIDs.indexOf(id);\n      if (stepIndex > -1) {\n         this.stepIDs.splice(stepIndex, 1);\n      }\n      // remove from _steps definitions\n      delete this._steps[id];\n   }\n}\n","import ABMLClass from \"../platform/ABMLClass\";\n\nexport default class ABIndexCore extends ABMLClass {\n   constructor(attributes, object) {\n      super([\"label\"], object.AB);\n      this.object = object;\n\n      this.fromValues(attributes);\n   }\n\n   fromValues(attributes) {\n      /*\n      {\n        id: uuid(),\n        name: 'name',\n        fields:[\n            {ABDataField.id}\n        ],\n        unique: {boolean}\n      }\n      */\n      this.id = attributes.id;\n      this.type = \"index\";\n      this.name = attributes.name;\n      this.unique = JSON.parse(attributes.unique || false);\n\n      // Convert to an array\n      if (attributes.fieldIDs && !Array.isArray(attributes.fieldIDs)) {\n         attributes.fieldIDs = [attributes.fieldIDs];\n      }\n\n      this._unknownFieldIDs = [];\n      this.fields = (attributes.fieldIDs || [])\n         .map((f) => {\n            let field = this.object.fieldByID(f);\n            if (!field) {\n               this._unknownFieldIDs.push(f);\n               let err = new Error(\n                  `Index[${this.name}][${this.id}] is referencing an unknown field[${f}]`\n               );\n               this.AB.notify.developer(err, {\n                  index: this.id,\n                  field: f,\n               });\n            }\n            return field;\n         })\n         .filter((fId) => fId);\n\n      if (this.fields.length == 0) {\n         let err = new Error(\n            `Index[${this.name}][${this.id}] is not referencing any fields`\n         );\n         this.AB.notify.developer(err, {\n            index: this.id,\n            attributeFieldIDs: attributes.fieldIDs || [],\n         });\n      }\n\n      // let the MLClass process the Translations\n      super.fromValues(attributes);\n   }\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABApplication instance\n    * into the values needed for saving to the DB.\n    *\n    * Most of the instance data is stored in .json field, so be sure to\n    * update that from all the current values of our child fields.\n    *\n    * @return {json}\n    */\n   toObj() {\n      let result = super.toObj();\n\n      result.id = this.id;\n      result.type = \"index\";\n      result.name = this.name;\n      result.unique = this.unique;\n\n      // Convert to an array\n      if (this.fields && !Array.isArray(this.fields)) {\n         this.fields = [this.fields];\n      }\n\n      result.fieldIDs = (this.fields || [])\n         .map((f) => {\n            // Convert to the id of field\n            return f.id || f;\n         })\n         .filter((fId) => fId);\n\n      // carry along the unknown Field IDs so a\n      // developer/builder can come along and trace\n      // what happened.\n      this._unknownFieldIDs.forEach((f) => {\n         result.fieldIDs.push(f);\n      });\n\n      return result;\n   }\n\n   get indexName() {\n      let tableName = this.object.dbTableName();\n\n      // Maximum 64 characters long\n      return `${tableName}_${this.name}`.replace(/ /g, \"\").substring(0, 64);\n   }\n\n   get uniqueName() {\n      let indexName = this.indexName.substring(0, 57);\n\n      return `${indexName}_unique`;\n   }\n}\n","/**\n * ABMLClassCore\n * manage the multilingual information of an instance of a AB Defined Class.\n *\n * these classes have certain fields (\"label\", \"description\"), that can be\n * represented in different language options as defined by our platform.\n *\n * This core ABMLClass will internally track the multilingual fields\n * (this.mlFields) and auto\n */\nimport ABEmitter from \"../platform/ABEmitter\";\nexport default class ABMLClassCore extends ABEmitter {\n   constructor(fieldList, AB) {\n      super();\n      this.mlFields = fieldList || [\"label\"];\n      // {array}\n      // field names of values that are multilingual\n\n      this.AB = AB;\n      // {ABFactory}\n      // our common source of references for other AB objects\n   }\n\n   ///\n   /// Static Methods\n   ///\n   /// Available to the Class level object.  These methods are not dependent\n   /// on the instance values of the Application.\n   ///\n\n   /**\n    * @method fromValues\n    * called during the .fromValues() work chain.  Should be called\n    * AFTER all the current data is already populated.\n    */\n   fromValues(attributes) {\n      this.translations = attributes.translations;\n\n      // if translations were provided\n      if (this.translations) {\n         // multilingual fields: label, description\n         this.translate();\n      } else {\n         // maybe this came from a form that has ML values in the attributes, but\n         // no .translations[] yet:\n         // check for mlFields in attributes and record them here:\n         (this.mlFields || []).forEach((field) => {\n            if (attributes[field]) {\n               this[field] = attributes[field];\n            }\n         });\n      }\n   }\n\n   /**\n    * @function defaultTranslations()\n    * return an initial .translations entry to initialize the\n    * translations values of a given translateable object.\n    * @param {array} fields  the multilingual fields this obj manages.\n    * @param {json}  values  a default set of values for this object.\n    * @return {array}  of translation entries.\n    */\n   defaultTranslations(fields, values) {\n      values = values || {};\n\n      var entry = {\n         // Question: should this be this.AB.Multilingual.currentLanguage() || \"en\"\n         // currently since the defaults are sent in programattically, we are\n         // expecting the labels to be in \"en\"\n         language_code: \"en\",\n      };\n\n      fields.forEach((f) => {\n         entry[f] = values[f] || f;\n      });\n\n      return [entry];\n   }\n\n   /**\n    * @method languageDefault\n    * return a default language code.\n    * @return {string}\n    */\n   languageDefault() {\n      return \"en\";\n   }\n\n   /**\n    * @method toObj()\n    * called during the .toObj() work chain.  Should be called\n    * BEFORE the current data is populated.\n    */\n   toObj() {\n      this.unTranslate();\n\n      return {\n         translations: this.translations,\n      };\n   }\n\n   /**\n    * @method toDefinition()\n    * convert this instance into an ABDefinition object.\n    * @return {ABDefinition}\n    */\n   toDefinition() {\n      return this.AB.definitionNew({\n         id: this.id,\n         name: this.name,\n         type: this.type,\n         json: this.toObj(),\n      });\n   }\n\n   /**\n    * @method translate\n    * Given a set of json data, pull out any multilingual translations\n    * and flatten those values to the base object.\n    * @param {obj} obj  The instance of the object being translated\n    * @param {json} json The json data being used for translation.\n    *                      There should be json.translations = [ {transEntry}, ...]\n    *                      where transEntry = {\n    *                          language_code:'en',\n    *                          field1:'value',\n    *                          ...\n    *                      }\n    * @param {array} fields an Array of multilingual fields to pull to\n    *                       the obj[field] value.\n    */\n   translate(obj, json, fields, languageCode = null) {\n      if (!obj) obj = this;\n      if (!json) json = this;\n      if (!fields) fields = this.mlFields || [];\n\n      if (!json.translations) {\n         json.translations = [];\n      }\n\n      if (typeof json.translations == \"string\") {\n         json.translations = JSON.parse(json.translations);\n      }\n\n      var currLanguage = languageCode || this.languageDefault();\n\n      if (fields && fields.length > 0) {\n         // [fix] if no matching translation is in our json.translations\n         //       object, then just use the 1st one.\n         var first = null; // the first translation entry encountered\n         var found = false; // did we find a matching translation?\n\n         json.translations.forEach(function (t) {\n            if (!first) first = t;\n\n            // find the translation for the current language code\n            if (t.language_code == currLanguage) {\n               found = true;\n\n               // copy each field to the root object\n               fields.forEach(function (f) {\n                  if (t[f] != null) obj[f] = t[f];\n\n                  obj[f] = t[f] || \"\"; // default to '' if not found.\n               });\n            }\n         });\n\n         // if !found, then use the 1st entry we did find.  prepend desired\n         // [language_code] to each of the fields.\n         if (!found && first) {\n            // copy each field to the root object\n            fields.forEach(function (f) {\n               if (first[f] != null && first[f] != \"\")\n                  obj[f] = `[${currLanguage}]${first[f]}`;\n               else obj[f] = \"\"; // default to '' if not found.\n            });\n         }\n      }\n   }\n\n   /**\n    * @method unTranslate\n    * Take the multilingual information in the base obj, and push that\n    * down into the json.translations data.\n    * @param {obj} obj  The instance of the object with the translation\n    * @param {json} json The json data being used for translation.\n    *                      There should be json.translations = [ {transEntry}, ...]\n    *                      where transEntry = {\n    *                          language_code:'en',\n    *                          field1:'value',\n    *                          ...\n    *                      }\n    * @param {array} fields an Array of multilingual fields to pull from\n    *                       the obj[field] value.\n    */\n   unTranslate(obj, json, fields) {\n      if (!obj) obj = this;\n      if (!json) json = this;\n      if (!fields) fields = this.mlFields || [];\n\n      if (!json.translations) {\n         json.translations = [];\n      }\n\n      var currLanguage = this.languageDefault();\n\n      if (fields && fields.length > 0) {\n         var foundOne = false;\n\n         json.translations.forEach(function (t) {\n            // find the translation for the current language code\n            if (t.language_code == currLanguage) {\n               // copy each field to the root object\n               fields.forEach(function (f) {\n                  // verify obj[f] is defined\n                  // --> DONT erase the existing translation\n                  if (obj[f] != null) {\n                     t[f] = obj[f];\n                  }\n               });\n\n               foundOne = true;\n            }\n         });\n\n         // if we didn't update an existing translation\n         if (!foundOne) {\n            // create a translation entry:\n            var trans = {};\n\n            // assume current languageCode:\n            trans.language_code = currLanguage;\n\n            fields.forEach(function (field) {\n               if (obj[field] != null) {\n                  trans[field] = obj[field];\n               }\n            });\n\n            json.translations.push(trans);\n         }\n      }\n   }\n}\n","//\n// ABModelCore\n//\n// Represents the Data interface for an ABObject data.\n//\n// to use an ABModel to load a DataTable:\n// Method 1:\n//  gather all the data externally and send to the DataTable\n//    Model.findAll()\n//    .then((data)=>{\n//      DataTable.parse(data);\n//    })\n//\n\nexport default class ABModelCore {\n   constructor(object) {\n      // link me to my ABObject\n      this.object = object;\n      this.AB = object.AB;\n\n      this._where = null;\n      this._sort = null;\n      this._skip = null;\n      this._limit = null;\n\n      this.staleRefreshInProcess = false;\n      this.staleRefreshMap = {\n         /* id : Promise */\n      };\n      this.staleRefreshPending = [];\n      this.staleRefreshTimerID = null;\n\n      // include this\n      this.responseContext = { key: \"--\", context: {} };\n   }\n\n   ///\n   /// Static Methods\n   ///\n   /// Available to the Class level object.  These methods are not dependent\n   /// on the instance values of the Application.\n   ///\n\n   ///\n   /// Instance Methods\n   ///\n\n   contextKey(key) {\n      this.responseContext.key = key || \"--\";\n   }\n\n   contextValues(values) {\n      this.responseContext.context = values || {};\n   }\n\n   // Prepare multilingual fields to be untranslated\n   // Before untranslating we need to ensure that values.translations is set.\n   prepareMultilingualData(values) {\n      // if this object has some multilingual fields, translate the data:\n      var mlFields = this.object.multilingualFields();\n      // if mlFields are inside of the values saved we want to translate otherwise do not because it will reset the translation field and you may loose unchanged translations\n      var shouldTranslate = false;\n      if (mlFields.length) {\n         mlFields.forEach(function (field) {\n            if (values[field] != null) {\n               shouldTranslate = true;\n            }\n         });\n      }\n      if (shouldTranslate) {\n         if (\n            values.translations == null ||\n            typeof values.translations == \"undefined\" ||\n            values.translations == \"\"\n         ) {\n            values.translations = [];\n         }\n         this.object.unTranslate(values, values, mlFields);\n      }\n   }\n\n   request(method, params) {\n      console.error(\n         \"!!! ABModelCore.request() should be overridden by platform.\"\n      );\n      return Promise.resolve();\n   }\n\n   // /**\n   //  * @method create\n   //  * update model values on the server.\n   //  */\n   // create(values) {\n\n   //   this.prepareMultilingualData(values);\n\n   //   var params = {\n   //     url: this.object.urlRest(),\n   //     params: values\n   //   }\n   //   return this.request('post', params)\n   //     .then((data) => {\n\n   //       this.normalizeData(data);\n\n   //       return data;\n\n   //       // FIX: now with sockets, the triggers are fired from socket updates.\n   //       // trigger a create event\n   //       // triggerEvent('create', this.object, data);\n\n   //     })\n   //     .catch(reject);\n\n   // }\n\n   /**\n    * @method delete\n    * remove this model instance from the server\n    * @param {integer} id  the .id of the instance to remove.\n    * @return {Promise}\n    */\n   // delete(id) {\n\n   //   var params = {\n   //     url: this.object.urlRestItem(id)\n   //   }\n   //   return this.request('delete', params)\n   //     .then((data) => {\n\n   //       return data;\n\n   //       // FIX: now with sockets, the triggers are fired from socket updates.\n   //       // trigger a delete event\n   //       // triggerEvent('delete', this.object, id);\n\n   //     })\n   // }\n\n   /**\n    * @method findAll\n    * performs a data find with the provided condition.\n    */\n   //   findAll(cond) {\n\n   //     cond = cond || {};\n\n   //     var params = {\n   //       url: this.object.urlRest(),\n   //       params: cond\n   //     }\n   //     return this.request('get', params)\n   //       .then((data) => {\n\n   //         this.normalizeData(data.data);\n\n   //         resolve(data);\n   //       })\n   //       .catch((err) => {\n   // /// TODO: this should be done in platform/ABModel:\n   //         // if (err && err.code) {\n   //         //  switch(err.code) {\n   //         //    case \"ER_PARSE_ERROR\":\n   //         //      OP.Error.log('AppBuilder:ABModel:findAll(): Parse Error with provided condition', { error: err, condition:cond })\n   //         //      break;\n\n   //         //    default:\n   //         //      OP.Error.log('AppBuilder:ABModel:findAll(): Unknown Error with provided condition', { error: err, condition:cond })\n   //         //      break;\n   //         //  }\n\n   //         // }\n   // console.error(err);\n   //       })\n\n   //   }\n\n   urlParamsCreate(values) {\n      return {\n         url: this.object.urlRest(),\n         params: values,\n      };\n   }\n\n   urlParamsDelete(id) {\n      return {\n         url: this.object.urlRestItem(id),\n      };\n   }\n\n   urlParamsFind(cond) {\n      return {\n         url: this.object.urlRest(),\n         params: cond || {},\n      };\n   }\n\n   urlParamsUpdate(id, values) {\n      return {\n         url: this.object.urlRestItem(id),\n         params: values,\n      };\n   }\n\n   /**\n    * @method count\n    * count a data find with the provided condition.\n    */\n   count(cond) {\n      cond = cond || {};\n\n      var params = {\n         url: this.object.urlRestCount(),\n         params: cond,\n      };\n      return this.request(\"get\", params)\n         .then((numberOfRows) => {\n            resolve(numberOfRows);\n         })\n         .catch((err) => {\n            // TODO: this should be done in platform/ABModel\n\n            // OP.Error.log('AppBuilder:ABModel:count(): Parse Error with provided condition', { error: err, condition:cond })\n\n            // reject(err);\n            console.error(err);\n         });\n   }\n\n   /**\n    * @method staleRefresh\n    * Process a request to refresh the data for a given entry.\n    * This method is called from a ABDataview when it receives\n    * a 'ab.datacollection.stale' message.\n    * This method will try to queue similar reqeusts and then issue 1 large\n    * request, rather than numerous individual ones.\n    * @param {obj} cond  the condition of the entry we are requesting.\n    * @return {Promise}\n    */\n   staleRefresh(cond) {\n      // cond should be { where:{ id: X } } format.\n      var PK = this.object.PK();\n\n      var currID = cond[PK]; // just in case we get a { id: X }\n      if (cond.where) {\n         currID = cond.where[PK];\n      }\n\n      return new Promise((resolve, reject) => {\n         if (!currID) {\n            var Err = new Error(\n               \"Model.staleRefresh(): could not resolve .\" + PK\n            );\n            Err.cond = cond;\n            reject(Err);\n            return;\n         }\n\n         // convert to PK : Promise object:\n         var entry = {\n            resolve: resolve,\n            reject: reject,\n         };\n         entry[PK] = currID;\n\n         // queue up refresh condition\n         this.staleRefreshPending.push(entry);\n\n         // if ! staleRefreshInProcess\n         if (!this.staleRefreshInProcess) {\n            // set timeout to another 200ms wait after LAST staleRefresh()\n            if (this.staleRefreshTimerID) {\n               clearTimeout(this.staleRefreshTimerID);\n            }\n            this.staleRefreshTimerID = setTimeout(() => {\n               this.staleRefreshProcess();\n            }, 200);\n         }\n      });\n   }\n\n   /**\n    * @method staleRefreshProcess\n    * Actually process the current pending requests.\n    */\n   staleRefreshProcess() {\n      this.staleRefreshInProcess = true;\n      var currentEntries = this.staleRefreshPending;\n      this.staleRefreshPending = [];\n      var PK = this.object.PK();\n\n      var responseHash = {\n         /* id : [{entry}] */\n      };\n      var cond = { where: {} };\n      cond.where[PK] = [];\n\n      console.log(\n         \"Model.staleRefreshProcess(): buffered \" +\n            currentEntries.length +\n            \" requests\"\n      );\n      currentEntries.forEach((e) => {\n         responseHash[e[PK]] = responseHash[e[PK]] || [];\n         responseHash[e[PK]].push(e);\n      });\n\n      cond.where[PK] = Object.keys(responseHash);\n\n      this.findAll(cond).then((res) => {\n         // for each entry we got back\n         if (Array.isArray(res.data) && res.data.length) {\n            res.data.forEach((data) => {\n               // find it's matching request:\n               if (responseHash[data[PK]]) {\n                  // respond to the pending promise\n                  // and remove these entries from responseHash\n                  var entries = responseHash[data[PK]];\n                  entries.forEach((entry) => {\n                     var resolve = entry.resolve;\n                     resolve({ data: [data] });\n                  });\n\n                  delete responseHash[data[PK]];\n               } else {\n                  console.error(\n                     \"Model.staleRefreshProcess(): returned entry was not in our responseHash:\",\n                     data,\n                     responseHash\n                  );\n               }\n            });\n         }\n\n         // now if there are any entries left in responseHash,\n         // respond with an empty entry:\n         var allKeys = Object.keys(responseHash);\n         if (allKeys.length > 0) {\n            console.warn(\n               \"Model.staleRefreshProcess(): \" +\n                  allKeys.length +\n                  \" entries with no responses. \"\n            );\n         }\n         allKeys.forEach((key) => {\n            var resolve = responseHash[key].resolve;\n            resolve({ data: [] });\n            delete responseHash[key];\n         });\n\n         // now check to see if there are any more pending requests:\n         if (this.staleRefreshPending.length > 0) {\n            // process them:\n            this.staleRefreshProcess();\n         } else {\n            // mark we are no longer processing stale requests.\n            this.staleRefreshInProcess = false;\n         }\n      });\n   }\n\n   /**\n     * @method findConnected\n     * return the connected data associated with an instance of this model.\n     *\n     * to limit the result to only a single connected column:\n     *    model.findConnected( 'col1', {data})\n     *    then ((data) => {\n     *      // data = [{obj1}, {obj2}, ... {objN}]\n     *    })\n     *\n     * To find >1 connected field data:\n     *    model.findConnected( ['col1', 'col2'], {data} )\n     *    .then((data) =>{\n     *    \n     *      // data = {\n     *      //     col1 : [{obj1}, {obj2}, ... {objN}],\n     *      //     col2 : [{obj1}, {obj2}, ... {objN}]\n     *      // }\n     *    })\n     *\n     * To find all connected field data:\n     *    model.findConnected( {data} )\n     *    .then((data) =>{\n     *    \n     *      // data = {\n     *      //     connectedColName1 : [{obj1}, {obj2}, ... {objN}],\n     *      //     connectedColName2 : [{obj1}, {obj2}, ... {objN}],\n     *      //    ...\n     *      //     connectedColNameN : [{obj1}, {obj2}, ... {objN}]\n     *      // }\n     *    })\n\n     * @param {string/array} fields  [optional] an array of connected fields you want to return.\n     * @param {obj} data  the current object instance (data) to lookup\n     * @return {Promise}\n     */\n   findConnected(fields, data) {\n      if (typeof data == \"undefined\") {\n         if (!Array.isArray(fields) && typeof fields == \"object\") {\n            data = fields;\n            fields = []; // return all fields\n         }\n      }\n\n      if (typeof fields == \"string\") {\n         fields = [fields]; // convert to an array of values\n      }\n\n      return new Promise((resolve, reject) => {\n         // sanity checking:\n         if (!data.id) {\n            // I can't find any connected items, if I can't find this one:\n            resolve(null);\n            return;\n         }\n\n         let cond = {};\n         cond[this.object.PK()] = data.id;\n         this.findAll({ where: cond, populate: true })\n            .then((results) => {\n               if (\n                  !results.data ||\n                  !Array.isArray(results.data) ||\n                  results.data.length == 0\n               ) {\n                  resolve([]); // no data to return.\n                  return;\n               }\n\n               // work with the first object.\n               var myObj = results.data[0];\n\n               // if only 1 field requested, then return that\n               if (fields.length == 1) {\n                  let data =\n                     myObj[\n                        fields[0].replace(/[^a-z0-9\\.]/gi, \"\") + \"__relation\"\n                     ];\n                  if (!data) return resolve([]);\n\n                  if (!Array.isArray(data)) data = [data];\n\n                  resolve(data);\n                  return;\n               }\n\n               // if no fields requested, return them all:\n               if (fields.length == 0) {\n                  var allFields = this.object.fields((f) => {\n                     return f.settings.linkType;\n                  });\n                  allFields.forEach((f) => {\n                     fields.push(f.columnName);\n                  });\n               }\n\n               var returnData = {};\n               fields.forEach((colName) => {\n                  returnData[colName] =\n                     myObj[colName.replace(/[^a-z0-9\\.]/gi, \"\") + \"__relation\"];\n               });\n\n               resolve(returnData);\n            })\n            .catch((err) => {\n               console.error(\"!!! error with findConnected() attempt:\", err);\n               reject(err);\n            });\n      });\n   }\n\n   // /**\n   //  * @method loadInto\n   //  * loads the current values into the provided Webix DataTable\n   //  * @param {DataTable} DT  A Webix component that can dynamically load data.\n   //  */\n   // loadInto(DT) {\n\n   //   // if a limit was applied, then this component should be loading dynamically\n   //   if (this._limit) {\n\n   //     DT.define('datafetch', this._limit);\n   //     DT.define('datathrottle', 250);  // 250ms???\n\n   //     // catch the event where data is requested:\n   //     // here we will do our own findAll() so we can persist\n   //     // the provided .where condition.\n\n   //     // oh yeah, and make sure to remove any existing event handler when we\n   //     // perform a new .loadInto()\n   //     DT.___AD = DT.___AD || {};\n   //     if (DT.___AD.onDataRequestEvent) {\n   //       DT.detachEvent(DT.___AD.onDataRequestEvent);\n   //     }\n   //     DT.___AD.onDataRequestEvent = DT.attachEvent(\"onDataRequest\", (start, count) => {\n\n   //       var cond = {\n   //         where: this._where,\n   //         sort: this._sort,\n   //         limit: count,\n   //         skip: start\n   //       }\n\n   //       if (DT.showProgress)\n   //         DT.showProgress({ type: \"icon\" });\n\n   //       this.findAll(cond)\n   //         .then((data) => {\n   //           data.data.forEach((item) => {\n   //             if (item.properties != null && item.properties.height != \"undefined\" && parseInt(item.properties.height) > 0) {\n   //               item.$height = parseInt(item.properties.height);\n   //             } else if (parseInt(this._where.height) > 0) {\n   //               item.$height = parseInt(this._where.height)\n   //             }\n   //           });\n   //           DT.parse(data);\n\n   //           if (DT.hideProgress)\n   //             DT.hideProgress();\n\n   //         })\n\n   //       return false; // <-- prevent the default \"onDataRequest\"\n   //     });\n\n   //     DT.refresh();\n   //   }\n\n   //   // else just load it all at once:\n   //   var cond = {};\n   //   if (this._where) cond.where = this._where;\n   //   if (this._sort) cond.sort = this._sort;\n   //   if (this._limit != null) cond.limit = this._limit;\n   //   if (this._skip != null) cond.skip = this._skip;\n\n   //   if (DT.showProgress)\n   //     DT.showProgress({ type: \"icon\" });\n\n   //   this.findAll(cond)\n   //     .then((data) => {\n   //       data.data.forEach((item) => {\n   //         if (item.properties != null && item.properties.height != \"undefined\" && parseInt(item.properties.height) > 0) {\n   //           item.$height = parseInt(item.properties.height);\n   //         } else if (parseInt(this._where.height) > 0) {\n   //           item.$height = parseInt(this._where.height)\n   //         }\n   //       });\n   //       DT.parse(data);\n\n   //       if (DT.hideProgress)\n   //         DT.hideProgress();\n\n   //     })\n   //     .catch((err) => {\n   //       console.error('!!!!!', err);\n   //     })\n\n   // }\n\n   // /**\n   //  * @method limit\n   //  * set the limit value for this set of data\n   //  * @param {integer} limit  the number or elements to return in this call\n   //  * @return {ABModel} this object that is chainable.\n   //  */\n   // limit(limit) {\n   //   this._limit = limit;\n   //   return this;\n   // }\n\n   // /**\n   //  * @method skip\n   //  * set the skip value for this set of data\n   //  * @param {integer} skip  the number or elements to skip\n   //  * @return {ABModel} this object that is chainable.\n   //  */\n   // skip(skip) {\n   //   this._skip = skip;\n   //   return this;\n   // }\n\n   //   /**\n   //    * @method update\n   //    * update model values on the server.\n   //    */\n   //   update(id, values) {\n\n   //     this.prepareMultilingualData(values);\n\n   //     // remove empty properties\n   //     for (var key in values) {\n   //       if (values[key] == null)\n   //         delete values[key];\n   //     }\n\n   //     var params = {\n   //       url: this.object.urlRestItem(id),\n   //       params: values\n   //     }\n   //     return this.request('put', params)\n   //       .then((data) => {\n\n   //         // .data is an empty object ??\n\n   //         this.normalizeData(data);\n\n   //         return data;\n\n   //         // FIX: now with sockets, the triggers are fired from socket updates.\n   //         // trigger a update event\n   //         // triggerEvent('update', this.object, data);\n\n   //       })\n   //       .catch((err)=>{\n   // console.error(err);\n   //       });\n\n   //   }\n\n   /**\n    * @method upsert\n    * upsert model values on the server.\n    */\n   upsert(values) {\n      this.prepareMultilingualData(values);\n\n      // remove empty properties\n      for (var key in values) {\n         if (values[key] == null) delete values[key];\n      }\n\n      var params = {\n         url: this.object.urlRest(),\n         params: values,\n      };\n      return this.request(\"put\", params)\n         .then((data) => {\n            // .data is an empty object ??\n\n            this.normalizeData(data);\n\n            return data;\n\n            // FIX: now with sockets, the triggers are fired from socket updates.\n            // trigger a update event\n            // triggerEvent('update', this.object, data);\n         })\n         .catch((err) => {\n            console.error(err);\n         });\n   }\n\n   /**\n    * @method where\n    * set the where condition for the data being loaded.\n    * @param {json} cond  the json condition statement.\n    * @return {ABModel} this object that is chainable.\n    */\n   where(cond) {\n      this._where = cond;\n      return this;\n   }\n\n   /**\n    * @method where\n    * set the sort condition for the data being loaded.\n    * @param {json} cond  the json condition statement.\n    * @return {ABModel} this object that is chainable.\n    */\n   sort(cond) {\n      this._sort = cond;\n      return this;\n   }\n\n   /**\n    * @method refresh\n    * refresh model definition on the server.\n    */\n   refresh() {\n      console.error(\"!!! Depreciated: where is this being called from?\");\n      return Promise.resolve();\n\n      // var params = {\n      //    url: this.object.urlRestRefresh(),\n      // };\n      // return this.request(\"put\", params);\n   }\n\n   normalizeData(data) {\n      // convert to array\n      if (!(data instanceof Array)) data = [data];\n\n      // find all connected fields\n      var connectedFields = this.object.connectFields();\n\n      // if this object has some multilingual fields, translate the data:\n      var mlFields = this.object.multilingualFields();\n\n      // if this object has some date fields, convert the data to date object:\n      var dateFields =\n         this.object.fields(function (f) {\n            return f.key == \"date\" || f.key == \"datetime\";\n         }) || [];\n\n      // calculate fields\n      var calculatedFields = this.object.fields((f) => f.key == \"calculate\");\n\n      data.forEach((d) => {\n         if (d == null) return;\n\n         // various PK name\n         if (!d.id && this.object.PK() != \"id\") d.id = d[this.object.PK()];\n\n         // loop through data's connected fields\n         connectedFields.forEach((c) => {\n            // get the relation name so we can change the original object\n            var relationName = c.relationName();\n\n            // if (d[c.columnName] == null)\n            //  d[c.columnName] = '';\n\n            // if there is no data we can exit now\n            if (d[relationName] == null) return;\n\n            // if relation data is still a string and isn't empty\n            if (\n               typeof d[relationName] == \"string\" &&\n               d[relationName].length > 0\n            ) {\n               // parse the string into an object\n               d[relationName] = JSON.parse(d[relationName]);\n            }\n\n            // if the data is an array we need to loop through it\n            if (Array.isArray(d[relationName])) {\n               d[relationName].forEach((r) => {\n                  // if translations are present and they are still a string\n                  if (r.translations && typeof r.translations == \"string\") {\n                     // parse the string into an object\n                     r.translations = JSON.parse(r.translations);\n                  }\n               });\n               // if the data is not an array it is a single item...check that has translations and it is a string\n            } else if (\n               d[relationName].translations &&\n               typeof d[relationName].translations == \"string\"\n            ) {\n               // if so parse the string into an object\n               d[relationName].translations = JSON.parse(\n                  d[relationName].translations\n               );\n            }\n\n            // set .id to relation columns\n            let objectLink = c.datasourceLink;\n            let olPK = objectLink.PK();\n            var relatedMlFields = objectLink.multilingualFields();\n\n            if (Array.isArray(d[relationName])) {\n               d[relationName].forEach((subData) => {\n                  // update .id values\n                  // if (olPK != \"id\" && subData[olPK]) subData.id = subData[olPK];\n                  const relationValue = c.getRelationValue(subData);\n                  if (olPK != \"id\") subData.id = relationValue;\n\n                  // perform Translation\n                  if (relatedMlFields.length) {\n                     objectLink.translate(subData, subData, relatedMlFields);\n                  }\n               });\n            } else {\n               // update .id value\n               // if (d[relationName][olPK]) {\n               //    d[relationName].id = d[relationName][olPK];\n               // }\n               const relationValue = c.getRelationValue(d[relationName]);\n               if (relationValue) {\n                  d[relationName].id = relationValue;\n               }\n\n               // perform Translation\n               if (relatedMlFields.length) {\n                  objectLink.translate(\n                     d[relationName],\n                     d[relationName],\n                     relatedMlFields\n                  );\n               }\n            }\n\n            // if (\n            //    objectLink &&\n            //    olPK != \"id\" &&\n            //    d[relationName] &&\n            //    !d[relationName].id\n            // ) {\n            //    // is array\n            //    if (d[relationName].forEach) {\n            //       d[relationName].forEach((subData) => {\n            //          if (subData[olPK]) subData.id = subData[olPK];\n            //       });\n            //    } else if (d[relationName][olPK]) {\n            //       d[relationName].id = d[relationName][olPK];\n            //    }\n            // }\n\n            // if (relatedMlFields.length) {\n            //    d[relationName];\n            //    objectLink.translate(\n            //       d[relationName],\n            //       d[relationName],\n            //       relatedMlFields\n            //    );\n            // }\n\n            // Change property name of connected field\n            if (!d[c.columnName]) {\n               if (c.linkType() == \"one\") {\n                  if (d[relationName]) {\n                     // d[c.columnName] = d[relationName][olPK];\n                     d[c.columnName] = c.getRelationValue(d[relationName]);\n                  } else {\n                     d[c.columnName] = null;\n                  }\n               } else {\n                  if (d[relationName]) {\n                     if (Array.isArray(d[relationName])) {\n                        try {\n                           d[c.columnName] = (d[relationName] || []).map(\n                              // (i) => i[olPK]\n                              (i) => c.getRelationValue(i)\n                           );\n                        } catch (e) {\n                           console.log(\"+++++++++++++++\");\n                           console.log(`ID:[${c.id}]`);\n                           console.log(`ColumnName:[${c.label}]`);\n                           console.log(`relationName:[${relationName}]`);\n                           console.log(`linkType:[${c.linkType()}]`);\n                           console.log(\"data:\");\n                           console.log(JSON.stringify(d[relationName]));\n                           console.log(\"+++++++++++++++\");\n                        }\n                     } else {\n                        // this is strange: supposed to be \"many\" but coming in\n                        // as \"one\"\n                        console.log(\"+++++++++++++++\");\n                        console.log(`ID:[${c.id}]`);\n                        console.log(`ColumnName:[${c.label}]`);\n                        console.log(`relationName:[${relationName}]`);\n                        console.log(`linkType:[${c.linkType()}]`);\n                        console.log(\"data:\");\n                        console.log(JSON.stringify(d[relationName]));\n                        console.log(\"+++++++++++++++\");\n                        // d[c.columnName] = [d[relationName][olPK]];\n                        d[c.columnName] = [c.getRelationValue(d[relationName])];\n                     }\n                  } else {\n                     d[c.columnName] = [];\n                  }\n               }\n            }\n         });\n\n         if (mlFields.length) {\n            this.object.translate(d, d, mlFields);\n         }\n\n         // convert the data to date object\n         dateFields.forEach((date) => {\n            if (d && d[date.columnName] != null) {\n               // check to see if data has already been converted to a date object\n               if (typeof d[date.columnName] == \"string\") {\n                  if (date.key == \"date\") {\n                     // if we are ignoring the time it means we ignore timezone as well\n                     // so lets trim that off when creating the date so it can be a simple date\n                     d[date.columnName] = this.AB.rules.toDate(\n                        d[date.columnName],\n                        {\n                           format: \"MM/DD/YYYY\",\n                           ignoreTime: true,\n                        }\n                     );\n                  } else {\n                     // Convert UTC to Date\n                     d[date.columnName] = this.AB.rules.toDate(\n                        d[date.columnName]\n                     );\n                     // d[date.columnName] = new Date(moment(d[date.columnName]));\n                  }\n               }\n            }\n         });\n\n         calculatedFields.forEach((calField) => {\n            d[calField.columnName] = calField.format(d);\n         });\n      });\n   }\n}\n","/**\n * ABObjectCore\n *\n * Manage the loading of specific ABObject data into useable objects\n * that can instantiate themselves and provide field and model resources.\n */\n\nimport ABModel from \"../platform/ABModel\";\nimport ABMLClass from \"../platform/ABMLClass\";\n\nexport default class ABObjectCore extends ABMLClass {\n   constructor(attributes, AB) {\n      super([\"label\"], AB);\n\n      /*\n{\n\tid: uuid(),\n\tconnName: 'string', // Sails DB connection name: 'appdev_default', 'legacy_hris', etc. Default is 'appBuilder'.\n\tname: 'name',\n\tlabelFormat: 'xxxxx',\n\tlabelSettings: Object,\n\tisImported: 1/0,\n\tisExternal: 1/0,\n\ttableName:'string',  // NOTE: store table name of import object to ignore async\n\tprimaryColumnName: 'string', // NOTE: store column name of PK\n\ttransColumnName: 'string', // NOTE: store column name of translations table\n\turlPath:'string',\n\timportFromObject: 'string', // JSON Schema style reference:  '#[ABApplication.id]/objects/[ABObject.id]'\n\t\t\t\t\t\t\t\t// to get other object:\t ABApplication.objectFromRef(obj.importFromObject);\n\ttranslations:[\n\t\t{}\n\t],\n\tfields:[\n\t\t{ABDataField}\n   ],\n   indexes: [\n      {ABIndex}\n   ]\n}\n*/\n\n      this.fromValues(attributes);\n   }\n\n   ///\n   /// Static Methods\n   ///\n   /// Available to the Class level object. These methods are not dependent\n   /// on the instance values of the Application.\n   ///\n\n   static contextKey() {\n      return \"object\";\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   fromValues(attributes) {\n      /*\n        {\n            id: uuid(),\n            connName: 'string', // Sails DB connection name: 'appdev_default', 'legacy_hris', etc. Default is 'appBuilder'.\n            name: 'name',\n            labelFormat: 'xxxxx',\n            labelSettings: Object,\n            isImported: 1/0,\n            isExternal: 1/0,\n            tableName:'string',  // NOTE: store table name of import object to ignore async\n            primaryColumnName: 'string', // NOTE: store column name of PK\n            transColumnName: 'string', // NOTE: store column name of translations table\n            urlPath:'string',\n            importFromObject: 'string', // JSON Schema style reference:  '#[ABApplication.id]/objects/[ABObject.id]'\n                                        // to get other object:  ABApplication.objectFromRef(obj.importFromObject);\n            translations:[\n                {}\n            ],\n            fields:[\n                {ABDataField}\n            ],\n            indexes: [\n               {ABIndex}\n            ]\n        }\n        */\n\n      this.id = attributes.id;\n      // {string} .id\n      // the uuid of this ABObject Definition.\n\n      this.type = attributes.type || \"object\";\n      // {string} .type\n      // the type of ABDefinition this is.\n\n      this.connName = attributes.connName || undefined; // undefined == 'appBuilder'\n      // {string} .connName\n      // the sails.config.connections[connName] configuration reference.\n      // if not set ({undefined}), then our default \"appBuilder\" config is used\n\n      this.name = attributes.name || \"\";\n      // {string} .name\n      // A name reference for this ABObject. This is a reference that isn't\n      // translateable and will be used for lookups across languages.\n\n      this.labelFormat = attributes.labelFormat || \"\";\n      // {string} .labelFormat\n      // A string template for how to display an entry for this ABObject in\n      // common UI elements like grids, lists, etc...\n\n      this.labelSettings = attributes.labelSettings || {};\n      // {Object} .labelSettings\n\n      this.labelSettings.isNoLabelDisplay = parseInt(\n         this.labelSettings.isNoLabelDisplay || 0\n      );\n      // {bool} .isNoLabelDisplay\n\n      this.isImported = parseInt(attributes.isImported || 0);\n      // {depreciated}\n      // {bool} .isImported\n      // previously used to mark ABObjects that were created in other\n      // ABApplicaitons.  No longer relevant with Global ABObjects\n\n      this.isExternal = parseInt(attributes.isExternal || 0);\n      // {bool} .isExternal\n      // Marks this ABObject as referencing a pre-existing table in the DB that\n      // we are treating as an ABObject.\n      // These objects are not allowed to create/update/destroy the db table\n      // nor can we add/remove fields.\n      // However we are able to customize the Field definitions to change the\n      // column names, hidden attributes, Object label, etc...\n      // We can update our Defintion attributes, but not any actual DB changes.\n\n      this.tableName = attributes.tableName || \"\"; // NOTE: store table name of import object to ignore async\n      // {string} .tableName\n      // the `{database}.{tableName}` of the db table that this ABObject's data\n      // is stored in.\n      // knex does not like .(dot) in table and column names\n      // https://github.com/knex/knex/issues/2762\n      this.tableName = this.tableName.replace(/[^a-zA-Z0-9_ ]/gi, \"\");\n\n      this.primaryColumnName = attributes.primaryColumnName || \"\"; // NOTE: store column name of PK\n      // {string} .primaryColumnName\n      // is the col_name of which key is the primary key.  By default it is\n      // \"uuid\", but in some external objects this might be something else\n      // (\"id\", \"ren_id\", etc...).\n\n      this.transColumnName = attributes.transColumnName || \"\"; // NOTE: store column name of translations table\n      // {string} .transColumnName\n      // this is a workaround to include hris_ren_data and hris_ren_trans data\n\n      this.urlPath = attributes.urlPath || \"\";\n\n      // this.importFromObject = attributes.importFromObject || \"\";\n\n      this.isSystemObject = attributes.isSystemObject;\n      // {bool} .isSystemObject\n      // We are now storing some of our System Required Data as ABObjects as well.\n      // These Objects should not be allowed to be modified by typical AppBuilder\n      // designer.  However we can enable a mode for AB Designer to then expand these\n      // ABObjects, and eventually we can use the AppBuilder to Create the AppBuilder.\n      if (\n         typeof this.isSystemObject == \"undefined\" ||\n         this.isSystemObject == \"false\"\n      ) {\n         this.isSystemObject = false;\n      }\n\n      this.createdInAppID = attributes.createdInAppID;\n      // {string} .createdInAppID\n      // the .id of the ABApplication that originally created this ABObject.\n\n      // if attributes.objectWorkspace DOES exist, make sure it is fully\n      // populated.\n      if (typeof attributes.objectWorkspace != \"undefined\") {\n         if (typeof attributes.objectWorkspace.sortFields == \"undefined\")\n            attributes.objectWorkspace.sortFields = [];\n         if (typeof attributes.objectWorkspace.filterConditions == \"undefined\")\n            attributes.objectWorkspace.filterConditions = [];\n         if (typeof attributes.objectWorkspace.frozenColumnID == \"undefined\")\n            attributes.objectWorkspace.frozenColumnID = \"\";\n         if (typeof attributes.objectWorkspace.hiddenFields == \"undefined\")\n            attributes.objectWorkspace.hiddenFields = [];\n      }\n      this.objectWorkspace = attributes.objectWorkspace || {\n         sortFields: [], // array of columns with their sort configurations\n         filterConditions: [], // array of filters to apply to the data table\n         frozenColumnID: \"\", // id of column you want to stop freezing\n         hiddenFields: [], // array of [ids] to add hidden:true to\n      };\n      // {obj} .objectWorkspace\n      // When in the ABObject editor in the AppBuilder Designer, different\n      // views of the information can be created.  These views are stored here\n      // and are avaiable to other users in the Designer.\n\n      // pull in field definitions:\n      var fields = [];\n      this.fieldIDs = attributes.fieldIDs || [];\n      // {array}  [ ABField.id, ... ]\n      // this is a collection of ALL the ABFields this object references.\n      // This will include ABFields that were directly created for this object\n      // and will include ABFields that were imported.\n\n      this.importedFieldIDs = attributes.importedFieldIDs || [];\n      // {array} [ ABField.id, ... ]\n      // this is a collection of the ABFields in our .fieldIDs that were\n      // IMPORTED.\n\n      this._unknownFieldIDs = [];\n      this.fieldIDs.forEach((id) => {\n         if (!id) return;\n\n         var def = this.AB.definitionByID(id);\n         if (def) {\n            fields.push(this.AB.fieldNew(def, this));\n         } else {\n            this._unknownFieldIDs.push(id);\n            let err = new Error(\n               `O[${this.name}] is referenceing an unknown field id[${id}]`\n            );\n            this.AB.notify.builder(err, {\n               field: { id, object: { id: this.id, name: this.name } },\n            });\n         }\n      });\n      this._fields = fields;\n\n      // pull in index definitions:\n      this.importIndexes(attributes.indexIDs);\n\n      // let the MLClass now process the translations:\n      super.fromValues(attributes);\n   }\n\n   /**\n    * @method importIndexes\n    * instantiate a set of indexes from the given ids.\n    * @param {array} indexIDs The different ABDefinition IDs for each index\n    *        [ \"uuid11\", \"uuid2\", ... \"uuidN\" ]\n    */\n   importIndexes(indexIDs) {\n      this._unknownIndex = [];\n      var indexes = [];\n      (indexIDs || []).forEach((id) => {\n         var def = this.AB.definitionByID(id);\n         if (def) {\n            indexes.push(this.AB.indexNew(def, this));\n         } else {\n            this._unknownIndex.push(id);\n            let err = new Error(\n               `O[${this.name}] is referenceing an unknown index id[${id}]`\n            );\n            this.AB.notify.builder(err, {\n               field: { id, object: { id: this.id, name: this.name } },\n            });\n         }\n      });\n      this._indexes = indexes;\n   }\n\n   /**\n    * @method exportFields\n    * convert our array of fields into a settings object for saving to disk.\n    * @return {array}\n    */\n   // exportFields() {\n   //     var currFields = [];\n   //     this._fields.forEach((obj) => {\n   //         currFields.push(obj.toObj());\n   //     });\n   //     return currFields;\n   // }\n\n   // /**\n   //  * @method exportFields\n   //  * convert our array of fields into a settings object for saving to disk.\n   //  * @return {array}\n   //  */\n   // exportIndexes() {\n   //    var currIndexes = [];\n   //    this._indexes.forEach((idx) => {\n   //       currIndexes.push(idx.toObj());\n   //    });\n   //    return currIndexes;\n   // }\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABApplication instance\n    * into the values needed for saving to the DB.\n    *\n    * Most of the instance data is stored in .json field, so be sure to\n    * update that from all the current values of our child fields.\n    *\n    * @return {json}\n    */\n   toObj() {\n      // MLClass translation\n      var obj = super.toObj();\n\n      // track the field .ids of our fields\n      var fieldIDs = this.fields().map((f) => f.id);\n      (this._unknownFieldIDs || []).forEach((id) => {\n         fieldIDs.push(id);\n      });\n      // NOTE: we keep the ._unknownFieldIDs so a developer/builder\n      // can come back and track down what happened to the missing\n      // ids.\n\n      // track the index .ids of our indexes\n      var indexIDs = this.indexes().map((f) => f.id);\n      (this._unknownIndex || []).forEach((id) => {\n         indexIDs.push(id);\n      });\n\n      return {\n         id: this.id,\n         type: this.type || \"object\",\n         connName: this.connName,\n         name: this.name,\n         labelFormat: this.labelFormat,\n         labelSettings: this.labelSettings || {},\n         isImported: this.isImported,\n         isExternal: this.isExternal,\n         tableName: this.tableName,\n         // NOTE: store table name of import object to ignore async\n         primaryColumnName: this.primaryColumnName,\n         // NOTE: store column name of PK\n         transColumnName: this.transColumnName,\n         // NOTE: store column name of translations table\n         urlPath: this.urlPath,\n         // importFromObject: this.importFromObject,\n         objectWorkspace: this.objectWorkspace,\n         isSystemObject: this.isSystemObject,\n\n         translations: obj.translations,\n         fieldIDs: fieldIDs,\n         importedFieldIDs: this.importedFieldIDs,\n         indexIDs: indexIDs,\n         createdInAppID: this.createdInAppID,\n      };\n   }\n\n   ///\n   /// Objects\n   ///\n\n   /**\n    * @method objectLinks()\n    *\n    *  return an array of ABObject that's connected.\n    *\n    * @param {object} filter\n    * @return {array} - An array of ABObject\n    */\n   objectLinks(/* filter */) {\n      var connectFields = this.connectFields();\n\n      return connectFields.map((f) => f.datasourceLink);\n   }\n\n   ///\n   /// Fields\n   ///\n\n   /**\n    * @method fields()\n    * return an array of all the ABFields for this ABObject.\n    * @param {fn} fn\n    *        a filter function that returns {true} if a value should\n    *        be included, or {false} otherwise.\n    * @return {array[ABFieldxxx]}\n    */\n   fields(fn = () => true) {\n      return this._fields.filter(fn);\n   }\n\n   /**\n    * @method fieldByID()\n    * return the object's field from the given {ABField.id}\n    * @param {string} id\n    *        the uuid of the field to return.\n    * @return {ABFieldxxx}\n    */\n   fieldByID(id) {\n      return this.fields((f) => f?.id == id)[0];\n   }\n\n   /**\n    * @method connectFields()\n    *\n    * return an array of the ABFieldConnect that is connect object fields.\n    * @param {fn} fn\n    *        a filter function that returns {true} if a value should\n    *        be included, or {false} otherwise.\n    * @return {array}\n    */\n   connectFields(fn = () => true) {\n      return this.fields((f) => f && f.isConnection).filter(fn);\n   }\n\n   /**\n    * @method fieldImport\n    * register the given ABField.id as an imported field for this ABObject.\n    * The ABField definition should be available before making this call.\n    * After this call, the ABField is included in the ABObject, but the ABObject\n    * has NOT been saved.\n    * @param {ABField} fieldID The ABDefinition.id for a field that is imported\n    *        into this object.\n    */\n   fieldImport(id) {\n      if (!id) return;\n\n      if (this.importedFieldIDs.indexOf(id) == -1) {\n         this.importedFieldIDs.push(id);\n      }\n\n      // just to be safe:\n      var isThere = this._fields.find((f) => f.id == id);\n      if (!isThere) {\n         var def = this.AB.definitionByID(id);\n         if (def) {\n            this._fields.push(this.AB.fieldNew(def, this));\n         } else {\n            this._unknownFieldIDs = this._unknownFieldIDs || [];\n            this._unknownFieldIDs.push(id);\n            let err = new Error(\n               `O[${this.name}] is importing an unknown field id[${id}]`\n            );\n            this.AB.notify.builder(err, {\n               field: { id, object: { id: this.id, name: this.name } },\n            });\n         }\n      }\n   }\n\n   /**\n    * @method fieldNew()\n    *\n    * return an instance of a new (unsaved) ABField that is tied to this\n    * ABObject.\n    *\n    * NOTE: this new field is not included in our this.fields until a .save()\n    * is performed on the field.\n    *\n    * @return {ABField}\n    */\n   fieldNew(values) {\n      return this.AB.fieldNew(values, this);\n   }\n\n   /**\n    * @method fieldRemove()\n    *\n    * remove the given ABField from our ._fields array and persist the current\n    * values.\n    *\n    * @param {ABField} field The instance of the field to remove.\n    * @return {Promise}\n    */\n   fieldRemove(field) {\n      var origLen = this._fields.length;\n      this._fields = this.fields(function (o) {\n         return o.id != field.id;\n      });\n\n      // be sure to remove this from our imported ids if it was\n      // listed there.\n      this.importedFieldIDs = this.importedFieldIDs.filter(\n         (fid) => fid != field.id\n      );\n\n      if (this._fields.length < origLen) {\n         return this.save();\n      }\n\n      // if we get here, then nothing changed so nothing to do.\n      return Promise.resolve();\n   }\n\n   /**\n    * @method fieldReorder()\n    *\n    * reorder the fields in our object\n    *\n    * @param {ABField} field The instance of the field to remove.\n    * @return {Promise}\n    */\n   fieldReorder(sourceId, targetId) {\n      // We know what was moved and what item it has replaced/pushed forward\n      // so first we want to splice the item moved out of the array of fields\n      // and store it so we can put it somewhere else\n      let itemMoved = null;\n      let oPos = 0; // original position\n      for (var i = 0; i < this._fields.length; i++) {\n         if (this._fields[i].columnName == sourceId) {\n            itemMoved = this._fields[i];\n            this._fields.splice(i, 1);\n            oPos = i;\n            break;\n         }\n      }\n      // once we have removed/stored it we can find where its new position\n      // will be by looping back through the array and finding the item it\n      // is going to push forward\n      for (var j = 0; j < this._fields.length; j++) {\n         if (this._fields[j].columnName == targetId) {\n            // if the original position was before the new position we will\n            // follow webix's logic that the drop should go after the item\n            // it was placed on\n            if (oPos <= j) {\n               j++;\n            }\n            this._fields.splice(j, 0, itemMoved);\n            break;\n         }\n      }\n\n      return this.save();\n   }\n\n   /**\n    * @method fieldSave()\n    *\n    * save the given ABField in our ._fields array and persist the current\n    * values.\n    *\n    * @param {ABField} field The instance of the field to save.\n    * @return {Promise}\n    */\n   fieldSave(field) {\n      var isIncluded = this.fieldByID(field.id);\n      if (!isIncluded) {\n         this._fields.push(field);\n         return this.save();\n      }\n\n      return Promise.resolve();\n   }\n\n   /**\n    * @method fieldAdd()\n    *\n    * save the given ABField in our ._fields array and persist the current\n    * values if they changed.\n    *\n    * @param {ABField} field The instance of the field to save.\n    * @return {Promise}\n    */\n   fieldAdd(field) {\n      var isIncluded = this.fieldByID(field.id);\n      if (!isIncluded) {\n         // if not already included, then add and save the Obj definition:\n         this._fields.push(field);\n         return this.save();\n      }\n\n      // Nothing was required so return\n      return Promise.resolve();\n   }\n\n   /**\n    * @method imageFields()\n    *\n    * return an array of the ABFieldImage fields this object has.\n    * @param {fn} fn\n    *        a filter function that returns {true} if a value should\n    *        be included, or {false} otherwise.\n    * @return {array}\n    */\n   imageFields(fn = () => true) {\n      return this.fields((f) => f && f.key == \"image\").filter(fn);\n   }\n\n   /**\n    * @method multilingualFields()\n    *\n    * return an array of columnnames that are multilingual.\n    *\n    * @return {array}\n    */\n   multilingualFields() {\n      return this.fields((f) => f && f.isMultilingual).map((f) => f.columnName);\n   }\n\n   /**\n    * @method indexes()\n    *\n    * return an array of all the ABIndex for this ABObject.\n    *\n    * @param filter {Object}\n    *\n    * @return {array}\n    */\n   indexes(filter = () => true) {\n      return this._indexes.filter(filter);\n   }\n\n   /**\n    * @method indexByID()\n    * return the object's index from the given {ABIndex.id}\n    * @param {string} id\n    *        the id of the ABIndex to return.\n    * @return {ABIndex}\n    */\n   indexByID(id) {\n      return this.indexes((f) => f.id == id)[0];\n   }\n\n   /**\n    * @method indexRemove()\n    * remove the given ABIndex from our ._indexes array and persist the current\n    * values.\n    * @param {ABIndex} index\n    * @return {Promise}\n    */\n   indexRemove(index) {\n      var origLen = this._indexes.length;\n      this._indexes = this.indexes(function (idx) {\n         return idx.id != index.id;\n      });\n\n      // persist our changes if something changed.\n      if (origLen != this._indexes.length) {\n         return this.save();\n      }\n\n      // nothing was removed, so continue on.\n      return Promise.resolve();\n   }\n\n   /**\n    * @method indexSave()\n    * save the given ABIndex in our ._indexes array and persist the current\n    * values.\n    * @param {ABIndex} index\n    * @return {Promise}\n    */\n   indexSave(index) {\n      var isIncluded = this.indexByID(index.id);\n      if (!isIncluded) {\n         this._indexes.push(index);\n         return this.save();\n      }\n\n      return Promise.resolve();\n   }\n\n   ///\n   /// Working with data from server\n   ///\n\n   /**\n    * @method model\n    * return a Model object that will allow you to interact with the data for\n    * this ABObject.\n    */\n   model() {\n      var model = new ABModel(this);\n\n      // default the context of this model's operations to this object\n      model.contextKey(ABObjectCore.contextKey());\n      model.contextValues({ id: this.id });\n\n      return model;\n   }\n\n   ///\n   /// URL\n   ///\n\n   /**\n    * @method urlRest\n    * return the url to access the data for this object.\n    * @return {string}\n    */\n   urlRest() {\n      return `/app_builder/model/${this.id}`;\n   }\n\n   /**\n    * @method urlRestBatch\n    * return the url to use for batch creates for this object\n    * @return {string}\n    */\n   urlRestBatch() {\n      return `/app_builder/batch/model/${this.id}`;\n   }\n\n   /**\n    * @method urlRestItem\n    * return the url to access the data for an instance of this object.\n    * @return {string}\n    */\n   urlRestItem(id) {\n      return `/app_builder/model/${this.id}/${id}`;\n   }\n\n   /**\n    * @method urlRestLog\n    * return the url to access the logs for this ABObject.\n    * @return {string}\n    */\n   urlRestLog() {\n      return `/app_builder/object/${this.id}/track`;\n   }\n\n   /**\n    * @method urlRestRefresh\n    * return the url to signal a refresh for this object.\n    * @return {string}\n    */\n   urlRestRefresh() {\n      return `/app_builder/model/refreshobject/${this.id}`;\n   }\n\n   /**\n    * @method urlCount\n    * return the url to count of data for this object.\n    * @return {string}\n    */\n   urlRestCount() {\n      return `/app_builder/model/count/${this.id}`;\n   }\n\n   ///\n   ///\tObject Workspace Settings\n   ///\n   get workspaceSortFields() {\n      // new version\n      if (this.workspaceViews) {\n         let currView = this.workspaceViews.getCurrentView();\n         if (currView) return currView.sortFields;\n         else return null;\n      }\n      // old version\n      else {\n         return this.objectWorkspace.sortFields;\n      }\n   }\n\n   set workspaceSortFields(fields) {\n      // new version\n      if (this.workspaceViews) {\n         let currView = this.workspaceViews.getCurrentView();\n         if (currView) currView.sortFields = fields;\n      }\n      // old version\n      else {\n         this.objectWorkspace.sortFields = fields;\n      }\n   }\n\n   get workspaceFilterConditions() {\n      // new version\n      if (this.workspaceViews) {\n         let currView = this.workspaceViews.getCurrentView();\n         if (currView) return currView.filterConditions;\n         else return null;\n      }\n      // old version\n      else {\n         return this.objectWorkspace.filterConditions;\n      }\n   }\n\n   set workspaceFilterConditions(filterConditions) {\n      // new version\n      if (this.workspaceViews) {\n         let currView = this.workspaceViews.getCurrentView();\n         if (currView) currView.filterConditions = filterConditions;\n      }\n      // old version\n      else {\n         this.objectWorkspace.filterConditions = filterConditions;\n      }\n   }\n\n   get workspaceFrozenColumnID() {\n      return this.objectWorkspace.frozenColumnID;\n   }\n\n   set workspaceFrozenColumnID(id) {\n      this.objectWorkspace.frozenColumnID = id;\n   }\n\n   get workspaceHiddenFields() {\n      return this.objectWorkspace.hiddenFields || [];\n   }\n\n   set workspaceHiddenFields(fields) {\n      this.objectWorkspace.hiddenFields = fields;\n   }\n\n   /**\n    * @method isReadOnly\n    *\n    * @return {boolean}\n    */\n   get isReadOnly() {\n      return this.isImported || this.isExternal;\n   }\n\n   /**\n    * @method defaultValues\n    * Collect a hash of key=>value pairs that represent the default values\n    * from each of our fields.\n    * @param {obj} data a key=>value hash of the inputs to parse.\n    * @return {array}\n    */\n   defaultValues() {\n      var values = {};\n      this.fields().forEach((f) => {\n         f.defaultValue(values);\n      });\n\n      return values;\n   }\n\n   /**\n    * @method isValidData\n    * Parse through the given data and return an array of any invalid\n    * value errors.\n    * @param {obj} data a key=>value hash of the inputs to parse.\n    * @return {array}\n    */\n   isValidData(/* data */) {\n      // NOTE: the platform needs to define a way to verify the data\n      console.warn(\"Platform.ABObject.isValidData() missing\");\n      return true;\n   }\n\n   /**\n    * @method urlPointer()\n    * return the url pointer that references this object. This url pointer\n    * should be able to be used by this.application.urlResolve() to return\n    * this object.\n    *\n    * @param {boolean} acrossApp - flag to include application id to url\n    *\n    * @return {string}\n    */\n   urlPointer(acrossApp) {\n      console.error(\"Who is calling this?\");\n\n      if (this.application == null) return null;\n\n      return this.application.urlObject(acrossApp) + this.id;\n   }\n\n   /**\n    * @method urlField\n    * return a string pointer to this object's fields\n    *\n    * @param {boolean} acrossApp - flag to include application id to url\n    *\n    * @return {string}\n    */\n   urlField(acrossApp) {\n      console.error(\"Who is calling this?\");\n\n      return this.urlPointer(acrossApp) + \"/_fields/\";\n   }\n\n   /**\n    * @method PK\n    * return a string of the primary column name\n    *\n    * @return {string}\n    */\n   PK() {\n      return this.primaryColumnName || \"uuid\";\n   }\n\n   remoteCreate(data) {\n      console.log(\n         \"object[\" + this.name + \"] received a remoteCreate() with data:\",\n         data\n      );\n   }\n\n   /**\n    * @method clone\n    * return a clone of ABObject\n    *\n    * @return {ABObjectBase}\n    */\n   clone() {\n      // ignore properties who're spend much performance\n      // NOTE: do not clone them. Just copy reference\n      let ignoreProps = [\"application\", \"_fields\"];\n\n      let cloneOne = JSON.parse(JSON.stringify(this));\n\n      ignoreProps.forEach((prop) => {\n         cloneOne[prop] = this[prop];\n      });\n\n      return cloneOne;\n   }\n\n   /**\n    * @method minRelationData()\n    * return an array of ABField.columnNames that make up\n    * the minimum fields required to display this objects __RELATION\n    * data in our UI widgets.\n    */\n   minRelationData() {\n      var fields = [this.PK()];\n\n      if (this.multilingualFields().length > 0) {\n         fields.push(\"translations\");\n      }\n\n      var labelData = this.labelFormat || \"\";\n\n      // get column ids in {colId} template\n      // ['{colId1}', ..., '{colIdN}']\n      var colIds = labelData.match(/\\{[^}]+\\}/g);\n\n      if (colIds && colIds.forEach) {\n         colIds.forEach((colId) => {\n            var colIdNoBracket = colId.replace(\"{\", \"\").replace(\"}\", \"\");\n\n            var field = this.fieldByID(colIdNoBracket);\n            if (field == null) return;\n\n            fields.push(field.columnName);\n         });\n      }\n\n      // System requires to include number field values\n      // because they are used on Formula/Calculate fields on client side\n      fields = fields.concat(\n         this.fields((f) => f.key == \"number\").map((f) => f.columnName)\n      );\n\n      return fields;\n   }\n\n   // Display data with label format of object\n   displayData(rowData) {\n      let L = this.AB.Label();\n      if (rowData == null) return \"\";\n\n      // translate multilingual\n      //// TODO: isn't this a MLObject??  use this.translate()\n      var mlFields = this.multilingualFields();\n      this.translate(rowData, rowData, mlFields);\n\n      var labelData = this.labelFormat || \"\";\n\n      // default label\n      if (!labelData && this.fields().length > 0) {\n         var defaultField = this.fields((f) => f.fieldUseAsLabel())[0];\n         if (defaultField) labelData = \"{\" + defaultField.id + \"}\";\n         else {\n            // if label is empty, then show .id\n            if (!labelData.trim()) {\n               let labelSettings = this.labelSettings || {};\n               if (labelSettings && labelSettings.isNoLabelDisplay) {\n                  labelData = L(labelSettings.noLabelText || \"[No Label]\");\n               } else {\n                  // show id of row\n                  labelData = `${\n                     this.AB.rules.isUUID(rowData.id) ? \"ID: \" : \"\"\n                  }${rowData.id}`;\n               }\n            }\n         }\n      }\n\n      // get column ids in {colId} template\n      // ['{colId1}', ..., '{colIdN}']\n      var colIds = labelData.match(/\\{[^}]+\\}/g);\n\n      if (colIds && colIds.forEach) {\n         colIds.forEach((colId) => {\n            var colIdNoBracket = colId.replace(\"{\", \"\").replace(\"}\", \"\");\n\n            var field = this.fieldByID(colIdNoBracket);\n            if (field == null) return;\n\n            labelData = labelData.replace(colId, field.format(rowData) || \"\");\n         });\n      }\n\n      // if label is empty, then show .id\n      if (!labelData.trim()) {\n         let labelSettings = this.labelSettings || {};\n         if (labelSettings && labelSettings.isNoLabelDisplay) {\n            labelData = L(labelSettings.noLabelText || \"[No Label]\");\n         } else {\n            // show id of row\n            labelData = `${this.AB.rules.isUUID(rowData.id) ? \"ID: \" : \"\"}${\n               rowData.id\n            }`;\n         }\n      }\n\n      return labelData;\n   }\n}\n","//\n// ABObjectQuery\n//\n// A type of Object in our system that is based upon a complex relationship of multiple\n// existing Objects.\n//\n// In the QueryBuilder section of App Builder, a new Query Object can be created.\n// An initial Object can be chosen from our current list of Objects. After that, additional Objects\n// and a specified join type can be specified.\n//\n// A list of fields from each specified Object can also be included as the data to be returned.\n//\n// A where statement is also part of the definition.\n//\n\nimport ABObject from \"../platform/ABObject\";\nimport ABModelQuery from \"../platform/ABModelQuery\";\n\nexport default class ABObjectQueryCore extends ABObject {\n   constructor(attributes, AB) {\n      super(attributes, AB);\n      /*\n{\n\tid: uuid(),\n\tname: 'name',\n\tlabelFormat: 'xxxxx',\n\tisImported: 1/0,\n\turlPath:'string',\n\timportFromObject: 'string', // JSON Schema style reference:  '#[ABApplication.id]/objects/[ABObject.id]'\n\t\t\t\t\t\t\t\t// to get other object:  ABApplication.objectFromRef(obj.importFromObject);\n\ttranslations:[\n\t\t{}\n\t],\n\n\n\n\t// ABOBjectQuery Specific Changes\n\t// we store a list of fields by their urls:\n\tfields:[\n\t\t{\n\t\t\talias: \"\",\n\t\t\tfieldURL:'#/url/to/field',\n\t\t}\n\t],\n\n\n\t// we store a list of joins:\n\tjoins:{\n\t\talias: \"\",\t\t\t\t\t\t\t// the alias name of table - use in SQL command\n\t\tobjectURL:\"#/...\",\t\t\t\t\t// the base object of the join\n\t\tlinks: [\n\t\t\t{\n\t\t\t\talias: \"\",\t\t\t\t\t\t\t// the alias name of table - use in SQL command\n\t\t\t\tfieldID: \"uuid\",\t\t\t\t\t// the connection field of the object we are joining with.\n\t\t\t\ttype:[left, right, inner, outer]\t// join type: these should match the names of the knex methods\n\t\t\t\t\t\t=> innerJoin, leftJoin, leftOuterJoin, rightJoin, rightOuterJoin, fullOuterJoin\n\t\t\t\tlinks: [\n\t\t\t\t\t...\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\n\t},\n\n\n\twhere: { QBWhere }\n}\n*/\n      this.isQuery = true;\n      // {bool}\n      // a property to mark the difference between an ABObject and ABObjectQuery.\n\n      this.__missingObject = this.__missingObject ?? [];\n      // {array} fieldInfo\n      // the field info that defined an object we can't find.\n\n      this.__missingFields = this.__missingFields ?? [];\n      // {array} [ { objID, fieldID }, ... ]\n      // a list of field definitions that we are unable to resolve.\n\n      this.__cantFilter = [];\n      // {array} [ {field, fieldInfo}, ... ]\n      // a list of field that were assigned but can't be used for filtering.\n\n      this.__duplicateFields = [];\n      // {array} [ {fieldInfo}, ... ]\n      // a list of duplicate field definitions.\n\n      this.__linkProblems = [];\n      // {array} [ { message, data }, ...]\n      // a list of warning messages related to link objects\n   }\n\n   ///\n   /// Static Methods\n   ///\n   /// Available to the Class level object.  These methods are not dependent\n   /// on the instance values of the Application.\n   ///\n\n   /**\n    * contextKey()\n    * returns a unique key that represents a query in\n    * our networking job resolutions.\n    * @return {string}\n    */\n   static contextKey() {\n      return \"query\";\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   /// ABApplication data methods\n\n   fromValues(attributes) {\n      super.fromValues(attributes);\n\n      this.type = \"query\";\n\n      // populate connection objects\n      // this._objects = {};\n      // this.obj2Alias = attributes.obj2Alias || {};\n\n      this.alias2Obj = {}; // this gets built in the .importJoins()\n      // { \"alias\" : object.id }\n      // this is a lookup hash of a referenced alias to the Object it\n      // references.\n\n      this.objectIDs = [];\n      // {array}  of ABObject.id s that are referenced by this query.\n      // this is how we limit our searches on objects.\n      // this gets built in the .importJoins();\n\n      this.viewName = attributes.viewName || \"\";\n      // {string}\n      // this is the SQL tablename of where our Query will store it's\n      // view data.\n\n      // import all our ABObjects\n      this.importJoins(attributes.joins || {});\n\n      // import fields after joins are imported\n      this._fields = null;\n      this.importFields(attributes.fields || []);\n      // {array} [ { alias, field}, {},... ]\n      // an array of field definition structures that mark what fields this\n      // query is interested in pulling data from.\n      //    .alias : {string} matches the alias of the ABObject that the field\n      //             is from\n      //    .field : {ABFieldXXX} the link to the actual ABField instance\n\n      // Import our Where condition\n      this.where = attributes.where || {}; // .workspaceFilterConditions\n      // Fix default where.glue value\n      if (\n         this.where &&\n         !this.where.glue &&\n         this.where.rules &&\n         this.where.rules.length > 0\n      )\n         this.where.glue = \"and\";\n\n      this._objectWorkspaceViews = attributes.objectWorkspaceViews || {};\n\n      this.settings = this.settings || {};\n\n      if (attributes && attributes.settings) {\n         // convert from \"0\" => true/false\n         this.settings.grouping = JSON.parse(\n            attributes.settings.grouping || false\n         );\n         this.settings.hidePrefix = JSON.parse(\n            attributes.settings.hidePrefix || false\n         );\n      }\n   }\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABObjectQuery instance\n    * into the values needed for saving to the DB.\n    *\n    * @return {json}\n    */\n   toObj() {\n      var result = super.toObj();\n\n      result.viewName = this.viewName;\n\n      result.joins = this.exportJoins();\n      result.fields = this.exportFields();\n      result.where = this.where; // .workspaceFilterConditions\n\n      result.settings = this.settings;\n\n      return result;\n   }\n\n   ///\n   /// Fields\n   ///\n\n   /**\n    * @method importFields\n    * instantiate a set of fields from the given attributes.\n    * Our attributes are a set of field URLs That should already be created in their respective\n    * ABObjects.\n    * @param {array} fieldSettings The different field urls for each field\n    */\n   importFields(fieldSettings) {\n      var newFields = [];\n      (fieldSettings || []).forEach((fieldInfo) => {\n         if (fieldInfo == null) return;\n\n         // pull object by alias name\n         let object = this.objectByAlias(fieldInfo.alias);\n\n         // Pull object from .AB\n         if (!object && this.AB) {\n            object = this.AB.objectByID(fieldInfo.objectID);\n\n            // keep\n            if (object) {\n               this._objects = this._objects || {};\n               this._objects[fieldInfo.alias] = object;\n            }\n         }\n\n         if (!object) {\n            this.__missingObject = this.__missingObject ?? [];\n            this.__missingObject.push(fieldInfo);\n            return;\n         }\n\n         let field = object.fieldByID(fieldInfo.fieldID);\n         if (!field) {\n            this.__missingFields = this.__missingFields ?? [];\n            this.__missingFields.push({\n               objID: object.id,\n               fieldID: fieldInfo.fieldID,\n               fieldInfo,\n            });\n            return;\n         }\n\n         if (!this.canFilterField(field)) {\n            this.__cantFilter = this.__cantFilter ?? [];\n            this.__cantFilter.push({ field, fieldInfo });\n         }\n\n         // check duplicate\n         let isNew =\n            newFields.filter(\n               (f) =>\n                  f.alias == fieldInfo.alias && f.field.id == fieldInfo.fieldID\n            ).length < 1;\n\n         if (!isNew) {\n            this.__duplicateFields = this.__duplicateFields ?? [];\n            this.__duplicateFields.push({ fieldInfo });\n         }\n\n         // should be a field of base/join objects\n         if (field && this.canFilterField(field) && isNew) {\n            // add alias to field\n            // create new instance of this field:\n            var def = field.toObj();\n            let clonedField = new field.constructor(def, field.object);\n\n            clonedField.alias = fieldInfo.alias;\n\n            let alias = fieldInfo.alias;\n            if (Array.isArray(this.joins())) {\n               // NOTE: query v1\n               alias = field.object.name;\n            }\n\n            newFields.push({\n               alias: alias,\n               field: clonedField,\n            });\n         }\n      });\n      this._fields = newFields;\n   }\n\n   /**\n    * @method exportFields\n    * convert our array of fields into a settings object for saving to disk.\n    * @return {array}\n    */\n   exportFields() {\n      var currFields = [];\n      this._fields.forEach((fieldInfo) => {\n         currFields.push({\n            alias: fieldInfo.alias,\n            objectID: fieldInfo.field.object.id,\n            fieldID: fieldInfo.field.id,\n         });\n      });\n\n      // let's persist the faulty settings so a developer or builder can\n      // review and fix it by hand.\n      (this.__missingObject || []).forEach((f) => {\n         currFields.push(f);\n      });\n\n      (this.__cantFilter || []).forEach((f) => {\n         currFields.push(f.fieldInfo);\n      });\n\n      return currFields;\n   }\n\n   /**\n    * @method fields()\n    *\n    * Support the ABObject api by returning a list of fields relevant\n    * to this ABObjectQuery.\n    *\n    * @return {array}\n    */\n   fields(fn = () => true) {\n      if (!fn) fn = () => true;\n      return this._fields.map((f) => f.field).filter(fn);\n   }\n\n   ///\n   /// Joins & Objects\n   ///\n\n   /**\n    * @method joins()\n    *\n    * return an object of joins for this Query.\n    *\n    * @return {Object}\n    */\n   joins() {\n      return this._joins || {};\n   }\n\n   /**\n    * @method objects()\n    *\n    * return an array of all the relevant ABObjects for this Query.\n    *\n    * @return {array}\n    */\n   objects(fn = () => true) {\n      // FOR proper expected operation, this fn must only return object\n      // matches for which this ABQuery is managing objects:\n\n      return this.AB.objects((o) => this.objectIDs.indexOf(o.id) > -1).filter(\n         fn\n      );\n   }\n\n   /**\n    * @method objectAlias()\n    *\n    * return alias of of ABObjects.\n    *\n    * @return {string}\n    */\n   objectAlias(objectId) {\n      let result = null;\n\n      Object.keys(this.alias2Obj || {}).forEach((alias) => {\n         if (!result && this.alias2Obj[alias] == objectId) {\n            result = alias;\n         }\n      });\n\n      return result;\n   }\n\n   /**\n    * @method objectBase\n    * return the origin object\n    *\n    * @return {ABObject}\n    */\n   objectBase() {\n      if (!this._joins.objectID) return null;\n\n      return this.AB.objectByID(this._joins.objectID) || null;\n   }\n\n   /**\n    * @method objectByAlias()\n    * return ABObject search by alias name\n    *\n    * @param {string} - alias name\n    * @return {ABClassObject}\n    */\n   objectByAlias(alias) {\n      var objID = this.alias2Obj[alias];\n      if (objID) {\n         return this.objects((o) => o.id == objID)[0];\n      }\n      return null;\n   }\n\n   /**\n    * @method objectByID()\n    * return ABObject search by ID\n    * @param {string} objID\n    *        The requested {ABObject}.id of the object to return.\n    * @return {ABObject} | null\n    */\n   objectByID(objID) {\n      if (objID) {\n         return this.objects((o) => o.id == objID)[0];\n      }\n      return null;\n   }\n\n   /**\n    * @method links()\n    *\n    * return an array of links for this Query.\n    *\n    * @return {array}\n    */\n   links(filter = () => true) {\n      return (this._links || []).filter(filter);\n   }\n\n   /**\n    * @method importJoins\n    * instantiate a set of joins from the given attributes.\n    * Our joins contain a set of ABObject URLs that should already be created in our Application.\n    * @param {Object} settings The different field urls for each field\n    *\t\t\t\t\t{ }\n    */\n   importJoins(settings) {\n      // copy join settings\n      this._joins = this.AB.cloneDeep(settings);\n\n      var uniqueObjectIDs = {};\n      // { obj.id : obj.id }\n      // a hash of object.ids for all the relevant ABObjects necessary for this\n      // ABObjectQuery\n\n      var newLinks = [];\n      // {array} of link definitions\n      // build the operating values for this._links\n\n      let storeObject = (object, alias) => {\n         if (!object) return;\n\n         // var inThere = newObjects.filter(obj => obj.id == object.id && obj.alias == alias ).length > 0;\n         // if (!inThere) {\n         // newObjects[alias] = object;\n         // this.obj2Alias[object.id] = alias;\n         this.alias2Obj[alias] = object.id;\n         uniqueObjectIDs[object.id] = object.id;\n         // newObjects.push({\n         // \talias: alias,\n         // \tobject: object\n         // });\n         // }\n      };\n\n      let storeLinks = (links) => {\n         (links || []).forEach((link) => {\n            // var inThere = newLinks.filter(l => l.fieldID == link.fieldID).length > 0;\n            // if (!inThere) {\n            newLinks.push(link);\n            // }\n         });\n      };\n\n      let processJoin = (baseObject, joins) => {\n         if (!baseObject) return;\n\n         this.__linkProblems = this.__linkProblems ?? [];\n\n         (joins || []).forEach((link) => {\n            // Convert our saved settings:\n            //\t{\n            //\t\talias: \"\",\t\t\t\t\t\t\t// the alias name of table - use in SQL command\n            //\t\tobjectID: \"uuid\",\t\t\t\t\t// id of the connection object\n            //\t\tlinks: [\n            //\t\t\t{\n            //\t\t\t\talias: \"\",\t\t\t\t\t\t\t// the alias name of table - use in SQL command\n            //\t\t\t\tfieldID: \"uuid\",\t\t\t\t\t// uhe connection field of the object we are joining with.\n            //\t\t\t\ttype:[left, right, inner, outer]\t// join type: these should match the names of the knex methods\n            //\t\t\t\t\t\t=> innerJoin, leftJoin, leftOuterJoin, rightJoin, rightOuterJoin, fullOuterJoin\n            //\t\t\t\tlinks: [\n            //\t\t\t\t\t...\n            //\t\t\t\t]\n            //\t\t\t}\n            //\t\t]\n            //\t},\n\n            var linkField = baseObject.fieldByID(link.fieldID);\n            if (!linkField) {\n               this.__linkProblems.push({\n                  message: `could not resolve our linkField[${link.fieldID}]`,\n                  data: {\n                     link,\n                  },\n               });\n               return;\n            }\n\n            // track our linked object\n            var linkObject = this.AB.objectByID(linkField.settings.linkObject);\n            if (!linkObject) {\n               this.__linkProblems.push({\n                  message: `could not resolve our linked field -> linkObject[${linkField.settings.linkObject}]`,\n                  data: {\n                     link,\n                  },\n               });\n               return;\n            }\n\n            storeObject(linkObject, link.alias);\n\n            storeLinks(link.links);\n\n            processJoin(linkObject, link.links);\n         });\n      };\n\n      // if (!this._joins.objectURL)\n      // \t// TODO: this is old query version\n      // \treturn;\n\n      // store the root object\n      var rootObject = this.objectBase();\n      if (!rootObject) {\n         // this._objects = newObjects;\n         this.__linkProblems.push({\n            message: \"could not resolve our base object\",\n            data: {\n               objectID: this._joins?.objectID,\n            },\n         });\n         return;\n      }\n\n      storeObject(rootObject, \"BASE_OBJECT\");\n\n      storeLinks(settings.links);\n\n      processJoin(rootObject, settings.links);\n\n      // this._objects = newObjects;\n      this._links = newLinks;\n      this.objectIDs = Object.keys(uniqueObjectIDs);\n   }\n\n   /**\n    * @method exportJoins\n    * save our list of objects into our format for persisting on the server\n    * @param {array} settings\n    */\n   exportJoins() {\n      return this.AB.cloneDeep(this._joins || {});\n   }\n\n   ///\n   /// Working with Client Components:\n   ///\n\n   /**\n    * @method model\n    * return a Model object that will allow you to interact with the data for\n    * this ABObjectQuery.\n    */\n   model() {\n      var model = new ABModelQuery(this);\n\n      // default the context of this model's operations to this object\n      model.contextKey(this.constructor.contextKey());\n      model.contextValues({ id: this.id }); // the datacollection.id\n\n      return model;\n   }\n\n   /**\n    * @method canFilterObject\n    * evaluate the provided object to see if it can directly be filtered by this\n    * query.\n    * @param {ABObject} object\n    * @return {bool}\n    */\n   canFilterObject(object) {\n      if (!object) return false;\n\n      // I can filter this object if it is one of the objects in my joins\n      return (\n         this.objects((obj) => {\n            return obj.id == object.id;\n         }).length > 0\n      );\n   }\n\n   /**\n    * @method canFilterField\n    * evaluate the provided field to see if it can be filtered by this\n    * query.\n    * @param {ABObject} object\n    * @return {bool}\n    */\n   canFilterField(field) {\n      if (!field) return false;\n\n      // I can filter a field if it's object OR the object it links to can be filtered:\n      let object = field.object;\n      // Transition:\n      // let linkedObject = this.objects(\n      //    (obj) => obj.id == field.settings.linkObject\n      // )[0];\n      var linkedObject = field.datasourceLink;\n\n      return this.canFilterObject(object) || this.canFilterObject(linkedObject);\n   }\n\n   /**\n    * @method urlPointer()\n    * return the url pointer that references this object. This url pointer\n    * should be able to be used by this.AB.urlResolve() to return\n    * this object.\n    *\n    * @param {boolean} acrossApp - flag to include application id to url\n    *\n    * @return {string}\n    */\n   urlPointer(acrossApp) {\n      console.error(\n         \"ABQueryCore.urlPointer(): Depreciated: Where is this being called?\"\n      );\n      return this.application.urlQuery(acrossApp) + this.id;\n   }\n\n   /**\n    * @method isGroup\n    *\n    * @return {boolean}\n    */\n   get isGroup() {\n      return this.settings.grouping || false;\n   }\n\n   /**\n    * @method isReadOnly\n    *\n    * @return {boolean}\n    */\n   get isReadOnly() {\n      return true;\n   }\n\n   /**\n    * @method isDisabled()\n    * check this contains removed objects or fields\n    *\n    * @return {boolean}\n    */\n   isDisabled() {\n      return this.disabled || false;\n   }\n\n   get workspaceFilterConditions() {\n      let filterConditions = super.workspaceFilterConditions;\n      if (\n         filterConditions == null ||\n         filterConditions.rules == null ||\n         !filterConditions.rules.length\n      ) {\n         filterConditions = this.where;\n      }\n\n      return filterConditions;\n   }\n}\n","// import ABApplication from \"./ABApplication\"\n\nimport ABMLClass from \"../platform/ABMLClass\";\nimport { concat } from \"lodash\";\n// const _concat = require(\"lodash/concat\");\nconst _concat = concat;\n\nimport ABProcessTaskSubProcess from \"../platform/process/tasks/ABProcessTaskSubProcess\";\n\nexport default class ABProcessCore extends ABMLClass {\n   constructor(attributes, AB) {\n      super([\"label\"], AB);\n\n      this.fromValues(attributes);\n\n      // indicate we are ready.\n      this.elements().forEach((e) => {\n         e.onProcessReady();\n      });\n   }\n\n   ///\n   /// Static Methods\n   ///\n   /// Available to the Class level object.  These methods are not dependent\n   /// on the instance values of the Application.\n   ///\n\n   fromValues(attributes) {\n      /*\n    {\n      id: uuid(),\n      name: 'name',\n      type: 'xxxxx',\n      json: \"{json}\"\n    }\n    */\n      this.id = attributes.id;\n      this.name = attributes.name || \"\";\n      this.type = attributes.type || \"process\";\n      this.xmlDefinition = attributes.xmlDefinition || null;\n\n      // this.json = attributes.json || null;\n      let currElements = this._elements || {};\n      this._elements = {};\n      (attributes.elementIDs || []).forEach((eID) => {\n         var ele = this.AB.processElementNew(eID, this);\n         if (ele) {\n            this._elements[eID] = ele;\n         } else {\n            // current eID isn't one of our definitions yet, so might be\n            // a temporary .diagramID from an unsaved task:\n            if (currElements[eID]) {\n               this._elements[eID] = currElements[eID];\n            } else {\n               this.emit(\n                  \"warning\",\n                  `P[${this.name}] is referencing an unknown process element id[${eID}]`,\n                  { process: this.id, eID }\n               );\n            }\n         }\n      });\n\n      this._connections = attributes.connections || {};\n\n      super.fromValues(attributes); // perform translation on this object.\n      // NOTE: keep this at the end of .fromValues();\n\n      if (!this.label) {\n         this.label = this.name;\n      }\n   }\n\n   /**\n    * @method toObj()\n    * properly compile the current state of this ABProcess instance\n    * into the values needed for saving to the DB.\n    * @return {json}\n    */\n   toObj() {\n      // default label value\n      if (!this.label) {\n         this.label = this.name;\n      }\n\n      // OP.Multilingual.unTranslate(this, this, [\"label\"]);\n      var data = super.toObj();\n\n      var fieldsToSave = [\"id\", \"name\", \"xmlDefinition\"];\n      fieldsToSave.forEach((f) => {\n         data[f] = this[f];\n      });\n\n      data.elementIDs = [];\n      for (var e in this._elements) {\n         // NOTE: when a task is initially created, it doesn't have an .id\n         // so we need to reference it by it's .diagramID\n         data.elementIDs.push(\n            this._elements[e].id ?? this._elements[e].diagramID\n         );\n      }\n\n      data.connections = this._connections;\n\n      // data.participantIDs = [];\n      // for (var p in this._participants) {\n      //     data.participantIDs.push(this._participants[p].id);\n      // }\n\n      return data;\n   }\n\n   //\n   // XML Model\n   //\n\n   /**\n    * modelDefinition()\n    * return the current xml definition for this process\n    * @return {string}\n    */\n   modelDefinition() {\n      return this.xmlDefinition;\n   }\n\n   /**\n    * modelNew()\n    * initialze our xml definition to a new state.\n    * @return {string}\n    */\n   modelNew() {\n      this.xmlDefinition = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<bpmn2:definitions xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:bpmn2=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\" xsi:schemaLocation=\"http://www.omg.org/spec/BPMN/20100524/MODEL BPMN20.xsd\" id=\"process-def-${this.id}\" targetNamespace=\"http://bpmn.io/schema/bpmn\">\n  <bpmn2:process id=\"Process_1\" isExecutable=\"true\">\n    <bpmn2:startEvent id=\"StartEvent_1\"/>\n  </bpmn2:process>\n  <bpmndi:BPMNDiagram id=\"BPMNDiagram_1\">\n    <bpmndi:BPMNPlane id=\"BPMNPlane_1\" bpmnElement=\"Process_1\">\n      <bpmndi:BPMNShape id=\"_BPMNShape_StartEvent_2\" bpmnElement=\"StartEvent_1\">\n        <dc:Bounds height=\"36.0\" width=\"36.0\" x=\"412.0\" y=\"240.0\"/>\n      </bpmndi:BPMNShape>\n    </bpmndi:BPMNPlane>\n  </bpmndi:BPMNDiagram>\n</bpmn2:definitions>`;\n\n      //// TODO: create a default Start Task here??\n   }\n\n   /**\n    * modelUpdate()\n    * update our xml definition from the provided description.\n    * @param {string} xml  bpmn2 xml definition from our modeler.\n    * @return {string}\n    */\n   modelUpdate(xml) {\n      this.xmlDefinition = xml;\n   }\n\n   //\n   // Diagram Elements\n   //\n\n   /**\n    * connections()\n    * return an array of connections that describe the relationships between\n    * our process elements.\n    * @param {fn} fn an iterator that returns true if the provided element\n    *                should be returned.\n    * @return [{SimpleConnectionObj}]\n    */\n   connections(fn = () => true) {\n      var allConnections = Object.keys(this._connections).map((e) => {\n         return this._connections[e];\n      });\n\n      // If parent, merge connections\n      if (this.process && this.key === \"SubProcess\") {\n         allConnections = allConnections.concat(this.process.connections());\n      }\n\n      return allConnections.filter(fn);\n   }\n\n   /**\n    * connectionForDiagramID()\n    * return the connection for the given diagram id\n    * @param {string} dID\n    *        the bpmn:Element diagram id\n    */\n   connectionForDiagramID(dID) {\n      return this.connections((t) => {\n         return t.id == dID;\n      })[0];\n   }\n\n   /**\n    * connectionsIncoming()\n    * return the connections that are entering this Element\n    * @param {string} dID\n    *        the bpmn:Element diagram id\n    */\n   connectionsIncoming(dID) {\n      return this.connections((c) => {\n         return c.to == dID;\n      });\n   }\n\n   /**\n    * connectionsOutgoing()\n    * return the connections that are leaving this Element\n    * @param {string} dID\n    *        the bpmn:Element diagram id\n    */\n   connectionsOutgoing(dID) {\n      return this.connections((c) => {\n         return c.from == dID;\n      });\n   }\n\n   /**\n    * connectionRemove()\n    * remove the connection info for the given bpmn:element\n    * @param {BMPNDiagramOBJ} element\n    *        the {element} returned from the BPMN.io modeling library event.\n    */\n   connectionRemove(element) {\n      delete this._connections[element.id];\n   }\n\n   /**\n    * connectionSimplyElement()\n    * given a BPMN diagram element, return a simplified object that describes\n    * the connection between two elements.\n    * @param {BMPNDiagramOBJ} element\n    *        the {element} returned from the BPMN.io modeling library event.\n    * @return {SimpleConnectionObj}\n    *        .id : {string} diagram id of the connection element\n    *        .type : {string} the type of connection\n    *        .from : {string} the diagram id of the source element\n    *        .to : {string} the diagram id of the dest element\n    */\n   connectionSimplyElement(element) {\n      var bo = element.businessObject;\n      var from = null;\n      if (bo.sourceRef) {\n         from = bo.sourceRef.id;\n      }\n\n      var to = null;\n      if (bo.targetRef) {\n         to = bo.targetRef.id;\n      }\n\n      var connection = {\n         id: element.id,\n         type: element.type,\n         from: from,\n         to: to,\n      };\n      return connection;\n   }\n\n   /**\n    * connectionUpsert()\n    * add or update the connection information for the given bpmn:element\n    * @param {BMPNDiagramOBJ} element\n    *        the {element} returned from the BPMN.io modeling library event.\n    */\n   connectionUpsert(element) {\n      var simpleConn = this.connectionSimplyElement(element);\n      if (simpleConn.from && simpleConn.to && element.parent) {\n         this._connections[simpleConn.id] = simpleConn;\n      } else {\n         // this connection is no longer connecting anything thing.\n         // it is being removed.\n         this.connectionRemove(element);\n      }\n   }\n\n   /**\n    * elements()\n    * return an array of elements that match the given filter (or all elements\n    * if no filter is provided).\n    * @param {fn} fn an iterator that returns true if the provided element\n    *                should be returned.\n    * @return {[ABProcessTask, ABProcessParticipant, etc...]}\n    */\n   elements(fn = () => true) {\n      var allElements = Object.keys(this._elements).map((e) => {\n         return this._elements[e];\n      });\n      return allElements.filter(fn);\n   }\n\n   /**\n    * elementAdd()\n    * insert an element to be tracked by this process.\n    * @param {ABProcessElement} element\n    *        the full instance of an ABProcessElement to track.\n    */\n   elementAdd(element) {\n      this._elements[element.id || element.diagramID] = element;\n   }\n\n   /**\n    * elementByID()\n    * return the {ABProcessElement} that has the given .id\n    * @param {string} id\n    * @return {ABProcess[OBJ]}\n    */\n   elementByID(id) {\n      return this._elements[id] ?? null;\n   }\n\n   /**\n    * elementForDiagramID()\n    * return the object that is tied to the given xml diagram ID.\n    * @param {string} dID the diagram ID\n    * @return {ABProcess[OBJ]}\n    */\n   elementForDiagramID(dID) {\n      return this.elements((t) => {\n         return t.diagramID == dID;\n      })[0];\n   }\n\n   /**\n    * elementRemove()\n    * remove an element from being tracked by this process.\n    * @param {obj|ABProcessElement} def\n    *        a definition of, or full Object instance of the ABProcessElement\n    *        to remove.\n    */\n   elementRemove(def) {\n      delete this._elements[def.id || def.diagramID];\n   }\n\n   /**\n    * isTriggeredBy()\n    * scan our tasks and see if we have a \"trigger\" task that responds to\n    * the provided key.\n    * @param {string} key the trigger key\n    * @return {bool}\n    */\n   isTriggeredBy(key) {\n      return this.taskForTriggerKey(key) != null;\n   }\n\n   /**\n    * connectionNextTask()\n    * return the ABProcessElement(s) that are after the given Element\n    * (eg connects to) this element.\n    * @param {ABProcessElement} currElement\n    * @return {array}\n    */\n   connectionNextTask(currElement) {\n      var elements = [];\n      var nextConnections = this.connections((c) => {\n         return c.from == currElement.diagramID;\n      });\n      nextConnections.forEach((c) => {\n         var element = this.elements((e) => {\n            return e.diagramID == c.to;\n         })[0];\n         if (element) {\n            elements.push(element);\n         }\n      });\n      return elements;\n   }\n\n   /**\n    * connectionPreviousTask()\n    * return the ABProcessElement(s) that was a previous Element\n    * (eg connects to) this element.\n    * @param {ABProcessElement} currElement\n    * @return {array}\n    */\n   connectionPreviousTask(currElement) {\n      var elements = [];\n      var prevConnections = this.connections((c) => {\n         return c.to == currElement.diagramID;\n      });\n      prevConnections.forEach((c) => {\n         var element = this.elements((e) => {\n            return e.diagramID == c.from;\n         })[0];\n         if (element) {\n            elements.push(element);\n         }\n      });\n      return elements;\n   }\n\n   /**\n    * processData()\n    * return an array of avaiable ABObjects that are represented\n    * by the data previous ProcessElements are working with.\n    * @param {ABProcessElement} currElement\n    *        the ABProcessElement that is requesting the data.\n    * @return {array} | null\n    */\n   processData(currElement, params) {\n      // var tasksToAsk = this.connectionPreviousTask(currElement);\n      // var values = queryPreviousTasks(tasksToAsk, \"processData\", params, this);\n      // return values.length > 0\n      //    ? values.length > 1\n      //       ? values\n      //       : values[0]\n      //    : null;\n\n      var tasksToAsk = this.allPreviousTasks(currElement)\n      var values = queryPreviousTasks(tasksToAsk, \"processData\", params, this);\n      return values.length > 0\n         ? values.length > 1\n            ? values\n            : values[0]\n         : null;\n   }\n\n   /**\n    * processDataFields()\n    * return an array of avaiable data fields that this element\n    * can request from other ProcessElements.\n    * Different Process Elements can make data available to other\n    * process Elements.\n    * @param {ABProcessElement} currElement\n    *        the ABProcessElement that is requesting the data.\n    * @return {array} | null\n    */\n   processDataFields(currElement) {\n      var tasksToAsk = this.allPreviousTasks(currElement);\n      // var tasksToAsk = this.connectionPreviousTask(currElement);\n      var fields = queryPreviousTasks(\n         tasksToAsk,\n         \"processDataFields\",\n         null,\n         this\n      );\n      return fields.length > 0 ? fields : null;\n   }\n\n   /**\n    * allPreviousConnections()\n    * walk through the current graph and return all the previous connections\n    * leading up to the given {ProcessElement}\n    * @param {Connection} conn\n    * @param {hash} hashConn\n    *        { connection.id : connection }\n    * @return {array}\n    */\n   allPreviousConnectionsForConnection(conn, hashConn) {\n      var prevConnections = this.connections((c) => {\n         return c.to == conn.from;\n      });\n\n      prevConnections.forEach((c) => {\n         if (!hashConn[c.id]) {\n            hashConn[c.id] = c;\n            this.allPreviousConnectionsForConnection(c, hashConn);\n         }\n      });\n   }\n   allPreviousConnectionsForElement(currElement) {\n      var prevConnections = this.connections((c) => {\n         return c.to == currElement.diagramID;\n      });\n      var hashConn = {\n         /* connection.id : connection */\n      };\n      // hashConn will contains the final collection of connections.\n\n      prevConnections.forEach((c) => {\n         hashConn[c.id] = c;\n         this.allPreviousConnectionsForConnection(c, hashConn);\n      });\n\n      // TODO: detect circle backs and remove connections that\n      // resolve back to currElement\n\n      // convert our hash into an array\n      return Object.keys(hashConn).map((k) => hashConn[k]);\n   }\n\n   allPreviousTasks(currElement) {\n      var prevTasks = {}; /* task.id : task */\n      var allPreviousConnections =\n         this.allPreviousConnectionsForElement(currElement);\n      var task;\n      allPreviousConnections.forEach((conn) => {\n         // each conn has a .to and a .from => grab both tasks\n         task = this.elementForDiagramID(conn.to);\n         if (task) prevTasks[task.id] = task;\n\n         task = this.elementForDiagramID(conn.from);\n         if (task) prevTasks[task.id] = task;\n      });\n\n      var tasksToAsk = Object.keys(prevTasks)\n         .map((k) => prevTasks[k])\n         .filter((t) => t.id != currElement.id);\n\n      return tasksToAsk;\n   }\n\n   /**\n    * processDataObjects()\n    * return an array of avaiable ABObjects that are represented\n    * by the data previous ProcessElements are working with.\n    * @param {ABProcessElement} currElement\n    *        the ABProcessElement that is requesting the data.\n    * @return {array} | null\n    */\n   processDataObjects(currElement) {\n      var tasksToAsk = this.connectionPreviousTask(currElement);\n      var fields = queryPreviousTasks(\n         tasksToAsk,\n         \"processDataObjects\",\n         null,\n         this\n      );\n      return fields.length > 0 ? fields : null;\n   }\n\n   /**\n    * taskForTriggerKey()\n    * return one or more tasks that respond to the given trigger key\n    * @param {string} key a trigger key\n    * @return {[ABProcessTask,...]}\n    */\n   taskForTriggerKey(key) {\n      var trigger = this.elements((t) => {\n         return t.triggerKey == key;\n      })[0];\n      if (trigger) {\n         return trigger;\n      } else {\n         return null;\n      }\n   }\n\n   //\n   // Participants\n   //\n\n   // /**\n   //  * participants()\n   //  * return an array of participants that match the given filter (or all tasks\n   //  * if no filter is provided).\n   //  * @param {fn} fn an iterator that returns true if the provided participants\n   //  *                should be returned.\n   //  * @return {[ABProcessParticipant,...]}\n   //  */\n   // participants(fn) {\n   //     if (!fn)\n   //         fn = () => {\n   //             return true;\n   //         };\n   //     var all = Object.keys(this._participants).map((p) => {\n   //         return this._participants[p];\n   //     });\n   //     return all.filter(fn);\n   // }\n\n   // /**\n   //  * participantsForDiagramID()\n   //  * return the participant(s) that are tied to the given xml diagram ID.\n   //  * @param {string} dID the diagram ID\n   //  * @return {[ABProcessParticipant,...]}\n   //  */\n   // participantsForDiagramID(dID) {\n   //     return this.participants((p) => {\n   //         return p.diagramID == dID;\n   //     });\n   // }\n}\n\nvar queryPreviousTasks = (\n   list,\n   method,\n   param,\n   process,\n   responses,\n   processedIDs\n) => {\n   // recursive fn() to step through our graph and compile\n   // results.\n   if (typeof responses == \"undefined\") {\n      responses = [];\n   }\n   if (typeof processedIDs == \"undefined\") {\n      processedIDs = [];\n   }\n   if (list.length == 0) {\n      return responses;\n   } else {\n      // get next task\n      const task = list.shift();\n\n      // if we haven't already done task:\n      if (processedIDs.indexOf(task.diagramID) == -1) {\n         // mark this task as having been processed\n         processedIDs.push(task.diagramID);\n\n         let value = null;\n\n         // get any field's it provides\n         if (!(task instanceof ABProcessTaskSubProcess))\n            value = task[method].apply(task, param);\n\n         // value = task[method].apply(task, param);\n\n         if (value === null) value = [];\n         responses = _concat(responses, value);\n\n         // add any previous tasks to our list\n         list = _concat(list, process.connectionPreviousTask(task));\n      }\n\n      // process next Task\n      return queryPreviousTasks(\n         list,\n         method,\n         param,\n         process,\n         responses,\n         processedIDs\n      );\n   }\n};\n","// import ABApplication from \"./ABApplication\"\n\nimport ABMLClass from \"../platform/ABMLClass\";\n\nexport default class ABStepCore extends ABMLClass {\n   constructor(attributes, AB) {\n      super([\"name\", \"text\"], AB);\n\n      this.fromValues(attributes);\n\n      // indicate we are ready.\n      // this.elements().forEach((e) => {\n      //    e.onProcessReady();\n      // });\n   }\n\n   ///\n   /// Static Methods\n   ///\n   /// Available to the Class level object.  These methods are not dependent\n   /// on the instance values of the Application.\n   ///\n\n   fromValues(attributes) {\n      /*\n    {\n      id: uuid(),\n      name: 'name',\n      type: 'xxxxx',\n      json: \"{json}\"\n    }\n    */\n      this.id = attributes.id;\n      this.name = attributes.name || \"New Step\";\n      this.type = attributes.type || \"step\";\n      this.text = attributes.text || \"\";\n      this.settings = attributes.settings || {};\n      this.settings.event = attributes?.settings?.event || \"click\";\n      this.settings.el = attributes?.settings?.el || \"\";\n      // this.xmlDefinition = attributes.xmlDefinition || null;\n\n      super.fromValues(attributes); // perform translation on this object.\n      // NOTE: keep this at the end of .fromValues();\n\n      if (!this.label) {\n         this.label = this.name;\n      }\n   }\n\n   /**\n    * @method toObj()\n    * properly compile the current state of this ABProcess instance\n    * into the values needed for saving to the DB.\n    * @return {json}\n    */\n   toObj() {\n      // debugger;\n      // default label value\n      if (!this.label) {\n         this.label = this.name;\n      }\n\n      // OP.Multilingual.unTranslate(this, this, [\"label\"]);\n      var data = super.toObj();\n\n      var fieldsToSave = [\"id\", \"name\", \"settings\", \"type\"];\n      fieldsToSave.forEach((f) => {\n         data[f] = this[f];\n      });\n\n      return data;\n   }\n\n   // /**\n   //  * steps()\n   //  * return an array of steps that match the given filter (or all steps\n   //  * if no filter is provided).\n   //  * @param {fn} fn an iterator that returns true if the provided element\n   //  *                should be returned.\n   //  * @return {[ABStep]}\n   //  */\n   // steps(fn = () => true) {\n   //    var allSteps = Object.keys(this._steps).map((e) => {\n   //       return this._steps[e];\n   //    });\n   //    return allSteps.filter(fn);\n   // }\n\n   // /**\n   //  * stepAdd()\n   //  * insert a step to be added to this hint.\n   //  * @param {ABStep} element\n   //  *        the full instance of an ABStep to track.\n   //  */\n   // stepAdd(step) {\n   //    this._steps[step.id] = step;\n   // }\n\n   // /**\n   //  * stepByID()\n   //  * return the {ABStep} that has the given .id\n   //  * @param {string} id\n   //  * @return {ABStep[OBJ]}\n   //  */\n   // stepByID(id) {\n   //    return this._step[id] ?? null;\n   // }\n\n   // /**\n   //  * stepRemove()\n   //  * remove a step from being displayed by this hint.\n   //  * @param {obj|ABStep} def\n   //  *        a definition of, or full Object instance of the ABStep\n   //  *        to remove.\n   //  */\n   // stepRemove(def) {\n   //    delete this._steps[def.id];\n   // }\n}\n","/*\n * ABViewManager\n *\n * An interface for managing the different ABViews available in our AppBuilder.\n *\n */\n\nvar AllViews = [\n   // require(\"../platform/views/ABView\"),\n   /////\n   ///// LEFT OFF HERRE:\n   /////\n   /// TODO: test this out:\n   await import(\"../platform/views/ABView\"),\n   // require(\"../platform/views/ABViewCarousel\"),\n   // require(\"../platform/views/ABViewChart\"),\n   // require(\"../platform/views/ABViewChartArea\"),\n   // require(\"../platform/views/ABViewChartBar\"),\n   // require(\"../platform/views/ABViewChartLine\"),\n   // require(\"../platform/views/ABViewChartPie\"),\n   // require(\"../platform/views/ABViewComment\"),\n   // require(\"../platform/views/ABViewConditionalContainer\"),\n   // require(\"../platform/views/ABViewConnectDataFilter\"),\n   // require(\"../platform/views/ABViewContainer\"),\n   // require(\"../platform/views/ABViewCSVExporter\"),\n   // require(\"../platform/views/ABViewCSVImporter\"),\n   // require(\"../platform/views/ABViewDataFilter\"),\n   // require(\"../platform/views/ABViewDataview\"),\n   // require(\"../platform/views/ABViewDocxBuilder\"),\n   // require(\"../platform/views/ABViewGrid\"),\n   // require(\"../platform/views/ABViewImage\"),\n   // require(\"../platform/views/ABViewLabel\"),\n   // require(\"../platform/views/ABViewLayout\"),\n   // require(\"../platform/views/ABViewList\"),\n   // require(\"../platform/views/ABViewMenu\"),\n   // require(\"../platform/views/ABViewPage\"),\n   // require(\"../platform/views/ABViewPDFImporter\"),\n   // require(\"../platform/views/ABViewPivot\"),\n   // require(\"../platform/views/ABViewTab\"),\n   // require(\"../platform/views/ABViewText\"),\n\n   // //\n   // // Special Editors\n   // //\n   // require(\"../platform/views/ABViewGantt\"),\n   // require(\"../platform/views/ABViewKanban\"),\n   // require(\"../platform/views/ABViewReportsManager\"),\n   // require(\"../platform/views/ABViewScheduler\"),\n\n   // //\n   // // Detail Components\n   // //\n   // require(\"../platform/views/ABViewDetail\"),\n   // require(\"../platform/views/ABViewDetailCheckbox\"),\n   // require(\"../platform/views/ABViewDetailConnect\"),\n   // require(\"../platform/views/ABViewDetailCustom\"),\n   // require(\"../platform/views/ABViewDetailImage\"),\n   // // require(\"../platform/views/ABViewDetailSelectivity\"),\n   // require(\"../platform/views/ABViewDetailText\"),\n   // require(\"../platform/views/ABViewDetailTree\"),\n\n   // //\n   // // Form Components\n   // //\n   // require(\"../platform/views/ABViewForm\"),\n   // require(\"../platform/views/ABViewFormButton\"),\n   // require(\"../platform/views/ABViewFormCheckbox\"),\n   // require(\"../platform/views/ABViewFormConnect\"),\n   // require(\"../platform/views/ABViewFormCustom\"),\n   // require(\"../platform/views/ABViewFormDatepicker\"),\n   // require(\"../platform/views/ABViewFormJson\"),\n   // require(\"../platform/views/ABViewFormNumber\"),\n   // require(\"../platform/views/ABViewFormReadonly\"),\n   // require(\"../platform/views/ABViewFormSelectMultiple\"),\n   // require(\"../platform/views/ABViewFormSelectSingle\"),\n   // require(\"../platform/views/ABViewFormTextbox\"),\n   // require(\"../platform/views/ABViewFormTree\"),\n];\n\n/*\n * Views\n * A name => ABView  hash of the different ABViews available.\n */\nvar Views = {};\nAllViews.forEach((v) => {\n   if (v.default?.common) {\n      v = v.default;\n   }\n   Views[v.common().key] = v;\n});\n\nexport default class ABViewManagerCore {\n   /**\n    * @function allViews\n    * return all the currently defined ABViews in an array.\n    * @return [{ABView},...]\n    */\n   static allViews(fn = () => true) {\n      var views = [];\n      for (var v in Views) {\n         var V = Views[v];\n         if (fn(V)) {\n            views.push(V);\n         }\n      }\n      return views;\n   }\n\n   /**\n    * @function newView\n    * return an instance of an ABView based upon the values.key value.\n    * @return {ABView}\n    */\n   static newView(values, application, parent) {\n      parent = parent || null;\n\n      if (values.key == \"detailselectivity\") {\n         values.key = \"detailconnect\";\n      }\n\n      //\t\tif ((values.key) && (Views[values.key])) {\n      if (values.key) {\n         if (!Views[values.key]) {\n            console.error(\n               \"!! View[\" +\n                  values.key +\n                  \"] not yet defined.  Have an ABView instead:\"\n            );\n            return new Views[\"view\"](values, application, parent);\n         }\n\n         return new Views[values.key](values, application, parent);\n      } else {\n         var err = new Error(`Unknown view key [${values.key}]`);\n         console.error(err); // show the stack.\n         console.error({\n            error: err,\n            values: values,\n            application: application,\n         });\n         return null;\n      }\n   }\n\n   static viewClass(key) {\n      if (Views[key]) {\n         return Views[key];\n      }\n      console.error(`Unknown View Key[${key}]`);\n      return;\n   }\n}\n","import ABComponent from \"../platform/ABComponent\";\n// const ABObjectQuery = require(\"../platform/ABObjectQuery\");\n\n/**\n *  support get data from objects and queries\n */\nfunction getFieldVal(rowData, field) {\n   if (!field) return null;\n   if (!field.columnName) return null;\n   const columnName = field.columnName;\n\n   let value = null;\n\n   if (columnName.indexOf(\".\") > -1) {\n      let colName = columnName.split(\".\")[1];\n      value = rowData[columnName] || rowData[colName];\n   } else {\n      value = rowData[columnName];\n   }\n\n   if (value != null && !isNaN(value)) {\n      return value;\n   }\n\n   // otherwise, this might be a process check where the rowData keys have\n   // '[diagramID].[field.id]'\n   for (const k in rowData) {\n      const key = k.split(\".\")[1];\n      if (key && key == field.id) {\n         value = rowData[k];\n      }\n   }\n\n   if (\n      (value == null || (typeof value == \"number\" && isNaN(value))) &&\n      field.format\n   )\n      value = field.format(rowData);\n\n   return value;\n}\n\nfunction getConnectFieldValue(rowData, field) {\n   let connectedVal = \"\";\n\n   if (rowData) {\n      let relationName = field.relationName();\n      if (rowData[relationName]) {\n         connectedVal =\n            (field.indexField\n               ? rowData[relationName][field.indexField.columnName]\n               : null) ?? // custom index\n            (field.indexField2\n               ? rowData[relationName][field.indexField2.columnName]\n               : null) ?? // custom index 2\n            rowData[relationName].id ??\n            rowData[relationName];\n      } else {\n         let fieldVal = getFieldVal(rowData, field);\n         if (fieldVal != null) {\n            connectedVal = fieldVal;\n         }\n      }\n   }\n   return connectedVal;\n}\n\nexport default class FilterComplexCore extends ABComponent {\n   constructor(idBase, AB) {\n      idBase = idBase || \"ab_filter_complex\";\n\n      if (typeof AB === \"undefined\") {\n         console.error(\"FilterComplexCore(): being called without an AB!\");\n      }\n\n      super(null, idBase, AB);\n\n      this.Account = { username: \"??\" };\n      this._settings = {};\n      this.condition = {};\n      // const batchName; // we need to revert to this default when switching away from a in/by query field\n\n      this._QueryFields = [];\n      this._Fields;\n\n      // internal business logic\n      const _logic = (this._logic = {\n         callbacks: {\n            onChange: () => {},\n         },\n\n         removeHtmlTags: function (text) {\n            let result = \"\";\n            try {\n               let div = document.createElement(\"div\");\n               div.innerHTML = text;\n\n               result = div.textContent || div.innerText || \"\";\n            } catch (err) {\n               result = (text || \"\").replace(/(<([^>]+)>)/gi, \"\");\n            }\n\n            return result;\n         },\n      });\n\n      // Interface methods for parent component:\n      // this.objectLoad = _logic.objectLoad;\n      // this.viewLoad = _logic.viewLoad;\n      // this.setValue = _logic.setValue;\n      // this.isValid = _logic.isValid;\n   }\n\n   init(options = {}) {\n      this._settings = options;\n   }\n\n   /**\n    * @method isValid\n    * validate the row data is valid filter condition\n    *\n    * @param rowData {Object} - data row\n    * @param condition {Object} - [Optional] {\n    *                                           glue: \"and\" | \"or\",\n    *                                           rules: []\n    *                                        }\n    */\n   isValid(rowData, condition = this.condition) {\n      // If conditions but no data return false\n      if (condition?.rules?.length && rowData == null) return false;\n\n      // If no conditions, then return true\n      if (!condition?.rules?.length || rowData == null) return true;\n\n      let result = condition.glue === \"and\" ? true : false;\n\n      condition.rules.forEach((filter) => {\n         // Nested filters\n         if (filter?.rules?.length) {\n            if (condition.glue === \"or\")\n               result = result || this.isValid(rowData, filter);\n            else result = result && this.isValid(rowData, filter);\n            return;\n         }\n         // Skip incomplete filter condition\n         else if (!filter.key || !filter.rule) return;\n\n         const fieldInfo = (this._Fields || []).filter(\n            (f) => f.id == filter.key || f.columnName == filter.key\n         )[0];\n\n         if (!fieldInfo) return;\n\n         let condResult = null;\n\n         // Filters that have \"this_object\" don't have a fieldInfo.key, so in that case,\n         // define a special .key == \"this_object\"\n         let ruleFieldType = fieldInfo.key;\n\n         if (typeof fieldInfo.key == \"undefined\") {\n            if (fieldInfo.id != \"this_object\") {\n               fieldInfo.key = \"connectField\"; // if you are looking at the parent object it won't have a key to analyze\n               ruleFieldType = fieldInfo.key;\n            } else ruleFieldType = \"this_object\";\n         }\n\n         let value = null;\n\n         if (fieldInfo.relationName) {\n            value = getConnectFieldValue(rowData, fieldInfo);\n         } else {\n            value = getFieldVal(rowData, fieldInfo);\n         }\n\n         switch (ruleFieldType) {\n            case \"string\":\n            case \"LongText\":\n            case \"email\":\n               if (value == null) value = \"\";\n\n               condResult = this.textValid(value, filter.rule, filter.value);\n               break;\n            case \"date\":\n            case \"datetime\":\n               condResult = this.dateValid(value, filter.rule, filter.value);\n               break;\n            case \"number\":\n            case \"calculate\":\n            case \"formula\":\n               condResult = this.numberValid(value, filter.rule, filter.value);\n               break;\n            case \"list\":\n               condResult = this.listValid(value, filter.rule, filter.value);\n               break;\n            case \"boolean\":\n               condResult = this.booleanValid(value, filter.rule, filter.value);\n               break;\n            case \"user\":\n               condResult = this.userValid(value, filter.rule, filter.value);\n               break;\n            case \"connectField\":\n            case \"connectObject\":\n               condResult = this.connectFieldValid(\n                  rowData,\n                  fieldInfo,\n                  filter.rule,\n                  filter.value\n               );\n               break;\n            case \"this_object\":\n               condResult = this.thisObjectValid(\n                  rowData,\n                  filter.rule,\n                  filter.value\n               );\n               break;\n         }\n\n         if (condition.glue === \"and\") {\n            result = result && condResult;\n         } else {\n            result = result || condResult;\n         }\n      });\n\n      return result;\n   }\n\n   textValid(value, rule, compareValue) {\n      let result = false;\n\n      value = value.trim().toLowerCase();\n      value = this._logic.removeHtmlTags(value); // remove html tags - rich text editor\n\n      compareValue = compareValue.trim().toLowerCase().replace(/  +/g, \" \");\n\n      // support \"john smith\" => \"john\" OR/AND \"smith\"\n      const compareArray = compareValue.split(\" \");\n\n      switch (rule) {\n         case \"contains\":\n            compareArray.forEach((val) => {\n               if (result == false)\n                  // OR\n                  result = value.indexOf(val) > -1;\n            });\n            break;\n         case \"not_contains\":\n            result = true;\n            compareArray.forEach((val) => {\n               if (result == true)\n                  // AND\n                  result = value.indexOf(val) < 0;\n            });\n            break;\n         case \"equals\":\n            compareArray.forEach((val) => {\n               if (result == false)\n                  // OR\n                  result = value == val;\n            });\n            break;\n         case \"not_equal\":\n            result = true;\n            compareArray.forEach((val) => {\n               if (result == true)\n                  // AND\n                  result = value != val;\n            });\n            break;\n         case \"is_empty\":\n            result = value == \"\" || value == null;\n            break;\n         case \"is_not_empty\":\n            result = value != \"\" && value != null;\n            break;\n         default:\n            result = this.queryFieldValid(value, rule, compareValue);\n            break;\n      }\n\n      return result;\n   }\n\n   dateValid(value, rule, compareValue) {\n      let result = false;\n\n      if (!(value instanceof Date)) value = new Date(value);\n\n      if (!(compareValue instanceof Date))\n         compareValue = new Date(compareValue);\n\n      switch (rule) {\n         case \"less\":\n            result = value < compareValue;\n            break;\n         case \"greater\":\n            result = value > compareValue;\n            break;\n         case \"less_or_equal\":\n            result = value <= compareValue;\n            break;\n         case \"greater_or_equal\":\n            result = value >= compareValue;\n            break;\n         default:\n            result = this.queryFieldValid(value, rule, compareValue);\n            break;\n      }\n\n      return result;\n   }\n\n   numberValid(value, rule, compareValue) {\n      let result = false;\n\n      value = Number(value);\n      compareValue = Number(compareValue);\n\n      switch (rule) {\n         case \"equal\":\n         case \"equals\":\n            result = value == compareValue;\n            break;\n         case \"not_equal\":\n            result = value != compareValue;\n            break;\n         case \"less\":\n            result = value < compareValue;\n            break;\n         case \"greater\":\n            result = value > compareValue;\n            break;\n         case \"less_or_equal\":\n            result = value <= compareValue;\n            break;\n         case \"greater_or_equal\":\n            result = value >= compareValue;\n            break;\n         default:\n            result = this.queryFieldValid(value, rule, compareValue);\n            break;\n      }\n\n      return result;\n   }\n\n   listValid(value, rule, compareValue) {\n      let result = false;\n\n      // compareValue = compareValue.toLowerCase();\n\n      if (!Array.isArray(compareValue)) compareValue = [compareValue];\n\n      switch (rule) {\n         case \"equals\":\n            if (value) result = compareValue.indexOf(value) > -1;\n            break;\n         case \"not_equal\":\n            if (value) result = compareValue.indexOf(value) < 0;\n            else result = true;\n            break;\n         default:\n            result = this.queryFieldValid(value, rule, compareValue);\n            break;\n      }\n\n      return result;\n   }\n\n   booleanValid(value, rule, compareValue) {\n      let result = false;\n\n      switch (rule) {\n         case \"equals\":\n            result = value == compareValue;\n            break;\n         default:\n            result = this.queryFieldValid(value, rule, compareValue);\n            break;\n      }\n\n      return result;\n   }\n\n   userValid(value, rule, compareValue) {\n      if (!value) return false;\n      let result = false;\n\n      // if (Array.isArray(value)) value = [value];\n\n      switch (rule) {\n         case \"is_current_user\":\n            result = value == this.Account.username;\n            break;\n         case \"is_not_current_user\":\n            result = value != this.Account.username;\n            break;\n         case \"contain_current_user\":\n            if (!Array.isArray(value)) value = [value];\n\n            result =\n               value.filter((v) => (v.username || v) == this.Account.username)\n                  .length > 0;\n            break;\n         case \"not_contain_current_user\":\n            if (!Array.isArray(value)) value = [value];\n\n            result =\n               value.filter((v) => (v.username || v) == this.Account.username)\n                  .length < 1;\n            break;\n         case \"equals\":\n            result = value.indexOf(compareValue) > -1;\n            break;\n         case \"not_equal\":\n            result = value.indexOf(compareValue) < 0;\n            break;\n         default:\n            result = this.queryFieldValid(value, rule, compareValue);\n            break;\n      }\n\n      return result;\n   }\n\n   queryFieldValid(rowData, rule, compareValue) {\n      let result = false;\n\n      if (!compareValue) return result;\n\n      // queryId:fieldId\n      const queryId = compareValue.split(\":\")[0],\n         fieldId = compareValue.split(\":\")[1];\n\n      // if no query\n      const query = this.AB.queries((q) => q.id == queryId)[0];\n      if (!query) return result;\n\n      // if no field\n      const field = query.fields((f) => f.id == fieldId)[0];\n      if (!field) return result;\n\n      let qIdBase = \"{idBase}-query-field-{id}\"\n            .replace(\"{idBase}\", this.idBase)\n            .replace(\"{id}\", query.id),\n         inQueryFieldFilter = new this.constructor(qIdBase, this.AB);\n      inQueryFieldFilter.Account = this.Account;\n      inQueryFieldFilter.fieldsLoad(query.fields());\n      inQueryFieldFilter.setValue(query.workspaceFilterConditions);\n\n      switch (rule) {\n         case \"in_query_field\":\n            result = inQueryFieldFilter.isValid(rowData);\n            break;\n         case \"not_in_query_field\":\n            result = !inQueryFieldFilter.isValid(rowData);\n            break;\n      }\n\n      return result;\n   }\n\n   inQueryValid(rowData, rule, compareValue) {\n      let result = false;\n\n      if (!compareValue || !this.AB) return result;\n\n      // if no query\n      let query = this.AB.queries((q) => q.id == compareValue)[0];\n      if (!query) return result;\n\n      let qIdBase = \"{idBase}-query-{id}\"\n            .replace(\"{idBase}\", this.idBase)\n            .replace(\"{id}\", query.id),\n         inQueryFilter = new this.constructor(qIdBase, this.AB);\n      inQueryFilter.Account = this.Account;\n      inQueryFilter.fieldsLoad(query.fields());\n      inQueryFilter.setValue(query.workspaceFilterConditions);\n\n      switch (rule) {\n         case \"in_query\":\n            result = inQueryFilter.isValid(rowData);\n            break;\n         case \"not_in_query\":\n            result = !inQueryFilter.isValid(rowData);\n            break;\n      }\n\n      return result;\n   }\n\n   dataCollectionValid(value, rule, compareValue) {\n      let result = false;\n\n      if (!compareValue) return result;\n\n      let dc = this.AB.datacollections((d) => d.id == compareValue)[0];\n\n      switch (rule) {\n         case \"in_data_collection\":\n            if (!dc) return false;\n\n            result = dc.getData((d) => d.id == value.id).length > 0;\n            break;\n         case \"not_in_data_collection\":\n            if (!dc) return true;\n\n            result = dc.getData((d) => d.id == value.id).length < 1;\n            break;\n      }\n\n      return result;\n   }\n\n   connectFieldValid(rowData, field, rule, compareValue) {\n      let relationName = field.relationName();\n\n      let connectedVal = \"\";\n\n      if (rowData) {\n         if (rowData[relationName]) {\n            connectedVal = (\n               (field.indexField\n                  ? rowData[relationName][field.indexField.columnName]\n                  : null) ?? // custom index\n               (field.indexField2\n                  ? rowData[relationName][field.indexField2.columnName]\n                  : null) ?? // custom index 2\n               rowData[relationName].id ??\n               rowData[relationName]\n            )\n               .toString()\n               .toLowerCase();\n         } else {\n            let fieldVal = getFieldVal(rowData, field);\n            if (fieldVal != null) {\n               connectedVal = fieldVal;\n            }\n         }\n      }\n\n      // If value will be the connected object, then pull value (string)\n      if (typeof connectedVal == \"object\") {\n         connectedVal =\n            connectedVal[field.indexField.columnName] ??\n            connectedVal[field.indexField2.columnName] ??\n            connectedVal[field.columnName] ??\n            connectedVal;\n      }\n\n      let compareValueLowercase = (compareValue || \"\").toLowerCase();\n\n      switch (rule) {\n         case \"contains\":\n            return connectedVal.toString().indexOf(compareValueLowercase) > -1;\n         case \"not_contains\":\n            return connectedVal.toString().indexOf(compareValueLowercase) == -1;\n         case \"equals\":\n            return connectedVal == compareValueLowercase;\n         case \"not_equal\":\n            return connectedVal != compareValueLowercase;\n         case \"in_query\":\n         case \"not_in_query\":\n            return this.inQueryValid(rowData[relationName], rule, compareValue);\n         case \"is_current_user\":\n         case \"is_not_current_user\":\n         case \"contain_current_user\":\n         case \"not_contain_current_user\":\n            return this.userValid(connectedVal, rule, compareValue);\n         case \"is_empty\":\n            return (\n               rowData[relationName] == null ||\n               rowData[relationName].length < 1 ||\n               rowData[relationName] == \"\"\n            );\n         case \"is_not_empty\":\n            return (\n               rowData[relationName] != null &&\n               ((Array.isArray(rowData[relationName]) &&\n                  rowData[relationName].length > 0) ||\n                  rowData[relationName] != \"\")\n            );\n         case \"in_data_collection\":\n         case \"not_in_data_collection\":\n            return this.dataCollectionValid(connectedVal, rule, compareValue);\n      }\n   }\n\n   thisObjectValid(rowData, rule, compareValue) {\n      let result = false;\n      let query = null;\n      let listThisObjects = null;\n      let alias = null;\n      let newRowData = null;\n\n      switch (rule) {\n         // if in_query condition\n         case \"in_query\":\n         case \"not_in_query\":\n            if (!this._Object) return result;\n\n            // if > 1 copy of this object in query ==> Error!\n            query = this.AB.queries((q) => q.id == compareValue)[0];\n\n            if (!query) return result;\n\n            listThisObjects = query.objects((o) => {\n               return o.id == this._Object.id;\n            });\n\n            if (listThisObjects.length > 1) {\n               // Alternative: choose the 1st instance of this object in the query, and make the compare on that.\n               // Be sure to warn the developer of the limitiations of an \"this_object\" \"in_query\"  when query has > 1 copy of\n               // this object as part of the query.\n\n               console.error(\n                  \"HEY!  Can't compare this_object to a query that has > 1 copy of that object!\"\n               );\n\n               return true;\n            }\n\n            // get this object's alias from the query\n            alias = query.objectAlias(this._Object.id);\n\n            // make sure all my columns in rowData are prefixed by \"alias\".columnName\n            newRowData = {};\n\n            Object.keys(rowData).forEach((key) => {\n               newRowData[`${alias}.${key}`] = rowData[key];\n            });\n\n            // then pass this on to the _logic.queryValid();\n            return this.inQueryValid(newRowData, rule, compareValue);\n\n         // if in_datacollection condition\n         case \"in_data_collection\":\n         case \"not_in_data_collection\":\n            // send rowData, null to datacollectionValid()\n            return this.dataCollectionValid(rowData, rule, compareValue);\n      }\n   }\n\n   processFieldsLoad(processFields = []) {\n      if (processFields && !Array.isArray(processFields)) {\n         processFields = [processFields];\n      }\n      this._ProcessFields = processFields;\n\n      this.uiInit();\n   }\n\n   /**\n    * @method fieldsLoad\n    * set fields\n    *\n    * @param array {ABField}\n    * @param object {ABObject} [optional]\n    */\n   fieldsLoad(fields = [], object = null) {\n      this._Fields = fields.filter(\n         (f) => f && f.fieldIsFilterable && f.fieldIsFilterable()\n      );\n      this._QueryFields = this._Fields\n         ? this._Fields.filter((f) => f && f.isConnection && f.key != \"user\")\n         : [];\n\n      // insert our 'this object' entry if an Object was given.\n      if (object) {\n         this._Object = object;\n\n         // insert our uuid in addition to the rest of our fields\n         let thisObjOption = {\n            id: \"this_object\",\n            label: object.label,\n            key: \"uuid\",\n         };\n\n         // If object is query ,then should define default alias: \"BASE_OBJECT\"\n         // NOTE: Could not reference ABObjectQuery because recursive looping reference\n         // if (object instanceof ABObjectQuery) {\n         if (object.viewName) {\n            thisObjOption.alias = \"BASE_OBJECT\";\n         }\n\n         this._Fields.unshift(thisObjOption);\n      } else {\n         delete this._Object;\n      }\n   }\n\n   fieldsToQB() {\n      /*\n      let mapTypes = {\n         LongText: \"string\",\n         email: \"string\",\n         datetime: \"date\",\n         connectField: \"connectObject\"\n      };\n\n      const fields = this._Fields.map((f) => {\n         // Label\n         let label = f.label;\n         if (this._settings.showObjectName && f.object && f.object.label)\n            label = `${f.object.label}.${f.label}`;\n\n         // Type\n         let type = f.key || f.type;\n         if (mapTypes[type]) type = mapTypes[type];\n\n         // the format for webix querybuilder:\n         // { id  value:\"label\" type }\n         //      type: {string} the type of value it is.\n         //            since we want to tailor value selectors per field,\n         //            we will make a unique type for each field. and then\n         //            add value selectors for that specific .type\n         return { id: f.columnName, value: label, type: type };\n      });\n      return fields;\n      */\n\n      let fields = (this._Fields || []).map((f) => {\n         let label = f.label;\n         if (this._settings.showObjectName && f.object && f.object.label)\n            label = `${f.object.label}.${f.label}`;\n\n         let type = \"text\"; // \"text\", \"number\", \"date\"\n         let conditions = [];\n         let processFieldKeys = [];\n         let hasQueryField = true;\n\n         if (!this._settings.isProcessParticipant)\n            switch (f.key) {\n               case \"boolean\":\n                  conditions = conditions.concat(\n                     this.fieldsAddFiltersBoolean(f)\n                  );\n                  processFieldKeys = [\"boolean\"];\n\n                  break;\n\n               case \"connectObject\":\n                  conditions = this.fieldsAddFiltersConnectObject(f);\n\n                  // Add filter options to Custom index\n                  if (\n                     f.settings.isCustomFK &&\n                     // 1:M\n                     ((f.settings.linkType == \"one\" &&\n                        f.settings.linkViaType == \"many\") ||\n                        // 1:1 isSource = true\n                        (f.settings.linkType == \"one\" &&\n                           f.settings.linkViaType == \"one\" &&\n                           f.settings.isSource))\n                  ) {\n                     const stringResults = this.fieldsAddFiltersString(f);\n\n                     conditions = stringResults.concat(conditions);\n                  }\n\n                  hasQueryField = false;\n                  processFieldKeys = [\"connectObject\"];\n\n                  break;\n\n               case \"date\":\n               case \"datetime\":\n                  type = \"date\";\n                  conditions = conditions.concat(this.fieldsAddFiltersDate(f));\n                  processFieldKeys = [\"date\", \"datetime\"];\n\n                  break;\n\n               case \"calculate\":\n               case \"formula\":\n               case \"number\":\n                  type = \"number\";\n                  conditions = conditions.concat(\n                     this.fieldsAddFiltersNumber(f)\n                  );\n                  processFieldKeys = [\"calculate\", \"formula\", \"number\"];\n\n                  break;\n\n               case \"string\":\n               case \"LongText\":\n               case \"email\":\n               case \"AutoIndex\":\n                  conditions = conditions.concat(\n                     this.fieldsAddFiltersString(f)\n                  );\n                  processFieldKeys = [\n                     \"string\",\n                     \"LongText\",\n                     \"email\",\n                     \"AutoIndex\",\n                  ];\n\n                  break;\n\n               case \"list\":\n                  conditions = conditions.concat(this.fieldsAddFiltersList(f));\n\n                  break;\n\n               case \"user\":\n                  conditions = conditions.concat(this.fieldsAddFiltersUser(f));\n                  processFieldKeys = [\"user\"];\n\n                  break;\n\n               case \"uuid\":\n                  conditions = conditions.concat(\n                     this.fieldsAddFiltersThisObject(f)\n                  );\n                  hasQueryField = false;\n\n                  break;\n               default:\n                  break;\n            }\n         else\n            switch (f.key) {\n               case \"connectObject\":\n               case \"uuid\":\n                  hasQueryField = false;\n\n                  break;\n            }\n\n         conditions = conditions.concat(\n            this.fieldsAddFiltersQuery(f, hasQueryField)\n         );\n\n         if (this._settings.isRecordRule) {\n            conditions = conditions.concat(this.fieldsAddFiltersRecordRule(f));\n         }\n\n         let isProcessField =\n            (this._ProcessFields || []).filter((processField) => {\n               if (!processField) return false;\n\n               if (processField.field) {\n                  return processFieldKeys.includes(processField.field.key);\n               } else if (processField.key) {\n                  // uuid\n                  let processFieldId = processField.key.split(\".\").pop();\n                  return processFieldId == f.id || processFieldId == f.key;\n               }\n            }).length > 0;\n\n         if (isProcessField) {\n            conditions = conditions.concat(this.fieldsAddFiltersContext(f));\n         }\n\n         conditions = conditions.concat(this.fieldsAddFiltersCustom(f));\n\n         // let type = f.id; // the default unique identifier for our filter types\n         // if (f.id == \"this_object\") {\n         //    // if this happens to be our special \"this_object\" field, then our\n         //    // type needs to be the \"uuid\" type in the definition:\n         //    type = f.type;\n         // }\n\n         // the format for webix querybuilder:\n         // { id  value:\"label\" type }\n         //      type: {string} the type of value it is.\n         //            since we want to tailor value selectors per field,\n         //            we will make a unique type for each field. and then\n         //            add value selectors for that specific .type\n         return {\n            id: f.id,\n            value: label,\n            type: type,\n            conditions: conditions,\n            // format: () => {},\n         };\n      });\n\n      // !!! Process Fields of ABProcess\n      // https://github.com/digi-serve/appbuilder_class_core/blob/master/FilterComplexCore.js#L636\n      // https://github.com/digi-serve/appbuilder_class_core/blob/master/FilterComplexCore.js#L564\n      // (this._ProcessFields || [])\n      //    // if there is no .field, it is probably an embedded special field\n      //    .filter((pField) => pField.field == null)\n      //    .forEach((pField) => {\n      //       // like: .uuid\n      //       let key = pField.key.split(\".\").pop();\n      //       if (key == \"uuid\" && this._Object) {\n      //          fields.unshift({\n      //             id: pField.key,\n      //             value: this._Object.label,\n      //             type: \"text\",\n      //             conditions: this.fieldsAddFiltersContext(),\n      //          });\n      //       }\n      //    });\n\n      return fields;\n   }\n\n   fieldsAddFiltersDate(field) {\n      let dateConditions = {\n         less: this.labels.component.beforeCondition,\n         greater: this.labels.component.afterCondition,\n         less_or_equal: this.labels.component.onOrBeforeCondition,\n         greater_or_equal: this.labels.component.onOrAfterCondition,\n         less_current: this.labels.component.beforeCurrentCondition,\n         greater_current: this.labels.component.afterCurrentCondition,\n         less_or_equal_current:\n            this.labels.component.onOrBeforeCurrentCondition,\n         greater_or_equal_current:\n            this.labels.component.onOrAfterCurrentCondition,\n         last_days: this.labels.component.onLastDaysCondition,\n         next_days: this.labels.component.onNextDaysCondition,\n      };\n\n      let result = [];\n\n      for (let condKey in dateConditions) {\n         result.push({\n            id: condKey,\n            value: dateConditions[condKey],\n            batch: \"datepicker\",\n            handler: (a, b) => this.dateValid(a, condKey, b),\n         });\n      }\n\n      return result;\n   }\n\n   fieldsAddFiltersString(field) {\n      let stringConditions = {\n         contains: {\n            batch: \"text\",\n            label: this.labels.component.containsCondition,\n         },\n         not_contains: {\n            batch: \"text\",\n            label: this.labels.component.notContainsCondition,\n         },\n         equals: {\n            batch: \"text\",\n            label: this.labels.component.isCondition,\n         },\n         not_equal: {\n            batch: \"text\",\n            label: this.labels.component.isNotCondition,\n         },\n         is_empty: {\n            batch: \"none\",\n            label: this.labels.component.isEmpty,\n         },\n         is_not_empty: {\n            batch: \"none\",\n            label: this.labels.component.isNotEmpty,\n         },\n      };\n\n      let result = [];\n\n      for (let condKey in stringConditions) {\n         result.push({\n            id: condKey,\n            value: stringConditions[condKey].label,\n            batch: stringConditions[condKey].batch,\n            handler: (a, b) => this.textValid(a, condKey, b),\n         });\n      }\n\n      return result;\n   }\n\n   fieldsAddFiltersNumber(field) {\n      let numberConditions = {\n         equals: this.labels.component.equalCondition,\n         not_equal: this.labels.component.notEqualCondition,\n         less: this.labels.component.lessThanCondition,\n         greater: this.labels.component.moreThanCondition,\n         less_or_equal: this.labels.component.lessThanOrEqualCondition,\n         greater_or_equal: this.labels.component.moreThanOrEqualCondition,\n      };\n\n      let result = [];\n\n      for (let condKey in numberConditions) {\n         result.push({\n            id: condKey,\n            value: numberConditions[condKey],\n            batch: \"text\",\n            handler: (a, b) => this.numberValid(a, condKey, b),\n         });\n      }\n\n      return result;\n   }\n\n   fieldsAddFiltersList(field) {\n      let listConditions = {\n         equals: this.labels.component.equalListCondition,\n         not_equal: this.labels.component.notEqualListCondition,\n      };\n\n      let result = [];\n\n      for (let condKey in listConditions) {\n         result.push({\n            id: condKey,\n            value: listConditions[condKey],\n            batch: \"list\",\n            handler: (a, b) => this.listValid(a, condKey, b),\n         });\n      }\n\n      return result;\n   }\n\n   fieldsAddFiltersBoolean(field) {\n      let booleanConditions = {\n         equals: this.labels.component.equalListCondition,\n      };\n\n      let result = [];\n\n      for (let condKey in booleanConditions) {\n         result.push({\n            id: condKey,\n            value: booleanConditions[condKey],\n            batch: \"boolean\",\n            handler: (a, b) => this.booleanValid(a, condKey, b),\n         });\n      }\n\n      return result;\n   }\n\n   fieldsAddFiltersUser(field) {\n      let userConditions = {\n         is_current_user: {\n            batch: \"none\",\n            label: this.labels.component.isCurrentUserCondition,\n         },\n         is_not_current_user: {\n            batch: \"none\",\n            label: this.labels.component.isNotCurrentUserCondition,\n         },\n         contain_current_user: {\n            batch: \"none\",\n            label: this.labels.component.containsCurrentUserCondition,\n         },\n         not_contain_current_user: {\n            batch: \"none\",\n            label: this.labels.component.notContainsCurrentUserCondition,\n         },\n         equals: {\n            batch: \"user\",\n            label: this.labels.component.equalListCondition,\n         },\n         not_equal: {\n            batch: \"user\",\n            label: this.labels.component.notEqualListCondition,\n         },\n      };\n\n      let result = [];\n\n      for (let condKey in userConditions) {\n         result.push({\n            id: condKey,\n            value: userConditions[condKey].label,\n            batch: userConditions[condKey].batch,\n            handler: (a, b) => this.userValid(a, condKey, b),\n         });\n      }\n\n      return result;\n   }\n\n   fieldsAddFiltersConnectObject(field) {\n      const connectConditions = {\n         same_as_user: {\n            batch: \"user\",\n            label: this.labels.component.sameAsUser,\n            handler: (a, b) => this.userValid(a, \"same_as_user\", b),\n         },\n         not_same_as_user: {\n            batch: \"user\",\n            label: this.labels.component.notSameAsUser,\n            handler: (a, b) => this.userValid(a, \"not_same_as_user\", b),\n         },\n         in_data_collection: {\n            batch: \"datacollection\",\n            label: this.labels.component.inDataCollection,\n            handler: (a, b) =>\n               this.dataCollectionValid(a, \"in_data_collection\", b),\n         },\n         not_in_data_collection: {\n            batch: \"datacollection\",\n            label: this.labels.component.notInDataCollection,\n            handler: (a, b) =>\n               this.dataCollectionValid(a, \"not_in_data_collection\", b),\n         },\n         // TODO\n         // contains: this.labels.component.containsCondition,\n         // not_contains: this.labels.component.notContainCondition,\n         // equals: this.labels.component.isCondition,\n         // not_equal: this.labels.component.isNotCondition\n      };\n\n      const result = [];\n\n      for (let condKey in connectConditions) {\n         result.push({\n            id: condKey,\n            value: connectConditions[condKey].label,\n            batch: connectConditions[condKey].batch,\n            handler: connectConditions[condKey].handler,\n         });\n      }\n\n      return result;\n   }\n\n   fieldsAddFiltersQuery(field, hasQueryField = false) {\n      const queryConditions = hasQueryField\n         ? {\n              in_query_field: {\n                 label: this.labels.component.inQueryField,\n                 batch: \"queryField\",\n              },\n              not_in_query_field: {\n                 label: this.labels.component.notInQueryField,\n                 batch: \"queryField\",\n              },\n           }\n         : {\n              in_query: {\n                 label: this.labels.component.inQuery,\n                 batch: \"query\",\n              },\n              not_in_query: {\n                 label: this.labels.component.notInQuery,\n                 batch: \"query\",\n              },\n           };\n\n      const result = [];\n\n      for (const condKey in queryConditions) {\n         result.push({\n            id: condKey,\n            value: queryConditions[condKey].label,\n            batch: queryConditions[condKey].batch,\n            handler: (a, b) => this.queryFieldValid(a, condKey, b),\n         });\n      }\n\n      return result;\n   }\n\n   fieldsAddFiltersThisObject(field) {\n      let thisObjectConditions = {\n         in_data_collection: {\n            batch: \"datacollection\",\n            label: this.labels.component.inDataCollection,\n         },\n         not_in_data_collection: {\n            batch: \"datacollection\",\n            label: this.labels.component.notInDataCollection,\n         },\n      };\n\n      let result = [];\n\n      for (let condKey in thisObjectConditions) {\n         result.push({\n            id: condKey,\n            value: thisObjectConditions[condKey].label,\n            batch: thisObjectConditions[condKey].batch,\n            handler: (a, b) => this.thisObjectValid(a, condKey, b),\n         });\n      }\n\n      return result;\n   }\n\n   fieldsAddFiltersRecordRule(field) {\n      let recordRuleConditions = {\n         same_as_field: this.labels.component.sameAsField,\n         not_same_as_field: this.labels.component.notSameAsField,\n      };\n\n      let result = [];\n\n      for (let condKey in recordRuleConditions) {\n         result.push({\n            id: condKey,\n            value: recordRuleConditions[condKey],\n            batch: \"recordRule\",\n            handler: (a, b) => true, // TODO: record rule validation\n         });\n      }\n\n      return result;\n   }\n\n   fieldsAddFiltersContext(field) {\n      let contextConditions = {\n         context_equals: {\n            batch: \"context\",\n            label: this.labels.component.equalsProcessValue,\n            handler: (a, b) => a == b,\n         },\n         context_not_equal: {\n            batch: \"context\",\n            label: this.labels.component.notEqualsProcessValueCondition,\n            handler: (a, b) => a != b,\n         },\n         context_in: {\n            batch: \"context\",\n            label: this.labels.component.inProcessValueCondition,\n            handler: (a, b) => a.indexOf(b) > -1,\n         },\n         context_not_in: {\n            batch: \"context\",\n            label: this.labels.component.notInProcessValueCondition,\n            handler: (a, b) => a.indexOf(b) == -1,\n         },\n      };\n\n      let result = [];\n\n      for (let condKey in contextConditions) {\n         result.push({\n            id: condKey,\n            value: contextConditions[condKey].label,\n            batch: contextConditions[condKey].batch,\n            handler: contextConditions[condKey].handler,\n         });\n      }\n\n      return result;\n   }\n\n   fieldsAddFiltersCustom(field) {\n      const customOptions = this._customOptions ?? {};\n      const options = customOptions[field.id || field] ?? {};\n      return options.conditions ?? [];\n   }\n\n   queriesLoad(queries = []) {\n      this._Queries = queries;\n   }\n\n   /**\n    * @method queries()\n    *\n    * return an array of all the ABObjectQuery.\n    *\n    * @param filter {Object}\n    *\n    * @return {array}\n    */\n   queries(filter = () => true) {\n      const queryList = this._Queries ?? this.AB?.queries?.() ?? [];\n\n      return queryList.filter((q) => filter(q));\n   }\n\n   setValue(settings) {\n      this.condition = settings || {};\n\n      this.condition.rules = this.condition.rules || [];\n   }\n\n   /**\n    * @method getValue\n    * return the current condition of the filter.\n    * @return {JSON} -\n    * {\n    * \tglue: '', // 'and', 'or'\n    *\t\trules: [\n    *\t\t\t{\n    *\t\t\t\tkey:\t'uuid',\n    *\t\t\t\trule:\t'rule',\n    *\t\t\t\tvalue:\t'value'\n    *\t\t\t}\n    *\t\t]\n    * }\n    */\n   getValue() {\n      // When asked for a value before a condition is set, default the\n      // unset glue to \"and\";\n      if (typeof this.condition.glue == \"undefined\") {\n         this.condition.glue = \"and\";\n      }\n      return this.condition;\n   }\n\n   isComplete() {\n      let result = true;\n\n      const noValueRules = [\n         \"is_current_user\",\n         \"is_not_current_user\",\n         \"contain_current_user\",\n         \"not_contain_current_user\",\n         \"same_as_user\",\n         \"not_same_as_user\",\n      ];\n\n      const isCompleteRules = (rules = []) => {\n         if (result == false) return;\n\n         rules.forEach((r) => {\n            if (r?.rules && Array.isArray(r?.rules)) {\n               isCompleteRules(r?.rules);\n            } else {\n               result =\n                  result &&\n                  r?.key != null &&\n                  r?.key != \"\" &&\n                  r?.rule != null &&\n                  r?.rule != \"\" &&\n                  ((r?.value != null && r?.value != \"\") ||\n                     noValueRules.indexOf(r?.rule) > -1);\n            }\n         });\n      };\n\n      isCompleteRules(this.condition?.rules);\n\n      return result;\n   }\n}\n","import ABComponent from \"../platform/ABComponent\";\n\n/**\n *  support get data from objects and queries\n */\nfunction getFieldVal(rowData, field, returnSingular = true) {\n   if (!field) return null;\n   if (!field.columnName) return null;\n   // if rowData is an array, then pull the first element to get value\n   if (rowData && rowData[0]) rowData = rowData[0];\n\n   let columnId = field.id;\n   let columnName = field.columnName;\n\n   let value = null;\n   if (columnName.indexOf(\".\") > -1) {\n      let colName = columnName.split(\".\")[1];\n      value = rowData[columnName] || rowData[colName] || rowData[columnId];\n   } else {\n      value = rowData[columnName] || rowData[columnId];\n   }\n\n   if (value) {\n      return value;\n   }\n\n   // otherwise, this might be a process check where the rowData keys have\n   // '[diagramID].[field.id]'\n   for (var k in rowData) {\n      var key = k.split(\".\")[1];\n      if (key && (key == columnId || key == columnName)) {\n         value = rowData[k];\n      }\n   }\n\n   // if value is an array, filter empty item\n   if (value && Array.isArray(value)) {\n      value = value.filter((v) => v != null);\n      if (returnSingular) value = value[0];\n   }\n\n   return value;\n}\n\nexport default class RowFilterCore extends ABComponent {\n   constructor(App, idBase, AB) {\n      idBase = idBase || \"ab_row_filter\";\n\n      super(App, idBase, AB);\n\n      this.Account = { username: \"??\" };\n      this._settings = {};\n      this.config_settings = {};\n      // var batchName; // we need to revert to this default when switching away from a in/by query field\n\n      this._QueryFields = [];\n      this._Fields;\n\n      // internal business logic\n      var _logic = (this._logic = {\n         callbacks: {\n            onChange: () => {},\n         },\n\n         /**\n          * @method getValue\n          *\n          * @return {JSON} -\n          * {\n          * \t\tglue: '', // 'and', 'or'\n          *\t\trules: [\n          *\t\t\t{\n          *\t\t\t\tkey:\t'column name',\n          *\t\t\t\trule:\t'rule',\n          *\t\t\t\tvalue:\t'value'\n          *\t\t\t}\n          *\t\t]\n          * }\n          */\n         getValue: () => {\n            return this.config_settings;\n         },\n\n         removeHtmlTags: function (text) {\n            let result = \"\";\n            try {\n               let div = document.createElement(\"div\");\n               div.innerHTML = text;\n\n               result = div.textContent || div.innerText || \"\";\n            } catch (err) {\n               result = (text || \"\").replace(/(<([^>]+)>)/gi, \"\");\n            }\n\n            return result;\n         },\n\n         textValid: function (rowData, field, rule, compareValue) {\n            var result = false;\n\n            var value = getFieldVal(rowData, field);\n            if (value == null) value = \"\";\n\n            value = value.toString().trim().toLowerCase();\n            value = _logic.removeHtmlTags(value); // remove html tags - rich text editor\n\n            compareValue = compareValue\n               .toString()\n               .trim()\n               .toLowerCase()\n               .replace(/  +/g, \" \");\n\n            // support \"john smith\" => \"john\" OR/AND \"smith\"\n            var compareArray = compareValue.split(\" \");\n\n            switch (rule) {\n               case \"contains\":\n                  compareArray.forEach((val) => {\n                     if (result == false)\n                        // OR\n                        result = value.indexOf(val) > -1;\n                  });\n                  break;\n               case \"not_contains\":\n                  result = true;\n                  compareArray.forEach((val) => {\n                     if (result == true)\n                        // AND\n                        result = value.indexOf(val) < 0;\n                  });\n                  break;\n               case \"equals\":\n                  compareArray.forEach((val) => {\n                     if (result == false)\n                        // OR\n                        result = value == val;\n                  });\n                  break;\n               case \"not_equal\":\n                  result = true;\n                  compareArray.forEach((val) => {\n                     if (result == true)\n                        // AND\n                        result = value != val;\n                  });\n                  break;\n               case \"is_empty\":\n                  result = value == null || value == \"\";\n                  break;\n               case \"is_not_empty\":\n                  result = value != null && value != \"\";\n                  break;\n               default:\n                  result = _logic.queryValid(rowData, rule, compareValue);\n                  break;\n            }\n\n            return result;\n         },\n\n         dateValid: function (rowData, field, rule, compareValue) {\n            var result = false;\n\n            var value = getFieldVal(rowData, field);\n            if (!(value instanceof Date)) value = new Date(value);\n\n            if (!(compareValue instanceof Date))\n               compareValue = new Date(compareValue);\n\n            switch (rule) {\n               case \"equals\":\n                  result = value == compareValue;\n                  break;\n               case \"not_equal\":\n                  result = value != compareValue;\n                  break;\n               case \"less\":\n                  result = value < compareValue;\n                  break;\n               case \"greater\":\n                  result = value > compareValue;\n                  break;\n               case \"less_or_equal\":\n                  result = value <= compareValue;\n                  break;\n               case \"greater_or_equal\":\n                  result = value >= compareValue;\n                  break;\n               default:\n                  result = _logic.queryValid(rowData, rule, compareValue);\n                  break;\n            }\n\n            return result;\n         },\n\n         numberValid: function (rowData, field, rule, compareValue) {\n            var result = false;\n\n            var value = getFieldVal(rowData, field);\n            value = Number(value);\n            compareValue = Number(compareValue);\n\n            switch (rule) {\n               case \"equals\":\n                  result = value == compareValue;\n                  break;\n               case \"not_equal\":\n                  result = value != compareValue;\n                  break;\n               case \"less\":\n                  result = value < compareValue;\n                  break;\n               case \"greater\":\n                  result = value > compareValue;\n                  break;\n               case \"less_or_equal\":\n                  result = value <= compareValue;\n                  break;\n               case \"greater_or_equal\":\n                  result = value >= compareValue;\n                  break;\n               default:\n                  result = _logic.queryValid(rowData, rule, compareValue);\n                  break;\n            }\n\n            return result;\n         },\n\n         listValid: function (rowData, field, rule, compareValue) {\n            var result = false;\n\n            var value = getFieldVal(rowData, field);\n            if (value && value.toLowerCase) value = value.toLowerCase();\n\n            compareValue = compareValue.toLowerCase();\n\n            if (!Array.isArray(compareValue)) compareValue = [compareValue];\n\n            switch (rule) {\n               case \"equals\":\n                  if (value) result = compareValue.indexOf(value) > -1;\n                  break;\n               case \"not_equal\":\n                  if (value) result = compareValue.indexOf(value) < 0;\n                  else result = true;\n                  break;\n               default:\n                  result = _logic.queryValid(rowData, rule, compareValue);\n                  break;\n            }\n\n            return result;\n         },\n\n         booleanValid: function (rowData, field, rule, compareValue) {\n            var result = false;\n\n            var value = getFieldVal(rowData, field);\n\n            // default value should be false\n            if (value == null) value = false;\n\n            switch (rule) {\n               case \"equals\":\n                  result = value == compareValue;\n                  break;\n               case \"not_equal\":\n                  result = value != compareValue;\n                  break;\n               default:\n                  result = _logic.queryValid(rowData, rule, compareValue);\n                  break;\n            }\n\n            return result;\n         },\n\n         userValid: (rowData, field, rule, compareValue) => {\n            var result = false;\n\n            var value = getFieldVal(rowData, field);\n\n            // if (Array.isArray(value)) value = [value];\n\n            switch (rule) {\n               case \"is_current_user\":\n                  result = value == this.Account.username;\n                  break;\n               case \"is_not_current_user\":\n                  result = value != this.Account.username;\n                  break;\n               case \"contain_current_user\":\n                  if (!value) {\n                     result = false;\n                     break;\n                  }\n                  if (!Array.isArray(value)) value = [value];\n\n                  result =\n                     (value || []).filter((v) => {\n                        if (v) {\n                           return (\n                              (v.username || v.id || v.text || v) ==\n                              this.Account.username\n                           );\n                        } else {\n                           return false;\n                        }\n                     }).length > 0;\n                  break;\n               case \"not_contain_current_user\":\n                  if (!value) {\n                     result = false;\n                     break;\n                  }\n                  if (!Array.isArray(value)) value = [value];\n\n                  result =\n                     (value || []).filter((v) => {\n                        if (v) {\n                           return (\n                              (v.username || v.id || v.text || v) ==\n                              this.Account.username\n                           );\n                        } else {\n                           return false;\n                        }\n                     }).length == 0;\n                  break;\n               case \"equals\":\n                  result = value.indexOf(compareValue) > -1;\n                  break;\n               case \"not_equal\":\n                  result = value.indexOf(compareValue) < 0;\n                  break;\n               default:\n                  result = _logic.queryValid(rowData, rule, compareValue);\n                  break;\n            }\n\n            return result;\n         },\n\n         queryValid: (rowData, rule, compareValue) => {\n            var result = false;\n\n            if (!this.AB || !compareValue) return result;\n\n            // queryId:fieldId\n            var queryId = compareValue.split(\":\")[0],\n               fieldId = compareValue.split(\":\")[1];\n\n            // if no query\n            var query = this.queries((q) => q.id == queryId)[0];\n            if (!query) return result;\n\n            // if no field\n            var field = query.fields((f) => f.id == fieldId)[0];\n            if (!field) return result;\n\n            let qIdBase = \"{idBase}-query-field-{id}\"\n                  .replace(\"{idBase}\", idBase)\n                  .replace(\"{id}\", query.id),\n               inQueryFieldFilter = new this.constructor(this.App, qIdBase);\n            inQueryFieldFilter.Account = this.Account;\n            // inQueryFieldFilter.applicationLoad(this._Application);\n            inQueryFieldFilter.fieldsLoad(query.fields());\n            inQueryFieldFilter.setValue(query.workspaceFilterConditions);\n\n            switch (rule) {\n               case \"in_query_field\":\n                  result = inQueryFieldFilter.isValid(rowData);\n                  break;\n               case \"not_in_query_field\":\n                  result = !inQueryFieldFilter.isValid(rowData);\n                  break;\n            }\n\n            return result;\n         },\n\n         inQueryValid: (rowData, columnName, rule, compareValue) => {\n            let result = false;\n\n            if (columnName) {\n               rowData = rowData[columnName] || {};\n            }\n\n            if (!compareValue || !this.AB) return result;\n\n            // if no query\n            let query = this.queries((q) => q.id == compareValue)[0];\n            if (!query) return result;\n\n            let qIdBase = \"{idBase}-query-{id}\"\n                  .replace(\"{idBase}\", idBase)\n                  .replace(\"{id}\", query.id),\n               inQueryFilter = new this.constructor(this.App, qIdBase);\n            inQueryFilter.Account = this.Account;\n            // inQueryFilter.applicationLoad(this._Application);\n            inQueryFilter.fieldsLoad(query.fields());\n            inQueryFilter.setValue(query.workspaceFilterConditions);\n\n            switch (rule) {\n               case \"in_query\":\n                  result = inQueryFilter.isValid(rowData);\n                  break;\n               case \"not_in_query\":\n                  result = !inQueryFilter.isValid(rowData);\n                  break;\n            }\n\n            return result;\n         },\n\n         dataCollectionValid: (rowData, columnName, rule, compareValue) => {\n            var result = false;\n\n            if (!compareValue || !this.AB) return result;\n\n            if (columnName) {\n               rowData = rowData[columnName] || {};\n            }\n\n            let dc = this.AB.datacollectionByID(compareValue);\n\n            switch (rule) {\n               case \"in_data_collection\":\n                  if (!dc) return false;\n\n                  result =\n                     dc.getData(\n                        (d) => (d.id || d.uuid) == (rowData.id || rowData.uuid)\n                     ).length > 0;\n                  break;\n               case \"not_in_data_collection\":\n                  if (!dc) return true;\n\n                  result =\n                     dc.getData(\n                        (d) => (d.id || d.uuid) == (rowData.id || rowData.uuid)\n                     ).length < 1;\n                  break;\n            }\n\n            return result;\n         },\n\n         connectFieldValid: function (rowData, field, rule, compareValue) {\n            let relationName = field.relationName();\n\n            let connectedVal = \"\";\n\n            if (rowData) {\n               if (rowData[relationName]) {\n                  connectedVal = (\n                     (field.indexField\n                        ? rowData[relationName][field.indexField.columnName]\n                        : false) || // custom index\n                     (field.indexField2\n                        ? rowData[relationName][field.indexField2.columnName]\n                        : false) || // custom index 2\n                     rowData[relationName].id ||\n                     rowData[relationName]\n                  )\n                     .toString()\n                     .toLowerCase();\n               } else {\n                  let fieldVal = getFieldVal(rowData, field);\n                  if (fieldVal != null) {\n                     connectedVal = fieldVal;\n\n                     // an Object to a String\n                     if (typeof connectedVal == \"object\") {\n                        connectedVal =\n                           field.datasourceLink.displayData(connectedVal);\n                     }\n                  }\n               }\n            }\n\n            let compareValueLowercase = (compareValue || \"\").toLowerCase();\n\n            switch (rule) {\n               case \"contains\":\n                  return (\n                     connectedVal.toString().indexOf(compareValueLowercase) > -1\n                  );\n               case \"not_contains\":\n                  return (\n                     connectedVal.toString().indexOf(compareValueLowercase) ==\n                     -1\n                  );\n               case \"equals\":\n                  return connectedVal == compareValueLowercase;\n               case \"not_equal\":\n                  return connectedVal != compareValueLowercase;\n               case \"in_query\":\n               case \"not_in_query\":\n                  return _logic.inQueryValid(\n                     rowData,\n                     relationName,\n                     rule,\n                     compareValue\n                  );\n               case \"is_current_user\":\n               case \"is_not_current_user\":\n               case \"contain_current_user\":\n               case \"not_contain_current_user\":\n                  return _logic.userValid(rowData, field, rule, compareValue);\n               case \"is_empty\":\n                  return (\n                     rowData[relationName] == null ||\n                     rowData[relationName].length < 1 ||\n                     rowData[relationName] == \"\"\n                  );\n               case \"is_not_empty\":\n                  return (\n                     rowData[relationName] != null &&\n                     ((Array.isArray(rowData[relationName]) &&\n                        rowData[relationName].length > 0) ||\n                        rowData[relationName] != \"\")\n                  );\n               case \"in_data_collection\":\n               case \"not_in_data_collection\":\n                  return _logic.dataCollectionValid(\n                     rowData,\n                     relationName,\n                     rule,\n                     compareValue\n                  );\n            }\n         },\n\n         thisObjectValid: (rowData, rule, compareValue) => {\n            let result = false;\n\n            switch (rule) {\n               // if in_query condition\n               case \"in_query\":\n               case \"not_in_query\":\n                  if (!this.AB || !this._Object) return result;\n\n                  // if > 1 copy of this object in query ==> Error!\n                  var query = this.queries((q) => q.id == compareValue)[0];\n                  if (!query) return result;\n\n                  var listThisObjects = query.objects((o) => {\n                     return o.id == this._Object.id;\n                  });\n                  if (listThisObjects.length > 1) {\n                     // Alternative: choose the 1st instance of this object in the query, and make the compare on that.\n                     // Be sure to warn the developer of the limitiations of an \"this_object\" \"in_query\"  when query has > 1 copy of\n                     // this object as part of the query.\n\n                     console.error(\n                        \"HEY!  Can't compare this_object to a query that has > 1 copy of that object!\"\n                     );\n                     return true;\n                  }\n\n                  // get this object's alias from the query\n                  var alias = query.objectAlias(this._Object.id);\n\n                  // make sure all my columns in rowData are prefixed by \"alias\".columnName\n                  var newRowData = {};\n                  Object.keys(rowData).forEach((key) => {\n                     newRowData[`${alias}.${key}`] = rowData[key];\n                  });\n\n                  // then pass this on to the _logic.queryValid();\n                  return _logic.inQueryValid(\n                     newRowData,\n                     null,\n                     rule,\n                     compareValue\n                  );\n               // break; /* eslint no-unreachable */\n\n               // if in_datacollection condition\n               case \"in_data_collection\":\n               case \"not_in_data_collection\":\n                  // send rowData, null to datacollectionValid()\n                  return _logic.dataCollectionValid(\n                     rowData,\n                     null,\n                     rule,\n                     compareValue\n                  );\n               // break; /* eslint no-unreachable */\n            }\n         },\n      });\n\n      // Interface methods for parent component:\n      // this.objectLoad = _logic.objectLoad;\n      // this.viewLoad = _logic.viewLoad;\n      this.getValue = _logic.getValue;\n      // this.setValue = _logic.setValue;\n      // this.isValid = _logic.isValid;\n   }\n\n   init(options) {\n      if (options.showObjectName) {\n         this._settings.showObjectName = options.showObjectName;\n      }\n   }\n\n   /**\n    * @method isValid\n    * validate the row data is valid filter condition\n    *\n    * @param rowData {Object} - data row\n    */\n   isValid(rowData) {\n      var config_settings = this.config_settings;\n      var _logic = this._logic;\n\n      // If no conditions, then return true\n      if (\n         config_settings == null ||\n         config_settings.rules == null ||\n         config_settings.rules.length == 0\n      )\n         return true;\n\n      if (rowData == null) return false;\n\n      var result = config_settings.glue === \"and\" ? true : false;\n\n      config_settings.rules.forEach((filter) => {\n         if (!filter?.key || !filter?.rule) return;\n\n         var fieldInfo = this._Fields.filter((f) => f.id == filter.key)[0];\n         if (!fieldInfo) return;\n\n         var condResult;\n\n         // Filters that have \"this_object\" don't have a fieldInfo.key, so in that case,\n         // define a special .key == \"this_object\"\n         var ruleFieldType = fieldInfo.key;\n         if (typeof fieldInfo.key == \"undefined\") {\n            if (fieldInfo.id != \"this_object\") {\n               fieldInfo.key = \"connectField\"; // if you are looking at the parent object it won't have a key to analyze\n               ruleFieldType = fieldInfo.key;\n            } else ruleFieldType = \"this_object\";\n         }\n\n         switch (ruleFieldType) {\n            case \"string\":\n            case \"LongText\":\n            case \"email\":\n               condResult = _logic.textValid(\n                  rowData,\n                  fieldInfo,\n                  filter.rule,\n                  filter.value\n               );\n               break;\n            case \"date\":\n            case \"datetime\":\n               condResult = _logic.dateValid(\n                  rowData,\n                  fieldInfo,\n                  filter.rule,\n                  filter.value\n               );\n               break;\n            case \"number\":\n            case \"formula\":\n               condResult = _logic.numberValid(\n                  rowData,\n                  fieldInfo,\n                  filter.rule,\n                  filter.value\n               );\n               break;\n            case \"list\":\n               condResult = _logic.listValid(\n                  rowData,\n                  fieldInfo,\n                  filter.rule,\n                  filter.value\n               );\n               break;\n            case \"boolean\":\n               condResult = _logic.booleanValid(\n                  rowData,\n                  fieldInfo,\n                  filter.rule,\n                  filter.value\n               );\n               break;\n            case \"user\":\n               condResult = _logic.userValid(\n                  rowData,\n                  fieldInfo,\n                  filter.rule,\n                  filter.value\n               );\n               break;\n            case \"connectField\":\n            case \"connectObject\":\n               condResult = _logic.connectFieldValid(\n                  rowData,\n                  fieldInfo,\n                  filter.rule,\n                  filter.value\n               );\n               break;\n            case \"this_object\":\n               condResult = _logic.thisObjectValid(\n                  rowData,\n                  filter.rule,\n                  filter.value\n               );\n               break;\n         }\n\n         if (config_settings.glue === \"and\") {\n            result = result && condResult;\n         } else {\n            result = result || condResult;\n         }\n      });\n\n      return result;\n   }\n\n   /**\n    * @method applicationLoad\n    * set application\n    *\n    * @param application {ABApplication}\n    */\n   // applicationLoad(application) {\n   //    this._Application = application;\n   // }\n\n   /**\n    * @method fieldsLoad\n    * set fields\n    *\n    * @param {array} fields\n    *        an array of fields used in this Query\n    * @param {ABObject} object [optional]\n    *        (optional) ABObject reference if this Filter should support\n    *        the \"this object\" conditions.\n    */\n   fieldsLoad(fields = [], object = null) {\n      this._Fields = fields.filter((f) => f?.fieldIsFilterable?.());\n      // NOTE: User fields are now Connections, but we want to treat them\n      // differently.\n      this._QueryFields = this._Fields\n         ? this._Fields.filter((f) => f && f.isConnection && f.key != \"user\")\n         : [];\n\n      // insert our 'this object' entry if an Object was given.\n      if (object) {\n         this._Object = object;\n\n         let thisObjOption = {\n            id: \"this_object\",\n            label: object.label,\n         };\n\n         // If object is query ,then should define default alias: \"BASE_OBJECT\"\n         if (object.viewName) {\n            thisObjOption.alias = \"BASE_OBJECT\";\n         }\n\n         this._Fields.unshift(thisObjOption);\n      } else {\n         delete this._Object;\n      }\n   }\n\n   queriesLoad(queries = []) {\n      this._Queries = queries;\n   }\n\n   /**\n    * @method queries()\n    * return an array of all the ABObjectQuery.\n    * @param {fn} filter\n    * @return {array}\n    */\n   queries(filter = () => true) {\n      let result = [];\n\n      if (this.AB) {\n         result = result.concat(this.AB.queries(filter));\n      }\n\n      if (this._Queries) {\n         result = result.concat(\n            (this._Queries || []).filter(\n               (q) => filter(q) && result.filter((r) => r.id == q.id).length < 1\n            )\n         );\n      }\n\n      return result;\n   }\n\n   setValue(settings) {\n      this.config_settings = settings || {};\n      this.config_settings.rules = this.config_settings.rules || [];\n   }\n}\n","/*\n * ABMobilePageCore\n *\n * An view that represents a \"Page\" on the Mobile Device.\n *\n * Pages are\n *\t- allowed to be displayed in the interface list\n *\t- return a full list of components that can be added to the view editor\n *\n *\n */\n\nimport ABMobileView from \"../../platform/mobile/ABMobileView\";\n// var ABViewManager = require(\"../ABViewManager\");\n\n// function L(key, altText) {\n//     return AD.lang.label.getLabel(key) || altText;\n// }\n\nconst ABMobilePageDefaults = {\n   key: \"mobile-page\", // unique key identifier for this ABView\n   icon: \"file\", // icon reference: (without 'fa-' )\n};\n\nconst ABPropertyComponentDefaults = {\n   type: \"page\",\n   // {string}\n   // What type of \"Page\" this is: ['page', 'popup', 'reportPage']\n};\n\nexport default class ABMobilePageCore extends ABMobileView {\n   constructor(values, application, parent, defaultValues) {\n      super(values, application, parent, defaultValues || ABMobilePageDefaults);\n\n      // \t{\n      // \t\tid:'uuid',\t\t\t\t\t// uuid value for this obj\n      // \t\tkey:'viewKey',\t\t\t\t// unique key for this View Type\n      // \t\ticon:'font',\t\t\t\t// fa-[icon] reference for an icon for this View Type\n\n      //\t\tname: '',\t\t\t\t\t// unique page name\n\n      // \t\tlabel:'',\t\t\t\t\t// pulled from translation\n\n      //\t\tsettings: {\t\t\t\t\t// unique settings for the type of field\n      //\t\t},\n\n      //\t\ttranslations:[]\n      // \t}\n\n      this.parent = null; // will be set by the pageNew() that creates this obj.\n      // {obj} .parent\n      // this points to the ABView object that manages this object as a child.\n      // this param is shared across ABViews as well as ABMobilePage, but has\n      // different implications ... so we default an ABMobilePage.parent = null\n      // and the place that Creates the Page must assign the .parent externally.\n   }\n\n   static common() {\n      return ABMobilePageDefaults;\n   }\n\n   static defaultValues() {\n      return ABPropertyComponentDefaults;\n   }\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABMobilePage instance\n    * into the values needed for saving to the DB.\n    *\n    * @return {json}\n    */\n   toObj() {\n      var obj = super.toObj();\n\n      obj.name = this.name;\n      obj.route = this.route;\n\n      obj.myAppID = this.myAppID;\n\n      obj.menuType = this.menuType;\n\n      // icon of popup page\n      if (this.settings.type == \"popup\") obj.icon = \"clone\";\n\n      // set label of the page\n      if (!this.label || this.label == \"?label?\") obj.label = obj.name;\n\n      // compile our pages\n      obj.pageIDs = (this._pages || []).map((p) => p.id);\n\n      return obj;\n   }\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      super.fromValues(values);\n\n      this.route = values.route || this.name.replaceAll(\" \", \"_\");\n\n      // icon of popup page\n      if (values.settings.type == \"popup\") this.icon = \"clone\";\n\n      // set label of the page\n      if (!this.label || this.label == \"?label?\") this.label = this.name;\n\n      // track which application this Page belongs to:\n      this.myAppID = values.myAppID;\n      if (!this.myAppID && this.application) {\n         this.myAppID = this.application.id;\n      }\n\n      this.menuType = values.menuType || \"menu\";\n      // {string}  [\"menu\", \"tab\"]\n      // indicates if this Page was added as a Mobile App's \"menu\" or \"Tab\"\n\n      // now properly handle our sub pages.\n      var pages = [];\n      (values.pageIDs || []).forEach((id) => {\n         var def = this.AB.definitionByID(id);\n         if (def) {\n            pages.push(this.pageNew(def));\n         } else {\n            this.AB.error(\n               `App[${this.application.name}][${this.application.id}]->Page[${this.name}][${this.id}] referenced an unknown Page[${id}]`\n            );\n         }\n      });\n      this._pages = pages;\n\n      // the default columns of ABView is 1\n      // this.settings.columns = this.settings.columns || 1;\n      // this.settings.gravity = this.settings.gravity || [1];\n\n      // convert from \"0\" => 0\n   }\n\n   /**\n    * @method destroy()\n    *\n    * destroy the current instance of ABApplication\n    *\n    * also remove it from our _AllApplications\n    *\n    * @return {Promise}\n    */\n   destroy() {\n      return Promise.resolve()\n         .then(() => {\n            // When deleting an ABMobilePage\n            // be sure to remove any of it's ABMobilePage as well\n            // This cleans out any dangling ABDefinitions\n\n            var allPageDeletes = [];\n            var allPages = this.pages();\n            this._pages = [];\n            // doing ._pages = [] prevents any of my updates when\n            // a sub-page is .destroy()ed\n\n            allPages.forEach((p) => {\n               allPageDeletes.push(p.destroy());\n            });\n            return Promise.all(allPageDeletes);\n         })\n         .then(() => {\n            var parent = this.parent || this.application;\n\n            return parent.pageRemove(this);\n         })\n         .then(() => {\n            return super.destroy();\n         });\n   }\n\n   /**\n    * @method save()\n    * persist this instance of ABMobilePage\n    * @return {Promise}\n    *         .resolve( {this} )\n    */\n   save() {\n      return Promise.resolve()\n         .then(() => {\n            // this creates our .id\n            return super.save();\n         })\n         .then(() => {\n            // now we can persist ourself in our parent\n            var parent = this.parent || this.application;\n\n            return parent.pageInsert(this);\n         })\n         .then(() => {\n            return this;\n         });\n   }\n\n   ///\n   /// Pages\n   ///\n\n   /**\n    * @method pages()\n    *\n    * return an array of all the ABMobilePages for this ABMobilePage.\n    *\n    * @param {fn} filter\t\ta filter fn to return a set of ABMobilePages that this fn\n    *\t\t\t\t\t\t\treturns true for.\n    * @param {boolean} deep\tflag to find in sub pages\n    *\n    * @return {array}\t\t\tarray of ABMobilePages\n    */\n   pages(filter = () => true, deep = false) {\n      var result = [];\n\n      // find into sub-pages recursively\n      if (filter && deep) {\n         if (this._pages && this._pages.length > 0) {\n            result = this._pages.filter(filter);\n\n            if (result.length < 1) {\n               this._pages.forEach((p) => {\n                  var subPages = p.pages(filter, deep);\n                  if (subPages && subPages.length > 0) {\n                     result = subPages;\n                  }\n               });\n            }\n         }\n      }\n      // find root pages\n      else {\n         result = this._pages.filter(filter);\n      }\n\n      return result;\n   }\n\n   /**\n    * @method pageInsert()\n    *\n    * save the given ABMobilePage in our ._pages array and persist the current\n    * values if they changed.\n    *\n    * @param {ABMobilePage} page The instance of the page to save.\n    * @return {Promise}\n    */\n   pageInsert(page) {\n      var isIncluded = this.pages((o) => o.id === page.id).length > 0;\n      if (!isIncluded) {\n         // if not already included, then add and save the Obj definition:\n         this._pages.push(page);\n         return this.save();\n      }\n\n      // Nothing was required so return\n      return Promise.resolve();\n   }\n\n   /**\n    * @method pageNew()\n    *\n    * return an instance of a new (unsaved) ABMobilePage that is tied to this\n    * ABMobilePage.\n    *\n    * NOTE: this new page is not included in our this.pages until a .save()\n    * is performed on the page.\n    *\n    * @return {ABMobilePage}\n    */\n   pageNew(values) {\n      // make sure this is an ABMobilePage description\n      values.key = ABMobilePageDefaults.key;\n\n      // NOTE: this returns a new ABView component.\n      // when creating a new page, the 3rd param should be null, to signify\n      // the top level component.\n      var page = this.application.viewNew(values, this.application, null);\n      page.parent = this;\n      return page;\n   }\n\n   /**\n    * @method pageRemove()\n    *\n    * remove the given ABMobilePage from our ._pages array and persist the current\n    * values.\n    *\n    * @param {ABMobilePage} page The instance of the page to remove.\n    * @return {Promise}\n    */\n   pageRemove(page) {\n      var origLen = this._pages.length;\n      this._pages = this.pages((p) => p.id != page.id);\n\n      if (this._pages.length < origLen) {\n         return this.save();\n      }\n\n      // if we get here, then nothing changed so nothing to do.\n      return Promise.resolve();\n   }\n\n   updateIcon(obj) {\n      // icon of page\n      if (obj.settings.type == \"popup\") {\n         obj.icon = \"clone\";\n      } else {\n         obj.icon = ABMobilePageDefaults.icon;\n      }\n      return obj;\n   }\n\n   /**\n    * @method clone()\n    * clone the defintions of this ABMobilePage object.\n    * @param {obj} lookUpIds\n    *        an { oldID : newID } lookup hash for converting ABView objects\n    *        and their setting pointers.\n    * @param {ABView*} parent\n    *        Which ABView should be connected as the parent object of this\n    *        copy.\n    * @return {obj}\n    *        defs of the copied ABView\n    */\n   clone(lookUpIds, parent) {\n      // initial new ids of pages and components\n      if (lookUpIds == null) {\n         // create a hash of { oldID : newID } of any sub Pages and Views.\n         lookUpIds = {};\n\n         let mapNewIdFn = (currView) => {\n            if (!lookUpIds[currView.id])\n               lookUpIds[currView.id] = this.AB.uuid();\n\n            if (currView.pages) {\n               currView.pages().forEach((p) => mapNewIdFn(p));\n            }\n\n            if (currView.views) {\n               currView.views().forEach((v) => mapNewIdFn(v));\n            }\n         };\n\n         // start map new ids\n         mapNewIdFn(this);\n      }\n\n      // copy\n      let result = super.clone(lookUpIds, parent);\n\n      // page's name should not be duplicate\n      result.name = null;\n\n      return result;\n   }\n\n   /**\n    * @method copy()\n    * create a new copy of this ABMobilePage object. The resulting ABView should\n    * be identical in settings and all sub pages/views, but each new object\n    * is a unique view (different ids).\n    * @param {obj} lookUpIds\n    *        an { oldID : newID } lookup hash for converting ABView objects\n    *        and their setting pointers.\n    * @param {ABView*} parent\n    *        Which ABView should be connected as the parent object of this\n    *        copy.\n    * @return {Promise}\n    *        .resolved with the instance of the copied ABView\n    */\n   copy(lookUpIds, parent, options) {\n      // initial new ids of pages and components\n      if (lookUpIds == null) {\n         // create a hash of { oldID : newID } of any sub Pages and Views.\n         lookUpIds = {};\n\n         let mapNewIdFn = (currView) => {\n            if (!lookUpIds[currView.id])\n               lookUpIds[currView.id] = this.AB.uuid();\n\n            if (currView.pages) {\n               currView.pages().forEach((p) => mapNewIdFn(p));\n            }\n\n            if (currView.views) {\n               currView.views().forEach((v) => mapNewIdFn(v));\n            }\n         };\n\n         // start map new ids\n         mapNewIdFn(this);\n      }\n\n      // now continue with the default .copy()\n      return super.copy(lookUpIds, parent, options);\n   }\n}\n","/*\n * ABViewCore\n *\n * ABViewCore defines the common ABView structure that is shared between\n * the client and the server.  Mostly how it manages it's internal data, and\n * how it is related to the ABView classes.\n *\n */\n\nimport ABMLClass from \"../../platform/ABMLClass\";\n\nconst ABMobileViewDefaults = {\n   key: \"mobile-view\", // {string} unique key for this view\n   icon: \"window-maximize\", // {string} fa-[icon] reference for this view\n   labelKey: \"view\", // {string} the multilingual label key for the class label\n   tabicon: \"\", // no default tab icons\n};\n\nconst ABViewPropertyComponentDefaults = {\n   label: \"\",\n};\n\nexport default class ABMobileViewCore extends ABMLClass {\n   /**\n    * @param {obj} values  key=>value hash of ABView values\n    * @param {ABApplication} application the application object this view is under\n    * @param {ABView} parent the ABView this view is a child of. (can be null)\n    */\n   constructor(values, application, parent, defaultValues) {\n      super([\"label\"], application.AB);\n\n      this.__events = [];\n      // keep track of any event listeners attached to this ABView object\n\n      this.defaults = defaultValues || ABMobileViewDefaults;\n\n      this.application = application;\n\n      this.parent = parent || null;\n\n      this.warningsSilent = false;\n      // {bool}\n      // Should we suppress our configuration warnings?\n\n      this.__missingViews = [];\n      // {array}\n      // Any ABView.id we have stored that we can't find.\n\n      this.fromValues(values);\n   }\n\n   static common() {\n      return ABMobileViewDefaults;\n   }\n\n   static defaultValues() {\n      return ABViewPropertyComponentDefaults;\n   }\n\n   /**\n    * @method newInstance()\n    * return a new instance of this ABView.  Most likely called from interfaces\n    * that create new UI elements like the ABDesigner.\n    * @param {ABApplication} application  \t: the root ABApplication this view is under\n    * @param {ABView/ABApplication} parent\t: the parent object of this ABView.\n    * @return {ABView}\n    */\n   static newInstance(application, parent) {\n      // return a new instance from ABViewManager:\n      return application.viewNew(\n         { key: this.common().key },\n         application,\n         parent\n      );\n   }\n\n   viewKey() {\n      return this.defaults.key;\n   }\n\n   viewIcon() {\n      return this.defaults.icon;\n   }\n\n   tabIcon() {\n      return this.defaults.tabicon;\n   }\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABView instance\n    * into the values needed for saving to the DB.\n    *\n    * @return {json}\n    */\n   toObj() {\n      // MLClass translation\n      var obj = super.toObj();\n\n      var result = {\n         id: this.id,\n         type: this.type || this.viewKey(),\n         key: this.key,\n         icon: this.icon,\n         tabicon: this.tabicon,\n         name: this.name,\n         settings: this.AB.cloneDeep(this.settings || {}),\n         // accessLevels: this.accessLevels,\n         translations: obj.translations,\n      };\n\n      // encode our child view references\n      result.viewIDs = (this._views || []).map((v) => v.id).filter((id) => id);\n      result.viewIDs = result.viewIDs.concat(this.__missingViews);\n\n      if (this.position) result.position = this.position;\n\n      // encode our .isRoot() reference.\n      // (NOTE: this is set so our server side code can distinguish) between a .view\n      // and a root page:\n      // NOTE: we intentionally do NOT pull this out in .fromValues()\n      result.isRoot = this.isRoot();\n\n      return result;\n   }\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      this.id = values.id; // NOTE: only exists after .save()\n      // {string} .id\n      // the uuid of this ABObject Definition.\n\n      this.type = values.type || this.viewKey();\n      // {string} .type\n      // the type of ABDefinition this is.\n\n      this.key = values.key || this.viewKey();\n      // {string} .key\n      // the unique lookup key for our ABViewManager to create new\n      // instances of this object.\n\n      this.icon = values.icon || this.viewIcon();\n      // {string} .icon\n      // the font awesome icon reference for showing an icon for this\n      // view in the AppBuilder interface builder.\n\n      this.tabicon = values.tabicon || this.tabIcon();\n\n      this.name = values.name;\n      // {string} .name\n      // A name reference for this ABView. This is a reference that isn't\n      // translateable and will be used for lookups across languages.\n\n      // if this is being instantiated on a read from the Property UI,\n      // .label is coming in under .settings.label\n      values.settings = values.settings || {};\n      this.label = values.label || values.settings.label || \"?label?\";\n\n      this.settings = values.settings || {};\n      // {obj} .settings\n      // the property settings for this ABView\n\n      // make sure .settings.height is an int and not a string\n      this.settings.height = parseInt(this.settings.height || 0);\n\n      // this.accessLevels = values.accessLevels || {};\n      // {obj} .accessLevels\n      // Hash: { ABRole.id : accessLevel }\n      // tracks the Role -> AccessLevel settings of this particular\n      // view.\n      // accessLevel: 0 : no access, 1 : view only, 2: full access\n\n      // let the MLClass now process the translations:\n      super.fromValues(values);\n\n      // If the View / DataCollection does not have a .name already,\n      // use the English label translation as the .name instead.\n      if (!this.name && Array.isArray(this.translations)) {\n         for (var i = 0; i < this.translations.length; i++) {\n            if (i == 0) {\n               // Use the first label found, in case there is no 'en'\n               this.name = this.translations[i].label;\n            }\n            if (this.translations[i].language_code == \"en\") {\n               // But the 'en' label will have final priority\n               this.name = this.translations[i].label;\n               break;\n            }\n         }\n      }\n\n      // default value for our label\n      if (this.label == \"?label?\") {\n         if (this.parent) {\n            this.label = this.parent.label + \".\" + this.defaults.key;\n         }\n      }\n\n      var views = [];\n      this.__missingViews = this.__missingViews || [];\n      (values.viewIDs || []).forEach((id) => {\n         var def = this.AB.definitionByID(id);\n         if (def) {\n            views.push(this.application.viewNew(def, this.application, this));\n         } else {\n            this.__missingViews.push(id);\n         }\n      });\n      this._views = views;\n\n      this.position = values.position || {};\n\n      if (this.position.x != null) this.position.x = parseInt(this.position.x);\n      if (this.position.y != null) this.position.y = parseInt(this.position.y);\n\n      this.position.dx = parseInt(this.position.dx || 1);\n      this.position.dy = parseInt(this.position.dy || 1);\n   }\n\n   isRoot() {\n      return this.parent == null || this.parent == this.application;\n   }\n\n   /**\n    * @method allParents()\n    * return a flattened array of all the ABViews parents\n    * @return {array}      array of ABViews\n    */\n   allParents() {\n      var parents = [];\n      var curView = this;\n\n      // add current view to array\n      parents.unshift(curView);\n\n      while (!curView.isRoot() && curView.parent) {\n         parents.unshift(curView.parent);\n\n         curView = curView.parent;\n      }\n\n      return parents;\n   }\n\n   /**\n    * @method isAccessibleForRoles()\n    * return true/false if this ABViewPage is accessible for one of the\n    * passed in ABRoles.\n    * @param {array[ABRole]} roles\n    *        an array of {ABRole} instances.\n    * @return {bool}\n    */\n   // isAccessibleForRoles(roles) {\n   //    var foundRole = false;\n\n   //    var accessibleRoles = Object.keys(this.accessLevels) || [];\n   //    (roles || []).forEach((r) => {\n   //       if (accessibleRoles.indexOf(r.uuid || r) > -1) {\n   //          foundRole = true;\n   //       }\n   //    });\n\n   //    return foundRole;\n   // }\n\n   /**\n    * @method getUserAccess()\n    *\n    * return the access level of the current user on the current view\n    *\n    * @return {integer}  // 0 = No Access // 1 = Read Only // 2 = Full Access\n    */\n   // getUserAccess() {\n   //    // by default everyone has no access\n   //    var accessLevel = 0;\n\n   //    if (this.application.isAccessManaged) {\n   //       // check to see if the current users is the access manager\n   //       var isAccessManager = false;\n   //       // first check if manager is defined by their role\n   //       if (parseInt(this.application.accessManagers.useRole) == 1) {\n   //          // if so check if any of the user's role match the managers\n   //          this.AB.Account.roles().forEach((role) => {\n   //             if (\n   //                this.application.accessManagers.role.indexOf(\n   //                   role.id || role.uuid\n   //                ) > -1\n   //             ) {\n   //                // if so set the access level to full access\n   //                isAccessManager = true;\n   //                accessLevel = 2;\n   //             }\n   //          });\n   //       }\n   //       // if the user isn't already set as the manager and the manager is defined by their account\n   //       if (\n   //          !isAccessManager &&\n   //          parseInt(this.application.accessManagers.useAccount) == 1\n   //       ) {\n   //          // check if the user's account matches the managers\n   //          if (\n   //             this.application.accessManagers.account.indexOf(\n   //                this.AB.Account.uuid() + \"\"\n   //             ) > -1\n   //          ) {\n   //             // if so set the access level to full access\n   //             isAccessManager = true;\n   //             accessLevel = 2;\n   //          }\n   //       }\n\n   //       // if the user is not the manager check if the page has access levels defined for roles\n   //       if (\n   //          this.accessLevels &&\n   //          Object.keys(this.accessLevels).length > 0 &&\n   //          !isAccessManager\n   //       ) {\n   //          // check to see if the user's roles matches one of the roles defined\n   //          this.AB.Account.roles().forEach((role) => {\n   //             var currentRole = this.accessLevels[role.id || role.uuid];\n   //             if (currentRole && parseInt(currentRole) > accessLevel)\n   //                // if the access level is higher than a previous role set to the new level\n   //                accessLevel = parseInt(currentRole);\n   //          });\n   //       }\n   //    } else {\n   //       accessLevel = 2;\n   //    }\n\n   //    return accessLevel;\n   // }\n\n   /**\n    * @method parentFormComponent\n    * return the closest form object this component is on.\n    */\n   parentFormComponent() {\n      var form = null;\n\n      var curr = this;\n      while (curr.key != \"form\" && !curr.isRoot() && curr.parent) {\n         curr = curr.parent;\n      }\n\n      if (curr.key == \"form\") {\n         form = curr;\n      }\n\n      return form;\n   }\n\n   /**\n    * @method parentDetailComponent\n    * return the closest detail object that this component is on.\n    * @returns {ABViewDetail} detail component\n    */\n   parentDetailComponent() {\n      var detail = null;\n\n      var curr = this;\n      while (curr.key != \"detail\" && !curr.isRoot() && curr.parent) {\n         curr = curr.parent;\n      }\n\n      if (curr.key == \"detail\") {\n         detail = curr;\n      }\n\n      return detail;\n   }\n\n   pageParent(filterFn) {\n      if (filterFn == null) filterFn = () => true;\n\n      // if current page is the root page, then return itself.\n      if (this.isRoot()) {\n         return this;\n      }\n\n      var parentPage = this.parent;\n      while (\n         parentPage &&\n         (parentPage.key != \"page\" || !filterFn(parentPage))\n      ) {\n         parentPage = parentPage.parent;\n      }\n\n      return parentPage;\n   }\n\n   pageRoot() {\n      var rootPage = this.pageParent();\n\n      while (!rootPage.isRoot()) {\n         rootPage = rootPage.pageParent();\n      }\n\n      return rootPage;\n   }\n\n   /**\n    * @property datacollection\n    * return data source\n    *\n    * @return {ABDataCollection}\n    */\n   get datacollection() {\n      let dataviewID = (this.settings || {}).dataviewID;\n      if (!dataviewID) {\n         if (\n            [\"form\", \"grid\", \"line\", \"area\", \"bar\", \"gantt\", \"kanban\"].indexOf(\n               this.key\n            ) > -1\n         ) {\n            // NOTE: ignore kanban side forms where this is the case:\n            if (this.key == \"form\" && this._currentObject) return null;\n\n            if (this.warningsSilent) return null;\n\n            var errNoDCID = new Error(\n               `ABViewCore:get datacollection(): View[${this.key}] didn't define a dataviewID.`\n            );\n            this.AB.notify.builder(errNoDCID, {\n               view: this,\n               settings: this.settings,\n            });\n         } else {\n            // These views shouldn't matter if they don't have a datacollection.\n            if (\n               [\"button\", \"label\", \"page\", \"tab\", \"viewcontainer\"].indexOf(\n                  this.key\n               ) == -1\n            ) {\n               console.warn(\n                  `TODO: figure out which ABView* require a .dataviewID: ${this.key}?`\n               );\n            }\n         }\n         return null;\n      }\n\n      var dc = this.AB.datacollectionByID(dataviewID);\n      if (!dc) {\n         var errNoDC = new Error(\n            `MobileView[${this.label}][${this.id}] is unable to find associated DataCollection`\n         );\n         this.AB.notify.builder(errNoDC, {\n            view: this,\n            dataviewID,\n         });\n      }\n      return dc;\n   }\n\n   ///\n   /// Update Access accessLevels\n   ///\n\n   /**\n    * @method updateAccessLevels()\n    *\n    *\n    * @param {string} roleId\n    *\n    * @param {string} accessLevel\n    *\n    * @return {Promise}\n    *\n    */\n   // updateAccessLevels(roleId, accessLevel) {\n   //    if (parseInt(accessLevel) == 0) {\n   //       if (this.accessLevels[roleId]) delete this.accessLevels[roleId];\n   //    } else {\n   //       this.accessLevels[roleId] = accessLevel;\n   //    }\n\n   //    return this.save(false, false);\n   // }\n\n   ///\n   /// Views\n   ///\n\n   /**\n    * @method views()\n    *\n    * return an array of all the ABViews children\n    *\n    * @param {fn} filter  \ta filter fn to return a set of ABViews that this fn\n    *\t\t\t\t\t\treturns true for.\n    * @param {boolean} deep\n    *\n    * @return {array} \tarray of ABViews\n    */\n   views(filter = () => true, deep = false) {\n      var result = [];\n\n      if (!this._views || this._views.length < 1) return result;\n\n      // find into recursively\n      if (filter && deep) {\n         result = result.concat(this._views.filter(filter));\n\n         this._views.forEach((v) => {\n            var subViews = v.views(filter, deep);\n            if (subViews && subViews.length > 0) {\n               result = result.concat(subViews);\n            }\n         });\n      } else {\n         result = this._views.filter(filter);\n      }\n\n      return result;\n   }\n\n   /**\n    * @method viewNew()\n    * @return {ABView}\n    */\n   viewNew(values, application, parent) {\n      return this.application.viewNew(\n         values,\n         application || this.application,\n         parent || this\n      );\n   }\n\n   /**\n    * @method viewDestroy()\n    *\n    * remove the current ABView from our list of ._views.\n    *\n    * @param {ABView} view\n    * @return {Promise}\n    */\n   // viewDestroy(view) {\n   //    console.error(\"DEPRECIATED: where is this called?\");\n   //    return this.viewRemove(view);\n   // }\n\n   /**\n    * @method viewRemove()\n    *\n    * remove the current ABView from our list of ._views.\n    *\n    * @param {ABView} view\n    * @return {Promise}\n    */\n   viewRemove(view) {\n      var origLen = this._views.length;\n      this._views = this.views(function (v) {\n         return v.id != view.id;\n      });\n\n      if (this._views.length < origLen) {\n         return this.save();\n      }\n\n      return Promise.resolve();\n   }\n\n   /**\n    * @method viewInsert()\n    *\n    * persist the current ABView in our list of ._views.\n    *\n    * @param {ABView} object\n    * @return {Promise}\n    */\n   viewInsert(view) {\n      var isIncluded =\n         this.views(function (v) {\n            return v.id == view.id;\n         }).length > 0;\n      if (!isIncluded) {\n         this._views.push(view);\n         return this.save();\n      }\n\n      return Promise.resolve();\n   }\n\n   /**\n    * @method viewReorder()\n    *\n    * reorder the current ABView in our list of ._views.\n    *\n    * @param {string} viewId - id of the active view\n    * @param {string} toPosition - 'to' postion\n    * @return {Promise}\n    */\n   viewReorder(viewId, toPosition) {\n      var from = this._views.findIndex((v) => v.id == viewId);\n      if (from < 0) return;\n\n      // move drag item to 'to' position\n      this._views.splice(toPosition, 0, this._views.splice(from, 1)[0]);\n\n      // save to database\n      return this.save(true);\n   }\n\n   /// ABApplication data methods\n\n   /**\n    * @method destroy()\n    *\n    * destroy the current instance of ABApplication\n    *\n    * also remove it from our _AllApplications\n    *\n    * @return {Promise}\n    */\n   destroy() {\n      // unsubscribe events\n      this.eventClear(true);\n\n      return Promise.resolve()\n         .then(() => {\n            // When deleting an ABView\n            // be sure to remove any of it's ABViews as well\n            // This cleans out any dangling ABDefinitions\n\n            var allViewDeletes = [];\n            var allViews = this.views();\n            this._views = [];\n            // doing ._views = [] prevents any of my updates when\n            // a sub-view is .destroy()ed\n\n            allViews.forEach((v) => {\n               allViewDeletes.push(v.destroy());\n            });\n            return Promise.all(allViewDeletes);\n         })\n         .then(() => {\n            // NOTE: this should not happen on ABViewPage objects\n            if (this.parent && !this.pages) {\n               return this.parent.viewRemove(this);\n            }\n         })\n         .then(() => {\n            return super.destroy();\n         })\n         .then(() => {\n            this.emit(\"destroyed\");\n         });\n   }\n\n   /**\n    * @method save()\n    * persist this instance of ABView\n    * @return {Promise}\n    *\t\t.resolve( {this} )\n    */\n   save() {\n      return Promise.resolve()\n         .then(() => {\n            // this creates our .id\n            return super.save();\n         })\n         .then(() => {\n            // NOTE: this should not happen on ABViewPage objects:\n            if (this.parent && !this.pages) {\n               // if we have a .parent, make sure we are included in our .parent's\n               // viewIDs\n               return this.parent.viewInsert(this);\n            }\n         })\n         .then(() => {\n            return this;\n         });\n   }\n\n   ///\n   /// Events\n   ///\n\n   /**\n    * @method eventAdd()\n    *\n    *\n    *\n    * @param {object} evt - {\n    * \t\t\t\t\t\t\temitter: object,\n    * \t\t\t\t\t\t\teventName: string,\n    * \t\t\t\t\t\t\tlistener: function\n    * \t\t\t\t\t\t}\n    */\n   eventAdd(evt) {\n      if (!evt || !evt.emitter || !evt.listener) return;\n\n      var exists = this.__events.find((e) => {\n         return e.emitter == evt.emitter && e.eventName == evt.eventName;\n         // && e.listener == evt.listener;\n      });\n\n      if (!exists || exists.length < 1) {\n         // add to array\n         this.__events.push({\n            emitter: evt.emitter,\n            eventName: evt.eventName,\n            listener: evt.listener,\n         });\n\n         // listening this event\n         evt.emitter.on(evt.eventName, evt.listener);\n      }\n   }\n\n   /**\n    * @method eventClear()\n    * unsubscribe all events.\n    * should do it before destroy a component\n    *\n    * @param {bool} deep - clear events of child views\n    */\n   eventClear(deep) {\n      if (deep) {\n         this.views().forEach((v) => {\n            v.eventClear(deep);\n         });\n      }\n\n      if (this.__events && this.__events.length > 0) {\n         this.__events.forEach((e) => {\n            e.emitter.removeListener(e.eventName, e.listener);\n         });\n      }\n   }\n\n   /**\n    * @method clone()\n    * clone the definitions of this ABView object.\n    * @param {obj} lookUpIds\n    *        an { oldID : newID } lookup hash for converting ABView objects\n    *        and their setting pointers.\n    * @param {ABView*} parent\n    *        Which ABView should be connected as the parent object of this\n    *        copy.\n    * @param {obj} options\n    *        option settings for the copy command.\n    *        options.ignoreSubPages {bool}\n    *             set to true to skip copying any sub pages of this ABView.\n    * @return {obj}\n    *        obj defs of this ABView\n    */\n   clone(lookUpIds, parent, options = {}) {\n      lookUpIds = lookUpIds || {};\n\n      // get settings of the target\n      let config = this.toObj();\n\n      // remove sub-elements property\n      [\"pages\", \"views\"].forEach((prop) => {\n         delete config[prop];\n      });\n\n      // update id of linked components\n      if (this.copyUpdateProperyList) {\n         (this.copyUpdateProperyList() || []).forEach((prop) => {\n            if (config && config.settings)\n               config.settings[prop] = lookUpIds[config.settings[prop]];\n         });\n      }\n\n      // copy from settings\n      let result = this.viewNew(config, this.application, parent);\n\n      // change id\n      if (parent == null) {\n         // the page is getting cloned to root: there is no parent, as parent is the application\n         result.id = null;\n      } else {\n         result.id = lookUpIds[result.id] || this.AB.uuid();\n      }\n\n      // copy sub pages\n      if (this.pages && !options.ignoreSubPages) {\n         result._pages = [];\n         this.pages().forEach((p) => {\n            let copiedSubPage = p.clone(lookUpIds, result, options);\n            copiedSubPage.parent = result;\n\n            result._pages.push(copiedSubPage);\n         });\n      }\n\n      // copy sub views\n      if (this.views && !options.ignoreSubViews) {\n         result._views = [];\n         this.views().forEach((v) => {\n            let copiedView = v.clone(lookUpIds, result, options);\n\n            result._views.push(copiedView);\n         });\n      }\n\n      return result;\n   }\n\n   /**\n    * @method copy()\n    * create a new copy of this ABView object. The resulting ABView should\n    * be identical in settings and all sub pages/views, but each new object\n    * is a unique view (different ids).\n    * @param {obj} lookUpIds\n    *        an { oldID : newID } lookup hash for converting ABView objects\n    *        and their setting pointers.\n    * @param {ABView*} parent\n    *        Which ABView should be connected as the parent object of this\n    *        copy.\n    * @param {obj} options\n    *        option settings for the copy command.\n    *        options.ignoreSubPages {bool}\n    *             set to true to skip copying any sub pages of this ABView.\n    *        options.newName {string}\n    *             new user determined name for page\n    * @return {Promise}\n    *        .resolved with the instance of the copied ABView\n    */\n   copy(lookUpIds, parent, options = {}) {\n      lookUpIds = lookUpIds || {};\n\n      // get settings of the target\n      let config = this.toObj();\n\n      // remove sub-elements property\n      [\"pageIDs\", \"viewIDs\"].forEach((prop) => {\n         delete config[prop];\n      });\n\n      // update id of linked components\n      if (this.copyUpdateProperyList) {\n         (this.copyUpdateProperyList() || []).forEach((prop) => {\n            if (config && config.settings)\n               config.settings[prop] = lookUpIds[config.settings[prop]];\n         });\n      }\n\n      // copy from settings\n      let result = this.application.viewNew(config, this.application, parent);\n\n      // keep the parent\n      result.parent = parent || this.parent;\n\n      // change id\n      if (parent == null) {\n         // the page is getting cloned to root: there is no parent, as parent is the application.\n         // pages with null parent ids default to getting put on root\n         result.id = null;\n      } else {\n         result.id = lookUpIds[result.id] || this.AB.uuid();\n      }\n\n      // page's name should not be duplicate\n      if (this.key == \"page\") {\n         result.name =\n            options?.newName ||\n            `${result.name}_copied_${this.AB.uuid().slice(0, 3)}`;\n\n         result.label = options?.newName || `${result.label} (copied)`;\n      }\n\n      return Promise.resolve()\n         .then(() => {\n            // copy sub pages\n            var allSaves = [];\n\n            if (this._pages && !options.ignoreSubPages) {\n               result._pages = [];\n               this.pages().forEach((p) => {\n                  // this prevents result.save() from happening on each of these\n                  // p.copy():\n                  if (p.isRoot())\n                     this.application._pages.push({ id: lookUpIds[p.id] });\n\n                  allSaves.push(\n                     p\n                        .copy(lookUpIds, result, options)\n                        .then((copiedSubPage) => {\n                           copiedSubPage.parent = result;\n                           // remove the temp {id:} entry above:\n                           this.application._pages =\n                              this.application._pages.filter(\n                                 (p2) => p2.id != lookUpIds[p.id]\n                              );\n\n                           // now add the full copiedSubPage:\n                           result._pages.push(copiedSubPage);\n                        })\n                  );\n               });\n            }\n\n            return Promise.all(allSaves);\n         })\n         .then(() => {\n            // copy sub views\n            var allSaves = [];\n\n            if (this._views && !options.ignoreSubViews) {\n               result._views = [];\n               this.views().forEach((v) => {\n                  allSaves.push(\n                     // send a null for parent, so that the .save() wont trigger\n                     // a save of the parent.\n                     v.copy(lookUpIds, result, options).then((copiedView) => {\n                        // now patch up the parent connection:\n                        // copiedView.parent = result;\n                        if (\n                           result._views.filter((vi) => vi.id == copiedView.id)\n                              .length < 1\n                        ) {\n                           result._views.push(copiedView);\n                        }\n                     })\n                  );\n               });\n            }\n\n            return Promise.all(allSaves);\n         })\n         .then(() => {\n            // now we do 1 save for all the views\n            return result.save();\n         })\n         .then(() => {\n            return result;\n         });\n   }\n}\n","/**\n * ABProcessLane\n * manages the lanes in a Process Diagram.\n *\n * Lanes manage users in the system, and provide a way to lookup a SiteUser.\n */\nimport ABProcessParticipant from \"../../platform/process/ABProcessParticipant\";\n\nconst ABProcessLaneDefaults = {\n   type: \"process.lane\",\n   // {string} .type\n   // unique key to reference this specific object\n\n   // icon: \"key\"\n   // {string} .icon\n   // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\n};\n\nexport default class ABProcessLaneCore extends ABProcessParticipant {\n   constructor(attributes, process, AB) {\n      super(attributes, process, AB);\n\n      //// Runtime Values\n      //// these are not stored in the Definition, but rather\n      //// loaded and used from a running process instance.\n   }\n\n   static defaults() {\n      return ABProcessLaneDefaults;\n   }\n\n   fromValues(attributes) {\n      /*\n        {\n            id: uuid(),\n            name: 'name',\n            type: 'xxxxx',\n            json: \"{json}\"\n        }\n        */\n      super.fromValues(attributes);\n\n      this.type = attributes.type || ABProcessLaneDefaults.type;\n   }\n\n   /**\n    * @method toObj()\n    * properly compile the current state of this object instance\n    * into the values needed for saving to the DB.\n    * @return {json}\n    */\n   // toObj() {\n   //     // default label value\n   //     if (!this.label && this.name && this.name != \"\") {\n   //         this.label = this.name;\n   //     }\n\n   //     // untranslate this object:\n   //     var data = super.toObj();\n\n   //     var fieldsToSave = [\n   //         \"id\",\n   //         \"name\",\n   //         \"type\",\n   //         \"processID\",\n   //         \"diagramID\",\n   //         \"where\"\n   //     ];\n   //     fieldsToSave.forEach((f) => {\n   //         data[f] = this[f];\n   //     });\n\n   //     return data;\n   // }\n}\n","/**\n * ABProcessParticipant\n * manages the participant lanes in a Process Diagram.\n *\n * Participants manage users in the system, and provide a way to lookup a SiteUser.\n */\nimport ABMLClass from \"../../platform/ABMLClass\";\n\nconst ABProcessParticipantDefaults = {\n   type: \"process.participant\",\n   // {string} .type\n   // unique key to reference this specific object\n\n   // icon: \"key\" // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\n};\n\nexport default class ABProcessParticipantCore extends ABMLClass {\n   constructor(attributes, process, AB) {\n      super([\"label\"], AB);\n\n      this.process = process;\n      if (!this.processID) {\n         this.processID = process.id;\n      }\n\n      this.fromValues(attributes);\n\n      //// Runtime Values\n      //// these are not stored in the Definition, but rather\n      //// loaded and used from a running process instance.\n   }\n\n   static defaults() {\n      return ABProcessParticipantDefaults;\n   }\n\n   fromValues(attributes) {\n      /*\n        {\n            id: uuid(),\n            name: 'name',\n            type: 'xxxxx',\n            json: \"{json}\"\n        }\n        */\n      // These Values are needed By ABDefinition:\n      this.id = attributes.id;\n      this.name = attributes.name || \"\";\n      this.type = attributes.type || ABProcessParticipantDefaults.type;\n      this.key = attributes.key || ABProcessParticipantDefaults.type;\n\n      // Process Values:\n      this.processID = attributes.processID || null;\n      this.diagramID = attributes.diagramID || \"?diagramID?\";\n      this.laneIDs = attributes.laneIDs || [];\n      this.stashed = false;\n      if (attributes.stashed && attributes.stashed != \"\") {\n         this.stashed = attributes.stashed;\n      }\n\n      function validChecker(attribute) {\n         return typeof attribute != \"undefined\" && attribute != null;\n      }\n\n      this.useRole = 0;\n      if (validChecker(attributes.useRole)) {\n         this.useRole = parseInt(attributes.useRole);\n      }\n\n      this.role = 0;\n      if (validChecker(attributes.role)) {\n         this.role = attributes.role;\n      }\n\n      this.useAccount = 0;\n      if (validChecker(attributes.useAccount)) {\n         this.useAccount = parseInt(attributes.useAccount);\n      }\n\n      this.account = 0;\n      if (validChecker(attributes.account)) {\n         this.account = attributes.account;\n      }\n\n      this.useField = 0;\n      if (validChecker(attributes.useField)) {\n         this.useField = parseInt(attributes.useField);\n      }\n\n      this.userField = [];\n      if (validChecker(attributes.userField)) {\n         this.userField = attributes.userField;\n      }\n\n      // depreciated\n      this.fields = [];\n      if (validChecker(attributes.fields)) {\n         this.fields = attributes.fields;\n      }\n\n      super.fromValues(attributes); // perform translation on this object.\n      // NOTE: keep this at the end of .fromValues();\n\n      if (!this.label) {\n         this.label = this.name;\n      }\n   }\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABApplication instance\n    * into the values needed for saving to the DB.\n    *\n    * Most of the instance data is stored in .json field, so be sure to\n    * update that from all the current values of our child fields.\n    *\n    * @return {json}\n    */\n   toObj() {\n      // default label value\n      if (!this.label && this.name && this.name != \"\") {\n         this.label = this.name;\n      }\n\n      // untranslate this object:\n      var data = super.toObj();\n\n      var fieldsToSave = [\n         \"id\",\n         \"name\",\n         \"type\",\n         \"processID\",\n         \"diagramID\",\n         \"laneIDs\",\n         \"where\",\n         \"useRole\",\n         \"role\",\n         \"useAccount\",\n         \"account\",\n         \"useField\",\n         \"userField\",\n         \"fields\",\n         \"stashed\",\n      ];\n      fieldsToSave.forEach((f) => {\n         data[f] = this[f];\n      });\n\n      return data;\n   }\n\n   /**\n    * @method onProcessReady()\n    * perform any tasks/checks necessary after the parent Process is\n    * setup and ready.\n    */\n   onProcessReady() {}\n}\n","/*\n * ABProcessTaskManager\n *\n * An interface for managing the different ABProcessTasks in AppBuilder.\n *\n */\n\n/*\n * Tasks\n * A name => ABProcessElement hash of the different ABProcessElements available.\n */\nvar Tasks = {};\n\n/*\n * DEFINITIONTYPES\n * a hash of BPMN:Element.type to Default values\n * for each of our Process Objects.\n *\n * NOTE: For Tasks, the key should be target.type,\n * for Triggers or End elements, the key should be\n * the target.eventDefinitionType\n */\nvar DEFINITIONTYPES = {};\n\nvar AllProcessElements = [\n   await import(\"../../platform/process/tasks/ABProcessEnd\"),\n   await import(\"../../platform/process/tasks/ABProcessGatewayExclusive\"),\n   await import(\"../../platform/process/tasks/ABProcessTaskEmail\"),\n   await import(\"../../platform/process/tasks/ABProcessTaskService\"),\n   await import(\"../../platform/process/tasks/ABProcessTaskServiceAccountingBatchProcessing\"),\n   await import(\"../../platform/process/tasks/ABProcessTaskServiceAccountingFPClose\"),\n   await import(\"../../platform/process/tasks/ABProcessTaskServiceAccountingFPYearClose\"),\n   await import(\"../../platform/process/tasks/ABProcessTaskServiceAccountingJEArchive\"),\n   await import(\"../../platform/process/tasks/ABProcessTaskServiceCalculate\"),\n   await import(\"../../platform/process/tasks/ABProcessTaskServiceInsertRecord\"),\n   await import(\"../../platform/process/tasks/ABProcessTaskServiceQuery\"),\n   await import(\"../../platform/process/tasks/ABProcessTaskServiceGetResetPasswordUrl\"),\n   await import(\"../../platform/process/tasks/ABProcessTaskSubProcess\"),\n   await import(\"../../platform/process/tasks/ABProcessTaskUser\"),\n   await import(\"../../platform/process/tasks/ABProcessTaskUserApproval\"),\n   await import(\"../../platform/process/tasks/ABProcessTaskUserExternal\"),\n   await import(\"../../platform/process/tasks/ABProcessTrigger\"),\n   await import(\"../../platform/process/tasks/ABProcessTriggerLifecycle\"),\n   await import(\"../../platform/process/tasks/ABProcessTriggerTimer\"),\n];\n\nAllProcessElements.forEach((ELEMENT) => {\n   ELEMENT = ELEMENT.default;\n   Tasks[ELEMENT.defaults().key] = ELEMENT;\n\n   switch (ELEMENT.defaults().category) {\n      case \"start\":\n      case \"end\":\n         DEFINITIONTYPES[ELEMENT.DiagramReplace().target.eventDefinitionType] =\n            ELEMENT.defaults();\n         break;\n\n      case \"gateway\":\n      case \"task\":\n         DEFINITIONTYPES[ELEMENT.DiagramReplace().target.type] =\n            ELEMENT.defaults();\n         break;\n   }\n});\n\nexport default {\n   /*\n    * @function allTasks\n    * return all the currently defined ABProcessTasks in an array.\n    * @return [{ABProcessTask},...]\n    */\n   allTasks: function () {\n      var tasks = [];\n      for (var t in Tasks) {\n         tasks.push(Tasks[t]);\n      }\n      return tasks;\n   },\n\n   /*\n    * @function newTask\n    * return an instance of an ABProcessTask based upon the values.type value.\n    * @return {ABProcessTask}\n    */\n   newTask: function (values, process, AB) {\n      if (values.key) {\n         return new Tasks[values.key](values, process, AB);\n      } else {\n         //// TODO: what to do here?\n      }\n   },\n\n   DiagramReplaceDefinitionsForType: function (type) {\n      var definitions = AllProcessElements.filter((e) => {\n         return e.defaults().category == type;\n      }).map((e) => {\n         return e.DiagramReplace();\n      });\n      return definitions;\n   },\n\n   StartEvents: function () {\n      return this.DiagramReplaceDefinitionsForType(\"start\");\n   },\n\n   Gateways: function () {\n      return this.DiagramReplaceDefinitionsForType(\"gateway\");\n   },\n\n   Tasks: function () {\n      return this.DiagramReplaceDefinitionsForType(\"task\");\n   },\n\n   EndEvents: function () {\n      return this.DiagramReplaceDefinitionsForType(\"end\");\n   },\n\n   definitionForElement: function (element) {\n      // pull the key from the embedded .eventDefinition\n      // if there is one\n      var key = null;\n      if (element.businessObject.eventDefinitions) {\n         var def = element.businessObject.eventDefinitions[0];\n         if (def) {\n            key = def.$type;\n         }\n      }\n\n      // if not, then just use the base .type\n      if (!key) {\n         key = element.type;\n      }\n\n      return DEFINITIONTYPES[key];\n   },\n};\n","import ABMLClass from \"../../../platform/ABMLClass\";\n\nexport default class ABProcessTaskCore extends ABMLClass {\n   constructor(attributes, process, AB, defaultValues) {\n      super([\"label\"], AB);\n\n      this.defaults = defaultValues || { key: \"core\", icon: \"core\" };\n      // {obj} .defaults\n      // a value hash of default values for an ABProcessTask\n      // NOTE: needs to be set before .fromValues()\n\n      this.fromValues(attributes);\n\n      this.process = process;\n      if (!this.processID) {\n         this.processID = process.id;\n      }\n      // {ABProcess} .process\n      // The parent ABProcess this process element is a part of.\n\n      //// Runtime Values\n      //// these are not stored in the Definition, but rather\n      //// loaded and used from a running process instance.\n      this.state = null;\n   }\n\n   ///\n   /// Static Methods\n   ///\n\n   fromValues(attributes) {\n      /*\n        {\n            id: uuid(),\n            name: 'name',\n            type: 'xxxxx',\n            json: \"{json}\"\n        }\n        */\n      // ABDefinition Related fields:\n      this.id = attributes.id;\n      this.name = attributes.name || \"\";\n      this.type = attributes.type || \"process.task.unknown\";\n\n      // ABProcess related fields:\n      this.key = attributes.key || this.defaults.key || \"?key?\";\n      this.processID = attributes.processID || null;\n      this.diagramID = attributes.diagramID || \"?diagramID?\";\n      this.laneDiagramID = attributes.laneDiagramID || \"?laneID?\";\n      // laneDiagramID : connects to the parent object that defines any\n      //      default User information for the Task.  In our case, it\n      //      might be a {ABProcessParticipant} object, or a {ABProcessLane}\n      //      object.  by default, a diagram's Participant obj doesn't define\n      //      any lanes, and therefore can provide that info.  Once a lane\n      //      is added, however, an object is assigned to it, and the\n      //      Lane will provide that info.\n\n      // initialize any defined settings\n      if (this.defaults && this.defaults.settings) {\n         this.defaults.settings.forEach((s) => {\n            if (typeof attributes[s] == \"undefined\") this[s] = null;\n            else this[s] = attributes[s];\n         });\n      }\n\n      super.fromValues(attributes); // perform translation on this object.\n      // NOTE: keep this at the end of .fromValues();\n\n      if (!this.label) {\n         this.label = this.name;\n      }\n   }\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABApplication instance\n    * into the values needed for saving to the DB.\n    *\n    * Most of the instance data is stored in .json field, so be sure to\n    * update that from all the current values of our child fields.\n    *\n    * @return {json}\n    */\n   toObj() {\n      // default label value\n      if (!this.label && this.name && this.name != \"\") {\n         this.label = this.name;\n      }\n\n      // untranslate this object:\n      var data = super.toObj();\n\n      var fieldsToSave = [\n         \"id\",\n         \"name\",\n         \"type\",\n         \"processID\",\n         \"diagramID\",\n         \"laneDiagramID\",\n         \"key\",\n      ];\n      fieldsToSave.forEach((f) => {\n         data[f] = this[f];\n      });\n\n      // save any defined settings\n      if (this.defaults && this.defaults.settings) {\n         this.defaults.settings.forEach((s) => {\n            data[s] = this[s];\n         });\n      }\n\n      return data;\n   }\n\n   ////\n   //// Process Instance Methods\n   ////\n\n   /**\n    * errorConfig()\n    * Respond with an error when expected configuration parameters do not\n    * pull data.\n    * @param {obj} instance\n    *        the instance data of this task\n    * @param {string} msg\n    *        the display message for this error.\n    * @param {array[string]} fields\n    *        an array of parameter keys that should be included in the error\n    *        for additional information.\n    * @return {Promise.reject(error)}\n    */\n   errorConfig(instance, msg, fields = []) {\n      this.log(instance, msg);\n      var error = new Error(`${this.type}: ${msg}`);\n      var info = { task: this };\n      if (!Array.isArray(fields)) fields = [fields];\n      fields.forEach((field) => {\n         info[field] = this[field];\n      });\n      this.AB.notify.builder(error, info);\n      return Promise.reject(error);\n   }\n\n   /**\n    * initState()\n    * setup this task's initial state variables\n    * @param {obj} context\n    *        the context data of the process instance\n    * @param {obj} defaults\n    *        any values to include from our child classes\n    * @param {obj} val\n    *        any values to override the default state\n    */\n   initState(context, defaults, val) {\n      defaults = defaults || {};\n      if (!val) {\n         val = defaults;\n         defaults = {};\n\n         // in this case, then auto initi blank instanceValues:\n         if (this.defaults && this.defaults.instanceValues) {\n            this.defaults.instanceValues.forEach((v) => {\n               defaults[v] = null;\n            });\n         }\n      }\n\n      context.taskState = context.taskState || {};\n\n      // don't overwrite your settings if they already exist:\n      if (!context.taskState[this.diagramID]) {\n         context.taskState[this.diagramID] = {\n            initialized: true,\n            status: \"initialized\",\n         };\n         for (var d in defaults) {\n            context.taskState[this.diagramID][d] = defaults[d];\n         }\n         for (var v in val) {\n            context.taskState[this.diagramID][v] = val[v];\n         }\n      }\n   }\n\n   /*\n    * @function isEndTask\n    * return true if the current type of task is an End task. False otherwise.\n    * @return {bool}\n    */\n   isEndTask() {\n      return false;\n   }\n\n   /**\n    * log()\n    * enter a log in the current process instance\n    * @param {obj} instance  the current ABProcessInstance\n    * @param {...} ...allArgs the remaining parameters sent to the log\n    */\n   log(instance, ...allArgs) {\n      var text = `${this.diagramID} : ${\n         this.name ? this.name : this.key\n      } : ${allArgs.join(\" \")}`;\n      instance.log.push(text);\n   }\n\n   /**\n    * myLane()\n    * return the ABProcessParticipant | ABProcessLane element we are\n    * in.\n    * @return {ABProcessParticipant|ABProcessLane}\n    */\n   myLane() {\n      return this.process.elementForDiagramID(this.laneDiagramID);\n   }\n\n   /**\n    * myState()\n    * return the current state values for this ABProcessTask\n    * @param {obj} instance  the current ABProcessInstance\n    * @return {obj}\n    */\n   myState(instance) {\n      return instance.context.taskState[this.diagramID];\n   }\n\n   /**\n    * nextTasks()\n    * follow the current instance diagram and return the next task(s)\n    * after this task.\n    * @param {obj} instance  the current ABProcessInstance\n    * @return {array}  [ABProcessTask, ...] or {null} if an error\n    */\n   nextTasks(instance) {\n      var nextTasks = [];\n\n      var myDiagramObj = instance.hashDiagramObjects[this.diagramID];\n      if (!myDiagramObj) {\n         let error = new Error(\n            `Configuration Error: Did not find my definition for dID[${this.diagramID}]`\n         );\n         this.onError(instance, error);\n         return null;\n      }\n\n      // myDiagramObj :\n      // {\n      //     \"bpmn2:outgoing\": [{\"_text\": \"SequenceFlow_00fbxm3\"} ...],\n      //     \"_attributes\": {id: \"StartEvent_1\"},\n      //     \"_type\": \"start\"\n      // }\n\n      // find my possible exits:\n      var exitFlows = myDiagramObj[\"bpmn2:outgoing\"];\n      if (!exitFlows) {\n         let error = new Error(\n            `Configuration Error: Did not find any outgoing flows for dID[${this.diagramID}]`\n         );\n         this.AB.notify.builder(error, { task: this });\n         this.onError(instance, error);\n         return null;\n      }\n\n      if (!Array.isArray(exitFlows)) {\n         exitFlows = [exitFlows];\n      }\n\n      var tasksFromFlow = (flow) => {\n         // follow a flow and grab each of it's exit tasks\n         // place them into nextTasks[];\n\n         var flowObj = instance.hashDiagramObjects[flow[\"_text\"]];\n         if (!flowObj) return;\n\n         var targetIDs = flowObj[\"_attributes\"][\"targetRef\"];\n         if (!targetIDs) return;\n\n         if (!Array.isArray(targetIDs)) {\n            targetIDs = [targetIDs];\n         }\n\n         targetIDs.forEach((tid) => {\n            var targetTask = this.process.elementForDiagramID(tid);\n            if (targetTask) {\n               if (nextTasks) {\n                  nextTasks.push(targetTask);\n               }\n            } else {\n               var error = new Error(\n                  `Configuration Error: No ProcessTask instance for diagramID[${tid}]`\n               );\n               this.AB.notify.builder(error, { task: this });\n               this.onError(instance, error);\n               nextTasks = null;\n            }\n         });\n      };\n\n      exitFlows.forEach((f) => {\n         tasksFromFlow(f);\n      });\n\n      return nextTasks;\n   }\n\n   /**\n    * onError()\n    * perform the following actions (log it) on an error.\n    * @param {obj} instance  the current ABProcessInstance\n    * @param {Error} error\n    */\n   onError(instance, error) {\n      if (error) {\n         var text = `${error.toString()}`;\n         this.log(instance, text);\n      }\n      var myState = this.myState(instance);\n      myState.status = \"error\";\n   }\n\n   /**\n    * processDataFields()\n    * return an array of avaiable data fields that this element\n    * can request from other ProcessElements.\n    * Different Process Elements can make data available to other\n    * process Elements.\n    * @return {array} | null\n    */\n   processDataFields() {\n      return null;\n   }\n\n   /**\n    * processData()\n    * return the current value requested for the given data key.\n    * @param {obj} instance\n    * @return {mixed} | null\n    */\n   processData(instance, key) {\n      return null;\n   }\n\n   /**\n    * processDataObjects()\n    * return an array of avaiable ABObjects that this element\n    * can provide to other ProcessElements.\n    * @return {array} | null\n    */\n   processDataObjects() {\n      return null;\n   }\n\n   /**\n    * hashProcessDataValues()\n    * return a hash of live Process Data Values\n    * @param {obj} instance\n    * @return {array} | null\n    */\n   hashProcessDataValues(instance) {\n      var listDataFields = this.process.processDataFields(this);\n      var currentProcessValues = {};\n      listDataFields.forEach((f) => {\n         currentProcessValues[f.key] = this.process.processData(this, [\n            instance,\n            f.key,\n         ]);\n      });\n      return currentProcessValues;\n   }\n\n   /**\n    * reset()\n    * prepare this task to run again if it was already completed.\n    *\n    * This might happen in a process where a loop is formed and tasks\n    * are repeated until a certain outcome.\n    *\n    * @param {obj} instance  the current ABProcessInstance\n    */\n   reset(instance) {\n      // a task wants to run me.  Possibly again.\n      var myState = this.myState(instance);\n\n      // if I haven't setup my state (why?) then just\n      // do that again:\n      if (!myState) {\n         this.initState(instance.context);\n      } else {\n         // if I have already \"completed\" and we are being\n         // asked to run again (it's possible)\n         if (myState.status == \"completed\" || myState.status == \"error\") {\n            // remove my current state\n            delete instance.context.taskState[this.diagramID];\n\n            // store a new state in the context\n            this.initState(instance.context);\n\n            // remember our previous state\n            var newState = this.myState(instance);\n            newState._prevState = myState;\n            this.log(instance, \" Reset() called. Running again. \");\n         }\n      }\n   }\n\n   /**\n    * stateCompleted()\n    * mark this task has having completed.\n    * @param {obj} instance  the current ABProcessInstance\n    */\n   stateCompleted(instance) {\n      var myState = this.myState(instance);\n      myState.status = \"completed\";\n   }\n\n   /**\n    * stateUpdate()\n    * update my state values with the given values data\n    * @param {obj} instance  the current ABProcessInstance\n    * @param {obj} values    the new state values\n    */\n   stateUpdate(instance, values) {\n      values = values || {};\n      var myState = this.myState(instance);\n      for (var v in values) {\n         myState[v] = values[v];\n      }\n   }\n\n   /**\n    * wantToDoSomething()\n    * determine if this task still has something to do.\n    * @param {obj} instance  the instance data of the process we are working on\n    * @return {bool} true if there is still pending actions\n    */\n   wantToDoSomething(instance) {\n      var state = this.myState(instance);\n      if (state) {\n         return state.status != \"completed\" && state.status != \"error\";\n      } else {\n         // my state wasn't defined?\n         console.warn(\n            \"ABProcessTaskCore:wantToDoSomething(): called without having initialized our state first.\",\n            instance\n         );\n         // initialize our state and try again\n         this.initState(instance.context);\n         return this.wantToDoSomething(instance);\n      }\n   }\n\n   /**\n    * @method onProcessReady()\n    * Perform any setup actions after the parent process has indicated it is \"ready\"\n    */\n   onProcessReady() {}\n\n   get startElements() {\n      let startElems =\n         this.process.elements(\n            (elem) =>\n               elem && elem.defaults && elem.defaults.category === \"start\"\n         ) || [];\n      return startElems;\n   }\n\n   get previousElements() {\n      return this.process.connectionPreviousTask(this);\n   }\n\n   get objectOfStartElement() {\n      const startElem = this.startElements[0];\n      if (!startElem) return null;\n\n      return this.AB.objectByID(startElem.objectID);\n   }\n\n   get objectOfPrevElement() {\n      let prevElem = this.previousElements[0];\n      if (!prevElem) return null;\n\n      let objectID;\n      switch (prevElem.type) {\n         case \"process.task.service.query\":\n            objectID = prevElem.qlObj ? prevElem.qlObj.objectID : null;\n            break;\n         case \"process.task.service.insertRecord\":\n         default:\n            objectID = prevElem.objectID;\n            break;\n      }\n\n      return this.AB.objectByID(objectID);\n   }\n}\n","import ABProcessElement from \"../../../platform/process/tasks/ABProcessElement.js\";\n\nlet SubProcessDefaults = {\n   category: \"task\",\n   // category: {string} | null\n   // if this Element should show up on one of the popup replace menus, then\n   // specify one of the categories of elements it should be an option for.\n   // Available choices: [ \"start\", \"gateway\", \"task\", \"end\" ].\n   //\n   // if it shouldn't show up under the popup menu, then leave this null\n\n   icon: \"object-group\", // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\n   // icon: {string}\n   // font-awesome icon reference.  (without the 'fa-').  so 'user'  to reference 'fa-user'\n\n   instanceValues: [],\n   // instanceValues: {array}\n   // a list of values this element tracks as it is operating in a process.\n\n   key: \"SubProcess\",\n   // key: {string}\n   // unique key to reference this specific Task\n\n   settings: [\n      \"isEnable\",\n      \"parameterId\",\n      \"connectionAttrs\",\n      \"elementIDs\",\n      \"loopType\",\n   ],\n};\n\nconst NOSPAM = {\n   /*message : bool */\n};\n// prevent sending the same message over and over.\n\nexport default class SubProcessCore extends ABProcessElement {\n   constructor(attributes, process, AB) {\n      attributes.type = attributes.type || \"process.task.service.subProcess\";\n      super(attributes, process, AB, SubProcessDefaults);\n\n      // listen\n   }\n\n   // return the default values for this DataField\n   static defaults() {\n      return SubProcessDefaults;\n   }\n\n   static DiagramReplace() {\n      // taken from \"bpmn-js/lib/features/replace/ReplaceOptions\"\n      return {\n         label: \"Sub Process\",\n         actionName: \"replace-with-subprocess\",\n         className: \"bpmn-icon-subprocess-expanded\",\n         target: {\n            type: \"bpmn:SubProcess\",\n            isExpanded: true,\n         },\n      };\n   }\n\n   fromValues(attributes) {\n      super.fromValues(attributes);\n\n      // Convert string to boolean\n      this.isEnable = this.isEnable == null ? true : JSON.parse(this.isEnable);\n\n      let currElements = this._elements || {};\n      this._unknownElementIDs = [];\n      this._elements = {};\n      (attributes.elementIDs || []).forEach((eID) => {\n         let ele = this.AB.processElementNew(eID, this);\n         if (ele) {\n            this._elements[eID] = ele;\n         } else {\n            // current eID isn't one of our definitions yet, so might be\n            // a temporary .diagramID from an unsaved task:\n            if (currElements[eID]) {\n               this._elements[eID] = currElements[eID];\n            } else {\n               this._unknownElementIDs.push(eID);\n            }\n         }\n      });\n\n      this._unknownElementIDs.forEach((eID) => {\n         let key = `Process[${this.processID}] Task[${this.label}] is referencing an unknown element id:[${eID}]`;\n         if (!NOSPAM[key]) {\n            let err = new Error(key);\n            this.AB.notify.builder(err, { processTask: this.id, eID });\n            NOSPAM[key] = true;\n         }\n      });\n\n      this._connections = attributes.connectionAttrs || {};\n   }\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABApplication instance\n    * into the values needed for saving to the DB.\n    *\n    * Most of the instance data is stored in .json field, so be sure to\n    * update that from all the current values of our child fields.\n    *\n    * @return {json}\n    */\n   toObj() {\n      let data = super.toObj();\n\n      data.elementIDs = [];\n      for (let e in this._elements) {\n         data.elementIDs.push(this._elements[e].id);\n      }\n\n      data.connectionAttrs = this._connections;\n\n      return data;\n   }\n\n   /**\n    * @method processDataFields()\n    * return an array of avaiable data fields that this element\n    * can provide to other ProcessElements.\n    * Different Process Elements can make data available to other\n    * process Elements.\n    * @param {ABProcessElement} currElement\n    *        the ABProcessElement that is requesting the data.\n    * @return {array} | null\n    */\n   processDataFields(currElement) {\n      if (this.parameterId == null) return [];\n\n      // only call processDataFields once, filter it to get the different queries\n      let dataFieldsAll = this.process.processDataFields(this) || [];\n\n      // get the subtask data\n      let dataFieldOpt = dataFieldsAll.filter(\n         (opt) => opt.key === this.parameterId\n      )[0];\n\n      // get data from insert tasks\n      let dataFieldsAllInserted = dataFieldsAll.filter(\n         (opt) => (opt?.field?.key ?? opt?.field) === \"InsertedRecord\"\n      );\n\n      if (dataFieldOpt == null) return [];\n\n      let result = [];\n\n      // Connect field type\n      if (\n         dataFieldOpt.field &&\n         dataFieldOpt.field.key == \"connectObject\" &&\n         dataFieldOpt.field.datasourceLink &&\n         dataFieldOpt.field.datasourceLink.fields\n      ) {\n         result.push({\n            key: `${this.id}.uuid`,\n            label: `${this.label}->Repeat Data.ID`,\n            object: dataFieldOpt.field.datasourceLink,\n         });\n\n         dataFieldOpt.field.datasourceLink.fields().forEach((f) => {\n            result.push({\n               key: `${this.id}.${f.id}`,\n               label: `${this.label}->Repeat Data.${f.label}`,\n               field: f,\n               object: f.object,\n            });\n         });\n      }\n      // Other field types\n      else {\n         result.push({\n            key: dataFieldOpt.field\n               ? `${this.id}.${dataFieldOpt.field.id}`\n               : `${this.id}.subProcess`,\n            label: `${this.label}->Repeat Data`,\n            field: dataFieldOpt.field,\n            object: dataFieldOpt.object,\n         });\n      }\n\n      dataFieldsAllInserted.forEach((opt) => {\n         result.push({\n            key: `${opt.key || opt.id}`,\n            label: `Parent Process Data->${opt.label}`,\n            field: opt.field,\n            object: opt.object,\n         });\n      });\n\n      // Get any tasks that exist inside the subprocess\n      let previousFields = this.process.processDataFields.call(\n         this,\n         currElement\n      );\n      if (previousFields && previousFields.length > 0) {\n         result = result.concat(previousFields);\n      }\n\n      return result;\n   }\n\n   /**\n    * @method processData()\n    * return an array of avaiable ABObjects that are represented\n    * by the data previous ProcessElements are working with.\n    * @param {ABProcessElement} currElement\n    *        the ABProcessElement that is requesting the data.\n    * @return {array} | null\n    */\n   processData(currElement, params) {\n      let instance = params[0];\n      let key = params[1];\n      let data;\n\n      if (instance && key?.startsWith?.(this.id)) {\n         let fieldId = key.split(\".\")[1];\n         let myState = this.myState(instance);\n         let stateData = myState ? myState.data : null;\n         data = stateData;\n\n         if (stateData && fieldId) {\n            let dataFieldOpt = (\n               this.process.processDataFields(this) || []\n            ).filter((opt) => opt.key == this.parameterId)[0];\n\n            if (dataFieldOpt?.field?.key == \"connectObject\") {\n               if (!Array.isArray(stateData)) stateData = [stateData];\n\n               // Extract data\n               data = stateData.map((item) => {\n                  if (fieldId == \"uuid\" || fieldId == \"id\") {\n                     return item.uuid || item.id || item;\n                  } else if (dataFieldOpt.field.datasourceLink) {\n                     let returnField = dataFieldOpt.field.datasourceLink.fields(\n                        (f) => f.id == fieldId\n                     )[0];\n                     if (returnField) return item[returnField.columnName];\n                     else return item;\n                  }\n               });\n            }\n         }\n      }\n\n      // Filter none data items\n      if (Array.isArray(data)) data = data.filter((d) => d != null);\n\n      if (data == null || !data.length)\n         data = this.process.processData.call(this, currElement, params);\n\n      if (data == null || !data.length)\n         data = this.process.processData(this, params);\n\n      return data;\n   }\n\n   allPreviousTasks(...params) {\n      return this.process.allPreviousTasks.call(this, ...params);\n   }\n\n   allPreviousConnectionsForElement(...params) {\n      return this.process.allPreviousConnectionsForElement.call(\n         this,\n         ...params\n      );\n   }\n\n   allPreviousConnectionsForConnection(...params) {\n      return this.process.allPreviousConnectionsForConnection.call(\n         this,\n         ...params\n      );\n   }\n\n   //\n   // Diagram Elements\n   //\n\n   /**\n    * @method connections()\n    * return an array of connections that describe the relationships between\n    * our process elements.\n    * @param {fn} fn an iterator that returns true if the provided element\n    *                should be returned.\n    * @return [{SimpleConnectionObj}]\n    */\n   connections(fn) {\n      return this.process.connections.call(this, fn);\n   }\n\n   /**\n    * @method connectionForDiagramID()\n    * return the connection for the given diagram id\n    * @param {string} dID\n    *        the bpmn:Element diagram id\n    */\n   connectionForDiagramID(dID) {\n      if (!dID) return;\n\n      return this.process.connectionForDiagramID.call(this, dID);\n   }\n\n   /**\n    * @method connectionsIncoming()\n    * return the connections that are entering this Element\n    * @param {string} dID\n    *        the bpmn:Element diagram id\n    */\n   connectionsIncoming(dID) {\n      if (!dID) return;\n\n      return this.process.connectionsIncoming.call(this, dID);\n   }\n\n   /**\n    * @method connectionsOutgoing()\n    * return the connections that are leaving this Element\n    * @param {string} dID\n    *        the bpmn:Element diagram id\n    */\n   connectionsOutgoing(dID) {\n      if (!dID) return;\n\n      return this.process.connectionsOutgoing.call(this, dID);\n   }\n\n   /**\n    * @method connectionRemove()\n    * remove the connection info for the given bpmn:element\n    * @param {BMPNDiagramOBJ} element\n    *        the {element} returned from the BPMN.io modeling library event.\n    */\n   connectionRemove(element) {\n      if (!element) return;\n\n      this.process.connectionRemove.call(this, element);\n   }\n\n   /**\n    * @method connectionSimplyElement()\n    * given a BPMN diagram element, return a simplified object that describes\n    * the connection between two elements.\n    * @param {BMPNDiagramOBJ} element\n    *        the {element} returned from the BPMN.io modeling library event.\n    * @return {SimpleConnectionObj}\n    *        .id : {string} diagram id of the connection element\n    *        .type : {string} the type of connection\n    *        .from : {string} the diagram id of the source element\n    *        .to : {string} the diagram id of the dest element\n    */\n   connectionSimplyElement(element) {\n      if (!element) return;\n\n      return this.process.connectionSimplyElement.call(this, element);\n   }\n\n   /**\n    * @method connectionUpsert()\n    * add or update the connection information for the given bpmn:element\n    * @param {BMPNDiagramOBJ} element\n    *        the {element} returned from the BPMN.io modeling library event.\n    */\n   connectionUpsert(element) {\n      if (!element) return;\n\n      this.process.connectionUpsert.call(this, element);\n   }\n\n   /**\n    * @method connectionPreviousTask()\n    * return the ABProcessElement(s) that was a previous Element\n    * (eg connects to) this element.\n    * @param {ABProcessElement} currElement\n    * @return {array}\n    */\n   connectionPreviousTask(currElement) {\n      if (!currElement) return;\n\n      return this.process.connectionPreviousTask.call(this, currElement);\n   }\n\n   /**\n    * @method elements()\n    * return an array of elements that match the given filter (or all elements\n    * if no filter is provided).\n    * @param {fn} fn an iterator that returns true if the provided element\n    *                should be returned.\n    * @return {[ABProcessTask, ABProcessParticipant, etc...]}\n    */\n   elements(fn = () => true) {\n      return this.process.elements.call(this, fn);\n   }\n\n   /**\n    * @method elementAdd()\n    * insert an element to be tracked by this process.\n    * @param {ABProcessElement} element\n    *        the full instance of an ABProcessElement to track.\n    */\n   elementAdd(element) {\n      if (!element) return;\n\n      this.process.elementAdd.call(this, element);\n   }\n\n   /**\n    * @method elementForDiagramID()\n    * return the object that is tied to the given xml diagram ID.\n    * @param {string} dID the diagram ID\n    * @return {ABProcess[OBJ]}\n    */\n   elementForDiagramID(dID) {\n      if (!dID) return null;\n\n      return this.process.elementForDiagramID.call(this, dID);\n   }\n\n   /**\n    * @method elementRemove()\n    * remove an element from being tracked by this process.\n    * @param {obj|ABProcessElement} def\n    *        a definition of, or full Object instance of the ABProcessElement\n    *        to remove.\n    */\n   elementRemove(def) {\n      if (!def) return;\n\n      this.process.elementRemove.call(this, def);\n   }\n}\n","/*\n * ABViewContainerCore\n *\n * An ABViewContainerCore defines a UI display component.\n *\n * A container might have multiple columns of display info.\n *\n */\n\nimport ABView from \"../../platform/views/ABView\";\n\n// function L(key, altText) {\n// \treturn AD.lang.label.getLabel(key) || altText;\n// }\n\nconst ABViewDefaults = {\n   key: \"viewcontainer\", // {string} unique key for this view\n   icon: \"braille\", // {string} fa-[icon] reference for this view\n   labelKey: \"Container\", // {string} the multilingual label key for the class label\n};\n\nconst ABPropertyComponentDefaults = {\n   columns: 1,\n   gravity: 1,\n   movable: true,\n   removable: true,\n};\n\nexport default class ABViewContainerCore extends ABView {\n   /**\n    * @param {obj} values  key=>value hash of ABView values\n    * @param {ABApplication} application the application object this view is under\n    * @param {ABView} parent the ABView this view is a child of. (can be null)\n    * @param {obj} defaultValues special sub class defined default values.\n    */\n   constructor(values, application, parent, defaultValues) {\n      super(values, application, parent, defaultValues || ABViewDefaults);\n   }\n\n   static common() {\n      return ABViewDefaults;\n   }\n\n   static defaultValues() {\n      return ABPropertyComponentDefaults;\n   }\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      super.fromValues(values);\n\n      // convert from \"0\" => 0\n      this.settings.columns = parseInt(\n         this.settings.columns || ABPropertyComponentDefaults.columns\n      );\n\n      if (typeof this.settings.gravity != \"undefined\") {\n         this.settings.gravity.map(function (gravity) {\n            return parseInt(gravity);\n         });\n      }\n\n      if (this.settings.removable != null) {\n         this.settings.removable = JSON.parse(this.settings.removable); // convert to boolean\n      } else {\n         this.settings.removable = ABPropertyComponentDefaults.removable;\n      }\n\n      if (this.settings.movable != null) {\n         this.settings.movable = JSON.parse(this.settings.movable); // convert to boolean\n      } else {\n         this.settings.movable = ABPropertyComponentDefaults.movable;\n      }\n   }\n\n   viewsSortByPosition() {\n      // Sort views from y, x positions\n      return this.views().sort((a, b) => {\n         if (a.position.y == b.position.y) return a.position.x - b.position.x;\n         else return a.position.y - b.position.y;\n      });\n   }\n\n   // saveReorder() {\n   //    return this.application.viewReorder(this);\n   // }\n}\n","/*\n * ABViewCore\n *\n * ABViewCore defines the common ABView structure that is shared between\n * the client and the server.  Mostly how it manages it's internal data, and\n * how it is related to the ABView classes.\n *\n */\n\nimport ABMLClass from \"../../platform/ABMLClass\";\n\nconst ABViewDefaults = {\n   key: \"view\", // {string} unique key for this view\n   icon: \"window-maximize\", // {string} fa-[icon] reference for this view\n   labelKey: \"ab.components.view\", // {string} the multilingual label key for the class label\n   tabicon: \"\", // no default tab icons\n};\n\nconst ABViewPropertyComponentDefaults = {\n   label: \"\",\n};\n\nexport default class ABViewCore extends ABMLClass {\n   /**\n    * @param {obj} values  key=>value hash of ABView values\n    * @param {ABApplication} application the application object this view is under\n    * @param {ABView} parent the ABView this view is a child of. (can be null)\n    */\n   constructor(values, application, parent, defaultValues) {\n      super([\"label\"], application.AB);\n\n      this.__events = [];\n      // keep track of any event listeners attached to this ABView object\n\n      this.defaults = defaultValues || ABViewDefaults;\n\n      this.application = application;\n\n      this.parent = parent || null;\n\n      this.warningsSilent = false;\n      // {bool}\n      // Should we suppress our configuration warnings?\n\n      this.__missingViews = [];\n      // {array}\n      // Any ABView.id we have stored that we can't find.\n\n      this.fromValues(values);\n   }\n\n   static common() {\n      return ABViewDefaults;\n   }\n\n   static defaultValues() {\n      return ABViewPropertyComponentDefaults;\n   }\n\n   /**\n    * @method newInstance()\n    * return a new instance of this ABView.  Most likely called from interfaces\n    * that create new UI elements like the ABDesigner.\n    * @param {ABApplication} application  \t: the root ABApplication this view is under\n    * @param {ABView/ABApplication} parent\t: the parent object of this ABView.\n    * @return {ABView}\n    */\n   static newInstance(application, parent) {\n      // return a new instance from ABViewManager:\n      return application.viewNew(\n         { key: this.common().key },\n         application,\n         parent\n      );\n   }\n\n   viewKey() {\n      return this.defaults.key;\n   }\n\n   viewIcon() {\n      return this.defaults.icon;\n   }\n\n   tabIcon() {\n      return this.defaults.tabicon;\n   }\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABView instance\n    * into the values needed for saving to the DB.\n    *\n    * @return {json}\n    */\n   toObj() {\n      // // NOTE: ensure we have a uuid() set:\n      // if (!this.id) {\n      //    this.id = this.application.uuid();\n      // }\n\n      // this.application.unTranslate(this, this, [\"label\"]);\n\n      // MLClass translation\n      var obj = super.toObj();\n\n      var result = {\n         id: this.id,\n         type: this.type || \"view\",\n         key: this.key,\n         icon: this.icon,\n         tabicon: this.tabicon,\n         name: this.name,\n         settings: this.AB.cloneDeep(this.settings || {}),\n         accessLevels: this.accessLevels,\n         translations: obj.translations,\n      };\n\n      // encode our child view references\n      result.viewIDs = (this._views || []).map((v) => v.id).filter((id) => id);\n      result.viewIDs = result.viewIDs.concat(this.__missingViews);\n\n      if (this.position) result.position = this.position;\n\n      // encode our .isRoot() reference.\n      // (NOTE: this is set so our server side code can distinguish) between a .view\n      // and a root page:\n      // NOTE: we intentionally do NOT pull this out in .fromValues()\n      result.isRoot = this.isRoot();\n\n      return result;\n   }\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      this.id = values.id; // NOTE: only exists after .save()\n      // {string} .id\n      // the uuid of this ABObject Definition.\n\n      this.type = values.type || \"view\";\n      // {string} .type\n      // the type of ABDefinition this is.\n\n      this.key = values.key || this.viewKey();\n      // {string} .key\n      // the unique lookup key for our ABViewManager to create new\n      // instances of this object.\n\n      this.icon = values.icon || this.viewIcon();\n      // {string} .icon\n      // the font awesome icon reference for showing an icon for this\n      // view in the AppBuilder interface builder.\n\n      this.tabicon = values.tabicon || this.tabIcon();\n\n      this.name = values.name;\n      // {string} .name\n      // A name reference for this ABView. This is a reference that isn't\n      // translateable and will be used for lookups across languages.\n\n      // if this is being instantiated on a read from the Property UI,\n      // .label is coming in under .settings.label\n      values.settings = values.settings || {};\n      this.label = values.label || values.settings.label || \"?label?\";\n\n      this.settings = values.settings || {};\n      // {obj} .settings\n      // the property settings for this ABView\n\n      // make sure .settings.height is an int and not a string\n      this.settings.height = parseInt(this.settings.height || 0);\n\n      this.accessLevels = values.accessLevels || {};\n      // {obj} .accessLevels\n      // Hash: { ABRole.id : accessLevel }\n      // tracks the Role -> AccessLevel settings of this particular\n      // view.\n      // accessLevel: 0 : no access, 1 : view only, 2: full access\n\n      // let the MLClass now process the translations:\n      super.fromValues(values);\n\n      // If the View / DataCollection does not have a .name already,\n      // use the English label translation as the .name instead.\n      if (!this.name && Array.isArray(this.translations)) {\n         for (var i = 0; i < this.translations.length; i++) {\n            if (i == 0) {\n               // Use the first label found, in case there is no 'en'\n               this.name = this.translations[i].label;\n            }\n            if (this.translations[i].language_code == \"en\") {\n               // But the 'en' label will have final priority\n               this.name = this.translations[i].label;\n               break;\n            }\n         }\n      }\n\n      // default value for our label\n      if (this.label == \"?label?\") {\n         if (this.parent) {\n            this.label = this.parent.label + \".\" + this.defaults.key;\n         }\n      }\n\n      var views = [];\n      this.__missingViews = this.__missingViews || [];\n      (values.viewIDs || []).forEach((id) => {\n         var def = this.AB.definitionByID(id);\n         if (def) {\n            views.push(this.application.viewNew(def, this.application, this));\n         } else {\n            this.__missingViews.push(id);\n         }\n      });\n      this._views = views;\n\n      // convert from \"0\" => 0\n      this.position = values.position || {};\n\n      if (this.position.x != null) this.position.x = parseInt(this.position.x);\n      if (this.position.y != null) this.position.y = parseInt(this.position.y);\n\n      this.position.dx = parseInt(this.position.dx || 1);\n      this.position.dy = parseInt(this.position.dy || 1);\n   }\n\n   isRoot() {\n      return this.parent == null || this.parent == this.application;\n   }\n\n   /**\n    * @method allParents()\n    * return a flattened array of all the ABViews parents\n    * @return {array}      array of ABViews\n    */\n   allParents() {\n      var parents = [];\n      var curView = this;\n\n      // add current view to array\n      parents.unshift(curView);\n\n      while (!curView.isRoot() && curView.parent) {\n         parents.unshift(curView.parent);\n\n         curView = curView.parent;\n      }\n\n      return parents;\n   }\n\n   /**\n    * @method isAccessibleForRoles()\n    * return true/false if this ABViewPage is accessible for one of the\n    * passed in ABRoles.\n    * @param {array[ABRole]} roles\n    *        an array of {ABRole} instances.\n    * @return {bool}\n    */\n   isAccessibleForRoles(roles) {\n      var foundRole = false;\n\n      var accessibleRoles = Object.keys(this.accessLevels) || [];\n      (roles || []).forEach((r) => {\n         if (accessibleRoles.indexOf(r.uuid || r) > -1) {\n            foundRole = true;\n         }\n      });\n\n      return foundRole;\n   }\n\n   /**\n    * @method getUserAccess()\n    *\n    * return the access level of the current user on the current view\n    *\n    * @return {integer}  // 0 = No Access // 1 = Read Only // 2 = Full Access\n    */\n   getUserAccess() {\n      // by default everyone has no access\n      var accessLevel = 0;\n\n      if (this.application.isAccessManaged) {\n         // check to see if the current users is the access manager\n         var isAccessManager = false;\n         // first check if manager is defined by their role\n         if (parseInt(this.application.accessManagers.useRole) == 1) {\n            // if so check if any of the user's role match the managers\n            this.AB.Account.roles().forEach((role) => {\n               if (\n                  this.application.accessManagers.role.indexOf(\n                     role.id || role.uuid\n                  ) > -1\n               ) {\n                  // if so set the access level to full access\n                  isAccessManager = true;\n                  accessLevel = 2;\n               }\n            });\n         }\n         // if the user isn't already set as the manager and the manager is defined by their account\n         if (\n            !isAccessManager &&\n            parseInt(this.application.accessManagers.useAccount) == 1\n         ) {\n            // check if the user's account matches the managers\n            if (\n               this.application.accessManagers.account.indexOf(\n                  this.AB.Account.uuid() + \"\"\n               ) > -1\n            ) {\n               // if so set the access level to full access\n               isAccessManager = true;\n               accessLevel = 2;\n            }\n         }\n\n         // if the user is not the manager check if the page has access levels defined for roles\n         if (\n            this.accessLevels &&\n            Object.keys(this.accessLevels).length > 0 &&\n            !isAccessManager\n         ) {\n            // check to see if the user's roles matches one of the roles defined\n            this.AB.Account.roles().forEach((role) => {\n               var currentRole = this.accessLevels[role.id || role.uuid];\n               if (currentRole && parseInt(currentRole) > accessLevel)\n                  // if the access level is higher than a previous role set to the new level\n                  accessLevel = parseInt(currentRole);\n            });\n         }\n      } else {\n         accessLevel = 2;\n      }\n\n      return accessLevel;\n   }\n\n   /**\n    * @method parentFormComponent\n    * return the closest form object this component is on.\n    */\n   parentFormComponent() {\n      var form = null;\n\n      var curr = this;\n      while (curr.key != \"form\" && !curr.isRoot() && curr.parent) {\n         curr = curr.parent;\n      }\n\n      if (curr.key == \"form\") {\n         form = curr;\n      }\n\n      return form;\n   }\n\n   /**\n    * @method parentDetailComponent\n    * return the closest detail object that this component is on.\n    * @returns {ABViewDetail} detail component\n    */\n   parentDetailComponent() {\n      var detail = null;\n\n      var curr = this;\n      while (curr.key != \"detail\" && !curr.isRoot() && curr.parent) {\n         curr = curr.parent;\n      }\n\n      if (curr.key == \"detail\") {\n         detail = curr;\n      }\n\n      return detail;\n   }\n\n   pageParent(filterFn) {\n      if (filterFn == null) filterFn = () => true;\n\n      // if current page is the root page, then return itself.\n      if (this.isRoot()) {\n         return this;\n      }\n\n      var parentPage = this.parent;\n      while (\n         parentPage &&\n         (parentPage.key != \"page\" || !filterFn(parentPage))\n      ) {\n         parentPage = parentPage.parent;\n      }\n\n      return parentPage;\n   }\n\n   pageRoot() {\n      var rootPage = this.pageParent();\n\n      while (!rootPage.isRoot()) {\n         rootPage = rootPage.pageParent();\n      }\n\n      return rootPage;\n   }\n\n   /**\n    * @method urlPointer()\n    * return the url pointer that references this view.  This url pointer\n    * should be able to be used by this.application.urlResolve() to return\n    * this view object.\n    * @return {string}\n    */\n   urlPointer() {\n      if (this.parent) {\n         return this.parent.urlView() + this.id;\n      } else {\n         return this.application.urlPage() + this.id;\n      }\n   }\n\n   /**\n    * @method urlView\n    * return a string pointer to this object's views.\n    * @return {string}\n    */\n   urlView() {\n      return this.urlPointer() + \"/_views/\";\n   }\n\n   /**\n    * @property datacollection\n    * return data source\n    *\n    * @return {ABDataCollection}\n    */\n   get datacollection() {\n      let dataviewID = (this.settings || {}).dataviewID;\n      if (!dataviewID) {\n         if (\n            [\"form\", \"grid\", \"line\", \"area\", \"bar\", \"gantt\", \"kanban\"].indexOf(\n               this.key\n            ) > -1\n         ) {\n            // NOTE: ignore kanban side forms where this is the case:\n            if (this.key == \"form\" && this._currentObject) return null;\n\n            if (this.warningsSilent) return null;\n\n            var errNoDCID = new Error(\n               `ABViewCore:get datacollection(): View[${this.key}] didn't define a dataviewID.`\n            );\n            this.AB.notify.builder(errNoDCID, {\n               view: this,\n               settings: this.settings,\n            });\n         } else {\n            // These views shouldn't matter if they don't have a datacollection.\n            if (\n               [\"button\", \"label\", \"page\", \"tab\", \"viewcontainer\"].indexOf(\n                  this.key\n               ) == -1\n            ) {\n               console.warn(\n                  `TODO: figure out which ABView* require a .dataviewID: ${this.key}?`\n               );\n            }\n         }\n         return null;\n      }\n\n      var dc = this.AB.datacollectionByID(dataviewID);\n      if (!dc) {\n         var errNoDC = new Error(\n            `View[${this.label}][${this.id}] is unable to find associated DataCollection`\n         );\n         this.AB.notify.builder(errNoDC, {\n            view: this,\n            dataviewID,\n         });\n      }\n      return dc;\n   }\n\n   ///\n   /// Update Access accessLevels\n   ///\n\n   /**\n    * @method updateAccessLevels()\n    *\n    *\n    * @param {string} roleId\n    *\n    * @param {string} accessLevel\n    *\n    * @return {Promise}\n    *\n    */\n   updateAccessLevels(roleId, accessLevel) {\n      if (parseInt(accessLevel) == 0) {\n         if (this.accessLevels[roleId]) delete this.accessLevels[roleId];\n      } else {\n         this.accessLevels[roleId] = accessLevel;\n      }\n\n      return this.save(false, false);\n   }\n\n   ///\n   /// Views\n   ///\n\n   /**\n    * @method views()\n    *\n    * return an array of all the ABViews children\n    *\n    * @param {fn} filter  \ta filter fn to return a set of ABViews that this fn\n    *\t\t\t\t\t\treturns true for.\n    * @param {boolean} deep\n    *\n    * @return {array} \tarray of ABViews\n    */\n   views(filter = () => true, deep = false) {\n      var result = [];\n\n      if (!this._views || this._views.length < 1) return result;\n\n      // find into recursively\n      if (filter && deep) {\n         result = result.concat(this._views.filter(filter));\n\n         this._views.forEach((v) => {\n            var subViews = v.views(filter, deep);\n            if (subViews && subViews.length > 0) {\n               result = result.concat(subViews);\n            }\n         });\n      } else {\n         result = this._views.filter(filter);\n      }\n\n      return result;\n   }\n\n   /**\n    * @method viewNew()\n    *\n    *\n    * @return {ABView}\n    */\n   viewNew(values, application, parent) {\n      return this.application.viewNew(\n         values,\n         application || this.application,\n         parent || this\n      );\n   }\n\n   /**\n    * @method viewDestroy()\n    *\n    * remove the current ABView from our list of ._views.\n    *\n    * @param {ABView} view\n    * @return {Promise}\n    */\n   viewDestroy(view) {\n      console.error(\"DEPRECIATED: where is this called?\");\n      return this.viewRemove(view);\n   }\n\n   /**\n    * @method viewRemove()\n    *\n    * remove the current ABView from our list of ._views.\n    *\n    * @param {ABView} view\n    * @return {Promise}\n    */\n   viewRemove(view) {\n      var origLen = this._views.length;\n      this._views = this.views(function (v) {\n         return v.id != view.id;\n      });\n\n      if (this._views.length < origLen) {\n         return this.save();\n      }\n\n      return Promise.resolve();\n   }\n\n   /**\n    * @method viewInsert()\n    *\n    * persist the current ABView in our list of ._views.\n    *\n    * @param {ABView} object\n    * @return {Promise}\n    */\n   viewInsert(view) {\n      var isIncluded =\n         this.views(function (v) {\n            return v.id == view.id;\n         }).length > 0;\n      if (!isIncluded) {\n         this._views.push(view);\n         return this.save();\n      }\n\n      return Promise.resolve();\n   }\n\n   /**\n    * @method viewReorder()\n    *\n    * reorder the current ABView in our list of ._views.\n    *\n    * @param {string} viewId - id of the active view\n    * @param {string} toPosition - 'to' postion\n    * @return {Promise}\n    */\n   viewReorder(viewId, toPosition) {\n      var from = this._views.findIndex((v) => v.id == viewId);\n      if (from < 0) return;\n\n      // move drag item to 'to' position\n      this._views.splice(toPosition, 0, this._views.splice(from, 1)[0]);\n\n      // save to database\n      return this.save(true);\n   }\n\n   /// ABApplication data methods\n\n   /**\n    * @method destroy()\n    *\n    * destroy the current instance of ABApplication\n    *\n    * also remove it from our _AllApplications\n    *\n    * @return {Promise}\n    */\n   destroy() {\n      // unsubscribe events\n      this.eventClear(true);\n\n      return Promise.resolve()\n         .then(() => {\n            // When deleting an ABView\n            // be sure to remove any of it's ABViews as well\n            // This cleans out any dangling ABDefinitions\n\n            var allViewDeletes = [];\n            var allViews = this.views();\n            this._views = [];\n            // doing ._views = [] prevents any of my updates when\n            // a sub-view is .destroy()ed\n\n            allViews.forEach((v) => {\n               allViewDeletes.push(v.destroy());\n            });\n            return Promise.all(allViewDeletes);\n         })\n         .then(() => {\n            // NOTE: this should not happen on ABViewPage objects\n            if (this.parent && !this.pages) {\n               return this.parent.viewRemove(this);\n            }\n         })\n         .then(() => {\n            return super.destroy();\n         })\n         .then(() => {\n            this.emit(\"destroyed\");\n         });\n   }\n\n   /**\n    * @method save()\n    * persist this instance of ABView\n    * @return {Promise}\n    *\t\t.resolve( {this} )\n    */\n   save() {\n      return Promise.resolve()\n         .then(() => {\n            // this creates our .id\n            return super.save();\n         })\n         .then(() => {\n            // NOTE: this should not happen on ABViewPage objects:\n            if (this.parent && !this.pages) {\n               // if we have a .parent, make sure we are included in our .parent's\n               // viewIDs\n               return this.parent.viewInsert(this);\n            }\n         })\n         .then(() => {\n            return this;\n         });\n   }\n\n   ///\n   /// Events\n   ///\n\n   /**\n    * @method eventAdd()\n    *\n    *\n    *\n    * @param {object} evt - {\n    * \t\t\t\t\t\t\temitter: object,\n    * \t\t\t\t\t\t\teventName: string,\n    * \t\t\t\t\t\t\tlistener: function\n    * \t\t\t\t\t\t}\n    */\n   eventAdd(evt) {\n      if (!evt || !evt.emitter || !evt.listener) return;\n\n      var exists = this.__events.find((e) => {\n         return e.emitter == evt.emitter && e.eventName == evt.eventName;\n         // && e.listener == evt.listener;\n      });\n\n      if (!exists || exists.length < 1) {\n         // add to array\n         this.__events.push({\n            emitter: evt.emitter,\n            eventName: evt.eventName,\n            listener: evt.listener,\n         });\n\n         // listening this event\n         evt.emitter.on(evt.eventName, evt.listener);\n      }\n   }\n\n   /**\n    * @method eventClear()\n    * unsubscribe all events.\n    * should do it before destroy a component\n    *\n    * @param {bool} deep - clear events of child views\n    */\n   eventClear(deep) {\n      if (deep) {\n         this.views().forEach((v) => {\n            v.eventClear(deep);\n         });\n      }\n\n      if (this.__events && this.__events.length > 0) {\n         this.__events.forEach((e) => {\n            e.emitter.removeListener(e.eventName, e.listener);\n         });\n      }\n   }\n\n   /**\n    * @method clone()\n    * clone the definitions of this ABView object.\n    * @param {obj} lookUpIds\n    *        an { oldID : newID } lookup hash for converting ABView objects\n    *        and their setting pointers.\n    * @param {ABView*} parent\n    *        Which ABView should be connected as the parent object of this\n    *        copy.\n    * @param {obj} options\n    *        option settings for the copy command.\n    *        options.ignoreSubPages {bool}\n    *             set to true to skip copying any sub pages of this ABView.\n    * @return {obj}\n    *        obj defs of this ABView\n    */\n   clone(lookUpIds, parent, options = {}) {\n      lookUpIds = lookUpIds || {};\n\n      // get settings of the target\n      let config = this.toObj();\n\n      // remove sub-elements property\n      [\"pages\", \"views\"].forEach((prop) => {\n         delete config[prop];\n      });\n\n      // update id of linked components\n      if (this.copyUpdateProperyList) {\n         (this.copyUpdateProperyList() || []).forEach((prop) => {\n            if (config && config.settings)\n               config.settings[prop] = lookUpIds[config.settings[prop]];\n         });\n      }\n\n      // copy from settings\n      let result = this.viewNew(config, this.application, parent);\n\n      // change id\n      if (parent == null) {\n         // the page is getting cloned to root: there is no parent, as parent is the application\n         result.id = null;\n      } else {\n         result.id = lookUpIds[result.id] || this.AB.uuid();\n      }\n\n      // copy sub pages\n      if (this.pages && !options.ignoreSubPages) {\n         result._pages = [];\n         this.pages().forEach((p) => {\n            let copiedSubPage = p.clone(lookUpIds, result, options);\n            copiedSubPage.parent = result;\n\n            result._pages.push(copiedSubPage);\n         });\n      }\n\n      // copy sub views\n      if (this.views && !options.ignoreSubViews) {\n         result._views = [];\n         this.views().forEach((v) => {\n            let copiedView = v.clone(lookUpIds, result, options);\n\n            result._views.push(copiedView);\n         });\n      }\n\n      return result;\n   }\n\n   /**\n    * @method copy()\n    * create a new copy of this ABView object. The resulting ABView should\n    * be identical in settings and all sub pages/views, but each new object\n    * is a unique view (different ids).\n    * @param {obj} lookUpIds\n    *        an { oldID : newID } lookup hash for converting ABView objects\n    *        and their setting pointers.\n    * @param {ABView*} parent\n    *        Which ABView should be connected as the parent object of this\n    *        copy.\n    * @param {obj} options\n    *        option settings for the copy command.\n    *        options.ignoreSubPages {bool}\n    *             set to true to skip copying any sub pages of this ABView.\n    *        options.newName {string}\n    *             new user determined name for page\n    * @return {Promise}\n    *        .resolved with the instance of the copied ABView\n    */\n   copy(lookUpIds, parent, options = {}) {\n      lookUpIds = lookUpIds || {};\n\n      // get settings of the target\n      let config = this.toObj();\n\n      // remove sub-elements property\n      [\"pageIDs\", \"viewIDs\"].forEach((prop) => {\n         delete config[prop];\n      });\n\n      // update id of linked components\n      if (this.copyUpdateProperyList) {\n         (this.copyUpdateProperyList() || []).forEach((prop) => {\n            if (config && config.settings)\n               config.settings[prop] = lookUpIds[config.settings[prop]];\n         });\n      }\n\n      // copy from settings\n      let result = this.application.viewNew(config, this.application, parent);\n\n      // keep the parent\n      result.parent = parent || this.parent;\n\n      // change id\n      if (parent == null) {\n         // the page is getting cloned to root: there is no parent, as parent is the application.\n         // pages with null parent ids default to getting put on root\n         result.id = null;\n      } else {\n         result.id = lookUpIds[result.id] || this.AB.uuid();\n      }\n\n      // page's name should not be duplicate\n      if (this.key == \"page\") {\n         result.name =\n            options?.newName ||\n            `${result.name}_copied_${this.AB.uuid().slice(0, 3)}`;\n\n         result.label = options?.newName || `${result.label} (copied)`;\n      }\n\n      return Promise.resolve()\n         .then(() => {\n            // copy sub pages\n            var allSaves = [];\n\n            if (this._pages && !options.ignoreSubPages) {\n               result._pages = [];\n               this.pages().forEach((p) => {\n                  // this prevents result.save() from happening on each of these\n                  // p.copy():\n                  if (p.isRoot())\n                     this.application._pages.push({ id: lookUpIds[p.id] });\n\n                  allSaves.push(\n                     p\n                        .copy(lookUpIds, result, options)\n                        .then((copiedSubPage) => {\n                           copiedSubPage.parent = result;\n                           // remove the temp {id:} entry above:\n                           this.application._pages =\n                              this.application._pages.filter(\n                                 (p2) => p2.id != lookUpIds[p.id]\n                              );\n\n                           // now add the full copiedSubPage:\n                           result._pages.push(copiedSubPage);\n                        })\n                  );\n               });\n            }\n\n            return Promise.all(allSaves);\n         })\n         .then(() => {\n            // copy sub views\n            var allSaves = [];\n\n            if (this._views && !options.ignoreSubViews) {\n               result._views = [];\n               this.views().forEach((v) => {\n                  allSaves.push(\n                     // send a null for parent, so that the .save() wont trigger\n                     // a save of the parent.\n                     v.copy(lookUpIds, result, options).then((copiedView) => {\n                        // now patch up the parent connection:\n                        // copiedView.parent = result;\n                        if (\n                           result._views.filter((vi) => vi.id == copiedView.id)\n                              .length < 1\n                        ) {\n                           result._views.push(copiedView);\n                        }\n                     })\n                  );\n               });\n            }\n\n            return Promise.all(allSaves);\n         })\n         .then(() => {\n            // now we do 1 save for all the views\n            return result.save();\n         })\n         .then(() => {\n            return result;\n         });\n   }\n}\n","import ABViewWidget from \"../../platform/views/ABViewWidget\";\n\nexport default class ABViewDetailItemCore extends ABViewWidget {\n   // constructor(values, application, parent, defaultValues) {\n   //    super(values, application, parent, defaultValues);\n   // }\n\n   detailComponent() {\n      let detailView = null;\n\n      let curr = this;\n      while (\n         !curr.isRoot() &&\n         curr.parent &&\n         curr.key != \"detail\" &&\n         curr.key != \"dataview\"\n      ) {\n         curr = curr.parent;\n      }\n\n      if (curr.key == \"detail\" || curr.key == \"dataview\") {\n         detailView = curr;\n      }\n\n      return detailView;\n   }\n\n   field() {\n      let detailComponent = this.detailComponent();\n      if (detailComponent == null) return null;\n\n      let datacollection = detailComponent.datacollection;\n      if (datacollection == null) return null;\n\n      let object = datacollection.datasource;\n      if (object == null) return null;\n\n      let field = object.fields((v) => v.id == this.settings.fieldId)[0];\n\n      // set .alias to support queries that contains alias name\n      // [aliasName].[columnName]\n      if (field && this.settings.alias) {\n         field.alias = this.settings.alias;\n      }\n\n      return field;\n   }\n\n   getCurrentData() {\n      let detailCom = this.detailComponent();\n      if (!detailCom) return null;\n\n      let dv = detailCom.datacollection;\n      if (!dv) return null;\n\n      let field = this.field();\n      if (!field) return null;\n\n      let currData = dv.getCursor();\n      if (currData) return currData[field.columnName];\n      else return null;\n   }\n\n   /**\n    * @method componentList\n    * return the list of components available on this view to display in the editor.\n    */\n   componentList() {\n      return [];\n   }\n\n   /**\n    * @property datacollection\n    * return data source\n    * NOTE: this view doesn't track a DataCollection.\n    * @return {ABDataCollection}\n    */\n   get datacollection() {\n      return null;\n   }\n}\n","import ABView from \"../../platform/views/ABView\";\n\nconst ABViewFormFieldPropertyComponentDefaults = {\n   required: 0,\n   disable: 0,\n};\n\nexport default class ABViewFormComponentCore extends ABView {\n   // constructor(values, application, parent, defaultValues) {\n   //    super(values, application, parent, defaultValues);\n   // }\n\n   static defaultValues() {\n      return ABViewFormFieldPropertyComponentDefaults;\n   }\n\n   /**\n    * @property datacollection\n    * return data source\n    * NOTE: this view doesn't track a DataCollection.\n    * @return {ABDataCollection}\n    */\n   get datacollection() {\n      let form = this.parentFormComponent();\n      if (form == null) return null;\n\n      let datacollection = form.datacollection;\n      if (datacollection == null) return null;\n\n      return datacollection;\n   }\n\n   field() {\n      if (this.settings.objectId) {\n         let object = this.AB.objectByID(this.settings.objectId);\n         if (!object) return null;\n\n         return object.fieldByID(this.settings.fieldId);\n      } else {\n         let form = this.parentFormComponent();\n         if (form == null) return null;\n\n         let object;\n         if (form._currentObject) {\n            object = form._currentObject;\n         } else {\n            let datacollection = form.datacollection;\n            if (datacollection == null) return null;\n\n            object = datacollection.datasource;\n         }\n\n         if (object == null) return null;\n\n         let field = object.fieldByID(this.settings.fieldId);\n         return field;\n      }\n   }\n}\n","/*\n * ABViewPage\n *\n * An ABView that represents a \"Page\" in the system.\n *\n * Pages are\n *\t- allowed to be displayed in the interface list\n *\t- return a full list of components that can be added to the view editor\n *\n *\n */\n\nimport ABViewContainer from \"../../platform/views/ABViewContainer\";\n// var ABViewManager = require(\"../ABViewManager\");\n\n// function L(key, altText) {\n//     return AD.lang.label.getLabel(key) || altText;\n// }\n\nconst ABViewDefaults = {\n   key: \"page\", // unique key identifier for this ABView\n   icon: \"file\", // icon reference: (without 'fa-' )\n};\n\nconst ABPropertyComponentDefaults = {\n   type: \"page\", // 'page', 'popup' or 'reportPage'\n   popupWidth: 700,\n   popupHeight: 450,\n   pageWidth: null,\n   fixedPageWidth: 0,\n   pageBackground: \"ab-background-default\",\n};\n\nexport default class ABViewPageCore extends ABViewContainer {\n   constructor(values, application, parent, defaultValues) {\n      super(values, application, parent, defaultValues || ABViewDefaults);\n\n      // \t{\n      // \t\tid:'uuid',\t\t\t\t\t// uuid value for this obj\n      // \t\tkey:'viewKey',\t\t\t\t// unique key for this View Type\n      // \t\ticon:'font',\t\t\t\t// fa-[icon] reference for an icon for this View Type\n\n      //\t\tname: '',\t\t\t\t\t// unique page name\n\n      // \t\tlabel:'',\t\t\t\t\t// pulled from translation\n\n      //\t\tsettings: {\t\t\t\t\t// unique settings for the type of field\n      //\t\t},\n\n      //\t\ttranslations:[]\n      // \t}\n\n      this.parent = null; // will be set by the pageNew() that creates this obj.\n      // {obj} .parent\n      // this points to the ABView object that manages this object as a child.\n      // this param is shared across ABViews as well as ABViewPage, but has\n      // different implications ... so we default an ABViewPage.parent = null\n      // and the place that Creates the Page must assign the .parent externally.\n   }\n\n   static common() {\n      return ABViewDefaults;\n   }\n\n   static defaultValues() {\n      return ABPropertyComponentDefaults;\n   }\n\n   static getPageActionKey(view) {\n      return [\n         \"opstools\",\n         \"AB_\" + String(view.application.name).replace(/[^a-z0-9]/gi, \"\"),\n         String(view.name)\n            .replace(/[^a-z0-9]/gi, \"\")\n            .toLowerCase(),\n         \"view\",\n      ].join(\".\");\n   }\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABViewPage instance\n    * into the values needed for saving to the DB.\n    *\n    * @return {json}\n    */\n   toObj() {\n      var obj = super.toObj();\n\n      obj.name = this.name;\n\n      obj.myAppID = this.myAppID;\n\n      // icon of popup page\n      if (this.settings.type == \"popup\") obj.icon = \"clone\";\n\n      // set label of the page\n      if (!this.label || this.label == \"?label?\") obj.label = obj.name;\n\n      // compile our pages\n      obj.pageIDs = (this._pages || []).map((p) => p.id);\n\n      return obj;\n   }\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      super.fromValues(values);\n\n      // icon of popup page\n      if (values.settings.type == \"popup\") this.icon = \"clone\";\n\n      // set label of the page\n      if (!this.label || this.label == \"?label?\") this.label = this.name;\n\n      // track which application this Page belongs to:\n      this.myAppID = values.myAppID;\n      if (!this.myAppID && this.application) {\n         this.myAppID = this.application.id;\n      }\n\n      // now properly handle our sub pages.\n      var pages = [];\n      (values.pageIDs || []).forEach((id) => {\n         var def = this.AB.definitionByID(id);\n         if (def) {\n            pages.push(this.pageNew(def));\n         } else {\n            this.AB.error(\n               `App[${this.application.name}][${this.application.id}]->Page[${this.name}][${this.id}] referenced an unknown Page[${id}]`\n            );\n         }\n      });\n      this._pages = pages;\n\n      // the default columns of ABView is 1\n      this.settings.columns = this.settings.columns || 1;\n      this.settings.gravity = this.settings.gravity || [1];\n\n      // convert from \"0\" => 0\n   }\n\n   /**\n    * @method destroy()\n    *\n    * destroy the current instance of ABApplication\n    *\n    * also remove it from our _AllApplications\n    *\n    * @return {Promise}\n    */\n   destroy() {\n      return Promise.resolve()\n         .then(() => {\n            // When deleting an ABViewPage\n            // be sure to remove any of it's ABViewPages as well\n            // This cleans out any dangling ABDefinitions and cleans up the\n            // OpsPortal Permissions:\n\n            var allPageDeletes = [];\n            var allPages = this.pages();\n            this._pages = [];\n            // doing ._pages = [] prevents any of my updates when\n            // a sub-page is .destroy()ed\n\n            allPages.forEach((p) => {\n               allPageDeletes.push(p.destroy());\n            });\n            return Promise.all(allPageDeletes);\n         })\n         .then(() => {\n            var parent = this.parent || this.application;\n\n            return parent.pageRemove(this);\n         })\n         .then(() => {\n            return super.destroy();\n         });\n\n      // return new Promise((resolve, reject) => {\n      //    // verify we have been .save() before:\n      //    if (this.id) {\n      //       this.application\n      //          .viewDestroy(this)\n      //          .then(() => {\n      //             // remove the page in list\n      //             var parent = this.parent || this.application;\n      //             var remainingPages = parent.pages((p) => {\n      //                return p.id != this.id;\n      //             });\n      //             parent._pages = remainingPages;\n\n      //             resolve();\n      //          })\n      //          .catch(reject);\n      //    } else {\n      //       resolve(); // nothing to do really\n      //    }\n      // });\n   }\n\n   /**\n    * @method save()\n    * persist this instance of ABViewPage\n    * @return {Promise}\n    *         .resolve( {this} )\n    */\n   save() {\n      return Promise.resolve()\n         .then(() => {\n            // this creates our .id\n            return super.save();\n         })\n         .then(() => {\n            // now we can persist ourself in our parent\n            var parent = this.parent || this.application;\n\n            return parent.pageInsert(this);\n         })\n         .then(() => {\n            return this;\n         });\n   }\n\n   ///\n   /// Pages\n   ///\n\n   /**\n    * @method pages()\n    *\n    * return an array of all the ABViewPages for this ABViewPage.\n    *\n    * @param {fn} filter\t\ta filter fn to return a set of ABViewPages that this fn\n    *\t\t\t\t\t\t\treturns true for.\n    * @param {boolean} deep\tflag to find in sub pages\n    *\n    * @return {array}\t\t\tarray of ABViewPages\n    */\n   pages(filter = () => true, deep = false) {\n      var result = [];\n\n      // find into sub-pages recursively\n      if (filter && deep) {\n         if (this._pages && this._pages.length > 0) {\n            result = this._pages.filter(filter);\n\n            if (result.length < 1) {\n               this._pages.forEach((p) => {\n                  var subPages = p.pages(filter, deep);\n                  if (subPages && subPages.length > 0) {\n                     result = subPages;\n                  }\n               });\n            }\n         }\n      }\n      // find root pages\n      else {\n         result = this._pages.filter(filter);\n      }\n\n      return result;\n   }\n\n   /**\n    * @method pageInsert()\n    *\n    * save the given ABViewPage in our ._pages array and persist the current\n    * values if they changed.\n    *\n    * @param {ABViewPage} page The instance of the page to save.\n    * @return {Promise}\n    */\n   pageInsert(page) {\n      var isIncluded = this.pages((o) => o.id === page.id).length > 0;\n      if (!isIncluded) {\n         // if not already included, then add and save the Obj definition:\n         this._pages.push(page);\n         return this.save();\n      }\n\n      // Nothing was required so return\n      return Promise.resolve();\n   }\n\n   /**\n    * @method pageNew()\n    *\n    * return an instance of a new (unsaved) ABViewPage that is tied to this\n    * ABViewPage.\n    *\n    * NOTE: this new page is not included in our this.pages until a .save()\n    * is performed on the page.\n    *\n    * @return {ABViewPage}\n    */\n   pageNew(values) {\n      // make sure this is an ABViewPage description\n      values.key = ABViewDefaults.key;\n\n      // NOTE: this returns a new ABView component.\n      // when creating a new page, the 3rd param should be null, to signify\n      // the top level component.\n      var page = this.application.viewNew(values, this.application, null);\n      page.parent = this;\n      return page;\n   }\n\n   /**\n    * @method pageRemove()\n    *\n    * remove the given ABViewPage from our ._pages array and persist the current\n    * values.\n    *\n    * @param {ABViewPage} page The instance of the page to remove.\n    * @return {Promise}\n    */\n   pageRemove(page) {\n      var origLen = this._pages.length;\n      this._pages = this.pages(function (p) {\n         return p.id != page.id;\n      });\n\n      if (this._pages.length < origLen) {\n         return this.save();\n      }\n\n      // if we get here, then nothing changed so nothing to do.\n      return Promise.resolve();\n   }\n\n   /**\n    * @method urlView()\n    * return the url pointer for views in this application.\n    * @return {string}\n    */\n   urlPage() {\n      return this.urlPointer() + \"/_pages/\";\n   }\n\n   /**\n    * @method urlPointer()\n    * return the url pointer that references this view.  This url pointer\n    * should be able to be used by this.application.urlResolve() to return\n    * this view object.\n    * @return {string}\n    */\n   urlPointer() {\n      if (this.parent) {\n         return this.parent.urlPage() + this.id;\n      } else {\n         return this.application.urlPage() + this.id;\n      }\n   }\n\n   updateIcon(obj) {\n      // icon of page\n      if (obj.settings.type == \"popup\") {\n         obj.icon = \"clone\";\n      } else {\n         obj.icon = ABViewDefaults.icon;\n      }\n      return obj;\n   }\n\n   /**\n    * @method clone()\n    * clone the defintions of this ABViewPage object.\n    * @param {obj} lookUpIds\n    *        an { oldID : newID } lookup hash for converting ABView objects\n    *        and their setting pointers.\n    * @param {ABView*} parent\n    *        Which ABView should be connected as the parent object of this\n    *        copy.\n    * @return {obj}\n    *        defs of the copied ABView\n    */\n   clone(lookUpIds, parent) {\n      // initial new ids of pages and components\n      if (lookUpIds == null) {\n         // create a hash of { oldID : newID } of any sub Pages and Views.\n         lookUpIds = {};\n\n         let mapNewIdFn = (currView) => {\n            if (!lookUpIds[currView.id])\n               lookUpIds[currView.id] = this.AB.uuid();\n\n            if (currView.pages) {\n               currView.pages().forEach((p) => mapNewIdFn(p));\n            }\n\n            if (currView.views) {\n               currView.views().forEach((v) => mapNewIdFn(v));\n            }\n         };\n\n         // start map new ids\n         mapNewIdFn(this);\n      }\n\n      // copy\n      let result = super.clone(lookUpIds, parent);\n\n      // page's name should not be duplicate\n      result.name = null;\n\n      return result;\n   }\n\n   /**\n    * @method copy()\n    * create a new copy of this ABViewPage object. The resulting ABView should\n    * be identical in settings and all sub pages/views, but each new object\n    * is a unique view (different ids).\n    * @param {obj} lookUpIds\n    *        an { oldID : newID } lookup hash for converting ABView objects\n    *        and their setting pointers.\n    * @param {ABView*} parent\n    *        Which ABView should be connected as the parent object of this\n    *        copy.\n    * @return {Promise}\n    *        .resolved with the instance of the copied ABView\n    */\n   copy(lookUpIds, parent, options) {\n      // initial new ids of pages and components\n      if (lookUpIds == null) {\n         // create a hash of { oldID : newID } of any sub Pages and Views.\n         lookUpIds = {};\n\n         let mapNewIdFn = (currView) => {\n            if (!lookUpIds[currView.id])\n               lookUpIds[currView.id] = this.AB.uuid();\n\n            if (currView.pages) {\n               currView.pages().forEach((p) => mapNewIdFn(p));\n            }\n\n            if (currView.views) {\n               currView.views().forEach((v) => mapNewIdFn(v));\n            }\n         };\n\n         // start map new ids\n         mapNewIdFn(this);\n      }\n\n      // now continue with the default .copy()\n      return super.copy(lookUpIds, parent, options);\n   }\n}\n","import ABView from \"../../platform/views/ABView\";\n\nconst ABViewDefaults = {\n   key: \"viewwidget\", // {string} unique key for this view\n   icon: \"circle-o-notch \", // {string} fa-[icon] reference for this view\n   labelKey: \"ab.components.widget\", // {string} the multilingual label key for the class label\n};\n\nconst ABPropertyComponentDefaults = {\n   columnSpan: 1,\n   rowSpan: 1,\n};\n\nexport default class ABViewWidgetCore extends ABView {\n   /**\n    * @param {obj} values  key=>value hash of ABView values\n    * @param {ABApplication} application the application object this view is under\n    * @param {ABView} parent the ABView this view is a child of. (can be null)\n    * @param {obj} defaultValues special sub class defined default values.\n    */\n   constructor(values, application, parent, defaultValues) {\n      super(values, application, parent, defaultValues || ABViewDefaults);\n   }\n\n   static common() {\n      return ABViewDefaults;\n   }\n\n   static defaultValues() {\n      return ABPropertyComponentDefaults;\n   }\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      super.fromValues(values);\n\n      // convert from \"0\" => 0\n      this.settings.columnSpan = parseInt(\n         this.settings.columnSpan || ABPropertyComponentDefaults.columnSpan\n      );\n      this.settings.rowSpan = parseInt(\n         this.settings.rowSpan || ABPropertyComponentDefaults.rowSpan\n      );\n   }\n}\n","// const _ = require(\"lodash\");\n\n// prettier-ignore\n// const ABApplicationCore = require(\"../core/ABApplicationCore.js\");\nimport ABApplicationCore from \"../core/ABApplicationCore.js\";\n\n// const ABViewPage = require(\"./views/ABViewPage\");\nimport ABViewPage from \"./views/ABViewPage\";\n\n// const ABViewManager = require(\"./ABViewManager\");\n// import ABViewManager from \"./ABViewManager\";\n\nexport default class ABClassApplication extends ABApplicationCore {\n   constructor(attributes, AB) {\n      super(attributes, AB);\n\n      // now listen for any updates to our managed objects\n      this._handler_page_updated = (definition) => {\n         var currPage = this._pages.find((p) => p.id === definition.id);\n         if (currPage) {\n            this._pages = this._pages.filter((p) => p.id != currPage.id);\n            this._pages.push(currPage.refreshInstance());\n         }\n      };\n      this._pages.forEach((p) => {\n         p.on(\"definition.updated\", this._handler_page_updated);\n      });\n   }\n\n   static applications(/*fn = () => true*/) {\n      console.error(\n         \"ABApplication.applicationForID(): Depreciated. Who is doing this?\"\n      );\n      return null;\n   }\n   static applicationForID(/*id*/) {\n      var errDepreciated = new Error(\n         \"ABApplication.applicationForID(): Depreciated. Who is doing this?\"\n      );\n      console.error(errDepreciated);\n      return null;\n   }\n\n   static definitionForID(/*id*/) {\n      var errDepreciated = new Error(\n         \"ABApplication.definitionForID(): Depreciated. Who is doing this?\"\n      );\n      console.error(errDepreciated);\n      return null;\n   }\n\n   areaKey() {\n      return this.AB.kebabCase(`ab-${this.name}`);\n   }\n\n   /**\n    * @method refreshInstance()\n    * Used when a definition.updated message is detected on this ABApplication.\n    * This method will return a new instance based upon the current definition\n    * and properly resolve any handlers and pending network Requests.\n    * @return {ABObject}\n    */\n   refreshInstance() {\n      var newObj = this.AB.applicationByID(this.id);\n\n      // remove my listeners\n      this._pages.forEach((p) => {\n         p.removeListener(\"definition.updated\", this._handler_page_updated);\n      });\n\n      return newObj;\n   }\n\n   ///\n   /// Definition\n   ///\n\n   /**\n    * @method _listInsert()\n    * save the given entity into our desired list:\n    * @param {varid} entity\n    * @param {string} key\n    *        the key of the list we are managing\n    * @return {Promise}\n    */\n   async _listInsert(entity, key) {\n      var isIncluded = this[key].indexOf(entity.id) != -1;\n      if (!isIncluded) {\n         this[key].push(entity.id);\n         await this.save();\n      }\n   }\n\n   async _listRemove(entity, key) {\n      var begLen = this[key].length;\n      this[key] = this[key].filter((id) => {\n         return id != entity.id;\n      });\n      // if there was a change then save this.\n      if (begLen != this[key].length) {\n         await this.save();\n      }\n   }\n\n   /**\n    * @method datacollectionInsert()\n    * persist the current ABDataCollection in our list of .datacollectionIDs.\n    * @param {ABDataCollection} dc\n    * @return {Promise}\n    */\n   datacollectionInsert(dc) {\n      return this._listInsert(dc, \"datacollectionIDs\");\n   }\n\n   /**\n    * @method datacollectionRemove()\n    * remove the given ABDataCollection from our list of .datacollectionIDs.\n    * @param {ABDataCollection} dc\n    * @return {Promise}\n    */\n   datacollectionRemove(dc) {\n      return this._listRemove(dc, \"datacollectionIDs\");\n   }\n\n   /**\n    * @method objectInsert()\n    * persist the current ABObject in our list of .objectIDs.\n    * @param {ABObject} object\n    * @return {Promise}\n    */\n   objectInsert(object) {\n      return this._listInsert(object, \"objectIDs\");\n   }\n\n   /**\n    * @method objectRemove()\n    * remove the current ABObject from our list of .objectIDs.\n    * NOTE: this method persists the changes to the server.\n    * @param {ABObject} object\n    * @return {Promise}\n    */\n   objectRemove(object) {\n      return this._listRemove(object, \"objectIDs\");\n   }\n\n   /**\n    * @method processInsert()\n    * persist the current ABProcess in our list of .processIDs.\n    * @param {ABProcess} process\n    * @return {Promise}\n    */\n   processInsert(process) {\n      return this._listInsert(process, \"processIDs\");\n   }\n\n   /**\n    * @method processRemove()\n    * remove the current ABProcess from our list of .processIDs.\n    * NOTE: this method persists the changes to the server.\n    * @param {ABProcess} process\n    * @return {Promise}\n    */\n   processRemove(process) {\n      return this._listRemove(process, \"processIDs\");\n   }\n\n   /**\n    * @method queryInsert()\n    * persist the current ABObjectQuery in our list of .queryIDs.\n    * @param {ABObjectQuery} query\n    * @return {Promise}\n    */\n   queryInsert(query) {\n      return this._listInsert(query, \"queryIDs\");\n   }\n\n   /**\n    * @method queryRemove()\n    * remove the current ABObjectQuery from our list of .queryIDs.\n    * NOTE: this method persists the changes to the server.\n    * @param {ABObjectQuery} query\n    * @return {Promise}\n    */\n   queryRemove(query) {\n      return this._listRemove(query, \"queryIDs\");\n   }\n\n   /**\n    * @method exportIDs()\n    * export any relevant .ids for the necessary operation of this application.\n    * @param {array} ids\n    *         the array of ids to insert any relevant .ids into\n    */\n   exportIDs(ids) {\n      // make sure we don't get into an infinite loop:\n      if (ids.indexOf(this.id) > -1) return;\n\n      ids.push(this.id);\n\n      // start with Objects:\n      this.objectsIncluded().forEach((o) => {\n         o.exportIDs(ids);\n      });\n\n      // get all Hints\n      this.hintsIncluded().forEach((h) => {\n         h.exportIDs(ids);\n      });\n\n      // Queries\n      this.queriesIncluded().forEach((q) => {\n         q.exportIDs(ids);\n      });\n\n      // Datacollections\n      // NOTE: currently the server doesn't make instances of DataCollections\n      // so we manually parse the related info here:\n      this.datacollectionIDs.forEach((dID) => {\n         if (ids.indexOf(dID) > -1) return;\n\n         var def = this.AB.definitionByID(dID);\n         if (def) {\n            ids.push(dID);\n            if (def.settings.datasourceID) {\n               var object = this.AB.objectByID(def.settings.datasourceID);\n               if (object) {\n                  object.exportIDs(ids);\n               }\n            }\n         }\n      });\n\n      // Processes\n      this.processes().forEach((p) => {\n         p.exportIDs(ids);\n      });\n\n      // Pages\n      // NOTE: currently the server doesn't make instances of ABViews\n      // so we manually parse the object data here:\n      var parseView = (view) => {\n         if (ids.indexOf(view.id) > -1) return;\n         ids.push(view.id);\n         (view.pageIDs || []).forEach((pid) => {\n            var pdef = this.AB.definitionByID(pid);\n            if (pdef) {\n               parseView(pdef);\n            }\n         });\n\n         (view.viewIDs || []).forEach((vid) => {\n            var vdef = this.AB.definitionByID(vid);\n            if (vdef) {\n               parseView(vdef);\n            }\n         });\n      };\n\n      var pageIDs = this._pages.map((p) => p.id);\n      (pageIDs || []).forEach((pid) => {\n         var pdef = this.AB.definitionByID(pid);\n         if (pdef) {\n            parseView(pdef);\n         }\n      });\n\n      // return only unique entries:\n      ids = this.AB.uniq(ids);\n   }\n\n   /**\n    * @method pageNew()\n    * return a new instance of an ABViewPage\n    * @param values\n    *        The initial settings for the page.\n    * @return {ABViewPage}\n    */\n   pageNew(values) {\n      return new ABViewPage(values, this);\n   }\n\n   /**\n    * @method pageInsert()\n    * Insert a new ABViewPage into this Application.\n    * @param {ABViewPage} page\n    *        The instance of the page to save.\n    * @return {Promise}\n    */\n   async pageInsert(page) {\n      // var isIncluded = this.pageByID(page.id);\n      var isIncluded = this._pages.filter((p) => p.id == page.id)[0];\n      if (!isIncluded) {\n         this._pages.push(page);\n         // Save our own Info:\n         return this.save();\n      }\n   }\n\n   /**\n    * @method pageRemove()\n    * remove the current ABViewPage from our list of pages.\n    * @param {ABViewPage} page\n    * @return {Promise}\n    */\n   async pageRemove(page) {\n      var origLen = this._pages.length;\n      this._pages = this.pages(function (p) {\n         return p.id != page.id;\n      });\n\n      if (this._pages.length < origLen) {\n         return this.save();\n      }\n\n      // if we get here, then nothing changed so nothing to do.\n   }\n\n   save() {\n      // if someone just changed the name of our ABApplication, reflect that\n      // in our Def.Name\n      if (this.name != this.label) {\n         this.name = this.label;\n      }\n      return super.save();\n   }\n\n   warningsEval() {\n      super.warningsEval();\n\n      //\n      // check for valid object references:\n      //\n      var checks = {\n         objectIDs: \"object\",\n         queryIDs: \"query\",\n         datacollectionIDs: \"datacollection\",\n      };\n\n      Object.keys(checks).forEach((k) => {\n         this[k].forEach((id) => {\n            var def = this.AB.definitionByID(id);\n            if (!def) {\n               this.warningsMessage(` is referencing a missing ${checks[k]}`, {\n                  appID: this.id,\n                  id,\n               });\n            }\n         });\n      });\n\n      //\n      // Make sure there is some way to access this Application:\n      //\n      if (this.roleAccess.length == 0 && !this.isAccessManaged) {\n         this.warningsMessage(\" has no Role assigned, and is unaccessible.\");\n      }\n\n      // do our Role references exist?\n      var allRoles = this.AB.Account.rolesAll().map((r) => r.id);\n      this.roleAccess.forEach((r) => {\n         if (allRoles.indexOf(r) == -1) {\n            this.warningsMessage(\n               `Specified Role Access [${r}] does not exist in this system`,\n               { role: r }\n            );\n         }\n      });\n\n      // Make sure all our Pages perform a new warningsEval();\n      this.pages().forEach((p) => {\n         p.warningsEval();\n      });\n   }\n\n   warningsAll() {\n      var warnings = [].concat(this._warnings);\n      [\n         \"objectsIncluded\",\n         \"queriesIncluded\",\n         \"datacollectionsIncluded\",\n         \"processes\",\n         \"pages\",\n         \"views\",\n      ].forEach((k) => {\n         this[k]().forEach((o) => {\n            warnings = warnings.concat(o.warningsAll());\n         });\n      });\n\n      return warnings;\n   }\n\n   warningsMessage(msg, data = {}) {\n      let message = `Application[${this.label}]: ${msg}`;\n      this._warnings.push({ message, data });\n   }\n\n   /**\n    * @method mobileAppNew()\n    *\n    * return an instance of a new (unsaved) ABMobileApp that is tied to this\n    * ABApplication.\n    *\n    * @return {ABMobileApp}\n    */\n   // mobileAppNew(values) {\n   //    return new ABMobileApp(values, this);\n   // }\n}\n","const _ = require(\"lodash\");\n\n// prettier-ignore\nimport ABApplicationMobileCore from \"../core/ABApplicationMobileCore.js\";\n\nimport ABViewPageMobile from \"./mobile/ABMobilePage\";\nconst ABViewManager = require(\"./ABViewManager\");\n\nexport default class ABClassApplicationMobile extends ABApplicationMobileCore {\n   constructor(attributes, AB) {\n      super(attributes, AB);\n   }\n\n   ///\n   /// Definition\n   ///\n\n   /**\n    * @method pageNew()\n    * return a new instance of an ABViewPageMobile\n    * @param values\n    *        The initial settings for the page.\n    * @return {ABViewPageMobile}\n    */\n   pageNew(values) {\n      return new ABViewPageMobile(values, this);\n   }\n}\n","import ABEmitter from \"./ABEmitter\";\n\n// const CustomComponentManager = require(\"../../webix_custom_components/customComponentManager\");\n\n// let L = (...params) => AB.Multilingual.label(...params);\n\nexport default class ABComponent extends ABEmitter {\n   /**\n    * @param {object} App\n    *      ?what is this?\n    * @param {string} idBase\n    *      Identifier for this component\n    */\n   constructor(App, idBase, AB) {\n      super();\n\n      // Transition Code:\n      // make sure we have an this.AB\n      if (App && App.AB) {\n         this.AB = App.AB;\n      }\n\n      // passed in AB will override\n      if (AB) {\n         this.AB = AB;\n         // {ABFactory} AB\n      }\n\n      if (!App) {\n         if (AB._App) {\n            App = AB._App;\n         } else {\n            App = {\n               uuid: AB.jobID(),\n\n               /*\n                * AB\n                * the {ABFactory} for our interface.\n                */\n               AB: AB,\n\n               /*\n                * actions:\n                * a hash of exposed application methods that are shared among our\n                * components, so one component can invoke an action that updates\n                * another component.\n                */\n               actions: {},\n\n               /*\n                * config\n                * webix configuration settings for our current browser\n                */\n               config: {}, // AB.UISettings.config(),\n\n               /*\n                * custom\n                * a collection of custom components for this App Instance.\n                */\n               custom: null,\n\n               /*\n                * Icons\n                * this will provide you with the list of avaialbe font awesome 4.7.0 icons to use in interface building\n                */\n               icons: {}, // AB.UISettings.icons,\n\n               Label: AB.Label(),\n\n               /*\n                * labels\n                * a collection of labels that are common for the Application.\n                */\n               labels: {\n                  // add: L(\"Add\"),\n                  // create: L(\"Create\"),\n                  // delete: L(\"Delete\"),\n                  // edit: L(\"Edit\"),\n                  // export: L(\"Export\"),\n                  // formName: L(\"Name\"),\n                  // import: L(\"Import\"),\n                  // rename: L(\"Rename\"),\n                  // ok: L(\"Ok\"),\n                  // cancel: L(\"Cancel\"),\n                  // save: L(\"Save\"),\n                  // yes: L(\"Yes\"),\n                  // no: L(\"No\"),\n                  // none: L(\"None\"),\n                  // close: L(\"Close\"),\n                  // default: L(\"Default\"),\n                  // defaultPlaceholder: L(\"Enter default value\"),\n                  // disable: L(\"Disable\"),\n                  // required: L(\"Required\"),\n                  // unique: L(\"Unique\"),\n                  // invalidMessage: {\n                  //    required: L(\"This field is required\"),\n                  // },\n                  // createErrorMessage: L(\"System could not create <b>{0}</b>.\"),\n                  // createSuccessMessage: L(\"<b>{0}</b> is created.\"),\n                  // updateErrorMessage: L(\"System could not update <b>{0}</b>.\"),\n                  // updateSucessMessage: L(\"<b>{0}</b> is updated.\"),\n                  // deleteErrorMessage: L(\"System could not delete <b>{0}</b>.\"),\n                  // deleteSuccessMessage: L(\"<b>{0}</b> is deleted.\"),\n                  // renameErrorMessage: L(\"System could not rename <b>{0}</b>.\"),\n                  // renameSuccessMessage: L(\"<b>{0}</b> is renamed.\"),\n                  // // Data Field  common Property labels:\n                  // dataFieldHeaderLabel: L(\"Section Title\"),\n                  // dataFieldHeaderLabelPlaceholder: L(\"Section Name\"),\n                  // dataFieldLabel: L(\"Label\"),\n                  // dataFieldLabelPlaceholder: L(\"Label\"),\n                  // dataFieldColumnName: L(\"Field Name\"),\n                  // dataFieldColumnNamePlaceholder: L(\"Database field name\"),\n                  // dataFieldShowIcon: L(\"show icon?\"),\n                  // componentDropZone: L(\"add widgets here\"),\n               },\n\n               /*\n                * unique()\n                * A function that returns a globally unique Key.\n                * @param {string} key   The key to modify and return.\n                * @return {string}\n                */\n               unique: function (key) {\n                  return `${key}${this.uuid}`;\n               },\n            };\n            AB._App = App;\n         }\n      }\n\n      // if (!App.custom) {\n      //    if (!AB.custom) {\n      //       var componentManager = new CustomComponentManager();\n      //       componentManager.initComponents(App);\n      //    } else {\n      //       App.custom = AB.custom;\n      //    }\n      // }\n\n      this.App = App;\n\n      this.idBase = idBase || \"?idbase?\";\n   }\n\n   actions(_actions) {\n      console.error(\"!!! REFACTOR out .actions()\");\n      if (_actions) {\n         for (var a in _actions) {\n            this.App.actions[a] = _actions[a];\n         }\n      }\n   }\n\n   Label() {\n      return (...params) => {\n         // console.error(\"!! App.label() depreciated.\");\n         return this.AB.Multilingual.label(...params);\n      };\n   }\n\n   unique(key) {\n      return this.App.unique(`${this.idBase}_${key}`);\n   }\n}\n","import ABObjectQuery from \"./ABObjectQuery\";\nimport ABDataCollectionCore from \"../core/ABDataCollectionCore\";\n\nimport ABEmitter from \"./ABEmitter\";\nimport ABMobileDC from \"./ABMobileDC\";\n\nclass DC extends ABEmitter {\n   constructor(attributes, AB) {\n      super();\n      // this.setMaxListeners(0);\n      this.AB = AB;\n   }\n}\n\nexport default class ABDataCollection extends ABDataCollectionCore {\n   constructor(attributes, AB) {\n      super(attributes, AB);\n      this.setMaxListeners(0);\n\n      this.$state = null;\n      // {Framework7.store} The shared F7 data store\n   }\n\n   ///\n   /// Cursor\n   ///\n\n   /**\n    * currentUserUsername\n    * must return the proper value for the current user that would match a \"user\" field\n    * in an object.\n    * This is platform dependent, so must be implemented by a child object.\n    * @return {string}\n    */\n   currentUserUsername() {\n      return this.AB.Account.username();\n   }\n\n   ///\n   /// Data\n   ///\n\n   setState(state) {\n      this.$state = state;\n   }\n\n   hasMore() {\n      // if we are not yet initialized:\n      if (!this.isDataInitialized) {\n         return true;\n      }\n\n      return (this.__totalCount || 0) > this.$state[this.id].length;\n   }\n\n   init() {\n      // prevent initialize many times\n      if (this.initialized) return;\n      // this.initialized = true;  // <<---- DO NOT SET THIS HERE, it goes in CORE\n\n      super.init();\n\n      //// Now connect our platform hub to our Object Triggers:\n\n      // events\n      this.AB.on(\"ab.datacollection.create\", (data) => {\n         // debugger;\n         this.emit(\"ab.datacollection.create\", data);\n      });\n\n      this.AB.on(\"ab.datacollection.update\", (data) => {\n         // debugger;\n         this.emit(\"ab.datacollection.update\", data);\n      });\n\n      // We are subscribing to notifications from the server that an item may\n      // be stale and needs updating\n      // We will improve this later and verify that it needs updating before\n      // attempting the update on the client side\n      this.AB.on(\"ab.datacollection.stale\", (data) => {\n         // debugger;\n         this.emit(\"ab.datacollection.stale\", data);\n      });\n\n      this.AB.on(\"ab.datacollection.delete\", (data) => {\n         // debugger;\n         this.emit(\"ab.datacollection.delete\", data);\n      });\n\n      this.bindParentDc();\n   }\n\n   bindParentDc() {\n      // if we pass the master datacollection and the field it is linked to\n      // we want to bind it with that field as second param so dataFeed is\n      // used on the slave datacollection\n      let dataCollectionLink = this.datacollectionLink;\n      let fieldLink = this.fieldLink;\n      if (!this.settings.loadAll && dataCollectionLink && fieldLink) {\n         let dc = this.__dataCollection;\n         // the second param is the field id we bind the data to the master with\n         dc.bind(dataCollectionLink.__dataCollection, fieldLink.id);\n         // defining dataFeed allows us to query the database when the table is scrolled\n         dc.define(\"dataFeed\", (value, params) => {\n            let cursorUpdated = false;\n            // check if the current cursor was updated\n            if (this?.datacollectionLink?.getCursor()?.id == value) {\n               cursorUpdated = true;\n            }\n\n            // this is the same item that was already bound...don't reload data\n            if (cursorUpdated) {\n               // now that we have the modified wheres the dataCollections wheres\n               // need to be modified for subsequent loads on scroll so lets set them\n               // this.reloadWheres(wheres);\n\n               // reload data\n               this.reloadData(0, 20);\n            }\n         });\n      }\n   }\n\n   loadData(start, limit = 20) {\n      return super.loadData(start, limit).catch((err) => {\n         // hideProgressOfComponents() is a platform specific action.\n         this.hideProgressOfComponents();\n\n         // propagate the error here:\n         if (err) {\n            throw err;\n         }\n      });\n   }\n\n   /**\n    * processIncomingData()\n    * is called from loadData() once the data is returned.  This method\n    * allows the platform to make adjustments to the data based upon any\n    * platform defined criteria.\n    * @param {obj} data  the data as it was returned from the Server\n    *        which should be in following format:\n    *        {\n    *          status: \"success\", // or \"error\"\n    *          data:[ {ABObjectData}, {ABObjectData}, ...]\n    *        }\n    */\n   processIncomingData(data) {\n      // Web Platform:\n\n      // data check:\n      if (data.data && !Array.isArray(data.data)) {\n         data.data = [data.data];\n      }\n\n      // standardize the heights\n\n      /*\n       // In v2: we move the row height calculation into the Interface designer.\n       //\n\n      // calculate default value of $height of rows\n      let obj = this.datasource;\n      let defaultHeight = 0;\n      let minHeight = 0;\n      let imageFields = obj.fields((f) => f.key == \"image\");\n      let hiddenFields = obj.objectWorkspace.hiddenFields;\n      imageFields.forEach(function (f) {\n         if (hiddenFields.indexOf(f.columnName) == -1) {\n            if (\n               parseInt(f.settings.useHeight) == 1 &&\n               parseInt(f.settings.imageHeight) > minHeight\n            ) {\n               minHeight = parseInt(f.settings.imageHeight) + 20;\n            } else {\n               minHeight = 100;\n            }\n         }\n      });\n      if (minHeight > 0) {\n         defaultHeight = minHeight;\n      }\n\n      (data.data || []).forEach((d) => {\n         // define $height of rows to render in webix elements\n         if (\n            d.properties != null &&\n            d.properties.height != \"undefined\" &&\n            parseInt(d.properties.height) > 0\n         ) {\n            d.$height = parseInt(d.properties.height);\n         } else if (defaultHeight > 0) {\n            d.$height = defaultHeight;\n         }\n      });\n      */\n\n      return super.processIncomingData(data).then(() => {\n         // Web Platform:\n         // when that is done:\n         this.hideProgressOfComponents();\n      });\n   }\n\n   ///\n   /// Components\n   ///\n\n   /**\n    * @method attachFlexlayout\n    *\n    *\n    * @param {Object} component - a webix flexlayout element instance\n    */\n   attachFlexlayout(component) {\n      var dc = this.__dataCollection;\n\n      // prevent attach many times\n      if (this.__flexComponentIds.indexOf(component.config.id) > -1) {\n         return;\n      } else {\n         // keep component id to an array\n         this.__flexComponentIds.push(component.config.id);\n      }\n   }\n\n   /**\n    * @method bind\n    *\n    *\n    * @param {Object} component - a webix element instance\n    */\n   bind(component) {\n      console.error(\"ABDataCollection.bind()!: Who is calling this?\");\n      var dc = this.__dataCollection;\n\n      // prevent bind many times\n      if (\n         this.__bindComponentIds.indexOf(component.config.id) > -1 &&\n         $$(component.config.id).data &&\n         $$(component.config.id).data.find &&\n         $$(component.config.id).data.find({}).length > 0\n      )\n         return;\n      // keep component id to an array\n      else this.__bindComponentIds.push(component.config.id);\n\n      if (\n         component.config.view == \"datatable\" ||\n         component.config.view == \"dataview\" ||\n         component.config.view == \"treetable\" ||\n         component.config.view == \"kanban\"\n      ) {\n         if (dc) {\n            var items = dc.count();\n            if (\n               items == 0 &&\n               (this._dataStatus == this.dataStatusFlag.notInitial ||\n                  this._dataStatus == this.dataStatusFlag.initializing) &&\n               component.showProgress\n            ) {\n               component.showProgress({ type: \"icon\" });\n            }\n\n            component.define(\"datafetch\", 20);\n            component.define(\"datathrottle\", 500);\n\n            // initial data of treetable\n            if (component.config.view == \"treetable\") {\n               if (\n                  this.datasource &&\n                  this.datasource.isGroup &&\n                  this.__treeCollection\n               ) {\n                  component.define(\"data\", this.__treeCollection);\n                  component.refresh();\n               } else {\n                  // NOTE: tree data does not support dynamic loading when scrolling\n                  // https://forum.webix.com/discussion/3078/dynamic-loading-in-treetable\n                  component.define(\"data\", []);\n                  component.parse(dc.find({}));\n               }\n            } else {\n               component.data.sync(dc);\n            }\n\n            // Implement .onDataRequest for paging loading\n            if (!this.settings.loadAll) {\n               component.___AD = component.___AD || {};\n               // if (component.___AD.onDataRequestEvent) component.detachEvent(component.___AD.onDataRequestEvent);\n               if (!component.___AD.onDataRequestEvent) {\n                  component.___AD.onDataRequestEvent = component.attachEvent(\n                     \"onDataRequest\",\n                     (start, count) => {\n                        if (component.showProgress)\n                           component.showProgress({ type: \"icon\" });\n\n                        // load more data to the data collection\n                        dc.loadNext(count, start);\n\n                        return false; // <-- prevent the default \"onDataRequest\"\n                     }\n                  );\n               }\n\n               // // NOTE : treetable should use .parse or TreeCollection\n               // // https://forum.webix.com/discussion/1694/tree-and-treetable-using-data-from-datacollection\n               // if (\n               //    component.config.view == \"treetable\" &&\n               //    !this.datasource.isGroup\n               // ) {\n               //    component.___AD = component.___AD || {};\n               //    if (!component.___AD.onDcLoadData) {\n               //       component.___AD.onDcLoadData = () => {\n               //          component.parse(dc.find({}));\n               //       };\n\n               //       this.on(\"loadData\", component.___AD.onDcLoadData);\n               //    }\n               // }\n            }\n         } else {\n            component.data.unsync();\n         }\n      } else if (component.bind) {\n         if (dc) {\n            // Do I need to check if there is any data in the collection before binding?\n            component.bind(dc);\n         } else {\n            component.unbind();\n         }\n\n         if (component.refresh) component.refresh();\n      }\n   }\n\n   unbind(component) {\n      if (!component) return;\n\n      component.detachEvent(\"onDataRequest\");\n      if (component.___AD) {\n         if (component.___AD.onDataRequestEvent)\n            delete component.___AD.onDataRequestEvent;\n\n         if (component.___AD.onDcLoadData) {\n            if (this.off) this.off(\"loadData\", component.___AD.onDcLoadData);\n            delete component.___AD.onDcLoadData;\n         }\n      }\n\n      if (component.data && component.data.unsync) {\n         component.data.unsync();\n         component.define(\"data\", []);\n      }\n\n      if (component.unbind) component.unbind();\n\n      if (component.refresh) component.refresh();\n\n      // remove from array\n      this.__bindComponentIds = (this.__bindComponentIds || []).filter(\n         (id) => id != component.config.id\n      );\n   }\n\n   hideProgressOfComponents() {\n      this.__bindComponentIds.forEach((comId) => {\n         if ($$(comId) && $$(comId).hideProgress) $$(comId).hideProgress();\n      });\n   }\n\n   /** Private methods */\n\n   /**\n    * @method _dataCollectionNew\n    * Get webix.DataCollection\n    *\n    * @return {webix.DataCollection}\n    *\n    * @param {Array} data - initial data\n    */\n   _dataCollectionNew(data) {\n      // debugger;\n\n      // get a webix data collection\n      let dc = new ABMobileDC({\n         data: data || [],\n         DC: this,\n      });\n\n      this._extendCollection(dc);\n\n      return dc;\n   }\n\n   /**\n    * @method _treeCollectionNew\n    * Get webix.TreeCollection\n    *\n    * @return {webix.TreeCollection}\n    *\n    */\n   _treeCollectionNew() {\n      // get a webix data collection\n      let treeStore = new webix.TreeCollection();\n\n      this._extendCollection(treeStore);\n\n      return treeStore;\n   }\n\n   _extendCollection(dataStore) {\n      console.error(\n         \"TODO: ABDataCollection._extendCollection(): remove this call!\"\n      );\n      return;\n\n      // Apply this data collection to support multi-selection\n      // https://docs.webix.com/api__refs__selectionmodel.html\n      webix.extend(dataStore, webix.SelectionModel);\n\n      dataStore.___AD = dataStore.___AD || {};\n\n      // Implement .onDataRequest for paging loading\n      if (!this.settings.loadAll) {\n         if (!dataStore.___AD.onDataRequestEvent) {\n            dataStore.___AD.onDataRequestEvent = dataStore.attachEvent(\n               \"onDataRequest\",\n               (start, count) => {\n                  if (start < 0) start = 0;\n\n                  // load more data to the data collection\n                  this.loadData(start, count);\n\n                  return false; // <-- prevent the default \"onDataRequest\"\n               }\n            );\n         }\n\n         if (!dataStore.___AD.onAfterLoadEvent) {\n            dataStore.___AD.onAfterLoadEvent = dataStore.attachEvent(\n               \"onAfterLoad\",\n               () => {\n                  this.emit(\"loadData\", {});\n               }\n            );\n         }\n      }\n\n      // override unused functions of selection model\n      dataStore.addCss = function () {};\n      dataStore.removeCss = function () {};\n      dataStore.render = function () {};\n\n      if (!dataStore.___AD.onAfterLoad) {\n         dataStore.___AD.onAfterLoad = dataStore.attachEvent(\n            \"onAfterLoad\",\n            () => {\n               this.hideProgressOfComponents();\n            }\n         );\n      }\n   }\n\n   parseTreeCollection(data = {}) {\n      if (\n         !(this.__datasource instanceof ABObjectQuery) ||\n         !this.__datasource.isGroup ||\n         !this.__treeCollection\n      )\n         return;\n\n      let addRowToTree = (join = {}, parentAlias = null) => {\n         let alias = join.alias;\n\n         (data.data || []).forEach((row) => {\n            let dataId = row[`${alias}.uuid`] || row[`${alias}.id`];\n            if (!dataId) return;\n\n            // find parent nodes\n            let parentItemIds = [];\n            let parentId =\n               row[`${parentAlias}.uuid`] || row[`${parentAlias}.id`];\n            if (parentId) {\n               parentItemIds = this.__treeCollection\n                  .find(\n                     (item) =>\n                        item._alias == parentAlias && item._dataId == parentId\n                  )\n                  .map((item) => item.id);\n            }\n\n            // check exists\n            let exists = this.__treeCollection.find((item) => {\n               return (\n                  item._alias == alias &&\n                  item._dataId == dataId &&\n                  (parentItemIds.length == 0 ||\n                     parentItemIds.indexOf(item.$parent) > -1)\n               );\n            }, true);\n            if (exists) return;\n\n            let treeNode = {};\n            treeNode._alias = alias;\n            treeNode._dataId = dataId;\n            treeNode._itemId = row.id; // Keep row id for set cursor to data collection\n\n            Object.keys(row).forEach((propName) => {\n               // Pull value from alias\n               if (propName.indexOf(`${alias}.`) == 0) {\n                  treeNode[propName] = row[propName];\n               }\n            });\n\n            if (row.translations) treeNode.translations = row.translations;\n\n            // child nodes\n            if (parentItemIds.length > 0)\n               parentItemIds.forEach((parentItemId) => {\n                  this.__treeCollection.add(treeNode, null, parentItemId);\n               });\n            // root node\n            else this.__treeCollection.add(treeNode, null);\n         });\n\n         // Sub-joins\n         (join.links || []).forEach((link) => {\n            addRowToTree(link, alias);\n         });\n      };\n\n      // Show loading cursor\n      (this.__bindComponentIds || []).forEach((comId) => {\n         //// Webix Command here:\n         let boundComp = $$(comId);\n         if (boundComp && boundComp.showProgress)\n            boundComp.showProgress({ type: \"icon\" });\n\n         if (boundComp.data && boundComp.data.unsync) boundComp.data.unsync();\n      });\n\n      addRowToTree(this.__datasource.joins());\n\n      // Hide loading cursor\n      (this.__bindComponentIds || []).forEach((comId) => {\n         let boundComp = $$(comId);\n         if (boundComp && boundComp.hideProgress) boundComp.hideProgress();\n         boundComp.define(\"data\", this.__treeCollection);\n      });\n   }\n\n   warningsEval() {\n      super.warningsEval();\n\n      if (!this.datasource) {\n         this.warningsMessage(`doesn't have a datasource.`);\n      } else if (this.linkDatacollectionID) {\n         const linkDC = this.AB.datacollectionById(this.linkDatacollectionID);\n\n         if (!linkDC)\n            this.warningsMessage(\n               `can't resolve linkDatacollectionID[${this.linkDatacollectionID}]`\n            );\n      }\n   }\n\n   warningsMessage(msg, data = {}) {\n      let message = `Datacollection[${this.label}]: ${msg}`;\n      this._warnings.push({ message, data });\n   }\n\n   get userScopes() {\n      return this.AB.Account.scopes();\n   }\n}\n","import ABDefinitionCore from \"../core/ABDefinitionCore\";\n\nexport default class ABDefinition extends ABDefinitionCore {\n   // constructor(attributes, AB) {\n   //    super(attributes, AB);\n   // }\n}\n","/**\n * ABEmitter\n *\n * This is the platform dependent implementation of an Emitter object.\n *\n */\n\nimport EventEmitter from \"eventemitter2\";\n\nexport default class ABEmitter extends EventEmitter {\n   constructor() {\n      super(/*{ maxListeners: 0 }*/);\n   }\n}\n","import ABHintCore from \"../core/ABHintCore\";\n\nexport default class ABHint extends ABHintCore {\n   constructor(attributes, AB) {\n      super(attributes, AB);\n\n      // listen\n      // this.AB.on(\"ab.abprocess.update\", (data) => {\n      //    if (this.id == data.objectId) this.fromValues(data.data);\n      // });\n   }\n\n   /**\n    * @method destroy()\n    *\n    * destroy the current instance of ABObject\n    *\n    * also remove it from our parent application\n    *\n    * @return {Promise}\n    */\n   destroy(App) {\n      let L = this.AB.Label();\n      // remove all my Elements\n      var allSteps = this.steps();\n      var allDestroy = [];\n      allSteps.forEach((e) => {\n         allDestroy.push(e.destroy());\n      });\n      // remove reference on App and View\n      let hintIndex = App.hintIDs.indexOf(this.id);\n      if (hintIndex > -1) {\n         App.hintIDs.splice(hintIndex, 1);\n         App.save();\n      }\n\n      let view = App.views((v) => {\n         return v.id == this.settings.view;\n      })[0];\n\n      if (view) {\n         delete view.settings.hintID;\n         view.save();\n      }\n\n      return Promise.all(allDestroy).then(() => {\n         // now remove myself\n         return new Promise((resolve, reject) => {\n            this.toDefinition()\n               .destroy()\n               .then(() => {\n                  webix.message({\n                     text: L(\"Tutorial Deleted\"),\n                     type: \"success\",\n                     expire: 3000,\n                  });\n                  resolve();\n               })\n               .catch((err) => {\n                  reject(err);\n               });\n         });\n      });\n   }\n\n   /**\n    * @method save()\n    *\n    * persist this instance of ABObject with it's parent ABApplication\n    *\n    *\n    * @return {Promise}\n    *                .resolve( {this} )\n    */\n   save() {\n      return this.toDefinition()\n         .save()\n         .then((data) => {\n            // if I didn't have an .id then this was a create()\n            // and I need to update my data with the generated .id\n\n            if (!this.id) {\n               this.id = data.id;\n            }\n            return this;\n         });\n   }\n\n   isValid() {\n      // debugger;\n      return true;\n      // var validator = this.AB.Validation.validator();\n\n      // // label/name must be unique:\n      // var isNameUnique =\n      //    this.AB.processes((o) => {\n      //       return o.name.toLowerCase() == this.name.toLowerCase();\n      //    }).length == 0;\n      // if (!isNameUnique) {\n      //    validator.addError(\n      //       \"name\",\n      //       L(`Process name must be unique (\"{0}\" already in use)`, [this.name])\n      //    );\n      // }\n\n      // return validator;\n   }\n\n   /**\n    * @method warningsAll()\n    * Return an array of mis configuration warnings for our object or any\n    * of our sub elements.\n    * @return {array} [ { message: \"warning message\", data:{} } ]\n    */\n   warningsAll() {\n      // debugger;\n      // report both OUR warnings, and any warnings from any of our fields\n      // var allWarnings = [].concat(this._warnings);\n      // this.elements().forEach((e) => {\n      //    e.warningsEval();\n      //    allWarnings = allWarnings.concat(e.warnings());\n      // });\n      // if (this.elements().length == 0) {\n      //    allWarnings.push({ message: \"No process Tasks defined.\", data: {} });\n      // }\n      // // perform a check of our xml document to see if we have any unknown\n      // // shapes\n      // if (!this._DOMParser) {\n      //    if (window.DOMParser) {\n      //       // Handy snippet from https://stackoverflow.com/questions/17604071/parse-xml-using-javascript\n      //       this._DOMParser = function (xmlStr) {\n      //          return new window.DOMParser().parseFromString(\n      //             xmlStr,\n      //             \"text/xml\"\n      //          );\n      //       };\n      //    } else if (\n      //       typeof window.ActiveXObject != \"undefined\" &&\n      //       new window.ActiveXObject(\"Microsoft.XMLDOM\")\n      //    ) {\n      //       this._DOMParser = function (xmlStr) {\n      //          var xmlDoc = new window.ActiveXObject(\"Microsoft.XMLDOM\");\n      //          xmlDoc.async = \"false\";\n      //          xmlDoc.loadXML(xmlStr);\n      //          return xmlDoc;\n      //       };\n      //    } else {\n      //       throw new Error(\"No XML parser found\");\n      //    }\n      // }\n      // // find any references to our generic shapes\n      // let xml = this._DOMParser(this.xmlDefinition);\n      // const genericShapes = [\n      //    \"bpmn2:startEvent\",\n      //    \"bpmn2:task\",\n      //    \"bpmn2:endEvent\",\n      // ];\n      // genericShapes.forEach((s) => {\n      //    let allElements = xml.getElementsByTagName(s);\n      //    for (let x = 0; x < allElements.length; x++) {\n      //       // if we don't know about this shape\n      //       let ele = allElements[x];\n      //       let myEle = this.elementForDiagramID(allElements[x].id);\n      //       if (!myEle) {\n      //          this.unknownShape(allElements[x]);\n      //       }\n      //    }\n      // });\n      // // if any unknown shapes have been reported:\n      // if (this._unknownShapes.length) {\n      //    allWarnings.push({\n      //       message: \"Generic Tasks still undefined.\",\n      //       data: {},\n      //    });\n      // }\n      //\n      // return allWarnings;\n   }\n\n   createHintUI() {\n      // if already loaded skip\n      if ($$(this.id)) return;\n\n      let L = this.AB.Label();\n      let steps = [];\n      let next = 0;\n      let display = webix.storage.cookie.get(this.id);\n      if (display?.hide) return;\n      let dontShow = `<label class=\"dontShow\">\n                        <input onclick=\"webix.storage.cookie.put(this.dataset.hintId, {'hide': this.checked});\" data-hint-id=\"${\n                           this.id\n                        }\" type=\"checkbox\"> \n                        ${L(\"Don't show this again.\")}\n                     </label>`;\n      this.stepIDs.forEach((step) => {\n         next++;\n         let newStep = {};\n         newStep.id = this._steps[step].id;\n         newStep.el = this._steps[step].settings.el;\n         newStep.event = this._steps[step].settings.event;\n         newStep.title = this._steps[step].name;\n         newStep.text = this._steps[step].text + dontShow;\n         if (this.stepIDs[next]) {\n            newStep.nextEl = this._steps[this.stepIDs[next]].settings.el;\n            if (newStep.nextEl) {\n               newStep.hintId = this.id;\n               newStep.eventEl = \"button\"; // added this so we do not trigger a second advance on the hint when triggering the click below\n               newStep.next = function (event) {\n                  let nextEl = this.nextEl;\n                  let theNextEl = document.querySelector(nextEl);\n                  if (theNextEl && theNextEl.checkVisibility()) {\n                     return false;\n                  } else {\n                     document.querySelector(this.el).click();\n                     return false;\n                  }\n               };\n            }\n         }\n         if (newStep.el) steps.push(newStep);\n      });\n\n      let ui = {\n         view: \"hint\",\n         id: this.id,\n         steps: steps,\n         on: {\n            onNext: (step) => {\n               setTimeout(() => {\n                  const boxes = document.querySelectorAll(\n                     \"input[data-hint-id='\" + this.id + \"']\"\n                  );\n                  let display = webix.storage.cookie.get(this.id);\n                  boxes.forEach((b) => {\n                     b.checked = display?.hide || false;\n                  });\n               }, 100);\n            },\n            onPrevious: (step) => {\n               setTimeout(() => {\n                  const boxes = document.querySelectorAll(\n                     \"input[data-hint-id='\" + this.id + \"']\"\n                  );\n                  let display = webix.storage.cookie.get(this.id);\n                  boxes.forEach((b) => {\n                     b.checked = display?.hide || false;\n                  });\n               }, 100);\n            },\n         },\n      };\n\n      webix.delay(\n         () => {\n            webix.ui(ui).start();\n         },\n         null,\n         null,\n         2000\n      );\n\n      // $$(this.id);\n   }\n}\n","import ABIndexCore from \"../core/ABIndexCore\";\n\nexport default class ABIndex extends ABIndexCore {\n   // constructor(attributes, object) {\n   //    super(attributes, object);\n   // }\n\n   /**\n    * @method save()\n    * persist this instance of ABIndex with it's parent ABObject\n    * @return {Promise}\n    */\n   save() {\n      return super\n         .save()\n         .then(() => this.object.indexSave(this))\n         .then(() => this.migrateCreate());\n   }\n\n   /**\n    * @method destroy()\n    * destroy the current instance of ABIndex\n    * also remove it from our parent ABObject\n    * @return {Promise}\n    */\n   destroy() {\n      return new Promise((resolve, reject) => {\n         if (this.id) {\n            this.migrateDrop()\n               .then(() => {\n                  return super.destroy();\n               })\n               .then(() => this.object.indexRemove(this))\n               .then(resolve)\n               .catch(reject);\n         } else {\n            resolve();\n         }\n      });\n   }\n\n   warningsEval() {\n      super.warningsEval();\n\n      (this._unknownFieldIDs || []).forEach((id) => {\n         this.warningsMessage(`is referencing an unknown field id[${id}]`);\n      });\n\n      if (this.fields.length == 0) {\n         this.warningsMessage(`is not referencing any fields`);\n      }\n   }\n\n   /**\n    * @method warningsMessage()\n    * generate a commonly formatted warning message for this ABField.\n    * This is expected to be called from within a .warningsEval()\n    * method when generating warnings.\n    * @param {string} msg\n    *        the warning string to display\n    * @param {json} data\n    *        any relevant additional information for a developer to refer to.\n    */\n   warningsMessage(msg, data = {}) {\n      let message = `Index[${this.label}]: ${msg}`;\n      this._warnings.push({ message, data });\n   }\n\n   ///\n   /// DB Migrations\n   ///\n\n   migrateCreate() {\n      return this.AB.Network.post({\n         url: `/definition/migrate/object/${this.object.id}/index/${this.id}`,\n         // data: this.toObj(),\n      });\n   }\n\n   migrateDrop() {\n      return this.AB.Network[\"delete\"]({\n         url: `/definition/migrate/object/${this.object.id}/index/${this.id}`,\n      });\n   }\n}\n","/**\n * ABMLClass\n * manage the multilingual information of an instance of a AB Defined Class.\n *\n * these classes have certain fields (\"label\", \"description\"), that can be\n * represented in different language options as defined by our platform.\n *\n * This platform ABMLClass will define 2 methods that allow for the translation\n * untranslation of this data.\n */\n// var ABMLClassCore = require(\"../core/ABMLClassCore\");\nimport ABMLClassCore from \"../core/ABMLClassCore\";\n\nexport default class ABMLClass extends ABMLClassCore {\n   constructor(fieldList, AB) {\n      super(fieldList, AB);\n\n      this._warnings = [];\n      // {array}\n      // an array of warning messages for this object.\n      // each warning entry should be in the format:\n      // WarningMessage: {\n      //    message: {string} \"message to display\"\n      //    data: {json} additional debugging information\n      // }\n   }\n\n   // fromValues(attributes) {\n   //    super.fromValues(attributes);\n   // }\n\n   /**\n    * @method warnings()\n    * returns the stored warnings for this ONE object.\n    * @return {array} WarningMessage\n    */\n   warnings() {\n      return this._warnings;\n   }\n\n   /**\n    * @method warningsEval()\n    * This method causes an object to re-evaluate it's settings to see if there\n    * are any potential errors.\n    */\n   warningsEval() {\n      this._warnings = [];\n   }\n\n   /**\n    * @method warningsAll()\n    * returns all relevant warnings for the current Object. This includes any\n    * sub fields, links, views, etc...\n    * @return {array} warning structures\n    *          [ {WarningMessage}, ... ]\n    */\n   warningsAll() {\n      return this.warnings();\n   }\n\n   /**\n    * @method languageDefault\n    * return a default language code.\n    * @return {string}\n    */\n   languageDefault() {\n      return this.AB.Account.language() || \"en\";\n   }\n\n   /**\n    * @method destroy()\n    * remove this definition.\n    * @return {Promise}\n    */\n   async destroy() {\n      var def = this.toDefinition();\n      if (def.id) {\n         return def.destroy().catch((err) => {\n            if (err.toString().indexOf(\"No record found\") > -1) {\n               // this is weird, but not breaking:\n               console.log(\n                  `ABMLClass.destroy(): could not find record for id[${def.id}]`\n               );\n               console.log(def);\n               return;\n            }\n            throw err;\n         });\n      }\n      return Promise.resolve();\n   }\n\n   /**\n    * @method save()\n    * persist this definition of our {ABxxx} Object\n    * @return {Promise}\n    */\n   async save() {\n      var def = this.toDefinition();\n      // if not name, try to use our label as the name\n      def.name = def.name || this.name || this.label || \"name\";\n      var data = await def.save();\n      if (!this.id) {\n         this.id = data.id;\n      }\n   }\n}\n","/**\n * ABMobileDC\n *\n * This is the platform dependent implementation of our DataCollection object.\n *\n * The ABDataCollection objects are designed around working with an instance\n * of a Webix Datacollection to manage getting the data into the various UI\n * elements.\n *\n * Now on Framework7 we have to work with F7 stores.  This object is designed\n * to follow our existing Object API, while working with F7 Stores to update\n * the UI.\n *\n * GOAL: we will implement an object that mimics the Webix.DataCollection\n * features that are used in our CORE part of the codebase.  And then recode\n * our PLATFORM.DataCollection to approach things more in line with F7\n *\n */\n\nimport ABEmitter from \"./ABEmitter\";\n\nexport default class ABMobileDC extends ABEmitter {\n   constructor(Options) {\n      super(/*{ maxListeners: 0 }*/);\n\n      this.data = Options.data || [];\n      this.DC = Options.DC;\n\n      this.cursorID = null;\n\n      // Mock the ABDataCollectionCore.init(): initialization of the\n      // \"changeCursor\" event:\n      this.___AD = { onAfterCursorChange: () => true };\n   }\n\n   //\n   // 1) We need to connect our DC to a parent DC that we are linked to.\n   // Once the Parent DC is selected, we need to pull the current selection\n   // and then perform another reload() based upon\n   bind(DC, id) {}\n\n   // 2) continuous Scrolling:\n   //    Implemented at the level of the UI component:\n   //    <div onInfinite={ this.loadMore() }\n   //    loadMore() {\n   //       if (this.DC.hasMore()) {\n   //          this.DC.loadMore(); // <<-- DC will update the $store\n   //       }\n   //    }\n   /*\n\n dc.bind(dataCollectionLink.__dataCollection, fieldLink.id);\n// defining dataFeed allows us to query the database when the table is scrolled\ndc.define(\"dataFeed\", (value, params) => {\n   let cursorUpdated = false;\n   // check if the current cursor was updated\n   if (this?.datacollectionLink?.getCursor()?.id == value) {\n      cursorUpdated = true;\n   }\n\n   // this is the same item that was already bound...don't reload data\n   if (cursorUpdated) {\n      // now that we have the modified wheres the dataCollections wheres\n      // need to be modified for subsequent loads on scroll so lets set them\n      // this.reloadWheres(wheres);\n\n      // reload data\n      this.reloadData(0, 20);\n   }\n});\n\n*/\n\n   get PK() {\n      return this.DC.datasource.PK();\n   }\n\n   stateValues() {\n      if (!this.DC.$state) return [];\n      return this.DC.$state[this.DC.id];\n   }\n\n   add(value, indx) {\n      if (!Array.isArray(value)) {\n         value = [value];\n      }\n      let allValues = this.stateValues();\n      allValues.splice(indx, 0, ...value);\n      this.setValues(allValues);\n   }\n\n   clearAll() {\n      this.setValues([]);\n      this.cursorID = null;\n   }\n\n   count() {\n      return this.stateValues().length();\n   }\n\n   exists(ID) {\n      let allValues = this.stateValues();\n      let found = allValues.find((v) => ID == this.id(v));\n      return \"undefined\" !== typeof found;\n   }\n\n   /**\n    * filter(fn)\n    * Apply a filter to the current data set.\n    */\n   filter(fn) {\n      this.__unfilteredData = this.stateValues();\n\n      if (typeof fn == \"undefined\") {\n         this.setValues(this.__unfilteredData);\n         delete this.__unfilteredData;\n         return;\n      }\n\n      this.setValues(this.__unfilteredData.filter(fn));\n   }\n\n   find(fn = () => true) {\n      if (typeof fn != \"function\") {\n         if (typeof fn == \"object\") {\n            if (Object.keys(fn).length == 0) {\n               fn = () => true;\n            } else {\n               throw new Error(\"Improper parameter to .find():\", fn);\n            }\n         }\n      }\n      return this.stateValues().filter(fn);\n   }\n\n   /**\n    * @method getCursor()\n    * returns the ID of the item the cursor is set to.\n    * @return {string}\n    */\n   getCursor() {\n      return this.cursorID;\n   }\n\n   getFirstId() {\n      var allValues = this.stateValues();\n      if (allValues.length == 0) return null;\n      return this.id(allValues[0]);\n   }\n\n   getNextId(id) {\n      var idxFound = -1;\n      var PK = this.PK;\n      var allValues = this.stateValues();\n      for (var i = 0, val_len = allValues.length; i < val_len; i++) {\n         if (this.id(allValues[i]) == id) {\n            idxFound = i;\n            break;\n         }\n      }\n\n      if (idxFound == -1) {\n         return null;\n      }\n\n      return this.id(allValues[idxFound + 1]);\n   }\n\n   id(value) {\n      return value[this.PK] || value.id || value.uuid;\n   }\n\n   getItem(id) {\n      var PK = this.PK;\n      var allValues = this.stateValues();\n      return allValues.find((v) => this.id(v) == id);\n   }\n\n   /**\n    * @method load()\n    * can be called with a\n    * - data\n    */\n   load(fn) {\n      if (\"function\" == typeof fn) {\n         var result = fn();\n         // did the fn() return a Promise?\n         // if so, then wait for the result and pass to .parse()\n         if (result?.then) {\n            result.then((data) => {\n               if (data) this.parse(data);\n            });\n         } else {\n            // pass the result on to .parse()\n            if (result) this.parse(result);\n         }\n      } else {\n         this.parse(fn);\n      }\n   }\n\n   /**\n    * @method parse()\n    * take the provided data response from the server and store the\n    * data into our $store.\n    * data format could be the response packet:\n    *    {data: [], total_count: 11, pos: 0, offset: 0, limit: 20}\n    * or just the array of data to store: []\n    */\n   parse(data) {\n      // check to see if data is in expanded format:\n      // { data, pos, total_count, }\n\n      let dataIn = data.data || data;\n      let pos = data.pos || 0;\n      let tc = data.total_count || 0;\n\n      if (Array.isArray(dataIn) && dataIn.length == 0) return;\n\n      if (pos == 0) {\n         this.setValues(dataIn);\n      } else {\n         let allValues = this.stateValues();\n         allValues.splice(pos, 0, ...dataIn);\n         this.setValues(allValues);\n      }\n\n      // remove any stored filter\n      delete this.__unfilteredData;\n   }\n\n   remove(id) {\n      var PK = this.PK;\n      var allValues = this.stateValues();\n      this.setValues(allValues.filter((v) => this.id(v) != id));\n\n      if (this.__unfilteredData) {\n         this.__unfilteredData = this.__unfilteredData.filter(\n            (v) => this.id(v) != id\n         );\n      }\n\n      if (this.cursorID == id) this.cursorID = null;\n   }\n\n   setCursor(ID) {\n      this.cursorID = ID;\n      this.emit(\"onAfterCursorChange\");\n\n      // ABDataCollectionCore.init() : attempts to set up this dynamic,\n      // but we are initializing this here instead:\n      let currCursorItem = this.getItem(ID);\n      this.DC.emit(\"changeCursor\", currCursorItem);\n   }\n\n   setValues(data) {\n      // this.DC.dataInitialized();\n      this.DC.$state[this.DC.id] = data;\n   }\n\n   updateItem(ID, data) {\n      let item = this.getItem(ID);\n      for (var p in data) {\n         if (data.hasOwnProperty(p)) {\n            item[p] = data[p];\n         }\n      }\n\n      var allValues = this.stateValues().map((v) => {\n         if ((v.id || v.uuid) == (data.id || data.uuid)) {\n            return item;\n         } else {\n            return v;\n         }\n      });\n\n      this.setValues(allValues);\n   }\n\n   // DataCollectionCore.setCursor()\n   /*\n\n   attachEvent(str, fn() ) // onAfterCursorChange\n   \n   updateItem(d.id,updateItemData);\n\n   loadNext(count, start);\n*/\n}\n","import ABModelCore from \"../core/ABModelCore\";\n\n//\n// ABModel\n//\n// Represents the Data interface for an ABObject data.\n//\n// 2 ways to use an ABModel to load a DataTable:\n// \tMethod 1:\n// \tgather all the data externally and send to the DataTable\n//\t\tModel.findAll()\n//\t\t.then((data)=>{\n//\t\t\tDataTable.parse(data);\n//\t\t})\n//\n// \tMethod 2:\n// \tSet the Model object with a condition / skip / limit, then\n// \tuse it to load the DataTable:\n//\t\tModel.where({})\n//\t\t.skip(XX)\n//\t\t.limit(XX)\n//\t\t.loadInto(DataTable);\n\nfunction errorPopup(error) {\n   // Show the pop up\n   if (error && error.data && error.data.error == \"READONLY\") {\n      webix.alert({\n         title: \"Your action is blocked\",\n         ok: \"Ok\",\n         text: error.data.message || \"\",\n         type: \"alert-warning\",\n      });\n   }\n}\n\n/*\n * @function no_socket_trigger()\n * a common routine to trigger an update.\n * In the case where our AB.Network.type() isn't a socket implementation\n * we need to manually trigger the expected socket events ourselves.\n * This fn() attempts to simulate the socket responses in such a case.\n * @param {ABModel} model\n *        The ABModel currently processing the network transaction.\n * @param {string} key\n *        The socket update trigger we are simulating.\n * @param {json} data\n *        The relevant response from our network transaction.\n */\nfunction no_socket_trigger(model, key, data) {\n   // If we do not have socket updates available, then trigger an\n   // update event with this data.\n   if (model.AB.Network.type() != \"socket\") {\n      model.AB.emit(key, {\n         objectId: model.object.id,\n         data,\n      });\n   }\n}\n\nexport default class ABModel extends ABModelCore {\n   constructor(object) {\n      super(object);\n\n      this.handler_create = (...params) => {\n         this.handler_common(\"ab.datacollection.create\", ...params);\n      };\n\n      this.handler_delete = (...params) => {\n         this.handler_common(\"ab.datacollection.delete\", ...params);\n      };\n\n      this.handler_findAll = (...params) => {\n         this.handler_common(null, ...params);\n      };\n\n      this.handler_logs = (context, err, data) => {\n         if (err) {\n            context.reject?.(err);\n            return;\n         }\n         context.resolve?.(data);\n      };\n\n      this.handler_update = (...params) => {\n         this.handler_common(\"ab.datacollection.update\", ...params);\n      };\n\n      this.handler_common = (key, context, err, data) => {\n         // key: {string} the relevant socket event key\n         //      can be null if not relevant.\n         // context : {obj} any provided context data provided on the\n         //           this.AB.Network.get() call.\n         // err: {Error} any returned error message from api\n         // data: {obj} returned data from the model-get api in format:\n         //       {data: [], total_count: 1, pos: 0, offset: 0, limit: 0}\n         if (err) {\n            context.reject?.(err);\n            return;\n         }\n         if (key) {\n            // on \"update\" & \"create\" we want to normalizeData()\n            if (key.indexOf(\"delete\") == -1) {\n               this.normalizeData(data);\n            } else {\n               data = data.data || context.id;\n            }\n         } else {\n            // on a findAll we normalize data.data\n            this.normalizeData(data.data);\n         }\n\n         context.resolve?.(data);\n\n         if (key) {\n            no_socket_trigger(this, key, data);\n         }\n      };\n   }\n\n   ///\n   /// Static Methods\n   ///\n   /// Available to the Class level object.  These methods are not dependent\n   /// on the instance values of the Application.\n   ///\n\n   ///\n   /// Instance Methods\n   ///\n\n   // Prepare multilingual fields to be untranslated\n   // Before untranslating we need to ensure that values.translations is set.\n   prepareMultilingualData(values) {\n      // if this object has some multilingual fields, translate the data:\n      var mlFields = this.object.multilingualFields();\n      // if mlFields are inside of the values saved we want to translate otherwise do not because it will reset the translation field and you may loose unchanged translations\n      var shouldTranslate = false;\n      if (mlFields.length) {\n         mlFields.forEach(function (field) {\n            if (values[field] != null) {\n               shouldTranslate = true;\n            }\n         });\n      }\n      if (shouldTranslate) {\n         if (\n            values.translations == null ||\n            typeof values.translations == \"undefined\" ||\n            values.translations == \"\"\n         ) {\n            values.translations = [];\n         }\n         this.object.unTranslate(values, values, mlFields);\n      }\n   }\n\n   request(method, params) {\n      return this.AB.Network[method](params);\n   }\n\n   /**\n    * @method batchCreate\n    * update model values on the server.\n    */\n   batchCreate(values) {\n      values.batch.map((vals) => {\n         return this.prepareMultilingualData(vals.data);\n      });\n\n      return new Promise((resolve, reject) => {\n         var jobID = this.AB.jobID();\n         this.AB.Network.once(jobID, (context, err, data) => {\n            if (err) {\n               reject(err);\n               return;\n            }\n            this.normalizeData(data);\n            resolve(data);\n            // FIX: now with sockets, the triggers are fired from socket updates.\n            // trigger a create event\n            // triggerEvent('create', this.object, data);\n         });\n\n         this.AB.Network.post(\n            {\n               url: this.object.urlRestBatch(),\n               params: values,\n            },\n            {\n               key: jobID,\n               context: {},\n            }\n         )\n            // .then((data) => {\n            //    this.normalizeData(data);\n\n            //    resolve(data);\n\n            //    // FIX: now with sockets, the triggers are fired from socket updates.\n            //    // trigger a create event\n            //    // triggerEvent('create', this.object, data);\n            // })\n            .catch(reject);\n      });\n   }\n\n   /**\n    * @method create\n    * update model values on the server.\n    */\n   create(values) {\n      this.prepareMultilingualData(values);\n\n      // add default values record if no value is passed for column\n      this.object.fields().forEach((f) => {\n         if (values[f.columnName] === undefined) {\n            f.defaultValue(values);\n         }\n      });\n\n      return new Promise((resolve, reject) => {\n         var jobID = this.AB.jobID();\n         this.AB.Network.once(jobID, this.handler_create);\n         this.AB.Network.post(\n            {\n               url: this.object.urlRest(),\n               params: values,\n            },\n            {\n               key: jobID,\n               context: { resolve, reject },\n            }\n         ).catch((err) => {\n            errorPopup(err);\n            reject(err);\n         });\n      });\n   }\n\n   /**\n    * @method delete\n    * remove this model instance from the server\n    * @param {integer|UUID} id  the .id of the instance to remove.\n    * @return {Promise}\n    */\n   delete(id) {\n      return new Promise((resolve, reject) => {\n         var jobID = this.AB.jobID();\n         this.AB.Network.once(jobID, this.handler_delete);\n         this.AB.Network[\"delete\"](\n            {\n               url: this.object.urlRestItem(id),\n            },\n            {\n               key: jobID,\n               context: { resolve, reject, id },\n            }\n         ).catch((err) => {\n            errorPopup(err);\n            reject(err);\n         });\n      });\n   }\n\n   /**\n    * @method findAll\n    * performs a data find with the provided condition.\n    */\n   async findAll(cond) {\n      cond = cond || {};\n\n      // \t\t// prepare our condition:\n      // \t\tvar newCond = {};\n\n      // \t\t// if the provided cond looks like our { where:{}, skip:xx, limit:xx } format,\n      // \t\t// just use this one.\n      // \t\tif (cond.where) {\n      // \t\t\tnewCond = cond;\n      // \t\t} else {\n\n      // \t\t\t// else, assume the provided condition is the .where clause.\n      // \t\t\tnewCond.where = cond;\n      // \t\t}\n\n      // /// if this is our depreciated format:\n      // if (newCond.where.where) {\n      // \tOP.Error.log('Depreciated Embedded .where condition.');\n      // }\n\n      return new Promise((resolve, reject) => {\n         var jobID = this.AB.jobID();\n         this.AB.Network.once(jobID, this.handler_findAll);\n         this.AB.Network.get(\n            {\n               url: this.object.urlRest(),\n               params: cond,\n               // params: newCond\n            },\n            {\n               key: jobID,\n               context: { resolve, reject },\n            }\n         )\n            // .then((data) => {\n            //    this.normalizeData(data.data);\n\n            //    resolve(data);\n            // })\n            .catch((err) => {\n               if (err && err.code) {\n                  switch (err.code) {\n                     case \"ER_PARSE_ERROR\":\n                        this.AB.notify.developer(err, {\n                           message:\n                              \"AppBuilder:ABModel:findAll(): Parse Error with provided condition\",\n                           condition: cond,\n                        });\n                        break;\n\n                     default:\n                        this.AB.notify.developer(err, {\n                           message:\n                              \"AppBuilder:ABModel:findAll(): Unknown Error with provided condition\",\n                           condition: cond,\n                        });\n                        break;\n                  }\n               }\n               reject(err);\n            });\n      });\n   }\n\n   /**\n    * @method loadInto\n    * loads the current values into the provided Webix DataTable\n    * @param {DataTable} DT  A Webix component that can dynamically load data.\n    */\n   loadInto(DT) {\n      // if a limit was applied, then this component should be loading dynamically\n      if (this._limit) {\n         DT.define(\"datafetch\", this._limit);\n         DT.define(\"datathrottle\", 250); // 250ms???\n\n         // catch the event where data is requested:\n         // here we will do our own findAll() so we can persist\n         // the provided .where condition.\n\n         // oh yeah, and make sure to remove any existing event handler when we\n         // perform a new .loadInto()\n         DT.___AD = DT.___AD || {};\n         if (DT.___AD.onDataRequestEvent) {\n            DT.detachEvent(DT.___AD.onDataRequestEvent);\n         }\n         DT.___AD.onDataRequestEvent = DT.attachEvent(\n            \"onDataRequest\",\n            (start, count) => {\n               var cond = {\n                  where: this._where,\n                  sort: this._sort,\n                  limit: count,\n                  skip: start,\n               };\n\n               if (DT.showProgress) DT.showProgress({ type: \"icon\" });\n\n               this.findAll(cond).then((data) => {\n                  /*\n                   // In V2: we move the row height processing into \n                   // the interface designer \n\n                  data.data.forEach((item) => {\n                     if (\n                        item.properties != null &&\n                        item.properties.height != \"undefined\" &&\n                        parseInt(item.properties.height) > 0\n                     ) {\n                        item.$height = parseInt(item.properties.height);\n                     } else if (parseInt(this._where.height) > 0) {\n                        item.$height = parseInt(this._where.height);\n                     }\n                  });\n                  */\n                  DT.parse(data);\n\n                  if (DT.hideProgress) DT.hideProgress();\n               });\n\n               return false; // <-- prevent the default \"onDataRequest\"\n            }\n         );\n\n         DT.refresh();\n      }\n\n      // else just load it all at once:\n      var cond = {};\n      if (this._where) cond.where = this._where;\n      if (this._sort) cond.sort = this._sort;\n      if (this._limit != null) cond.limit = this._limit;\n      if (this._skip != null) cond.skip = this._skip;\n\n      if (DT.showProgress) DT.showProgress({ type: \"icon\" });\n\n      this.findAll(cond)\n         .then((data) => {\n            // v2: we no longer process item $height\n            /*\n            data.data.forEach((item) => {\n               if (\n                  item.properties != null &&\n                  item.properties.height != \"undefined\" &&\n                  parseInt(item.properties.height) > 0\n               ) {\n                  item.$height = parseInt(item.properties.height);\n               } else if (parseInt(this._where.height) > 0) {\n                  item.$height = parseInt(this._where.height);\n               }\n            });\n            */\n\n            DT.parse(data);\n\n            if (DT.hideProgress) DT.hideProgress();\n         })\n         .catch((err) => {\n            console.error(\"!!!!!\", err);\n         });\n   }\n\n   /**\n    * @method logs()\n    * return the log history related to this model's ABObject.\n    * @param {hash} options\n    *        a key=>value hash of optional search criteria\n    *        .rowId {string} the uuid of the individual entry we are querying\n    *        .levelName {string} the type of entry [\"insert\", \"update\", \"delete\"]\n    *        .username {string} the entries associated with the given user\n    *        .startDate {date} entries that happened ON or AFTER this date\n    *        .endDate {date} entries that happened ON or BEFORE this date\n    *        .start {integer} paging control: how many entries to skip\n    *        .limit {integer} paging control: only return this # entries\n    * @return {Promise}\n    */\n   logs(options) {\n      return new Promise((resolve, reject) => {\n         var jobID = this.AB.jobID();\n         this.AB.Network.once(jobID, this.handler_logs);\n         this.AB.Network.get(\n            {\n               url: this.object.urlRestLog(),\n               params: options,\n               // params: newCond\n            },\n            {\n               key: jobID,\n               context: { resolve, reject },\n            }\n         ).catch((err) => {\n            if (err && err.code) {\n               this.AB.notify.developer(err, {\n                  context: \"AppBuilder:ABModel:logs(): Error\",\n                  options,\n               });\n            }\n            reject(err);\n         });\n      });\n   }\n\n   /**\n    * @method limit\n    * set the limit value for this set of data\n    * @param {integer} limit  the number or elements to return in this call\n    * @return {ABModel} this object that is chainable.\n    */\n   limit(limit) {\n      this._limit = limit;\n      return this;\n   }\n\n   /**\n    * @method skip\n    * set the skip value for this set of data\n    * @param {integer} skip  the number or elements to skip\n    * @return {ABModel} this object that is chainable.\n    */\n   skip(skip) {\n      this._skip = skip;\n      return this;\n   }\n\n   /**\n    * @method update\n    * update model values on the server.\n    */\n   update(id, values) {\n      this.prepareMultilingualData(values);\n\n      // remove empty properties\n      for (var key in values) {\n         if (values[key] == null) delete values[key];\n      }\n\n      return new Promise((resolve, reject) => {\n         var jobID = this.AB.jobID();\n         this.AB.Network.once(jobID, this.handler_update);\n         this.AB.Network.put(\n            {\n               url: this.object.urlRestItem(id),\n               params: values,\n            },\n            { key: jobID, context: { resolve, reject } }\n         )\n            // .then((data) => {\n            //    this.normalizeData(data);\n\n            //    resolve(data);\n\n            //    // If we do not have socket updates available, then trigger an\n            //    // update event with this data.\n            //    if (this.AB.Network.type() != \"socket\") {\n            //       this.AB.emit(\"ab.datacollection.update\", {\n            //          objectId: this.object.id,\n            //          data,\n            //       });\n            //    }\n            // })\n            .catch((err) => {\n               errorPopup(err);\n               reject(err);\n            });\n      });\n   }\n\n   /**\n    * @method batchUpdate\n    * update value to many rows on the server.\n    */\n   batchUpdate({ rowIds, values }) {\n      return new Promise((resolve, reject) => {\n         var jobID = this.AB.jobID();\n         this.AB.Network.once(jobID, (context, err /*, data */) => {\n            if (err) {\n               reject(err);\n               return;\n            }\n            // this.normalizeData(data);\n            resolve(true);\n            // what about checking for socket updates?\n         });\n         this.AB.Network.put(\n            {\n               url: this.object.urlRestBatch(),\n               params: {\n                  rowIds,\n                  values,\n               },\n            },\n            { key: jobID, context: {} }\n         )\n            // .then(() => {\n            //    resolve(true);\n            // })\n            .catch(reject);\n      });\n   }\n}\n","//\n// ABModelQuery\n//\n// Represents the Data interface for an ABObjectQuery data.\n\nimport ABModel from \"./ABModel\";\n\nexport default class ABModelQuery extends ABModel {\n   ///\n   /// Instance Methods\n   ///\n\n   /**\n    * @method batchCreate\n    * update model values on the server.\n    */\n   batchCreate(values) {\n      var error = new Error(\n         \"ABObjectQuery.ABModelQuery.batchCreate() should not be called.\"\n      );\n      return Promise.reject(error);\n   }\n\n   /**\n    * @method create\n    * update model values on the server.\n    */\n   create(values) {\n      var error = new Error(\n         \"ABObjectQuery.ABModelQuery.create() should not be called.\"\n      );\n      return Promise.reject(error);\n   }\n\n   /**\n    * @method delete\n    * remove this model instance from the server\n    * @param {integer|UUID} id  the .id of the instance to remove.\n    * @return {Promise}\n    */\n   delete(id) {\n      var error = new Error(\n         \"ABObjectQuery.ABModelQuery.delete() should not be called.\"\n      );\n      return Promise.reject(error);\n   }\n\n   /**\n    * @method update\n    * update model values on the server.\n    */\n   update(id, values) {\n      var error = new Error(\n         \"ABObjectQuery.ABModelQuery.update() should not be called.\"\n      );\n      return Promise.reject(error);\n   }\n\n   /**\n    * @method batchUpdate\n    * update value to many rows on the server.\n    */\n   batchUpdate({ rowIds, values }) {\n      var error = new Error(\n         \"ABObjectQuery.ABModelQuery.batchUpdate() should not be called.\"\n      );\n      return Promise.reject(error);\n   }\n}\n","import ABObjectCore from \"../core/ABObjectCore\";\n// import ABObjectWorkspaceViewCollection from \"./workspaceViews/ABObjectWorkspaceViewCollection\";\n\nvar L = null;\n\n// NOTE: this has been moved to NetworkRestSocket:\n//\n// // Start listening for server events for object updates and call triggerEvent as the callback\n// if (typeof io != \"undefined\") {\n//    io.socket.on(\"ab.object.update\", function (msg) {\n//       AB.emit(\"ab.object.update\", {\n//          objectId: msg.objectId,\n//          data: msg.data,\n//       });\n//    });\n// } else {\n//    console.error(\"TODO: ABObject: configure Socket.io\");\n// }\n\n// io.socket.on(\"ab.object.delete\", function (msg) {\n// });\n\nexport default class ABObject extends ABObjectCore {\n   constructor(attributes, AB) {\n      if (!L) L = AB.Label();\n      super(attributes, AB);\n\n      // this.workspaceViews = new ABObjectWorkspaceViewCollection(\n      //    attributes,\n      //    this,\n      //    AB\n      // );\n\n      // listen for our ABFields.\"definition.updated\"\n      this.fields().forEach((f) => {\n         f.on(\"definition.updated\", (field) => {\n            // create a new Field with the updated def\n            var def = this.AB.definitionByID(field.id);\n            if (!def) return;\n\n            var newField = this.AB.fieldNew(def, this);\n\n            // we want to keep the same fieldID order:\n            var newFields = [];\n            this.fields().forEach((f) => {\n               if (f.id === field.id) {\n                  newFields.push(newField);\n                  return;\n               }\n               newFields.push(f);\n            });\n\n            this._fields = newFields;\n         });\n      });\n\n      // listen\n      // this.AB.on(\"ab.object.update\", (data) => {\n      //    if (this.id == data.objectId) this.fromValues(data.data);\n      // });\n\n      this._pendingNetworkRequests = {};\n      // {hash}   uuid : {Promise}\n      // convert our migrateXXXX() operations to be Relay/offline compatible.\n      // if a queued operation is sent after a web browser refresh, then\n      // we will NOT have a pending promise to .resolve()/.reject()\n\n      this._handler_object_migrate = (context, err, response) => {\n         // NOTE:\n         var pending = this._pendingNetworkRequests?.[context.uuid];\n         if (err) {\n            pending?.reject(err);\n            return;\n         }\n         pending?.resolve(response);\n      };\n      this.AB.Network.on(\"object.migrate\", this._handler_object_migrate);\n   }\n\n   /**\n    * @method refreshInstance()\n    * Used when a definition.updated message is detected on this ABObject.\n    * This method will return a new instance based upon the current definition\n    * and properly resolve any handlers and pending network Requests.\n    * @return {ABObject}\n    */\n   refreshInstance() {\n      var newObj = this.AB.objectByID(this.id);\n\n      // prevent doing this multiple times:\n      if (this._pendingNetworkRequests) {\n         // remove object.migrate listener\n         this.AB.Network.removeListener(\n            \"object.migrate\",\n            this._handler_object_migrate\n         );\n\n         // transfer the pending network requests\n         newObj._pendingNetworkRequests = this._pendingNetworkRequests;\n         this._pendingNetworkRequests = null;\n      }\n\n      return newObj;\n   }\n\n   ///\n   /// Static Methods\n   ///\n   /// Available to the Class level object.  These methods are not dependent\n   /// on the instance values of the Application.\n   ///\n\n   fromValues(attributes) {\n      /*\n\t\t{\n\t\t\tid: uuid(),\n\t\t\tname: 'name',\n\t\t\tlabelFormat: 'xxxxx',\n\t\t\tisImported: 1/0,\n\t\t\tisExternal: 1/0,\n\t\t\turlPath:'string',\n\t\t\timportFromObject: 'string', // JSON Schema style reference:  '#[ABApplication.id]/objects/[ABObject.id]'\n\t\t\t\t\t\t\t\t\t\t// to get other object:  ABApplication.objectFromRef(obj.importFromObject);\n\t\t\ttranslations:[\n\t\t\t\t{}\n\t\t\t],\n\t\t\tfields:[\n\t\t\t\t{ABDataField}\n\t\t\t]\n\t\t}\n\t\t*/\n\n      super.fromValues(attributes);\n\n      if (this.workspaceViews) this.workspaceViews.fromObj(attributes);\n   }\n\n   //// TODO: Refactor isValid() to ignore op and not error if duplicateName is own .id\n\n   isValid() {\n      var validator = this.AB.Validation.validator();\n\n      // label/name must be unique:\n      var isNameUnique =\n         this.AB.objects((o) => {\n            return (\n               o.id != this.id &&\n               o.name.toLowerCase() == this.name.toLowerCase()\n            );\n         }).length == 0;\n      if (!isNameUnique) {\n         validator.addError(\n            \"name\",\n            L('Object name must be unique (\"{0}\" already in use)', [this.name])\n         );\n      }\n\n      // Check the common validations:\n      // TODO:\n      // if (!inputValidator.validate(values.label)) {\n      // \t_logic.buttonSaveEnable();\n      // \treturn false;\n      // }\n\n      return validator;\n   }\n\n   /**\n    * @method isValidData\n    * Parse through the given data and return an array of any invalid\n    * value errors.\n    * @param {obj} data a key=>value hash of the inputs to parse.\n    * @return {array}\n    */\n   isValidData(data) {\n      var validator = this.AB.Validation.validator();\n      this.fields().forEach((f) => {\n         // check if value was passed, if so validate it\n         if (data.hasOwnProperty(f.columnName)) f.isValidData(data, validator);\n      });\n\n      return validator;\n   }\n\n   ///\n   /// Instance Methods\n   ///\n\n   /**\n    * @method fieldNew()\n    *\n    * return an instance of a new (unsaved) ABField that is tied to this\n    * ABObject.\n    *\n    * NOTE: this new field is not included in our this.fields until a .save()\n    * is performed on the field.\n    *\n    * @param {obj} values  the initial values for this field.\n    *\t\t\t\t\t\t{ key:'{string}'} is required\n    * @return {ABField}\n    */\n   // fieldNew ( values ) {\n   // \t// NOTE: ABFieldManager returns the proper ABFieldXXXX instance.\n   // \treturn ABFieldManager.newField( values, this );\n   // }\n\n   /// ABApplication data methods\n\n   /**\n    * @method destroy()\n    *\n    * destroy the current instance of ABObject\n    *\n    * also remove it from our parent application\n    *\n    * @return {Promise}\n    */\n   async destroy() {\n      /*\n        return new Promise((resolve, reject) => {\n            // Remove the import object, then its model will not be destroyed\n            if (this.isImported) {\n                this.application\n                    .objectDestroy(this)\n                    .catch(reject)\n                    .then(() => {\n                        resolve();\n                    });\n\n                return;\n            }\n\n            // OK, some of our Fields have special follow up actions that need to be\n            // considered when they no longer exist, so before we simply drop this\n            // object/table, drop each of our fields and give them a chance to clean up\n            // what needs cleaning up.\n\n            // ==> More work, but safer.\n            var fieldDrops = [];\n            this.fields().forEach((f) => {\n                fieldDrops.push(f.destroy());\n            });\n\n            Promise.all(fieldDrops)\n                .then(() => {\n                    return new Promise((next, err) => {\n                        // now drop our table\n                        // NOTE: our .migrateXXX() routines expect the object to currently exist\n                        // in the DB before we perform the DB operations.  So we need to\n                        // .migrateDrop()  before we actually .objectDestroy() this.\n                        this.migrateDrop()\n                            .then(() => {\n                                // finally remove us from the application storage\n                                return this.application.objectDestroy(this);\n                            })\n                            .then(next)\n                            .catch(err);\n                    });\n                })\n\n                // flag .disable to queries who contains this removed object\n                .then(() => {\n                    return new Promise((next, err) => {\n                        this.application\n                            .queries(\n                                (q) =>\n                                    q.objects((o) => o.id == this.id).length > 0\n                            )\n                            .forEach((q) => {\n                                q._objects = q.objects((o) => o.id != this.id);\n\n                                q.disabled = true;\n                            });\n\n                        next();\n                    });\n                })\n                .then(resolve)\n                .catch(reject);\n        });\n */\n\n      var removeFromApplications = () => {\n         var allRemoves = [];\n         this.AB.applications().forEach((app) => {\n            allRemoves.push(app.objectRemove(this));\n         });\n         return Promise.all(allRemoves);\n      };\n\n      var disableRelatedQueries = () => {\n         return new Promise((next /*, err */) => {\n            this.AB.queries(\n               (q) => q.objects((o) => o.id == this.id).length > 0\n            ).forEach((q) => {\n               // q._objects = q.objects((o) => o.id != this.id);\n\n               q.disabled = true;\n            });\n\n            next();\n         });\n      };\n\n      try {\n         // 1) remove us from all Application:\n         await removeFromApplications();\n\n         // 2) disable any connected Queries\n         await disableRelatedQueries();\n\n         // if an imported Object (FederatedTable, Existing Table, etc...)\n         // then skip this step\n         if (this.isImported) {\n            return Promise.resolve();\n         }\n\n         // time to remove my table:\n         // NOTE: our .migrateXXX() routines expect the object to currently exist\n         // in the DB before we perform the DB operations.  So we need to\n         // .migrateDrop()  before we actually .destroy() this.\n         await this.migrateDrop();\n\n         // now remove my definition\n\n         // start with my fields:\n         var fieldDrops = [];\n\n         // Only ABObjects should attempt any fieldDrops.\n         // ABObjectQueries can safely skip this step:\n         if (this.type == \"object\") {\n            var allFields = this.fields();\n            this._fields = []; // clear our field counter so we don't retrigger\n            // this.save() on each field.destroy();\n\n            allFields.forEach((f) => {\n               fieldDrops.push(f.destroy());\n            });\n         }\n         await Promise.all(fieldDrops);\n\n         await super.destroy();\n         this.emit(\"destroyed\");\n      } catch (err) {\n         this.AB.notify.developer(err, {\n            context: \"ABObject.destroy(): error destroying object.\",\n         });\n      }\n\n      // return Promise.resolve()\n      //    .then(() => {\n      //       // 1) remove us from all Application:\n      //       return removeFromApplications();\n      //    })\n      //    .then(() => {\n      //       // 2) disable any connected Queries\n      //       return disableRelatedQueries();\n      //    })\n      //    .then(() => {\n      //       // if an imported Object (FederatedTable, Existing Table, etc...)\n      //       // then skip this step\n      //       if (this.isImported) {\n      //          return Promise.resolve();\n      //       }\n\n      //       // time to remove my table:\n      //       // NOTE: our .migrateXXX() routines expect the object to currently exist\n      //       // in the DB before we perform the DB operations.  So we need to\n      //       // .migrateDrop()  before we actually .destroy() this.\n      //       return this.migrateDrop();\n      //    })\n      //    .then(() => {\n      //       // now remove my definition\n\n      //       // start with my fields:\n      //       var fieldDrops = [];\n\n      //       // Only ABObjects should attempt any fieldDrops.\n      //       // ABObjectQueries can safely skip this step:\n      //       if (this.type == \"object\") {\n      //          var allFields = this.fields();\n      //          this._fields = []; // clear our field counter so we don't retrigger\n      //          // this.save() on each field.destroy();\n\n      //          allFields.forEach((f) => {\n      //             fieldDrops.push(f.destroy());\n      //          });\n      //       }\n\n      //       return Promise.all(fieldDrops)\n      //          .then(() => {\n      //             // now me.\n      //             return super.destroy();\n      //          })\n      //          .then(() => {\n      //             this.emit(\"destroyed\");\n      //          });\n      //    });\n   }\n\n   /**\n    * @method save()\n    *\n    * persist this instance of ABObject with it's parent ABApplication\n    *\n    *\n    * @return {Promise}\n    *\t\t\t\t\t\t.resolve( {this} )\n    */\n   async save() {\n      var isAdd = false;\n\n      // if this is our initial save()\n      if (!this.id) {\n         this.label = this.label || this.name;\n         isAdd = true;\n      }\n\n      try {\n         await super.save();\n         if (isAdd) {\n            await this.migrateCreate();\n         }\n         return this;\n      } catch (err) {\n         this.AB.notify.developer(err, {\n            context: \"ABObject.save()\",\n            obj: this.toObj(),\n         });\n         throw err;\n      }\n   }\n\n   /**\n    * @method toObj()\n    *\n    * properly compile the current state of this ABApplication instance\n    * into the values needed for saving to the DB.\n    *\n    * Most of the instance data is stored in .json field, so be sure to\n    * update that from all the current values of our child fields.\n    *\n    * @return {json}\n    */\n   toObj() {\n      var result = super.toObj();\n\n      // result.objectWorkspaceViews = this.workspaceViews.toObj();\n\n      return result;\n   }\n\n   ///\n   /// DB Migrations\n   ///\n\n   migrateCreate() {\n      return new Promise((resolve, reject) => {\n         var uuid = this.AB.uuid();\n         this._pendingNetworkRequests[uuid] = { resolve, reject };\n         var jobResponse = {\n            key: \"object.migrate\",\n            context: { uuid, id: this.id },\n         };\n         this.AB.Network.post(\n            {\n               url: `/definition/migrate/object/${this.id}`,\n            },\n            jobResponse\n         );\n      });\n   }\n\n   migrateDrop() {\n      return new Promise((resolve, reject) => {\n         var uuid = this.AB.uuid();\n         this._pendingNetworkRequests[uuid] = { resolve, reject };\n         var jobResponse = {\n            key: \"object.migrate\",\n            context: { uuid, id: this.id },\n         };\n         this.AB.Network[\"delete\"](\n            {\n               url: `/definition/migrate/object/${this.id}`,\n            },\n            jobResponse\n         );\n      });\n   }\n\n   ///\n   /// Working with Client Components:\n   ///\n\n   /**\n    * @method columnResize()\n    *\n    * save the new width of a column\n    *\n    * @param {} id The instance of the field to save.\n    * @param {int} newWidth the new width of the field\n    * @param {int} oldWidth the old width of the field\n    * @return {Promise}\n    */\n   columnResize(columnName, newWidth /*, oldWidth */) {\n      var fieldID = null;\n      for (var i = 0; i < this._fields.length; i++) {\n         if (this._fields[i].columnName == columnName) {\n            fieldID = this._fields[i].id;\n            break;\n            // this._fields[i].settings.width = newWidth;\n         }\n      }\n\n      // Johnny: This is better but still not right.  the ABObject should not be\n      // storing sizes for field widths.  That is a function of the UI and which\n      // Grid is being displayed.  THAT GRID should be storing a column width\n      // locally.\n      // TODO: once we have v2 in place.\n\n      var fieldSettings = this.AB.localSettings(fieldID);\n      fieldSettings = fieldSettings || {};\n      fieldSettings.width = newWidth;\n\n      return this.AB.localSettings(fieldID, fieldSettings);\n      // return this.save();\n   }\n\n   // return the column headers for this object\n   // @param {bool} isObjectWorkspace  return the settings saved for the object workspace\n   columnHeaders(\n      isObjectWorkspace,\n      isEditable,\n      summaryColumns,\n      countColumns,\n      hiddenFieldNames\n   ) {\n      summaryColumns = summaryColumns || [];\n      countColumns = countColumns || [];\n\n      var headers = [];\n      // var columnNameLookup = {};\n\n      // get the header for each of our fields:\n      this.fields().forEach((f) => {\n         var header = f.columnHeader({\n            isObjectWorkspace: isObjectWorkspace,\n            editable: isEditable,\n         });\n\n         if (isEditable) {\n            header.validationRules = f.settings.validationRules;\n         }\n\n         header.alias = f.alias || undefined; // query type\n         header.fieldID = f.id;\n         // header.fieldURL = f.urlPointer();\n\n         // if the field specifies a width\n         if (f.settings.width != 0) {\n            header.width = f.settings.width;\n         }\n\n         // if the User has already updated a local width for this\n         var fieldSettings = this.AB.localSettings(f.id);\n         if (fieldSettings && fieldSettings.width) {\n            if (!header.width || fieldSettings.width > header.width) {\n               // set column width to the customized width\n               header.width = fieldSettings.width;\n            }\n         }\n\n         if (!header.width) {\n            // set column width to adjust:true by default;\n            header.adjust = true;\n         }\n\n         // add the summary footer\n         if (summaryColumns.indexOf(f.id) > -1) {\n            if (f.key == \"calculate\" || f.key == \"formula\") {\n               header.footer = { content: \"totalColumn\", field: f };\n            } else {\n               header.footer = { content: \"summColumn\" };\n            }\n         }\n         // add the count footer\n         else if (countColumns.indexOf(f.id) > -1)\n            header.footer = { content: \"countColumn\" };\n\n         headers.push(header);\n         // columnNameLookup[header.id] = f.columnName; // name => id\n      });\n\n      // update our headers with any settings applied in the Object Workspace\n      /*\n      // In v2: this is handled by the ABDesigner\n      //\n      if (isObjectWorkspace) {\n         let hiddenFieldList = [];\n\n         if (hiddenFieldNames && hiddenFieldNames.length > 0)\n            hiddenFieldList = hiddenFieldNames;\n         // else if (this.workspaceHiddenFields)\n         //    hiddenFieldList = this.workspaceHiddenFields;\n\n         if (hiddenFieldList.length > 0) {\n            hiddenFieldList.forEach((hfID) => {\n               headers.forEach((h) => {\n                  if (columnNameLookup[h.id] == hfID) {\n                     h.hidden = true;\n                  }\n               });\n            });\n         }\n      }\n      */\n\n      return headers;\n   }\n\n   // after a component has rendered, tell each of our fields to perform\n   // any custom display operations\n   // @param {Webix.DataStore} data a webix datastore of all the rows effected\n   //        by the render.\n   customDisplays(data, App, DataTable, rowIds, isEditable) {\n      if (!data || !data.getFirstId) return;\n\n      // var fields = this.fields(f => this.workspaceHiddenFields.indexOf(f.columnName) < 0);\n      let fields = [];\n      DataTable.eachColumn((columnName) => {\n         let field = this.fields((f) => f.columnName == columnName)[0];\n         if (field) fields.push(field);\n      });\n\n      if (rowIds != null) {\n         rowIds.forEach((id) => {\n            let row = data.getItem(id);\n            if (row) {\n               fields.forEach((f) => {\n                  let node = DataTable.getItemNode({\n                     row: row.id,\n                     column: f.columnName,\n                  });\n                  f.customDisplay(row, App, node, {\n                     editable: isEditable,\n                  });\n               });\n            }\n         });\n      } else {\n         let id = data.getFirstId();\n         while (id) {\n            var row = data.getItem(id);\n            if (row) {\n               fields.forEach((f) => {\n                  var node = DataTable.getItemNode({\n                     row: row.id,\n                     column: f.columnName,\n                  });\n                  f.customDisplay(row, App, node, {\n                     editable: isEditable,\n                  });\n               });\n            }\n            id = data.getNextId(id);\n         }\n      }\n   }\n\n   // Display data with label format of object\n   displayData(rowData) {\n      if (rowData == null) return \"\";\n\n      // translate multilingual\n      //// TODO: isn't this a MLObject??  use this.translate()\n      var mlFields = this.multilingualFields();\n      this.translate(rowData, rowData, mlFields);\n\n      var labelData = this.labelFormat || \"\";\n\n      // default label\n      if (!labelData && this.fields().length > 0) {\n         var defaultField = this.fields((f) => f.fieldUseAsLabel())[0];\n         if (defaultField) labelData = `{${defaultField.id}}`;\n         else\n            labelData = `${this.AB.isUUID(rowData.id) ? \"ID: \" : \"\"}${\n               rowData.id\n            }`; // show id of row\n      }\n\n      // get column ids in {colId} template\n      // ['{colId1}', ..., '{colIdN}']\n      var colIds = labelData.match(/\\{[^}]+\\}/g);\n\n      if (colIds && colIds.forEach) {\n         colIds.forEach((colId) => {\n            var colIdNoBracket = colId.replace(\"{\", \"\").replace(\"}\", \"\");\n\n            var field = this.fieldByID(colIdNoBracket);\n            if (field == null) return;\n\n            labelData = labelData.replace(colId, field.format(rowData) || \"\");\n         });\n      }\n\n      // if label is empty, then show .id\n      if (!labelData.trim()) {\n         let labelSettings = this.labelSettings || {};\n         if (labelSettings && labelSettings.isNoLabelDisplay) {\n            labelData = L(labelSettings.noLabelText || \"[No Label]\");\n         } else {\n            // show id of row\n            labelData = `${this.AB.isUUID(rowData.id) ? \"ID: \" : \"\"}${\n               rowData.id\n            }`;\n         }\n      }\n\n      return labelData;\n   }\n\n   currentView() {\n      console.error(\"ABObject.currentView(): who is calling this?\");\n      return null;\n      // return this.workspaceViews.getCurrentView();\n   }\n\n   warningsAll() {\n      // report both OUR warnings, and any warnings from any of our fields\n      var allWarnings = super.warningsAll();\n      this.fields().forEach((f) => {\n         allWarnings = allWarnings.concat(f.warnings());\n      });\n\n      this.indexes().forEach((i) => {\n         allWarnings = allWarnings.concat(i.warnings());\n      });\n\n      return allWarnings.filter((w) => w);\n   }\n\n   warningsEval() {\n      super.warningsEval();\n\n      let allFields = this.fields();\n\n      if (allFields.length == 0) {\n         this.warningsMessage(\"has no fields\");\n      }\n\n      (this._unknownFieldIDs || []).forEach((id) => {\n         this.warningsMessage(`is referencing an unknown field id[${id}]`);\n      });\n\n      (this._unknownIndex || []).forEach((id) => {\n         this.warningsMessage(`is referencing an unknown index id[${id}]`);\n      });\n\n      allFields.forEach((f) => {\n         f.warningsEval();\n      });\n\n      this.indexes().forEach((i) => {\n         i.warningsEval();\n      });\n   }\n\n   warningsMessage(msg, data = {}) {\n      let message = `Object[${this.label}]: ${msg}`;\n      this._warnings.push({ message, data });\n      // this.emit(\"warning\", warnMsg, data);\n   }\n\n   isUuid(text) {\n      console.error(\n         \"ABObject.isUuid(): is depreciated.  directly reference AB.Rules.isUUID() instead.\"\n      );\n      return this.AB.isUUID(text);\n   }\n}\n","import ABObject from \"./ABObject\";\n\n/**\n * ABObjectExternal\n * These are ABObjects that ... (might need to be refactored out?)\n * NOTE: on the web client, these should function just like ABObjects\n */\nexport default class ABObjectExternal extends ABObject {}\n","import ABObject from \"./ABObject\";\n\n/**\n * ABObjectImport\n * These are ABObjects that were Imported from existing Tables in the\n * system.\n *\n * NOTE: on the web client, these should function just like ABObjects\n */\nexport default class ABObjectImport extends ABObject {}\n","//\n// ABObjectQuery\n//\n// A type of Object in our system that is based upon a complex relationship of multiple\n// existing Objects.\n//\n// In the QueryBuilder section of App Builder, a new Query Object can be created.\n// An initial Object can be chosen from our current list of Objects. After that, additional Objects\n// and a specified join type can be specified.\n//\n// A list of fields from each specified Object can also be included as the data to be returned.\n//\n// A where statement is also part of the definition.\n//\n\nimport ABObjectQueryCore from \"../core/ABObjectQueryCore\";\n\nvar ABFactory = null;\nif (typeof io != \"undefined\") {\n   io.socket.on(\"ab.query.update\", function (msg) {\n      if (ABFactory) {\n         ABFactory.emit(\"ab.query.update\", {\n            queryId: msg.queryId,\n            data: msg.data,\n         });\n      } else {\n         console.error(\n            \"ABObjectQuery:: received io.socket msg before ABFactory is defined\"\n         );\n         console.error(\"TODO: move this to ABFactory!\");\n      }\n   });\n} else {\n   console.error(\"TODO: install socket.io client for sails updates.\");\n}\n\n// io.socket.on(\"ab.query.delete\", function (msg) {\n// });\n\nexport default class ABObjectQuery extends ABObjectQueryCore {\n   constructor(attributes, AB) {\n      super(attributes, AB);\n\n      if (!ABFactory) {\n         ABFactory = AB;\n      }\n      // listen\n      this.AB.on(\"ab.query.update\", (data) => {\n         if (this.id == data.queryId) this.fromValues(data.data);\n      });\n\n      // .fromValues() should already have been called in super()\n      // so now add in our conditionScan()\n      // NOTE: this can be folded into the Core once filterComplex\n      // is fully implemented and not on Platform only.\n\n      // now scan our conditions to make sure they are\n      // 1) reference fields that exist in our Query\n      // 2) completely filled out conditions.\n      this.conditionScan(this.where);\n   }\n\n   ///\n   /// Static Methods\n   ///\n   /// Available to the Class level object.  These methods are not dependent\n   /// on the instance values of the Application.\n   ///\n\n   ///\n   /// Instance Methods\n   ///\n\n   /// ABApplication data methods\n\n   /**\n    * @method destroy()\n    *\n    * destroy the current instance of ABObjectQuery\n    *\n    * also remove it from our parent application\n    *\n    * @return {Promise}\n    */\n   // destroy() {\n   //    return super.destroy().then(() => {\n   //       console.error(\"Move .queryRemove() to Appbuilder Designer.\");\n   //       // return this.AB.queryRemove(this);\n   //    });\n   // }\n\n   /**\n    * @method save()\n    *\n    * persist this instance of ABObjectQuery with it's parent ABApplication\n    *\n    * @return {Promise}\n    *\t\t\t\t\t\t.resolve( {this} )\n    */\n   // async save() {\n   //    try {\n   //       await super.save();\n   //       return this;\n   //    } catch (err) {\n   //       this.AB.notify.developer(err, {\n   //          context: \"ABObjectQuery.save()\",\n   //          query: this.toObj(),\n   //       });\n   //       throw err;\n   //    }\n   // }\n\n   ///\n   /// Fields\n   ///\n\n   /**\n    * @method importFields\n    * instantiate a set of fields from the given attributes.\n    * Our attributes are a set of field URLs That should already be created in their respective\n    * ABObjects.\n    * @param {array} fieldSettings The different field urls for each field\n    *             { }\n    * @param {bool} shouldAliasColumn\n    *        should we add the object alias to the columnNames?\n    *        this is primarily used on the web client\n    */\n   importFields(fieldSettings) {\n      super.importFields(fieldSettings);\n\n      this._fields.forEach((fieldEntry) => {\n         // include object name {aliasName}.{columnName}\n         // to use it in grid headers & hidden fields\n         fieldEntry.field.columnName = `${fieldEntry.alias}.${fieldEntry.field.columnName}`;\n      });\n   }\n\n   /**\n    * @method columnResize()\n    *\n    * save the new width of a column\n    *\n    * @param {} id The instance of the field to save.\n    * @param {int} newWidth the new width of the field\n    * @param {int} oldWidth the old width of the field\n    * @return {Promise}\n    */\n   columnResize(columnName, newWidth, oldWidth) {\n      let field = this.fields((f) => f.columnName == columnName)[0];\n      if (field) {\n         field.settings.width = newWidth;\n\n         return this.save();\n      } else {\n         return Promise.resolve();\n      }\n   }\n\n   ///\n   /// Working with Client Components:\n   ///\n\n   // return the column headers for this object\n   // @param {bool} isObjectWorkspace  return the settings saved for the object workspace\n   columnHeaders(\n      isObjectWorkspace,\n      isEditable,\n      summaryColumns,\n      countColumns,\n      hiddenFieldNames\n   ) {\n      var headers = super.columnHeaders(\n         isObjectWorkspace,\n         isEditable,\n         summaryColumns,\n         countColumns,\n         hiddenFieldNames\n      );\n\n      headers.forEach((h) => {\n         // pull object by alias\n         let object = this.objectByAlias(h.alias);\n         if (!object) return;\n\n         let field = object.fieldByID(h.fieldID);\n         if (!field) return;\n\n         // NOTE: query v1\n         let alias = \"\";\n         if (Array.isArray(this.joins())) {\n            alias = field.object.name;\n         } else {\n            alias = h.alias;\n         }\n\n         // include object name {aliasName}.{columnName}\n         // to use it in grid headers & hidden fields\n         h.id = `${alias}.${field.columnName}`;\n\n         // label\n         if (this.settings && this.settings.hidePrefix) {\n            h.header = `${field.label || \"\"}`;\n         } else {\n            h.header = `${field.object.label || \"\"}.${field.label || \"\"}`;\n         }\n\n         // icon\n         if (field.settings && field.settings.showIcon) {\n            h.header = `<span class=\"webix_icon fa fa-${field.fieldIcon()}\"></span>${\n               h.header\n            }`;\n         }\n\n         // If this query supports grouping, then add folder icon to display in grid\n         if (this.isGroup) {\n            let originTemplate = h.template;\n\n            h.template = (item, common) => {\n               if (item[h.id])\n                  return (\n                     common.icon(item, common) +\n                     (originTemplate\n                        ? originTemplate(item, common, item[h.id])\n                        : item[h.id])\n                  );\n               else return \"\";\n            };\n         }\n\n         h.adjust = true;\n         h.minWidth = 220;\n      });\n\n      return headers;\n   }\n\n   /**\n    * @method conditionScan()\n    * Scan the provided condition object and determine if there are any\n    * configuration issues.\n    * @param {obj} rule\n    *        the QueryBuilder rule that we are scanning.\n    * @param {array} listWarnings\n    *        An array of warnings that we should add our notices to.\n    */\n   conditionScan(rule) {\n      if (!rule) {\n         return;\n      }\n\n      if (rule.glue) {\n         (rule.rules || []).forEach((r) => {\n            this.conditionScan(r);\n         });\n         return;\n      }\n\n      // 1) we need to have any key as one of our fields.\n      let field = this.fieldByID(rule.key);\n      if (!field && rule.key != \"this_object\") {\n         this.warningsMessage(\n            \"condition does not reference one of our fields\",\n            {\n               rule,\n            }\n         );\n      }\n\n      // 2) completely filled out conditions.\n      if (!this._conditionCheck) {\n         this._conditionCheck = this.AB.filterComplexNew(\n            `${this.id}_conditionCheck`\n         );\n         // {FilterComplex} ._conditionCheck\n         // has our .isConditionComplete() method.\n      }\n      if (!this._conditionCheck.isConditionComplete(rule)) {\n         this.warningsMessage(\"incomplete condition definition\", {\n            rule,\n         });\n      }\n   }\n\n   warningsEval() {\n      super.warningsEval();\n\n      this.conditionScan(this.where);\n\n      /// include importFields() warnings:\n      this.__missingObject.forEach((f) => {\n         this.warningsMessage(\n            `IMPORT FIELDS: could not resolve object[${\n               f.objectID\n            }] for fieldSetting ${JSON.stringify(f)}`,\n            {\n               fieldInfo: f,\n            }\n         );\n      });\n\n      this.__missingFields.forEach((f) => {\n         this.warningsMessage(\n            `IMPORT FIELDS: Object[${f.objID}] could not find field[${\n               f.fieldID\n            }] for fieldSetting ${JSON.stringify(f.fieldInfo)}`,\n            {\n               object: f.objID,\n               fieldInfo: f.fieldInfo,\n            }\n         );\n      });\n\n      this.__cantFilter.forEach((f) => {\n         this.warningsMessage(\n            `Field[${f.field.id}] referenced in fieldSetting[${JSON.stringify(\n               f.fieldInfo\n            )}] did not pass .canFilterField`,\n            {\n               field: f.field.toObj(),\n               fieldInfo: f.fieldInfo,\n            }\n         );\n      });\n\n      this.__duplicateFields.forEach((f) => {\n         this.warningsMessage(\n            `Field[${\n               f.fieldInfo.fieldID\n            }] referenced in fieldSetting[${JSON.stringify(\n               f.fieldInfo\n            )}] is a duplicate`,\n            {\n               fieldInfo: f.fieldInfo,\n            }\n         );\n      });\n\n      this.__linkProblems.forEach((f) => {\n         this.warningsMessage(f.message, f.data);\n      });\n   }\n\n   warningsMessage(msg, data = {}) {\n      let message = `Query[${this.label}]: ${msg}`;\n      this._warnings.push({ message, data });\n   }\n\n   isUuid(text) {\n      console.error(\n         \"ABObject.isUuid(): is depreciated.  directly reference AB.Rules.isUUID() instead.\"\n      );\n      return this.AB.isUUID(text);\n   }\n}\n","import ABProcessCore from \"../core/ABProcessCore\";\n\nexport default class ABProcess extends ABProcessCore {\n   constructor(attributes, AB) {\n      super(attributes, AB);\n\n      this._unknownShapes = [];\n      // {array} [ BPMN:Shape, ... ]\n      // Generic Shapes that are added to the Process are registered here.\n      // We will list these as warnings to the ABDesigner.\n\n      // listen\n      this.AB.on(\"ab.abprocess.update\", (data) => {\n         if (this.id == data.objectId) this.fromValues(data.data);\n      });\n   }\n\n   /**\n    * @method destroy()\n    *\n    * destroy the current instance of ABObject\n    *\n    * also remove it from our parent application\n    *\n    * @return {Promise}\n    */\n   destroy() {\n      // remove all my Elements\n      var allElements = this.elements();\n      var allDestroy = [];\n      allElements.forEach((e) => {\n         allDestroy.push(e.destroy());\n      });\n\n      return Promise.all(allDestroy).then(() => {\n         // now remove myself\n         return new Promise((resolve, reject) => {\n            this.toDefinition()\n               .destroy()\n               .then(() => {\n                  // allow normal processing to contine now:\n                  resolve();\n               })\n               .then(() => {\n                  // in the background\n                  // remove this reference from ALL Applications that link\n                  // to me:\n                  console.error(\n                     \"TODO: ABProcess.destroy(): refactor to .emit('destroyed') and let containing Apps self remove.\"\n                  );\n                  var appsWithProcess = this.AB.applications().find((a) => {\n                     return a.hasProcess(this);\n                  });\n                  if (appsWithProcess.length > 0) {\n                     appsWithProcess.forEach((a) => {\n                        a.processRemove(this);\n                     });\n                  }\n               })\n               .catch((err) => {\n                  reject(err);\n               });\n         });\n      });\n   }\n\n   /**\n    * @method save()\n    *\n    * persist this instance of ABObject with it's parent ABApplication\n    *\n    *\n    * @return {Promise}\n    *\t\t\t\t\t\t.resolve( {this} )\n    */\n   save() {\n      // if this is an update:\n      // if (this.id) {\n      // \treturn ABDefinition.update(this.id, this.toDefinition());\n      // } else {\n\n      // \treturn ABDefinition.create(this.toDefinition());\n      // }\n\n      // make sure all our tasks have save()ed.\n      var allSaves = [];\n      var allTasks = this.elements();\n      allTasks.forEach((t) => {\n         allSaves.push(t.save());\n      });\n      return Promise.all(allSaves).then(() => {\n         // now we can save our Process definition\n         return this.toDefinition()\n            .save()\n            .then((data) => {\n               // if I didn't have an .id then this was a create()\n               // and I need to update my data with the generated .id\n\n               if (!this.id) {\n                  this.id = data.id;\n               }\n\n               // Also, our embedded elements now all have .ids\n               // where they might not have before.  So now\n               // rebuild our this._elements hash with all id\n               var _new = {};\n               let _old = this._elements;\n               Object.keys(this._elements).forEach((k) => {\n                  _new[this._elements[k].id] = this._elements[k];\n               });\n               this._elements = _new;\n\n               // check to see if an update happened and then make\n               // sure we have that saved.\n               let needSave = false;\n               Object.keys(_new).forEach((k) => {\n                  if (!_old[k]) {\n                     needSave = true;\n                  }\n               });\n\n               if (needSave) {\n                  return this.save();\n               }\n            });\n      });\n   }\n\n   isValid() {\n      var validator = this.AB.Validation.validator();\n\n      // label/name must be unique:\n      var isNameUnique =\n         this.AB.processes((o) => {\n            return o.name.toLowerCase() == this.name.toLowerCase();\n         }).length == 0;\n      if (!isNameUnique) {\n         let L = this.AB.Label();\n         validator.addError(\n            \"name\",\n            L(`Process name must be unique (\"{0}\" already in use)`, [this.name])\n         );\n      }\n\n      return validator;\n   }\n\n   /**\n    * @method elementNewForModelDefinition()\n    * create a new process element defined by the given BPMN:Element\n    *\n    * the BPMN:Element definition comes from the BPMN Modeler when a new\n    * diagram element is created.\n    *\n    * @param {BPMN:Element} element\n    *        the BPMN modeler diagram element definition\n    * @return {ABProcess[OBJ]}\n    */\n   elementNewForModelDefinition(element) {\n      var task = this.AB.processElementNewForModelDefinition(element, this);\n      if (task) {\n         this.elementAdd(task);\n      }\n      return task;\n   }\n\n   /**\n    * @method unknownShape()\n    * store a reference to a BPMN Shape that is in our XML diagram,\n    * but we don't have an element for.\n    * @param {BPMN:Shape} shape\n    */\n   unknownShape(shape) {\n      this.unknownShapeRemove(shape);\n      this._unknownShapes.push(shape);\n   }\n\n   /**\n    * @method unknownShapeRemove()\n    * make sure we no longer track the provided BPMN Shape as an unknown shape.\n    * @param {BPMN:Shape} shape\n    */\n   unknownShapeRemove(shape) {\n      this._unknownShapes = this._unknownShapes.filter((s) => s.id != shape.id);\n   }\n\n   /**\n    * @method warningsAll()\n    * Return an array of mis configuration warnings for our object or any\n    * of our sub elements.\n    * @return {array} [ { message: \"warning message\", data:{} } ]\n    */\n   warningsAll() {\n      // report both OUR warnings, and any warnings from any of our fields\n      var allWarnings = [].concat(this._warnings);\n      this.elements().forEach((e) => {\n         e.warningsEval();\n         allWarnings = allWarnings.concat(e.warnings());\n      });\n\n      if (this.elements().length == 0) {\n         allWarnings.push({ message: \"No process Tasks defined.\", data: {} });\n      }\n\n      // perform a check of our xml document to see if we have any unknown\n      // shapes\n      if (!this._DOMParser) {\n         if (window.DOMParser) {\n            // Handy snippet from https://stackoverflow.com/questions/17604071/parse-xml-using-javascript\n            this._DOMParser = function (xmlStr) {\n               return new window.DOMParser().parseFromString(\n                  xmlStr,\n                  \"text/xml\"\n               );\n            };\n         } else if (\n            typeof window.ActiveXObject != \"undefined\" &&\n            new window.ActiveXObject(\"Microsoft.XMLDOM\")\n         ) {\n            this._DOMParser = function (xmlStr) {\n               var xmlDoc = new window.ActiveXObject(\"Microsoft.XMLDOM\");\n               xmlDoc.async = \"false\";\n               xmlDoc.loadXML(xmlStr);\n               return xmlDoc;\n            };\n         } else {\n            throw new Error(\"No XML parser found\");\n         }\n      }\n\n      // find any references to our generic shapes\n      let xml = this._DOMParser(this.xmlDefinition);\n      const genericShapes = [\n         \"bpmn2:startEvent\",\n         \"bpmn2:task\",\n         \"bpmn2:endEvent\",\n      ];\n      genericShapes.forEach((s) => {\n         let allElements = xml.getElementsByTagName(s);\n         for (let x = 0; x < allElements.length; x++) {\n            // if we don't know about this shape\n            let ele = allElements[x];\n            let myEle = this.elementForDiagramID(allElements[x].id);\n            if (!myEle) {\n               this.unknownShape(allElements[x]);\n            }\n         }\n      });\n\n      // if any unknown shapes have been reported:\n      if (this._unknownShapes.length) {\n         allWarnings.push({\n            message: \"Generic Tasks still undefined.\",\n            data: {},\n         });\n      }\n\n      return allWarnings;\n   }\n}\n","import ABStepCore from \"../core/ABStepCore\";\n\n// let L = (...params) => AB.Multilingual.label(...params);\n\nexport default class ABStep extends ABStepCore {\n   constructor(attributes, AB) {\n      super(attributes, AB);\n\n      // listen\n      // this.AB.on(\"ab.abprocess.update\", (data) => {\n      //    if (this.id == data.objectId) this.fromValues(data.data);\n      // });\n   }\n\n   /**\n    * @method destroy()\n    *\n    * destroy the current instance of ABObject\n    *\n    * also remove it from our parent application\n    *\n    * @return {Promise}\n    */\n   destroy() {\n      // debugger;\n\n      return new Promise((resolve, reject) => {\n         this.toDefinition()\n            .destroy()\n            .then(() => {\n               resolve();\n            })\n            .catch((err) => {\n               reject(err);\n            });\n      });\n\n      // remove all my Elements\n      // var allElements = this.elements();\n      // var allDestroy = [];\n      // allElements.forEach((e) => {\n      //    allDestroy.push(e.destroy());\n      // });\n\n      // return Promise.all(allDestroy).then(() => {\n      //    // now remove myself\n      //    return new Promise((resolve, reject) => {\n      //       this.toDefinition()\n      //          .destroy()\n      //          .then(() => {\n      //             // allow normal processing to contine now:\n      //             resolve();\n      //          })\n      //          .then(() => {\n      //             // in the background\n      //             // remove this reference from ALL Applications that link\n      //             // to me:\n      //             console.error(\n      //                \"TODO: ABProcess.destroy(): refactor to .emit('destroyed') and let containing Apps self remove.\"\n      //             );\n      //             var appsWithProcess = this.AB.applications().find((a) => {\n      //                return a.hasProcess(this);\n      //             });\n      //             if (appsWithProcess.length > 0) {\n      //                appsWithProcess.forEach((a) => {\n      //                   a.processRemove(this);\n      //                });\n      //             }\n      //          })\n      //          .catch((err) => {\n      //             reject(err);\n      //          });\n      //    });\n      // });\n   }\n\n   /**\n    * @method save()\n    *\n    * persist this instance of ABObject with it's parent ABApplication\n    *\n    *\n    * @return {Promise}\n    *                .resolve( {this} )\n    */\n   save() {\n      // debugger;\n      return this.toDefinition()\n         .save()\n         .then((data) => {\n            // if I didn't have an .id then this was a create()\n            // and I need to update my data with the generated .id\n\n            if (!this.id) {\n               this.id = data.id;\n            }\n            return this;\n         });\n   }\n\n   isValid() {\n      // debugger;\n      return true;\n      // var validator = this.AB.Validation.validator();\n\n      // // label/name must be unique:\n      // var isNameUnique =\n      //    this.AB.processes((o) => {\n      //       return o.name.toLowerCase() == this.name.toLowerCase();\n      //    }).length == 0;\n      // if (!isNameUnique) {\n      //    validator.addError(\n      //       \"name\",\n      //       L(`Process name must be unique (\"{0}\" already in use)`, [this.name])\n      //    );\n      // }\n\n      // return validator;\n   }\n\n   /**\n    * @method warningsAll()\n    * Return an array of mis configuration warnings for our object or any\n    * of our sub elements.\n    * @return {array} [ { message: \"warning message\", data:{} } ]\n    */\n   warningsAll() {\n      // debugger;\n      // report both OUR warnings, and any warnings from any of our fields\n      // var allWarnings = [].concat(this._warnings);\n      // this.elements().forEach((e) => {\n      //    e.warningsEval();\n      //    allWarnings = allWarnings.concat(e.warnings());\n      // });\n      // if (this.elements().length == 0) {\n      //    allWarnings.push({ message: \"No process Tasks defined.\", data: {} });\n      // }\n      // // perform a check of our xml document to see if we have any unknown\n      // // shapes\n      // if (!this._DOMParser) {\n      //    if (window.DOMParser) {\n      //       // Handy snippet from https://stackoverflow.com/questions/17604071/parse-xml-using-javascript\n      //       this._DOMParser = function (xmlStr) {\n      //          return new window.DOMParser().parseFromString(\n      //             xmlStr,\n      //             \"text/xml\"\n      //          );\n      //       };\n      //    } else if (\n      //       typeof window.ActiveXObject != \"undefined\" &&\n      //       new window.ActiveXObject(\"Microsoft.XMLDOM\")\n      //    ) {\n      //       this._DOMParser = function (xmlStr) {\n      //          var xmlDoc = new window.ActiveXObject(\"Microsoft.XMLDOM\");\n      //          xmlDoc.async = \"false\";\n      //          xmlDoc.loadXML(xmlStr);\n      //          return xmlDoc;\n      //       };\n      //    } else {\n      //       throw new Error(\"No XML parser found\");\n      //    }\n      // }\n      // // find any references to our generic shapes\n      // let xml = this._DOMParser(this.xmlDefinition);\n      // const genericShapes = [\n      //    \"bpmn2:startEvent\",\n      //    \"bpmn2:task\",\n      //    \"bpmn2:endEvent\",\n      // ];\n      // genericShapes.forEach((s) => {\n      //    let allElements = xml.getElementsByTagName(s);\n      //    for (let x = 0; x < allElements.length; x++) {\n      //       // if we don't know about this shape\n      //       let ele = allElements[x];\n      //       let myEle = this.elementForDiagramID(allElements[x].id);\n      //       if (!myEle) {\n      //          this.unknownShape(allElements[x]);\n      //       }\n      //    }\n      // });\n      // // if any unknown shapes have been reported:\n      // if (this._unknownShapes.length) {\n      //    allWarnings.push({\n      //       message: \"Generic Tasks still undefined.\",\n      //       data: {},\n      //    });\n      // }\n      //\n      // return allWarnings;\n   }\n}\n","import ABViewManagerCore from \"../core/ABViewManagerCore\";\n\nexport default class ABViewManager extends ABViewManagerCore {}\n","import FilterComplexCore from \"../core/FilterComplexCore\";\n\n/**\n * @function _toInternal()\n * translate our external QB conditions into our internal format that\n * makes the cond.rule unique by adding the field.id to the rule.\n * @param {obj} cond - {\n *                         rules: [\n *                            {\n *                               alias: string || undefined,\n *                               key: uuid,\n *                               rule: string,\n *                               value: object,\n *                            }\n *                         ]\n *                      }\n *        the QB condition format we use exernally in our AB system.\n */\nfunction _toInternal(cond, fields = []) {\n   if (!cond) return;\n   if (cond.key) {\n      // Convert to format\n      // {\n      //    glue: \"and\",\n      //    rules: [\n      //       {\n      //          field: \"test_col\",\n      //          condition: { type: \"greater\", filter: 100 },\n      //       },\n      //    ],\n      // }\n      const field = fields.filter((f) => f.id == cond.key)[0];\n      cond.field = field?.id;\n\n      cond.condition = {\n         type: cond.rule,\n         filter: cond.value,\n      };\n\n      if (Array.isArray(cond.value)) cond.includes = cond.value;\n      else cond.includes = (cond.value ?? \"\").split(\",\");\n\n      if (field?.key == \"date\" || field?.key == \"datetime\") {\n         cond.condition.filter = cond.condition.filter\n            ? AB.rules.toDate(cond.condition.filter)\n            : null;\n\n         cond.includes = cond.includes.map((v) => AB.rules.toDate(v));\n      }\n\n      delete cond.key;\n      delete cond.rule;\n      delete cond.value;\n   }\n\n   if (cond.rules && cond.rules.length) {\n      (cond.rules ?? []).forEach((r) => {\n         _toInternal(r, fields);\n      });\n   }\n}\n\n/**\n * @function _toExternal()\n * translate our internal QB conditions into our external format that\n * where the cond.rule no longer has the field.id.\n * @param {obj} cond - {\n *                         glue: \"and\",\n *                         rules: [\n *                            {\n *                               field: \"test_col\",\n *                               condition: { type: \"greater\", filter: 100 },\n *                            },\n *                         ],\n *                      }\n *        the QB condition format we use internally\n */\nfunction _toExternal(cond, fields = []) {\n   if (!cond) return;\n   if (cond.field) {\n      let field = fields.filter((f) => f.id == cond.field)[0];\n      // cond.alias = alias || undefined;\n      cond.key = field?.id ?? cond.field;\n      cond.condition = cond.condition ?? {};\n      cond.rule = cond.condition.type;\n\n      let values =\n         cond.includes.map((v) => (v instanceof Date ? v.toISOString() : v)) ??\n         [];\n\n      // Convert multi-values to a string\n      if (cond.condition.filter) {\n         if (cond.condition.filter instanceof Date) {\n            if (values.indexOf(cond.condition.filter.toISOString()) < 0) {\n               values.push(cond.condition.filter);\n            }\n         } else if (values.indexOf(cond.condition.filter) < 0)\n            values.push(cond.condition.filter);\n      }\n\n      cond.value = values\n         .map((v) => {\n            // Convert date format\n            if (field && (field.key == \"date\" || field.key == \"datetime\"))\n               return field.exportValue(new Date(v));\n\n            return v;\n         })\n         .join(\",\");\n\n      delete cond.field;\n      delete cond.type;\n      delete cond.includes;\n      delete cond.condition;\n   }\n\n   if (cond.rules && cond.rules.length) {\n      (cond.rules ?? []).forEach((r) => {\n         _toExternal(r, fields);\n      });\n   }\n}\n\nexport default class FilterComplex extends FilterComplexCore {\n   constructor(idBase, AB, options = {}) {\n      idBase = idBase ?? \"ab_filterComplex\";\n\n      super(idBase, AB);\n\n      let L = this.AB.Label();\n\n      this._options = options ?? {};\n\n      this._initComplete = false;\n      // {bool}\n      // trying to prevent multiple .init() from being called due to\n      // various ways of initializing the component.\n\n      this.observing = false;\n      // {bool}\n      // try to prevent multiple observers generating >1 \"changed\"\n      // event.\n\n      let labels = (this.labels = {\n         common: (AB._App ?? {}).labels,\n         component: {\n            // and: L(\"And\"),\n            // or: L(\"Or\"),\n            // thisObject: L(\"This Object\"),\n            // inQuery: L(\"In Query\"),\n            // notInQuery: L(\"Not In Query\"),\n            // inQueryField: L(\"By Query Field\"),\n            // notInQueryField: L(\"Not By Query Field\"),\n            // inQueryFieldQueryPlaceholder: L(\"Choose a Query\"),\n            // inQueryFieldFieldPlaceholder: L(\"Choose a Field\"),\n            // sameAsUser: L(\"Same As User\"),\n            // notSameAsUser: L(\"Not Same As User\"),\n            // sameAsField: L(\"Same As Field\"),\n            // notSameAsField: L(\"Not Field\"),\n            // inDataCollection: L(\"In Data Collection\"),\n            // notInDataCollection: L(\"Not In Data Collection\"),\n            // containsCondition: L(\"contains\"),\n            // notContainsCondition: L(\"doesn't contain\"),\n            // isCondition: L(\"is\"),\n            // isNotCondition: L(\"is not\"),\n            // isEmpty: L(\"is empty\"),\n            // isNotEmpty: L(\"is not empty\"),\n            // beforeCondition: L(\"is before\"),\n            // afterCondition: L(\"is after\"),\n            // onOrBeforeCondition: L(\"is on or before\"),\n            // onOrAfterCondition: L(\"is on or after\"),\n            // beforeCurrentCondition: L(\"is before current date\"),\n            // afterCurrentCondition: L(\"is after current date\"),\n            // onOrBeforeCurrentCondition: L(\"is on or before current date\"),\n            // onOrAfterCurrentCondition: L(\"is on or after current date\"),\n            // onLastDaysCondition: L(\"last ... days\"),\n            // onNextDaysCondition: L(\"next ... days\"),\n            // equalCondition: L(\":\"),\n            // notEqualCondition: L(\"≠\"),\n            // lessThanCondition: L(\"<\"),\n            // moreThanCondition: L(\">\"),\n            // lessThanOrEqualCondition: L(\"≤\"),\n            // moreThanOrEqualCondition: L(\"≥\"),\n            // equalListCondition: L(\"equals\"),\n            // notEqualListCondition: L(\"does not equal\"),\n            // checkedCondition: L(\"is checked\"),\n            // notCheckedCondition: L(\"is not checked\"),\n            // isCurrentUserCondition: L(\"is current user\"),\n            // isNotCurrentUserCondition: L(\"is not current user\"),\n            // containsCurrentUserCondition: L(\"contains current user\"),\n            // notContainsCurrentUserCondition: L(\"does not contain current user\"),\n            // contextDefaultOption: L(\"choose option\"),\n            // equalsProcessValue: L(\"equals process value\"),\n            // notEqualsProcessValueCondition: L(\"not equals process value\"),\n            // inProcessValueCondition: L(\"in process value\"),\n            // notInProcessValueCondition: L(\"not in process value\"),\n         },\n      });\n\n      // internal list of Webix IDs to reference our UI components.\n      let ids = (this.ids = {\n         popup: this.unique(`${idBase}_popup`),\n         querybuilder: this.unique(`${idBase}_querybuilder`),\n         save: this.unique(`${idBase}_save`),\n      });\n\n      // Set current username\n      this.Account.username = this.AB.Account.username();\n\n      this._settings.recordRuleFieldOptions = [];\n\n      // webix UI definition:\n      // this.ui = {\n      //    rows: [\n      //       {\n      //          view: \"layout\",\n      //          type: \"clean\",\n      //          borderless: this._options.borderless ?? true,\n      //          rows: [\n      //             {\n      //                id: ids.querybuilder,\n      //                view: \"query\",\n      //                data: () => [],\n      //                // data: async (field) => await this.pullOptions(field),\n      //                fields: [],\n      //                disabled: true,\n      //                height: this._options.height,\n      //             },\n      //          ],\n      //       },\n      //       {\n      //          id: ids.save,\n      //          view: \"button\",\n      //          css: \"webix_primary\",\n      //          value: L(\"Save\"),\n      //          hidden: this._options.isSaveHidden ?? false,\n      //          click: () => {\n      //             if (this.myPopup) this.myPopup.hide();\n      //             this.emit(\"save\", this.getValue());\n      //          },\n      //       },\n      //    ],\n      // };\n   }\n\n   // setting up UI\n   init(options) {\n      if (this._initComplete) return;\n\n      super.init(options);\n\n      const el = $$(this.ids.querybuilder);\n\n      if (el) {\n         if (!this.observing) {\n            this.__blockOnChange = true;\n            el.getState().$observe(\"value\", (v) => {\n               if (this.__blockOnChange) return false;\n\n               this.emit(\"changed\", this.getValue());\n            });\n            this.__blockOnChange = false;\n\n            // HACK!! The process of setting the $observe() is actually\n            // calling the cb() when set.  This is clearing our .condition\n            // if we call init() after we have setValues(). which can happen\n            // when using the popUp() method.\n            let _cond = this.condition;\n            this.condition = _cond;\n            this.observing = true;\n         }\n         this._initComplete = true;\n      }\n   }\n\n   /**\n    * @method isValid\n    * validate the row data is valid filter condition\n    *\n    * @param rowData {Object} - data row\n    * @param condition {Object} - [Optional] {\n    *                                           glue: \"and\" | \"or\",\n    *                                           rules: []\n    *                                        }\n    */\n   isValid(rowData, condition = this.condition) {\n      // let helper = () => true;\n\n      // let $query = $$(this.ids.querybuilder);\n      // if ($query) {\n      //    helper = $query.getFilterFunction();\n      //    return helper(rowData);\n      // } else {\n      return super.isValid(rowData, condition);\n      // }\n   }\n\n   /**\n    * @method isConditionComplete()\n    * Check a given condition entry and indicate if it is fully\n    * filled out.\n    * @param {obj} cond\n    *        The Condition object we are checking.  If a Macro\n    *        condition if provided: { glue:\"and\", rules:[] } then\n    *        this method will return True/False if All rules are\n    *        complete.\n    *        If an individual rule is provided, then it evaluates\n    *        the completness of that rule. { key, rule, value }\n    * @return {bool}\n    */\n   isConditionComplete(cond) {\n      if (!cond) return false;\n\n      let isComplete = true;\n      // start optimistically.\n\n      if (cond.glue) {\n         (cond.rules ?? []).forEach((r) => {\n            isComplete = isComplete && this.isConditionComplete(r);\n         });\n      } else {\n         // every condition needs a .key & .rule\n         if (!cond.key || cond.key == \"\") {\n            isComplete = false;\n         }\n\n         if (!cond.rule || cond.rule == \"\") {\n            isComplete = false;\n         }\n\n         if (isComplete) {\n            switch (cond.rule) {\n               case \"is_current_user\":\n               case \"is_not_current_user\":\n               case \"contain_current_user\":\n               case \"not_contain_current_user\":\n               case \"same_as_user\":\n               case \"not_same_as_user\":\n               case \"less_current\":\n               case \"greater_current\":\n               case \"less_or_equal_current\":\n               case \"greater_or_equal_current\":\n               case \"is_empty\":\n               case \"is_not_empty\":\n                  // There are only a few rules that don't need a\n                  // value\n                  break;\n\n               default:\n                  // The rest do need a .value\n                  if (!cond.value || cond.value == \"\") {\n                     isComplete = false;\n                  }\n                  break;\n            }\n         }\n      }\n\n      return isComplete;\n   }\n\n   setValue(settings) {\n      super.setValue(settings);\n      this.condition = settings;\n\n      // const el = $$(this.ids.querybuilder);\n      // if (el) {\n      //    if (!settings) {\n      //       // Clear settings value of webix.query\n      //       el.define(\"value\", {\n      //          glue: \"and\",\n      //          rules: [],\n      //       });\n      //       return;\n      //    }\n\n      //    let qbSettings = this.AB.cloneDeep(settings);\n\n      //    // Settings should match a condition built upon our QB format:\n      //    // {\n      //    //    glue:\"and\",\n      //    //    rules:[\n      //    //       {\n      //    //          key:\"uuid\",\n      //    //          rule:\"\",\n      //    //          value:\"\"\n      //    //       }\n      //    //    ]\n      //    // }\n      //    // externally our key should be the field.id and the rules should be\n      //    // the \"contains\", \"not_contains\", \"equal\" ... keywords.\n      //    // However, internally, we convert these rules into .ids that are\n      //    // unique for each field (see uiInit()).  So when we bring in settings\n      //    // we need to translate them into our internal format:\n\n      //    _toInternal(qbSettings, this._Fields);\n\n      //    this.__blockOnChange = true;\n      //    el.define(\"value\", qbSettings);\n      //    this.__blockOnChange = false;\n      // }\n   }\n\n   getValue() {\n      // if ($$(this.ids.querybuilder)) {\n      //    let settings = this.AB.cloneDeep(\n      //       $$(this.ids.querybuilder).getState().value ?? {}\n      //    );\n\n      //    // what we pull out of the QB will have .rules in our internal format:\n      //    // {field.id}_{rule}  (see uiInit() )\n      //    // But we need to store them in our generic QB format for use outside\n      //    // our FilterComplex widget.\n      //    _toExternal(settings, this._Fields);\n      //    this.condition = settings;\n      // }\n\n      return super.getValue();\n   }\n\n   fieldsLoad(fields = [], object = null) {\n      super.fieldsLoad(fields, object);\n      console.log(\"TODO: How to handle FilterComplex's dependence on webix?\");\n      // this.uiInit();\n   }\n\n   toShortHand() {\n      return \"Add Filters\";\n   }\n\n   uiInit() {\n      this.uiQueryCustomValue();\n\n      let el = $$(this.ids.querybuilder);\n      if (el) {\n         // Clear fields\n         while (el.config.fields.length > 0) {\n            el.config.fields.pop();\n         }\n         // Set fields\n         (this.fieldsToQB() ?? []).forEach((f) => {\n            el.config.fields.push(f);\n         });\n         if (el.config.fields.length) {\n            el.enable();\n         } else {\n            this.setValue(\"\");\n            el.disable();\n         }\n      }\n   }\n\n   // HACK: have to overwrite Webix Query's function to support our custom input requirement.\n   // HooWoo\n   uiQueryCustomValue() {\n      const $el = $$(this.ids.querybuilder);\n      if (!$el) return;\n\n      // window.query.views.filter.prototype.CreateFilter = (\n      $el.$app.require(\"jet-views\", \"filter\").prototype.CreateFilter = (\n         field,\n         type,\n         format,\n         conditions,\n         place\n      ) => {\n         let inputs = this.uiValue(field);\n\n         let ui = {\n            id: place.config.id,\n            view: \"filter\",\n            localId: \"filter\",\n            conditions: conditions,\n            field: field,\n            mode: type,\n            template: function (o) {\n               let str = o[field];\n               let parser =\n                  format ?? (type == \"date\" ? webix.i18n.dateFormatStr : null);\n               if (parser) str = parser(str);\n               return str;\n            },\n            inputs: inputs,\n            margin: 6,\n         };\n\n         let filter = webix.ui(ui, place);\n\n         // let data = [];\n         // const $query = $$(this.ids.querybuilder);\n         // if ($query) {\n         //    data = $query.app.getService(\"backend\").data(field);\n         // }\n         // filter.parse(data);\n\n         return filter;\n      };\n   }\n\n   uiValue(fieldColumnName) {\n      let result;\n\n      // Special case: this_object\n      if (fieldColumnName == \"this_object\") {\n         return []\n            .concat(this.uiQueryValue(\"this_object\"))\n            .concat(this.uiDataCollectionValue(\"this_object\"))\n            .concat(this.uiCustomValue(\"this_object\"))\n            .concat(this.uiContextValue(\"this_object\", \"uuid\"));\n      }\n\n      let field = (this._Fields ?? []).filter(\n         (f) => f.id == fieldColumnName\n      )[0];\n\n      switch (field?.key) {\n         case \"boolean\":\n            result = this.uiBooleanValue(field);\n            break;\n         case \"connectObject\":\n            result = []\n               .concat(this.uiQueryValue(field))\n               .concat(this.uiUserValue(field))\n               .concat(this.uiDataCollectionValue(field))\n               .concat(this.uiContextValue(field))\n               .concat(this.uiNoneValue());\n            break;\n         case \"date\":\n         case \"datetime\":\n            result = [\"datepicker\", \"daterangepicker\"];\n            break;\n         case \"list\":\n            result = this.uiListValue(field);\n            break;\n         case \"user\":\n            result = []\n               .concat(this.uiNoneValue())\n               .concat(this.uiUserValue(field));\n            break;\n         // case \"number\":\n         //    result = [\"text\"];\n         //    break;\n         case \"string\":\n         case \"LongText\":\n         case \"email\":\n            result = this.uiNoneValue();\n            break;\n      }\n\n      // Add filter options to Custom index\n      const LinkType = `${field?.settings?.linkType}:${field?.settings?.linkViaType}`;\n      if (\n         field?.settings?.isCustomFK &&\n         // 1:M\n         (LinkType == \"one:many\" ||\n            // 1:1 isSource = true\n            (LinkType == \"one:one\" && field?.settings?.isSource))\n      ) {\n         result = (result ?? []).concat(this.uiTextValue(field));\n      } else if (field?.key != \"connectObject\") {\n         result = (result ?? [])\n            .concat(this.uiTextValue(field))\n            .concat(this.uiQueryFieldValue(field))\n            .concat(this.uiContextValue(field));\n      }\n      // Special case: from Process builder\n      // .processFieldsLoad()\n      else if (fieldColumnName.indexOf(\"uuid\") > -1) {\n         result = this.uiContextValue(null, fieldColumnName);\n      }\n\n      if (this._settings.isRecordRule) {\n         result = (result ?? []).concat(this.uiRecordRuleValue(field));\n      }\n\n      result = (result ?? []).concat(this.uiCustomValue(field));\n\n      return result;\n   }\n\n   uiNoneValue() {\n      return [\n         {\n            batch: \"none\",\n            borderless: true,\n            view: \"template\",\n            template: \"\",\n         },\n      ];\n   }\n\n   uiBooleanValue(field) {\n      return [\n         {\n            batch: \"boolean\",\n            view: \"checkbox\",\n         },\n      ];\n   }\n\n   uiTextValue(field) {\n      return [\n         {\n            batch: \"text\",\n            view: \"text\",\n            on: {\n               onAfterRender: function () {\n                  // HACK: focus on webix.text and webix.textarea\n                  // Why!! If the parent layout has zIndex lower than 101,\n                  // then is not able to focus to webix.text and webix.textarea\n                  let $layout =\n                     this.queryView(function (a) {\n                        return !a.getParentView();\n                     }, \"parent\") ?? this;\n                  $layout.$view.style.zIndex = 202;\n               },\n            },\n         },\n      ];\n   }\n\n   uiQueryValue(field) {\n      let options = [];\n\n      let isQueryField =\n         this._QueryFields?.filter((f) => f.id == field.id).length > 0;\n\n      // populate the list of Queries for this_object:\n      if (field == \"this_object\" && this._Object) {\n         options = this.queries((q) => q.canFilterObject(this._Object));\n      }\n      // populate the list of Queries for a query field\n      else if (isQueryField) {\n         options = this.queries(\n            (q) =>\n               (this._Object ? this._Object.id : \"\") != q.id && // Prevent filter looping\n               q.canFilterObject(field.datasourceLink)\n         );\n      }\n\n      options?.forEach((q) => {\n         options.push({\n            id: q.id,\n            value: q.label,\n         });\n      });\n\n      return [\n         {\n            batch: \"query\",\n            view: \"combo\",\n            options: options ?? [],\n         },\n      ];\n   }\n\n   uiListValue(field) {\n      return [\n         {\n            batch: \"list\",\n            view: \"combo\",\n            options: field?.settings?.options?.map(function (x) {\n               return {\n                  id: x.id,\n                  value: x.text,\n               };\n            }),\n         },\n      ];\n   }\n\n   uiUserValue(field) {\n      return [\n         {\n            batch: \"user\",\n            view: \"combo\",\n            options: this.AB.Account.userList().map((u) => {\n               return {\n                  id: u.username,\n                  value: u.username,\n               };\n            }),\n         },\n      ];\n   }\n\n   uiDataCollectionValue(field) {\n      let linkObjectId;\n      if (field == \"this_object\" && this._Object) {\n         linkObjectId = this._Object.id;\n      } else {\n         linkObjectId = field?.settings?.linkObject;\n      }\n\n      return [\n         {\n            batch: \"datacollection\",\n            view: \"combo\",\n            options: linkObjectId\n               ? this.AB.datacollections(\n                    (dc) => dc?.datasource?.id == linkObjectId\n                 ).map((dc) => {\n                    return {\n                       id: dc.id,\n                       value: dc.label,\n                    };\n                 })\n               : [],\n         },\n      ];\n   }\n\n   uiQueryFieldValue(field) {\n      return [\n         {\n            batch: \"queryField\",\n            view: \"combo\",\n            placeholder: this.labels.component.inQueryFieldQueryPlaceholder,\n            options: this.queries(\n               (q) => this._Object == null || q.id != this._Object.id\n            ).map((q) => {\n               return {\n                  id: q.id,\n                  value: q.label,\n               };\n            }),\n         },\n      ];\n   }\n\n   uiRecordRuleValue(field) {\n      return [\n         {\n            batch: \"recordRule\",\n            view: \"select\",\n            options: this._settings.recordRuleFieldOptions ?? [],\n         },\n      ];\n   }\n\n   uiContextValue(field, processFieldKey = null) {\n      let L = this.AB.Label();\n      const processFields = (this._ProcessFields ?? [])\n         .filter((pField) => {\n            if (!pField) return false;\n\n            let result = false;\n            switch (field) {\n               case \"this_object\":\n                  result =\n                     this._Object.id === pField.object?.id && !pField.field;\n\n                  break;\n\n               default:\n                  switch (field.key) {\n                     case \"boolean\":\n                        result = [\"boolean\"].includes(pField.field?.key);\n\n                        break;\n\n                     case \"connectObject\":\n                        result =\n                           field.settings.linkObject ===\n                           (pField.field?.object.id ?? pField.object.id);\n\n                        if (!field.settings.isCustomFK) {\n                           result = result && !pField.field;\n\n                           break;\n                        }\n\n                        result =\n                           result &&\n                           (field.settings.indexField ||\n                              field.settings.indexField2) === pField.field?.id;\n\n                        break;\n\n                     case \"date\":\n                     case \"datetime\":\n                        result = [\"date\", \"datetime\"].includes(\n                           pField.field?.key\n                        );\n\n                        break;\n\n                     case \"calculate\":\n                     case \"formula\":\n                     case \"number\":\n                        result = [\"calculate\", \"formula\", \"number\"].includes(\n                           pField.field?.key\n                        );\n\n                        break;\n\n                     case \"string\":\n                     case \"LongText\":\n                     case \"email\":\n                     case \"AutoIndex\":\n                     case \"list\":\n                        result = [\n                           \"string\",\n                           \"LongText\",\n                           \"email\",\n                           \"AutoIndex\",\n                           \"list\",\n                        ].includes(pField.field?.key);\n\n                        break;\n\n                     case \"user\":\n                        result = [\"user\"].includes(pField.field?.key);\n\n                        break;\n\n                     default:\n                        if (pField.key) {\n                           // uuid\n                           const processFieldId = pField.key.split(\".\").pop();\n\n                           result =\n                              processFieldId === field.id ||\n                              processFieldId === field.key ||\n                              processFieldId === processFieldKey ||\n                              pField.key === processFieldKey;\n                        }\n\n                        break;\n                  }\n\n                  break;\n            }\n\n            return result;\n         })\n         .map((e) => {\n            return {\n               id: e.key,\n               value: L(\"context({0})\", [e.label]),\n            };\n         });\n\n      if (!processFields) return [];\n\n      return [\n         {\n            batch: \"context\",\n            view: \"select\",\n            options: [\n               {\n                  id: \"empty\",\n                  value: this.labels.component.contextDefaultOption,\n               },\n               ...processFields,\n            ],\n         },\n      ];\n   }\n\n   uiCustomValue(field) {\n      if (!field) return [];\n\n      const customOptions = this._customOptions ?? {};\n      const options = customOptions[field.id ?? field] ?? {};\n      return options.values ?? [];\n   }\n\n   popUp(...options) {\n      const condition = Object.assign({}, this.condition);\n\n      if (!this.myPopup) {\n         let ui = {\n            id: this.ids.popup,\n            view: \"popup\",\n            height: 400,\n            width: 800,\n            body: this.ui,\n         };\n\n         if (!$$(this.ids.popup)) {\n            this.myPopup = webix.ui(ui);\n            this.init(this._settings);\n            if (this._Fields) {\n               this.fieldsLoad(this._Fields, this._Object);\n            }\n\n            // NOTE: do this, before the .setValue() operation, as we need to have\n            // our fields and filters defined BEFORE a setValue() is performed.\n            // this.uiInit();\n\n            if (condition) {\n               this.setValue(condition);\n            }\n\n            this.myPopup.show(...options);\n         } else {\n            $$(this.ids.popup).show(...options);\n         }\n      } else {\n         this.myPopup.show(...options);\n      }\n   }\n\n   /**\n    * @method addCustomOption\n    *\n    * @param {string|uuid} fieldId\n    * @param {Object} options - {\n    *                               conditions: [],\n    *                               values: []\n    *                           }\n    */\n   addCustomOption(fieldId, options = {}) {\n      this._customOptions = this._customOptions ?? {};\n      this._customOptions[fieldId] = options;\n   }\n}\n","import RowFilterCore from \"../core/RowFilterCore\";\n\nexport default class RowFilter extends RowFilterCore {\n   constructor(App, idBase, AB) {\n      super(App, idBase, AB);\n\n      console.error(\"TODO: Switch RowFilter => FilterComplex\");\n\n      // internal list of Webix IDs to reference our UI components.\n      let ids = (this.ids = {\n         component: this.unique(`${idBase}_rowFilter`),\n         filterForm: this.unique(`${idBase}_rowFilter_form`),\n         addNewFilter: this.unique(`${idBase}_rowFilter_addNewFilter`),\n\n         glue: this.unique(`${idBase}_rowFilter_glue`),\n         field: this.unique(`${idBase}_rowFilter_field`),\n         rule: this.unique(`${idBase}_rowFilter_rule`),\n         inputValue: this.unique(`${idBase}_rowFilter_inputValue`),\n\n         queryCombo: this.unique(`${idBase}_rowFilter_queryCombo`),\n         queryFieldCombo: this.unique(`${idBase}_rowFilter_queryFieldCombo`),\n         queryFieldComboQuery: this.unique(\n            `${idBase}_rowFilter_queryFieldComboQuery`\n         ),\n         queryFieldComboField: this.unique(\n            `${idBase}_rowFilter_queryFieldComboField`\n         ),\n         fieldMatch: this.unique(`${idBase}_rowFilter_fieldMatchCombo`),\n\n         dataCollection: this.unique(`${idBase}_rowFilter_dataCollection`),\n\n         listOptions: this.unique(`${idBase}_rowFilter_listOptions`),\n\n         datePicker: this.unique(`${idBase}_rowFilter_datePicker`),\n      });\n\n      // Set current username\n      // this.Account.username = this.AB.Account.username();\n\n      var batchName; // we need to revert to this default when switching away from a in/by query field\n\n      let L = this.AB.Label();\n\n      // Default options list to push to all fields\n      this.queryFieldOptions = [\n         {\n            value: L(\"By Query Field\"),\n            id: \"in_query_field\",\n         },\n         {\n            value: L(\"Not In Query\"),\n            id: \"not_in_query_field\",\n         },\n      ];\n\n      this.recordRuleOptions = [];\n      this.recordRuleFieldOptions = [];\n\n      let _logic = this._logic || {};\n\n      /**\n       * @method getFieldList\n       * return field list to render options\n       */\n      _logic.getFieldList = () => {\n         return (this._Fields || []).map((f) => {\n            let label = f.label;\n\n            // include object's name to options\n            if (this._settings.showObjectName && f.object) {\n               label = f.object.label + \".\" + f.label;\n            }\n\n            return {\n               id: f.id,\n               value: label,\n               alias: f.alias || undefined, // ABObjectQuery\n            };\n         });\n      };\n\n      _logic.getFilterUI = () => {\n         let instance = this;\n         let config_settings = this.config_settings || {};\n\n         return {\n            id: \"f\" + webix.uid(),\n            isolate: true,\n            cols: [\n               {\n                  // Add / Or\n                  view: \"combo\",\n                  id: ids.glue,\n                  width: 80,\n                  value: config_settings.glue || \"and\",\n                  options: [\n                     {\n                        value: L(\"And\"),\n                        id: \"and\",\n                     },\n                     {\n                        value: L(\"Or\"),\n                        id: \"or\",\n                     },\n                  ],\n                  on: {\n                     onChange: function (newVal, oldVal) {\n                        _logic.selectCombineCondition(newVal);\n                     },\n                  },\n               },\n               {\n                  // Field list\n                  view: \"combo\",\n                  id: ids.field,\n                  suggest: {\n                     on: {\n                        onBeforeShow: function () {\n                           this.define(\"width\", 400);\n                           this.resize();\n                        },\n                     },\n                     data: _logic.getFieldList(),\n                  },\n                  on: {\n                     onChange: function (columnId) {\n                        var $viewCond = this.getParentView();\n                        _logic.selectField(columnId, $viewCond);\n                     },\n                  },\n               },\n               // Comparer\n               {\n                  id: ids.rule,\n                  width: 220,\n                  cells: [\n                     {},\n                     // Query\n                     {\n                        batch: \"query\",\n                        view: \"combo\",\n                        value: \"in_query\",\n                        options: [\n                           {\n                              value: L(\"In Query\"),\n                              id: \"in_query\",\n                           },\n                           {\n                              value: L(\"Not In Query\"),\n                              id: \"not_in_query\",\n                           },\n                           {\n                              value: L(\"contains\"),\n                              id: \"contains\",\n                           },\n                           {\n                              value: L(\"doesn't contain\"),\n                              id: \"not_contains\",\n                           },\n                           {\n                              value: L(\"is\"),\n                              id: \"equals\",\n                           },\n                           {\n                              value: L(\"is not\"),\n                              id: \"not_equal\",\n                           },\n                           {\n                              value: L(\"is empty\"),\n                              id: \"is_empty\",\n                           },\n                           {\n                              value: L(\"is not empty\"),\n                              id: \"is_not_empty\",\n                           },\n                           {\n                              value: L(\"Same As User\"),\n                              id: \"same_as_user\",\n                           },\n                           {\n                              value: L(\"Not Same As User\"),\n                              id: \"not_same_as_user\",\n                           },\n                           {\n                              value: L(\"In Data Collection\"),\n                              id: \"in_data_collection\",\n                           },\n                           {\n                              value: L(\"Not In Data Collection\"),\n                              id: \"not_in_data_collection\",\n                           },\n                        ].concat(instance.recordRuleOptions),\n                        on: {\n                           onChange: function (condition, oldValue) {\n                              var $viewComparer = this.getParentView();\n                              var $viewCond = $viewComparer.getParentView();\n                              _logic.onChangeRule(condition, $viewCond);\n                              _logic.onChange();\n                           },\n                        },\n                     },\n\n                     // Date\n                     {\n                        batch: \"date\",\n                        view: \"combo\",\n                        value: \"less\",\n                        options: [\n                           {\n                              value: L(\"equals\"),\n                              id: \"equals\",\n                           },\n                           {\n                              value: L(\"does not equal\"),\n                              id: \"not_equal\",\n                           },\n                           {\n                              value: L(\"is before\"),\n                              id: \"less\",\n                           },\n                           {\n                              value: L(\"is after\"),\n                              id: \"greater\",\n                           },\n                           {\n                              value: L(\"is on or before\"),\n                              id: \"less_or_equal\",\n                           },\n                           {\n                              value: L(\"is on or after\"),\n                              id: \"greater_or_equal\",\n                           },\n                           {\n                              value: L(\"is before current date\"),\n                              id: \"less_current\",\n                           },\n                           {\n                              value: L(\"is after current date\"),\n                              id: \"greater_current\",\n                           },\n                           {\n                              value: L(\"is on or before current date\"),\n                              id: \"less_or_equal_current\",\n                           },\n                           {\n                              value: L(\"is on or after current date\"),\n                              id: \"greater_or_equal_current\",\n                           },\n                           {\n                              value: L(\"last ... days\"),\n                              id: \"last_days\",\n                           },\n                           {\n                              value: L(\"next ... days\"),\n                              id: \"next_days\",\n                           },\n                        ]\n                           .concat(instance.queryFieldOptions)\n                           .concat(instance.recordRuleOptions),\n                        on: {\n                           onChange: function (condition) {\n                              var $viewComparer = this.getParentView();\n                              var $viewCond = $viewComparer.getParentView();\n                              _logic.onChangeRule(condition, $viewCond);\n                              _logic.onChange();\n                           },\n                        },\n                     },\n                     // Number\n                     {\n                        batch: \"number\",\n                        view: \"combo\",\n                        value: \"equals\",\n                        options: [\n                           {\n                              value: L(\":\"),\n                              id: \"equals\",\n                           },\n                           {\n                              value: L(\"≠\"),\n                              id: \"not_equal\",\n                           },\n                           {\n                              value: L(\"<\"),\n                              id: \"less\",\n                           },\n                           {\n                              value: L(\">\"),\n                              id: \"greater\",\n                           },\n                           {\n                              value: L(\"≤\"),\n                              id: \"less_or_equal\",\n                           },\n                           {\n                              value: L(\"≥\"),\n                              id: \"greater_or_equal\",\n                           },\n                        ]\n                           .concat(instance.queryFieldOptions)\n                           .concat(instance.recordRuleOptions),\n                        on: {\n                           onChange: function (condition) {\n                              var $viewComparer = this.getParentView();\n                              var $viewCond = $viewComparer.getParentView();\n                              _logic.onChangeRule(condition, $viewCond);\n                              _logic.onChange();\n                           },\n                        },\n                     },\n                     // List\n                     {\n                        batch: \"list\",\n                        view: \"combo\",\n                        value: \"equals\",\n                        options: [\n                           {\n                              value: L(\"equals\"),\n                              id: \"equals\",\n                           },\n                           {\n                              value: L(\"does not equal\"),\n                              id: \"not_equal\",\n                           },\n                           {\n                              value: L(\"Same As User\"),\n                              id: \"same_as_user\",\n                           },\n                           {\n                              value: L(\"Not Same As User\"),\n                              id: \"not_same_as_user\",\n                           },\n                        ]\n                           .concat(instance.queryFieldOptions)\n                           .concat(instance.recordRuleOptions),\n                        on: {\n                           onChange: function (condition, oldValue) {\n                              var $viewComparer = this.getParentView();\n                              var $viewCond = $viewComparer.getParentView();\n                              _logic.onChangeRule(condition, $viewCond);\n                              _logic.onChange();\n                           },\n                        },\n                     },\n                     // Boolean\n                     {\n                        batch: \"boolean\",\n                        view: \"combo\",\n                        value: \"equals\",\n                        options: [\n                           {\n                              value: L(\"equals\"),\n                              id: \"equals\",\n                           },\n                           {\n                              value: L(\"does not equal\"),\n                              id: \"not_equal\",\n                           },\n                        ]\n                           .concat(instance.queryFieldOptions)\n                           .concat(instance.recordRuleOptions),\n                        on: {\n                           onChange: function (condition) {\n                              var $viewComparer = this.getParentView();\n                              var $viewCond = $viewComparer.getParentView();\n                              _logic.onChangeRule(condition, $viewCond);\n                              _logic.onChange();\n                           },\n                        },\n                     },\n                     // User\n                     {\n                        batch: \"user\",\n                        view: \"combo\",\n                        value: \"is_current_user\",\n                        options: [\n                           {\n                              value: L(\"is current user\"),\n                              id: \"is_current_user\",\n                           },\n                           {\n                              value: L(\"is not current user\"),\n                              id: \"is_not_current_user\",\n                           },\n                           {\n                              value: L(\"contains current user\"),\n                              id: \"contain_current_user\",\n                           },\n                           {\n                              value: L(\"does not contain current user\"),\n                              id: \"not_contain_current_user\",\n                           },\n                           {\n                              value: L(\"equals\"),\n                              id: \"equals\",\n                           },\n                           {\n                              value: L(\"does not equal\"),\n                              id: \"not_equal\",\n                           },\n                        ]\n                           .concat(instance.queryFieldOptions)\n                           .concat(instance.recordRuleOptions),\n                        on: {\n                           onChange: function (condition) {\n                              var $viewComparer = this.getParentView();\n                              var $viewCond = $viewComparer.getParentView();\n                              _logic.onChangeRule(condition, $viewCond);\n                              _logic.onChange();\n                           },\n                        },\n                     },\n                     // String\n                     {\n                        batch: \"string\",\n                        view: \"combo\",\n                        value: \"contains\",\n                        options: [\n                           {\n                              value: L(\"contains\"),\n                              id: \"contains\",\n                           },\n                           {\n                              value: L(\"doesn't contain\"),\n                              id: \"not_contains\",\n                           },\n                           {\n                              value: L(\"is\"),\n                              id: \"equals\",\n                           },\n                           {\n                              value: L(\"is not\"),\n                              id: \"not_equal\",\n                           },\n                        ]\n                           .concat(instance.queryFieldOptions)\n                           .concat(instance.recordRuleOptions),\n                        on: {\n                           onChange: function (condition) {\n                              var $viewComparer = this.getParentView();\n                              var $viewCond = $viewComparer.getParentView();\n                              _logic.onChangeRule(condition, $viewCond);\n                              _logic.onChange();\n                           },\n                        },\n                     },\n                     // Email\n                     {\n                        batch: \"email\",\n                        view: \"combo\",\n                        value: \"contains\",\n                        options: [\n                           {\n                              value: L(\"contains\"),\n                              id: \"contains\",\n                           },\n                           {\n                              value: L(\"doesn't contain\"),\n                              id: \"not_contains\",\n                           },\n                           {\n                              value: L(\"is\"),\n                              id: \"equals\",\n                           },\n                           {\n                              value: L(\"is not\"),\n                              id: \"not_equal\",\n                           },\n                        ]\n                           .concat(instance.queryFieldOptions)\n                           .concat(instance.recordRuleOptions),\n                        on: {\n                           onChange: function (condition) {\n                              var $viewComparer = this.getParentView();\n                              var $viewCond = $viewComparer.getParentView();\n                              _logic.onChangeRule(condition, $viewCond);\n                              _logic.onChange();\n                           },\n                        },\n                     },\n                  ],\n               },\n               // Value\n               {\n                  id: ids.inputValue,\n                  isolate: true,\n                  cells: [\n                     {\n                        batch: \"empty\",\n                     },\n\n                     // Query\n                     {\n                        id: ids.queryCombo,\n\n                        batch: \"query\",\n                        view: \"combo\",\n                        options: [],\n                        on: {\n                           onChange: _logic.onChange,\n                        },\n                     },\n\n                     // Query Field\n                     {\n                        id: ids.queryFieldCombo,\n                        batch: \"queryField\",\n                        rows: [\n                           {\n                              id: ids.queryFieldComboQuery,\n                              view: \"combo\",\n                              options: [],\n                              placeholder: L(\"Choose a Query\"),\n                              on: {\n                                 onChange: function (value) {\n                                    var $viewComparer = this.getParentView();\n                                    var $viewCond = $viewComparer\n                                       .getParentView()\n                                       .getParentView();\n                                    _logic.onChangeQueryFieldCombo(\n                                       value,\n                                       $viewCond\n                                    );\n\n                                    _logic.onChange();\n                                 },\n                              },\n                           },\n                           {\n                              id: ids.queryFieldComboField,\n                              view: \"combo\",\n                              options: [],\n                              placeholder: L(\"Choose a Field\"),\n                              on: {\n                                 onChange: _logic.onChange,\n                              },\n                           },\n                        ],\n                     },\n\n                     // Field match\n                     {\n                        id: ids.fieldMatch,\n                        batch: \"fieldMatch\",\n                        view: \"combo\",\n                        options: [],\n                        on: {\n                           onChange: _logic.onChange,\n                        },\n                     },\n\n                     // Data collection\n                     {\n                        id: ids.dataCollection,\n                        batch: \"dataCollection\",\n                        view: \"richselect\",\n                        options: [],\n                        on: {\n                           onChange: _logic.onChange,\n                        },\n                     },\n\n                     // Date\n                     {\n                        // inputView.format = field.getDateFormat();\n                        batch: \"date\",\n                        id: ids.datePicker,\n                        view: \"datepicker\",\n                        on: {\n                           onChange: function () {\n                              _logic.onChange();\n                           },\n                        },\n                     },\n                     // Number\n                     {\n                        batch: \"number\",\n                        view: \"text\",\n                        validate: webix.rules.isNumber,\n                        on: {\n                           onTimedKeyPress: function () {\n                              if (this.validate()) _logic.onChange();\n                           },\n                        },\n                     },\n                     // List\n                     {\n                        batch: \"list\",\n                        id: ids.listOptions,\n                        view: \"combo\",\n                        options: [],\n                        on: {\n                           onChange: function () {\n                              _logic.onChange();\n                           },\n                        },\n                     },\n                     // Boolean\n                     {\n                        batch: \"boolean\",\n                        view: \"checkbox\",\n                        on: {\n                           onChange: function () {\n                              _logic.onChange();\n                           },\n                        },\n                     },\n                     // User\n                     {\n                        batch: \"user\",\n                        view: \"combo\",\n                        options: this.AB.Account.userList().map((u) => {\n                           return {\n                              id: u.username,\n                              value: u.username,\n                           };\n                        }),\n                        on: {\n                           onChange: function () {\n                              _logic.onChange();\n                           },\n                        },\n                     },\n                     // String\n                     {\n                        batch: \"string\",\n                        view: \"text\",\n                        on: {\n                           onTimedKeyPress: function () {\n                              _logic.onChange();\n                           },\n                        },\n                     },\n                     // Email\n                     {\n                        batch: \"email\",\n                        view: \"text\",\n                        on: {\n                           onTimedKeyPress: function () {\n                              _logic.onChange();\n                           },\n                        },\n                     },\n                  ],\n               },\n               {\n                  view: \"button\",\n                  css: \"webix_primary\",\n                  icon: \"fa fa-plus\",\n                  type: \"icon\",\n                  autowidth: true,\n                  click: function () {\n                     var $viewForm = this.getFormView();\n\n                     var indexView = $viewForm.index(this.getParentView());\n\n                     _logic.addNewFilter(indexView + 1);\n                  },\n               },\n               {\n                  view: \"button\",\n                  css: \"webix_danger\",\n                  icon: \"fa fa-trash\",\n                  type: \"icon\",\n                  autowidth: true,\n                  click: function () {\n                     var $viewCond = this.getParentView();\n\n                     _logic.removeNewFilter($viewCond);\n                  },\n               },\n            ],\n         };\n      };\n\n      _logic.getAddButtonUI = () => {\n         return {\n            view: \"button\",\n            id: ids.addNewFilter,\n            css: \"webix_primary\",\n            type: \"form\",\n            label: L(\"Add a filter\"),\n            click: () => {\n               _logic.addNewFilter();\n            },\n         };\n      };\n\n      _logic.addNewFilter = (index, fieldId) => {\n         var viewId;\n         var ui = _logic.getFilterUI();\n\n         var $viewForm = $$(ids.filterForm);\n         if ($viewForm) {\n            viewId = $viewForm.addView(ui, index);\n\n            _logic.toggleAddNewButton();\n\n            // select a option of field\n            if (fieldId) _logic.selectField(fieldId, $$(viewId), true);\n         }\n\n         return viewId;\n      };\n\n      _logic.removeNewFilter = function ($viewCond) {\n         var $viewForm = $$(ids.filterForm);\n\n         $viewForm.removeView($viewCond);\n\n         _logic.toggleAddNewButton();\n\n         _logic.onChange();\n      };\n\n      _logic.toggleAddNewButton = function () {\n         if (!$$(ids.filterForm)) return;\n\n         // Show \"Add new filter\" button\n         if ($$(ids.filterForm).getChildViews().length < 1) {\n            $$(ids.filterForm).hide();\n            $$(ids.addNewFilter).show();\n         }\n         // Hide \"Add new filter\" button\n         else {\n            $$(ids.filterForm).show();\n            $$(ids.addNewFilter).hide();\n         }\n      };\n\n      _logic.selectCombineCondition = (val, ignoreNotify) => {\n         // define combine value to configuration\n         this.config_settings.glue = val;\n\n         // update value of every combine conditions\n         var $viewConds = $$(ids.filterForm).getChildViews();\n         $viewConds.forEach((v) => {\n            if (v.$$ && v.$$(ids.glue)) v.$$(ids.glue).setValue(val);\n         });\n\n         if (!ignoreNotify) _logic.onChange();\n      };\n\n      _logic.selectField = (columnId, $viewCond, ignoreNotify) => {\n         if (!this._Fields) return;\n\n         var field = this._Fields.filter((f) => f.id == columnId)[0];\n         if (!field) return;\n\n         // switch view\n         batchName = field.key;\n         if (field.id == \"this_object\") batchName = \"query\";\n         // Special this object query\n         else if (batchName == \"LongText\" || batchName == \"combined\")\n            batchName = \"string\";\n         else if (field.key == \"formula\") batchName = \"number\";\n         var isQueryField =\n            this._QueryFields.filter((f) => {\n               return f.id == field.id;\n            }).length > 0;\n         if (isQueryField) {\n            // we chose a connectField which is now a Query type\n            batchName = \"query\";\n         }\n         $viewCond.$$(ids.rule).showBatch(batchName);\n         $viewCond.$$(ids.inputValue).showBatch(batchName);\n\n         let options = [];\n         let Queries = [];\n\n         // populate the list of Queries for this_object:\n         if (field.id == \"this_object\" && this._Object) {\n            Queries = this.queries((q) => q.canFilterObject(this._Object));\n         }\n         // populate the list of Queries for a query field\n         else if (isQueryField) {\n            Queries = this.queries((q) => {\n               return (\n                  (this._Object ? this._Object.id : \"\") != q.id && // Prevent filter looping\n                  q.canFilterObject(field.datasourceLink)\n               );\n            });\n         }\n\n         Queries.forEach((q) => {\n            options.push({\n               id: q.id,\n               value: q.label,\n            });\n         });\n         $viewCond\n            .$$(ids.inputValue)\n            .$$(ids.queryCombo)\n            .define(\"options\", options);\n         $viewCond.$$(ids.inputValue).$$(ids.queryCombo).refresh();\n\n         // populate options of list\n         if (field.key == \"list\") {\n            let listOptions = field.settings.options.map(function (x) {\n               return {\n                  id: x.id,\n                  value: x.text,\n               };\n            });\n\n            $viewCond\n               .$$(ids.inputValue)\n               .$$(ids.listOptions)\n               .define(\"options\", listOptions);\n            $viewCond.$$(ids.inputValue).$$(ids.listOptions).refresh();\n         }\n         // set format of datepicker\n         else if (field.key == \"date\") {\n            $viewCond\n               .$$(ids.inputValue)\n               .$$(ids.datePicker)\n               .define(\"format\", field.getFormat());\n            $viewCond.$$(ids.inputValue).$$(ids.datePicker).refresh();\n         }\n\n         var rule = null,\n            ruleViewId = $viewCond.$$(ids.rule).getActiveId(),\n            $viewComparer = $viewCond\n               .$$(ids.rule)\n               .queryView({ id: ruleViewId });\n         if ($viewComparer && $viewComparer.getList) {\n            let defaultOpt = ($viewComparer.getList().config.data || [])[0];\n            if (defaultOpt) {\n               $viewComparer.setValue(defaultOpt.id);\n            }\n\n            // rule = $viewComparer.getValue();\n            // if (rule == \"in_query_field\" || rule == \"not_in_query_field\") {\n            // \t// Show the new value inputs\n            // \t$viewCond.$$(ids.inputValue).showBatch(\"queryField\");\n            // } else if (rule == \"same_as_field\" || rule == \"not_same_as_field\") {\n            // \t// Show the new value inputs\n            // \t$viewCond.$$(ids.inputValue).showBatch(\"fieldMatch\");\n            // }\n         }\n\n         if (!ignoreNotify) _logic.onChange();\n      };\n\n      _logic.onChangeRule = (rule, $viewCond, notify = false) => {\n         switch (rule) {\n            case \"contains\":\n            case \"not_contains\":\n            case \"equals\":\n            case \"not_equal\":\n               // For \"connect_fields\" search by CUSTOM index value\n               if (batchName == \"query\") {\n                  $viewCond.$$(ids.inputValue).showBatch(\"string\");\n               }\n               // If want to call notify or call .onChange(), then pass notify is true.\n               // _logic.onChange();\n               break;\n\n            case \"is_current_user\":\n            case \"is_not_current_user\":\n            case \"contain_current_user\":\n            case \"not_contain_current_user\":\n            case \"same_as_user\":\n            case \"not_same_as_user\":\n            case \"less_current\":\n            case \"greater_current\":\n            case \"less_or_equal_current\":\n            case \"greater_or_equal_current\":\n            case \"is_empty\":\n            case \"is_not_empty\":\n               // clear and disable the value field\n               $viewCond.$$(ids.inputValue).showBatch(\"empty\");\n               _logic.onChange();\n               break;\n\n            case \"last_days\":\n            case \"next_days\":\n               // Show the number input\n               $viewCond.$$(ids.inputValue).showBatch(\"number\");\n               break;\n\n            case \"in_query_field\":\n            case \"not_in_query_field\":\n               // populate the list of Queries for this_object:\n               var options = [];\n\n               // Get all application's queries\n               this.queries(\n                  (q) => this._Object == null || q.id != this._Object.id\n               ).forEach((q) => {\n                  options.push({\n                     id: q.id,\n                     value: q.label,\n                  });\n               });\n\n               $viewCond\n                  .$$(ids.inputValue)\n                  .$$(ids.queryFieldComboQuery)\n                  .define(\"options\", options);\n               $viewCond\n                  .$$(ids.inputValue)\n                  .$$(ids.queryFieldComboQuery)\n                  .refresh();\n\n               // Show the new value inputs\n               $viewCond.$$(ids.inputValue).showBatch(\"queryField\");\n               break;\n\n            case \"same_as_field\":\n            case \"not_same_as_field\":\n               $viewCond\n                  .$$(ids.inputValue)\n                  .$$(ids.fieldMatch)\n                  .define(\"options\", this.recordRuleFieldOptions);\n               $viewCond.$$(ids.inputValue).$$(ids.fieldMatch).refresh();\n\n               // Show the new value inputs\n               $viewCond.$$(ids.inputValue).showBatch(\"fieldMatch\");\n               break;\n\n            case \"in_data_collection\":\n            case \"not_in_data_collection\": {\n               let dcOptions = [];\n\n               // pull data collection list\n\n               // get id of the link object\n               let linkObjectId,\n                  columnId = $viewCond.$$(ids.field).getValue();\n               if (columnId == \"this_object\" && this._Object) {\n                  linkObjectId = this._Object.id;\n               } else {\n                  let field = this._Fields.filter((f) => f.id == columnId)[0];\n                  if (field) linkObjectId = field.settings.linkObject;\n               }\n\n               if (this._Application && linkObjectId) {\n                  this._Application\n                     .datacollections(\n                        (dc) =>\n                           dc.datasource && dc.datasource.id == linkObjectId\n                     )\n                     .forEach((dc) => {\n                        dcOptions.push({\n                           id: dc.id,\n                           value: dc.label,\n                        });\n                     });\n               }\n\n               $viewCond\n                  .$$(ids.inputValue)\n                  .$$(ids.dataCollection)\n                  .define(\"options\", dcOptions);\n               $viewCond.$$(ids.inputValue).$$(ids.dataCollection).refresh();\n\n               // Show the new value inputs\n               $viewCond.$$(ids.inputValue).showBatch(\"dataCollection\");\n               break;\n            }\n\n            default:\n               // Show the default value inputs\n               $viewCond.$$(ids.inputValue).showBatch(batchName);\n\n               if (notify) _logic.onChange();\n\n               break;\n         }\n      };\n\n      _logic.onChangeQueryFieldCombo = (value, $viewCond) => {\n         // populate the list of Queries for this_object:\n         let options = [];\n         // Get all queries fields\n         let Query = this.queries((q) => {\n            return q.id == value;\n         })[0];\n         if (Query) {\n            Query.fields((f) => {\n               return !f.isConnection;\n            }).forEach((q) => {\n               options.push({\n                  id: q.id,\n                  value: q.object.label + \".\" + q.label,\n               });\n            });\n\n            $viewCond\n               .$$(ids.inputValue)\n               .$$(ids.queryFieldComboField)\n               .define(\"options\", options);\n            $viewCond.$$(ids.inputValue).$$(ids.queryFieldComboField).refresh();\n         }\n\n         // _logic.onChange();\n      };\n\n      _logic.onChange = () => {\n         if (!this.__blockOnChange) {\n            // refresh config settings before notify\n            _logic.getValue();\n\n            console.warn(\"convert RowFilter.callback.onChange() to .emit()\");\n            _logic.callbacks.onChange();\n            this.emit(\"change\");\n         }\n\n         return false;\n      };\n\n      _logic.blockOnChange = () => {\n         this.__blockOnChange = true;\n      };\n\n      _logic.unblockOnChange = () => {\n         this.__blockOnChange = false;\n      };\n\n      /**\n       * @method getValue\n       *\n       * @return {JSON} -\n       * {\n       * \t\tglue: '', // 'and', 'or'\n       *\t\trules: [\n       *\t\t\t{\n       *\t\t\t\tkey:\t'column name',\n       *\t\t\t\trule:\t'rule',\n       *\t\t\t\tvalue:\t'value'\n       *\t\t\t}\n       *\t\t]\n       * }\n       */\n      _logic.getValue = () => {\n         let config_settings = {\n            glue: \"and\",\n            rules: [],\n         };\n\n         var $viewForm = $$(ids.filterForm);\n         if ($viewForm) {\n            $viewForm.getChildViews().forEach(($viewCond, index) => {\n               if (index == 0) {\n                  config_settings.glue = $viewCond.$$(ids.glue).getValue();\n               }\n\n               var $fieldElem = $viewCond.$$(ids.field);\n               if (!$fieldElem) return;\n\n               /* field id */\n               var fieldId = $fieldElem.getValue();\n               if (!fieldId) return;\n\n               /* alias */\n               var alias;\n               var selectedOpt = $viewCond\n                  .$$(ids.field)\n                  .getPopup()\n                  .config.body.data.filter((opt) => opt.id == fieldId)[0];\n               if (selectedOpt) alias = selectedOpt.alias || undefined;\n\n               /* rule */\n               var rule = null,\n                  ruleViewId = $viewCond.$$(ids.rule).getActiveId(),\n                  $viewComparer = $viewCond\n                     .$$(ids.rule)\n                     .queryView({ id: ruleViewId });\n               if ($viewComparer && $viewComparer.getValue)\n                  rule = $viewComparer.getValue();\n\n               /* value */\n               var value = null,\n                  valueViewId = $viewCond.$$(ids.inputValue).getActiveId(),\n                  $viewConditionValue = $viewCond\n                     .$$(ids.inputValue)\n                     .queryView({ id: valueViewId });\n               if ($viewConditionValue && $viewConditionValue.getValue) {\n                  value = $viewConditionValue.getValue();\n               } else if (\n                  $viewConditionValue &&\n                  $viewConditionValue.getChildViews()\n               ) {\n                  var vals = [];\n                  $viewConditionValue.getChildViews().forEach((element) => {\n                     vals.push($$(element).getValue());\n                  });\n                  value = vals.join(\":\");\n               }\n\n               // Convert date format\n               if (value instanceof Date) {\n                  let dateField = this._Fields.filter(\n                     (f) => f.id == fieldId\n                  )[0];\n                  if (dateField) {\n                     value = dateField.exportValue(value);\n                  } else {\n                     value = value.toISOString();\n                  }\n               }\n\n               config_settings.rules.push({\n                  alias: alias || undefined,\n                  key: fieldId,\n                  rule: rule,\n                  value: value,\n               });\n            });\n         }\n\n         this.config_settings = config_settings;\n\n         return this.config_settings;\n      };\n\n      // webix UI definition:\n      this.ui = {\n         id: ids.component,\n         rows: [\n            {\n               view: \"form\",\n               id: ids.filterForm,\n               hidden: true,\n               elements: [],\n            },\n            _logic.getAddButtonUI(),\n         ],\n      };\n   }\n\n   // setting up UI\n   init(options = {}) {\n      super.init(options);\n      let L = this.AB.Label();\n\n      // register our callbacks:\n      for (var c in this._logic.callbacks) {\n         this._logic.callbacks[c] = options[c] || this._logic.callbacks[c];\n      }\n\n      if (options.showObjectName)\n         this._settings.showObjectName = options.showObjectName;\n\n      if (options.isRecordRule) {\n         this.recordRuleOptions = [\n            {\n               value: L(\"Same As Field\"),\n               id: \"same_as_field\",\n            },\n            {\n               value: L(\"Not Field\"),\n               id: \"not_same_as_field\",\n            },\n         ];\n         this.recordRuleFieldOptions = options.fieldOptions;\n      }\n   }\n\n   setValue(settings) {\n      settings = settings || {};\n\n      super.setValue(settings);\n\n      let ids = this.ids;\n      let logic = this._logic;\n\n      // block .onChange event\n      logic.blockOnChange();\n\n      let config_settings = this.AB.cloneDeep(settings);\n      config_settings.rules = config_settings.rules || [];\n\n      // Redraw form with no elements\n      var $viewForm = $$(ids.filterForm);\n      if ($viewForm) webix.ui([], $viewForm);\n\n      // Add \"new filter\" button\n      if (config_settings.rules.length == 0) {\n         logic.toggleAddNewButton();\n      }\n\n      config_settings.rules.forEach((f) => {\n         var viewId = logic.addNewFilter(),\n            $viewCond = $$(viewId);\n\n         if ($viewCond == null) return;\n\n         var field = this._Fields.filter((col) => col.id == f.key)[0];\n\n         // \"and\" \"or\"\n         $viewCond.$$(ids.glue).define(\"value\", config_settings.glue);\n         $viewCond.$$(ids.glue).refresh();\n\n         // Select Field\n         $viewCond.$$(ids.field).define(\"value\", f.key);\n         $viewCond.$$(ids.field).refresh();\n         logic.selectField(f.key, $viewCond, true);\n\n         // Comparer\n         var ruleViewId = $viewCond.$$(ids.rule).getActiveId(),\n            $viewComparer = $viewCond\n               .$$(ids.rule)\n               .queryView({ id: ruleViewId });\n         if ($viewComparer && $viewComparer.setValue) {\n            $viewComparer.define(\"value\", f.rule);\n            $viewComparer.refresh();\n         }\n\n         // if (f.rule == \"in_query_field\" || f.rule == \"not_in_query_field\" || f.rule == \"same_as_field\" || f.rule == \"not_same_as_field\") {\n         $viewCond.blockEvent();\n         logic.onChangeRule(f.rule, $viewCond);\n         $viewCond.unblockEvent();\n         // }\n\n         // Input\n         var valueViewId = $viewCond.$$(ids.inputValue).getActiveId(),\n            $viewConditionValue = $viewCond\n               .$$(ids.inputValue)\n               .queryView({ id: valueViewId });\n         if ($viewConditionValue && $viewConditionValue.setValue) {\n            // convert to Date object\n            if (\n               field &&\n               field.key == \"date\" &&\n               f.value &&\n               (f.rule == \"less\" ||\n                  f.rule == \"greater\" ||\n                  f.rule == \"less_or_equal\" ||\n                  f.rule == \"greater_or_equal\")\n            ) {\n               $viewConditionValue.define(\"value\", new Date(f.value));\n            } else {\n               $viewConditionValue.define(\"value\", f.value);\n            }\n\n            $viewConditionValue.refresh();\n         } else if (\n            $viewConditionValue &&\n            $viewConditionValue.getChildViews()\n         ) {\n            let vals = (f.value || \"\").split(\":\");\n            let index = 0;\n            $viewConditionValue.getChildViews().forEach((element) => {\n               $$(element).blockEvent();\n               $$(element).setValue(vals[index]);\n               if (index == 0) {\n                  logic.onChangeQueryFieldCombo(vals[index], $viewCond);\n               }\n               $$(element).unblockEvent();\n               // $$(element).refresh();\n               index++;\n            });\n         }\n\n         if (field && field.key == \"user\") {\n            $viewCond.blockEvent();\n            logic.onChangeRule(f.rule, $viewCond);\n            $viewCond.blockEvent();\n         }\n      });\n\n      // unblock .onChange event\n      logic.unblockOnChange();\n   }\n\n   /**\n    * @method isComplete()\n    * returns a truthy value representing whether or not our current condition\n    * expression is fully completed.  Then externally checks can be made to\n    * verify if the data is complete.\n    * @return {bool}\n    */\n   isComplete() {\n      if (!this._completeConditions) {\n         this._completeConditions = this.AB.filterComplexNew(\n            `${this.ids.component}_iscomplete`\n         );\n      }\n\n      return this._completeConditions.isConditionComplete(this.getValue());\n   }\n}\n","import ABMobilePageCore from \"../../core/mobile/ABMobilePageCore\";\n\nexport default class ABMobilePage extends ABMobilePageCore {\n   // constructor(values, application, parent, defaultValues) {\n   //    super(values, application, parent, defaultValues);\n   // }\n   // warningsEval() {\n   //    super.warningsEval();\n   //    let allViews = this.views();\n   //    if (allViews.length == 0) {\n   //       this.warningsMessage(\"has no sub views\");\n   //    }\n   //    (this.pages() || []).forEach((p) => {\n   //       p.warningsEval();\n   //    });\n   // }\n\n   routeComponent() {\n      return {\n         path: `/${this.route}`,\n         component: (props, { $, $h, $f7, $on, $store, $update }) => {\n            const title = this.label;\n            let allGetters = {};\n\n            // NOTE: Programming Quirk:\n            // We seem to need to access our getters for this Page from\n            // within this PageComponent definition.  (maybe) this is how\n            // it registers the components that need to be redrawn when the\n            // related state is updated.\n            let allViews = this.views();\n            allViews.forEach((v) => {\n               let dc = v.datacollection;\n               if (dc) {\n                  dc.init();\n                  allGetters[dc.id] = $store.getters[dc.id];\n               }\n            });\n\n            $on(\"pageInit\", async (e, page) => {\n               const pendingInit = [];\n               allViews.forEach((v) => {\n                  let dc = v.datacollection;\n                  // dc?.init();\n\n                  const viewInit = async (v, callback) => {\n                     await v.init();\n\n                     callback();\n                  };\n                  const init = () =>\n                     new Promise((resolve) => {\n                        if (dc && !dc.isDataInitialized) {\n                           $store.dispatch(\"getAppBuilderData\", dc.id);\n\n                           const waitDCInit = setInterval(async () => {\n                              if (dc.isDataInitialized) {\n                                 clearInterval(waitDCInit);\n\n                                 await viewInit(v, resolve);\n                              }\n                           }, 500);\n\n                           return;\n                        }\n\n                        viewInit(v, resolve);\n                     });\n\n                  pendingInit.push(init());\n               });\n\n               await Promise.all(pendingInit);\n\n               // $(\"#add-data-form-submit\").on(\"click\", async () => {\n               //    const formData = $f7.form.convertToData(\"#add-data-form\");\n\n               //    console.log(formData);\n               //    // await addItem(formData)\n               // });\n\n               // $(\".deleted-callback\").on(\n               //    \"swipeout:deleted\",\n               //    async function (value) {\n               //       await delItem(this.getAttribute(\"id\"));\n               //    }\n               // );\n            });\n\n            // let views = [\n            //    {\n            //       key: \"list\",\n            //       dcID: \"0e9f5f6f-cd0b-4b93-b0c8-d51bd9852322\",\n            //       detailPage: \"ABPage.id\",\n            //    },\n            // ];\n            function viewHTML() {\n               let allResults = [];\n\n               allViews.forEach((v) => {\n                  allResults.push(v.html());\n               });\n\n               // views.forEach((view) => {\n               //    switch (view.key) {\n               //       case \"list\":\n               //          var list = new List(view, { Application }, AB);\n               //          allResults.push(list.html());\n               //          allViews.push(list);\n               //          break;\n               //       default:\n               //       // code block\n               //    }\n               // });\n\n               return allResults.map((r) => r()); // render each jsx template\n            }\n\n            // async function addItem() {\n            //    let DC = allViews[0].datacollection;\n            //    let firstItem = DC.getFirstRecord();\n            //    console.log(firstItem);\n            //    let removeThese = [\"uuid\", \"created_at\", \"updated_at\", \"id\"];\n            //    let newItem = {};\n            //    Object.keys(firstItem).forEach((k) => {\n            //       if (removeThese.indexOf(k) == -1) {\n            //          newItem[k] = firstItem[k];\n            //       }\n            //    });\n\n            //    newItem.Name = `${newItem.Name}-${AB.jobID()}`;\n            //    console.log(newItem);\n\n            //    try {\n            //       await DC.datasource.model().create(newItem);\n            //    } catch (e) {\n            //       console.error(e);\n            //    }\n            // }\n\n            // async function delItem(id) {\n            //    let DC = allViews[0].datacollection;\n            //    let item = id ? DC.$dc.getItem(id) : DC.getCursor();\n            //    if (!item) {\n            //       item = DC.getFirstRecord();\n            //    }\n\n            //    console.log(\"record to delete:\", item);\n            //    try {\n            //       await DC.datasource\n            //          .model()\n            //          .delete(item[DC.datasource.PK()] || item.id || item.uuid);\n            //    } catch (e) {\n            //       console.error(e);\n            //    }\n            // }\n\n            //\n            return () => $h`\n         <div class=\"page\">\n            <div class=\"navbar\">\n               <div class=\"navbar-bg\"></div>\n               <div class=\"navbar-inner\">\n                  <div class=\"left\">\n                     <a\n                        href=\"#\"\n                        data-panel=\".panel-left\"\n                        class=\"link icon-only panel-open\"\n                     >\n                        <i class=\"icon material-icons\">menu</i>\n                     </a>\n                  </div>\n                  <div class=\"title\">${title}</div>\n                  <div class=\"title-large\">\n                     <div class=\"title-large-text\">${title}</div>\n                  </div>\n                  <div class=\"right\">\n                     <a\n                        href=\"#\"\n                        data-panel=\".panel-right\"\n                        class=\"link icon-only panel-open\"\n                     >\n                        <i class=\"icon f7-icons if-not-md\">plus</i>\n                        <i class=\"icon material-icons md-only\">add</i>\n                     </a>\n                  </div>\n               </div>\n            </div>\n            ${viewHTML()}\n         </div>\n      `;\n         },\n      };\n   }\n}\n","import ABMobileViewCore from \"../../core/mobile/ABMobileViewCore.js\";\n\nexport default class ABMobileView extends ABMobileViewCore {\n   // constructor(attributes, application, parent) {\n   //    super(attributes, application, parent);\n   // }\n\n   /**\n\n\n   /*\n    * @method componentList\n    * return the list of components available on this view to display in the editor.\n    * @param {bool} isEdited  is this component currently in the Interface Editor\n    * @return {array} of ABView objects.\n    */\n   componentList(isEdited) {\n      // views not allowed to drop onto this View:\n      var viewsToIgnore = [\n         // \"view\",\n         // \"page\",\n         // \"formpanel\",\n         // \"viewcontainer\",\n         // // not allowed Detail's widgets\n         // \"detailcheckbox\",\n         // \"detailcustom\",\n         // \"detailconnect\",\n         // \"detailimage\",\n         // \"detailselectivity\",\n         // \"detailtext\",\n         // \"detailtree\",\n         // // not allowed Form's widgets\n         // \"button\",\n         // \"checkbox\",\n         // \"connect\",\n         // \"datepicker\",\n         // \"fieldcustom\",\n         // \"textbox\",\n         // \"numberbox\",\n         // \"selectsingle\",\n         // \"selectmultiple\",\n         // \"formtree\",\n         // \"fieldreadonly\",\n         // // not allowed Chart's Widgets\n         // \"pie\",\n         // \"bar\",\n         // \"line\",\n         // \"area\",\n         // // not allowed Report page\n         // \"report\",\n         // \"reportPage\",\n         // \"reportPanel\",\n      ];\n\n      var allComponents = this.application.viewAll();\n      var allowedComponents = allComponents.filter((c) => {\n         return viewsToIgnore.indexOf(c.common().key) == -1;\n      });\n\n      return allowedComponents;\n   }\n\n   warningsAll() {\n      // report both OUR warnings, and any warnings from any of our sub views\n      var allWarnings = super.warningsAll();\n      this.views().forEach((v) => {\n         allWarnings = allWarnings.concat(v.warningsAll());\n      });\n\n      (this.pages?.() || []).forEach((p) => {\n         allWarnings = allWarnings.concat(p.warningsAll());\n      });\n\n      return allWarnings.filter((w) => w);\n   }\n\n   warningsEval() {\n      super.warningsEval();\n\n      let allViews = this.views();\n\n      (this.__missingViews || []).forEach((id) => {\n         this.warningsMessage(`references unknown View[${id}]`);\n      });\n\n      allViews.forEach((v) => {\n         v.warningsEval();\n      });\n\n      // if a datacollection is specified, verify it can be accessed.\n      if (this.settings.dataviewID) {\n         let dc = this.datacollections || this.datacollection;\n         if (!dc) {\n            this.warningsMessage(\n               `references unknown dataviewID[${this.settings.dataviewID}]`\n            );\n         }\n      }\n   }\n\n   warningsMessage(msg, data = {}) {\n      let message = `${this.key}[${this.name}]: ${msg}`;\n      this._warnings.push({ message, data });\n   }\n}\n","/**\n * ABProcessLane\n * manages a lane in a Process Diagram.\n *\n * Lanes manage users in the system, and provide a way to lookup a SiteUser.\n */\nimport ABProcessLaneCore from \"../../core/process/ABProcessLaneCore\";\n\nexport default class ABProcessLane extends ABProcessLaneCore {\n   // constructor(attributes, process, application) {\n   //    super(attributes, process, application);\n   // }\n\n   ////\n   //// Modeler Instance Methods\n   ////\n\n   transferParticipantWhereToMe(id) {\n      var myParticipant = this.process.elementForDiagramID(id);\n      if (myParticipant) {\n         // if I haven't already set my where clause, and my Participant\n         // has one, then take it:\n         if (!this.stashed && myParticipant.stashed) {\n            var copyParams = [\n               \"stashed\",\n               \"useRole\",\n               \"role\",\n               \"useAccount\",\n               \"account\",\n            ];\n            copyParams.forEach((p) => {\n               var swap = this[p];\n               this[p] = myParticipant[p];\n               myParticipant[p] = swap; // ?? do this ??\n            });\n         }\n      }\n   }\n\n   /**\n    * fromElement()\n    * initialize this Lane's values from the given BPMN:Lane\n    * @param {BPMNParticipant}\n    */\n   fromElement(element) {\n      this.diagramID = element.id || this.diagramID;\n\n      // on creation, if I have child objects, then move the .where definition\n      // from my parent Participant to ME\n      if (element.children && element.children.length > 0) {\n         if (element.parent && element.parent.type == \"bpmn:Participant\") {\n            this.transferParticipantWhereToMe(element.parent.id);\n         }\n      } else {\n         // this info might just reside in the .parent.children[]\n         if (\n            element.parent &&\n            element.parent.children &&\n            element.parent.children.length > 0\n         ) {\n            element.parent.children.forEach((child) => {\n               if (child.type != \"bpmn:Lane\") {\n                  // if child has lanes\n                  if (\n                     child.businessObject.lanes &&\n                     child.businessObject.lanes.length > 0\n                  ) {\n                     // if lane is me\n                     var myLane = child.businessObject.lanes.find((l) => {\n                        return l.id == this.diagramID;\n                     });\n                     if (myLane) {\n                        this.transferParticipantWhereToMe(element.parent.id);\n\n                        // tell child I'm it's lane:\n                        var objChild = this.process.elementForDiagramID(\n                           child.id\n                        );\n                        if (objChild) {\n                           objChild.setLane(this);\n                        }\n                     }\n                  }\n               }\n            });\n         }\n      }\n\n      this.onChange(element);\n   }\n\n   /**\n    * onChange()\n    * update the current Lane with information that was relevant\n    * from the provided BPMN:Lane\n    * @param {BPMNParticipant}\n    */\n   onChange(defElement) {\n      /*\n        Sample DefElement:\n            {\n                \"labels\": [],\n                \"children\": [],\n                \"id\": \"Participant_185ljkg\",\n                \"width\": 958,\n                \"height\": 240,\n                \"type\": \"bpmn:Participant\",\n                \"x\": -810,\n                \"y\": -2010,\n                \"order\": {\n                    \"level\": -2\n                },\n               \"businessObject\": {\n                    \"$type\": \"bpmn:Participant\",\n                    \"id\": \"Participant_185ljkg\",\n                    \"di\": {\n                        \"$type\": \"bpmndi:BPMNShape\",\n                        \"bounds\": {\n                            \"$type\": \"dc:Bounds\",\n                            \"x\": -810,\n                            \"y\": -2010,\n                            \"width\": 958,\n                            \"height\": 240\n                        },\n                        \"id\": \"Participant_185ljkg_di\",\n                        \"isHorizontal\": true\n                    },\n                    \"processRef\": {\n                        \"$type\": \"bpmn:Process\",\n                        \"id\": \"Process_0x3sul5\"\n                    }\n                }\n         */\n\n      // from the BPMI modeler we can gather a label for this:\n      if (\n         defElement.businessObject.name &&\n         defElement.businessObject.name != \"\"\n      ) {\n         this.label = defElement.businessObject.name;\n      }\n\n      // if I picked up a new task, inform it I am it's lane:\n   }\n}\n","/**\n * ABProcessParticipant\n * manages the participant lanes in a Process Diagram.\n *\n * Participants manage users in the system (when there are no lanes defined)\n * and provide a way to lookup a SiteUser.\n */\nimport ABProcessParticipantCore from \"../../core/process/ABProcessParticipantCore\";\n\nexport default class ABProcessParticipant extends ABProcessParticipantCore {\n   // constructor(attributes, process, AB) {\n   //    super(attributes, process, AB);\n   // }\n\n   ////\n   //// Modeler Instance Methods\n   ////\n\n   /**\n    * fromElement()\n    * initialize this Participant's values from the given BPMN:Participant\n    * @param {BPMNParticipant}\n    */\n   fromElement(element) {\n      this.diagramID = element.id || this.diagramID;\n      this.onChange(element);\n   }\n\n   /**\n    * onChange()\n    * update the current Participant with information that was relevant\n    * from the provided BPMN:Participant\n    * @param {BPMNParticipant}\n    */\n   onChange(defElement) {\n      /*\n        Sample DefElement:\n            {\n                \"labels\": [],\n                \"children\": [],\n                \"id\": \"Participant_185ljkg\",\n                \"width\": 958,\n                \"height\": 240,\n                \"type\": \"bpmn:Participant\",\n                \"x\": -810,\n                \"y\": -2010,\n                \"order\": {\n                    \"level\": -2\n                },\n               \"businessObject\": {\n                    \"$type\": \"bpmn:Participant\",\n                    \"id\": \"Participant_185ljkg\",\n                    \"di\": {\n                        \"$type\": \"bpmndi:BPMNShape\",\n                        \"bounds\": {\n                            \"$type\": \"dc:Bounds\",\n                            \"x\": -810,\n                            \"y\": -2010,\n                            \"width\": 958,\n                            \"height\": 240\n                        },\n                        \"id\": \"Participant_185ljkg_di\",\n                        \"isHorizontal\": true\n                    },\n                    \"processRef\": {\n                        \"$type\": \"bpmn:Process\",\n                        \"id\": \"Process_0x3sul5\"\n                    }\n                }\n         */\n\n      // from the BPMI modeler we can gather a label for this:\n      if (\n         defElement.businessObject.name &&\n         defElement.businessObject.name != \"\"\n      ) {\n         this.label = defElement.businessObject.name;\n      }\n\n      if (defElement.children) {\n         var laneIDs = [];\n         defElement.children.forEach((c) => {\n            if (c.type == \"bpmn:Lane\") {\n               laneIDs.push(c.id);\n            }\n         });\n         this.laneIDs = laneIDs;\n      }\n   }\n\n   /**\n    * diagramProperties()\n    * return a set of values for the XML shape definition based upon\n    * the current values of this objec.\n    * @return {json}\n    */\n   diagramProperties() {\n      return [\n         {\n            id: this.diagramID,\n            def: {\n               name: this.name,\n            },\n         },\n      ];\n   }\n}\n","import ABProcessElementCore from \"../../../core/process/tasks/ABProcessElementCore.js\";\n\nexport default class ABProcessElement extends ABProcessElementCore {\n   // constructor(attributes, process, AB, defaultValues) {\n   //    super(attributes, process, AB, defaultValues);\n\n   //    // listen\n   // }\n\n   /**\n    * @method destroy()\n    * remove this task definition.\n    * @return {Promise}\n    */\n   destroy() {\n      ////\n      //// TODO: once our core conversion is complete, this .save() can be\n      //// moved to ABProcessTaskCore, and our ABDefinition.save() can take\n      //// care of the proper method to save depending on the current Platform.\n      ////\n      // return this.toDefinition()\n      //     .destroy()\n\n      return super.destroy().then(() => {\n         return this.process.elementRemove(this);\n      });\n   }\n\n   isValid() {\n      /*\n        var validator = OP.Validation.validator();\n\n        // label/name must be unique:\n        var isNameUnique =\n            this.AB.processes((o) => {\n                return o.name.toLowerCase() == this.name.toLowerCase();\n            }).length == 0;\n        if (!isNameUnique) {\n            validator.addError(\n                \"name\",\n                L(\n                    \"ab.validation.object.name.unique\",\n                    `Process name must be unique (\"${this.name}\"\" already used in this Application)`\n                )\n            );\n        }\n\n        return validator;\n        */\n\n      // var isValid =\n      //     this.AB.processes((o) => {\n      //         return o.name.toLowerCase() == this.name.toLowerCase();\n      //     }).length == 0;\n      // return isValid;\n\n      return true;\n   }\n\n   ////\n   //// Modeler Instance Methods\n   ////\n\n   findLane(curr, cb) {\n      if (!curr) {\n         cb(null, null);\n         return;\n      }\n\n      // if current object has a LANE definition, use that one:\n      if (curr.lanes && curr.lanes.length > 0) {\n         cb(null, curr.lanes[0]);\n      } else if (curr.$type == \"bpmn:Participant\") {\n         // if the current is a Participant, take that one\n         cb(null, curr);\n      } else {\n         // else move upwards and check again:\n         curr = curr.$parent;\n         this.findLane(curr, cb);\n      }\n   }\n\n   setLane(Lane) {\n      this.laneDiagramID = Lane.diagramID;\n   }\n\n   /**\n    * fromElement()\n    * initialize this Task's values from the given BPMN:Element\n    * @param {BPMNElement}\n    */\n   fromElement(element) {\n      this.diagramID = element.id || this.diagramID;\n      this.onChange(element);\n   }\n\n   /**\n    * onChange()\n    * update the current Task with information that was relevant\n    * from the provided BPMN:Element\n    * @param {BPMNElement}\n    */\n   onChange(defElement) {\n      /*\n        Sample DefElement:\n            {\n                \"labels\": [],\n                \"children\": [],\n                \"id\": \"Task_08j07ni\",\n                \"width\": 100,\n                \"height\": 80,\n                \"type\": \"bpmn:SendTask\",\n                \"x\": 20,\n                \"y\": -2130,\n                \"order\": {\n                    \"level\": 5\n                },\n                \"businessObject\": {\n                    \"$type\": \"bpmn:SendTask\",\n                    \"id\": \"Task_08j07ni\",\n                    \"name\": \"ffff\",\n                    \"di\": {\n                        \"$type\": \"bpmndi:BPMNShape\",\n                        \"bounds\": {\n                            \"$type\": \"dc:Bounds\",\n                            \"x\": 20,\n                            \"y\": -2130,\n                            \"width\": 100,\n                            \"height\": 80\n                        },\n                        \"id\": \"SendTask_0iidv6o_di\"\n                    }\n\n                    // Some elements (like EndEvents) have:\n                    .eventDefinitions: [\n                        {\n                            $type: \"actual bpmn:ElementType\",\n                            ...\n                        }\n                    ]\n                },\n                \"incoming\":[],\n                \"outgoing\":[]\n            }\n         */\n\n      // from the BPMI modeler we can gather a label for this:\n      if (\n         defElement.businessObject.name &&\n         defElement.businessObject.name != \"\"\n      ) {\n         this.label = defElement.businessObject.name;\n      }\n\n      // our lane may have changed:\n      var currObj = defElement.businessObject;\n      this.findLane(currObj, (err, obj) => {\n         if (obj) {\n            this.laneDiagramID = obj.id;\n         } else {\n            // if my parent shape is a Participant, then use that:\n            if (\n               defElement.parent &&\n               defElement.parent.type == \"bpmn:Participant\"\n            ) {\n               this.laneDiagramID = defElement.parent.id;\n            } else {\n               this.laneDiagramID = null;\n            }\n         }\n      });\n   }\n\n   /**\n    * diagramProperties()\n    * return a set of values for the XML shape definition based upon\n    * the current values of this object.\n    * @return {json}\n    */\n   diagramProperties() {\n      const warnings = this.warnings();\n      return [\n         {\n            id: this.diagramID,\n            def: {\n               name: this.name,\n            },\n            warn: warnings.length ? warnings : null,\n         },\n      ];\n   }\n\n   /**\n    * propertiesShow()\n    * display the properties panel for this Process Element.\n    * @param {string} id\n    *        the webix $$(id) of the properties panel area.\n    */\n   propertiesShow(id) {\n      let L = this.AB.Label();\n      var ui = {\n         id: id,\n         view: \"label\",\n         label: L(\"this task has not implement properties yet...\"),\n      };\n\n      webix.ui(ui, $$(id));\n\n      $$(id).show();\n   }\n\n   /**\n    * propertiesStash()\n    * pull our values from our property panel.\n    * @param {string} id\n    *        the webix $$(id) of the properties panel area.\n    */\n   propertiesStash(id) {}\n\n   /**\n    * property()\n    * return the specific property value if it exists.\n    * @return {mixed} | undefined\n    */\n   property(id) {\n      if ($$(id)) {\n         return $$(id).getValue();\n      }\n   }\n\n   /**\n    * switchTo()\n    * replace this object with an instance of one of our child classes:\n    * @param {ABProcessTask*} child\n    *        an instance of the new Process Task we are replaced with.\n    * @param {string} propertiesID\n    *        the webix ui.id container for the properties panel.\n    */\n   switchTo(child, propertiesID) {\n      // remove myself from our containing process's elements\n      this.process.elementRemove(this);\n\n      // add the new Process WITH the same id\n      this.process.elementAdd(child);\n\n      // show the child properties:\n      child.propertiesShow(propertiesID);\n\n      this.emit(\"switchTo\", child);\n   }\n\n   /**\n    * @method warningsEval()\n    * re-evaluate our warnings for this Process Task.\n    * Most of our ProcessTasks need to also verify data related to\n    * other available tasks, so we need to call the onProcessReady()\n    * so we can access those values.\n    */\n   warningsEval() {\n      super.warningsEval();\n      this.onProcessReady();\n\n      // if this isn't an end type of task, then there must be\n      // > 0 next tasks\n      if (!this.isEndTask()) {\n         const myOutgoingConnections = this.process.connectionsOutgoing(\n            this.diagramID\n         );\n         if (myOutgoingConnections.length < 1) {\n            this.warningMessage(\"should have another task after this one\");\n         }\n      }\n   }\n\n   /**\n    * @method warningMessage(message)\n    * Save a warning message in a common format for our ProcessTasks.\n    */\n   warningMessage(msg, data = {}) {\n      let message = `${this.defaults.key}[${\n         this.label ? this.label : this.name\n      }]: ${msg}`;\n      this._warnings.push({ message, data });\n   }\n}\n","import SubProcessCore from \"../../../core/process/tasks/ABProcessTaskSubProcessCore.js\";\n\nexport default class SubProcess extends SubProcessCore {\n   ////\n   //// Process Instance Methods\n   ////\n\n   /*\n   propertyIDs(id) {\n      return {\n         name: `${id}_name`,\n         isEnable: `${id}_isEnable`,\n         parameterId: `${id}_parameterId`,\n      };\n   }\n\n   /**\n    * @method propertiesShow()\n    * display the properties panel for this Process Element.\n    * @param {string} id\n    *        the webix $$(id) of the properties panel area.\n    * /\n   propertiesShow(id) {\n      let ids = this.propertyIDs(id);\n\n      // Pull query tasks option list\n      let parameterOptions = (this.process.processDataFields(this) || []).map(\n         (item) => {\n            return {\n               id: item.key,\n               value: item.label,\n            };\n         }\n      );\n\n      let ui = {\n         id: id,\n         view: \"form\",\n         elementsConfig: {\n            labelWidth: 120,\n         },\n         elements: [\n            {\n               id: ids.name,\n               view: \"text\",\n               label: L(\"Name\"),\n               name: \"name\",\n               value: this.name,\n            },\n            {\n               id: ids.isEnable,\n               view: \"switch\",\n               label: L(\"Enable\"),\n               value: this.isEnable,\n            },\n            {\n               id: ids.parameterId,\n               view: \"richselect\",\n               label: L(\"Repeat for\"),\n               options: parameterOptions,\n               value: this.parameterId,\n            },\n         ],\n      };\n\n      webix.ui(ui, $$(id));\n\n      $$(id).show();\n   }\n\n   /**\n    * @method propertiesStash()\n    * pull our values from our property panel.\n    * @param {string} id\n    *        the webix $$(id) of the properties panel area.\n    * /\n   propertiesStash(id) {\n      let ids = this.propertyIDs(id);\n      this.name = this.property(ids.name);\n      this.isEnable = this.property(ids.isEnable);\n      this.parameterId = this.property(ids.parameterId);\n   }\n   */\n\n   /**\n    * @method diagramProperties()\n    * return a set of values for the XML shape definition based upon\n    * the current values of this object.\n    * @return {json}\n    */\n   diagramProperties(bpmnModeler) {\n      let props = super.diagramProperties();\n      props = props || [{}];\n      props[0].def = props[0].def || {};\n\n      if (this.parameterId != null) {\n         props[0].def = props[0].def || {};\n         props[0].def.loopCharacteristics = bpmnModeler\n            .get(\"moddle\")\n            .create(\"bpmn:MultiInstanceLoopCharacteristics\");\n         props[0].def.loopCharacteristics.isSequential = true;\n      }\n\n      return props;\n   }\n\n   /**\n    * @method onChange()\n    * update the current Task with information that was relevant\n    * from the provided BPMN:Element\n    * @param {BPMNElement}\n    */\n   onChange(defElement) {\n      let loopCharacteristics =\n         defElement.loopCharacteristics ||\n         defElement.businessObject.loopCharacteristics ||\n         {};\n\n      switch (loopCharacteristics.$type) {\n         case \"bpmn:MultiInstanceLoopCharacteristics\":\n            this.loopType = loopCharacteristics.isSequential\n               ? \"sequential\"\n               : \"parallel\";\n            break;\n         case \"bpmn:StandardLoopCharacteristics\":\n            this.loopType = \"looping\";\n            break;\n      }\n   }\n\n   /**\n    * @method destroy()\n    * destroy this sub process and inside tasks\n    *\n    * @return {Promise}\n    */\n   destroy() {\n      // reuse .destroy function of ABProcess\n      // to clear tasks within this sub process\n      return this.process.destroy.call(this);\n   }\n\n   /**\n    * @method save()\n    * persist this sub process\n    *\n    * @return {Promise}\n    *\t\t\t\t\t\t.resolve( {this} )\n    */\n   save() {\n      // reuse .save function of ABProcess\n      // to update tasks within this sub process\n      return this.process.save.call(this);\n   }\n\n   /**\n    * @method elementNewForModelDefinition()\n    * create a new process element defined by the given BPMN:Element\n    *\n    * the BPMN:Element definition comes from the BPMN Modeler when a new\n    * diagram element is created.\n    *\n    * @param {BPMN:Element} element\n    *        the BPMN modeler diagram element definition\n    * @return {ABProcessParticipant|ABProcessLane|ABProcessElement}\n    *\n    */\n   elementNewForModelDefinition(element) {\n      let task = this.AB.processElementNewForModelDefinition(element, this);\n\n      // Add a new task to this sub process\n      if (task) {\n         this.elementAdd(task);\n      }\n      return task;\n   }\n\n   warningsEval() {\n      super.warningsEval();\n\n      (this._unknownElementIDs || []).forEach((eID) => {\n         this.warningMessage(\n            `is referencing an unknown process element id[${eID}]`,\n            { process: this.id, eID }\n         );\n      });\n   }\n}\n","import ABViewCore from \"../../core/views/ABViewCore.js\";\nimport ABViewComponent from \"./viewComponent/ABViewComponent\";\n\nexport default class ABView extends ABViewCore {\n   // constructor(attributes, application, parent) {\n   //    super(attributes, application, parent);\n   // }\n\n   /**\n    * @method component()\n    * return a UI component based upon this view.\n    * @return {obj} UI component\n    */\n   component() {\n      return new ABViewComponent(this);\n   }\n\n   /*\n    * @method componentList\n    * return the list of components available on this view to display in the editor.\n    * @param {bool} isEdited  is this component currently in the Interface Editor\n    * @return {array} of ABView objects.\n    */\n   componentList(isEdited) {\n      // views not allowed to drop onto this View:\n      var viewsToIgnore = [\n         \"view\",\n         \"page\",\n         \"formpanel\",\n         \"viewcontainer\",\n         // not allowed Detail's widgets\n         \"detailcheckbox\",\n         \"detailcustom\",\n         \"detailconnect\",\n         \"detailimage\",\n         \"detailselectivity\",\n         \"detailtext\",\n         \"detailtree\",\n         // not allowed Form's widgets\n         \"button\",\n         \"checkbox\",\n         \"connect\",\n         \"datepicker\",\n         \"fieldcustom\",\n         \"textbox\",\n         \"numberbox\",\n         \"selectsingle\",\n         \"selectmultiple\",\n         \"formtree\",\n         \"fieldreadonly\",\n         // not allowed Chart's Widgets\n         \"pie\",\n         \"bar\",\n         \"line\",\n         \"area\",\n         // not allowed Report page\n         \"report\",\n         \"reportPage\",\n         \"reportPanel\",\n      ];\n\n      var allComponents = this.application.viewAll(); // ABViewManager.allViews();\n      var allowedComponents = allComponents.filter((c) => {\n         return viewsToIgnore.indexOf(c.common().key) == -1;\n      });\n\n      return allowedComponents;\n   }\n\n   changePage(pageId) {\n      this.emit(\"changePage\", pageId);\n   }\n\n   warningsAll() {\n      // report both OUR warnings, and any warnings from any of our fields\n      var allWarnings = super.warningsAll();\n      this.views().forEach((v) => {\n         allWarnings = allWarnings.concat(v.warningsAll());\n      });\n\n      (this.pages?.() || []).forEach((p) => {\n         allWarnings = allWarnings.concat(p.warningsAll());\n      });\n\n      return allWarnings.filter((w) => w);\n   }\n\n   warningsEval() {\n      super.warningsEval();\n\n      let allViews = this.views();\n\n      (this.__missingViews || []).forEach((id) => {\n         this.warningsMessage(`references unknown View[${id}]`);\n      });\n\n      allViews.forEach((v) => {\n         v.warningsEval();\n      });\n\n      // if a datacollection is specified, verify it can be accessed.\n      if (this.settings.dataviewID) {\n         let dc = this.datacollections || this.datacollection;\n         if (!dc) {\n            this.warningsMessage(\n               `references unknown dataviewID[${this.settings.dataviewID}]`\n            );\n         }\n      }\n   }\n\n   warningsMessage(msg, data = {}) {\n      let message = `${this.key}[${this.name}]: ${msg}`;\n      this._warnings.push({ message, data });\n   }\n}\n","import ABViewContainerCore from \"../../core/views/ABViewContainerCore\";\nimport ABViewContainerComponent from \"./viewComponent/ABViewContainerComponent\";\n\nexport default class ABViewContainer extends ABViewContainerCore {\n   // constructor(values, application, parent, defaultValues) {\n   //    super(values, application, parent, defaultValues);\n   // }\n\n   /**\n    * @method component()\n    * return a UI component based upon this view.\n    * @return {obj} UI component\n    */\n   component() {\n      return new ABViewContainerComponent(this);\n   }\n\n   warningsEval() {\n      super.warningsEval();\n\n      let allViews = this.views();\n\n      if (allViews.length == 0) {\n         this.warningsMessage(\"has no content\");\n      }\n\n      // NOTE: this is done in ABView:\n      // (allViews || []).forEach((v) => {\n      //    v.warningsEval();\n      // });\n   }\n}\n","import ABViewDetailItemCore from \"../../core/views/ABViewDetailItemCore\";\n// const ABViewDetailItemComponent = require(\"./viewComponent/ABViewDetailItemComponent\");\n\nexport default class ABViewDetailItem extends ABViewDetailItemCore {\n   // constructor(values, application, parent, defaultValues) {\n   //    super(values, application, parent, defaultValues);\n   // }\n\n   /**\n    * @method component()\n    * return a UI component based upon this view.\n    * @return {obj} UI component\n    */\n   component() {\n      console.error(\n         \"DEPRECIATED: ABViewDetailItem.component():  Who is calling this?\"\n      );\n      return null;\n      // return new ABViewDetailItemComponent(this);\n   }\n}\n","import ABViewFormItemCore from \"../../core/views/ABViewFormItemCore\";\n// const ABViewFormItemComponent = require(\"./viewComponent/ABViewFormItemComponent\");\n\n// const ABViewFormFieldPropertyComponentDefaults =\n//    ABViewFormItemCore.defaultValues();\n\nexport default class ABViewFormItem extends ABViewFormItemCore {\n   // constructor(values, application, parent, defaultValues) {\n   //    super(values, application, parent, defaultValues);\n   // }\n\n   static get componentUI() {\n      console.error(\n         \"DEPRECIATED: ABViewFormItem.componentUI(): who is calling this?\"\n      );\n      return null;\n\n      // return ABViewFormItemComponent;\n   }\n\n   /**\n    * @method component()\n    * return a UI component based upon this view.\n    * @return {obj} UI component\n    */\n   component() {\n      console.error(\n         \"DEPRECIATED: ABViewFormItem.component(): who is calling this?\"\n      );\n      return null;\n\n      // return new ABViewFormItemComponent(this);\n   }\n\n   /**\n    * @method parentFormUniqueID\n    * return a unique ID based upon the closest form object this component is on.\n    * @param {string} key  The basic id string we will try to make unique\n    * @return {string}\n    */\n   parentFormUniqueID(key) {\n      var form = this.parentFormComponent();\n      var uniqueInstanceID;\n      if (form) {\n         uniqueInstanceID = form.uniqueInstanceID;\n      } else {\n         uniqueInstanceID = webix.uid();\n      }\n\n      return key + uniqueInstanceID;\n   }\n}\n","import ABViewPageCore from \"../../core/views/ABViewPageCore\";\n\nconst ABPropertyComponentDefaults = ABViewPageCore.defaultValues();\n\nexport default class ABViewPage extends ABViewPageCore {\n   // constructor(values, application, parent, defaultValues) {\n   //    super(values, application, parent, defaultValues);\n   // }\n\n   /**\n    * @function component()\n    * return a UI component based upon this view.\n    * @param {obj} v1App\n    * @return {obj} UI component\n    */\n   component(v1App = false) {\n      var component = super.component();\n\n      component._ui = component.ui();\n\n      // wrap our ABViewContainer in our Page scrollview\n      component.ui = () => {\n         return {\n            view: \"scrollview\",\n            borderless: true,\n            css:\n               this.settings.pageBackground ||\n               ABPropertyComponentDefaults.pageBackground,\n            body: component._ui,\n         };\n      };\n\n      // if this is our v1Interface\n      if (v1App) {\n         var newComponent = component;\n         component = {\n            ui: component.ui(),\n            init: (options, accessLevel) => {\n               accessLevel = accessLevel ?? this.getUserAccess();\n               return newComponent.init(this.AB, accessLevel, options);\n            },\n            onShow: (...params) => {\n               return newComponent.onShow?.(...params);\n            },\n         };\n      }\n\n      return component;\n   }\n\n   warningsEval() {\n      super.warningsEval();\n\n      let allViews = this.views();\n\n      if (allViews.length == 0) {\n         this.warningsMessage(\"has no sub views\");\n      }\n\n      (this.pages() || []).forEach((p) => {\n         p.warningsEval();\n      });\n   }\n}\n","import ABViewWidgetCore from \"../../core/views/ABViewWidgetCore\";\n\nconst ABPropertyComponentDefaults = ABViewWidgetCore.defaultValues();\n\nexport default class ABViewWidget extends ABViewWidgetCore {\n   // constructor(values, application, parent, defaultValues) {\n   //    super(values, application, parent, defaultValues);\n   // }\n\n   /**\n    * @function component()\n    * return a UI component based upon this view.\n    * @param {obj} App\n    * @return {obj} UI component\n    */\n   component(App) {\n      let base = super.component(App);\n\n      base.onShow = (viewId) => {\n         let dv = this.datacollection; // get from a function or a (get) property\n         if (dv && dv.dataStatus == dv.dataStatusFlag.notInitial) {\n            // load data when a widget is showing\n            dv.loadData();\n         }\n      };\n\n      return base;\n   }\n}\n","/**\n * ABViewComponent\n * A common UI component class for our UI widgets.\n */\n// import ClassUI from \"../../../../ui/ClassUI\";\n\nexport default class ABViewComponent /* extends ClassUI */ {\n   constructor(baseView, idBase, ids) {\n      // super(idBase || `ABView_${baseView.id}`, ids);\n\n      this.view = baseView;\n      this.settings = baseView.settings;\n      this.AB = baseView.AB;\n      this.datacollection = baseView.datacollections || baseView.datacollection;\n\n      this.__events = [];\n      // {array}\n      // A collection of any listeners we are managing.\n      // {\n      //   emitter:   {EventEmitter} the object we are listening on\n      //   eventName: {string} the event key we are listening for\n      //   listener:  {fn} the function to call on\n      // }\n\n      this.CurrentObjectID = null;\n      // {string}\n      // the ABObject.id of the object we are working with.\n\n      this.CurrentDatacollectionID = null;\n      // {string}\n      // the ABDataCollection.id of the DC we are working with\n   }\n\n   /**\n    * @method CurrentObject()\n    * A helper to return the current ABObject we are working with.\n    * @return {ABObject}\n    */\n   get CurrentObject() {\n      return this.AB.objectByID(this.CurrentObjectID);\n   }\n   /**\n    * @method CurrentDatacollection()\n    * A helper to return the current ABDataCollection we are working with.\n    * @return {ABDataCollection}\n    */\n   get CurrentDatacollection() {\n      return this.AB.datacollectionByID(this.CurrentDatacollectionID);\n   }\n\n   ui(uiComponents = []) {\n      // an ABView is a collection of rows:\n      const _ui = {\n         id: this.ids.component,\n         view: \"layout\",\n         type: \"space\",\n         rows: uiComponents,\n      };\n\n      // if this form is empty, then force a minimal row height\n      // so the component isn't completely hidden on the screen.\n      // (important in the editor so we don't loose the ability to edit the\n      // component)\n      if (!_ui.rows.length) _ui.height = 30;\n\n      return _ui;\n   }\n\n   async init(AB) {\n      this.AB = AB;\n   }\n\n   /**\n    * @method datacollectionLoad\n    *\n    * @param datacollection {ABDatacollection}\n    */\n   datacollectionLoad(datacollection) {\n      this.CurrentDatacollectionID = datacollection?.id;\n   }\n\n   objectLoad(object) {\n      this.CurrentObjectID = object?.id;\n   }\n\n   /**\n    * @method eventAdd()\n    * Create a new listener on an object. Note, this will prevent multiple\n    * listeners being applied to the same Object.\n    * @param {object} evt\n    *        The definition of the event we are adding:\n    *        {\n    *           emitter:   {EventEmitter} the object we are listening on\n    *           eventName: {string} the event key we are listening for\n    *           listener:   {fn} the function to call on\n    *        }\n    */\n   eventAdd(evt) {\n      if (!evt || !evt.emitter || !evt.listener) return;\n\n      // make sure we haven't done this before:\n      const __events = this.__events;\n      const exists = __events.filter(\n         (e) => e.emitter === evt.emitter && e.eventName === evt.eventName\n         // && e.listener === evt.listener\n      );\n\n      if (!exists.length) {\n         // add to array\n         __events.push({\n            emitter: evt.emitter,\n            eventName: evt.eventName,\n            listener: evt.listener,\n         });\n\n         // listening this event\n         evt.emitter.on(evt.eventName, evt.listener);\n      }\n   }\n\n   /**\n    * @method eventsClear()\n    * Remove all the attached event listeners and reset our tracking.\n    */\n   eventsClear() {\n      this.__events.forEach((evt) => {\n         evt.emitter.removeListener(evt.eventName, evt.listener);\n      });\n\n      this.__events = [];\n   }\n\n   /**\n    * @method onShow()\n    * perform any preparations necessary when showing this component.\n    */\n   onShow() {\n      // check if tab has a hint\n      if (this?.view?.settings?.hintID) {\n         // fetch the steps for the hint\n         let hint = this.AB.hintID(this.view.settings.hintID);\n         if (hint.settings.active) {\n            hint.createHintUI();\n         }\n      }\n      // if we manage a datacollection, then make sure it has started\n      // loading it's data when we are showing our component.\n      const dc = this.datacollection;\n\n      if (!dc) return;\n\n      if (dc.dataStatus === dc.dataStatusFlag.notInitial)\n         // load data when a widget is showing\n         dc.loadData();\n   }\n}\n","import ABViewComponent from \"./ABViewComponent\";\n\nexport default class ABViewContainerComponent extends ABViewComponent {\n   constructor(baseView, idBase, ids) {\n      super(baseView, idBase || `ABViewContainer_${baseView.id}`, ids);\n\n      this.options = null;\n\n      this.viewComponents = {\n         /* view.id : {viewComponent} */\n      };\n      // {hash}\n      // a reference of all our child views that we manage\n\n      this.viewComponentIDs = {\n         /* view.id : {viewComponent} */\n      };\n      // {hash}\n      // a reference of all our child.ui().ids of the views we manage\n\n      this._handlerChangePage = (pageId) => {\n         baseView.changePage(pageId);\n      };\n   }\n\n   ui(uiComponents) {\n      // Generate rows & cols of views to .layout\n      const views = this.view.viewsSortByPosition();\n      const rowViews = this.getElements(views);\n      const _ui = super.ui(uiComponents || rowViews);\n\n      delete _ui.type;\n\n      return _ui;\n   }\n\n   // make sure each of our child views get .init() called\n   async init(AB, accessLevel = 0, options = {}) {\n      await super.init(AB);\n\n      this.options = options;\n\n      const allInits = [];\n\n      // // register our callbacks:\n      // if (options) {\n      //    for (var c in _logic.callbacks) {\n      //       _logic.callbacks[c] = options[c] || _logic.callbacks[c];\n      //    }\n      // }\n\n      // see access by CSS class\n      $$(this.ids.component)?.define(\"css\", `accessLevel-${accessLevel}`);\n\n      const viewComponents = this.viewComponents;\n\n      // attach all the .UI views:\n      for (const key in viewComponents) {\n         // skip when the view is removed.\n         if (\n            !viewComponents[key] ??\n            !this.view.views((v) => v.id === key).length\n         )\n            continue;\n\n         // Initial component along with options in case there are callbacks we need to listen for\n         if (accessLevel) {\n            allInits.push(viewComponents[key].init(AB, accessLevel, options));\n\n            continue;\n         }\n\n         $$(this.viewComponentIDs[key]).hide();\n      }\n\n      await Promise.all(allInits);\n   }\n\n   getElements(views) {\n      const rows = [];\n      const componentMap = {};\n\n      let curRowIndex;\n      let curColIndex;\n\n      const settings = this.settings;\n      const defaultSettings = this.view.constructor.defaultValues();\n\n      views.forEach((v) => {\n         // let component = v.component(/* App, idPrefix */);\n         // NOTE: PONG - Just temporary to be compatible old & new versions\n         let component;\n\n         try {\n            component = v.component();\n            // make sure any existing handlers for changePage are removed.\n            v.removeAllListeners(\"changePage\");\n         } catch (err) {\n            component = v.component(this.AB._App);\n\n            const ui = component.ui;\n\n            component.ui = (() => ui).bind(component);\n         }\n\n         this.viewComponents[v.id] = component;\n\n         ////\n         //// TODO: figure out the embedded Callbacks => emit()\n         ////\n         // if key == \"form\" or \"button\" register the callbacks to the parent\n         // NOTE this will only work on the last form of a page!\n         // if (v.key == \"form\" && v._logic.callbacks) {\n         //    _logic.callbacks = v._logic.callbacks;\n         // }\n\n         // Create a new row\n         if (v.position.y == null || v.position.y !== curRowIndex) {\n            curRowIndex = v.position.y || rows.length;\n            curColIndex = 0;\n\n            const rowNew = {\n               cols: [],\n            };\n\n            // Create columns following setting value\n            const colNumber = settings.columns || defaultSettings.columns;\n\n            for (let i = 0; i < colNumber; i++)\n               rowNew.cols.push({\n                  gravity: settings.gravity?.[i]\n                     ? parseInt(settings.gravity[i])\n                     : defaultSettings.gravity,\n               });\n\n            rows.push(rowNew);\n         }\n\n         // Get the last row\n         const rowIndx = rows.length - 1;\n         const curRow = rows[rowIndx];\n         const newPos = v.position.x ?? 0;\n         const mapKey = `${rowIndx}-${newPos}`;\n\n         let getGrav = 1;\n\n         if (componentMap[mapKey])\n            console.error(\n               `Component[${component?.ids?.component}] is overwriting component[${componentMap[mapKey].ids?.component}]. <-- Reorder them to fix.`\n            );\n\n         componentMap[mapKey] = component;\n\n         if (curRow.cols[newPos]?.gravity)\n            getGrav = curRow.cols[newPos].gravity;\n\n         const _ui = component.ui();\n\n         this.viewComponentIDs[v.id] = _ui.id;\n         _ui.gravity = getGrav;\n\n         // Add ui of sub-view to column\n         curRow.cols[newPos] = _ui;\n\n         // Trigger 'changePage' event to parent\n         this.eventAdd({\n            emitter: v,\n            eventName: \"changePage\",\n            listener: this._handlerChangePage,\n         });\n\n         curColIndex++;\n      });\n\n      return rows;\n   }\n\n   onShow() {\n      super.onShow();\n\n      // calll .onShow in child components\n      Object.values(this.viewComponents).forEach((val) => {\n         val.onShow?.();\n      });\n   }\n}\n","import $ from \"dom7\";\nimport Framework7 from \"framework7/bundle\";\n\n// Import Global Resources\n// import \"./atomic.polyfills.min.js\";\nvar atomic = require(\"./atomic.polyfills.min.js\");\nvar sails = require(\"./sails.io.js\");\nWindow.atomic = atomic;\n\n// Import F7 Styles\nimport \"framework7/css/bundle\";\n\n// Import Icons and App Custom Styles\nimport \"../css/icons.css\";\nimport \"../css/app.less\";\n\n// Import Routes\nimport routes from \"./routes.js\";\n// Import Store\nimport store from \"./store.js\";\n\n// Import main app component\nimport App from \"../pages/app.f7.jsx\";\n\n// AB Factory\nimport AB from \"./AppBuilder/ABFactory\";\n\nlet version = \"0.0.9\";\n\nvar app = new Framework7({\n   name: \"AppBuilder PWA\", // App name\n   theme: \"auto\", // Automatic theme detection\n   darkMode: \"auto\",\n   colors: {\n      primary: \"#366989\",\n   },\n\n   el: \"#app\", // App root element\n   component: App(AB), // App main component\n   // App store\n   store: store(AB),\n   // App routes\n   routes: routes(AB),\n   version: version,\n\n   // Register service worker (only on production build)\n   serviceWorker:\n      process.env.NODE_ENV === \"production\"\n         ? {\n              path: \"/assets/html/pwa/service-worker.js\",\n           }\n         : {},\n});\n","/*! atomicjs v4.4.1 | (c) 2020 Chris Ferdinandi | MIT License | https://github.com/cferdinandi/atomic */\n!(function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define(e):t.ES6Promise=e()})(this,(function(){\"use strict\";function t(t){return\"function\"==typeof t}var e=Array.isArray?Array.isArray:function(t){return\"[object Array]\"===Object.prototype.toString.call(t)},n=0,r=void 0,o=void 0,i=function(t,e){h[n]=t,h[n+1]=e,2===(n+=2)&&(o?o(p):m())};var s=\"undefined\"!=typeof window?window:void 0,u=s||{},a=u.MutationObserver||u.WebKitMutationObserver,c=\"undefined\"==typeof self&&\"undefined\"!=typeof process&&\"[object process]\"==={}.toString.call(process),f=\"undefined\"!=typeof Uint8ClampedArray&&\"undefined\"!=typeof importScripts&&\"undefined\"!=typeof MessageChannel;function l(){var t=setTimeout;return function(){return t(p,1)}}var h=new Array(1e3);function p(){for(var t=0;t<n;t+=2){(0,h[t])(h[t+1]),h[t]=void 0,h[t+1]=void 0}n=0}var d,v,y,_,m=void 0;function w(t,e){var n=this,r=new this.constructor(A);void 0===r[g]&&J(r);var o=n._state;if(o){var s=arguments[o-1];i((function(){return N(o,r,s,n._result)}))}else R(n,r,t,e);return r}function b(t){if(t&&\"object\"==typeof t&&t.constructor===this)return t;var e=new this(A);return P(e,t),e}c?m=function(){return process.nextTick(p)}:a?(v=0,y=new a(p),_=document.createTextNode(\"\"),y.observe(_,{characterData:!0}),m=function(){_.data=v=++v%2}):f?((d=new MessageChannel).port1.onmessage=p,m=function(){return d.port2.postMessage(0)}):m=void 0===s&&\"function\"==typeof require?(function(){try{var t=Function(\"return this\")().require(\"vertx\");return void 0!==(r=t.runOnLoop||t.runOnContext)?function(){r(p)}:l()}catch(t){return l()}})():l();var g=Math.random().toString(36).substring(2);function A(){}var T=void 0,j=1,x=2,S={error:null};function O(t){try{return t.then}catch(t){return S.error=t,S}}function C(e,n,r){n.constructor===e.constructor&&r===w&&n.constructor.resolve===b?(function(t,e){e._state===j?M(t,e._result):e._state===x?q(t,e._result):R(e,void 0,(function(e){return P(t,e)}),(function(e){return q(t,e)}))})(e,n):r===S?(q(e,S.error),S.error=null):void 0===r?M(e,n):t(r)?(function(t,e,n){i((function(t){var r=!1,o=(function(t,e,n,r){try{t.call(e,n,r)}catch(t){return t}})(n,e,(function(n){r||(r=!0,e!==n?P(t,n):M(t,n))}),(function(e){r||(r=!0,q(t,e))}),t._label);!r&&o&&(r=!0,q(t,o))}),t)})(e,n,r):M(e,n)}function P(t,e){var n,r;t===e?q(t,new TypeError(\"You cannot resolve a promise with itself\")):(r=typeof(n=e),null===n||\"object\"!==r&&\"function\"!==r?M(t,e):C(t,e,O(e)))}function E(t){t._onerror&&t._onerror(t._result),F(t)}function M(t,e){t._state===T&&(t._result=e,t._state=j,0!==t._subscribers.length&&i(F,t))}function q(t,e){t._state===T&&(t._state=x,t._result=e,i(E,t))}function R(t,e,n,r){var o=t._subscribers,s=o.length;t._onerror=null,o[s]=e,o[s+j]=n,o[s+x]=r,0===s&&t._state&&i(F,t)}function F(t){var e=t._subscribers,n=t._state;if(0!==e.length){for(var r=void 0,o=void 0,i=t._result,s=0;s<e.length;s+=3)r=e[s],o=e[s+n],r?N(n,r,o,i):o(i);t._subscribers.length=0}}function N(e,n,r,o){var i=t(r),s=void 0,u=void 0,a=void 0,c=void 0;if(i){if((s=(function(t,e){try{return t(e)}catch(t){return S.error=t,S}})(r,o))===S?(c=!0,u=s.error,s.error=null):a=!0,n===s)return void q(n,new TypeError(\"A promises callback cannot return that same promise.\"))}else s=o,a=!0;n._state!==T||(i&&a?P(n,s):c?q(n,u):e===j?M(n,s):e===x&&q(n,s))}var H=0;function J(t){t[g]=H++,t._state=void 0,t._result=void 0,t._subscribers=[]}var L=(function(){function t(t,n){this._instanceConstructor=t,this.promise=new t(A),this.promise[g]||J(this.promise),e(n)?(this.length=n.length,this._remaining=n.length,this._result=new Array(this.length),0===this.length?M(this.promise,this._result):(this.length=this.length||0,this._enumerate(n),0===this._remaining&&M(this.promise,this._result))):q(this.promise,new Error(\"Array Methods must be provided an Array\"))}return t.prototype._enumerate=function(t){for(var e=0;this._state===T&&e<t.length;e++)this._eachEntry(t[e],e)},t.prototype._eachEntry=function(t,e){var n=this._instanceConstructor,r=n.resolve;if(r===b){var o=O(t);if(o===w&&t._state!==T)this._settledAt(t._state,e,t._result);else if(\"function\"!=typeof o)this._remaining--,this._result[e]=t;else if(n===U){var i=new n(A);C(i,t,o),this._willSettleAt(i,e)}else this._willSettleAt(new n(function(e){return e(t)}),e)}else this._willSettleAt(r(t),e)},t.prototype._settledAt=function(t,e,n){var r=this.promise;r._state===T&&(this._remaining--,t===x?q(r,n):this._result[e]=n),0===this._remaining&&M(r,this._result)},t.prototype._willSettleAt=function(t,e){var n=this;R(t,void 0,(function(t){return n._settledAt(j,e,t)}),(function(t){return n._settledAt(x,e,t)}))},t})();var U=(function(){function t(e){this[g]=H++,this._result=this._state=void 0,this._subscribers=[],A!==e&&(\"function\"!=typeof e&&(function(){throw new TypeError(\"You must pass a resolver function as the first argument to the promise constructor\")})(),this instanceof t?(function(t,e){try{e((function(e){P(t,e)}),(function(e){q(t,e)}))}catch(e){q(t,e)}})(this,e):(function(){throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\")})())}return t.prototype.catch=function(t){return this.then(null,t)},t.prototype.finally=function(t){var e=this.constructor;return this.then((function(n){return e.resolve(t()).then((function(){return n}))}),(function(n){return e.resolve(t()).then((function(){throw n}))}))},t})();return U.prototype.then=w,U.all=function(t){return new L(this,t).promise},U.race=function(t){var n=this;return e(t)?new n(function(e,r){for(var o=t.length,i=0;i<o;i++)n.resolve(t[i]).then(e,r)}):new n(function(t,e){return e(new TypeError(\"You must pass an array to race.\"))})},U.resolve=b,U.reject=function(t){var e=new this(A);return q(e,t),e},U._setScheduler=function(t){o=t},U._setAsap=function(t){i=t},U._asap=i,U.polyfill=function(){var t=void 0;if(\"undefined\"!=typeof global)t=global;else if(\"undefined\"!=typeof self)t=self;else try{t=Function(\"return this\")()}catch(t){throw new Error(\"polyfill failed because global object is unavailable in this environment\")}var e=t.Promise;if(e){var n=null;try{n=Object.prototype.toString.call(e.resolve())}catch(t){}if(\"[object Promise]\"===n&&!e.cast)return}t.Promise=U},U.Promise=U,U})),(function(t,e){\"function\"==typeof define&&define.amd?define([],(function(){return e(t)})):\"object\"==typeof exports?module.exports=e(t):window.atomic=e(t)})(\"undefined\"!=typeof global?global:\"undefined\"!=typeof window?window:this,(function(t){\"use strict\";var e,n={method:\"GET\",username:null,password:null,data:{},headers:{\"Content-type\":\"application/x-www-form-urlencoded\"},responseType:\"text\",timeout:null,withCredentials:!1},r=function(){for(var t={},e=function(e){for(var n in e)e.hasOwnProperty(n)&&(\"[object Object]\"===Object.prototype.toString.call(e[n])?t[n]=r(t[n],e[n]):t[n]=e[n])},n=0;n<arguments.length;n++){e(arguments[n])}return t},o=function(t){var n=new XMLHttpRequest,r=new Promise(function(r,o){for(var i in n.onreadystatechange=function(){4===n.readyState&&n.status&&(n.status>=200&&n.status<300?r(function(t){var n;if(\"text\"!==e.responseType&&\"\"!==e.responseType)return{data:t.response,xhr:t};try{n=JSON.parse(t.responseText)}catch(e){n=t.responseText}return{data:n,xhr:t}}(n)):o({status:n.status,statusText:n.statusText,responseText:n.responseText}))},n.open(e.method,t,!0,e.username,e.password),n.responseType=e.responseType,e.headers)e.headers.hasOwnProperty(i)&&n.setRequestHeader(i,e.headers[i]);e.timeout&&(n.timeout=e.timeout,n.ontimeout=function(t){o({status:408,statusText:\"Request timeout\"})}),e.withCredentials&&(n.withCredentials=!0),n.send(function(t){if(\"string\"==typeof t||\"[object FormData]\"===Object.prototype.toString.call(t))return t;if(/application\\/json/i.test(e.headers[\"Content-type\"])||\"[object Array]\"===Object.prototype.toString.call(t))return JSON.stringify(t);var n=[];for(var r in t)t.hasOwnProperty(r)&&n.push(encodeURIComponent(r)+\"=\"+encodeURIComponent(t[r]));return n.join(\"&\")}(e.data))});return r.cancel=function(){n.abort()},r};return function(i,s){if(!(\"XMLHttpRequest\"in t&&\"JSON\"in t&&\"Promise\"in t))throw\"Atomic: This browser does not support the methods used in this plugin.\";return e=r(n,s||{}),o(i)}}));","export default {\n\tabVersion: \"0.0.0\",\n\tfilename: \"app_AppBuilder_PWA_20230519\",\n\tdate: \"20230519\",\n\tdefinitions: [\n\t\t{\n\t\t\tid: \"4b7a489a-5fe5-4044-8565-aaa3654300f2\",\n\t\t\tname: \"AppBuilder PWA\",\n\t\t\ttype: \"application\",\n\t\t\tjson: {\n\t\t\t\tid: \"4b7a489a-5fe5-4044-8565-aaa3654300f2\",\n\t\t\t\ttype: \"application\",\n\t\t\t\tname: \"AppBuilder PWA\",\n\t\t\t\ticon: \"fa-android\",\n\t\t\t\tisSystemObject: 0,\n\t\t\t\tjson: {\n\t\t\t\t\ttranslations: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlanguage_code: \"en\",\n\t\t\t\t\t\t\tlabel: \"AppBuilder PWA\",\n\t\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\t\"Application to test new AppBuilder PWA framework.\",\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tname: \"AppBuilder PWA\",\n\t\t\t\t\tversionData: {\n\t\t\t\t\t\tversionNumber: \"1.0.0\",\n\t\t\t\t\t\tchangeLog: {\n\t\t\t\t\t\t\t\"1.0.0\": {\n\t\t\t\t\t\t\t\tauthor: \"N/A\",\n\t\t\t\t\t\t\t\tversion: \"1.0.0\",\n\t\t\t\t\t\t\t\tkeepVersion: 0,\n\t\t\t\t\t\t\t\tcommitMessage: \"Initial Version\",\n\t\t\t\t\t\t\t\ttimestamp: \"2023-05-18T09:55:09.456Z\",\n\t\t\t\t\t\t\t\tversionNumber: \"1.0.0\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tobjectIDs: [\"faa9905e-dea8-4c7f-8eb4-98f1e6e66506\"],\n\t\t\t\t\tobjectListSettings: {\n\t\t\t\t\t\tisOpen: false,\n\t\t\t\t\t\tsearchText: \"\",\n\t\t\t\t\t\tsortDirection: \"asc\",\n\t\t\t\t\t\tisGroup: false,\n\t\t\t\t\t},\n\t\t\t\t\thintIDs: [],\n\t\t\t\t\tqueryIDs: [],\n\t\t\t\t\tdatacollectionIDs: [\"0e9f5f6f-cd0b-4b93-b0c8-d51bd9852322\"],\n\t\t\t\t\tpageIDs: [],\n\t\t\t\t\tprocessIDs: [],\n\t\t\t\t},\n\t\t\t\troleAccess: [\n\t\t\t\t\t\"dd6c2d34-0982-48b7-bc44-2456474edbea\",\n\t\t\t\t\t\"e1be4d22-1d00-4c34-b205-ef84b8334b19\",\n\t\t\t\t\t\"6cc04894-a61b-4fb5-b3e5-b8c3f78bd331\",\n\t\t\t\t],\n\t\t\t\ttranslations: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlanguage_code: \"en\",\n\t\t\t\t\t\tlabel: \"AppBuilder PWA\",\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\"Application to test new AppBuilder PWA framework.\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tisAccessManaged: false,\n\t\t\t\tisTranslationManaged: false,\n\t\t\t\tisTutorialManaged: false,\n\t\t\t\taccessManagers: {\n\t\t\t\t\tuseRole: 0,\n\t\t\t\t\trole: null,\n\t\t\t\t\tuseAccount: 0,\n\t\t\t\t\taccount: null,\n\t\t\t\t},\n\t\t\t\ttranslationManagers: {\n\t\t\t\t\tuseRole: 0,\n\t\t\t\t\trole: null,\n\t\t\t\t\tuseAccount: 0,\n\t\t\t\t\taccount: null,\n\t\t\t\t},\n\t\t\t},\n\t\t\tcreatedAt: \"2023-05-18T09:55:09.000Z\",\n\t\t\tupdatedAt: \"2023-05-18T10:18:01.000Z\",\n\t\t},\n\t\t{\n\t\t\tid: \"faa9905e-dea8-4c7f-8eb4-98f1e6e66506\",\n\t\t\tname: \"Person - PWA\",\n\t\t\ttype: \"object\",\n\t\t\tjson: {\n\t\t\t\tid: \"faa9905e-dea8-4c7f-8eb4-98f1e6e66506\",\n\t\t\t\ttype: \"object\",\n\t\t\t\tname: \"Person - PWA\",\n\t\t\t\tlabelFormat: \"\",\n\t\t\t\tlabelSettings: { isNoLabelDisplay: 0 },\n\t\t\t\tisImported: 0,\n\t\t\t\tisExternal: 0,\n\t\t\t\ttableName: \"AB_AppBuilderPWA_PersonPWA\",\n\t\t\t\tprimaryColumnName: \"uuid\",\n\t\t\t\ttransColumnName: \"\",\n\t\t\t\turlPath: \"\",\n\t\t\t\tobjectWorkspace: {\n\t\t\t\t\tsortFields: [],\n\t\t\t\t\tfilterConditions: [],\n\t\t\t\t\tfrozenColumnID: \"\",\n\t\t\t\t\thiddenFields: [],\n\t\t\t\t},\n\t\t\t\tisSystemObject: 0,\n\t\t\t\ttranslations: [{ language_code: \"en\", label: \"Person - PWA\" }],\n\t\t\t\tfieldIDs: [\n\t\t\t\t\t\"c6268631-bc80-4a72-a3f2-55e5721f47a2\",\n\t\t\t\t\t\"657ca7ef-75ce-4b07-a7d5-5b95ad775767\",\n\t\t\t\t\t\"3a212114-385d-40bf-bf7e-a24b7da0c7e7\",\n\t\t\t\t\t\"2d08298f-cfda-44d2-aa19-683316f578a9\",\n\t\t\t\t\t\"4998a2eb-b04b-4a8b-9d1d-f3d839c9e920\",\n\t\t\t\t\t\"b83daff6-8624-469b-9a30-d02f68be9e29\",\n\t\t\t\t\t\"2bfc9604-8011-41ef-9985-a22de0258413\",\n\t\t\t\t\t\"032f3208-4ae8-400e-8bbe-3edde4dae5d7\",\n\t\t\t\t\t\"0b52730f-1e1e-476a-95ef-2824ed87da13\",\n\t\t\t\t],\n\t\t\t\timportedFieldIDs: [],\n\t\t\t\tindexIDs: [],\n\t\t\t\tcreatedInAppID: \"4b7a489a-5fe5-4044-8565-aaa3654300f2\",\n\t\t\t\tobjectWorkspaceViews: {\n\t\t\t\t\tcurrentViewID: \"bdcf1b76-9684-4349-8a07-588da87287cf\",\n\t\t\t\t\tlist: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: \"bdcf1b76-9684-4349-8a07-588da87287cf\",\n\t\t\t\t\t\t\ttranslations: [\n\t\t\t\t\t\t\t\t{ language_code: \"en\", label: \"grid\" },\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\tisDefaultView: true,\n\t\t\t\t\t\t\tname: \"Default Grid\",\n\t\t\t\t\t\t\tsortFields: [],\n\t\t\t\t\t\t\tfilterConditions: [],\n\t\t\t\t\t\t\tfrozenColumnID: \"\",\n\t\t\t\t\t\t\thiddenFields: [\"salt\", \"password\"],\n\t\t\t\t\t\t\ttype: \"grid\",\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t},\n\t\t\tcreatedAt: \"2023-05-18T09:56:18.000Z\",\n\t\t\tupdatedAt: \"2023-05-18T10:06:58.000Z\",\n\t\t},\n\t\t{\n\t\t\tid: \"c6268631-bc80-4a72-a3f2-55e5721f47a2\",\n\t\t\tname: \"Person - PWA->Name\",\n\t\t\ttype: \"field\",\n\t\t\tjson: {\n\t\t\t\tid: \"c6268631-bc80-4a72-a3f2-55e5721f47a2\",\n\t\t\t\ttype: \"field\",\n\t\t\t\tkey: \"string\",\n\t\t\t\ticon: \"font\",\n\t\t\t\tisImported: 0,\n\t\t\t\tcolumnName: \"Name\",\n\t\t\t\tsettings: {\n\t\t\t\t\tshowIcon: 1,\n\t\t\t\t\trequired: 0,\n\t\t\t\t\tunique: 0,\n\t\t\t\t\tvalidationRules: \"[]\",\n\t\t\t\t\tdefault: \"\",\n\t\t\t\t\tsupportMultilingual: 0,\n\t\t\t\t\twidth: 100,\n\t\t\t\t},\n\t\t\t\ttranslations: [{ language_code: \"en\", label: \"Name\" }],\n\t\t\t},\n\t\t\tcreatedAt: \"2023-05-18T09:56:32.000Z\",\n\t\t\tupdatedAt: \"2023-05-18T09:56:32.000Z\",\n\t\t},\n\t\t{\n\t\t\tid: \"657ca7ef-75ce-4b07-a7d5-5b95ad775767\",\n\t\t\tname: \"Person - PWA->Email\",\n\t\t\ttype: \"field\",\n\t\t\tjson: {\n\t\t\t\tid: \"657ca7ef-75ce-4b07-a7d5-5b95ad775767\",\n\t\t\t\ttype: \"field\",\n\t\t\t\tkey: \"email\",\n\t\t\t\ticon: \"envelope\",\n\t\t\t\tisImported: 0,\n\t\t\t\tcolumnName: \"Email\",\n\t\t\t\tsettings: {\n\t\t\t\t\tshowIcon: 1,\n\t\t\t\t\trequired: 0,\n\t\t\t\t\tunique: 0,\n\t\t\t\t\tvalidationRules: \"[]\",\n\t\t\t\t\tdefault: \"\",\n\t\t\t\t\twidth: 100,\n\t\t\t\t\tdefaultCheckbox: 0,\n\t\t\t\t},\n\t\t\t\ttranslations: [{ language_code: \"en\", label: \"Email\" }],\n\t\t\t},\n\t\t\tcreatedAt: \"2023-05-18T09:56:40.000Z\",\n\t\t\tupdatedAt: \"2023-05-18T09:56:40.000Z\",\n\t\t},\n\t\t{\n\t\t\tid: \"3a212114-385d-40bf-bf7e-a24b7da0c7e7\",\n\t\t\tname: \"Person - PWA->URL\",\n\t\t\ttype: \"field\",\n\t\t\tjson: {\n\t\t\t\tid: \"3a212114-385d-40bf-bf7e-a24b7da0c7e7\",\n\t\t\t\ttype: \"field\",\n\t\t\t\tkey: \"string\",\n\t\t\t\ticon: \"font\",\n\t\t\t\tisImported: 0,\n\t\t\t\tcolumnName: \"URL\",\n\t\t\t\tsettings: {\n\t\t\t\t\tshowIcon: 1,\n\t\t\t\t\trequired: 0,\n\t\t\t\t\tunique: 0,\n\t\t\t\t\tvalidationRules: \"[]\",\n\t\t\t\t\tdefault: \"\",\n\t\t\t\t\tsupportMultilingual: 0,\n\t\t\t\t\twidth: 100,\n\t\t\t\t},\n\t\t\t\ttranslations: [{ language_code: \"en\", label: \"URL\" }],\n\t\t\t},\n\t\t\tcreatedAt: \"2023-05-18T09:56:59.000Z\",\n\t\t\tupdatedAt: \"2023-05-18T09:56:59.000Z\",\n\t\t},\n\t\t{\n\t\t\tid: \"2d08298f-cfda-44d2-aa19-683316f578a9\",\n\t\t\tname: \"Person - PWA->Phone\",\n\t\t\ttype: \"field\",\n\t\t\tjson: {\n\t\t\t\tid: \"2d08298f-cfda-44d2-aa19-683316f578a9\",\n\t\t\t\ttype: \"field\",\n\t\t\t\tkey: \"string\",\n\t\t\t\ticon: \"font\",\n\t\t\t\tisImported: 0,\n\t\t\t\tcolumnName: \"Phone\",\n\t\t\t\tsettings: {\n\t\t\t\t\tshowIcon: 1,\n\t\t\t\t\trequired: 0,\n\t\t\t\t\tunique: 0,\n\t\t\t\t\tvalidationRules: \"[]\",\n\t\t\t\t\tdefault: \"\",\n\t\t\t\t\tsupportMultilingual: 0,\n\t\t\t\t\twidth: 100,\n\t\t\t\t},\n\t\t\t\ttranslations: [{ language_code: \"en\", label: \"Phone\" }],\n\t\t\t},\n\t\t\tcreatedAt: \"2023-05-18T09:57:25.000Z\",\n\t\t\tupdatedAt: \"2023-05-18T09:57:25.000Z\",\n\t\t},\n\t\t{\n\t\t\tid: \"4998a2eb-b04b-4a8b-9d1d-f3d839c9e920\",\n\t\t\tname: \"Person - PWA->Gender\",\n\t\t\ttype: \"field\",\n\t\t\tjson: {\n\t\t\t\tid: \"4998a2eb-b04b-4a8b-9d1d-f3d839c9e920\",\n\t\t\t\ttype: \"field\",\n\t\t\t\tkey: \"list\",\n\t\t\t\ticon: \"th-list\",\n\t\t\t\tisImported: 0,\n\t\t\t\tcolumnName: \"Gender\",\n\t\t\t\tsettings: {\n\t\t\t\t\tshowIcon: 1,\n\t\t\t\t\trequired: 0,\n\t\t\t\t\tunique: 0,\n\t\t\t\t\tvalidationRules: \"[]\",\n\t\t\t\t\tisMultiple: 0,\n\t\t\t\t\thasColors: 1,\n\t\t\t\t\tdefault: \"1684401575798\",\n\t\t\t\t\tmultipleDefault: [],\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: \"Male\",\n\t\t\t\t\t\t\ttext: \"Male\",\n\t\t\t\t\t\t\thex: \"#03A9F4\",\n\t\t\t\t\t\t\ttranslations: [\n\t\t\t\t\t\t\t\t{ language_code: \"en\", text: \"Male\" },\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: \"Female\",\n\t\t\t\t\t\t\ttext: \"Female\",\n\t\t\t\t\t\t\thex: \"#E91E63\",\n\t\t\t\t\t\t\ttranslations: [\n\t\t\t\t\t\t\t\t{ language_code: \"en\", text: \"Female\" },\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\twidth: 100,\n\t\t\t\t},\n\t\t\t\ttranslations: [{ language_code: \"en\", label: \"Gender\" }],\n\t\t\t},\n\t\t\tcreatedAt: \"2023-05-18T09:58:24.000Z\",\n\t\t\tupdatedAt: \"2023-05-18T10:08:39.000Z\",\n\t\t},\n\t\t{\n\t\t\tid: \"b83daff6-8624-469b-9a30-d02f68be9e29\",\n\t\t\tname: \"Person - PWA->Birthday\",\n\t\t\ttype: \"field\",\n\t\t\tjson: {\n\t\t\t\tid: \"b83daff6-8624-469b-9a30-d02f68be9e29\",\n\t\t\t\ttype: \"field\",\n\t\t\t\tkey: \"date\",\n\t\t\t\ticon: \"calendar\",\n\t\t\t\tisImported: 0,\n\t\t\t\tcolumnName: \"Birthday\",\n\t\t\t\tsettings: {\n\t\t\t\t\tshowIcon: 1,\n\t\t\t\t\trequired: 0,\n\t\t\t\t\tunique: 0,\n\t\t\t\t\tvalidationRules: \"[]\",\n\t\t\t\t\tdateFormat: 2,\n\t\t\t\t\tdefaultDate: 1,\n\t\t\t\t\tdefaultDateValue: null,\n\t\t\t\t\tvalidateCondition: \"none\",\n\t\t\t\t\tvalidateRangeUnit: \"\",\n\t\t\t\t\tvalidateRangeBefore: 0,\n\t\t\t\t\tvalidateRangeAfter: 0,\n\t\t\t\t\tvalidateStartDate: null,\n\t\t\t\t\tvalidateEndDate: null,\n\t\t\t\t\twidth: 120,\n\t\t\t\t\ttimeFormat: 2,\n\t\t\t\t\tdefaultTime: 1,\n\t\t\t\t\tdefaultTimeValue: null,\n\t\t\t\t},\n\t\t\t\ttranslations: [{ language_code: \"en\", label: \"Birthday\" }],\n\t\t\t},\n\t\t\tcreatedAt: \"2023-05-18T09:58:55.000Z\",\n\t\t\tupdatedAt: \"2023-05-18T09:58:55.000Z\",\n\t\t},\n\t\t{\n\t\t\tid: \"2bfc9604-8011-41ef-9985-a22de0258413\",\n\t\t\tname: \"Person - PWA->Toggle\",\n\t\t\ttype: \"field\",\n\t\t\tjson: {\n\t\t\t\tid: \"2bfc9604-8011-41ef-9985-a22de0258413\",\n\t\t\t\ttype: \"field\",\n\t\t\t\tkey: \"boolean\",\n\t\t\t\ticon: \"check-square-o\",\n\t\t\t\tisImported: 0,\n\t\t\t\tcolumnName: \"Toggle\",\n\t\t\t\tsettings: {\n\t\t\t\t\tshowIcon: 1,\n\t\t\t\t\trequired: 0,\n\t\t\t\t\tunique: 0,\n\t\t\t\t\tvalidationRules: \"[]\",\n\t\t\t\t\tdefault: 0,\n\t\t\t\t\twidth: 100,\n\t\t\t\t},\n\t\t\t\ttranslations: [{ language_code: \"en\", label: \"Toggle\" }],\n\t\t\t},\n\t\t\tcreatedAt: \"2023-05-18T09:59:14.000Z\",\n\t\t\tupdatedAt: \"2023-05-18T09:59:14.000Z\",\n\t\t},\n\t\t{\n\t\t\tid: \"032f3208-4ae8-400e-8bbe-3edde4dae5d7\",\n\t\t\tname: \"Person - PWA->Slider\",\n\t\t\ttype: \"field\",\n\t\t\tjson: {\n\t\t\t\tid: \"032f3208-4ae8-400e-8bbe-3edde4dae5d7\",\n\t\t\t\ttype: \"field\",\n\t\t\t\tkey: \"number\",\n\t\t\t\ticon: \"hashtag\",\n\t\t\t\tisImported: 0,\n\t\t\t\tcolumnName: \"Slider\",\n\t\t\t\tsettings: {\n\t\t\t\t\tshowIcon: 1,\n\t\t\t\t\trequired: 0,\n\t\t\t\t\tunique: 0,\n\t\t\t\t\tvalidationRules: \"[]\",\n\t\t\t\t\tdefault: \"50\",\n\t\t\t\t\ttypeFormat: \"none\",\n\t\t\t\t\ttypeDecimals: \"none\",\n\t\t\t\t\ttypeDecimalPlaces: 0,\n\t\t\t\t\ttypeRounding: \"none\",\n\t\t\t\t\ttypeThousands: \"none\",\n\t\t\t\t\tvalidation: 0,\n\t\t\t\t\tvalidateMinimum: \"\",\n\t\t\t\t\tvalidateMaximum: \"\",\n\t\t\t\t\twidth: 100,\n\t\t\t\t},\n\t\t\t\ttranslations: [{ language_code: \"en\", label: \"Slider\" }],\n\t\t\t},\n\t\t\tcreatedAt: \"2023-05-18T09:59:51.000Z\",\n\t\t\tupdatedAt: \"2023-05-18T09:59:51.000Z\",\n\t\t},\n\t\t{\n\t\t\tid: \"0b52730f-1e1e-476a-95ef-2824ed87da13\",\n\t\t\tname: \"Person - PWA->Bio\",\n\t\t\ttype: \"field\",\n\t\t\tjson: {\n\t\t\t\tid: \"0b52730f-1e1e-476a-95ef-2824ed87da13\",\n\t\t\t\ttype: \"field\",\n\t\t\t\tkey: \"LongText\",\n\t\t\t\ticon: \"align-right\",\n\t\t\t\tisImported: 0,\n\t\t\t\tcolumnName: \"Bio\",\n\t\t\t\tsettings: {\n\t\t\t\t\tshowIcon: 1,\n\t\t\t\t\trequired: 0,\n\t\t\t\t\tunique: 0,\n\t\t\t\t\tvalidationRules: \"[]\",\n\t\t\t\t\tdefault: \"\",\n\t\t\t\t\tsupportMultilingual: 0,\n\t\t\t\t\twidth: 100,\n\t\t\t\t},\n\t\t\t\ttranslations: [{ language_code: \"en\", label: \"Bio\" }],\n\t\t\t},\n\t\t\tcreatedAt: \"2023-05-18T10:06:57.000Z\",\n\t\t\tupdatedAt: \"2023-05-18T10:06:57.000Z\",\n\t\t},\n\t\t{\n\t\t\tid: \"0e9f5f6f-cd0b-4b93-b0c8-d51bd9852322\",\n\t\t\tname: \"Person\",\n\t\t\ttype: \"datacollection\",\n\t\t\tjson: {\n\t\t\t\tid: \"0e9f5f6f-cd0b-4b93-b0c8-d51bd9852322\",\n\t\t\t\tname: \"Person\",\n\t\t\t\ttype: \"datacollection\",\n\t\t\t\tsettings: {\n\t\t\t\t\tlinkDatacollectionID: \"\",\n\t\t\t\t\tlinkFieldID: \"\",\n\t\t\t\t\tfollowDatacollectionID: \"\",\n\t\t\t\t\tobjectWorkspace: {\n\t\t\t\t\t\tfilterConditions: { glue: \"and\", rules: [] },\n\t\t\t\t\t\tsortFields: [],\n\t\t\t\t\t},\n\t\t\t\t\tloadAll: false,\n\t\t\t\t\tisQuery: false,\n\t\t\t\t\tpopulate: true,\n\t\t\t\t\tsyncType: 1,\n\t\t\t\t\tdatasourceID: \"faa9905e-dea8-4c7f-8eb4-98f1e6e66506\",\n\t\t\t\t},\n\t\t\t\ttranslations: [{ language_code: \"en\", label: \"Person\" }],\n\t\t\t},\n\t\t\tcreatedAt: \"2023-05-18T10:18:01.000Z\",\n\t\t\tupdatedAt: \"2023-05-18T10:18:01.000Z\",\n\t\t},\n\t],\n\tsiteObjectConnections: {},\n\troles: [],\n};\n","// var EventEmitter = require(\"events\").EventEmitter;\n// import { EventEmitter } from \"events\";\nimport EventEmitter from \"../AppBuilder/platform/ABEmitter\";\n\nclass Account extends EventEmitter {\n   constructor() {\n      super();\n\n      this.isAuthenticated = false;\n      this._config = null;\n\n      this._listRoles = null;\n      // {array}\n      // a list of all the Defined Roles in the Tenant's system.\n\n      this._listScopes = null;\n      // {array | null}\n      // a list of all the Defined Scopes in the Tenant's sytem.\n\n      this._listUsers = null;\n      // {array | null}\n      // a list of all the Defined Users in the Tenant's system.\n   }\n\n   init(AB) {\n      // {ABFactory} AB\n\n      this.AB = AB;\n      var UserConfig = this.AB.Config.userConfig();\n      if (UserConfig) {\n         this.isAuthenticated = true;\n         this._config = UserConfig;\n      }\n\n      var MetaConfig = this.AB.Config.metaConfig();\n      if (MetaConfig) {\n         this._listRoles = MetaConfig.roles || [];\n         this._listScopes = MetaConfig.scopes || [];\n         this._listUsers = MetaConfig.users || [];\n      }\n\n      this.AB.Network.on(\"account.logout\", (context, err, data) => {\n         if (err) {\n            console.error(err);\n            return;\n         }\n         this.emit(\"logout\", data);\n      });\n\n      return Promise.resolve();\n   }\n\n   canSwitcheroo() {\n      return (\n         this.roles((r) => r.uuid === \"320ef94a-73b5-476e-9db4-c08130c64bb8\")\n            .length > 0\n      );\n   }\n\n   isSwitcherood() {\n      return this.AB.Config.userReal();\n   }\n\n   isSystemDesigner() {\n      return (\n         this.roles((r) => r.uuid === \"6cc04894-a61b-4fb5-b3e5-b8c3f78bd331\")\n            .length > 0\n      );\n   }\n\n   email() {\n      return this._config?.email ?? \"\";\n   }\n\n   language() {\n      return this._config?.languageCode ?? \"en\";\n   }\n\n   logout() {\n      return this.AB.Network.post(\n         {\n            url: \"/auth/logout\",\n            data: { tenantUrl: this.AB.Tenant.setting(\"url\") },\n         },\n         {\n            key: \"account.logout\",\n            context: {},\n         }\n      );\n   }\n\n   roles(fn = () => true) {\n      return (this._config?.roles || []).filter(fn);\n   }\n   rolesAll() {\n      return this._listRoles;\n   }\n\n   scopes() {\n      return this._listScopes;\n   }\n\n   username() {\n      return this._config?.username;\n   }\n\n   userList() {\n      return this._listUsers;\n   }\n\n   uuid() {\n      return this._config?.uuid;\n   }\n\n   imageID() {\n      return this._config?.image_id;\n   }\n\n   sendEmailNotifications() {\n      return this._config?.sendEmailNotifications;\n   }\n}\n\nexport default new Account();\n","// import ConfigDesktop from \"./configDesktop\";\n// import ConfigMobile from \"./configMobile\";\n\n// var EventEmitter = require(\"events\").EventEmitter;\nimport { defaultsDeep } from \"lodash\";\n\nconst settingsDefault = {\n   \"appbuilder-portal-autoenter\": true,\n   // {bool} autoenter\n   // open up the portal as soon as we load.\n   //   false : just displays a link that will load the portal\n\n   \"appbuilder-portal-fullscreen\": true,\n   // {bool} fullscreen\n   // take up the full browser window?\n   //   false : only take up the area the current div is\n\n   \"appbuilder-tenant\": null,\n   // {string} tenant\n   // the tenant uuid for this AppBuilder instance.\n\n   \"appbuilder-view\": \"work\",\n   // {string} view\n   // the default view to display to the current user.\n\n   \"appbuilder-tenant-prefix\": null,\n   // TESTING! Remove this\n};\n\nconst configDefaults = {\n   site: {\n      appbuilder: {\n         networkType: \"rest\", // \"socket\",\n         // options: [\"rest\", \"relay\", \"socket\"]\n         // Note: \"socket\" is required for realtime updates across devices.\n\n         networkNumRetries: 3,\n         // the number of times we will retry sending a network request\n         // when we receive a timeout error.\n\n         urlCoreServer: window.location.origin,\n         // on the web client, just record the current URL by default.\n         // the site config can override this if they want.\n      },\n      storage: {\n         encrypted: false,\n         // {bool} should we encrypt our data in the local browser storage?\n      },\n   },\n};\nclass Config {\n   constructor() {\n      // this.setMaxListeners(0);\n      this._config = null;\n      // {obj} _config\n      // these are the configuration settings returned from the server. These\n      // are more detailed configuration settings for the running of the site.\n\n      this._settings = {};\n      // {obj} _settings\n      // settings are the configuration parameters found on the base <div>\n      // these settings are the minimum needed to successfully pull up the\n      // portal popup and perform the initial config request\n   }\n\n   config(json) {\n      this._config = json;\n      defaultsDeep(this._config, configDefaults);\n   }\n\n   setting(key, value) {\n      if (value) {\n         this._settings[key] = value;\n         return;\n      }\n      return this._settings[key];\n   }\n\n   settingsFromDiv(div) {\n      Object.keys(settingsDefault).forEach((d) => {\n         var val = div.getAttribute(d);\n         if (!val) {\n            val = settingsDefault[d];\n         }\n         if (val === \"false\") val = false;\n         if (val === \"true\") val = true;\n\n         var key = d.split(\"-\").pop();\n         this.setting(key, val);\n      });\n   }\n\n   settings(json = {}) {\n      for (let key in settingsDefault) {\n         const val = json[key] ?? settingsDefault[key];\n         this.setting(key.split(\"-\").pop(), val);\n      }\n   }\n\n   /**\n    * definitions()\n    * return the ABDefinition(s) required to manage the interface.\n    * @return {obj}\n    *          { ABDefinition.id : {ABDefinition} }  hash of definitions.\n    */\n   definitions() {\n      debugger;\n      return window.definitions;\n   }\n\n   error(/* ...args */) {\n      console.error(\"Who is calling this? -> move to AB.error() instead.\");\n      // this.emit(\"ab.error\", args);\n   }\n\n   labelConfig() {\n      if (this._config && this._config.labels) {\n         return this._config.labels;\n      }\n      console.error(\"No Label config found.\");\n      return {};\n   }\n\n   languageConfig() {\n      if (this._config && this._config.languages) {\n         return this._config.languages;\n      }\n      console.error(\"No Language config found.\");\n      return {};\n   }\n\n   metaConfig() {\n      if (this._config && this._config.meta) {\n         return this._config.meta;\n      }\n      console.error(\"No Meta config found.\");\n      return {};\n   }\n\n   plugins() {\n      // TODO: Pull from this._config.plugins\n      return [\"ABDesigner.js\"];\n      // return [];\n   }\n\n   inboxConfig() {\n      if (this._config && this._config.inbox) {\n         return this._config.inbox;\n      }\n      return null;\n   }\n\n   inboxMetaConfig() {\n      if (this._config && this._config.inboxMeta) {\n         return this._config.inboxMeta;\n      }\n      return null;\n   }\n\n   siteConfig() {\n      if (this._config && this._config.site) {\n         return this._config.site;\n      }\n      return configDefaults.site;\n   }\n\n   tenantConfig() {\n      if (this._config && this._config.tenant) {\n         return this._config.tenant;\n      }\n      return null;\n   }\n\n   uiSettings() {\n      if (window.innerWidth < 768) {\n         return ConfigMobile;\n      }\n      return ConfigDesktop;\n   }\n\n   userConfig() {\n      if (this._config && this._config.user) {\n         return this._config.user;\n      }\n      return null;\n   }\n\n   userReal() {\n      return this._config?.userReal ?? false;\n   }\n}\nexport default new Config();\n","/*\n * Multilingual\n * manage our multilingual Translations/Labels/etc.\n */\n\nimport MLClass from \"../AppBuilder/platform/ABMLClass\";\n\nclass Multilingual extends MLClass {\n   constructor() {\n      super([], {});\n      // super()\n      //    [] = no labels\n      //    {} = placeholder ABFactory entry until .init() is called.\n\n      this.isAuthenticated = false;\n      this._config = null;\n\n      this._missingLabelID = false;\n      this._missingLabels = {};\n      this._pluginLabelsMissing = {};\n   }\n\n   init(AB) {\n      // {ABFactory} AB\n\n      this.AB = AB;\n\n      this.labels = this.AB.Config.labelConfig();\n      this._languages = this.AB.Config.languageConfig();\n\n      this.pluginLabels = {};\n\n      // this isn't actually an Async operation, so just resolve()\n      return Promise.resolve();\n   }\n\n   currentLanguage() {\n      return this.AB.Account.language();\n   }\n\n   label(key, altText, values = [], postMissing = true) {\n      // part of our transition: L(\"single string\") should start to work:\n      if (typeof altText == \"undefined\" && key) {\n         altText = key;\n      }\n\n      // other case: L(\"single string {0}\", [])\n      if (arguments.length == 2 && Array.isArray(altText)) {\n         values = altText;\n         altText = key;\n      }\n\n      // We need to escape \" characters or else they will get added to the the lang.js\n      // then we get errors next time we try to parse it as JSON (see appbuilder.label-missing)\n      altText = altText.replace(/\"/g, '\\\\\"');\n      key = key.replace(/\"/g, '\\\\\"');\n\n      // NOTE: transition to new Labels\n      // currently our code still uses the L(key, altText, values) format, but\n      // the labels we get back are in L(altText, values) format.\n      //\n      // we are going to keep this like this until we have a well functioning\n      // UI display of our Apps, which should flesh out most of the missing\n      // labels to our files.\n      //\n      // After that, convert our L(k, t, v) to L(t, v)\n\n      var newKey = altText;\n      if (newKey[0] == \"*\") {\n         newKey = newKey.slice(1);\n      }\n      var label = this.labels[newKey];\n      if (!label) {\n         if (postMissing) {\n            this.postMissingLabel(key, altText);\n         }\n         label = altText;\n      }\n\n      values.forEach((v, i) => {\n         var sub = `{${i}}`;\n         label = label.replaceAll(sub, v);\n      });\n      label = label.replace(/\\\\\"/g, '\"'); // unescape \" in the label\n      return label;\n   }\n\n   labelPlugin(plugin, altText, values = []) {\n      // 1st check to see if it is a common label from platform:\n      var label = this.label(altText, altText, values, false);\n      if (!label) {\n         // ok, so check to see if it is a Plugin Label:\n         label = this.pluginLabels[plugin][altText];\n      }\n      if (!label) {\n         // !! record it missing.\n         this._pluginLabelsMissing[plugin] =\n            this._pluginLabelsMissing[plugin] || {};\n         this._pluginLabelsMissing[plugin][altText] = altText;\n         label = altText;\n      }\n      values.forEach((v, i) => {\n         var sub = `{${i}}`;\n         label = label.replaceAll(sub, v);\n      });\n      return label;\n   }\n\n   languages() {\n      return this._languages;\n\n      // console.error(\n      //    \"Multilingual:languages(): Implement Language Storage/Retrieval.\"\n      // );\n      // return [];\n   }\n\n   pluginLoadLabels(key, labels) {\n      this.pluginLabels[key] = labels;\n   }\n   pluginLabelReport(key) {\n      console.warn(\"missing labels for plugin: \", key);\n      console.warn(\"current language:\", this.currentLanguage());\n      var labels = JSON.stringify(this._pluginLabelsMissing[key], null, 3);\n      console.warn(labels);\n   }\n\n   postMissingLabel(key, altText) {\n      if (this._missingLabelID) {\n         clearTimeout(this._missingLabelID);\n      }\n      var batchLength = 50;\n      var sendBatch = () => {\n         var batchLabels = [];\n         let missingLabels = Object.keys(this._missingLabels).map(\n            (k) => this._missingLabels[k]\n         );\n         if (missingLabels.length <= batchLength) {\n            batchLabels = missingLabels;\n            this._missingLabels = {};\n         } else {\n            for (var i = 0; i <= batchLength; i++) {\n               var l = missingLabels.shift();\n               batchLabels.push(l);\n               delete this._missingLabels[l.key];\n            }\n         }\n         this.AB.Network.post({\n            url: \"/multilingual/label-missing\",\n            data: { labels: JSON.stringify(batchLabels) },\n         })\n            .then(() => {\n               if (Object.keys(this._missingLabels).length > 0) {\n                  sendBatch();\n               }\n            })\n            .catch((err) => {\n               const strErr = err.toString();\n               if (strErr.indexOf(\"unable to get\") > -1) {\n                  console.error(\n                     \"Missing language file for :\" + this.currentLanguage()\n                  );\n               }\n            });\n      };\n      this._missingLabelID = setTimeout(() => {\n         sendBatch();\n      }, 1000);\n\n      this._missingLabels[key] = { key, altText };\n   }\n   ///\n   /// Disable un-needed ABMLClass functionality\n   ///\n   /// NOTE: we are mainly Piggybacking on ABMLClass for it's\n   /// .translate() and .unTranslate() capabilities. So disable these\n   /// for good measure.\n   destroy() {\n      console.error(\"Multilingual:destroy(): Should not be called.\");\n      return Promise.resolve();\n   }\n   save() {\n      console.error(\"Multilingual:save(): Should not be called.\");\n      return Promise.resolve();\n   }\n   toObj() {\n      console.error(\"Multilingual:toObj(): Should not be called.\");\n      return {};\n   }\n   toDefinition() {\n      console.error(\"Multilingual:toDefinition(): Should not be called.\");\n      return {};\n   }\n}\n\nexport default new Multilingual();\n","/*\n * Network.js\n * A network manager for interfacing with our AppBuilder server.\n */\nimport EventEmitter from \"../AppBuilder/platform/ABEmitter\";\nimport NetworkRest from \"./NetworkRest\";\nimport NetworkRestSocket from \"./NetworkRestSocket\";\n// import NetworkRelay from \"./NetworkRelay\";\n\nclass Network extends EventEmitter {\n   constructor() {\n      super();\n\n      this.setMaxListeners(0);\n      // we'll have > 10 for sure!\n\n      this.queueLock = null;\n      // {Lock} .queueLock\n      // our semaphore for coordinating our access to our local storage.\n\n      this._config = null;\n      this._network = null;\n      // {NetworkRelay | NetworkRest | NetworkSocket}\n      // the underlying Network connection object actually performing the\n      // communications with the Server.\n      // Which one is specified in the config.appbuilder.networkType setting\n\n      this._queueCount = 0;\n      // {int} _queueCount\n      // the # of network operations currently queued, pending Network\n      // reconnect.\n   }\n\n   init(AB) {\n      // {ABFactory} AB\n\n      this.AB = AB;\n\n      this.queueLock = new this.AB.Lock();\n\n      this._config = this.AB.Config.siteConfig();\n      if (this._config) {\n         switch (this._config.appbuilder.networkType) {\n            case \"relay\":\n               // this._network = new NetworkRelay();\n               break;\n\n            case \"socket\":\n               this._network = new NetworkRestSocket(this);\n               break;\n\n            case \"rest\":\n            default:\n               this._network = new NetworkRest(this);\n               break;\n         }\n\n         return this._network.init(AB);\n      } else {\n         console.error(\"??? Why No site config ???\");\n      }\n\n      //\n      // Handle reconnections and flushing the Queue:\n      //\n      if (io && io.socket) {\n         // When our Socket reconnects, be sure to flush any pending transactions.\n         io.socket.on(\"connected\", () => {\n            this.queueFlush();\n            if (this.idConnectionCheck) {\n               clearTimeout(this.idConnectionCheck);\n               this.idConnectionCheck = null;\n            }\n         });\n      } else {\n         console.error(\"!!! Network.init() : Did not find io.socket\");\n         window.addEventListener(\"online\", () => this.queueFlush());\n      }\n\n      return Promise.resolve();\n   }\n\n   //\n   // Interface API\n   //\n   /**\n    * Network.isRealTime\n    * indicates wether or not the current network connection supports\n    * RealTime updates.\n    * @return {bool}\n    */\n   get isRealTime() {\n      return this._network.isRealTime;\n   }\n\n   /**\n    * Network.get(options, jobResponse)\n    * perform a GET request back to the AppBuilder server.\n    * @param {obj} params the request parameters that need to be executed on\n    *              the AppBuilder Server\n    * @param {obj} jobResponse the callback info for handling the response.\n    *              {\n    *                  key:'unique.key',\n    *                  context:{ obj data }\n    *              }\n    * @return {Promise}\n    */\n   get(...params) {\n      return this._network.get(...params).then((data) => {\n         return this.normalizeData(data);\n      });\n   }\n\n   /**\n    * Network.post()\n    * perform an AJAX POST request to the AppBuilder server.\n    * this is a CREATE operation.\n    * @param {obj} params the request parameters that need to be executed on\n    *              the AppBuilder Server\n    * @param {obj} jobResponse the callback info for handling the response.\n    *              {\n    *                  key:'unique.key',\n    *                  context:{ obj data }\n    *              }\n    * @return {Promise}\n    */\n   post(...params) {\n      return this._network.post(...params).then((data) => {\n         return this.normalizeData(data);\n      });\n   }\n\n   /**\n    * Network.put()\n    * perform a PUT request to the AppBuilder server.\n    * This is for UPDATE/REPLACE operations to data on the server.\n    * @param {obj} params the request parameters that need to be executed on\n    *              the AppBuilder Server\n    * @param {obj} jobResponse the callback info for handling the response.\n    *              {\n    *                  key:'unique.key',\n    *                  context:{ obj data }\n    *              }\n    * @return {Promise}\n    */\n   put(...params) {\n      return this._network.put(...params).then((data) => {\n         return this.normalizeData(data);\n      });\n   }\n\n   /**\n    * Network.delete()\n    * perform an AJAX DELETE request to the AppBuilder server.\n    * @param {obj} params the request parameters that need to be executed on\n    *              the AppBuilder Server\n    * @param {obj} jobResponse the callback info for handling the response.\n    *              {\n    *                  key:'unique.key',\n    *                  context:{ obj data }\n    *              }\n    * @return {Promise}\n    */\n   delete(...params) {\n      return this._network.delete(...params).then((data) => {\n         return this.normalizeData(data);\n      });\n   }\n\n   ////\n   //// Network Utilities\n   ////\n\n   _connectionCheck() {\n      // if (!this.idConnectionCheck) {\n      if (this.isNetworkConnected()) {\n         this.queueFlush().catch(() => {\n            // on an error, we are still having connection issues\n            this.idConnectionCheck = setTimeout(() => {\n               this._connectionCheck();\n            }, 250);\n         });\n         this.idConnectionCheck = null;\n      } else {\n         this.idConnectionCheck = setTimeout(() => {\n            this._connectionCheck();\n         }, 250);\n      }\n      // }\n   }\n\n   /**\n    * @method networkStatus\n    * return the connection type currently registered with the network\n    * plugin.\n    * @return {string}\n    */\n   networkStatus() {\n      return navigator.connection.type;\n   }\n\n   /**\n    * @method isNetworkConnected\n    * return true/false if the device is currently connected to the\n    * internet.\n    * @return {bool}\n    */\n   isNetworkConnected() {\n      console.log(\n         \"TODO: Network.isNetworkConnected(): replace online check to expected order.\"\n      );\n      // if this isn't a Cordova Plugin, then return navigator data:\n      if (typeof Connection == \"undefined\") {\n         // NOTE: this technically only detects if we are connected to a\n         // network.  It doesn't guarantee we can communicate across the 'net\n         return navigator.onLine;\n      }\n\n      // if this is a Web Client and using sails.socket.io\n      if (io && io.socket && io.socket.isConnected) {\n         return io.socket.isConnected();\n      }\n\n      // if this isn't a Cordova Plugin, then return navigator data:\n      if (typeof Connection == \"undefined\") {\n         // NOTE: this technically only detects if we are connected to a\n         // network.  It doesn't guarantee we can communicate across the 'net\n         return navigator.onLine;\n      }\n\n      // Cordova Plugin:\n      return this.networkStatus() != Connection.NONE;\n   }\n\n   /**\n    * publishResponse()\n    * emit the requested response for this network operation.\n    * @param {obj} jobResponse\n    * @param {obj} error\n    * @param {obj} data\n    */\n   publishResponse(jobResponse, error, data) {\n      if (data) {\n         data = this.normalizeData(data);\n      }\n      this.emit(jobResponse.key, jobResponse.context, error, data);\n   }\n\n   normalizeData(data) {\n      // Data returning from our server is wrapped in an outer layer of\n      // information that is for our Networking API.\n      // the outer wrapper should be:\n      // on success :\n      // {\n      //   status: \"success\",\n      //   data:{Data For App}\n      // }\n      // on Error:\n      // {\n      //   status: \"error\",\n      //   id: {int} error code\n      //   ... other data here\n      // }\n\n      // we have physically received a data packet from the server,\n      // but we are informed that our transaction was problematic\n      // (400 level USER problem?)\n      if (data.status === \"error\") {\n         // TODO: review Error procedure here\n         return data;\n      }\n\n      // on success\n      // make sure we return the Application Level Data packet:\n      return data.data || data;\n   }\n\n   ////\n   //// Queued Requests\n   ////\n\n   /**\n    * refQueue()\n    * sub classes can override this for their own separate Queue Data\n    * @return {string}\n    */\n   refQueue() {\n      return \"networkQueue\";\n   }\n\n   /**\n    * queueCount()\n    * return the # of messages in the queue.\n    * @return {int}\n    */\n   queueCount() {\n      return this._queueCount;\n   }\n\n   /**\n    * Adds a request to the outgoing queue.\n    *\n    * @param {object} data\n    * @param {object} jobResponse\n    * @return {Promise}\n    */\n   queue(data, jobResponse) {\n      var refQueue = this.refQueue();\n\n      return new Promise((resolve, reject) => {\n         this.queueLock\n            .acquire()\n            .then(() => {\n               return this.AB.Storage.get(refQueue);\n            })\n            .then((queue) => {\n               queue = queue || [];\n               queue.push({ data, jobResponse });\n               this.AB.log(\n                  `:::: ${queue.length} request${\n                     queue.length > 1 ? \"s\" : \"\"\n                  } queued`\n               );\n               this._queueCount = queue.length;\n               return this.AB.Storage.set(refQueue, queue);\n            })\n            .then(() => {\n               this.emit(\"queued\");\n               // if we are not already polling the network, start\n               if (!this.idConnectionCheck) {\n                  this._connectionCheck();\n               }\n               this.queueLock.release();\n               resolve();\n            })\n            .catch((err) => {\n               this.AB.notify.developer(err, {\n                  message: \"Error while queueing data\",\n               });\n               this.AB.Analytics.logError(err);\n               reject(err);\n\n               this.queueLock.release();\n            });\n      });\n   }\n\n   /**\n    * queueFlush()\n    * Flush the queue and send the contents to the relay server.\n    */\n   queueFlush() {\n      var refQueue = this.refQueue();\n\n      // if we are not connected, then stop\n      if (!this.isNetworkConnected()) {\n         var error = new Error(\"Not connected to the internet.\");\n         error.code = \"E_NOTCONNECTED\";\n         return Promise.reject(error);\n      }\n\n      // otherwise, attempt to flush the queue:\n      return new Promise((resolve, reject) => {\n         this.queueLock\n            .acquire()\n\n            //\n            // Get queue contents\n            //\n            .then(() => {\n               return this.AB.Storage.get(refQueue);\n            })\n\n            //\n            // Send off each queued request\n            //\n            .then((queue) => {\n               // default to [] if not found\n               queue = queue || [];\n\n               // recursively process each pending queue request\n               var processRequest = (cb) => {\n                  if (queue.length == 0) {\n                     cb();\n                  } else {\n                     var entry = queue.shift();\n                     var params = entry.data;\n                     var job = entry.jobResponse;\n                     this._network\n                        .resend(params, job)\n                        .then(() => {\n                           processRequest(cb);\n                        })\n                        .catch((err) => {\n                           // if the err was due to a network connection error\n                           if (err && err.code == \"E_TOMANYRETRIES\") {\n                              cb(err);\n                              return;\n                           }\n                           // otherwise, try the next\n                           processRequest(cb);\n                        });\n                  }\n               };\n\n               return new Promise((res, rej) => {\n                  processRequest((err) => {\n                     if (err) {\n                        rej(err);\n                     } else {\n                        res();\n                     }\n                  });\n               });\n            })\n\n            //\n            // Clear queue contents\n            //\n            .then(() => {\n               this._queueCount = 0;\n               return this.AB.Storage.set(refQueue, []);\n            })\n\n            // release the Lock\n            .then(() => {\n               this.emit(\"queue.synced\");\n               return this.queueLock.release();\n            })\n\n            // all done.\n            .then(() => {\n               resolve();\n            })\n\n            // respond to errors:\n            .catch((err) => {\n               this.AB.notify.developer(err, {\n                  message: \"commAPI queueFlush error\",\n               });\n               this.AB.Analytics.logError(err);\n\n               this.queueLock.release().then(() => {\n                  reject(err);\n               });\n            });\n      });\n   }\n\n   /**\n    * Reset credentials to a blank state.\n    * @return {Promise}\n    */\n   reset() {\n      return Promise.resolve();\n   }\n\n   /**\n    * type()\n    * return the type of network connection we are using.\n    * [\"rest\", \"socket\", \"relay\"]\n    * @return {string}\n    */\n   type() {\n      return this._config.appbuilder.networkType;\n   }\n\n   // uuid() {\n   //    return this.AB.uuid();\n   // }\n\n   getTokens() {\n      // called in appPage.js : openRelayLoader()\n      return {};\n   }\n}\n\nexport default new Network();\n","/*\n * NetworkRest.js\n * The base Networking class.  This class is responsible for job submissions\n * and outlines the basic Network interface.\n */\n\n/* global navigator Connection */\n// import Account from \"./Account\";\n// import analytics from \"./Analytics\";\n// import EventEmitter from \"eventemitter2\";\nimport EventEmitter from \"../AppBuilder/platform/ABEmitter\";\n// import Lock from \"./Lock\";\n\n// import { storage } from \"./Storage\";\n// import Tenant from \"./Tenant\";\n// import { v4 as uuidv4 } from \"uuid\";\n\n// Temp placeholders until Resources are implemented:\n\n// End Temp\n// var Atomic = Window.atomic;\n// import Atomic from \"../../../node_modules/atomicjs/dist/atomic.polyfills.js\";\n// Atomic : a small $.ajax() replacement\n\nvar Config = null;\n// {} Config\n// the site specific configuration information\n\nclass NetworkRest extends EventEmitter {\n   constructor(parent) {\n      // {Network} parent\n\n      super({\n         wildcard: true,\n         newListener: false,\n         maxListeners: 0,\n      });\n\n      this.baseURL = null;\n      // {string} .baseURL\n      // the url of our site.\n\n      this.numRetries = 3;\n      // {int} .numRetries\n      // the number or times we should attempt to issue a network request.\n\n      this._network = parent;\n      // {Network} ._network\n      // the Parent Network Resource that the rest of the Platform actually\n      // works with.\n\n      this.isRealTime = false;\n      // {bool}\n      // does this Network type support RealTime updates. (socket = true);\n   }\n\n   /**\n    * @method init\n    * @param {ABFactory} AB\n    * @param {object} options\n    * @param {string} options.baseURL\n    * @return {Promise}\n    */\n   init(AB, options) {\n      this.AB = AB;\n\n      Config = this.AB.Config.siteConfig();\n      options = options || {};\n      if (options) {\n         this.baseURL = options.baseURL || Config.appbuilder.urlCoreServer;\n         this.numRetries =\n            options.networkNumRetries || Config.appbuilder.networkNumRetries;\n      }\n      return Promise.resolve();\n   }\n\n   //\n   // Interface API\n   //\n   /**\n    * Network.get(options, jobResponse)\n    * perform a GET request back to the AppBuilder server.\n    * @param {obj} params the request parameters that need to be executed on\n    *              the AppBuilder Server\n    * @param {obj} jobResponse the callback info for handling the response.\n    *              {\n    *                  key:'unique.key',\n    *                  context:{ obj data }\n    *              }\n    * @return {Promise}\n    */\n   get(params, jobResponse) {\n      params.type = params.type || \"GET\";\n\n      // data sent to params on a \"GET\" request need to be converted to\n      // uri querystring values:\n      var data = params.data || params.params;\n      if (data) {\n         var useThese = [\"string\", \"number\", \"boolean\"];\n         var search = Object.keys(data)\n            .map(function (key) {\n               var val = data[key];\n               if (useThese.indexOf(typeof val) == -1) {\n                  val = JSON.stringify(val);\n               }\n               return key + \"=\" + encodeURIComponent(val);\n            })\n            .join(\"&\");\n\n         var join = \"?\";\n         if (params.url.indexOf(\"?\") > -1) {\n            join = \"&\";\n         }\n         params.url = [params.url, search].join(join);\n      }\n\n      return this._request(params, jobResponse);\n   }\n\n   /**\n    * Network.post()\n    * perform an AJAX POST request to the AppBuilder server.\n    * @param {obj} params the request parameters that need to be executed on\n    *              the AppBuilder Server\n    * @param {obj} jobResponse the callback info for handling the response.\n    *              {\n    *                  key:'unique.key',\n    *                  context:{ obj data }\n    *              }\n    * @return {Promise}\n    */\n   post(params, jobResponse) {\n      params.type = params.type || \"POST\";\n      return this._request(params, jobResponse);\n   }\n\n   /**\n    * Network.put()\n    * perform a PUT request to the AppBuilder server.\n    * @param {obj} params the request parameters that need to be executed on\n    *              the AppBuilder Server\n    * @param {obj} jobResponse the callback info for handling the response.\n    *              {\n    *                  key:'unique.key',\n    *                  context:{ obj data }\n    *              }\n    * @return {Promise}\n    */\n   put(params, jobResponse) {\n      params.type = params.type || \"PUT\";\n      return this._request(params, jobResponse);\n   }\n\n   /**\n    * Network.delete()\n    * perform an AJAX DELETE request to the AppBuilder server.\n    * @param {obj} params the request parameters that need to be executed on\n    *              the AppBuilder Server\n    * @param {obj} jobResponse the callback info for handling the response.\n    *              {\n    *                  key:'unique.key',\n    *                  context:{ obj data }\n    *              }\n    * @return {Promise}\n    */\n   delete(params, jobResponse) {\n      params.type = params.type || \"DELETE\";\n      return this._request(params, jobResponse);\n   }\n\n   ////\n   //// Network Utilities\n   ////\n\n   isNetworkConnected() {\n      return this._network.isNetworkConnected();\n   }\n\n   salSend(params) {\n      return Window.atomic(params.url, params).then((packet) => {\n         // {json} packet\n         // the response from Atomic is in format:\n         // {data: {…}, xhr: XMLHttpRequest}\n         // we just want to send back our { status:\"\", data:xxx } packet.\n         return packet.data;\n      });\n   }\n\n   /**\n    * _request()\n    * perform the actual AJAX request for this operation.\n    * @param {obj} params  the jQuery.ajax() formatted params\n    * @param {obj} jobRequest  the information about the request's response.\n    * @return {Promise}\n    */\n   _request(params, jobResponse) {\n      // make sure we don't process too many retries:\n      params._retry = params._retry || 0;\n      if (params._retry >= this.numRetries) {\n         var err = new Error(\n            `Too many retries (${this.numRetries}) for ${params.url}`\n         );\n         err.code = \"E_TOMANYRETRIES\";\n         this.AB.notify.developer(err, {\n            context: \"NetworkRest:_request: Too Many Retries\",\n         });\n         // this.AB.Analytics.logError(err);\n         if (jobResponse) {\n            this._network.publishResponse(jobResponse, err);\n         }\n\n         return Promise.reject(err);\n      }\n\n      return new Promise((resolve, reject) => {\n         params.withCredentials = true;\n         params.url = params.url || \"/\";\n         if (params.url[0] == \"/\") {\n            params.url = this.baseURL + params.url;\n         }\n\n         params.headers = params.headers || {};\n         if (this.AB.Account.authToken) {\n            params.headers.Authorization = this.AB.Account.authToken;\n         }\n         params.headers[\"Content-type\"] = \"application/json\";\n\n         var tenantID = this.AB.Tenant.id();\n         if (tenantID) {\n            params.headers[\"tenant-token\"] = tenantID;\n         }\n\n         // params.timeout = params.timeout || 6000;\n\n         if (this.isNetworkConnected()) {\n            params.method = params.method || params.type;\n            params.timeout = 6000; // ??\n            params.data = params.data || params.params;\n            delete params.params;\n\n            this.salSend(params)\n               .then((packet) => {\n                  // TODO: check if packet.status == \"error\"\n                  // and then .publishResponse() as an error\n\n                  //\n                  var data = packet;\n                  if (jobResponse) {\n                     this._network.publishResponse(jobResponse, null, data);\n                  }\n                  resolve(data);\n               })\n               .catch((err) => {\n                  // err.status\n                  // err.statusText\n                  // err.responseText\n                  // err.message  {socket}\n                  // err.stack    {socket}\n\n                  // if this is a network connection error, send the attempt again:\n                  if (\n                     err.statusText == \"Request timeout\" ||\n                     (err.message && err.message.indexOf(\"disconnected\") > -1)\n                  ) {\n                     //// Network Error: conneciton refused, access denied, etc...\n                     this.AB.Analytics.log(\n                        \"NetworkRest._request():network connection error detected. Trying again\"\n                     );\n\n                     params._retry++;\n\n                     // retry the attempt:\n                     this._request(params)\n                        .then((data) => {\n                           // console.log('--- timeout.then():',data);\n                           this.AB.warn(\n                              \"*** NetworkRest._request().then(): attempt resolved.\"\n                           );\n                           resolve(data);\n                        })\n                        .catch((_err) => {\n                           this.AB.notify.developer(_err, {\n                              message:\n                                 \"*** NetworkRest._request().catch(): retry failed:\",\n                           });\n                           reject(_err);\n                        });\n\n                     return;\n                  } else {\n                     // Else attempt to emit() some common Error types for\n                     // additional Platform Handling.\n                     if (err.status == 403) {\n                        this.emit(\"error.badAuth\", err);\n                     } else if (err.status >= 400 && err.status < 500) {\n                        this.emit(\"error.badRequest\", err);\n                     } else if (err.status >= 500) {\n                        this.emit(\"error.badServer\", err);\n                     }\n                  }\n\n                  var packet = null;\n                  if (err.responseText) {\n                     try {\n                        packet = JSON.parse(err.responseText);\n                     } catch (e) {}\n                  }\n                  // if this is an req.ab.error() response:\n                  if (packet && packet.status == \"error\") {\n                     // check if REAUTH Error:\n                     if (packet.id == 5 || packet.code == \"E_REAUTH\") {\n                        this._network.emit(\"reauth\");\n                        return;\n                     }\n\n                     this.AB.notify.developer(packet, {\n                        context:\n                           \"NetworkRest:_request:Error returned from Server (req.ab.error())\",\n                        data: packet.data,\n                     });\n                     // this.AB.Analytics.logError(packet.data);\n                     // this.AB.error(packet.data);\n                     if (jobResponse) {\n                        this._network.publishResponse(\n                           jobResponse,\n                           packet,\n                           null\n                        );\n                     }\n                     return reject(packet.data);\n                  } else {\n                     // unknown/unexpected error:\n                     var error = new Error(\n                        `${err.status} ${err.statusText || err.message}: ${\n                           params.method\n                        } ${params.url}`\n                     );\n                     error.response = err.responseText;\n                     error.text = err.statusText;\n                     error.err = err;\n                     error.url = `${params.method} ${params.url}`;\n                     this.AB.notify.developer(error, {\n                        context:\n                           \"NetworkRest:_request:Unknown Error returned from server\",\n                     });\n                     // this.AB.Analytics.logError(error);\n                     // this.AB.error(error);\n                     if (jobResponse) {\n                        this._network.publishResponse(jobResponse, error);\n                     }\n                     return reject(error);\n                  }\n               });\n         } else {\n            // now Queue this request params.\n            this.AB.Analytics.log(\n               \"NetworkRest:_request(): Network is offline. Queuing request.\"\n            );\n            this._network\n               .queue(params, jobResponse)\n               .then(() => {\n                  resolve({ status: \"queued\" });\n               })\n               .catch(reject);\n         }\n      });\n   }\n\n   /**\n    * resend()\n    * processes messages that were queued due to network connectivity\n    * issues.\n    * @param {obj} params  the jQuery.ajax() formatted params\n    * @param {obj} jobRequest  the information about the request's response.\n    * @return {Promise}\n    */\n   resend(params, jobResponse) {\n      // var op = params.type.toLowerCase();\n      return this._request(params, jobResponse);\n   }\n}\n\nexport default NetworkRest;\n","/*\n * NetworkRest.js\n * The base Networking class.  This class is responsible for job submissions\n * and outlines the basic Network interface.\n */\n\nimport NetworkRest from \"./NetworkRest\";\n\nconst listSocketEvents = [\n   // NOTE: ABFactory.definitionXXX() will manage emitting these\n   // events internally:\n   // \"ab.abdefinition.create\",\n   // \"ab.abdefinition.update\",\n   // \"ab.abdefinition.delete\",\n   \"ab.datacollection.create\",\n   \"ab.datacollection.update\",\n   \"ab.datacollection.stale\",\n   \"ab.datacollection.delete\",\n   \"ab.inbox.create\",\n   \"ab.inbox.update\",\n   // \"ab.object.update\",\n];\n// {array}\n// The io.socket.* events we are listening for that relate to our datacollection\n// maintainence.\n\nclass NetworkRestSocket extends NetworkRest {\n   constructor(parent) {\n      // {Network} parent\n\n      super(parent);\n\n      this.isRealTime = true;\n      // {bool}\n      // does this Network type support RealTime updates. (socket = true);\n\n      // Pass the io.socket.on(*) events to our AB factory.\n      listSocketEvents.forEach((ev) => {\n         io.socket.on(ev, (data) => {\n            // check if the ev contains 'datacollection'\n            // and do a single normalizeData() on the incoming data here\n            // before sending it off to be processed.\n            if (ev.indexOf(\"ab.datacollection\") > -1) {\n               let values = data.data;\n               if (values) {\n                  let obj = this.AB.objectByID(data.objectId);\n                  if (obj) {\n                     let model = obj.model();\n                     if (ev != \"ab.datacollection.delete\") {\n                        let jobID = this.AB.jobID();\n                        console.log(`${jobID} : ${ev}:normalization begin`);\n                        let timeFrom = performance.now();\n                        model.normalizeData(data.data);\n                        let timeTo = performance.now();\n                        console.log(\n                           `${jobID} : ${ev}:normalization end:  ${\n                              timeTo - timeFrom\n                           }ms`\n                        );\n                     }\n                  }\n               }\n            }\n            this.AB.emit(ev, data);\n         });\n      });\n   }\n\n   //\n   // Interface API\n   //\n\n   ////\n   //// Network Utilities\n   ////\n\n   isNetworkConnected() {\n      return io.socket.isConnected();\n   }\n\n   salSend(params) {\n      return new Promise((resolve, reject) => {\n         params.method = params.method.toLowerCase();\n\n         io.socket.request(params, (data, jwres) => {\n            // {json} data\n            // the data response from the request\n            // {json} jwres\n            // A JSON WebSocket Response object.\n            //    {json} jwres.headers :  header values\n            //    {int}  jwres.statusCode : http response code\n            //    {json} jwres.body === resData\n\n            // if this is an  error\n            if (jwres.statusCode >= 400) {\n               // Our NetworkRest.error( err ) should be in this format:\n               // err.status\n               // err.statusText\n               // err.responseText\n\n               var errStr = jwres.error ? jwres.error.toString() : jwres.body;\n\n               var err = new Error(`Socket Error: ${errStr}`);\n               err.status = jwres.statusCode;\n               err.statusText = errStr;\n               err.responseText = jwres.body;\n\n               // on RequestTimeout:\n               // err.statusText == \"Request timeout\"\n\n               reject(err);\n            } else {\n               // some errors like socket disconnected return an Error for data\n               if (data instanceof Error) {\n                  reject(data);\n                  return;\n               }\n\n               if (typeof data == \"string\") {\n                  data = JSON.parse(data);\n               }\n\n               // Got a JSON response but was the service response an error?\n               // this would be a strange case where the .statusCode < 400\n               if (data.status && data.status == \"error\") {\n                  // make sure to reject an err.responseText = data\n                  reject({\n                     status: jwres.statusCode,\n                     responseText: JSON.Stringify(data),\n                  });\n               }\n               // Success!\n               else {\n                  resolve(data);\n               }\n            }\n         });\n      });\n   }\n}\n\nexport default NetworkRestSocket;\n","import EventEmitter from \"../AppBuilder/platform/ABEmitter\";\n\nimport StorageLocal from \"./StorageLocal.js\";\n\nclass Storage extends EventEmitter {\n   constructor() {\n      super();\n\n      this.tenantStorage = null;\n      this._config = null;\n      this._storage = null;\n   }\n\n   init(AB) {\n      // {ABFactory} AB\n\n      this.AB = AB;\n      var config = this.AB.Config.siteConfig();\n      if (config) {\n         if (config.storage && config.storage.encrypted) {\n            console.error(\"TODO: Implement Encrypted Storage\");\n            // this._storage = StorageEncrypted;\n            this._storage = StorageLocal;\n         } else {\n            this._storage = StorageLocal;\n         }\n\n         return this._storage.init(AB);\n      } else {\n         console.error(\"??? Why No site config ???\");\n      }\n\n      return Promise.resolve();\n   }\n\n   set(...params) {\n      return this._storage.set(...params);\n   }\n\n   get(...params) {\n      return this._storage.get(...params);\n   }\n\n   clear(...params) {\n      return this._storage.clear(...params);\n   }\n\n   clearAll(...params) {\n      return this._storage.clearAll(...params);\n   }\n}\n\nexport default new Storage();\n","/*\n * StorageLocal\n *\n * An interface for storing and retrieving Client Side data.  Data stored\n * in StorageLoacal is NOT encrypted.\n *\n * This implementation is based upon the webix.storage.local library.\n * See: https://docs.webix.com/api__refs__storage.local.html\n *\n */\n\nimport EventEmitter from \"../AppBuilder/platform/ABEmitter\";\n\nclass StorageLocal extends EventEmitter {\n   constructor() {\n      super();\n\n      this.tenantStorage = null;\n      // {Webix.storage} object.\n      // We divide the storage data according to the tenant we are working\n      // with.  This way Users who can move between different Tenants can\n      // keep their local data separated.\n   }\n\n   init(AB) {\n      // {ABFactory} AB\n\n      this.AB = AB;\n      this.tenantID = this.AB.Tenant.id();\n      if (!this.tenantID) {\n         this.tenantID = \"noAuth\";\n         // \"noAuth\" is considered the tenant on our Login sequence\n         // which should have a minimum of data stored (language maybe?)\n      }\n\n      this.tenantStorage = JSON.parse(\n         window.localStorage.getItem(this.tenantID) || \"{}\"\n      );\n\n      // this isn't actually an Async operation, so just resolve()\n      return Promise.resolve();\n   }\n\n   _save() {\n      return Promise.resolve(\n         localStorage.setItem(this.tenantID, JSON.stringify(this.tenantStorage))\n      );\n   }\n\n   set(key, value /* , options = {} */) {\n      return Promise.resolve().then(() => {\n         this.tenantStorage[key] = value;\n         return this._save();\n      });\n   }\n\n   get(key /*, options = {} */) {\n      return Promise.resolve().then(() => {\n         return this.tenantStorage[key];\n      });\n   }\n\n   clear(key) {\n      return Promise.resolve().then(() => {\n         delete this.tenantStorage[key];\n         return this._save();\n      });\n   }\n\n   clearAll() {\n      return Promise.resolve().then(() => {\n         this.tenantStorage = {};\n         return this._save();\n      });\n   }\n}\n\nexport default new StorageLocal();\n","import EventEmitter from \"../AppBuilder/platform/ABEmitter\";\nimport Config from \"./Config.js\";\n\nclass Tenant extends EventEmitter {\n   constructor() {\n      super();\n\n      this.text = false;\n      this._config = null;\n      this.textClickToEnter = null;\n   }\n\n   init() {\n      var config = Config.tenantConfig();\n      if (config) {\n         // check if we have options that are stored as a string\n         if (\n            typeof config.options === \"string\" ||\n            config.options instanceof String\n         ) {\n            // if we do try to parse them into a JSON object\n            try {\n               config.options = JSON.parse(config.options);\n            } catch (error) {\n               console.error(error);\n            }\n         }\n         this._config = config;\n         this.textClickToEnter = config.options.textClickToEnter;\n      }\n\n      // this isn't actually an Async operation, so just resolve()\n      return Promise.resolve();\n   }\n\n   id() {\n      if (!this._config || this._config.id == \"??\") {\n         return Config.setting(\"tenant\");\n      }\n      return this._config.id;\n   }\n\n   setting(key, value) {\n      if (this._config) {\n         if (value) {\n            this._config.options[key] = value;\n            return;\n         }\n         return this._config.options[key];\n      }\n   }\n}\n\nexport default new Tenant();\n","import NotFoundPage from \"../pages/404.f7.jsx\";\nimport FormPage from \"../pages/form.f7.jsx\";\nimport HomePage from \"../pages/home.f7.jsx\";\nimport ListPage from \"../pages/list.f7.jsx\";\n\nexport default (AB) => {\n   const Application = AB.applications()[0]; // AB.applicationByID(\"4b7a489a-5fe5-4044-8565-aaa3654300f2\");\n\n   AB.isInitialized = false;\n\n   AB.Network.on(\"reauth\", () => {\n      AB.isInitialized = false;\n      AB.$f7.loginScreen.open(\"#my-login-screen\");\n   });\n\n   const routes = [\n      {\n         path: \"/\",\n         component: HomePage(AB),\n      },\n      {\n         path: \"/form\",\n         component: FormPage(AB),\n      },\n      {\n         path: \"/list\",\n         component: ListPage(AB),\n      },\n      {\n         path: \"(.*)\",\n         component: NotFoundPage(AB),\n      },\n   ];\n\n   const listPages = Application.pages();\n\n   listPages.forEach((Page) => {\n      routes.push(Page.routeComponent());\n   });\n\n   // Now add the final NotFoundPage for all other references:\n   routes.push({\n      path: \"(.*)\",\n      component: NotFoundPage(AB),\n   });\n\n   return routes;\n};\n","/* eslint-disable */\n\n/**\n * To use sails.io.js in an AMD environment (e.g. with require.js),\n * replace this file with the sails.io.js file from the root of:\n * https://github.com/balderdashy/sails.io.js\n * and download a standalone copy of socket.io-client from:\n * https://github.com/socketio/socket.io-client\n * then follow the instructions at:\n * https://github.com/balderdashy/sails.io.js#requirejsamd-usage\n */\n\n// socket.io-client version 2.0.3\n// https://github.com/socketio/socket.io-client\n\n!(function(a, b) {\n  \"object\" == typeof exports && \"object\" == typeof module\n    ? (module.exports = b())\n    : \"function\" == typeof define && define.amd\n    ? define([], b)\n    : \"object\" == typeof exports\n    ? (exports.io = b())\n    : (a.io = b());\n})(this, function() {\n  return (function(a) {\n    function b(d) {\n      if (c[d]) return c[d].exports;\n      var e = (c[d] = { exports: {}, id: d, loaded: !1 });\n      return a[d].call(e.exports, e, e.exports, b), (e.loaded = !0), e.exports;\n    }\n    var c = {};\n    return (b.m = a), (b.c = c), (b.p = \"\"), b(0);\n  })([\n    function(a, b, c) {\n      \"use strict\";\n      function d(a, b) {\n        \"object\" === (\"undefined\" == typeof a ? \"undefined\" : e(a)) &&\n          ((b = a), (a = void 0)),\n          (b = b || {});\n        var c,\n          d = f(a),\n          g = d.source,\n          k = d.id,\n          l = d.path,\n          m = j[k] && l in j[k].nsps,\n          n =\n            b.forceNew || b[\"force new connection\"] || !1 === b.multiplex || m;\n        return (\n          n\n            ? (i(\"ignoring socket cache for %s\", g), (c = h(g, b)))\n            : (j[k] || (i(\"new io instance for %s\", g), (j[k] = h(g, b))),\n              (c = j[k])),\n          d.query && !b.query && (b.query = d.query),\n          c.socket(d.path, b)\n        );\n      }\n      var e =\n          \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator\n            ? function(a) {\n                return typeof a;\n              }\n            : function(a) {\n                return a &&\n                  \"function\" == typeof Symbol &&\n                  a.constructor === Symbol &&\n                  a !== Symbol.prototype\n                  ? \"symbol\"\n                  : typeof a;\n              },\n        f = c(1),\n        g = c(7),\n        h = c(13),\n        i = c(3)(\"socket.io-client\");\n      a.exports = b = d;\n      var j = (b.managers = {});\n      (b.protocol = g.protocol),\n        (b.connect = d),\n        (b.Manager = c(13)),\n        (b.Socket = c(39));\n    },\n    function(a, b, c) {\n      (function(b) {\n        \"use strict\";\n        function d(a, c) {\n          var d = a;\n          (c = c || b.location),\n            null == a && (a = c.protocol + \"//\" + c.host),\n            \"string\" == typeof a &&\n              (\"/\" === a.charAt(0) &&\n                (a = \"/\" === a.charAt(1) ? c.protocol + a : c.host + a),\n              /^(https?|wss?):\\/\\//.test(a) ||\n                (f(\"protocol-less url %s\", a),\n                (a =\n                  \"undefined\" != typeof c\n                    ? c.protocol + \"//\" + a\n                    : \"https://\" + a)),\n              f(\"parse %s\", a),\n              (d = e(a))),\n            d.port ||\n              (/^(http|ws)$/.test(d.protocol)\n                ? (d.port = \"80\")\n                : /^(http|ws)s$/.test(d.protocol) && (d.port = \"443\")),\n            (d.path = d.path || \"/\");\n          var g = d.host.indexOf(\":\") !== -1,\n            h = g ? \"[\" + d.host + \"]\" : d.host;\n          return (\n            (d.id = d.protocol + \"://\" + h + \":\" + d.port),\n            (d.href =\n              d.protocol +\n              \"://\" +\n              h +\n              (c && c.port === d.port ? \"\" : \":\" + d.port)),\n            d\n          );\n        }\n        var e = c(2),\n          f = c(3)(\"socket.io-client:url\");\n        a.exports = d;\n      }.call(\n        b,\n        (function() {\n          return this;\n        })()\n      ));\n    },\n    function(a, b) {\n      var c = /^(?:(?![^:@]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/,\n        d = [\n          \"source\",\n          \"protocol\",\n          \"authority\",\n          \"userInfo\",\n          \"user\",\n          \"password\",\n          \"host\",\n          \"port\",\n          \"relative\",\n          \"path\",\n          \"directory\",\n          \"file\",\n          \"query\",\n          \"anchor\"\n        ];\n      a.exports = function(a) {\n        var b = a,\n          e = a.indexOf(\"[\"),\n          f = a.indexOf(\"]\");\n        e != -1 &&\n          f != -1 &&\n          (a =\n            a.substring(0, e) +\n            a.substring(e, f).replace(/:/g, \";\") +\n            a.substring(f, a.length));\n        for (var g = c.exec(a || \"\"), h = {}, i = 14; i--; )\n          h[d[i]] = g[i] || \"\";\n        return (\n          e != -1 &&\n            f != -1 &&\n            ((h.source = b),\n            (h.host = h.host\n              .substring(1, h.host.length - 1)\n              .replace(/;/g, \":\")),\n            (h.authority = h.authority\n              .replace(\"[\", \"\")\n              .replace(\"]\", \"\")\n              .replace(/;/g, \":\")),\n            (h.ipv6uri = !0)),\n          h\n        );\n      };\n    },\n    function(a, b, c) {\n      (function(d) {\n        function e() {\n          return (\n            !(\n              \"undefined\" == typeof window ||\n              !window.process ||\n              \"renderer\" !== window.process.type\n            ) ||\n            (\"undefined\" != typeof document &&\n              document.documentElement &&\n              document.documentElement.style &&\n              document.documentElement.style.WebkitAppearance) ||\n            (\"undefined\" != typeof window &&\n              window.console &&\n              (window.console.firebug ||\n                (window.console.exception && window.console.table))) ||\n            (\"undefined\" != typeof navigator &&\n              navigator.userAgent &&\n              navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) &&\n              parseInt(RegExp.$1, 10) >= 31) ||\n            (\"undefined\" != typeof navigator &&\n              navigator.userAgent &&\n              navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/))\n          );\n        }\n        function f(a) {\n          var c = this.useColors;\n          if (\n            ((a[0] =\n              (c ? \"%c\" : \"\") +\n              this.namespace +\n              (c ? \" %c\" : \" \") +\n              a[0] +\n              (c ? \"%c \" : \" \") +\n              \"+\" +\n              b.humanize(this.diff)),\n            c)\n          ) {\n            var d = \"color: \" + this.color;\n            a.splice(1, 0, d, \"color: inherit\");\n            var e = 0,\n              f = 0;\n            a[0].replace(/%[a-zA-Z%]/g, function(a) {\n              \"%%\" !== a && (e++, \"%c\" === a && (f = e));\n            }),\n              a.splice(f, 0, d);\n          }\n        }\n        function g() {\n          return (\n            \"object\" == typeof console &&\n            console.log &&\n            Function.prototype.apply.call(console.log, console, arguments)\n          );\n        }\n        function h(a) {\n          try {\n            null == a ? b.storage.removeItem(\"debug\") : (b.storage.debug = a);\n          } catch (c) {}\n        }\n        function i() {\n          var a;\n          try {\n            a = b.storage.debug;\n          } catch (c) {}\n          return (\n            !a && \"undefined\" != typeof d && \"env\" in d && (a = d.env.DEBUG), a\n          );\n        }\n        function j() {\n          try {\n            return window.localStorage;\n          } catch (a) {}\n        }\n        (b = a.exports = c(5)),\n          (b.log = g),\n          (b.formatArgs = f),\n          (b.save = h),\n          (b.load = i),\n          (b.useColors = e),\n          (b.storage =\n            \"undefined\" != typeof chrome && \"undefined\" != typeof chrome.storage\n              ? chrome.storage.local\n              : j()),\n          (b.colors = [\n            \"lightseagreen\",\n            \"forestgreen\",\n            \"goldenrod\",\n            \"dodgerblue\",\n            \"darkorchid\",\n            \"crimson\"\n          ]),\n          (b.formatters.j = function(a) {\n            try {\n              return JSON.stringify(a);\n            } catch (b) {\n              return \"[UnexpectedJSONParseError]: \" + b.message;\n            }\n          }),\n          b.enable(i());\n      }.call(b, c(4)));\n    },\n    function(a, b) {\n      function c() {\n        throw new Error(\"setTimeout has not been defined\");\n      }\n      function d() {\n        throw new Error(\"clearTimeout has not been defined\");\n      }\n      function e(a) {\n        if (k === setTimeout) return setTimeout(a, 0);\n        if ((k === c || !k) && setTimeout)\n          return (k = setTimeout), setTimeout(a, 0);\n        try {\n          return k(a, 0);\n        } catch (b) {\n          try {\n            return k.call(null, a, 0);\n          } catch (b) {\n            return k.call(this, a, 0);\n          }\n        }\n      }\n      function f(a) {\n        if (l === clearTimeout) return clearTimeout(a);\n        if ((l === d || !l) && clearTimeout)\n          return (l = clearTimeout), clearTimeout(a);\n        try {\n          return l(a);\n        } catch (b) {\n          try {\n            return l.call(null, a);\n          } catch (b) {\n            return l.call(this, a);\n          }\n        }\n      }\n      function g() {\n        p &&\n          n &&\n          ((p = !1), n.length ? (o = n.concat(o)) : (q = -1), o.length && h());\n      }\n      function h() {\n        if (!p) {\n          var a = e(g);\n          p = !0;\n          for (var b = o.length; b; ) {\n            for (n = o, o = []; ++q < b; ) n && n[q].run();\n            (q = -1), (b = o.length);\n          }\n          (n = null), (p = !1), f(a);\n        }\n      }\n      function i(a, b) {\n        (this.fun = a), (this.array = b);\n      }\n      function j() {}\n      var k,\n        l,\n        m = (a.exports = {});\n      !(function() {\n        try {\n          k = \"function\" == typeof setTimeout ? setTimeout : c;\n        } catch (a) {\n          k = c;\n        }\n        try {\n          l = \"function\" == typeof clearTimeout ? clearTimeout : d;\n        } catch (a) {\n          l = d;\n        }\n      })();\n      var n,\n        o = [],\n        p = !1,\n        q = -1;\n      (m.nextTick = function(a) {\n        var b = new Array(arguments.length - 1);\n        if (arguments.length > 1)\n          for (var c = 1; c < arguments.length; c++) b[c - 1] = arguments[c];\n        o.push(new i(a, b)), 1 !== o.length || p || e(h);\n      }),\n        (i.prototype.run = function() {\n          this.fun.apply(null, this.array);\n        }),\n        (m.title = \"browser\"),\n        (m.browser = !0),\n        (m.env = {}),\n        (m.argv = []),\n        (m.version = \"\"),\n        (m.versions = {}),\n        (m.on = j),\n        (m.addListener = j),\n        (m.once = j),\n        (m.off = j),\n        (m.removeListener = j),\n        (m.removeAllListeners = j),\n        (m.emit = j),\n        (m.prependListener = j),\n        (m.prependOnceListener = j),\n        (m.listeners = function(a) {\n          return [];\n        }),\n        (m.binding = function(a) {\n          throw new Error(\"process.binding is not supported\");\n        }),\n        (m.cwd = function() {\n          return \"/\";\n        }),\n        (m.chdir = function(a) {\n          throw new Error(\"process.chdir is not supported\");\n        }),\n        (m.umask = function() {\n          return 0;\n        });\n    },\n    function(a, b, c) {\n      function d(a) {\n        var c,\n          d = 0;\n        for (c in a) (d = (d << 5) - d + a.charCodeAt(c)), (d |= 0);\n        return b.colors[Math.abs(d) % b.colors.length];\n      }\n      function e(a) {\n        function c() {\n          if (c.enabled) {\n            var a = c,\n              d = +new Date(),\n              e = d - (j || d);\n            (a.diff = e), (a.prev = j), (a.curr = d), (j = d);\n            for (var f = new Array(arguments.length), g = 0; g < f.length; g++)\n              f[g] = arguments[g];\n            (f[0] = b.coerce(f[0])), \"string\" != typeof f[0] && f.unshift(\"%O\");\n            var h = 0;\n            (f[0] = f[0].replace(/%([a-zA-Z%])/g, function(c, d) {\n              if (\"%%\" === c) return c;\n              h++;\n              var e = b.formatters[d];\n              if (\"function\" == typeof e) {\n                var g = f[h];\n                (c = e.call(a, g)), f.splice(h, 1), h--;\n              }\n              return c;\n            })),\n              b.formatArgs.call(a, f);\n            var i = c.log || b.log || console.log.bind(console);\n            i.apply(a, f);\n          }\n        }\n        return (\n          (c.namespace = a),\n          (c.enabled = b.enabled(a)),\n          (c.useColors = b.useColors()),\n          (c.color = d(a)),\n          \"function\" == typeof b.init && b.init(c),\n          c\n        );\n      }\n      function f(a) {\n        b.save(a), (b.names = []), (b.skips = []);\n        for (\n          var c = (\"string\" == typeof a ? a : \"\").split(/[\\s,]+/),\n            d = c.length,\n            e = 0;\n          e < d;\n          e++\n        )\n          c[e] &&\n            ((a = c[e].replace(/\\*/g, \".*?\")),\n            \"-\" === a[0]\n              ? b.skips.push(new RegExp(\"^\" + a.substr(1) + \"$\"))\n              : b.names.push(new RegExp(\"^\" + a + \"$\")));\n      }\n      function g() {\n        b.enable(\"\");\n      }\n      function h(a) {\n        var c, d;\n        for (c = 0, d = b.skips.length; c < d; c++)\n          if (b.skips[c].test(a)) return !1;\n        for (c = 0, d = b.names.length; c < d; c++)\n          if (b.names[c].test(a)) return !0;\n        return !1;\n      }\n      function i(a) {\n        return a instanceof Error ? a.stack || a.message : a;\n      }\n      (b = a.exports = e.debug = e[\"default\"] = e),\n        (b.coerce = i),\n        (b.disable = g),\n        (b.enable = f),\n        (b.enabled = h),\n        (b.humanize = c(6)),\n        (b.names = []),\n        (b.skips = []),\n        (b.formatters = {});\n      var j;\n    },\n    function(a, b) {\n      function c(a) {\n        if (((a = String(a)), !(a.length > 100))) {\n          var b = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(\n            a\n          );\n          if (b) {\n            var c = parseFloat(b[1]),\n              d = (b[2] || \"ms\").toLowerCase();\n            switch (d) {\n              case \"years\":\n              case \"year\":\n              case \"yrs\":\n              case \"yr\":\n              case \"y\":\n                return c * k;\n              case \"days\":\n              case \"day\":\n              case \"d\":\n                return c * j;\n              case \"hours\":\n              case \"hour\":\n              case \"hrs\":\n              case \"hr\":\n              case \"h\":\n                return c * i;\n              case \"minutes\":\n              case \"minute\":\n              case \"mins\":\n              case \"min\":\n              case \"m\":\n                return c * h;\n              case \"seconds\":\n              case \"second\":\n              case \"secs\":\n              case \"sec\":\n              case \"s\":\n                return c * g;\n              case \"milliseconds\":\n              case \"millisecond\":\n              case \"msecs\":\n              case \"msec\":\n              case \"ms\":\n                return c;\n              default:\n                return;\n            }\n          }\n        }\n      }\n      function d(a) {\n        return a >= j\n          ? Math.round(a / j) + \"d\"\n          : a >= i\n          ? Math.round(a / i) + \"h\"\n          : a >= h\n          ? Math.round(a / h) + \"m\"\n          : a >= g\n          ? Math.round(a / g) + \"s\"\n          : a + \"ms\";\n      }\n      function e(a) {\n        return (\n          f(a, j, \"day\") ||\n          f(a, i, \"hour\") ||\n          f(a, h, \"minute\") ||\n          f(a, g, \"second\") ||\n          a + \" ms\"\n        );\n      }\n      function f(a, b, c) {\n        if (!(a < b))\n          return a < 1.5 * b\n            ? Math.floor(a / b) + \" \" + c\n            : Math.ceil(a / b) + \" \" + c + \"s\";\n      }\n      var g = 1e3,\n        h = 60 * g,\n        i = 60 * h,\n        j = 24 * i,\n        k = 365.25 * j;\n      a.exports = function(a, b) {\n        b = b || {};\n        var f = typeof a;\n        if (\"string\" === f && a.length > 0) return c(a);\n        if (\"number\" === f && isNaN(a) === !1) return b[\"long\"] ? e(a) : d(a);\n        throw new Error(\n          \"val is not a non-empty string or a valid number. val=\" +\n            JSON.stringify(a)\n        );\n      };\n    },\n    function(a, b, c) {\n      function d() {}\n      function e(a) {\n        var c = \"\" + a.type;\n        return (\n          (b.BINARY_EVENT !== a.type && b.BINARY_ACK !== a.type) ||\n            (c += a.attachments + \"-\"),\n          a.nsp && \"/\" !== a.nsp && (c += a.nsp + \",\"),\n          null != a.id && (c += a.id),\n          null != a.data && (c += JSON.stringify(a.data)),\n          l(\"encoded %j as %s\", a, c),\n          c\n        );\n      }\n      function f(a, b) {\n        function c(a) {\n          var c = o.deconstructPacket(a),\n            d = e(c.packet),\n            f = c.buffers;\n          f.unshift(d), b(f);\n        }\n        o.removeBlobs(a, c);\n      }\n      function g() {\n        this.reconstructor = null;\n      }\n      function h(a) {\n        var c = 0,\n          d = { type: Number(a.charAt(0)) };\n        if (null == b.types[d.type]) return k();\n        if (b.BINARY_EVENT === d.type || b.BINARY_ACK === d.type) {\n          for (\n            var e = \"\";\n            \"-\" !== a.charAt(++c) && ((e += a.charAt(c)), c != a.length);\n\n          );\n          if (e != Number(e) || \"-\" !== a.charAt(c))\n            throw new Error(\"Illegal attachments\");\n          d.attachments = Number(e);\n        }\n        if (\"/\" === a.charAt(c + 1))\n          for (d.nsp = \"\"; ++c; ) {\n            var f = a.charAt(c);\n            if (\",\" === f) break;\n            if (((d.nsp += f), c === a.length)) break;\n          }\n        else d.nsp = \"/\";\n        var g = a.charAt(c + 1);\n        if (\"\" !== g && Number(g) == g) {\n          for (d.id = \"\"; ++c; ) {\n            var f = a.charAt(c);\n            if (null == f || Number(f) != f) {\n              --c;\n              break;\n            }\n            if (((d.id += a.charAt(c)), c === a.length)) break;\n          }\n          d.id = Number(d.id);\n        }\n        return (\n          a.charAt(++c) && (d = i(d, a.substr(c))),\n          l(\"decoded %s as %j\", a, d),\n          d\n        );\n      }\n      function i(a, b) {\n        try {\n          a.data = JSON.parse(b);\n        } catch (c) {\n          return k();\n        }\n        return a;\n      }\n      function j(a) {\n        (this.reconPack = a), (this.buffers = []);\n      }\n      function k() {\n        return { type: b.ERROR, data: \"parser error\" };\n      }\n      var l = c(3)(\"socket.io-parser\"),\n        m = c(8),\n        n = c(9),\n        o = c(11),\n        p = c(12);\n      (b.protocol = 4),\n        (b.types = [\n          \"CONNECT\",\n          \"DISCONNECT\",\n          \"EVENT\",\n          \"ACK\",\n          \"ERROR\",\n          \"BINARY_EVENT\",\n          \"BINARY_ACK\"\n        ]),\n        (b.CONNECT = 0),\n        (b.DISCONNECT = 1),\n        (b.EVENT = 2),\n        (b.ACK = 3),\n        (b.ERROR = 4),\n        (b.BINARY_EVENT = 5),\n        (b.BINARY_ACK = 6),\n        (b.Encoder = d),\n        (b.Decoder = g),\n        (d.prototype.encode = function(a, c) {\n          if (\n            ((a.type !== b.EVENT && a.type !== b.ACK) ||\n              !n(a.data) ||\n              (a.type = a.type === b.EVENT ? b.BINARY_EVENT : b.BINARY_ACK),\n            l(\"encoding packet %j\", a),\n            b.BINARY_EVENT === a.type || b.BINARY_ACK === a.type)\n          )\n            f(a, c);\n          else {\n            var d = e(a);\n            c([d]);\n          }\n        }),\n        m(g.prototype),\n        (g.prototype.add = function(a) {\n          var c;\n          if (\"string\" == typeof a)\n            (c = h(a)),\n              b.BINARY_EVENT === c.type || b.BINARY_ACK === c.type\n                ? ((this.reconstructor = new j(c)),\n                  0 === this.reconstructor.reconPack.attachments &&\n                    this.emit(\"decoded\", c))\n                : this.emit(\"decoded\", c);\n          else {\n            if (!p(a) && !a.base64) throw new Error(\"Unknown type: \" + a);\n            if (!this.reconstructor)\n              throw new Error(\n                \"got binary data when not reconstructing a packet\"\n              );\n            (c = this.reconstructor.takeBinaryData(a)),\n              c && ((this.reconstructor = null), this.emit(\"decoded\", c));\n          }\n        }),\n        (g.prototype.destroy = function() {\n          this.reconstructor && this.reconstructor.finishedReconstruction();\n        }),\n        (j.prototype.takeBinaryData = function(a) {\n          if (\n            (this.buffers.push(a),\n            this.buffers.length === this.reconPack.attachments)\n          ) {\n            var b = o.reconstructPacket(this.reconPack, this.buffers);\n            return this.finishedReconstruction(), b;\n          }\n          return null;\n        }),\n        (j.prototype.finishedReconstruction = function() {\n          (this.reconPack = null), (this.buffers = []);\n        });\n    },\n    function(a, b, c) {\n      function d(a) {\n        if (a) return e(a);\n      }\n      function e(a) {\n        for (var b in d.prototype) a[b] = d.prototype[b];\n        return a;\n      }\n      (a.exports = d),\n        (d.prototype.on = d.prototype.addEventListener = function(a, b) {\n          return (\n            (this._callbacks = this._callbacks || {}),\n            (this._callbacks[\"$\" + a] = this._callbacks[\"$\" + a] || []).push(b),\n            this\n          );\n        }),\n        (d.prototype.once = function(a, b) {\n          function c() {\n            this.off(a, c), b.apply(this, arguments);\n          }\n          return (c.fn = b), this.on(a, c), this;\n        }),\n        (d.prototype.off = d.prototype.removeListener = d.prototype.removeAllListeners = d.prototype.removeEventListener = function(\n          a,\n          b\n        ) {\n          if (\n            ((this._callbacks = this._callbacks || {}), 0 == arguments.length)\n          )\n            return (this._callbacks = {}), this;\n          var c = this._callbacks[\"$\" + a];\n          if (!c) return this;\n          if (1 == arguments.length)\n            return delete this._callbacks[\"$\" + a], this;\n          for (var d, e = 0; e < c.length; e++)\n            if (((d = c[e]), d === b || d.fn === b)) {\n              c.splice(e, 1);\n              break;\n            }\n          return this;\n        }),\n        (d.prototype.emit = function(a) {\n          this._callbacks = this._callbacks || {};\n          var b = [].slice.call(arguments, 1),\n            c = this._callbacks[\"$\" + a];\n          if (c) {\n            c = c.slice(0);\n            for (var d = 0, e = c.length; d < e; ++d) c[d].apply(this, b);\n          }\n          return this;\n        }),\n        (d.prototype.listeners = function(a) {\n          return (\n            (this._callbacks = this._callbacks || {}),\n            this._callbacks[\"$\" + a] || []\n          );\n        }),\n        (d.prototype.hasListeners = function(a) {\n          return !!this.listeners(a).length;\n        });\n    },\n    function(a, b, c) {\n      (function(b) {\n        function d(a) {\n          if (!a || \"object\" != typeof a) return !1;\n          if (e(a)) {\n            for (var c = 0, f = a.length; c < f; c++) if (d(a[c])) return !0;\n            return !1;\n          }\n          if (\n            (\"function\" == typeof b.Buffer &&\n              b.Buffer.isBuffer &&\n              b.Buffer.isBuffer(a)) ||\n            (\"function\" == typeof b.ArrayBuffer && a instanceof ArrayBuffer) ||\n            (g && a instanceof Blob) ||\n            (h && a instanceof File)\n          )\n            return !0;\n          if (\n            a.toJSON &&\n            \"function\" == typeof a.toJSON &&\n            1 === arguments.length\n          )\n            return d(a.toJSON(), !0);\n          for (var i in a)\n            if (Object.prototype.hasOwnProperty.call(a, i) && d(a[i]))\n              return !0;\n          return !1;\n        }\n        var e = c(10),\n          f = Object.prototype.toString,\n          g =\n            \"function\" == typeof b.Blob ||\n            \"[object BlobConstructor]\" === f.call(b.Blob),\n          h =\n            \"function\" == typeof b.File ||\n            \"[object FileConstructor]\" === f.call(b.File);\n        a.exports = d;\n      }.call(\n        b,\n        (function() {\n          return this;\n        })()\n      ));\n    },\n    function(a, b) {\n      var c = {}.toString;\n      a.exports =\n        Array.isArray ||\n        function(a) {\n          return \"[object Array]\" == c.call(a);\n        };\n    },\n    function(a, b, c) {\n      (function(a) {\n        function d(a, b) {\n          if (!a) return a;\n          if (g(a)) {\n            var c = { _placeholder: !0, num: b.length };\n            return b.push(a), c;\n          }\n          if (f(a)) {\n            for (var e = new Array(a.length), h = 0; h < a.length; h++)\n              e[h] = d(a[h], b);\n            return e;\n          }\n          if (\"object\" == typeof a && !(a instanceof Date)) {\n            var e = {};\n            for (var i in a) e[i] = d(a[i], b);\n            return e;\n          }\n          return a;\n        }\n        function e(a, b) {\n          if (!a) return a;\n          if (a && a._placeholder) return b[a.num];\n          if (f(a)) for (var c = 0; c < a.length; c++) a[c] = e(a[c], b);\n          else if (\"object\" == typeof a) for (var d in a) a[d] = e(a[d], b);\n          return a;\n        }\n        var f = c(10),\n          g = c(12),\n          h = Object.prototype.toString,\n          i =\n            \"function\" == typeof a.Blob ||\n            \"[object BlobConstructor]\" === h.call(a.Blob),\n          j =\n            \"function\" == typeof a.File ||\n            \"[object FileConstructor]\" === h.call(a.File);\n        (b.deconstructPacket = function(a) {\n          var b = [],\n            c = a.data,\n            e = a;\n          return (\n            (e.data = d(c, b)),\n            (e.attachments = b.length),\n            { packet: e, buffers: b }\n          );\n        }),\n          (b.reconstructPacket = function(a, b) {\n            return (a.data = e(a.data, b)), (a.attachments = void 0), a;\n          }),\n          (b.removeBlobs = function(a, b) {\n            function c(a, h, k) {\n              if (!a) return a;\n              if ((i && a instanceof Blob) || (j && a instanceof File)) {\n                d++;\n                var l = new FileReader();\n                (l.onload = function() {\n                  k ? (k[h] = this.result) : (e = this.result), --d || b(e);\n                }),\n                  l.readAsArrayBuffer(a);\n              } else if (f(a)) for (var m = 0; m < a.length; m++) c(a[m], m, a);\n              else if (\"object\" == typeof a && !g(a))\n                for (var n in a) c(a[n], n, a);\n            }\n            var d = 0,\n              e = a;\n            c(e), d || b(e);\n          });\n      }.call(\n        b,\n        (function() {\n          return this;\n        })()\n      ));\n    },\n    function(a, b) {\n      (function(b) {\n        function c(a) {\n          return (\n            (b.Buffer && b.Buffer.isBuffer(a)) ||\n            (b.ArrayBuffer && a instanceof ArrayBuffer)\n          );\n        }\n        a.exports = c;\n      }.call(\n        b,\n        (function() {\n          return this;\n        })()\n      ));\n    },\n    function(a, b, c) {\n      \"use strict\";\n      function d(a, b) {\n        if (!(this instanceof d)) return new d(a, b);\n        a &&\n          \"object\" === (\"undefined\" == typeof a ? \"undefined\" : e(a)) &&\n          ((b = a), (a = void 0)),\n          (b = b || {}),\n          (b.path = b.path || \"/socket.io\"),\n          (this.nsps = {}),\n          (this.subs = []),\n          (this.opts = b),\n          this.reconnection(b.reconnection !== !1),\n          this.reconnectionAttempts(b.reconnectionAttempts || 1 / 0),\n          this.reconnectionDelay(b.reconnectionDelay || 1e3),\n          this.reconnectionDelayMax(b.reconnectionDelayMax || 5e3),\n          this.randomizationFactor(b.randomizationFactor || 0.5),\n          (this.backoff = new n({\n            min: this.reconnectionDelay(),\n            max: this.reconnectionDelayMax(),\n            jitter: this.randomizationFactor()\n          })),\n          this.timeout(null == b.timeout ? 2e4 : b.timeout),\n          (this.readyState = \"closed\"),\n          (this.uri = a),\n          (this.connecting = []),\n          (this.lastPing = null),\n          (this.encoding = !1),\n          (this.packetBuffer = []);\n        var c = b.parser || i;\n        (this.encoder = new c.Encoder()),\n          (this.decoder = new c.Decoder()),\n          (this.autoConnect = b.autoConnect !== !1),\n          this.autoConnect && this.open();\n      }\n      var e =\n          \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator\n            ? function(a) {\n                return typeof a;\n              }\n            : function(a) {\n                return a &&\n                  \"function\" == typeof Symbol &&\n                  a.constructor === Symbol &&\n                  a !== Symbol.prototype\n                  ? \"symbol\"\n                  : typeof a;\n              },\n        f = c(14),\n        g = c(39),\n        h = c(8),\n        i = c(7),\n        j = c(41),\n        k = c(42),\n        l = c(3)(\"socket.io-client:manager\"),\n        m = c(37),\n        n = c(43),\n        o = Object.prototype.hasOwnProperty;\n      (a.exports = d),\n        (d.prototype.emitAll = function() {\n          this.emit.apply(this, arguments);\n          for (var a in this.nsps)\n            o.call(this.nsps, a) &&\n              this.nsps[a].emit.apply(this.nsps[a], arguments);\n        }),\n        (d.prototype.updateSocketIds = function() {\n          for (var a in this.nsps)\n            o.call(this.nsps, a) && (this.nsps[a].id = this.generateId(a));\n        }),\n        (d.prototype.generateId = function(a) {\n          return (\"/\" === a ? \"\" : a + \"#\") + this.engine.id;\n        }),\n        h(d.prototype),\n        (d.prototype.reconnection = function(a) {\n          return arguments.length\n            ? ((this._reconnection = !!a), this)\n            : this._reconnection;\n        }),\n        (d.prototype.reconnectionAttempts = function(a) {\n          return arguments.length\n            ? ((this._reconnectionAttempts = a), this)\n            : this._reconnectionAttempts;\n        }),\n        (d.prototype.reconnectionDelay = function(a) {\n          return arguments.length\n            ? ((this._reconnectionDelay = a),\n              this.backoff && this.backoff.setMin(a),\n              this)\n            : this._reconnectionDelay;\n        }),\n        (d.prototype.randomizationFactor = function(a) {\n          return arguments.length\n            ? ((this._randomizationFactor = a),\n              this.backoff && this.backoff.setJitter(a),\n              this)\n            : this._randomizationFactor;\n        }),\n        (d.prototype.reconnectionDelayMax = function(a) {\n          return arguments.length\n            ? ((this._reconnectionDelayMax = a),\n              this.backoff && this.backoff.setMax(a),\n              this)\n            : this._reconnectionDelayMax;\n        }),\n        (d.prototype.timeout = function(a) {\n          return arguments.length ? ((this._timeout = a), this) : this._timeout;\n        }),\n        (d.prototype.maybeReconnectOnOpen = function() {\n          !this.reconnecting &&\n            this._reconnection &&\n            0 === this.backoff.attempts &&\n            this.reconnect();\n        }),\n        (d.prototype.open = d.prototype.connect = function(a, b) {\n          if (\n            (l(\"readyState %s\", this.readyState),\n            ~this.readyState.indexOf(\"open\"))\n          )\n            return this;\n          l(\"opening %s\", this.uri), (this.engine = f(this.uri, this.opts));\n          var c = this.engine,\n            d = this;\n          (this.readyState = \"opening\"), (this.skipReconnect = !1);\n          var e = j(c, \"open\", function() {\n              d.onopen(), a && a();\n            }),\n            g = j(c, \"error\", function(b) {\n              if (\n                (l(\"connect_error\"),\n                d.cleanup(),\n                (d.readyState = \"closed\"),\n                d.emitAll(\"connect_error\", b),\n                a)\n              ) {\n                var c = new Error(\"Connection error\");\n                (c.data = b), a(c);\n              } else d.maybeReconnectOnOpen();\n            });\n          if (!1 !== this._timeout) {\n            var h = this._timeout;\n            l(\"connect attempt will timeout after %d\", h);\n            var i = setTimeout(function() {\n              l(\"connect attempt timed out after %d\", h),\n                e.destroy(),\n                c.close(),\n                c.emit(\"error\", \"timeout\"),\n                d.emitAll(\"connect_timeout\", h);\n            }, h);\n            this.subs.push({\n              destroy: function() {\n                clearTimeout(i);\n              }\n            });\n          }\n          return this.subs.push(e), this.subs.push(g), this;\n        }),\n        (d.prototype.onopen = function() {\n          l(\"open\"),\n            this.cleanup(),\n            (this.readyState = \"open\"),\n            this.emit(\"open\");\n          var a = this.engine;\n          this.subs.push(j(a, \"data\", k(this, \"ondata\"))),\n            this.subs.push(j(a, \"ping\", k(this, \"onping\"))),\n            this.subs.push(j(a, \"pong\", k(this, \"onpong\"))),\n            this.subs.push(j(a, \"error\", k(this, \"onerror\"))),\n            this.subs.push(j(a, \"close\", k(this, \"onclose\"))),\n            this.subs.push(j(this.decoder, \"decoded\", k(this, \"ondecoded\")));\n        }),\n        (d.prototype.onping = function() {\n          (this.lastPing = new Date()), this.emitAll(\"ping\");\n        }),\n        (d.prototype.onpong = function() {\n          this.emitAll(\"pong\", new Date() - this.lastPing);\n        }),\n        (d.prototype.ondata = function(a) {\n          this.decoder.add(a);\n        }),\n        (d.prototype.ondecoded = function(a) {\n          this.emit(\"packet\", a);\n        }),\n        (d.prototype.onerror = function(a) {\n          l(\"error\", a), this.emitAll(\"error\", a);\n        }),\n        (d.prototype.socket = function(a, b) {\n          function c() {\n            ~m(e.connecting, d) || e.connecting.push(d);\n          }\n          var d = this.nsps[a];\n          if (!d) {\n            (d = new g(this, a, b)), (this.nsps[a] = d);\n            var e = this;\n            d.on(\"connecting\", c),\n              d.on(\"connect\", function() {\n                d.id = e.generateId(a);\n              }),\n              this.autoConnect && c();\n          }\n          return d;\n        }),\n        (d.prototype.destroy = function(a) {\n          var b = m(this.connecting, a);\n          ~b && this.connecting.splice(b, 1),\n            this.connecting.length || this.close();\n        }),\n        (d.prototype.packet = function(a) {\n          l(\"writing packet %j\", a);\n          var b = this;\n          a.query && 0 === a.type && (a.nsp += \"?\" + a.query),\n            b.encoding\n              ? b.packetBuffer.push(a)\n              : ((b.encoding = !0),\n                this.encoder.encode(a, function(c) {\n                  for (var d = 0; d < c.length; d++)\n                    b.engine.write(c[d], a.options);\n                  (b.encoding = !1), b.processPacketQueue();\n                }));\n        }),\n        (d.prototype.processPacketQueue = function() {\n          if (this.packetBuffer.length > 0 && !this.encoding) {\n            var a = this.packetBuffer.shift();\n            this.packet(a);\n          }\n        }),\n        (d.prototype.cleanup = function() {\n          l(\"cleanup\");\n          for (var a = this.subs.length, b = 0; b < a; b++) {\n            var c = this.subs.shift();\n            c.destroy();\n          }\n          (this.packetBuffer = []),\n            (this.encoding = !1),\n            (this.lastPing = null),\n            this.decoder.destroy();\n        }),\n        (d.prototype.close = d.prototype.disconnect = function() {\n          l(\"disconnect\"),\n            (this.skipReconnect = !0),\n            (this.reconnecting = !1),\n            \"opening\" === this.readyState && this.cleanup(),\n            this.backoff.reset(),\n            (this.readyState = \"closed\"),\n            this.engine && this.engine.close();\n        }),\n        (d.prototype.onclose = function(a) {\n          l(\"onclose\"),\n            this.cleanup(),\n            this.backoff.reset(),\n            (this.readyState = \"closed\"),\n            this.emit(\"close\", a),\n            this._reconnection && !this.skipReconnect && this.reconnect();\n        }),\n        (d.prototype.reconnect = function() {\n          if (this.reconnecting || this.skipReconnect) return this;\n          var a = this;\n          if (this.backoff.attempts >= this._reconnectionAttempts)\n            l(\"reconnect failed\"),\n              this.backoff.reset(),\n              this.emitAll(\"reconnect_failed\"),\n              (this.reconnecting = !1);\n          else {\n            var b = this.backoff.duration();\n            l(\"will wait %dms before reconnect attempt\", b),\n              (this.reconnecting = !0);\n            var c = setTimeout(function() {\n              a.skipReconnect ||\n                (l(\"attempting reconnect\"),\n                a.emitAll(\"reconnect_attempt\", a.backoff.attempts),\n                a.emitAll(\"reconnecting\", a.backoff.attempts),\n                a.skipReconnect ||\n                  a.open(function(b) {\n                    b\n                      ? (l(\"reconnect attempt error\"),\n                        (a.reconnecting = !1),\n                        a.reconnect(),\n                        a.emitAll(\"reconnect_error\", b.data))\n                      : (l(\"reconnect success\"), a.onreconnect());\n                  }));\n            }, b);\n            this.subs.push({\n              destroy: function() {\n                clearTimeout(c);\n              }\n            });\n          }\n        }),\n        (d.prototype.onreconnect = function() {\n          var a = this.backoff.attempts;\n          (this.reconnecting = !1),\n            this.backoff.reset(),\n            this.updateSocketIds(),\n            this.emitAll(\"reconnect\", a);\n        });\n    },\n    function(a, b, c) {\n      a.exports = c(15);\n    },\n    function(a, b, c) {\n      (a.exports = c(16)), (a.exports.parser = c(23));\n    },\n    function(a, b, c) {\n      (function(b) {\n        function d(a, c) {\n          if (!(this instanceof d)) return new d(a, c);\n          (c = c || {}),\n            a && \"object\" == typeof a && ((c = a), (a = null)),\n            a\n              ? ((a = k(a)),\n                (c.hostname = a.host),\n                (c.secure = \"https\" === a.protocol || \"wss\" === a.protocol),\n                (c.port = a.port),\n                a.query && (c.query = a.query))\n              : c.host && (c.hostname = k(c.host).host),\n            (this.secure =\n              null != c.secure\n                ? c.secure\n                : b.location && \"https:\" === location.protocol),\n            c.hostname && !c.port && (c.port = this.secure ? \"443\" : \"80\"),\n            (this.agent = c.agent || !1),\n            (this.hostname =\n              c.hostname || (b.location ? location.hostname : \"localhost\")),\n            (this.port =\n              c.port ||\n              (b.location && location.port\n                ? location.port\n                : this.secure\n                ? 443\n                : 80)),\n            (this.query = c.query || {}),\n            \"string\" == typeof this.query &&\n              (this.query = m.decode(this.query)),\n            (this.upgrade = !1 !== c.upgrade),\n            (this.path = (c.path || \"/engine.io\").replace(/\\/$/, \"\") + \"/\"),\n            (this.forceJSONP = !!c.forceJSONP),\n            (this.jsonp = !1 !== c.jsonp),\n            (this.forceBase64 = !!c.forceBase64),\n            (this.enablesXDR = !!c.enablesXDR),\n            (this.timestampParam = c.timestampParam || \"t\"),\n            (this.timestampRequests = c.timestampRequests),\n            (this.transports = c.transports || [\"polling\", \"websocket\"]),\n            (this.transportOptions = c.transportOptions || {}),\n            (this.readyState = \"\"),\n            (this.writeBuffer = []),\n            (this.prevBufferLen = 0),\n            (this.policyPort = c.policyPort || 843),\n            (this.rememberUpgrade = c.rememberUpgrade || !1),\n            (this.binaryType = null),\n            (this.onlyBinaryUpgrades = c.onlyBinaryUpgrades),\n            (this.perMessageDeflate =\n              !1 !== c.perMessageDeflate && (c.perMessageDeflate || {})),\n            !0 === this.perMessageDeflate && (this.perMessageDeflate = {}),\n            this.perMessageDeflate &&\n              null == this.perMessageDeflate.threshold &&\n              (this.perMessageDeflate.threshold = 1024),\n            (this.pfx = c.pfx || null),\n            (this.key = c.key || null),\n            (this.passphrase = c.passphrase || null),\n            (this.cert = c.cert || null),\n            (this.ca = c.ca || null),\n            (this.ciphers = c.ciphers || null),\n            (this.rejectUnauthorized =\n              void 0 === c.rejectUnauthorized || c.rejectUnauthorized),\n            (this.forceNode = !!c.forceNode);\n          var e = \"object\" == typeof b && b;\n          e.global === e &&\n            (c.extraHeaders &&\n              Object.keys(c.extraHeaders).length > 0 &&\n              (this.extraHeaders = c.extraHeaders),\n            c.localAddress && (this.localAddress = c.localAddress)),\n            (this.id = null),\n            (this.upgrades = null),\n            (this.pingInterval = null),\n            (this.pingTimeout = null),\n            (this.pingIntervalTimer = null),\n            (this.pingTimeoutTimer = null),\n            this.open();\n        }\n        function e(a) {\n          var b = {};\n          for (var c in a) a.hasOwnProperty(c) && (b[c] = a[c]);\n          return b;\n        }\n        var f = c(17),\n          g = c(8),\n          h = c(3)(\"engine.io-client:socket\"),\n          i = c(37),\n          j = c(23),\n          k = c(2),\n          l = c(38),\n          m = c(31);\n        (a.exports = d),\n          (d.priorWebsocketSuccess = !1),\n          g(d.prototype),\n          (d.protocol = j.protocol),\n          (d.Socket = d),\n          (d.Transport = c(22)),\n          (d.transports = c(17)),\n          (d.parser = c(23)),\n          (d.prototype.createTransport = function(a) {\n            h('creating transport \"%s\"', a);\n            var b = e(this.query);\n            (b.EIO = j.protocol), (b.transport = a);\n            var c = this.transportOptions[a] || {};\n            this.id && (b.sid = this.id);\n            var d = new f[a]({\n              query: b,\n              socket: this,\n              agent: c.agent || this.agent,\n              hostname: c.hostname || this.hostname,\n              port: c.port || this.port,\n              secure: c.secure || this.secure,\n              path: c.path || this.path,\n              forceJSONP: c.forceJSONP || this.forceJSONP,\n              jsonp: c.jsonp || this.jsonp,\n              forceBase64: c.forceBase64 || this.forceBase64,\n              enablesXDR: c.enablesXDR || this.enablesXDR,\n              timestampRequests: c.timestampRequests || this.timestampRequests,\n              timestampParam: c.timestampParam || this.timestampParam,\n              policyPort: c.policyPort || this.policyPort,\n              pfx: c.pfx || this.pfx,\n              key: c.key || this.key,\n              passphrase: c.passphrase || this.passphrase,\n              cert: c.cert || this.cert,\n              ca: c.ca || this.ca,\n              ciphers: c.ciphers || this.ciphers,\n              rejectUnauthorized:\n                c.rejectUnauthorized || this.rejectUnauthorized,\n              perMessageDeflate: c.perMessageDeflate || this.perMessageDeflate,\n              extraHeaders: c.extraHeaders || this.extraHeaders,\n              forceNode: c.forceNode || this.forceNode,\n              localAddress: c.localAddress || this.localAddress,\n              requestTimeout: c.requestTimeout || this.requestTimeout,\n              protocols: c.protocols || void 0\n            });\n            return d;\n          }),\n          (d.prototype.open = function() {\n            var a;\n            if (\n              this.rememberUpgrade &&\n              d.priorWebsocketSuccess &&\n              this.transports.indexOf(\"websocket\") !== -1\n            )\n              a = \"websocket\";\n            else {\n              if (0 === this.transports.length) {\n                var b = this;\n                return void setTimeout(function() {\n                  b.emit(\"error\", \"No transports available\");\n                }, 0);\n              }\n              a = this.transports[0];\n            }\n            this.readyState = \"opening\";\n            try {\n              a = this.createTransport(a);\n            } catch (c) {\n              return this.transports.shift(), void this.open();\n            }\n            a.open(), this.setTransport(a);\n          }),\n          (d.prototype.setTransport = function(a) {\n            h(\"setting transport %s\", a.name);\n            var b = this;\n            this.transport &&\n              (h(\"clearing existing transport %s\", this.transport.name),\n              this.transport.removeAllListeners()),\n              (this.transport = a),\n              a\n                .on(\"drain\", function() {\n                  b.onDrain();\n                })\n                .on(\"packet\", function(a) {\n                  b.onPacket(a);\n                })\n                .on(\"error\", function(a) {\n                  b.onError(a);\n                })\n                .on(\"close\", function() {\n                  b.onClose(\"transport close\");\n                });\n          }),\n          (d.prototype.probe = function(a) {\n            function b() {\n              if (m.onlyBinaryUpgrades) {\n                var b = !this.supportsBinary && m.transport.supportsBinary;\n                l = l || b;\n              }\n              l ||\n                (h('probe transport \"%s\" opened', a),\n                k.send([{ type: \"ping\", data: \"probe\" }]),\n                k.once(\"packet\", function(b) {\n                  if (!l)\n                    if (\"pong\" === b.type && \"probe\" === b.data) {\n                      if (\n                        (h('probe transport \"%s\" pong', a),\n                        (m.upgrading = !0),\n                        m.emit(\"upgrading\", k),\n                        !k)\n                      )\n                        return;\n                      (d.priorWebsocketSuccess = \"websocket\" === k.name),\n                        h('pausing current transport \"%s\"', m.transport.name),\n                        m.transport.pause(function() {\n                          l ||\n                            (\"closed\" !== m.readyState &&\n                              (h(\n                                \"changing transport and sending upgrade packet\"\n                              ),\n                              j(),\n                              m.setTransport(k),\n                              k.send([{ type: \"upgrade\" }]),\n                              m.emit(\"upgrade\", k),\n                              (k = null),\n                              (m.upgrading = !1),\n                              m.flush()));\n                        });\n                    } else {\n                      h('probe transport \"%s\" failed', a);\n                      var c = new Error(\"probe error\");\n                      (c.transport = k.name), m.emit(\"upgradeError\", c);\n                    }\n                }));\n            }\n            function c() {\n              l || ((l = !0), j(), k.close(), (k = null));\n            }\n            function e(b) {\n              var d = new Error(\"probe error: \" + b);\n              (d.transport = k.name),\n                c(),\n                h('probe transport \"%s\" failed because of error: %s', a, b),\n                m.emit(\"upgradeError\", d);\n            }\n            function f() {\n              e(\"transport closed\");\n            }\n            function g() {\n              e(\"socket closed\");\n            }\n            function i(a) {\n              k &&\n                a.name !== k.name &&\n                (h('\"%s\" works - aborting \"%s\"', a.name, k.name), c());\n            }\n            function j() {\n              k.removeListener(\"open\", b),\n                k.removeListener(\"error\", e),\n                k.removeListener(\"close\", f),\n                m.removeListener(\"close\", g),\n                m.removeListener(\"upgrading\", i);\n            }\n            h('probing transport \"%s\"', a);\n            var k = this.createTransport(a, { probe: 1 }),\n              l = !1,\n              m = this;\n            (d.priorWebsocketSuccess = !1),\n              k.once(\"open\", b),\n              k.once(\"error\", e),\n              k.once(\"close\", f),\n              this.once(\"close\", g),\n              this.once(\"upgrading\", i),\n              k.open();\n          }),\n          (d.prototype.onOpen = function() {\n            if (\n              (h(\"socket open\"),\n              (this.readyState = \"open\"),\n              (d.priorWebsocketSuccess = \"websocket\" === this.transport.name),\n              this.emit(\"open\"),\n              this.flush(),\n              \"open\" === this.readyState &&\n                this.upgrade &&\n                this.transport.pause)\n            ) {\n              h(\"starting upgrade probes\");\n              for (var a = 0, b = this.upgrades.length; a < b; a++)\n                this.probe(this.upgrades[a]);\n            }\n          }),\n          (d.prototype.onPacket = function(a) {\n            if (\n              \"opening\" === this.readyState ||\n              \"open\" === this.readyState ||\n              \"closing\" === this.readyState\n            )\n              switch (\n                (h('socket receive: type \"%s\", data \"%s\"', a.type, a.data),\n                this.emit(\"packet\", a),\n                this.emit(\"heartbeat\"),\n                a.type)\n              ) {\n                case \"open\":\n                  this.onHandshake(l(a.data));\n                  break;\n                case \"pong\":\n                  this.setPing(), this.emit(\"pong\");\n                  break;\n                case \"error\":\n                  var b = new Error(\"server error\");\n                  (b.code = a.data), this.onError(b);\n                  break;\n                case \"message\":\n                  this.emit(\"data\", a.data), this.emit(\"message\", a.data);\n              }\n            else\n              h('packet received with socket readyState \"%s\"', this.readyState);\n          }),\n          (d.prototype.onHandshake = function(a) {\n            this.emit(\"handshake\", a),\n              (this.id = a.sid),\n              (this.transport.query.sid = a.sid),\n              (this.upgrades = this.filterUpgrades(a.upgrades)),\n              (this.pingInterval = a.pingInterval),\n              (this.pingTimeout = a.pingTimeout),\n              this.onOpen(),\n              \"closed\" !== this.readyState &&\n                (this.setPing(),\n                this.removeListener(\"heartbeat\", this.onHeartbeat),\n                this.on(\"heartbeat\", this.onHeartbeat));\n          }),\n          (d.prototype.onHeartbeat = function(a) {\n            clearTimeout(this.pingTimeoutTimer);\n            var b = this;\n            b.pingTimeoutTimer = setTimeout(function() {\n              \"closed\" !== b.readyState && b.onClose(\"ping timeout\");\n            }, a || b.pingInterval + b.pingTimeout);\n          }),\n          (d.prototype.setPing = function() {\n            var a = this;\n            clearTimeout(a.pingIntervalTimer),\n              (a.pingIntervalTimer = setTimeout(function() {\n                h(\n                  \"writing ping packet - expecting pong within %sms\",\n                  a.pingTimeout\n                ),\n                  a.ping(),\n                  a.onHeartbeat(a.pingTimeout);\n              }, a.pingInterval));\n          }),\n          (d.prototype.ping = function() {\n            var a = this;\n            this.sendPacket(\"ping\", function() {\n              a.emit(\"ping\");\n            });\n          }),\n          (d.prototype.onDrain = function() {\n            this.writeBuffer.splice(0, this.prevBufferLen),\n              (this.prevBufferLen = 0),\n              0 === this.writeBuffer.length ? this.emit(\"drain\") : this.flush();\n          }),\n          (d.prototype.flush = function() {\n            \"closed\" !== this.readyState &&\n              this.transport.writable &&\n              !this.upgrading &&\n              this.writeBuffer.length &&\n              (h(\"flushing %d packets in socket\", this.writeBuffer.length),\n              this.transport.send(this.writeBuffer),\n              (this.prevBufferLen = this.writeBuffer.length),\n              this.emit(\"flush\"));\n          }),\n          (d.prototype.write = d.prototype.send = function(a, b, c) {\n            return this.sendPacket(\"message\", a, b, c), this;\n          }),\n          (d.prototype.sendPacket = function(a, b, c, d) {\n            if (\n              (\"function\" == typeof b && ((d = b), (b = void 0)),\n              \"function\" == typeof c && ((d = c), (c = null)),\n              \"closing\" !== this.readyState && \"closed\" !== this.readyState)\n            ) {\n              (c = c || {}), (c.compress = !1 !== c.compress);\n              var e = { type: a, data: b, options: c };\n              this.emit(\"packetCreate\", e),\n                this.writeBuffer.push(e),\n                d && this.once(\"flush\", d),\n                this.flush();\n            }\n          }),\n          (d.prototype.close = function() {\n            function a() {\n              d.onClose(\"forced close\"),\n                h(\"socket closing - telling transport to close\"),\n                d.transport.close();\n            }\n            function b() {\n              d.removeListener(\"upgrade\", b),\n                d.removeListener(\"upgradeError\", b),\n                a();\n            }\n            function c() {\n              d.once(\"upgrade\", b), d.once(\"upgradeError\", b);\n            }\n            if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n              this.readyState = \"closing\";\n              var d = this;\n              this.writeBuffer.length\n                ? this.once(\"drain\", function() {\n                    this.upgrading ? c() : a();\n                  })\n                : this.upgrading\n                ? c()\n                : a();\n            }\n            return this;\n          }),\n          (d.prototype.onError = function(a) {\n            h(\"socket error %j\", a),\n              (d.priorWebsocketSuccess = !1),\n              this.emit(\"error\", a),\n              this.onClose(\"transport error\", a);\n          }),\n          (d.prototype.onClose = function(a, b) {\n            if (\n              \"opening\" === this.readyState ||\n              \"open\" === this.readyState ||\n              \"closing\" === this.readyState\n            ) {\n              h('socket close with reason: \"%s\"', a);\n              var c = this;\n              clearTimeout(this.pingIntervalTimer),\n                clearTimeout(this.pingTimeoutTimer),\n                this.transport.removeAllListeners(\"close\"),\n                this.transport.close(),\n                this.transport.removeAllListeners(),\n                (this.readyState = \"closed\"),\n                (this.id = null),\n                this.emit(\"close\", a, b),\n                (c.writeBuffer = []),\n                (c.prevBufferLen = 0);\n            }\n          }),\n          (d.prototype.filterUpgrades = function(a) {\n            for (var b = [], c = 0, d = a.length; c < d; c++)\n              ~i(this.transports, a[c]) && b.push(a[c]);\n            return b;\n          });\n      }.call(\n        b,\n        (function() {\n          return this;\n        })()\n      ));\n    },\n    function(a, b, c) {\n      (function(a) {\n        function d(b) {\n          var c,\n            d = !1,\n            h = !1,\n            i = !1 !== b.jsonp;\n          if (a.location) {\n            var j = \"https:\" === location.protocol,\n              k = location.port;\n            k || (k = j ? 443 : 80),\n              (d = b.hostname !== location.hostname || k !== b.port),\n              (h = b.secure !== j);\n          }\n          if (\n            ((b.xdomain = d),\n            (b.xscheme = h),\n            (c = new e(b)),\n            \"open\" in c && !b.forceJSONP)\n          )\n            return new f(b);\n          if (!i) throw new Error(\"JSONP disabled\");\n          return new g(b);\n        }\n        var e = c(18),\n          f = c(20),\n          g = c(34),\n          h = c(35);\n        (b.polling = d), (b.websocket = h);\n      }.call(\n        b,\n        (function() {\n          return this;\n        })()\n      ));\n    },\n    function(a, b, c) {\n      (function(b) {\n        var d = c(19);\n        a.exports = function(a) {\n          var c = a.xdomain,\n            e = a.xscheme,\n            f = a.enablesXDR;\n          try {\n            if (\"undefined\" != typeof XMLHttpRequest && (!c || d))\n              return new XMLHttpRequest();\n          } catch (g) {}\n          try {\n            if (\"undefined\" != typeof XDomainRequest && !e && f)\n              return new XDomainRequest();\n          } catch (g) {}\n          if (!c)\n            try {\n              return new b[([\"Active\"].concat(\"Object\").join(\"X\"))](\n                \"Microsoft.XMLHTTP\"\n              );\n            } catch (g) {}\n        };\n      }.call(\n        b,\n        (function() {\n          return this;\n        })()\n      ));\n    },\n    function(a, b) {\n      try {\n        a.exports =\n          \"undefined\" != typeof XMLHttpRequest &&\n          \"withCredentials\" in new XMLHttpRequest();\n      } catch (c) {\n        a.exports = !1;\n      }\n    },\n    function(a, b, c) {\n      (function(b) {\n        function d() {}\n        function e(a) {\n          if (\n            (i.call(this, a),\n            (this.requestTimeout = a.requestTimeout),\n            (this.extraHeaders = a.extraHeaders),\n            b.location)\n          ) {\n            var c = \"https:\" === location.protocol,\n              d = location.port;\n            d || (d = c ? 443 : 80),\n              (this.xd = a.hostname !== b.location.hostname || d !== a.port),\n              (this.xs = a.secure !== c);\n          }\n        }\n        function f(a) {\n          (this.method = a.method || \"GET\"),\n            (this.uri = a.uri),\n            (this.xd = !!a.xd),\n            (this.xs = !!a.xs),\n            (this.async = !1 !== a.async),\n            (this.data = void 0 !== a.data ? a.data : null),\n            (this.agent = a.agent),\n            (this.isBinary = a.isBinary),\n            (this.supportsBinary = a.supportsBinary),\n            (this.enablesXDR = a.enablesXDR),\n            (this.requestTimeout = a.requestTimeout),\n            (this.pfx = a.pfx),\n            (this.key = a.key),\n            (this.passphrase = a.passphrase),\n            (this.cert = a.cert),\n            (this.ca = a.ca),\n            (this.ciphers = a.ciphers),\n            (this.rejectUnauthorized = a.rejectUnauthorized),\n            (this.extraHeaders = a.extraHeaders),\n            this.create();\n        }\n        function g() {\n          for (var a in f.requests)\n            f.requests.hasOwnProperty(a) && f.requests[a].abort();\n        }\n        var h = c(18),\n          i = c(21),\n          j = c(8),\n          k = c(32),\n          l = c(3)(\"engine.io-client:polling-xhr\");\n        (a.exports = e),\n          (a.exports.Request = f),\n          k(e, i),\n          (e.prototype.supportsBinary = !0),\n          (e.prototype.request = function(a) {\n            return (\n              (a = a || {}),\n              (a.uri = this.uri()),\n              (a.xd = this.xd),\n              (a.xs = this.xs),\n              (a.agent = this.agent || !1),\n              (a.supportsBinary = this.supportsBinary),\n              (a.enablesXDR = this.enablesXDR),\n              (a.pfx = this.pfx),\n              (a.key = this.key),\n              (a.passphrase = this.passphrase),\n              (a.cert = this.cert),\n              (a.ca = this.ca),\n              (a.ciphers = this.ciphers),\n              (a.rejectUnauthorized = this.rejectUnauthorized),\n              (a.requestTimeout = this.requestTimeout),\n              (a.extraHeaders = this.extraHeaders),\n              new f(a)\n            );\n          }),\n          (e.prototype.doWrite = function(a, b) {\n            var c = \"string\" != typeof a && void 0 !== a,\n              d = this.request({ method: \"POST\", data: a, isBinary: c }),\n              e = this;\n            d.on(\"success\", b),\n              d.on(\"error\", function(a) {\n                e.onError(\"xhr post error\", a);\n              }),\n              (this.sendXhr = d);\n          }),\n          (e.prototype.doPoll = function() {\n            l(\"xhr poll\");\n            var a = this.request(),\n              b = this;\n            a.on(\"data\", function(a) {\n              b.onData(a);\n            }),\n              a.on(\"error\", function(a) {\n                b.onError(\"xhr poll error\", a);\n              }),\n              (this.pollXhr = a);\n          }),\n          j(f.prototype),\n          (f.prototype.create = function() {\n            var a = {\n              agent: this.agent,\n              xdomain: this.xd,\n              xscheme: this.xs,\n              enablesXDR: this.enablesXDR\n            };\n            (a.pfx = this.pfx),\n              (a.key = this.key),\n              (a.passphrase = this.passphrase),\n              (a.cert = this.cert),\n              (a.ca = this.ca),\n              (a.ciphers = this.ciphers),\n              (a.rejectUnauthorized = this.rejectUnauthorized);\n            var c = (this.xhr = new h(a)),\n              d = this;\n            try {\n              l(\"xhr open %s: %s\", this.method, this.uri),\n                c.open(this.method, this.uri, this.async);\n              try {\n                if (this.extraHeaders) {\n                  c.setDisableHeaderCheck && c.setDisableHeaderCheck(!0);\n                  for (var e in this.extraHeaders)\n                    this.extraHeaders.hasOwnProperty(e) &&\n                      c.setRequestHeader(e, this.extraHeaders[e]);\n                }\n              } catch (g) {}\n              if (\"POST\" === this.method)\n                try {\n                  this.isBinary\n                    ? c.setRequestHeader(\n                        \"Content-type\",\n                        \"application/octet-stream\"\n                      )\n                    : c.setRequestHeader(\n                        \"Content-type\",\n                        \"text/plain;charset=UTF-8\"\n                      );\n                } catch (g) {}\n              try {\n                c.setRequestHeader(\"Accept\", \"*/*\");\n              } catch (g) {}\n              \"withCredentials\" in c && (c.withCredentials = !0),\n                this.requestTimeout && (c.timeout = this.requestTimeout),\n                this.hasXDR()\n                  ? ((c.onload = function() {\n                      d.onLoad();\n                    }),\n                    (c.onerror = function() {\n                      d.onError(c.responseText);\n                    }))\n                  : (c.onreadystatechange = function() {\n                      if (2 === c.readyState) {\n                        var a;\n                        try {\n                          a = c.getResponseHeader(\"Content-Type\");\n                        } catch (b) {}\n                        \"application/octet-stream\" === a &&\n                          (c.responseType = \"arraybuffer\");\n                      }\n                      4 === c.readyState &&\n                        (200 === c.status || 1223 === c.status\n                          ? d.onLoad()\n                          : setTimeout(function() {\n                              d.onError(c.status);\n                            }, 0));\n                    }),\n                l(\"xhr data %s\", this.data),\n                c.send(this.data);\n            } catch (g) {\n              return void setTimeout(function() {\n                d.onError(g);\n              }, 0);\n            }\n            b.document &&\n              ((this.index = f.requestsCount++),\n              (f.requests[this.index] = this));\n          }),\n          (f.prototype.onSuccess = function() {\n            this.emit(\"success\"), this.cleanup();\n          }),\n          (f.prototype.onData = function(a) {\n            this.emit(\"data\", a), this.onSuccess();\n          }),\n          (f.prototype.onError = function(a) {\n            this.emit(\"error\", a), this.cleanup(!0);\n          }),\n          (f.prototype.cleanup = function(a) {\n            if (\"undefined\" != typeof this.xhr && null !== this.xhr) {\n              if (\n                (this.hasXDR()\n                  ? (this.xhr.onload = this.xhr.onerror = d)\n                  : (this.xhr.onreadystatechange = d),\n                a)\n              )\n                try {\n                  this.xhr.abort();\n                } catch (c) {}\n              b.document && delete f.requests[this.index], (this.xhr = null);\n            }\n          }),\n          (f.prototype.onLoad = function() {\n            var a;\n            try {\n              var b;\n              try {\n                b = this.xhr.getResponseHeader(\"Content-Type\");\n              } catch (c) {}\n              a =\n                \"application/octet-stream\" === b\n                  ? this.xhr.response || this.xhr.responseText\n                  : this.xhr.responseText;\n            } catch (c) {\n              this.onError(c);\n            }\n            null != a && this.onData(a);\n          }),\n          (f.prototype.hasXDR = function() {\n            return (\n              \"undefined\" != typeof b.XDomainRequest &&\n              !this.xs &&\n              this.enablesXDR\n            );\n          }),\n          (f.prototype.abort = function() {\n            this.cleanup();\n          }),\n          (f.requestsCount = 0),\n          (f.requests = {}),\n          b.document &&\n            (b.attachEvent\n              ? b.attachEvent(\"onunload\", g)\n              : b.addEventListener &&\n                b.addEventListener(\"beforeunload\", g, !1));\n      }.call(\n        b,\n        (function() {\n          return this;\n        })()\n      ));\n    },\n    function(a, b, c) {\n      function d(a) {\n        var b = a && a.forceBase64;\n        (k && !b) || (this.supportsBinary = !1), e.call(this, a);\n      }\n      var e = c(22),\n        f = c(31),\n        g = c(23),\n        h = c(32),\n        i = c(33),\n        j = c(3)(\"engine.io-client:polling\");\n      a.exports = d;\n      var k = (function() {\n        var a = c(18),\n          b = new a({ xdomain: !1 });\n        return null != b.responseType;\n      })();\n      h(d, e),\n        (d.prototype.name = \"polling\"),\n        (d.prototype.doOpen = function() {\n          this.poll();\n        }),\n        (d.prototype.pause = function(a) {\n          function b() {\n            j(\"paused\"), (c.readyState = \"paused\"), a();\n          }\n          var c = this;\n          if (((this.readyState = \"pausing\"), this.polling || !this.writable)) {\n            var d = 0;\n            this.polling &&\n              (j(\"we are currently polling - waiting to pause\"),\n              d++,\n              this.once(\"pollComplete\", function() {\n                j(\"pre-pause polling complete\"), --d || b();\n              })),\n              this.writable ||\n                (j(\"we are currently writing - waiting to pause\"),\n                d++,\n                this.once(\"drain\", function() {\n                  j(\"pre-pause writing complete\"), --d || b();\n                }));\n          } else b();\n        }),\n        (d.prototype.poll = function() {\n          j(\"polling\"), (this.polling = !0), this.doPoll(), this.emit(\"poll\");\n        }),\n        (d.prototype.onData = function(a) {\n          var b = this;\n          j(\"polling got data %s\", a);\n          var c = function(a, c, d) {\n            return (\n              \"opening\" === b.readyState && b.onOpen(),\n              \"close\" === a.type ? (b.onClose(), !1) : void b.onPacket(a)\n            );\n          };\n          g.decodePayload(a, this.socket.binaryType, c),\n            \"closed\" !== this.readyState &&\n              ((this.polling = !1),\n              this.emit(\"pollComplete\"),\n              \"open\" === this.readyState\n                ? this.poll()\n                : j('ignoring poll - transport state \"%s\"', this.readyState));\n        }),\n        (d.prototype.doClose = function() {\n          function a() {\n            j(\"writing close packet\"), b.write([{ type: \"close\" }]);\n          }\n          var b = this;\n          \"open\" === this.readyState\n            ? (j(\"transport open - closing\"), a())\n            : (j(\"transport not open - deferring close\"), this.once(\"open\", a));\n        }),\n        (d.prototype.write = function(a) {\n          var b = this;\n          this.writable = !1;\n          var c = function() {\n            (b.writable = !0), b.emit(\"drain\");\n          };\n          g.encodePayload(a, this.supportsBinary, function(a) {\n            b.doWrite(a, c);\n          });\n        }),\n        (d.prototype.uri = function() {\n          var a = this.query || {},\n            b = this.secure ? \"https\" : \"http\",\n            c = \"\";\n          !1 !== this.timestampRequests && (a[this.timestampParam] = i()),\n            this.supportsBinary || a.sid || (a.b64 = 1),\n            (a = f.encode(a)),\n            this.port &&\n              ((\"https\" === b && 443 !== Number(this.port)) ||\n                (\"http\" === b && 80 !== Number(this.port))) &&\n              (c = \":\" + this.port),\n            a.length && (a = \"?\" + a);\n          var d = this.hostname.indexOf(\":\") !== -1;\n          return (\n            b +\n            \"://\" +\n            (d ? \"[\" + this.hostname + \"]\" : this.hostname) +\n            c +\n            this.path +\n            a\n          );\n        });\n    },\n    function(a, b, c) {\n      function d(a) {\n        (this.path = a.path),\n          (this.hostname = a.hostname),\n          (this.port = a.port),\n          (this.secure = a.secure),\n          (this.query = a.query),\n          (this.timestampParam = a.timestampParam),\n          (this.timestampRequests = a.timestampRequests),\n          (this.readyState = \"\"),\n          (this.agent = a.agent || !1),\n          (this.socket = a.socket),\n          (this.enablesXDR = a.enablesXDR),\n          (this.pfx = a.pfx),\n          (this.key = a.key),\n          (this.passphrase = a.passphrase),\n          (this.cert = a.cert),\n          (this.ca = a.ca),\n          (this.ciphers = a.ciphers),\n          (this.rejectUnauthorized = a.rejectUnauthorized),\n          (this.forceNode = a.forceNode),\n          (this.extraHeaders = a.extraHeaders),\n          (this.localAddress = a.localAddress);\n      }\n      var e = c(23),\n        f = c(8);\n      (a.exports = d),\n        f(d.prototype),\n        (d.prototype.onError = function(a, b) {\n          var c = new Error(a);\n          return (\n            (c.type = \"TransportError\"),\n            (c.description = b),\n            this.emit(\"error\", c),\n            this\n          );\n        }),\n        (d.prototype.open = function() {\n          return (\n            (\"closed\" !== this.readyState && \"\" !== this.readyState) ||\n              ((this.readyState = \"opening\"), this.doOpen()),\n            this\n          );\n        }),\n        (d.prototype.close = function() {\n          return (\n            (\"opening\" !== this.readyState && \"open\" !== this.readyState) ||\n              (this.doClose(), this.onClose()),\n            this\n          );\n        }),\n        (d.prototype.send = function(a) {\n          if (\"open\" !== this.readyState) throw new Error(\"Transport not open\");\n          this.write(a);\n        }),\n        (d.prototype.onOpen = function() {\n          (this.readyState = \"open\"), (this.writable = !0), this.emit(\"open\");\n        }),\n        (d.prototype.onData = function(a) {\n          var b = e.decodePacket(a, this.socket.binaryType);\n          this.onPacket(b);\n        }),\n        (d.prototype.onPacket = function(a) {\n          this.emit(\"packet\", a);\n        }),\n        (d.prototype.onClose = function() {\n          (this.readyState = \"closed\"), this.emit(\"close\");\n        });\n    },\n    function(a, b, c) {\n      (function(a) {\n        function d(a, c) {\n          var d = \"b\" + b.packets[a.type] + a.data.data;\n          return c(d);\n        }\n        function e(a, c, d) {\n          if (!c) return b.encodeBase64Packet(a, d);\n          var e = a.data,\n            f = new Uint8Array(e),\n            g = new Uint8Array(1 + e.byteLength);\n          g[0] = s[a.type];\n          for (var h = 0; h < f.length; h++) g[h + 1] = f[h];\n          return d(g.buffer);\n        }\n        function f(a, c, d) {\n          if (!c) return b.encodeBase64Packet(a, d);\n          var e = new FileReader();\n          return (\n            (e.onload = function() {\n              (a.data = e.result), b.encodePacket(a, c, !0, d);\n            }),\n            e.readAsArrayBuffer(a.data)\n          );\n        }\n        function g(a, c, d) {\n          if (!c) return b.encodeBase64Packet(a, d);\n          if (r) return f(a, c, d);\n          var e = new Uint8Array(1);\n          e[0] = s[a.type];\n          var g = new v([e.buffer, a.data]);\n          return d(g);\n        }\n        function h(a) {\n          try {\n            a = o.decode(a, { strict: !1 });\n          } catch (b) {\n            return !1;\n          }\n          return a;\n        }\n        function i(a, b, c) {\n          for (\n            var d = new Array(a.length),\n              e = n(a.length, c),\n              f = function(a, c, e) {\n                b(c, function(b, c) {\n                  (d[a] = c), e(b, d);\n                });\n              },\n              g = 0;\n            g < a.length;\n            g++\n          )\n            f(g, a[g], e);\n        }\n        var j,\n          k = c(24),\n          l = c(9),\n          m = c(25),\n          n = c(26),\n          o = c(27);\n        a && a.ArrayBuffer && (j = c(29));\n        var p =\n            \"undefined\" != typeof navigator &&\n            /Android/i.test(navigator.userAgent),\n          q =\n            \"undefined\" != typeof navigator &&\n            /PhantomJS/i.test(navigator.userAgent),\n          r = p || q;\n        b.protocol = 3;\n        var s = (b.packets = {\n            open: 0,\n            close: 1,\n            ping: 2,\n            pong: 3,\n            message: 4,\n            upgrade: 5,\n            noop: 6\n          }),\n          t = k(s),\n          u = { type: \"error\", data: \"parser error\" },\n          v = c(30);\n        (b.encodePacket = function(b, c, f, h) {\n          \"function\" == typeof c && ((h = c), (c = !1)),\n            \"function\" == typeof f && ((h = f), (f = null));\n          var i = void 0 === b.data ? void 0 : b.data.buffer || b.data;\n          if (a.ArrayBuffer && i instanceof ArrayBuffer) return e(b, c, h);\n          if (v && i instanceof a.Blob) return g(b, c, h);\n          if (i && i.base64) return d(b, h);\n          var j = s[b.type];\n          return (\n            void 0 !== b.data &&\n              (j += f\n                ? o.encode(String(b.data), { strict: !1 })\n                : String(b.data)),\n            h(\"\" + j)\n          );\n        }),\n          (b.encodeBase64Packet = function(c, d) {\n            var e = \"b\" + b.packets[c.type];\n            if (v && c.data instanceof a.Blob) {\n              var f = new FileReader();\n              return (\n                (f.onload = function() {\n                  var a = f.result.split(\",\")[1];\n                  d(e + a);\n                }),\n                f.readAsDataURL(c.data)\n              );\n            }\n            var g;\n            try {\n              g = String.fromCharCode.apply(null, new Uint8Array(c.data));\n            } catch (h) {\n              for (\n                var i = new Uint8Array(c.data), j = new Array(i.length), k = 0;\n                k < i.length;\n                k++\n              )\n                j[k] = i[k];\n              g = String.fromCharCode.apply(null, j);\n            }\n            return (e += a.btoa(g)), d(e);\n          }),\n          (b.decodePacket = function(a, c, d) {\n            if (void 0 === a) return u;\n            if (\"string\" == typeof a) {\n              if (\"b\" === a.charAt(0))\n                return b.decodeBase64Packet(a.substr(1), c);\n              if (d && ((a = h(a)), a === !1)) return u;\n              var e = a.charAt(0);\n              return Number(e) == e && t[e]\n                ? a.length > 1\n                  ? { type: t[e], data: a.substring(1) }\n                  : { type: t[e] }\n                : u;\n            }\n            var f = new Uint8Array(a),\n              e = f[0],\n              g = m(a, 1);\n            return (\n              v && \"blob\" === c && (g = new v([g])), { type: t[e], data: g }\n            );\n          }),\n          (b.decodeBase64Packet = function(a, b) {\n            var c = t[a.charAt(0)];\n            if (!j) return { type: c, data: { base64: !0, data: a.substr(1) } };\n            var d = j.decode(a.substr(1));\n            return \"blob\" === b && v && (d = new v([d])), { type: c, data: d };\n          }),\n          (b.encodePayload = function(a, c, d) {\n            function e(a) {\n              return a.length + \":\" + a;\n            }\n            function f(a, d) {\n              b.encodePacket(a, !!g && c, !1, function(a) {\n                d(null, e(a));\n              });\n            }\n            \"function\" == typeof c && ((d = c), (c = null));\n            var g = l(a);\n            return c && g\n              ? v && !r\n                ? b.encodePayloadAsBlob(a, d)\n                : b.encodePayloadAsArrayBuffer(a, d)\n              : a.length\n              ? void i(a, f, function(a, b) {\n                  return d(b.join(\"\"));\n                })\n              : d(\"0:\");\n          }),\n          (b.decodePayload = function(a, c, d) {\n            if (\"string\" != typeof a) return b.decodePayloadAsBinary(a, c, d);\n            \"function\" == typeof c && ((d = c), (c = null));\n            var e;\n            if (\"\" === a) return d(u, 0, 1);\n            for (var f, g, h = \"\", i = 0, j = a.length; i < j; i++) {\n              var k = a.charAt(i);\n              if (\":\" === k) {\n                if (\"\" === h || h != (f = Number(h))) return d(u, 0, 1);\n                if (((g = a.substr(i + 1, f)), h != g.length))\n                  return d(u, 0, 1);\n                if (g.length) {\n                  if (\n                    ((e = b.decodePacket(g, c, !1)),\n                    u.type === e.type && u.data === e.data)\n                  )\n                    return d(u, 0, 1);\n                  var l = d(e, i + f, j);\n                  if (!1 === l) return;\n                }\n                (i += f), (h = \"\");\n              } else h += k;\n            }\n            return \"\" !== h ? d(u, 0, 1) : void 0;\n          }),\n          (b.encodePayloadAsArrayBuffer = function(a, c) {\n            function d(a, c) {\n              b.encodePacket(a, !0, !0, function(a) {\n                return c(null, a);\n              });\n            }\n            return a.length\n              ? void i(a, d, function(a, b) {\n                  var d = b.reduce(function(a, b) {\n                      var c;\n                      return (\n                        (c = \"string\" == typeof b ? b.length : b.byteLength),\n                        a + c.toString().length + c + 2\n                      );\n                    }, 0),\n                    e = new Uint8Array(d),\n                    f = 0;\n                  return (\n                    b.forEach(function(a) {\n                      var b = \"string\" == typeof a,\n                        c = a;\n                      if (b) {\n                        for (\n                          var d = new Uint8Array(a.length), g = 0;\n                          g < a.length;\n                          g++\n                        )\n                          d[g] = a.charCodeAt(g);\n                        c = d.buffer;\n                      }\n                      b ? (e[f++] = 0) : (e[f++] = 1);\n                      for (\n                        var h = c.byteLength.toString(), g = 0;\n                        g < h.length;\n                        g++\n                      )\n                        e[f++] = parseInt(h[g]);\n                      e[f++] = 255;\n                      for (var d = new Uint8Array(c), g = 0; g < d.length; g++)\n                        e[f++] = d[g];\n                    }),\n                    c(e.buffer)\n                  );\n                })\n              : c(new ArrayBuffer(0));\n          }),\n          (b.encodePayloadAsBlob = function(a, c) {\n            function d(a, c) {\n              b.encodePacket(a, !0, !0, function(a) {\n                var b = new Uint8Array(1);\n                if (((b[0] = 1), \"string\" == typeof a)) {\n                  for (\n                    var d = new Uint8Array(a.length), e = 0;\n                    e < a.length;\n                    e++\n                  )\n                    d[e] = a.charCodeAt(e);\n                  (a = d.buffer), (b[0] = 0);\n                }\n                for (\n                  var f = a instanceof ArrayBuffer ? a.byteLength : a.size,\n                    g = f.toString(),\n                    h = new Uint8Array(g.length + 1),\n                    e = 0;\n                  e < g.length;\n                  e++\n                )\n                  h[e] = parseInt(g[e]);\n                if (((h[g.length] = 255), v)) {\n                  var i = new v([b.buffer, h.buffer, a]);\n                  c(null, i);\n                }\n              });\n            }\n            i(a, d, function(a, b) {\n              return c(new v(b));\n            });\n          }),\n          (b.decodePayloadAsBinary = function(a, c, d) {\n            \"function\" == typeof c && ((d = c), (c = null));\n            for (var e = a, f = []; e.byteLength > 0; ) {\n              for (\n                var g = new Uint8Array(e), h = 0 === g[0], i = \"\", j = 1;\n                255 !== g[j];\n                j++\n              ) {\n                if (i.length > 310) return d(u, 0, 1);\n                i += g[j];\n              }\n              (e = m(e, 2 + i.length)), (i = parseInt(i));\n              var k = m(e, 0, i);\n              if (h)\n                try {\n                  k = String.fromCharCode.apply(null, new Uint8Array(k));\n                } catch (l) {\n                  var n = new Uint8Array(k);\n                  k = \"\";\n                  for (var j = 0; j < n.length; j++)\n                    k += String.fromCharCode(n[j]);\n                }\n              f.push(k), (e = m(e, i));\n            }\n            var o = f.length;\n            f.forEach(function(a, e) {\n              d(b.decodePacket(a, c, !0), e, o);\n            });\n          });\n      }.call(\n        b,\n        (function() {\n          return this;\n        })()\n      ));\n    },\n    function(a, b) {\n      a.exports =\n        Object.keys ||\n        function(a) {\n          var b = [],\n            c = Object.prototype.hasOwnProperty;\n          for (var d in a) c.call(a, d) && b.push(d);\n          return b;\n        };\n    },\n    function(a, b) {\n      a.exports = function(a, b, c) {\n        var d = a.byteLength;\n        if (((b = b || 0), (c = c || d), a.slice)) return a.slice(b, c);\n        if (\n          (b < 0 && (b += d),\n          c < 0 && (c += d),\n          c > d && (c = d),\n          b >= d || b >= c || 0 === d)\n        )\n          return new ArrayBuffer(0);\n        for (\n          var e = new Uint8Array(a), f = new Uint8Array(c - b), g = b, h = 0;\n          g < c;\n          g++, h++\n        )\n          f[h] = e[g];\n        return f.buffer;\n      };\n    },\n    function(a, b) {\n      function c(a, b, c) {\n        function e(a, d) {\n          if (e.count <= 0) throw new Error(\"after called too many times\");\n          --e.count,\n            a ? ((f = !0), b(a), (b = c)) : 0 !== e.count || f || b(null, d);\n        }\n        var f = !1;\n        return (c = c || d), (e.count = a), 0 === a ? b() : e;\n      }\n      function d() {}\n      a.exports = c;\n    },\n    function(a, b, c) {\n      var d;\n      (function(a, e) {\n        !(function(f) {\n          function g(a) {\n            for (var b, c, d = [], e = 0, f = a.length; e < f; )\n              (b = a.charCodeAt(e++)),\n                b >= 55296 && b <= 56319 && e < f\n                  ? ((c = a.charCodeAt(e++)),\n                    56320 == (64512 & c)\n                      ? d.push(((1023 & b) << 10) + (1023 & c) + 65536)\n                      : (d.push(b), e--))\n                  : d.push(b);\n            return d;\n          }\n          function h(a) {\n            for (var b, c = a.length, d = -1, e = \"\"; ++d < c; )\n              (b = a[d]),\n                b > 65535 &&\n                  ((b -= 65536),\n                  (e += u(((b >>> 10) & 1023) | 55296)),\n                  (b = 56320 | (1023 & b))),\n                (e += u(b));\n            return e;\n          }\n          function i(a, b) {\n            if (a >= 55296 && a <= 57343) {\n              if (b)\n                throw Error(\n                  \"Lone surrogate U+\" +\n                    a.toString(16).toUpperCase() +\n                    \" is not a scalar value\"\n                );\n              return !1;\n            }\n            return !0;\n          }\n          function j(a, b) {\n            return u(((a >> b) & 63) | 128);\n          }\n          function k(a, b) {\n            if (0 == (4294967168 & a)) return u(a);\n            var c = \"\";\n            return (\n              0 == (4294965248 & a)\n                ? (c = u(((a >> 6) & 31) | 192))\n                : 0 == (4294901760 & a)\n                ? (i(a, b) || (a = 65533),\n                  (c = u(((a >> 12) & 15) | 224)),\n                  (c += j(a, 6)))\n                : 0 == (4292870144 & a) &&\n                  ((c = u(((a >> 18) & 7) | 240)),\n                  (c += j(a, 12)),\n                  (c += j(a, 6))),\n              (c += u((63 & a) | 128))\n            );\n          }\n          function l(a, b) {\n            b = b || {};\n            for (\n              var c,\n                d = !1 !== b.strict,\n                e = g(a),\n                f = e.length,\n                h = -1,\n                i = \"\";\n              ++h < f;\n\n            )\n              (c = e[h]), (i += k(c, d));\n            return i;\n          }\n          function m() {\n            if (t >= s) throw Error(\"Invalid byte index\");\n            var a = 255 & r[t];\n            if ((t++, 128 == (192 & a))) return 63 & a;\n            throw Error(\"Invalid continuation byte\");\n          }\n          function n(a) {\n            var b, c, d, e, f;\n            if (t > s) throw Error(\"Invalid byte index\");\n            if (t == s) return !1;\n            if (((b = 255 & r[t]), t++, 0 == (128 & b))) return b;\n            if (192 == (224 & b)) {\n              if (((c = m()), (f = ((31 & b) << 6) | c), f >= 128)) return f;\n              throw Error(\"Invalid continuation byte\");\n            }\n            if (224 == (240 & b)) {\n              if (\n                ((c = m()),\n                (d = m()),\n                (f = ((15 & b) << 12) | (c << 6) | d),\n                f >= 2048)\n              )\n                return i(f, a) ? f : 65533;\n              throw Error(\"Invalid continuation byte\");\n            }\n            if (\n              240 == (248 & b) &&\n              ((c = m()),\n              (d = m()),\n              (e = m()),\n              (f = ((7 & b) << 18) | (c << 12) | (d << 6) | e),\n              f >= 65536 && f <= 1114111)\n            )\n              return f;\n            throw Error(\"Invalid UTF-8 detected\");\n          }\n          function o(a, b) {\n            b = b || {};\n            var c = !1 !== b.strict;\n            (r = g(a)), (s = r.length), (t = 0);\n            for (var d, e = []; (d = n(c)) !== !1; ) e.push(d);\n            return h(e);\n          }\n          var p = \"object\" == typeof b && b,\n            q = (\"object\" == typeof a && a && a.exports == p && a,\n            \"object\" == typeof e && e);\n          (q.global !== q && q.window !== q) || (f = q);\n          var r,\n            s,\n            t,\n            u = String.fromCharCode,\n            v = { version: \"2.1.2\", encode: l, decode: o };\n          (d = function() {\n            return v;\n          }.call(b, c, b, a)),\n            !(void 0 !== d && (a.exports = d));\n        })(this);\n      }.call(\n        b,\n        c(28)(a),\n        (function() {\n          return this;\n        })()\n      ));\n    },\n    function(a, b) {\n      a.exports = function(a) {\n        return (\n          a.webpackPolyfill ||\n            ((a.deprecate = function() {}),\n            (a.paths = []),\n            (a.children = []),\n            (a.webpackPolyfill = 1)),\n          a\n        );\n      };\n    },\n    function(a, b) {\n      !(function() {\n        \"use strict\";\n        for (\n          var a =\n              \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",\n            c = new Uint8Array(256),\n            d = 0;\n          d < a.length;\n          d++\n        )\n          c[a.charCodeAt(d)] = d;\n        (b.encode = function(b) {\n          var c,\n            d = new Uint8Array(b),\n            e = d.length,\n            f = \"\";\n          for (c = 0; c < e; c += 3)\n            (f += a[d[c] >> 2]),\n              (f += a[((3 & d[c]) << 4) | (d[c + 1] >> 4)]),\n              (f += a[((15 & d[c + 1]) << 2) | (d[c + 2] >> 6)]),\n              (f += a[63 & d[c + 2]]);\n          return (\n            e % 3 === 2\n              ? (f = f.substring(0, f.length - 1) + \"=\")\n              : e % 3 === 1 && (f = f.substring(0, f.length - 2) + \"==\"),\n            f\n          );\n        }),\n          (b.decode = function(a) {\n            var b,\n              d,\n              e,\n              f,\n              g,\n              h = 0.75 * a.length,\n              i = a.length,\n              j = 0;\n            \"=\" === a[a.length - 1] && (h--, \"=\" === a[a.length - 2] && h--);\n            var k = new ArrayBuffer(h),\n              l = new Uint8Array(k);\n            for (b = 0; b < i; b += 4)\n              (d = c[a.charCodeAt(b)]),\n                (e = c[a.charCodeAt(b + 1)]),\n                (f = c[a.charCodeAt(b + 2)]),\n                (g = c[a.charCodeAt(b + 3)]),\n                (l[j++] = (d << 2) | (e >> 4)),\n                (l[j++] = ((15 & e) << 4) | (f >> 2)),\n                (l[j++] = ((3 & f) << 6) | (63 & g));\n            return k;\n          });\n      })();\n    },\n    function(a, b) {\n      (function(b) {\n        function c(a) {\n          for (var b = 0; b < a.length; b++) {\n            var c = a[b];\n            if (c.buffer instanceof ArrayBuffer) {\n              var d = c.buffer;\n              if (c.byteLength !== d.byteLength) {\n                var e = new Uint8Array(c.byteLength);\n                e.set(new Uint8Array(d, c.byteOffset, c.byteLength)),\n                  (d = e.buffer);\n              }\n              a[b] = d;\n            }\n          }\n        }\n        function d(a, b) {\n          b = b || {};\n          var d = new f();\n          c(a);\n          for (var e = 0; e < a.length; e++) d.append(a[e]);\n          return b.type ? d.getBlob(b.type) : d.getBlob();\n        }\n        function e(a, b) {\n          return c(a), new Blob(a, b || {});\n        }\n        var f =\n            b.BlobBuilder ||\n            b.WebKitBlobBuilder ||\n            b.MSBlobBuilder ||\n            b.MozBlobBuilder,\n          g = (function() {\n            try {\n              var a = new Blob([\"hi\"]);\n              return 2 === a.size;\n            } catch (b) {\n              return !1;\n            }\n          })(),\n          h =\n            g &&\n            (function() {\n              try {\n                var a = new Blob([new Uint8Array([1, 2])]);\n                return 2 === a.size;\n              } catch (b) {\n                return !1;\n              }\n            })(),\n          i = f && f.prototype.append && f.prototype.getBlob;\n        a.exports = (function() {\n          return g ? (h ? b.Blob : e) : i ? d : void 0;\n        })();\n      }.call(\n        b,\n        (function() {\n          return this;\n        })()\n      ));\n    },\n    function(a, b) {\n      (b.encode = function(a) {\n        var b = \"\";\n        for (var c in a)\n          a.hasOwnProperty(c) &&\n            (b.length && (b += \"&\"),\n            (b += encodeURIComponent(c) + \"=\" + encodeURIComponent(a[c])));\n        return b;\n      }),\n        (b.decode = function(a) {\n          for (var b = {}, c = a.split(\"&\"), d = 0, e = c.length; d < e; d++) {\n            var f = c[d].split(\"=\");\n            b[decodeURIComponent(f[0])] = decodeURIComponent(f[1]);\n          }\n          return b;\n        });\n    },\n    function(a, b) {\n      a.exports = function(a, b) {\n        var c = function() {};\n        (c.prototype = b.prototype),\n          (a.prototype = new c()),\n          (a.prototype.constructor = a);\n      };\n    },\n    function(a, b) {\n      \"use strict\";\n      function c(a) {\n        var b = \"\";\n        do (b = g[a % h] + b), (a = Math.floor(a / h));\n        while (a > 0);\n        return b;\n      }\n      function d(a) {\n        var b = 0;\n        for (k = 0; k < a.length; k++) b = b * h + i[a.charAt(k)];\n        return b;\n      }\n      function e() {\n        var a = c(+new Date());\n        return a !== f ? ((j = 0), (f = a)) : a + \".\" + c(j++);\n      }\n      for (\n        var f,\n          g = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_\".split(\n            \"\"\n          ),\n          h = 64,\n          i = {},\n          j = 0,\n          k = 0;\n        k < h;\n        k++\n      )\n        i[g[k]] = k;\n      (e.encode = c), (e.decode = d), (a.exports = e);\n    },\n    function(a, b, c) {\n      (function(b) {\n        function d() {}\n        function e(a) {\n          f.call(this, a),\n            (this.query = this.query || {}),\n            h || (b.___eio || (b.___eio = []), (h = b.___eio)),\n            (this.index = h.length);\n          var c = this;\n          h.push(function(a) {\n            c.onData(a);\n          }),\n            (this.query.j = this.index),\n            b.document &&\n              b.addEventListener &&\n              b.addEventListener(\n                \"beforeunload\",\n                function() {\n                  c.script && (c.script.onerror = d);\n                },\n                !1\n              );\n        }\n        var f = c(21),\n          g = c(32);\n        a.exports = e;\n        var h,\n          i = /\\n/g,\n          j = /\\\\n/g;\n        g(e, f),\n          (e.prototype.supportsBinary = !1),\n          (e.prototype.doClose = function() {\n            this.script &&\n              (this.script.parentNode.removeChild(this.script),\n              (this.script = null)),\n              this.form &&\n                (this.form.parentNode.removeChild(this.form),\n                (this.form = null),\n                (this.iframe = null)),\n              f.prototype.doClose.call(this);\n          }),\n          (e.prototype.doPoll = function() {\n            var a = this,\n              b = document.createElement(\"script\");\n            this.script &&\n              (this.script.parentNode.removeChild(this.script),\n              (this.script = null)),\n              (b.async = !0),\n              (b.src = this.uri()),\n              (b.onerror = function(b) {\n                a.onError(\"jsonp poll error\", b);\n              });\n            var c = document.getElementsByTagName(\"script\")[0];\n            c\n              ? c.parentNode.insertBefore(b, c)\n              : (document.head || document.body).appendChild(b),\n              (this.script = b);\n            var d =\n              \"undefined\" != typeof navigator &&\n              /gecko/i.test(navigator.userAgent);\n            d &&\n              setTimeout(function() {\n                var a = document.createElement(\"iframe\");\n                document.body.appendChild(a), document.body.removeChild(a);\n              }, 100);\n          }),\n          (e.prototype.doWrite = function(a, b) {\n            function c() {\n              d(), b();\n            }\n            function d() {\n              if (e.iframe)\n                try {\n                  e.form.removeChild(e.iframe);\n                } catch (a) {\n                  e.onError(\"jsonp polling iframe removal error\", a);\n                }\n              try {\n                var b = '<iframe src=\"javascript:0\" name=\"' + e.iframeId + '\">';\n                f = document.createElement(b);\n              } catch (a) {\n                (f = document.createElement(\"iframe\")),\n                  (f.name = e.iframeId),\n                  (f.src = \"javascript:0\");\n              }\n              (f.id = e.iframeId), e.form.appendChild(f), (e.iframe = f);\n            }\n            var e = this;\n            if (!this.form) {\n              var f,\n                g = document.createElement(\"form\"),\n                h = document.createElement(\"textarea\"),\n                k = (this.iframeId = \"eio_iframe_\" + this.index);\n              (g.className = \"socketio\"),\n                (g.style.position = \"absolute\"),\n                (g.style.top = \"-1000px\"),\n                (g.style.left = \"-1000px\"),\n                (g.target = k),\n                (g.method = \"POST\"),\n                g.setAttribute(\"accept-charset\", \"utf-8\"),\n                (h.name = \"d\"),\n                g.appendChild(h),\n                document.body.appendChild(g),\n                (this.form = g),\n                (this.area = h);\n            }\n            (this.form.action = this.uri()),\n              d(),\n              (a = a.replace(j, \"\\\\\\n\")),\n              (this.area.value = a.replace(i, \"\\\\n\"));\n            try {\n              this.form.submit();\n            } catch (l) {}\n            this.iframe.attachEvent\n              ? (this.iframe.onreadystatechange = function() {\n                  \"complete\" === e.iframe.readyState && c();\n                })\n              : (this.iframe.onload = c);\n          });\n      }.call(\n        b,\n        (function() {\n          return this;\n        })()\n      ));\n    },\n    function(a, b, c) {\n      (function(b) {\n        function d(a) {\n          var b = a && a.forceBase64;\n          b && (this.supportsBinary = !1),\n            (this.perMessageDeflate = a.perMessageDeflate),\n            (this.usingBrowserWebSocket = l && !a.forceNode),\n            (this.protocols = a.protocols),\n            this.usingBrowserWebSocket || (n = e),\n            f.call(this, a);\n        }\n        var e,\n          f = c(22),\n          g = c(23),\n          h = c(31),\n          i = c(32),\n          j = c(33),\n          k = c(3)(\"engine.io-client:websocket\"),\n          l = b.WebSocket || b.MozWebSocket;\n        if (\"undefined\" == typeof window)\n          try {\n            e = c(36);\n          } catch (m) {}\n        var n = l;\n        n || \"undefined\" != typeof window || (n = e),\n          (a.exports = d),\n          i(d, f),\n          (d.prototype.name = \"websocket\"),\n          (d.prototype.supportsBinary = !0),\n          (d.prototype.doOpen = function() {\n            if (this.check()) {\n              var a = this.uri(),\n                b = this.protocols,\n                c = {\n                  agent: this.agent,\n                  perMessageDeflate: this.perMessageDeflate\n                };\n              (c.pfx = this.pfx),\n                (c.key = this.key),\n                (c.passphrase = this.passphrase),\n                (c.cert = this.cert),\n                (c.ca = this.ca),\n                (c.ciphers = this.ciphers),\n                (c.rejectUnauthorized = this.rejectUnauthorized),\n                this.extraHeaders && (c.headers = this.extraHeaders),\n                this.localAddress && (c.localAddress = this.localAddress);\n              try {\n                this.ws = this.usingBrowserWebSocket\n                  ? b\n                    ? new n(a, b)\n                    : new n(a)\n                  : new n(a, b, c);\n              } catch (d) {\n                return this.emit(\"error\", d);\n              }\n              void 0 === this.ws.binaryType && (this.supportsBinary = !1),\n                this.ws.supports && this.ws.supports.binary\n                  ? ((this.supportsBinary = !0),\n                    (this.ws.binaryType = \"nodebuffer\"))\n                  : (this.ws.binaryType = \"arraybuffer\"),\n                this.addEventListeners();\n            }\n          }),\n          (d.prototype.addEventListeners = function() {\n            var a = this;\n            (this.ws.onopen = function() {\n              a.onOpen();\n            }),\n              (this.ws.onclose = function() {\n                a.onClose();\n              }),\n              (this.ws.onmessage = function(b) {\n                a.onData(b.data);\n              }),\n              (this.ws.onerror = function(b) {\n                a.onError(\"websocket error\", b);\n              });\n          }),\n          (d.prototype.write = function(a) {\n            function c() {\n              d.emit(\"flush\"),\n                setTimeout(function() {\n                  (d.writable = !0), d.emit(\"drain\");\n                }, 0);\n            }\n            var d = this;\n            this.writable = !1;\n            for (var e = a.length, f = 0, h = e; f < h; f++)\n              !(function(a) {\n                g.encodePacket(a, d.supportsBinary, function(f) {\n                  if (!d.usingBrowserWebSocket) {\n                    var g = {};\n                    if (\n                      (a.options && (g.compress = a.options.compress),\n                      d.perMessageDeflate)\n                    ) {\n                      var h =\n                        \"string\" == typeof f\n                          ? b.Buffer.byteLength(f)\n                          : f.length;\n                      h < d.perMessageDeflate.threshold && (g.compress = !1);\n                    }\n                  }\n                  try {\n                    d.usingBrowserWebSocket ? d.ws.send(f) : d.ws.send(f, g);\n                  } catch (i) {\n                    k(\"websocket closed before onclose event\");\n                  }\n                  --e || c();\n                });\n              })(a[f]);\n          }),\n          (d.prototype.onClose = function() {\n            f.prototype.onClose.call(this);\n          }),\n          (d.prototype.doClose = function() {\n            \"undefined\" != typeof this.ws && this.ws.close();\n          }),\n          (d.prototype.uri = function() {\n            var a = this.query || {},\n              b = this.secure ? \"wss\" : \"ws\",\n              c = \"\";\n            this.port &&\n              ((\"wss\" === b && 443 !== Number(this.port)) ||\n                (\"ws\" === b && 80 !== Number(this.port))) &&\n              (c = \":\" + this.port),\n              this.timestampRequests && (a[this.timestampParam] = j()),\n              this.supportsBinary || (a.b64 = 1),\n              (a = h.encode(a)),\n              a.length && (a = \"?\" + a);\n            var d = this.hostname.indexOf(\":\") !== -1;\n            return (\n              b +\n              \"://\" +\n              (d ? \"[\" + this.hostname + \"]\" : this.hostname) +\n              c +\n              this.path +\n              a\n            );\n          }),\n          (d.prototype.check = function() {\n            return !(\n              !n ||\n              (\"__initialize\" in n && this.name === d.prototype.name)\n            );\n          });\n      }.call(\n        b,\n        (function() {\n          return this;\n        })()\n      ));\n    },\n    function(a, b) {},\n    function(a, b) {\n      var c = [].indexOf;\n      a.exports = function(a, b) {\n        if (c) return a.indexOf(b);\n        for (var d = 0; d < a.length; ++d) if (a[d] === b) return d;\n        return -1;\n      };\n    },\n    function(a, b) {\n      (function(b) {\n        var c = /^[\\],:{}\\s]*$/,\n          d = /\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g,\n          e = /\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g,\n          f = /(?:^|:|,)(?:\\s*\\[)+/g,\n          g = /^\\s+/,\n          h = /\\s+$/;\n        a.exports = function(a) {\n          return \"string\" == typeof a && a\n            ? ((a = a.replace(g, \"\").replace(h, \"\")),\n              b.JSON && JSON.parse\n                ? JSON.parse(a)\n                : c.test(\n                    a\n                      .replace(d, \"@\")\n                      .replace(e, \"]\")\n                      .replace(f, \"\")\n                  )\n                ? new Function(\"return \" + a)()\n                : void 0)\n            : null;\n        };\n      }.call(\n        b,\n        (function() {\n          return this;\n        })()\n      ));\n    },\n    function(a, b, c) {\n      \"use strict\";\n      function d(a, b, c) {\n        (this.io = a),\n          (this.nsp = b),\n          (this.json = this),\n          (this.ids = 0),\n          (this.acks = {}),\n          (this.receiveBuffer = []),\n          (this.sendBuffer = []),\n          (this.connected = !1),\n          (this.disconnected = !0),\n          c && c.query && (this.query = c.query),\n          this.io.autoConnect && this.open();\n      }\n      var e =\n          \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator\n            ? function(a) {\n                return typeof a;\n              }\n            : function(a) {\n                return a &&\n                  \"function\" == typeof Symbol &&\n                  a.constructor === Symbol &&\n                  a !== Symbol.prototype\n                  ? \"symbol\"\n                  : typeof a;\n              },\n        f = c(7),\n        g = c(8),\n        h = c(40),\n        i = c(41),\n        j = c(42),\n        k = c(3)(\"socket.io-client:socket\"),\n        l = c(31);\n      a.exports = b = d;\n      var m = {\n          connect: 1,\n          connect_error: 1,\n          connect_timeout: 1,\n          connecting: 1,\n          disconnect: 1,\n          error: 1,\n          reconnect: 1,\n          reconnect_attempt: 1,\n          reconnect_failed: 1,\n          reconnect_error: 1,\n          reconnecting: 1,\n          ping: 1,\n          pong: 1\n        },\n        n = g.prototype.emit;\n      g(d.prototype),\n        (d.prototype.subEvents = function() {\n          if (!this.subs) {\n            var a = this.io;\n            this.subs = [\n              i(a, \"open\", j(this, \"onopen\")),\n              i(a, \"packet\", j(this, \"onpacket\")),\n              i(a, \"close\", j(this, \"onclose\"))\n            ];\n          }\n        }),\n        (d.prototype.open = d.prototype.connect = function() {\n          return this.connected\n            ? this\n            : (this.subEvents(),\n              this.io.open(),\n              \"open\" === this.io.readyState && this.onopen(),\n              this.emit(\"connecting\"),\n              this);\n        }),\n        (d.prototype.send = function() {\n          var a = h(arguments);\n          return a.unshift(\"message\"), this.emit.apply(this, a), this;\n        }),\n        (d.prototype.emit = function(a) {\n          if (m.hasOwnProperty(a)) return n.apply(this, arguments), this;\n          var b = h(arguments),\n            c = { type: f.EVENT, data: b };\n          return (\n            (c.options = {}),\n            (c.options.compress = !this.flags || !1 !== this.flags.compress),\n            \"function\" == typeof b[b.length - 1] &&\n              (k(\"emitting packet with ack id %d\", this.ids),\n              (this.acks[this.ids] = b.pop()),\n              (c.id = this.ids++)),\n            this.connected ? this.packet(c) : this.sendBuffer.push(c),\n            delete this.flags,\n            this\n          );\n        }),\n        (d.prototype.packet = function(a) {\n          (a.nsp = this.nsp), this.io.packet(a);\n        }),\n        (d.prototype.onopen = function() {\n          if ((k(\"transport is open - connecting\"), \"/\" !== this.nsp))\n            if (this.query) {\n              var a =\n                \"object\" === e(this.query) ? l.encode(this.query) : this.query;\n              k(\"sending connect packet with query %s\", a),\n                this.packet({ type: f.CONNECT, query: a });\n            } else this.packet({ type: f.CONNECT });\n        }),\n        (d.prototype.onclose = function(a) {\n          k(\"close (%s)\", a),\n            (this.connected = !1),\n            (this.disconnected = !0),\n            delete this.id,\n            this.emit(\"disconnect\", a);\n        }),\n        (d.prototype.onpacket = function(a) {\n          if (a.nsp === this.nsp)\n            switch (a.type) {\n              case f.CONNECT:\n                this.onconnect();\n                break;\n              case f.EVENT:\n                this.onevent(a);\n                break;\n              case f.BINARY_EVENT:\n                this.onevent(a);\n                break;\n              case f.ACK:\n                this.onack(a);\n                break;\n              case f.BINARY_ACK:\n                this.onack(a);\n                break;\n              case f.DISCONNECT:\n                this.ondisconnect();\n                break;\n              case f.ERROR:\n                this.emit(\"error\", a.data);\n            }\n        }),\n        (d.prototype.onevent = function(a) {\n          var b = a.data || [];\n          k(\"emitting event %j\", b),\n            null != a.id &&\n              (k(\"attaching ack callback to event\"), b.push(this.ack(a.id))),\n            this.connected ? n.apply(this, b) : this.receiveBuffer.push(b);\n        }),\n        (d.prototype.ack = function(a) {\n          var b = this,\n            c = !1;\n          return function() {\n            if (!c) {\n              c = !0;\n              var d = h(arguments);\n              k(\"sending ack %j\", d), b.packet({ type: f.ACK, id: a, data: d });\n            }\n          };\n        }),\n        (d.prototype.onack = function(a) {\n          var b = this.acks[a.id];\n          \"function\" == typeof b\n            ? (k(\"calling ack %s with %j\", a.id, a.data),\n              b.apply(this, a.data),\n              delete this.acks[a.id])\n            : k(\"bad ack %s\", a.id);\n        }),\n        (d.prototype.onconnect = function() {\n          (this.connected = !0),\n            (this.disconnected = !1),\n            this.emit(\"connect\"),\n            this.emitBuffered();\n        }),\n        (d.prototype.emitBuffered = function() {\n          var a;\n          for (a = 0; a < this.receiveBuffer.length; a++)\n            n.apply(this, this.receiveBuffer[a]);\n          for (this.receiveBuffer = [], a = 0; a < this.sendBuffer.length; a++)\n            this.packet(this.sendBuffer[a]);\n          this.sendBuffer = [];\n        }),\n        (d.prototype.ondisconnect = function() {\n          k(\"server disconnect (%s)\", this.nsp),\n            this.destroy(),\n            this.onclose(\"io server disconnect\");\n        }),\n        (d.prototype.destroy = function() {\n          if (this.subs) {\n            for (var a = 0; a < this.subs.length; a++) this.subs[a].destroy();\n            this.subs = null;\n          }\n          this.io.destroy(this);\n        }),\n        (d.prototype.close = d.prototype.disconnect = function() {\n          return (\n            this.connected &&\n              (k(\"performing disconnect (%s)\", this.nsp),\n              this.packet({ type: f.DISCONNECT })),\n            this.destroy(),\n            this.connected && this.onclose(\"io client disconnect\"),\n            this\n          );\n        }),\n        (d.prototype.compress = function(a) {\n          return (\n            (this.flags = this.flags || {}), (this.flags.compress = a), this\n          );\n        });\n    },\n    function(a, b) {\n      function c(a, b) {\n        var c = [];\n        b = b || 0;\n        for (var d = b || 0; d < a.length; d++) c[d - b] = a[d];\n        return c;\n      }\n      a.exports = c;\n    },\n    function(a, b) {\n      \"use strict\";\n      function c(a, b, c) {\n        return (\n          a.on(b, c),\n          {\n            destroy: function() {\n              a.removeListener(b, c);\n            }\n          }\n        );\n      }\n      a.exports = c;\n    },\n    function(a, b) {\n      var c = [].slice;\n      a.exports = function(a, b) {\n        if ((\"string\" == typeof b && (b = a[b]), \"function\" != typeof b))\n          throw new Error(\"bind() requires a function\");\n        var d = c.call(arguments, 2);\n        return function() {\n          return b.apply(a, d.concat(c.call(arguments)));\n        };\n      };\n    },\n    function(a, b) {\n      function c(a) {\n        (a = a || {}),\n          (this.ms = a.min || 100),\n          (this.max = a.max || 1e4),\n          (this.factor = a.factor || 2),\n          (this.jitter = a.jitter > 0 && a.jitter <= 1 ? a.jitter : 0),\n          (this.attempts = 0);\n      }\n      (a.exports = c),\n        (c.prototype.duration = function() {\n          var a = this.ms * Math.pow(this.factor, this.attempts++);\n          if (this.jitter) {\n            var b = Math.random(),\n              c = Math.floor(b * this.jitter * a);\n            a = 0 == (1 & Math.floor(10 * b)) ? a - c : a + c;\n          }\n          return 0 | Math.min(a, this.max);\n        }),\n        (c.prototype.reset = function() {\n          this.attempts = 0;\n        }),\n        (c.prototype.setMin = function(a) {\n          this.ms = a;\n        }),\n        (c.prototype.setMax = function(a) {\n          this.max = a;\n        }),\n        (c.prototype.setJitter = function(a) {\n          this.jitter = a;\n        });\n    }\n  ]);\n});\n\n//////////////////////////////////////////////////////////////////////////////////////\n//                                                                                //\n//  ███████╗ █████╗ ██╗██╗     ███████╗   ██╗ ██████╗         ██╗███████╗         //\n//  ██╔════╝██╔══██╗██║██║     ██╔════╝   ██║██╔═══██╗        ██║██╔════╝         //\n//  ███████╗███████║██║██║     ███████╗   ██║██║   ██║        ██║███████╗         //\n//  ╚════██║██╔══██║██║██║     ╚════██║   ██║██║   ██║   ██   ██║╚════██║         //\n//  ███████║██║  ██║██║███████╗███████║██╗██║╚██████╔╝██╗╚█████╔╝███████║         //\n//  ╚══════╝╚═╝  ╚═╝╚═╝╚══════╝╚══════╝╚═╝╚═╝ ╚═════╝ ╚═╝ ╚════╝ ╚══════╝         //\n//                                                                                //\n//   ╦╔═╗╦  ╦╔═╗╔═╗╔═╗╦═╗╦╔═╗╔╦╗  ╔═╗╦  ╦╔═╗╔╗╔╔╦╗  ╔═╗╔╦╗╦╔═                     //\n//   ║╠═╣╚╗╔╝╠═╣╚═╗║  ╠╦╝║╠═╝ ║   ║  ║  ║║╣ ║║║ ║   ╚═╗ ║║╠╩╗                     //\n//  ╚╝╩ ╩ ╚╝ ╩ ╩╚═╝╚═╝╩╚═╩╩   ╩   ╚═╝╩═╝╩╚═╝╝╚╝ ╩   ╚═╝═╩╝╩ ╩                     //\n//  ┌─┐┌─┐┬─┐  ┌┐┌┌─┐┌┬┐┌─┐  ┬┌─┐  ┌─┐┌┐┌┌┬┐  ┌┬┐┬ ┬┌─┐  ┌┐ ┬─┐┌─┐┬ ┬┌─┐┌─┐┬─┐    //\n//  ├┤ │ │├┬┘  ││││ │ ││├┤   │└─┐  ├─┤│││ ││   │ ├─┤├┤   ├┴┐├┬┘│ ││││└─┐├┤ ├┬┘    //\n//  └  └─┘┴└─  ┘└┘└─┘─┴┘└─┘o└┘└─┘  ┴ ┴┘└┘─┴┘   ┴ ┴ ┴└─┘  └─┘┴└─└─┘└┴┘└─┘└─┘┴└─    //\n//                                                                                //\n//////////////////////////////////////////////////////////////////////////////////////\n\n/**\n * sails.io.js\n * v1.2.1\n * ------------------------------------------------------------------------\n * JavaScript Client (SDK) for communicating with Sails.\n *\n * Note that this script is completely optional, but it is handy if you're\n * using WebSockets from the browser to talk to your Sails server.\n *\n * For tips and documentation, visit:\n * http://sailsjs.com/documentation/reference/web-sockets/socket-client\n * ------------------------------------------------------------------------\n *\n * This file allows you to send and receive socket.io messages to & from Sails\n * by simulating a REST client interface on top of socket.io. It models its API\n * after the $.ajax pattern from jQuery you might already be familiar with.\n *\n * So if you're switching from using AJAX to sockets, instead of:\n *    `$.post( url, [data], [cb] )`\n *\n * You would use:\n *    `socket.post( url, [data], [cb] )`\n */\n\n(function() {\n  //   ██████╗ ██████╗ ███╗   ██╗███████╗████████╗ █████╗ ███╗   ██╗████████╗███████╗\n  //  ██╔════╝██╔═══██╗████╗  ██║██╔════╝╚══██╔══╝██╔══██╗████╗  ██║╚══██╔══╝██╔════╝\n  //  ██║     ██║   ██║██╔██╗ ██║███████╗   ██║   ███████║██╔██╗ ██║   ██║   ███████╗\n  //  ██║     ██║   ██║██║╚██╗██║╚════██║   ██║   ██╔══██║██║╚██╗██║   ██║   ╚════██║\n  //  ╚██████╗╚██████╔╝██║ ╚████║███████║   ██║   ██║  ██║██║ ╚████║   ██║   ███████║\n  //   ╚═════╝ ╚═════╝ ╚═╝  ╚═══╝╚══════╝   ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═══╝   ╚═╝   ╚══════╝\n  //\n\n  /**\n   * Constant containing the names of all available options\n   * for individual sockets.\n   *\n   * @type {Array}\n   */\n  var SOCKET_OPTIONS = [\n    \"useCORSRouteToGetCookie\",\n    \"url\",\n    \"multiplex\",\n    \"transports\",\n    \"query\",\n    \"path\",\n    \"headers\",\n    \"initialConnectionHeaders\",\n    \"reconnection\",\n    \"reconnectionAttempts\",\n    \"reconnectionDelay\",\n    \"reconnectionDelayMax\",\n    \"rejectUnauthorized\",\n    \"randomizationFactor\",\n    \"timeout\"\n  ];\n\n  /**\n   * Constant containing the names of properties on `io.sails` which\n   * may be configured using HTML attributes on the script tag which\n   * loaded this file.\n   *\n   * @type {Array}\n   *\n   * (this is unused if loading from node.js)\n   */\n  var CONFIGURABLE_VIA_HTML_ATTR = [\n    \"autoConnect\",\n    \"reconnection\",\n    \"environment\",\n    \"headers\",\n    \"url\",\n    \"transports\",\n    \"path\"\n  ];\n\n  /**\n   * Constant containing the names of querystring\n   * parameters sent when connecting any SailsSocket.\n   *\n   * @type {Dictionary}\n   */\n  var CONNECTION_METADATA_PARAMS = {\n    version: \"__sails_io_sdk_version\",\n    platform: \"__sails_io_sdk_platform\",\n    language: \"__sails_io_sdk_language\"\n  };\n\n  /**\n   * Constant containing metadata about the platform, language, and\n   * current version of this SDK.\n   *\n   * @type {Dictionary}\n   */\n  var SDK_INFO = {\n    version: \"1.2.1\", // <-- pulled automatically from package.json, do not change!\n    language: \"javascript\",\n    platform: (function() {\n      if (typeof module === \"object\" && typeof module.exports !== \"undefined\") {\n        return \"node\";\n      } else {\n        return \"browser\";\n      }\n    })()\n  };\n\n  // Build `versionString` (a querystring snippet) by\n  // combining SDK_INFO and CONNECTION_METADATA_PARAMS.\n  SDK_INFO.versionString =\n    CONNECTION_METADATA_PARAMS.version +\n    \"=\" +\n    SDK_INFO.version +\n    \"&\" +\n    CONNECTION_METADATA_PARAMS.platform +\n    \"=\" +\n    SDK_INFO.platform +\n    \"&\" +\n    CONNECTION_METADATA_PARAMS.language +\n    \"=\" +\n    SDK_INFO.language;\n\n  //   █████╗ ██████╗ ███████╗ ██████╗ ██████╗ ██████╗     ██╗  ██╗████████╗███╗   ███╗██╗\n  //  ██╔══██╗██╔══██╗██╔════╝██╔═══██╗██╔══██╗██╔══██╗    ██║  ██║╚══██╔══╝████╗ ████║██║\n  //  ███████║██████╔╝███████╗██║   ██║██████╔╝██████╔╝    ███████║   ██║   ██╔████╔██║██║\n  //  ██╔══██║██╔══██╗╚════██║██║   ██║██╔══██╗██╔══██╗    ██╔══██║   ██║   ██║╚██╔╝██║██║\n  //  ██║  ██║██████╔╝███████║╚██████╔╝██║  ██║██████╔╝    ██║  ██║   ██║   ██║ ╚═╝ ██║███████╗\n  //  ╚═╝  ╚═╝╚═════╝ ╚══════╝ ╚═════╝ ╚═╝  ╚═╝╚═════╝     ╚═╝  ╚═╝   ╚═╝   ╚═╝     ╚═╝╚══════╝\n  //\n  //   █████╗ ████████╗████████╗██████╗ ██╗██████╗ ██╗   ██╗████████╗███████╗███████╗\n  //  ██╔══██╗╚══██╔══╝╚══██╔══╝██╔══██╗██║██╔══██╗██║   ██║╚══██╔══╝██╔════╝██╔════╝\n  //  ███████║   ██║      ██║   ██████╔╝██║██████╔╝██║   ██║   ██║   █████╗  ███████╗\n  //  ██╔══██║   ██║      ██║   ██╔══██╗██║██╔══██╗██║   ██║   ██║   ██╔══╝  ╚════██║\n  //  ██║  ██║   ██║      ██║   ██║  ██║██║██████╔╝╚██████╔╝   ██║   ███████╗███████║\n  //  ╚═╝  ╚═╝   ╚═╝      ╚═╝   ╚═╝  ╚═╝╚═╝╚═════╝  ╚═════╝    ╚═╝   ╚══════╝╚══════╝\n  //\n  //  ███████╗██████╗  ██████╗ ███╗   ███╗      ██╗███████╗ ██████╗██████╗ ██╗██████╗ ████████╗██╗\n  //  ██╔════╝██╔══██╗██╔═══██╗████╗ ████║     ██╔╝██╔════╝██╔════╝██╔══██╗██║██╔══██╗╚══██╔══╝╚██╗\n  //  █████╗  ██████╔╝██║   ██║██╔████╔██║    ██╔╝ ███████╗██║     ██████╔╝██║██████╔╝   ██║    ╚██╗\n  //  ██╔══╝  ██╔══██╗██║   ██║██║╚██╔╝██║    ╚██╗ ╚════██║██║     ██╔══██╗██║██╔═══╝    ██║    ██╔╝\n  //  ██║     ██║  ██║╚██████╔╝██║ ╚═╝ ██║     ╚██╗███████║╚██████╗██║  ██║██║██║        ██║   ██╔╝\n  //  ╚═╝     ╚═╝  ╚═╝ ╚═════╝ ╚═╝     ╚═╝      ╚═╝╚══════╝ ╚═════╝╚═╝  ╚═╝╚═╝╚═╝        ╚═╝   ╚═╝\n  //\n  //\n  // If available, grab the DOM element for the script tag which imported this file.\n  // (skip this if this SDK is being used outside of the DOM, i.e. in a Node process)\n  //\n  // This is used below to parse client-side sails.io.js configuration encoded as\n  // HTML attributes, as well as grabbing hold of the URL from whence the SDK was fetched.\n  var thisScriptTag = (function() {\n    if (\n      typeof window !== \"object\" ||\n      typeof window.document !== \"object\" ||\n      typeof window.document.getElementsByTagName !== \"function\"\n    ) {\n      return null;\n    }\n\n    // Return the URL of the last script loaded (i.e. this one)\n    // (this must run before nextTick; see http://stackoverflow.com/a/2976714/486547)\n    var allScriptsCurrentlyInDOM = window.document.getElementsByTagName(\n      \"script\"\n    );\n    return allScriptsCurrentlyInDOM[allScriptsCurrentlyInDOM.length - 1];\n  })();\n\n  // Variables to contain src URL and other script tag config (for use below).\n  var urlThisScriptWasFetchedFrom = \"\";\n  var scriptTagConfig = {};\n\n  if (thisScriptTag) {\n    // Save the URL that this script was fetched from.\n    urlThisScriptWasFetchedFrom = thisScriptTag.src;\n\n    // Now parse the most common client-side configuration settings\n    // from the script tag where they may be encoded as HTML attributes.\n    //\n    // Any configuration which may be provided as an HTML attribute may\n    // also be provided prefixed with `data-`.  This is for folks who\n    // need to support browsers that have issues with nonstandard\n    // HTML attributes (or if the idea of using nonstandard HTML attributes\n    // just creeps you out)\n    //\n    // If a `data-` prefixed attr is provided, it takes precedence.\n    // (this is so that if you are already using one of these HTML\n    //  attrs for some reason, you can keep it as-is and override\n    //  it using `data-`. If you are using the `data-` prefixed version\n    //  for some other purpose... well, in that case you'll just have to\n    //  configure programmatically using `io.sails` instead.)\n    CONFIGURABLE_VIA_HTML_ATTR.forEach(function(configKey) {\n      scriptTagConfig[configKey] = (function() {\n        // Support 'data-' prefixed or normal attributes.\n        // (prefixed versions take precedence if provided)\n        var htmlAttrVal = thisScriptTag.getAttribute(\"data-\" + configKey);\n        if (!htmlAttrVal) {\n          htmlAttrVal = thisScriptTag.getAttribute(configKey);\n        }\n\n        // The HTML attribute value should always be a string or `null`.\n        // We'll try to parse it as JSON and use that, but worst case fall back\n        // to the default situation of it being a string.\n        if (typeof htmlAttrVal === \"string\") {\n          try {\n            return JSON.parse(htmlAttrVal);\n          } catch (e) {\n            return htmlAttrVal;\n          }\n        }\n        // If `null` was returned from getAttribute(), it means that the HTML attribute\n        // was not specified, so we treat it as undefined (which will cause the property\n        // to be removed below)\n        else if (htmlAttrVal === null) {\n          return undefined;\n        }\n        // Any other contingency shouldn't be possible:\n        // - if no quotes are used in the HTML attribute, it still comes in as a string.\n        // - if no RHS is provided for the attribute, it still comes in as \"\" (empty string)\n        // (but we still handle this with an explicit error just in case--for debugging and support purposes)\n        else\n          throw new Error(\n            \"sails.io.js :: Unexpected/invalid script tag configuration for `\" +\n              configKey +\n              \"`: `\" +\n              htmlAttrVal +\n              \"` (a `\" +\n              typeof htmlAttrVal +\n              \"`). Should be a string.\"\n          );\n      })();\n\n      if (scriptTagConfig[configKey] === undefined) {\n        delete scriptTagConfig[configKey];\n      }\n    });\n\n    // Now that they've been parsed, do an extremely lean version of\n    // logical type validation/coercion of provided values.\n    //////////////////////////////////////////////////////////////////\n\n    // `autoConnect`\n    if (typeof scriptTagConfig.autoConnect !== \"undefined\") {\n      if (scriptTagConfig.autoConnect === \"\") {\n        // Special case for empty string.  It means `true` (see above).\n        scriptTagConfig.autoConnect = true;\n      } else if (typeof scriptTagConfig.autoConnect !== \"boolean\") {\n        throw new Error(\n          \"sails.io.js :: Unexpected/invalid configuration for `autoConnect` provided in script tag: `\" +\n            scriptTagConfig.autoConnect +\n            \"` (a `\" +\n            typeof scriptTagConfig.autoConnect +\n            \"`). Should be a boolean.\"\n        );\n      }\n    }\n\n    // `environment`\n    if (typeof scriptTagConfig.environment !== \"undefined\") {\n      if (typeof scriptTagConfig.environment !== \"string\") {\n        throw new Error(\n          \"sails.io.js :: Unexpected/invalid configuration for `environment` provided in script tag: `\" +\n            scriptTagConfig.environment +\n            \"` (a `\" +\n            typeof scriptTagConfig.environment +\n            \"`). Should be a string.\"\n        );\n      }\n    }\n\n    // `headers`\n    if (typeof scriptTagConfig.headers !== \"undefined\") {\n      if (\n        typeof scriptTagConfig.headers !== \"object\" ||\n        Array.isArray(scriptTagConfig.headers)\n      ) {\n        throw new Error(\n          \"sails.io.js :: Unexpected/invalid configuration for `headers` provided in script tag: `\" +\n            scriptTagConfig.headers +\n            \"` (a `\" +\n            typeof scriptTagConfig.headers +\n            '`). Should be a JSON-compatible dictionary (i.e. `{}`).  Don\\'t forget those double quotes (\"\"), even on key names!  Use single quotes (\\'\\') to wrap the HTML attribute value; e.g. `headers=\\'{\"X-Auth\": \"foo\"}\\'`'\n        );\n      }\n    }\n\n    // `url`\n    if (typeof scriptTagConfig.url !== \"undefined\") {\n      if (typeof scriptTagConfig.url !== \"string\") {\n        throw new Error(\n          \"sails.io.js :: Unexpected/invalid configuration for `url` provided in script tag: `\" +\n            scriptTagConfig.url +\n            \"` (a `\" +\n            typeof scriptTagConfig.url +\n            \"`). Should be a string.\"\n        );\n      }\n    }\n\n    // OTHER `io.sails` options are NOT CURRENTLY SUPPORTED VIA HTML ATTRIBUTES.\n  }\n\n  // Grab a reference to the global socket.io client (if one is available).\n  // This is used via closure below to determine which `io` to use when the\n  // socket.io client instance (`io`) is augmented to become the Sails client\n  // SDK instance (still `io`).\n  var _existingGlobalSocketIO = typeof io !== \"undefined\" ? io : undefined;\n\n  //////////////////////////////////////////////////////////////\n  /////\n  ///// NOW FOR BUNCHES OF:\n  /////  - PRIVATE FUNCTION DEFINITIONS\n  /////  - CONSTRUCTORS\n  /////  - AND METHODS\n  /////\n  //////////////////////////////////////////////////////////////\n  //\n\n  //  ███████╗ █████╗ ██╗██╗     ███████╗      ██╗ ██████╗        ██████╗██╗     ██╗███████╗███╗   ██╗████████╗\n  //  ██╔════╝██╔══██╗██║██║     ██╔════╝      ██║██╔═══██╗      ██╔════╝██║     ██║██╔════╝████╗  ██║╚══██╔══╝\n  //  ███████╗███████║██║██║     ███████╗█████╗██║██║   ██║█████╗██║     ██║     ██║█████╗  ██╔██╗ ██║   ██║\n  //  ╚════██║██╔══██║██║██║     ╚════██║╚════╝██║██║   ██║╚════╝██║     ██║     ██║██╔══╝  ██║╚██╗██║   ██║\n  //  ███████║██║  ██║██║███████╗███████║      ██║╚██████╔╝      ╚██████╗███████╗██║███████╗██║ ╚████║   ██║\n  //  ╚══════╝╚═╝  ╚═╝╚═╝╚══════╝╚══════╝      ╚═╝ ╚═════╝        ╚═════╝╚══════╝╚═╝╚══════╝╚═╝  ╚═══╝   ╚═╝\n  //\n\n  /**\n   * SailsIOClient()\n   *\n   * Augment the provided Socket.io client object (`io`) with methods for\n   * talking and listening to one or more Sails backend(s).  If no `io` was\n   * provided (i.e. in a browser setting), then attempt to use the global.\n   *\n   * This absorbs implicit `io.sails` configuration, sets a timer for\n   * automatically connecting a socket (if `io.sails.autoConnect` is enabled)\n   * and returns the augmented `io`.\n   *\n   * Note:\n   * The automatically-connected socket is exposed as `io.socket`.  If this\n   * socket attempts to bind event listeners or send requests before it is\n   * connected, it will be queued up and replayed when the connection is\n   * successfully opened.\n   *\n   * @param {SocketIO} io\n   * @returns {SailsIOClient} [also called `io`]\n   */\n\n  function SailsIOClient(_providedSocketIO) {\n    // First, determine which `io` we're augmenting.\n    //\n    // Prefer the passed-in `io` instance, but fall back to the\n    // global one if we've got it.\n    var io;\n    if (_providedSocketIO) {\n      io = _providedSocketIO;\n    } else {\n      io = _existingGlobalSocketIO;\n    }\n    // (note that for readability, we deliberately do not short circuit or use the tertiary operator above)\n\n    // If a socket.io client (`io`) is not available, none of this will work.\n    if (!io) {\n      // If node:\n      if (SDK_INFO.platform === \"node\") {\n        throw new Error(\n          \"No socket.io client available.  When requiring `sails.io.js` from Node.js, a socket.io client (`io`) must be passed in; e.g.:\\n```\\nvar io = require('sails.io.js')( require('socket.io-client') )\\n```\\n(see https://github.com/balderdashy/sails.io.js/tree/master/test for more examples)\"\n        );\n      }\n      // Otherwise, this is a web browser:\n      else {\n        throw new Error(\n          \"The Sails socket SDK depends on the socket.io client, but the socket.io global (`io`) was not available when `sails.io.js` loaded.  Normally, the socket.io client code is bundled with sails.io.js, so something is a little off.  Please check to be sure this version of `sails.io.js` has the minified Socket.io client at the top of the file.\"\n        );\n      }\n    }\n\n    // If the chosen socket.io client (`io`) has ALREADY BEEN AUGMENTED by this SDK,\n    // (i.e. if it already has a `.sails` property) then throw an error.\n    if (io.sails) {\n      // If node:\n      if (SDK_INFO.platform === \"node\") {\n        throw new Error(\n          \"The provided socket.io client (`io`) has already been augmented into a Sails socket SDK instance (it has `io.sails`).\"\n        );\n      }\n      // Otherwise, this is a web browser:\n      else {\n        throw new Error(\n          \"The socket.io client (`io`) has already been augmented into a Sails socket SDK instance.  Usually, this means you are bringing `sails.io.js` onto the page more than once.\"\n        );\n      }\n    }\n\n    /**\n     * A little logger for this library to use internally.\n     * Basically just a wrapper around `console.log` with\n     * support for feature-detection.\n     *\n     * @api private\n     * @factory\n     */\n    function LoggerFactory(options) {\n      options = options || {\n        prefix: true\n      };\n\n      // If `console.log` is not accessible, `log` is a noop.\n      if (\n        typeof console !== \"object\" ||\n        typeof console.log !== \"function\" ||\n        typeof console.log.bind !== \"function\"\n      ) {\n        return function noop() {};\n      }\n\n      return function log() {\n        var args = Array.prototype.slice.call(arguments);\n\n        // All logs are disabled when `io.sails.environment = 'production'`.\n        if (io.sails.environment === \"production\") return;\n\n        // Add prefix to log messages (unless disabled)\n        var PREFIX = \"\";\n        if (options.prefix) {\n          args.unshift(PREFIX);\n        }\n\n        // Call wrapped logger\n        console.log.bind(console).apply(this, args);\n      };\n    } //</LoggerFactory>\n\n    // Create a private logger instance\n    var consolog = LoggerFactory();\n    consolog.noPrefix = LoggerFactory({\n      prefix: false\n    });\n\n    /**\n     * What is the `requestQueue`?\n     *\n     * The request queue is used to simplify app-level connection logic--\n     * i.e. so you don't have to wait for the socket to be connected\n     * to start trying to  synchronize data.\n     *\n     * @api private\n     * @param  {SailsSocket}  socket\n     */\n\n    function runRequestQueue(socket) {\n      var queue = socket.requestQueue;\n\n      if (!queue) return;\n      for (var i in queue) {\n        // Double-check that `queue[i]` will not\n        // inadvertently discover extra properties attached to the Object\n        // and/or Array prototype by other libraries/frameworks/tools.\n        // (e.g. Ember does this. See https://github.com/balderdashy/sails.io.js/pull/5)\n        var isSafeToDereference = {}.hasOwnProperty.call(queue, i);\n        if (isSafeToDereference) {\n          // Get the arguments that were originally made to the \"request\" method\n          var requestArgs = queue[i];\n          // Call the request method again in the context of the socket, with the original args\n          socket.request.apply(socket, requestArgs);\n        }\n      }\n\n      // Now empty the queue to remove it as a source of additional complexity.\n      socket.requestQueue = null;\n    }\n\n    /**\n     * Send a JSONP request.\n     *\n     * @param  {Object}   opts [optional]\n     * @param  {Function} cb\n     * @return {XMLHttpRequest}\n     */\n\n    function jsonp(opts, cb) {\n      opts = opts || {};\n\n      if (typeof window === \"undefined\") {\n        // FUTURE: refactor node usage to live in here\n        return cb();\n      }\n\n      var scriptEl = document.createElement(\"script\");\n      window._sailsIoJSConnect = function(response) {\n        // In rare circumstances our script may have been vaporised.\n        // Remove it, but only if it still exists\n        // https://github.com/balderdashy/sails.io.js/issues/92\n        if (scriptEl && scriptEl.parentNode) {\n          scriptEl.parentNode.removeChild(scriptEl);\n        }\n\n        cb(response);\n      };\n      scriptEl.src = opts.url;\n      document.getElementsByTagName(\"head\")[0].appendChild(scriptEl);\n    }\n\n    //       ██╗███████╗ ██████╗ ███╗   ██╗      ██╗    ██╗███████╗██████╗ ███████╗ ██████╗  ██████╗██╗  ██╗███████╗████████╗\n    //       ██║██╔════╝██╔═══██╗████╗  ██║      ██║    ██║██╔════╝██╔══██╗██╔════╝██╔═══██╗██╔════╝██║ ██╔╝██╔════╝╚══██╔══╝\n    //       ██║███████╗██║   ██║██╔██╗ ██║█████╗██║ █╗ ██║█████╗  ██████╔╝███████╗██║   ██║██║     █████╔╝ █████╗     ██║\n    //  ██   ██║╚════██║██║   ██║██║╚██╗██║╚════╝██║███╗██║██╔══╝  ██╔══██╗╚════██║██║   ██║██║     ██╔═██╗ ██╔══╝     ██║\n    //  ╚█████╔╝███████║╚██████╔╝██║ ╚████║      ╚███╔███╔╝███████╗██████╔╝███████║╚██████╔╝╚██████╗██║  ██╗███████╗   ██║\n    //   ╚════╝ ╚══════╝ ╚═════╝ ╚═╝  ╚═══╝       ╚══╝╚══╝ ╚══════╝╚═════╝ ╚══════╝ ╚═════╝  ╚═════╝╚═╝  ╚═╝╚══════╝   ╚═╝\n    //\n    //  ██████╗ ███████╗███████╗██████╗  ██████╗ ███╗   ██╗███████╗███████╗     ██╗     ██╗██╗    ██╗██████╗ ██╗\n    //  ██╔══██╗██╔════╝██╔════╝██╔══██╗██╔═══██╗████╗  ██║██╔════╝██╔════╝    ██╔╝     ██║██║    ██║██╔══██╗╚██╗\n    //  ██████╔╝█████╗  ███████╗██████╔╝██║   ██║██╔██╗ ██║███████╗█████╗      ██║      ██║██║ █╗ ██║██████╔╝ ██║\n    //  ██╔══██╗██╔══╝  ╚════██║██╔═══╝ ██║   ██║██║╚██╗██║╚════██║██╔══╝      ██║ ██   ██║██║███╗██║██╔══██╗ ██║\n    //  ██║  ██║███████╗███████║██║     ╚██████╔╝██║ ╚████║███████║███████╗    ╚██╗╚█████╔╝╚███╔███╔╝██║  ██║██╔╝\n    //  ╚═╝  ╚═╝╚══════╝╚══════╝╚═╝      ╚═════╝ ╚═╝  ╚═══╝╚══════╝╚══════╝     ╚═╝ ╚════╝  ╚══╝╚══╝ ╚═╝  ╚═╝╚═╝\n    //\n\n    /**\n     * The JWR (JSON WebSocket Response) received from a Sails server.\n     *\n     * @api public\n     * @param  {Object}  responseCtx\n     *         => :body\n     *         => :statusCode\n     *         => :headers\n     *\n     * @constructor\n     */\n\n    function JWR(responseCtx) {\n      this.body = responseCtx.body;\n      this.headers = responseCtx.headers || {};\n      this.statusCode =\n        typeof responseCtx.statusCode === \"undefined\"\n          ? 200\n          : responseCtx.statusCode;\n      // FUTURE: Replace this typeof short-circuit with an assertion (statusCode should always be set)\n\n      if (this.statusCode < 200 || this.statusCode >= 400) {\n        // Determine the appropriate error message.\n        var msg;\n        if (this.statusCode === 0) {\n          msg = \"The socket request failed.\";\n        } else {\n          msg = \"Server responded with a \" + this.statusCode + \" status code\";\n          msg += \":\\n```\\n\" + JSON.stringify(this.body, null, 2) + \"\\n```\";\n          // (^^Note that we should always be able to rely on socket.io to give us\n          // non-circular data here, so we don't have to worry about wrapping the\n          // above in a try...catch)\n        }\n\n        // Now build and attach Error instance.\n        this.error = new Error(msg);\n      }\n    }\n    JWR.prototype.toString = function() {\n      return (\n        \"[ResponseFromSails]\" +\n        \"  -- \" +\n        \"Status: \" +\n        this.statusCode +\n        \"  -- \" +\n        \"Headers: \" +\n        this.headers +\n        \"  -- \" +\n        \"Body: \" +\n        this.body\n      );\n    };\n    JWR.prototype.toPOJO = function() {\n      return {\n        body: this.body,\n        headers: this.headers,\n        statusCode: this.statusCode\n      };\n    };\n    JWR.prototype.pipe = function() {\n      // FUTURE: look at substack's stuff\n      return new Error(\"Client-side streaming support not implemented yet.\");\n    };\n\n    //          ███████╗███╗   ███╗██╗████████╗███████╗██████╗  ██████╗ ███╗   ███╗ ██╗██╗\n    //          ██╔════╝████╗ ████║██║╚══██╔══╝██╔════╝██╔══██╗██╔═══██╗████╗ ████║██╔╝╚██╗\n    //          █████╗  ██╔████╔██║██║   ██║   █████╗  ██████╔╝██║   ██║██╔████╔██║██║  ██║\n    //          ██╔══╝  ██║╚██╔╝██║██║   ██║   ██╔══╝  ██╔══██╗██║   ██║██║╚██╔╝██║██║  ██║\n    //  ███████╗███████╗██║ ╚═╝ ██║██║   ██║   ██║     ██║  ██║╚██████╔╝██║ ╚═╝ ██║╚██╗██╔╝\n    //  ╚══════╝╚══════╝╚═╝     ╚═╝╚═╝   ╚═╝   ╚═╝     ╚═╝  ╚═╝ ╚═════╝ ╚═╝     ╚═╝ ╚═╝╚═╝\n    //\n\n    /**\n     * @api private\n     * @param  {SailsSocket} socket  [description]\n     * @param  {Object} requestCtx [description]\n     */\n\n    function _emitFrom(socket, requestCtx) {\n      if (!socket._raw) {\n        throw new Error(\n          \"Failed to emit from socket- raw SIO socket is missing.\"\n        );\n      }\n\n      // Since callback is embedded in requestCtx,\n      // retrieve it and delete the key before continuing.\n      var cb = requestCtx.cb;\n      delete requestCtx.cb;\n\n      // Name of the appropriate socket.io listener on the server\n      // ( === the request method or \"verb\", e.g. 'get', 'post', 'put', etc. )\n      var sailsEndpoint = requestCtx.method;\n\n      socket._raw.emit(sailsEndpoint, requestCtx, function serverResponded(\n        responseCtx\n      ) {\n        // Send back (emulatedHTTPBody, jsonWebSocketResponse)\n        if (cb && !requestCtx.calledCb) {\n          cb(responseCtx.body, new JWR(responseCtx));\n          // Set flag indicating that callback was called, to avoid duplicate calls.\n          requestCtx.calledCb = true;\n          // Remove the callback from the list.\n          socket._responseCbs.splice(socket._responseCbs.indexOf(cb), 1);\n          // Remove the context from the list.\n          socket._requestCtxs.splice(\n            socket._requestCtxs.indexOf(requestCtx),\n            1\n          );\n        }\n      });\n    }\n\n    //  ███████╗ █████╗ ██╗██╗     ███████╗███████╗ ██████╗  ██████╗██╗  ██╗███████╗████████╗\n    //  ██╔════╝██╔══██╗██║██║     ██╔════╝██╔════╝██╔═══██╗██╔════╝██║ ██╔╝██╔════╝╚══██╔══╝\n    //  ███████╗███████║██║██║     ███████╗███████╗██║   ██║██║     █████╔╝ █████╗     ██║\n    //  ╚════██║██╔══██║██║██║     ╚════██║╚════██║██║   ██║██║     ██╔═██╗ ██╔══╝     ██║\n    //  ███████║██║  ██║██║███████╗███████║███████║╚██████╔╝╚██████╗██║  ██╗███████╗   ██║\n    //  ╚══════╝╚═╝  ╚═╝╚═╝╚══════╝╚══════╝╚══════╝ ╚═════╝  ╚═════╝╚═╝  ╚═╝╚══════╝   ╚═╝\n    //\n\n    /**\n     * SailsSocket\n     *\n     * A wrapper for an underlying Socket instance that communicates directly\n     * to the Socket.io server running inside of Sails.\n     *\n     * If no `socket` option is provied, SailsSocket will function as a mock. It will queue socket\n     * requests and event handler bindings, replaying them when the raw underlying socket actually\n     * connects. This is handy when we don't necessarily have the valid configuration to know\n     * WHICH SERVER to talk to yet, etc.  It is also used by `io.socket` for your convenience.\n     *\n     * @constructor\n     * @api private\n     *\n     * ----------------------------------------------------------------------\n     * Note: This constructor should not be used directly. To obtain a `SailsSocket`\n     * instance of your very own, run:\n     * ```\n     * var mySocket = io.sails.connect();\n     * ```\n     * ----------------------------------------------------------------------\n     */\n    function SailsSocket(opts) {\n      var self = this;\n      opts = opts || {};\n\n      // Initialize private properties\n      self._isConnecting = false;\n      self._mightBeAboutToAutoConnect = false;\n\n      // Set up connection options so that they can only be changed when socket is disconnected.\n      var _opts = {};\n      SOCKET_OPTIONS.forEach(function(option) {\n        // Okay to change global headers while socket is connected\n        if (option == \"headers\") {\n          return;\n        }\n        Object.defineProperty(self, option, {\n          get: function() {\n            if (option == \"url\") {\n              return (\n                _opts[option] || (self._raw && self._raw.io && self._raw.io.uri)\n              );\n            }\n            return _opts[option];\n          },\n          set: function(value) {\n            // Don't allow value to be changed while socket is connected\n            if (\n              self.isConnected() &&\n              io.sails.strict !== false &&\n              value != _opts[option]\n            ) {\n              throw new Error(\n                \"Cannot change value of `\" +\n                  option +\n                  \"` while socket is connected.\"\n              );\n            }\n            // If socket is attempting to reconnect, stop it.\n            if (\n              self._raw &&\n              self._raw.io &&\n              self._raw.io.reconnecting &&\n              !self._raw.io.skipReconnect\n            ) {\n              self._raw.io.skipReconnect = true;\n              consolog(\n                \"Stopping reconnect; use .reconnect() to connect socket after changing options.\"\n              );\n            }\n            _opts[option] = value;\n          }\n        });\n      });\n\n      // Absorb opts into SailsSocket instance\n      // See http://sailsjs.com/documentation/reference/web-sockets/socket-client/sails-socket/properties\n      // for description of options\n      SOCKET_OPTIONS.forEach(function(option) {\n        self[option] = opts[option];\n      });\n\n      // Set up \"eventQueue\" to hold event handlers which have not been set on the actual raw socket yet.\n      self.eventQueue = {};\n\n      // Listen for special `parseError` event sent from sockets hook on the backend\n      // if an error occurs but a valid callback was not received from the client\n      // (i.e. so the server had no other way to send back the error information)\n      self.on(\"sails:parseError\", function(err) {\n        consolog(\n          \"Sails encountered an error parsing a socket message sent from this client, and did not have access to a callback function to respond with.\"\n        );\n        consolog(\"Error details:\", err);\n      });\n\n      // FUTURE:\n      // Listen for a special private message on any connected that allows the server\n      // to set the environment (giving us 100% certainty that we guessed right)\n      // However, note that the `console.log`s called before and after connection\n      // are still forced to rely on our existing heuristics (to disable, tack #production\n      // onto the URL used to fetch this file.)\n    } //</SailsSocket>\n\n    /**\n     * `SailsSocket.prototype._connect()`\n     *\n     * Begin connecting this socket to the server.\n     *\n     * @api private\n     */\n    SailsSocket.prototype._connect = function() {\n      var self = this;\n\n      self._isConnecting = true;\n\n      // Apply `io.sails` config as defaults\n      // (now that at least one tick has elapsed)\n      // See http://sailsjs.com/documentation/reference/web-sockets/socket-client/sails-socket/properties\n      // for description of options and default values\n      SOCKET_OPTIONS.forEach(function(option) {\n        if (\"undefined\" == typeof self[option]) {\n          self[option] = io.sails[option];\n        }\n      });\n\n      // Headers that will be sent with the initial request to /socket.io (Node.js only)\n      self.extraHeaders = self.initialConnectionHeaders || {};\n\n      // For browser usage (currently works with \"polling\" transport only)\n      self.transportOptions = self.transportOptions || {};\n      self.transports.forEach(function(transport) {\n        self.transportOptions[transport] =\n          self.transportOptions[transport] || {};\n        self.transportOptions[transport].extraHeaders =\n          self.initialConnectionHeaders || {};\n      });\n\n      // Log a warning if non-Node.js platform attempts to use `initialConnectionHeaders` for anything other than `polling`.\n      if (\n        (self.initialConnectionHeaders &&\n          SDK_INFO.platform !== \"node\" &&\n          self.transports.indexOf(\"polling\") === -1) ||\n        self.transports.length > 1\n      ) {\n        if (typeof console === \"object\" && typeof console.warn === \"function\") {\n          console.warn(\n            \"When running in browser, `initialConnectionHeaders` option is only available for the `polling` transport.\"\n          );\n        }\n      }\n\n      // Ensure URL has no trailing slash\n      self.url = self.url ? self.url.replace(/(\\/)$/, \"\") : undefined;\n\n      // Mix the current SDK version into the query string in\n      // the connection request to the server:\n      if (typeof self.query === \"string\") {\n        // (If provided as a string, trim leading question mark,\n        // just in case one was provided.)\n        self.query = self.query.replace(/^\\?/, \"\");\n        self.query += \"&\" + SDK_INFO.versionString;\n      } else if (self.query && typeof self.query === \"object\") {\n        throw new Error(\n          \"`query` setting does not currently support configuration as a dictionary (`{}`).  Instead, it must be specified as a string like `foo=89&bar=hi`\"\n        );\n      } else if (!self.query) {\n        self.query = SDK_INFO.versionString;\n      } else {\n        throw new Error(\n          \"Unexpected data type provided for `query` setting: \" + self.query\n        );\n      }\n\n      // Determine whether this is a cross-origin socket by examining the\n      // hostname and port on the `window.location` object.  If it's cross-origin,\n      // we'll attempt to get a cookie for the domain so that a Sails session can\n      // be established.\n      var isXOrigin = (function() {\n        // If `window` doesn't exist (i.e. being used from Node.js), then\n        // we won't bother attempting to get a cookie.  If you're using sockets\n        // from Node.js and find you need to share a session between multiple\n        // socket connections, you'll need to make an HTTP request to the /__getcookie\n        // endpoint of the Sails server (or any endpoint that returns a set-cookie header)\n        // and then use the cookie value in the `initialConnectionHeaders` option to\n        // io.sails.connect()\n        if (\n          typeof window === \"undefined\" ||\n          typeof window.location === \"undefined\"\n        ) {\n          return false;\n        }\n\n        // If `self.url` (aka \"target\") is falsy, then we don't need to worry about it.\n        if (typeof self.url !== \"string\") {\n          return false;\n        }\n\n        // Get information about the \"target\" (`self.url`)\n        var targetProtocol = (function() {\n          try {\n            targetProtocol = self.url.match(/^([a-z]+:\\/\\/)/i)[1].toLowerCase();\n          } catch (e) {}\n          targetProtocol = targetProtocol || \"http://\";\n          return targetProtocol;\n        })();\n        var isTargetSSL = !!self.url.match(\"^https\");\n        var targetPort = (function() {\n          try {\n            return self.url.match(/^[a-z]+:\\/\\/[^:]*:([0-9]*)/i)[1];\n          } catch (e) {}\n          return isTargetSSL ? \"443\" : \"80\";\n        })();\n        var targetAfterProtocol = self.url.replace(/^([a-z]+:\\/\\/)/i, \"\");\n\n        // If target protocol is different than the actual protocol,\n        // then we'll consider this cross-origin.\n        if (\n          targetProtocol.replace(/[:\\/]/g, \"\") !==\n          window.location.protocol.replace(/[:\\/]/g, \"\")\n        ) {\n          return true;\n        }\n\n        // If target hostname is different than actual hostname, we'll consider this cross-origin.\n        var hasSameHostname =\n          targetAfterProtocol.search(window.location.hostname) === 0;\n        if (!hasSameHostname) {\n          return true;\n        }\n\n        // If no actual port is explicitly set on the `window.location` object,\n        // we'll assume either 80 or 443.\n        var isLocationSSL = window.location.protocol.match(/https/i);\n        var locationPort =\n          window.location.port + \"\" || (isLocationSSL ? \"443\" : \"80\");\n\n        // Finally, if ports don't match, we'll consider this cross-origin.\n        if (targetPort !== locationPort) {\n          return true;\n        }\n\n        // Otherwise, it's the same origin.\n        return false;\n      })();\n\n      // Prepare to start connecting the socket\n      (function selfInvoking(cb) {\n        // If this is an attempt at a cross-origin or cross-port\n        // socket connection via a browswe, send a JSONP request\n        // first to ensure that a valid cookie is available.\n        // This can be disabled by setting `io.sails.useCORSRouteToGetCookie`\n        // to false.\n        //\n        // Otherwise, skip the stuff below.\n        //\n        if (!(self.useCORSRouteToGetCookie && isXOrigin)) {\n          return cb();\n        }\n\n        // Figure out the x-origin CORS route\n        // (Sails provides a default)\n        var xOriginCookieURL = self.url;\n        if (typeof self.useCORSRouteToGetCookie === \"string\") {\n          xOriginCookieURL += self.useCORSRouteToGetCookie;\n        } else {\n          xOriginCookieURL += \"/__getcookie\";\n        }\n\n        // Make the AJAX request (CORS)\n        jsonp(\n          {\n            url: xOriginCookieURL,\n            method: \"GET\"\n          },\n          cb\n        );\n      })(function goAheadAndActuallyConnect() {\n        // Now that we're ready to connect, create a raw underlying Socket\n        // using Socket.io and save it as `_raw` (this will start it connecting)\n        self._raw = io(self.url, self);\n\n        // If the low-level transport throws an error _while connecting_, then set the _isConnecting flag\n        // to false (since we're no longer connecting with any chance of success anyway).\n        // Also, in this case (and in dev mode only) log a helpful message.\n        self._raw.io.engine.transport.on(\"error\", function(err) {\n          if (!self._isConnecting) {\n            return;\n          }\n\n          self._isConnecting = false;\n\n          // Track this timestamp for use in reconnection messages\n          // (only relevant if reconnection is enabled.)\n          self.connectionErrorTimestamp = new Date().getTime();\n\n          // Development-only message:\n          consolog(\"====================================\");\n          consolog(\"The socket was unable to connect.\");\n          consolog(\"The server may be offline, or the\");\n          consolog(\"socket may have failed authorization\");\n          consolog(\"based on its origin or other factors.\");\n          consolog(\"You may want to check the values of\");\n          consolog(\"`sails.config.sockets.onlyAllowOrigins`\");\n          consolog(\"or (more rarely) `sails.config.sockets.beforeConnect`\");\n          consolog(\"in your app.\");\n          consolog(\"More info: https://sailsjs.com/config/sockets\");\n          consolog(\"For help: https://sailsjs.com/support\");\n          consolog(\"\");\n          consolog(\"Technical details:\");\n          consolog(err);\n          consolog(\"====================================\");\n        });\n\n        // Replay event bindings from the eager socket\n        self.replay();\n\n        /**\n         * 'connect' event is triggered when the socket establishes a connection\n         *  successfully.\n         */\n        self.on(\"connect\", function socketConnected() {\n          self._isConnecting = false;\n          consolog.noPrefix(\n            \"\\n\" +\n              \"\\n\" +\n              // '    |>    ' + '\\n' +\n              // '  \\\\___/  '+️\n              // '\\n'+\n              \"  |>    Now connected to \" +\n              (self.url ? self.url : \"Sails\") +\n              \".\" +\n              \"\\n\" +\n              \"\\\\___/   For help, see: http://bit.ly/2q0QDpf\" +\n              \"\\n\" +\n              \"        (using sails.io.js \" +\n              io.sails.sdk.platform +\n              \" SDK @v\" +\n              io.sails.sdk.version +\n              \")\" +\n              \"\\n\" +\n              \"         Connected at: \" +\n              new Date() +\n              \"\\n\" +\n              \"\\n\" +\n              \"\\n\" +\n              // '\\n'+\n              \"\"\n            // ' ⚓︎ (development mode)'\n            // 'e.g. to send a GET request to Sails via WebSockets, run:'+ '\\n' +\n            // '`io.socket.get(\"/foo\", function serverRespondedWith (body, jwr) { console.log(body); })`'+ '\\n' +\n          );\n        });\n\n        self.on(\"disconnect\", function() {\n          // Get a timestamp of when the disconnect was detected.\n          self.connectionLostTimestamp = new Date().getTime();\n\n          // Get a shallow clone of the internal array of response callbacks, in case any of the callbacks mutate it.\n          var responseCbs = [].concat(self._responseCbs || []);\n          // Wipe the internal array of response callbacks before executing them, in case a callback happens to add\n          // a new request to the queue.\n          self._responseCbs = [];\n\n          // Do the same for the internal request context list.\n          var requestCtxs = [].concat(self._requestCtxs || []);\n          self._requestCtxs = [];\n\n          // Loop through the callbacks for all in-progress requests, and call them each with an error indicating the disconnect.\n          if (responseCbs.length) {\n            responseCbs.forEach(function(responseCb) {\n              responseCb(\n                new Error(\n                  \"The socket disconnected before the request completed.\"\n                ),\n                {\n                  body: null,\n                  statusCode: 0,\n                  headers: {}\n                }\n              );\n            });\n          }\n\n          // If there is a list of request contexts, indicate that their callbacks have been\n          // called and then wipe the list.  This prevents errors in the edge case of a response\n          // somehow coming back after the socket reconnects.\n          if (requestCtxs.length) {\n            requestCtxs.forEach(function(requestCtx) {\n              requestCtx.calledCb = true;\n            });\n          }\n\n          consolog(\"====================================\");\n          consolog(\"Socket was disconnected from Sails.\");\n          consolog(\n            \"Usually, this is due to one of the following reasons:\" +\n              \"\\n\" +\n              \" -> the server \" +\n              (self.url ? self.url + \" \" : \"\") +\n              \"was taken down\" +\n              \"\\n\" +\n              \" -> your browser lost internet connectivity\"\n          );\n          consolog(\"====================================\");\n        });\n\n        self.on(\"reconnecting\", function(numAttempts) {\n          consolog(\n            \"\\n\" +\n              \"        Socket is trying to reconnect to \" +\n              (self.url ? self.url : \"Sails\") +\n              \"...\\n\" +\n              \"_-|>_-  (attempt #\" +\n              numAttempts +\n              \")\" +\n              \"\\n\" +\n              \"\\n\"\n          );\n        });\n\n        self.on(\"reconnect\", function(transport, numAttempts) {\n          if (!self._isConnecting) {\n            self.on(\"connect\", runRequestQueue.bind(self, self));\n          }\n\n          var msSinceLastOffline;\n          var numSecsOffline;\n          if (self.connectionLostTimestamp) {\n            msSinceLastOffline =\n              new Date().getTime() - self.connectionLostTimestamp;\n            numSecsOffline = msSinceLastOffline / 1000;\n          } else if (self.connectionErrorTimestamp) {\n            msSinceLastOffline =\n              new Date().getTime() - self.connectionErrorTimestamp;\n            numSecsOffline = msSinceLastOffline / 1000;\n          } else {\n            msSinceLastOffline = \"???\";\n            numSecsOffline = \"???\";\n          }\n\n          consolog(\n            \"\\n\" +\n              \"  |>    Socket reconnected successfully after\" +\n              \"\\n\" +\n              \"\\\\___/   being offline at least \" +\n              numSecsOffline +\n              \" seconds.\" +\n              \"\\n\" +\n              \"\\n\"\n          );\n        });\n\n        // 'error' event is triggered if connection can not be established.\n        // (usually because of a failed authorization, which is in turn\n        // usually due to a missing or invalid cookie)\n        self.on(\"error\", function failedToConnect(err) {\n          self._isConnecting = false;\n          ////////////////////////////////////////////////////////////////////////////////////\n          // Note:\n          // In the future, we could provide a separate event for when a socket cannot connect\n          // due to a failed `beforeConnect` (aka \"authorization\" if you're old school).\n          // this could probably be implemented by emitting a special event from the server.\n          ////////////////////////////////////////////////////////////////////////////////////\n\n          consolog(\n            \"Failed to connect socket (possibly due to failed `beforeConnect` on server)\",\n            \"Error:\",\n            err\n          );\n        });\n      });\n    };\n\n    /**\n     * Reconnect the underlying socket.\n     *\n     * @api public\n     */\n    SailsSocket.prototype.reconnect = function() {\n      if (this._isConnecting) {\n        throw new Error(\"Cannot connect- socket is already connecting\");\n      }\n      if (this.isConnected()) {\n        throw new Error(\"Cannot connect- socket is already connected\");\n      }\n      return this._connect();\n    };\n\n    /**\n     * Disconnect the underlying socket.\n     *\n     * @api public\n     */\n    SailsSocket.prototype.disconnect = function() {\n      this._isConnecting = false;\n      if (!this.isConnected()) {\n        throw new Error(\"Cannot disconnect- socket is already disconnected\");\n      }\n      return this._raw.disconnect();\n    };\n\n    /**\n     * isConnected\n     *\n     * @return {Boolean} whether the socket is connected and able to\n     *                   communicate w/ the server.\n     */\n\n    SailsSocket.prototype.isConnected = function() {\n      if (!this._raw) {\n        return false;\n      }\n\n      return !!this._raw.connected;\n    };\n\n    /**\n     * isConnecting\n     *\n     * @return {Boolean} whether the socket is in the process of connecting\n     *                   to the server.\n     */\n\n    SailsSocket.prototype.isConnecting = function() {\n      return this._isConnecting;\n    };\n\n    /**\n     * isConnecting\n     *\n     * @return {Boolean} flag that is `true` after a SailsSocket instance is\n     *                   initialized but before one tick of the event loop\n     *                   has passed (so that it hasn't attempted to connect\n     *                   yet, if autoConnect ends up being configured `true`)\n     */\n    SailsSocket.prototype.mightBeAboutToAutoConnect = function() {\n      return this._mightBeAboutToAutoConnect;\n    };\n\n    /**\n     * [replay description]\n     * @return {[type]} [description]\n     */\n    SailsSocket.prototype.replay = function() {\n      var self = this;\n\n      // Pass events and a reference to the request queue\n      // off to the self._raw for consumption\n      for (var evName in self.eventQueue) {\n        for (var i in self.eventQueue[evName]) {\n          self._raw.on(evName, self.eventQueue[evName][i]);\n        }\n      }\n\n      // Bind a one-time function to run the request queue\n      // when the self._raw connects.\n      if (!self.isConnected()) {\n        self._raw.once(\"connect\", runRequestQueue.bind(self, self));\n      }\n      // Or run it immediately if self._raw is already connected\n      else {\n        runRequestQueue(self);\n      }\n\n      return self;\n    };\n\n    /**\n     * Chainable method to bind an event to the socket.\n     *\n     * @param  {String}   evName [event name]\n     * @param  {Function} fn     [event handler function]\n     * @return {SailsSocket}\n     */\n    SailsSocket.prototype.on = function(evName, fn) {\n      // Bind the event to the raw underlying socket if possible.\n      if (this._raw) {\n        this._raw.on(evName, fn);\n        return this;\n      }\n\n      // Otherwise queue the event binding.\n      if (!this.eventQueue[evName]) {\n        this.eventQueue[evName] = [fn];\n      } else {\n        this.eventQueue[evName].push(fn);\n      }\n\n      return this;\n    };\n\n    /**\n     * Chainable method to unbind an event from the socket.\n     *\n     * @param  {String}   evName [event name]\n     * @param  {Function} fn     [event handler function]\n     * @return {SailsSocket}\n     */\n    SailsSocket.prototype.off = function(evName, fn) {\n      // Bind the event to the raw underlying socket if possible.\n      if (this._raw) {\n        this._raw.off(evName, fn);\n        return this;\n      }\n\n      // Otherwise queue the event binding.\n      if (this.eventQueue[evName] && this.eventQueue[evName].indexOf(fn) > -1) {\n        this.eventQueue[evName].splice(this.eventQueue[evName].indexOf(fn), 1);\n      }\n\n      return this;\n    };\n\n    /**\n     * Chainable method to unbind all events from the socket.\n     *\n     * @return {SailsSocket}\n     */\n    SailsSocket.prototype.removeAllListeners = function() {\n      // Bind the event to the raw underlying socket if possible.\n      if (this._raw) {\n        this._raw.removeAllListeners();\n        return this;\n      }\n\n      // Otherwise queue the event binding.\n      this.eventQueue = {};\n\n      return this;\n    };\n\n    /**\n     * Simulate a GET request to sails\n     * e.g.\n     *    `socket.get('/user/3', Stats.populate)`\n     *\n     * @api public\n     * @param {String} url    ::    destination URL\n     * @param {Object} data   ::    parameters to send with the request [optional]\n     * @param {Function} cb   ::    callback function to call when finished [optional]\n     */\n\n    SailsSocket.prototype.get = function(url, data, cb) {\n      // `data` is optional\n      if (typeof data === \"function\") {\n        cb = data;\n        data = {};\n      }\n\n      return this.request(\n        {\n          method: \"get\",\n          params: data,\n          url: url\n        },\n        cb\n      );\n    };\n\n    /**\n     * Simulate a POST request to sails\n     * e.g.\n     *    `socket.post('/event', newMeeting, $spinner.hide)`\n     *\n     * @api public\n     * @param {String} url    ::    destination URL\n     * @param {Object} data   ::    parameters to send with the request [optional]\n     * @param {Function} cb   ::    callback function to call when finished [optional]\n     */\n\n    SailsSocket.prototype.post = function(url, data, cb) {\n      // `data` is optional\n      if (typeof data === \"function\") {\n        cb = data;\n        data = {};\n      }\n\n      return this.request(\n        {\n          method: \"post\",\n          data: data,\n          url: url\n        },\n        cb\n      );\n    };\n\n    /**\n     * Simulate a PUT request to sails\n     * e.g.\n     *    `socket.post('/event/3', changedFields, $spinner.hide)`\n     *\n     * @api public\n     * @param {String} url    ::    destination URL\n     * @param {Object} data   ::    parameters to send with the request [optional]\n     * @param {Function} cb   ::    callback function to call when finished [optional]\n     */\n\n    SailsSocket.prototype.put = function(url, data, cb) {\n      // `data` is optional\n      if (typeof data === \"function\") {\n        cb = data;\n        data = {};\n      }\n\n      return this.request(\n        {\n          method: \"put\",\n          params: data,\n          url: url\n        },\n        cb\n      );\n    };\n\n    /**\n     * Simulate a PATCH request to sails\n     * e.g.\n     *    `socket.patch('/event/3', changedFields, $spinner.hide)`\n     *\n     * @api public\n     * @param {String} url    ::    destination URL\n     * @param {Object} data   ::    parameters to send with the request [optional]\n     * @param {Function} cb   ::    callback function to call when finished [optional]\n     */\n\n    SailsSocket.prototype.patch = function(url, data, cb) {\n      // `data` is optional\n      if (typeof data === \"function\") {\n        cb = data;\n        data = {};\n      }\n\n      return this.request(\n        {\n          method: \"patch\",\n          params: data,\n          url: url\n        },\n        cb\n      );\n    };\n\n    /**\n     * Simulate a DELETE request to sails\n     * e.g.\n     *    `socket.delete('/event', $spinner.hide)`\n     *\n     * @api public\n     * @param {String} url    ::    destination URL\n     * @param {Object} data   ::    parameters to send with the request [optional]\n     * @param {Function} cb   ::    callback function to call when finished [optional]\n     */\n\n    SailsSocket.prototype[\"delete\"] = function(url, data, cb) {\n      // `data` is optional\n      if (typeof data === \"function\") {\n        cb = data;\n        data = {};\n      }\n\n      return this.request(\n        {\n          method: \"delete\",\n          params: data,\n          url: url\n        },\n        cb\n      );\n    };\n\n    /**\n     * Simulate an HTTP request to sails\n     * e.g.\n     * ```\n     * socket.request({\n     *   url:'/user',\n     *   params: {},\n     *   method: 'POST',\n     *   headers: {}\n     * }, function (responseBody, JWR) {\n     *   // ...\n     * });\n     * ```\n     *\n     * @api public\n     * @option {String} url    ::    destination URL\n     * @option {Object} params ::    parameters to send with the request [optional]\n     * @option {Object} headers::    headers to send with the request [optional]\n     * @option {Function} cb   ::    callback function to call when finished [optional]\n     * @option {String} method ::    HTTP request method [optional]\n     */\n\n    SailsSocket.prototype.request = function(options, cb) {\n      var usage =\n        \"Usage:\\n\" +\n        \"socket.request( options, [fnToCallWhenComplete] )\\n\\n\" +\n        'options.url :: e.g. \"/foo/bar\"' +\n        \"\\n\" +\n        'options.method :: e.g. \"get\", \"post\", \"put\", or \"delete\", etc.' +\n        \"\\n\" +\n        'options.params :: e.g. { emailAddress: \"mike@example.com\" }' +\n        \"\\n\" +\n        'options.headers :: e.g. { \"x-my-custom-header\": \"some string\" }';\n      // Old usage:\n      // var usage = 'Usage:\\n socket.'+(options.method||'request')+'('+\n      //   ' destinationURL, [dataToSend], [fnToCallWhenComplete] )';\n\n      // Validate options and callback\n      if (typeof cb !== \"undefined\" && typeof cb !== \"function\") {\n        throw new Error(\"Invalid callback function!\\n\" + usage);\n      }\n      if (typeof options !== \"object\" || typeof options.url !== \"string\") {\n        throw new Error(\"Invalid or missing URL!\\n\" + usage);\n      }\n      if (options.method && typeof options.method !== \"string\") {\n        throw new Error(\n          'Invalid `method` provided (should be a string like \"post\" or \"put\")\\n' +\n            usage\n        );\n      }\n      if (options.headers && typeof options.headers !== \"object\") {\n        throw new Error(\n          \"Invalid `headers` provided (should be a dictionary with string values)\\n\" +\n            usage\n        );\n      }\n      if (options.params && typeof options.params !== \"object\") {\n        throw new Error(\n          \"Invalid `params` provided (should be a dictionary with JSON-serializable values)\\n\" +\n            usage\n        );\n      }\n      if (options.data && typeof options.data !== \"object\") {\n        throw new Error(\n          \"Invalid `data` provided (should be a dictionary with JSON-serializable values)\\n\" +\n            usage\n        );\n      }\n\n      // Accept either `params` or `data` for backwards compatibility (but not both!)\n      if (options.data && options.params) {\n        throw new Error(\n          \"Cannot specify both `params` and `data`!  They are aliases of each other.\\n\" +\n            usage\n        );\n      } else if (options.data) {\n        options.params = options.data;\n        delete options.data;\n      }\n\n      // If this socket is not connected yet, queue up this request\n      // instead of sending it.\n      // (so it can be replayed when the socket comes online.)\n      if (!this.isConnected()) {\n        // If no queue array exists for this socket yet, create it.\n        this.requestQueue = this.requestQueue || [];\n        this.requestQueue.push([options, cb]);\n        return;\n      }\n\n      // Otherwise, our socket is connected, so continue prepping\n      // the request.\n\n      // Default headers to an empty object\n      options.headers = options.headers || {};\n\n      // Build a simulated request object\n      // (and sanitize/marshal options along the way)\n      var requestCtx = {\n        method: (options.method || \"get\").toLowerCase(),\n\n        headers: options.headers,\n\n        data: options.params || options.data || {},\n\n        // Remove trailing slashes and spaces to make packets smaller.\n        url: options.url.replace(/^(.+)\\/*\\s*$/, \"$1\"),\n\n        cb: cb\n      };\n\n      // Get a reference to the callback list, or create a new one.\n      this._responseCbs = this._responseCbs || [];\n\n      // Get a reference to the request context list, or create a new one.\n      this._requestCtxs = this._requestCtxs || [];\n\n      // Add this callback to the list.  If the socket disconnects, we'll call\n      // each cb in the list with an error and reset the list.  Otherwise the\n      // cb will be removed from the list when the server responds.\n      // Also add the request context to the list.  It will be removed once\n      // the response comes back, or if the socket disconnects.\n      if (cb) {\n        this._responseCbs.push(cb);\n        this._requestCtxs.push(requestCtx);\n      }\n\n      // Merge global headers in, if there are any.\n      if (this.headers && \"object\" === typeof this.headers) {\n        for (var header in this.headers) {\n          if (!options.headers.hasOwnProperty(header)) {\n            options.headers[header] = this.headers[header];\n          }\n        }\n      }\n\n      // Send the request.\n      _emitFrom(this, requestCtx);\n    };\n\n    /**\n     * Socket.prototype._request\n     *\n     * Simulate HTTP over Socket.io.\n     *\n     * @api private\n     * @param  {[type]}   options [description]\n     * @param  {Function} cb      [description]\n     */\n    SailsSocket.prototype._request = function(options, cb) {\n      throw new Error(\n        \"`_request()` was a private API deprecated as of v0.11 of the sails.io.js client. Use `.request()` instead.\"\n      );\n    };\n\n    //  ██╗ ██████╗    ███████╗ █████╗ ██╗██╗     ███████╗\n    //  ██║██╔═══██╗   ██╔════╝██╔══██╗██║██║     ██╔════╝\n    //  ██║██║   ██║   ███████╗███████║██║██║     ███████╗\n    //  ██║██║   ██║   ╚════██║██╔══██║██║██║     ╚════██║\n    //  ██║╚██████╔╝██╗███████║██║  ██║██║███████╗███████║\n    //  ╚═╝ ╚═════╝ ╚═╝╚══════╝╚═╝  ╚═╝╚═╝╚══════╝╚══════╝\n    //\n    // Set an `io.sails` object that may be used for configuration before the\n    // first socket connects (i.e. to allow auto-connect behavior to be\n    // prevented by setting `io.sails.autoConnect` in an inline script\n    // directly after the script tag which loaded this file).\n\n    //  ┌─┐┌─┐┌┬┐  ┬ ┬┌─┐  ╔╦╗╔═╗╔═╗╔═╗╦ ╦╦ ╔╦╗╔═╗  ┌─┐┌─┐┬─┐  ┬┌─┐ ┌─┐┌─┐┬┬  ┌─┐\n    //  └─┐├┤  │   │ │├─┘   ║║║╣ ╠╣ ╠═╣║ ║║  ║ ╚═╗  ├┤ │ │├┬┘  ││ │ └─┐├─┤││  └─┐\n    //  └─┘└─┘ ┴   └─┘┴    ═╩╝╚═╝╚  ╩ ╩╚═╝╩═╝╩ ╚═╝  └  └─┘┴└─  ┴└─┘o└─┘┴ ┴┴┴─┘└─┘\n    io.sails = {\n      // Whether to automatically connect a socket and save it as `io.socket`.\n      autoConnect: true,\n\n      // Whether to automatically try to reconnect after connection is lost\n      reconnection: false,\n\n      // The route (path) to hit to get a x-origin (CORS) cookie\n      // (or true to use the default: '/__getcookie')\n      useCORSRouteToGetCookie: true,\n\n      // The environment we're running in.\n      // (logs are not displayed when this is set to 'production')\n      //\n      // Defaults to \"development\" unless this script was fetched from a URL\n      // that ends in `*.min.js` or '#production', or if the conventional\n      // `SAILS_LOCALS` global is set with an `_environment` of \"production\"\n      // or \"staging\".  (This setting may also be manually overridden.)\n      environment:\n        urlThisScriptWasFetchedFrom.match(/(\\#production|\\.min\\.js)/g) ||\n        (typeof window === \"object\" &&\n          window &&\n          typeof window.SAILS_LOCALS === \"object\" &&\n          window.SAILS_LOCALS &&\n          (window.SAILS_LOCALS._environment === \"staging\" ||\n            window.SAILS_LOCALS._environment === \"production\"))\n          ? \"production\"\n          : \"development\",\n\n      // The version of this sails.io.js client SDK\n      sdk: SDK_INFO,\n\n      // Transports to use when communicating with the server, in the order they will be tried\n      transports: [\"websocket\"]\n    };\n\n    //  ┌─┐─┐ ┬┌┬┐┌─┐┌┐┌┌┬┐  ┬┌─┐ ┌─┐┌─┐┬┬  ┌─┐  ┌┬┐┌─┐┌─┐┌─┐┬ ┬┬ ┌┬┐┌─┐\n    //  ├┤ ┌┴┬┘ │ ├┤ │││ ││  ││ │ └─┐├─┤││  └─┐   ││├┤ ├┤ ├─┤│ ││  │ └─┐\n    //  └─┘┴ └─ ┴ └─┘┘└┘─┴┘  ┴└─┘o└─┘┴ ┴┴┴─┘└─┘  ─┴┘└─┘└  ┴ ┴└─┘┴─┘┴ └─┘\n    //  ┬ ┬┬┌┬┐┬ ┬  ┌┬┐┬ ┬┌─┐  ╦ ╦╔╦╗╔╦╗╦    ╔═╗╔╦╗╔╦╗╦═╗╦╔╗ ╦ ╦╔╦╗╔═╗╔═╗\n    //  ││││ │ ├─┤   │ ├─┤├┤   ╠═╣ ║ ║║║║    ╠═╣ ║  ║ ╠╦╝║╠╩╗║ ║ ║ ║╣ ╚═╗\n    //  └┴┘┴ ┴ ┴ ┴   ┴ ┴ ┴└─┘  ╩ ╩ ╩ ╩ ╩╩═╝  ╩ ╩ ╩  ╩ ╩╚═╩╚═╝╚═╝ ╩ ╚═╝╚═╝\n    //  ┌─┐┬─┐┌─┐┌┬┐  ┌┬┐┬ ┬┌─┐  ┌─┐┌─┐┬─┐┬┌─┐┌┬┐  ┌┬┐┌─┐┌─┐\n    //  ├┤ ├┬┘│ ││││   │ ├─┤├┤   └─┐│  ├┬┘│├─┘ │    │ ├─┤│ ┬\n    //  └  ┴└─└─┘┴ ┴   ┴ ┴ ┴└─┘  └─┘└─┘┴└─┴┴   ┴    ┴ ┴ ┴└─┘\n    //\n    // Now fold in config provided as HTML attributes on the script tag:\n    // (note that if `io.sails.*` is changed after this script, those changes\n    //  will still take precedence)\n    CONFIGURABLE_VIA_HTML_ATTR.forEach(function(configKey) {\n      if (typeof scriptTagConfig[configKey] !== \"undefined\") {\n        io.sails[configKey] = scriptTagConfig[configKey];\n      }\n    });\n    //////////////////////////////////////////////////////////////////////////////\n    // Note that the new HTML attribute configuration style may eventually\n    // completely replace the original approach of setting `io.sails` properties,\n    // since the new strategy is easier to reason about.  Also, it would allow us\n    // to remove the timeout below someday.\n    //////////////////////////////////////////////////////////////////////////////\n\n    //  ┬┌─┐ ┌─┐┌─┐┬┬  ┌─┐ ╔═╗╔═╗╔╗╔╔╗╔╔═╗╔═╗╔╦╗  /  \\\n    //  ││ │ └─┐├─┤││  └─┐ ║  ║ ║║║║║║║║╣ ║   ║  /   /\n    //  ┴└─┘o└─┘┴ ┴┴┴─┘└─┘o╚═╝╚═╝╝╚╝╝╚╝╚═╝╚═╝ ╩  \\  /\n\n    /**\n     * Add `io.sails.connect` function as a wrapper for the built-in `io()` aka `io.connect()`\n     * method, returning a SailsSocket. This special function respects the configured io.sails\n     * connection URL, as well as sending other identifying information (most importantly, the\n     * current version of this SDK).\n     *\n     * @param  {String} url  [optional]\n     * @param  {Object} opts [optional]\n     * @return {Socket}\n     */\n    io.sails.connect = function(url, opts) {\n      // Make URL optional\n      if (\"object\" === typeof url) {\n        opts = url;\n        url = null;\n      }\n\n      // Default opts to empty object\n      opts = opts || {};\n\n      // If explicit connection url is specified, save it to options\n      opts.url = url || opts.url || undefined;\n\n      // Instantiate and return a new SailsSocket- and try to connect immediately.\n      var socket = new SailsSocket(opts);\n      socket._connect();\n      return socket;\n    };\n\n    //  ██╗ ██████╗    ███████╗ ██████╗  ██████╗██╗  ██╗███████╗████████╗\n    //  ██║██╔═══██╗   ██╔════╝██╔═══██╗██╔════╝██║ ██╔╝██╔════╝╚══██╔══╝\n    //  ██║██║   ██║   ███████╗██║   ██║██║     █████╔╝ █████╗     ██║\n    //  ██║██║   ██║   ╚════██║██║   ██║██║     ██╔═██╗ ██╔══╝     ██║\n    //  ██║╚██████╔╝██╗███████║╚██████╔╝╚██████╗██║  ██╗███████╗   ██║\n    //  ╚═╝ ╚═════╝ ╚═╝╚══════╝ ╚═════╝  ╚═════╝╚═╝  ╚═╝╚══════╝   ╚═╝\n    //\n    // io.socket\n    //\n    // The eager instance of Socket which will automatically try to connect\n    // using the host that this js file was served from.\n    //\n    // This can be disabled or configured by setting properties on `io.sails.*` within the\n    // first cycle of the event loop.\n    //\n\n    // Build `io.socket` so it exists\n    // (note that this DOES NOT start the connection process)\n    io.socket = new SailsSocket();\n    //\n    // This socket is not connected yet, and has not even _started_ connecting.\n    //\n    // But in the mean time, this eager socket will be queue events bound by the user\n    // before the first cycle of the event loop (using `.on()`), which will later\n    // be rebound on the raw underlying socket.\n\n    //  ┌─┐┌─┐┌┬┐  ┌─┐┬ ┬┌┬┐┌─┐   ┌─┐┌─┐┌┐┌┌┐┌┌─┐┌─┐┌┬┐  ┌┬┐┬┌┬┐┌─┐┬─┐\n    //  └─┐├┤  │   ├─┤│ │ │ │ │───│  │ │││││││├┤ │   │    │ ││││├┤ ├┬┘\n    //  └─┘└─┘ ┴   ┴ ┴└─┘ ┴ └─┘   └─┘└─┘┘└┘┘└┘└─┘└─┘ ┴    ┴ ┴┴ ┴└─┘┴└─\n    // If configured to do so, start auto-connecting after the first cycle of the event loop\n    // has completed (to allow time for this behavior to be configured/disabled\n    // by specifying properties on `io.sails`)\n\n    // Indicate that the autoConnect timer has started.\n    io.socket._mightBeAboutToAutoConnect = true;\n\n    setTimeout(function() {\n      // Indicate that the autoConect timer fired.\n      io.socket._mightBeAboutToAutoConnect = false;\n\n      // If autoConnect is disabled, delete the eager socket (io.socket) and bail out.\n      if (io.sails.autoConnect === false || io.sails.autoconnect === false) {\n        delete io.socket;\n        return;\n      }\n\n      // consolog('Eagerly auto-connecting socket to Sails... (requests will be queued in the mean-time)');\n      io.socket._connect();\n    }, 0); // </setTimeout>\n\n    // Return the `io` object.\n    return io;\n  } //</SailsIOClient>\n\n  //\n  /////////////////////////////////////////////////////////////////////////////////\n  ///// </bunches of private function definitions, constructors, and methods>\n  /////////////////////////////////////////////////////////////////////////////////\n\n  //  ███████╗██╗  ██╗██████╗  ██████╗ ███████╗███████╗    ███████╗██████╗ ██╗  ██╗\n  //  ██╔════╝╚██╗██╔╝██╔══██╗██╔═══██╗██╔════╝██╔════╝    ██╔════╝██╔══██╗██║ ██╔╝\n  //  █████╗   ╚███╔╝ ██████╔╝██║   ██║███████╗█████╗      ███████╗██║  ██║█████╔╝\n  //  ██╔══╝   ██╔██╗ ██╔═══╝ ██║   ██║╚════██║██╔══╝      ╚════██║██║  ██║██╔═██╗\n  //  ███████╗██╔╝ ██╗██║     ╚██████╔╝███████║███████╗    ███████║██████╔╝██║  ██╗\n  //  ╚══════╝╚═╝  ╚═╝╚═╝      ╚═════╝ ╚══════╝╚══════╝    ╚══════╝╚═════╝ ╚═╝  ╚═╝\n  //\n\n  // Add CommonJS support to allow this client SDK to be used from Node.js.\n  if (SDK_INFO.platform === \"node\") {\n    module.exports = SailsIOClient;\n  }\n  // Add AMD support, registering this client SDK as an anonymous module.\n  else if (typeof define === \"function\" && define.amd) {\n    define([], function() {\n      return SailsIOClient;\n    });\n  } else {\n    // Otherwise, try to instantiate the client using the global `io`:\n    SailsIOClient();\n\n    // Note:\n    // If you are modifying this file manually to wrap an existing socket.io client\n    // (e.g. to prevent pollution of the global namespace), you can replace the global\n    // `io` with your own `io` instance above.\n  }\n})();\n\n/* eslint-enable */\n","import { createStore } from \"framework7\";\n\nexport default (AB) => {\n   const allDCs = AB.datacollections();\n\n   const configStore = {\n      state: {\n         // \"0e9f5f6f-cd0b-4b93-b0c8-d51bd9852322\": [],\n         // \"19e566e3-a6b0-4ed5-83ea-a42b1ddbf5c5\": [],\n         user: { username: \"\" },\n         version: \"\",\n      },\n      getters: {\n         // \"0e9f5f6f-cd0b-4b93-b0c8-d51bd9852322\"({ state }) {\n         //    return state[\"0e9f5f6f-cd0b-4b93-b0c8-d51bd9852322\"];\n         // },\n         // \"19e566e3-a6b0-4ed5-83ea-a42b1ddbf5c5\"({ state }) {\n         //    return state[\"19e566e3-a6b0-4ed5-83ea-a42b1ddbf5c5\"];\n         // },\n         user({ state }) {\n            return state[\"user\"];\n         },\n         version({ state }) {\n            return state.version;\n         },\n      },\n      actions: {\n         getAppBuilderData({ state }, id) {\n            let DC = AB.datacollectionByID(id);\n            DC.setState(state);\n            DC.loadData();\n         },\n         setUser({ state }, user) {\n            state[\"user\"] = user;\n         },\n         updateRecord({ state }, props) {\n            let records = [...state[props.dcID].records];\n            let foundIndex = records.findIndex((x) => x.uuid == props.recordID);\n            let recordToUpdate = records[foundIndex];\n\n            for (var propt in props.record) {\n               if (Object.prototype.hasOwnProperty.call(recordToUpdate, propt))\n                  recordToUpdate[propt] = props.record[propt];\n            }\n            state[props.dcID] = {\n               loading: false,\n               hasMore: records.length >= 60 ? false : true,\n               records: records,\n            };\n         },\n         getVersion({ state }) {\n            state.version = app.f7.params.version;\n         },\n      },\n   };\n\n   allDCs.forEach((DC) => {\n      configStore.state[DC.id] = [];\n      configStore.getters[DC.id] = function ({ state }) {\n         return state[DC.id];\n      };\n   });\n\n   const store = createStore(configStore);\n\n   return store;\n};\n"],"names":["$jsx","FormButton","FormCheckbox","FormConnect","FormCustom","FormDatepicker","FormJSON","FormNumber","FormReadonly","FormSelectMultiple","FormSelectSingle","FormTextbox","FormTree","F7ViewForm","AB","settings","constructor","record","isLoading","definitions","datacollection","datasource","fields","map","f","id","key","formComponent","common","field","columnName","fieldType","label","concat","views","definition","required","datacollectionByID","dcID","init","ab","getCursor","parsedRecord","forEach","view","date","getMonth","getDate","getFullYear","datetime","Date","hours","getHours","minutes","getMinutes","toString","$f7","form","fillFromData","viewHTML","allResults","renderedFieldElements","length","push","html","class","r","formItem","F7ViewFormButton","save","#save","$","addClass","formData","convertToData","input","validateInputs","removeClass","parsedFormData","toISOString","parseInt","dc","model","create","update","PK","current","router","back","e","console","error","L","Label","text","errors","JSON","parse","valError","name","message","toast","icon","position","closeTimeout","open","onClick","href","F7ViewFormCheckbox","type","validate","F7ViewFormConnect","connectedType","F7ViewFormCustom","F7ViewFormDatepicker","placeholder","readonly","F7ViewFormItem","F7ViewFormJSON","F7ViewFormNumber","errorMessage","value","min","max","step","pattern","F7ViewFormReadonly","F7ViewFormSelectMultiple","multiple","options","item","F7ViewFormSelectSingle","F7ViewFormTextbox","$inputElement","F7ViewFormTree","F7ViewList","itemSelected","detailPage","main","navigate","props","isEditMode","ignoreCache","setCursor","uuid","openView","data","loadMore","hasMore","$store","dispatch","getters","Name","Array","x","i","onInfinite","$h","$on","$update","Application","applications","defaultPath","username","password","versionNumber","version","showingUpdate","apiUrl","document","location","origin","addEventListener","visibilityState","checkForUpdate","updatePassword","close","loginScreen","logout","authenticate","tempUser","Network","post","url","params","email","user","isInitialized","transition","err","showPasswordPreview","show","hide","focus","showPassword","getVersionPath","urlCurrentVersion","response","get","currVersion","log","trim","navigator","dialog","title","content","buttons","bold","cssClass","progressbar","serviceWorker","getRegistrations","then","registrations","complete","index","registration","unregister","boolean","window","reload","verticalButtons","src","width","pages","p","route","style","action","onSubmit","autocorrect","autocomplete","spellcheck","onInput","viewBox","cx","cy","Form","dcGetter","allViews","formDatepickerDate","formDatepickerDatetime","page","pendingInit","viewInit","callback","Promise","resolve","isDataInitialized","waitDCInit","setInterval","clearInterval","all","calendar","inputEl","timePicker","dateFormat","month","day","year","hour","minute","destroy","allHTML","warn","List","allGetters","on","delItem","getAttribute","list","$dc","getItem","getFirstRecord","delete","onclick"],"sourceRoot":""}