{"version":3,"file":"mobile_src_js_AppBuilder_core_dataFields_ABFieldDateCore_js.1854e320f3980e12400b.js","mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEwD;;AAExD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,OAAO,MAAM,GAAG;AAChB;AACA;AACA,YAAY,IAAI;AAChB;;AAEA;AACA,OAAO,MAAM,GAAG;AAChB;AACA,YAAY,IAAI;AAChB;;AAEA;AACA;AACA;;AAEA;AACA,OAAO;AACP;;AAEA;AACA,OAAO;AACP;;AAEA;AACA,OAAO,MAAM,GAAG;AAChB;AACA;;AAEA;AACA,OAAO;AACP;AACA;;AAEA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,8BAA8B,oEAAO;AACpD;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,6BAA6B,EAAE,OAAO,EAAE,OAAO,EAAE;;AAEjD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,cAAc,aAAa;AAC3B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,GAAG,KAAK,EAAE;AAC9D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,GAAG,KAAK,EAAE;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,GAAG,KAAK,EAAE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,EAAE;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,EAAE;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,EAAE;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,EAAE;AACxD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB,EAAE,OAAO,EAAE,OAAO,EAAE;;AAEzB","sources":["webpack://appbuilder-pwa/./src/js/AppBuilder/core/dataFields/ABFieldDateCore.js"],"sourcesContent":["/*\n * ABFieldDate\n *\n * An ABFieldDate defines a date field type.\n *\n */\n\nimport ABField from \"../../platform/dataFields/ABField\";\n\nconst ABFieldDateDefaults = {\n   key: \"date\",\n   // unique key to reference this specific DataField\n\n   description: \"Pick one from a calendar.\",\n   // description: what gets displayed in the Editor description.\n   // NOTE: this will be displayed using a Label: L(description)\n\n   icon: \"calendar\",\n   // font-awesome icon reference.  (without the 'fa-').  so 'calendar'  to\n   // reference 'fa-calendar'\n\n   isFilterable: true,\n   // {bool} / {fn}\n   // determines if the current ABField can be used to filter (FilterComplex\n   // or Query) data.\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\n   //  (field) => field.setting.something == true\n\n   isSortable: true,\n   // {bool} / {fn}\n   // determines if the current ABField can be used to Sort data.\n   // if a {fn} is provided, it will be called with the ABField as a parameter:\n   //  (field) => true/false\n\n   menuName: \"Date\",\n   // menuName: what gets displayed in the Editor drop list\n   // NOTE: this will be displayed using a Label: L(menuName)\n\n   supportRequire: true,\n   // {bool}\n   // does this ABField support the Required setting?\n\n   supportUnique: false,\n   // {bool}\n   // does this ABField support the Unique setting?\n\n   useAsLabel: true,\n   // {bool} / {fn}\n   // determines if this ABField can be used in the display of an ABObject's\n   // label.\n\n   compatibleOrmTypes: [\"date\"],\n   // {array}\n   // what types of Sails ORM attributes can be imported into this data type?\n   // http://sailsjs.org/documentation/concepts/models-and-orm/attributes#?attribute-options\n\n   compatibleMysqlTypes: [\"date\"],\n   // {array}\n   // what types of MySql column types can be imported into this data type?\n   // https://www.techonthenet.com/mysql/datatypes.php\n};\n\nconst defaultValues = {\n   dateFormat: 2, // 1 (Ignore date), 2, 3, 4, 5\n   defaultDate: 1, // 1 (None), 2 (Current Date), 3 (Specific Date)\n   defaultDateValue: null, // {Date}\n   validateCondition: \"none\",\n   validateRangeUnit: \"days\",\n   validateRangeBefore: 0,\n   validateRangeAfter: 0,\n   validateStartDate: null,\n   validateEndDate: null,\n};\n\nexport default class ABFieldDateCore extends ABField {\n   constructor(values, object, defaultValues = ABFieldDateDefaults) {\n      super(values, object, defaultValues);\n   }\n\n   // return the default values for this DataField\n   static defaults() {\n      return ABFieldDateDefaults;\n   }\n\n   static defaultValues() {\n      return defaultValues;\n   }\n\n   // TODO: current webpack install fails here without babel-loader,\n   // so swtich this to old JS method of Static Values (see bottom)\n   // static RegEx = \"^[0-9]{4}-[0-9]{2}-[0-9]{2}$\";\n\n   ///\n   /// Instance Methods\n   ///\n\n   /**\n    * @method fromValues()\n    *\n    * initialze this object with the given set of values.\n    * @param {obj} values\n    */\n   fromValues(values) {\n      super.fromValues(values);\n\n      // text to Int:\n      this.settings.dateFormat = parseInt(this.settings.dateFormat);\n      this.settings.defaultDate = parseInt(this.settings.defaultDate);\n   }\n\n   ///\n   /// Working with Actual Object Values:\n   ///\n\n   /**\n    * @method defaultValue\n    * insert a key=>value pair that represent the default value\n    * for this field.\n    * @param {obj} values a key=>value hash of the current values.\n    */\n   defaultValue(values) {\n      if (values[this.columnName] != null) return;\n\n      let dateResult;\n\n      // Set current date as default\n      if (this.settings.defaultDate == 2) {\n         dateResult = new Date();\n      }\n      // Set specific date as default\n      else if (\n         this.settings.defaultDate == 3 &&\n         this.settings.defaultDateValue\n      ) {\n         dateResult = new Date(this.settings.defaultDateValue);\n      }\n\n      // if no default value is set, then don't insert a value.\n      if (dateResult != null) {\n         values[this.columnName] = this.AB.rules.toDateFormat(dateResult, {\n            format: \"YYYY-MM-DD\",\n         });\n         // values[this.columnName] = moment(dateResult).format(\"YYYY-MM-DD\");\n      }\n   }\n\n   /**\n    * @method isValidData\n    * Parse through the given data and return an error if this field's\n    * data seems invalid.\n    * @param {obj} data  a key=>value hash of the inputs to parse.\n    * @param {OPValidator} validator  provided Validator fn\n    */\n   isValidData(data, validator) {\n      super.isValidData(data, validator);\n      let L = this.AB.Label();\n\n      if (data[this.columnName]) {\n         let value = data[this.columnName];\n\n         if (!(value instanceof Date)) {\n            value = this.AB.rules.toDate(value);\n            // value = new Date(this.convertToMoment(value));\n         }\n\n         // verify we didn't end up with an InValid Date result.\n         if (\n            Object.prototype.toString.call(value) === \"[object Date]\" &&\n            isFinite(value)\n         ) {\n            let isValid = true;\n\n            // Custom vaildate is here\n            if (this.settings && this.settings.validateCondition) {\n               const startDate = this.settings.validateStartDate\n                     ? new Date(this.settings.validateStartDate)\n                     : null,\n                  endDate = this.settings.validateEndDate\n                     ? new Date(this.settings.validateEndDate)\n                     : null,\n                  startDateDisplay = this.getDateDisplay(startDate),\n                  endDateDisplay = this.getDateDisplay(endDate);\n               const minDate = this.AB.rules.subtractDate(\n                  new Date(),\n                  this.settings.validateRangeBefore,\n                  this.settings.validateRangeUnit\n               );\n               const maxDate = this.AB.rules.addDate(\n                  new Date(),\n                  this.settings.validateRangeAfter,\n                  this.settings.validateRangeUnit\n               );\n               switch (this.settings.validateCondition) {\n                  case \"dateRange\":\n                     if (minDate < value && value < maxDate) isValid = true;\n                     else {\n                        isValid = false;\n                        validator.addError(\n                           this.columnName,\n                           L(\"Should be in between {0} and {1}\", [\n                              this.getDateDisplay(minDate),\n                              this.getDateDisplay(maxDate),\n                           ])\n                        );\n                     }\n\n                     break;\n                  case \"between\":\n                     if (startDate < value && value < endDate) isValid = true;\n                     else {\n                        isValid = false;\n                        validator.addError(\n                           this.columnName,\n                           L(\"Should be in between {0} and {1}\", [\n                              startDateDisplay,\n                              endDateDisplay,\n                           ])\n                        );\n                     }\n                     break;\n                  case \"notBetween\":\n                     if (value < startDate && endDate < value) isValid = true;\n                     else {\n                        isValid = false;\n                        validator.addError(\n                           this.columnName,\n                           L(\"Should not be in between {0} and {1}\", [\n                              startDateDisplay,\n                              endDateDisplay,\n                           ])\n                        );\n                     }\n                     break;\n                  case \"=\":\n                     isValid =\n                        value.getTime &&\n                        startDate.getTime &&\n                        value.getTime() == startDate.getTime();\n                     if (!isValid)\n                        validator.addError(\n                           this.columnName,\n                           L(\"Should equal {0}\", [startDateDisplay])\n                        );\n                     break;\n                  case \"<>\":\n                     isValid =\n                        value.getTime &&\n                        startDate.getTime &&\n                        value.getTime() != startDate.getTime();\n                     if (!isValid)\n                        validator.addError(\n                           this.columnName,\n                           L(\"Should not equal {0}\", [startDateDisplay])\n                        );\n                     break;\n                  case \">\":\n                     isValid =\n                        value.getTime &&\n                        startDate.getTime &&\n                        value.getTime() > startDate.getTime();\n                     if (!isValid)\n                        validator.addError(\n                           this.columnName,\n                           L(\"Should after {0}\", [startDateDisplay])\n                        );\n                     break;\n                  case \"<\":\n                     isValid =\n                        value.getTime &&\n                        startDate.getTime &&\n                        value.getTime() < startDate.getTime();\n                     if (!isValid)\n                        validator.addError(\n                           this.columnName,\n                           L(\"Should before {0}\", [startDateDisplay])\n                        );\n                     break;\n                  case \">=\":\n                     isValid =\n                        value.getTime &&\n                        startDate.getTime &&\n                        value.getTime() >= startDate.getTime();\n                     if (!isValid)\n                        validator.addError(\n                           this.columnName,\n                           L(\"Should after or equal {0}\", [startDateDisplay])\n                        );\n                     break;\n                  case \"<=\":\n                     isValid =\n                        value.getTime &&\n                        startDate.getTime &&\n                        value.getTime() <= startDate.getTime();\n                     if (!isValid)\n                        validator.addError(\n                           this.columnName,\n                           L(\"Should before or equal {0}\", [startDateDisplay])\n                        );\n                     break;\n               }\n            }\n\n            if (isValid) {\n               // Reformat value to DB\n               // NOTE: should we update here?\n               data[this.columnName] = this.exportValue(value);\n            }\n         } else {\n            // return a validation error\n            validator.addError(this.columnName, \"Should be a Date!\");\n         }\n      }\n   }\n\n   format(rowData) {\n      const d = this.dataValue(rowData);\n\n      if (d == \"\" || d == null) {\n         return \"\";\n      }\n\n      // pull format from settings.\n      const dateObj = this.AB.rules.toDate(d);\n      return this.getDateDisplay(dateObj);\n\n      // const momentObj = this.convertToMoment(d);\n      // return this.getDateDisplay(new Date(momentObj));\n   }\n\n   getFormat() {\n      let dateFormatString = \"\";\n\n      const dateFormat =\n         this.settings && this.settings.dateFormat\n            ? this.settings.dateFormat\n            : \"\";\n\n      switch (dateFormat) {\n         //Ignore Date\n         case (1, 2):\n            {\n               dateFormatString = \"%d/%m/%Y\";\n            }\n            break;\n         //mm/dd/yyyy\n         case 3:\n            {\n               dateFormatString = \"%m/%d/%Y\";\n            }\n            break;\n         //M D, yyyy\n         case 4:\n            {\n               dateFormatString = \"%M %d, %Y\";\n            }\n            break;\n         //D M, yyyy\n         case 5:\n            {\n               dateFormatString = \"%d %M, %Y\";\n            }\n            break;\n         default:\n            {\n               dateFormatString = \"%d/%m/%Y\";\n            }\n            break;\n      }\n\n      return dateFormatString;\n   }\n\n   getDateDisplay(dateData) {\n      const dateFormat = this.getFormat();\n\n      return this.dateToString(dateFormat, dateData);\n   }\n\n   // convertToMoment(string) {\n   //    const result = moment(string);\n\n   //    const supportFormats = [\n   //       \"DD/MM/YYYY\",\n   //       \"MM/DD/YYYY\",\n   //       \"DD-MM-YYYY\",\n   //       \"MM-DD-YYYY\"\n   //    ];\n\n   //    supportFormats.forEach((format) => {\n   //       if (!result || !result.isValid()) result = moment(string, format);\n   //    });\n\n   //    return result;\n   // }\n\n   exportValue(value) {\n      return value\n         ? this.AB.rules.toDateFormat(value, {\n              format: \"YYYY-MM-DD\",\n           })\n         : \"\";\n      // return this.convertToMoment(value).format(\"YYYY-MM-DD\");\n   }\n\n   dateToString(dateFormat, dateData) {\n      if (dateData && dateData.toString) return dateData.toString();\n      else return \"\";\n   }\n}\n\n// Transition Code:\n// revert to static RegEx once babel-loader is working locally.\nconst RegEx = \"^[0-9]{4}-[0-9]{2}-[0-9]{2}$\";\n\nexport { RegEx };\n"],"names":[],"sourceRoot":""}