{"version":3,"file":"583.957fbcfcab0bc15448a9.js","mappings":"khBAMA,MAGMA,EAAcC,KAAKC,WAAWC,WACpC,GAAIH,EAAa,CACd,MAAMI,EAAOJ,EAAYK,IALV,IAMfJ,KAAKK,YAAYF,GACjBJ,EAAYO,SAAW,KACpBN,KAAKK,YAAYN,EAAYK,IARjB,IAQiC,CAEnD,KAAO,CAIJ,MAAMG,EAAU,IACbC,EAAY,2CAA4C,GAAIC,IACzDT,KAAKK,YAAYI,EAhBR,IAgBwB,IAEvCF,IAEAG,YAAYH,EAAS,IACxB,CAQA,SAASC,EAAYG,EAAUC,EAAc,EAAGC,EAAIC,EAAW,IAM5D,GAHAC,YAAW,KACRH,EAAc,CAAC,GACfI,MACCJ,EAAc,EAAG,CAClB,MAAMK,EAAQC,YAAYC,MAC1BC,MAAMT,EAAU,CACbU,KAAM,UACNC,MAAO,aAENC,MAAK,KACH,MAAMC,EAAMN,YAAYC,MACxBL,EAASW,KAAKD,EAAMP,GACpBT,EAAYG,EAAUC,EAAc,EAAGC,EAAIC,EAAS,IAEtDY,OAAM,IAAMb,EAAG,OACtB,KAAO,CAEJ,MACMJ,EADMK,EAASa,QAAO,CAACC,EAAGC,IAAMD,EAAIC,IACxBf,EAASgB,OAC3BjB,EAAGJ,EACN,CACH,C","sources":["webpack://ab_platform_web/./utils/networkTest.js"],"sourcesContent":["/**\n * Determines if the connection speed is slow, so we can notify users.\n * This is meant to be used as webworker so as to not clog the main thread.\n * Will post a message with true/false for whether the connection is slow.\n */\n\nconst threshold = 350; //ms\n// This is supported in chrome, but not firefox, safari, etc.\n// see: https://developer.mozilla.org/en-US/docs/Web/API/Network_Information_API#browser_compatibility\nconst networkInfo = self.navigator?.connection;\nif (networkInfo) {\n   const slow = networkInfo.rtt > threshold;\n   self.postMessage(slow);\n   networkInfo.onchange = () => {\n      self.postMessage(networkInfo.rtt > threshold);\n   };\n} else {\n   // For browsers without the Network Information API calculate manually from\n   // image download. Based on isFastNet, modified to work in a Worker.\n   // https://github.com/Saunved/isfastnet/blob/b64d7cb43115b0e7f5c9fa91d0305bb8e95e68f2/isfastnet.js\n   const runTest = () =>\n      testLatency(\"https://www.google.com/images/phd/px.gif\", 5, (avg) => {\n         self.postMessage(avg > threshold);\n      });\n   runTest();\n   // Recheck the speed every 30s\n   setInterval(runTest, 30000);\n}\n\n/**\n * recursively download a resource and track the average time to download.\n * @param {string} resource path to request the resource\n * @param {number} [timesToTest=5] how many times to run the test\n * @param {funcion} callback called with the average time in ms (avg) => {}\n */\nfunction testLatency(resource, timesToTest = 5, cb, _results = []) {\n   // Exit early - if the current response takes significantly longer than our\n   // threshold, no need to finish all the tests.\n   setTimeout(() => {\n      timesToTest = 0;\n   }, threshold * 3);\n   if (timesToTest > 0) {\n      const start = performance.now();\n      fetch(resource, {\n         mode: \"no-cors\",\n         cache: \"no-store\",\n      })\n         .then(() => {\n            const end = performance.now();\n            _results.push(end - start);\n            testLatency(resource, timesToTest - 1, cb, _results);\n         })\n         .catch(() => cb(10 * threshold)); // <- fetch failed, return a high number\n   } else {\n      /** calculate average of array items then callback */\n      const sum = _results.reduce((a, b) => a + b);\n      const avg = sum / _results.length;\n      cb(avg);\n   }\n}\n"],"names":["networkInfo","self","navigator","connection","slow","rtt","postMessage","onchange","runTest","testLatency","avg","setInterval","resource","timesToTest","cb","_results","setTimeout","threshold","start","performance","now","fetch","mode","cache","then","end","push","catch","reduce","a","b","length"],"sourceRoot":""}