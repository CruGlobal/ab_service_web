{"version":3,"file":"app.0a3bf4a2ec44dae8dc97.js","mappings":"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","sources":["webpack://ab_platform_web/./config/configDesktop.js","webpack://ab_platform_web/./config/configMobile.js","webpack://ab_platform_web/./config/Config.js","webpack://ab_platform_web/./ui/portal_loading.js","webpack://ab_platform_web/./ui/portal_auth_login_form.js","webpack://ab_platform_web/./ui/portal_auth_login_resetPassword.js","webpack://ab_platform_web/./ui/portal_auth_login_resetRequest.js","webpack://ab_platform_web/./ui/portal_auth_login.js","webpack://ab_platform_web/./ui/portal_auth.js","webpack://ab_platform_web/./ui/ClassUIPage.js","webpack://ab_platform_web/./ui/portal_work_inbox_accordion.js","webpack://ab_platform_web/./ui/portal_work_inbox_taskWindow.js","webpack://ab_platform_web/./ui/portal_work_inbox.js","webpack://ab_platform_web/./ui/portal_work_user_profile_window.js","webpack://ab_platform_web/./ui/portal_work_user_switcheroo.js","webpack://ab_platform_web/./ui/portal_work_user_qr_window.js","webpack://ab_platform_web/./ui/portal_work_user_mobile_qr.js","webpack://ab_platform_web/./ui/portal_access_level_manager.js","webpack://ab_platform_web/./ui/portal_translation_tool.js","webpack://ab_platform_web/./ui/portal_tutorial_manager.js","webpack://ab_platform_web/./ui/portal_work.js","webpack://ab_platform_web/./ui/portal.js","webpack://ab_platform_web/./ui/ui.js","webpack://ab_platform_web/./ui/error_noDefs.js","webpack://ab_platform_web/./init/Bootstrap.js","webpack://ab_platform_web/./init/initDiv.js","webpack://ab_platform_web/./init/initConfig.js","webpack://ab_platform_web/./init/initUser.js","webpack://ab_platform_web/./index.js","webpack://ab_platform_web/./ui/ClassUI.js","webpack://ab_platform_web/./utils/performance.js","webpack://ab_platform_web/webpack/runtime/startup prefetch"],"sourcesContent":["/**\n * @class configDesktop\n *\n * Manage our configuration settings for Desktop styles.\n\n */\n\nexport default {\n   // Application List\n   appListRowHeight: 67,\n\n   // button types\n   buttonWidthLarge: 200,\n   buttonWidthMedium: 150,\n   buttonWidthSmall: 100,\n   buttonWidthExtraSmall: 50,\n\n   // tab types\n   tabWidthLarge: 200,\n   tabWidthMedium: 120,\n   tabWidthSmall: 100,\n   tabWidthExtraSmall: 50,\n\n   // column types\n   columnWidthXLarge: 350,\n   columnWidthLarge: 250,\n   columnWidthMedium: 200,\n   columnWidthSmall: 150,\n   columnWidthExtraSmall: 100,\n\n   // spacers\n   xSmallSpacer: 5,\n   smallSpacer: 10,\n   mediumSpacer: 25,\n   largeSpacer: 50,\n   xLargeSpacer: 100,\n   xxLargeSpacer: 200,\n   xxxLargeSpacer: 400,\n   appListSpacerRowHeight: 100,\n   appListSpacerColMinWidth: 100,\n   appListSpacerColMaxWidth: 200,\n   objectWorkspaceColWidth: 20,\n\n   // labels\n   labelWidthSmall: 50,\n   labelWidthMedium: 80,\n   labelWidthLarge: 120,\n   labelWidthXLarge: 150,\n   labelWidthXXLarge: 200,\n   labelWidthXXXLarge: 280,\n   labelWidthCheckbox: 0,\n\n   // show elements on desktop\n   hideMobile: false,\n};\n","/**\n * @class configMobile\n *\n * Manage our configuration settings for mobile styles.\n\n */\n\nexport default {\n   // Application List\n   appListRowHeight: 67,\n\n   // button types\n   buttonWidthLarge: 200,\n   buttonWidthMedium: 150,\n   buttonWidthSmall: 100,\n   buttonWidthExtraSmall: 50,\n\n   // tab types\n   tabWidthLarge: 200,\n   tabWidthMedium: 120,\n   tabWidthSmall: 100,\n   tabWidthExtraSmall: 50,\n\n   // column types\n   columnWidthLarge: 250,\n   columnWidthMedium: 200,\n   columnWidthSmall: 150,\n   columnWidthExtraSmall: 100,\n\n   // spacers\n   xSmallSpacer: 1,\n   smallSpacer: 1,\n   mediumSpacer: 10,\n   largeSpacer: 20,\n   xLargeSpacer: 50,\n   xxLargeSpacer: 100,\n   xxxLargeSpacer: 120,\n   appListSpacerRowHeight: 10,\n   appListSpacerColMinWidth: 1,\n   appListSpacerColMaxWidth: 1,\n   objectWorkspaceColWidth: 1,\n\n   // labels\n   labelWidthSmall: 50,\n   labelWidthMedium: 80,\n   labelWidthLarge: 120,\n   labelWidthXLarge: 120,\n   labelWidthXXLarge: 120,\n   labelWidthCheckbox: 0,\n\n   // hide elements for mobile\n   hideMobile: true,\n};\n","import ConfigDesktop from \"./configDesktop\";\nimport ConfigMobile from \"./configMobile\";\n\n// var EventEmitter = require(\"events\").EventEmitter;\nimport { defaultsDeep } from \"lodash\";\n\nconst settingsDefault = {\n   \"appbuilder-portal-autoenter\": true,\n   // {bool} autoenter\n   // open up the portal as soon as we load.\n   //   false : just displays a link that will load the portal\n\n   \"appbuilder-portal-fullscreen\": true,\n   // {bool} fullscreen\n   // take up the full browser window?\n   //   false : only take up the area the current div is\n\n   \"appbuilder-tenant\": null,\n   // {string} tenant\n   // the tenant uuid for this AppBuilder instance.\n\n   \"appbuilder-view\": \"work\",\n   // {string} view\n   // the default view to display to the current user.\n\n   \"appbuilder-tenant-prefix\": null,\n   // TESTING! Remove this\n};\n\nconst configDefaults = {\n   site: {\n      appbuilder: {\n         networkType: \"socket\",\n         // options: [\"rest\", \"relay\", \"socket\"]\n         // Note: \"socket\" is required for realtime updates across devices.\n\n         networkNumRetries: 3,\n         // the number of times we will retry sending a network request\n         // when we receive a timeout error.\n\n         urlCoreServer: window.location.origin,\n         // on the web client, just record the current URL by default.\n         // the site config can override this if they want.\n      },\n      storage: {\n         encrypted: false,\n         // {bool} should we encrypt our data in the local browser storage?\n      },\n   },\n};\nclass Config {\n   constructor() {\n      // this.setMaxListeners(0);\n      this._config = null;\n      // {obj} _config\n      // these are the configuration settings returned from the server. These\n      // are more detailed configuration settings for the running of the site.\n\n      this._configUser = null;\n      // {obj} _configUser\n      // the default settings for the current user of the system.\n      //    .user {obj}  the current info for who we think is using the site\n      //    .userReal {obj}  if switheroo'd, this is the actual user\n\n      this._settings = {};\n      // {obj} _settings\n      // settings are the configuration parameters found on the base <div>\n      // these settings are the minimum needed to successfully pull up the\n      // portal popup and perform the initial config request\n   }\n\n   config(json) {\n      this._config = this._config || {};\n      Object.keys(json).forEach((k) => {\n         this._config[k] = json[k];\n      });\n      defaultsDeep(this._config, configDefaults);\n   }\n\n   configInbox(json) {\n      this._config = this._config || {};\n      this._config.inbox = json.inbox || [];\n      this._config.inboxMeta = json.inboxMeta || [];\n   }\n\n   configUser(json) {\n      this._configUser = json;\n   }\n\n   setting(key, value) {\n      if (value) {\n         this._settings[key] = value;\n         return;\n      }\n      return this._settings[key];\n   }\n\n   settingsFromDiv(div) {\n      Object.keys(settingsDefault).forEach((d) => {\n         var val = div.getAttribute(d);\n         if (!val) {\n            val = settingsDefault[d];\n         }\n         if (val === \"false\") val = false;\n         if (val === \"true\") val = true;\n\n         var key = d.split(\"-\").pop();\n         this.setting(key, val);\n      });\n   }\n\n   settings(json = {}) {\n      for (let key in settingsDefault) {\n         const val = json[key] ?? settingsDefault[key];\n         this.setting(key.split(\"-\").pop(), val);\n      }\n   }\n\n   /**\n    * definitions()\n    * return the ABDefinition(s) required to manage the interface.\n    * @return {obj}\n    *          { ABDefinition.id : {ABDefinition} }  hash of definitions.\n    */\n   definitions() {\n      return window.definitions;\n   }\n\n   error(/* ...args */) {\n      console.error(\"Who is calling this? -> move to AB.error() instead.\");\n      // this.emit(\"ab.error\", args);\n   }\n\n   labelConfig() {\n      if (this._config && this._config.labels) {\n         return this._config.labels;\n      }\n      console.error(\"No Label config found.\");\n      return {};\n   }\n\n   languageConfig() {\n      if (this._config && this._config.languages) {\n         return this._config.languages;\n      }\n      console.error(\"No Language config found.\");\n      return {};\n   }\n\n   metaConfig() {\n      if (this._config && this._config.meta) {\n         return this._config.meta;\n      }\n      console.error(\"No Meta config found.\");\n      return {};\n   }\n\n   plugins() {\n      // TODO: Pull from this._config.plugins\n      return [\"ABDesigner.js\"];\n      // return [];\n   }\n\n   inboxConfig() {\n      if (this._config && this._config.inbox) {\n         return this._config.inbox;\n      }\n      return null;\n   }\n\n   inboxMetaConfig() {\n      if (this._config && this._config.inboxMeta) {\n         return this._config.inboxMeta;\n      }\n      return null;\n   }\n\n   /**\n    * @typedef SiteConfig\n    * @property {Object} appbuilder\n    * @property {number} appbuilder.networkNumRetries\n    * @property {\"socket\"|\"rest\"|\"relay\"} appbuilder.networkType\n    * @property {string} appbuilder.urlCoreServer\n    * @property {boolean} [relay] whether relay is enabled on the server\n    * @property {Object} [storage]\n    * @property {boolean} storage.encrypted\n    * @property {Array<{uuid: string, key: string}>} [tenants]\n    * @property {string} [privacyPolicy]\n    */\n   /** @returns {SiteConfig} */\n   siteConfig() {\n      if (this._config && this._config.site) {\n         return this._config.site;\n      }\n      return configDefaults.site;\n   }\n\n   tenantConfig() {\n      if (this._config && this._config.tenant) {\n         return this._config.tenant;\n      }\n      return null;\n   }\n\n   uiSettings() {\n      if (window.innerWidth < 768) {\n         return ConfigMobile;\n      }\n      return ConfigDesktop;\n   }\n\n   /**\n    * @typedef User - based on SITE_USER\n    * @property {string} email email address\n    * @property {string} id\n    * @property {number} isActive wether the user is active in the system\n    * @property {string} languageCode\n    * @property {string} username\n    * ...\n    */\n\n   /**\n    * Information about the current user\n    * @returns {User|null}\n    */\n   userConfig() {\n      return this._configUser?.user ?? null;\n   }\n\n   userReal() {\n      return this._configUser?.userReal ?? false;\n   }\n}\nexport default new Config();\n","import ClassUI from \"./ClassUI.js\";\n\nclass PortalLoading extends ClassUI {\n   constructor() {\n      super();\n   }\n\n   ui() {\n      return {\n         id: \"portal_loading\",\n         view: \"label\",\n         label: \"loading\",\n      };\n   }\n\n   init(AB) {\n      this.AB = AB;\n\n      return Promise.resolve();\n   }\n\n   show() {\n      $$(\"portal_loading\").show();\n   }\n}\n\nexport default new PortalLoading();\n","import ClassUI from \"./ClassUI.js\";\n\nclass PortalAuthLoginForm extends ClassUI {\n   constructor() {\n      super();\n   }\n\n   ui() {\n      var self = this;\n\n      if (!this.AB) {\n         // we need to init() before being able to translate our UI:\n         return {\n            id: \"portal_auth_login_container\",\n         };\n      }\n\n      var L = this.AB.Label();\n\n      return {\n         id: \"portal_auth_login_container\",\n         css: \"portalLogin\",\n         cols: [\n            {},\n            {\n               rows: [\n                  {},\n                  {\n                     width: 360,\n                     rows: [\n                        {\n                           css: \"portalLoginForm\",\n                           padding: 30,\n                           rows: [\n                              {\n                                 template:\n                                    \"<div style='text-align: center; font-size:160px; line-height: 160px;'><i style='background-color: #666; color: transparent; text-shadow: 0px 1px 1px rgba(255,255,255,0.5); -webkit-background-clip: text; -moz-background-clip: text; background-clip: text;' class='fa fa-user-circle-o'></i></div>\",\n                                 borderless: true,\n                                 height: 190,\n                                 type: \"clean\",\n                              },\n                              {\n                                 id: \"portal_auth_login_form\",\n                                 view: \"form\",\n                                 type: \"clean\",\n                                 css: { background: \"transparent !important\" },\n                                 borderless: true,\n                                 elementsConfig: {\n                                    bottomPadding: 20,\n                                    height: 52,\n                                 },\n                                 elements: [\n                                    {\n                                       view: \"text\",\n                                       placeholder: L(\"Email\"),\n                                       name: \"email\",\n                                       id: \"email\",\n                                       attributes: {\n                                          \"data-cy\":\n                                             \"portal_auth_login_form_email\",\n                                       },\n                                       // required: true,\n                                       validate: webix.rules.isEmail,\n                                       invalidMessage: L(\n                                          \"Please enter a valid email.\"\n                                       ),\n                                       validateEvent: \"blur\",\n                                    },\n                                    {\n                                       view: \"text\",\n                                       type: \"password\",\n                                       placeholder: L(\"Password\"),\n                                       name: \"password\",\n                                       attributes: {\n                                          \"data-cy\":\n                                             \"portal_auth_login_form_password\",\n                                       },\n                                       // required: true,\n                                       validate: webix.rules.isNotEmpty,\n                                       invalidMessage: L(\n                                          \"Please enter your password.\"\n                                       ),\n                                       validateEvent: \"blur\",\n                                    },\n                                    {\n                                       margin: 10,\n                                       paddingX: 2,\n                                       borderless: true,\n                                       cols: [\n                                          {},\n                                          {\n                                             view: \"button\",\n                                             label: L(\"Login\"),\n                                             type: \"form\",\n                                             id: \"portal_auth_login_form_submit\",\n                                             css: \"webix_primary\",\n                                             width: 150,\n                                             hotkey: \"enter\",\n                                             click() {\n                                                var form = $$(\n                                                   \"portal_auth_login_form\"\n                                                );\n                                                if (form.validate()) {\n                                                   $$(\n                                                      \"portal_auth_login_form_submit\"\n                                                   ).hide();\n                                                   $$(\n                                                      \"portal_auth_login_form_submit_wait\"\n                                                   ).show();\n\n                                                   var values =\n                                                      form.getValues();\n                                                   self.error(); // hids the error message\n\n                                                   // this.AB.Network.post()\n                                                   // can either be a Relay or Rest operation.\n                                                   // we should get the response from the\n                                                   // published JobRequest initialized in\n                                                   // the .init() routine.\n                                                   self.AB.Network.post(\n                                                      {\n                                                         url: \"/auth/login\",\n                                                         data: values,\n                                                      },\n                                                      {\n                                                         key: \"portal_auth_login\" /*, context:{} */,\n                                                      }\n                                                   ).catch((err) => {\n                                                      $$(\n                                                         \"portal_auth_login_form_submit\"\n                                                      ).show();\n                                                      $$(\n                                                         \"portal_auth_login_form_submit_wait\"\n                                                      ).hide();\n                                                      console.log(err);\n                                                   });\n                                                }\n                                             },\n                                             on: {\n                                                onAfterRender() {\n                                                   ClassUI.CYPRESS_REF(this);\n                                                },\n                                             },\n                                          },\n                                          {\n                                             view: \"button\",\n                                             label: \"<i class='fa fa-circle-o-notch fa-fw fa-spin'></i>\",\n                                             type: \"form\",\n                                             id: \"portal_auth_login_form_submit_wait\",\n                                             css: \"webix_primary\",\n                                             width: 150,\n                                             hidden: true,\n                                          },\n                                          {},\n                                       ],\n                                    },\n                                    {\n                                       margin: 10,\n                                       paddingX: 2,\n                                       borderless: true,\n                                       cols: [\n                                          {},\n                                          {\n                                             view: \"button\",\n                                             label: L(\"Forgot password?\"),\n                                             css: \"webix_transparent\",\n                                             click: () => {\n                                                this.emit(\"request.reset\");\n                                                // $$(\"portal_auth_login\").hide();\n                                                // $$(\"password_reset_email\").show();\n                                             },\n                                             width: 150,\n                                          },\n                                          {},\n                                       ],\n                                    },\n                                    {\n                                       id: \"portal_auth_login_form_errormsg\",\n                                       view: \"template\",\n                                       css: \"webix_control\",\n                                       height: 32,\n                                       on: {\n                                          onAfterRender() {\n                                             ClassUI.CYPRESS_REF(this);\n                                          },\n                                       },\n                                    },\n                                 ],\n                              },\n                           ],\n                        },\n                        {},\n                        {\n                           cols: [\n                              { width: 20 },\n                              {\n                                 id: \"auth_privacy_policy\",\n                                 view: \"template\",\n                                 template:\n                                    '#pretext# <a href=\"#link#\" target=\"_blank\" class=\"policyAuth\">#label#</a>',\n                                 css: \"policyLink noBackground\",\n                                 height: 30,\n                                 hidden: true,\n                              },\n                              { width: 20 },\n                           ],\n                        },\n                     ],\n                  },\n                  {},\n               ],\n            },\n            {},\n         ],\n      };\n   }\n\n   error(message) {\n      var $errMsg = $$(\"portal_auth_login_form_errormsg\");\n      if (message) {\n         $errMsg.setHTML(\n            `<div class='webix_invalid'><div class='webix_inp_bottom_label'><center>${message}</center></div></div>`\n         );\n         $errMsg.show();\n      } else {\n         $errMsg.hide();\n      }\n   }\n\n   /** @param {import('../AppBuilder/ABFactory.js').default} AB */\n   init(AB) {\n      this.AB = AB;\n\n      // now replace our initial placeholder with our viewable form\n      webix.ui(this.ui(), $$(\"portal_auth_login_container\"));\n\n      this.error(); // hides the default error message.\n\n      this.AB.Network.on(\"portal_auth_login\", (context, err, response) => {\n         // Listen for our login responses:\n         // console.log(\"Network.on():\", context, err, response);\n\n         if (err) {\n            // any http 400-500 response should show up here:\n            if (err.code) {\n               switch (err.code) {\n                  case \"EINVALIDLOGIN\":\n                     this.error(err.message);\n                     break;\n\n                  case \"EFAILEDATTEMPTS\":\n                     this.error(err.message);\n                     $$(\"portal_auth_login_form_submit\").hide();\n                     break;\n\n                  default:\n                     this.AB.error(err);\n                     break;\n               }\n            }\n            return;\n         }\n\n         if (\n            response.user ||\n            (response.status == \"success\" && response.data.user)\n         ) {\n            // reload the page to gather all the config info:\n            window.location.reload(true);\n\n            // Login was successful -> rerun BootStrap.init() to load the\n            // config, definitions, plugins, etc for this user\n            // Bootstrap.init(this.AB).catch((err) => {\n            //    Bootstrap.alert({\n            //       type: \"alert-error\",\n            //       title: \"Error initializing Portal:\",\n            //       text: err.toString(),\n            //    });\n            //    Bootstrap.error(err);\n            // });\n         } else {\n            if (response.status == \"error\") {\n               console.log(\"what to do with this error:\");\n               console.error(response);\n            }\n         }\n      });\n      const { privacyPolicy } = this.AB.Config.siteConfig();\n      if (privacyPolicy) {\n         const L = this.AB.Label();\n         $$(\"auth_privacy_policy\").setValues({\n            label: L(\"Privacy Policy\"),\n            pretext: L(\"By signing in you agree to our\"),\n            link: privacyPolicy,\n         });\n         $$(\"auth_privacy_policy\").show();\n      }\n\n      return Promise.resolve();\n   }\n\n   show() {\n      $$(\"portal_auth_login_container\").show();\n   }\n}\n\nexport default new PortalAuthLoginForm();\n","import ClassUI from \"./ClassUI.js\";\n\nvar L = null;\n\nclass PortalAuthLoginResetPassword extends ClassUI {\n   constructor() {\n      super();\n   }\n\n   ui() {\n      var self = this;\n\n      if (!this.AB) {\n         // we need to init() before being able to translate our UI:\n         return {\n            id: \"portal_auth_login_reset_password\",\n         };\n      }\n\n      return {\n         id: \"portal_auth_login_reset_password\",\n         css: \"portalLogin\",\n         cols: [\n            {},\n            {\n               rows: [\n                  {},\n                  {\n                     width: 360,\n                     rows: [\n                        {\n                           id: \"portal_auth_login_reset_password_col\",\n                           css: \"portalLoginForm\",\n                           padding: 30,\n                           rows: [\n                              {\n                                 template:\n                                    \"<div style='text-align: center; font-size:160px; line-height: 160px;'><i style='background-color: #666; color: transparent; text-shadow: 0px 1px 1px rgba(255,255,255,0.5); -webkit-background-clip: text; -moz-background-clip: text; background-clip: text;' class='fa fa-user-circle-o'></i></div>\",\n                                 borderless: true,\n                                 height: 190,\n                                 type: \"clean\",\n                              },\n                              {\n                                 id: \"portal_auth_login_reset_password_form\",\n                                 view: \"form\",\n                                 type: \"clean\",\n                                 css: { background: \"transparent !important\" },\n                                 borderless: true,\n                                 elementsConfig: {\n                                    height: 52,\n                                 },\n                                 elements: [\n                                    {\n                                       id: \"new-password-email\",\n                                       template: ` ${this.AB.Account.email()} `,\n                                       css: {\n                                          background: \"transparent !important\",\n                                          border: \"none\",\n                                          \"font-size\": \"16px\",\n                                          color: \"black\",\n                                          \"text-align\": \"center\",\n                                       },\n                                    },\n                                    {\n                                       id: \"password-new\",\n                                       view: \"text\",\n                                       type: \"password\",\n                                       placeholder: L(\"Enter a new Password\"),\n                                       name: L(\"Enter a new Password\"),\n                                       validate: (v) => {\n                                          return v.length >= 8;\n                                       },\n                                       invalidMessage: L(\n                                          \"Needs to be at least 8 characters\"\n                                       ),\n                                       validateEvent: \"blur\",\n                                       bottomPadding: 20,\n                                    },\n                                    {\n                                       id: \"password-confirm\",\n                                       view: \"text\",\n                                       type: \"password\",\n                                       placeholder: L(\"Re-enter Password\"),\n                                       name: \"email\",\n                                       validate: (v) => {\n                                          return (\n                                             v === $$(\"password-new\").getValue()\n                                          );\n                                       },\n                                       invalidMessage: L(\n                                          \"Passwords do not match\"\n                                       ),\n                                       validateEvent: \"blur\",\n                                       bottomPadding: 20,\n                                    },\n                                    {\n                                       margin: 10,\n                                       paddingX: 2,\n                                       borderless: true,\n                                       cols: [\n                                          {},\n                                          {\n                                             view: \"button\",\n                                             label: L(\"Save\"),\n                                             type: \"form\",\n                                             css: \"webix_primary\",\n                                             width: 150,\n                                             hotkey: \"enter\",\n                                             click: () => {\n                                                if (\n                                                   $$(\n                                                      \"portal_auth_login_reset_password_form\"\n                                                   ).validate()\n                                                ) {\n                                                   let password =\n                                                      $$(\n                                                         \"password-new\"\n                                                      ).getValue();\n                                                   this.AB.Network.post(\n                                                      {\n                                                         url: \"/auth/password/reset\",\n                                                         data: {\n                                                            password,\n                                                         },\n                                                      },\n                                                      {\n                                                         key: \"portal_auth_password_reset\",\n                                                         context: {},\n                                                      }\n                                                   ).catch((err) => {\n                                                      console.log(err);\n                                                   });\n                                                }\n                                             },\n                                          },\n                                          {},\n                                       ],\n                                    },\n                                 ],\n                              },\n                           ],\n                        },\n                     ],\n                  },\n                  {},\n               ],\n            },\n            {},\n         ],\n      };\n   }\n\n   async init(AB) {\n      this.AB = AB;\n\n      L = (...params) => {\n         return this.AB.Multilingual.label(...params);\n      };\n\n      // now replace our initial placeholder with our viewable form\n      webix.ui(this.ui(), $$(\"portal_auth_login_reset_password\"));\n\n      this.AB.Network.on(\n         \"portal_auth_password_reset\",\n         (context, err, response) => {\n            // Listen for our responses:\n            // Show a popup for confirmation that an email was sent.\n            // context.email : {string} entered email address.\n\n            this.AB.emit(\"portal.show\", \"work\"); // switch to the Work Portal.\n         }\n      );\n   }\n\n   show() {\n      $$(\"portal_auth_login_reset_password\").show();\n   }\n}\n\nexport default new PortalAuthLoginResetPassword();\n","import ClassUI from \"./ClassUI.js\";\n\nvar L = null;\n\nclass PortalAuthLoginResetRequest extends ClassUI {\n   constructor() {\n      super();\n   }\n\n   ui() {\n      var self = this;\n\n      if (!this.AB) {\n         // we need to init() before being able to translate our UI:\n         return {\n            id: \"portal_auth_login_reset_request\",\n         };\n      }\n\n      return {\n         id: \"portal_auth_login_reset_request\",\n         css: \"portalLogin\",\n         cols: [\n            {},\n            {\n               rows: [\n                  {},\n                  {\n                     width: 360,\n                     rows: [\n                        {\n                           id: \"password_reset_email\",\n                           css: \"portalLoginForm\",\n                           padding: 30,\n                           rows: [\n                              {\n                                 template:\n                                    \"<div style='text-align: center; font-size:160px; line-height: 160px;'><i style='background-color: #666; color: transparent; text-shadow: 0px 1px 1px rgba(255,255,255,0.5); -webkit-background-clip: text; -moz-background-clip: text; background-clip: text;' class='fa fa-envelope-o'></i></div>\",\n                                 borderless: true,\n                                 height: 190,\n                                 type: \"clean\",\n                              },\n                              {\n                                 id: \"portal_reset_password_form\",\n                                 view: \"form\",\n                                 type: \"clean\",\n                                 css: { background: \"transparent !important\" },\n                                 borderless: true,\n                                 elementsConfig: {\n                                    bottomPadding: 20,\n                                 },\n                                 elements: [\n                                    {\n                                       template: `<p>${L(\n                                          \"Enter your email. We'll send a link to reset your password.\"\n                                       )}</p>`,\n                                       autoheight: true,\n                                       css: {\n                                          background: \"transparent\",\n                                          border: \"none\",\n                                          \"font-size\": \"16px\",\n                                          color: \"black\",\n                                          \"text-align\": \"center\",\n                                       },\n                                    },\n                                    {\n                                       borderless: true,\n                                       cols: [\n                                          {\n                                             id: \"reset_tenantList\",\n                                             view: \"select\",\n                                             // label: \"Tenant\",\n                                             name: \"tenant\",\n                                             attributes: {\n                                                \"data-cy\": \"reset_tenantList\",\n                                             },\n                                             value: 1,\n                                             options: [\n                                                { id: 1, value: \"Master\" },\n                                                { id: 2, value: \"Release\" },\n                                             ],\n                                          },\n                                          {\n                                             id: \"reset-email\",\n                                             view: \"text\",\n                                             placeholder: L(\"Email\"),\n                                             name: \"email\",\n                                             validate: webix.rules.isEmail,\n                                             invalidMessage: L(\n                                                \"Please enter a valid email.\"\n                                             ),\n                                             validateEvent: \"blur\",\n                                          },\n                                          {\n                                             rows: [\n                                                {\n                                                   view: \"button\",\n                                                   icon: \"fa fa-paper-plane\",\n                                                   type: \"icon\",\n                                                   css: \"webix_primary\",\n                                                   autowidth: true,\n                                                   hotkey: \"enter\",\n                                                   click() {\n                                                      var email =\n                                                         $$(\"reset-email\");\n                                                      if (email.validate()) {\n                                                         email =\n                                                            email.getValue();\n                                                         var tenant =\n                                                            $$(\n                                                               \"reset_tenantList\"\n                                                            ).getValue();\n                                                         self.AB.Network.post(\n                                                            {\n                                                               url: \"/auth/login/reset\",\n                                                               data: {\n                                                                  email,\n                                                                  tenant,\n                                                                  url:\n                                                                     window\n                                                                        .location\n                                                                        .origin ||\n                                                                     window\n                                                                        .location\n                                                                        .href,\n                                                               },\n                                                            },\n                                                            {\n                                                               key: \"portal_auth_login_reset\",\n                                                               context: {\n                                                                  email,\n                                                               },\n                                                            }\n                                                         ).catch((err) => {\n                                                            console.log(err);\n                                                         });\n                                                      }\n                                                   },\n                                                },\n                                                {},\n                                             ],\n                                          },\n                                       ],\n                                    },\n                                    {\n                                       view: \"button\",\n                                       label: L(\"Back to log in\"),\n                                       css: \"webix_transparent\",\n                                       click() {\n                                          self.emit(\"login\");\n                                       },\n                                    },\n                                 ],\n                              },\n                           ],\n                        },\n                     ],\n                  },\n                  {},\n               ],\n            },\n            {},\n         ],\n      };\n   }\n\n   async init(AB) {\n      this.AB = AB;\n\n      L = (...params) => {\n         return this.AB.Multilingual.label(...params);\n      };\n\n      // now replace our initial placeholder with our viewable form\n      webix.ui(this.ui(), $$(\"portal_auth_login_reset_request\"));\n\n      var $tenant = $$(\"reset_tenantList\");\n      var siteConfig = this.AB.Config.siteConfig();\n      if (siteConfig?.tenants?.length) {\n         // replace options in tenant list with siteConfig.tenants:\n         var newOptions = [];\n         siteConfig.tenants.forEach((t) => {\n            var opt = {\n               id: t.uuid,\n               value: t.title || t.key,\n            };\n            newOptions.push(opt);\n         });\n\n         $tenant.define(\"options\", newOptions);\n      }\n\n      var tID = this.AB.Tenant.id();\n      if (tID) {\n         $tenant.define(\"value\", tID);\n\n         // if the tID matches one of our options, then we can hide\n         // the input.\n         // eg: they entered a route [tenant].our.url\n         // we simple auto select the tenant and don't show this component.\n         var opt = newOptions.find((o) => o.id == tID);\n         if (opt) {\n            $tenant.hide();\n         }\n      }\n\n      this.AB.Network.on(\n         \"portal_auth_login_reset\",\n         (context, err, response) => {\n            // Listen for our responses:\n            // Show a popup for confirmation that an email was sent.\n            // context.email : {string} entered email address.\n\n            var text = L(\n               \"<p>An email with instructions on how to reset your password has been sent to <b>{0}</b>.</p><p>Check your spam or junk folder if you don’t see the email in your inbox.</p>\",\n               [context.email]\n            );\n\n            webix.alert({\n               title: L(\"Email Sent\"),\n               ok: L(\"Okay\"),\n               width: 500,\n               text: text,\n            });\n         }\n      );\n   }\n\n   show() {\n      $$(\"portal_auth_login_reset_request\").show();\n   }\n}\n\nexport default new PortalAuthLoginResetRequest();\n","import ClassUI from \"./ClassUI.js\";\nimport PortalAuthLoginForm from \"./portal_auth_login_form.js\";\nimport PortalAuthLoginResetPassword from \"./portal_auth_login_resetPassword.js\";\nimport PortalAuthLoginResetRequest from \"./portal_auth_login_resetRequest.js\";\n\nclass PortalAuthLogin extends ClassUI {\n   constructor() {\n      super();\n   }\n\n   ui() {\n      var self = this;\n\n      return {\n         id: \"portal_auth_login\",\n         view: \"multiview\",\n         animate: false,\n         rows: [\n            PortalAuthLoginForm.ui(),\n            PortalAuthLoginResetPassword.ui(),\n            PortalAuthLoginResetRequest.ui(),\n         ],\n      };\n   }\n\n   async init(AB) {\n      this.AB = AB;\n\n      var allInits = [];\n      allInits.push(PortalAuthLoginForm.init(AB));\n      PortalAuthLoginForm.on(\"request.reset\", () => {\n         PortalAuthLoginResetRequest.show();\n      });\n\n      allInits.push(PortalAuthLoginResetRequest.init(AB));\n      PortalAuthLoginResetRequest.on(\"login\", () => {\n         PortalAuthLoginForm.show();\n      });\n\n      allInits.push(PortalAuthLoginResetPassword.init(AB));\n      PortalAuthLoginResetPassword.on(\"updated\", () => {\n         console.log(\">>>> Password Changed ... NOW WHAT? <<<<<<\");\n      });\n\n      await Promise.all(allInits);\n   }\n\n   show(defaultView) {\n      // defaultView should be:\n      //   \"auth_login_form\",\n      //   \"auth_login_passwordReset\"\n\n      if (defaultView) {\n         var view = defaultView.split(\"_\").pop();\n         switch (view) {\n            case \"resetPassword\":\n               PortalAuthLoginResetPassword.show();\n               break;\n\n            default:\n            case \"form\":\n               PortalAuthLoginForm.show();\n               break;\n         }\n         return;\n      }\n\n      // Default to the LoginForm\n      PortalAuthLoginForm.show();\n   }\n}\n\nexport default new PortalAuthLogin();\n","import ClassUI from \"./ClassUI.js\";\n\n// sub pages:\nimport PortalAuthLogin from \"./portal_auth_login.js\";\n\nclass PortalAuth extends ClassUI {\n   constructor() {\n      super();\n\n      this.ActivePortal = null;\n      // {PortalAuthxxx} ActivePortal\n      // the UI Portal to use for Authenticating our User for this Tenant.\n   }\n\n   ui() {\n      var self = this;\n\n      return {\n         id: \"portal_auth\",\n         view: \"multiview\",\n         animate: false,\n         cells: [PortalAuthLogin.ui()],\n      };\n   }\n\n   init(AB) {\n      this.AB = AB;\n\n      // decide which Auth Portal to display:\n      var authType = this.AB.Tenant.setting(\"authType\") || \"login\";\n      switch (authType) {\n         case \"login\":\n            this.ActivePortal = PortalAuthLogin;\n            break;\n\n         case \"passwordless\":\n            break;\n\n         case \"facebook\":\n            break;\n\n         case \"google\":\n            break;\n      }\n\n      return this.ActivePortal?.init(AB).then(() => {\n         this.ActivePortal?.show();\n      });\n   }\n\n   show(defaultView) {\n      // We cannot properly store the session id if users navigate directly to /home\n      // so when they navigate to /home and it was not a redirect we send them back to /\n      if (\n         window?.location?.pathname == \"/home\" &&\n         !window?.performance?.navigation?.redirectCount\n      )\n         window.location.replace(window.location.origin);\n\n      $$(\"portal_auth\").show();\n      this.ActivePortal.show(defaultView);\n   }\n}\n\nexport default new PortalAuth();\n","import ClassUI from \"./ClassUI\";\n\nclass ClassUIPage extends ClassUI {\n   constructor(containerID, page, App, AB) {\n      super();\n\n      this.containerID = containerID;\n      // {string}\n      // the webix $$(containerID) reference to attach this UI to.\n      // Typically the portal_work generates a series of container placeholders\n      // and these ClassUIPage will attach themselves to them.\n\n      this.page = page;\n      // {ABViewPage}\n      // The Root Page that this container is displaying.\n\n      this.App = App;\n      // {ABComponent.App}\n      // The common UI Component App factory.\n\n      this.AB = AB;\n      // {ABFactory}\n      // The common ABFactory being shared for all our ABxxx Objects.\n\n      this.initialized = false;\n      // {bool}\n      // indicates if the User had chosen to display this page yet.\n      // We prevent loading our data and building the page until the\n      // User decides to show the page.\n\n      this.pageStack = [];\n      // {array}\n      // Keep track of the {ABViewPage.id} that have been showPage()ed.\n      // The last element in the stack should be the Actively Shown page.\n      // If the stack is empty, then we are showing the RootPage.\n\n      this.pageComponents = {};\n      // {hash}  { ABViewPage.id : ABViewPage.component() }\n      // we keep track of all the ui.component() of our possible views to\n      // prevent having to regenerate them and quickly access their values.\n\n      this.changePageEventIds = {};\n      // {hash}  { ABViewPage.id : .on(\"changePage\") }\n      // A hash of the on(\"changePage\") listeners for each page. Used to\n      // prevent multiple listeners added to a Page\n   }\n\n   ui() {\n      // NOTE: the .container === .id\n      // so this REPLACES the container created by the portal_work\n      var placeholder = {};\n      if (this.page && this.page.isRoot()) {\n         // some pages can take a while to initialize.\n         // add a spinner to indicate it is busy\n         placeholder = {\n            type: \"clean\",\n            css: { \"text-align\": \"center\" },\n            template:\n               '<div style=\"height: 100vh; width: 100%; background: #ebedf0;\" class=\"webix_progress_icon\"><div class=\"webix_progress_state wxi-sync webix_spin\"></div></div>',\n         };\n      }\n      return {\n         view: \"multiview\",\n         // container: this.containerID,\n         css: \"ab-main-container ab-generated-page\",\n         borderless: true,\n         id: this.containerID,\n         animate: false,\n         cells: [placeholder],\n         on: {\n            // onViewChange: (prevId, nextId) => {\n            //    this.resize();\n            // },\n         },\n      };\n   }\n\n   init(AB, render = false, showPage = true) {\n      if (AB) {\n         this.AB = AB;\n      }\n\n      // don't redo all this if we already have!\n      if (this.initialized) return Promise.resolve();\n\n      var myUI = this.ui();\n      webix.ui(myUI, $$(this.containerID));\n\n      if (!render) {\n         return Promise.resolve();\n      }\n\n      // .init() returns a Promise\n      return new Promise((resolve /*, reject */) => {\n         // 1) make sure all Application DataCollections have started\n         //    initialization.\n         this.page.application.datacollectionsIncluded().forEach((dc) => {\n            if (!dc) return;\n\n            dc.init();\n         });\n\n         // 2) Render all our Pages\n         this.renderPage(this.page);\n\n         // 3) After we are rendered, we are technically initialized\n         this.initialized = true;\n\n         // 4) Make sure our Root Page is \"shown\"\n         this.showPage();\n\n         if (!showPage) {\n            let parView = $$(this.containerID).getParentView();\n            parView.showBatch(parView.getValue(), false);\n         }\n\n         resolve();\n      });\n   }\n\n   /**\n    * initEvents()\n    * Setup the listeners for each page.  There are 3 main events we are\n    * concerned with:\n    *    \"changePage\" =>\n    *          generated by our Page / Sub Page / Sub view\n    *          indicates when a new page should be displayed.\n    *    \"ab.interface.update\" =>\n    *          generated by the server.\n    *          indicates that the Definition of our interface\n    *          has changed and we need to redisplay.\n    *    \"ab.datacollection.update\" = >\n    *          generated by the server.\n    *          indicates one of the DataCollections have been updated.\n    *          if it is one we are depending on, we need to redisplay\n    *\n    * @param {ABViewPage} page\n    *       The ABViewPage to establish listeners on.\n    */\n   initEvents(page) {\n      if (page == null) return;\n\n      // { pageId: eventId, ..., pageIdn: eventIdn }\n      this.changePageEventIds = this.changePageEventIds || {};\n\n      // prevent duplicate event registrations\n      if (!this.changePageEventIds[page.id]) {\n         this.changePageEventIds[page.id] = page.on(\"changePage\", (pageID) => {\n            this.showPage(pageID);\n         });\n      }\n\n      let needToReloadPage = () => {\n         // clear the cache of events\n         this.changePageEventIds = {};\n\n         this.initialized = false;\n\n         // begin the process of reloading the page\n         this.init(this.AB, true, false);\n      };\n\n      if (!this.updatePageEventId && page.isRoot()) {\n         /**\n          * @event ab.interface.update\n          * This event is triggered when the root page is updated\n          *\n          * @param data.rootPage {uuid} - id of the root page\n          */\n         this.updatePageEventId = this.AB.on(\n            \"ab.interface.update\",\n            function (data) {\n               if (page.id == data.rootPageId) {\n                  needToReloadPage();\n               }\n            }\n         );\n      }\n\n      if (!this.updateDatacollectionEventId && page.isRoot()) {\n         /**\n          * @event ab.datacollection.update\n          * This event is triggered when the datacollection is updated\n          * Make sure we only update the Display if it was a DC that was\n          * included in this Page's Application.\n          *\n          * @param data.datacollectionId {uuid} - id of the data view\n          */\n         this.updateDatacollectionEventId = this.AB.on(\n            \"ab.datacollection.update\",\n            (data) => {\n               let updatedDC = this.page.application.datacollectionsIncluded(\n                  (dc) => dc.id == data.datacollectionId\n               )[0];\n               if (updatedDC) {\n                  needToReloadPage();\n               }\n            }\n         );\n      }\n   }\n\n   /**\n    * renderPage()\n    * create the Webix UI for the given ABViewPage and all it's Sub Pages.\n    * This routine creates the component.ui, and performs the component.init()\n    * but does not perform the final component.onShow() ( that happens in the\n    * showPage() method.)\n    * @param {ABViewPage} page\n    */\n   renderPage(page) {\n      if (window.webixLocale) {\n         setTimeout(() => {\n            webix.i18n.setLocale(window.webixLocale);\n         }, 500);\n      }\n      var component = page.component(this.App);\n      var ui = component.ui;\n\n      // Keep the page component\n      this.pageComponents[page.id] = component;\n\n      var myContainer = $$(this.containerID);\n      // {webix.ui}\n      // Referencing our container. Since we seem to make numerous references\n      // to this below, let's just pull it 1x.\n\n      // James:\n      // this is pulled in from our previous v1 code. Not sure if it is still\n      // relevant.\n      // TODO: review this and how this works in context of our Webix Only\n      // Portal.\n      // Also, notice how we are referencing the internal data of a Page object?\n      // there should be an accessor method (like page.setting(\"pageWidth\"))\n      // that returns the data we need.\n      /*\n      if (\n         parseInt(page.settings.pageWidth) > 0 &&\n         parseInt(page.settings.fixedPageWidth) == 1\n      ) {\n         var parentContainer = this.element.parent()[0];\n         parentContainer.style.width = parseInt(page.settings.pageWidth) + \"px\";\n         parentContainer.style.margin = \"0 auto\";\n         parentContainer.classList.add(page.settings.pageBackground);\n      }\n      */\n\n      var type = page.settings?.type ?? \"\";\n      if (typeof page.type === \"function\") {\n         // plugin method.\n         type = page.type();\n      }\n      switch (type) {\n         case \"popup\":\n            var popupTemplate = {\n               view: \"window\",\n               id: page.id,\n               modal: true,\n               position: \"center\",\n               resize: true,\n               width: parseInt(page.settings.popupWidth) || 700,\n               height: parseInt(page.settings.popupHeight) + 44 || 450,\n               css: \"ab-main-container\",\n               head: {\n                  view: \"toolbar\",\n                  css: \"webix_dark\",\n                  cols: [\n                     {\n                        view: \"label\",\n                        label: page.label,\n                        css: \"modal_title\",\n                        align: \"center\",\n                     },\n                     {\n                        view: \"button\",\n                        label: \"Close\",\n                        autowidth: true,\n                        align: \"center\",\n                        click: () => {\n                           this.showPage();\n                           // var popup = this.getTopParentView();\n                           // popup.hide();\n                        },\n                        on: {\n                           //Add data-cy attribute to the close button\n                           onAfterRender: () => {\n                              const button = $$(page.id).queryView(\"button\");\n                              const dataCy = `Popup Close Button ${page.name} ${page.id}`;\n                              button\n                                 .getInputNode()\n                                 .setAttribute(\"data-cy\", dataCy);\n                           },\n                        },\n                     },\n                  ],\n               },\n               body: {\n                  view: \"scrollview\",\n                  scroll: true,\n                  body: ui,\n               },\n            };\n\n            var oldView = $$(page.id);\n            if (oldView) {\n               // if it is a Popup, destroy() it\n               if (oldView.config.view == \"window\") {\n                  oldView.destructor();\n               }\n               // else remove the view from our multiview\n               else if (myContainer) {\n                  myContainer.removeView(page.id);\n               }\n            }\n\n            // Now create the New one (hidden)\n            try {\n               webix.ui(popupTemplate).hide();\n            } catch (e) {\n               console.error(\"Error creating Page:\", page);\n               console.error(e);\n               // debugger;\n            }\n            break;\n\n         case \"page\":\n         default:\n            // Define page id to be batch id of webix.multiview\n            ui.batch = page.id;\n\n            // if this view already exists\n            var oldPage = $$(page.id);\n            if (oldPage) {\n               // if the old view was a popup, but now we want it as\n               // a page, we need to move it to our multiview\n               if (oldPage.config.view == \"window\") {\n                  oldPage.destructor();\n\n                  myContainer.addView(ui);\n               }\n               // else we want to rebuild it.\n               else {\n                  webix.ui(ui, oldPage);\n               }\n            }\n            // else this is our first time so add it\n            else if (myContainer) {\n               myContainer.addView(ui);\n            }\n\n            break;\n      }\n\n      // handle events\n      this.initEvents(page);\n\n      // Render child pages\n      (page.pages() || []).forEach((subpage) => {\n         this.renderPage(subpage);\n      });\n\n      // Initial UI components\n      component.init();\n   }\n\n   /**\n    * show()\n    * is called by the main portal_work when a menu item is selected and this\n    * container should be displayed.\n    */\n   show() {\n      var container = $$(this.containerID);\n      if (container) {\n         if (!this.initialized) {\n            // this is our 1st time to show, so wait for our initial loading\n            // container to display, before causing it to be transformed into\n            // our Page.\n            var eventID = container.attachEvent(\"onViewShow\", () => {\n               // only 1x\n               container.detachEvent(eventID);\n               // give ourselves some additional space to make sure animations\n               // are complete or operational before the .init() which can be\n               // resource intensive.\n               setTimeout(() => {\n                  this.init(this.AB, true);\n                  container.show();\n               }, 50);\n            });\n         }\n\n         container.show();\n      }\n   }\n\n   /**\n    * showPage()\n    * A RootPage can have several SubPages that it wants to display during\n    * it's normal operation.  An embedded view component can trigger an\n    * .emit(\"showPage\", pageID) that will get propagated up to our RootPage\n    * and showPage(pageID) will be called.\n    *\n    * For example, an ABViewMenu object will have a button clicked and it will\n    * signal this to show the desired Page.\n    *\n    * If a showPage() is called with no parameter, then we are being requested\n    * to return to the previous page before the current one.\n    * @param {string} pageID\n    *       The {ABViewPage.id} of the page to show.\n    * @param {string} viewID\n    *       An additional ABViewxxx.id that can also be signaled to show.\n    *       ?? Usually on the Page we just showed, so you can specify a\n    *       page + view.\n    */\n   showPage(pageID, viewId) {\n      var showPageID = null;\n      // {string}\n      // This is the actual pageID of the ABViewPage to display.\n\n      // in any case, if the active page is not the requested page,\n      // we hide it:\n      var activeID = this.pageStack[this.pageStack.length - 1];\n      if (activeID) {\n         // if the actively displayed page is what is being asked for\n         // we can just exit.\n         if (activeID == pageID) {\n            return; //\n         }\n\n         // otherwise we need to hide() any popups / pages\n         var activeUI = $$(activeID);\n         if (activeUI && activeUI.hide) activeUI.hide();\n      }\n\n      // if no pageID provided, then we are displaying a previous page:\n      if (!pageID) {\n         // pull the last View displayed & remove it.\n         this.pageStack.pop();\n      } else {\n         // be sure not to add our Root Page to the stack\n         if (this.page.id != pageID) {\n            // add the new pageID to our stack:\n            // REMEMBER: last item is what should be show()n\n            this.pageStack.push(pageID);\n         } else {\n            // in this case: we have items in our .pageStack, but we are told\n            // to return to our RootPage;\n            // clear out our .pageStack and we will return to our root\n            this.pageStack = [];\n         }\n      }\n\n      // now get the ID of the page to show\n      showPageID = this.pageStack[this.pageStack.length - 1];\n      if (!showPageID) {\n         // then we want to display the Root Page:\n         showPageID = this.page.id;\n      }\n\n      if (!showPageID) {\n         // if we get here and don't have a showPageID ... something didn't\n         // go as planned:\n         this.AB.error(\n            new Error(`Unable to resolve showPage() with pageID[${pageID}]`)\n         );\n      } else {\n         // make sure a popup is shown\n         if ($$(showPageID)) $$(showPageID).show();\n\n         // if our MultiView has this batch then show batch\n         var batchExist = false;\n         var childViews = $$(this.containerID).getChildViews();\n         batchExist = childViews.filter(function (v) {\n            return v.config.batch == showPageID;\n         })[0];\n         if (batchExist) $$(this.containerID).showBatch(showPageID);\n\n         // now make sure the actual component's .onShow() is called\n         // But perform a Timeout() so any current webix animations\n         // complete beforehand:\n         setTimeout(() => {\n            if (\n               this.pageComponents[showPageID] &&\n               this.pageComponents[showPageID].onShow\n            ) {\n               // for (const element of document\n               //    .getElementById(self.containerDomID)\n               //    .getElementsByClassName(\"ab-loading\")) {\n               //    element.style.display = \"none\";\n               // }\n               this.pageComponents[showPageID].onShow();\n               if (viewId) {\n                  $$(viewId)?.show();\n               }\n            }\n         }, 60);\n      }\n   }\n\n   /*\n   removePage(pageId) {\n      var pageCom = this.pageComponents[pageId];\n      var pageElemId = pageCom.ui.id;\n\n      // swtich the page before it will be removed\n      if (this.activePageId == pageId) {\n         this.showPage(this.rootPage.id);\n      }\n\n      // remove from .multiview\n      $$(this.containerDomID).removeView(pageElemId);\n\n      // destroy view's modal\n      if ($$(pageElemId)) $$(pageElemId).destructor();\n   }\n   */\n}\n\nexport default ClassUIPage;\n","import ClassUI from \"./ClassUI.js\";\n\nclass PortalWorkInboxAccordion extends ClassUI {\n   constructor(app) {\n      super();\n\n      this.app = app;\n      this.id = `inbox-accordion-app-holder-${this.app.id}`;\n      this.idUnitList = `inbox-accordion-app-${this.app.id}`;\n   }\n\n   ui() {\n      const self = this;\n      // for .click() handler below:\n\n      return {\n         header: this.app.label,\n         id: this.id,\n         view: \"accordionitem\",\n         collapsed: true,\n         css: \"stayCollapsed\",\n         hidden: true,\n         body: {\n            view: \"unitlist\",\n            id: this.idUnitList,\n            uniteBy: \"#uniteLabel#\",\n            autoheight: true,\n            css: \"inbox_unitlist\",\n            type: {\n               templateHeader: function (value) {\n                  return (\n                     '<i style=\"opacity: 0.4\" class=\"fa fa-fw fa-code-fork fa-rotate-90\"></i> ' +\n                     value.replace(/{(.*?)}/, \"\")\n                  );\n               },\n               headerHeight: 35,\n            },\n            template: function (obj) {\n               return (\n                  obj.name +\n                  \" <span class='pull-right webix_badge'>\" +\n                  obj.items.length +\n                  \"</span>\"\n               );\n            },\n            select: true,\n            data: [],\n            click: function (id /* , ev */) {\n               const list = this;\n               // const parent = this.getParentView();\n               const selectedItem = this.getItem(id);\n\n               const cells = [];\n               // {array}\n               // the webix defs for the Form.io forms for this selection.\n\n               // const number = 1;\n               selectedItem.items.forEach(function (task) {\n                  if (task.data?.url) {\n                     cells.push({\n                        id: \"task-holder-\" + task.uuid,\n                        unitlist: list,\n                        view: \"layout\",\n                        padding: 20,\n                        rows: [\n                           {\n                              id: task.uuid,\n                              view: \"iframe\",\n                              src: task.data.url,\n                           },\n                        ],\n                     });\n                  } else\n                     cells.push({\n                        id: \"task-holder-\" + task.uuid,\n                        unitlist: list,\n                        view: \"layout\",\n                        padding: 20,\n                        rows: [\n                           {\n                              id: task.uuid,\n                              view: \"formiopreview\",\n                              formComponents: task.ui,\n                              formData: task.data,\n                              onButton: function (value) {\n                                 self.processItem(id, task, value);\n                              },\n                           },\n                        ],\n                     });\n               });\n\n               self.emit(\"showTasks\", /*list, */ selectedItem.name, cells);\n            },\n            on: {\n               onAfterRender() {\n                  ClassUI.CYPRESS_REF(this);\n                  this.data.each((a) => {\n                     ClassUI.CYPRESS_REF(\n                        this.getItemNode(a.id),\n                        `${self.id}_${a.id}`\n                     );\n                  });\n               },\n            },\n         },\n         // TODO: This never gets called!\n         // on: {\n         //    onAfterRender() {\n         //       ClassUI.CYPRESS_REF(this);\n         //    },\n         // },\n      };\n   }\n\n   init(AB) {\n      // prevent multiple .init() calls\n      if (!this.AB) {\n         this.AB = AB;\n\n         this.AB.Network.on(\"inbox.update\", (context, err /* , response */) => {\n            if (err && err.message) {\n               webix.message(err.message);\n               this.AB.notify.developer(err, {\n                  context:\n                     \"portal_work_inbox_accordion:Network[inbox.update]: error updating Inbox item\",\n                  info: context,\n               });\n               return;\n            }\n\n            const list = $$(this.idUnitList);\n            const selectedItem = list.getItem(context.unitID);\n\n            // clear out processed item from our accordion\n            // prune the item from the group of similar processes in the unit list\n            if (selectedItem) {\n               const parent = list.getParentView();\n\n               selectedItem.items = selectedItem.items.filter(function (i) {\n                  return i.uuid != context.uuid;\n               });\n\n               // refresh the unit list so we can get an update badge count\n               list.refresh();\n               if (selectedItem.items.length == 0) {\n                  // remove the item from the unit list\n                  list.remove(list.getSelectedId());\n                  // if that was the last item in the unit list remove the accordion\n                  if (list.count() == 0) {\n                     parent.hide();\n                  }\n               }\n            }\n\n            this.emit(\"item.processed\", context.uuid);\n         });\n      }\n\n      return Promise.resolve();\n   }\n\n   unitList() {\n      return $$(this.idUnitList);\n   }\n\n   /**\n    * @method processItem()\n    * submit the current task's response back to the server.\n    * @param {ABProcessForm} task\n    *        the current form that is being responded to.\n    * @param {string} value\n    *        the value of the Form button returned.\n    */\n   processItem(unitID, task, value) {\n      this.AB.Network.put(\n         {\n            url: `/process/inbox/${task.uuid}`,\n            data: { response: value },\n         },\n         {\n            key: \"inbox.update\",\n            context: { uuid: task.uuid, unitID },\n         }\n      );\n\n      return;\n   }\n\n   show() {\n      $$(this.id).show();\n      $$(this.id).expand();\n      this.initFormIOPreview();\n   }\n\n   /**\n    * Ensure the formio custom webix component is loaded and ready to\n    * use.\n    */\n   initFormIOPreview() {\n      this.AB.custom.formiopreview.init();\n   }\n}\n\nexport default PortalWorkInboxAccordion;\n","import ClassUI from \"./ClassUI.js\";\n\nclass PortalWorkInboxTaskwindow extends ClassUI {\n   constructor() {\n      super();\n      this.id = \"portal_work_inbox_taskwindow\";\n      this.idTaskMultiview = \"taskMultiview\";\n      this.idTaskTitle = \"taskTitle\";\n      this.idTaskPager = \"taskPager\";\n   }\n\n   ui() {\n      var L = (...params) => {\n         return this.label(...params);\n      };\n      return {\n         id: this.id,\n         view: \"window\",\n         position: function (state) {\n            state.left = state.maxWidth / 2 - 800 / 2; // fixed values\n            state.top = state.maxHeight / 2 - (state.maxHeight * 0.7) / 2;\n            state.width = 800; // relative values\n            state.height = state.maxHeight * 0.7;\n         },\n         modal: true,\n         head: {\n            view: \"toolbar\",\n            css: \"webix_dark\",\n            cols: [\n               { width: 17 },\n               {\n                  id: this.idTaskTitle,\n                  view: \"label\",\n                  label: L(\"Your Tasks\"),\n               },\n               {\n                  view: \"button\",\n                  autowidth: true,\n                  type: \"icon\",\n                  icon: \"nomargin fa fa-times\",\n                  click: () => {\n                     $$(this.id).hide();\n                     // we don't want the list to look like it has still selected the item\n                     $$(this.idTaskMultiview)\n                        .getChildViews()[0]\n                        .config.unitlist.unselectAll();\n                     // reset the pager so we don't get errors when we open it next\n                     $$(this.idTaskPager).select(0);\n                  },\n                  on: {\n                     onAfterRender() {\n                        ClassUI.CYPRESS_REF(this, \"inbox_taskwindow_close\");\n                     },\n                  },\n               },\n            ],\n         },\n         body: {\n            rows: [\n               {\n                  view: \"scrollview\",\n                  scroll: \"xy\",\n                  body: {\n                     id: this.idTaskMultiview,\n                     cells: [\n                        {\n                           view: \"layout\",\n                           padding: 20,\n                           rows: [\n                              {\n                                 id: \"emptyTasks\",\n                                 template: L(\"No more tasks...good job!\"),\n                              },\n                           ],\n                        },\n                     ],\n                  },\n               },\n               {\n                  view: \"toolbar\",\n                  css: \"inboxpager\",\n                  cols: [\n                     {\n                        id: this.idTaskPager,\n                        view: \"pager\",\n                        size: 1,\n                        group: 3,\n                        height: 45,\n                        master: false,\n                        template:\n                           '<div style=\"margin-top:9px; text-align: center;\">{common.first()} {common.prev()} {common.pages()} {common.next()} {common.last()}</div>',\n                        on: {\n                           onAfterRender() {\n                              // debugger;\n                              ClassUI.CYPRESS_REF(this);\n                              // this.data.each((a) => {\n                              //    ClassUI.CYPRESS_REF(\n                              //       this.getItemNode(a.id),\n                              //       `${self.id}_${a.id}`\n                              //    );\n                              // });\n                           },\n                           onBeforePageChange: (new_page /*, old_page  */) => {\n                              var views = $$(\n                                 this.idTaskMultiview\n                              ).getChildViews();\n                              views[parseInt(new_page)].show();\n                           },\n                        },\n                     },\n                  ],\n               },\n            ],\n         },\n      };\n   }\n\n   init(AB) {\n      this.AB = AB;\n      webix.ui(this.ui());\n\n      return Promise.resolve();\n   }\n\n   clearTask(uuid) {\n      // find out how many pages are in this multiview\n      var views = $$(this.idTaskMultiview).getChildViews();\n      // if there is more than one page we need to find out what the next page should be\n      if (views.length > 1) {\n         var taskHolder = $$(\"task-holder-\" + uuid);\n         if (taskHolder) {\n            // find out if we are on the last page\n            if (\n               $$(this.idTaskMultiview).index(taskHolder) + 1 ==\n               views.length\n            ) {\n               // if we are on the last page we will go back to the previous page\n               $$(this.idTaskMultiview).setValue(\n                  views[$$(this.idTaskMultiview).index(taskHolder) - 1].config\n                     .id\n               );\n            } else {\n               // if we are not on the last page we will go to the next page\n               $$(this.idTaskMultiview).setValue(\n                  views[$$(this.idTaskMultiview).index(taskHolder) + 1].config\n                     .id\n               );\n            }\n            // once we move off of the page we can remove it\n            $$(this.idTaskMultiview).removeView(\n               views[$$(this.idTaskMultiview).index(taskHolder)]\n            );\n         }\n\n         // // prune the item from the group of similar processes in the unit list\n         // if (this.selectedItem) {\n         //    this.selectedItem.items = this.selectedItem.items.filter(function (\n         //       i\n         //    ) {\n         //       return i.uuid != uuid;\n         //    });\n         // }\n         // // refresh the unit list so we can get an update badge count\n         // this.list.refresh();\n\n         // now we update the pager\n         // block events because we don't want it telling the multiview to change pages after we set the new value\n         $$(this.idTaskPager).blockEvent();\n         // set the page to the first while we rebuild the pager (or it will throw an error)\n         $$(this.idTaskPager).select(0);\n         // set the current number of pages to the number of views in the multiview\n         $$(this.idTaskPager).define(\n            \"count\",\n            $$(this.idTaskMultiview).getChildViews().length\n         );\n         $$(this.idTaskPager).refresh();\n         // set the page to the correct number because it probably changed when we removed a view above\n         $$(this.idTaskPager).select(\n            $$(this.idTaskMultiview).index(\n               $$(this.idTaskMultiview).getActiveId()\n            )\n         );\n         $$(this.idTaskPager).unblockEvent();\n      } else {\n         // no more tasks hide the modal\n         $$(this.id).hide();\n         // // remove the item from the unit list\n         // this.list.remove(this.list.getSelectedId());\n         // // if that was the last item in the unit list remove the accordion\n         // if (this.list.count() == 0) {\n         //    parent.hide();\n         // }\n      }\n   }\n\n   hide() {\n      $$(this.id).hide();\n   }\n\n   show() {\n      $$(this.id).show();\n   }\n\n   showTasks(/* unitList, */ selectedItemName, cells) {\n      // this.list = unitList;\n      // this.selectedItem = selectedItem;\n      webix.ui(\n         {\n            id: this.idTaskMultiview,\n            cells: cells,\n         },\n         $$(this.idTaskMultiview)\n      );\n\n      $$(this.idTaskTitle).define(\"label\", selectedItemName);\n      $$(this.idTaskPager).define(\"count\", cells.length);\n      $$(this.idTaskPager).refresh();\n      $$(this.id).show();\n   }\n}\n\nexport default new PortalWorkInboxTaskwindow();\n","import ClassUI from \"./ClassUI.js\";\nimport ClassAccordionEntry from \"./portal_work_inbox_accordion.js\";\nimport PortalWorkInboxTaskWindow from \"./portal_work_inbox_taskWindow.js\";\n\nclass PortalWorkInbox extends ClassUI {\n   constructor() {\n      super();\n\n      this.id = \"portal_work_inbox\";\n      // {string}\n      // the webix.id of this UI element\n\n      this.entries = [];\n      // {array}\n      // the list of User Forms this user is able to process.\n\n      this.processLookupHash = {\n         /* ABProcess.id : \"Process Label\" */\n      };\n\n      this.appLookupHash = {\n         /* ABProcess.id : \"ABApplication.id\" */\n      };\n\n      this.appAccordionLists = {};\n      // {hash}  { app.id : {accordionItemDefinition} }\n   }\n\n   ui() {\n      var L = (...params) => {\n         return this.label(...params);\n      };\n\n      return {\n         id: this.id,\n         view: \"window\",\n         head: {\n            view: \"toolbar\",\n            css: \"webix_dark inbox_drawer\",\n            cols: [\n               { width: 7 },\n               {\n                  view: \"label\",\n                  label: L(\"Inbox\"),\n               },\n               {\n                  view: \"button\",\n                  autowidth: true,\n                  type: \"icon\",\n                  icon: \"nomargin fa fa-times\",\n                  click: () => {\n                     $$(this.id).hide();\n                  },\n                  on: {\n                     onAfterRender() {\n                        ClassUI.CYPRESS_REF(this);\n                     },\n                  },\n               },\n            ],\n         },\n         position: function (state) {\n            state.left = state.maxWidth - 350; // fixed values\n            state.top = 0;\n            state.width = 350; // relative values\n            state.height = state.maxHeight;\n         },\n         body: {\n            cells: [\n               {\n                  id: \"inboxItems\",\n                  view: \"scrollview\",\n                  scroll: \"y\",\n                  body: {\n                     view: \"accordion\",\n                     id: \"inbox_accordion\",\n                     css: {\n                        background: \"#dadee0 !important\",\n                     },\n                     multi: true,\n                     rows: [],\n                  },\n               },\n               {\n                  id: \"emptyInbox\",\n                  view: \"layout\",\n                  hidden: true,\n                  css: {\n                     background: \"#dadee0 !important\",\n                  },\n                  rows: [\n                     {},\n                     {\n                        view: \"label\",\n                        align: \"center\",\n                        height: 200,\n                        label: \"<div style='display: block; font-size: 180px; background-color: #666; color: transparent; text-shadow: 0px 1px 1px rgba(255,255,255,0.5); -webkit-background-clip: text; -moz-background-clip: text; background-clip: text;' class='fa fa-thumbs-up'></div>\",\n                     },\n                     {\n                        view: \"label\",\n                        align: \"center\",\n                        label: L(\"No tasks...you're all caught up.\"),\n                     },\n                     {},\n                  ],\n               },\n            ],\n         },\n      };\n   }\n\n   init(AB) {\n      this.AB = AB;\n\n      //  Load the { items, meta } data structure before continuing with\n      // the rest of the init process.\n      this.AB.Network.get({ url: \"/config/inbox\" }).then((inboxConfig) => {\n         this.AB.Config.configInbox(inboxConfig);\n\n         this.initDelayed(AB);\n      });\n   }\n\n   initDelayed(AB) {\n      webix.ui(this.ui());\n\n      this.allAppAccordions = {};\n      // {hash}  { ABApplication.id : ClassAccordionEntry }\n      // A lookup of all our ClassAccordionEntry(s) by their app.id\n\n      //\n      // Prepare our Hashes:\n      //\n      this.lang = this.AB.Account.language();\n      (this.AB.Config.inboxMetaConfig() || []).forEach((app) => {\n         this.createAccordian(app);\n      });\n\n      this.entries = this.AB.Config.inboxConfig() || [];\n\n      this.entries.forEach((i) => this.addItem(i));\n\n      var allInits = [];\n\n      for (var index in this.appAccordionLists) {\n         const processes = this.getProcessList(index);\n\n         const accordion = this.allAppAccordions[index]\n            ? this.allAppAccordions[index].unitList()\n            : null;\n         if (accordion) {\n            const init = async () => {\n               await this.allAppAccordions[index].init(this.AB);\n               accordion.parse(processes);\n               accordion.show();\n            };\n            allInits.push(init());\n         } else {\n            this.AB.notify.developer(\n               new Error(\n                  `could not find an inbox-accordion for index[${index}]`\n               ),\n               {\n                  context: \"portal_work_inbox:init(): config error\",\n                  inboxMeta: this.AB.Config.inboxMetaConfig(),\n                  inbox: this.entries,\n               }\n            );\n         }\n      }\n\n      return Promise.all(allInits).then(() => {\n         this.emit(\"updated\");\n\n         this.AB.on(\"ab.inbox.create\", async (item) => {\n            const alreadyThere = this.entries.find((e) => e.uuid == item.uuid);\n            if (!alreadyThere) {\n               this.entries.push(item);\n               // If we can't find the app's accordion in the list then add it\n               const createNew = !this.appLookupHash[item.definition];\n               if (createNew) {\n                  const [app] = await this.AB.Network.post({\n                     url: \"/process/inbox/meta\",\n                     data: { ids: [item.definition] },\n                  });\n                  this.createAccordian(app);\n               }\n               const appId = this.appLookupHash[item.definition];\n               const accordion = this.allAppAccordions[appId];\n               this.addItem(item);\n\n               if (createNew) await accordion.init(this.AB);\n\n               const unitList = accordion.unitList();\n               unitList.parse(this.appAccordionLists[appId][item.definition]);\n               unitList.show();\n               unitList.refresh();\n\n               accordion.show();\n            }\n            this.emit(\"updated\");\n         });\n\n         this.AB.on(\"ab.inbox.update\", (item) => {\n            const appId = this.appLookupHash[item.definition];\n            const accordion = this.allAppAccordions[appId];\n\n            accordion.AB.Network.emit(\"inbox.update\", {\n               uuid: item.uuid,\n               unitID: item.definition,\n            });\n         });\n\n         // Now Register for RT Updates to our Inbox\n         this.AB.Network.post(\n            {\n               url: `/process/inbox/register`,\n            },\n            {\n               key: \"inbox.register\",\n               context: {},\n            }\n         );\n      });\n   }\n\n   createAccordian(app) {\n      if (!app) return;\n\n      // convert config info with current language labels\n      this.translate(app, this.lang);\n\n      const appAccordion = new ClassAccordionEntry(app);\n      $$(\"inbox_accordion\").addView(appAccordion.ui());\n      this.allAppAccordions[app.id] = appAccordion;\n      appAccordion.on(\"showTasks\", (...params) => {\n         // showTasks\n         // indicates when the user has selected a group of Accordian Tasks\n         // to process.\n         PortalWorkInboxTaskWindow.showTasks(...params);\n      });\n\n      appAccordion.on(\"item.processed\", (uuid) => {\n         // item.processed\n         // indicates when the specified form has been updated on the server.\n         PortalWorkInboxTaskWindow.clearTask(uuid);\n         this.entries = this.entries.filter((e) => e.uuid != uuid);\n         if (this.entries.length == 0) {\n            $$(\"emptyInbox\").show();\n         }\n         this.emit(\"updated\");\n      });\n\n      (app.processes || []).forEach((p) => {\n         this.translate(p, this.lang);\n         this.processLookupHash[p.id] = p.label;\n         this.appLookupHash[p.id] = app.id;\n      });\n\n      return appAccordion;\n   }\n\n   getProcessList(index) {\n      const processes = [];\n      for (const process in this.appAccordionLists[index]) {\n         processes.push(this.appAccordionLists[index][process]);\n      }\n      return processes;\n   }\n\n   addItem(item) {\n      // item {obj}  inbox configuration item\n      //    .definition {uuid} the process.id that generated this form\n      //    .name {string} the Name of this form\n      //\n      item.uniteLabel =\n         \"{\" + item.definition + \"}\" + this.processLookupHash[item.definition];\n      // create our own .uniteLabel\n      // this is used within the accordion.unitlist to group the data.\n\n      // find the application.id for this form\n      var appId = this.appLookupHash[item.definition];\n\n      // make sure we have an appAccordionLists[appID] entry\n      if (!this.appAccordionLists[appId]) this.appAccordionLists[appId] = {};\n      if (!this.appAccordionLists[appId][item.definition]) {\n         this.appAccordionLists[appId][item.definition] = {\n            id: item.definition,\n            name: item.name,\n            uniteLabel: item.uniteLabel,\n            items: [],\n         };\n      }\n\n      // add this as one of our items\n      this.appAccordionLists[appId][item.definition].items.push(item);\n   }\n\n   show() {\n      if (this.entries.length == 0) {\n         $$(\"emptyInbox\").show();\n      } else {\n         $$(\"inboxItems\").show();\n      }\n      $$(this.id).show();\n\n      for (const appId in this.allAppAccordions) {\n         this.allAppAccordions[appId]?.show();\n      }\n   }\n\n   /**\n    * @method translate()\n    * given an object with a .translations property, we will fill out\n    * the translations for the given language.\n    * @param {obj} obj\n    * @param {string} lang\n    *        the language_code of the translations to use.\n    */\n   translate(obj, lang) {\n      if (obj?.translations) {\n         var entry = obj.translations.find((t) => t.language_code == lang);\n         if (!entry) {\n            entry = obj.translations[0];\n         }\n         if (entry) {\n            Object.keys(entry).forEach((k) => {\n               if (k != \"language_code\") {\n                  obj[k] = entry[k];\n               }\n            });\n         }\n      }\n   }\n\n   count() {\n      return this.entries.length;\n   }\n}\n\nexport default new PortalWorkInbox();\n","import ClassUI from \"./ClassUI.js\";\n\nclass PortalWorkUserProfileWindow extends ClassUI {\n   constructor() {\n      super(\"portal_work_user_profile_window\", {\n         imageUser: \"\",\n         uploaderImage: \"\",\n         formUserInfo: \"\",\n\n         dataEmail: \"\",\n         editModeEmail: \"\",\n         buttonEditModeEmail: \"\",\n         editModeButtonsEmail: \"\",\n\n         dataLanguage: \"\",\n         editModeLanguage: \"\",\n         buttonEditModeLanguage: \"\",\n         editModeButtonsLanguage: \"\",\n\n         formNewPassword: \"\",\n         fieldNewPassword: \"\",\n         systemNotification: \"\",\n         advanceOptions: \"\",\n      });\n   }\n\n   ui() {\n      const ids = this.ids;\n      const L = (...params) => {\n         return this.label(...params);\n      };\n\n      // [fix] preventing console 404 errors when user doesn't have an Account Image:\n      let acctImageID = this.AB.Account.imageID();\n      let imgTemplate = `<img src=\"file/${acctImageID}\" onerror=\"this.style.display='none'; document.getElementById('errorImage').style.display = 'block';\" width=\"150\" height=\"150\" style=\"border-radius: 50%; margin: 10px auto; display: block; border: 3px solid white;\" />`;\n      let imgErrorDiv = `<div id=\"errorImage\" style=\"display: none; width: 150px; height: 150px; background: #dee2e6; border-radius: 50%; margin: 10px auto; border: 3px solid white;\"><i class=\"fa fa-user\" style=\"font-size: 118px; color: white; margin: 15px 0 0 32px;\"></i></div>`;\n\n      if (acctImageID) {\n         imgTemplate = `${imgTemplate}${imgErrorDiv}`; // show both in case value is invalid\n      } else {\n         imgTemplate = imgErrorDiv.replace(\"none;\", \"block;\"); // show the Div\n      }\n\n      return {\n         id: ids.component,\n         view: \"window\",\n         position: \"center\",\n         modal: true,\n         head: {\n            view: \"toolbar\",\n            css: \"webix_dark\",\n            cols: [\n               { width: 7 },\n               {\n                  view: \"label\",\n                  label: L(\"User Profile\"),\n               },\n               {\n                  view: \"button\",\n                  autowidth: true,\n                  type: \"icon\",\n                  icon: \"nomargin fa fa-times\",\n                  on: {\n                     onItemClick() {\n                        $$(ids.component).hide();\n                     },\n                     onAfterRender() {\n                        ClassUI.CYPRESS_REF(this, \"user-profile-close\");\n                     },\n                  },\n               },\n            ],\n         },\n         // body: {\n         // view: \"scrollview\",\n         // minHeight: 455,\n         body: {\n            view: \"layout\",\n            width: 460,\n            rows: [\n               {\n                  rows: [\n                     {\n                        id: ids.imageUser,\n                        view: \"template\",\n                        autoheight: true,\n                        borderless: true,\n                        css: {\n                           background: \"#222f3e\",\n                        },\n                        // width: 160,\n                        template: imgTemplate,\n                     },\n                     {\n                        css: {\n                           position: \"absolute\",\n                           top: \"185px\",\n                        },\n                        cols: [\n                           {},\n                           {\n                              id: ids.uploaderImage,\n                              view: \"uploader\",\n                              type: \"icon\",\n                              width: 34,\n                              height: 32,\n                              zIndex: 999,\n                              icon: \"fa fa-upload\",\n                              algin: \"center\",\n                              inputName: \"file\",\n                              apiOnly: true,\n                              multiple: false,\n                              accept:\n                                 \"image/png, image/gif, image/jpeg, image/bmp\",\n                              // Image field\n                              upload: `/file/upload/${\n                                 this.AB.objectUser().id\n                              }/6383ce19-b344-44ee-87e6-decced7361f8/1`,\n                              on: {\n                                 // when upload is complete:\n                                 onFileUpload: async (item, response) => {\n                                    const imageID = response.data.uuid;\n\n                                    const $uploaderImage = $$(\n                                       ids.uploaderImage\n                                    );\n                                    const $imageUser = $$(ids.imageUser);\n\n                                    $uploaderImage.disable();\n\n                                    // await this.AB.Network.put({\n                                    //    url: `/app_builder/model/${\n                                    //       this.AB.objectUser().id\n                                    //    }/${this.AB.Account.uuid()}`,\n                                    //    data: {\n                                    //       image_id: response.data.uuid,\n                                    //    },\n                                    // });\n                                    await this.AB.objectUser()\n                                       .model()\n                                       .update(this.AB.Account.uuid(), {\n                                          image_id: response.data.uuid,\n                                       });\n\n                                    this.AB.Account._config.image_id = imageID;\n\n                                    $imageUser.setHTML(\n                                       `<img src=\"file/${this.AB.Account.imageID()}\" onerror=\"this.style.display='none'; document.getElementById('errorImage').style.display = 'block';\" width=\"150\" height=\"150\" style=\"border-radius: 50%; margin: 10px auto; display: block; border: 3px solid white;\" /><div id=\"errorImage\" style=\"display: none; width: 150px; height: 150px; background: #dee2e6; border-radius: 50%; margin: 10px auto; border: 3px solid white;\"><i class=\"fa fa-user\" style=\"font-size: 118px; color: white; margin: 15px 0 0 32px;\"></i></div>`\n                                    );\n                                    $uploaderImage.enable();\n                                 },\n\n                                 // if an error was returned\n                                 onFileUploadError: (item, response) => {\n                                    const error = new Error(response);\n\n                                    const $uploaderImage = $$(\n                                       ids.uploaderImage\n                                    );\n\n                                    $uploaderImage.enable();\n\n                                    this.AB.notify.developer(error, {\n                                       context: \"Error uploading file\",\n                                    });\n                                    webix.alert(error);\n                                 },\n                              },\n                           },\n                           {},\n                        ],\n                     },\n                     {\n                        id: ids.formUserInfo,\n                        view: \"form\",\n                        width: 460,\n                        height: 160,\n                        borderless: true,\n                        css: {\n                           position: \"relative\",\n                           top: \"15px\",\n                        },\n                        elements: [\n                           {\n                              css: {\n                                 \"border-bottom\": \"1px solid #dee2e6\",\n                                 \"margin-top\": \"0 !important\",\n                              },\n                              cols: [\n                                 {\n                                    view: \"label\",\n                                    width: 160,\n                                    // align: \"right\",\n                                    label: L(\"Tenant\"),\n                                 },\n                                 {\n                                    view: \"label\",\n                                    name: \"tenant\",\n                                    value: \"\",\n                                    css: \"formText\",\n                                    on: {\n                                       onAfterRender: function () {\n                                          ClassUI.CYPRESS_REF(\n                                             this,\n                                             \"user_profile_tenant\"\n                                          );\n                                       },\n                                    },\n                                 },\n                              ],\n                           },\n                           {\n                              css: {\n                                 \"border-bottom\": \"1px solid #dee2e6\",\n                                 \"margin-top\": \"0 !important\",\n                              },\n                              cols: [\n                                 {\n                                    view: \"label\",\n                                    width: 160,\n                                    // align: \"right\",\n                                    label: L(\"Username\"),\n                                 },\n                                 {\n                                    view: \"label\",\n                                    name: \"username\",\n                                    value: \"\",\n                                    css: \"formText\",\n                                    on: {\n                                       onAfterRender: function () {\n                                          ClassUI.CYPRESS_REF(\n                                             this,\n                                             \"user_profile_username\"\n                                          );\n                                       },\n                                    },\n                                 },\n                              ],\n                           },\n                           {\n                              css: {\n                                 \"border-bottom\": \"1px solid #dee2e6\",\n                                 \"margin-top\": \"0 !important\",\n                              },\n                              cols: [\n                                 {\n                                    view: \"label\",\n                                    width: 160,\n                                    // align: \"right\",\n                                    label: L(\"Email\"),\n                                 },\n                                 {\n                                    id: ids.dataEmail,\n                                    view: \"label\",\n                                    name: \"email\",\n                                    value: \"\",\n                                    css: \"formText\",\n                                    on: {\n                                       onAfterRender: function () {\n                                          ClassUI.CYPRESS_REF(\n                                             this,\n                                             \"user_profile_email\"\n                                          );\n                                       },\n                                    },\n                                 },\n                                 {\n                                    id: ids.editModeEmail,\n                                    view: \"text\",\n                                    hidden: true,\n                                    value: \"\",\n                                 },\n                                 {\n                                    id: ids.buttonEditModeEmail,\n                                    view: \"button\",\n                                    type: \"icon\",\n                                    icon: \"wxi-pencil\",\n                                    width: 40,\n                                    inputWidth: 40,\n                                    on: {\n                                       onItemClick: () => {\n                                          const $dataEmail = $$(ids.dataEmail);\n                                          const $editModeEmail = $$(\n                                             ids.editModeEmail\n                                          );\n                                          const $buttonEditModeEmail = $$(\n                                             ids.buttonEditModeEmail\n                                          );\n                                          const $editModeButtonsEmail = $$(\n                                             ids.editModeButtonsEmail\n                                          );\n\n                                          $editModeEmail.setValue(\n                                             this.AB.Account.email()\n                                          );\n\n                                          $dataEmail.hide();\n                                          $buttonEditModeEmail.hide();\n\n                                          $editModeEmail.show();\n                                          $editModeButtonsEmail.show();\n                                       },\n                                    },\n                                 },\n                                 {\n                                    id: ids.editModeButtonsEmail,\n                                    hidden: true,\n                                    cols: [\n                                       {\n                                          view: \"button\",\n                                          type: \"icon\",\n                                          icon: \"wxi-close\",\n                                          width: 40,\n                                          inputWidth: 40,\n                                          css: \"webix_danger\",\n                                          on: {\n                                             onItemClick: () => {\n                                                const $dataEmail = $$(\n                                                   ids.dataEmail\n                                                );\n                                                const $editModeEmail = $$(\n                                                   ids.editModeEmail\n                                                );\n                                                const $buttonEditModeEmail = $$(\n                                                   ids.buttonEditModeEmail\n                                                );\n                                                const $editModeButtonsEmail =\n                                                   $$(ids.editModeButtonsEmail);\n\n                                                $editModeEmail.hide();\n                                                $editModeButtonsEmail.hide();\n\n                                                $dataEmail.show();\n                                                $buttonEditModeEmail.show();\n                                             },\n                                          },\n                                       },\n                                       {\n                                          view: \"button\",\n                                          type: \"icon\",\n                                          icon: \"wxi-check\",\n                                          width: 40,\n                                          inputWidth: 40,\n                                          css: \"webix_primary\",\n                                          on: {\n                                             onItemClick: async () => {\n                                                const $dataEmail = $$(\n                                                   ids.dataEmail\n                                                );\n                                                const $editModeEmail = $$(\n                                                   ids.editModeEmail\n                                                );\n                                                const $buttonEditModeEmail = $$(\n                                                   ids.buttonEditModeEmail\n                                                );\n                                                const $editModeButtonsEmail =\n                                                   $$(ids.editModeButtonsEmail);\n\n                                                $editModeEmail.hide();\n                                                $editModeButtonsEmail.hide();\n\n                                                $dataEmail.show();\n                                                $buttonEditModeEmail.show();\n\n                                                try {\n                                                   const email =\n                                                      $editModeEmail.getValue();\n\n                                                   $buttonEditModeEmail.disable();\n\n                                                   // await this.AB.Network.put({\n                                                   //    url: `/app_builder/model/${\n                                                   //       this.AB.objectUser().id\n                                                   //    }/${this.AB.Account.uuid()}`,\n                                                   //    data: {\n                                                   //       email,\n                                                   //    },\n                                                   // });\n                                                   await this.AB.objectUser()\n                                                      .model()\n                                                      .update(\n                                                         this.AB.Account.uuid(),\n                                                         { email }\n                                                      );\n\n                                                   this.AB.Account._config.email =\n                                                      email;\n                                                } catch (error) {\n                                                   this.AB.notify.developer(\n                                                      error,\n                                                      {\n                                                         context:\n                                                            \"error updating user profile email\",\n                                                      }\n                                                   );\n                                                } finally {\n                                                   $dataEmail.setValue(\n                                                      this.AB.Account.email()\n                                                   );\n                                                   $buttonEditModeEmail.enable();\n                                                }\n                                             },\n                                          },\n                                       },\n                                    ],\n                                 },\n                              ],\n                           },\n                           {\n                              css: {\n                                 \"margin-top\": \"0 !important\",\n                              },\n                              cols: [\n                                 {\n                                    view: \"label\",\n                                    width: 160,\n                                    // align: \"right\",\n                                    label: L(\"Language\"),\n                                 },\n                                 {\n                                    id: ids.dataLanguage,\n                                    view: \"label\",\n                                    name: \"language\",\n                                    value: \"\",\n                                    css: \"formText\",\n                                    on: {\n                                       onAfterRender: function () {\n                                          ClassUI.CYPRESS_REF(\n                                             this,\n                                             \"user_profile_language\"\n                                          );\n                                       },\n                                    },\n                                 },\n                                 {\n                                    id: ids.editModeLanguage,\n                                    view: \"combo\",\n                                    hidden: true,\n                                    value: null,\n                                    options: [],\n                                 },\n                                 {\n                                    id: ids.buttonEditModeLanguage,\n                                    view: \"button\",\n                                    type: \"icon\",\n                                    icon: \"wxi-pencil\",\n                                    width: 40,\n                                    inputWidth: 40,\n                                    on: {\n                                       onItemClick: async () => {\n                                          const $dataLanguage = $$(\n                                             ids.dataLanguage\n                                          );\n                                          const $editModeLanguage = $$(\n                                             ids.editModeLanguage\n                                          );\n                                          const $buttonEditModeLanguage = $$(\n                                             ids.buttonEditModeLanguage\n                                          );\n                                          const $editModeButtonsLanguage = $$(\n                                             ids.editModeButtonsLanguage\n                                          );\n\n                                          $buttonEditModeLanguage.disable();\n\n                                          $editModeLanguage.define(\n                                             \"options\",\n                                             await this.getLanguages()\n                                          );\n                                          $editModeLanguage.refresh();\n                                          $editModeLanguage.setValue(\n                                             this.AB.Account.language()\n                                          );\n\n                                          $dataLanguage.hide();\n                                          $buttonEditModeLanguage.hide();\n\n                                          $editModeLanguage.show();\n                                          $editModeButtonsLanguage.show();\n                                       },\n                                    },\n                                 },\n                                 {\n                                    id: ids.editModeButtonsLanguage,\n                                    hidden: true,\n                                    cols: [\n                                       {\n                                          view: \"button\",\n                                          type: \"icon\",\n                                          icon: \"wxi-close\",\n                                          width: 40,\n                                          inputWidth: 40,\n                                          css: \"webix_danger\",\n                                          on: {\n                                             onItemClick: async () => {\n                                                const $dataLanguage = $$(\n                                                   ids.dataLanguage\n                                                );\n                                                const $editModeLanguage = $$(\n                                                   ids.editModeLanguage\n                                                );\n                                                const $buttonEditModeLanguage =\n                                                   $$(\n                                                      ids.buttonEditModeLanguage\n                                                   );\n                                                const $editModeButtonsLanguage =\n                                                   $$(\n                                                      ids.editModeButtonsLanguage\n                                                   );\n\n                                                $editModeLanguage.hide();\n                                                $editModeButtonsLanguage.hide();\n\n                                                $dataLanguage.show();\n                                                $buttonEditModeLanguage.show();\n\n                                                try {\n                                                   $dataLanguage.setValue(\n                                                      await this.languageCodeToWord(\n                                                         this.AB.Account.language()\n                                                      )\n                                                   );\n                                                } catch (error) {\n                                                   $dataLanguage.setValue(null);\n                                                   this.AB.notify.developer(\n                                                      error,\n                                                      {\n                                                         context:\n                                                            \"portal_work_user_profile_window: Error updating language\",\n                                                      }\n                                                   );\n                                                } finally {\n                                                   $buttonEditModeLanguage.enable();\n                                                }\n                                             },\n                                          },\n                                       },\n                                       {\n                                          view: \"button\",\n                                          type: \"icon\",\n                                          icon: \"wxi-check\",\n                                          width: 40,\n                                          inputWidth: 40,\n                                          css: \"webix_primary\",\n                                          on: {\n                                             onItemClick: async () => {\n                                                const $dataLanguage = $$(\n                                                   ids.dataLanguage\n                                                );\n                                                const $editModeLanguage = $$(\n                                                   ids.editModeLanguage\n                                                );\n                                                const $buttonEditModeLanguage =\n                                                   $$(\n                                                      ids.buttonEditModeLanguage\n                                                   );\n                                                const $editModeButtonsLanguage =\n                                                   $$(\n                                                      ids.editModeButtonsLanguage\n                                                   );\n\n                                                $editModeLanguage.hide();\n                                                $editModeButtonsLanguage.hide();\n\n                                                $dataLanguage.show();\n                                                $buttonEditModeLanguage.show();\n\n                                                try {\n                                                   const languageCode =\n                                                      $editModeLanguage.getValue();\n\n                                                   // await this.AB.Network.put({\n                                                   //    url: `/app_builder/model/${\n                                                   //       this.AB.objectUser().id\n                                                   //    }/${this.AB.Account.uuid()}`,\n                                                   //    data: {\n                                                   //       languageCode,\n                                                   //    },\n                                                   // });\n                                                   await this.AB.objectUser()\n                                                      .model()\n                                                      .update(\n                                                         this.AB.Account.uuid(),\n                                                         { languageCode }\n                                                      );\n\n                                                   this.AB.Account._config.languageCode =\n                                                      languageCode;\n                                                } catch (error) {\n                                                   this.AB.notify.developer(\n                                                      error,\n                                                      {\n                                                         context:\n                                                            \"portal_work_user_profile_window: Error updating language Code\",\n                                                      }\n                                                   );\n                                                } finally {\n                                                   try {\n                                                      $dataLanguage.setValue(\n                                                         await this.languageCodeToWord(\n                                                            this.AB.Account.language()\n                                                         )\n                                                      );\n                                                   } catch (error) {\n                                                      $dataLanguage.setValue(\n                                                         null\n                                                      );\n\n                                                      this.AB.notify.developer(\n                                                         error,\n                                                         {\n                                                            context:\n                                                               \"portal_work_user_profile_window: Error updating languageCodeToWord()\",\n                                                         }\n                                                      );\n                                                   }\n\n                                                   $buttonEditModeLanguage.enable();\n                                                }\n                                             },\n                                          },\n                                       },\n                                    ],\n                                 },\n                              ],\n                           },\n                        ],\n                     },\n                  ],\n               },\n               {\n                  rows: [\n                     {\n                        view: \"button\",\n                        type: \"icon\",\n                        icon: \"wxi-angle-down\",\n                        height: 40,\n                        css: \"webix_primary\",\n                        label: L(\"Advanced Options\"),\n                        on: {\n                           onItemClick: (id) => {\n                              const $button = $$(id);\n                              const $advanceOptions = $$(ids.advanceOptions);\n\n                              if ($advanceOptions.isVisible()) {\n                                 $button.define(\"icon\", \"wxi-angle-down\");\n                                 $button.refresh();\n                                 $advanceOptions.hide();\n                              } else {\n                                 $button.define(\"icon\", \"wxi-angle-up\");\n                                 $button.refresh();\n                                 $advanceOptions.show();\n                              }\n                           },\n                        },\n                     },\n                     {\n                        id: ids.advanceOptions,\n                        hidden: true,\n                        rows: [\n                           {\n                              view: \"form\",\n                              width: 460,\n                              borderless: true,\n                              elements: [\n                                 {\n                                    cols: [\n                                       {\n                                          rows: [\n                                             {\n                                                height: 3,\n                                             },\n                                             {\n                                                view: \"label\",\n                                                width: 160,\n                                                // align: \"right\",\n                                                label: L(\"New Password\"),\n                                             },\n                                             {},\n                                          ],\n                                       },\n                                       {\n                                          id: ids.formNewPassword,\n                                          view: \"form\",\n                                          borderless: true,\n                                          width: 260,\n                                          padding: 0,\n                                          elements: [\n                                             {\n                                                id: ids.fieldNewPassword,\n                                                view: \"text\",\n                                                name: \"newPassword\",\n                                                type: \"password\",\n                                                placeholder: L(\n                                                   \"Enter a new Password (at least 8)\"\n                                                ),\n                                                value: \"\",\n                                                validate: (value) => {\n                                                   return value.length >= 8;\n                                                },\n                                             },\n                                             {\n                                                view: \"text\",\n                                                name: \"confirmPassword\",\n                                                type: \"password\",\n                                                placeholder:\n                                                   L(\"Confirm Password\"),\n                                                value: \"\",\n                                                validate: (value) => {\n                                                   const $fieldNewPassword = $$(\n                                                      ids.fieldNewPassword\n                                                   );\n\n                                                   return (\n                                                      value ===\n                                                      $fieldNewPassword.getValue()\n                                                   );\n                                                },\n                                             },\n                                             {\n                                                view: \"button\",\n                                                type: \"form\",\n                                                value: \"Save\",\n                                                align: \"right\",\n                                                height: 32,\n                                                width: 75,\n                                                inputWidth: 75,\n                                                css: \"webix_primary\",\n                                                on: {\n                                                   onItemClick: async (id) => {\n                                                      const $formNewPassword =\n                                                         $$(\n                                                            ids.formNewPassword\n                                                         );\n                                                      const $thisButton =\n                                                         $$(id);\n\n                                                      if (\n                                                         $formNewPassword.validate()\n                                                      ) {\n                                                         try {\n                                                            const $fieldNewPassword =\n                                                               $$(\n                                                                  ids.fieldNewPassword\n                                                               );\n                                                            const password =\n                                                               $fieldNewPassword.getValue();\n\n                                                            $thisButton.disable();\n                                                            $formNewPassword.disable();\n\n                                                            await this.AB.Network.post(\n                                                               {\n                                                                  url: \"/auth/password/reset\",\n                                                                  data: {\n                                                                     password,\n                                                                  },\n                                                               },\n                                                               {\n                                                                  key: \"portal_auth_password_reset\",\n                                                                  context: {},\n                                                               }\n                                                            );\n                                                         } catch (error) {\n                                                            this.AB.notify.developer(\n                                                               error,\n                                                               {\n                                                                  context:\n                                                                     \"portal_work_user_profile_window:Error resetting password\",\n                                                               }\n                                                            );\n                                                         } finally {\n                                                            $formNewPassword.clear();\n                                                            $formNewPassword.enable();\n                                                            $thisButton.enable();\n                                                         }\n                                                         webix.alert(\n                                                            \"The new password is successfully updated!\"\n                                                         );\n                                                      }\n                                                   },\n                                                },\n                                             },\n                                          ],\n                                       },\n                                    ],\n                                 },\n                                 {\n                                    css: {\n                                       \"border-top\": \"1px solid #dee2e6\",\n                                    },\n                                    cols: [\n                                       {\n                                          view: \"label\",\n                                          width: 160,\n                                          // align: \"right\",\n                                          label: L(\"System Notification\"),\n                                       },\n                                       {\n                                          id: ids.systemNotification,\n                                          view: \"checkbox\",\n                                          borderless: true,\n                                          width: 27,\n                                          css: {\n                                             \"text-align\": \"center !important\",\n                                             padding: \"0 10px\",\n                                          },\n                                          value: 0,\n                                          on: {\n                                             onItemClick: async () => {\n                                                const $systemNotification = $$(\n                                                   ids.systemNotification\n                                                );\n\n                                                try {\n                                                   const sendEmailNotifications =\n                                                      $systemNotification.getValue();\n                                                   // await this.AB.Network.put({\n                                                   //    url: `/app_builder/model/${\n                                                   //       this.AB.objectUser().id\n                                                   //    }/${this.AB.Account.uuid()}`,\n                                                   //    data: {\n                                                   //       sendEmailNotifications,\n                                                   //    },\n                                                   // });\n\n                                                   await this.AB.objectUser()\n                                                      .model()\n                                                      .update(\n                                                         this.AB.Account.uuid(),\n                                                         {\n                                                            sendEmailNotifications,\n                                                         }\n                                                      );\n\n                                                   this.AB.Account._config.sendEmailNotifications =\n                                                      sendEmailNotifications;\n                                                } catch (error) {\n                                                   this.AB.notify.developer(\n                                                      error,\n                                                      {\n                                                         context:\n                                                            \"portal_work_user_profile_window:Error updating email notifications\",\n                                                      }\n                                                   );\n                                                } finally {\n                                                   $systemNotification.setValue(\n                                                      this.AB.Account.sendEmailNotifications()\n                                                   );\n                                                }\n                                             },\n                                          },\n                                       },\n                                    ],\n                                 },\n                              ],\n                           },\n                        ],\n                     },\n                  ],\n               },\n            ],\n         },\n         // },\n      };\n   }\n\n   async init(AB) {\n      this.AB = AB;\n\n      webix.ui(this.ui());\n   }\n\n   async languageCodeToWord(code) {\n      if (typeof code !== \"string\")\n         throw new Error('The argrument \"code\" should be a string');\n\n      const languages = await this.getLanguages();\n      for (let i = 0; i < languages.length; i++)\n         if (languages[i].id === code) return languages[i].value;\n\n      return null;\n   }\n\n   async getLanguages() {\n      const data = [];\n\n      try {\n         const Language = this.AB.objectLanguage();\n         const response = await Language.model().findAll();\n         for (let i = 0; i < response.data.length; i++)\n            data.push({\n               id: response.data[i].language_code,\n               value: response.data[i].language_label,\n            });\n      } catch (error) {\n         this.AB.notify.developer(error, {\n            context: \"Error getting Languages\",\n         });\n      }\n\n      return data;\n   }\n\n   async populate() {\n      const ids = this.ids;\n\n      const $formUserInfo = $$(ids.formUserInfo);\n      const $systemNotification = $$(ids.systemNotification);\n\n      const populateLanguage = async () => {\n         const $dataLanguage = $$(ids.dataLanguage);\n         const $buttonEditModeLanguage = $$(ids.buttonEditModeLanguage);\n\n         $buttonEditModeLanguage.disable();\n\n         try {\n            $dataLanguage.setValue(\n               await this.languageCodeToWord(this.AB.Account.language())\n            );\n         } catch (error) {\n            $dataLanguage.setValue(null);\n\n            this.AB.notify.developer(error, {\n               context: \"Error setting Languages\",\n            });\n         }\n\n         $buttonEditModeLanguage.enable();\n      };\n\n      populateLanguage();\n      $formUserInfo.setValues({\n         tenant: this.AB.Tenant.id(),\n         username: this.AB.Account.username(),\n         email: this.AB.Account.email(),\n      });\n      $systemNotification.setValue(this.AB.Account.sendEmailNotifications());\n   }\n\n   hide() {\n      const ids = this.ids;\n\n      const $component = $$(ids.component);\n\n      $component.hide();\n   }\n\n   show() {\n      const ids = this.ids;\n\n      const $component = $$(ids.component);\n\n      $component.show();\n\n      this.populate();\n   }\n}\n\nexport default new PortalWorkUserProfileWindow();\n","import ClassUI from \"./ClassUI.js\";\n\nvar myClass = null;\n// Singleton.\n// This UI gets imported several times so let's not recreate the class each time.\n\nif (!myClass) {\n   myClass = class PortalWorkUserSwitcheroo extends ClassUI {\n      constructor() {\n         super(\"portal_work_user_switcheroo\", {\n            userIcon: \"\",\n            userName: \"\",\n            switchBack: \"\",\n            switchBackReplacer: \"\",\n            list: \"\",\n         });\n      }\n\n      ui() {\n         var L = (...params) => {\n            return this.label(...params);\n         };\n         const ids = this.ids;\n         return {\n            id: ids.component,\n            view: \"window\",\n            position: \"center\",\n            hidden: true,\n            close: true,\n            modal: true,\n            css: \"switcheroo\",\n            head: L(\"Switcheroo\"),\n            body: {\n               padding: 10,\n               rows: [\n                  {\n                     height: 30,\n                     cols: [\n                        {\n                           id: ids.userIcon,\n                           view: \"label\",\n                           align: \"center\",\n                           width: 44,\n                        },\n                        {\n                           id: ids.userName,\n                           view: \"label\",\n                           align: \"center\",\n                        },\n                        {\n                           id: ids.switchBack,\n                           view: \"button\",\n                           value: '<div style=\"text-align: center; font-size: 12px;\"><i class=\"fa-fw fa fa-times\"></i></div>',\n                           align: \"center\",\n                           css: \"webix_transparent\",\n                           width: 44,\n                           on: {\n                              onItemClick: () => {\n                                 this.switchUser();\n                                 this.hide();\n                              },\n                           },\n                        },\n                        {\n                           id: ids.switchBackReplacer,\n                           width: 44,\n                        },\n                     ],\n                  },\n                  {\n                     view: \"label\",\n                     label: L(\"View site as:\"),\n                     align: \"left\",\n                  },\n                  {\n                     id: ids.list,\n                  },\n                  {\n                     cols: [\n                        {\n                           view: \"button\",\n                           value: L(\"Switch\"),\n                           css: \"webix_primary\",\n                           on: {\n                              onAfterRender: function () {\n                                 ClassUI.CYPRESS_REF(\n                                    this,\n                                    \"switcheroo_switch_button\"\n                                 );\n                              },\n                              onItemClick: () => {\n                                 const userID = $$(ids.list).getValue();\n\n                                 if (!userID) {\n                                    webix.message(L(\"Please select a user.\"));\n\n                                    return;\n                                 }\n\n                                 this.switchUser(userID);\n                                 this.hide();\n                              },\n                           },\n                        },\n                     ],\n                  },\n               ],\n            },\n         };\n      }\n\n      init(AB, headless = false) {\n         this.AB = AB;\n         if (!headless) {\n            webix.ui(this.ui());\n            this.populate();\n         }\n\n         return Promise.resolve();\n      }\n\n      hide() {\n         $$(this.ids.component).hide();\n      }\n\n      show() {\n         $$(this.ids.component).show();\n      }\n\n      // const clearPopupUserMenu = () => {\n      //   $$(\"switcheroo_list\").setValue(\"\");\n      //   $$(\"switcheroo\").hide();\n      //   $$(\"userMenu_list\").unselectAll();\n      //   $$(\"userMenu_list\").show();\n      // };\n\n      async switcherooClear() {\n         return this.switchUser(null);\n      }\n\n      async switchUser(userID) {\n         const user = (this.AB.Account.userList() || []).find(\n            (e) => e.uuid === userID\n         );\n\n         // Save to a switched user.\n         if (!user || !userID) {\n            // if no user, then remove our current Switcheroo assignment\n            /* let response = */ await this.AB.Network.delete({\n               url: `/auth/switcheroo`,\n               // data: {},\n            });\n         } else {\n            /* let response = */ await this.AB.Network.post({\n               url: `/auth/switcheroo/${user.uuid}`,\n               // data: {},\n            });\n         }\n\n         window.location.reload(true);\n      }\n\n      populate() {\n         const ids = this.ids;\n\n         const mainUserID = this.AB.Account.uuid();\n         const userList = (this.AB.Account.userList() || [])\n            .filter((e) => e.uuid !== mainUserID)\n            .map((u) => {\n               return { id: u.uuid, value: u.username };\n            });\n\n         let switchedUserID = null;\n         if (this.AB.Account.isSwitcherood()) {\n            switchedUserID = mainUserID;\n         }\n         webix.ui(\n            {\n               id: ids.list,\n               view: \"combo\",\n               options: {\n                  body: {\n                     template: (obj) => {\n                        if (obj.id === switchedUserID)\n                           return `<i class='fa-fw fa fa-user-secret'></i> ${obj.value}`;\n                        return `<span data-cy=\"switcheroo_option_${obj.value}\">${obj.value}</span>`;\n                     },\n                  },\n                  data: userList,\n               },\n               on: {\n                  onAfterRender: function () {\n                     ClassUI.CYPRESS_REF(this, \"switcheroo_user_list\");\n                  },\n                  onItemClick: (id) => {\n                     $$(id).setValue(\"\");\n                  },\n               },\n            },\n            $$(ids.list)\n         );\n         $$(ids.userName).setValue(this.AB.Account.username());\n\n         if (this.AB.Account.isSwitcherood()) {\n            $$(ids.userIcon).setValue(\n               \"<i class='fa-fw fa fa-user-secret'></i>\"\n            );\n            $$(ids.switchBackReplacer)?.hide();\n            $$(ids.switchBack)?.show();\n            return;\n         }\n\n         $$(ids.userIcon).setValue(\"<i class='fa-fw fa fa-user'></i>\");\n         $$(ids.switchBack).hide();\n         $$(ids.switchBackReplacer).show();\n      }\n   };\n}\nexport default new myClass();\n","import ClassUI from \"./ClassUI.js\";\n\nclass PortalWorkUserQRWindow extends ClassUI {\n   constructor() {\n      super();\n      this.id = \"portal_work_user_qr_window\";\n      this.idTaskMultiview = \"taskMultiview\";\n      this.idTaskTitle = \"taskTitle\";\n      this.idTaskPager = \"taskPager\";\n      this.classQrImageDom = \"qr-code-image-dom\";\n   }\n\n   ui() {\n      var L = (...params) => {\n         return this.label(...params);\n      };\n      return {\n         id: this.id,\n         view: \"window\",\n         position: function (state) {\n            state.left = state.maxWidth / 2 - 600 / 2; // fixed values\n            state.top = state.maxHeight / 2 - (state.maxHeight * 0.7) / 2;\n            state.width = 500; // relative values\n            state.height = 400;\n         },\n         modal: true,\n         head: {\n            view: \"toolbar\",\n            css: \"webix_dark\",\n            cols: [\n               { width: 17 },\n               {\n                  id: this.idTaskTitle,\n                  view: \"label\",\n                  label: L(\"Connect Mobile App\"),\n               },\n               {\n                  view: \"button\",\n                  type: \"icon\",\n                  css: \"webix_transparent\",\n                  width: 40,\n                  icon: \"fa fa-repeat\",\n                  click: () => {\n                     $$(\"qr-code-image\").refresh();\n                  },\n                  on: {\n                     onAfterRender() {\n                        ClassUI.CYPRESS_REF(this, \"qr_image_reload\");\n                     },\n                  },\n               },\n               {\n                  view: \"button\",\n                  type: \"icon\",\n                  css: \"webix_transparent\",\n                  width: 40,\n                  icon: \"nomargin fa fa-times\",\n                  click: () => {\n                     $$(this.id).hide();\n                  },\n                  on: {\n                     onAfterRender() {\n                        ClassUI.CYPRESS_REF(this, \"qr_window_close\");\n                     },\n                  },\n               },\n            ],\n         },\n         body: {\n            css: { \"text-align\": \"center\" },\n            rows: [\n               { height: 10 },\n               {\n                  borderless: true,\n                  template: `<span style=\"font-size:14px;font-weight:500;\">${L(\n                     \"Use your phone's camera app to scan this QR code, and it will open a webpage to the conneXted mobile app. You only need to scan the code for the first time.\"\n                  )}</span>`,\n               },\n               {\n                  id: \"qr-code-image\",\n                  borderless: true,\n                  autoheight: true,\n                  autowidth: true,\n                  template: `<img src='/relay/user-qr' class='${this.classQrImageDom}' style='margin: 10px auto 20px;display:block;' />`,\n                  on: {\n                     onAfterRender: () => {\n                        const $img = $$(\n                           \"qr-code-image\"\n                        ).$view.getElementsByClassName(this.classQrImageDom)[0];\n                        $img.onload = () => {\n                           $$(\"qr-code-image\").adjust();\n                        };\n                     },\n                  },\n               },\n\n               {\n                  borderless: true,\n                  template: `<div style=\"font-size:14px;font-weight:500;font-weight:500;\">${L(\n                     \"This code can only be used once. It will expire after 7 days.\"\n                  )}</div>`,\n               },\n            ],\n         },\n      };\n   }\n\n   init(AB) {\n      this.AB = AB;\n      webix.ui(this.ui());\n\n      return Promise.resolve();\n   }\n\n   hide() {\n      $$(this.id).hide();\n   }\n\n   show() {\n      $$(this.id).show();\n   }\n}\n\nexport default new PortalWorkUserQRWindow();\n","import ClassUI from \"./ClassUI.js\";\n\nclass PortalWorkUserMobileQR extends ClassUI {\n   constructor() {\n      super(\"portal_work_user_qr_window\", {\n         // taskMultiview:\"\",\n         description: \"\",\n         instructions: \"\",\n         title: \"\",\n         qrcode: \"\",\n         taskPager: \"\",\n      });\n   }\n\n   ui() {\n      var L = (...params) => {\n         return this.label(...params);\n      };\n      const ids = this.ids;\n      return {\n         id: ids.component,\n         view: \"window\",\n         position: function (state) {\n            state.left = state.maxWidth / 2 - 600 / 2; // fixed values\n            state.top = state.maxHeight / 2 - (state.maxHeight * 0.7) / 2;\n            state.width = 500; // relative values\n            state.height = 400;\n         },\n         modal: true,\n         head: {\n            view: \"toolbar\",\n            css: \"webix_dark\",\n            cols: [\n               { width: 17 },\n               {\n                  id: ids.title,\n                  view: \"label\",\n                  label: L(\"Connect Mobile App\"),\n               },\n               {\n                  view: \"button\",\n                  type: \"icon\",\n                  css: \"webix_transparent\",\n                  width: 40,\n                  icon: \"fa fa-repeat\",\n                  click: () => {\n                     $$(\"qr-code-image\").refresh();\n                  },\n                  on: {\n                     onAfterRender() {\n                        ClassUI.CYPRESS_REF(this, \"qr_image_reload\");\n                     },\n                  },\n               },\n               {\n                  view: \"button\",\n                  type: \"icon\",\n                  css: \"webix_transparent\",\n                  width: 40,\n                  icon: \"nomargin fa fa-times\",\n                  click: () => {\n                     $$(ids.component).hide();\n                  },\n                  on: {\n                     onAfterRender() {\n                        ClassUI.CYPRESS_REF(this, \"qr_window_close\");\n                     },\n                  },\n               },\n            ],\n         },\n         body: {\n            css: { \"text-align\": \"center\" },\n            rows: [\n               { height: 10 },\n               {\n                  id: ids.description,\n                  borderless: true,\n                  template: `<span style=\"font-size:14px;font-weight:500;\">The App's Description should go here.</span>`,\n               },\n               {\n                  id: ids.instructions,\n                  borderless: true,\n                  template: `<span style=\"font-size:14px;font-weight:500;\">${L(\n                     \"Use your phone's camera app to scan this QR code, and it will open a webpage to the {0} mobile app. You only need to scan the code for the first time.\"\n                  )}</span>`,\n               },\n               {\n                  id: ids.qrcode,\n                  height: 175,\n                  borderless: true,\n                  // autoheight: true,\n                  autowidth: true,\n                  template:\n                     \"<img src='/relay/user-qr' style='margin: 10px auto 20px;display:block;' />\",\n               },\n\n               {},\n               // {\n               //    borderless: true,\n               //    template: `<div style=\"font-size:14px;font-weight:500;font-weight:500;\">${L(\n               //       \"This code can only be used once. It will expire after 7 days.\"\n               //    )}</div>`,\n               // },\n            ],\n         },\n      };\n   }\n\n   init(AB) {\n      this.AB = AB;\n      webix.ui(this.ui());\n\n      return Promise.resolve();\n   }\n\n   load(App) {\n      var L = (...params) => {\n         return this.label(...params);\n      };\n\n      // change Title\n      let $title = $$(this.ids.title);\n      $title.define(\"label\", App.label);\n      $title.refresh();\n\n      // Change Description\n      let $desc = $$(this.ids.description);\n      $desc.define(\n         \"template\",\n         `<span style=\"font-size:14px;font-weight:500;\">${App.description}</span>`\n      );\n      $desc.refresh();\n\n      let $instr = $$(this.ids.instructions);\n      $instr.define(\n         \"template\",\n         `<span style=\"font-size:14px;font-weight:500;\">${L(\n            \"Use your phone's camera app to scan this QR code, and it will open a webpage to the {0} mobile app. You only need to scan the code for the first time.\",\n            [App.label]\n         )}</span>`\n      );\n\n      // Change QR Image\n      let $qrcode = $$(this.ids.qrcode);\n      $qrcode.define(\n         \"template\",\n         `<img src='/mobile/qr/${App.id}' style='margin: 10px auto 20px;display:block;' />`\n      );\n      $qrcode.refresh();\n\n      $$(this.ids.component)?.refresh?.();\n   }\n\n   hide() {\n      $$(this.ids.component).hide();\n   }\n\n   show() {\n      $$(this.ids.component).show();\n   }\n}\n\nexport default new PortalWorkUserMobileQR();\n","import ClassUI from \"./ClassUI.js\";\n\nclass PortalAccessLevelManager extends ClassUI {\n   constructor() {\n      super();\n      this.accessLevels = [\n         {\n            id: \"0\",\n            value: \"No Access\",\n         },\n         {\n            id: \"1\",\n            value: \"Read Only\",\n         },\n         {\n            id: \"2\",\n            value: \"Full Access\",\n         },\n      ];\n   }\n\n   ui() {\n      const accessLevelManagerBody = {\n         view: \"scrollview\",\n         css: \"lightgray ab_amp\",\n         body: {\n            rows: [\n               {\n                  view: \"accordion\",\n                  id: \"amp_accordion\",\n                  roles: [],\n                  hidden: true,\n                  collapsed: true,\n                  css: \"webix_dark\",\n                  rows: [],\n               },\n               {\n                  id: \"amp_accordion_noSelection\",\n                  rows: [\n                     {},\n                     {\n                        view: \"label\",\n                        align: \"center\",\n                        height: 200,\n                        label: \"<div style='display: block; font-size: 180px; background-color: #666; color: transparent; text-shadow: 0px 1px 1px rgba(255,255,255,0.5); -webkit-background-clip: text; -moz-background-clip: text; background-clip: text;' class='fa fa-unlock-alt'></div>\",\n                     },\n                     {\n                        view: \"label\",\n                        align: \"center\",\n                        label: \"Add a role to control access.\",\n                     },\n                     {\n                        cols: [\n                           {},\n                           {\n                              view: \"button\",\n                              label: \"Add Role\",\n                              type: \"form\",\n                              css: \"webix_primary\",\n                              autowidth: true,\n                              click: () => {\n                                 webix.ui(newRolePopup).show();\n\n                                 const roles = this.roles.filter((role) => {\n                                    return (\n                                       $$(\"amp_accordion\").config.roles.indexOf(\n                                          role.id\n                                       ) == -1\n                                    );\n                                 });\n\n                                 $$(\"role_popup_options\").define(\n                                    \"options\",\n                                    roles\n                                 );\n                                 $$(\"role_popup_options\").refresh();\n                              },\n                           },\n                           {},\n                        ],\n                     },\n                     {},\n                  ],\n               },\n            ],\n         },\n      };\n\n      const newRolePopup = {\n         view: \"popup\",\n         id: \"role_popup\",\n         position: \"center\",\n         height: 250,\n         width: 350,\n         modal: true,\n         body: {\n            rows: [\n               {\n                  view: \"toolbar\",\n                  id: \"myToolbarABLiveTool\",\n                  css: \"webix_dark\",\n                  cols: [\n                     {\n                        view: \"label\",\n                        label: \"Add Role\",\n                        align: \"center\",\n                     },\n                  ],\n               },\n               {\n                  view: \"form\",\n                  elements: [\n                     /* We are not managing users yet so take this out\n                                    {\n                                      view: \"text\",\n                                      label: \"Create new\",\n                                      labelWidth: 90\n                                    },\n                                    {\n                                      view: \"label\",\n                                      label: \"- or -\",\n                                      align: \"center\"\n                                    },*/\n                     {\n                        view: \"combo\",\n                        label: \"\",\n                        id: \"role_popup_options\",\n                        placeholder: \"Choose role\",\n                        options: [],\n                     },\n                     {\n                        cols: [\n                           {\n                              view: \"button\",\n                              value: \"Cancel\",\n                              click: () => {\n                                 $$(\"role_popup\").hide();\n                              },\n                           },\n                           {\n                              view: \"button\",\n                              value: \"Add\",\n                              id: \"role_popup_options_add\",\n                              css: \"webix_primary\",\n                              click: () => {\n                                 const role =\n                                    $$(\"role_popup_options\").getValue();\n                                 if ($$(`amp_accordionitem_${role}`)) {\n                                    $$(`amp_accordionitem_${role}`).show();\n                                    $$(\"amp_accordion\").config.roles.push(role);\n                                 } else {\n                                    this.buildAccessAccordion(role);\n                                 }\n                                 $$(\"role_popup\").hide();\n                              },\n                           },\n                        ],\n                     },\n                  ],\n               },\n            ],\n         },\n      };\n\n      return {\n         view: \"window\",\n         css: \"ampWindow\",\n         id: \"access_manager\",\n         position: function (state) {\n            state.left = state.maxWidth - 350; // fixed values\n            state.top = 0;\n            state.width = 350; // relative values\n            state.height = state.maxHeight;\n         },\n         on: {\n            onShow: () => {\n               // collapse all the accordion items but the top one\n               var index = 0;\n               $$(\"amp_accordion\")\n                  .getChildViews()\n                  .forEach((a) => {\n                     if (index == 0) {\n                        $$(a).expand();\n                     } else {\n                        $$(a).collapse();\n                     }\n                     index++;\n                     $$(\"amp_accordion\").show();\n                     $$(\"amp_accordion_noSelection\").hide();\n                  });\n            },\n         },\n         //modal: true,\n         head: {\n            view: \"toolbar\",\n            css: \"webix_dark\",\n            cols: [\n               {\n                  width: 15,\n               },\n               {\n                  view: \"label\",\n                  label: \"Access Manager\",\n                  autowidth: true,\n               },\n               {},\n               {\n                  view: \"button\",\n                  label: \"Add Role\",\n                  width: 100,\n                  css: \"webix_primary\",\n                  click: () => {\n                     webix.ui(newRolePopup).show();\n\n                     var roles = this.roles.filter((role) => {\n                        return (\n                           $$(\"amp_accordion\").config.roles.indexOf(role.id) ==\n                           -1\n                        );\n                     });\n\n                     $$(\"role_popup_options\").define(\"options\", roles);\n                     $$(\"role_popup_options\").refresh();\n                  },\n               },\n               {\n                  view: \"button\",\n                  width: 35,\n                  css: \"webix_transparent\",\n                  type: \"icon\",\n                  icon: \"nomargin fa fa-times\",\n                  click: () => {\n                     this.hide();\n                  },\n               },\n            ],\n         },\n         body: accessLevelManagerBody,\n      };\n   }\n\n   init(portal) {\n      this.AB = portal.AB;\n      this.portal = portal;\n      this.appId = portal.AppState.lastSelectedApp;\n\n      const languageCode = this.AB.Config.userConfig().languageCode;\n      this.roles = this.AB.Config.metaConfig().roles.map((role) => {\n         const translation = role.translations.filter(\n            (t) => t.code == languageCode\n         );\n         const name = translation.length == 1 ? translation[0].name : role.name;\n         return { id: role.id, value: name };\n      });\n\n      webix.ui(this.ui());\n\n      // buld the tree views for already defined role access levels\n      const application = this.AB.applicationByID(this.appId);\n      if (application.isAccessManaged) {\n         // Build the access level tree for Roles\n         const existingRoles = [];\n         application.pages().forEach((page) => {\n            Object.keys(page.accessLevels).forEach((role) => {\n               if (existingRoles.indexOf(role) == -1) {\n                  existingRoles.push(role);\n               }\n            });\n         });\n         existingRoles.forEach((role) => {\n            this.buildAccessAccordion(role);\n         });\n      }\n   }\n\n   show() {\n      $$(\"access_manager\").show();\n   }\n\n   hide() {\n      $$(\"access_manager\").hide();\n   }\n\n   showPage(viewId, pageId, parent) {\n      parent.application = {};\n      parent.application.id = this.appId;\n      this.portal.showPage(parent);\n      const pageUI = this.portal.pageContainers[parent.id];\n      pageUI.showPage(pageId, viewId);\n   }\n\n   /*\n    * helper to get the current apps views\n    */\n   views(f) {\n      return this.AB.applicationByID(this.appId).views(f);\n   }\n\n   buildAccessAccordion(role) {\n      const L = this.AB.Label();\n      const application = this.AB.applicationByID(this.appId);\n      const isRoleAccessManager =\n         parseInt(application.accessManagers.useRole) == 1 &&\n         application.accessManagers.role.indexOf(role) > -1;\n      const manageUsers = {\n         rows: [\n            {\n               height: 10,\n            },\n            {\n               cols: [\n                  {\n                     width: 10,\n                  },\n                  {\n                     view: \"button\",\n                     type: \"icon\",\n                     icon: \"fa fa-trash\",\n                     css: \"webix_danger_inverse\",\n                     label: \"Remove\",\n                     click: async () => {\n                        const confirmation = await webix.confirm(\n                           \"Remove role from app?\"\n                        );\n                        if (confirmation) {\n                           const tree = $$(`linetree_${role}`);\n                           const mainPages = this.AB.applicationByID(\n                              this.appId\n                           ).pages();\n                           await mainPages.forEach(async (page) => {\n                              const branch = tree.getItem(page.id);\n                              branch.access = \"0\";\n                              await page.updateAccessLevels(\n                                 tree.config.role,\n                                 \"0\"\n                              );\n                              tree.updateItem(page.id, branch);\n                           });\n\n                           $$(`amp_accordionitem_${role}`).hide();\n                           const itemToRemove =\n                              $$(\"amp_accordion\").config.roles.indexOf(role);\n                           if (itemToRemove > -1) {\n                              $$(\"amp_accordion\").config.roles.splice(\n                                 itemToRemove,\n                                 1\n                              );\n                           }\n                        }\n                     },\n                  },\n                  {\n                     width: 10,\n                  },\n               ],\n            },\n            {\n               height: 10,\n            },\n         ],\n      };\n\n      $$(\"amp_accordion\").config.roles.push(role);\n\n      const toggleParent = (element) => {\n         if (!element.parent) return false;\n         var parentElem = element.parent;\n         if (!parentElem.parent) return false;\n         parentElem.parent.emit(\"changeTab\", parentElem.id);\n         toggleParent(parentElem.parent);\n      };\n\n      const getParent = (id, component) => {\n         let item = $$(component).getItem(id);\n         if (item.$parent == 0) return item;\n         else return getParent(item.$parent, component);\n      };\n\n      const tree = {\n         id: `linetree_${role}`,\n         view: \"edittree\",\n         type: \"lineTree\",\n         editable: true,\n         role: role,\n         editor: \"combo\",\n         editValue: \"access\",\n         threeState: true,\n         template: (obj, common) => {\n            const treeOptions = $$(`linetree_${role}`).config.options;\n            const option = treeOptions.find((o) => o.id === obj.access);\n            let color, icon;\n            switch (option.id) {\n               case \"1\":\n                  color = \"#FFAB00\";\n                  icon = \"eye\";\n                  break;\n               case \"2\":\n                  color = \"#00C853\";\n                  icon = \"pencil\";\n                  break;\n               default:\n                  // Case \"0\"\n                  color = \"#ff4938\";\n                  icon = \"lock\";\n            }\n\n            return `<span class=\"accessLevel\">\n                     <span class=\"fa-stack\">\n                        <i style=\"color: ${color};\" class=\"fa fa-circle fa-stack-2x\"></i>\n                        <i class=\"fa fa-${icon} fa-stack-1x fa-inverse\"></i>\n                     </span>\n                     ${common.icon(obj, common)}\n                     <span>${obj.label}</span>\n                     <i class=\"externalLink fa fa-external-link\"></i>\n                  </span>`;\n         },\n         options: this.accessLevels,\n         data: this.getAccessLevelTree(role),\n         onClick: {\n            externalLink: (event, branch, target) => {\n               const item = $$(`linetree_${role}`).getItem(branch);\n               const parent = getParent(branch, `linetree_${role}`);\n               if (item.type == \"tab\") {\n                  this.showPage(branch, item.pageId, parent);\n\n                  const tabView = this.views((v) => v.id == item.id)[0];\n                  if (!tabView) return false;\n\n                  const tab = tabView.parent;\n                  if (!tab) return false;\n\n                  toggleParent(tab);\n                  if (!$$(tabView.id) || !$$(tabView.id).isVisible()) {\n                     const showIt = setInterval(() => {\n                        if ($$(tabView.id) && $$(tabView.id).isVisible()) {\n                           clearInterval(showIt);\n                        }\n                        tab.emit(\"changeTab\", tabView.id);\n                     }, 200);\n                  }\n               }\n               // switch page\n               else {\n                  this.showPage(branch, item.id, parent);\n               }\n\n               return false;\n            },\n         },\n         on: {\n            onAfterEditStop: async (state, editor, ignoreUpdate) => {\n               if (state.old == state.value) return false;\n               const tree = $$(`linetree_${role}`);\n               const view = this.views((v) => {\n                  return v.id == editor.id;\n               })[0];\n               await view.updateAccessLevels(tree.config.role, state.value);\n               console.log(\n                  `Role: ${tree.config.role} set to Access Level: ${state.value} on view: ${view.id}`\n               );\n            },\n            onDataUpdate: async (id, data, old) => {\n               const tree = $$(`linetree_${role}`);\n               if (data.access == \"0\") {\n                  // NOTE: Need to update \"No Access\" option here because It does not trigger `onAfterEditStop` event\n                  const view = this.views((v) => v.id == id)[0];\n                  await view.updateAccessLevels(tree.config.role, data.access);\n\n                  tree.blockEvent();\n                  await tree.data.eachSubItem(id, async (child) => {\n                     const childData = tree.getItem(child.id);\n                     if (childData.access != data.access) {\n                        childData.access = data.access;\n                        const view = this.views((v) => {\n                           return v.id == child.id;\n                        })[0];\n                        await view.updateAccessLevels(\n                           tree.config.role,\n                           data.access\n                        );\n                        console.log(\n                           `Role: ${tree.config.role} set to Access Level: ${data.access} on view: ${view.id}`\n                        );\n                        tree.updateItem(child.id, childData);\n                     }\n                  });\n                  tree.unblockEvent();\n               } else {\n                  const parentBranch = tree.getParentId(id);\n                  const parentData = tree.getItem(parentBranch);\n                  if (parentData) {\n                     if (parentData.access == \"0\") {\n                        parentData.access = \"1\";\n                        const view = this.views((v) => {\n                           return v.id == parentBranch;\n                        })[0];\n                        await view.updateAccessLevels(\n                           tree.config.role,\n                           parentData.access\n                        );\n\n                        console.log(\n                           `Role: ${tree.config.role} set to Access Level: ${parentData.access} on view: ${view.id}`\n                        );\n                        tree.updateItem(parentBranch, parentData);\n                     }\n                  }\n               }\n            },\n         },\n      };\n\n      const newAccordionItem = {\n         view: \"accordionitem\",\n         id: `amp_accordionitem_${role}`,\n         header: () => {\n            return `${\n               this.roles?.find((r) => {\n                  return r.id === role;\n               })?.value ?? role\n            } ${\n               isRoleAccessManager\n                  ? `<span class=\"header\" webix_tooltip=\"${L(\n                       \"This role has been assigned as a Page Access Manager for this App. This means they have full access. Please remove the permissions from the App's Setting page if you would like to manage their access here.\"\n                    )}\">${this.WARNING_ICON}</span>`\n                  : \"\"\n            }`;\n         },\n         collapsed: true,\n         body: {\n            type: \"clean\",\n            rows: [tree, manageUsers],\n         },\n      };\n\n      $$(\"amp_accordion\").addView(newAccordionItem, -1);\n      $$(\"amp_accordion\").show();\n      $$(\"amp_accordion_noSelection\").hide();\n\n      if (isRoleAccessManager)\n         this.AB.Webix.TooltipControl.addTooltip(\n            $$(`amp_accordionitem_${role}`).$view\n         );\n\n      $$(`linetree_${role}`).openAll();\n   }\n\n   getAccessLevelTree(role) {\n      const tree = new webix.TreeCollection();\n\n      const addPage = (page, index, parentId, type) => {\n         // add to tree collection\n         const accessLevel = page.accessLevels[role] ?? \"0\";\n         const branch = {\n            id: page.id,\n            access: accessLevel,\n            label: page.label,\n            pageId: parentId,\n            type: type,\n         };\n         tree.add(branch, index, parentId);\n\n         // stop at detail views\n         if (page.defaults.key == \"detail\") {\n            return;\n         }\n\n         const subPages = page.pages ? page.pages() : [];\n         subPages.forEach((childPage, childIndex) => {\n            addPage(childPage, childIndex, page.id, \"page\");\n         });\n\n         // add tabs\n         page\n            .views((view) => view.defaults.key == \"tab\")\n            .forEach((tab, tabIndex) => {\n               // tab views\n               tab.views().forEach((tabView, tabViewIndex) => {\n                  // tab items will be below sub-page items\n                  const tIndex = subPages.length + tabIndex + tabViewIndex;\n                  addPage(tabView, tIndex, page.id, \"tab\");\n               });\n            });\n      };\n      this.AB.applicationByID(this.appId)\n         .pages()\n         .forEach((p, index) => {\n            addPage(p, index, null, \"page\");\n         });\n\n      return tree;\n   }\n}\n\nexport default new PortalAccessLevelManager();\n","import ClassUI from \"./ClassUI.js\";\n\nclass PortalTranslationTool extends ClassUI {\n   constructor() {\n      super();\n      this.containerDomID = \"domID\";\n   }\n\n   ui() {\n      const translationToolBody = {\n         view: \"scrollview\",\n         css: \"lightgray ab_amp\",\n         body: {\n            rows: [\n               {\n                  view: \"accordion\",\n                  id: `qtt_accordion_${this.containerDomID}`,\n                  roles: [],\n                  hidden: true,\n                  collapsed: true,\n                  css: \"webix_dark\",\n                  rows: [],\n               },\n               {\n                  id: `qtt_accordion_noSelection_${this.containerDomID}`,\n                  rows: [{}],\n               },\n            ],\n         },\n      };\n\n      return {\n         view: \"window\",\n         css: \"qttWindow\",\n         id: `quickTranslationTool_${this.containerDomID}`,\n         position: function (state) {\n            state.left = state.maxWidth - 400; // fixed values\n            state.top = 0;\n            state.width = 400; // relative values\n            state.height = state.maxHeight;\n         },\n         on: {\n            onShow: () => {\n               // collapse all the accordion items but the top one\n               var index = 0;\n               $$(`qtt_accordion_${this.containerDomID}`)\n                  .getChildViews()\n                  .forEach((a) => {\n                     if (index == 0) {\n                        $$(a).expand();\n                     } else {\n                        $$(a).collapse();\n                     }\n                     index++;\n                     $$(`qtt_accordion_${this.containerDomID}`).show();\n                     $$(\n                        `qtt_accordion_noSelection_${this.containerDomID}`\n                     ).hide();\n                  });\n            },\n         },\n         head: {\n            rows: [\n               {\n                  view: \"toolbar\",\n                  css: \"webix_dark\",\n                  cols: [\n                     {\n                        width: 15,\n                     },\n                     {\n                        view: \"label\",\n                        label: \"Translation Tool\",\n                        autowidth: true,\n                     },\n                     {},\n                     {\n                        view: \"button\",\n                        width: 38,\n                        css: \"webix_transparent\",\n                        icon: \"fa fa-cog\",\n                        type: \"iconTop\",\n                        click: function () {\n                           if ($$(\"translationSettings\").config.hidden) {\n                              $$(\"translationSettings\").show();\n                           } else {\n                              $$(\"translationSettings\").hide();\n                           }\n                        },\n                     },\n                     {\n                        view: \"button\",\n                        width: 35,\n                        css: \"webix_transparent\",\n                        type: \"icon\",\n                        icon: \"nomargin fa fa-times\",\n                        click: () => {\n                           $$(\n                              `quickTranslationTool_${this.containerDomID}`\n                           ).hide();\n                        },\n                     },\n                  ],\n               },\n               {\n                  view: \"toolbar\",\n                  id: \"translationSettings\",\n                  hidden: true,\n                  css: \"webix_dark\",\n                  rows: [\n                     {\n                        id: `qtt_accordion_${this.containerDomID}_translateTo`,\n                        view: \"select\",\n                        labelWidth: 120,\n                        label: \"Translate to:\",\n                        labelAlign: \"right\",\n                        options: [],\n                        on: {\n                           onChange: (newVal, oldVal) => {\n                              if (newVal != oldVal) {\n                                 this.buildTranslationAccordion(\n                                    this.application.objectsIncluded(),\n                                    this.application.pages(),\n                                    this.application.hintsIncluded()\n                                 );\n                              }\n                           },\n                        },\n                     },\n                     {\n                        id: `qtt_accordion_${this.containerDomID}_translateHint`,\n                        view: \"select\",\n                        labelWidth: 120,\n                        label: \"Hint language:\",\n                        bottomLabel: \"*Hover over label to display hint\",\n                        labelAlign: \"right\",\n                        options: [],\n                        on: {\n                           onChange: (newVal, oldVal) => {\n                              if (newVal != oldVal) {\n                                 this.buildTranslationAccordion(\n                                    this.application.objectsIncluded(),\n                                    this.application.pages(),\n                                    this.application.hintsIncluded()\n                                 );\n                              }\n                           },\n                        },\n                     },\n                  ],\n               },\n            ],\n         },\n         body: translationToolBody,\n      };\n   }\n\n   init(portal) {\n      this.AB = portal.AB;\n      this.portal = portal;\n      this.appId = portal.AppState.lastSelectedApp;\n      this.application = this.AB.applicationByID(this.appId);\n\n      const languageCode = this.AB.Config.userConfig().languageCode;\n\n      let languageList = [];\n\n      try {\n         this.AB.Network.get({\n            // The object \"SITE_LANGUAGE\"\n            url: \"/app_builder/model/d84cd351-d96c-490f-9afb-2a0b880ca0ec\",\n         }).then((list) => {\n            list.data.forEach((item) => {\n               languageList.push({\n                  id: item.language_code,\n                  value: item.language_label,\n               });\n            });\n            $$(`qtt_accordion_${this.containerDomID}_translateTo`).define({\n               options: languageList,\n               value: languageCode,\n            });\n            $$(`qtt_accordion_${this.containerDomID}_translateTo`).refresh();\n            $$(\n               `qtt_accordion_${this.containerDomID}` + \"_translateHint\"\n            ).define({\n               options: languageList,\n               value: languageList[0].id,\n            });\n            $$(\n               `qtt_accordion_${this.containerDomID}` + \"_translateHint\"\n            ).refresh();\n            this.buildTranslationAccordion(\n               this.application.objectsIncluded(),\n               this.application.pages(),\n               this.application.hintsIncluded()\n            );\n         });\n\n         webix.ready(function () {\n            webix.protoUI(\n               {\n                  name: \"edittree\",\n               },\n               webix.EditAbility,\n               webix.ui.tree\n            );\n         });\n\n         webix.ui(this.ui());\n      } catch (error) {\n         console.error(error);\n      }\n   }\n\n   show() {\n      $$(`quickTranslationTool_${this.containerDomID}`).show();\n   }\n\n   hide() {\n      $$(`quickTranslationTool_${this.containerDomID}`).hide();\n   }\n\n   showPage(pageId) {\n      let page = this.application.views((v) => {\n         return v.id == pageId;\n      })[0];\n\n      this.portal.showPage(page);\n   }\n\n   /*\n    * helper to get the current apps views\n    */\n   views(f) {\n      return this.AB.applicationByID(this.appId).views(f);\n   }\n\n   tutorials(f) {\n      return this.AB.applicationByID(this.appId).hints(f);\n   }\n\n   buildTranslationAccordion(objects, views, tutorials) {\n      $$(`qtt_accordion_${this.containerDomID}`).removeView(\n         `qtt_accordionitem_${this.containerDomID}_objects`\n      );\n      $$(`qtt_accordion_${this.containerDomID}`).removeView(\n         `qtt_accordionitem_${this.containerDomID}_views`\n      );\n      $$(`qtt_accordion_${this.containerDomID}`).removeView(\n         `qtt_accordionitem_${this.containerDomID}_tutorials`\n      );\n\n      var toggleParent = (element) => {\n         if (!element.parent) return false;\n         var parentElem = element.parent;\n         if (!parentElem.parent) return false;\n         parentElem.parent.emit(\"changeTab\", parentElem.id);\n         toggleParent(parentElem.parent);\n      };\n\n      var objectTree = [\n         {\n            id: `qtt_object_progress${this.containerDomID}`,\n            height: 7,\n         },\n         {\n            id: `linetree_${this.containerDomID}_objects`,\n            view: \"edittree\",\n            type: \"lineTree\",\n            editable: true,\n            tooltip: \"#hint#\",\n            // role: role,\n            editor: \"text\",\n            editValue: \"value\",\n            template: (obj, common) => {\n               let language = $$(\n                  `qtt_accordion_${this.containerDomID}_translateTo`\n               ).getValue();\n               var color = \"gray\";\n               if (obj.value.indexOf(`[${language}]`) > -1) {\n                  color = \"#ff5c4c\";\n               }\n               if (!obj.icon) {\n                  obj.icon = \"minus\";\n               }\n               var icon = `<span class=\"fa-stack\" style=\"margin: 0 5px 0 4px;\">\n                                             <i style=\"color: ${color};\" class=\"fa fa-circle fa-stack-2x\"></i>\n                                             <i class=\"fa fa-${obj.icon} fa-stack-1x fa-inverse\"></i>\n                                          </span>`;\n               return (\n                  `<span>` +\n                  icon +\n                  common.icon(obj, common) +\n                  `<span>${obj.value}</span>`\n               );\n            },\n            data: [],\n            on: {\n               onAfterLoad: (id) => {\n                  if (\n                     !$$(`qtt_object_progress${this.containerDomID}`)\n                        .showProgress\n                  ) {\n                     webix.extend(\n                        $$(`qtt_object_progress${this.containerDomID}`),\n                        webix.ProgressBar\n                     );\n                  }\n                  $$(`linetree_${this.containerDomID}_objects`).parse(\n                     this.getTranslationToolObjectsTree(\n                        objects,\n                        this.containerDomID\n                     )\n                  );\n                  $$(`linetree_${this.containerDomID}_objects`).openAll();\n               },\n               onAfterEditStop: (state, editor, ignoreUpdate) => {\n                  if (state.old == state.value) return false;\n                  let language = $$(\n                     `qtt_accordion_${this.containerDomID}_translateTo`\n                  ).getValue();\n                  let branch = $$(\n                     `linetree_${this.containerDomID}_objects`\n                  ).data.getItem(editor.id);\n                  let propName = branch.field;\n                  let objectId = branch.objectId ? branch.objectId : branch.id;\n                  let fieldId = branch.fieldId ? branch.fieldId : \"\";\n                  let obj = this.AB.objectByID(objectId);\n                  if (fieldId) {\n                     let field = obj.fields((item) => {\n                        return item.id == fieldId;\n                     })[0];\n                     if (branch.type == \"option\") {\n                        field.settings.options.forEach((option) => {\n                           if (option.id == branch.id) {\n                              if (obj.languageDefault() == language) {\n                                 hasLang = true;\n                                 option[propName] = state.value;\n                              } else {\n                                 option.translations.forEach((t) => {\n                                    if (t.language_code == language) {\n                                       hasLang = true;\n                                       t[propName] = state.value;\n                                    }\n                                 });\n                              }\n                              if (!hasLang) {\n                                 var trans = {};\n                                 trans.language_code = language;\n                                 trans[propName] = state.value;\n                                 option.translations.push(trans);\n                              }\n                              field.save();\n                           }\n                        });\n                     } else {\n                        var hasLang = false;\n                        if (obj.languageDefault() == language) {\n                           hasLang = true;\n                           field[propName] = state.value;\n                        } else {\n                           field.translations.forEach((t) => {\n                              if (t.language_code == language) {\n                                 hasLang = true;\n                                 t[propName] = state.value;\n                              }\n                           });\n                        }\n                        if (!hasLang) {\n                           var trans = {};\n                           trans.language_code = language;\n                           trans[propName] = state.value;\n                           field.translations.push(trans);\n                        }\n                        field.save();\n                     }\n                  } else {\n                     let hasLang = false;\n                     if (obj.languageDefault() == language) {\n                        hasLang = true;\n                        obj[propName] = state.value;\n                     } else {\n                        obj.translations.forEach((t) => {\n                           if (t.language_code == language) {\n                              hasLang = true;\n                              t[propName] = state.value;\n                           }\n                        });\n                     }\n                     if (!hasLang) {\n                        let trans = {};\n                        trans.language_code = language;\n                        trans[propName] = state.value;\n                        obj.translations.push(trans);\n                     }\n                     obj.save();\n                  }\n\n                  let progressBar = $$(\n                     `qtt_object_progress${this.containerDomID}`\n                  );\n                  let total = progressBar.config.total;\n                  let completed = progressBar.config.completed;\n\n                  if (\n                     state.old.indexOf(`[${language}]`) == -1 &&\n                     state.value.indexOf(`[${language}]`) > -1\n                  ) {\n                     completed--;\n                  } else if (\n                     state.old.indexOf(`[${language}]`) > -1 &&\n                     state.value.indexOf(`[${language}]`) > -1\n                  ) {\n                     // no change to completed count\n                  } else {\n                     completed++;\n                  }\n                  let position = completed / total + 0.00001;\n                  progressBar.define({\n                     total: total,\n                     completed: completed,\n                  });\n                  progressBar.showProgress({\n                     type: \"top\",\n                     position: position,\n                  });\n               },\n            },\n         },\n      ];\n\n      var viewTree = [\n         {\n            id: `qtt_view_progress${this.containerDomID}`,\n            height: 7,\n         },\n         {\n            id: `linetree_${this.containerDomID}_views`,\n            view: \"edittree\",\n            type: \"lineTree\",\n            editable: true,\n            tooltip: \"#hint#\",\n            // role: role,\n            editor: \"text\",\n            editValue: \"value\",\n            template: (obj, common) => {\n               let language = $$(\n                  `qtt_accordion_${this.containerDomID}_translateTo`\n               ).getValue();\n               var color = \"gray\";\n               if (obj.value.indexOf(`[${language}]`) > -1) {\n                  color = \"#ff5c4c\";\n               }\n               if (!obj.icon) {\n                  obj.icon = \"minus\";\n               }\n               var externalLink = \"\";\n               if ([\"button\", \"label\", \"menu\"].indexOf(obj.type) == -1) {\n                  externalLink = `<i style=\"float:right; color: lightgray\" class=\"externalLink fa fa-external-link\"></i>`;\n               }\n               var icon = `<span class=\"fa-stack\" style=\"margin: 0 5px 0 4px;\">\n                                             <i style=\"color: ${color};\" class=\"fa fa-circle fa-stack-2x\"></i>\n                                             <i class=\"fa fa-${obj.icon} fa-stack-1x fa-inverse\"></i>\n                                          </span>`;\n               return (\n                  `<span>` +\n                  icon +\n                  common.icon(obj, common) +\n                  `<span>${obj.value}</span>` +\n                  externalLink\n               );\n            },\n            data: [],\n            onClick: {\n               externalLink: (event, branch, target) => {\n                  var item = $$(\n                     `linetree_${this.containerDomID}_views`\n                  ).getItem(branch);\n\n                  this.showPage(item.pageId || item.viewId);\n\n                  if (item.type == \"tab\") {\n                     var tabView = this.application.views(\n                        (v) => v.id == item.id\n                     )[0];\n                     if (!tabView) return false;\n\n                     var tab = tabView.parent;\n                     if (!tab) return false;\n\n                     toggleParent(tab);\n                     if (!$$(tabView.id) || !$$(tabView.id).isVisible()) {\n                        var showIt = setInterval(function () {\n                           if ($$(tabView.id) && $$(tabView.id).isVisible()) {\n                              clearInterval(showIt);\n                           }\n                           tab.emit(\"changeTab\", tabView.id);\n                        }, 200);\n                     }\n                  } else if (item.type == \"page\") {\n                     var pageView = this.application.views(\n                        (v) => v.id == item.id\n                     )[0];\n                     if (!pageView) return false;\n                     pageView.emit(\"changePage\", pageView.id);\n                     // this.showPage(item.pageId);\n                  }\n\n                  return false;\n               },\n            },\n            on: {\n               onAfterLoad: (id) => {\n                  if (\n                     !$$(`qtt_view_progress${this.containerDomID}`).showProgress\n                  ) {\n                     webix.extend(\n                        $$(`qtt_view_progress${this.containerDomID}`),\n                        webix.ProgressBar\n                     );\n                  }\n                  $$(`linetree_${this.containerDomID}_views`).parse(\n                     this.getTranslationToolViewsTree(\n                        views,\n                        this.containerDomID\n                     )\n                  );\n                  $$(`linetree_${this.containerDomID}_views`).openAll();\n               },\n               onAfterEditStop: (state, editor, ignoreUpdate) => {\n                  if (state.old == state.value) return false;\n                  let language = $$(\n                     `qtt_accordion_${this.containerDomID}_translateTo`\n                  ).getValue();\n                  let branch = $$(\n                     `linetree_${this.containerDomID}_views`\n                  ).data.getItem(editor.id);\n                  let propName = branch.field;\n                  if (branch.type == \"menu\") {\n                     let view = this.application.views((view) => {\n                        return view.id == branch.viewId;\n                     })[0];\n                     view.settings.order.forEach((button) => {\n                        if (button.pageId == branch.buttonId) {\n                           let hasLang = false;\n                           button.translations.forEach((t) => {\n                              if (t.language_code == language) {\n                                 hasLang = true;\n                                 t[propName] = state.value;\n                              }\n                           });\n                           if (!hasLang) {\n                              let trans = {};\n                              trans.language_code = language;\n                              trans[propName] = state.value;\n                              button.translations.push(trans);\n                           }\n                           view.save();\n                        }\n                     });\n                  } else if (branch.type == \"button\") {\n                     let view = this.application.views((view) => {\n                        return view.id == branch.viewId;\n                     })[0];\n                     var hasLang = false;\n\n                     if (view.languageDefault() == language) {\n                        hasLang = true;\n                        view.settings[propName] = state.value;\n                     } else {\n                        view.settings.translations.forEach((t) => {\n                           if (t.language_code == language) {\n                              hasLang = true;\n                              t[propName] = state.value;\n                           }\n                        });\n                     }\n                     if (!hasLang) {\n                        var trans = {};\n                        trans.language_code = language;\n                        trans[propName] = state.value;\n                        view.settings.translations.push(trans);\n                     }\n                     view.save();\n                  } else {\n                     let view = this.application.views((view) => {\n                        return view.id == branch.id;\n                     })[0];\n                     let hasLang = false;\n                     if (view.languageDefault() == language) {\n                        hasLang = true;\n                        view[propName] = state.value;\n                     } else {\n                        view.translations.forEach((t) => {\n                           if (t.language_code == language) {\n                              hasLang = true;\n                              t[propName] = state.value;\n                           }\n                        });\n                     }\n                     if (!hasLang) {\n                        let trans = {};\n                        trans.language_code = language;\n                        trans[propName] = state.value;\n                        view.translations.push(trans);\n                     }\n                     view.save();\n                  }\n                  let progressBar = $$(\n                     `qtt_view_progress${this.containerDomID}`\n                  );\n                  let total = progressBar.config.total;\n                  let completed = progressBar.config.completed;\n                  if (\n                     state.old.indexOf(`[${language}]`) == -1 &&\n                     state.value.indexOf(`[${language}]`) > -1\n                  ) {\n                     completed--;\n                  } else if (\n                     state.old.indexOf(`[${language}]`) > -1 &&\n                     state.value.indexOf(`[${language}]`) > -1\n                  ) {\n                     // no change to completed count\n                  } else {\n                     completed++;\n                  }\n                  let position = completed / total + 0.00001;\n                  progressBar.define({\n                     total: total,\n                     completed: completed,\n                  });\n                  progressBar.showProgress({\n                     type: \"top\",\n                     position: position,\n                  });\n               },\n            },\n         },\n      ];\n\n      var tutorialTree = [\n         {\n            id: `qtt_tutorials_progress${this.containerDomID}`,\n            height: 7,\n         },\n         {\n            id: `linetree_${this.containerDomID}_tutorials`,\n            view: \"edittree\",\n            type: \"lineTree\",\n            editable: true,\n            tooltip: \"#hint#\",\n            // role: role,\n            editor: \"text\",\n            editValue: \"value\",\n            template: (obj, common) => {\n               let language = $$(\n                  `qtt_accordion_${this.containerDomID}_translateTo`\n               ).getValue();\n               var color = \"gray\";\n               if (obj.value.indexOf(`[${language}]`) > -1) {\n                  color = \"#ff5c4c\";\n               }\n               if (!obj.icon) {\n                  obj.icon = \"minus\";\n               }\n               var icon = `<span class=\"fa-stack\" style=\"margin: 0 5px 0 4px;\">\n                                             <i style=\"color: ${color};\" class=\"fa fa-circle fa-stack-2x\"></i>\n                                             <i class=\"fa fa-${obj.icon} fa-stack-1x fa-inverse\"></i>\n                                          </span>`;\n               return (\n                  `<span>` +\n                  icon +\n                  common.icon(obj, common) +\n                  `<span>${obj.value}</span>`\n               );\n            },\n            data: [],\n            on: {\n               onAfterLoad: (id) => {\n                  if (\n                     !$$(`qtt_tutorials_progress${this.containerDomID}`)\n                        .showProgress\n                  ) {\n                     webix.extend(\n                        $$(`qtt_tutorials_progress${this.containerDomID}`),\n                        webix.ProgressBar\n                     );\n                  }\n                  $$(`linetree_${this.containerDomID}_tutorials`).parse(\n                     this.getTranslationToolTutorialsTree(\n                        tutorials,\n                        this.containerDomID\n                     )\n                  );\n                  $$(`linetree_${this.containerDomID}_tutorials`).openAll();\n               },\n               onAfterEditStop: (state, editor, ignoreUpdate) => {\n                  /// need to work here next week james\n                  if (state.old == state.value) return false;\n                  let language = $$(\n                     `qtt_accordion_${this.containerDomID}_translateTo`\n                  ).getValue();\n                  let branch = $$(\n                     `linetree_${this.containerDomID}_tutorials`\n                  ).data.getItem(editor.id);\n                  let propName = branch.field;\n                  if (branch.type == \"tutorial\") {\n                     let hint = this.AB.hints((h) => {\n                        return h.id == branch.viewId;\n                     })[0];\n                     let hasLang = false;\n                     if (hint.languageDefault() == language) {\n                        hasLang = true;\n                        hint[propName] = state.value;\n                     } else {\n                        hint.translations.forEach((t) => {\n                           if (t.language_code == language) {\n                              hasLang = true;\n                              t[propName] = state.value;\n                           }\n                        });\n                     }\n                     if (!hasLang) {\n                        let trans = {};\n                        for (const [key, value] of Object.entries(\n                           hint.translations[0]\n                        )) {\n                           trans[key] = `[${language}] ${value}`;\n                        }\n                        trans.language_code = language;\n                        trans[propName] = state.value;\n                        hint.translations.push(trans);\n                     }\n                     hint.save();\n                  } else if (branch.type == \"step\") {\n                     let hint = this.AB.hints((h) => {\n                        return h.id == branch.hintId;\n                     })[0];\n                     let step = hint._steps[branch.viewId];\n                     let hasLang = false;\n                     if (step.languageDefault() == language) {\n                        hasLang = true;\n                        step[propName] = state.value;\n                     } else {\n                        step.translations.forEach((t) => {\n                           if (t.language_code == language) {\n                              hasLang = true;\n                              t[propName] = state.value;\n                           }\n                        });\n                     }\n                     if (!hasLang) {\n                        let trans = {};\n                        for (const [key, value] of Object.entries(\n                           step.translations[0]\n                        )) {\n                           trans[key] = `[${language}] ${value}`;\n                        }\n                        trans.language_code = language;\n                        trans[propName] = state.value;\n                        step.translations.push(trans);\n                     }\n                     step.save();\n                  }\n                  let progressBar = $$(\n                     `qtt_tutorials_progress${this.containerDomID}`\n                  );\n                  let total = progressBar.config.total;\n                  let completed = progressBar.config.completed;\n                  if (\n                     state.old.indexOf(`[${language}]`) == -1 &&\n                     state.value.indexOf(`[${language}]`) > -1\n                  ) {\n                     completed--;\n                  } else if (\n                     state.old.indexOf(`[${language}]`) > -1 &&\n                     state.value.indexOf(`[${language}]`) > -1\n                  ) {\n                     // no change to completed count\n                  } else {\n                     completed++;\n                  }\n                  let position = completed / total + 0.00001;\n                  progressBar.define({\n                     total: total,\n                     completed: completed,\n                  });\n                  progressBar.showProgress({\n                     type: \"top\",\n                     position: position,\n                  });\n               },\n            },\n         },\n      ];\n\n      var objectsAccordionItem = {\n         view: \"accordionitem\",\n         id: `qtt_accordionitem_${this.containerDomID}_objects`,\n         header: \"Data Objects\",\n         collapsed: true,\n         body: {\n            type: \"clean\",\n            rows: objectTree,\n         },\n      };\n\n      var viewsAccordionItem = {\n         view: \"accordionitem\",\n         id: `qtt_accordionitem_${this.containerDomID}_views`,\n         header: \"Interface Items\",\n         collapsed: true,\n         body: {\n            type: \"clean\",\n            rows: viewTree,\n         },\n      };\n\n      var hintsAccordionItem = {\n         view: \"accordionitem\",\n         id: `qtt_accordionitem_${this.containerDomID}_tutorials`,\n         header: \"Tutorials\",\n         collapsed: true,\n         body: {\n            type: \"clean\",\n            rows: tutorialTree,\n         },\n      };\n\n      $$(`qtt_accordion_${this.containerDomID}`).addView(\n         objectsAccordionItem,\n         -1\n      );\n      $$(`qtt_accordion_${this.containerDomID}`).addView(\n         viewsAccordionItem,\n         -1\n      );\n      $$(`qtt_accordion_${this.containerDomID}`).addView(\n         hintsAccordionItem,\n         -1\n      );\n      $$(`qtt_accordion_${this.containerDomID}`).show();\n      $$(`qtt_accordionitem_${this.containerDomID}_views`).collapse();\n      $$(`qtt_accordionitem_${this.containerDomID}_tutorials`).collapse();\n      $$(`qtt_accordion_noSelection_${this.containerDomID}`).hide();\n\n      $$(`linetree_${this.containerDomID}_objects`).openAll();\n      $$(`linetree_${this.containerDomID}_views`).openAll();\n      $$(`linetree_${this.containerDomID}_tutorials`).openAll();\n   }\n\n   getTranslations(translations, domId, field, completed, total) {\n      var missingHint = false;\n      var missingTranslate = false;\n      var translateLang = $$(`qtt_accordion_${domId}_translateTo`).getValue();\n      var value = translations.filter((item) => {\n         return item.language_code == translateLang;\n      })[0];\n      if (!value) {\n         // we didn't find the language so we are defaulting to first language\n         missingTranslate = true;\n         value = translations[0];\n      }\n      var hintLang = $$(`qtt_accordion_${domId}_translateHint`).getValue();\n      var hint = translations.filter((item) => {\n         return item.language_code == hintLang;\n      })[0];\n      if (!hint) {\n         // we didn't find the language so we are defaulting to first language\n         missingHint = true;\n         hint = translations[0];\n      }\n\n      var hintLabel = \"\";\n      var valueLabel = \"\";\n\n      // some items store the text we need translated under \"text\"\n      if (field) {\n         hintLabel = hint[field];\n         valueLabel = value[field];\n      }\n      if (!hintLabel) {\n         hintLabel = hint.label;\n      }\n      if (!valueLabel) {\n         valueLabel = value.label;\n      }\n\n      var hintPrefix = \"\";\n      if (missingHint) {\n         hintPrefix = `[${hintLang}] `;\n      }\n      var translatePrefix = \"\";\n      if (missingTranslate) {\n         translatePrefix = `[${translateLang}] `;\n      }\n      if (\n         (valueLabel || \"\").indexOf(`[${translateLang}]`) == -1 &&\n         !missingTranslate\n      ) {\n         completed++;\n      }\n      total++;\n      return {\n         hint: hintPrefix + hintLabel,\n         value: translatePrefix + valueLabel,\n         completed: completed,\n         total: total,\n      };\n   }\n\n   getTranslationToolViewsTree(views, domId) {\n      var completed = 0;\n      var total = 0;\n      // this so it looks right/indented in a tree view:\n      var tree = new webix.TreeCollection();\n\n      /**\n       * @method addPage\n       *\n       * @param {ABView} page\n       * @param {integer} index\n       * @param {uuid} parentId\n       */\n      var addPage = (page, parentId, type, field = \"label\", viewId) => {\n         var translations = page.translations;\n         var pageId = page.id;\n         if (type == \"button\") {\n            translations = page.settings.translations;\n            pageId = `${page.id}_${field}`;\n         }\n         var labels = this.getTranslations(\n            translations,\n            domId,\n            field,\n            completed,\n            total\n         );\n         completed = labels.completed;\n         total = labels.total;\n         var icon = page.tabicon ? page.tabicon : page.icon;\n\n         // add to tree collection\n         var branch = {\n            id: pageId,\n            value: labels.value,\n            hint: labels.hint,\n            field: field,\n            viewId: viewId,\n            translations: page.translations,\n            pageId: parentId,\n            buttonId: page.pageId,\n            type: type,\n            icon: icon,\n         };\n         tree.add(branch, null, parentId);\n\n         // stop at detail views\n         // if (page.defaults.key == \"detail\") {\n         //    return;\n         // }\n\n         var subPages = page.pages ? page.pages() : [];\n         subPages.forEach((childPage, childIndex) => {\n            addPage(childPage, page.id, \"page\");\n         });\n\n         // stop if there are no views to parse\n         if (!page.views) return;\n         // add labels\n         page\n            .views((v) => v.defaults.key == \"label\")\n            .forEach((label, labelIndex) => {\n               // label views\n               // label.icon = \"th-list\";\n               addPage(label, page.id, \"label\", \"text\", label.id);\n            });\n         // add tabs\n         page\n            .views((v) => v.defaults.key == \"tab\")\n            .forEach((tab, tabIndex) => {\n               // tab views\n               tab.views().forEach((tabView, tabViewIndex) => {\n                  // tab items will be below sub-page items\n                  // tabView.icon = \"th-list\";\n                  addPage(tabView, page.id, \"tab\", \"label\", tab.id);\n               });\n            });\n         // add menus\n         page\n            .views((v) => v.defaults.key == \"menu\")\n            .forEach((menu, menuIndex) => {\n               // menu buttons\n               if (!menu.settings.order) return;\n               menu.settings.order.forEach((menuItem, menuItemIndex) => {\n                  // tab items will be below sub-page items\n                  // menuItem.icon = \"link\";\n                  addPage(menuItem, page.id, \"menu\", \"aliasname\", menu.id);\n               });\n            });\n         // add form buttons\n         page\n            .views((v) => v.defaults.key == \"form\")\n            .forEach((form, formIndex) => {\n               // form inputs\n               form.views().forEach((formInput, formInputIndex) => {\n                  // we only need buttons\n                  if (formInput.key == \"button\") {\n                     for (const property in formInput.settings\n                        .translations[0]) {\n                        if (property != \"language_code\") {\n                           addPage(\n                              formInput,\n                              page.id,\n                              \"button\",\n                              property,\n                              formInput.id\n                           );\n                        }\n                     }\n                  }\n               });\n            });\n         // add chart labels\n         page\n            .views((v) => v.defaults.key == \"chart\")\n            .forEach((chart, chartIndex) => {\n               // chart views\n               chart.views().forEach((view, viewIndex) => {\n                  // we only need buttons\n                  if (view.key == \"label\") {\n                     addPage(view, page.id, \"label\", \"text\", view.id);\n                  }\n               });\n            });\n      };\n      views.forEach((p, index) => {\n         addPage(p, null, \"page\", \"label\", p.id);\n      });\n\n      // there is a webix bug that will not allow you to se the value of a progress bar to 0\n      let progressBar = $$(`qtt_view_progress${domId}`);\n      let position = completed / total + 0.0001;\n      progressBar.showProgress({\n         type: \"top\",\n         position: position,\n      });\n      progressBar.define({\n         total: total,\n         completed: completed,\n      });\n\n      return tree;\n   }\n\n   getTranslationToolObjectsTree(objects, domId) {\n      var completed = 0;\n      var total = 0;\n      // this so it looks right/indented in a tree view:\n      var tree = new webix.TreeCollection();\n\n      /**\n       * @method addBranch\n       *\n       * @param {ABView} page\n       * @param {uuid} parentId\n       * @param {string} type\n       */\n      var addBranch = (\n         object,\n         parentId,\n         type,\n         field = \"label\",\n         fieldId,\n         objectId\n      ) => {\n         var translations = object.translations;\n         // we were missing translationson the Roles object\n         if (!translations) return;\n         var labels = this.getTranslations(\n            translations,\n            domId,\n            field,\n            completed,\n            total\n         );\n         completed = labels.completed;\n         total = labels.total;\n\n         // add to tree collection\n         var branch = {\n            id: object.id,\n            value: labels.value,\n            hint: labels.hint,\n            translations: object.translations,\n            pageId: parentId,\n            objectId: objectId,\n            type: type,\n            field: field,\n            fieldId: fieldId,\n            icon:\n               type == \"object\" ? \"database\" : object.icon ? object.icon : \"\",\n         };\n         tree.add(branch, null, parentId);\n\n         var fields = object.fields ? object.fields() : [];\n         fields.forEach((field, fieldIndex) => {\n            addBranch(field, object.id, \"field\", \"label\", field.id, object.id);\n         });\n\n         // add options\n         if (\n            object.settings &&\n            object.settings.options &&\n            object.settings.options.length\n         ) {\n            object.settings.options.forEach((option, optionIndex) => {\n               addBranch(\n                  option,\n                  object.id,\n                  \"option\",\n                  \"text\",\n                  fieldId,\n                  parentId\n               );\n            });\n         }\n      };\n      objects.forEach((p, index) => {\n         addBranch(p, null, \"object\");\n      });\n\n      // there is a webix bug that will not allow you to se the value of a progress bar to 0\n      let progressBar = $$(`qtt_object_progress${domId}`);\n      let position = completed / total + 0.0001;\n      progressBar.showProgress({\n         type: \"top\",\n         position: position,\n      });\n      progressBar.define({\n         total: total,\n         completed: completed,\n      });\n\n      return tree;\n   }\n\n   getTranslationToolTutorialsTree(tutorials, domId) {\n      var completed = 0;\n      var total = 0;\n      // this so it looks right/indented in a tree view:\n      var tree = new webix.TreeCollection();\n\n      /**\n       * @method addBranch\n       *\n       * @param {ABView} page\n       * @param {uuid} parentId\n       * @param {string} type\n       */\n      var addBranch = (\n         object,\n         parentId,\n         type,\n         field = [\"label\"],\n         hintId = null\n      ) => {\n         var translations = object.translations;\n         // we were missing translationson the Roles object\n         if (!translations) return;\n         let lastField = \"\";\n         let firstField = \"\";\n         field.forEach((f) => {\n            if (firstField == \"\") firstField = f;\n            lastField = f;\n            var labels = this.getTranslations(\n               translations,\n               domId,\n               f,\n               completed,\n               total\n            );\n            completed = labels.completed;\n            total = labels.total;\n\n            // add to tree collection\n            var branch = {\n               id: object.id + f,\n               viewId: object.id,\n               value: labels.value,\n               hint: labels.hint,\n               translations: object.translations,\n               field: f,\n               type: type,\n               hintId: hintId,\n               icon:\n                  type == \"tutorial\"\n                     ? \"info-circle\"\n                     : object.icon\n                     ? object.icon\n                     : \"minus-circle\",\n            };\n            tree.add(branch, null, parentId);\n            parentId = object.id + firstField;\n         });\n\n         var steps = object.stepIDs || [];\n         steps.forEach((step) => {\n            addBranch(\n               object._steps[step],\n               parentId,\n               \"step\",\n               [\"name\", \"text\"],\n               object.id\n            );\n         });\n      };\n      tutorials.forEach((p, index) => {\n         addBranch(p, null, \"tutorial\", [\"name\", \"description\"]);\n      });\n\n      // there is a webix bug that will not allow you to se the value of a progress bar to 0\n      let progressBar = $$(`qtt_tutorials_progress${domId}`);\n      let position = completed / total + 0.0001;\n      progressBar.showProgress({\n         type: \"top\",\n         position: position,\n      });\n      progressBar.define({\n         total: total,\n         completed: completed,\n      });\n\n      return tree;\n   }\n}\n\nexport default new PortalTranslationTool();\n","import ClassUI from \"./ClassUI.js\";\n\nlet L = (...params) => AB.Multilingual.label(...params);\n\nclass PortalTutorialManager extends ClassUI {\n   constructor() {\n      super();\n   }\n\n   ui(appId) {\n      // this is the modal window that opens when you click a tutorial to edit\n      const tutorialStepsManager = (id) => {\n         return {\n            view: \"window\",\n            id: \"stepManager\" + id,\n            head: {\n               view: \"toolbar\",\n               css: \"webix_dark\",\n               cols: [\n                  {\n                     width: 15,\n                  },\n                  {\n                     view: \"label\",\n                     label: \"Tutorial Steps Manager\",\n                     autowidth: true,\n                  },\n                  {},\n                  {\n                     view: \"button\",\n                     type: \"icon\",\n                     icon: \"fa fa-plus\",\n                     label: \"Step\",\n                     autowidth: true,\n                     css: \"webix_primary\",\n                     click: async () => {\n                        // create ABStep\n                        let step = await this.createStep(id);\n                        // save it to get an id to store on the ABHint\n                        await step.save();\n\n                        // get the current ABHint\n                        let hint = this.AB.hints((h) => {\n                           return h.id == id;\n                        })[0];\n                        // store the new ABStep id in the current ABHint\n                        if (hint?.stepIDs && Array.isArray(hint.stepIDs)) {\n                           hint.stepIDs.push(step.id);\n                        } else {\n                           hint.stepIDs = [step.id];\n                        }\n                        // store the ABStep in the ABHint (not saved in definitions)\n                        hint._steps[step.id] = step;\n                        // add the new step UI to the interface\n                        $$(\"hint_steps_\" + hint.id).addView(\n                           this.stepUI(step, hint)\n                        );\n                     },\n                  },\n                  {\n                     view: \"button\",\n                     width: 35,\n                     css: \"webix_transparent\",\n                     type: \"icon\",\n                     icon: \"nomargin fa fa-times\",\n                     click: () => {\n                        $$(\"stepManager\" + id).close();\n                        this.show();\n                     },\n                  },\n               ],\n            },\n            width: 800,\n            height: 500,\n            move: true,\n            position: \"center\",\n            resize: true,\n            body: {\n               rows: [\n                  {\n                     view: \"scrollview\",\n                     body: {\n                        rows: [\n                           tutorialSettings(id),\n                           {\n                              id: \"hint_steps_\" + id,\n                              rows: [],\n                           },\n                        ],\n                     },\n                  },\n                  save(id),\n               ],\n            },\n         };\n      };\n\n      // ui that contains the list of current ABHints on this application\n      const tutorialManagerBody = {\n         view: \"scrollview\",\n         css: \"lightgray ab_tutorial\",\n         body: {\n            rows: [\n               {\n                  view: \"list\",\n                  id: \"tutorial_list\",\n                  template: `<div class=\"deleteHint\">\n                                 <i class=\"fa fa-times\"></i>\n                              </div>\n                              <div class=\"active#settings.active# abTutorial\">\n                                 <h1>#name#</h1>\n                                 <p>#description#</p>\n                              </div>`,\n                  data: this._hints,\n                  hidden: this._hints.length == 0, // hide if we do not have any hints yet\n                  type: {\n                     css: \"hintItem\",\n                     height: \"auto\",\n                  },\n                  onClick: {\n                     deleteHint: (ev, id) => {\n                        // Confirm user wants to delete the hint\n                        webix\n                           .confirm({\n                              title: L(\"Delete Tutorial\"),\n                              text: L(\n                                 \"Are you sure you want to delete this tutorial?\"\n                              ),\n                              type: \"confirm-error\",\n                           })\n                           .then((result) => {\n                              // get the hint that we want to delete\n                              let hint = this.AB.hintID(id);\n                              // delete the hint (steps will also be deleted)\n                              hint.destroy(this.application);\n                              // remove the hint from the ui\n                              $$(\"tutorial_list\").remove(id);\n                              // check if we have any hints if not switch views\n                              if ($$(\"tutorial_list\").count() == 0) {\n                                 $$(\"tutorial_list\").hide();\n                                 $$(\"tutorial_list_noSelection\").show();\n                              }\n                              return false; // blocks the default click behavior\n                           })\n                           .fail(() => {\n                              // webix.message(\"Cancel\");\n                           });\n                        return false;\n                     },\n                     hintItem: (ev, id) => {\n                        // open the editor for the hint\n                        webix.ui(tutorialStepsManager(id)).show();\n                        // insert the steps into the manager to edit\n                        this.steps(id);\n                        this.hide();\n                     },\n                  },\n               },\n               {\n                  id: \"tutorial_list_noSelection\",\n                  hidden: this._hints.length > 0,\n                  rows: [\n                     {},\n                     {\n                        view: \"label\",\n                        align: \"center\",\n                        height: 200,\n                        label: \"<div style='display: block; font-size: 180px; background-color: #666; color: transparent; text-shadow: 0px 1px 1px rgba(255,255,255,0.5); -webkit-background-clip: text; -moz-background-clip: text; background-clip: text;' class='fa fa-info-circle'></div>\",\n                     },\n                     {\n                        view: \"label\",\n                        align: \"center\",\n                        label: \"Add a tutorial to this page.\",\n                     },\n                     {\n                        cols: [\n                           {},\n                           {\n                              view: \"button\",\n                              label: \"Create Tutorial\",\n                              type: \"form\",\n                              css: \"webix_primary\",\n                              autowidth: true,\n                              click: () => {\n                                 // open modal that helps user make a new hint\n                                 webix.ui(newTutorialPopup).show();\n\n                                 // populate the optiosn of the page/tab combo\n                                 $$(\"view_popup_options\").define(\n                                    \"options\",\n                                    this.options\n                                 );\n                                 // attempt to set the values of the combo based off the\n                                 // last visited page would be better if we could look at\n                                 // tabs as well\n                                 $$(\"view_popup_options\").define(\n                                    \"value\",\n                                    this.portal.AppState.lastPages[\n                                       this.portal.AppState.lastSelectedApp\n                                    ]\n                                 );\n                                 $$(\"view_popup_options\").refresh();\n                              },\n                           },\n                           {},\n                        ],\n                     },\n                     {},\n                  ],\n               },\n            ],\n         },\n      };\n\n      // small modal that is displayed when user wants to create a new tutorial/hint\n      const newTutorialPopup = {\n         view: \"popup\",\n         id: \"newTutorialPopup\",\n         position: \"center\",\n         height: 250,\n         width: 350,\n         modal: true,\n         body: {\n            rows: [\n               {\n                  view: \"toolbar\",\n                  id: \"myToolbarABLiveTool\",\n                  css: \"webix_dark\",\n                  cols: [\n                     {\n                        view: \"label\",\n                        label: L(\"Create Tutorial\"),\n                        align: \"center\",\n                     },\n                  ],\n               },\n               {\n                  view: \"form\",\n                  elements: [\n                     {\n                        view: \"combo\",\n                        label: \"\",\n                        id: \"view_popup_options\",\n                        placeholder: L(\"Choose Page or Tab\"),\n                        options: [],\n                     },\n                     {\n                        cols: [\n                           {\n                              view: \"button\",\n                              value: L(\"Cancel\"),\n                              click: () => {\n                                 $$(\"newTutorialPopup\").hide();\n                              },\n                           },\n                           {\n                              view: \"button\",\n                              value: \"Create\",\n                              id: \"view_popup_options_add\",\n                              css: \"webix_primary\",\n                              click: () => {\n                                 let view = $$(\"view_popup_options\").getValue();\n                                 let text = $$(\"view_popup_options\")\n                                    .getText()\n                                    .trim();\n                                 // take values from selection to build a new hint\n                                 this.createTutorial(view, text);\n                                 $$(\"newTutorialPopup\").hide();\n                              },\n                           },\n                        ],\n                     },\n                  ],\n               },\n            ],\n         },\n      };\n\n      // save the hint and step values and close the manager\n      const save = (id) => {\n         return {\n            cols: [\n               {},\n               {\n                  view: \"button\",\n                  value: L(\"Cancel\"),\n                  width: 100,\n                  click: () => {\n                     $$(\"stepManager\" + id).close();\n                     this.show();\n                  },\n               },\n               {\n                  view: \"button\",\n                  value: L(\"Save\"),\n                  width: 100,\n                  css: \"webix_primary\",\n                  click: async (element, event) => {\n                     // validate form\n                     let valid = $$(\"stepform\" + id).validate();\n                     // get hint we are going to update\n                     let hint = this.AB.hints((h) => {\n                        return h.id == id;\n                     })[0];\n                     // loop through steps to get values and save\n                     hint.stepIDs.forEach((step) => {\n                        if (hint?._steps?.[step]) {\n                           // validate each step to ensure they are ready to save\n                           if (\n                              !$$(\"step_form\" + step).validate({\n                                 disabled: true,\n                              })\n                           ) {\n                              valid = false;\n                           } else {\n                              // set values so we can save later\n                              let values = $$(\"step_form\" + step).getValues();\n                              hint._steps[step].name = values.name;\n                              hint._steps[step].text = values.text;\n                              hint._steps[step].settings.event = values.event;\n                              hint._steps[step].settings.el = values.el;\n                              // hint._steps[step].save();\n                           }\n                        }\n                     });\n                     if (!valid) return false;\n\n                     var values = $$(\"stepform\" + id).getValues();\n                     hint.name = values.name;\n                     hint.description = values.description;\n                     hint.settings.view = values.view;\n                     hint.settings.active = values.active;\n                     // save the steps data next\n                     // hint.stepIDs.forEach((step) => {\n                     //    if (hint?._steps?.[step]) {\n                     //       hint._steps[step].save();\n                     //    }\n                     // });\n                     for (const step of hint.stepIDs) {\n                        if (hint?._steps?.[step]) {\n                           await hint._steps[step].save();\n                        }\n                     }\n                     await hint.save();\n                     $$(\"stepManager\" + id).close();\n                     this.show();\n                  },\n               },\n               {},\n            ],\n         };\n      };\n\n      // ui that is at the top of the tutorial manager for the global tutorial settings\n      const tutorialSettings = (id) => {\n         let currentTutorial = this.AB.hints((h) => {\n            return h.id == id;\n         })[0];\n         let active = currentTutorial?.settings?.active ?? \"1\";\n         return {\n            view: \"form\",\n            id: \"stepform\" + id,\n            borderless: true,\n            cols: [\n               {\n                  id: \"step_window\",\n                  rows: [\n                     {\n                        view: \"text\",\n                        label: L(\"Title\"),\n                        name: \"name\",\n                        validate: webix.rules.isNotEmpty,\n                        invalidMessage: L(\"Title is required\"),\n                        value: currentTutorial.name,\n                     },\n                     {\n                        view: \"textarea\",\n                        label: L(\"Text\"),\n                        labelAlign: \"left\",\n                        height: 100,\n                        name: \"description\",\n                        value: currentTutorial?.description || \"\",\n                     },\n                  ],\n               },\n               {\n                  width: 300,\n                  rows: [\n                     {\n                        cols: [\n                           {\n                              view: \"label\",\n                              label: L(\"Page/Tab\"),\n                              align: \"left\",\n                              width: 100,\n                           },\n                           // {\n                           //    view: \"button\",\n                           //    icon: \"fa fa-crosshairs\",\n                           //    type: \"icon\",\n                           //    label: L(\"select\"),\n                           //    css: \"focusPageTab webix_primary\",\n                           //    currentTutorialID: id,\n                           //    width: 100,\n                           //    click: () => {\n                           //       $$(\"stepManager\" + currentTutorial.id).hide();\n                           //       document.addEventListener(\n                           //          \"click\",\n                           //          this.handlePageTabClick,\n                           //          false\n                           //       );\n                           //       document.hintId = id;\n                           //       webix.ui(this.pageTabWindow(id)).show();\n                           //    },\n                           // },\n                           {\n                              view: \"combo\",\n                              name: \"view\",\n                              value: currentTutorial.settings.view,\n                              options: {\n                                 view: \"suggest\",\n                                 css: \"wider_popup\",\n                                 body: {\n                                    view: \"list\",\n                                    css: \"wider_popup\",\n                                    data: this.options,\n                                    template: \"#value#\",\n                                 },\n                              },\n                           },\n                        ],\n                     },\n\n                     {\n                        view: \"switch\",\n                        label: L(\"Active\"),\n                        labelWidth: 100,\n                        name: \"active\",\n                        value: active,\n                     },\n                  ],\n               },\n            ],\n         };\n      };\n\n      // this is the drawer admin that lists all tutorials\n      return {\n         view: \"window\",\n         css: \"tutorialWindow\",\n         id: \"tutorial_manager\",\n         position: function (state) {\n            state.left = state.maxWidth - 350; // fixed values\n            state.top = 0;\n            state.width = 350; // relative values\n            state.height = state.maxHeight;\n         },\n         on: {\n            onShow: () => {},\n         },\n         head: {\n            view: \"toolbar\",\n            css: \"webix_dark\",\n            cols: [\n               {\n                  width: 15,\n               },\n               {\n                  view: \"label\",\n                  label: \"Tutorial Manager\",\n                  autowidth: true,\n               },\n               {},\n               {\n                  view: \"button\",\n                  type: \"icon\",\n                  icon: \"fa fa-plus\",\n                  label: \"Tutorial\",\n                  width: 95,\n                  css: \"webix_primary\",\n                  click: () => {\n                     webix.ui(newTutorialPopup).show();\n\n                     $$(\"view_popup_options\").define(\"options\", this.options);\n                     $$(\"view_popup_options\").define(\n                        \"value\",\n                        this.portal.AppState.lastPages[\n                           this.portal.AppState.lastSelectedApp\n                        ]\n                     );\n                     $$(\"view_popup_options\").refresh();\n                  },\n               },\n               {\n                  view: \"button\",\n                  width: 35,\n                  css: \"webix_transparent\",\n                  type: \"icon\",\n                  icon: \"nomargin fa fa-times\",\n                  click: () => {\n                     this.hide();\n                  },\n               },\n            ],\n         },\n         body: tutorialManagerBody,\n      };\n   }\n\n   init(portal) {\n      this.AB = portal.AB;\n      this.portal = portal;\n      this.appId = portal.AppState.lastSelectedApp;\n\n      this.application = this.AB.applicationByID(this.appId);\n      const pages = this.application.pages();\n      this.options = this.getViewOptions(pages);\n      // only return tutorials that are on current application\n      this._hints = this.AB.hints((hint) => {\n         if (this.application.hintIDs.indexOf(hint.id) > -1) {\n            return true;\n         } else {\n            return false;\n         }\n      });\n      webix.ui(this.ui());\n   }\n\n   show() {\n      // this gets the latest hints and updates them to local list.\n      $$(\"tutorial_manager\").show();\n      this._hints = this.AB.hints((hint) => {\n         if (this.application.hintIDs.indexOf(hint.id) > -1) {\n            return true;\n         } else {\n            return false;\n         }\n      });\n      $$(\"tutorial_list\").define(\"data\", this._hints);\n      $$(\"tutorial_list\").refresh();\n   }\n\n   hide() {\n      $$(\"tutorial_manager\").hide();\n   }\n\n   // small modal that gives instructions to user when selecting the page or tab to load this tutorial on\n   pageTabWindow(hintID) {\n      return {\n         view: \"window\",\n         id: \"pageTabWindow\",\n         width: 160,\n         height: 160,\n         move: true,\n         head: {\n            view: \"toolbar\",\n            css: \"webix_dark\",\n            cols: [\n               {},\n               {\n                  view: \"button\",\n                  width: 35,\n                  css: \"webix_transparent\",\n                  type: \"icon\",\n                  icon: \"nomargin fa fa-times\",\n                  click: () => {\n                     $$(\"stepManager\" + hintID).show();\n                     $$(\"pageTabWindow\").hide();\n\n                     document.removeEventListener(\n                        \"contextmenu\",\n                        this.handleRightClick,\n                        false\n                     );\n                  },\n               },\n            ],\n         },\n         position: function (state) {\n            state.left = state.maxWidth - state.width;\n            state.top = state.maxHeight - state.height;\n         },\n         body: {\n            template:\n               \"<div class='highlightWin'>\" +\n               L(\"Click the page or tab that will start this tutorial\") +\n               \"</div>\",\n         },\n      };\n   }\n\n   // small modal that gives instructions to users when they are selecting the highlight element\n   focusWindow(hintID) {\n      return {\n         view: \"window\",\n         id: \"focusWindow\",\n         width: 160,\n         height: 160,\n         move: true,\n         head: {\n            view: \"toolbar\",\n            css: \"webix_dark\",\n            cols: [\n               {},\n               {\n                  view: \"button\",\n                  width: 35,\n                  css: \"webix_transparent\",\n                  type: \"icon\",\n                  icon: \"nomargin fa fa-times\",\n                  click: () => {\n                     $$(\"stepManager\" + hintID).show();\n                     $$(\"focusWindow\").hide();\n\n                     document.removeEventListener(\n                        \"contextmenu\",\n                        this.handleRightClick,\n                        false\n                     );\n                     document.body.classList.remove(\"findDataCy\");\n                  },\n               },\n            ],\n         },\n         position: function (state) {\n            state.left = state.maxWidth - state.width;\n            state.top = state.maxHeight - state.height;\n         },\n         body: {\n            template:\n               \"<div class='highlightWin'>\" +\n               L(\"Right click the element you want to highlight.\") +\n               \"</div>\",\n         },\n      };\n   }\n\n   updateStepsUI(id) {\n      const views = $$(\"hint_steps_\" + id).getChildViews();\n      let viewsToRemove = [];\n      views.forEach((view) => {\n         viewsToRemove.push(view.config.id);\n      });\n      viewsToRemove.forEach((view) => {\n         $$(\"hint_steps_\" + id).removeView(view);\n      });\n      this.steps(id);\n   }\n\n   addHighlightClass(event) {\n      let item = $$(event.currentTarget);\n      let formVals = $$(\"step_form\" + item.config.stepId).getValues();\n      document.querySelector(formVals?.el).classList.add(\"highlightMe\");\n   }\n   removeHighlightClass(event) {\n      let item = $$(event.currentTarget);\n      let formVals = $$(\"step_form\" + item.config.stepId).getValues();\n      document.querySelector(formVals?.el).classList.remove(\"highlightMe\");\n   }\n\n   // build a list of steps that are included in this hint\n   steps(id) {\n      let hint = this.AB.hints((h) => {\n         return h.id == id;\n      })[0];\n      // if we do not have steps\n      if (!hint?.stepIDs?.length) {\n         let addStepBelow = {\n            id: \"addStepBelow\",\n            padding: 20,\n            rows: [\n               {\n                  css: \"ab-component-form-rules\",\n                  rows: [\n                     {},\n                     {\n                        view: \"label\",\n                        align: \"center\",\n                        height: 80,\n                        label: \"<div style='display: block; font-size: 80px; background-color: #666; color: transparent; text-shadow: 0px 1px 1px rgba(255,255,255,0.5); -webkit-background-clip: text; -moz-background-clip: text; background-clip: text;' class='fa fa-info-circle'></div>\",\n                     },\n                     {\n                        view: \"label\",\n                        align: \"center\",\n                        label: L(\"Add a step to this tutorial.\"),\n                     },\n                     {\n                        cols: [\n                           {},\n                           {\n                              view: \"button\",\n                              type: \"icon\",\n                              icon: \"fa fa-plus\",\n                              label: L(\"Step\"),\n                              autowidth: true,\n                              css: \"webix_primary\",\n                              click: async () => {\n                                 // create an ABStep\n                                 let step = await this.createStep(id);\n                                 // save it to definitions to get id\n                                 await step.save();\n                                 // get the hint we are editing\n                                 let hint = this.AB.hints((h) => {\n                                    return h.id == id;\n                                 })[0];\n                                 // assign the new ABStep id to the ABHint\n                                 if (\n                                    hint?.stepIDs &&\n                                    Array.isArray(hint.stepIDs)\n                                 ) {\n                                    hint.stepIDs.push(step.id);\n                                 } else {\n                                    hint.stepIDs = [step.id];\n                                 }\n                                 // store the ABStep on the ABHint (not stored in defs)\n                                 hint._steps[step.id] = step;\n                                 // remove ui that shows when ABHint does not have steps\n                                 $$(\"hint_steps_\" + hint.id).removeView(\n                                    \"addStepBelow\"\n                                 );\n                                 // add the ui to edit the new step to the ui\n                                 $$(\"hint_steps_\" + hint.id).addView(\n                                    this.stepUI(step, hint)\n                                 );\n                              },\n                           },\n                           {},\n                        ],\n                     },\n                     {},\n                  ],\n               },\n            ],\n         };\n         // add to the ui now that we have it defined\n         $$(\"hint_steps_\" + id).addView(addStepBelow);\n      } else {\n         // if we do have steps\n         hint.stepIDs.forEach((step) => {\n            $$(\"hint_steps_\" + id).addView(\n               this.stepUI(hint._steps[step], hint)\n            );\n         });\n      }\n      // set up hover listeners for buttons that help user pick and show the highlight elements\n      const focusElements = document.querySelectorAll(\".focusElement\");\n      for (let i = 0; i < focusElements.length; i++) {\n         focusElements[i].addEventListener(\n            \"mouseover\",\n            this.addHighlightClass,\n            false\n         );\n         focusElements[i].addEventListener(\n            \"mouseout\",\n            this.removeHighlightClass,\n            false\n         );\n      }\n   }\n\n   // UI for each step that will be used to rebuild steps when moved/deleted/loaded\n   stepUI(step, hint) {\n      // the position of the step that we display in the top left corner of the ui\n      let position = $$(\"hint_steps_\" + hint.id).getChildViews().length + 1;\n      return {\n         view: \"form\",\n         id: \"step_form\" + step.id,\n         css: \"my\",\n         padding: 15,\n         borderless: true,\n         rows: [\n            {\n               borderless: true,\n               cols: [\n                  {\n                     width: 50,\n                     rows: [\n                        {\n                           view: \"label\",\n                           label: `<h1 class=\"stepPos\">${position}</h1>`,\n                           align: \"center\",\n                        },\n                        {\n                           view: \"icon\",\n                           class: \"moveStepUp\",\n                           icon: \"fa fa-caret-up\",\n                           disabled: position == 1 ? true : false, // do not allow moving up if already at the top position\n                           align: \"center\",\n                           click: (id, element) => {\n                              // move the step up a position\n                              this.moveStep(step, hint, \"up\");\n                           },\n                        },\n                        {\n                           view: \"icon\",\n                           class: \"moveStepDown\",\n                           icon: \"fa fa-caret-down\",\n                           disabled:\n                              hint.stepIDs.length == position ? true : false, // do not let the last item be moved down\n                           align: \"center\",\n                           click: (id, element) => {\n                              // move the step down a position\n                              this.moveStep(step, hint, \"down\");\n                           },\n                        },\n                     ],\n                  },\n                  {\n                     css: \"ab-component-form-rules\",\n                     padding: 15,\n                     cols: [\n                        {\n                           minWidth: 300,\n                           rows: [\n                              {\n                                 view: \"text\",\n                                 label: L(\"Title\"),\n                                 validate: webix.rules.isNotEmpty,\n                                 invalidMessage: L(\"Title is required\"),\n                                 labelWidth: 100,\n                                 name: \"name\",\n                                 value: step?.name || \"\",\n                              },\n                              {\n                                 view: \"textarea\",\n                                 label: L(\"Text\"),\n                                 labelAlign: \"left\",\n                                 labelWidth: 100,\n                                 height: 150,\n                                 name: \"text\",\n                                 value: step?.text || \"\",\n                              },\n                              {\n                                 cols: [\n                                    {\n                                       view: \"label\",\n                                       label: L(\"Highlight\"),\n                                       align: \"left\",\n                                       width: 100,\n                                    },\n                                    {\n                                       view: \"button\",\n                                       icon: \"fa fa-crosshairs\",\n                                       type: \"icon\",\n                                       label: L(\"select\"),\n                                       css: \"focusElement webix_primary\",\n                                       stepId: step.id,\n                                       width: 100,\n                                       click: () => {\n                                          // change the ui to support the selecting of the highlight element\n                                          $$(\"stepManager\" + hint.id).hide();\n                                          // adding this class will allow a css rule to highlight any element with data-cy attribute on hover\n                                          document.body.classList.add(\n                                             \"findDataCy\"\n                                          );\n                                          // when the user sees the element hovered can be a highlight element they right click to save it\n                                          document.addEventListener(\n                                             \"contextmenu\",\n                                             this.handleRightClick,\n                                             false\n                                          );\n                                          // store the step and hint ids to use in the handleRightClick() function\n                                          document.stepId = step.id;\n                                          document.hintId = hint.id;\n                                          // show a small window in bottom right hand corner that helps user know what to do\n                                          webix\n                                             .ui(this.focusWindow(hint.id))\n                                             .show();\n                                       },\n                                    },\n                                    {\n                                       view: \"text\",\n                                       name: \"el\",\n                                       value: step.settings.el,\n                                       disabled: true,\n                                       placeholder: L(\n                                          \"Click the 'select' button to pick an element to highlight.\"\n                                       ),\n                                       bottomLabel: L(\n                                          \"Hover over the 'select' button to highlight the chosen element.\"\n                                       ),\n                                       validate: webix.rules.isNotEmpty,\n                                       invalidMessage: L(\n                                          \"Please choose an item to highlight\"\n                                       ),\n                                    },\n                                 ],\n                              },\n                              {\n                                 cols: [\n                                    {\n                                       view: \"label\",\n                                       label: L(\"Event\"),\n                                       align: \"left\",\n                                       width: 100,\n                                    },\n                                    {\n                                       view: \"combo\",\n                                       value: step.settings.event,\n                                       name: \"event\",\n                                       options: [\n                                          {\n                                             id: \"click\",\n                                             value: L(\"Click\"),\n                                          },\n                                          {\n                                             id: \"enter\",\n                                             value: L(\"Enter\"),\n                                          },\n                                       ],\n                                    },\n                                 ],\n                              },\n                           ],\n                        },\n                     ],\n                  },\n                  {\n                     view: \"template\",\n                     borderless: true,\n                     template: `<div class=\"deleteStep\"><i class=\"fa fa-times\"></i></div>`,\n                     width: 15,\n                     onClick: {\n                        deleteStep: (ev, id) => {\n                           // ask user if they want to delete this step\n                           webix\n                              .confirm({\n                                 title: L(\"Delete Step\"),\n                                 text: L(\n                                    \"Are you sure you want to delete this step?\"\n                                 ),\n                                 type: \"confirm-error\",\n                              })\n                              .then(async (result) => {\n                                 // remove the step from the hint\n                                 hint.stepRemove(step.id);\n                                 await hint.save();\n                                 // rebuild the step ui now that one has been removed\n                                 this.updateStepsUI(hint.id);\n                                 return false; // blocks the default click behavior\n                              })\n                              .fail(() => {\n                                 // webix.message(\"Cancel\");\n                              });\n                           return false;\n                        },\n                     },\n                  },\n               ],\n            },\n         ],\n      };\n   }\n\n   // this function moves a step up or down a position\n   async moveStep(step, hint, direction) {\n      let currPosition = hint.stepIDs.indexOf(step.id);\n      switch (direction) {\n         case \"up\":\n            hint.stepIDs.splice(\n               currPosition - 1,\n               0,\n               hint.stepIDs.splice(currPosition, 1)[0]\n            );\n            break;\n         default:\n            hint.stepIDs.splice(\n               currPosition + 1,\n               0,\n               hint.stepIDs.splice(currPosition, 1)[0]\n            );\n      }\n      await hint.save();\n      this.updateStepsUI(hint.id);\n   }\n\n   // this builds the list of page/tab options that a hint can be added to\n   getViewOptions(views) {\n      // this so it looks right/indented in a tree view:\n      // var tree = new webix.TreeCollection();\n      var options = [];\n\n      /**\n       * @method addOption\n       *\n       * @param {ABView} page\n       * @param {uuid} parentId\n       * @param {number} depth\n       */\n      var addOption = (object, parentId, depth) => {\n         // add to tree collection\n         if ([\"page\", \"tab\", \"viewcontainer\"].indexOf(object.key) != -1) {\n            var indent = \"\";\n            for (let i = 0; i < depth; i++) {\n               indent += \"<i style='display:inline-block; width: 10px;'></i>\";\n            }\n            let icon =\n               object.icon == \"braille\" ? \"external-link-square\" : object.icon;\n            var option = {\n               id: object.id,\n               value: `${indent} <i class=\"fa fa-${icon}\"></i> ${object.label}`,\n            };\n            options.push(option);\n         }\n\n         var pages = object.pages ? object.pages() : [];\n         pages.forEach((page, pageIndex) => {\n            addOption(page, object.id, depth + 1);\n         });\n\n         var views = object.views();\n         views.forEach((view, pageIndex) => {\n            addOption(view, object.id, depth + 1);\n         });\n      };\n      views.forEach((p, index) => {\n         addOption(p, null, 0);\n      });\n\n      return options;\n   }\n\n   // This creates a new hint and stores it on the application and view we want to display it on\n   async createTutorial(viewID, viewLabel) {\n      let hint = this.AB.hintNew({\n         name: viewLabel,\n         settings: { view: viewID },\n      });\n      await hint.save();\n      if (Array.isArray(this?.application?.hintIDs)) {\n         this.application.hintIDs.unshift(hint.id);\n      } else {\n         this.application.hintIDs = [hint.id];\n      }\n      this.application.save();\n      let hintView = this.application.views((view) => {\n         return view.id == viewID;\n      })[0];\n      hintView.settings.hintID = hint.id;\n      hintView.save();\n      $$(\"tutorial_list\").add(hint, 0);\n      if (this.AB.hints().length) {\n         $$(\"tutorial_list\").show();\n         $$(\"tutorial_list_noSelection\").hide();\n      }\n   }\n\n   // create a new step on a hint\n   async createStep(hintID) {\n      let step = this.AB.stepNew(null, hintID);\n      return step;\n   }\n\n   // store the data-cy info on a step after right clicking an element on the page\n   handleRightClick(event) {\n      function getCy(element) {\n         if (element?.dataset?.cy) {\n            return element.dataset.cy;\n         } else if (element?.parentElement) {\n            return getCy(element.parentElement);\n         } else {\n            webix.alert({\n               text: L(\"Sorry, try another element.\"),\n            });\n            return \"\";\n         }\n      }\n\n      if (document?.stepId) {\n         event.preventDefault();\n         event.stopPropagation();\n         let dataCy = getCy(event.target);\n         if (!dataCy) return false;\n         $$(\"step_form\" + document.stepId).setValues(\n            {\n               el: \"[data-cy='\" + dataCy + \"']\",\n            },\n            true\n         );\n      }\n      $$(\"stepManager\" + document.hintId).show();\n      $$(\"focusWindow\").hide();\n\n      document.removeEventListener(\"contextmenu\", this.handleRightClick, false);\n      document.body.classList.remove(\"findDataCy\");\n      delete document.stepId;\n      delete document.hintId;\n\n      return false;\n   }\n\n   // handlePageTabClick(event) {\n   //    event.preventDefault();\n   //    event.stopPropagation();\n   //    debugger;\n   //    // $$(\"stepform\" + document?.hintId).setValues(\n   //    //    {\n   //    //       view: \"[data-cy='\" + dataCy + \"']\",\n   //    //    },\n   //    //    true\n   //    // );\n\n   //    $$(\"stepManager\" + document.hintId).show();\n   //    $$(\"pageTabWindow\").hide();\n\n   //    document.removeEventListener(\"click\", this.handlePageTabClick, false);\n   //    delete document.hintId;\n\n   //    return false;\n   // }\n}\n\nexport default new PortalTutorialManager();\n","import ClassUI from \"./ClassUI.js\";\nimport ClassUIPage from \"./ClassUIPage.js\";\n\nimport PortalWorkInbox from \"./portal_work_inbox.js\";\nimport PortalWorkInboxTaskWindow from \"./portal_work_inbox_taskWindow.js\";\nimport PortalWorkUserProfileWindow from \"./portal_work_user_profile_window.js\";\nimport PortalWorkUserSwitcheroo from \"./portal_work_user_switcheroo.js\";\nimport PortalWorkUserQRWindow from \"./portal_work_user_qr_window.js\";\nimport PortalWorkUserMobileQR from \"./portal_work_user_mobile_qr.js\";\nimport PortalAccessLevelManager from \"./portal_access_level_manager.js\";\nimport TranslationTool from \"./portal_translation_tool.js\";\nimport TutorialManager from \"./portal_tutorial_manager.js\";\n\nclass PortalWork extends ClassUI {\n   constructor() {\n      super();\n   }\n\n   ui() {\n      return {\n         id: \"portal_work\",\n         rows: [\n            {\n               id: \"portal_work_network_warning\",\n               height: 30,\n               css: \"portal_work_warning_banner warning_custom_css\",\n               hidden: true,\n               cols: [\n                  { width: 5 },\n                  {\n                     id: \"portal_work_network_warning_label\",\n                     view: \"label\",\n                     align: \"center\",\n                  },\n                  {\n                     id: \"portal_work_network_warning_button\",\n                     view: \"button\",\n                     align: \"center\",\n                     hidden: true,\n                     width: 100,\n                     css: \"webix_transparent\",\n                  },\n                  { width: 5 },\n               ],\n            },\n            {\n               id: \"portal_work_switcheroo_user_switched\",\n               height: 30,\n               css: \"portal_work_switcheroo_user_switched\",\n               hidden: true,\n               cols: [\n                  {\n                     width: 5,\n                  },\n                  {\n                     id: \"portal_work_switcheroo_user_switched_label\",\n                     view: \"label\",\n                     align: \"center\",\n                  },\n                  {\n                     id: \"portal_work_switcheroo_user_switched_loading\",\n                     view: \"label\",\n                     hidden: true,\n                     align: \"center\",\n                     width: 30,\n                     label: '<i class=\"fa fa-refresh fa-spin\" aria-hidden=\"true\"></i>',\n                  },\n                  {\n                     view: \"button\",\n                     value: '<div style=\"text-align: center; font-size: 12px; color:#FFFFFF\"><i class=\"fa-fw fa fa-times\"></i></div>',\n                     align: \"center\",\n                     width: 30,\n                     css: \"webix_transparent\",\n                     on: {\n                        onAfterRender: function () {\n                           ClassUI.CYPRESS_REF(this, \"switcheroo_clear_button\");\n                        },\n                        onItemClick: async () => {\n                           this.busy();\n                           await PortalWorkUserSwitcheroo.switcherooClear();\n                           this.ready();\n                           $$(\"portal_work_switcheroo_user_switched\").hide();\n                        },\n                     },\n                  },\n                  {\n                     width: 5,\n                  },\n               ],\n            },\n            {\n               view: \"toolbar\",\n               id: \"mainToolbar\",\n               // borderless: true,\n               css: \"webix_dark mainToolbar\",\n               padding: 10,\n               cols: [\n                  {\n                     id: \"portal_work_menu_sidebar\",\n                     view: \"button\",\n                     type: \"icon\",\n                     width: 50,\n                     icon: \"fa fa-bars no-margin\",\n                     click: () => {\n                        let navSideBar = $$(\"navSidebar\");\n                        if (navSideBar.isVisible()) {\n                           navSideBar.hide();\n                        } else {\n                           navSideBar.show();\n                           let sidebarMenu = $$(\"abSidebarMenu\");\n                           if (sidebarMenu.getSelectedId() == \"\") {\n                              sidebarMenu.blockEvent();\n                              const firstID = sidebarMenu.getFirstId();\n                              sidebarMenu.select(firstID);\n                              sidebarMenu.unblockEvent();\n                           }\n                        }\n                     },\n                     on: {\n                        onAfterRender() {\n                           ClassUI.CYPRESS_REF(this);\n                        },\n                     },\n                  },\n                  {\n                     view: \"label\",\n                     autowidth: true,\n                     id: \"portal_work_menu_title\",\n                     label: \"AppBuilder\",\n                     align: \"left\",\n                     on: {\n                        onAfterRender() {\n                           ClassUI.CYPRESS_REF(this);\n                        },\n                     },\n                  },\n                  {},\n                  {\n                     id: \"portal_work_menu_pages\",\n                     css: \"appPages\",\n                     cols: [],\n                     on: {\n                        onAfterRender() {\n                           ClassUI.CYPRESS_REF(this);\n                        },\n                     },\n                  },\n                  {},\n                  {\n                     id: \"inbox_icon\",\n                     view: \"button\",\n                     type: \"icon\",\n                     icon: \"fa fa-envelope no-margin\",\n                     width: 40,\n                     // badge: 12,\n                     click: () => {\n                        PortalWorkInbox.show();\n                     },\n                     on: {\n                        onAfterRender() {\n                           ClassUI.CYPRESS_REF(this);\n                        },\n                     },\n                  },\n                  {\n                     id: \"settings_icon\",\n                     view: \"button\",\n                     type: \"icon\",\n                     icon: \"fa fa-cog fa-lg no-margin\",\n                     width: 40,\n                     hidden: true,\n                     popup: \"settingsMenu\",\n                     /* Look at this.refreshSettingsMenu() for menu options and actions */\n                     on: {\n                        onAfterRender() {\n                           ClassUI.CYPRESS_REF(this);\n                        },\n                     },\n                  },\n                  {\n                     id: \"user_icon\",\n                     view: \"button\",\n                     type: \"icon\",\n                     icon: \"fa fa-user-circle no-margin\",\n                     width: 40,\n                     popup: \"userMenu\",\n                     /* Look at Popup created below for menu options and actions */\n                     on: {\n                        onAfterRender() {\n                           ClassUI.CYPRESS_REF(this);\n                        },\n                     },\n                  },\n               ],\n            },\n            {\n               cols: [\n                  {\n                     id: \"navSidebar\",\n                     hidden: true,\n                     autoheight: true,\n                     borderless: true,\n                     rows: [\n                        {\n                           id: \"abNavSidebarScrollView\",\n                           view: \"scrollview\",\n                           scroll: \"y\",\n                           css: \"darkScrollview\",\n                           body: {\n                              rows: [\n                                 {\n                                    view: \"sidebar\",\n                                    id: \"abSidebarMenu\",\n                                    borderless: true,\n                                    css: \"webix_dark mainSidebar\",\n                                    data: [],\n                                    on: {\n                                       onAfterRender() {\n                                          this.data.each((a) => {\n                                             ClassUI.CYPRESS_REF(\n                                                this.getItemNode(a.id),\n                                                a.id\n                                             );\n                                          });\n                                       },\n                                       onAfterSelect: (/* id */) => {\n                                          // this.selectApplication(id);\n                                       },\n                                       onItemClick: (id) => {\n                                          this.selectApplication(id);\n                                       },\n                                    },\n                                 },\n                              ],\n                           },\n                        },\n                        {\n                           view: \"template\",\n                           borderless: true,\n                           css: \"appDevDesigns\",\n                           height: 110,\n                        },\n                        {\n                           id: \"portal_work_privacy_policy\",\n                           view: \"template\",\n                           template:\n                              '<a href=\"#link#\" target=\"_blank\" class=\"policyMenu\">#label#</a>',\n                           css: \"policyLink\",\n                           height: 30,\n                           hidden: true,\n                        },\n                     ],\n                  },\n                  {\n                     id: \"abWorkPages\",\n                     template: \"No Applications Have Been Loaded.\",\n                  }, // this is where content goes\n               ],\n            },\n         ],\n      };\n   }\n\n   /** @param {import('../AppBuilder/ABFactory.js').default} AB */\n   async init(AB) {\n      this.AB = AB;\n\n      this.storageKey = \"portal_work_state\";\n\n      this.pageContainers = {};\n\n      const L = (...params) => {\n         return this.label(...params);\n      };\n\n      const allInits = [];\n\n      allInits.push(PortalWorkUserProfileWindow.init(this.AB));\n      allInits.push(PortalWorkUserSwitcheroo.init(this.AB));\n\n      // {hash}  { ABViewPage.id : ClassUIPage() }\n      // track each of the page containers (instances of ClassUIPage) that\n      // are responsible for displaying the proper state of each of our\n      // Root Pages.\n\n      // Get all our ABApplications and loaded Plugins in allApplications\n      const allApplications = (\n         this.AB.applications(\n            (a) =>\n               a.isWebApp &&\n               a.isAccessibleForRoles(this.AB.Account.rolesAll() ?? [])\n         ) || []\n      ).concat(this.AB.plugins() || []);\n\n      // Build out our Navigation Side Bar Menu with our available\n      // ABApplications\n      const menu_data = [];\n\n      for (let i = 0; i < allApplications.length; i++) {\n         // TODO: implement Sorting on these before building UI\n         menu_data.push(this.uiSideBarMenuEntry(allApplications[i]));\n      }\n\n      let { privacyPolicy, relay } = this.AB.Config.siteConfig();\n      if (privacyPolicy) {\n         $$(\"portal_work_privacy_policy\").setValues({\n            label: L(\"Privacy Policy\"),\n            link: privacyPolicy,\n         });\n         $$(\"portal_work_privacy_policy\").show();\n      }\n\n      $$(\"abSidebarMenu\").define(\"data\", menu_data);\n      this.sidebarResize();\n\n      PortalWorkUserMobileQR.init(AB);\n\n      const userMenuOptions = [\n         { id: \"user_profile\", label: L(\"User Profile\"), icon: \"user\" },\n         { id: \"user_logout\", label: L(\"Logout\"), icon: \"ban\" },\n      ];\n\n      // add in any Mobile App QR Codes:\n      const allMobile = this.AB.applications((a) => a.isMobile);\n      allMobile.forEach((m) => {\n         userMenuOptions.splice(1, 0, {\n            id: m.id, // \"pwa_app\",\n            label: m.label,\n            icon: m.icon.replace(\"fa-\", \"\"),\n         });\n      });\n\n      if (this.AB.Account.canSwitcheroo()) {\n         userMenuOptions.splice(1, 0, {\n            id: \"user_switcheroo\",\n            label: L(\"Switcheroo\"),\n            icon: \"user-secret\",\n         });\n      }\n\n      if (this.AB.Account.isSwitcherood()) {\n         $$(\"portal_work_switcheroo_user_switched_label\").setValue(\n            `<i class=\"fa-fw fa fa-user-secret\"></i>\n            ${L('You are viewing this site as \"{0}\"', [\n               this.AB.Account.username(),\n            ])}`\n         );\n         $$(\"portal_work_switcheroo_user_switched\").show();\n      }\n      /** @type {Object.<string, NetworkWarning>} */\n      this.networkWarnings = {\n         /**\n          * @typedef {object} NetworkWarning - define the display & behavior of\n          * a Network Warning\n          * @prop {string} label - warning message to display\n          * @prop {number} priority - 1 is the highest prioirity\n          * @prop {Function} [click] - click hanlder function\n          * @prop {string} [button] - label for the button\n          * @prop {string | number} [value] - to replace in button lable\n          * @prop {string} [css] - custom css to add to the warning ui\n          * @prop {Boolean} [active] - is the warning currently active\n          */\n         no_network: {\n            label: `<i class=\"fa fa-exclamation-triangle\" aria-hidden=\"true\"></i>\n            ${L(\"No network detected. Work will not be saved.\")}`,\n            priority: 1,\n         },\n         no_server: {\n            label: `<i class=\"fa fa-exclamation-triangle\" aria-hidden=\"true\"></i>\n            ${L(\n               \"Uh oh...we cannot communicate with our servers, please wait before saving data.\"\n            )}`,\n            priority: 2,\n            click: () => this.AB.Network._connectionCheck(),\n            button: `<i class=\"fa fa-refresh\" aria-hidden=\"true\"></i> #value# ${L(\n               \"requests\"\n            )}`,\n            value: 0,\n         },\n         slow: {\n            label: `<i class=\"fa fa-exclamation-triangle\" aria-hidden=\"true\"></i>\n            ${L(\"Slow Network Detected! This may affect your experience.\")}`,\n            priority: 5,\n            click: () => {\n               this.networkWarningClear(\"slow\");\n               this.networkWarnings.slow.disabled = true;\n            },\n            button: `<i class=\"fa fa-times\" aria-hidden=\"true\"></i> ${L(\n               \"dismiss\"\n            )}`,\n            css: \"background: #c98025\",\n         },\n      };\n\n      if (!navigator.onLine) this.networkWarningDisplay(\"no_network\");\n\n      window.addEventListener(\"offline\", () => {\n         this.networkWarningDisplay(\"no_network\");\n      });\n\n      window.addEventListener(\"online\", () => {\n         this.networkWarningClear(\"no_network\");\n      });\n\n      // document.body.addEventListener(\n      //    \"offline\",\n      //    function () {\n      //       debugger;\n      //       $$(\"portal_work_no_network_detected\").show();\n      //    },\n      //    false\n      // );\n      // document.body.addEventListener(\n      //    \"online\",\n      //    function () {\n      //       debugger;\n      //       $$(\"portal_work_no_network_detected\").hide();\n      //    },\n      //    false\n      // );\n\n      // Only add the QR Code option if the relay service is enabled\n      if (relay) {\n         // Insert at userMenuOptions[2] so logout is still last\n         userMenuOptions.splice(2, 0, {\n            id: \"user_qr\",\n            label: L(\"Connect Mobile App\"),\n            icon: \"qrcode\",\n         });\n      }\n\n      // This is the User popup menu that opens when you click the user icon in the main nav\n      this.AB.Webix.ui({\n         view: \"popup\",\n         id: \"userMenu\",\n         width: 150,\n         body: {\n            view: \"list\",\n            data: userMenuOptions,\n            template: \"<i class='fa-fw fa fa-#icon#'></i> #label#\",\n            autoheight: true,\n            select: true,\n            on: {\n               onItemClick: (id) => {\n                  switch (id) {\n                     case \"user_profile\":\n                        PortalWorkUserProfileWindow.show();\n                        break;\n                     case \"user_switcheroo\":\n                        PortalWorkUserSwitcheroo.show();\n                        break;\n                     case \"user_logout\":\n                        AB.Account.logout();\n                        break;\n                     case \"user_qr\":\n                        PortalWorkUserQRWindow.init(AB);\n                        PortalWorkUserQRWindow.show();\n                        break;\n                     default: {\n                        // was this one of our Mobile Apps?\n                        const mobileApp = this.AB.applicationByID(id);\n                        if (mobileApp) {\n                           PortalWorkUserMobileQR.load(mobileApp);\n                           PortalWorkUserMobileQR.show();\n                        } else {\n                           const item = userMenuOptions.filter(\n                              (o) => o.id == id\n                           )[0];\n                           this.AB.Webix.message(\n                              `<b>Not yet implemented</b><br/>\n                           Menu item:<i>${item.label}</i><br/>\n                           Menu ID:<i>${item.id}</i>`\n                           );\n                        }\n                     }\n                  }\n                  $$(\"userMenu\").hide();\n               },\n\n               onAfterRender() {\n                  this.data.each((a) => {\n                     ClassUI.CYPRESS_REF(this.getItemNode(a.id), a.id);\n                  });\n               },\n            },\n         },\n      });\n\n      // Now Fill out Toolbar and Root Pages:\n      //\n      // Step 1: prepare the AppState so we can determine which options\n      // should be pre selected.\n      //\n      const AppState = (await this.AB.Storage.get(this.storageKey)) ?? {\n         lastSelectedApp: null,\n         // {string}  the ABApplication.id of the last App selected\n\n         lastPages: {},\n         // {hash}  { ABApplication.id : ABPage.id }\n         // a lookup of all the last selected Pages for each Application\n      };\n\n      this.AppState = AppState;\n\n      // set default selected App if not already set\n      // just choose the 1st App in the list (must have pages that we have\n      // access to)\n      if (!this.AppState.lastSelectedApp && menu_data.length)\n         for (let i = 0; i < menu_data.length; i++)\n            if (\n               (\n                  menu_data[i].abApplication\n                     .pages()\n                     .filter((p) => p.getUserAccess?.() > 0) || []\n               ).length > 0\n            ) {\n               this.AppState.lastSelectedApp = menu_data[i].abApplication.id;\n\n               break;\n            }\n\n      //\n      // Step 2: figure out the Default Page to be displayed.\n      //\n      let DefaultPage = null;\n      // {ABViewPage}\n      // The ABViewPage of the 1st page to display.\n\n      // sidebar and NavBar are already built at this point. So we can\n      // query them.\n      const $sideBar = $$(\"abSidebarMenu\");\n\n      if ($sideBar) {\n         // search the Menu entries to see which one matches our\n         // stored AppState\n         let foundMenuEntry = this.sidebarMenuEntryByID(\n            this.AppState.lastSelectedApp\n         );\n\n         if (!foundMenuEntry) {\n            // if we couldn't find the entry then our .lastSelectedApp\n            // must be referencing an Application we no longer have\n            // access to.\n            // So just pick the 1st app with pages\n            for (let i = 0; i < menu_data.length; i++) {\n               if ((menu_data[i].abApplication.pages() || []).length > 0) {\n                  foundMenuEntry =\n                     this.sidebarMenuEntryByID(menu_data[i].abApplication.id) ||\n                     null;\n\n                  if (foundMenuEntry) break;\n               }\n            }\n         }\n\n         if (foundMenuEntry) {\n            $sideBar.select(foundMenuEntry.id);\n            this.selectApplication(foundMenuEntry.id);\n\n            const defaultPageID =\n               this.AppState.lastPages[foundMenuEntry.abApplication.id];\n\n            DefaultPage = foundMenuEntry.abApplication.pages(\n               (p) => p.id === defaultPageID\n            )[0];\n\n            if (!DefaultPage) {\n               // then just pick the first one:\n               DefaultPage = foundMenuEntry.abApplication.pages()[0];\n            }\n         }\n      }\n\n      //\n      // Step 3: Prime the content area with placeholders for ALL\n      // Root Pages\n      //\n      const allPlaceholders = [];\n\n      for (let i = 0; i < allApplications.length; i++) {\n         const pages = allApplications[i].pages() || [];\n\n         for (let j = 0; j < pages.length; j++) {\n            if (pages[j].getUserAccess?.() === 0) continue;\n\n            allPlaceholders.push({\n               id: this.pageID(pages[j]),\n               template: `Page: ${pages[j].label || pages[j].name}`,\n            });\n         }\n      }\n\n      if (allPlaceholders.length > 0)\n         this.AB.Webix.ui(\n            {\n               view: \"multiview\",\n               keepViews: true,\n               animate: false,\n               cells: allPlaceholders,\n            },\n            $$(\"abWorkPages\")\n         );\n\n      //\n      // Step 4: initialize the DefaultPage\n      // when it is finished we can show that page and emit \"ready\" to\n      // signal we can transition to the Work Portal\n      //\n      if (!this.App) {\n         // page.component() require a common {ABComponent.App}\n         this.App = new this.AB.Class.ABComponent(\n            null,\n            \"portal_work\",\n            this.AB\n         ).App;\n      }\n\n      if (DefaultPage) {\n         const container = new ClassUIPage(\n            this.pageID(DefaultPage),\n            DefaultPage,\n            this.App,\n            this.AB\n         );\n         const containerInit = async () => {\n            await container.init(this.AB, true);\n            this.showPage(DefaultPage);\n         };\n\n         this.pageContainers[DefaultPage.id] = container;\n         allInits.push(containerInit());\n      }\n      // let pUI = DefaultPage.component(this.App);\n\n      // webix.ui(pUI.ui, $$(this.pageID(DefaultPage)));\n      // pUI.init();\n      // pUI.onShow();\n      // this.showPage(DefaultPage);\n\n      //\n      // Step 5: initialize the remaining Pages\n      //\n      for (let i = 0; i < allApplications.length; i++) {\n         const pages = allApplications[i].pages() || [];\n\n         for (let j = 0; j < pages.length; j++) {\n            if (pages[j].getUserAccess?.() === 0) continue;\n\n            if (!DefaultPage || pages[j].id !== DefaultPage.id) {\n               const cont = new ClassUIPage(\n                  this.pageID(pages[j]),\n                  pages[j],\n                  this.App,\n                  this.AB\n               );\n\n               this.pageContainers[pages[j].id] = cont;\n\n               allInits.push(cont.init(this.AB));\n\n               // let comp = page.component(commonComp.App);\n               // webix.ui(comp.ui, $$(this.pageID(page)));\n               // comp.init();\n               // comp.onShow();\n            }\n         }\n      }\n\n      this.refreshSettingsMenu();\n      //\n      // Step 6: Initialize the Inbox Items\n      //\n      PortalWorkInbox.on(\"updated\", () => {\n         const count = PortalWorkInbox.count();\n         $$(\"inbox_icon\").define({ badge: count ? count : false });\n         $$(\"inbox_icon\").refresh();\n      });\n\n      await PortalWorkInbox.init(this.AB);\n\n      //\n      // Step 7: As well as the Inbox Task Window\n      //\n      allInits.push(PortalWorkInboxTaskWindow.init(this.AB));\n\n      // Network and Queued operations Alert\n      this.AB.Network.on(\"queued\", () => {\n         const count = this.AB.Network.queueCount();\n         if (count > 0) {\n            this.networkWarningDisplay(\"no_server\", count);\n         } else {\n            this.networkWarningClear(\"no_server\");\n         }\n      });\n      this.AB.Network.on(\"queue.synced\", () => {\n         this.networkWarningDisplay(\"no_server\", 0);\n         this.networkWarningClear(\"no_server\");\n      });\n\n      if (this.AB.Network.isNetworkSlow()) this.networkWarningDisplay(\"slow\");\n      this.AB.Network.on(\"networkslow\", (isSlow) => {\n         isSlow\n            ? this.networkWarningDisplay(\"slow\")\n            : this.networkWarningClear(\"slow\");\n      });\n\n      this.emit(\"ready\");\n\n      // !!! HACK: Leave this for James to figure out why Menu Title isn't proper\n      // size on initial loading.\n      setTimeout(() => {\n         $$(\"portal_work_menu_title\").resize();\n      }, 200);\n\n      // Now attempt to flush any pending network operations:\n      this.AB.Network._connectionCheck();\n\n      // Be sure our UI elements that don't respond to onAfterRender()\n      // have their cypress references set:\n      [\"portal_work_menu_pages\"].forEach((eid) => {\n         ClassUI.CYPRESS_REF($$(eid));\n      });\n\n      await Promise.all(allInits);\n   }\n\n   /**\n    * Display a network warning banner. Will not update if a higher priority\n    * warning is already active, but will save the state in case the active\n    * warning is cleared before this one. Can be called without a key to\n    * update/clear exisiting warnings.\n    * @param {string?} key\n    */\n   networkWarningDisplay(key, value) {\n      if (key) this.networkWarnings[key].active = true;\n      if (key && value) this.networkWarnings[key].value = value;\n\n      // get the highest priority active warning\n      let warning;\n      for (const k in this.networkWarnings) {\n         const entry = this.networkWarnings[k];\n         if (!entry.active || entry.disabled) continue;\n         if (!warning || warning.priority > entry.priority) {\n            warning = entry;\n         }\n      }\n      if (!warning) {\n         // No active warnings so hide the banner\n         $$(\"portal_work_network_warning\").hide();\n         return;\n      }\n      $$(\"portal_work_network_warning_label\").setValue(warning.label);\n      const button = $$(\"portal_work_network_warning_button\");\n      if (warning.click) {\n         button.define(\"click\", warning.click);\n         const buttonText = (warning.button ?? \"\").replaceAll(\n            \"#value#\",\n            warning.value\n         );\n         button.define(\"label\", buttonText);\n         button.refresh();\n         button.show();\n      } else {\n         button.hide();\n      }\n      warning.css\n         ? this.AB.Webix.html.addStyle(\n              `.warning_custom_css{${warning.css}}`,\n              \"warning_custom_css\"\n           )\n         : this.AB.Webix.html.removeStyle(\"warning_custom_css\");\n      $$(\"portal_work_network_warning\").show();\n   }\n   /**\n    * Clear a network warning\n    * @param {string} key\n    */\n   networkWarningClear(key) {\n      this.networkWarnings[key].active = false;\n      // Call this.networkWarningDisplay() again in case another warning is still active\n      this.networkWarningDisplay();\n   }\n\n   /**\n    * pageID()\n    * return a commone webix.id for a given ABViewPage\n    * @param {ABViewPage || string} page\n    *       An instance of ABViewPage, OR a string of the ABViewPage.id\n    * @return {string}\n    */\n   pageID(page) {\n      return `page_${page.id || page}`;\n   }\n\n   selectApplication(id) {\n      const row = $$(\"abSidebarMenu\").getItem(id);\n\n      const pageButtons = [];\n      // {array}\n      // the webix menu buttons for each Page\n\n      let firstPage = true;\n      // {bool} firstPage\n      // should we choose the 1st page as being the active page?\n\n      let activePageID = null;\n      // {string}\n      // The ABViewPage.id of the active Page for the current Application.\n      if (this.AppState.lastSelectedApp != row.abApplication.id) {\n         // remember the current Application has been selected\n         this.AppState.lastSelectedApp = row.abApplication.id;\n         this.saveState();\n         // Need to Settings Menu if different for each app\n         this.refreshSettingsMenu();\n      }\n\n      // if the current Application already has an Active State Page marked\n      // we don't want the first page:\n      activePageID = this.AppState.lastPages[row.abApplication.id];\n      if (activePageID) {\n         firstPage = false;\n      }\n\n      // Build a Menu Button for each of the ABApplication Root Pages\n      (row.abApplication.pages() || []).forEach((p) => {\n         if (p.getUserAccess?.() == 0) return;\n         // Decide if current Page button should look selected.\n         let active = \"\";\n         if (firstPage || p.id == activePageID) {\n            active = \"activePage\";\n            firstPage = false;\n\n            // remember this one\n            this.AppState.lastPages[row.abApplication.id] = p.id;\n         }\n\n         let pbLabel = p.label;\n         if (\"function\" === typeof p.label) {\n            pbLabel = p.label();\n         }\n         pageButtons.push({\n            view: \"button\",\n            css: active,\n            type: \"icon\",\n            label: pbLabel,\n            autowidth: true,\n            icon: `fa fa-${p.icon}`,\n            abPage: p,\n            click: (item) => {\n               // when button is clicked, update the selected look\n               const pageButton = $$(item);\n\n               // Remove any other \"activePage\" entries\n               $$(\"portal_work_menu_pages\")\n                  .queryView(\n                     {\n                        css: \"activePage\",\n                     },\n                     \"all\"\n                  )\n                  .forEach((p) => {\n                     if (p != pageButton) {\n                        p.define(\"css\", \"\");\n                        p.$view.classList.remove(\"activePage\");\n                     }\n                  });\n\n               // make sure this one is marked\n               pageButton.define(\"css\", \"activePage\");\n               pageButton.$view.classList.add(\"activePage\");\n\n               // now trigger the page to display:\n               this.showPage(pageButton.data.abPage);\n            },\n            on: {\n               onAfterRender() {\n                  ClassUI.CYPRESS_REF(this, p.id);\n               },\n            },\n         });\n      });\n      webix.ui(pageButtons, $$(\"portal_work_menu_pages\"));\n\n      $$(\"portal_work_menu_title\").setValue(row.value);\n      $$(\"portal_work_menu_title\").resize();\n\n      // now everything is displayed\n      // default initial display to current activePage:\n      let selectedPage = null;\n      $$(\"portal_work_menu_pages\")\n         .queryView(\n            {\n               css: \"activePage\",\n            },\n            \"all\"\n         )\n         .forEach((p) => {\n            selectedPage = p;\n         });\n      this.showPage(selectedPage?.data?.abPage);\n\n      // hide the sidebar menu\n      const sideBar = $$(\"navSidebar\");\n      if (sideBar.isVisible()) {\n         sideBar.hide();\n      }\n   }\n\n   /**\n    * saveState()\n    * trigger a save of our current AppState.\n    * NOTE: we delay this so we can catch multiple saves in a short period\n    * of time.\n    */\n   saveState() {\n      if (this._saveTimeoutID) {\n         clearTimeout(this._saveTimeoutID);\n      }\n      this._saveTimeoutID = setTimeout(() => {\n         this.AB.Storage.set(this.storageKey, this.AppState);\n      }, 500);\n   }\n\n   show() {\n      $$(\"portal_work\").show();\n   }\n\n   showPage(page) {\n      // this could be a subpage\n      const pageUI = this.pageContainers[page?.id];\n\n      if (pageUI) {\n         pageUI.show();\n         this.AppState.lastPages[page.application.id] = page.id;\n         this.saveState();\n      }\n   }\n\n   /**\n    * @method sidebarMenuEntryByID()\n    * returns the sidebar menu entry that matches the given {menuID}\n    * @param {string|uuid} menuID\n    * @return {obj}\n    */\n   sidebarMenuEntryByID(menuID) {\n      const $sideBar = $$(\"abSidebarMenu\");\n\n      let foundMenuEntry = null;\n\n      if ($sideBar) {\n         // search the Menu entries to see which one matches our\n         // stored AppState\n\n         let id = $sideBar.getFirstId();\n         while (!foundMenuEntry && id) {\n            let entry = $sideBar.getItem(id);\n            if (entry.abApplication.id == menuID) {\n               foundMenuEntry = entry;\n            }\n            id = $sideBar.getNextId(id);\n         }\n      }\n\n      return foundMenuEntry;\n   }\n\n   sidebarResize() {\n      const sidebarMenu = $$(\"abSidebarMenu\");\n      const sideBarHeight = sidebarMenu.count() * 45 + 1;\n\n      sidebarMenu.define(\"height\", sideBarHeight);\n      sidebarMenu.resize();\n      // $$(\"abNavSidebarScrollView\").resize(true);\n   }\n\n   /**\n    * generate the Webix definition for a menu entry given the ABApplication\n    * the menu entry should represent.\n    * @param {ABApplication} app\n    * @return {obj} Webix.ui definition.\n    */\n   uiSideBarMenuEntry(app) {\n      return {\n         id: app.id,\n         icon: `fa ${app.icon}`,\n         value: app.label || app.name,\n         abApplication: app,\n         // This is never called:\n         // on: {\n         //    onAfterRender() {\n         //       debugger;\n         //       ClassUI.CYPRESS_REF(this, app.id);\n         //    },\n         // },\n      };\n   }\n\n   refreshSettingsMenu() {\n      const { uuid, roles } = this.AB.Config.userConfig();\n      const application = this.AB.applicationByID(\n         this.AppState.lastSelectedApp\n      );\n      const settingsMenuOptions = [];\n\n      if (!application) return $$(\"settings_icon\").hide();\n      if (application.isAccessManaged) {\n         let isManager = false;\n         if (\n            application.accessManagers.useAccount == \"1\" &&\n            application.accessManagers.account.indexOf(uuid) > -1\n         ) {\n            isManager = true;\n         }\n         if (!isManager && application.accessManagers.useRole == \"1\") {\n            roles.forEach((role) => {\n               if (application.accessManagers.role.indexOf(role.uuid) > -1) {\n                  isManager = true;\n               }\n            });\n         }\n         if (isManager) {\n            settingsMenuOptions.push({\n               id: \"accessLevel\",\n               label: this.label(\"Access Manager\"),\n               icon: \"lock\",\n            });\n         }\n      }\n      if (application.isTranslationManaged) {\n         let isManager = false;\n         if (\n            application.translationManagers.useAccount == \"1\" &&\n            application.translationManagers.account.indexOf(uuid) > -1\n         ) {\n            isManager = true;\n         }\n         if (!isManager && application.translationManagers.useRole == \"1\") {\n            roles.forEach((role) => {\n               if (\n                  application.translationManagers.role.indexOf(role.uuid) > -1\n               ) {\n                  isManager = true;\n               }\n            });\n         }\n         if (isManager) {\n            settingsMenuOptions.push({\n               id: \"translation\",\n               label: this.label(\"Translation Tool\"),\n               icon: \"language\",\n            });\n         }\n      }\n      if (application.isTutorialManaged) {\n         let isManager = false;\n         if (\n            application.tutorialManagers.useAccount == \"1\" &&\n            application.tutorialManagers.account.indexOf(uuid) > -1\n         ) {\n            isManager = true;\n         }\n         if (!isManager && application.tutorialManagers.useRole == \"1\") {\n            roles.forEach((role) => {\n               if (application.tutorialManagers.role.indexOf(role.uuid) > -1) {\n                  isManager = true;\n               }\n            });\n         }\n         if (isManager) {\n            settingsMenuOptions.push({\n               id: \"tutorial\",\n               label: this.label(\"Tutorial Manager\"),\n               icon: \"info-circle\",\n            });\n         }\n      }\n\n      if (settingsMenuOptions.length < 1) return $$(\"settings_icon\").hide();\n\n      $$(\"settings_icon\").show();\n\n      webix.ui({\n         view: \"popup\",\n         id: \"settingsMenu\",\n         width: 150,\n         body: {\n            view: \"list\",\n            data: settingsMenuOptions,\n            template: \"<i class='fa-fw fa fa-#icon#'></i> #label#\",\n            autoheight: true,\n            select: true,\n            on: {\n               onItemClick: (id /*, event */) => {\n                  switch (id) {\n                     case \"accessLevel\":\n                        PortalAccessLevelManager.init(this);\n                        PortalAccessLevelManager.show();\n                        break;\n                     case \"translation\":\n                        TranslationTool.init(this);\n                        TranslationTool.show();\n                        break;\n                     case \"tutorial\":\n                        TutorialManager.init(this);\n                        TutorialManager.show();\n                        break;\n                     default:\n                        //eslint-disable-next-line\n                        const item = settingsMenuOptions.filter(\n                           (o) => o.id == id\n                        )[0];\n                        webix.message(\n                           `<b>Not yet implemented</b><br/>\n                           Menu item:<i>${item.label}</i><br/>\n                           Menu ID:<i>${item.id}</i>`\n                        );\n                  }\n                  $$(\"settingsMenu\").hide();\n               },\n\n               onAfterRender() {\n                  this.data.each((a) => {\n                     ClassUI.CYPRESS_REF(this.getItemNode(a.id), a.id);\n                  });\n               },\n            },\n         },\n      });\n   }\n\n   busy() {\n      $$(\"portal_work_switcheroo_user_switched_loading\")?.show();\n   }\n\n   ready() {\n      $$(\"portal_work_switcheroo_user_switched_loading\")?.hide();\n   }\n}\n\nexport default new PortalWork();\n","import ClassUI from \"./ClassUI.js\";\nimport PortalLoading from \"./portal_loading.js\";\nimport PortalAuth from \"./portal_auth.js\";\nimport PortalWork from \"./portal_work.js\";\n\nclass Portal extends ClassUI {\n   constructor() {\n      super();\n\n      this.ShownPortal = null;\n      // {UI.Portal} ShownPortal\n      // Keep track of which Portal is currently shown.\n\n      this.portalWorkReady = false;\n      // {bool}\n      // has the PortalWork UI emitted it's \"ready\" event?\n      //\n   }\n\n   ui() {\n      return {\n         view: \"popup\",\n         fullscreen: true,\n         modal: true,\n         body: {\n            id: \"portal\",\n            view: \"multiview\",\n            keepViews: true,\n            animate: false,\n            rows: [PortalLoading.ui(), PortalAuth.ui(), PortalWork.ui()],\n         },\n      };\n   }\n\n   init(AB) {\n      this.AB = AB;\n\n      this.AB.on(\"portal.show\", (key) => {\n         this.showPortal(key);\n      });\n\n      var allInits = [];\n      // {array} allInits\n      // all the .init() {Promise}s that are being generated during our\n      // init().\n\n      allInits.push(PortalAuth.init(AB));\n\n      // if we are authenticated, then we make sure our loading & work portals\n      // are prepared.\n      if (this.AB.Account.isAuthenticated) {\n         // Setup our listeners BEFORE the .init()s\n         this.AB.Account.on(\"logout\", (data) => {\n            if (data?.redirect) {\n               // if we pass a redirect link follow it\n               window.document.location.href = data?.redirect;\n            } else {\n               // on logout show Auth Portal\n               this.showAuthPortal();\n            }\n         });\n\n         this.AB.Network.on(\"reauth\", () => {\n            // on logout show Auth Portal\n            this.showAuthPortal();\n         });\n\n         PortalWork.on(\"ready\", () => {\n            this.portalWorkReady = true;\n            this.showDefaultView();\n         });\n\n         // Now trigger our other .init()s\n         allInits.push(PortalLoading.init(AB));\n         allInits.push(PortalWork.init(AB));\n      }\n\n      return Promise.all(allInits).then(() => {\n         this.showDefaultView();\n      });\n   }\n\n   showAuthPortal(defaultView) {\n      if (this.ShownPortal != PortalAuth) {\n         PortalAuth.show(defaultView);\n         this.ShownPortal = PortalAuth;\n      }\n   }\n\n   showWorkPortal() {\n      if (this.portalWorkReady) {\n         if (this.ShownPortal != PortalWork) {\n            // when loading portal is done move to Work Portal\n            PortalWork.show();\n            this.ShownPortal = PortalWork;\n         }\n      } else {\n         if (!this.ShownPortal) {\n            // if we haven't already shown a portal ... show the loading\n            PortalLoading.show();\n         }\n      }\n   }\n\n   showDefaultView() {\n      // At this point, all inits() are complete\n\n      // if authenticated then show our default view:\n      if (this.AB.Account.isAuthenticated) {\n         // do we have a specified defaultView?\n         let defaultView = this.AB.Config.setting(\"view\");\n         if (defaultView) {\n            // defaultView should be in form:\n            //    \"auth_login_form\",\n            //    \"auth_login_passwordReset\",\n            //    \"work\"\n            var parts = defaultView.split(\"_\");\n            this.showPortal(parts[0], defaultView);\n         } else {\n            // then default to our work view:\n            if (this.portalWorkReady) {\n               this.showWorkPortal();\n            } else {\n               if (!this.ShownPortal) {\n                  // if we haven't already shown a portal ... show the loading\n                  PortalLoading.show();\n               }\n            }\n         }\n      } else {\n         this.showAuthPortal();\n      }\n   }\n\n   showPortal(key, defaultView) {\n      switch (key) {\n         case \"auth\":\n            this.showAuthPortal(defaultView);\n            break;\n\n         case \"work\":\n            this.showWorkPortal();\n            break;\n      }\n   }\n}\n\nexport default new Portal();\n","import ClassUI from \"./ClassUI.js\";\nimport Portal from \"./portal.js\";\n\nclass UI extends ClassUI {\n   constructor() {\n      super();\n\n      this.hiddenElements = [];\n   }\n\n   ui() {\n      return {\n         id: \"labelClickToEnter\",\n         view: \"label\",\n         label: \"Hello\",\n         on: {\n            onItemClick: (/* id, e */) => {\n               this.portalShow();\n            },\n         },\n      };\n   }\n\n   init(AB) {\n      this.AB = AB;\n      var entryLabel = this.AB.Tenant.textClickToEnter;\n      if (entryLabel) {\n         $$(\"labelClickToEnter\").define({\n            label: entryLabel,\n         });\n      }\n\n      // by not sending an id param, this creates it's own div.\n      this.popup = Portal.attach();\n\n      // AB.on(\"error\", (error) => {\n      //    console.error(\"ui.on(error): \", error);\n      // });\n\n      return Portal.init(AB).then(() => {\n         if (this.AB.Config.setting(\"autoenter\")) {\n            this.portalShow();\n         } else {\n            this.portalHide();\n         }\n      });\n   }\n\n   portalHide() {\n      // show our link to enter\n      this.popup.hide();\n   }\n\n   portalShow() {\n      // show our portal\n      this.popup.show();\n   }\n}\n\nexport default new UI();\n","import ClassUI from \"./ClassUI.js\";\n\nimport Switcheroo from \"./portal_work_user_switcheroo.js\";\n\nclass ErrorNoDefsUI extends ClassUI {\n   ui() {\n      const L = (...params) => {\n         return this.label(...params);\n      };\n      return {\n         rows: [\n            {\n               id: \"switched\",\n               height: 23,\n               css: \"portal_work_switcheroo_user_switched\",\n               hidden: true,\n               cols: [\n                  {\n                     width: 5,\n                  },\n                  {\n                     id: \"switched_label\",\n                     view: \"label\",\n                     align: \"center\",\n                  },\n                  {\n                     view: \"button\",\n                     value: '<div style=\"text-align: center; font-size: 12px; color:#FFFFFF\"><i class=\"fa-fw fa fa-times\"></i></div>',\n                     align: \"center\",\n                     width: 30,\n                     css: \"webix_transparent\",\n                     on: {\n                        onItemClick: () => {\n                           Switcheroo.init(this.AB, true);\n                           Switcheroo.switcherooClear();\n                           $$(\"switched\").hide();\n                        },\n                     },\n                  },\n                  {\n                     width: 5,\n                  },\n               ],\n            },\n            {\n               id: \"error_no_defs\",\n               css: \"portalLogin\",\n               cols: [\n                  {},\n                  {\n                     rows: [\n                        {},\n                        {\n                           width: 360,\n                           height: 200,\n                           rows: [\n                              {\n                                 css: \"portalLoginForm\",\n                                 padding: 30,\n                                 rows: [\n                                    {\n                                       id: \"error_no_defs_text\",\n                                       template: `<div style='text-align: center; font-size:14px;'>\n                                       ${L(\n                                          \"You don't have any Roles in the system defined.  Talk to an Administrator.\"\n                                       )}\n                                    </div>`,\n                                       borderless: true,\n                                    },\n                                 ],\n                              },\n                           ],\n                        },\n                        {},\n                     ],\n                  },\n                  {},\n               ],\n            },\n         ],\n      };\n   }\n\n   async init(AB) {\n      this.AB = AB;\n   }\n\n   switcherooUser(user) {\n      const L = (...params) => {\n         return this.label(...params);\n      };\n      $$(\"switched\").show();\n      $$(\"switched_label\").setValue(\n         L('*You are viewing this site as \"{0}\"*', [this.AB.Account.username()])\n      );\n   }\n\n   preloadMessage(text) {\n      $$(\"error_no_defs_text\").setValues({ text });\n   }\n   destroy() {\n      $$(\"error_no_defs\").destructor();\n   }\n}\n\nexport default new ErrorNoDefsUI();\n","/*\n * Bootstrap.js\n * This file drives the setup and preparation of the Web Platform.\n * It's main job is to prepare all the local Resources for operation as\n * well the main ABFactory object that will drive the rest of the applications.\n */\n\nimport events from \"events\";\n\nconst EventEmitter = events.EventEmitter;\n\nimport Config from \"../config/Config.js\";\n\nimport initConfig from \"../init/initConfig.js\";\nimport \"../init/initConnectListerner.js\";\nimport initDiv from \"../init/initDiv.js\";\nimport initUser from \"../init/initUser.js\";\n// import initResources from \"../init/initResources.js\";\n\n// import JSZipUtils from \"jszip-utils/dist/jszip-utils.min.js\";\n\n// import Selectivity from \"../js/selectivity/selectivity.min.js\";\n// import selectivityCSS from \"../js/selectivity/selectivity.min.css\";\n\nimport UI from \"../ui/ui.js\";\nimport ErrorNoDefsUI from \"../ui/error_noDefs.js\";\n\nimport performance from \"../utils/performance.js\";\n\nclass Bootstrap extends EventEmitter {\n   constructor() {\n      super();\n      this.setMaxListeners(0);\n\n      // Common Reference to Configuration Values\n      this.Config = Config;\n\n      //\n      // UI Related\n      //\n\n      this._div = null;\n      // {el} _div\n      // the HTML element that is the where our initial [click] here button\n      // should be displayed.  Our actual portal is a popup, but the base\n      // <div> can be used for an embedded view.\n\n      this._plugins = [];\n      // {array} ._plugins\n      // an array of the loaded plugins we need to register.\n\n      this._ui = null;\n      // {obj} ._ui\n      // the Webix Object that is our UI display\n\n      this.on(\"error\", (err) => {\n         performance.error(err);\n      });\n   }\n\n   /**\n    * @param {Promise} webixLoading - so we know when webix is finished loading\n    */\n   async init(webixLoading) {\n      const loadABFactory = import(\n         /* webpackChunkName: \"AB\" */\n         /* webpackPrefetch: true */\n         \"../AppBuilder/ABFactory\"\n      );\n      // @const {Promise} loadABFactory Defer loading the ABFactory for a smaller\n      // inital file size, allowing us to show the loading UI sooner.\n      /**\n       * @type {Function} preloadMessage\n       * @description show a loading message\n       * @param {string} message to display on the loading screen\n       */\n      const preloadMessage = (m) =>\n         (document.getElementById(\"preload-text\").innerHTML = m);\n      /**\n       * @type {Function}\n       * @description remove the preload ui elements\n       */\n      const destroyPreloadUI = () =>\n         document.getElementById(\"preloader\").remove();\n\n      const networkTestWorker = new Worker(\n         new URL(\"../utils/networkTest.js\", import.meta.url)\n      );\n      let networkIsSlow = false;\n      networkTestWorker.onmessage = ({ data }) => {\n         if (networkIsSlow !== data) {\n            networkIsSlow = data;\n            const $uiWarning = document.getElementById(\n               \"preload_network_warning\"\n            );\n            $uiWarning.hidden = !networkIsSlow;\n            // Tell sentry our network speed changed\n            performance.setContext(\"breadcrumb\", {\n               category: \"network\",\n               message: networkIsSlow\n                  ? \"Slow network detected\"\n                  : \"Network speed restored\",\n               level: \"info\",\n            });\n         }\n      };\n\n      preloadMessage(\"Waiting for the API Server\");\n\n      performance.mark(\"bootstrap\", { op: \"function\" });\n      // on the web platform, we need to gather the appropriate configuration\n      // information before we can show the UI\n      // 1) Find or create the DIV element our UI is to attach to\n      //    this DIV element can contain settings pertainent to our setup\n      performance.mark(\"initDiv\", { op: \"ui.render\" });\n      await initDiv.init(this);\n      performance.measure(\"initDiv\");\n\n      // 2) Request the User's Configuration Information from the server.\n      performance.mark(\"initConfig\", { op: \"function\" });\n      preloadMessage(\"Getting Configuration Settings\");\n      await initConfig.init(this);\n      performance.measure(\"initConfig\");\n\n      await initUser.init(this);\n      const userInfo = Config.userConfig();\n\n      if (userInfo) {\n         // load definitions for current user\n         performance.setContext(\"user\", {\n            id: userInfo.id,\n         });\n      } else {\n         let { options: tenantConfig } = Config.tenantConfig();\n         tenantConfig =\n            typeof tenantConfig === \"string\"\n               ? JSON.parse(tenantConfig)\n               : tenantConfig;\n         // If no user and tenant isn't using local auth start\n         // the external auth workflow:\n         if (tenantConfig.authType !== \"login\") {\n            window.location.assign(\"/auth/login\");\n            return;\n         }\n         // Keep going if the tenant is using local auth\n      }\n      // 2.5) Load any plugins\n      performance.mark(\"loadPlugins\", { op: \"function\" });\n\n      // Plugins are now loaded via the Preloader and stored in\n      (window.__AB_Plugins || []).forEach((p) => {\n         this.addPlugin(p);\n      });\n      performance.measure(\"loadPlugins\");\n\n      // 3) Now we have enough info, to create an instance of our\n      //    {ABFactory} that drives the rest of the AppBuilder objects\n      performance.mark(\"createABFactory\", { op: \"function\" });\n      preloadMessage(\"Starting AppBuilder\");\n\n      const { default: ABFactory } = await loadABFactory;\n      let definitions = Config.definitions() || null;\n\n      if (definitions) {\n         // NOTE: when loading up an unauthorized user,\n         // definitions will be null: we can skip the plugins\n         // Q: is it possible to load a plugin when unauthorized?\n         this._plugins.forEach((p) => {\n            definitions = definitions.concat(p.definitions());\n         });\n      }\n      this.AB = new ABFactory(definitions);\n\n      if (!window.AB) window.AB = this.AB;\n      // Make our Factory Global.\n      // NOTE: our tests are expecting to access our ABFactory this way.\n\n      this.AB.Network.registerNetworkTestWorker(\n         networkTestWorker,\n         networkIsSlow\n      );\n      await this.AB.init();\n      await webixLoading;\n      // NOTE: special case: User has no Roles defined.\n      // direct them to our special ErrorNoDefsUI\n      if (userInfo && userInfo.roles.length == 0) {\n         performance.measure(\"createABFactory\");\n         ErrorNoDefsUI.init(this.AB);\n         ErrorNoDefsUI.attach();\n         ErrorNoDefsUI.show();\n         if (Config.userReal()) {\n            ErrorNoDefsUI.switcherooUser(Config.userConfig());\n         }\n         destroyPreloadUI();\n         this.ui(ErrorNoDefsUI);\n\n         let err = new Error(\"No Definitions\");\n         err.code = \"ENODEFS\";\n         throw err;\n      }\n\n      // 3.5  prepare the plugins\n      this._plugins.forEach((p) => {\n         p.apply(this.AB);\n         const labels = p.labels(this.AB.Multilingual.currentLanguage());\n         this.AB.Multilingual.pluginLoadLabels(p.key, labels);\n      });\n      performance.measure(\"createABFactory\");\n\n      // 4) Now we can create the UI and send it the {ABFactory}\n      performance.mark(\"initUI\", { op: \"ui.render\" });\n      // webix recommends wrapping any webix code in the .ready()\n      // function that executes after page loading.\n      webix.ready(() => {\n         const locales = {\n            en: \"en-US\",\n            \"zh-hans\": \"zh-CN\",\n            th: \"th-TH\",\n         };\n         // locales - map ab languageCode to webix locale\n         const { languageCode } = AB.Config.userConfig() ?? {};\n         // save the webix locale used to set locale in ClassUIPage.renderPage()\n         window.webixLocale =\n            Object.prototype.hasOwnProperty.call(locales, languageCode) &&\n            Object.prototype.hasOwnProperty.call(\n               webix.i18n.locales,\n               locales[languageCode]\n            )\n               ? locales[languageCode]\n               : false;\n\n         // webix pro offers a feature that hides scroll bars by\n         // default for browsers that include them due to the user's\n         // UI. The experience becomes more like a touch interface\n         // with the exception that scroll bars appear when user\n         // hovers over a scrollable area\n         /* if (!Webix.env.touch  && Webix.env.scrollSize ) */\n         webix.CustomScroll.init();\n\n         const div = this.div();\n\n         UI.attach(div.id);\n         destroyPreloadUI();\n         this.ui(UI);\n         this.ui()\n            .init(this.AB)\n            .then(() => {\n               performance.measure(\"initUI\");\n               performance.measure(\"bootstrap\");\n            });\n         // this.ui().init() routine handles the remaining\n         // bootup/display process.\n      });\n   }\n\n   addPlugin(plugin) {\n      this._plugins.push(plugin);\n   }\n\n   alert(options) {\n      webix.alert(options);\n   }\n\n   div(el) {\n      if (el) {\n         this._div = el;\n         return;\n      }\n      return this._div;\n   }\n\n   error(...params) {\n      console.error(...params);\n      let message = params[0];\n      this.emit(message);\n   }\n\n   ui(UI) {\n      if (UI) {\n         this._ui = UI;\n         return;\n      }\n      return this._ui;\n   }\n}\n\nexport default new Bootstrap();\n","/*\n * initDiv.js\n * find or create an initial <div> for our Appbuilder portal\n */\nexport default {\n   init: (BS) => {\n      // BS {Bootstrap}\n      // The initial Bootstrap object found in \"./Bootstrap.js\"\n\n      return new Promise((resolve, reject) => {\n         // find our initial <div appbuilder-portal=\"default\" /> tag\n         var div = document.querySelector(\"div[appbuilder-portal]\");\n         if (!div) {\n            div = document.createElement(\"Div\");\n            div.setAttribute(\"appbuilder-portal-autoenter\", \"true\");\n            div.setAttribute(\"appbuilder-portal-fullscreen\", \"true\");\n            document.getElementsByTagName(\"body\")[0].appendChild(div);\n         }\n         // let loading = document.createElement(\"Div\");\n         // loading.style.justifyContent = \"center\";\n         // loading.style.alignItems = \"center\";\n         // loading.style.display = \"flex\";\n         // loading.style.height = \"100vh\";\n         // loading.style.width = \"100%\";\n         // loading.style.position = \"absolute\";\n         // loading.style.top = \"0\";\n         // loading.style.left = \"0\";\n         // // loading.style.animation = \"spinning 1s ease infinite\";\n         //\n         // loading.innerHTML = `<svg style=\"opacity: 0.6; animation: spinning 1s ease infinite; width: 25px; height: 25px;\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><!--! Font Awesome Pro 6.2.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. --><path d=\"M304 48c0-26.5-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48s48-21.5 48-48zm0 416c0-26.5-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48s48-21.5 48-48zM48 304c26.5 0 48-21.5 48-48s-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48zm464-48c0-26.5-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48s48-21.5 48-48zM142.9 437c18.7-18.7 18.7-49.1 0-67.9s-49.1-18.7-67.9 0s-18.7 49.1 0 67.9s49.1 18.7 67.9 0zm0-294.2c18.7-18.7 18.7-49.1 0-67.9S93.7 56.2 75 75s-18.7 49.1 0 67.9s49.1 18.7 67.9 0zM369.1 437c18.7 18.7 49.1 18.7 67.9 0s18.7-49.1 0-67.9s-49.1-18.7-67.9 0s-18.7 49.1 0 67.9z\"/></svg>`;\n         // document.getElementsByTagName(\"body\")[0].appendChild(loading);\n         // const css = window.document.styleSheets[0];\n         // css.insertRule(\n         //    `@keyframes spinning {\n         //          0%   { transform: rotate(0deg); }\n         //          100% { transform: rotate(360deg); }\n         //    }`,\n         //    css.cssRules.length\n         // );\n         // make sure there is a div.id set:\n         if (!div.id) {\n            div.id = \"AppBuilder\";\n         }\n         BS.div(div);\n         BS.Config.settingsFromDiv(div); // set the autoEnter config\n         resolve();\n      });\n   },\n};\n","export default {\n   init: async (BS) => {\n      // BS {Bootstrap}\n      // The initial Bootstrap object found in \"./Bootstrap.js\"\n      try {\n         let configData = window.__AB_Config;\n         // Use `AB.Network` if available\n         // if (BS.AB) {\n         //    configData = await BS.AB.Network.get(\n         //       { url: \"/config\" },\n         //       { key: \"init_config\" }\n         //    );\n         // } else {\n         //    const headers = new Headers();\n         //    const token = BS.Config.setting(\"tenant\");\n         //    if (token) {\n         //       headers.append(\"tenant-token\", token);\n         //    }\n\n         //    //// DEV TESTING:\n         //    //// uncomment the api_sails/authTenant.js && index.ejs entries for these values\n         //    //// to test url prefix route resolutions:\n         //    // var prefix = AB.setting(\"prefix\");\n         //    // if (prefix) {\n         //    //    headers.append(\"Tenant-Test-Prefix\", prefix);\n         //    // }\n         //    //// DEV TESTING\n\n         //    const response = await fetch(\"/config\", { headers });\n         //    if (response.ok) {\n         //       const { data } = await response.json();\n         //       configData = data;\n         //    } else {\n         //       BS.error(`Error communicating with Server: ${response.status}`);\n         //    }\n         // }\n         // Hotfix 11/30/22, Since we no longer send settings on the div including in config.\n         BS.Config.settings(configData.settings);\n         delete configData.settings;\n         BS.Config.config(configData);\n      } catch (err) {\n         BS.error(\"initConfig: GET /config:\", err);\n         // HOTFIX: (12/15/2022) If the user visits /home directly /config is\n         // the first request made to sails and if we're not authenticated but\n         // using OKTA or CAS, we get a CORS error when trying to authenticate.\n         // Send the user to / to get authenticated correctly.\n         if (err.message == \"Failed to fetch\")\n            window.location.replace(window.location.origin);\n      }\n   },\n};\n","export default {\n   init: async (BS) => {\n      // BS {Bootstrap}\n      // The initial Bootstrap object found in \"./Bootstrap.js\"\n      try {\n         let configData = {\n            user: window.__AB_Config_User,\n            userReal: window.__AB_Config_User_Real,\n         };\n         BS.Config.configUser(configData);\n      } catch (err) {\n         BS.error(\"initConfig: GET /config:\", err);\n         // HOTFIX: (12/15/2022) If the user visits /home directly /config is\n         // the first request made to sails and if we're not authenticated but\n         // using OKTA or CAS, we get a CORS error when trying to authenticate.\n         // Send the user to / to get authenticated correctly.\n         if (err.message == \"Failed to fetch\")\n            window.location.replace(window.location.origin);\n      }\n   },\n};\n","// Include all CSS here\nimport \"./styles/loader.css\";\nimport \"./js/webix/webix.css\";\nimport \"./js/webix/components/gantt/gantt.min.css\";\nimport \"./js/webix/components/reports/reports.min.css\";\nimport \"./js/webix/components/query/query.min.css\";\nimport \"./js/webix/components/scheduler/scheduler.min.css\";\nimport \"./js/webix/components/querybuilder/querybuilder.min.css\";\nimport \"./js/webix/components/hint/hint.css\";\nimport \"./styles/ui.css\";\n// NOTE: keep Font Awesome AFTER webix css so webix wont\n// override our icon stylesimport \"./styles/font-awesome.min.css\";\nimport \"./styles/font-awesome.min.css\";\n\nimport performance from \"./utils/performance\";\nperformance.init();\n\nimport Bootstrap from \"./init/Bootstrap.js\";\n// Bootstrap is responsible for initializing the platform.\n\n// Import webix dynamically so we load it before we load other files that need it\nconst webixLoading = import(\n   /* webpackChunkName: \"webix\" */\n   /* webpackPreload: true */\n   \"./js/webix/webix.min.js\"\n).then(async (webix) => {\n   // Make sure webix is global object\n   window.webix = webix;\n   // Now load additional webix resources\n   import(\n      /* webpackChunkName: \"webix.resources\" */\n      /* webpackPreload: true */\n      \"./js/webix/webixResources\"\n   );\n});\n\n// __AB_preload should be created by our /config/preload script that gets\n// loaded on the initial page load.\nwindow.__AB_preload.then(() => {\n   Bootstrap.init(webixLoading).catch((err) => {\n      // This is a known error that has already been handled.\n      if (err.code == \"ENODEFS\") return;\n\n      var errorMSG = err.toString();\n\n      Bootstrap.alert({\n         type: \"alert-error\",\n         title: \"Error initializing Portal:\",\n         text: errorMSG,\n      });\n\n      Bootstrap.error(err);\n   });\n});\n","import { EventEmitter } from \"events\";\n\nclass ClassUI extends EventEmitter {\n   constructor(base, ids) {\n      super();\n\n      this.ids = {};\n      // {hash}\n      // An internal reference of webix.ids that we use to reference webix\n      // components.\n\n      // We can be called in several ways:\n      // 1) super(\"base_id\");\n      //    in this case we create a default this.ids.component = base_id;\n      //\n      // 2) super({ id1:\"id1\", id2:\"id2\", ... })\n      //    in this case we create a this.ids = base;\n      //    we look for a this.ids.base || or this.ids.component and use that\n      //    as our \"base\" reference.\n      //\n      // 3) super(base, ids);\n      //\n      if (base) {\n         if (\"string\" == typeof base) {\n            this.ids = {\n               component: base,\n            };\n         } else {\n            this.ids = base;\n            base = this.ids.base ?? this.ids.component;\n         }\n      }\n\n      // a shortcut way to enter the ids is to simply put the keys:\n      // {\n      //    form:\"\",\n      //    form_button:\"\",\n      //    ...\n      // }\n      // so we need to make sure the actual values are set according to\n      // `{base}_{key}` format.\n      //\n      if (ids) {\n         Object.keys(ids).forEach((k) => {\n            if (ids[k]) {\n               return (this.ids[k] = ids[k]);\n            }\n            this.ids[k] = `${base}_${k}`;\n         });\n      }\n\n      // verify this.ids are properly set:\n      Object.keys(this.ids).forEach((k) => {\n         this.ids[k] = this.ids[k] || `${base}_${k}`;\n      });\n\n      // and make sure there is a .component set:\n      this.ids.component = this.ids.component || base;\n   }\n\n   /**\n    * @method CYPRESS_REF()\n    * Attach a cypress \"data-cy\" attribute to the given element.  This is used\n    * for writing E2E tests and how we directly identify a webix widget we are\n    * referencing for our tests.\n    * @param {webix.object|webix.node|html.element} el\n    *        The element we are attempting to attach the data attribute to\n    *        There are a number of ways we might be sending this element\n    *        on a onAfterRender() callback on a Webix Object\n    *        by gathering the nodes of a Webix object directly\n    * @param {string} id\n    *        [optional] the value of the data-cy attribute\n    */\n   static CYPRESS_REF(el, id) {\n      if (!el) return;\n\n      id = id || el.config?.id;\n\n      // is this a webix object?\n      if (el.getInputNode) {\n         var node = el.getInputNode();\n         if (node) {\n            node.setAttribute(\"data-cy\", id);\n            return;\n         }\n      }\n\n      // this element has a webix $view\n      if (el.$view) {\n         el.$view.setAttribute(\"data-cy\", id);\n         return;\n      }\n\n      // this is probably a straight up DOM element:\n      el.setAttribute?.(\"data-cy\", id);\n   }\n\n   /**\n    * attach()\n    * cause this UI object to attach itself to a given DIV.ID\n    * of an existing HTML object.\n    * @param {string} id\n    *        the <DIV ID=\"id\"> value of the HTML element to display this UI\n    *        inside.\n    * @return {Webix View}\n    *        returns an instance of the Webix UI object generated by our\n    *        .ui() description.\n    */\n   attach(id) {\n      var ui = this.ui();\n      if (ui && id) {\n         ui.container = id;\n      }\n\n      this.el = webix.ui(ui);\n      return this.el;\n   }\n\n   changePage(pageId) {\n      this.emit(\"changePage\", pageId);\n   }\n\n   hide() {\n      if (this.ids?.component) {\n         $$(this.ids.component).hide();\n      }\n   }\n\n   label(key, ...params) {\n      if (this.AB) {\n         return this.AB.Multilingual.label(key, key, ...params);\n      }\n      console.error(\".labels() called before .AB was set!\");\n      return key;\n   }\n\n   /**\n    * ui()\n    * return a Webix user interface definition for this UI component.\n    * This should be just the json description, not an active instance.\n    * @return {obj}\n    */\n   ui() {\n      console.error(\n         \"ClassUI.ui(): it is expected that sub classes of ClassUI will implement their own ui() method.\"\n      );\n   }\n\n   show() {\n      if (this.ids?.component) {\n         $$(this.ids.component)?.show();\n      }\n   }\n\n   get WARNING_ICON() {\n      return `<span class=\"webix_sidebar_dir_icon webix_icon fa fa-warning pulseLight smalltext\"></span>`;\n   }\n\n   get WARNING_ICON_DARK() {\n      return this.WARNING_ICON.replace(\"pulseLight\", \"pulseDark\");\n   }\n}\n\nexport default ClassUI;\n","/**\n * Performance - utility to track performance of the web platform\n * Written initally for sentry, but could be extended to support others\n * tracking tools.\n * Also supports the User timing API for lighthouse / local dev\n */\n\nimport * as Sentry from \"@sentry/browser\";\n/* These come from the DefinePlugin in webpack  */\nlet webpackMode = \"development\";\nlet version, dsn;\ntry {\n   /* global WEBPACK_MODE SENTRY_DSN VERSION */\n   webpackMode = WEBPACK_MODE;\n   dsn = SENTRY_DSN;\n   version = VERSION;\n} catch (err) {\n   console.warn(\n      \"Error reading from webpack, check the DefinePlugin is working correctly\",\n      err\n   );\n}\n\nconst mode = dsn\n   ? \"sentry\"\n   : webpackMode === \"development\"\n   ? \"browser\"\n   : undefined;\n\n// Following are performance tracking sources, will be accessed through the\n// PerfomanceInterface\n\n/*\n * Default - performance tracking disabled\n */\nclass Performance {\n   init() {}\n   error() {}\n   mark() {}\n   measure() {}\n   notify(domain, error, info) {\n      console.groupCollapsed(`Notify ${domain}: ${error?.message ?? \"\"}`);\n      console.error(error);\n      console.log(\"info\", info);\n      console.groupEnd();\n   }\n   setContext() {}\n}\n\n/*\n * Sentry perfomance tracking\n */\nclass SentryPerformance extends Performance {\n   constructor() {\n      super();\n      this.childSpans = {};\n   }\n\n   init() {\n      Sentry.init({\n         dsn,\n         environment: webpackMode,\n         release: version,\n         integrations: [new Sentry.BrowserTracing()],\n         normalizeDepth: 5,\n         sampleRate: 0.05,\n         tracesSampleRate: 0.05,\n      });\n   }\n\n   error(err) {\n      Sentry.captureException(err);\n   }\n\n   mark(key, context = {}) {\n      context.name = key;\n      if (!this.mainSpan) {\n         this.mainSpanKey = key;\n         this.mainSpan = Sentry.startTransaction(context);\n      } else {\n         this.childSpans[key] = this.mainSpan.startChild(context);\n      }\n   }\n\n   measure(key) {\n      if (this.mainSpanKey === key) {\n         this.mainSpan.finish();\n         delete this.mainSpan;\n         delete this.mainSpanKey;\n         this.childSpans = {};\n      } else {\n         this.childSpans[key]?.finish?.();\n         delete this.childSpans[key];\n      }\n   }\n\n   notify(domain, error, info) {\n      const scope = new Sentry.Scope();\n      // Mark builder alerts as lower level in sentry\n      if (domain == \"builder\") scope.setLevel(\"warning\");\n      scope.setTag(\"domain\", domain);\n      scope.setContext(\"info\", info);\n      Sentry.captureException(error, scope);\n      // Also log to console:\n      super.notify(domain, error, info);\n   }\n\n   setContext(key, data) {\n      switch (key) {\n         case \"tags\":\n            Sentry.setTags(data);\n            break;\n         case \"user\":\n            Sentry.setUser(data);\n            break;\n         case \"breadcrumb\":\n            Sentry.addBreadcrumb(data);\n            break;\n         default:\n            Sentry.setContext(key, data);\n            break;\n      }\n   }\n}\n\n/*\n * Browser Performance tracking - uses the User Timing API\n */\nclass BrowserPerformnace extends Performance {\n   error(err) {\n      console.error(err);\n   }\n\n   mark(key, context) {\n      if (!this.mainSpanKey) {\n         this.mainSpanKey = key;\n      }\n      window.performance.mark(key, { detail: context });\n   }\n\n   measure(key) {\n      try {\n         const mark = window.performance.getEntriesByName(key, \"mark\")[0];\n         const measure = window.performance.measure(key, {\n            start: key,\n            detail: mark?.detail,\n         });\n         if (this.mainSpanKey === key) {\n            console.groupCollapsed(\n               `${measure.name} finished in ${measure.duration} ms`\n            );\n            const entries = window.performance.getEntriesByType(\"measure\");\n            if (entries.length > 1)\n               console.table(entries, [\"name\", \"duration\", \"startTime\"]);\n            else console.log(measure);\n            console.groupEnd();\n            delete this.mainSpanKey;\n            window.performance.clearMarks();\n            window.performance.clearMeasures();\n         }\n      } catch (e) {\n         // console.warn(e);\n      }\n   }\n}\n\n/**\n * hash of performance tracking sources\n */\nconst sources = {\n   sentry: SentryPerformance,\n   browser: BrowserPerformnace,\n};\n\n/**\n * Performance Interface that the rest of the app uses. Routes the calls to the\n * configured performance tracking source\n */\nclass PerformanceInterface {\n   constructor(mode) {\n      this.mode = mode;\n      this.initialized = false;\n      this._source = new (sources[mode] ?? Performance)();\n   }\n\n   /**\n    * initialize performance, should be called early in init\n    */\n   init() {\n      if (this.initialized) return;\n      this._source.init();\n      // console.log(\"Performance.init() complete\", mode);\n      this.initialized = true;\n   }\n\n   /**\n    * Capture an error\n    * @param {Error} error\n    */\n   error(err) {\n      this._source.error(err);\n   }\n\n   /**\n    * Start a performance tracking span. End by calling measure() with the same key.\n    * The first mark will be consider a parent, and subsequent marks become\n    * children until the initial mark is measured.\n    * @param {string} key unique key to track\n    * @param {object} [context] any additional context\n    */\n   mark(key, context) {\n      this._source.mark(key, context);\n   }\n\n   /**\n    * End a performance tracking span\n    * @param {string} key should match an existing mark\n    */\n   measure(key) {\n      this._source.measure(key);\n   }\n\n   /**\n    * Implements AB.notify which will log differently depending on our tracking\n    * option\n    * @param {string} domain which group of people we are sending a notification to.\n    * @param {Error} error An error object generated at the point of issue.\n    * @param {json} info Additional related information concerning the issue.\n    */\n   notify(domain, error, info) {\n      this._source.notify(domain, error, info);\n   }\n\n   /**\n    * Set additional context to tracing/error events\n    * @param {string} key type of context (tag, user, etc)\n    * @pram {object} data\n    */\n   setContext(key, data) {\n      this._source.setContext(key, data);\n   }\n}\n\n// singleton\nlet performanceInterface;\n\n/**\n * Get/create the shared performance instance\n * @returns {PerformanceInterface}\n */\nfunction getPerformance() {\n   if (!performanceInterface)\n      performanceInterface = new PerformanceInterface(mode);\n   return performanceInterface;\n}\n\nexport default getPerformance();\n","__webpack_require__.O(0, [143], () => {\n\t__webpack_require__.E(612);\n\t__webpack_require__.E(944);\n}, 5);"],"names":["appListRowHeight","buttonWidthLarge","buttonWidthMedium","buttonWidthSmall","buttonWidthExtraSmall","tabWidthLarge","tabWidthMedium","tabWidthSmall","tabWidthExtraSmall","columnWidthXLarge","columnWidthLarge","columnWidthMedium","columnWidthSmall","columnWidthExtraSmall","xSmallSpacer","smallSpacer","mediumSpacer","largeSpacer","xLargeSpacer","xxLargeSpacer","xxxLargeSpacer","appListSpacerRowHeight","appListSpacerColMinWidth","appListSpacerColMaxWidth","objectWorkspaceColWidth","labelWidthSmall","labelWidthMedium","labelWidthLarge","labelWidthXLarge","labelWidthXXLarge","labelWidthXXXLarge","labelWidthCheckbox","hideMobile","settingsDefault","configDefaults","site","appbuilder","networkType","networkNumRetries","urlCoreServer","window","location","origin","storage","encrypted","constructor","this","_config","_configUser","_settings","config","json","Object","keys","forEach","k","defaultsDeep","configInbox","inbox","inboxMeta","configUser","setting","key","value","settingsFromDiv","div","d","val","getAttribute","split","pop","settings","definitions","error","console","labelConfig","labels","languageConfig","languages","metaConfig","meta","plugins","inboxConfig","inboxMetaConfig","siteConfig","tenantConfig","tenant","uiSettings","innerWidth","userConfig","user","userReal","PortalLoading","ClassUI","super","ui","id","view","label","init","AB","Promise","resolve","show","$$","PortalAuthLoginForm","self","L","Label","css","cols","rows","width","padding","template","borderless","height","type","background","elementsConfig","bottomPadding","elements","placeholder","name","attributes","validate","webix","rules","isEmail","invalidMessage","validateEvent","isNotEmpty","margin","paddingX","hotkey","click","form","hide","values","getValues","Network","post","url","data","catch","err","log","on","onAfterRender","hidden","emit","message","$errMsg","setHTML","context","response","code","status","reload","privacyPolicy","Config","setValues","pretext","link","PortalAuthLoginResetPassword","Account","email","border","color","v","length","getValue","password","async","params","Multilingual","PortalAuthLoginResetRequest","autoheight","options","icon","autowidth","href","$tenant","tenants","newOptions","t","opt","uuid","title","push","define","tID","Tenant","find","o","text","alert","ok","PortalAuthLogin","animate","allInits","all","defaultView","PortalAuth","ActivePortal","cells","then","pathname","performance","navigation","redirectCount","replace","ClassUIPage","containerID","page","App","initialized","pageStack","pageComponents","changePageEventIds","isRoot","render","showPage","myUI","application","datacollectionsIncluded","dc","renderPage","parView","getParentView","showBatch","initEvents","pageID","needToReloadPage","updatePageEventId","rootPageId","updateDatacollectionEventId","datacollectionId","webixLocale","setTimeout","i18n","setLocale","component","myContainer","popupTemplate","modal","position","resize","parseInt","popupWidth","popupHeight","head","align","button","queryView","dataCy","getInputNode","setAttribute","body","scroll","oldView","destructor","removeView","e","batch","oldPage","addView","pages","subpage","container","eventID","attachEvent","detachEvent","viewId","showPageID","activeID","activeUI","getChildViews","filter","onShow","Error","PortalWorkInboxAccordion","app","idUnitList","header","collapsed","uniteBy","templateHeader","headerHeight","obj","items","select","list","selectedItem","getItem","task","unitlist","src","formComponents","formData","onButton","processItem","each","a","getItemNode","notify","developer","info","unitID","parent","i","refresh","remove","getSelectedId","count","unitList","put","expand","initFormIOPreview","custom","formiopreview","PortalWorkInboxTaskwindow","idTaskMultiview","idTaskTitle","idTaskPager","state","left","maxWidth","top","maxHeight","unselectAll","size","group","master","onBeforePageChange","new_page","clearTask","views","taskHolder","index","setValue","blockEvent","getActiveId","unblockEvent","showTasks","selectedItemName","PortalWorkInbox","entries","processLookupHash","appLookupHash","appAccordionLists","multi","get","initDelayed","allAppAccordions","lang","language","createAccordian","addItem","processes","getProcessList","accordion","parse","item","createNew","definition","ids","appId","translate","appAccordion","p","process","uniteLabel","translations","entry","language_code","PortalWorkUserProfileWindow","imageUser","uploaderImage","formUserInfo","dataEmail","editModeEmail","buttonEditModeEmail","editModeButtonsEmail","dataLanguage","editModeLanguage","buttonEditModeLanguage","editModeButtonsLanguage","formNewPassword","fieldNewPassword","systemNotification","advanceOptions","acctImageID","imageID","imgTemplate","imgErrorDiv","onItemClick","zIndex","algin","inputName","apiOnly","multiple","accept","upload","objectUser","onFileUpload","$uploaderImage","$imageUser","disable","model","update","image_id","enable","onFileUploadError","inputWidth","$dataEmail","$editModeEmail","$buttonEditModeEmail","$editModeButtonsEmail","$dataLanguage","$editModeLanguage","$buttonEditModeLanguage","$editModeButtonsLanguage","getLanguages","languageCodeToWord","languageCode","$button","$advanceOptions","isVisible","$formNewPassword","$thisButton","clear","$systemNotification","sendEmailNotifications","Language","objectLanguage","findAll","language_label","$formUserInfo","populateLanguage","username","populate","myClass","userIcon","userName","switchBack","switchBackReplacer","close","switchUser","userID","headless","userList","delete","mainUserID","map","u","switchedUserID","isSwitcherood","PortalWorkUserQRWindow","classQrImageDom","$view","getElementsByClassName","onload","adjust","PortalWorkUserMobileQR","description","instructions","qrcode","taskPager","load","$title","$desc","$qrcode","PortalAccessLevelManager","accessLevels","accessLevelManagerBody","roles","newRolePopup","role","indexOf","buildAccessAccordion","collapse","portal","AppState","lastSelectedApp","translation","applicationByID","isAccessManaged","existingRoles","pageId","pageContainers","f","isRoleAccessManager","accessManagers","useRole","manageUsers","confirm","tree","mainPages","branch","access","updateAccessLevels","updateItem","itemToRemove","splice","toggleParent","element","parentElem","getParent","$parent","editable","editor","editValue","threeState","common","getAccessLevelTree","onClick","externalLink","event","target","tabView","tab","showIt","setInterval","clearInterval","onAfterEditStop","ignoreUpdate","old","onDataUpdate","eachSubItem","child","childData","parentBranch","getParentId","parentData","newAccordionItem","r","WARNING_ICON","Webix","TooltipControl","addTooltip","openAll","TreeCollection","addPage","parentId","accessLevel","add","defaults","subPages","childPage","childIndex","tabIndex","tabViewIndex","tIndex","PortalTranslationTool","containerDomID","translationToolBody","labelWidth","labelAlign","onChange","newVal","oldVal","buildTranslationAccordion","objectsIncluded","hintsIncluded","bottomLabel","languageList","ready","protoUI","EditAbility","tutorials","hints","objects","objectTree","tooltip","onAfterLoad","showProgress","extend","ProgressBar","getTranslationToolObjectsTree","propName","field","objectId","fieldId","objectByID","fields","option","languageDefault","hasLang","trans","save","progressBar","total","completed","viewTree","pageView","getTranslationToolViewsTree","order","buttonId","tutorialTree","getTranslationToolTutorialsTree","hint","h","step","hintId","_steps","objectsAccordionItem","viewsAccordionItem","hintsAccordionItem","getTranslations","domId","missingHint","missingTranslate","translateLang","hintLang","hintLabel","valueLabel","hintPrefix","translatePrefix","tabicon","labelIndex","menu","menuIndex","menuItem","menuItemIndex","formIndex","formInput","formInputIndex","property","chart","chartIndex","viewIndex","addBranch","object","fieldIndex","optionIndex","lastField","firstField","stepIDs","PortalTutorialManager","tutorialStepsManager","createStep","Array","isArray","stepUI","move","tutorialSettings","tutorialManagerBody","_hints","deleteHint","ev","result","hintID","destroy","fail","hintItem","steps","newTutorialPopup","lastPages","getText","trim","createTutorial","valid","disabled","el","active","currentTutorial","getViewOptions","hintIDs","pageTabWindow","document","removeEventListener","handleRightClick","focusWindow","classList","updateStepsUI","viewsToRemove","addHighlightClass","currentTarget","formVals","stepId","querySelector","removeHighlightClass","addStepBelow","focusElements","querySelectorAll","addEventListener","class","moveStep","minWidth","deleteStep","stepRemove","direction","currPosition","addOption","depth","indent","pageIndex","viewID","viewLabel","hintNew","unshift","hintView","stepNew","preventDefault","stopPropagation","getCy","dataset","cy","parentElement","PortalWork","busy","navSideBar","sidebarMenu","firstID","getFirstId","popup","onAfterSelect","selectApplication","storageKey","allApplications","applications","isWebApp","isAccessibleForRoles","rolesAll","concat","menu_data","uiSideBarMenuEntry","relay","sidebarResize","userMenuOptions","isMobile","m","canSwitcheroo","networkWarnings","no_network","priority","no_server","_connectionCheck","slow","networkWarningClear","navigator","onLine","networkWarningDisplay","logout","mobileApp","Storage","abApplication","getUserAccess","DefaultPage","$sideBar","foundMenuEntry","sidebarMenuEntryByID","defaultPageID","allPlaceholders","j","keepViews","Class","ABComponent","containerInit","cont","refreshSettingsMenu","badge","queueCount","isNetworkSlow","isSlow","eid","warning","buttonText","replaceAll","html","addStyle","removeStyle","row","pageButtons","firstPage","activePageID","saveState","pbLabel","abPage","pageButton","selectedPage","sideBar","_saveTimeoutID","clearTimeout","set","pageUI","menuID","getNextId","sideBarHeight","settingsMenuOptions","isManager","useAccount","account","isTranslationManaged","translationManagers","isTutorialManaged","tutorialManagers","Portal","ShownPortal","portalWorkReady","fullscreen","showPortal","isAuthenticated","redirect","showAuthPortal","showDefaultView","showWorkPortal","parts","UI","hiddenElements","portalShow","entryLabel","textClickToEnter","portalHide","ErrorNoDefsUI","switcherooUser","preloadMessage","EventEmitter","setMaxListeners","_div","_plugins","_ui","webixLoading","loadABFactory","getElementById","innerHTML","destroyPreloadUI","networkTestWorker","Worker","URL","networkIsSlow","BS","onmessage","category","level","op","reject","createElement","getElementsByTagName","appendChild","configData","__AB_Config","initConfig","__AB_Config_User","__AB_Config_User_Real","initUser","userInfo","JSON","authType","assign","__AB_Plugins","addPlugin","default","ABFactory","registerNetworkTestWorker","apply","currentLanguage","pluginLoadLabels","locales","en","th","prototype","hasOwnProperty","call","CustomScroll","plugin","__AB_preload","errorMSG","toString","base","static","node","attach","changePage","WARNING_ICON_DARK","version","dsn","webpackMode","warn","mode","undefined","Performance","mark","measure","domain","groupCollapsed","groupEnd","setContext","sources","sentry","childSpans","environment","release","integrations","normalizeDepth","sampleRate","tracesSampleRate","mainSpan","startChild","mainSpanKey","finish","scope","setLevel","setTag","browser","detail","getEntriesByName","start","duration","getEntriesByType","table","clearMarks","clearMeasures","performanceInterface","_source","__webpack_require__","O","E"],"sourceRoot":""}